- en: '*Chapter 9*: Image Scanning in DevOps Pipelines'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：DevOps 流水线中的图像扫描'
- en: It is a good practice to find defects and vulnerabilities in the early stages
    of the development life cycle. Identifying issues and fixing them in the early
    stages helps improve the robustness and stability of an application. It also helps
    to reduce the attack surface in the production environment. Securing Kubernetes
    clusters has to cover the entire DevOps flow. Similar to hardening container images
    and restricting powerful security attributes in the workload manifest, image scanning
    can help improve the security posture on the development side. However, image
    scanning can definitely go beyond that.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发生命周期的早期阶段发现缺陷和漏洞是一个好的做法。在早期阶段识别问题并加以修复有助于提高应用程序的稳健性和稳定性。它还有助于减少生产环境中的攻击面。保护
    Kubernetes 集群必须覆盖整个 DevOps 流程。与加固容器图像和在工作负载清单中限制强大的安全属性类似，图像扫描可以帮助改善开发方面的安全姿态。但是，图像扫描绝对可以做得更多。
- en: In this chapter, first, we will introduce the concept of image scanning and
    vulnerabilities, then we'll talk about a popular open source image scanning tool
    called **Anchore Engine** and show you how you can use it to do image scanning.
    Last but not least, we will show you how image scanning can be integrated into
    CI/CD pipelines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，首先，我们将介绍图像扫描和漏洞的概念，然后我们将讨论一个名为 Anchore Engine 的流行开源图像扫描工具，并向您展示如何使用它进行图像扫描。最后但同样重要的是，我们将向您展示如何将图像扫描集成到
    CI/CD 流水线中。
- en: After this chapter, you should be familiar with the concept of image scanning
    and feel comfortable using Anchore Engine to scan images. More importantly, you
    need to start thinking of a strategy for integrating image scanning into your
    CI/CD pipeline if you haven't so far.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，您应该熟悉图像扫描的概念，并且可以放心地使用 Anchore Engine 进行图像扫描。更重要的是，如果您还没有这样做，您需要开始考虑将图像扫描集成到您的
    CI/CD 流水线中的策略。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing container images and vulnerabilities
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍容器图像和漏洞
- en: Scanning images with Anchore Engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Anchore Engine 扫描图像
- en: Integrating image scanning into the CI/CD pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图像扫描集成到 CI/CD 流水线中
- en: Introducing container images and vulnerabilities
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍容器图像和漏洞
- en: Image scanning can be used to identify vulnerabilities or violations of best
    practices (depending on the image scanner's capability) inside an image. Vulnerabilities
    may come from application libraries or tools inside the image. Before we jump
    into image scanning, it would be good to know a little bit more about container
    images and vulnerabilities.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图像扫描可用于识别图像内部的漏洞或违反最佳实践（取决于图像扫描器的能力）。漏洞可能来自图像内的应用程序库或工具。在我们开始图像扫描之前，最好先了解一些关于容器图像和漏洞的知识。
- en: Container images
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器图像
- en: 'A container image is a file that bundles the microservice binary, its dependency,
    configurations of the microservice, and so on. Nowadays, application developers
    not only write code to build microservices but also need to build an image to
    containerize an application. Sometimes application developers may not follow the
    security best practices to write code or download libraries from uncertified sources.
    This means vulnerabilities could potentially exist in your own application or
    the dependent packages that your application relies on. Still, don''t forget the
    base image you use, which might include another set of vulnerable binaries and
    packages. So first, let''s look at what an image looks like:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 容器镜像是一个文件，其中包含了微服务二进制文件、其依赖项、微服务的配置等。如今，应用程序开发人员不仅编写代码来构建微服务，还需要构建一个镜像来容器化应用程序。有时，应用程序开发人员可能不遵循安全最佳实践来编写代码，或者从未经认证的来源下载库。这意味着您自己的应用程序或应用程序依赖的包可能存在漏洞。但不要忘记您使用的基础镜像，其中可能包含另一组脆弱的二进制文件和软件包。因此，首先让我们看一下镜像的样子：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding output shows the file layer of the image `kaizheh/anchore-cli`
    (show full commands with the `--no-trunc` flag). You may notice that each file
    layer has a corresponding command that creates it. After each command, a new file
    layer is created, which means the content of the image has been updated, layer
    by layer (basically, Docker works on copy-on-write), and you can still see the
    size of each file layer. This is easy to understand: when you install new packages
    or add files to the base, the image size increases. The `missing` image ID is
    a known issue because Docker Hub only stores the digest of the leaf layer and
    not the intermediate ones in the parent image. However, the preceding image history
    does tell how the image was in the Dockerfile, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示了镜像`kaizheh/anchore-cli`的文件层（使用`--no-trunc`标志显示完整命令）。您可能注意到每个文件层都有一个创建它的相应命令。每个命令之后都会创建一个新的文件层，这意味着镜像的内容已经逐层更新（基本上，Docker是按写时复制工作的），您仍然可以看到每个文件层的大小。这很容易理解：当您安装新的软件包或向基础添加文件时，镜像的大小会增加。`missing`镜像ID是一个已知的问题，因为Docker
    Hub只存储叶层的摘要，而不是父镜像中的中间层。然而，上述镜像历史确实说明了镜像在Dockerfile中的情况，如下所示：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The workings of the preceding Dockerfile are described as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述Dockerfile的工作原理描述如下：
- en: To build the `kaizheh/anchore-cli` image, I chose to build from `ubuntu`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`kaizheh/anchore-cli`镜像时，我选择从`ubuntu`构建。
- en: Then, I installed the packages `python-pip`, `jq`, and `vim`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我安装了`python-pip`，`jq`和`vim`软件包。
- en: Next, I installed `anchore-cli` using `pip`, which I installed in the previous
    step.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我使用`pip`安装了`anchore-cli`，这是我在上一步中安装的。
- en: Then I configured the environment variable path.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我配置了环境变量路径。
- en: Lastly, I copied a shell script, `demo.sh`, to the image.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我将一个名为`demo.sh`的shell脚本复制到了镜像中。
- en: 'The following figure shows the image file layers mapped to the Dockerfile instructions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了镜像文件层映射到Dockerfile指令：
- en: '![Figure 9.1 – Dockerfile instructions map to image file layers'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 - Dockerfile指令映射到镜像文件层'
- en: '](image/B15566_09_001.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_09_001.jpg)'
- en: Figure 9.1 – Dockerfile instructions map to image file layers
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 - Dockerfile指令映射到镜像文件层
- en: You don't have to remember what has been added in each layer. Ultimately, a
    container image is a compressed file that contains all the binaries and packages
    required for your application. When a container is created from an image, the
    container runtime extracts the image and then creates a directory purposely for
    the extracted content of the image, then configures chroot, cgroup, Linux namespaces,
    Linux capabilities, and so on for the entry point application in the image before
    launching it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必记住每一层添加了什么。最终，容器镜像是一个压缩文件，其中包含了应用程序所需的所有二进制文件和软件包。当从镜像创建容器时，容器运行时会提取镜像，然后为镜像的提取内容创建一个目录，然后在启动之前为镜像中的入口应用程序配置chroot、cgroup、Linux命名空间、Linux权限等。
- en: Now you know the magic done by the container runtime to launch a container from
    an image. But you are still not sure whether your image is vulnerable so that
    it could easily be hacked. Let's look at what image scanning really does.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了容器运行时启动容器的魔法。但你仍然不确定你的镜像是否存在漏洞，以至于可以轻易被黑客攻击。让我们看看镜像扫描到底是做什么。
- en: Detecting known vulnerabilities
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测已知漏洞
- en: People make mistakes and so do developers. If flaws in an application are exploitable,
    those flaws become security vulnerabilities. There are two types of vulnerability—one
    is those that have been discovered, while the other type remains unknown. Security
    researchers, penetration testers, and others work very hard to look for security
    vulnerabilities so that corresponding fixes reduce the potential for compromise.
    Once security vulnerabilities have been patched, developers apply patches as updates
    to the application. If these updates are not applied on time, there is a risk
    of the application getting compromised. It would cause huge damage to companies
    if these known security issues were exploited by malicious guys.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 人们会犯错误，开发人员也一样。如果应用程序中的缺陷是可以利用的，这些缺陷就会成为安全漏洞。漏洞有两种类型，一种是已经被发现的，而另一种则是未知的。安全研究人员、渗透测试人员等都在努力寻找安全漏洞，以减少潜在的妥协。一旦安全漏洞被修补，开发人员会将补丁作为应用程序的更新。如果这些更新没有及时应用，应用程序就有被攻击的风险。如果这些已知的安全问题被恶意人员利用，将给公司造成巨大损失。
- en: In this section, we're not going to talk about how to hunt for security vulnerabilities.
    Let the security researchers and ethical hackers do their job. Instead, we will
    talk about how to discover and manage those known vulnerabilities uncovered by
    image scanning tools by performing vulnerability management. In addition, we also
    need to know how vulnerabilities are tracked and shared in the community. So,
    let's talk about CVE and NVD.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们不会讨论如何寻找安全漏洞。让安全研究人员和道德黑客去做他们的工作。相反，我们将讨论如何通过执行漏洞管理来发现和管理那些由镜像扫描工具发现的已知漏洞。此外，我们还需要了解漏洞是如何在社区中跟踪和共享的。因此，让我们谈谈CVE和NVD。
- en: Introduction to vulnerability databases
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞数据库简介
- en: '**CVE** stands for **Common Vulnerability and Exposure**. When a vulnerability
    is identified, there is a unique ID assigned to it with a description and a public
    reference. Usually, there is impacted version information inside the description.
    This is one CVE entry. Every day, there are hundreds of vulnerabilities that are
    identified and get a unique CVE ID assigned by MITRE.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: CVE代表通用漏洞和暴露。当发现漏洞时，会为其分配一个唯一的ID，并附有描述和公共参考。通常，描述中会包含受影响的版本信息。这就是一个CVE条目。每天都会发现数百个漏洞，并由MITRE分配唯一的CVE
    ID。
- en: '**NVD** stands for **National Vulnerability Database**. It synchronizes the
    CVE list. Once there is a new update to the CVE list, the new CVE will show up
    in NVD immediately. Besides NVD, there are some other vulnerability databases
    available, such as Synk.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: NVD代表国家漏洞数据库。它同步CVE列表。一旦CVE列表有新的更新，新的CVE将立即显示在NVD中。除了NVD，还有一些其他的漏洞数据库可用，比如Synk。
- en: 'To explain the magic done by an image scanning tool in a simple way: the image
    scanning tool extracts the image file, then looks for all the available packages
    and libraries in the image and looks up their version within the vulnerability
    database. If there is any package whose version matches with any of the CVE''s
    descriptions in the vulnerability database, the image scanning tool will report
    that there is a vulnerability in the image. You shouldn''t be surprised if there
    are vulnerabilities found in a container image. So, what are you going to do about
    them? The first thing you need to do is stay calm and don''t panic.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，图像扫描工具的魔法是：图像扫描工具提取图像文件，然后查找图像中所有可用的软件包和库，并在漏洞数据库中查找它们的版本。如果有任何软件包的版本与漏洞数据库中的任何CVE描述匹配，图像扫描工具将报告图像中存在漏洞。如果在容器图像中发现漏洞，您不应感到惊讶。那么，您打算怎么处理呢？您需要做的第一件事是保持冷静，不要惊慌。
- en: Managing vulnerabilities
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞管理
- en: When you have a vulnerability management strategy, you won't panic. In general,
    every vulnerability management strategy will start with understanding the exploitability
    and impact of the vulnerability based on the CVE detail. NVD provides a vulnerability
    scoring system also known as **Common Vulnerability Scoring System** (**CVSS**)
    to help you better understand how severe the vulnerability is.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有漏洞管理策略时，就不会惊慌。一般来说，每个漏洞管理策略都将从理解漏洞的可利用性和影响开始，这是基于CVE详细信息的。NVD提供了一个漏洞评分系统，也被称为通用漏洞评分系统（CVSS），以帮助您更好地了解漏洞的严重程度。
- en: 'The following information needs to be provided to calculate the vulnerability
    score based on your own understanding of the vulnerability:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您对漏洞的理解，需要提供以下信息来计算漏洞分数：
- en: '**Attack vector**: Whether the exploit is a network attack, local attack, or
    physical attack'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击向量：利用程序是网络攻击、本地攻击还是物理攻击
- en: '**Attack complexity**: How hard it is to exploit the vulnerability'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击复杂性：利用漏洞的难度有多大
- en: '**Privileges required**: Whether the exploit requires any privileges, such
    as root or non-root'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需权限：利用程序是否需要任何权限，如root或非root
- en: '**User interaction**: Whether the exploit requires any user interaction'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户交互：利用程序是否需要任何用户交互
- en: '**Scopes**: Whether the exploit will lead to cross security domain'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围：利用程序是否会导致跨安全域
- en: '**Confidentiality impact**: How much the exploit impacts the confidentiality
    of the software'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机密性影响：利用程序对软件机密性的影响程度
- en: '**Integrity impact**: How much the exploit impacts the integrity of the software'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整性影响：利用程序对软件完整性的影响程度
- en: '**Availability impact**: How much the exploit impacts the availability of the
    software'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性影响：利用程序对软件可用性的影响程度
- en: 'The CVSS calculator is available at [https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: CVSS计算器可在[https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator)找到：
- en: '![Figure 9.2 – CVSS calculator'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 - CVSS计算器'
- en: '](image/B15566_09_002.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_09_002.jpg)'
- en: Figure 9.2 – CVSS calculator
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 - CVSS计算器
- en: 'Though the input fields in the preceding screenshot only cover the base score
    metrics, they serve as fundamental factors that decide how critical the vulnerability
    is. There are two other metrics that can be used to evaluate the criticalness
    of the vulnerability but we''re not going to cover them in this section. According
    to CVSS (version 3), there are four ranges of score:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面截图中的输入字段只涵盖了基本分数指标，但它们作为决定漏洞严重程度的基本因素。还有另外两个指标可以用来评估漏洞的严重程度，但我们不打算在本节中涵盖它们。根据CVSS（第3版），分数有四个范围：
- en: '**Low**: 0.1-3.9'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低**: 0.1-3.9'
- en: '**Medium**: 4-6.9'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中等**: 4-6.9'
- en: '**High**: 7-8.9'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高**: 7-8.9'
- en: '**Critical**: 9-10'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键**: 9-10'
- en: 'Usually, image scanning tools will provide the CVSS score when they report
    any vulnerabilities in an image. There is at least one more step for the vulnerability
    analysis before you take any response action. You need to know that the severity
    of the vulnerability may be influenced by your own environment as well. Let me
    give you a few examples:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，图像扫描工具在报告图像中的任何漏洞时会提供CVSS分数。在采取任何响应措施之前，漏洞分析至少还有一步。你需要知道漏洞的严重程度也可能受到你自己环境的影响。让我举几个例子：
- en: The vulnerability is only exploitable in Windows, but the base OS image is not
    Windows.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞只能在Windows中被利用，但基本操作系统镜像不是Windows。
- en: The vulnerability can be exploited from network access but the processes in
    the image only send outbound requests and never accept inbound requests.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞可以从网络访问中被利用，但图像中的进程只发送出站请求，从不接受入站请求。
- en: The preceding scenarios show good examples that the CVSS score is not the only
    factor that matters. You should focus on the vulnerabilities that are both critical
    and relevant. However, our recommendation is still to prioritize vulnerabilities
    wisely and fix them as soon as possible.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述情景展示了CVSS分数并不是唯一重要的因素。你应该专注于那些既关键又相关的漏洞。然而，我们的建议仍然是明智地优先处理漏洞，并尽快修复它们。
- en: If there is a vulnerability found in an image, it is always better to fix it
    early. If vulnerabilities are found in the development stage, then you should
    have enough time to respond. If vulnerabilities are found in a running production
    cluster, you should patch the images and redeploy as soon as a patch is available.
    If a patch is not available, having a mitigation strategy in place prevents compromise
    of the cluster.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在图像中发现漏洞，最好及早修复。如果在开发阶段发现漏洞，那么你应该有足够的时间来做出响应。如果在运行生产集群中发现漏洞，应该在补丁可用时立即修补图像并重新部署。如果没有补丁可用，那么有一套缓解策略可以防止集群受到损害。
- en: This is why an image scanning tool is critical to your CI/CD pipeline. It's
    not realistic to cover vulnerability management in one section, but I think a
    basic understanding of vulnerability management will help you make the most use
    of any image scanning tool. There are a few popular open source image scanning
    tools available, such as Anchore, Clair, Trivvy, and so on. Let's look at one
    such image scanning tool with examples.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么图像扫描工具对你的CI/CD流水线至关重要。在一节中涵盖漏洞管理并不现实，但我认为对漏洞管理的基本理解将帮助你充分利用任何图像扫描工具。有一些流行的开源图像扫描工具可用，比如Anchore、Clair、Trivvy等等。让我们看一个这样的图像扫描工具和例子。
- en: Scanning images with Anchore Engine
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Anchore Engine扫描图像
- en: Anchore Engine is an open source image scanning tool. It not only analyzes Docker
    images but also allows users to define an acceptance image scanning policy. In
    this section, we will first give a high-level introduction to Anchore Engine,
    then we will show how to deploy Anchore Engine and the basic image scanning use
    case of Anchore Engine by using Anchore's own CLI tool, `anchore-cli`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Anchore Engine是一个开源的图像扫描工具。它不仅分析Docker图像，还允许用户定义接受图像扫描策略。在本节中，我们将首先对Anchore
    Engine进行高层介绍，然后我们将展示如何使用Anchore自己的CLI工具`anchore-cli`部署Anchore Engine和Anchore Engine的基本图像扫描用例。
- en: Introduction to Anchore Engine
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Anchore Engine简介
- en: 'When an image is submitted to Anchore Engine for analysis, Anchore Engine will
    first retrieve the image metadata from image registry, then download the image
    and queue the image for analysis. The following are the items that Anchore Engine
    will analyze:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当图像提交给Anchore Engine进行分析时，Anchore Engine将首先从图像注册表中检索图像元数据，然后下载图像并将图像排队进行分析。以下是Anchore
    Engine将要分析的项目：
- en: Image metadata
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像元数据
- en: Image layers
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像层
- en: Operating system packages such as `deb`, `rpm`, `apkg`, and so on
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统软件包，如`deb`、`rpm`、`apkg`等
- en: File data
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件数据
- en: 'Application dependency packages:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序依赖包：
- en: '- Ruby gems'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '- Ruby宝石'
- en: '- Node.js NPMs'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '- Node.js NPMs'
- en: '- Java archives'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '- Java存档'
- en: '- Python packages'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '- Python软件包'
- en: File content
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件内容
- en: 'To deploy Anchore Engine in a Kubernetes cluster with **Helm**—CNCF project
    which is a package manage tool for the Kubernetes cluster, run the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Kubernetes集群中使用Helm部署Anchore Engine——CNCF项目，这是Kubernetes集群的软件包管理工具，请运行以下命令：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Anchore Engine is composed of a few microservices. When deployed in a Kubernetes
    cluster, you will find the following workloads are running:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Anchore Engine由几个微服务组成。在Kubernetes集群中部署时，您会发现以下工作负载正在运行：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Anchore Engine decouples image scanning services into the microservices shown
    in the preceding log:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Anchore Engine将图像扫描服务解耦为前面日志中显示的微服务：
- en: '**API**: Accepts the image scan request'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API**：接受图像扫描请求'
- en: '**Catalog**: Maintains the states of the image scan job'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目录**：维护图像扫描作业的状态'
- en: '**Policy**: Loads image analysis results and performs policy evaluation'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略**：加载图像分析结果并执行策略评估'
- en: '**Analyzer**: Pulls images from image registry and performs analysis'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Analyzer**：从图像注册表中拉取图像并执行分析'
- en: '**Simplequeue**: Queues image scanning tasks'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Simplequeue**：排队图像扫描任务'
- en: '**PostgreSQL**: Stores image analysis results and state'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL**：存储图像分析结果和状态'
- en: Now Anchore Engine is successfully deployed in a Kubernetes cluster, let's see
    how we can do image scanning with `anchore-cli`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Anchore Engine已成功部署在Kubernetes集群中，让我们看看如何使用`anchore-cli`进行图像扫描。
- en: Scanning images with anchore-cli
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用anchore-cli扫描图像
- en: 'Anchore Engine supports access both from the RESTful API and `anchore-cli`.
    `anchore-cli` is handy to use in an iterative way. `anchore-cli` does not need
    to run in a Kubernetes cluster. You need to configure the following environment
    variables to enable CLI access to Anchore Engine:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Anchore Engine支持从RESTful API和`anchore-cli`访问。`anchore-cli`在迭代使用时非常方便。`anchore-cli`不需要在Kubernetes集群中运行。您需要配置以下环境变量以启用对Anchore
    Engine的CLI访问：
- en: '`ANCHORE_CLI_URL`: Anchore Engine API endpoint'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ANCHORE_CLI_URL`：Anchore Engine API端点'
- en: '`ANCHORE_CLI_USER`: Username to access Anchore Engine'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ANCHORE_CLI_USER`：访问Anchore Engine的用户名'
- en: '`ANCHORE_CLI_PASS`: Password to access Anchore Engine'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ANCHORE_CLI_PASS`：访问Anchore Engine的密码'
- en: 'Once you''ve configured the environment variables successfully, you can verify
    the connectivity to Anchore Engine with the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功配置了环境变量，您可以使用以下命令验证与Anchore Engine的连接：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And the output should be like the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`anchore-cli` is able to talk to Anchore Engine in a Kubernetes cluster. Now
    let''s scan an image with the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchore-cli` 能够与 Kubernetes 集群中的 Anchore Engine 进行通信。现在让我们使用以下命令扫描一个镜像：'
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And the output should be like the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will get the image digest, full tag, and more from the image. It may take
    some time for Anchore Engine to analyze the image depending on the image size.
    Once it is analyzed, you will see the `Analysis Status` field has been updated
    to `analyzed`. Use the following command to check the image scanning status:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您将从镜像中获得镜像摘要、完整标签等信息。根据镜像大小，Anchore Engine 分析镜像可能需要一些时间。一旦分析完成，您将看到 `Analysis
    Status` 字段已更新为 `analyzed`。使用以下命令检查镜像扫描状态：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And the output should be like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We briefly mentioned Anchore Engine policies earlier; Anchore Engine policies
    allow you to define rules to handle vulnerabilities differently based on their
    severity. In the default Anchore Engine policy, you will find the following rules
    in the default policy with two rules. The first rule is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前简要提到了 Anchore Engine 策略；Anchore Engine 策略允许您根据漏洞的严重程度不同定义规则来处理漏洞。在默认的 Anchore
    Engine 策略中，您将在默认策略中找到以下两条规则。第一条规则如下：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first rule defines that any package that has medium-level vulnerability
    will still set the policy evaluation result to pass. The second rule is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则定义了任何具有中等级漏洞的软件包仍将将策略评估结果设置为通过。第二条规则如下：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The second rule defines that any package that has high or critical vulnerability
    will set the policy evaluation result to fail. After the image is analyzed, use
    the following command to check with the policy:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条规则定义了任何具有高或关键漏洞的软件包将会将策略评估结果设置为失败。镜像分析完成后，使用以下命令检查策略：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And the output should be like the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'So the image `docker.io/kaizheh/nginx-docker:latest` failed the default policy
    evaluation. This means that there must be some vulnerabilities at a high or critical
    level. Use the following command to list all the vulnerabilities in the image:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，镜像 `docker.io/kaizheh/nginx-docker:latest` 未通过默认策略评估。这意味着必须存在一些高或关键级别的漏洞。使用以下命令列出镜像中的所有漏洞：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And the output should be like the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding list shows all the vulnerabilities in the image with information
    including CVE ID, package name, severity, whether a fix is available, and references.
    Anchore Engine policies essentially help you filter out less severe vulnerabilities
    so that you can focus on the more severe ones. Then you can start engaging with
    the security team for vulnerability analysis.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表显示了镜像中的所有漏洞，包括 CVE ID、软件包名称、严重程度、是否有修复可用以及参考信息。Anchore Engine 策略基本上帮助您过滤掉较不严重的漏洞，以便您可以专注于更严重的漏洞。然后，您可以开始与安全团队进行漏洞分析。
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Sometimes, if a fix is not available for a high-level or critical-level vulnerability
    in a package or library, you should find an alternative instead of continuing
    to use the vulnerable one.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，如果一个软件包或库中的高级或关键级别漏洞没有修复可用，您应该寻找替代方案，而不是继续使用有漏洞的软件包。
- en: In the next section, we are going to talk about how to integrate image scanning
    into the CI/CD pipeline.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将讨论如何将镜像扫描集成到 CI/CD 流水线中。
- en: Integrating image scanning into the CI/CD pipeline
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将镜像扫描集成到 CI/CD 流水线中
- en: 'Image scanning can be triggered at multiple stages in the DevOps pipeline and
    we''ve already talked about the advantages of scanning an image in an early stage
    of the pipeline. However, new vulnerabilities will be discovered, and your vulnerability
    database should be updated constantly. This indicates that passing an image scan
    in the build stage doesn''t mean it will pass at the runtime stage if there is
    a new critical vulnerability found that also exists in the image. You should stop
    the workload deployment when it happens and apply mitigation strategies accordingly.
    Before we dive into integration, let''s look at a rough definition of the DevOps
    stages that are applicable for image scanning:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '镜像扫描可以在DevOps流水线的多个阶段触发，我们已经讨论了在流水线早期阶段扫描镜像的优势。然而，新的漏洞将被发现，您的漏洞数据库应该不断更新。这表明，即使在构建阶段通过了镜像扫描，也不意味着在运行时阶段会通过，如果发现了新的关键漏洞，并且该漏洞也存在于镜像中。当发生这种情况时，您应该停止工作负载部署，并相应地应用缓解策略。在深入集成之前，让我们看一下适用于镜像扫描的DevOps阶段的大致定义:'
- en: '**Build**: When the image is built in the CI/CD pipeline'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**: 当镜像在CI/CD流水线中构建时'
- en: '**Deployment**: When the image is about to be deployed in a Kubernetes cluster'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**: 当镜像即将部署到Kubernetes集群时'
- en: '**Runtime**: After the image is deployed to a Kubernetes cluster and the containers
    are up and running'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时**: 在镜像部署到Kubernetes集群并且容器正在运行时'
- en: Though there are many different CI/CD pipelines and many different image scanning
    tools for you to choose from, the notion is that integrating image scanning into
    the CI/CD pipeline secures Kubernetes workloads as well as Kubernetes clusters.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多不同的CI/CD流水线和许多不同的镜像扫描工具供您选择，但整合镜像扫描到CI/CD流水线中的概念是确保Kubernetes工作负载和Kubernetes集群的安全。
- en: Scanning at the build stage
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建阶段的扫描
- en: There are so many CI/CD tools, such as Jenkins, Spinnaker, and Screwdriver,
    for you to use. In this section, we're going to show how image scanning can be
    integrated into a GitHub workflow. A workflow in GitHub is a configurable automated
    process that contains multiple jobs. It is a similar concept to the Jenkins pipeline
    but defined in YAML format. A simple workflow with image scanning is like defining
    a trigger. Usually done when a pull request or commit is pushed, setting up the
    build environment, for example, Ubuntu.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多CI/CD工具，例如Jenkins、Spinnaker和Screwdriver，供您使用。在本节中，我们将展示如何将镜像扫描集成到GitHub工作流程中。GitHub中的工作流程是一个可配置的自动化流程，包含多个作业。这类似于Jenkins流水线的概念，但是以YAML格式定义。具有镜像扫描的简单工作流程就像定义触发器。通常在拉取请求或提交推送时完成，设置构建环境，例如Ubuntu。
- en: 'Then define the steps in the workflow:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '然后在工作流程中定义步骤:'
- en: Check out the PR branch.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出PR分支。
- en: Build the image from the branch.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从分支构建镜像。
- en: Push the image to the registry – this is optional. You should be able to launch
    the image scanner to scan the image when the image is built locally.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将镜像推送到注册表-这是可选的。当本地构建镜像时，应该能够启动镜像扫描器来扫描镜像。
- en: Scan the newly built or pushed image.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描新构建或推送的镜像。
- en: Fail the workflow if policy violations occur.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果违反策略，则失败工作流。
- en: 'The following is a sample workflow defined in GitHub:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是GitHub中定义的示例工作流程:'
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the first step of the build pipeline, I used the `checkout` GitHub action
    to check out the branch. A GitHub action to a workflow is like a function to a
    programming language. It encapsulates the details you don't need to know but performs
    tasks for you. It may take input parameters and return results. In the second
    step, we ran a few commands to build the image `kaizheh/anchore-cli` and push
    the image to the registry. In the third step, we used `anchore-cli` to scan the
    image (yes, we use Anchore Engine to scan our own `anchore-cli` image).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建流水线的第一步中，我使用了`checkout` GitHub操作来检出分支。GitHub操作对于工作流程就像编程语言中的函数一样。它封装了您不需要知道的细节，但为您执行任务。它可以接受输入参数并返回结果。在第二步中，我们运行了一些命令来构建图像`kaizheh/anchore-cli`并将图像推送到注册表。在第三步中，我们使用`anchore-cli`来扫描图像（是的，我们使用Anchore
    Engine来扫描我们自己的`anchore-cli`图像）。
- en: 'Note that I configured the GitHub secrets to store sensitive information such
    as the Docker Hub access token, Anchore username, and password. In the last step,
    we failed purposely for demo purposes. But usually, the last step comes with a
    notification and response to the image scanning result as the comments suggest.
    And you will find the result details of the workflow in GitHub, as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我配置了GitHub secrets来存储诸如Docker Hub访问令牌、Anchore用户名和密码等敏感信息。在最后一步，我们故意失败以进行演示。但通常，最后一步会随着评论建议的图像扫描结果而带来通知和响应。您将在GitHub中找到工作流程的结果详细信息，如下所示：
- en: '![Figure 9.3 – GitHub image scanning workflow'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3 – GitHub图像扫描工作流程'
- en: '](image/B15566_09_003.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_09_003.jpg)'
- en: Figure 9.3 – GitHub image scanning workflow
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – GitHub图像扫描工作流程
- en: The preceding screenshot shows the status of each step in the workflow, and
    you will find the detail of each step when you click into it. Anchore also offers
    an image scan GitHub action called **Anchore Container Scan**. It launches the
    Anchore Engine scanner on the newly built image and returns the vulnerabilities,
    manifests, and a pass/fail policy evaluation that can be used to fail the build
    if desired.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了工作流程中每个步骤的状态，当您点击进入时，您将找到每个步骤的详细信息。Anchore还提供了一个名为Anchore Container
    Scan的图像扫描GitHub操作。它在新构建的图像上启动Anchore Engine扫描程序，并返回漏洞、清单和可以用于失败构建的通过/失败策略评估。
- en: Scanning at the deployment stage
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在部署阶段进行扫描
- en: 'Though deployment is a seamless process, I want to bring it up in a separate
    section about conducting image scanning at the deployment stage for two reasons:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管部署是一个无缝的过程，但我想在一个单独的部分提出关于在部署阶段进行图像扫描的两个原因：
- en: New vulnerabilities may be found when you deploy applications to a Kubernetes
    cluster, even though they passed the image scanning check when they were built.
    It is better to block them before you find the vulnerabilities when they are running
    in a Kubernetes cluster.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序部署到Kubernetes集群时，可能会发现新的漏洞，即使它们在构建时通过了图像扫描检查。最好在它们在Kubernetes集群中运行时发现漏洞之前阻止它们。
- en: Image scanning can be part of the validation admission process in Kubernetes.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像扫描可以成为Kubernetes中验证准入过程的一部分。
- en: 'We''ve already introduced the concept of `ValidatingAdmissionWebhook` in [*Chapter
    7*](B15566_07_Final_ASB_ePub.xhtml#_idTextAnchor186), *Authentication, Authorization,
    and Admission Control*. Now, let''s see how image scanning can help validate the
    workload by scanning its images before the workload is admitted to run in the
    Kubernetes cluster. Image scanning admission controller is an open source project
    from Sysdig. It scans images from the workload that is about to be deployed. If
    an image fails the image scanning policy, the workload will be rejected. The following
    is the workflow diagram:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第7章*](B15566_07_Final_ASB_ePub.xhtml#_idTextAnchor186)中介绍了`ValidatingAdmissionWebhook`的概念，*身份验证、授权和准入控制*。现在，让我们看看图像扫描如何帮助通过在Kubernetes集群中运行之前扫描其图像来验证工作负载。图像扫描准入控制器是来自Sysdig的开源项目。它扫描即将部署的工作负载中的图像。如果图像未通过图像扫描策略，工作负载将被拒绝。以下是工作流程图：
- en: '![Figure 9.4 – Image scanning admission workflow'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4 - 图像扫描准入工作流'
- en: '](image/B15566_09_004.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_09_004.jpg)'
- en: Figure 9.4 – Image scanning admission workflow
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 - 图像扫描准入工作流
- en: 'The preceding diagram shows the workload admission process validated based
    on image scanning:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表显示了基于图像扫描验证的工作负载准入过程：
- en: There is a workload creation request sent to `kube-apiserver`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个工作负载创建请求发送到`kube-apiserver`。
- en: '`kube-apiserver` forwards the request to the registered validating webhook
    server based on the validating webhook configurations.'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`根据验证webhook配置将请求转发到注册的验证webhook服务器。'
- en: The validating webhook server extracts image information from the workload's
    specification and sends it to the Anchore Engine API server.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证webhook服务器从工作负载的规范中提取图像信息，并将其发送到Anchore Engine API服务器。
- en: Based on the image scanning policy, Anchore Engine will return the policy evaluation
    result as a validation decision back to the server.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据图像扫描策略，Anchore Engine将验证决定作为验证决定返回给服务器。
- en: The validating webhook server forwards the validation decision to `kube-apiserver`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证webhook服务器将验证决定转发给`kube-apiserver`。
- en: '`kube-apiserver` either admits or rejects the workload based on the validation
    decision from the image scan policy evaluation result.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`根据来自图像扫描策略评估结果的验证决定，要么允许要么拒绝工作负载。'
- en: 'To deploy the image scanning admission controller, first check out the GitHub
    repository ([https://github.com/sysdiglabs/image-scanning-admission-controller](https://github.com/sysdiglabs/image-scanning-admission-controller))
    and then run the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署图像扫描准入控制器，首先要检出GitHub存储库（[https://github.com/sysdiglabs/image-scanning-admission-controller](https://github.com/sysdiglabs/image-scanning-admission-controller)），然后运行以下命令：
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And you should find the webhook servers and services are created:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该找到webhook服务器和服务已经创建：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Besides the webhook server deployment, the script also creates a `ValidatingWebhookConfiguration`
    object to register the image scan admission webhook server, which is defined in
    `generic-validatingewebhookconfig.yaml` to the `kube-apiserver`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了webhook服务器部署，该脚本还创建了一个`ValidatingWebhookConfiguration`对象来注册图像扫描准入webhook服务器，该对象在`generic-validatingewebhookconfig.yaml`中定义到`kube-apiserver`：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The validating webhook configuration object basically tells `kube-apiserver`
    to forward any pod creation request to `webhook-server-service` in the `image-scan-webhook-system`
    namespace using the `/validating-create-pod` URL path.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 验证webhook配置对象基本上告诉`kube-apiserver`将任何pod创建请求转发到`image-scan-webhook-system`命名空间中的`webhook-server-service`，并使用`/validating-create-pod`
    URL路径。
- en: 'You can use the test cases provided by image scanning admission controller
    to verify your setup as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用图像扫描准入控制器提供的测试用例来验证您的设置，如下所示：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the test, three different pods will be deployed in the Kubernetes cluster.
    One of them has a critical vulnerability that violates the image scanning policy.
    So, the workload with the critical vulnerability is rejected as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中，将在Kubernetes集群中部署三个不同的pod。其中一个存在关键漏洞，违反了图像扫描策略。因此，具有关键漏洞的工作负载将被拒绝。
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding output shows that the workload with image `kaizheh/apache-struts2-cve-2017-5638`
    is rejected. The image runs the Apache Struts 2 service, which contains a critical
    vulnerability with a CVSS score of 10 ([https://nvd.nist.gov/vuln/detail/CVE-2017-5638](https://nvd.nist.gov/vuln/detail/CVE-2017-5638)).
    Though the CVE in the test is old, you should be able to discover it at an earlier
    stage. However, new vulnerabilities will be found, and the vulnerability database
    keeps updating. It's critical to set a gatekeeper for any workload that is going
    to be deployed in a Kubernetes cluster. Image scanning as validating admission
    is a good security practice for Kubernetes deployment. Now, let's talk about image
    scanning at the runtime stage in a Kubernetes cluster.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示，带有图像`kaizheh/apache-struts2-cve-2017-5638`的工作负载被拒绝了。该图像运行Apache Struts
    2服务，其中包含一个CVSS评分为10的关键漏洞（[https://nvd.nist.gov/vuln/detail/CVE-2017-5638](https://nvd.nist.gov/vuln/detail/CVE-2017-5638)）。尽管测试中的CVE是旧的，但您应该能够在早期发现它。然而，新的漏洞将被发现，漏洞数据库将不断更新。为即将部署在Kubernetes集群中的任何工作负载设置一个门卫是至关重要的。图像扫描作为验证入场是Kubernetes部署的一个良好安全实践。现在，让我们谈谈在Kubernetes集群中运行时阶段的图像扫描。
- en: Scanning at the runtime stage
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时阶段的扫描
- en: 'Good job! The workload''s image passed the image scanning policy evaluation
    in the build and deployment stages. But it still doesn''t mean the image is vulnerability
    free. Remember, new vulnerabilities will be discovered. Usually, the vulnerability
    database that the image scanner uses will update every few hours. Once the vulnerability
    database is updated, you should trigger the image scanner to scan images that
    are actively running in the Kubernetes cluster. There are a couple of ways to
    do it:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！工作负载的图像在构建和部署阶段通过了图像扫描策略评估。但这并不意味着图像没有漏洞。请记住，新的漏洞将被发现。通常，图像扫描器使用的漏洞数据库将每隔几个小时更新一次。一旦漏洞数据库更新，您应该触发图像扫描器扫描在Kubernetes集群中正在运行的图像。有几种方法可以做到这一点：
- en: Scan images pulled on each worker node directly. To scan images on the worker
    nodes, you can use tools such as `secure-inline-scan` from Sysdig ([https://github.com/sysdiglabs/secure-inline-scan](https://github.com/sysdiglabs/secure-inline-scan)).
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接在每个工作节点上扫描拉取的图像。要在工作节点上扫描图像，您可以使用诸如Sysdig的`secure-inline-scan`工具（[https://github.com/sysdiglabs/secure-inline-scan](https://github.com/sysdiglabs/secure-inline-scan)）。
- en: Scan images in the registry regularly, directly after the vulnerability database
    has been updated.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期在注册表中扫描图像，直接在漏洞数据库更新后进行扫描。
- en: Again, once you identify impactful vulnerabilities in the images in use, you
    should patch vulnerable images and redeploy them to reduce the attack surface.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，一旦发现正在使用的图像中存在重大漏洞，您应该修补易受攻击的图像并重新部署，以减少攻击面。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we first briefly talked about container images and vulnerabilities.
    Then we introduced an open source image scanning tool, Anchore Engine, and showed
    how to use `anchore-cli` to do image scanning. Last but not least, we talked about
    how to integrate image scanning into a CI/CD pipeline at three different stages:
    build, deployment, and runtime. Image scanning showed great value in securing
    the DevOps flow. A secure Kubernetes cluster requires securing the entire DevOps
    flow.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先简要讨论了容器图像和漏洞。然后，我们介绍了一个开源图像扫描工具Anchore Engine，并展示了如何使用`anchore-cli`进行图像扫描。最后但同样重要的是，我们讨论了如何将图像扫描集成到CI/CD流水线的三个不同阶段：构建、部署和运行时。图像扫描在保护DevOps流程方面表现出了巨大的价值。一个安全的Kubernetes集群需要保护整个DevOps流程。
- en: You should now feel comfortable deploying Anchore Engine and using `anchore-cli`
    to trigger image scanning. Once you find any vulnerabilities in an image, filter
    them out by using an Anchore Engine policy and understand their real impact. I
    know it's going to take time, but it is necessary and awesome to set up image
    scanning as gatekeepers in your CI/CD pipeline. By doing so, you'll make your
    Kubernetes cluster more secure.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该可以轻松部署Anchore Engine并使用`anchore-cli`来触发图像扫描。一旦您在图像中发现任何漏洞，请使用Anchore Engine策略将其过滤掉，并了解其真正影响。我知道这需要时间，但在您的CI/CD流水线中设置图像扫描是必要且很棒的。通过这样做，您将使您的Kubernetes集群更加安全。
- en: In the next chapter, we will talk about resource management and real-time monitoring
    in a Kubernetes cluster.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Kubernetes集群中的资源管理和实时监控。
- en: Questions
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Let''s use some questions to help you understand this chapter better:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一些问题来帮助您更好地理解本章内容：
- en: Which Docker command can be used to list image file layers?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Docker命令可以用来列出图像文件层？
- en: According to the CVSS3 standard, what vulnerability score range is considered
    high?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据CVSS3标准，哪个漏洞评分范围被认为是高风险的？
- en: What is the `anchore-cli` command to start scanning an image?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`anchore-cli`命令是什么，用于开始扫描图像？'
- en: What is the `anchore-cli` command to list an image's vulnerabilities?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`anchore-cli`命令是什么，用于列出图像的漏洞？'
- en: What is the `anchore-cli` command to evaluate an image with an Anchore Engine
    policy?
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`anchore-cli`命令是什么，用于评估符合Anchore Engine策略的图像？'
- en: Why is it so important to integrate image scanning into CI/CD pipelines?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么将图像扫描集成到CI/CD流水线中如此重要？
- en: Further references
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步参考
- en: 'To learn more about Anchore Engine, read: [https://docs.anchore.com/current/docs/engine/general/](https://docs.anchore.com/current/docs/engine/general/)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于Anchore Engine的信息，请阅读：[https://docs.anchore.com/current/docs/engine/general/](https://docs.anchore.com/current/docs/engine/general/)
- en: 'To learn more about the Anchore scan action: [https://github.com/marketplace/actions/anchore-container-scan](https://github.com/marketplace/actions/anchore-container-scan)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于Anchore扫描操作的信息：[https://github.com/marketplace/actions/anchore-container-scan](https://github.com/marketplace/actions/anchore-container-scan)
- en: 'To learn more about Sysdig''s image scanning admission controller: [https://github.com/sysdiglabs/image-scanning-admission-controller](https://github.com/sysdiglabs/image-scanning-admission-controller)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于Sysdig的图像扫描准入控制器的信息：[https://github.com/sysdiglabs/image-scanning-admission-controller](https://github.com/sysdiglabs/image-scanning-admission-controller)
- en: 'To learn more about GitHub actions: [https://help.github.com/en/actions](https://help.github.com/en/actions)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于GitHub actions的信息：[https://help.github.com/en/actions](https://help.github.com/en/actions)
