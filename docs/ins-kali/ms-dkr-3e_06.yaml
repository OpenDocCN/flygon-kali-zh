- en: Windows Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows容器
- en: In this chapter, we will discuss and take a look at Windows containers. Microsoft
    has embraced containers as a way of deploying older applications on new hardware.
    Unlike Linux containers, Windows containers are only available on Windows-based
    Docker hosts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将讨论并了解Windows容器。微软已经接受容器作为在新硬件上部署旧应用程序的一种方式。与Linux容器不同，Windows容器仅在基于Windows的Docker主机上可用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An introduction to Windows containers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows容器简介
- en: Setting up your Docker host for Windows containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Windows容器设置Docker主机
- en: Running Windows containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Windows容器
- en: A Windows container Dockerfile
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows容器Dockerfile
- en: Windows containers and Docker Compose
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows容器和Docker Compose
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As per previous chapters, we will continue to use our local Docker installations.
    Again, the screenshots in this chapter will be from my preferred operating system,
    macOS—yes, even though we are going to be running Windows containers, you can
    still use your macOS client. More on that later.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的章节一样，我们将继续使用我们的本地Docker安装。同样，在本章中的屏幕截图将来自我首选的操作系统macOS——是的，即使我们将要运行Windows容器，你仍然可以使用你的macOS客户端。稍后会详细介绍。
- en: The Docker commands we will be running will work on all three of the operating
    systems on which we have installed Docker so far. However, in this chapter, the
    containers we will be launching will only work on a Windows Docker host. We will
    be using VirtualBox and Vagrant on macOS and Linux-based machines to assist in
    getting a Windows Docker host up and running.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行的Docker命令将在我们迄今为止安装了Docker的三种操作系统上运行。然而，在本章中，我们将启动的容器只能在Windows Docker主机上运行。我们将在macOS和基于Linux的机器上使用VirtualBox和Vagrant来帮助启动和运行Windows
    Docker主机。
- en: A full copy of the code used in this chapter can be found at [https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter06/](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter06/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码的完整副本可以在[https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter06/](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter06/)找到。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2PfjuSR](http://bit.ly/2PfjuSR)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2PfjuSR](http://bit.ly/2PfjuSR)'
- en: An introduction to Windows containers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows容器简介
- en: As someone who has been using mostly macOS and Linux computers and laptops alongside
    Linux servers pretty much daily for the past 20 years, coupled with the fact that
    my only experience of running Microsoft Windows was the Windows XP and Windows
    10 gaming PCs I have had, along with the odd Windows server I was unable to avoid
    at work, the advent of Windows Containers was an interesting development.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个在过去20年里几乎每天都在使用macOS和Linux计算机和笔记本电脑以及Linux服务器的人，再加上我唯一的微软Windows的经验是我拥有的Windows
    XP和Windows 10游戏PC，以及我在工作中无法避免的偶尔的Windows服务器，Windows容器的出现是一个有趣的发展。
- en: 'Now, I would never have classed myself as a Linux/UNIX fanboy. However, Microsoft''s
    actions over the last few years have surprised even me. Back in 2014, at one of
    its Azure events, Microsoft declared that "Microsoft![](Images/ef26c732-b5bc-41ad-a5e7-e32524861a68.png)Linux",
    and it hasn''t looked back since:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我从来没有认为自己是Linux/UNIX的粉丝。然而，微软在过去几年的行动甚至让我感到惊讶。在2014年的Azure活动中，微软宣布"Microsoft![](Images/ef26c732-b5bc-41ad-a5e7-e32524861a68.png)Linux"，自那以后就一发不可收拾：
- en: Linux is a first-class citizen in Microsoft Azure
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux在Microsoft Azure中是一等公民
- en: .NET Core is cross-platform, meaning that you can run your .NET applications
    on Linux and Windows
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core是跨平台的，这意味着你可以在Linux和Windows上运行你的.NET应用程序。
- en: SQL Server is now available on Linux
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server现在可以在Linux上使用
- en: You can run Linux shells, such as Ubuntu, on Windows 10 Professional machines
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在Windows 10专业版机器上运行Linux shell，比如Ubuntu。
- en: PowerShell has been ported to Linux
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell已经移植到Linux。
- en: It has developed cross-platform tools, such as Visual Studio Code, and open
    sourced them
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软开发了跨平台工具，比如Visual Studio Code，并将其开源。
- en: It is acquiring GitHub for $7.5 billion!!
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软以75亿美元收购GitHub！
- en: It is clear that the Microsoft of old, where former CEO Steve Ballmer famously
    roasted both the open source and Linux communities by calling them something that
    would not be appropriate to repeat here, has gone.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，昔日的微软已经不复存在，前任CEO史蒂夫·鲍尔默曾经公开嘲讽开源和Linux社区，称他们的话不适合在这里重复。
- en: Hence, the announcement, which was made in October 2014 months after Microsoft
    publicly declared its love of Linux, that Docker and Microsoft were forming a
    partnership to drive the adoption of containers on Windows-based operating systems
    such as Windows 10 Professional and Windows Server 2016 came as no surprise to
    anyone.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这一宣布并不令人意外。在微软公开宣布对Linux的喜爱后的几个月，即2014年10月，微软和Docker宣布合作，推动在基于Windows的操作系统上，如Windows
    10专业版和Windows Server 2016上采用容器技术。
- en: So what are Windows containers?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Windows容器是什么？
- en: Well, on the face of it, they are no different to Linux containers. The work
    by Microsoft on the Windows kernel has introduced the same process isolation as
    found on Linux. Also, like Linux containers, this isolation extends to a sandboxed
    filesystem and even a Windows registry.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，它们与Linux容器没有什么不同。微软在Windows内核上的工作引入了与Linux上发现的相同的进程隔离。而且，与Linux容器一样，这种隔离还延伸到一个沙盒文件系统，甚至是Windows注册表。
- en: As each container is effectively a fresh Windows Core or Windows Nano, which,
    in turn, are cut down Windows server images (think Alpine Linux but for Windows), installation
    administrators can run multiple Dockerized applications on the same host without
    having to worry about any custom registry changes or requirements clashing and
    causing problems.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个容器实际上都是一个全新的Windows Core或Windows Nano，这些又是精简的Windows服务器镜像（可以想象成Windows版的Alpine
    Linux），安装管理员可以在同一台主机上运行多个Docker化的应用程序，而无需担心任何自定义注册表更改或需求冲突和引起问题。
- en: Couple this with the same ease of use supplied by the Docker command-line client
    and administrators have a way to migrate their legacy applications to more modern
    hardware and also host operating systems without the worries and overhead of having
    to manage multiple virtual machines running older unsupported versions of Windows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再加上Docker命令行客户端提供的同样易用性，管理员们可以将传统应用迁移到更现代的硬件和主机操作系统，而无需担心管理多个运行旧不受支持版本Windows的虚拟机所带来的问题和开销。
- en: There is also another layer of isolation provided by Windows Containers. Hyper-V
    isolation runs the container processes within a minimal hypervisor when the container
    is started. This further isolates the container processes from the host machine.
    However, there is a cost of a small amount of additional resources needed for
    each container running with Hyper-V isolation, while these containers will also
    have an increased start time as the hypervisor needs to be launched before the
    container can be started.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Windows容器还提供了另一层隔离。当容器启动时，Hyper-V隔离在最小的虚拟机监视器内运行容器进程。这进一步将容器进程与主机机器隔离开来。然而，使用Hyper-V隔离的每个容器需要额外的资源，而且启动时间也会增加，因为需要在容器启动之前启动虚拟机监视器。
- en: While Hyper-V isolation does use Microsoft's hypervisor, which can be found
    in both Windows server and desktop editions as well as the Xbox One system software,
    you can't manage Hyper-V isolated containers using the standard Hyper-V management
    tools. You have to use Docker.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Hyper-V隔离确实使用了微软的虚拟化技术，可以在Windows服务器和桌面版以及Xbox One系统软件中找到，但你不能使用标准的Hyper-V管理工具来管理Hyper-V隔离的容器。你必须使用Docker。
- en: After all the work and effort Microsoft had to put into enabling containers
    in the Windows kernel, why did they choose Docker over just creating their management
    tool?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在微软不得不投入大量工作和努力来启用Windows内核中的容器之后，为什么他们选择了Docker而不是创建自己的管理工具呢？
- en: Docker had already established itself as the go-to tool for managing containers
    with a set of proven APIs and a large community. Also, it was open source, which
    meant that Microsoft could not only adapt it for use on Windows, but also contribute
    to its development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Docker已经成为管理容器的首选工具，具有一组经过验证的API和庞大的社区。而且，它是开源的，这意味着微软不仅可以适应其在Windows上的使用，还可以为其发展做出贡献。
- en: 'The following diagram gives an overview of how Docker on Windows works:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表概述了Windows上的Docker的工作原理：
- en: '![](Images/0021ddf3-befc-4ebf-ab5a-f0d066aa5463.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0021ddf3-befc-4ebf-ab5a-f0d066aa5463.png)'
- en: Notice that I said Docker on Windows, not Docker for Windows; they are very
    different products. Docker on Windows is the native version of the Docker Engine
    and client that interacts with the Windows kernel to provide Windows containers.
    Docker for Windows is a native as possible experience for developers to run both
    Linux and Windows containers on their desktops.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我说的是Windows上的Docker，而不是Docker for Windows；它们是非常不同的产品。Windows上的Docker是与Windows内核交互的Docker引擎和客户端的本机版本，以提供Windows容器。Docker
    for Windows是开发人员在其桌面上运行Linux和Windows容器的尽可能本机的体验。
- en: Setting up your Docker host for Windows containers
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Windows容器设置Docker主机
- en: As you may have guessed, you are going to need access to a Windows host running
    Docker. Don't worry too much if you are not running a Windows 10 Professional
    machine—there are ways in which you can achieve this on macOS and Linux. Before
    we talk about those, let's look at how you can run Windows containers on Windows
    10 Professional with your Docker for Windows installation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的，你需要访问一个运行Docker的Windows主机。如果你没有运行Windows 10专业版的机器，也不用太担心——你可以在macOS和Linux上实现这一点。在我们讨论这些方法之前，让我们看看如何在Windows
    10专业版上使用Docker for Windows安装运行Windows容器。
- en: Windows 10 Professional
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 10专业版
- en: '**Windows 10 Professional** supports Windows containers out of the box. By
    default, however, it is configured to run Linux containers. To switch from running
    Linux containers to Windows containers, right-click on the Docker icon in your
    system tray and select **Switch to Windows containers ...** from the menu:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows 10专业版**原生支持Windows容器。但默认情况下，它配置为运行Linux容器。要从运行Linux容器切换到Windows容器，右键单击系统托盘中的Docker图标，然后从菜单中选择**切换到Windows容器...**：'
- en: '![](Images/fe51cd8e-9f4c-455d-b29e-35619f7b1e3f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fe51cd8e-9f4c-455d-b29e-35619f7b1e3f.png)'
- en: 'This will bring up the following prompt:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出以下提示：
- en: '![](Images/e278b88e-0e03-4cb2-b98b-40babb3dce46.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e278b88e-0e03-4cb2-b98b-40babb3dce46.png)'
- en: 'Hit the **Switch** button and, after a few seconds, you will now be managing
    Windows containers. You can see this by opening up a prompt and running the following
    command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**切换**按钮，几秒钟后，你现在将管理Windows容器。你可以通过打开提示符并运行以下命令来查看：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This can be seen from the following output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从以下输出中看到这一点：
- en: '![](Images/12ba843c-1fe8-4489-b1de-4469687e8470.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/12ba843c-1fe8-4489-b1de-4469687e8470.png)'
- en: The Docker Engine has an `OS/Arch` of `windows/amd64`, rather than the `linux/amd64`
    we have been used to seeing up until now. So that covers Windows 10 Professional.
    But what about people like me who prefer macOS and Linux?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Docker引擎的`OS/Arch`为`windows/amd64`，而不是我们到目前为止一直看到的`linux/amd64`。那就涵盖了Windows
    10专业版。但是像我这样更喜欢macOS和Linux的人呢？
- en: macOS and Linux
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS和Linux
- en: To get access to Windows containers on macOS and Linux machines, we will be
    using the excellent resources put together by Stefan Scherer. In the `chapter06`
    folder of the repository that accompanies this book, there is a forked version
    of Stefan's Windows –`docker-machine repo` , which contains all of the files you
    need to get up and running with Windows containers on macOS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在macOS和Linux机器上访问Windows容器，我们将使用Stefan Scherer整理的优秀资源。在本书附带的存储库的`chapter06`文件夹中，有Stefan的Windows
    - `docker-machine repo`的分支版本，其中包含您在macOS上运行Windows容器所需的所有文件。
- en: 'Before we start, you will need the following tools – Vagrant by Hashicorp,
    and Virtualbox by Oracle. You can download these from:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，您将需要以下工具 - Hashicorp的Vagrant和Oracle的Virtualbox。您可以从以下位置下载这些工具：
- en: '[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)'
- en: '[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
- en: 'Once downloaded and installed, open a Terminal, go to the `chapter06/docker-machine`
    repository folder, and run the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装后，打开终端，转到`chapter06/docker-machine`存储库文件夹，并运行以下命令：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will download a VirtualBox Windows Server 2016 core eval image that contains
    everything needed to get you up and running with Windows containers. The download
    is just over 10 GB, so please make sure that you have the bandwidth and disk space
    needed to run the image.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载一个包含运行Windows容器所需的所有内容的VirtualBox Windows Server 2016核心评估映像。下载文件大小略大于10
    GB，因此请确保您具有足够的带宽和磁盘空间来运行该映像。
- en: 'Vagrant will launch the image, configure Docker on the VM, and copy the certificate
    files needed for your local Docker client to interact with the host to your machine.
    To switch over to using the newly launched Docker Windows host, just run the following
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant将启动映像，配置VM上的Docker，并将所需的证书文件复制到您的本地Docker客户端以与主机进行交互。要切换到使用新启动的Docker
    Windows主机，只需运行以下命令：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will be going into more detail on Docker Machine in the next chapter. However,
    what the preceding command has done is reconfigure your local Docker client to
    speak to the Docker Windows host. You can see this by running the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章节中更详细地介绍Docker Machine。然而，前面的命令已重新配置了您的本地Docker客户端，以便与Docker Windows主机通信。您可以通过运行以下命令来查看：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you are not following along you can see the expected output below:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不跟着操作，可以查看下面的预期输出：
- en: '![](Images/064755f6-ee49-4fe6-b71b-0973b323a80f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/064755f6-ee49-4fe6-b71b-0973b323a80f.png)'
- en: 'As you can see, we are now connected to a Docker Engine running on `windows/amd64`.
    To switch back, you can either restart your terminal session or run the following
    command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们现在连接到运行`windows/amd64`的Docker引擎。要切换回，您可以重新启动终端会话，或者运行以下命令：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you are finished with the Docker Windows host, you can run the following
    command to stop it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 完成Docker Windows主机后，可以运行以下命令来停止它：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, to remove it altogether, run the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要完全删除它，请运行以下命令：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding commands must be run from within the `chapter06/docker-machine` repository folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令必须在`chapter06/docker-machine`存储库文件夹中运行。
- en: Running Windows containers
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Windows容器
- en: 'As already hinted at by the first part of this chapter, launching and interacting
    with Windows containers using the Docker command-line client is no different to
    what we have been running so far. Let''s test this by running the `hello-world`
    container:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章的第一部分所暗示的，使用Docker命令行客户端启动和与Windows容器交互与我们迄今为止运行的方式没有任何不同。让我们通过运行`hello-world`容器来测试一下：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Just as before, this will download the `hello-world` container and return a
    message:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，这将下载`hello-world`容器并返回一条消息：
- en: '![](Images/b1f3e83b-2a2f-4089-b125-d13066170b11.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b1f3e83b-2a2f-4089-b125-d13066170b11.png)'
- en: The only difference on this occasion is that rather than the Linux image, Docker
    pulled the `windows-amd64` version of the image that is based on the `nanoserver-sac2016` image.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次唯一的区别是，Docker不是拉取Linux镜像，而是拉取了基于`nanoserver-sac2016`镜像的`windows-amd64`版本的镜像。
- en: 'Now, let''s look at running a container in the foreground, this time running
    PowerShell:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看在前台运行容器，这次运行PowerShell：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once your shell is active, running the following command will give you the
    computer name, which is the container ID:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的shell处于活动状态，运行以下命令将为您提供计算机名称，即容器ID：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can see the full output of the commands above in the terminal output below:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下面的终端输出中看到上述命令的完整输出：
- en: '![](Images/9dce60a5-07b2-411d-9cae-7eb02d587ff7.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9dce60a5-07b2-411d-9cae-7eb02d587ff7.png)'
- en: 'Once you have exited PowerShell by running `exit`, you can see the container
    ID by running the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您通过运行`exit`退出了PowerShell，您可以通过运行以下命令查看容器ID：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can see the expected output in the screen below:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下面的屏幕中看到预期的输出：
- en: '![](Images/48cc683a-524b-44f7-b0a2-e1382991fd5f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/48cc683a-524b-44f7-b0a2-e1382991fd5f.png)'
- en: Now, let's take a look at building an image that does something.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看构建一个执行某些操作的镜像。
- en: A Windows container Dockerfile
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个Windows容器Dockerfile
- en: 'Windows container images use the same format Dockerfile commands as Linux containers.
    The following Dockerfile will download, install, and enable the IIS web server
    on the container:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Windows容器镜像使用与Linux容器相同的Dockerfile命令格式。以下Dockerfile将在容器上下载、安装和启用IIS Web服务器：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can build the image using the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令构建镜像：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once built, running `docker image ls` should show you the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 构建后，运行`docker image ls`应该显示以下内容：
- en: '![](Images/57a6cc54-4042-4683-a586-a74f8c423a3b.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/57a6cc54-4042-4683-a586-a74f8c423a3b.png)'
- en: The one immediate thing you will notice about Windows container images is that
    they are big. This is something that is being worked on with the release of Server
    2019.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Windows容器镜像，您会立即注意到它们很大。这是在Server 2019发布时正在解决的问题。
- en: 'Running the container with the following command will start the IIS image:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行容器将启动IIS镜像：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can see your newly launched container in action by opening your browser.
    However, instead of going to `http://localhost``:8080/`, you will need to access
    it via the NAT IP of the container. If you are using Windows 10 Professional,
    you can find the NAT IP by running the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开浏览器来看到您新启动的容器在运行。但是，您需要通过容器的NAT IP访问它，而不是转到`http://localhost``:8080/`。如果您使用的是Windows
    10专业版，可以通过运行以下命令找到NAT IP：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will give you an IP address, simply augmented with `8080/` at the end;
    for example, `http://172.31.20.180:8080/`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供一个IP地址，只需在末尾添加`8080/`；例如，`http://172.31.20.180:8080/`。
- en: 'macOS users can run the following command to open their browsers using the
    IP address of the Vagrant VM we launched:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: macOS用户可以运行以下命令，使用我们启动的Vagrant VM的IP地址来打开他们的浏览器：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Whichever operating system you have launched your IIS container on, you should
    see the following default holding page:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您在哪个操作系统上启动了IIS容器，您都应该看到以下默认的临时页面：
- en: '![](Images/13e49dd0-5f66-4d63-aaa7-a98ea2e989af.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/13e49dd0-5f66-4d63-aaa7-a98ea2e989af.png)'
- en: 'To stop and remove the containers we have launched so far, run the following
    commands:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止和删除我们迄今为止启动的容器，请运行以下命令：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So far, I am sure you will agree that the experience is no different to using
    Docker with Linux-based containers.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我相信您会同意，这种体验与使用基于Linux的容器的Docker没有任何不同。
- en: Windows containers and Docker Compose
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows容器和Docker Compose
- en: In the final section of this chapter, we are going to look at using Docker Compose
    with our Windows Docker host. As you will have already guessed, there isn't much
    change from the commands we ran in the previous chapter. In the `chapter06` folder
    in the repository, there is a fork of the `dotnet-album-viewer` application from
    the Docker Examples repository as this ships with a `docker-compose.yml` file.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节中，我们将看看如何在Windows Docker主机上使用Docker Compose。正如您已经猜到的那样，与我们在上一章中运行的命令相比，几乎没有什么变化。在存储库的`chapter06`文件夹中，有一个来自Docker示例存储库的`dotnet-album-viewer`应用程序的分支，因为它附带了一个`docker-compose.yml`文件。
- en: 'The Docker Compose file looks like the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose文件如下所示：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, it is using the same structure, flags, and commands as the previous
    Docker Compose files we have looked at, the only difference being that we are
    using images from the Docker Hub that are designed for Windows containers.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，它使用与我们之前查看的Docker Compose文件相同的结构、标志和命令，唯一的区别是我们使用了专为Windows容器设计的Docker
    Hub中的镜像。
- en: 'To build the required images, simply run the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建所需的镜像，只需运行以下命令：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, once built, launch using the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一旦构建完成，使用以下命令启动：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As before, you can then use this command to find out the IP address on Windows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，然后您可以使用此命令查找Windows上的IP地址：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To open the application you just need to put the  IP address of your Docker
    host in your browser. If you are running using macOS, run the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开应用程序，您只需要在浏览器中输入您的Docker主机的IP地址。如果您正在使用macOS，运行以下命令：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should see the following page:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下页面：
- en: '![](Images/8fe03330-f09d-4274-96c9-8bdbc5e641e9.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8fe03330-f09d-4274-96c9-8bdbc5e641e9.png)'
- en: 'Once you have finished with the application, you can run the following command
    to remove it:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 完成应用程序后，您可以运行以下命令来删除它：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have briefly looked at Windows containers. As you have seen,
    thanks to Microsoft's adoption of Docker as a management tool for Windows containers,
    the experience is familiar to anyone who has used Docker to manage Linux containers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了Windows容器。正如您所见，由于微软采用了Docker作为Windows容器的管理工具，这种体验对于任何已经使用Docker来管理Linux容器的人来说都是熟悉的。
- en: In the next chapter, we are going to take a more detailed look at Docker Machine.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地了解Docker Machine。
- en: Questions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Docker on Windows introduces what additional layer of isolation?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows上的Docker引入了哪种额外的隔离层？
- en: Which command would you use to find out the NAT IP address of your Windows container?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用哪个命令来查找Windows容器的NAT IP地址？
- en: 'True or false: Docker on Windows introduces an additional set of commands you
    need to use in order to manage your Windows containers?'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：Windows上的Docker引入了一组额外的命令，您需要使用这些命令来管理Windows容器？
- en: Further reading
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more information on the topics mentioned in this chapter as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本章提到的主题中找到更多信息如下：
- en: Docker and Microsoft Partnership Announcement: [https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/](https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker和微软合作公告：[https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/](https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/)
- en: Windows Server and Docker – The Internals Behind Bringing Docker and Containers
    to Windows: [https://www.youtube.com/watch?v=85nCF5S8Qok](https://www.youtube.com/watch?v=85nCF5S8Qok)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server和Docker-将Docker和容器引入Windows背后的内部机制：[https://www.youtube.com/watch?v=85nCF5S8Qok](https://www.youtube.com/watch?v=85nCF5S8Qok)
- en: Stefan Scherer on GitHub: [https://github.com/stefanScherer/](https://github.com/stefanScherer/)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stefan Scherer在GitHub上：[https://github.com/stefanScherer/](https://github.com/stefanScherer/)
- en: The `dotnet-album-viewer` repository:[ https://github.com/dockersamples/dotnet-album-viewer](https://github.com/dockersamples/dotnet-album-viewer)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet-album-viewer`存储库：[https://github.com/dockersamples/dotnet-album-viewer](https://github.com/dockersamples/dotnet-album-viewer)'
