- en: Having a Little Fun with Images with Pixel Manipulations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过像素操作图像来玩一点
- en: In this chapter, you will learn how to work with images at the pixel level.
    You will invert the colors, changing them around.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何在像素级别处理图像。你将反转颜色，改变它们。
- en: Manipulating an image
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作图像
- en: 'To start, in my `c:\data` folder, I have a file called *lessonimage*. As you
    can see in *Figure 25.4.1*, the writing on the Coke can is red and the background
    seems to be reddish-brown:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我的`c:\data`文件夹中，我有一个名为*lessonimage*的文件。正如你在*图25.4.1*中所看到的，可乐罐上的文字是红色的，背景似乎是红棕色的：
- en: '![](img/2c7d9239-8c8a-4a96-b88a-d44b4da2ddb3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c7d9239-8c8a-4a96-b88a-d44b4da2ddb3.png)'
- en: 'Figure 25.4.1: The image to be used for inverting colors at the pixel level
    in this chapter'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4.1：本章中用于在像素级别反转颜色的图像
- en: What we will do is switch the colors around, so that the writing on the Coke
    can, for example, will become green, and you will learn how you can manipulate
    images at the individual pixel level.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是交换颜色，这样可乐罐上的文字，例如，将变成绿色，你将学习如何在单个像素级别操作图像。
- en: Adding a button and an image control to the HTML
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向HTML添加一个按钮和一个图像控件
- en: Open up a new project. Delete the two lines that begin with `<div...`; also
    delete the `Label` line this time. You don't need any of them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新项目。删除以`<div...`开头的两行；也删除这次的`Label`行。你不需要它们中的任何一个。
- en: Next, you need to insert a `Button` control into the <html> page. To do this,
    go to Toolbox, grab a `Button` control, and drag and drop it below the line beginning
    with `<form id=...`. Change the text on the first button to say `Load`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要在<html>页面中插入一个`Button`控件。要做到这一点，去工具箱，拖动一个`Button`控件，并将其拖放到以`<form id=...`开头的行下面。将第一个按钮上的文本更改为`Load`。
- en: 'Now you need to insert an image control into the <html> page. So, go back to
    Toolbox, grab an `Image` control, and drag and drop it below the previous line,
    leaving a blank line in between the two. Your `Default.aspx` file should look
    like the one shown in *Figure 25.4.2*:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要在<html>页面中插入一个图像控件。所以，回到工具箱，拖动一个`Image`控件，并将其拖放到前一行下面，两者之间留一行空白。你的`Default.aspx`文件应该看起来像*图25.4.2*中显示的那样：
- en: '![](img/c7e93955-7964-4e0f-8e4b-a3efcbbe7faf.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7e93955-7964-4e0f-8e4b-a3efcbbe7faf.png)'
- en: 'Figure 25.4.2: The complete HTML for this chapter'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4.2：本章的完整HTML
- en: 'So, you have a very simple interface for this project: one button to load an
    image and the other one, which is an image control, to display the image:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你为这个项目有一个非常简单的界面：一个按钮用于加载图像，另一个按钮是一个图像控件，用于显示图像：
- en: '![](img/98b33987-950b-4919-b68c-98cff49d3c45.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98b33987-950b-4919-b68c-98cff49d3c45.png)'
- en: 'Figure 25.4.3: The simple interface for our project'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4.3：我们项目的简单界面
- en: 'Now, double-click on the Load button. This takes you into `Default.aspx.cs`.
    Delete the `Page_Load` event; we don''t care about that one. The relevant portion
    of the starting code for this project should look like *Figure 25.4.4*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，双击加载按钮。这会带你进入`Default.aspx.cs`。删除`Page_Load`事件；我们不关心那个。这个项目起始代码的相关部分应该看起来像*图25.4.4*：
- en: '![](img/602ab30a-1c41-427c-8f78-a94a0aed207e.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/602ab30a-1c41-427c-8f78-a94a0aed207e.png)'
- en: 'Figure 25.4.4: The starting code for this project'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4.4：这个项目的起始代码
- en: Adding a namespace
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个命名空间
- en: 'Naturally enough, the first thing to do is to add a new namespace that''s relevant.
    For this, enter the following line under `using System`, near the top of the file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自然而然的，首先要做的是添加一个相关的新命名空间。为此，在文件顶部的`using System`下面输入以下行：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To make things nice and clean, you can collapse all of the code groups at the
    top of the file if you like so that basically the first clearly visible line is
    `public partial class...`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情变得清晰干净，如果你愿意的话，你可以折叠文件顶部的所有代码组，这样基本上第一行清晰可见的是`public partial class...`。
- en: Making a bitmap
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个位图
- en: 'The next stage, of course, is to put in the code that will do what you want
    to do. First, you will make a bitmap. Enter the following between a set of curly
    braces below the line that begins with `protected void Button1_Click...`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，下一步是放入代码来实现你想要的功能。首先，你将制作一个位图。在以`protected void Button1_Click...`开头的行下面的大括号之间输入以下内容：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `Bitmap` is a class that we will call `image`. Basically, you have a map
    of bits that can be manipulated. Then, to initialize it, you pass in a path. In
    this case, it is `(@"c:\data\lessonimage.bmp");`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Bitmap`是一个我们将称之为`image`的类。基本上，你有一个可以操作的位图。然后，为了初始化它，你传入一个路径。在这种情况下，它是`(@"c:\data\lessonimage.bmp");`。
- en: Saving an image as a bitmap picture
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像保存为位图图片
- en: 'Next, open Paint and load the image to be manipulated in this chapter, as shown
    in *Figure 25.4.5*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开画图并加载本章要操作的图像，如*图25.4.5*所示：
- en: '![](img/23cc9d1c-8265-41b0-850f-0491cb363b4a.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23cc9d1c-8265-41b0-850f-0491cb363b4a.png)'
- en: 'Figure 25.4.5: The image to be manipulated in Paint'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4.5：在画图中要操作的图像
- en: 'Now, to save it as a bitmap, go to File | Save As, and then select BMP picture,
    as shown in *Figure 25.4.6*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要将其保存为位图，转到文件 | 另存为，然后选择BMP图片，如*图25.4.6*所示：
- en: '![](img/160c3084-1002-40b2-879c-c6c78c91b2de.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/160c3084-1002-40b2-879c-c6c78c91b2de.png)'
- en: 'Figure 25.4.6: Save As options in Paint'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4.6：画图中的另存为选项
- en: 'The description of BMP picture says Save any kind of picture with high quality
    and use it on your computer. When you go to save the file, the Save as type: field
    in the Save As dialog box says 24-bit bitmap (*.bmp;*.dib). You can save any images
    as a bitmap there.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: BMP图片的描述说保存任何类型的高质量图片并在计算机上使用。当你要保存文件时，另存为对话框中的文件类型字段显示为24位位图(*.bmp;*.dib)。你可以将任何图像保存为位图。
- en: Accessing a pixel's location
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问像素的位置
- en: 'Next, enter the following after `Bitmap image = new Bitmap...` line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Bitmap image = new Bitmap...`行后输入以下内容：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You need this line to get each pixel's location inside the image.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要这行来获取图像中每个像素的位置。
- en: 'Now, to access each pixel''s location, you need nested `for` loops. Start by
    entering this line next:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要访问每个像素的位置，你需要嵌套的`for`循环。首先输入下一行：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The outer `for` loop here is for controlling the horizontal movement of the
    `x` coordinate.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的外部`for`循环用于控制`x`坐标的水平移动。
- en: 'Now, between a set of curly braces, enter the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在一对花括号之间，输入以下内容：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This inner `for` loop is needed to control the `y` coordinate of each pixel,
    or its vertical position.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个内部的`for`循环是为了控制每个像素的`y`坐标，或者它的垂直位置。
- en: Manipulating the pixels
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操纵像素
- en: 'Once you''ve done all of that, the next stage is to manipulate the pixels.
    So, start with another set of curly braces, and begin by entering the following,
    indented, between them:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了所有这些，下一阶段就是操纵像素。所以，从另一组花括号开始，并在它们之间输入以下内容，缩进：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This line begins by reading each pixel's color first. If you hover your mouse
    over `GetPixel` in this line, you will see that it returns a color, not the location.
    The tooltip says that it Gets the color of the specified pixel in this Bitmap.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行首先读取每个像素的颜色。如果你将鼠标悬停在这一行的`GetPixel`上，你会看到它返回的是颜色，而不是位置。工具提示说它获取了位图中指定像素的颜色。
- en: 'Now you''ll make a new color. Enter the following, also indented, next:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将创建一个新的颜色。输入以下内容，也缩进，接下来：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `Color` following the `=` sign is a `struct` value type. In addition to
    `FromArgb`, you can also use `FromKnownColor` or `FromName`. This means that the
    string name is known. Following `FromArgb`, you say `pixelColor.B` to get the
    blue component of this color structure, `pixelColor.R` to get the red component,
    and then `pixelColor.G` to get the green component. Thus, you make a new `Color`
    object with this line.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`=`符号后面的`Color`是一个`struct`值类型。除了`FromArgb`，你还可以使用`FromKnownColor`或`FromName`。这意味着字符串名称是已知的。在`FromArgb`后面，你说`pixelColor.B`来获取这个颜色结构的蓝色分量，`pixelColor.R`来获取红色分量，然后`pixelColor.G`来获取绿色分量。因此，你用这一行创建了一个新的`Color`对象。
- en: 'Next, enter the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下内容：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you hover your mouse over `SetPixel`, the tooltip says Sets the color of
    the specified pixel in this Bitmap. Then, `(x, y, newColor)` represents the new
    color to be used to color that pixel.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标悬停在`SetPixel`上，工具提示说在这个位图中设置指定像素的颜色。然后，`(x, y, newColor)`表示要用来着色该像素的新颜色。
- en: Converting the picture to a byte array
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图片转换为字节数组
- en: 'Now you need to be able to display the picture. You need to write some code
    to accomplish the conversion. So, start by entering the following beneath the
    closed curly brace of the outer `for` loop:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要能够显示图片。你需要写一些代码来完成转换。所以，从外部`for`循环的闭合花括号下面输入以下内容：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, you make a byte array, called `picBytes`, then `(byte[])` is used to convert
    for casting. There's an image converter class, so you make a new `ImageConverter()`
    class, and then you convert to a destination type, `typeof`, and then `byte`.
    So, here you convert the picture to a byte array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你创建了一个名为`picBytes`的字节数组，然后使用`(byte[])`进行转换。有一个图像转换器类，所以你创建了一个新的`ImageConverter()`类，然后你转换为目标类型，`typeof`，然后是`byte`。所以，在这里你将图片转换为字节数组。
- en: Now if you were to remove the `(byte[])` cast, the tooltip would then say that
    your byte array Cannot implicitly convert type 'object' to byte[]. This is the
    case because `ConvertTo` returns an object. Thus, you need to have that `(byte[])`
    cast right there in front of it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你去掉`(byte[])`的转换，工具提示会说你的字节数组不能隐式转换为'object'。这是因为`ConvertTo`返回一个对象。因此，你需要在它的前面有`(byte[])`转换。
- en: 'Now that you have this, you can say the following next:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了这个，接下来可以说以下内容：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Inside `Convert`, you can now enter `Convert.ToBase64String`, and `picBytes`
    can be converted to `base64` string.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Convert`内部，你现在可以输入`Convert.ToBase64String`，并且`picBytes`可以转换为`base64`字符串。
- en: Sending out the image URL
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送图片URL
- en: 'Now you can send out the image URL, so enter the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以发送图片URL，所以输入以下内容：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `baseString` variable at the end of this line is the result of running two
    `base64` strings on an array of picture bytes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行的末尾的`baseString`变量是在一个图片字节数组上运行两个`base64`字符串的结果。
- en: Running the program
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'With this in place, now let''s take a look at the results; open your browser
    and click on the Load button. The altered image is shown in *Figure 25.4.7*:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，现在让我们来看一下结果；打开你的浏览器，点击加载按钮。修改后的图片显示在*图25.4.7*中：
- en: '![](img/963e3bbc-bced-4496-a792-cc7f8e6a6842.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/963e3bbc-bced-4496-a792-cc7f8e6a6842.png)'
- en: 'Figure 25.4.7: The manipulated image that resulted when the program was run'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4.7：运行程序时产生的操纵后的图片
- en: 'You''ll see now that the picture has been inverted as promised: the colors
    are green. The background was kind of a reddish-brown in the original, and now
    it''s green. The man''s hair was kind of brown and now it''s kind of dark, and
    likewise with the table. Some of the things, however, do not appear to be much
    affected, like the money color, right? That is still kind of grayish. The same
    thing with the black objects in the image.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你会看到，承诺的图片已经被反转：颜色是绿色的。原来的背景有点红棕色，现在是绿色的。男人的头发原来有点棕色，现在有点深色，桌子也是一样。然而，有些东西似乎没有受到太大影响，比如钱的颜色，对吧？那仍然有点灰色。图片中的黑色物体也是一样。
- en: As you can see, you can manipulate images, change them around, and make them
    look very different, so nothing is really permanently fixed. That's the point.
    Also, you can access each pixel individually, change the color, and then the last
    three lines of code in the program are responsible for allowing you to write `Image1.ImageUrl`.
    To set this image URL, you need to go through the first two lines in that group
    of three. There could be some simpler ways of doing it, but this is one way that
    works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你可以操纵图片，改变它们的位置，并使它们看起来非常不同，所以没有什么是真正固定的。这就是重点。此外，你可以单独访问每个像素，改变颜色，然后程序中最后三行代码负责让你写入`Image1.ImageUrl`。要设置这个图片的URL，你需要通过这三行中的前两行。可能有一些更简单的方法，但这是一个可行的方法。
- en: Chapter review
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Default.aspx.cs`文件的完整版本，包括注释，显示在以下代码块中：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to work with images at the pixel level. You
    inverted the colors, changing them around. You inserted a button and image control
    into the HTML, made a bitmap, saved an image as a bitmap picture, wrote the code
    to access each pixel's location to manipulate the pixels, converted the picture
    to a byte array, and sent out the image URL.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何在像素级别处理图像。您反转了颜色，对其进行了更改。您将按钮和图像控件插入到HTML中，制作了位图，将图像保存为位图图片，编写了访问每个像素位置以操纵像素的代码，将图片转换为字节数组，并发送了图像URL。
- en: In the next chapter, you will learn how to read files and then save them to
    SQL Server as images.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何读取文件，然后将它们保存到SQL Server作为图像。
