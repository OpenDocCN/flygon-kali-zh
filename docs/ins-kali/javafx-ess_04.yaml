- en: Chapter 4. Developing a JavaFX Application for Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。为Android开发JavaFX应用程序
- en: There is no doubt that we are seeing a rise in non-PC clients every day. Almost
    everyone has at least one mobile phone or tablet, maybe from different vendors,
    but certainly with Android or iOS, given that they represent 96 percent of smart
    phone OSs sold in 2014.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，我们每天都在看到非PC客户端的增长。几乎每个人都至少有一部手机或平板电脑，可能来自不同的供应商，但肯定是带有Android或iOS的，因为它们在2014年占据了96%的智能手机操作系统销售份额。
- en: Smart phones and tablets are extremely popular nowadays and these figures are
    increasing every year. And that is why developers should consider gaining the
    skills required to develop applications for such a great market.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机和平板电脑现在非常流行，这些数字每年都在增加。这就是为什么开发人员应该考虑获得开发这样一个巨大市场的应用程序所需的技能。
- en: JavaFX 8 already delivers rich client applications for Web and desktop, as we
    have seen in [Chapter 3](ch03.html "Chapter 3. Developing a JavaFX Desktop and
    Web Application"), *Developing a JavaFX Desktop and Web Application*. But, like
    me, if you have written a JavaFX application, you definitely want it to run on
    as many devices as possible to follow the true spirit of *Write Once, Run Anywhere*.
    I would like to take this opportunity to inform you that, yes, we can run JavaFX
    on mobile devices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 8已经为Web和桌面提供了丰富的客户端应用程序，正如我们在[第3章](ch03.html "第3章。开发JavaFX桌面和Web应用程序")中所看到的，*开发JavaFX桌面和Web应用程序*。但是，如果像我一样，您已经编写了一个JavaFX应用程序，您肯定希望它能在尽可能多的设备上运行，以遵循*Write
    Once, Run Anywhere*的真正精神。我想借此机会告诉您，是的，我们可以在移动设备上运行JavaFX。
- en: Based on the official support from Oracle Corporation for JavaFX, a number of
    people inside the JavaFX community are working to port JavaFX to make it run on
    as many devices and platforms as possible (desktop, mobile, and embedded) and
    different operating systems, with the same codebase.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Oracle Corporation对JavaFX的官方支持，JavaFX社区内的许多人正在努力将JavaFX移植到尽可能多的设备和平台（桌面、移动和嵌入式）以及不同的操作系统上，使用相同的代码库。
- en: They have successfully created SDKs that allow us to develop JavaFX applications
    as native applications to run on Android or iOS-based devices in one bundle (*JVM
    plus application*) without any extra software needed to run them as in desktop
    or Web.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 他们已经成功地创建了SDK，使我们能够开发JavaFX应用程序作为本机应用程序在Android或基于iOS的设备上运行在一个捆绑包中（*JVM加应用程序*），而无需像在桌面或Web上运行它们一样需要任何额外的软件。
- en: This chapter will give you the essential hands-on knowledge about SDKs that
    will allow you to create, package, and deploy native applications for Android.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供关于SDK的基本实践知识，这将使您能够为Android创建、打包和部署本机应用程序。
- en: 'Here are some skills that will be gained during this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中将获得以下一些技能：
- en: Installing and configuring Android environment tools and software
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Android环境工具和软件
- en: Preparing and creating the JavaFX 8 mobile project structure
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备和创建JavaFX 8移动项目结构
- en: Creating an Android JavaFX 8 application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Android JavaFX 8应用程序
- en: Interoperability between JavaFX 8 and Android low-level APIs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaFX 8与Android低级API之间的互操作性
- en: Packaging and deploying applications on mobile devices
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在移动设备上打包和部署应用程序
- en: Signing the application for final Google Play Store submission
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为最终的Google Play商店提交应用程序进行签名
- en: Why port JavaFX into the mobile environment?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要将JavaFX移植到移动环境？
- en: Why port JavaFX into the mobile environment? Isn't it **Write Once Run Anywhere**
    (**WORA**)? This is a very good question to ask. Any Java application follows
    the WORA paradigm, but with a very critical abstract piece of software that it
    relies on to run and is called **Java Virtual Machine** (**JVM**).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要将JavaFX移植到移动环境？这不是**Write Once Run Anywhere**（**WORA**）吗？这是一个非常好的问题。任何Java应用程序都遵循WORA范例，但是有一个非常关键的抽象软件，它依赖于运行，被称为**Java
    Virtual Machine**（**JVM**）。
- en: JVM is the software responsible for translating the compiled byte code (*.class
    file*) for a specific machine and providing platform instructions that it can
    understand and run, so you can run your application. Therefore, you will find
    different versions of JRE or **JDK** for each hardware (Intel, AMD, SPARC, or
    ARM) and platform (Windows, Mac, Linux, or Solaris).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JVM是负责将编译的字节码（*.class文件*）翻译为特定机器并提供平台指令以便它能理解和运行的软件，因此您可以运行您的应用程序。因此，您会发现为每种硬件（Intel、AMD、SPARC或ARM）和平台（Windows、Mac、Linux或Solaris）都有不同版本的JRE或**JDK**。
- en: On Desktop, Web, or embedded devices, you have to first install the **Java Runtime
    Environment** (**JRE**) to be able to run your Java application. But, for mobile
    devices, you will notice that you just download your application from the Store,
    install it, and finally run it without any extra software. Also, some closed platforms
    don't allow the JVM to be installed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在桌面、Web或嵌入式设备上，您必须首先安装**Java Runtime Environment**（**JRE**）才能运行您的Java应用程序。但是，对于移动设备，您会注意到您只需从商店下载您的应用程序，安装它，最后运行它，而无需任何额外的软件。此外，一些封闭平台不允许安装JVM。
- en: For a better end user experience, there should be no difference between running
    JavaFX applications and running other applications targeting Android or iOS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好的最终用户体验，运行JavaFX应用程序和运行其他针对Android或iOS的应用程序之间不应该有任何区别。
- en: Therefore, we should have a self-contained (the application plus JVM) JavaFX
    application that can run on mobile devices. In addition to the ability to interact
    with Android low-level APIs to control device features, it will be treated similarly
    to other applications in the Google Play Store.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应该有一个自包含的（应用程序加上JVM）JavaFX应用程序，可以在移动设备上运行。除了能够与Android低级API交互以控制设备功能外，它将被视为Google
    Play商店中的其他应用程序。
- en: We should thank the community for bringing up such porting SDKs and filling
    this gap to allow us to create and run our JavaFX applications on iOS using the
    port from RoboVM ([http://www.robovm.org/](http://www.robovm.org/)) and on Android
    using the port from JavaFXPorts ([http://javafxports.org/](http://javafxports.org/)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该感谢社区提出这样的移植SDK，并填补这一空白，使我们能够使用RoboVM（[http://www.robovm.org/](http://www.robovm.org/)）上的移植和使用JavaFXPorts（[http://javafxports.org/](http://javafxports.org/)）上的移植在iOS上创建和运行我们的JavaFX应用程序，并在Android上创建和运行我们的JavaFX应用程序。
- en: Since February 2015, an agreement between the companies behind those projects
    has been in force, and now a single plugin called `jfxmobile-plugin` allows us
    to build applications for three platforms desktop, Android, and iOS from the same
    codebase.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自2015年2月以来，这些项目背后的公司之间达成了协议，现在一个名为`jfxmobile-plugin`的单一插件允许我们从相同的代码库构建三个平台的应用程序：桌面、Android和iOS。
- en: Also, a new company called **Gluon** offers a free plugin ([http://gluonhq.com/products/tools/ide-plugins/](http://gluonhq.com/products/tools/ide-plugins/))
    for **NetBeans** that creates a project with everything required to build applications
    based on `jfxmobile-plugin`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一家名为**Gluon**的新公司提供了一个免费插件（[http://gluonhq.com/products/tools/ide-plugins/](http://gluonhq.com/products/tools/ide-plugins/)），用于**NetBeans**，它创建了一个项目，其中包含构建基于`jfxmobile-plugin`的应用程序所需的一切。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: But bear in mind that all of this is constantly evolving and things may change
    from what is stated here.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，所有这些都在不断发展，事情可能会有所变化。
- en: How it works
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Both RoboVM for iOS porting and JavaFXPorts for Android porting contain all
    the required libraries to make it easy to package your JavaFX 8 application with
    the required runtime environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: RoboVM用于iOS移植和JavaFXPorts用于Android移植都包含了所有必需的库，以便轻松打包您的JavaFX 8应用程序和所需的运行时环境。
- en: When using RoboVM for iOS to package your JavaFX application (to an `.ipa` package
    file), all your JavaFX applications are transformed into **Objective-C** (currently
    **Swift**) applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RoboVM将JavaFX应用程序打包到iOS（到`.ipa`包文件）时，所有JavaFX应用程序都会转换为**Objective-C**（目前是**Swift**）应用程序。
- en: When packaging your JavaFX application using JavaFXPorts for Android (to the
    `.apk` package file), the applications are transformed into Android packages running
    on top of the **Dalvik** VM.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用JavaFXPorts将JavaFX应用程序打包到Android（到`.apk`包文件）时，这些应用程序将被转换为在**Dalvik** VM上运行的Android包。
- en: These SDKs contain a lot of native code that will be ported to iOS and Android
    after injecting them inside your JavaFX application in order to increase application
    performance.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些SDK包含了大量的本地代码，将在将它们注入到您的JavaFX应用程序中后，被移植到iOS和Android，以提高应用程序的性能。
- en: Using these SDK's, we can package our applications into formats (`.ipa` for
    iOS and `.apk` for Android) that are suitable for submission to Stores.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些SDK，我们可以将我们的应用程序打包成适合提交到商店的格式（`.ipa`用于iOS和`.apk`用于Android）。
- en: Who is maintaining it?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁在维护它？
- en: Don't worry—there is free support on a large scale for porting JavaFX to both
    Android and iOS, as well as commercial support.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心 - 有大规模的免费支持，用于将JavaFX移植到Android和iOS，以及商业支持。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For free and commercial support, both the RoboVM and JavaFXPorts communities
    use this Google group:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于免费和商业支持，RoboVM和JavaFXPorts社区都使用这个Google小组：
- en: '[https://groups.google.com/forum/#!forum/javafxports](https://groups.google.com/forum/#!forum/javafxports)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://groups.google.com/forum/#!forum/javafxports](https://groups.google.com/forum/#!forum/javafxports)'
- en: Free and commercial support is mainly available from people in the community
    and those who are actively involved in both projects. And they encourage more
    third parties to be involved as well.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 免费和商业支持主要来自社区中积极参与这两个项目的人，他们鼓励更多的第三方参与。
- en: For iOS, RoboVM has different plans for developers; you can check them at [http://robovm.com/pricing/](http://robovm.com/pricing/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS，RoboVM为开发者提供了不同的计划；您可以在[http://robovm.com/pricing/](http://robovm.com/pricing/)上查看。
- en: While for Android, the company **LodgON** offers support for JavaFX-Android
    integration as part of their support for JavaFX porting ([http://www.lodgon.com/dali/page/JavaFX_Consulting](http://www.lodgon.com/dali/page/JavaFX_Consulting)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于Android，公司**LodgON**提供对JavaFX-Android集成的支持，作为他们对JavaFX移植的支持的一部分（[http://www.lodgon.com/dali/page/JavaFX_Consulting](http://www.lodgon.com/dali/page/JavaFX_Consulting)）。
- en: Getting started
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: We now have enough information on how the tools and SDKs discussed previously
    will let us get started on developing our JavaFX applications and porting them
    to Android mobile devices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经有足够的信息，了解之前讨论的工具和SDK将如何让我们开始开发JavaFX应用程序，并将它们移植到Android移动设备上。
- en: But before moving to the development stage, we should have the tools and software
    installed and configured properly in order to complete the development process,
    based on the provided SDKs, to have a final `.apk` package at hand.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但在进入开发阶段之前，我们应该正确安装和配置工具和软件，以便根据提供的SDK完成开发过程，以便拥有最终的`.apk`包。
- en: We will deploy this `.apk` package on real devices and finally we will sign
    it for final submission to Google Play Store.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在真实设备上部署这个`.apk`包，并最终对其进行签名，以便提交到Google Play商店。
- en: So let's get started with installing the prerequisite tools and software to
    start developing our application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始安装先决工具和软件，以便开始开发我们的应用程序。
- en: Preparing and installing the prerequisite software
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备和安装先决软件
- en: We need to install the following list of tools and software in order to have
    our build process complete without any problem.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装以下工具和软件列表，以便在没有任何问题的情况下完成我们的构建过程。
- en: Java SE 8 JDK8 u45
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java SE 8 JDK8 u45
- en: We have already done this before; refer to the *Installing Java SE 8 JDK* section
    in [Chapter 1](ch01.html "Chapter 1. Getting Started with JavaFX 8"), *Getting
    Started with JavaFX 8*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以前已经做过这个了；参考[第1章](ch01.html "第1章. 开始使用JavaFX 8")中的*安装Java SE 8 JDK*部分，*开始使用JavaFX
    8*。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Java SE 8 update 40 is the minimum version required in order to develop JavaFX
    applications for Android.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Java SE 8更新40是为了开发Android的JavaFX应用程序所需的最低版本。
- en: Gradle
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gradle
- en: 'From their website, this is the definition of Gradle:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从他们的网站上，这是Gradle的定义：
- en: '*Gradle is an open source build automation system. Gradle can automate the
    building, testing, publishing, deployment, and more of software packages or other
    types of projects, such as generated static websites, generated documentation,
    or indeed anything else.*'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Gradle是一个开源的构建自动化系统。Gradle可以自动化构建、测试、发布、部署等软件包或其他类型的项目，比如生成的静态网站、生成的文档，或者其他任何东西。*'
- en: Recently, Android development tools changed their build system to Gradle. The
    RoboVM and JavaFXPorts porting projects mimic the same tools.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Android开发工具将他们的构建系统更改为Gradle。RoboVM和JavaFXPorts移植项目模仿了相同的工具。
- en: 'Installing Gradle is a very straightforward task:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Gradle是一个非常简单的任务：
- en: Go to [https://gradle.org](https://gradle.org).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://gradle.org](https://gradle.org)。
- en: From the right-hand side, under the **GET GRADLE!** Section, click on **Downloads
    2.4** (as of this writing) and the download process will start for the `gradle-2.4-all.zip`
    file.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧，在**GET GRADLE!**部分，点击**Downloads 2.4**（截至目前为止），下载过程将开始下载`gradle-2.4-all.zip`文件。
- en: Copy the downloaded `.zip` file into a convenient location of your choice and
    unzip it.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的`.zip`文件复制到您选择的方便位置并解压缩它。
- en: 'The final step is to set the environment variable into your system as the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是将环境变量设置到您的系统中，如下所示：
- en: 'On Windows – Assume Gradle is installed at `c:\tools\gradle_2.4`:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上 - 假设Gradle安装在`c:\tools\gradle_2.4`：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On Mac – Assume Gradle is installed at `/usr/local/tools/gradle_2.4`:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上 - 假设Gradle安装在`/usr/local/tools/gradle_2.4`：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Android SDK
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android SDK
- en: The Android SDK includes the complete set of development and debugging tools
    for the Android platform.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK包括Android平台的完整开发和调试工具集。
- en: 'Installing Android SDK is a very straightforward task:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Android SDK是一个非常简单的任务：
- en: Go to [http://developer.android.com/sdk/index.html#Other](http://developer.android.com/sdk/index.html#Other).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[http://developer.android.com/sdk/index.html#Other](http://developer.android.com/sdk/index.html#Other)。
- en: Under SDK Tools Only, click `on android-sdk_r24.2-{platform}`.`{exe|zip|tgz}`
    (as of this writing) against the name of your favorite platform:![Android SDK](img/B03998_04_01.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SDK Tools Only下，点击`android-sdk_r24.2-{platform}`.`{exe|zip|tgz}`（截至目前为止），针对您喜欢的平台的名称：![Android
    SDK](img/B03998_04_01.jpg)
- en: A `Download` page will open; accept the terms, click on the `Download android-sdk_r24.2-{platform}`.`{exe|zip|tgz}`
    button, and the download process will start.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开一个`Download`页面；接受条款，点击`Download android-sdk_r24.2-{platform}`.`{exe|zip|tgz}`按钮，下载过程将开始。
- en: Copy the downloaded `.zip` file into a convenient location and unzip it, or
    double-click the `.exe` on Windows to start the installation.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的`.zip`文件复制到一个方便的位置并解压缩它，或者在Windows上双击`.exe`来开始安装。
- en: 'From the command line, run the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令行运行以下命令：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Android SDK Manager will open; click on `Build-tools version 21.1.2` or
    higher and the SDK Platform for API 21 or higher.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK Manager将打开；点击`Build-tools version 21.1.2`或更高版本以及API 21或更高版本的SDK平台。
- en: Click on **Install x packages**, accept the license, and click on **Install**.
    You are done.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Install x packages**，接受许可证，然后点击**Install**。完成。
- en: A good reference for Android SDK Manager is at [http://developer.android.com/sdk/installing/adding-packages.html](http://developer.android.com/sdk/installing/adding-packages.html).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK Manager的一个很好的参考资料在[http://developer.android.com/sdk/installing/adding-packages.html](http://developer.android.com/sdk/installing/adding-packages.html)。
- en: 'The final step is to set the environment variable in your system as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是在您的系统中设置环境变量，如下所示：
- en: 'On Windows – Assume the Android SDK is installed at `c:\tools\android_ADT`:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上 - 假设Android SDK安装在`c:\tools\android_ADT`：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On Mac – Assume the Android SDK is installed at `/usr/local/tools/android_ADT`:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上 - 假设Android SDK安装在`/usr/local/tools/android_ADT`：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The best approach for this is to create a Gradle property with the name ANDROID_HOME
    defined under `C:\Users\<user>\.gradle\gradle.properties`
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样做的最佳方法是在`C:\Users\<user>\.gradle\gradle.properties`下创建一个名为ANDROID_HOME的Gradle属性。
- en: Preparing the project for Android
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Android准备项目
- en: We have successfully installed the prerequisite software and tools and configured
    the environmental variables, so we are ready to start developing the application
    that will be ported into the Android device.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功安装了先决条件软件和工具，并配置了环境变量，所以我们准备开始开发将被移植到Android设备的应用程序。
- en: But before we do so, we need to prepare our project structure and the build
    file as well in order to be ready for building and packaging our application with
    JavaFXPorts libraries.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这之前，我们需要准备好我们的项目结构和构建文件，以便准备好使用JavaFXPorts库构建和打包我们的应用程序。
- en: Setting up a complex project with three different platforms would have been
    a hard task, until now. But recently, Gluon (http://gluonhq.com/) has released
    a NetBeans plugin ([http://gluonhq.com/gluon-plugin-for-netbeans/](http://gluonhq.com/gluon-plugin-for-netbeans/))
    that simplifies this task to a great degree.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用三种不同平台设置一个复杂的项目曾经是一项艰巨的任务，但最近Gluon（http://gluonhq.com/）发布了一个NetBeans插件（[http://gluonhq.com/gluon-plugin-for-netbeans/](http://gluonhq.com/gluon-plugin-for-netbeans/)），大大简化了这项任务。
- en: Project structure
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目结构
- en: The easiest way is to use the Gluon plugin for NetBeans. This will create everything
    for you a Java project, where you just need to add the JavaFX sources, and a `build.gradle`
    file with all the tasks ready.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用NetBeans的Gluon插件。这将为您创建一个Java项目，您只需要添加JavaFX源代码和一个带有所有任务准备的`build.gradle`文件。
- en: 'Once you have installed the plugin, perform the following tasks:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了插件后，执行以下任务：
- en: Just create a new JavaFX project and select **Basic Gluon Application**, as
    shown here:![Project structure](img/B03998_04_02.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需创建一个新的JavaFX项目，并选择**Basic Gluon Application**，如下所示：![Project structure](img/B03998_04_02.jpg)
- en: Select valid names for the project (`DialPad2`), packages (`packt.taman.jfx8.ch4`),
    and the main class (`DialPad2`) and you will find a bunch of folders in your new
    project.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目（`DialPad2`）、包（`packt.taman.jfx8.ch4`）和主类（`DialPad2`）选择有效的名称，您将在新项目中找到一堆文件夹。
- en: The top project structure following the Gluon plugin will bring a more complex
    structure and should be as seen in the following screenshot:![Project structure](img/B03998_04_04.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遵循Gluon插件的顶部项目结构将带来更复杂的结构，并且应该如下截图所示：![项目结构](img/B03998_04_04.jpg)
- en: The Gluon plugin project structure
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Gluon插件项目结构
- en: Next, we are going to add our build script file to complete our mission.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加我们的构建脚本文件以完成我们的任务。
- en: Using Gradle
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Gradle
- en: To build a Gradle project, we need the `build.gradle` script file. The Gluon
    plugin has already added this file for you by default, including all the properties
    to allow our application to run and compile successfully.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个Gradle项目，我们需要`build.gradle`脚本文件。Gluon插件已经默认为您添加了此文件，包括所有属性，以允许我们的应用程序成功运行和编译。
- en: 'The default Gradle build file created `build.gradle` file should be as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Gradle构建文件创建`build.gradle`文件应该如下所示：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The only important thing to change is the `jfxmobile-plugin` version to 1.0.0-b8
    (or the most recent one; check [https://bitbucket.org/javafxports/javafxmobile-plugin/overview](https://bitbucket.org/javafxports/javafxmobile-plugin/overview)
    frequently to keep it updated).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要更改的重要事项是将`jfxmobile-plugin`版本更改为1.0.0-b8（或最新版本；请经常查看[https://bitbucket.org/javafxports/javafxmobile-plugin/overview](https://bitbucket.org/javafxports/javafxmobile-plugin/overview)以保持更新）。
- en: The application
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 该应用程序
- en: The fact that you have reached this section means that we have finished setting
    up the application project structure correctly, and it's now ready for mobile
    device development.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经到达这一部分意味着我们已经正确设置了应用程序项目结构，并且现在已经准备好进行移动设备开发。
- en: Our application will be a new smart phone dial pad interface to perform calls
    on our device with its default dialer. It will be customized with CSS to control
    its skinning style, which can be modified to get the native look and feel for
    different platforms.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将是一个新的智能手机拨号界面，用于在我们的设备上执行呼叫操作。它将使用CSS进行自定义以控制其外观样式，可以根据需要修改以获得不同平台的本机外观和感觉。
- en: The main aim of this application is to provide a new UI concept (to customize
    an application using CSS), and you will learn how to use the CSS id and class
    selectors as well as setting them from inside the code to be applied to different
    controls.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的主要目的是提供一个新的UI概念（使用CSS自定义应用程序），您将学习如何使用CSS id和class选择器以及从代码内部设置它们以应用于不同的控件。
- en: 'The following screenshots show the application before and after applying the
    CSS file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了应用程序在应用CSS文件之前和之后的样子：
- en: '![The application](img/B03998_04_03.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序](img/B03998_04_03.jpg)'
- en: Developing and styling an application UI with CSS
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用CSS开发和样式化应用程序UI
- en: As we have learned before, I will start prototyping our application; after the
    prototyping, we should have the application UI we saw earlier.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前学到的，我将开始原型设计我们的应用程序；在原型设计之后，我们应该有之前看到的应用程序UI。
- en: This application UI is written directly inside the `start(Stage)` function of
    the class `DialPad2.java`, as an alternative way to develop UIs rather than using
    static FXML design.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序UI直接写在`DialPad2.java`类的`start(Stage)`函数内，作为一种开发UI的替代方式，而不是使用静态的FXML设计。
- en: Here, we nested controls from inside the code in case we need to dynamically
    generate UI controls and assign them different settings, `CSS` classes, `ids`
    selectors, and `listeners`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从代码内部嵌套控件，以防需要动态生成UI控件并为它们分配不同的设置、CSS类、id选择器和监听器。
- en: 'The following code snippet shows how we produced the preceding application
    UI:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了我们如何生成前面的应用程序UI：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The code starts by creating a scene that has `BorderPane` as a root node. After
    the scene is created, the code loads the CSS style sheet file, `Mobile_UI.<platform>.css`,
    to style the current scene''s nodes via the `getStylesheets().add()` method as
    follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先创建一个以`BorderPane`为根节点的场景。创建场景后，代码加载CSS样式表文件`Mobile_UI.<platform>.css`，通过`getStylesheets().add()`方法来为当前场景的节点设置样式，如下所示：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After we have created a `TextField` output to show the dial result and set it
    to be disabled so we can't edit it, the numbers are added and displayed just by
    clicking on the buttons.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了一个`TextField`输出来显示拨号结果并将其设置为禁用，以便我们无法编辑它之后，只需点击按钮即可添加和显示数字。
- en: Next, the code simply creates a grid using the `GridPane` class and generates
    12 buttons to be placed in each cell. Notice in the for loop that each button
    is set with the style class named `dial-num-btn` via the `getStyleClass().add()`
    method.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，代码简单地使用`GridPane`类创建一个网格，并生成12个按钮放置在每个单元格中。请注意，在for循环中，每个按钮都通过`getStyleClass().add()`方法设置为名为`dial-num-btn`的样式类。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We use here an old classic `for` loop for adding the buttons, and not a fancy
    Java 8 stream. Be aware that `Dalvik VM` runs only on Java 7, and only lambdas
    can be used (since, internally, JavaFXPorts uses the Retrolambda project).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个传统的`for`循环来添加按钮，而不是一个花哨的Java 8流。请注意，`Dalvik VM`仅在Java 7上运行，并且只能使用lambda（因为在内部，JavaFXPorts使用Retrolambda项目）。
- en: Lastly, the dark blue **Call** button will be added to the last row of the grid
    pane. Because the **Call** button is unique, its id selector is set with `#call-btn`,
    and it will be styled using the id selector, which means the selector named inside
    the CSS file will be prefixed with the `#` symbol.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，深蓝色的**Call**按钮将添加到网格窗格的最后一行。因为**Call**按钮是唯一的，它的id选择器设置为`#call-btn`，并且将使用id选择器进行样式设置，这意味着CSS文件中的选择器将以`#`符号为前缀。
- en: 'The following is the CSS file used to style the application:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于样式化应用程序的CSS文件：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For more information about JavaFX 8 CSS properties, visit the following JavaFX
    8 CSS reference:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有关JavaFX 8 CSS属性的更多信息，请访问以下JavaFX 8 CSS参考：
- en: '[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html](http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html](http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html)'
- en: Adding some logic
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一些逻辑
- en: 'As you have seen in the code snippet, each of the 12 buttons has an action
    assigned using a lambda expression that is dynamically created as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在代码片段中所看到的，每个12个按钮都有一个分配的操作，使用lambda表达式动态创建如下：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We get the output `TextField` and concatenate the next number, asterisk, or
    hash symbol by getting the source of the event `e`, which in our case is the clicked
    button, and then its text value, containing the number to dial.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到输出`TextField`并通过获取事件`e`的源来连接下一个数字、星号或井号，而在我们的情况下，这是点击的按钮，然后它的文本值，包含要拨打的号码。
- en: Making your project ready for mobile devices
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使您的项目适用于移动设备
- en: Basically, this new project was generated with the Gluon plugin (`build.gradle`
    updated to **b8**).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这个新项目是使用Gluon插件生成的（`build.gradle`更新到**b8**）。
- en: In order to make the application ready for mobile devices, we need to adjust
    its height and width to the target device screen and make the UI tree respond
    to that accordingly.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序适用于移动设备，我们需要调整其高度和宽度以适应目标设备屏幕，并使UI树相应地做出响应。
- en: 'This is a very simple yet important step and we can adjust the following line
    of code by setting the scene height and width to the target device screen dimensions
    dynamically. Have a look at the following line:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单但非常重要的步骤，我们可以通过将场景高度和宽度设置为目标设备屏幕尺寸来调整以下代码行。看一下以下行：
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Change this to the following lines of code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将此更改为以下代码行：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first line gets the device screen `bounds`. Then we set the scene height
    and width from this bounds variable.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行获取设备屏幕`bounds`。然后我们从这个边界变量设置场景高度和宽度。
- en: 'The second line adds your sources to the Sources Packages [Java] and Resources
    [Main]. It then adds a `PlatformFactory` class, which is in charge of finding
    which platform the project is running from. Have a look at the `Platform` interface
    with a method signature:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行将您的源添加到源包[Java]和资源[Main]。然后添加一个`PlatformFactory`类，负责查找项目正在运行的平台。看一下具有方法签名的`Platform`接口：
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This allows you to call the following method on your source:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许您在源上调用以下方法：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, you provide the native solution for each platform. For instance, for
    Android:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您为每个平台提供本机解决方案。例如，对于Android：
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For this to work on Android, we only need to modify `AndroidManifest.xml`,
    adding the required permission and the activity intent. This custom manifest has
    to be referenced on the `build.gradle` file as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其在Android上工作，我们只需要修改`AndroidManifest.xml`，添加所需的权限和活动意图。这个自定义清单必须在`build.gradle`文件中引用，如下所示：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Interoperability with low-level Android APIs
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与低级Android API的互操作性
- en: You need `android.jar` in order to use the Android API's, and you need `jfxdvk.jar`
    in order to access the `FXActivity` class, which is the bridge between `JavaFX`
    and the `Dalvik` runtime. We use a static method on the `FXActivity` to retrieve
    the `FXActivity`, which extends the Android `Context`. This `Context` can be used
    to look up Android services.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要`android.jar`来使用Android API，并且您需要`jfxdvk.jar`来访问`FXActivity`类，它是`JavaFX`和`Dalvik`运行时之间的桥梁。我们在`FXActivity`上使用一个静态方法来检索`FXActivity`，它扩展了Android`Context`。这个`Context`可以用来查找Android服务。
- en: Building the application
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: 'In order to create our Android `.apk` package file for our application, we
    need to build our application first; it is a very easy task. With the command
    line (or from NetBeans, right-click on the **project** tab and select `Tasks/task`)
    pointing to the current project folder, run the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为我们的应用程序创建Android.apk包文件，我们首先需要构建我们的应用程序；这是一个非常简单的任务。使用命令行（或从NetBeans，右键单击**项目**选项卡，然后选择`Tasks/task`）指向当前项目文件夹，运行以下命令：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Gradle will download all the required libraries and start building our application.
    Once finished, you should see the successful output as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle将下载所有所需的库并开始构建我们的应用程序。完成后，您应该看到成功的输出如下：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Until now, we have built our application successfully. Next we need to generate
    the `.apk` and deploy it to many sources.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功构建了我们的应用程序。接下来，我们需要生成.apk并将其部署到许多来源。
- en: Building the final .apk Android package
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建最终的.apk Android包
- en: 'We have two options when it comes to building our `.apk` file. The first is
    by running the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们的.apk文件时，有两个选项。第一个是通过运行以下命令：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will generate the `.apk` file in the directory `build/javafxports/android`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在目录`build/javafxports/android`中生成.apk文件。
- en: 'The second is by running this command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是通过运行此命令：
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will deploy the generated `.apk` package onto a device that is connected
    to your desktop or laptop device.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在连接到您的台式机或笔记本设备的设备上部署生成的.apk包。
- en: We will use the first option (`gradle android`) to make sure that we are able
    to generate the `.apk` file successfully. When done successfully, you should have
    a file named `DialPad2.apk` under the path mentioned previously.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第一个选项（`gradle android`）来确保我们能够成功生成.apk文件。成功完成后，您应该在先前提到的路径下有一个名为`DialPad2.apk`的文件。
- en: Deploying the application
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: 'To be able to deploy our application on the connected mobile device using the
    `gradle androidInstall` command, you have to enable **Developer Options** and
    enable some other settings inside it on your device, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用`gradle androidInstall`命令在连接的移动设备上部署我们的应用程序，您必须在设备上启用**开发者选项**并在其中启用一些其他设置，如下所示：
- en: From your device, tap on **Settings** to open the setting menu.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的设备上，点击**设置**打开设置菜单。
- en: From the top menu, choose **More**. The options depend on your device.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中选择**更多**。选项取决于您的设备。
- en: At the end of the **More Options** menu list, you should see **Developer Options**.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**更多选项**菜单列表的末尾，您应该看到**开发者选项**。
- en: Tap on the **Developer Options** menu.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开发者选项**菜单。
- en: Enable **Developer Options** by turning on the slider at the top-right corner.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在右上角打开滑块来启用**开发者选项**。
- en: Under **debugging**, enable **USB debugging**, click on the **OK** button in
    the **Allow USB debugging** alert window, and enable **Unknown sources**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试提示
- en: Congratulations! You are done—let's go and install our application.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须在Google Play开发者中注册自己([https://play.google.com/apps/publish/](https://play.google.com/apps/publish/))，填写一个带有描述和几张截图的表格，最后提交DialPad2
    apk。
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果某些功能不如预期那样工作，请转到命令行并输入：
- en: '**Optional**: if you don''t see **Developer Options**, don''t worry. It is
    present but hidden. Here is the magic—tap on **About device**, locate **Build
    number**, and tap on it 5 times (7 times on Lollipop). You will see a countdown
    of numbers, and at the end **Developer Options** will be enabled.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在交付应用程序之前最重要的一点是对其进行测试，特别是在不同的基于Android的移动设备上。
- en: Deploying on Android-based devices
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恭喜！您已完成——让我们去安装我们的应用程序。
- en: 'No as we are ready run the following command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 发出此命令后，它将开始构建和打包JavaFX 8应用程序。插件将连接到您连接的设备并将应用程序安装到其中。这是您应该得到的结果：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After issuing this command, it will start building and packaging the JavaFX
    8 application. The plugin will connect to your connected device and install the
    application into it. This is the result you should have:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`apk`必须签名才能发布。**签名**意味着您需要一个私钥；为此，我们可以使用keytool ([http://developer.android.com/tools/publishing/app-signing.html#signing-manually](http://developer.android.com/tools/publishing/app-signing.html#signing-manually))。'
- en: '[PRE21]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now open your device and locate your applications icon from the home screen;
    in the bottom-right corner, you should see your `DialPad2` JavaFX application
    installed as seen in the following screenshot, with the default Android icon:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Android的设备上部署
- en: '![Deploying on Android-based devices](img/B03998_04_05.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: 在基于Android的设备上部署
- en: The JavaFX 8 application installed on the Android device
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Google Play商店上部署您的应用程序，您必须执行以下操作：
- en: 'Tap the **DialPad2** application, and you should see your application up-and-running
    on your device and fully functional as intended:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**DialPad2**应用程序，您应该看到您的应用程序在设备上运行并完全按预期功能正常运行：
- en: '![Deploying on Android-based devices](img/B03998_04_06.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: 在Google Play商店上部署
- en: The JavaFX 8 application running on Android device
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，在移动测试领域中的四个黄金规则是：
- en: 'Tap the **Call** button and the Android default dialer will be launched, dialing
    the number you have typed in, as shown here:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 8应用程序拨打号码
- en: '![Deploying on Android-based devices](img/B03998_04_07.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: 而**发布**意味着我们需要将签名配置添加到`build.gradle`中，如下所示：
- en: The JavaFX 8 application dialing a number
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选**：如果您看不到**开发者选项**，不要担心。它是存在的，但是隐藏的。这里是魔法——点击**关于设备**，找到**构建号**，然后点击5次（Lollipop上点击7次）。您将看到一个数字倒计时，最后**开发者选项**将被启用。'
- en: 'If something doesn''t work as expected, go to the command line and type in:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能在尽可能多的真实设备和Android平台上进行测试，以覆盖应用程序将在其中运行的所有情况，并了解其在生产中的行为。
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: And you will have the output from all the applications on your device.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![在基于Android的设备上部署](img/B03998_04_05.jpg)'
- en: Deploying on the Google Play Store
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '![在基于Android的设备上部署](img/B03998_04_07.jpg)'
- en: 'In order to deploy your application on the Google Play Store, you have to perform
    the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备运行以下命令：
- en: You have to be enroll yourself with Google Play Developers ([https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)),
    fill a form with the description and several screenshots, and finally submit the
    DialPad2 apk.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '![在基于Android的设备上部署](img/B03998_04_06.jpg)'
- en: In the `AndroidManifest.xml`, you have to disable the debugging option by adding
    `android:debuggable="false"` on the `application` tag.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**DialPad2**项目，从**任务**中选择**apk**，然后选择**apkRelease**。
- en: You can also add the icon of your app (`android:icon="@icons/ic_launcher`) under
    the `application` tag. Here, `icons-*` are image folders with several resolutions.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 签署APK
- en: Signing the APK
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 仅使用模拟器进行*GUI测试和功能*，而不是进行*性能测试*。所有模拟器都依赖于您的底层PC/笔记本硬件和内存，而在移动硬件上将会有很大的不同，要达到相同的性能将是非常具有挑战性的。
- en: The `apk` must be signed for release. **Signed** means you need a private key;
    for that, we can use keytool ([http://developer.android.com/tools/publishing/app-signing.html#signing-manually](http://developer.android.com/tools/publishing/app-signing.html#signing-manually)).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将获得设备上所有应用程序的输出。
- en: 'And **release** means that we need to add the signing configuration to `build.gradle`
    as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在**调试**下，启用**USB调试**，点击**允许USB调试**警报窗口中的**确定**按钮，并启用**未知来源**。
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Right-click on the **DialPad2** project and, from **Tasks**, choose **apk**
    and then **apkRelease**.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开您的设备，并从主屏幕上找到您的应用程序图标；在右下角，您应该看到您的`DialPad2` JavaFX应用程序已安装，如下截图所示，带有默认的Android图标：
- en: Congratulations! The resulting `DialPad2.`apk is ready for submission to Google
    Play Store.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**呼叫**按钮，将启动Android默认的拨号器，拨打您输入的号码，如下所示：
- en: Testing tips
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恭喜！生成的`DialPad2.`apk已准备好提交到Google Play商店。
- en: The most important point before delivering your application is to test it, especially
    on different Android based mobile devices.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In my experience with the mobile industry, I have found a dozen vendors' test
    mobile and tablets running the Android platform, each of them customizing the
    UI layer of each device with different capabilities and performance.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在我与移动行业的经验中，我发现有数十家供应商的测试手机和平板电脑运行Android平台，它们每个都定制了每个设备的UI层，具有不同的功能和性能。
- en: 'The four golden rules in the mobile testing field from my experience are:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在`application`标签下添加您应用程序的图标（`android:icon="@icons/ic_launcher`）。这里，`icons-*`是带有几种分辨率的图像文件夹。
- en: Test on as many real devices and Android platforms as possible to cover all
    cases that your application will run on and to know how it will behave in production.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android设备上安装的JavaFX 8应用程序
- en: Use simulators only for *GUI testing and functionality* and not for *performance
    testing*. All simulators rely on your underlying PC/laptop hardware and memory,
    while on mobile hardware it will be quite different and very challenging to achieve
    the same performance.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AndroidManifest.xml`中，您必须通过在`application`标签上添加`android:debuggable="false"`来禁用调试选项。
- en: There is a new simulator called ARC Welder for Chrome. Check it out at [https://developer.chrome.com/apps/getstarted_arc](https://developer.chrome.com/apps/getstarted_arc).
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Chrome有一个名为ARC Welder的新模拟器。请访问[https://developer.chrome.com/apps/getstarted_arc](https://developer.chrome.com/apps/getstarted_arc)查看。
- en: Test on real devices for final production and performance testing. This is so
    you are assured that your application will act accordingly on the targeted market
    devices.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终生产和性能测试在真实设备上进行测试。这样您就可以确保您的应用程序在目标市场设备上能够正常运行。
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter gave you a very good understanding of the mobile industry and how
    JavaFX-based applications can be developed and customized using different projects
    such as **RoboVM** for **iOS** and **JavaFXPorts** for **Android** to make it
    possible to run your application on both platforms.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使您对移动行业有了很好的了解，以及如何使用不同的项目（如**RoboVM**用于**iOS**和**JavaFXPorts**用于**Android**）开发和定制基于JavaFX的应用程序，从而使您的应用程序能够在两个平台上运行。
- en: We then learned how to install the required software and tools for Android development
    and to enable Android SDK along with *JavaFXPorts* libraries to package and install
    our dialer JavaFX-based application on a real Android device and submit it to
    Google Play Store.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了如何安装所需的软件和工具进行Android开发，并启用Android SDK以及*JavaFXPorts*库来打包和安装我们的拨号器基于JavaFX的应用程序到真实的Android设备，并将其提交到Google
    Play商店。
- en: We saw how to customize our application using CSS to have a different look and
    feel for the same application to make sure you have provided a different CSS for
    the Android version.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到如何使用CSS自定义我们的应用程序，使同一应用程序具有不同的外观和感觉，以确保您为Android版本提供了不同的CSS。
- en: Next, we learned how to enable our device in the debugging mode to successfully
    install the application from `jfxmobile-plugin` via the command line. Finally,
    we covered the four golden rules of testing.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了如何将我们的设备调试模式启用，以便通过命令行成功安装来自`jfxmobile-plugin`的应用程序。最后，我们介绍了测试的四个黄金规则。
- en: The next chapter will not differ too much from this one, but will give you a
    very good introduction to, and knowledge of, targeting your JavaFX 8 application
    to run on iOS-based devices. You will also learn how to use its development tools.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章与本章不会有太大的不同，但会很好地介绍和了解如何将您的JavaFX 8应用程序定位到运行在基于iOS的设备上。您还将学习如何使用其开发工具。
