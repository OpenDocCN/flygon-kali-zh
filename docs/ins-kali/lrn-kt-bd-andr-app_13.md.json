["```kt\ndependencies {\n  implementation fileTree(dir: 'libs', include: ['*.jar'])\n  implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n  implementation 'com.android.support:appcompat-v7:26.1.0'\n  implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n  testImplementation 'junit:junit:4.12'\n  testImplementation \"org.mockito:mockito-all:1.10.19\"\n  testImplementation \"org.hamcrest:hamcrest-all:1.3\"\n  testImplementation \"org.powermock:powermock-module-junit4:1.6.2\"\n  testImplementation \"org.powermock:powermock-api-mockito:1.6.2\"\n  androidTestImplementation 'com.android.support.test:runner:1.0.1'\n  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n}\n```", "```kt\nimport com.packtpub.eunice.notesapp.notes.NotesContract\nimport com.packtpub.eunice.notesapp.notes.NotesPresenter\nimport org.junit.Before\nimport org.junit.Test\nimport org.mockito.Mock\nimport org.mockito.Mockito.verify\nimport org.mockito.MockitoAnnotations\n\n@Mock\nprivate lateinit var notesView: NotesContract.View\nprivate lateinit var notesPresenter: NotesPresenter\n\n@Before\nfun setUp() {\n MockitoAnnotations.initMocks(this)\n\n // The class under test\n notesPresenter = NotesPresenter()\n}\n\n@Test\nfun `should display note view when button is clicked`() {\n // When adding a new note\n notesPresenter.addNewNote()\n\n // Then show add note UI\n verify(notesView)?.showAddNote()\n}\n```", "```kt\ninterface NotesContract {\n    interface View {\n        fun showAddNote()\n    }\n\n    interface UserActionsListener {\n\n        fun loadNotes(forceUpdate: Boolean)\n\n        fun addNewNote()\n\n        fun openNoteDetails(requestedNote: Note)\n    }\n}\n```", "```kt\nimport java.util.UUID\n\ndata class Note(val title: String?,\n val description: String?,\n val imageUrl: String? = null) {\n\n val id: String = UUID.randomUUID().toString()\n}\n```", "```kt\nclass NotesPresenter: NotesContract.UserActionsListener {\n    override fun loadNotes(forceUpdate: Boolean) {\n    }\n\n    override fun addNewNote() {\n    }\n\n    override fun openNoteDetails(requestedNote: Note) {\n    }\n}\n```", "```kt\nclass NotesPresenter(notesView: NotesContract.View): NotesContract.UserActionsListener {\n    private var notesView: NotesContract.View = checkNotNull(notesView) {\n        \"notesView cannot be null\"\n    }\n\n    override fun loadNotes(forceUpdate: Boolean) {\n    }\n\n    override fun addNewNote() = notesView.showAddNote()\n\n    override fun openNoteDetails(requestedNote: Note) {\n    }\n}\n```", "```kt\n@Before\nfun setUp() {\n    MockitoAnnotations.initMocks(this)\n\n// Get a reference to the class under test\n    notesPresenter = NotesPresenter(notesView)\n}\n```", "```kt\n@Mock\nprivate lateinit var notesRepository: NotesRepository\n\n    @Captor\n    private var loadNotesCallbackCaptor: ArgumentCaptor<NotesRepository.LoadNotesCallback>? = null\n\nprivate val NOTES = arrayListOf(Note(\"Title A\", \"Description A\"),\n Note(\"Title A\", \"Description B\"))\n...\n\n@Test\nfun `should load notes from repository into view`() {\n // When loading of Notes is requested\n notesPresenter.loadNotes(true)\n\n // Then capture callback and invoked with stubbed notes\n verify(notesRepository)?.getNotes(loadNotesCallbackCaptor?.capture())\n loadNotesCallbackCaptor!!.value.onNotesLoaded(NOTES)\n\n // Then hide progress indicator and display notes\n verify(notesView).setProgressIndicator(false)\n verify(notesView).showNotes(NOTES)\n}\n```", "```kt\ninterface NotesRepository {\n\n    interface LoadNotesCallback {\n\n        fun onNotesLoaded(notes: List<Note>)\n    }\n\n    fun getNotes(callback: LoadNotesCallback?)\n    fun refreshData()\n}\n```", "```kt\ninterface NotesContract {\n    interface View {\n        fun setProgressIndicator(active: Boolean)\n\n        fun showNotes(notes: List<Note>)\n\n        ...\n    }\n\n  ...\n}\n```", "```kt\nimport com.packtpub.eunice.notesapp.data.NotesRepository\nimport com.packtpub.eunice.notesapp.util.EspressoIdlingResource\n\nclass NotesPresenter(notesView: NotesContract.View, notesRepository: NotesRepository) :\n NotesContract.UserActionsListener {\n\n private var notesRepository: NotesRepository = checkNotNull(notesRepository) {\n \"notesRepository cannot be null\"\n }\n\n override fun loadNotes(forceUpdate: Boolean) {\n notesView.setProgressIndicator(true)\n if (forceUpdate) {\n notesRepository.refreshData()\n }\n\n EspressoIdlingResource.increment()\n\n notesRepository.getNotes(object : NotesRepository.LoadNotesCallback {\n override fun onNotesLoaded(notes: List<Note>) {\n EspressoIdlingResource.decrement()\n notesView.setProgressIndicator(false)\n notesView.showNotes(notes)\n }\n })\n }\n ...\n}\n```", "```kt\nimport android.support.test.espresso.IdlingResource\n\nobject EspressoIdlingResource {\n\n    private const val RESOURCE = \"GLOBAL\"\n\n    private val countingIdlingResource = SimpleCountingIdlingResource(RESOURCE)\n\n    val idlingResource = countingIdlingResource\n\n    fun increment() = countingIdlingResource.increment()\n\n    fun decrement() = countingIdlingResource.decrement()\n}\n```", "```kt\npackage com.packtpub.eunice.notesapp.util\n\nimport android.support.test.espresso.IdlingResource\nimport java.util.concurrent.atomic.AtomicInteger\n\nclass SimpleCountingIdlingResource\n\n(resourceName: String) : IdlingResource {\n\n    private val mResourceName: String = checkNotNull(resourceName)\n\n    private val counter = AtomicInteger(0)\n\n    @Volatile\n    private var resourceCallback: IdlingResource.ResourceCallback? =  \n    null\n\n    override fun getName() = mResourceName\n\n    override fun isIdleNow() = counter.get() == 0\n\n    override fun registerIdleTransitionCallback(resourceCallback: \n    IdlingResource.ResourceCallback) {\n        this.resourceCallback = resourceCallback\n    }\n\n    fun increment() = counter.getAndIncrement()\n\n    fun decrement() {\n        val counterVal = counter.decrementAndGet()\n        if (counterVal == 0) {\n            // we've gone from non-zero to zero. That means we're idle \n            now! Tell espresso.\n            resourceCallback?.onTransitionToIdle()\n        }\n\n        if (counterVal < 0) {\n            throw IllegalArgumentException(\"Counter has been \n            corrupted!\")\n        }\n    }\n}\n```", "```kt\ndependencies {\n  ...\n  implementation \"com.android.support.test.espresso:espresso-idling-resource:3.0.1\"\n...\n}\n```", "```kt\n@Before\nfun setUp() {\n    MockitoAnnotations.initMocks(this)\n\n// Get a reference to the class under test\n    notesPresenter = NotesPresenter(notesView)\n}\n```", "```kt\nbuildscript {\n    repositories {\n        // ...\n        maven {\n           url 'https://maven.fabric.io/public'\n        }\n    }\n    dependencies {\n        // ...\n        classpath 'io.fabric.tools:gradle:1.25.1'\n    }\n}\n\nallprojects {\n    // ...\n    repositories {\n       // ...\n       maven {\n           url 'https://maven.google.com/'\n       }\n    }\n}\n```", "```kt\napply plugin: 'com.android.application'\napply plugin: 'io.fabric'\n\ndependencies {\n    // ...\n    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.1'\n}\n```", "```kt\n<application\n...\n <meta-data android:name=\"firebase_crashlytics_collection_enabled\" android:value=\"false\" />\n</application>\n```", "```kt\nval fabric = Fabric.Builder(this)\n        .kits(Crashlytics())\n        .debuggable(true)\n        .build()\nFabric.with(fabric)\n```", "```kt\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip\n```", "```kt\n<manifest ...>\n\n  <uses-permission android:name=\"android.permission.INTERNET\" />\n\n  <application ...\n```", "```kt\n<meta-data\n    android:name=\"io.fabric.ApiKey\"\n    android:value=\"xxYYxx6afd23n6XYf9ff6000383b4ddxxx2220faspi0x\"/>\n```", "```kt\nimport kotlinx.android.synthetic.main.activity_main.*\n\n...\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n crash_btn.setOnClickListener {\n  Crashlytics.getInstance().crash()\n }\n}\n```", "```kt\nbrew cask install fastlane\n```", "```kt\nexport PATH=\"$HOME/.fastlane/bin:$PATH\"\n```", "```kt\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n```", "```kt\n[sudo] gem install bundler\n```", "```kt\nfastlane init\n```", "```kt\nfastlane supply init\n```", "```kt\nfastlane test\n```"]