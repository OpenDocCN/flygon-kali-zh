- en: Connecting the Outside World – Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接外部世界-网络
- en: We live in the era of digital communication. Handheld devices play a huge role
    in communication and impact the way people interact. In the previous chapter,
    we discussed one of the powerful functions of Android—identifying the location
    of the user and customizing services based on location. In this chapter, we will
    focus on one of the most useful and powerful features of the Android devices—networking
    and connecting to the outside world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活在数字通信的时代。手持设备在通信中起着重要作用，并影响人们的互动方式。在上一章中，我们讨论了Android的一个强大功能——识别用户的位置并根据位置定制服务。在本章中，我们将专注于Android设备最有用和强大的功能之一——网络和连接到外部世界。
- en: While we will provide brief coverage on the important concepts of network connectivity
    and the Android framework support for networking, we will specifically focus on
    configuration and the usage of various built-in, third-party libraries. We will
    also learn how to load an image from a URL and display it in the sample app we
    create.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将简要介绍网络连接的重要概念和Android框架对网络的支持，但我们将重点关注内置的第三方库的配置和使用。我们还将学习如何从URL加载图像并在我们创建的示例应用程序中显示它。
- en: 'We will be covering the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下内容：
- en: Network connectivity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络连接
- en: Android framework support for networking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android框架对网络的支持
- en: Usage of built-in libraries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置库
- en: Usage of third-party libraries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方库
- en: Network connectivity
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络连接
- en: 'Understanding and identifying the status and type of network the user is connected
    to is very vital for delivering an enriching experience to our users. The Android
    framework provides us with a couple of classes that we can use to find the details
    of the network:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 了解和识别用户连接的网络的状态和类型对于为用户提供丰富的体验非常重要。Android框架为我们提供了一些类，我们可以使用它们来查找网络的详细信息：
- en: '`ConnectivityManager`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConnectivityManager`'
- en: '`NetworkInfo`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NetworkInfo`'
- en: While the `ConnectivityManager` provides information about the state of the
    network's connectivity and the changes it undergoes, `NetworkInfo` provides information
    on the type of network—mobile or Wi-Fi.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`ConnectivityManager`提供有关网络连接状态及其变化的信息，但`NetworkInfo`提供有关网络类型（移动或Wi-Fi）的信息。
- en: 'The following code snippet helps to establish whether a network is indeed available
    and whether the device is connected to the network:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段有助于确定网络是否可用，以及设备是否连接到网络：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `isOnline()` method returns a `Boolean`—true or false based on the result
    returned by the `ConnectivityManager`. The `connMgr` instance is used along with `NetworkInfo` to
    find the information about the network.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`isOnline()`方法根据`ConnectivityManager`返回的结果返回一个`Boolean`——true或false。`connMgr`实例与`NetworkInfo`一起使用，以查找有关网络的信息。'
- en: Manifest permissions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清单权限
- en: 'Accessing the network and sending/receiving the data would require permission
    to access the internet and the network state. The following permissions must be
    defined in the manifest file for the app to take advantage of the network of the
    device:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 访问网络并发送/接收数据需要访问互联网和网络状态的权限。应用程序的清单文件必须定义以下权限，以便应用程序利用设备的网络：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The internet permission allows the app to communicate by enabling network sockets
    while the access network state permission enables it to find information about
    available networks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网权限允许应用程序通过启用网络套接字进行通信，而访问网络状态权限使其能够查找有关可用网络的信息。
- en: 'The Android framework provides a default intent, `MANAGE_NETWORK_USAGE`, for
    the app to manage the network data. The activity for handling the intent can be
    implemented specific to the app:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Android框架为应用程序提供了一个默认意图`MANAGE_NETWORK_USAGE`，用于管理网络数据。处理该意图的活动可以针对特定的应用程序进行实现：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Volley library
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Volley库
- en: The ability to communicate with web servers via an HTTP protocol and exchange
    information in the form of strings, JSON, and images makes an app much more interactive
    and provides users with a rich experience. Android has a built-in HTTP library
    called `Volley` that does this information exchange out of the box.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过HTTP协议与Web服务器通信并以字符串、JSON和图像的形式交换信息的能力使应用程序更加交互，并为用户提供丰富的体验。Android具有一个名为“Volley”的内置HTTP库，可以直接进行信息交换。
- en: In addition to making the information exchange easier, `Volley` also provides
    easier means for one to handle the entire lifecycle of a request viz schedule,
    cancel, prioritize, and so on.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使信息交换更加容易外，`Volley`还提供了更容易处理请求的整个生命周期的手段，如调度、取消、设置优先级等。
- en: '`Volley` is quite good for lightweight network operations and makes information
    exchange easier. For huge downloads and streaming operations, developers should
    use Download Manager.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Volley`非常适用于轻量级网络操作，并使信息交换更加容易。对于大型下载和流操作，开发人员应使用下载管理器。'
- en: Sync adapter
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步适配器
- en: Keeping the data in the app in sync with the web server enables developers to
    provide a rich experience for users. The Android framework provides **sync adapters** that
    enable data sync to happen at a defined periodic interval.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使应用程序中的数据与Web服务器同步，使开发人员能够为用户提供丰富的体验。Android框架提供了**同步适配器**，可以在定义的周期间隔内进行数据同步。
- en: Similar to `Volley`, sync adapters have all the facilities to handle the life
    cycle of data transfer and provide a seamless means of data exchange.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于“Volley”，同步适配器具有处理数据传输的生命周期和提供无缝数据交换的所有设施。
- en: Sync adapter implementation typically contains a stub authenticator, a stub
    content provider, and a sync adapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同步适配器实现通常包含一个存根验证器、一个存根内容提供程序和一个同步适配器。
- en: Third-party libraries
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方库
- en: In addition to the built-in support of the Android framework, we do have quite
    a few third-party libraries available to handle network operations. Out of those,
    `Picasso` from Square and `Glide` from bumptech are widely used image downloading
    and caching libraries.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Android框架的内置支持外，我们还有相当多的第三方库可用于处理网络操作。其中，来自Square的`Picasso`和来自bumptech的`Glide`是广泛使用的图像下载和缓存库。
- en: In this section, we will focus on the implementation of these two libraries—`Picasso`
    and `Glide`—to load an image from a specific URL and display it in our sample
    application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将专注于实现这两个库——`Picasso`和`Glide`——从特定URL加载图像并在我们的示例应用程序中显示它。
- en: Networking calls should **never** be done on the main thread. Doing so will
    result in the app becoming less responsive and create Application Not Responding
    conditions. Instead, we should create separate worker threads which handle such
    network calls and provide information as and when the request is attended to.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 网络调用**绝对不应该**在主线程上进行。这样做会导致应用程序变得不够响应，并创建应用程序无响应的情况。相反，我们应该创建单独的工作线程来处理这样的网络调用，并在请求被处理时提供信息。
- en: Picasso
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Picasso
- en: In this sample project, let's understand how to use the `Picasso` library from
    Square and load an image from a specified URL.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例项目中，让我们了解如何使用Square的`Picasso`库从指定的URL加载图像。
- en: Let's create a new Android project and call it ImageLoader. We need to ensure
    Kotlin support is checked.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Android项目，并将其命名为ImageLoader。我们需要确保已经勾选了Kotlin支持。
- en: 'For the Image Loader sample, we can proceed by selecting Empty Activity:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Image Loader示例，我们可以选择空活动继续：
- en: '![](img/a72a3ccd-c160-45d2-a4af-bea01c47a226.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a72a3ccd-c160-45d2-a4af-bea01c47a226.png)'
- en: 'Let us name the activity `MainActivity`, the one appears by default and have
    the XML named as `activity_main`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将活动命名为`MainActivity`，默认情况下会出现这个活动，并将XML命名为`activity_main`：
- en: '![](img/d26151dc-849d-4469-b1a2-b046f862eaf8.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d26151dc-849d-4469-b1a2-b046f862eaf8.png)'
- en: User interface – XML
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户界面 - XML
- en: The default XML code that gets generated would contain a `TextView`. We need
    to tweak the XML code a bit and replace the `TextView` with an `ImageView`. This
    `ImageView` will provide the placeholder for displaying the image that would be
    fetched from the URL using `Picasso`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的默认XML代码将包含一个`TextView`。我们需要稍微调整XML代码，用`ImageView`替换`TextView`。这个`ImageView`将提供一个占位符，用于显示从URL获取的图片，使用`Picasso`。
- en: 'The XML code that follows shows that the default XML contains `TextView`; we
    shall be replacing the `TextView` with `ImageView`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的XML代码显示了默认XML包含`TextView`；我们将用`ImageView`替换`TextView`：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The modified XML that has an `ImageView` looks like the one shown in the code
    block that follows. We can easily add this by dragging the `ImageView` from the
    widgets or by typing in the code in XML layout. In the `ImageView`, we have marked
    it to display the launcher icon as the placeholder:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的XML中包含一个`ImageView`，如下面的代码块所示。我们可以通过从小部件中拖动`ImageView`或在XML布局中输入代码来轻松添加它。在`ImageView`中，我们已经标记它以显示启动器图标作为占位符：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`ImageViewer` displays the launcher icon in the placeholder marked for display
    of image on loading from the URL. The launcher icon is displayed as soon as we
    make the change in the XML:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageViewer`在占位符上显示启动器图标，用于从URL加载图像时显示。只要我们在XML中进行更改，启动器图标就会显示出来：'
- en: '![](img/d8f504cc-dd4f-4670-9f0d-f744a011a103.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8f504cc-dd4f-4670-9f0d-f744a011a103.png)'
- en: build.gradle
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: build.gradle
- en: We need to add the implementation `com.square.picasso.picasso:2.71828` in the
    `build.gradle` dependencies. Version 2.71828 is the latest at the time of writing.
    To make sure we use the latest version, it is prudent to check [http://square.github.io/picasso/](http://square.github.io/picasso/) and
    use the latest version in the Gradle dependencies.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`build.gradle`的依赖项中添加`implementation com.square.picasso.picasso:2.71828`。在撰写本文时，版本2.71828是最新版本。为了确保使用最新版本，最好检查[http://square.github.io/picasso/](http://square.github.io/picasso/)，并在Gradle依赖项中使用最新版本。
- en: 'We need to add the following line in the dependencies section of the `build.gradle`
    file to have `Picasso` available for our app:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`build.gradle`文件的依赖项部分中添加以下行，以便我们的应用程序可以使用`Picasso`：
- en: implementation `com.squareup.picasso:picasso:2.71828`
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: implementation `com.squareup.picasso:picasso:2.71828`
- en: 'The modified `build.gradle` file should look like the one shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的`build.gradle`文件应该如下所示：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Kotlin code
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin代码
- en: The default Kotlin code generated will have the class file named `MainActivity`.
    This class file extends `AppCompatActivity`, which provides the support library
    action bar features.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的默认Kotlin代码将有一个名为`MainActivity`的类文件。这个类文件扩展了`AppCompatActivity`，提供了支持库操作栏功能。
- en: 'The code loads the XML defined in the `activity_main` during the `onCreate`
    method and displays it on load. The `setContentView` reads the XML content defined
    in `activity_main` and displays the `ImageView` on load:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在`onCreate`方法中加载了`activity_main`中定义的XML，并在加载时显示它。`setContentView`读取了在`activity_main`中定义的XML内容，并在加载时显示`ImageView`：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have made changes to the XML already by replacing the default `TextView`
    with `ImageView`. We need to reflect those changes in our Kotlin code and also
    implement the loading of the image by using `Picasso`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过用`ImageView`替换默认的`TextView`对XML进行了更改。我们需要在我们的Kotlin代码中反映这些更改，并使用`Picasso`来加载图像。
- en: 'We need to add the `ImageView` and `Picasso` imports for our program to use
    these components:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的程序添加`ImageView`和`Picasso`的导入，以便使用这些组件：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we have already imported `Picasso` and ensured the dependencies were added,
    we should be able to load the date by a single line of code, `Picasso.get().load("URL").into(ImageView)`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经导入了`Picasso`并确保了依赖项已添加，我们应该能够通过一行代码加载数据，`Picasso.get().load("URL").into(ImageView)`：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The final modified Kotlin class for Picasso image load should be as shown:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用于Picasso图片加载的最终修改后的Kotlin类应该如下所示：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Manifest permissions
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清单权限
- en: We need to ensure our app has added the permission to access the internet. This
    is required as we are about to download the image from a specified URL and will
    have it displayed in our `ImageViewer`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保我们的应用程序已经添加了访问互联网的权限。这是必需的，因为我们将从指定的URL下载图像，并在我们的`ImageViewer`中显示它。
- en: 'We have already covered the manifest permissions required in detail. Let us
    go ahead and add this permission:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细介绍了所需的清单权限。让我们继续添加这个权限：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The modified XML should look like the one shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的XML应该如下所示：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we are all set with the changes made to XML, the Kotlin Code, `build.gradle`,
    and the `AndroidManifest` file, it is time to launch our app and understand the
    seamless loading process of the image via `Picasso`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对 XML、Kotlin 代码、`build.gradle` 和 `AndroidManifest` 文件的更改，是时候启动我们的应用程序并了解通过
    `Picasso` 无缝加载图像的过程了。
- en: 'Once we run the app, we should be able to see our device load the page, display
    the app name ImageLoader and display the image shown here from the URL:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行应用程序，我们应该能够看到我们的设备加载页面，显示应用程序名称 ImageLoader，并从以下 URL 显示图像：
- en: '![](img/6d8a550f-cc50-454e-ac74-ec7f413f040f.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d8a550f-cc50-454e-ac74-ec7f413f040f.png)'
- en: Glide
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Glide
- en: '`Glide` from bumptech is another image loading library that is very popular.
    We shall look at using `Glide` and loading an image from a specific URL.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Glide` 是 bumptech 的另一个非常流行的图像加载库。我们将看看如何使用 `Glide` 并从特定的 URL 加载图像。'
- en: Let us go ahead and make the changes required for `Glide` in our `build.gradle`
    and other related files.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续对 `build.gradle` 和其他相关文件进行 `Glide` 所需的更改。
- en: build.gradle
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: build.gradle
- en: We need to add the plugin `kotlin-kapt` and add dependencies in our app's `build.gradle`
    file. Once we sync the changes made, we should be able to use `Glide` in our code
    and load the image.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在应用程序的 `build.gradle` 文件中添加插件 `kotlin-kapt` 并添加依赖项。一旦同步了所做的更改，我们就可以在我们的代码中使用
    `Glide` 并加载图像。
- en: 'The `Glide` library uses annotation processing. Annotation processing helps
    with the generation of boilerplate code and makes the code easier to understand.
    To observe the actual code that works at runtime, developers can check the generated
    code and understand the boilerplate code generated by the library:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Glide` 库使用注解处理。注解处理有助于生成样板代码，并使代码更易于理解。开发人员可以检查生成的代码并了解库生成的样板代码，以观察运行时实际工作的代码：'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Glide` library talks about adding the annotation processor along with `Glide`
    in the dependencies. This is applicable for Java. For Kotlin, we need to add the `kapt`
    `Glide` compiler as shown in the code block.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Glide` 库讨论了在依赖项中添加注解处理器以及 `Glide`。这适用于 Java。对于 Kotlin，我们需要像代码块中所示的那样添加 `kapt`
    `Glide` 编译器。'
- en: 'The modified `build.gradle` dependencies should look like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的 `build.gradle` 依赖项应如下所示：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the project level `build.gradle` file, we need to add `mavenCentral()`in
    the `repositories` section, as shown:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目级别的 `build.gradle` 文件中，我们需要在 `repositories` 部分添加 `mavenCentral()`，如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are done with changes to the `build.gradle` files; we should make the following
    additions to `proguard-rules.pro` file. The `proguard-rules.pro` file enables
    developers to shrink the APK size by removing references to unused and unwanted
    code in the application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对 `build.gradle` 文件的更改；我们应该对 `proguard-rules.pro` 文件进行以下添加。`proguard-rules.pro`
    文件使开发人员能够通过删除应用程序中未使用和不需要的代码的引用来缩小 APK 大小。
- en: 'In order to ensure the `Glide` module is **not** affected by proguard shrinking,
    we need to explicitly mention that app requires we **keep** references to `Glide`.
    The `*-*keep` command ensures that the reference to `Glide` and respective modules
    are retained in the build:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 `Glide` 模块**不**受 proguard 缩小的影响，我们需要明确说明应用程序需要**保留**对 `Glide` 的引用。`*-*keep`
    命令确保在构建中保留对 `Glide` 和相应模块的引用：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Kotlin code
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin 代码
- en: 'We define a separate class called `ImageLoaderGlideModule` which extends `AppGlideModule()`.
    The annotation `@GlideModule` on the class enables the app to have access to the
    `GlideApp` instance. The `GlideApp` instance can be used across various activities
    in our application:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为 `ImageLoaderGlideModule` 的单独类，它扩展了 `AppGlideModule()`。类上的 `@GlideModule`
    注解使应用程序能够访问 `GlideApp` 实例。`GlideApp` 实例可以在我们应用程序的各个活动中使用：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We need to make the following changes in the `MainActivity` Kotlin class to
    have the image loaded by `Glide` and display it when the app is launched.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 `MainActivity` Kotlin 类中进行以下更改，以便通过 `Glide` 加载图像并在应用启动时显示它。
- en: 'Similar to `Picasso`, `Glide` also has a simple syntax for loading an image
    from a specified URL:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Picasso` 类似，`Glide` 也有一个简单的语法，用于从指定的 URL 加载图像：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The modified `MainActivity` Kotlin class should look like the one shown here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的 `MainActivity` Kotlin 类应如下所示：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We have done all the changes required for `Glide`—`build.gradle`, `Proguard.rules`,
    and the Kotlin class files. We should see the app load the image from the specified
    URL and display it in the `ImageView` as shown:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了 `Glide` 所需的所有更改——`build.gradle`、`Proguard.rules` 和 Kotlin 类文件。我们应该看到应用程序从指定的
    URL 加载图像并在 `ImageView` 中显示它。
- en: '![](img/bc948b2a-1cd8-4fe7-8f7d-aa7e6516132b.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc948b2a-1cd8-4fe7-8f7d-aa7e6516132b.png)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Networking and connecting to the outside world is a very powerful feature of
    Android devices. We covered the basics of networking, checking for the status
    of the network, the type of network available, and the built-in capabilities provided
    by the Android framework to perform network operations.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 网络和连接到外部世界是 Android 设备非常强大的功能。我们介绍了网络的基础知识，检查网络状态，可用网络类型，以及 Android 框架提供的内置功能来执行网络操作。
- en: We also discussed the third-party libraries `Picasso` and `Glide`, the image
    loading libraries in detail, and covered the implementation of those libraries
    in our app.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还详细讨论了第三方库 `Picasso` 和 `Glide`，以及在我们的应用程序中实现这些库。
- en: In the next chapter, we will work on developing a simple to-do list app and
    discuss various concepts such as listview, dialog, and so on, and learn how to
    use them in the app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将致力于开发一个简单的待办事项列表应用程序，并讨论各种概念，如列表视图、对话框等，并学习如何在应用程序中使用它们。
