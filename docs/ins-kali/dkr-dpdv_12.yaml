- en: '10: Docker Swarm'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10：Docker Swarm
- en: Now that we know how to install Docker, pull images, and work with containers,
    the next thing we need is a way to work with things at scale. That’s where Docker
    Swarm comes into the picture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何安装Docker，拉取镜像并使用容器，我们需要的下一步是以规模处理事物的方法。这就是Docker Swarm出现的地方。
- en: 'At a high level Swarm has two major components:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，Swarm有两个主要组件：
- en: A secure cluster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全的集群
- en: An orchestration engine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个编排引擎
- en: 'As usual, we’ll split this chapter into the usual three parts:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将把本章分为三个部分：
- en: The TLDR
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLDR
- en: The deep dive
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入探讨
- en: The commands
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令
- en: The examples and outputs we’ll use will be from a Linux-based swarm. However,
    most commands and features work with Docker on Windows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用基于Linux的Swarm的示例和输出。然而，大多数命令和功能都适用于Windows上的Docker。
- en: Docker Swarm - The TLDR
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker Swarm - TLDR
- en: 'Docker Swarm is two things: an enterprise-grade secure cluster of Docker hosts,
    and an engine for orchestrating microservices apps.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm有两个方面：一个是企业级安全的Docker主机集群，另一个是用于编排微服务应用程序的引擎。
- en: On the clustering front, it groups one or more Docker nodes and lets you manage
    them as a cluster. Out-of-the-box you get an encrypted distributed cluster store,
    encrypted networks, mutual TLS, secure cluster join tokens, and a PKI that makes
    managing and rotating certificates a breeze! And you can non-disruptively add
    and remove nodes. It’s a beautiful thing!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群方面，它将一个或多个Docker节点分组，并允许您将它们作为一个集群进行管理。开箱即用，您将获得加密的分布式集群存储、加密网络、相互TLS、安全的集群加入令牌，以及使管理和轮换证书变得轻而易举的PKI！您甚至可以非破坏性地添加和删除节点。这是一件美妙的事情！
- en: On the orchestration front, swarm exposes a rich API that allows you to deploy
    and manage complicated microservices apps with ease. You can define your apps
    in declarative manifest files, and deploy them with native Docker commands. You
    can even perform rolling updates, rollbacks, and scaling operations. Again, all
    with simple commands.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在编排方面，Swarm公开了丰富的API，允许您轻松部署和管理复杂的微服务应用程序。您可以在声明性清单文件中定义应用程序，并使用本机Docker命令部署它们。您甚至可以执行滚动更新、回滚和扩展操作。同样，所有这些都可以通过简单的命令完成。
- en: In the past, Docker Swarm was a separate product that you layered on top of
    the Docker engine. Since Docker 1.12 it’s fully integrated into the Docker engine
    and can be enabled with a single command. As of 2018, it has the ability to deploy
    and manage native swarm apps as well as Kubernetes apps. Though at the time of
    writing, support for Kubernetes apps is relatively new.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，Docker Swarm是一个单独的产品，你可以在Docker引擎之上进行层叠。自Docker 1.12以来，它已完全集成到Docker引擎中，并可以通过单个命令启用。截至2018年，它具有部署和管理本地Swarm应用程序以及Kubernetes应用程序的能力。尽管在撰写本文时，对Kubernetes应用程序的支持相对较新。
- en: Docker Swarm - The Deep Dive
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker Swarm - 深入探讨
- en: 'We’ll split the deep dive part of this chapter as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把本章的深入探讨部分分为以下几个部分：
- en: Swarm primer
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swarm入门
- en: Build a secure swarm cluster
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个安全的Swarm集群
- en: Deploy some swarm services
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一些Swarm服务
- en: Troubleshooting
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除
- en: The examples cited will be based on Linux, but they will also work on Windows.
    Where there are differences we’ll be sure to point them out.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 引用的示例将基于Linux，但也适用于Windows。如果有差异，我们一定会指出。
- en: Swarm mode primer
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Swarm模式入门
- en: On the clustering front, a *swarm* consists of one or more Docker *nodes*. These
    can be physical servers, VMs, Raspberry Pi’s, or cloud instances. The only requirement
    is that all nodes can communicate over reliable networks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群方面，*Swarm*由一个或多个Docker *节点*组成。这些可以是物理服务器、虚拟机、树莓派或云实例。唯一的要求是所有节点都可以通过可靠的网络进行通信。
- en: Nodes are configured as *managers* or *workers*. *Managers* look after the control
    plane of the cluster, meaning things like the state of the cluster and dispatching
    tasks to *workers*. *Workers* accept tasks from *managers* and execute them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 节点被配置为*管理节点*或*工作节点*。*管理节点*负责集群的控制平面，意味着集群的状态和向*工作节点*分发任务等。*工作节点*接受*管理节点*的任务并执行它们。
- en: The configuration and state of the *swarm* is held in a distributed *etcd* database
    located on all managers. It’s kept in memory and is extremely up-to-date. But
    the best thing about it is the fact that it requires zero configuration — it’s
    installed as part of the swarm and just takes care of itself.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*swarm*的配置和状态存储在所有管理节点上的分布式*etcd*数据库中。它保存在内存中，并且非常及时更新。但最好的是，它不需要任何配置——它作为swarm的一部分安装，并且只需要自己照顾自己。'
- en: Something that’s game changing on the clustering front is the approach to security.
    TLS is so tightly integrated that it’s impossible to build a swarm without it.
    In today’s security conscious world, things like this deserve all the props they
    get! Anyway, *swarm* uses TLS to encrypt communications, authenticate nodes, and
    authorize roles. Automatic key rotation is also thrown in as the icing on the
    cake! And it all happens so smoothly that you wouldn’t even know it was there!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群前端具有颠覆性的东西是安全性的方法。TLS集成得如此紧密，以至于没有它就不可能构建一个集群。在当今注重安全的世界，像这样的东西都应该得到应有的赞赏！总之，*swarm*使用TLS加密通信，验证节点，并授权角色。自动密钥轮换也被加入其中，就像是锦上添花一样！而且一切都进行得如此顺利，以至于你甚至都不知道它的存在！
- en: On the application orchestration front, the atomic unit of scheduling on a swarm
    is the *service*. This is a new object in the API, introduced along with swarm,
    and is a higher level construct that wraps some advanced features around containers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用编排方面，swarm上调度的原子单位是*服务*。这是API中的一个新对象，与swarm一起引入，并且是一个更高级的构造，围绕容器添加了一些高级功能。
- en: When a container is wrapped in a service we call it a *task* or a *replica*,
    and the service construct adds things like scaling, rolling updates, and simple
    rollbacks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个容器被包装成一个服务时，我们称之为*任务*或*副本*，而服务构造添加了诸如扩展、滚动更新和简单回滚等功能。
- en: The high-level view is shown in Figure 10.1.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 高级视图如图10.1所示。
- en: '![Figure 10.1 High-level swarm](images/figure10-1.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 高级swarm](images/figure10-1.png)'
- en: Figure 10.1 High-level swarm
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 高级swarm
- en: That’s enough of a primer. Let’s get our hands dirty with some examples.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就足够作为入门了。让我们用一些示例来动手实践吧。
- en: Build a secure Swarm cluster
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建一个安全的Swarm集群
- en: In this section we’ll build a secure swarm cluster with three *manager nodes*
    and three *worker nodes*. You can use a different lab with different numbers of
    *managers* and *workers*, and with different names and IPs, but the examples that
    follow will use the values in Figure 10.2.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个安全的swarm集群，其中包括三个*管理节点*和三个*工作节点*。你可以使用不同数量的*管理节点*和*工作节点*以及不同的名称和IP的不同实验室，但接下来的示例将使用图10.2中的值。
- en: '![Figure 10.2](images/figure10-2.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2](images/figure10-2.png)'
- en: Figure 10.2
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2
- en: Each of the nodes needs Docker installed and needs to be able to communicate
    with the rest of the swarm. It’ also beneficial if name resolution is configured
    — it makes it easier to identify nodes in command outputs and helps when troubleshooting.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点都需要安装Docker，并且需要能够与其余的swarm进行通信。如果配置了名称解析，也是有益的——这样可以更容易地在命令输出中识别节点，并在故障排除时有所帮助。
- en: 'On the networking front, you should have the following ports open on routers
    and firewalls:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络方面，你应该在路由器和防火墙上打开以下端口：
- en: '`2377/tcp:` for secure client-to-swarm communication'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2377/tcp:` 用于安全的客户端到swarm的通信'
- en: '`7946/tcp and 7946/udp:` for control plane gossip'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`7946/tcp和7946/udp:` 用于控制平面的八卦'
- en: '`4789/udp:` for VXLAN-based overlay networks'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4789/udp:` 用于基于VXLAN的覆盖网络'
- en: Once you’ve satisfied the pre-requisites, you can go ahead and build a swarm.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你满足了先决条件，你就可以继续构建一个集群。
- en: 'The process of building a swarm is sometimes called *initializing a swarm*,
    and the high-level process is this: Initialize the first manager node > Join additional
    manager nodes > Join worker nodes > Done.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 构建集群的过程有时被称为 *初始化集群*，高级过程如下：初始化第一个管理器节点 > 加入其他管理器节点 > 加入工作节点 > 完成。
- en: Initializing a brand new swarm
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 初始化一个全新的集群
- en: Docker nodes that are not part of a swarm are said to be in *single-engine mode*.
    Once they’re added to a swarm they’re switched into *swarm mode*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不属于集群的 Docker 节点被称为 *单引擎模式*。一旦它们被添加到集群中，它们就会切换到 *集群模式*。
- en: '![Figure 10.3 Swarm mode vs single-engine mode](images/figure10-3.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 集群模式 vs 单引擎模式](images/figure10-3.png)'
- en: Figure 10.3 Swarm mode vs single-engine mode
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 集群模式 vs 单引擎模式
- en: Running `docker swarm init` on a Docker host in *single-engine mode* will switch
    that node into *swarm mode*, create a new *swarm*, and make the node the first
    *manager* of the swarm.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *单引擎模式* 的 Docker 主机上运行 `docker swarm init` 将会将该节点切换到 *集群模式*，创建一个新的 *集群*，并将该节点作为集群的第一个
    *管理器*。
- en: Additional nodes can then be *joined* as workers and managers. This obviously
    switches them into *swarm mode* as part of the operation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以将其他节点作为工作节点和管理器 *加入*。这显然会将它们作为操作的一部分切换到 *集群模式*。
- en: The following steps will put **mgr1** into *swarm mode* and initialize a new
    swarm. It will then join **wrk1**, **wrk2**, and **wrk3** as worker nodes — automatically
    putting them into *swarm mode*. Finally, it will add **mgr2** and **mgr3** as
    additional managers and switch them into *swarm mode*. At the end of the procedure
    all 6 nodes will be in *swarm mode* and operating as part of the same swarm.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将把 **mgr1** 切换到 *集群模式* 并初始化一个新的集群。然后，它将加入 **wrk1**、**wrk2** 和 **wrk3** 作为工作节点
    —— 自动将它们切换到 *集群模式*。最后，它将添加 **mgr2** 和 **mgr3** 作为额外的管理器，并将它们切换到 *集群模式*。在该过程结束时，所有
    6 个节点都将处于 *集群模式* 并作为同一个集群的一部分运行。
- en: This example will use the IP addresses and DNS names of the nodes shown in Figure
    10.2\. Yours may be different.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将使用图 10.2 中显示的节点的 IP 地址和 DNS 名称。你的情况可能不同。
- en: Log on to **mgr1** and initialize a new swarm (don’t forget to use backticks
    instead of backslashes if you’re following along with Windows in a PowerShell
    terminal).
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 **mgr1** 并初始化一个新的集群（如果你在 Windows 的 PowerShell 终端中跟随操作，请不要忘记使用反引号而不是反斜杠）。
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`The command can be broken down as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令可以分解如下：
- en: '`docker swarm init` tells Docker to initialize a new swarm and make this node
    the first manager. It also enables swarm mode on the node.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker swarm init` 告诉 Docker 初始化一个新的集群，并将该节点设为第一个管理器。它还在该节点上启用了集群模式。'
- en: '`--advertise-addr` is the IP and port that other nodes should use to connect
    to this manager. It’s an optional flag, but it gives you control over which IP
    gets used on nodes with multiple IPs. It also gives you the chance to specify
    an IP address that does not exist on the node, such as a load balancer IP.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--advertise-addr` 是其他节点应该用来连接到此管理器的 IP 和端口。这是一个可选标志，但它可以让你控制在具有多个 IP 的节点上使用哪个
    IP。它还可以让你指定一个在节点上不存在的 IP 地址，比如负载均衡器 IP。'
- en: '`--listen-addr` lets you specify which IP and port you want to listen on for
    swarm traffic. This will usually match the `--advertise-addr`, but is useful in
    situations where you want to restrict swarm to a particular IP on a system with
    multiple IPs. It’s also required in situations where the `--advertise-addr` refers
    to a remote IP address like a load balancer.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--listen-addr` 允许你指定你想要监听的集群流量的 IP 和端口。这通常会匹配 `--advertise-addr`，但在你想要将集群限制在具有多个
    IP 的系统上的情况下很有用。在 `--advertise-addr` 指向负载均衡器等远程 IP 地址的情况下也是必需的。'
- en: I recommend you be specific and always use both flags.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你具体说明并始终使用这两个标志。
- en: The default port that swarm mode operates on is **2377**. This is customizable,
    but it’s convention to use `2377/tcp` for secured (HTTPS) client-to-swarm connections.`
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 集群模式操作的默认端口是**2377**。这是可以自定义的，但惯例是使用`2377/tcp`用于安全（HTTPS）的客户端到集群的连接。
- en: '`*   List the nodes in the swarm'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`*列出集群中的节点'
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Notice that **mgr1** is currently the only node in the swarm, and is listed
    as the *Leader*. We’ll come back to this in a second.` `*   From **mgr1** run
    the `docker swarm join-token` command to extract the commands and tokens required
    to add new workers and managers to the swarm.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`请注意，**mgr1**目前是集群中唯一的节点，并被列为*Leader*。我们稍后会回到这一点。`*从**mgr1**运行`docker swarm
    join-token`命令来提取添加新工作节点和管理节点到集群所需的命令和令牌。'
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`Notice that the commands to join a worker and a manager are identical apart
    from the join tokens (`SWMTKN...`). This means that whether a node joins as a
    worker or a manager depends entirely on which token you use when joining it. **You
    should ensure that your join tokens are protected, as they are all that is required
    to join a node to a swarm!**` `*   Log on to **wrk1** and join it to the swarm
    using the `docker swarm join` command with the worker join token.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，加入工作节点和管理节点的命令除了加入令牌（`SWMTKN...`）之外是相同的。这意味着节点是作为工作节点还是管理节点加入取决于加入时使用的令牌。**您应该确保您的加入令牌受到保护，因为这是加入节点到集群所需的全部内容！**`*登录**wrk1**并使用`docker
    swarm join`命令使用工作节点加入令牌加入到集群。
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`The `--advertise-addr`, and `--listen-addr` flags optional. I’ve added them
    as I consider it best practice to be as specific as possible when it comes to
    network configuration.` `*   Repeat the previous step on **wrk2** and **wrk3**
    so that they join the swarm as workers. Make sure you use **wrk2** and **wrk3’s**
    own IP addresses for the `--advertise-addr` and `--listen-addr` flags.*   Log
    on to **mgr2** and join it to the swarm as a manager using the `docker swarm join`
    command with the token used for joining managers.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`--advertise-addr`和`--listen-addr`标志是可选的。我添加了它们，因为我认为在网络配置方面尽可能具体是最佳实践。`*在**wrk2**和**wrk3**上重复上一步，使它们作为工作节点加入到集群。确保您使用**wrk2**和**wrk3**自己的IP地址作为`--advertise-addr`和`--listen-addr`标志。*登录**mgr2**并使用用于加入管理节点的令牌使用`docker
    swarm join`命令将其加入到集群。'
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`*   Repeat the previous step on **mgr3**, remembering to use **mgr3’s** IP
    address for the `advertise-addr` and `--listen-addr` flags.*   List the nodes
    in the swarm by running `docker node ls` from any of the manager nodes in the
    swarm.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`*在**mgr3**上重复上一步，记得使用**mgr3**的IP地址作为`advertise-addr`和`--listen-addr`标志。*通过从集群中的任何管理节点运行`docker
    node ls`来列出集群中的节点。'
- en: '[PRE5][PRE6][PRE7]`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5][PRE6][PRE7]`'
