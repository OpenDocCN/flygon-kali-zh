["```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n    </Project> \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n\n     **<TargetFramework>netstandard**\n\n    **2.0**\n\n    **</TargetFramework>**\n\n      </PropertyGroup>\n    </Project> \n\n    ```", "```cs\n using\n\n System;\nusing\n\n static\n\n System.Console;\nnamespace\n\n Packt.Shared\n\n{\n  public\n\n class\n\n Person\n\n  {\n  }\n} \n\n```", "```cs\n using\n\n System; \nnamespace\n\n Packt.Shared\n\n; // the class in this file is in this namespace\n\npublic\n\n class\n\n Person\n\n{\n} \n\n```", "```cs\n        <Project Sdk=\"Microsoft.NET.Sdk\"\n\n        >\n          <PropertyGroup>\n            <OutputType>Exe</OutputType>\n            <TargetFramework>net6.0\n\n        </TargetFramework>\n            <Nullable>enable</Nullable>\n            <ImplicitUsings>enable</ImplicitUsings>\n          </PropertyGroup>\n\n         **<ItemGroup>**\n\n         **<ProjectReference Include=**\n\n        **\"../PacktLibrary/PacktLibrary.csproj\"**\n\n         **/>**\n\n         **</ItemGroup>**\n\n        </Project> \n\n        ```", "```cs\n        dotnet build \n\n        ```", "```cs\n     using\n\n     Packt.Shared;\n    using\n\n     static\n\n     System.Console; \n\n    ```", "```cs\n     // var bob = new Person(); // C# 1.0 or later\n\n    Person bob = new\n\n    (); // C# 9.0 or later\n\n    WriteLine(bob.ToString()); \n\n    ```", "```cs\n    Packt.Shared.Person \n\n    ```", "```cs\n public\n\n class\n\n Person\n\n : System.Object \n\n```", "```cs\n public\n\n class\n\n Person\n\n : object \n\n```", "```cs\n public\n\n class\n\n Person\n\n : object\n\n{\n  // fields\n\n  public\n\n string\n\n Name;\n  public\n\n DateTime DateOfBirth;\n} \n\n```", "```cs\n    bob.Name = \"Bob Smith\"\n\n    ;\n    bob.DateOfBirth = new\n\n     DateTime(1965\n\n    , 12\n\n    , 22\n\n    ); // C# 1.0 or later\n\n    WriteLine(format: \"{0} was born on {1:dddd, d MMMM yyyy}\"\n\n    , \n      arg0: bob.Name,\n      arg1: bob.DateOfBirth); \n\n    ```", "```cs\n    Bob Smith was born on Wednesday, 22 December 1965 \n\n    ```", "```cs\n    Person alice = new\n\n    ()\n    {\n      Name = \"Alice Jones\"\n\n    ,\n      DateOfBirth = new\n\n    (1998\n\n    , 3\n\n    , 7\n\n    ) // C# 9.0 or later\n\n    };\n    WriteLine(format: \"{0} was born on {1:dd MMM yy}\"\n\n    ,\n      arg0: alice.Name,\n      arg1: alice.DateOfBirth); \n\n    ```", "```cs\n    Alice Jones was born on 07 Mar 98 \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    {\n      public\n\n     enum\n\n     WondersOfTheAncientWorld\n      {\n        GreatPyramidOfGiza,\n        HangingGardensOfBabylon,\n        StatueOfZeusAtOlympia,\n        TempleOfArtemisAtEphesus,\n        MausoleumAtHalicarnassus,\n        ColossusOfRhodes,\n        LighthouseOfAlexandria\n      }\n    } \n\n    ```", "```cs\n     public\n\n     WondersOfTheAncientWorld FavoriteAncientWonder; \n\n    ```", "```cs\n    bob.FavoriteAncientWonder = WondersOfTheAncientWorld.StatueOfZeusAtOlympia;\n    WriteLine(\n      format: \"{0}'s favorite wonder is {1}. Its integer is {2}.\"\n\n    ,\n      arg0: bob.Name,\n      arg1: bob.FavoriteAncientWonder,\n      arg2: (int\n\n    )bob.FavoriteAncientWonder); \n\n    ```", "```cs\n    Bob Smith's favorite wonder is StatueOfZeusAtOlympia. Its integer is 2. \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    {\n\n     **[**\n\n    **System.Flags**\n\n    **]**\n\n      public\n\n     enum\n\n     WondersOfTheAncientWorld \n    **:** \n\n    **byte**\n\n      {\n\n    **None                     =** \n\n    **0b**\n\n    **_0000_0000,** \n\n    **// i.e. 0**\n\n        GreatPyramidOfGiza       \n    **=** \n\n    **0b**\n\n    **_0000_0001,** \n\n    **// i.e. 1**\n\n        HangingGardensOfBabylon  \n    **=** \n\n    **0b**\n\n    **_0000_0010,** \n\n    **// i.e. 2**\n\n        StatueOfZeusAtOlympia    \n    **=** \n\n    **0b**\n\n    **_0000_0100,** \n\n    **// i.e. 4**\n\n        TempleOfArtemisAtEphesus \n    **=** \n\n    **0b**\n\n    **_0000_1000,** \n\n    **// i.e. 8**\n\n        MausoleumAtHalicarnassus \n    **=** \n\n    **0b**\n\n    **_0001_0000,** \n\n    **// i.e. 16**\n\n        ColossusOfRhodes         \n    **=** \n\n    **0b**\n\n    **_0010_0000,** \n\n    **// i.e. 32**\n\n        LighthouseOfAlexandria   \n    **=** \n\n    **0b**\n\n    **_0100_0000** \n\n    **// i.e. 64**\n\n      }\n    } \n\n    ```", "```cs\n     public\n\n     WondersOfTheAncientWorld BucketList; \n\n    ```", "```cs\n    bob.BucketList = \n      WondersOfTheAncientWorld.HangingGardensOfBabylon\n      | WondersOfTheAncientWorld.MausoleumAtHalicarnassus;\n    // bob.BucketList = (WondersOfTheAncientWorld)18;\n\n    WriteLine($\"\n\n    {bob.Name}\n\n    's bucket list is \n\n    {bob.BucketList}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Bob Smith's bucket list is HangingGardensOfBabylon, MausoleumAtHalicarnassus \n\n    ```", "```cs\n     using\n\n     System.Collections.Generic; // List<T> \n\n    ```", "```cs\n     public\n\n    List\n\n    <\n\n    Person\n\n    > Children\n\n     = new\n\n     List<Person>(); \n\n    ```", "```cs\n public\n\n List<Person> Children = new\n\n(); \n\n```", "```cs\n    bob.Children.Add(new\n\n     Person { Name = \"Alfred\"\n\n     }); // C# 3.0 and later\n\n    bob.Children.Add(new\n\n    () { Name = \"Zoe\"\n\n     }); // C# 9.0 and later\n\n    WriteLine(\n      $\"\n\n    {bob.Name}\n\n     has \n\n    {bob.Children.Count}\n\n     children:\"\n\n    );\n    for\n\n     (int\n\n     childIndex = 0\n\n    ; childIndex < bob.Children.Count; childIndex++)\n    {\n      WriteLine($\"  \n\n    {bob.Children[childIndex].Name}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Bob Smith has 2 children:\n      Alfred\n      Zoe \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    {\n      public\n\n     class\n\n     BankAccount\n\n      {\n        public\n\n     string\n\n     AccountName; // instance member\n\n        public\n\n     decimal\n\n     Balance; // instance member\n\n        public\n\n     static\n\n     decimal\n\n     InterestRate; // shared member\n\n      }\n    } \n\n    ```", "```cs\n    BankAccount.InterestRate = 0.012\n\n    M; // store a shared value\n\n    BankAccount jonesAccount = new\n\n    (); // C# 9.0 and later\n\n    jonesAccount.AccountName = \"Mrs. Jones\"\n\n    ; \n    jonesAccount.Balance = 2400\n\n    ;\n    WriteLine(format: \"{0} earned {1:C} interest.\"\n\n    ,\n      arg0: jonesAccount.AccountName,\n      arg1: jonesAccount.Balance * BankAccount.InterestRate);\n    BankAccount gerrierAccount = new\n\n    (); \n    gerrierAccount.AccountName = \"Ms. Gerrier\"\n\n    ; \n    gerrierAccount.Balance = 98\n\n    ;\n    WriteLine(format: \"{0} earned {1:C} interest.\"\n\n    ,\n      arg0: gerrierAccount.AccountName,\n      arg1: gerrierAccount.Balance * BankAccount.InterestRate); \n\n    ```", "```cs\n    Mrs. Jones earned \u00a328.80 interest. \n    Ms. Gerrier earned \u00a31.18 interest. \n\n    ```", "```cs\n     // constants\n\n    public\n\n     const\n\n     string\n\n     Species = \"Homo Sapien\"\n\n    ; \n\n    ```", "```cs\n    WriteLine($\"\n\n    {bob.Name}\n\n     is a \n\n    {Person.Species}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Bob Smith is a Homo Sapien \n\n    ```", "```cs\n     // read-only fields\n\n    public\n\n     readonly\n\n     string\n\n     HomePlanet = \"Earth\"\n\n    ; \n\n    ```", "```cs\n    WriteLine($\"\n\n    {bob.Name}\n\n     was born on \n\n    {bob.HomePlanet}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Bob Smith was born on Earth \n\n    ```", "```cs\n     // read-only fields\n\n    public\n\n     readonly\n\n     string\n\n     HomePlanet = \"Earth\"\n\n    ;\n\n    **public**\n\n    **readonly**\n\n     **DateTime Instantiated;**\n\n    **// constructors**\n\n    **public**\n\n    **Person**\n\n    **()**\n\n    **{**\n\n    **// set default values for fields**\n\n    **// including read-only fields**\n\n     **Name =** \n\n    **\"Unknown\"**\n\n    **;** \n\n     **Instantiated = DateTime.Now;**\n\n    **}** \n\n    ```", "```cs\n    Person blankPerson = new\n\n    ();\n    WriteLine(format:\n      \"{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.\"\n\n    ,\n      arg0: blankPerson.Name,\n      arg1: blankPerson.HomePlanet,\n      arg2: blankPerson.Instantiated); \n\n    ```", "```cs\n    Unknown of Earth was created at 11:58:12 on a Sunday \n\n    ```", "```cs\n     public\n\n    Person\n\n    (\n\n    string\n\n     initialName, \n\n    string\n\n     homePlanet\n\n    )\n\n    {\n      Name = initialName;\n      HomePlanet = homePlanet;\n      Instantiated = DateTime.Now;\n    } \n\n    ```", "```cs\n    Person gunny = new\n\n    (initialName: \"Gunny\"\n\n    , homePlanet: \"Mars\"\n\n    );\n    WriteLine(format:\n      \"{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.\"\n\n    ,\n      arg0: gunny.Name,\n      arg1: gunny.HomePlanet,\n      arg2: gunny.Instantiated); \n\n    ```", "```cs\n    Gunny of Mars was created at 11:59:25 on a Sunday \n\n    ```", "```cs\n     // methods\n\n    public\n\n    void\n\n    WriteToConsole\n\n    ()\n\n    {\n      WriteLine($\"\n\n    {Name}\n\n     was born on a \n\n    {DateOfBirth:dddd}\n\n    .\"\n\n    );\n    }\n    public\n\n    string\n\n    GetOrigin\n\n    ()\n\n    {\n      return\n\n     $\"\n\n    {Name}\n\n     was born on \n\n    {HomePlanet}\n\n    .\"\n\n    ;\n    } \n\n    ```", "```cs\n    bob.WriteToConsole(); \n    WriteLine(bob.GetOrigin()); \n\n    ```", "```cs\n    Bob Smith was born on a Wednesday. \n    Bob Smith was born on Earth. \n\n    ```", "```cs\n public\n\n class\n\n TextAndNumber\n\n{\n  public\n\n string\n\n Text;\n  public\n\n int\n\n Number;\n}\npublic\n\n class\n\n LifeTheUniverseAndEverything\n\n{\n  public\n\n TextAndNumber \n\nGetTheData\n\n()\n\n  {\n    return\n\n new\n\n TextAndNumber\n    {\n      Text = \"What's the meaning of life?\"\n\n,\n      Number = 42\n\n    };\n  }\n} \n\n```", "```cs\n     public\n\n     (string\n\n    , int\n\n    ) GetFruit()\n    {\n      return\n\n     (\"Apples\"\n\n    , 5\n\n    );\n    } \n\n    ```", "```cs\n    (string\n\n    , int\n\n    ) fruit = bob.GetFruit();\n    WriteLine($\"\n\n    {fruit.Item1}\n\n    , \n\n    {fruit.Item2}\n\n     there are.\"\n\n    ); \n\n    ```", "```cs\n    Apples, 5 there are. \n\n    ```", "```cs\n     public\n\n     (string\n\n     Name, int\n\n     Number) GetNamedFruit()\n    {\n      return\n\n     (Name: \"Apples\"\n\n    , Number: 5\n\n    );\n    } \n\n    ```", "```cs\n     var\n\n     fruitNamed = bob.GetNamedFruit();\n    WriteLine($\"There are \n\n    {fruitNamed.Number}\n\n    {fruitNamed.Name}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    There are 5 Apples. \n\n    ```", "```cs\n var\n\n thing1 = (\"Neville\"\n\n, 4\n\n);\nWriteLine($\"\n\n{thing1.Item1}\n\n has \n\n{thing1.Item2}\n\n children.\"\n\n);\nvar\n\n thing2 = (bob.Name, bob.Children.Count); \nWriteLine($\"\n\n{thing2.Name}\n\n has \n\n{thing2.Count}\n\n children.\"\n\n); \n\n```", "```cs\n // store return value in a tuple variable with two fields\n\n(string\n\n TheName, int\n\n TheNumber) tupleWithNamedFields = bob.GetNamedFruit();\n// tupleWithNamedFields.TheName\n\n// tupleWithNamedFields.TheNumber\n\n// deconstruct return value into two separate variables\n\n(string\n\n name, int\n\n number) = GetNamedFruit();\n// name\n\n// number \n\n```", "```cs\n    (string\n\n     fruitName, int\n\n     fruitNumber) = bob.GetFruit();\n    WriteLine($\"Deconstructed: \n\n    {fruitName}\n\n    , \n\n    {fruitNumber}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Deconstructed: Apples, 5 \n\n    ```", "```cs\n     // deconstructors\n\n    public\n\n    void\n\n    Deconstruct\n\n    (\n\n    out\n\n    string\n\n     name, \n\n    out\n\n     DateTime dob\n\n    )\n\n    {\n      name = Name;\n      dob = DateOfBirth;\n    }\n    public\n\n    void\n\n    Deconstruct\n\n    (\n\n    out\n\n    string\n\n     name, \n\n    out\n\n     DateTime dob, \n\n    out\n\n     WondersOfTheAncientWorld fav\n\n    )\n\n    {\n      name = Name;\n      dob = DateOfBirth;\n      fav = FavoriteAncientWonder;\n    } \n\n    ```", "```cs\n     // Deconstructing a Person\n\n    var\n\n     (name1, dob1) = bob;\n    WriteLine($\"Deconstructed: \n\n    {name1}\n\n    , \n\n    {dob1}\n\n    \"\n\n    );\n    var\n\n     (name2, dob2, fav2) = bob;\n    WriteLine($\"Deconstructed: \n\n    {name2}\n\n    , \n\n    {dob2}\n\n    , \n\n    {fav2}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Deconstructed: Bob Smith, 22/12/1965 00:00:00\n    Deconstructed: Bob Smith, 22/12/1965 00:00:00, StatueOfZeusAtOlympia\n    B \n\n    ```", "```cs\n     public\n\n    string\n\n    SayHello\n\n    ()\n\n    {\n      return\n\n     $\"\n\n    {Name}\n\n     says 'Hello!'\"\n\n    ;\n    }\n    public\n\n    string\n\n    SayHelloTo\n\n    (\n\n    string\n\n     name\n\n    )\n\n    {\n      return\n\n     $\"\n\n    {Name}\n\n     says 'Hello \n\n    {name}\n\n    !'\"\n\n    ;\n    } \n\n    ```", "```cs\n    WriteLine(bob.SayHello()); \n    WriteLine(bob.SayHelloTo(\"Emily\"\n\n    )); \n\n    ```", "```cs\n    Bob Smith says 'Hello!'\n    Bob Smith says 'Hello Emily!' \n\n    ```", "```cs\n     public\n\n    string\n\n    OptionalParameters\n\n    (\n\n    string\n\n     command  = \n\n    \"Run!\"\n\n    ,\n\n    double\n\n     number = \n\n    0.0\n\n    ,\n\n    bool\n\n     active = \n\n    true\n\n    )\n\n    {\n      return\n\n     string\n\n    .Format(\n        format: \"command is {0}, number is {1}, active is {2}\"\n\n    ,\n        arg0: command,\n        arg1: number,\n        arg2: active);\n    } \n\n    ```", "```cs\n    WriteLine(bob.OptionalParameters()); \n\n    ```", "```cs\n    command is Run!, number is 0, active is True \n\n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\"Jump!\"\n\n    , 98.5\n\n    )); \n\n    ```", "```cs\n    command is Jump!, number is 98.5, active is True \n\n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\n      number: 52.7\n\n    , command: \"Hide!\"\n\n    )); \n\n    ```", "```cs\n    command is Hide!, number is 52.7, active is True \n\n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\"Poke!\"\n\n    , active: false\n\n    )); \n\n    ```", "```cs\n    command is Poke!, number is 0, active is False \n\n    ```", "```cs\n     public\n\n    void\n\n    PassingParameters\n\n    (\n\n    int\n\n     x, \n\n    ref\n\n    int\n\n     y, \n\n    out\n\n    int\n\n     z\n\n    )\n\n    {\n      // out parameters cannot have a default\n\n      // AND must be initialized inside the method\n\n      z = 99\n\n    ;\n      // increment each parameter\n\n      x++; \n      y++; \n      z++;\n    } \n\n    ```", "```cs\n     int\n\n     a = 10\n\n    ; \n    int\n\n     b = 20\n\n    ; \n    int\n\n     c = 30\n\n    ;\n    WriteLine($\"Before: a = \n\n    {a}\n\n    , b = \n\n    {b}\n\n    , c = \n\n    {c}\n\n    \"\n\n    ); \n    bob.PassingParameters(a, ref\n\n     b, out\n\n     c); \n    WriteLine($\"After: a = \n\n    {a}\n\n    , b = \n\n    {b}\n\n    , c = \n\n    {c}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Before: a = 10, b = 20, c = 30 \n    After: a = 10, b = 21, c = 100 \n\n    ```", "```cs\n int\n\n d = 10\n\n; \nint\n\n e = 20\n\n;\nWriteLine($\"Before: d = \n\n{d}\n\n, e = \n\n{e}\n\n, f doesn't exist yet!\"\n\n);\n// simplified C# 7.0 or later syntax for the out parameter \n\nbob.PassingParameters(d, ref\n\n e, out\n\n int\n\n f); \nWriteLine($\"After: d = \n\n{d}\n\n, e = \n\n{e}\n\n, f = \n\n{f}\n\n\"\n\n); \n\n```", "```cs\n     namespace\n\n     Packt.Shared\n\n    {\n      public\n\n    **partial**\n\n     class\n\n     Person\n\n      { \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    {\n      public\n\n     partial\n\n     class\n\n     Person\n\n      {\n      }\n    } \n\n    ```", "```cs\n     // a property defined using C# 1 - 5 syntax\n\n    public\n\n     string\n\n     Origin\n    {\n      get\n\n      {\n        return\n\n     $\"\n\n    {Name}\n\n     was born on \n\n    {HomePlanet}\n\n    \"\n\n    ;\n      }\n    }\n    // two properties defined using C# 6+ lambda expression body syntax\n\n    public\n\n     string\n\n     Greeting => $\"\n\n    {Name}\n\n     says 'Hello!'\"\n\n    ;\n    public\n\n     int\n\n     Age => System.DateTime.Today.Year - DateOfBirth.Year; \n\n    ```", "```cs\n    Person sam = new\n\n    ()\n    {\n      Name = \"Sam\"\n\n    ,\n      DateOfBirth = new\n\n    (1972\n\n    , 1\n\n    , 27\n\n    )\n    };\n    WriteLine(sam.Origin); \n    WriteLine(sam.Greeting); \n    WriteLine(sam.Age); \n\n    ```", "```cs\n    Sam was born on Earth \n    Sam says 'Hello!'\n    49 \n\n    ```", "```cs\n     public\n\n     string\n\n     FavoriteIceCream { get\n\n    ; set\n\n    ; } // auto-syntax \n\n    ```", "```cs\n     private\n\n     string\n\n     favoritePrimaryColor;\n    public\n\n     string\n\n     FavoritePrimaryColor\n    {\n      get\n\n      {\n        return\n\n     favoritePrimaryColor;\n      }\n      set\n\n      {\n        switch\n\n     (value\n\n    .ToLower())\n        {\n          case\n\n     \"red\"\n\n    :\n          case\n\n     \"green\"\n\n    :\n          case\n\n     \"blue\"\n\n    :\n            favoritePrimaryColor = value\n\n    ;\n            break\n\n    ;\n          default\n\n    :\n            throw\n\n     new\n\n     System.ArgumentException(\n              $\"\n\n    {\n\n    value\n\n    }\n\n     is not a primary color. \"\n\n     + \n              \"Choose from: red, green, blue.\"\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n    sam.FavoriteIceCream = \"Chocolate Fudge\"\n\n    ;\n    WriteLine($\"Sam's favorite ice-cream flavor is \n\n    {sam.FavoriteIceCream}\n\n    .\"\n\n    ); \n    sam.FavoritePrimaryColor = \"Red\"\n\n    ;\n    WriteLine($\"Sam's favorite primary color is \n\n    {sam.FavoritePrimaryColor}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    Sam's favorite ice-cream flavor is Chocolate Fudge. \n    Sam's favorite primary color is Red. \n\n    ```", "```cs\n public\n\n class\n\n Book\n\n{\n  public\n\n required string\n\n Isbn { get\n\n; set\n\n; }\n  public\n\n string\n\n Title { get\n\n; set\n\n; }\n} \n\n```", "```cs\nBook novel = new\n\n(); \n\n```", "```cs\n     // indexers\n\n    public\n\n     Person this\n\n    [int\n\n     index]\n    {\n      get\n\n      {\n        return\n\n     Children[index]; // pass on to the List<T> indexer\n\n      }\n      set\n\n      {\n        Children[index] = value\n\n    ;\n      }\n    } \n\n    ```", "```cs\n    sam.Children.Add(new\n\n    () { Name = \"Charlie\"\n\n     }); \n    sam.Children.Add(new\n\n    () { Name = \"Ella\"\n\n     });\n    WriteLine($\"Sam's first child is \n\n    {sam.Children[\n\n    0\n\n    ].Name}\n\n    \"\n\n    ); \n    WriteLine($\"Sam's second child is \n\n    {sam.Children[\n\n    1\n\n    ].Name}\n\n    \"\n\n    );\n    WriteLine($\"Sam's first child is \n\n    {sam[\n\n    0\n\n    ].Name}\n\n    \"\n\n    ); \n    WriteLine($\"Sam's second child is \n\n    {sam[\n\n    1\n\n    ].Name}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Sam's first child is Charlie \n    Sam's second child is Ella \n    Sam's first child is Charlie \n    Sam's second child is Ella \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n      <ItemGroup>\n        <ProjectReference Include=\"../PacktLibrary/PacktLibrary.csproj\"\n\n     />\n\n     **<ProjectReference** \n\n     **Include=**\n\n    **\"../PacktLibraryModern/PacktLibraryModern.csproj\"**\n\n     **/>**\n\n      </ItemGroup>\n    </Project> \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ; // C# 10 file-scoped namespace\n\n    public\n\n     class\n\n     BusinessClassPassenger\n\n    {\n      public\n\n    override\n\n    string\n\n    ToString\n\n    ()\n\n      {\n        return\n\n     $\"Business Class\"\n\n    ;\n      }\n    }\n    public\n\n     class\n\n     FirstClassPassenger\n\n    {\n      public\n\n     int\n\n     AirMiles { get\n\n    ; set\n\n    ; }\n      public\n\n    override\n\n    string\n\n    ToString\n\n    ()\n\n      {\n        return\n\n     $\"First Class with \n\n    {AirMiles:N0}\n\n     air miles\"\n\n    ;\n      }\n    }\n    public\n\n     class\n\n     CoachClassPassenger\n\n    {\n      public\n\n     double\n\n     CarryOnKG { get\n\n    ; set\n\n    ; }\n      public\n\n    override\n\n    string\n\n    ToString\n\n    ()\n\n      {\n        return\n\n     $\"Coach Class with \n\n    {CarryOnKG:N2}\n\n     KG carry on\"\n\n    ;\n      }\n    } \n\n    ```", "```cs\n     object\n\n    [] passengers = {\n      new\n\n     FirstClassPassenger { AirMiles = 1\n\n    _419 },\n      new\n\n     FirstClassPassenger { AirMiles = 16\n\n    _562 },\n      new\n\n     BusinessClassPassenger(),\n      new\n\n     CoachClassPassenger { CarryOnKG = 25.7\n\n     },\n      new\n\n     CoachClassPassenger { CarryOnKG = 0\n\n     },\n    };\n    foreach\n\n     (object\n\n     passenger in\n\n     passengers)\n    {\n      decimal\n\n     flightCost = passenger switch\n\n      {\n        FirstClassPassenger p when\n\n     p.AirMiles > 35000\n\n     => 1500\n\n    M, \n        FirstClassPassenger p when\n\n     p.AirMiles > 15000\n\n     => 1750\n\n    M, \n        FirstClassPassenger _                         => 2000\n\n    M,\n        BusinessClassPassenger _                      => 1000\n\n    M,\n        CoachClassPassenger p when\n\n     p.CarryOnKG < 10.0\n\n     => 500\n\n    M, \n        CoachClassPassenger _                         => 650\n\n    M,\n        _                                             => 800\n\n    M\n      };\n      WriteLine($\"Flight costs \n\n    {flightCost:C}\n\n     for \n\n    {passenger}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Flight costs \u00a32,000.00 for First Class with 1,419 air miles \n    Flight costs \u00a31,750.00 for First Class with 16,562 air miles \n    Flight costs \u00a31,000.00 for Business Class\n    Flight costs \u00a3650.00 for Coach Class with 25.70 KG carry on \n    Flight costs \u00a3500.00 for Coach Class with 0.00 KG carry on \n\n    ```", "```cs\n     decimal\n\n     flightCost = passenger switch\n\n    {\n      /* C# 8 syntax\n\n      FirstClassPassenger p when p.AirMiles > 35000 => 1500M,\n\n      FirstClassPassenger p when p.AirMiles > 15000 => 1750M,\n\n      FirstClassPassenger                           => 2000M, */\n\n      // C# 9 or later syntax\n\n      FirstClassPassenger p => p.AirMiles switch\n\n      {\n        > 35000\n\n     => 1500\n\n    M,\n        > 15000\n\n     => 1750\n\n    M,\n        _       => 2000\n\n    M\n      },\n      BusinessClassPassenger                        => 1000\n\n    M,\n      CoachClassPassenger p when\n\n     p.CarryOnKG < 10.0\n\n     => 500\n\n    M,\n      CoachClassPassenger                           => 650\n\n    M,\n      _                                             => 800\n\n    M\n    }; \n\n    ```", "```cs\nFirstClassPassenger { AirMiles: > 35000\n\n } => 1500\n\n,\nFirstClassPassenger { AirMiles: > 15000\n\n } => 1750\n\nM,\nFirstClassPassenger => 2000\n\nM, \n\n```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ; // C# 10 file-scoped namespace\n\n    public\n\n     class\n\n     ImmutablePerson\n\n    {\n      public\n\n     string\n\n    ? FirstName { get\n\n    ; init\n\n    ; }\n      public\n\n     string\n\n    ? LastName { get\n\n    ; init\n\n    ; }\n    } \n\n    ```", "```cs\n    ImmutablePerson jeff = new\n\n    () \n    {\n      FirstName = \"Jeff\"\n\n    ,\n      LastName = \"Winger\"\n\n    };\n    jeff.FirstName = \"Geoff\"\n\n    ; \n\n    ```", "```cs\n    Program.cs(254,7): error CS8852: Init-only property or indexer 'ImmutablePerson.FirstName' can only be assigned in an object initializer, or on 'this' or 'base' in an instance constructor or an 'init' accessor. [/Users/markjprice/Code/Chapter05/PeopleApp/PeopleApp.csproj] \n\n    ```", "```cs\n     public\n\n     record\n\n     ImmutableVehicle\n\n    {\n      public\n\n     int\n\n     Wheels { get\n\n    ; init\n\n    ; }\n      public\n\n     string\n\n    ? Color { get\n\n    ; init\n\n    ; }\n      public\n\n     string\n\n    ? Brand { get\n\n    ; init\n\n    ; }\n    } \n\n    ```", "```cs\n    ImmutableVehicle car = new\n\n    () \n    {\n      Brand = \"Mazda MX-5 RF\"\n\n    ,\n      Color = \"Soul Red Crystal Metallic\"\n\n    ,\n      Wheels = 4\n\n    };\n    ImmutableVehicle repaintedCar = car \n      with\n\n     { Color = \"Polymetal Grey Metallic\"\n\n     }; \n    WriteLine($\"Original car color was \n\n    {car.Color}\n\n    .\"\n\n    );\n    WriteLine($\"New car color is \n\n    {repaintedCar.Color}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    Original car color was Soul Red Crystal Metallic.\n    New car color is Polymetal Grey Metallic. \n\n    ```", "```cs\n public\n\n record\n\n ImmutableAnimal\n\n{\n  public\n\n string\n\n Name { get\n\n; init\n\n; } \n  public\n\n string\n\n Species { get\n\n; init\n\n; }\n  public\n\nImmutableAnimal\n\n(\n\nstring\n\n name, \n\nstring\n\n species\n\n)\n\n  {\n    Name = name;\n    Species = species;\n  }\n  public\n\nvoid\n\nDeconstruct\n\n(\n\nout\n\nstring\n\n name, \n\nout\n\nstring\n\n species\n\n)\n\n  {\n    name = Name;\n    species = Species;\n  }\n} \n\n```", "```cs\n     // simpler way to define a record\n\n    // auto-generates the properties, constructor, and deconstructor\n\n    public\n\n    record\n\n    ImmutableAnimal\n\n    (\n\n    string\n\n     Name, \n\n    string\n\n     Species\n\n    )\n\n    ; \n\n    ```", "```cs\n    ImmutableAnimal oscar = new\n\n    (\"Oscar\"\n\n    , \"Labrador\"\n\n    );\n    var\n\n     (who, what) = oscar; // calls Deconstruct method \n\n    WriteLine($\"\n\n    {who}\n\n     is a \n\n    {what}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    Oscar is a Labrador. \n\n    ```"]