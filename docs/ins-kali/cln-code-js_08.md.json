["```js\nlet name = 'simon';\nlet copy = name;\n\n// Assign a new value to `name`:\nname = name.toUpperCase();\n\n// New value referred to by name:\nname; // => \"SIMON\"\n\n// Old value remains un-mutated:\ncopy; // => \"simon\"\n```", "```js\nconst name = new String('James');\n\n// We can add arbitrary properties, since it is an object:\n// (Warning: this is an anti-pattern)\nname.surname = 'Padolsey';\nname.surname; // => \"Padolsey\"\n```", "```js\n// Cast a number to a string:\nString(123); // => \"123\"\n\n// Cast a string to a number\nNumber(\"2\"); // => 2\n\n// Cast a number to a boolean\nBoolean(0); // => false\nBoolean(1); // => true\n```", "```js\nBoolean('hi'); // => true\nBoolean(0);    // => false\nBoolean(42);   // => true\nBoolean(0.1);  // => true\nBoolean('');   // => false\nBoolean(true); // => true\nBoolean(null); // => false\n```", "```js\nif (0) {\n  // This will not run. 0 is falsy.\n}\nif (1) {\n  // This will run. 1 is truthy.\n}\n```", "```js\nif (person.age) {\n  processIdentity(person);\n}\n```", "```js\nif (person.age === null || person.age === undefined) {\n  processIdentity(person);\n}\n```", "```js\nconst max = Number.MAX_SAFE_INTEGER;\nmax + 1; // => 9007199254740992 (correct)\nmax + 2; // => 9007199254740992 (incorrect)\nmax + 3; // => 9007199254740994 (correct)\nmax + 4; // => 9007199254740996 (incorrect)\n// ... etc.\n```", "```js\nconst max = BigInt(Number.MAX_SAFE_INTEGER)\nmax + 1n; // => 9007199254740992n (correct)\nmax + 2n; // => 9007199254740993n (correct)\nmax + 3n; // => 9007199254740994n (correct)\nmax + 4n; // => 9007199254740995n (correct)\n// ... etc.\n```", "```js\n0.1 + 0.2; // => 0.30000000000000004\n```", "```js\nconst someValue = 0.1 + 0.2;\nif (someValue === 0.3) {\n  yay();\n}\n```", "```js\nNumber.EPSILON; // => 0.0000000000000002220446049250313\n```", "```js\nconst someValue = 0.1 + 0.2;\nif (Math.abs(someValue - 0.3) < Number.EPSILON) {\n  // someValue is (effectively) equal to 0.3\n}\n```", "```js\nconst unwieldyDecimalValue = 0.12345678;\n\n// We can use 1e8 to express Math.pow(10, 8)\nunwieldyDecimalValue * 1e8; // => 12345678\n```", "```js\nif (typeof myNumber === 'number' && !isNaN(myNumber)) {\n  // Do something with your number\n}\n```", "```js\n100/0; // => Infinity\n```", "```js\n100/0 === Infinity; // => true\n```", "```js\n100/-0; // => -Infinity\n-Infinity === Infinity; // => false\n```", "```js\ntypeof Infinity; // => \"number\"\n```", "```js\n// Single quotes:\nconst name = 'Titanic';\n\n// Double quotes:\nconst type = \"Ship\";\n\n// Template literals (back-ticks):\nconst report = `\n  RMS Titanic was a British passenger liner that sank\n  in the North Atlantic Ocean in 1912 after the ship\n  struck an iceberg during her maiden voyage.\n`;\n```", "```js\nconst a = \"example of a \\\nstring with escaped newline \\\ncharacters\";\n\nconst b = \"example of a string with escaped newline characters\";\n\na === b; // => true\n```", "```js\nconst nBreadLoaves = 4;\nconst breadLoafCost = 2.40;\n\n`\n  I went to the market and bought ${nBreadLoaves} loaves of\n  bread and it cost me ${nBreadLoaves * breadLoafCost} euros.\n`\n```", "```js\n'fox'.length;   // => 3\n'12345'.length; // => 5\n```", "```js\nconst isTrue = true;\nconst isFalse = false;\n```", "```js\nconst age = 100;\nconst hasLivedTo100 = age >= 100;\n\nif (hasLivedTo100) {\n  console.log('Congratulations on living to 100!');\n}\n```", "```js\nconst isTrueObj = new Boolean(true);\n```", "```js\nconst isFalseObj = new Boolean(false);\n\nif (isFalseObj) {\n  // This will run\n}\n```", "```js\n100007199254740991n\n```", "```js\nMath.abs(1n); // !! TypeError: Cannot convert a BigInt value to a number\n```", "```js\n(1n + (2n * 3n)) + 4n; // => 11n\n```", "```js\n1n + 1; // !! TypeError: Cannot mix BigInt and other types, use explicit conversions\n```", "```js\nconst totallyUniqueKey = Symbol();\n```", "```js\nconst totallyUniqueKey = Symbol('My Special Key');\n```", "```js\nconst thing = {};\nthing.name = 'James';\nthing.hobby = 'Kayaking';\nthing[Symbol(999)] = 'Something else entirely';\n\nfor (let key in thing) console.log(key);\n// => \"name\"\n// => \"hobby\"\n\nconst symbols =\n  Object.getOwnPropertySymbols(thing); // => [Symbol(999)]\n\nthing[symbols[0]]; // => \"Something else entirely\"\n```", "```js\nconst log = thing => {\n console.log(\n   thing[log.CUSTOM_RENDER] ?\n     thing[log.CUSTOM_RENDER](thing) :\n     thing\n );\n};\nlog.CUSTOM_RENDER = Symbol();\n\nclass Person {\n constructor(name) {\n   this.name = name;\n   this[log.CUSTOM_RENDER] = () => {\n     return `Person (name = ${this.name})`;\n   };\n }\n}\n\nlog(123); // => Logs \"123\"\nlog(new Person('Sarah')); // => Logs: \"Person (name = Sarah)\"\nlog(new Person('Wally')); // => Logs: \"Person (name = Wally)\"\nlog(new Person('Julie')); // => Logs: \"Person (name = Julie)\"\n```", "```js\nsetRestaurantFeatures({\n  hasWifi: false,\n  hasDisabledAccess: true,\n  hasParking: null\n});\n```", "```js\nfunction setRestaurantFeatures(features) {\n  if (features.hasParking) {\n    // This will not run as hasParking is null\n  }\n} \n```", "```js\nif (features.hasParking !== null && features.hasParking !== undefined) {\n  // hasParking is available...\n} else {\n  // hasParking is not set (undefined) or unavailable (null)\n}\n```", "```js\nif (features.hasParking != null) {\n  // hasParking is available...\n} else {\n  // hasParking is not set (undefined) or unavailable (null)\n}\n```", "```js\nconst coffee = {\n  type: 'Flat White',\n  shots: 2\n};\n\ncoffee.name; // => undefined\ncoffee.type; // => \"Flat White\"\n```", "```js\nthisDoesNotExist; // !! ReferenceError: thisDoesNotExist is not defined\n```", "```js\nconst obj = {};\nobj.foo; // => undefined\n```", "```js\nobj.foo.baz; // !! TypeError: Cannot read property 'baz' of undefined\n```", "```js\n(undefined).foo;  // !! TypeError: Cannot read property 'foo' of undefined\n```", "```js\nundefined; // => undefined\n\nfunction weird() {\n  let undefined = 1;\n  undefined; // => 1\n}\n```", "```js\nfunction scopeWithReliableUndefined() {\n  let undefined;\n  undefined; // => undefined\n}\n```", "```js\nvoid 0;         // => undefined\nvoid null;      // => undefined\nvoid undefined; // => undefined\n```", "```js\nif (typeof myValue === 'undefined') { ... }\n```", "```js\nconst animal = {\n  name: 'Duck',\n  hobby: 'Paddling'\n};\n```", "```js\nconst animal = new Object();\nanimal.name = 'Duck';\nanimal.hobby = 'Paddling';\n```", "```js\nconst object = {\n  foo: 123,   // Using an identifier as the key\n  \"baz\": 123, // Using a String literal as the key\n  123: 123    // Using a Number literal as the key\n};\n```", "```js\nconst data = {\n  hobbies: ['tennis', 'kayaking'],\n  'my hobbies': ['tennis', 'kayaking']\n};\n\ndata.hobbies;       // Easy\ndata['my hobbies']; // Burdensome\n```", "```js\nconst data = {\n  ['item' + (1 + 2)]: 'foo'\n};\n\ndata; // => { item3: \"foo\" }\ndata.item3; // => \"foo\"\n```", "```js\nconst me = {\n  name: 'James',\n  location: 'England',\n  toString() {\n    return [this.name, this.location].join(', ')\n  }\n};\n\nme.toString(); // => \"James, England\"\nString(me); // => \"James, England\"\n```", "```js\nconst peopleInEurope = {};\n\npeopleInEurope[me] = true;\nObject.keys(peopleInEurope); // => [\"James, England\"]\npeopleInEurope[me]; // => true\n```", "```js\nconst myObject = {};\n\nObject.defineProperty(myObject, 'name', {\n  writeable: false,\n  configurable: false,\n  enumerable: true,\n  value: 'The Unchangeable Name'\n});\n\nmyObject.name; // => \"The Unchangeable Name\"\nmyObject.name = 'something else'; // => (Ineffective)\nmyObject.name; // => \"The Unchangeable Name\"\n\ndelete myObject.name; // => false (Ineffective)\nmyObject.name; // => \"The Unchangeable Name\"\n```", "```js\nconst chocolate = Object.defineProperties({\n  // Empty object where our described properties\n  // will be placed\n}, {\n name: { value: 'Chocolate', enumerable: false },\n tastes: { value: ['Bitter', 'Sweet'], enumerable: true }\n});\n\nchocolate.name; // => \"Chocolate\"\nchocolate.tastes; // => [\"Bitter\", \"Sweet\"]\n\nObject.keys(chocolate); // => [\"tastes\"]\n```", "```js\nconst obj = {};\n\nObject.defineProperty(\n obj,\n 'timestamp',\n { configurable: false, value: Date.now() }\n);\n\nObject.defineProperty(\n  obj,\n  'timestamp',\n  { configurable: true }\n);\n// ! TypeError: Cannot redefine property: timestamp\n```", "```js\nconst data = Object.defineProperties({}, {\n  name: {\n    set(name) { this.normalizedName = name.toLowerCase(); },\n    get() { return this.normalizedName; }\n  }\n});\n\ndata.name = 'MoLLy BroWn';\ndata.name; // => \"molly brown\"\n```", "```js\nObject.keys(data); // => [\"normalizedName\"]\n```", "```js\nclass SpecialArray extends Array {\n  get last() { return this[this.length - 1]; }\n}\n\nconst myArray = new SpecialArray('a', 'b', 'c', 'd');\nmyArray.last; // => \"d\"\nmyArray.push('e');\nmyArray.last; // => \"e\"\n```", "```js\nconst populationBySpecies = new Map();\nconst reindeer = { name: 'Reindeer', formalName: 'Rangifer tarandus' };\n\npopulationBySpecies.set(reindeer, 2000000);\npopulationBySpecies.get(reindeer); // => 2,000,000\n```", "```js\nconst engineerPrototype = {\n  type: 'Engineer',\n  sayHello() {\n    return `Hello, I'm ${this.name} and I'm an ${this.type}`;\n  }\n};\n```", "```js\nconst pandaTheEngineer = Object.create(engineerPrototype);\n```", "```js\npandaTheEngineer.name = 'Panda';\npandaTheEngineer.sayHello(); // => \"Hello, I'm Panda and I'm an Engineer\"\n```", "```js\npandaTheEngineer.sayGoodbye; // => TypeError: sayGoodbye is not a function\nengineerPrototype.sayGoodbye = () => 'Goodbye!';\npandaTheEngineer.sayGoodbye(); // => 'Goodbye!'\n```", "```js\npandaTheEngineer.sayHello = () => 'Yo!';\npandaTheEngineer.sayHello(); // => \"Yo!\"\n```", "```js\ndelete pandaTheEngineer.sayHello;\npandaTheEngineer.sayHello(); // => // => \"Hello, I'm Panda and I'm an Engineer\"\n```", "```js\n// We can inspect its prototype:\nObject.getPrototypeOf(pandaTheEngineer) === engineerPrototype; // => true\n```", "```js\nObject.getOwnPropertyNames(\n  Object.getPrototypeOf(pandaTheEngineer)\n); // => [\"type\", \"sayHello\", \"sayGoodbye\"]\n```", "```js\nObject.getOwnPropertyNames(pandaTheEngineer); // => [\"name\"]\n```", "```js\n// Modify the prototype object:\nengineerPrototype.type = \"Awesome Engineer\";\n\n// Call a method on our object (that uses the prototype):\npandaTheEngineer.sayHello(); // => \"Hello, I'm Panda and I'm an Awesome Engineer\"\n```", "```js\nclass Engineer {\n  type = 'Engineer'\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    return `Hello, I'm ${this.name} and I'm an ${this.type}`;\n  }\n}\n\nconst pandaTheEngineer = new Engineer();\n\nObject.getOwnPropertyNames(pandaTheEngineer); // => [\"type\", \"name\"]\n\nObject.getOwnPropertyNames(\n  Object.getPrototypeOf(pandaTheEngineer)\n); // => [\"constructor\", \"sayHello\"]\n```", "```js\nfunction Engineer(name) {\n  this.name = name;\n}\n\nEngineer.prototype = {\n  type: 'Engineer',\n  sayHello() {\n    return `Hello, I'm ${this.name} and I'm an ${this.type}`;\n  }\n};\n```", "```js\nconst pandaTheEngineer = new Engineer();\n```", "```js\nObject.getOwnPropertyNames(pandaTheEngineer); // => [\"name\"]\n\nObject.getOwnPropertyNames(\n  Object.getPrototypeOf(pandaTheEngineer)\n); // => [\"type\", \"sayHello\"]\n```", "```js\nconst array = ['wow', 'an', 'array'];\n\nObject.getOwnPropertyNames(array); // => [\"0\", \"1\", \"2\", \"length\"]\n\nObject.getOwnPropertyNames(\n  Object.getPrototypeOf(array)\n); // => [\"constructor\", \"concat\", \"find\", \"findIndex\", \"lastIndexOf\", \"pop\", \"push\", ...]\n```", "```js\nclass HeartArray extends Array {\n  join() {\n    return super.join(' \u2764 ');\n  }\n}\n\nconst yay = new HeartArray('this', 'is', 'lovely');\n\nyay.join(); // => \"this \u2764 is \u2764 lovely\"\n```", "```js\n// Function Declaration\nfunction myFunction() {}\n\n// Function Expression\nconst myFunction = function () {};\n\n// Named Function Expression\nconst myFunction = function myFunction() {};\n\n// \"Fat\"-Arrow Function Expression\nconst myFunction = () => {};\n```", "```js\nconst things = {\n  myMethod() {},\n  anotherMethod() {}\n};\n```", "```js\nclass Thing {\n  myMethod() {}\n  anotherMethod() {}\n}\n```", "```js\n// This is a statement, and a function declaration:\n// And will therefore be hoisted:\nfunction wow() {}\n\n// This is a statement containing a function expression:\nconst wow = function wow() {};\n```", "```js\nfoo = 123;\nfoo = [1,2,3];\nfoo = {1:2,3:4};\nfoo = 1 | 2 | 3;\nfoo = function() {};\nfoo = (function(){})();\nfoo = [function(){}, ()=>{}, function baz(){}];\n```", "```js\nconst london = { name: 'London' };\nconst tokyo = { name: 'Tokyo' };\n\nfunction sayMyName() {\n  console.log(`My name is ${this.name}`);\n}\n\nsayMyName(); // => Logs: \"My name is undefined\"\n\nlondon.sayMyName = sayMyName;\nlondon.sayMyName(); // => Logs \"My name is London\"\n\ntokyo.sayMyName = sayMyName;\ntokyo.sayMyName(); // => Logs \"My name is Tokyo\"\n```", "```js\nconst sayHelloToTokyo = sayMyName.bind(tokyo);\nsayHelloToTokyo(); // => Logs \"My name is Tokyo\"\n```", "```js\n// Forcing the value of `this` via `.call()`:\ntokyo.sayMyName.call(london); // => Logs \"My name is London\"\n```", "```js\nconst Utils {\n  constructor() {\n    super(); // <= I can use super here\n  }\n  method() {\n    super.method(); // <= And here...\n  }\n}\n\nconst utils = {\n  method() {\n    return super.property; // <= And even here...\n  }\n};\n\n```", "```js\nconst Banana extends Fruit {\n  constructor() {\n    super(); // Call the Fruit constructor\n  }\n}\n```", "```js\nclass Foo {\n  constructor() {\n    console.log(new.target === Foo);\n  }\n}\nnew Foo(); // => Logs: true\n```", "```js\nfunction Foo() {\n  if (new.target !== Foo) {\n    return new Foo();\n  }\n}\n\nnew Foo() instanceof Foo; // => true\nFoo() instanceof Foo;     // => true\n```", "```js\nfunction Foo() {\n  if (new.target !== Foo) {\n    throw new Error('Foo is a constructor: please instantiate via new Foo()');\n  }\n}\n\nFoo() instanceof Foo; // !! Error: Foo is a constructor: please instantiate via new Foo()\n```", "```js\nfunction sum() {\n  arguments; // => [1, 2, 3, 4, 5] (Array-like object)\n  let total = 0;\n  for (let n of arguments) total += n;\n  return total;\n}\n\nsum(1, 2, 3, 4, 5);\n```", "```js\nfunction sum(...numbers) {\n  // We can call reduce() on our array:\n  return numbers.reduce((total, n) => total + n, 0);\n}\n\nsum(1, 2, 3, 4, 5);\n```", "```js\nfunction nameOfTheFunction() {}\n```", "```js\nnameOfTheFunction.name; // => \"nameOfTheFunction\"\n```", "```js\nfunction nameOfTheFunction() {}\nnameOfTheFunction; // => the function\nnameOfTheFunction.name; // => \"nameOfTheFunction\"\n```", "```js\nfunction nameOfTheFunction() {}\nnameOfTheFunction; // => the function\nnameOfTheFunction.name; // => \"nameOfTheFunction\"\n```", "```js\nconst myFunction = function hullaballoo() {}\n```", "```js\nmyFunction; // => the function\nmyFunction.name; // => \"hullaballoo\"\n```", "```js\nhullaballoo; // !! ReferenceError: hullaballoo is not defined\n```", "```js\nconst myFunction = function hullaballoo() {\n  hullaballoo; // => the function\n};\n```", "```js\n[\n  ['chris', 'smith'],\n  ['sarah', ['talob', 'peters']],\n  ['pam', 'taylor']\n].map(function capitalizeNames(item) { \n  return Array.isArray(item) ?\n    item.map(capitalizeNames) :\n    item.slice(0, 1).toUpperCase() + item.slice(1);\n});\n\n// => [[\"Chris\",\"Smith\"],[\"Sarah\",[\"Talob\", \"Peters\"]],[\"Pam\",\"Taylor\"]]\n```", "```js\nhoistedDeclaration(); // => Does not throw an error...\n\nfunction hoistedDeclaration() {}\n```", "```js\nregularFunctionExpression();\n  // => Uncaught ReferenceError:\n  // => Cannot access 'regularFunctionExpression' before initialization\n\nconst regularFunctionExpression = function() {};\n```", "```js\nconst arrayOfFunctions = [\n  function(){},\n  function(){}\n];\n```", "```js\n[1, 2, 3].forEach(function(value) { \n  // do something with each value\n});\n```", "```js\nclass FooBear {\n  name = 'Foo Bear';\n}\n\nFooBear.prototype.sayHello = () => `Hello I am ${this.name}`;\nnew FooBear().sayHello(); // => \"Hello I am \";\n\nFooBear.prototype.sayHello = function() {\n  return `Hello I am ${this.name}`;\n};\nnew FooBear().sayHello(); // => \"Hello I am Foo Bear\";\n```", "```js\n// Regular Arrow Function\nconst arrow = (arg1, arg2) => { return 123; };\n\n// Concise Arrow Function\nconst arrow = (arg1, arg2) => 123;\n```", "```js\nconst addOne = n => n + 1;\n```", "```js\n[1, 2, 3]\n  .map(n => n*2)\n  .map(n => `Number ${n}`);\n\n// => [\"Number 2\", \"Number 4\", \"Number 6\"]\n```", "```js\nconst giveMeAnObjectPlease = () => { name: 'Gandalf', age: 2019 };\n// !! Uncaught SyntaxError: Unexpected token `:`\n```", "```js\nconst giveMeAnObjectPlease = () => ({ name: 'Gandalf', age: 2019 });\n```", "```js\nclass MyUIComponent extends UIComponent {\n  constructor() {\n    this.bindEvents({\n      onClick: () => {\n        this; // <= usefully refers to the MyUIComponent instance\n      }\n    });\n  }\n}\n```", "```js\nprocess(\n  n=>n.filter((nCallback, compute)=>compute(()=>nCallback())\n)\n```", "```js\n(function() {\n  // I am an anonymous function\n})\n```", "```js\n(function() {\n  // I am immediately invoked\n}());\n```", "```js\n(() => {\n  // I am immediately invoked\n})(); // <- () actually calls the function\n```", "```js\nfn();\n```", "```js\n(fn)();\n```", "```js\nfn();\n(fn)();\n((fn))();\n```", "```js\n(function() {\n  // Called immediately...\n})();\n```", "```js\nconst initializeApp = () => {\n  // Initializing...\n};\n\ninitializeApp();\n```", "```js\nconst things = {\n  myFunction() {\n    // ...\n  }\n};\n```", "```js\nclass Things {\n  myFunction() {\n    // ...\n  }\n}\n```", "```js\nclass Things {\n  myFunction = function() {\n    // ...\n  };\n}\n```", "```js\nclass Dog {\n  greet() { return 'Bark!'; }\n}\n\nclass Cat {\n  greet() { return 'Meow!'; }\n}\n\nclass JessieTheDog extends Dog {\n  greet() { return `${super.greet()} I am Jessie!`; }\n}\n\nclass JessieTheCat extends Cat {\n  greet() { return `${super.greet()} I am Jessie!`; }\n}\n```", "```js\nnew JessieTheDog().greet(); // => \"Bark! I am Jessie!\"\nnew JessieTheCat().greet(); // => \"Meow! I am Jessie!\"\n```", "```js\nclass JessieTheCat extends Cat {\n  greet = JessieTheDog.prototype.greet\n}\n```", "```js\nnew JessieTheCat().greet(); // => \"Bark! I am Jessie!\"\n```", "```js\n// Async Function Declaration:\nasync function foo() {}\n\n// Async Function Expression:\nconst foo = async function() {};\n\n// Async Arrow-Function:\nconst foo = async () => {};\n\n// Async Method Definition:\nconst obj = {\n  async foo() {}\n};\n```", "```js\ngetUserDetails('user1', function(userDetails) {\n  // This callback is called asynchronously\n});\n```", "```js\nconst userDetails = await getUserDetails('user1');\n```", "```js\nfunction* myGenerator() {...}\n```", "```js\nfunction* threeLittlePiggies() {\n  yield 'This little piggy went to market.';\n  yield 'This little piggy stayed home.';\n  yield 'This little piggy had roast beef.';\n}\n\nconst piggies = threeLittlePiggies();\n\npiggies.next().value; // => 'This little piggy went to market.'\npiggies.next().value; // => 'This little piggy stayed home.'\npiggies.next().value; // => 'This little piggy had roast beef.'\n\npiggies.next(); // => {value: undefined, done: true}\n```", "```js\nfor (let piggy of threeLittlePiggies()) console.log(piggy); \n// => Logs: \"This little piggy went to market.\"\n// => Logs: This little piggy stayed home.\"\n// => Logs: This little piggy had roast beef.\"\n\n[...threeLittlePiggies()];\n// => [\"This little piggy went to market\", \"This little piggy stayed...\", \"...\"]\n```", "```js\nasync function* pages(n) {\n  for (let i = 1; i <= n; i++) {\n    yield fetch(`/page/${i}`);\n  }\n};\n\n// Fetch five pages (/page/1, /page/2, /page/3)\nfor await (let page of pages(3)) {\n  page; // => Each of the 3 pages\n};\n```", "```js\nconst friends = ['Rachel', 'Monica', 'Ross', 'Joe', 'Phoebe', 'Chandler'];\n```", "```js\n[\n  [1, 2, 3],\n  function() {},\n  Symbol(),\n  {\n    title: 'wow',\n    foo: function() {}\n  }\n]\n```", "```js\nfriends[0]; // => \"Rachel\"\nfriends[5]; // => \"Chandler\"\nfriends.length; // => 6\n\nfriends.map(name => name.toUpperCase());\n// => [\"RACHEL\", \"MONICA\", \"ROSS\", \"JOE\", \"PHOEBE\", \"CHANDLER\"]\n\nfriends.join(' and ');\n// => \"Rachel and Monica and Ross and Joe and Phoebe and Chandler\"\n```", "```js\nfor (let i = 0; i < friends.length; i++) {\n  // Do something with `friends[i]`\n}\n```", "```js\nfor (let friend of friends) {\n  // Do something with `friend`\n}\n\nfriends.forEach((friend, index) => {\n  // Do something with `friend`\n});\n```", "```js\nconst arrayLikeThing = {\n  length: 3,\n  0: 'Suspiciously',\n  1: 'similar to',\n  2: 'an array...'\n};\n\n// We can \"borrow\" an array's join method by assigning \n// it to our object:\narrayLikeThing.join = [].join;\n\narrayLikeThing.join(' ');\n// => \"Suspiciously similar to an array...\"\n```", "```js\nconst arrayLikeObject = { length: 2, 0: 'foo', 1: 'bar' };\n\n// \"Borrowing\" a method from an array and forcing its\n// execution context via call():\n[].slice.call(arrayLikeObject);\n\n// \"Borrowing\" a method explicitly from the Array.prototype\n// and forcing its execution context via call():\nArray.prototype.slice.call(arrayLikeObject);\n```", "```js\n// \"spread\" a NodeList into an Array:\n[...document.querySelectorAll('div span a')];\n\n// \"spread\" an arguments object into an Array:\n[...arguments];\n```", "```js\nconst foundNumbersArray = [1, 2, 3, 4, 3, 2, 1];\nconst foundNumbersSet = new Set([1, 2, 3, 4, 3, 2, 1]);\n\nfoundNumbersArray; // => [1, 2, 3, 4, 3, 2, 1]\nfoundNumbersSet;   // => Set{ 1, 2, 3, 4 }\n```", "```js\nnew Set('wooooow'); // => Set{ 'w', 'o' }\n```", "```js\n[...foundNumbersSet]; // => [1, 2, 3, 4]\n```", "```js\nconst validIteratorFunction = () => {\n  return {\n    next: () => {\n      return {\n        value: null, // Current value of the iteration\n        done: true // Whether the iteration is completed\n      };\n    }\n  }\n};\n```", "```js\nconst zeroToTen = {};\nzeroToTen[Symbol.iterator] = function() {\n  let current = 0;\n  return {\n    next: function() {\n      if (current > 10) return { done: true };\n      return {\n        done: false,\n        value: current++\n      };\n    }\n  }\n};\n\n// We can see the effect of the iterable via the spread operator:\n[...zeroToTen]; // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```", "```js\nconst words = {\n  values: ['CoFfee', 'ApPLE', 'Tea'],\n  [Symbol.iterator]: function*() {\n    for (let word of this.values) {\n      yield word.toUpperCase();\n      yield word.toLowerCase();\n    }\n  }\n};\n\n[...words]\n// => [\"COFFEE\", \"coffee\", \"APPLE\", \"apple\", \"TEA\", \"tea\"]\n```", "```js\nconst someObject = {\n  [Symbol.iterator]: function*() { yield 123; }\n};\n\n[...someObject]; // => [123]\n```", "```js\nfunction* someGenerator() {\n  yield 123;\n}\n\n[...someGenerator()]; // => [123]\n```", "```js\nconst string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam sit amet odio ultrices nunc efficitur venenatis laoreet nec leo.';\n\nstring.match(/\\w{10,}/g); // => [\"consectetur\", \"adipiscing\"]\n```", "```js\nconst string = 'some 1 content 2 with 3 digits';\nstring.match(/1|2|3/g); // => [\"1\", \"2\", \"3\"]\n```", "```js\n/[PATTERN]/[FLAGS]\n```", "```js\n/1|2|3/g\n```", "```js\n/\\d/g\n```", "```js\n/0800\\d{4,6}/g\n```", "```js\n`\n  This is a test in which exist some phone\n  numbers like 0800182372 and 08009991.\n`.match(\n  /0800\\d{4,6}/g\n);\n// => [\"0800182372\", \"08009991\"]\n```", "```js\n/hello/.test('hELlO');  // => false\n/hello/i.test('hELlO'); // => true\n```", "```js\nRegExp('hello').test('hELlO');      // => false\nRegExp('hello', 'i').test('hELlO'); // => true\n```", "```js\nnew RegExp('[a-z]', 'i'); // => /[a-z]/i\nRegExp('[a-z]', 'i');     // => /[a-z]/i\n```", "```js\n// RegExp.prototype.test\n/@/.test('a@b.com'); // => true\n/@/.test('aaa.com'); // => false\n\n// RegExp.prototype.exec\nconst regexp = /\\d+/g;\nconst string = '123 456 789';\nregex.exec(string); // => [\"123\"]\nregex.exec(string); // => [\"456\"]\nregex.exec(string); // => [\"789\"]\nregex.exec(string); // => null\n\n// String.prototype.match\n'Orders: #92838 #02812 #92833'.match(/\\d+/);  // => [\"92838\"]\n'Orders: #92838 #02812 #92833'.match(/wo+w/g); // => [\"92838\", \"02812\", \"92833\"]\n\n// String.prototype.matchAll\nconst string = 'Orders: #92333 <fulfilled> #92835 <pending>';\nconst matches = [\n  ...string.matchAll(/#(\\d+) <(\\w+)>/g)\n];\nmatches[0][1]; // => 92333\nmatches[0][2]; // => fulfilled\n\n// String.prototype.replace\n'1 2 3 4'.replace(/\\d/, n => `<${n}>`); // => \"<1> 2 3 4'\n'1 2 3 4'.replace(/\\d/g, n => `<${n}>`); // => \"<1> <2> <3> <4>'\n\n// String.prototype.search\n'abcdefghhijklmnop'.search(/k/); // => 11\n\n// String.prototype.split\n'time_in____a__tree'.split(/_+/); // [\"time\", \"in\", \"a\", \"tree\"]\n\n```", "```js\nconst alphaRegex = /[a-z]+/g;\n\nalphaRegex.exec('aaa bbb ccc'); // => [\"aaa\"]\nalphaRegex.exec('aaa bbb ccc'); // => [\"bbb\"]\nalphaRegex.exec('aaa bbb ccc'); // => [\"ccc\"]\nalphaRegex.exec('aaa bbb ccc'); // => null\n```", "```js\nconst alphaRegex = /[a-z]+/g;\n\nalphaRegex.exec('monkeys laughing'); // => [\"monkeys\"]\nalphaRegex.lastIndex; // => 7\nalphaRegex.exec('birds flying'); // => [\"lying\"]\n```", "```js\nconst petRegex = /\\b(?:dog|cat|hamster)\\b/g;\n\n// Testing multiple strings without resetting lastIndex:\npetRegex.exec('lion tiger cat'); // => [\"cat\"]\npetRegex.exec('lion tiger dog'); // => null\n\n// Testing multiple strings with resetting lastIndex:\npetRegex.exec('lion tiger cat'); // => [\"cat\"]\npetRegex.lastIndex = 0;\npetRegex.exec('lion tiger dog'); // => [\"dog\"]\n```", "```js\nconst regexp = /cat|hat/y; // match 'cat' or 'hat'\nconst string = 'cat in a hat';\n\n// lastIndex is always zero by default, so will\n// match from the start of the string:\nregexp.lastIndex; // => 0\nregexp.test(string); // => [\"cat\"]\n\n// lastIndex has been modified following the last\n// match but will not match anything as there is\n// no cat or hat at index 3:\nregexp.lastIndex; // => 3\nstring.match(regexp); // => null\n\n// Set lastIndex to 9 (index of \"hat\"):\nregexp.lastIndex = 9;\nstring.match(regexp); // => [\"hat\"]\n```"]