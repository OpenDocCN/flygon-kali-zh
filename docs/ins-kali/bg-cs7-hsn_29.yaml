- en: Querying XML Documents with LINQ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ查询XML文档
- en: In this chapter, you will learn how to combine LINQ and XML to make something
    more practical.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何将LINQ和XML结合起来，使其更加实用。
- en: Adding a text box and a button to HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向HTML添加文本框和按钮
- en: 'Crank up a project, and inside <html>, the first thing that you need to do
    is adding a `TextBox` control. To do this, go to View | Toolbox, type `tex` in
    the search field, and drag and drop the `TextBox` below the line that begins with
    `<form id=...`. Type `Enter Value:` at the beginning of the line, so that it looks
    like the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 启动项目，并在<html>内部，您需要做的第一件事是添加一个`TextBox`控件。要执行此操作，请转到视图|工具箱，在搜索字段中键入`tex`，然后将`TextBox`拖放到以`<form
    id=...`开头的行下面。在该行开头输入`输入值：`，使其看起来如下：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: So, you'll have a box; enter a value into the box, and then you'll get a result.
    You'll scan an XML document to select items that are above a certain value, $50
    or $60, for example. This is our objective; in other words, to make a searchable
    page.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您将有一个框；在框中输入一个值，然后您将获得一个结果。您将扫描XML文档以选择高于某个值的项目，例如$50或$60。这是我们的目标；换句话说，制作一个可搜索的页面。
- en: 'Next, you''ll insert a button into <html>. So again, go to Toolbox, type `but`
    in the search field, and drag and drop the `Button` control beneath the preceding
    line. Change the text on the `Button` control to say something easy such as `Search`,
    as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将在<html>中插入一个按钮。因此，再次转到工具箱，在搜索字段中键入`but`，然后将`Button`控件拖放到前一行下面。更改`Button`控件上的文本，例如更改为`搜索`：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, go to the Design view. It looks like the screenshot shown in *Figure
    29.3.1*:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，转到设计视图。它看起来像*图29.3.1*中显示的屏幕截图：
- en: '![](img/8a1d6202-62a3-4089-8c30-dbc79ad766f4.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a1d6202-62a3-4089-8c30-dbc79ad766f4.png)'
- en: 'Figure 29.3.1: The interface of this project in Design view'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '图29.3.1: 设计视图中该项目的界面'
- en: 'Double-click on the Search button. This brings up the `Default.aspx.cs` file.
    Delete the `Page_Load` stub. Collapse all of the comments above and below `using
    System;`—you don''t need them. The relevant portion of the starting code for this
    project should look like *Figure 29.3.2*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 双击搜索按钮。这将打开`Default.aspx.cs`文件。删除`Page_Load`存根。折叠`using System;`上下的所有注释—您不需要它们。该项目起始代码的相关部分应如*图29.3.2*所示：
- en: '![](img/a78690ee-4e08-4ad0-97d8-03c3fbf1b024.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a78690ee-4e08-4ad0-97d8-03c3fbf1b024.png)'
- en: 'Figure 29.3.2: The starting code for this project'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '图29.3.2: 该项目的起始代码'
- en: There's a bit of interesting code in this one—very practical. Do keep in mind
    that whenever you learn a programming language, the simple truth is that what
    you do in real life is far more challenging than anything that you will see in
    a book like this.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些有趣的代码—非常实用。请记住，无论您学习编程语言，现实生活中的挑战远比您在这本书中看到的任何内容都要困难得多。
- en: Adding namespaces
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命名空间
- en: 'Now let''s add some namespaces. Enter the following under `using System` near
    the top of the file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一些命名空间。在文件顶部附近的`using System`下面输入以下内容：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, we have a bridge between XML and LINQ—that's our objective here.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在XML和LINQ之间建立了一个桥梁—这是我们的目标。
- en: Clearing the output
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清除输出
- en: 'First, you need to clear label every time so that the output does not accumulate
    on the label. So, enter the following between a set of curly braces under the
    line that begins with `protected void Button1_Click...`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要每次清除标签，以便输出不会在标签上累积。因此，在以`protected void Button1_Click...`开头的行下面的大括号之间输入以下内容：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Building an element tree
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建元素树
- en: 'Next, we will make an element tree using the following syntax:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下语法创建一个元素树：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this line, `store` is the name of the tree. Basically, it holds information
    about products. Remember, if you want to know where something comes from, just
    hover your mouse over it. Thus, if you hover your mouse over `XElement` at the
    beginning of this line, the tooltip shows that it does not come from the XML namespace.
    Rather, it comes from the Xml.Linq namespace.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，`store`是树的名称。基本上，它保存有关产品的信息。请记住，如果您想知道某物来自何处，只需将鼠标悬停在其上。因此，如果您将鼠标悬停在此行开头的`XElement`上，工具提示将显示它不是来自XML命名空间。相反，它来自Xml.Linq命名空间。
- en: Next, you'll put other elements inside `store`. So, insert several blank lines
    right before the closing parentheses with the semicolon, and now you'll stack
    things inside it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将在`store`内放入其他元素。因此，在带有分号的括号关闭之前插入几行空行，现在您将在其中堆叠东西。
- en: Be sure to put the comma in after `store` in the preceding line. When you type
    the comma, take a look at the tooltip. Do you see where it says params object[]
    content? This means that there are a variable number of arguments there which
    you can specify to build up the tree. Remember, params means that you can specify
    a variable number of arguments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在前一行的`store`后面加上逗号。在键入逗号时，查看工具提示。您看到它说params object[] content吗？这意味着您可以指定要构建树的可变数量的参数。请记住，params表示您可以指定可变数量的参数。
- en: 'First, we''ll have a new element inside the store called `shoes`. So, indent
    the following line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在store内部添加一个名为`shoes`的新元素。因此，缩进以下行：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, indent the following lines further in:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，进一步缩进以下行：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, you say `new XAttribute`, just to show you that it's possible. The attribute
    will be the `price`, and the value will be, for example, `$65`. You close that
    attribute and close the element with a comma.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您说`new XAttribute`，只是为了向您表明这是可能的。属性将是`price`，值将是，例如，`$65`。您关闭该属性并使用逗号关闭元素。
- en: 'Now since you will repeat this, copy this line and paste it below, changing
    the brand name to `Stacy Adams` and the price to `$120`, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于您将重复此操作，请复制此行，并在下面粘贴它，将品牌名称更改为`Stacy Adams`，价格更改为`$120`，如下所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s repeat this one more time. So once again, copy this line and paste it
    underneath, changing the brand name to `Florsheim` and the price to `$90`, as
    follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再重复一次。因此，再次复制此行，并将其粘贴在下面，将品牌名称更改为`Florsheim`，价格更改为`$90`，如下所示：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that at the end of the last line here, you close with four parentheses
    and a semicolon. You must be extremely careful about this. You must make sure
    that everything is matching. So, you have a Store, and then you have a Shoes department,
    and within the Shoes department you carry different Brands: Nike, Stacy Adams,
    and Florsheim.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这里的最后一行，你用四个括号和一个分号结束。你必须非常小心。你必须确保一切匹配。所以，你有一个商店，然后你有一个鞋部门，在鞋部门内部你有不同的品牌：Nike、Stacy
    Adams和Florsheim。
- en: Saving the store XML file
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存商店XML文件
- en: 'Now, it''s good to be able to write this out to a file to confirm that the
    structure is interpreted in that it appears the way it''s supposed to look. So
    enter the following next, aligning the indent with the preceding `XElement store...`
    line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最好能将这些写入文件，以确认结构被解释为预期的样子。所以在前面的`XElement store...`行下面输入以下内容，对齐缩进：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `store.Save()` is a nice function that you can call directly. You save
    this to a file, in this case:`(@"c:\data \storefile.xml");`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`store.Save()`是一个很好的函数，你可以直接调用它。你可以将它保存到一个文件中，比如：`(@"c:\data \storefile.xml");`。
- en: Testing the program
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试程序
- en: 'Before doing anything else, let''s confirm that this will work as expected
    and that it generates a good-looking XML file. So, open it up in your browser
    and click on the Search button, as shown in *Figure 29.3.3*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何其他事情之前，让我们确认这将按预期工作，并且生成一个看起来不错的XML文件。所以，打开它在你的浏览器中，并点击搜索按钮，如*图29.3.3*所示：
- en: '![](img/c94572b2-1a34-4dee-bad8-2eb2d8a96003.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c94572b2-1a34-4dee-bad8-2eb2d8a96003.png)'
- en: 'Figure 29.3.3: The interface displayed when testing the program at present'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图29.3.3：目前测试程序时显示的界面
- en: Of course, nothing shows right now, because you haven't coded that part yet.
    However, if you do a directory listing of `c:\data`, there is the saved file,
    `storefile.xml`, as shown in *Figure 29.3.4:*
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，现在什么都没有显示，因为你还没有编写那部分代码。但是，如果你在`c:\data`目录下列出目录，就会看到保存的文件`storefile.xml`，如*图29.3.4*所示：
- en: '![](img/b983eeca-858f-4782-8a39-57a67a8b28c3.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b983eeca-858f-4782-8a39-57a67a8b28c3.png)'
- en: 'Figure 29.3.4: The file storefile.xml is saved in the c:\data directory'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图29.3.4：文件storefile.xml保存在c:\data目录中
- en: 'If you open this file in Notepad by typing `notepad.exe` `storefile.xml` at
    the `c:\data>` prompt, you will see the result shown in *Figure 29.3.5*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`c:\data>`提示符下键入`notepad.exe storefile.xml`，你将在记事本中看到*图29.3.5*中显示的结果：
- en: '![](img/86092640-cef3-4352-8a68-08262058ca10.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86092640-cef3-4352-8a68-08262058ca10.png)'
- en: 'Figure 29.3.5: The file storefile.xml opened in Notepad'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图29.3.5：在记事本中打开的文件storefile.xml
- en: 'This looks very good. You have a `store` element, and then within the `store`
    element you have `shoes`, and within `shoes` you have brands `Nike`, `Stacy Adams`,
    and `Florsheim`, and each shoe carries a price: $65, $120, and $90, respectively.
    So, it looks like a good file, and it is sufficient for our purposes. (In real
    life, believe me that these things are a lot more complicated.)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很不错。你有一个`store`元素，然后在`store`元素内部有`shoes`，在`shoes`内部有品牌`Nike`、`Stacy Adams`和`Florsheim`，每双鞋的价格分别是：$65、$120和$90。所以，这看起来是一个很好的文件，对我们的目的来说已经足够了。（在现实生活中，相信我，这些事情要复杂得多。）
- en: Searching for items that meet a specific criteria
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索符合特定条件的项目
- en: 'Next, enter the following beneath the line that began with `store.Save...`,
    to search for shoes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，在以`store.Save...`开头的行下面输入以下内容，以搜索鞋子：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `var shoeSearch` is a combination of LINQ and XML.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`var shoeSearch`是LINQ和XML的组合。
- en: 'Next, type `where (decimal)`, which is used to convert to a decimal value,
    and that the price is greater than a value entered by the user:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入`where (decimal)`，用于转换为十进制值，并且价格大于用户输入的值：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Selecting among the items that meet the search criteria
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从符合搜索条件的项目中进行选择
- en: 'Once those shoes are found, you can select among them, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到这些鞋子，你可以从中选择：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you hover your mouse over the first use of `Descendants` in the preceding
    line, it tells you that it returns IEnumerable. The tooltip says that it Returns
    a filtered collection of the descendant elements for this document or element,
    in document order.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标悬停在前面使用`Descendants`的第一次上面，它会告诉你它返回IEnumerable。工具提示说它返回此文档或元素的后代元素的过滤集合，按文档顺序排列。
- en: Also, if you hover your mouse over the second use of `Descendants`, you'll see
    that it goes by the brand. Once you're there at that level, then you can, for
    example, hover your mouse over the `price` attribute in the preceding line that
    begins with `where...`, and then compare this attribute against the value specified
    by the user. So, it's as if you're traversing it from the outside to the inside
    until you get to the price attribute and then, at that stage, you make the comparison
    of that value to the one entered by the user.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你将鼠标悬停在第二次使用`Descendants`上，你会看到它是按品牌进行的。一旦你到达那个级别，你可以，例如，将鼠标悬停在前面以`where...`开头的行中的`price`属性上，然后将这个属性与用户指定的值进行比较。所以，就好像你从外部到内部遍历，直到你到达价格属性，然后在那个阶段，你将该值与用户输入的值进行比较。
- en: Displaying the results
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示结果
- en: 'Enter the following line next to display all of the shoe brands and prices
    that were selected by the search:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来输入以下行，以显示搜索选择的所有鞋子品牌和价格：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, enter the following between a set of curly braces beneath the preceding
    line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在前面的行下面的一对大括号之间输入以下内容：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this line, there could be multiple values, so you append. Note that we place
    the `<br>` tags to push each result down to the next line. To display the price,
    you say `(decimal)` to convert to a decimal value, and then after `shoeBrand.Attribute("price")`,
    you convert that to a currency format with `:C`. So that's all of the code. It's
    very important to type all of this in. The best way to learn is by doing, not
    simply by opening a previously prepared file and running it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，可能有多个值，所以你要追加。请注意，我们使用`<br>`标签将每个结果推到下一行。要显示价格，你要说`(decimal)`来转换为十进制值，然后在`shoeBrand.Attribute("price")`之后，你用`:C`将其转换为货币格式。这就是所有的代码。将所有这些都打出来非常重要。学习的最佳方式是通过实践，而不仅仅是打开一个事先准备好的文件并运行它。
- en: Running the program
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now open your browser one last time, input a value of, say, `45`, and click
    on the Search button. It should return all of the shoes, right, because the prices
    are all higher than that, as shown in *Figure 29.3.6*:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次打开浏览器，输入一个值，比如`45`，然后点击搜索按钮。它应该返回所有的鞋子，因为价格都高于这个值，如*图29.3.6*所示：
- en: '![](img/dc50b72e-0d4a-4b7d-b400-9eac7a436285.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc50b72e-0d4a-4b7d-b400-9eac7a436285.png)'
- en: 'Figure 29.3.6: All of the shoes and prices are displayed, as the value entered
    is less than the price of any of the shoes'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图29.3.6：显示所有鞋子和价格，因为输入的值小于任何鞋子的价格
- en: 'Now enter `100` as the value, and click on the Search button again. In this
    case, it only returns the Stacy Adams shoe, which is priced at $120, as shown
    in *Figure 29.3.7*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入`100`作为值，然后再次点击搜索按钮。在这种情况下，它只返回价格为120美元的Stacy Adams鞋子，如*图29.3.7*所示：
- en: '![](img/3af00975-0326-44b6-8d75-fde770b5b20e.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af00975-0326-44b6-8d75-fde770b5b20e.png)'
- en: 'Figure 29.3.7: Only the Stacy Adams shoe is returned, as it is priced above
    $100'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图29.3.7：只返回Stacy Adams鞋子，因为它的价格超过100美元
- en: 'Let''s do one more. Enter `85`, and click on the Search button once again.
    As shown in *Figure 29.3.8*, it returns the Stacy Adams and Florsheim shoes, as
    both of these are priced at $85 or above:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一个。再输入`85`，然后再次点击搜索按钮。如*图29.3.8*所示，它返回Stacy Adams和Florsheim鞋子，因为这两者的价格都在85美元或以上：
- en: '![](img/40abe797-ce80-4c97-98e0-c2596cf071e1.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40abe797-ce80-4c97-98e0-c2596cf071e1.png)'
- en: 'Figure 29.3.8: the Stacy Adams and Florsheim shoes are returned, as both are
    priced at $85 or more'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图29.3.8：返回Stacy Adams和Florsheim鞋子，因为两者的价格都在85美元或以上
- en: There you go. So that's working as expected. We also generated a beautiful-looking
    XML file using the entire `XElement` construction that you wrote in order for
    this program to work correctly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。一切都按预期运行。我们还使用了你编写的整个`XElement`构造来生成了一个漂亮的XML文件，以便这个程序能够正确运行。
- en: Chapter review
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Default.aspx.cs`文件的完整版本，包括注释，如下所示：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to combine LINQ and XML to make something more
    practical. You built an element tree and wrote the code to save the store XML
    file, to search for items that met a specific criterion, and to select among the
    items found those that met the search criteria.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何结合LINQ和XML来做一些更实际的事情。你构建了一个元素树，并编写了代码来保存商店的XML文件，搜索符合特定条件的项目，并从找到的项目中选择符合搜索条件的项目。
