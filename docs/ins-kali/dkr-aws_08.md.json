["```\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: Todobackend Application\n\nParameters:\n  ApplicationDesiredCount:\n    Type: Number\n    Description: Desired EC2 instance count\n  ApplicationImageId:\n    Type: String\n    Description: ECS Amazon Machine Image (AMI) ID\n  ApplicationSubnets:\n    Type: List<AWS::EC2::Subnet::Id>\n    Description: Target subnets for EC2 instances\n  DatabasePassword:\n Type: String\n Description: Database password\n NoEcho: \"true\"\n  VpcId:\n    Type: AWS::EC2::VPC::Id\n    Description: Target VPC\n\nResources:\n  ApplicationDatabase:\n Type: AWS::RDS::DBInstance\n Properties:\n Engine: MySQL\n EngineVersion: 5.7\n DBInstanceClass: db.t2.micro\n AllocatedStorage: 10\n StorageType: gp2\n MasterUsername: todobackend\n MasterUserPassword: !Ref DatabasePassword\n DBName: todobackend\n VPCSecurityGroups:\n - !Ref ApplicationDatabaseSecurityGroup\n DBSubnetGroupName: !Ref ApplicationDatabaseSubnetGroup\n MultiAZ: \"false\"\n AvailabilityZone: !Sub ${AWS::Region}a\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-db  ApplicationAutoscalingSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n...\n...\n```", "```\n...\n\nResources:\n  ApplicationDatabase:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: MySQL\n      EngineVersion: 5.7\n      DBInstanceClass: db.t2.micro\n      AllocatedStorage: 10\n      StorageType: gp2\n      MasterUsername: todobackend\n      MasterUserPassword:\n        Ref: DatabasePassword\n      DBName: todobackend\n      VPCSecurityGroups:\n        - !Ref ApplicationDatabaseSecurityGroup\n      DBSubnetGroupName: !Ref ApplicationDatabaseSubnetGroup\n      MultiAZ: \"false\"\n      AvailabilityZone: !Sub ${AWS::Region}a\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-db\n ApplicationDatabaseSubnetGroup:\n    Type: AWS::RDS::DBSubnetGroup\n    Properties:\n      DBSubnetGroupDescription: Application Database Subnet Group\n      SubnetIds: !Ref ApplicationSubnets\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-db-subnet-group\n  ApplicationDatabaseSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: !Sub ${AWS::StackName} Application Database Security Group\n      VpcId: !Ref VpcId\n      SecurityGroupEgress:\n        - IpProtocol: icmp\n          FromPort: -1\n          ToPort: -1\n          CidrIp: 192.0.2.0/32\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-db-sg\n  ApplicationToApplicationDatabaseIngress:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      IpProtocol: tcp\n      FromPort: 3306\n      ToPort: 3306\n      GroupId: !Ref ApplicationDatabaseSecurityGroup\n      SourceSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup\n  ApplicationToApplicationDatabaseEgress:\n    Type: AWS::EC2::SecurityGroupEgress\n    Properties:\n      IpProtocol: tcp\n      FromPort: 3306\n      ToPort: 3306\n      GroupId: !Ref ApplicationAutoscalingSecurityGroup\n      DestinationSecurityGroupId: !Ref ApplicationDatabaseSecurityGroup\n...\n...\n```", "```\nApplicationDesiredCount=1\nApplicationImageId=ami-ec957491\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\nDatabasePassword=my-super-secret-password\nVpcId=vpc-f8233a80\n```", "```\n> export AWS_PROFILE=docker-in-aws\n> aws cloudformation deploy --template-file stack.yml \\\n --stack-name todobackend --parameter-overrides $(cat dev.cfg) \\\n --capabilities CAPABILITY_NAMED_IAM\nEnter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:\n```", "```\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - todobackend\n> aws cloudformation describe-stack-resource --stack-name todobackend \\\n    --logical-resource-id ApplicationDatabase\n{\n    \"StackResourceDetail\": {\n        \"StackName\": \"todobackend\",\n        \"StackId\": \"arn:aws:cloudformation:us-east-1:385605022855:stack/todobackend/297933f0-37fe-11e8-82e0-503f23fb55fe\",\n        \"LogicalResourceId\": \"ApplicationDatabase\",\n \"PhysicalResourceId\": \"ta10udhxgd7s4gf\",\n        \"ResourceType\": \"AWS::RDS::DBInstance\",\n        \"LastUpdatedTimestamp\": \"2018-04-04T12:12:13.265Z\",\n        \"ResourceStatus\": \"CREATE_COMPLETE\",\n        \"Metadata\": \"{}\"\n    }\n}\n> aws rds describe-db-instances --db-instance-identifier ta10udhxgd7s4gf\n{\n    \"DBInstances\": [\n        {\n            \"DBInstanceIdentifier\": \"ta10udhxgd7s4gf\",\n            \"DBInstanceClass\": \"db.t2.micro\",\n            \"Engine\": \"mysql\",\n            \"DBInstanceStatus\": \"available\",\n            \"MasterUsername\": \"todobackend\",\n            \"DBName\": \"todobackend\",\n            \"Endpoint\": {\n                \"Address\": \"ta10udhxgd7s4gf.cz8cu8hmqtu1.us-east-1.rds.amazonaws.com\",\n                \"Port\": 3306,\n                \"HostedZoneId\": \"Z2R2ITUGPM61AM\"\n            }\n...\n...\n```", "```\n...\n...\nResources:\n ApplicationLoadBalancer:\n Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n Properties:\n Scheme: internet-facing\n Subnets: !Ref ApplicationSubnets\n SecurityGroups:\n - !Ref ApplicationLoadBalancerSecurityGroup\n LoadBalancerAttributes:\n - Key: idle_timeout.timeout_seconds\n Value : 30\n Tags:\n - Key: Name\n Value: !Sub ${AWS::StackName}-alb\n  ApplicationDatabase:\n    Type: AWS::RDS::DBInstance\n...\n...\n```", "```\n...\n...\nResources:\n  ...\n  ...\nOutputs:\n PublicURL:\n Description: Public DNS name of Application Load Balancer\n Value: !Sub ${ApplicationLoadBalancer.DNSName}\n\n```", "```\n...\n...\nResources:\n  ApplicationLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Scheme: internet-facing\n      Subnets: !Ref ApplicationSubnets\n      SecurityGroups:\n        - !Ref ApplicationLoadBalancerSecurityGroup\n      LoadBalancerAttributes:\n        - Key: idle_timeout.timeout_seconds\n          Value : 30\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-alb\n  ApplicationLoadBalancerSecurityGroup:\n Type: AWS::EC2::SecurityGroup\n Properties:\n GroupDescription: Application Load Balancer Security Group\n VpcId: !Ref VpcId\n SecurityGroupIngress:\n - IpProtocol: tcp\n FromPort: 80\n ToPort: 80\n CidrIp: 0.0.0.0/0\n Tags:\n - Key: Name\n Value: \n Fn::Sub: ${AWS::StackName}-alb-sg  ApplicationLoadBalancerToApplicationIngress:\n Type: AWS::EC2::SecurityGroupIngress\n Properties:\n IpProtocol: tcp\n FromPort: 32768\n ToPort: 60999\n GroupId: !Ref ApplicationAutoscalingSecurityGroup\n SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup\n ApplicationLoadBalancerToApplicationEgress:\n Type: AWS::EC2::SecurityGroupEgress\n Properties:\n IpProtocol: tcp\n FromPort: 32768\n ToPort: 60999\n GroupId: !Ref ApplicationLoadBalancerSecurityGroup\n DestinationSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup\n  ApplicationDatabase:\n    Type: AWS::RDS::DBInstance\n...\n...\n```", "```\n...\n...\nResources:\n  ApplicationLoadBalancerHttpListener:\n Type: AWS::ElasticLoadBalancingV2::Listener\n Properties:\n LoadBalancerArn: !Ref ApplicationLoadBalancer\n Protocol: HTTP\n Port: 80\n DefaultActions:\n - TargetGroupArn: !Ref ApplicationServiceTargetGroup\n Type: forward\n  ApplicationLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Scheme: internet-facing\n      Subnets: !Ref ApplicationSubnets\n      SecurityGroups:\n        - !Ref ApplicationLoadBalancerSecurityGroup\n      LoadBalancerAttributes:\n        - Key: idle_timeout.timeout_seconds\n          Value : 30\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-alb\n...\n...\n```", "```\n...\n...\nResources:\n  ApplicationServiceTargetGroup:\n Type: AWS::ElasticLoadBalancingV2::TargetGroup\n Properties:\n Protocol: HTTP\n Port: 8000\n VpcId: !Ref VpcId\n TargetGroupAttributes:\n - Key: deregistration_delay.timeout_seconds\n Value: 30\n  ApplicationLoadBalancerHttpListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      LoadBalancerArn: !Ref ApplicationLoadBalancer\n      Protocol: HTTP\n      Port: 80\n      DefaultActions:\n        - TargetGroupArn: !Ref ApplicationServiceTargetGroup\n          Type: forward\n  ApplicationLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n...\n...\n```", "```\n> aws cloudformation describe-stacks --stack-name todobackend --query Stacks[].Outputs[]\n[\n    {\n        \"OutputKey\": \"PublicURL\",\n        \"OutputValue\": \"todob-Appli-5SV5J3NC6AAI-2078461159.us-east-1.elb.amazonaws.com\",\n        \"Description\": \"Public DNS name of Application Load Balancer\"\n    }\n]\n> curl todob-Appli-5SV5J3NC6AAI-2078461159.us-east-1.elb.amazonaws.com\n<html>\n<head><title>503 Service Temporarily Unavailable</title></head>\n<body bgcolor=\"white\">\n<center><h1>503 Service Temporarily Unavailable</h1></center>\n</body>\n</html>\n```", "```\nParameters:\n  ...\n  ...\n  ApplicationImageId:\n    Type: String\n    Description: ECS Amazon Machine Image (AMI) ID\n ApplicationImageTag:\n Type: String\n Description: Application Docker Image Tag\n Default: latest  ApplicationSubnets:\n    Type: List<AWS::EC2::Subnet::Id>\n    Description: Target subnets for EC2 instances\n ...\n  ... \nResources:\n  ApplicationTaskDefinition:\n Type: AWS::ECS::TaskDefinition\n Properties:\n Family: todobackend      Volumes:\n - Name: public          Host:\n SourcePath: /data/public\n ContainerDefinitions:        - Name: todobackend\n Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}\n MemoryReservation: 395\n Cpu: 245\n MountPoints:\n - SourceVolume: public\n ContainerPath: /public\n Environment:\n            - Name: DJANGO_SETTINGS_MODULE\n Value: todobackend.settings_release\n - Name: MYSQL_HOST\n Value: !Sub ${ApplicationDatabase.Endpoint.Address}\n - Name: MYSQL_USER\n Value: todobackend\n - Name: MYSQL_PASSWORD\n Value: !Ref DatabasePassword\n - Name: MYSQL_DATABASE\n Value: todobackend            - Name: SECRET_KEY\n Value: some-random-secret-should-be-here\n Command: \n - uwsgi\n - --http=0.0.0.0:8000\n - --module=todobackend.wsgi\n - --master\n - --die-on-term\n - --processes=4\n - --threads=2\n - --check-static=/public\n PortMappings:\n - ContainerPort: 8000\n              HostPort: 0\n LogConfiguration:\n LogDriver: awslogs\n Options:\n awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend\n awslogs-region: !Ref AWS::Region\n awslogs-stream-prefix: docker\n - Name: collectstatic\n          Essential: false\n Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}\n MemoryReservation: 5\n Cpu: 5          MountPoints:\n - SourceVolume: public\n              ContainerPath: /public\n Environment:\n - Name: DJANGO_SETTINGS_MODULE\n              Value: todobackend.settings_release\n Command:\n - python3\n            - manage.py\n            - collectstatic\n            - --no-input\n LogConfiguration:\n LogDriver: awslogs\n Options:\n awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend\n awslogs-region: !Ref AWS::Region\n awslogs-stream-prefix: docker  ApplicationLogGroup:\n Type: AWS::Logs::LogGroup\n Properties:\n LogGroupName: !Sub /${AWS::StackName}/ecs/todobackend\n RetentionInDays: 7\n  ApplicationServiceTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n...\n...\n```", "```\nversion: '2.3'\n\nvolumes:\n  public:\n    driver: local\n\nservices:\n  ...\n  ...\n  app:\n    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}\n    extends:\n      service: release\n    depends_on:\n      db:\n        condition: service_healthy\n    volumes:\n      - public:/public\n    healthcheck:\n      test: curl -fs localhost:8000\n    ports:\n      - 8000\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n      - --die-on-term\n      - --processes=4\n      - --threads=2\n      - --check-static=/public\n  acceptance:\n    extends:\n      service: release\n    depends_on:\n      app:\n        condition: service_healthy\n    environment:\n      APP_URL: http://app:8000\n    command:\n      - bats \n      - acceptance.bats\n  migrate:\n    extends:\n      service: release\n    depends_on:\n      db:\n        condition: service_healthy\n    command:\n      - python3\n      - manage.py\n      - migrate\n      - --no-input\n  ...\n  ...\n```", "```\n...\n...\nrelease:\n  docker-compose up --abort-on-container-exit migrate\n docker-compose run app python3 manage.py collectstatic --no-input\n  docker-compose up --abort-on-container-exit acceptance\n  @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g)\n...\n...\n```", "```\n> aws ecs describe-task-definition --task-definition todobackend\n{\n    \"taskDefinition\": {\n        \"taskDefinitionArn\": \"arn:aws:ecs:us-east-1:385605022855:task-definition/todobackend:1\",\n        \"family\": \"todobackend\",\n        \"revision\": 1,\n        \"volumes\": [\n            {\n                \"name\": \"public\",\n                \"host\": {\n                    \"sourcePath\": \"/data/public\"\n                }\n            }\n        ],\n        \"containerDefinitions\": [\n            {\n                \"name\": \"todobackend\",\n                \"image\": \"385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest\",\n                \"cpu\": 245,\n                \"memoryReservation\": 395,\n...\n...\n```", "```\n...\n...\nResources:\n  ApplicationService:\n Type: AWS::ECS::Service\n DependsOn:\n      - ApplicationAutoscaling\n      - ApplicationLogGroup\n      - ApplicationLoadBalancerHttpListener\n    Properties:\n      TaskDefinition: !Ref ApplicationTaskDefinition\n      Cluster: !Ref ApplicationCluster\n      DesiredCount: !Ref ApplicationDesiredCount\n      LoadBalancers:\n        - ContainerName: todobackend\n          ContainerPort: 8000\n          TargetGroupArn: !Ref ApplicationServiceTargetGroup\n      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS \n```", "```\n DeploymentConfiguration:\n MaximumPercent: 200\n MinimumHealthyPercent: 100\n  ApplicationTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n...\n...\n```", "```\nApplicationDesiredCount=1\nApplicationImageId=ami-ec957491\nApplicationImageTag=97e4abf\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\nVpcId=vpc-f8233a80\n```", "```\n...\n...\nResources:\n EcsTaskRunner:\n Type: AWS::Lambda::Function\n    DependsOn:\n - EcsTaskRunnerLogGroup\n Properties:\n FunctionName: !Sub ${AWS::StackName}-ecsTasks\n Description: !Sub ${AWS::StackName} ECS Task Runner\n Handler: index.handler\n MemorySize: 128\n Runtime: python3.6\n Timeout: 300\n      Role: !Sub ${EcsTaskRunnerRole.Arn}\n Code:\n ZipFile: |\n import cfnresponse\n import boto3\n\n client = boto3.client('ecs')\n\n def handler(event, context):\n try:\n              print(\"Received event %s\" % event)\n              if event['RequestType'] == 'Delete':\n                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])\n                return\n              tasks = client.run_task(\n                cluster=event['ResourceProperties']['Cluster'],\n                taskDefinition=event['ResourceProperties']['TaskDefinition'],\n                overrides=event['ResourceProperties'].get('Overrides',{}),\n                count=1,\n                startedBy=event['RequestId']\n              )\n              task = tasks['tasks'][0]['taskArn']\n              print(\"Started ECS task %s\" % task)\n              waiter = client.get_waiter('tasks_stopped')\n              waiter.wait(\n                cluster=event['ResourceProperties']['Cluster'],\n                tasks=[task],\n              )\n              result = client.describe_tasks(\n                cluster=event['ResourceProperties']['Cluster'],\n                tasks=[task]\n              )\n              exitCode = result['tasks'][0]['containers'][0]['exitCode']\n              if exitCode > 0:\n                print(\"ECS task %s failed with exit code %s\" % (task, exitCode))\n                cfnresponse.send(event, context, cfnresponse.FAILED, {}, task)\n              else:\n                print(\"ECS task %s completed successfully\" % task)\n                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, task)\n            except Exception as e:\n              print(\"A failure occurred with exception %s\" % e)\n              cfnresponse.send(event, context, cfnresponse.FAILED, {})\n EcsTaskRunnerRole:\n Type: AWS::IAM::Role\n Properties:\n AssumeRolePolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Effect: Allow\n Principal:\n Service: lambda.amazonaws.com\n Action:\n - sts:AssumeRole\n Policies:\n - PolicyName: EcsTaskRunnerPermissions\n PolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Sid: EcsTasks\n Effect: Allow\n Action:\n - ecs:DescribeTasks\n - ecs:ListTasks\n - ecs:RunTask\n Resource: \"*\"\n Condition:\n ArnEquals:\n ecs:cluster: !Sub ${ApplicationCluster.Arn}\n - Sid: ManageLambdaLogs\n Effect: Allow\n Action:\n - logs:CreateLogStream\n - logs:PutLogEvents\n Resource: !Sub ${EcsTaskRunnerLogGroup.Arn}\n EcsTaskRunnerLogGroup:\n Type: AWS::Logs::LogGroup\n Properties:\n LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ecsTasks\n RetentionInDays: 7\n  ApplicationService:\n    Type: AWS::ECS::Service\n...\n...\n```", "```\n# Generates an appropriate CloudFormation response and posts to the pre-signed S3 URL\nimport cfnresponse\n# Imports the AWS Python SDK (boto3) for interacting with the ECS service\nimport boto3\n\n# Create a client for interacting with the ECS service\nclient = boto3.client('ecs')\n\n# Lambda functions require a handler function that is passed an event and context object\n# The event object contains the CloudFormation custom resource event\n# The context object contains runtime information about the Lambda function\ndef handler(event, context):\n  # Wrap the code in a try/catch block to ensure any exceptions generate a failure\n  try:\n    print(\"Received event %s\" % event)\n    # If the request is to Delete the resource, simply return success\n    if event['RequestType'] == 'Delete':\n      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event.get('PhysicalResourceId'))\n      return\n    # Run the ECS task\n    # http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#ECS.Client.run_task\n    # Requires 'Cluster', 'TaskDefinition' and optional 'Overrides' custom resource properties\n    tasks = client.run_task(\n      cluster=event['ResourceProperties']['Cluster'],\n      taskDefinition=event['ResourceProperties']['TaskDefinition'],\n      overrides=event['ResourceProperties'].get('Overrides',{}),\n      count=1,\n      startedBy=event['RequestId']\n    )\n    # Extract the ECS task ARN from the return value from the run_task call\n    task = tasks['tasks'][0]['taskArn']\n    print(\"Started ECS task %s\" % task)\n\n    # Creates a waiter object that polls and waits for ECS tasks to reached a stopped state\n    # http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#waiters\n    waiter = client.get_waiter('tasks_stopped')\n    # Wait for the task ARN that was run earlier to stop\n    waiter.wait(\n      cluster=event['ResourceProperties']['Cluster'],\n      tasks=[task],\n    )\n    # After the task has stopped, get the status of the task\n    # http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#ECS.Client.describe_tasks\n    result = client.describe_tasks(\n      cluster=event['ResourceProperties']['Cluster'],\n      tasks=[task]\n    )\n    # Get the exit code of the container that ran\n    exitCode = result['tasks'][0]['containers'][0]['exitCode']\n    # Return failure for non-zero exit code, otherwise return success\n    # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html for more details on cfnresponse module\n    if exitCode > 0:\n      print(\"ECS task %s failed with exit code %s\" % (task, exitCode))\n      cfnresponse.send(event, context, cfnresponse.FAILED, {}, task)\n```", "```\nelse:\n      print(\"ECS task %s completed successfully\" % task)\n      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, task)\n  except Exception as e:\n    print(\"A failure occurred with exception %s\" % e)\n    cfnresponse.send(event, context, cfnresponse.FAILED, {})\n```", "```\n...\n...\nResources:\n MigrateTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n Properties:\n Family: todobackend-migrate\n ContainerDefinitions:\n - Name: migrate\n Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}\n MemoryReservation: 5\n Cpu: 5\n Environment:\n - Name: DJANGO_SETTINGS_MODULE\n Value: todobackend.settings_release\n - Name: MYSQL_HOST\n Value: !Sub ${ApplicationDatabase.Endpoint.Address}\n - Name: MYSQL_USER\n Value: todobackend\n - Name: MYSQL_PASSWORD\n Value: !Ref DatabasePassword\n - Name: MYSQL_DATABASE\n Value: todobackend\n```", "```\nCommand: \n - python3\n - manage.py\n - migrate\n - --no-input\n LogConfiguration:\n LogDriver: awslogs\n Options:\n awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend\n awslogs-region: !Ref AWS::Region\n awslogs-stream-prefix: docker\n  EcsTaskRunner:\n    Type: AWS::Lambda::Function\n...\n...\n\n```", "```\n...\n...\nResources:\n MigrateTask:\n Type: AWS::CloudFormation::CustomResource\n DependsOn:\n - ApplicationAutoscaling\n - ApplicationDatabase\n Properties:\n ServiceToken: !Sub ${EcsTaskRunner.Arn}\n Cluster: !Ref ApplicationCluster\n TaskDefinition: !Ref MigrateTaskDefinition MigrateTaskDefinition:\n     Type: AWS::ECS::TaskDefinition\n   ...\n   ...\n   ApplicationService:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - ApplicationAutoscaling\n      - ApplicationLogGroup\n      - ApplicationLoadBalancerHttpListener\n - MigrateTask\n```", "```\nProperties:\n...\n...\n```"]