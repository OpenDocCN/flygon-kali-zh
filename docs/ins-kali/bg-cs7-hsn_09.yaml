- en: C# with LINQ and Built-In Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ和内置类型的C#
- en: In this chapter, we will talk about the basics of LINQ. You will learn how to
    use LINQ or Language Integrated Query. It's a powerful way of manipulating data
    directly within your C# code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论LINQ的基础知识。你将学习如何使用LINQ或语言集成查询。这是一种在C#代码中直接操作数据的强大方式。
- en: Adding a Show Values button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加一个显示值按钮
- en: Bring up a project, and below the line beginning with `<form id=...` in the
    <html>, we will place a button. Change the text on the button to something different,
    for example, Show Values.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，在`<form id=...`开头的行下面，在<html>中放置一个按钮。更改按钮上的文本为不同的内容，例如，显示值。
- en: 'Now switch to the Design view, and double-click on the Show Values button.
    This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. We don''t
    need it. The relevant portion of the starting code for this project should look
    like *Figure 9.4.1*:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在切换到设计视图，并双击显示值按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。我们不需要它。该项目的起始代码的相关部分应该如*图9.4.1*所示：
- en: '![](img/aaebe79d-7bbb-4d49-a1ca-e6ddafe87957.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aaebe79d-7bbb-4d49-a1ca-e6ddafe87957.png)'
- en: 'Figure 9.4.1: The starting code section for this project'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4.1：该项目的起始代码部分
- en: We'll work with a little bit of code in this chapter, but it's sequential from
    top to bottom.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中使用一些代码，但是它是从上到下顺序执行的。
- en: Adding namespaces
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命名空间
- en: 'The first thing to do is to add two new namespaces; so, enter the following
    after `using System`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是添加两个新的命名空间；因此，在`using System`之后输入以下内容：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: LINQ stands for Language Integrated Query, and `using System.Collections .Generic`
    is for working with lists. These are the two new namespaces that we are using.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: LINQ代表语言集成查询，`using System.Collections .Generic`用于处理列表。这是我们正在使用的两个新命名空间。
- en: Working with the IEnumerable generic interface
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IEnumerable通用接口
- en: 'Next, in between the set of curly braces beneath the line beginning with `protected
    void Button1_Click...`, the first thing that we will do is create an array of
    names. For this, enter the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在以`protected void Button1_Click...`开头的行下面的花括号之间，我们将首先创建一个名字数组。为此，请输入以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's name it `names`, and then say, create a `new string` array. Then, to specify
    the initializer list, we enter a series of names in quotes, and close this with
    a semicolon.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称其为`names`，然后说，创建一个`new string`数组。然后，为了指定初始化列表，我们输入一系列用引号括起来的名字，并以分号结束。
- en: 'Now notice that, on the left-hand side, we have `IEnumerable`. This is a generic
    interface. As you can see, the `new string` array in this line can be created
    this way because it''s possible to take an array then step through it, so that
    each entry inside the array is a string. So, it''s `IEnumerable`: we can list
    values within it, and each value to be listed is a string. To enumerate means
    to list.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在注意一下，左侧有`IEnumerable`。这是一个通用接口。正如你所看到的，这一行中的`new string`数组可以通过这种方式创建，因为可以取一个数组然后逐个遍历，这样数组中的每个条目都是一个字符串。所以，它是`IEnumerable`：我们可以在其中列出值，要列出的每个值都是一个字符串。枚举意味着列举。
- en: Converting an array to a list of integers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数组转换为整数列表
- en: 'Next, enter the following below this line:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在这行下面输入以下内容：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To make a list of integers, we say `lst = new int[]`. Then we specify the initializer
    list and the values shown here. It doesn't matter what values you use. I'll show
    you some of the methods. Of course, as you can imagine, there are many of them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个整数列表，我们说`lst = new int[]`。然后我们指定初始化列表和这里显示的值。你使用什么值都无所谓。我会向你展示一些方法。当然，你可以想象到，有很多方法。
- en: Now, note that you could not stop writing this line after the array. If you
    did, the pop-up tip would say Cannot implicitly convert type 'int[]' System.Collections.Generic.List<int>';
    so you have to add `.ToList()`. You can convert an array to a list of integers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请注意，你不能在数组之后停止编写这行。如果你这样做了，弹出提示会说无法隐式转换类型'int[]'为'System.Collections.Generic.List<int>';因此你必须添加`.ToList()`。你可以将一个数组转换为整数列表。
- en: Determining the values in a collection
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定集合中的值
- en: 'Now that we have collections of items to go through, we can do that. To do
    this, enter the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了要遍历的项目集合，我们可以这样做。为此，请输入以下内容：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we first operate on the list of numerical values, so we say `valuesMoreThanTen`.
    To make this happen, you enter the name of the list, which is `lst`. Notice in
    the pop-up tip all of the functions that have become available. One of them is
    `Where<>`. After you select `Where<>`, you can specify a condition that applies,
    in our case, where `x` is such that `x` is greater than `10`, or `(x => x > 10)`,
    and close this with a semicolon.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先操作数字值列表，所以我们说`valuesMoreThanTen`。为了实现这一点，你输入列表的名称，即`lst`。注意弹出提示中出现的所有函数。其中之一是`Where<>`。在选择`Where<>`之后，你可以指定一个条件，即在我们的情况下，当`x`大于`10`时，或者`(x
    => x > 10)`，并以分号结束。
- en: 'If you hover your mouse over `Where`, and look where it says `IEnumerable<int>`,
    it says that it returns, in other words, an `IEnumerable` construct, which we
    can iterate through with a `foreach` loop, for example. Further, it says `(Func<int,bool>...`
    and then there is a `predicate` delegate. So, we will take each value and we''ll
    basically apply some action to it. We''ll check whether some condition holds:
    either the condition holds on it or it doesn''t.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标悬停在`Where`上，并查看它所说的`IEnumerable<int>`，它表示返回的是一个`IEnumerable`结构，我们可以通过`foreach`循环进行迭代。此外，它说`(Func<int,bool>...`，然后是一个`predicate`委托。所以，我们将取每个值，然后基本上对其应用一些操作。我们将检查某个条件是否成立：条件对它成立或不成立。
- en: 'As you can see, we basically have LINQ, and then we have inside that, a Lambda
    expression. So, to make use of it, you''ll enter the following next:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们基本上有了LINQ，然后在其中有一个Lambda表达式。因此，要使用它，你将在下面输入以下内容：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Converting the values back to a list
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将值转换回列表
- en: After `valuesMoreThanTen`, you would like to be able to use a `foreach` loop.
    To do this, you've got to convert this back to a list because, remember, `IEnumerable`
    is not a list. That's why the `foreach` loop doesn't show if you typed it right
    after the `.` (dot) after `valuesMoreThanTen`. You convert it to a list, and then
    `foreach` shows. Now you can again display the values; so in `foreach x`, you'll
    take the `x` value and display it in a label as shown in the preceding line of
    code. This line now will display each `x` value from the `valuesMoreThanTen` list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在`valuesMoreThanTen`之后，你想要使用`foreach`循环。为了做到这一点，你必须将其转换回列表，因为记住，`IEnumerable`不是一个列表。这就是为什么如果你在`valuesMoreThanTen`的`.`（点）后面直接输入`foreach`循环，它不会显示出来。你将它转换为列表，然后`foreach`就会显示出来。现在你可以再次显示这些值；所以在`foreach
    x`中，你将取出`x`的值，并在标签中显示它，就像在前一行代码中所示的那样。这一行现在将显示`valuesMoreThanTen`列表中的每个`x`值。
- en: 'Now, you can tell just by examining it that `12`, `25`, and `54` should print.
    That''s the first thing. Now, let''s also display a horizontal line below this
    line. So, enter the following next:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过检查它来确定`12`、`25`和`54`应该打印出来。这是第一件事。现在，让我们在这一行下面再显示一条水平线。所以，输入以下内容：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Extracting values from the list and sorting them
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从列表中提取值并对其进行排序
- en: 'Now, imagine that you have this array of names, and you want to extract those
    that, for example, have a `j` letter, and then sort them from, say, the shortest
    to the longest. These are the kinds of things that you can do when you operate
    on data. So, enter the following next:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一下，你有一个名字数组，你想提取那些，例如，有一个`j`字母的名字，然后按照从最短到最长的顺序进行排序。当你操作数据时，你可以做这样的事情。所以，输入以下内容：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Again, `IEnumerable` is of the `string` type in this line. That's why we mean
    that `IEnumerable` is generic, because it operates on integers, and string and
    so on. Next, you say `namesWithJSorted`, and I've named this variable this particular
    way because the functions will be chained from left to right. So, you type the
    name of the names array, and then you type `Where(name => name.Contains("j")`
    in order to check each name to see if it contains the letter `j`. Then further,
    once you have all of those names that contain a letter `j`, you'll order that
    result by the length of each name with `OrderBy(name => name.Length)`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，`IEnumerable`的类型是`string`。这就是为什么我们说`IEnumerable`是泛型的，因为它可以操作整数、字符串等等。接下来，你说`namesWithJSorted`，我以这种特定的方式命名这个变量，因为函数将从左到右链接。所以，你输入名字数组的名称，然后输入`Where(name
    => name.Contains("j")`来检查每个名字是否包含字母`j`。然后，一旦你有了所有包含字母`j`的名字，你将按照每个名字的长度对结果进行排序，使用`OrderBy(name
    => name.Length)`。
- en: 'Again, from left to right you can chain these functions. This is LINQ. As you
    can see inside each one, you basically have a Lambda expression: `Where` and then,
    `OrderBy`. It''s powerful, right?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，从左到右，你可以链接这些函数。这就是LINQ。正如你在每个函数中所看到的，基本上都有一个Lambda表达式：`Where`，然后是`OrderBy`。它很强大，对吧？
- en: 'Next, to display it, remember, because `namesWithJSorted` is `IEnumerable`,
    you can convert it back to a list and then use `foreach`; or, if you want, you
    can just type the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要显示它，记住，因为`namesWithJSorted`是`IEnumerable`，你可以将它转换回列表，然后使用`foreach`；或者，如果你愿意，你也可以直接输入以下内容：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember, in the directly preceding line, `+=` is to append, `$` is for string
    interpolation, and `<br>` is there to push down a line. The actual value to be
    printed appears within the curly braces.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在直接前一行中，`+=`是用来追加的，`$`是用于字符串插值，`<br>`是用来换行的。要打印的实际值出现在花括号内。
- en: These are the basics of these concepts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是这些概念的基础。
- en: Running the program
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now, we have to confirm that this will work as expected. So, crank it up in
    your browser, and click on the Show Values button. As you can see in *Figure 9.4.2*,
    it displays x=12, x=25, and x=54, and then below that it displays the names job,
    john, and janet. Each name contains a `j` letter, and they are listed from shortest
    to longest, as expected:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须确认这将按预期工作。所以，打开你的浏览器，点击“显示值”按钮。正如你在*图9.4.2*中所看到的，它显示了x=12、x=25和x=54，然后在下面显示了名字job、john和janet。每个名字都包含一个`j`字母，并且按照预期的顺序列出：
- en: '![](img/337f46a8-bf2b-46d4-8ce8-53d038f22cfc.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/337f46a8-bf2b-46d4-8ce8-53d038f22cfc.png)'
- en: 'Figure 9.4.2: The results of running the program for this chapter'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4.2：运行本章程序的结果
- en: Remember, this is basically a combination. You have a Lambda expression, `(x
    => x > 10)`, and then you stick that into a method such as `where` or `OrderBy`.
    When you combine the two, the code becomes very powerful, as you can see, and
    very expressive, letting you accomplish a lot. Also, remember that on the left-hand
    side, many of the results in LINQ return items of the `IEnumerable` type.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这基本上是一个组合。你有一个Lambda表达式`(x => x > 10)`，然后你把它放到`where`或`OrderBy`这样的方法中。当你把这两者结合起来时，代码变得非常强大，正如你所看到的，非常表达，让你能够完成很多事情。还要记住，在左侧，LINQ中的许多结果返回的是`IEnumerable`类型的项目。
- en: Chapter review
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释在内的本章`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we talked about the basics of LINQ. You learned how to use
    LINQ, or Language Integrated Query. It's a powerful way of manipulating data directly
    within your C# code. You added namespaces, worked with the `IEnumerable` generic
    interface, converted an array into a list of integers, determined the values within
    a collection, converted those values back to a list, and extracted those values
    from the list and sorted them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了LINQ的基础知识。你学会了如何使用LINQ，或者说是语言集成查询。这是一种在C#代码中直接操作数据的强大方式。你添加了命名空间，使用了`IEnumerable`泛型接口，将数组转换为整数列表，确定了集合中的值，将这些值转换回列表，并提取并排序了这些值。
- en: In the next chapter, we will talk about using LINQ with custom types.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何在自定义类型中使用LINQ。
