["```cs\npublic static void Swap<T>(ref T x, ref T y)\n```", "```cs\n//method can operate on multiple data types \n```", "```cs\nT temp = x;\n```", "```cs\nx = y;\ny = temp;\n```", "```cs\nT temp = x; \n//save x \nx = y;\n//assign y to x \ny = temp;\n//assign original value of x back to y \n```", "```cs\npublic static string Compare<T>(T x, T y) where T : IComparable\n```", "```cs\nif(x.CompareTo(y) < 0)\n```", "```cs\nreturn $\"<br>{x}<{y}\"; \n```", "```cs\nelse\n{\n     return $\"<br>{x}>{y}\";\n} \n```", "```cs\nusing System;\npublic class GenMethods\n{\n    //method can operate on multiple data types\n    public static void Swap<T>(ref T x, ref T y)\n    {\n        T temp = x; //save x\n        x = y;//assign y to x\n        y = temp;//assign original value of x back to y\n    }\n    //this function has a constraint, so it can operate on values\n    //that can be compared\n    public static string Compare<T>(T x, T y) where T :IComparable\n    {\n        //CompareTo returns < 0, =0,or >0, depending on the relationship\n        //between x and y\n        if(x.CompareTo(y)<0)\n        {\n            return $\"<br>{x}<{y}\";\n        }\n        else\n        {\n            return $\"<br>{x}>{y}\";\n        }\n    }\n} \n```", "```cs\ndouble x = 25, y = 34;\n```", "```cs\nsampLabel.Text = $\"x={x}, y={y}\";\n```", "```cs\nGenMethods.Swap<double>(ref x, ref y);  \n```", "```cs\nsampLabel.Text += $\"<br>x={x}, y={y}\";\n```", "```cs\nsampLabel.Text += GenMethods.Compare<double>(x, y);\n```", "```cs\nint x = 25, y = 34;\nsampLabel.Text = $\"x={x}, y={y}\";\nGenMethods.Swap<int> (ref x, ref y);\nsampLabel.Text += $\"<br>x={x}, y={y}\";\nsampLabel.Text += GenMethods.Compare<int>(x, y);\n```", "```cs\npublic static string Compare<T>(T x, T y) where T : IComparable\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        int x = 25, y = 34;//declare and set two variables\n        sampLabel.Text = $\"x={x}, y={y}\";//display variables\n        GenMethods.Swap (ref x, ref y);//swap values\n        sampLabel.Text += $\"<br>x={x}, y={y}\";//display swapped values\n        sampLabel.Text += GenMethods.Compare (x, y);\n    }\n}\n```"]