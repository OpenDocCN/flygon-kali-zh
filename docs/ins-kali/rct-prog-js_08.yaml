- en: Chapter 8. Demonstrating Functional Reactive Programming in JavaScript – A Live
    Example, Part I
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。在JavaScript中演示函数式响应式编程-一个实时示例，第一部分
- en: In [Chapter 4](ch04.html "Chapter 4. Demonstrating Nonfunctional Reactive Programming
    – A Live Example"), *Demonstrating Nonfunctional Reactive Programming—A Live Example*,
    we used ReactJS to migrate from the legacy code that has its own structure and
    was written without using ReactJS. In the last chapter, [Chapter 7](ch07.html
    "Chapter 7. Not Reinventing the Wheel – Tools for Functional Reactive Programming"),
    *Not Reinventing the Wheel – Tools for Functional Reactive Programming*, we studied
    a few out of a great many tools that we might use when working with ReactJS. In
    this chapter, we will be covering a sort of central road of what to expect in
    mainstream development with ReactJS. One may add quite a lot of options to the
    basics, but the intent is to give a foundational example of how you can build
    a project with ReactJS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。演示非函数式响应式编程-一个实时示例")中，*演示非函数式响应式编程-一个实时示例*，我们使用ReactJS从具有自己结构并且没有使用ReactJS编写的遗留代码中迁移。在上一章，[第7章](ch07.html
    "第7章。不要重复发明轮子-函数式响应式编程的工具")中，*不要重复发明轮子-函数式响应式编程的工具*，我们研究了在使用ReactJS时可能使用的众多工具中的一些。在本章中，我们将涵盖ReactJS主流开发中可以期待的一种中心道路。可以在基础上添加很多选项，但意图是给出一个使用ReactJS构建项目的基础示例。
- en: We've spoken a bit about functional reactive programming. Now we will see it
    live in action with ReactJS. We've also talked about how, conceptually, we have
    a complete teardown and rebuild of the user interface. So you, as a developer,
    have ![Demonstrating Functional Reactive Programming in JavaScript – A Live Example,
    Part I](img/B04108_08_03.jpg) states to manage instead of ![Demonstrating Functional
    Reactive Programming in JavaScript – A Live Example, Part I](img/B04108_08_02.jpg)
    state transitions. Here, we will build a `render()` method that will let you build
    just this, and you can call it whenever you want.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈到了一些关于函数式响应式编程的内容。现在我们将在ReactJS中看到它的实际应用。我们还谈到了概念上，我们对用户界面进行了完全的拆除和重建。因此，作为开发人员，您有![在JavaScript中演示函数式响应式编程-一个实时示例，第一部分](img/B04108_08_03.jpg)状态来管理，而不是![在JavaScript中演示函数式响应式编程-一个实时示例，第一部分](img/B04108_08_02.jpg)状态转换。在这里，我们将构建一个`render()`方法，让您可以仅构建这个方法，并且您可以在任何时候调用它。
- en: In this chapter, we have the first installment of a partly stubbed green field
    project built for ReactJS, this time working with the very sweet syntactic sugar
    in JSX. The two areas of this book, meaning the earlier one-chapter project and
    this multichapter project, are meant to be complementary. The project in this
    chapter stands alone, but is meant to be expanded.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们有一个为ReactJS构建的部分存栆绿地项目的第一部分，这次使用JSX中非常甜蜜的语法糖。本书的两个领域，即前一章项目和这个多章项目，都是相辅相成的。本章的项目是独立的，但意在扩展。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An overview of the project and its inspiration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目及其灵感概述
- en: The skeleton of the project, and the basics of the preferred approach in ReactJS.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的骨架，以及ReactJS中首选方法的基础知识。
- en: Starting a first component in ReactJS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ReactJS中启动第一个组件
- en: Building a `render()` method
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个`render()`方法
- en: Triggering display when you want to render or update the display
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您想要渲染或更新显示时触发显示
- en: What we will be attempting in this chapter
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们在本章将尝试的内容
- en: 'The example in the next three chapters is intended to represent a slightly
    larger green field project. What we will be working on is a system that you should
    be able to see by visiting [http://demo.pragmatometer.com](http://demo.pragmatometer.com).
    The term "Pragmatometer" is taken from the most dystopian of C. S. Lewis''s novels,
    *That Hideous Strength*, in which the ominous National Institute for Coordinated
    Experiments builds a transcendent or nearly transcendent computer such as one
    might have loosely imagined ENIAC when the novel was published (1945; by comparison,
    ENIAC was created in 1946). Alternatively, you might imagine a steampunk novel''s
    analytical engine doing with a seemingly transcendent deck of punch cards. When
    the discussion turns to the computers, it says:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来三章的示例旨在代表一个稍微更大的绿地项目。我们将要做的是一个系统，您应该能够通过访问[http://demo.pragmatometer.com](http://demo.pragmatometer.com)来看到。术语“Pragmatometer”取自C.S.刘易斯最反乌托邦的小说《那个可怕的力量》，在这部小说中，不祥的全国协调实验研究所建造了一个超然或几乎超然的计算机，就像小说出版时（1945年；相比之下，ENIAC是在1946年创建的）人们可能粗略地想象的那样。或者，您可以想象一本蒸汽朋克小说的分析引擎使用一个看似超然的穿孔卡片堆。当讨论计算机时，它说：
- en: '*"I agree with James," said Curry, who had been waiting somewhat impatiently
    to speak. "The N.I.C.E. marks the beginning of a new era—the really scientific
    era. Up to now, everything has been haphazard. This is going to put science itself
    on a scientific basis. There are to be forty interlocking commitees sitting every
    day and they''ve got a wonderful gadget—I was shown the model last time I was
    in town—by which the findings of each committee print themselves off in their
    own little compartment on the Analytical Notice-Board every half hour. Then, that
    report slides itself into the right position where it''s connected up by little
    arrows with all the relevant parts of the other reports. A glance at the Board
    shows you the policy of the whole Institute actually taking shape under your own
    eyes. There''ll be a staff of at least twenty experts in the top of the building
    working this Notice-Board in a room rather like the Tube control rooms. It''s
    a marvellous gadget. The different kinds of business all come out in the Board
    in different coloured lights. It must have cost half a million. They call it a
    Pragmatometer."*'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “‘我同詹姆斯意见一致，’一直有点不耐烦地等待发言的柯里说。‘N.I.C.E.标志着一个新时代的开始——真正的科学时代。到目前为止，一切都是偶然的。这将使科学本身建立在科学的基础上。将有四十个相互交错的委员会每天开会，他们有一个奇妙的小玩意——上次我在城里的时候我看到了模型——通过这个小玩意，每个委员会的发现每半小时就会自己打印在分析通告板上的自己的小隔间里。然后，那份报告就会自己滑到正确的位置，通过小箭头与其他报告的相关部分连接起来。看一眼通告板，你就能看到整个研究所的政策在你眼前真正形成。楼顶至少会有二十名专家在一个类似于地铁控制室的房间里操作这个通告板。这是一个奇妙的小玩意。不同种类的业务都会以不同颜色的灯光出现在通告板上。它一定花了至少五十万。他们称之为Pragmatometer。’”
- en: I am not putting too fine a point on it, but C.S. Lewis apparently predicted
    the Twitter that would not be built until decades after his death.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是在强调这一点，但C.S.刘易斯显然预测了推特，这将在他去世几十年后才建成。
- en: 'That point aside, we will be making a dashboard that features a simple 2 x
    2 grid of quadrants (the exact size and details are subject to hacking and tinkering),
    each one of which is a pigeonhole that can hold different functions. In terms
    of responsive design, we will correct to a 1 xn line of cells, one above the other.
    The features, as they are arranged on the page, are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 抛开这一点，我们将制作一个仪表板，其中包含一个简单的2 x 2象限的网格（确切的大小和细节取决于黑客和修补），每个象限都是一个可以容纳不同功能的信箱。在响应式设计方面，我们将更正为一个1xn行的单元格，一个在另一个上面。页面上排列的功能如下：
- en: '| Calendar | To-do list |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|日历|待办事项列表|'
- en: '| Scratchpad | Room to grow |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|草稿板|发展空间|'
- en: The **Calendar** has a somewhat experimental user interface; it shines at showing
    entries, perhaps days out, in a way that degrades gracefully to a sparse input
    (so you don't need to click through multiple months to find out when some XYZ
    appointment down the road is available). It might click with you, or it might
    not, but it is interesting.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**日历**具有一种有点实验性的用户界面；它擅长以一种优雅地降级到稀疏输入的方式显示条目，也许是未来的几天（这样你就不需要点击多个月份才能找出未来某个XYZ约会的时间）。它可能会吸引你，也可能不会，但它很有趣。'
- en: The **To-do list** implements a to-do list with some slightly nonstandard bells
    and whistles. Instead of one checkbox for an item (strictly speaking, no checkbox
    is needed), there are ten boxes, representing various states, and color-coded
    with custom styling of the label to the right of the checkboxes so that you can
    tell, for instance, what is important, active, or on the back burner.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**待办事项列表**实现了一个带有一些略微非标准的功能的待办事项列表。与其为每个项目添加一个复选框（严格来说，不需要复选框），它有十个框，代表不同的状态，并且通过自定义样式的标签右侧的颜色编码，以便您可以知道哪些是重要的、活跃的或搁置的。'
- en: The **Scratchpad** is a rich text area that can be used for scratching. It capitalizes
    on CKeditor.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**草稿板**是一个可以用于草稿的富文本区域。它利用了CKeditor。'
- en: 'Finally, the **Room to Grow** is a placeholder for you to stick in your own
    two cents. There is something that comes in by default, and you can see it as
    you explore. But please do visit [https://demo.pragmatometer.com](https://demo.pragmatometer.com),
    and see the default option there (*hint, hint!*). There are many places for hacking
    and tinkering besides what is explicitly advertised, but some possibilities include
    the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**发展空间**是一个为您自己的意见留出位置的占位符。默认情况下会有一些内容，您可以在探索时看到。但请访问[https://demo.pragmatometer.com](https://demo.pragmatometer.com)，看看那里的默认选项（*暗示，暗示！*）。除了明确宣传的内容外，还有许多黑客和修补的地方，但一些可能性包括以下内容：
- en: '**Building an API client for several public websites**: Most of the top 20
    websites expose a RESTful API. Twitter would be the most obvious candidate as
    the most authentic to the name of *Pragmatometer*, but news, video, and social
    networking sites can work if they expose either an API that is friendly to client-side
    JavaScript, or something else.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为几个公共网站构建API客户端**：前20名的大多数网站都公开了RESTful API。推特可能是最明显的候选者，因为它最符合*Pragmatometer*这个名字，但新闻、视频和社交网站也可以使用，如果它们公开了对客户端JavaScript友好的API，或者其他什么。'
- en: '**Building an application**: Build your own application for displaying.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建应用程序**：构建您自己的用于显示的应用程序。'
- en: '**Making a playground**: Build your own Pragmatometer or download the source
    online, and keep three-fourths of the screen for the purposes detailed here. Make
    the remaining one-fourth a playground for tinkering.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制作游乐场**：构建您自己的Pragmatometer或在线下载源代码，并将屏幕的四分之三用于这里详细介绍的目的。将剩下的四分之一作为一个用于修补的游乐场。'
- en: '**Incorporating Google (or other) gadgets that others have made**: You can
    also incorporate gadgets that others have made, such as Google.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整合其他人制作的Google（或其他）小工具**：您还可以整合其他人制作的小工具，比如Google。'
- en: '**Keeping the default application**: You can keep the default application,
    if you want.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保留默认应用程序**：如果您愿意，可以保留默认应用程序。'
- en: Saying "*the implementation is the spec*" has a bad reputation, but a spec,
    written or not, can be complemented neatly by sketching the appearance and behavior.
    Perhaps using low-fidelity prototypes, which may draw helpful criticism more quickly
    than something that looks pretty polished but will create an undesired social
    nuance of people being less free in criticisms that have an implicit emotional
    payload of "Will I be hurting others' feelings by criticizing something that looks
    as if someone put a lot of work into it?" And this attitude is not a bad thing.
    In terms of the concern that undergirds politeness, it is naïve to tell people,
    "be as brutal as it takes to speak your mind," and actually expect other people
    to take this completely at face value (or perhaps, you don't like receiving criticism
    any more than anyone else, but you recognize its value in the whole of the software
    development process). You may mean it without any mixed messages, but most of
    us have seen it meant with many mixed messages. And even if you are the sort of
    production who almost salivates at the prospect of some really helpful criticism,
    it does not help matters—or does not help much—to tell people to stop acting like
    polite human beings when you show them something you've created. But here, having
    seen a UI, played with it, and thought how you can duplicate things can be a very
    invigorating way to understand what is intended much more precisely than a legal-contract
    spec.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 说“*实现即规范*”声名狼藉，但规范，无论是书面的还是不书面的，都可以通过勾勒外观和行为来完美补充。也许使用低保真原型，可能比看起来很精致但会产生不良社交暗示的东西更快地引起有益的批评。这种态度并不是坏事。在礼貌的基础上，告诉人们“尽可能残酷地说出你的想法”，并真的期望其他人完全接受这一点是天真的（或许，你不喜欢接受批评，但你认识到在整个软件开发过程中它的价值）。你可能是真心的，但我们大多数人都看到了其中的许多混合信息。即使你是那种几乎渴望得到一些真正有用的批评的人，告诉人们在你展示他们你创造的东西时停止表现得像有礼貌的人并不会有太大帮助。但是，在这里，看到一个UI，玩弄它，并思考如何复制东西可能是一种非常有活力的方式，比法律合同规范更准确地理解意图。
- en: 'For this interface, there is one account, and the priority is for cross-synchronization
    of updates. Let''s begin assembling some of the basic skeleton. Building everything
    within a single, large, and immediately invoked function expression, we have the
    following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个界面，有一个帐户，并且更新的跨同步是优先的。让我们开始组装一些基本的骨架。在一个单一的、大的、立即调用的函数表达式中构建一切，我们有以下内容：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we define a `container` class for the entire project. The `Calendar`,
    `Todo`, `Scratch`, and `YouPick` classes represent applications in the larger
    page; some of them could have various layers of subcomponents as well.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为整个项目定义了一个`container`类。`Calendar`，`Todo`，`Scratch`和`YouPick`类代表了更大页面中的应用程序；它们中的一些可能还有各种层次的子组件。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The JSX optional syntactic sugar is meant to be readable to people who can read
    HTML, but contains a greater invitation to contribute your own components than
    HTML or really even XHTML (and possibly even XML). In XML development, you can
    define whatever DTD you want, but the usual rank-and-file XML author won't define
    new tags, possibly even after having done a lot of work with XML (this is something
    like programmers who can use functions or objects but not add either functions
    or objects to a namespace). In JSX, it is routine for authors who write any appreciable
    amount of JSX, by nature, to contribute tags that are reusable.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JSX可选的语法糖旨在对会读HTML的人来说是可读的，但比HTML甚至XHTML（甚至XML）更容易包含自己组件的邀请。在XML开发中，你可以定义任何你想要的DTD，但通常的XML作者不会定义新的标签，甚至在使用XML做了很多工作之后也不会（这有点像程序员可以使用函数或对象，但不能向命名空间添加函数或对象）。在JSX中，任何写了大量JSX的作者，天生就会贡献可重用的标签。
- en: The preceding code sample has `<div className=`, where the desired HTML is `<div
    class=`. Because JSX compiles JavaScript and is meant to be a syntactic sugar
    only, rather than an independent language in its depths, the decision was made
    to avoid `class` and `for` in the rendered JavaScript. Use `className` to cover
    CSS class names and `htmlFor`. HTML ID attributes may optionally be specified;
    JSX gets along with the HTML IDs it puts in and the HTML IDs that you specify,
    along with some pixie dust. If you need to enter the UTF8 literals outside of
    ASCII, don't give the ASCII encoding of the symbol (`—`); instead, paste the literal
    inside your editor (`—`).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例中有`<div className=`，而期望的HTML是`<div class=`。因为JSX编译成JavaScript，只是一个语法糖，而不是一个独立的语言，所以决定避免在渲染的JavaScript中使用`class`和`for`。使用`className`来覆盖CSS类名和`htmlFor`。HTML
    ID属性可以选择指定；JSX可以使用它放入的HTML ID以及您指定的HTML ID，再加上一些魔法。如果需要在ASCII之外输入UTF8文字，不要给出符号的ASCII编码（`—`）；而是将文字直接粘贴到编辑器中（`—`）。
- en: Furthermore, there is an XSS protection escape hatch available. The optimal
    intended approach for using the language seems to be to solve the problem so that
    you will mark up what should genuinely be marked up and include an XSS-protected
    display of the user data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个XSS保护逃生舱可用。使用语言的最佳方法似乎是解决问题，这样你就可以标记出真正需要标记的内容，并包含用户数据的XSS保护显示。
- en: 'Alternately, if you are willing to trust a third-party library, such as `Showdown`
    ([https://github.com/showdownjs/showdown](https://github.com/showdownjs/showdown)),
    to render HTML without including XSS''s vulnerabilities, you can create a `Showdown`
    converter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你愿意信任第三方库，比如`Showdown`（[https://github.com/showdownjs/showdown](https://github.com/showdownjs/showdown)），来渲染HTML而不包含XSS的漏洞，你可以创建一个`Showdown`转换器：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this code is a self-contained example and not part of the main project
    that we have begun in this chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这段代码是一个独立的示例，不是本章开始的主要项目的一部分。
- en: This will render as a `DIV` variable containing `<em>Hello</em>, world!`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现为包含`<em>Hello</em>, world!`的`DIV`变量。
- en: This escape hatch, which may or may not serve as a rarely used escape hatch,
    is central enough to be explicitly covered in the documentation. One gets the
    feeling that the mainstream use of JSX, with XSS protection that escapes HTML
    (so that `<em>a</em>` renders in a web page not as `a` but as an `<em>a</em>`
    function displayed in the browser window), has benefits similar to unit testing.
    This is a point worth pausing on for a moment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逃生舱，可能也可能不会成为一个很少使用的逃生舱，足够核心，以至于在文档中明确涵盖。人们有一种感觉，JSX的主流用法，通过转义HTML来防止XSS（这样`<em>a</em>`在网页上呈现的不是`a`，而是在浏览器窗口中显示的`<em>a</em>`函数），具有类似于单元测试的好处。这是值得暂停一会儿的观点。
- en: Unit testing has come somewhat further down to earth; its early center of gravity
    was around what was easiest to unit test—mathematical functions that would return
    an appropriate value if given an appropriate input value. So, we would illustrate
    unit testing with problems implicitly optimized to play to the strengths and needs
    of unit testing, and show a red, green, refactor XP approach to appropriately
    solve a problem such as converting integers to and from Roman numerals (good luck
    if you wanted to test code that deals with a database or user interface). Unit
    testing caught perhaps 30 percent of the total errors, and as a rule, it tended
    to catch the least significant errors, with the least coverage of the bugs that
    were the most difficult to resolve. Now there is a more robust set of features,
    with it being entirely possible and straightforward to make test assertions about
    how a user interface behaves given some mouse clicks and other user interface
    behavior. Also, it is less of a matter of software that is written to serve the
    needs of unit testing than unit testing that properly serves the needs of software.
    It is possible that unit testing hit prime time when it was not yet ready for
    prime time, like responsive design, about which some have said, "I've seen responsive
    design mainly on websites advocating for responsive design." This was true when
    unit testing and responsive design became buzzwords; but since then, they have
    matured, and responsive design is pretty close to being the only game in town.
    Perhaps the largest websites, such as Google, can afford to customize a solution
    for every mobile, tablet, desktop, and watch environment. But for most customers,
    responsive design has fairly effectively displaced its other competitors. It is
    now relatively uncommon for websites to have some URLs for a desktop version and
    a mobile version and perform browser direction and redirection to separate sites,
    which was once fairly mainstream. These approaches have matured since they first
    entered the limelight.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试已经变得更加接地气；它早期的重心在于对数学函数进行单元测试，只要给定适当的输入值，它们就会返回适当的值。因此，我们会用隐式优化以适应单元测试的优势和需求来说明单元测试，并展示一个红绿重构的XP方法来适当地解决问题，比如将整数转换为罗马数字（如果你想测试处理数据库或用户界面的代码，祝你好运）。单元测试可能捕捉到了总错误的30％，通常它倾向于捕捉最不重要的错误，并对最难解决的错误覆盖率最低。现在有了更强大的功能集，完全可以并且直截了当地对用户界面的行为进行测试断言，比如鼠标点击和其他用户界面行为。此外，这不再是编写软件以满足单元测试需求，而是单元测试适当地满足软件需求。可能单元测试在尚未准备好的时候就迎来了黄金时代，就像响应式设计一样，有人说：“我主要在倡导响应式设计的网站上看到了响应式设计。”这在单元测试和响应式设计成为时髦词汇时是真的；但自那时以来，它们已经成熟，响应式设计几乎成为了唯一的选择。也许像谷歌这样的大型网站可以负担得起为每个移动设备、平板电脑、台式机和手表环境定制解决方案。但对于大多数客户来说，响应式设计已经相当有效地取代了其他竞争对手。现在，网站很少再有桌面版本和移动版本的URL，并执行浏览器定向和重定向到不同的网站，这曾经是相当主流的。这些方法自它们首次进入聚光灯下以来已经成熟。
- en: 'In the case of early unit testing, when you couldn''t really test integration
    or user interface behavior, there was one cardinal payoff to writing code for
    unit testing: code written to be unit testable is usually better code. The same
    principle may speak about writing as much as possible to cut with Facebook''s
    grain, not against it, in using ReactJS.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的单元测试中，当你无法真正测试集成或用户界面行为时，为单元测试编写代码的一个主要回报是：为了进行单元测试而编写的代码通常是更好的代码。同样的原则可能也适用于尽可能按照Facebook的规则编写代码，而不是违背它，在使用ReactJS时。
- en: Right now, there is no particular premature hype about writing code in an approach
    oriented to play well with the XSS protection surrounding JSX and not, as per
    the deliberately chosen name, dangerously set `innerHTML`, which has been labeled
    an escape hatch. Facebook could, if they wanted, try to go the "tough love" route
    and advise people to structure and organize projects in a way that would fit in
    naturally with XSS protection and JSX. But perhaps they are taking a humbler approach,
    both making it clear how to bypass the XSS protection, and presenting this escape
    hatch as perhaps something to avoid wherever possible.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，关于以一种旨在与JSX周围的XSS保护协调良好的方式编写代码的过早炒作并不存在。Facebook可以选择采取“严格的爱”路线，建议人们以一种自然地适应XSS保护和JSX的方式来构建和组织项目。但也许他们采取了更谦卑的方式，既清楚地说明如何绕过XSS保护，又将这个逃生舱呈现为可能尽量避免的东西。
- en: 'The wisdom would appear to be as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 智慧似乎是这样的：
- en: As far as practicable, structure your applications to work appropriately with
    the main anti-XSS approach adopted in ReactJS.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实际操作中，尽量使应用程序能够适当地与ReactJS采用的主要反XSS方法配合工作。
- en: If you want to do something that requires rendering, for example, HTML tags
    in `innerHTML`, confine it to as small a space as you can and treat it like the
    monads in Haskell used for the IO, necessary and perhaps nonnegotiable, but quarantined
    to as small a space as is practicable.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想做一些需要渲染的事情，比如在`innerHTML`中渲染HTML标签，尽量将其限制在尽可能小的空间，并像Haskell中用于IO的单子一样对待它，这是必要的，也许是不可协商的，但尽可能隔离在尽可能小的空间。
- en: If you need to render tags, consider using HTML generated by a tool such as
    `Showdown` for Markdown, which is not necessarily perfect and foolproof but offers
    less surface area for HTML code that contains tags that have been vetted and lessen
    the surface area for bugs in HTML code (possibly, this is a use case for an HTML
    tag cleaner or an HTML-to-markdown converter that stores markdown and renders
    HTML).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要呈现标签，请考虑使用诸如`Showdown`之类的工具生成的HTML进行Markdown，这并不一定完美和可靠，但提供了较少的HTML代码表面，其中包含经过审查的标签，并减少了HTML代码中的错误表面（可能，这是HTML标签清理器或HTML到Markdown转换器的用例，它存储Markdown并呈现HTML）。
- en: Only if you cannot work the default way with XSS protection and can't tag, clean,
    or work from markup, or anything else, should you store and dangerously set `innerHTML`.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在无法使用XSS保护的默认方式并且无法标记、清理或从标记中工作，或者其他情况下，您才应该存储并危险地设置`innerHTML`。
- en: Let's move on to the `YouPick` tag included in the Pragmatometer definition.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论Pragmatometer定义中包含的`YouPick`标签。
- en: This project's first complete component
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这个项目的第一个完整组件
- en: 'You can see what this component implements at [https://CJSHayward.com/missing.html](https://CJSHayward.com/missing.html).
    For our first component, we pick a mostly skeletal implementation:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://CJSHayward.com/missing.html](https://CJSHayward.com/missing.html)看到这个组件的实现。对于我们的第一个组件，我们选择了一个大部分骨架实现：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This skeleton returns empty, "falsy" values, which we will override. What we
    want to do is take two strings, break them down into one-character substrings
    (excluding tags), then display more and more of the first string, and then repeat
    the second string. It makes for a very old joke displayed for the user.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个骨架返回空的“假值”，我们将覆盖它。我们想做的是取两个字符串，将它们分解成一个字符的子字符串（不包括标签），然后显示更多和更多的第一个字符串，然后重复第二个字符串。这对用户来说是一个非常古老的笑话。
- en: There is a division of labor between properties, meant to be set once and never
    changed and state, meant to allow changing. Note that state, being mutable, should
    be treated privately, so as to avoid the shared mutable state that Facebook declared
    war on. Technically, properties can be changed, but notwithstanding this, properties
    that should be set at the beginning (possibly passed down by a parent component)
    and then frozen. The state is something that can change, although the general
    pattern in relation to Flux is to avoid the shared mutable state. In general,
    this means that stores have getters but not setters; they might receive actions
    from dispatchers, but they are not at the mercy of anyone who has reference to
    the core object.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 属性和状态之间有一种分工，属性意味着只设置一次且永不更改，状态则允许更改。需要注意的是，状态是可变的，应该被私下处理，以避免Facebook宣布战争的共享可变状态。从技术上讲，属性是可以更改的，但尽管如此，应该在开始时设置属性（可能由父组件传递），然后冻结。状态是可以更改的，尽管与Flux相关的一般模式是避免共享可变状态。一般来说，这意味着存储器具有getter但没有setter；它们可能会从分发器接收操作，但不受核心对象的任何引用者的控制。
- en: For this object, the strings are obvious candidates for the default props. Note,
    however, that the timestamp that a component began is not appropriate for the
    props, because `getDefaultProps()` will be evaluated before any instances are
    created, thus enabling a borg variation on the singleton pattern, where there
    are any number of components of this type. Potentially, there are more of them
    added over time, but all of them share a starting timestamp before any of them
    were instantiated.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个对象，字符串显然是默认属性的明显候选者。然而需要注意的是，组件开始的时间戳不适合作为属性，因为`getDefaultProps()`将在创建任何实例之前进行评估，从而使得这种类型的组件的任何数量的实例都可以启用单例模式的变体。潜在地，随着时间的推移可能会添加更多的实例，但是它们在被实例化之前都共享一个起始时间戳。
- en: 'So let''s flesh out the `getDefaultState` method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来详细说明`getDefaultState`方法：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Perhaps the first change to this is to convert the text from HTML to Markdown.
    This is not strictly necessary; this is text that we have written ourselves, and
    we may have more confidence in text that we''ve written—confidence that it will
    not trigger XSS vulnerabilities—than text generated from our Markdown. In the
    world of computer security, a great deal of trouble can be presented by giving
    as little privilege out, stingily, as will let people or things get their work
    done: hence the saying, "Stinginess with privilege is kindness in disguise". Facebook
    has made not so much a stellar decision that shows uniquely good judgment as avoiding
    handing its users a live grenade. It is very, very easy to allow vulnerabilities
    that will run hundreds of megs of hostile JavaScript, with security certification
    assuring the user that this hostile JavaScript is genuinely from your site. For
    more information, please see [http://tinyurl.com/reactjs-xss-protection](http://tinyurl.com/reactjs-xss-protection).
    In this case, only `initial_text`, and not `repeated_text`, needs to be changed,
    as `repeated_text` contains only letters and spaces; thus, it works the same as
    plain text, HTML, or Markdown. Our revised `initial_text` reads like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 也许对这个的第一个更改是将文本从HTML转换为Markdown。这并不是严格必要的；这是我们自己编写的文本，我们可能对我们编写的文本更有信心——相信它不会触发XSS漏洞——而不是从我们的Markdown生成的文本。在计算机安全领域，通过给予尽可能少的特权，吝啬地，让人或事物完成他们的工作，可以提供大量的麻烦：因此有句谚语，“特权的吝啬是善意的伪装”。Facebook所做的不是表现出独特的良好判断力，而是避免向其用户交付一个活手榴弹。很容易允许漏洞，这些漏洞将运行数百兆的敌对JavaScript，并且安全认证向用户保证这个敌对JavaScript确实来自您的网站。有关更多信息，请参见[http://tinyurl.com/reactjs-xss-protection](http://tinyurl.com/reactjs-xss-protection)。在这种情况下，只有`initial_text`需要更改，而不是`repeated_text`，因为`repeated_text`只包含字母和空格；因此，它与纯文本、HTML或Markdown的工作方式相同。我们修改后的`initial_text`如下：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before continuing further, let''s create stubs for the other three main components,
    which we will expand later on:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们为其他三个主要组件创建存根，稍后我们将扩展它们：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will set the state as the timestamp for this object's creation. At one glance,
    this might seem like something that belongs to properties, and in spirit, it is.
    But we want each component instance to keep its own creation date, and therefore
    start at zero from when it was created. If we or someone else reuse our work and
    create more than one instance of this on a page, each keeping its appropriate
    time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将状态设置为此对象创建的时间戳。乍一看，这可能看起来像是属性的一部分，实际上也是。但是我们希望每个组件实例保留自己的创建日期，并且从创建时开始为零。如果我们或其他人重用我们的工作并在页面上创建多个此类实例，每个实例都保持其适当的时间。
- en: 'Thus, we change the `getInitialState` method of `YouPick` to the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将`YouPick`的`getInitialState`方法更改为以下内容：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The render() method
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染()方法
- en: Next, we implement the render method. What we do is take the properties, which
    should never be directly mutated and probably should not have any existing value
    changed, and get the two strings from them. We will, token by token, display everything
    in the first string, and repeat the second as many times as the component is displayed.
    We will also create a tokenize function for rendered HTML converted from `Showdown`—this
    breaks its argument to each next tag or the next character—and, in a moment, see
    why we are creating a verbose anonymous function instead of a regular expression
    (in a nutshell, writing readable code in lieu of a regular expression appears
    verbose compared to the terseness available in writing write-only code).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实现渲染方法。我们要做的是获取属性，这些属性不应该直接改变，可能也不应该改变任何现有值，并从中获取两个字符串。我们将逐个标记地显示第一个字符串中的所有内容，并重复第二个字符串与组件显示的次数一样多。我们还将为从`Showdown`转换的渲染HTML创建一个标记化函数——这将把参数分解为下一个标签或下一个字符——很快我们会看到为什么我们创建了一个冗长的匿名函数而不是一个正则表达式（简而言之，编写可读的代码而不是正则表达式似乎比编写只能写的代码更冗长）。
- en: 'The render method consists of more than half the lines of code as we already
    have it. Let''s go through it step by step:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染方法包含了超过一半的代码行数，让我们一步一步地进行：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: One of the points of breakage in JavaScript surrounds `this`. Among the horror
    stories that many readers may be familiar with is that if you create a constructor
    (the convention is to give a warning label by capitalizing the first letters of
    constructors and non-constructor functions, thus providing a way to cause serious
    misunderstanding by not holding down the *Shift* key) that adds methods and fields
    to an object and you have `x = Foo();` when you actually meant `x = new Foo();`,
    then the `Foo` constructor will trample the global namespace and add or clobber
    variables in it. Douglas Crockford, after originally including the "bad implementation
    of Java" pseudoclassical inheritance in *The Good Parts*, had second thoughts
    and eliminated it from *The Better Parts*, after he made an Adsafe program that
    could maintain security only if the `this` were removed from use. Then he started
    to try out the medicine he was foisting on others, and suddenly found a bunch
    of things he liked when he stopped using this. We can't drop the this and still
    use technologies like ReactJS, but we do have a say about whether we choose to
    drag in this when we don't need to. But ReactJS uses it, and it might be good
    practice to use pseudo-classical approaches based on `this` as much as needed
    to talk with ReactJS, but not (much) more.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的一个破坏点是`this`。许多读者可能熟悉的恐怖故事之一是，如果你创建一个构造函数（约定是通过将构造函数和非构造函数的首字母大写来提供警告标签，从而通过不按住*Shift*键来造成严重误解），并且你有`x
    = Foo();`当你实际上想要的是`x = new Foo();`，那么`Foo`构造函数将破坏全局命名空间并添加或覆盖其中的变量。Douglas Crockford在*The
    Good Parts*中最初包括了“Java的糟糕实现”伪经典继承后，他有了第二次想法，并在*The Better Parts*中将其删除，因为他制作了一个Adsafe程序，只有在不使用`this`时才能保持安全。然后他开始尝试他向他人强加的方法，突然发现当他停止使用`this`时，他喜欢的东西变多了。我们不能放弃`this`并仍然使用ReactJS等技术，但是我们可以选择在不需要时是否使用`this`。但是ReactJS使用它，根据需要使用基于`this`的伪经典方法可能是一个好的做法，但不要（太多）。
- en: 'Here, we have the patterned hack to deal with `this` not always being available
    for our first line we have:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个模式化的黑客来处理`this`不总是可用的情况，我们有：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `tokenize()` function is a function that breaks HTML mostly into characters
    but keeps tags together:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`tokenize()`函数是一个将HTML大部分分解为字符但保持标签在一起的函数：'
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We introduce helper variables to mitigate multiline expressions. The two variables
    following could as well be refactored out, but multiline expressions without them
    are the sort of thing that programmers glance at and then skip down, saying, "I''ll
    read it if I have to." This is a bad thing. These variables hold the original
    (Markdown) strings converted to HTML:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入辅助变量来减少多行表达式。接下来的两个变量也可以重构出来，但是没有它们的多行表达式是程序员瞥一眼然后跳过的东西，说：“如果我必须读它，我会读它。”这是一件坏事。这些变量保存了原始（Markdown）字符串转换为HTML后的内容。
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The HTML generated by `Showdown` has proper paragraph formatting. This is a
    good thing, but in this case, it means paragraph tags separating things that should
    belong to the same paragraph. We remove the counterproductive tags in this slightly
    unusual case:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由`Showdown`生成的HTML具有适当的段落格式。这是一件好事，但在这种情况下，这意味着段落标签将分隔应属于同一段落的内容。在这种略微不寻常的情况下，我们删除了适得其反的标签：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We tokenize the HTML generated from our Markdown:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们的Markdown生成的HTML标记化：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This step calculates the number of tokens that are desired at a particular
    point of time, in what has been called continuous time semantics. This means that
    however often or rarely we call the `render()` method, the content will be rendered
    appropriately when it is called, and (apart from choppiness) nothing will change
    if you double the frequency at which the render function is called. The `tokens`
    function is not a list of tokens, but the count of how many tokens should be displayed
    now:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步计算了在特定时间点所需的标记数量，这就是所谓的连续时间语义。这意味着无论我们多频繁或少频繁地调用`render()`方法，当它被调用时，内容将被适当地渲染，而且（除了不连贯）如果您加倍调用渲染函数的频率，什么也不会改变。`tokens`函数不是标记列表，而是应该现在显示多少标记的计数：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have a workbench as an array to which we keep adding or replacing with more
    tokens to display so as to build up the string that should be displayed. These
    should be one-character or one-tag tokens:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个工作台作为一个数组，我们不断地向其中添加或替换更多的标记以显示，以便构建应该显示的字符串。这些应该是一个字符或一个标记的标记：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the number of tokens that should be displayed is at most the number of tokens
    from the initial string, we render that part of the string:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应该显示的标记数量最多是初始字符串中的标记数量，我们就渲染字符串的那部分：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we need more tokens, we keep looping over the already available tokens from
    the repeated tokens:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要更多的标记，我们将继续循环遍历已有的标记，从重复的标记中：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is roughly how we can render an element containing text that we have calculated:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这大致是我们如何渲染包含我们计算过的文本的元素：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Triggering the actual display for what we have created
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发实际显示我们创建的内容
- en: 'We have to manually refresh the display for updates. Because ReactJS is so
    fast, we really can afford to wastefully render the page every millisecond. We
    put the following code at the end, just preceding the end of the immediately invoked
    function expression:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须手动刷新显示以获取更新。因为ReactJS如此快，我们真的可以负担得起每毫秒浪费地渲染页面。我们将以下代码放在最后，就在立即调用的函数表达式结束之前：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For the last major piece of our puzzle, let''s look at an HTML skeleton that
    will house these components for now. The HTML is not especially interesting, but
    is provided with an interest in reducing guesswork:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们谜题的最后一个重要部分，让我们来看看一个现在将容纳这些组件的HTML骨架。HTML并不特别有趣，但是提供了一个减少猜测的兴趣：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: And what does it look like!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 它是什么样子！
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Here, we saw the nuts and bolts used for a simple application, perhaps more
    whimsical than the the `TodoMVC` function. For now, we're just making some basic
    explanations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到了一个简单应用程序使用的基本工具，也许比`TodoMVC`函数更异想天开。目前，我们只是做一些基本的解释。
- en: Join us in the next chapter for a to-do list that offers ways to mark a task
    as in progress, important, having problems, or other useful points.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，加入我们的待办事项清单，提供标记任务进行中、重要、有问题或其他有用的标记的方法。
