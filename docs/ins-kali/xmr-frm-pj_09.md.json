["```cs\nusing System;\nusing System.Collections.Generic; \n\npublic class ClassificationEventArgs : EventArgs\n{\n    public Dictionary<string, float> Classifications { get; private  \n    set; }\n\n    public ClassificationEventArgs(Dictionary<string, float> \n    classifications)\n    {\n        Classifications = classifications;\n    }\n} \n```", "```cs\nusing System;\nusing System.Collections.Generic; \n\npublic interface IClassifier\n{\n    void Classify(byte[] bytes);\n    event EventHandler<ClassificationEventArgs> \n    ClassificationCompleted;\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing CoreML;\nusing Foundation;\nusing ImageIO;\nusing Vision;\nusing System.Collections.Generic; \n\nnamespace HotDogOrNot.iOS\n{\n    public class CoreMLClassifier : IClassifier\n    {\n        public event EventHandler<ClassificationEventArgs> \n        ClassificationCompleted;\n\n        public void Classify(byte[] bytes)\n        {\n            //Code will be added here\n        }\n    } \n}\n```", "```cs\nvar modelUrl = NSBundle.MainBundle.GetUrlForResource(\"hotdog-or-not\", \"mlmodel\");\nvar compiledUrl = MLModel.CompileModel(modelUrl, out var error);\nvar compiledModel = MLModel.Create(compiledUrl, out error);\n```", "```cs\nprivate void HandleVNRequest(VNRequest request, NSError error)\n{\n    if (error != null) \n    {\n    ClassificationCompleted?.Invoke(this, new \n    ClassificationEventArgs(new Dictionary<string, float>())); \n    }\n\n    var result = request.GetResults<VNClassificationObservation>();\n    var classifications = result.OrderByDescending(x => \n    x.Confidence).ToDictionary(x => x.Identifier, x => \n    x.Confidence);\n\n    ClassificationCompleted?.Invoke(this, new \n    ClassificationEventArgs(classifications));  \n}\n```", "```cs\npublic void Classify(byte[] bytes)\n{\n    var modelUrl = NSBundle.MainBundle.GetUrlForResource(\"hotdog-or-\n    not\", \"mlmodel\");\n    var compiledUrl = MLModel.CompileModel(modelUrl, out var error);\n    var compiledModel = MLModel.Create(compiledUrl, out error); \n\n    var vnCoreModel = VNCoreMLModel.FromMLModel(compiledModel, out \n    error);\n\n var classificationRequest = new VNCoreMLRequest(vnCoreModel,    \n    HandleVNRequest); \n\n var data = NSData.FromArray(bytes);\n var handler = new VNImageRequestHandler(data,  \n    CGImagePropertyOrientation.Up, new VNImageOptions()); \n handler.Perform(new[] { classificationRequest }, out error);\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Android.App;\nusing Android.Graphics;\nusing Org.Tensorflow.Contrib.Android; \n\npublic class TensorflowClassifier : IClassifier\n{\n         public event EventHandler<ClassificationEventArgs> \n         ClassificationCompleted;\n\n         public void Classify(byte[] bytes)\n         {\n            //Code will be added here\n         }\n}\n```", "```cs\npublic void Classify(byte[] bytes)\n{\n    varassets = Application.Context.Assets;\n\n var inferenceInterface = new \n    TensorFlowInferenceInterface(assets, \"hotdog-or-not-model.pb\");\n var sr = new StreamReader(assets.Open(\"hotdog-or-not-\n    labels.txt\"));\n var labels = sr.ReadToEnd().Split('\\n').Select(s => s.Trim())\n .Where(s => !string.IsNullOrEmpty(s)).ToList();\n}\n```", "```cs\nvar bitmap = BitmapFactory.DecodeByteArray(bytes, 0, bytes.Length); \nvar resizedBitmap = Bitmap.CreateScaledBitmap(bitmap, 227, 227, false)\n                               .Copy(Bitmap.Config.Argb8888, false);\n\nvar floatValues = new float[227 * 227 * 3];\nvar intValues = new int[227 * 227];\n\nresizedBitmap.GetPixels(intValues, 0, 227, 0, 0, 227, 227);\n\nfor (int i = 0; i < intValues.Length; ++i)\n{\n    var val = intValues[i];\n    floatValues[i * 3 + 0] = ((val & 0xFF) - 104);\n    floatValues[i * 3 + 1] = (((val >> 8) & 0xFF) - 117);\n    floatValues[i * 3 + 2] = (((val >> 16) & 0xFF) - 123);\n} \n```", "```cs\nvar outputs = new float[labels.Count];\ninferenceInterface.Feed(\"Placeholder\", floatValues, 1, 227, 227, 3);\ninferenceInterface.Run(new[] { \"loss\" });\ninferenceInterface.Fetch(\"loss\", outputs);\n\nvar result = new Dictionary<string, float>();\n\nfor (var i = 0; i < labels.Count; i++)\n{\n    var label = labels[i];\n    result.Add(label, outputs[i]);\n}\n\nClassificationCompleted?.Invoke(this, new ClassificationEventArgs(result)); \n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing Xamarin.Forms; \n\nnamespace HotDogOrNot\n{\n    public abstract class ViewModel : INotifyPropertyChanged\n    {\n         public event PropertyChangedEventHandler PropertyChanged; \n         protected void Set<T>(ref T field, T newValue, \n         [CallerMemberName] string propertyName = null)\n         {\n              if (!EqualityComparer<T>.Default.Equals(field, \n                 newValue))\n              {\n                   field = newValue;\n                   PropertyChanged?.Invoke(this, new \n                   PropertyChangedEventArgs(propertyName));\n              }    \n         }    \n\n         public static INavigation Navigation { get; set; } \n    } \n}\n```", "```cs\nusing System;\nusing Autofac; \n\nnamespace HotDogOrNot\n{    \n    public class Resolver\n    {\n         private static IContainer container;\n\n         public static void Initialize(IContainer container)\n         {\n              Resolver.container = container;\n         }\n\n         public static T Resolve<T>()\n         {\n              return container.Resolve<T>();\n         }\n    } \n}\n```", "```cs\nusing System.Linq;\nusing System.Reflection;\nusing Autofac;\nusing HotdogOrNot.ViewModels;\nusing Xamarin.Forms;\n\nnamespace HotDogOrNot\n{\n    public class Bootstrapper\n    {\n         protected ContainerBuilder ContainerBuilder { get; private \n         set; }\n\n         public Bootstrapper()\n         {\n             Initialize();\n             FinishInitialization();\n         }\n\n         protected virtual void Initialize()\n         {\n             ContainerBuilder = new ContainerBuilder();\n\n             var currentAssembly = Assembly.GetExecutingAssembly();\n\n             foreach (var type in \n             currentAssembly.DefinedTypes.Where(e => \n             e.IsSubclassOf(typeof(Page))))\n             {\n                 ContainerBuilder.RegisterType(type.AsType());\n             }\n\n             foreach (var type in \n             currentAssembly.DefinedTypes.Where(e => \n             e.IsSubclassOf(typeof(ViewModel))))\n             {\n                 ContainerBuilder.RegisterType(type.AsType());\n             }\n         }\n\n         private void FinishInitialization()\n         {\n             var container = ContainerBuilder.Build();\n\n             Resolver.Initialize(container);\n         }\n    } \n}\n```", "```cs\nusing System;\nusing Autofac; \n\npublic class Bootstrapper : HotdogOrNot.Bootstrapper\n{\n    public static void Init()\n    {\n        var instance = new Bootstrapper();\n    }\n\n    protected override void Initialize()\n    {\n        base.Initialize();\n\n        ContainerBuilder.RegisterType<CoreMLClassifier>\n        ().As<IClassifier>();\n    }\n}\n```", "```cs\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n      global::Xamarin.Forms.Forms.Init();\n      Bootstrapper.Init();\n\n      LoadApplication(new App());\n\n      return base.FinishedLaunching(app, options);\n}\n```", "```cs\nusing System;\nusing Autofac; \n\npublic class Bootstrapper : HotDogOrNot.Bootstrapper\n{\n         public static void Init()\n         {\n             var instance = new Bootstrapper();\n         }\n\n         protected override void Initialize()\n         {\n             base.Initialize();\n\n             ContainerBuilder.RegisterType<TensorflowClassifier>\n             ().As<IClassifier>().SingleInstance();\n         }\n}\n```", "```cs\nprotected override void OnCreate(Bundle savedInstanceState)\n{\n     TabLayoutResource = Resource.Layout.Tabbar;\n     ToolbarResource = Resource.Layout.Toolbar;\n\n     base.OnCreate(savedInstanceState);\n     global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n\n Bootstrapper.Init();\n\n     LoadApplication(new App());\n}\n```", "```cs\nusing System.IO;\nusing System.Linq;\nusing System.Windows.Input;\nusing HotdogOrNot.Models;\nusing HotdogOrNot.Views;\nusing Xamarin.Forms; \n\npublic class MainViewModel : ViewModel\n{\n    private IClassifier classifier;\n\n    public MainViewModel(IClassifier classifier)\n    {\n        this.classifier = classifier;\n    } \n}\n```", "```cs\npublic override void OnRequestPermissionsResult(int requestCode, string[] permissions, Android.Content.PM.Permission[] grantResults)\n{\n   Plugin.Permissions.PermissionsImplementation.Current.OnRequestPermissionsResult(requestCode, permissions, grantResults);\n} \n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <external-files-path name=\"my_images\" path=\"Pictures\" />\n    <external-files-path name=\"my_movies\" path=\"Movies\" />\n</paths>\n```", "```cs\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"   \n  android:versionCode=\"1\" android:versionName=\"1.0\"   \n  package=\"xfb.HotdogOrNot\">\n     <uses-sdk android:minSdkVersion=\"21\" android:targetSdkVersion=\"27\"  \n      />\n     <application android:label=\"HotdogOrNot.Android\">\n     <provider android:name=\"android.support.v4.content.FileProvider\" \n     android:authorities=\"${applicationId}.fileprovider\" \n     android:exported=\"false\" android:grantUriPermissions=\"true\">\n <meta-data android:name=\"android.support.FILE_PROVIDER_PATHS\" \n     android:resource=\"@xml/file_paths\"></meta-data>\n </provider>\n     </application>\n </manifest> \n```", "```cs\n<key>NSCameraUsageDescription</key>\n<string>This app needs access to the camera to take photos.</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>This app needs access to photos.</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>This app needs access to microphone.</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>This app needs access to the photo gallery.</string>\n```", "```cs\nprivate void HandlePhoto(MediaFile photo)\n{\n    if(photo == null)\n    {\n        return;\n    }\n\n    var stream = photo.GetStream();\n    bytes = ReadFully(stream);\n\n    classifier.ClassificationCompleted += \n    Classifier_ClassificationCompleted;\n    classifier.Classify(bytes);\n} \n```", "```cs\nprivate byte[] ReadFully(Stream input)\n{\n    byte[] buffer = new byte[16 * 1024];\n    using (MemoryStream memoryStream = new MemoryStream())\n    {\n        int read;\n        while ((read = input.Read(buffer, 0, buffer.Length)) > 0)\n        {\n            memoryStream.Write(buffer, 0, read);\n        }\n\n        return memoryStream.ToArray();\n    }\n\n} \n```", "```cs\npublic class Result\n{\n    public bool IsHotdog { get; set; }\n    public float Confidence { get; set; }\n    public byte[] PhotoBytes { get; set; }\n} \n```", "```cs\nvoid Classifier_ClassificationCompleted(object sender, ClassificationEventArgs e)\n{\n    classifier.ClassificationCompleted -= \n    Classifier_ClassificationCompleted;\n\n     Result result = null;\n\n     if (e.Classifications.Any())\n     {\n         var classificationResult = \n         e.Classifications.OrderByDescending(x => x.Value).First();\n\n         result = new Result()\n         {\n             IsHotdog = classificationResult.Key == \"hotdog\",\n             Confidence = classificationResult.Value,\n             PhotoBytes = bytes\n         };\n    }\n    else\n    {\n        result = new Result()\n        {\n            IsHotDog = false,\n            Confidence = 1.0f,\n            PhotoBytes = bytes\n        };\n    } \n} \n```", "```cs\npublic ICommand TakePhoto => new Command(async() =>\n{\n     var photo = await CrossMedia.Current.TakePhotoAsync(new \n     StoreCameraMediaOptions()\n     {\n       DefaultCamera = CameraDevice.Rear\n     });\n\n   HandlePhoto(photo);\n});\n\n```", "```cs\n public ICommand PickPhoto => new Command(async () =>\n {\n     var photo = await CrossMedia.Current.PickPhotoAsync();\n\n     HandlePhoto(photo);\n });\n```", "```cs\n<ContentPage  \n\n              x:Class=\"HotDogOrNot.Views.MainView\"\n              Title=\"Hot dog or Not hot dog\">\n     <ContentPage.Content>\n         <StackLayout VerticalOptions=\"Center\">\n             <Button Text=\"Take Photo\" Command=\"{Binding TakePhoto}\" />\n             <Button Text=\"Pick Photo\" Command=\"{Binding PickPhoto}\" />\n         </StackLayout>\n     </ContentPage.Content>\n</ContentPage>\n```", "```cs\npublic MainView(MainViewModel viewModel)\n{\n    InitializeComponent();\n\n    BindingContext = viewModel;\n    NavigationPage.SetBackButtonTitle(this, string.Empty);\n}\n```", "```cs\npublic App()\n{\n    InitializeComponent();\n\n    var mainView = Resolver.Resolve<MainView>();\n var navigationPage = new NavigationPage(mainView);\n\n ViewModel.Navigation = navigationPage.Navigation;\n\n MainPage = navigationPage;\n}\n```", "```cs\nusing HotdogOrNot.Models;\n\nnamespace HotDogOrNot.ViewModels\n{\n    public class ResultViewModel : ViewModel\n    { \n        private string title;\n        public string Title\n        {\n            get => title;\n            set => Set(ref title, value);\n        }\n\n        private string description;\n        public string Description\n        {\n            get => description;\n            set => Set(ref description, value);\n        }\n\n        private byte[] photoBytes;\n        public byte[] PhotoBytes\n        {\n            get => photoBytes;\n            set => Set(ref photoBytes, value);\n        } \n    }\n}\n```", "```cs\npublic void Initialize(Result result)\n{\n    PhotoBytes = result.PhotoBytes;\n\n    if (result.IsHotdog && result.Confidence > 0.9)\n    {\n        Title = \"Hot dog\";\n        Description = \"This is for sure a hot dog\";\n    }\n    else if (result.IsHotdog)\n    {\n        Title = \"Maybe\";\n        Description = \"This is maybe a hot dog\";\n    }\n    else\n    {\n        Title = \"Not a hot dog\";\n        Description = \"This is not a hot dog\";\n    }\n} \n```", "```cs\nusing System;\nusing System.Globalization;\nusing System.IO;\nusing Xamarin.Forms;\n\npublic class BytesToImageConverter : IValueConverter\n{ \n    public object Convert(object value, Type targetType, object \n    parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n\n   public object ConvertBack(object value, Type targetType, object \n   parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n}\n\n```", "```cs\npublic object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n{\n    if(value == null)\n    {\n        return null;\n    }\n\n    var bytes = (byte[])value;\n    var stream = new MemoryStream(bytes);\n\n    return ImageSource.FromStream(() => stream);\n} \n```", "```cs\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n             xmlns:converters=\"clr-namespace:HotdogOrNot.Converters\"\n             x:Class=\"HotdogOrNot.Views.ResultView\"\n             Title=\"{Binding Title}\">\n<ContentPage.Resources>\n         <converters:BytesToImageConverter x:Key=\"ToImage\" />\n</ContentPage.Resources>\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"2*\" />\n            <RowDefinition Height=\"*\" />\n        </Grid.RowDefinitions>\n\n        <Image Source=\"{Binding PhotoBytes, Converter=\n        {StaticResource ToImage}}\" Aspect=\"AspectFill\" />\n        <Label Grid.Row=\"1\" HorizontalOptions=\"Center\" \n        FontAttributes=\"Bold\" Margin=\"10\" Text=\"{Binding \n        Description}\" />\n    </Grid>\n</ContentPage> \n```", "```cs\npublic ResultView (ResultViewModel viewModel)\n{\n    InitializeComponent ();\n\n    BindingContext = viewModel;\n}\n```", "```cs\nvar view = Resolver.Resolve<ResultView>();\n((ResultViewModel)view.BindingContext).Initialize(result);\n\nNavigation.PushAsync(view);\n```"]