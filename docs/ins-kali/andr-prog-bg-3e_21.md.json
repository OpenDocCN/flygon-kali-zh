["```kt\nandroid:theme=\n\"@android:style/Theme.Holo.Light.NoActionBar.Fullscreen\"\n```", "```kt\n\u2026\n<activity android:name=\".LiveDrawingActivity\"\n\u00a0\u00a0\u00a0\u00a0\u00a0android:theme=\n\u00a0\u00a0\u00a0\u00a0\u00a0\"@android:style/\n\u00a0\u00a0\u00a0\u00a0\u00a0Theme.Holo.Light.NoActionBar.Fullscreen\"\n\u00a0\u00a0\u00a0\u00a0\u00a0>\n\u00a0\u00a0\u00a0\u00a0\u00a0<intent-filter>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<action android:name=\"android.intent.action.MAIN\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n<category android:name= \"android.intent.category.LAUNCHER\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0</intent-filter>\n</activity>\n\u2026\n```", "```kt\nimport android.app.Activity;\nimport android.graphics.Point;\nimport android.os.Bundle;\nimport android.view.Display;\nimport android.view.Window;\npublic class LiveDrawingActivity extends Activity {\n\u00a0\u00a0\u00a0\u00a0private LiveDrawingView mLiveDrawingView;\n\u00a0\u00a0\u00a0\u00a0@Override\n\u00a0\u00a0\u00a0\u00a0protected void onCreate(Bundle savedInstanceState) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onCreate(savedInstanceState);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requestWindowFeature(Window.FEATURE_NO_TITLE);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Display display = getWindowManager()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.getDefaultDisplay();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Point size = new Point();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0display.getSize(size);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mLiveDrawingView = new LiveDrawingView(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this, size.x, size.y);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setContentView(mLiveDrawingView);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\nrequestWindowFeature(Window.FEATURE_NO_TITLE);\n```", "```kt\nDisplay display = getWindowManager().getDefaultDisplay();\n```", "```kt\nprivate LiveDrawingView mLiveDrawingView;\n```", "```kt\nmLiveDrawingView = new LiveDrawingView(this, size.x, size.y);\n```", "```kt\nsetContentView(mLiveDrawingView);\n```", "```kt\n@Override\nprotected void onResume() {\n\u00a0\u00a0\u00a0super.onResume();\n\u00a0\u00a0\u00a0// More code here later in the chapter\n}\n@Override\nprotected void onPause() {\n\u00a0\u00a0\u00a0super.onPause();\n\u00a0\u00a0\u00a0// More code here later in the chapter\n}\n```", "```kt\nclass LiveDrawingView extends SurfaceView {\n```", "```kt\nimport android..SurfaceView\n```", "```kt\nmLiveDrawingView = new LiveDrawingView(this, size.x, size.y);\n```", "```kt\n// The LiveDrawingView constructor\n// Called when this line:\n// mLiveDrawingView = new LiveDrawingView(this, size.x, size.y);\n// is executed from LiveDrawingActivity\npublic LiveDrawingView(Context context, int x, int y) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Super... calls the parent class\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// constructor of SurfaceView\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// provided by the Android API\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(context);\n}\n```", "```kt\n// Are we debugging?\nprivate final boolean DEBUGGING = true;\n// These objects are needed to do the drawing\nprivate SurfaceHolder mOurHolder;\nprivate Canvas mCanvas;\nprivate Paint mPaint;\n// How many frames per second did we get?\nprivate long mFPS;\n// The number of milliseconds in a second\nprivate final int MILLIS_IN_SECOND = 1000;\n// Holds the resolution of the screen\nprivate int mScreenX;\nprivate int mScreenY;\n// How big will the text be?\nprivate int mFontSize;\nprivate int mFontMargin;\n// The particle systems will be declared here later\n// These will be used to make simple buttons\n```", "```kt\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.view.SurfaceHolder;\n```", "```kt\n// These objects are needed to do the drawing\nprivate SurfaceHolder mOurHolder;\nprivate Canvas mCanvas;\nprivate Paint mPaint;\n```", "```kt\n// How many frames per second did we get?\nprivate long mFPS;\n// The number of milliseconds in a second\nprivate final int MILLIS_IN_SECOND = 1000;\n```", "```kt\n// Holds the resolution of the screen\nprivate int mScreenX;\nprivate int mScreenY;\n// How big will the text be?\nprivate int mFontSize;\nprivate int mFontMargin;\n```", "```kt\npublic LiveDrawingView(Context context, int x, int y) {\n\u00a0\u00a0\u00a0// Super... calls the parent class\n\u00a0\u00a0\u00a0// constructor of SurfaceView\n\u00a0\u00a0\u00a0// provided by Android\n\u00a0\u00a0\u00a0super(context);\n\u00a0\u00a0\u00a0// Initialize these two members/fields\n\u00a0\u00a0\u00a0// With the values passed in as parameters\n\u00a0\u00a0\u00a0mScreenX = x;\n\u00a0\u00a0\u00a0mScreenY = y;\n\u00a0\u00a0\u00a0// Font is 5% (1/20th) of screen width\n\u00a0\u00a0\u00a0mFontSize = mScreenX / 20;\n\u00a0\u00a0\u00a0// Margin is 1.3% (1/75th) of screen width\n\u00a0\u00a0\u00a0mFontMargin = mScreenX / 75;\n\u00a0\u00a0\u00a0// getHolder is a method of SurfaceView\n\u00a0\u00a0\u00a0\u00a0mOurHolder = getHolder();\n\u00a0\u00a0\u00a0mPaint = new Paint();\n\u00a0\u00a0\u00a0// Initialize the two buttons\n\u00a0\u00a0\u00a0// Initialize the particles and their systems\n}\n```", "```kt\n// Initialize these two members/fields\n\u00a0\u00a0\u00a0// With the values passed in as parameters\n\u00a0\u00a0\u00a0mScreenX = x;\n\u00a0\u00a0\u00a0mScreenY = y;\n```", "```kt\n\u00a0\u00a0\u00a0// Font is 5% (1/20th) of screen width\n\u00a0\u00a0\u00a0mFontSize = mScreenX / 20;\n\u00a0\u00a0\u00a0// Margin is 1.3% (1/75th) of screen width\n\u00a0\u00a0\u00a0mFontMargin = mScreenX / 75;\n```", "```kt\n\u00a0\u00a0\u00a0// getHolder is a method of SurfaceView\n\u00a0\u00a0\u00a0mOurHolder = getHolder();\n\u00a0\u00a0\u00a0mPaint = new Paint();\n```", "```kt\n// Draw the particle systems and the HUD\nprivate void draw() {\nif (mOurHolder.getSurface().isValid()) {\n// Lock the canvas (graphics memory) ready to draw\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mCanvas = mOurHolder.lockCanvas();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Fill the screen with a solid color\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mCanvas.drawColor(Color.argb(255, 0, 0, 0));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Choose a color to paint with\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPaint.setColor(Color.argb(255, 255, 255, 255));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Choose the font size\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPaint.setTextSize(mFontSize);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Draw the particle systems\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Draw the buttons\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Draw the HUD\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(DEBUGGING){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printDebuggingText();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Display the drawing on screen\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// unlockCanvasAndPost is a method of\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SurfaceHolder\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mOurHolder.unlockCanvasAndPost(mCanvas);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\nimport android.graphics.Color;\n```", "```kt\nprivate void printDebuggingText(){\n\u00a0\u00a0\u00a0int debugSize = mFontSize / 2;\n\u00a0\u00a0\u00a0int debugStart = 150;\n\u00a0\u00a0\u00a0mPaint.setTextSize(debugSize);\n\u00a0\u00a0\u00a0mCanvas.drawText(\"FPS: \" + mFPS ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010, debugStart + debugSize, mPaint);\n\u00a0\u00a0\u00a0// We will add more code here in the next chapter\n}\n```", "```kt\nif (mOurHolder.getSurface().isValid()) {\n// Lock the canvas (graphics memory) ready to draw\nmCanvas = mOurHolder.lockCanvas(); \n\u2026\n\u2026\n```", "```kt\n// Display the drawing on screen\n// unlockCanvasAndPost is a method of SurfaceHolder\nmOurHolder.unlockCanvasAndPost(mCanvas);\n```", "```kt\nThread ourThread;\n```", "```kt\nourThread = new Thread(this);\nourThread.start();\n```", "```kt\nourThread = new Thread(this);\n```", "```kt\nclass someClass extends someotherClass implements Runnable{\n```", "```kt\nclass someClass extends someotherClass implements Runnable{\n\u00a0\u00a0\u00a0@override\nrun(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Anything in here executes in a thread\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// No skill needed on our part\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// It is all handled by Android, the Thread class\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// and the Runnable interface\n}\n}\n```", "```kt\n@override\npublic void run() {\n\n\u00a0\u00a0\u00a0\u00a0// Update the drawing based on\n\u00a0\u00a0\u00a0\u00a0// user input, physics,\n\u00a0\u00a0\u00a0\u00a0// collision detection and artificial intelligence\n\u00a0\u00a0\u00a0\u00a0update();\n\n\u00a0\u00a0\u00a0\u00a0// Draw all the particle systems in their updated \n\u00a0\u00a0\u00a0\u00a0locations\n\u00a0\u00a0\u00a0\u00a0draw();\n\n}\n```", "```kt\nourThread.join();\n```", "```kt\nclass LiveDrawingView extends SurfaceView implements Runnable{\n```", "```kt\n// When we start the thread with:\n// mThread.start();\n// the run method is continuously called by Android\n// because we implemented the Runnable interface\n// Calling mThread.join();\n// will stop the thread\n@Override\npublic void run() {\n}\n```", "```kt\n// Here is the Thread and two control variables\nprivate Thread mThread = null;\n// This volatile variable can be accessed\n// from inside and outside the thread\nprivate volatile boolean mDrawing;\nprivate boolean mPaused = true;\n```", "```kt\n// This method is called by LiveDrawingActivity\n// when the user quits the app\npublic void pause() {\n\u00a0\u00a0\u00a0// Set mDrawing to false\n\u00a0\u00a0\u00a0// Stopping the thread isn't\n\u00a0\u00a0\u00a0// always instant\n\u00a0\u00a0\u00a0mDrawing = false;\n\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Stop the thread\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mThread.join();\n\u00a0\u00a0\u00a0} catch (InterruptedException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.e(\"Error:\", \"joining thread\");\n\u00a0\u00a0\u00a0}\n}\n// This method is called by LiveDrawingActivity\n// when the player starts the app\npublic void resume() {\n\u00a0\u00a0\u00a0mDrawing = true;\n\u00a0\u00a0\u00a0// Initialize the instance of Thread\n\u00a0\u00a0\u00a0mThread = new Thread(this);\n\u00a0\u00a0\u00a0// Start the thread\n\u00a0\u00a0\u00a0mThread.start();\n}\n```", "```kt\n@Override\nprotected void onResume() {\n\u00a0\u00a0\u00a0super.onResume();\n\u00a0\u00a0\u00a0// More code here later in the chapter\n\u00a0\u00a0\u00a0mLiveDrawingView.resume();\n}\n@Override\nprotected void onPause() {\n\u00a0\u00a0\u00a0super.onPause();\n\u00a0\u00a0\u00a0// More code here later in the chapter\n\u00a0\u00a0\u00a0mLiveDrawingView.pause();\n}\n```", "```kt\n@Override\npublic void run() {\n\u00a0\u00a0\u00a0// mDrawing gives us finer control\n\u00a0\u00a0\u00a0// rather than just relying on the calls to run\n\u00a0\u00a0\u00a0// mDrawing must be true AND\n\u00a0\u00a0\u00a0// the thread running for the main \n// loop to execute\n\u00a0\u00a0\u00a0while (mDrawing) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// What time is it now at the start of the loop?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0long frameStartTime = System.currentTimeMillis();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Provided the app isn't paused\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// call the update method\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!mPaused){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0update();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Now the particles are in \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// their new positions\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// The movement has been handled and now \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// we can draw the scene.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0draw();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// How long did this frame/loop take?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Store the answer in timeThisFrame\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0long timeThisFrame = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.currentTimeMillis() - \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frameStartTime;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Make sure timeThisFrame is at least 1 \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// millisecond because accidentally dividing \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// by zero crashes the app\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (timeThisFrame > 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Store the current frame rate in mFPS\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ready to pass to the update methods of\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// of our particles in the next frame/loop\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mFPS = MILLIS_IN_SECOND / timeThisFrame;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\nprivate void update() {\n\u00a0\u00a0\u00a0// Update the particles\n}\n```", "```kt\n@Override\npublic void run() {\n\u00a0\u00a0\u00a0// mPlaying gives us finer control\n\u00a0\u00a0\u00a0// rather than just relying on the calls to run\n\u00a0\u00a0\u00a0// mPlaying must be true AND\n\u00a0\u00a0\u00a0// the thread running for the main \n\u00a0\u00a0\u00a0// loop to execute\n\u00a0\u00a0\u00a0while (mPlaying) {\n```", "```kt\n\u00a0\u00a0\u00a0// What time is it now at the start of the loop?\n\u00a0\u00a0\u00a0long frameStartTime = System.currentTimeMillis();\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Provided the app isn't paused\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// call the update method\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!mPaused){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0update();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Now the particles are in \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// their new positions\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// The movement has been handled and collisions\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// detected now we can draw the scene.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0draw();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// How long did this frame/loop take?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Store the answer in timeThisFrame\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0long timeThisFrame = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.currentTimeMillis() - \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frameStartTime;\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Make sure timeThisFrame is at least 1 \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// millisecond because accidentally dividing \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// by zero crashes the app\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (timeThisFrame > 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Store the current frame rate in mFPS\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ready to pass to the update methods of\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// the particles in the next frame/loop\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mFPS = MILLIS_IN_SECOND / timeThisFrame;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\nmSpeed / mFPS \n```"]