- en: Working with Frameworks and Libraries
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 与框架和库一起工作
- en: Very few languages exist in a self-contained, monolithic ivory tower. Almost
    always, especially with any modern language, third-party code is used in programs
    for added functionality. Using third-party code, such as libraries and frameworks,
    is also an integral part of working with JavaScript. Let's examine a few of the
    more popular open source tools in our toolkit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有语言存在于一个自包含的、整体的象牙塔中。几乎总是，特别是对于任何现代语言，程序中都会使用第三方代码来增加功能。使用第三方代码，比如库和框架，也是使用JavaScript的一个重要部分。让我们来看看我们工具包中一些更受欢迎的开源工具。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: jQuery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery
- en: Angular
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular
- en: React and React Native
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React和React Native
- en: Vue.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue.js
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be prepared to work with the code provided in the `Chapter-8` directory of the
    repository: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好使用存储库的`Chapter-8`目录中提供的代码：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8)。由于我们将使用命令行工具，还要准备好你的终端或命令行shell。我们需要一个现代浏览器和一个本地代码编辑器。
- en: jQuery
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery
- en: One of the principal reasons for creating or using a JavaScript library is to
    ease repetitive or complex tasks. After all, you can't fundamentally *change*
    a language with a plugin or library—all you can do is augment or alter the existing
    functionality.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建或使用JavaScript库的主要原因之一是为了简化重复或复杂的任务。毕竟，你不能通过插件或库从根本上*改变*一种语言——你所能做的只是增加或改变现有的功能。
- en: 'As we discussed in [Chapter 1](0883b2ef-ba56-4fbd-b20a-d48997d21a58.xhtml),
    *The Entrance of JavaScript into Mainstream Programming*, JavaScript''s early
    history was a bit of a Wild West scenario. The browser wars were in full effect,
    features were not standardized, and even making an Ajax call required two different
    sets of code: one for Internet Explorer and one for the other browsers.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](0883b2ef-ba56-4fbd-b20a-d48997d21a58.xhtml)中讨论的那样，*JavaScript进入主流编程*，JavaScript的早期历史有点像是一个荒野西部的情景。浏览器之间的战争正在全面展开，功能没有标准化，甚至发起一个Ajax调用都需要两套不同的代码：一套是为了Internet
    Explorer，另一套是为了其他浏览器。
- en: Enter jQuery in 2006, created by John Resign.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，由John Resign创建了jQuery。
- en: The lack of standardization across browsers was the impetus for creating jQuery.
    From DOM manipulation to Ajax calls, the syntax and structure of jQuery are a
    "write once, use in all browsers" paradigm. With the development of ES6 and beyond,
    JavaScript *is* getting more standardized. However, there's over a decade of jQuery
    code out there that the majority of JavaScript-heavy websites use. Because of
    these legacy applications, it still enjoys quite a bit of popularity, so it's
    important to our discussion. It's also open source, so there are no licensing
    fees associated with using it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器之间的标准化不足是创建jQuery的动力。从DOM操作到Ajax调用，jQuery的语法和结构是一种“一次编写，所有浏览器使用”的范式。随着ES6及更高版本的开发，JavaScript*正在*变得更加标准化。然而，有超过十年的jQuery代码存在，大多数JavaScript重的网站都在使用。由于这些传统应用程序，它仍然非常受欢迎，因此对我们的讨论很重要。它也是开源的，因此使用它不需要许可费。
- en: Advantages of jQuery
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery的优势
- en: 'Consider the following examples, which do the same thing:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子，它们做了同样的事情：
- en: '**JavaScript ES6**: `document.querySelector("#main").classList.add`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript ES6**: `document.querySelector("#main").classList.add`'
- en: '`("red")`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`("red")`'
- en: '**jQuery**: `$("#main").addClass("red");`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery**: `$("#main").addClass("red");`'
- en: 'As you can see, jQuery construction is much shorter. Great! Concise code is
    usually a good thing. So, let''s break down this example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，jQuery的构造要简短得多。太好了！简洁的代码通常是一件好事。所以，让我们来分解这个例子：
- en: '![](assets/7b3452fc-c3e8-4c49-80e3-05c835b167cc.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b3452fc-c3e8-4c49-80e3-05c835b167cc.png)'
- en: Figure 8.1 – jQuery syntax
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 - jQuery语法
- en: We start almost all jQuery statements with `$`. This is a convention that's
    been used in many libraries, and actually, it's possible to override the dollar
    notation and use anything you'd like, so you may see examples that start with
    `jQuery`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们几乎所有的jQuery语句都是以`$`开头的。这是许多库中使用的一个惯例，实际上，你可以覆盖美元符号并使用任何你喜欢的东西，所以你可能会看到以`jQuery`开头的例子。
- en: Our selector is a CSS selector, just as we use with `document.querySelector()`.
    A convention is to preface DOM nodes that you've selected via jQuery with dollar
    notation if you store them for later use. So, if we were to store `#main` as a
    variable, it might look like: `const $main = $("#main")`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的选择器是CSS选择器，就像我们在`document.querySelector()`中使用的一样。一个惯例是，如果你要存储通过jQuery选择的DOM节点以供以后使用，就用美元符号表示。所以，如果我们要将`#main`存储为一个变量，它可能看起来像这样：`const
    $main = $("#main")`。
- en: jQuery has its own list of functions that are usually legible shorthands for
    internal functionality.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jQuery有自己的一系列函数，通常是内部功能的可读性缩写。
- en: 'One interesting fact about jQuery: you can mix jQuery with vanilla JavaScript
    (which is not using any frameworks or libraries). In fact, the term "vanilla JavaScript"
    is a popular way of referring to non-jQuery code.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 关于jQuery的一个有趣的事实：你可以将jQuery与原生JavaScript（即*不使用任何框架或库*）混合使用。事实上，“原生JavaScript”这个术语是指非jQuery代码的一种常用方式。
- en: Additionally, some frontend libraries, such as Bootstrap, prior to Bootstrap
    5, are built with jQuery, so understanding its usage can help you understand other
    libraries and frameworks. It's not a *bad* thing, but important to be aware of
    as you navigate the brave new world of frontend development.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些前端库，如Bootstrap，在Bootstrap 5之前，是使用jQuery构建的，因此了解其用法可以帮助你了解其他库和框架。这并不是一个*坏*事，但在你探索前端开发的新世界时要注意这一点。
- en: Disadvantages of jQuery
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery的缺点
- en: 'Using jQuery, as with any library, requires an additional download on the client
    side. As of the time of writing, jQuery version 3.4.1''s minified version clocks
    in at 88 KB. Now, while that''s pretty negligible and will be cached by the browser,
    keep in mind that this must be executed and loaded on every single page, so it''s
    not just the download size but also the execution time that should be considered.
    Wes Bos also has some great information about scoping in ES6 versus jQuery: [https://wesbos.com/javascript-arrow-functions/](https://wesbos.com/javascript-arrow-functions/).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery，就像使用任何库一样，需要在客户端上进行额外的下载。截至撰写本文时，jQuery 3.4.1的压缩版本大小为88 KB。尽管这在很大程度上可以忽略不计，并且将被浏览器缓存，但请记住，这必须在每个页面上执行和加载，因此不仅要考虑下载大小，还要考虑执行时间。Wes
    Bos还有一些关于ES6和jQuery中作用域的很好的信息：[https://wesbos.com/javascript-arrow-functions/](https://wesbos.com/javascript-arrow-functions/)。
- en: Also, while not true in all cases, much of jQuery's usage exists to standardize
    ES5, so the majority of code you'll see online and in examples will be ES5.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，虽然并非所有情况都是如此，但大部分jQuery的用法存在是为了标准化ES5，所以你在网上和示例中看到的大部分代码都是ES5。
- en: Examples of jQuery
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery的例子
- en: Let's compare our original Star Wars exploration from [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events,
    Event-Driven Design, and APIs* ([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi))
    with a jQuery version ([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi-jQuery](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi-jQuery)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下我们原始的星球大战探索[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)，“事件、事件驱动设计和API”([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi))与jQuery版本([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi-jQuery](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi-jQuery))。
- en: Now, I'll grant that this is not the most elegant piece of jQuery, but there
    are reasons for why that is so. Let's break this down.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我承认这并不是最优雅的jQuery代码，但这样做是有原因的。让我们来分析一下。
- en: 'First up—HTML:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是HTML：
- en: '| **ES6** | **jQuery** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **ES6** | **jQuery** |'
- en: '| No change | Addition of `<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>`
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 无变化 | 添加`<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>`
    |'
- en: As we discussed, adding in a JavaScript library or framework inherently needs
    another file download and/or overhead processing time from local files. Usually,
    the size is negligible, so in this case, the only relevant factor is that we're
    adding a line of HTML to load the jQuery file from a global content delivery network.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论过的，添加JavaScript库或框架本质上需要从本地文件下载另一个文件，并/或者需要额外的处理时间。通常，大小是可以忽略不计的，所以在这种情况下，唯一相关的因素是我们需要添加一行HTML来从全局内容传递网络加载jQuery文件。
- en: 'There will be no change to the CSS, as expected. So let''s dive into the JavaScript:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CSS不会有变化，这是预期的。所以让我们深入JavaScript：
- en: '| **ES6** | **jQuery** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **ES6** | **jQuery** |'
- en: '|'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: OK, now we're seeing some major differences. As mentioned, this isn't necessarily
    the most ideal jQuery program, but I think it gets the point across. To start
    with, while jQuery and ES6 are compatible, most jQuery is used where ES6 isn't
    available—or the code hasn't been upgraded yet to ES6\. One of the first things
    you'll notice about most jQuery code is that it uses semicolons at the end of
    lines and uses `var` instead of `let` or `const`. This isn't unique to jQuery;
    rather, they are ES5 conventions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们看到了一些主要的区别。正如前面提到的，这并不一定是最理想的jQuery程序，但我认为它能传达出要点。首先，虽然jQuery和ES6是兼容的，但大多数情况下，jQuery是在ES6不可用的地方使用的，或者代码尚未升级到ES6。你会注意到大多数jQuery代码的第一件事是，在行尾使用分号，并使用`var`而不是`let`或`const`。这并不是jQuery独有的，而是ES5的约定。
- en: 'Instead of using classes, ES5 usually uses manipulation of an object prototype,
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ES5通常使用对象原型的操作，而不是使用类，如下所示：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Classes are arguably cleaner ways to do work because they are more self-contained
    and explicit in their methods and usage. However, this convention wasn't around
    when jQuery was popular, so we'll use ES5 prototypal inheritance.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类可以说是更干净的工作方式，因为它们在方法和用法上更加自包含和明确。然而，当jQuery流行时，这种约定还不存在，所以我们将使用ES5原型继承。
- en: 'Let''s now take a side-by-side look at how making Ajax calls with ES6 and jQuery
    differ:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们一起看看使用ES6和jQuery进行Ajax调用的不同之处：
- en: '| **ES6** | **jQuery** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **ES6** | **jQuery** |'
- en: '|'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Here's a great example of the why of jQuery and how its creation contributed
    to some simplifications in ES6\. In ES5, making an Ajax request required two different
    methods of doing so—one for Internet Explorer and one for other browsers—as the
    requesting methods weren't standardized. jQuery helped by doing that browser detection
    and code-switching *under the hood* so that a developer only needed to write one
    statement. With `fetch`, however, this is no longer needed. However, we do see
    that the jQuery code is a little shorter because we don't have the first `.then` function to
    return the JSON from the request. Is this a design flaw or feature? It's actually
    the latter, as APIs could return many different kinds of responses. The `fetch`
    method does some conversion for you under the hood, whereas jQuery expects you
    to pretty much know what your data is and how to work with it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，说明了为什么要使用jQuery以及它的创建如何促进了ES6的一些简化。在ES5中，进行Ajax请求需要两种不同的方法——一种是针对Internet
    Explorer，另一种是针对其他浏览器——因为请求方法并没有标准化。jQuery通过在幕后进行浏览器检测和代码切换来帮助开发人员，这样开发人员只需要编写一条语句。然而，使用`fetch`就不再需要这样做了。不过，我们可以看到jQuery代码稍微短一些，因为我们没有第一个`.then`函数来返回请求的JSON。这是设计缺陷还是特性？实际上是后者，因为API可能返回许多不同类型的响应。`fetch`方法在幕后为您进行了一些转换，而jQuery则希望您基本上知道您的数据是什么以及如何处理它。
- en: 'W3Schools has great examples and reference material on jQuery: [https://www.w3schools.com/jquery/](https://www.w3schools.com/jquery/).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: W3Schools在jQuery上有很好的示例和参考资料：[https://www.w3schools.com/jquery/](https://www.w3schools.com/jquery/)。
- en: 'If you review the rest of the code in the jQuery version of the code, you''ll
    find many other interesting examples of differences, but for now—onward from jQuery!
    Let''s take a look at a fully fledged *web framework*: Angular.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看jQuery版本的其余代码，您会发现许多其他有趣的差异示例，但现在——从jQuery继续前进！让我们来看看一个完整的*web框架*：Angular。
- en: Angular
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular
- en: 'Angular was created by Google as *AngularJS.* In 2016, it was rewritten as
    version 2, separating it from AngularJS. It''s open source and a framework, versus
    a library, which now raises the question: what''s the difference between a **framework**
    and a **library**?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Angular由Google创建为*AngularJS*。在2016年，它被重写为版本2，使其与AngularJS分离。它是开源的框架，而不是库，现在引发了一个问题：**框架**和**库**之间有什么区别？
- en: A *library* is a toolkit to more easily write your code, for varying purposes.
    To use an architectural analogy, a library is like a set of bricks that can be
    used to assemble a house. Conversely, a *framework* is more aligned with the blueprints
    used to design the house. It may use some of the same bricks—or it might not!
    One of the main differences is that libraries, in general, allow you to write
    your code as you would like to write it without the library dictating opinions
    on how to structure your code. Frameworks, on the other hand, are more opinionated
    and ask you to structure your code in the best practices of *that* framework.
    It's a nebulous (and sometimes overloaded) term, so there's an understandable
    amount of debate on what's a library and what's a framework. Just search *Stack
    Overflow* and you'll find competing definitions. A good simplified statement is
    that a **framework** can be a collection of technologies with a specified use
    pattern, whereas a **library** is more likely to be one technology that helps
    manipulate your data.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*库*是一个工具包，用于更轻松地编写您的代码，用于不同的目的。使用建筑类比，库就像一套可以用来组装房子的砖头。相反，*框架*更类似于设计房子所使用的蓝图。它可能使用一些相同的砖头，也可能不使用！主要区别之一是，一般来说，库允许您按照自己想要的方式编写代码，而不会让库对如何构建代码的结构发表意见。另一方面，框架更具有意见，并要求您按照*该*框架的最佳实践来构建代码。这是一个模糊的（有时是过载的）术语，因此对于什么是库和什么是框架存在可以理解的争论。只需搜索*Stack
    Overflow*，您就会找到竞争性的定义。一个很好的简化陈述是，**框架**可以是一组具有指定使用模式的技术，而**库**更有可能是一种帮助操作数据的技术。'
- en: 'Let''s consider this diagram:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑这个图表：
- en: '![](assets/fd9b66a9-b387-4586-99af-a7a15553517f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fd9b66a9-b387-4586-99af-a7a15553517f.png)'
- en: Figure 8.2 – Framework composition
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 - 框架组成
- en: As we can see, a framework can, in fact, be comprised of multiple libraries.
    The design pattern of the framework usually dictates how and when these libraries
    are used.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，框架实际上可以由多个库组成。框架的设计模式通常决定了这些库的使用方式和时间。
- en: Angular uses *TypeScript*, which is an open source programming language. Originally
    developed by Microsoft, it's JavaScript with some additional functionality that
    is—or can be—appealing to some developers. Even though TypeScript is classified
    as its own language, it's a superset of JavaScript, so it transpiles down to normal
    JavaScript and thus doesn't require any additional work to run in a browser, aside
    from executing the Angular build process.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Angular使用*TypeScript*，这是一种开源的编程语言。最初由微软开发，它是JavaScript的一个超集，具有一些额外的功能，对一些开发人员来说是吸引人的。尽管TypeScript被归类为自己的语言，但它是JavaScript的超集，因此可以转换为普通JavaScript，因此在浏览器中运行时不需要额外的工作，除了执行Angular构建过程。
- en: Advantages of Angular
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular的优势
- en: 'Angular, like most frameworks, is opinionated about your file structure and code
    syntax (especially with TypeScript in the mix). This may sound like a disadvantage,
    but it''s actually really important when working in a team: you have been seeded
    with existing file structures regarding how to work with your code, and this is
    a *good* thing.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Angular，像大多数框架一样，对您的文件结构和代码语法有自己的看法（特别是在混合使用TypeScript时）。这可能听起来像一个缺点，但实际上在团队合作中非常重要：您已经有了关于如何处理代码的现有文件结构，这是一件*好*事情。
- en: 'Angular also does not exist in isolation. It''s part of a **technology stack**,
    which means that it''s a soup-to-nuts solution encompassing the frontend to a
    database. You may have encountered the term **MEAN** stack: **MongoDB, Express,
    Angular, and Node.js**. While you can use Angular outside of this stack, it provides
    an easy-to-setup ecosystem for development that is well understood by others.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Angular也不是独立存在的。它是**技术栈**的一部分，这意味着它是一个从前端到数据库的一揽子解决方案。您可能已经遇到过**MEAN**技术栈这个术语：**MongoDB,
    Express, Angular, 和 Node.js**。虽然您可以在这个技术栈之外使用Angular，但它提供了一个易于设置的开发生态系统，被他人广泛理解。
- en: If you're not familiar with the **Model-View-Controller** (**MVC**) paradigm,
    now is a good time to get acquainted with it. Many technology stacks across multiple
    languages utilize this paradigm to separate concerns in your code base. For example,
    the **model** in your program works with the data acquisition and manipulation
    from your data source(s) (such as a database and/or APIs), while the **controller**
    manages the interactions between the model, data sources, and the **view** layer.
    The **view** mostly controls the visual display of the information in a full-stack
    environment. There is debate within the full-stack MVC community, as far as approaches
    go, between the so-called "fat model, skinny controller" approaches, and the converse.
    It's not important right now to go into that distinction, but you'll see that
    debate in the community.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对**Model-View-Controller**（**MVC**）范例不熟悉，现在是熟悉它的好时机。许多技术堆栈跨越多种语言利用这种范例来分离代码库中的关注点。例如，程序中的**模型**与数据源（如数据库和/或API）的数据获取和操作进行交互，而**控制器**管理模型、数据源和**视图**层之间的交互。**视图**主要控制全栈环境中信息的视觉显示。在全栈MVC社区内存在争议，就方法而言，所谓的“模型臃肿，控制器瘦身”方法和相反的方法之间存在争论。现在不重要去讨论这种区别，但您会在社区中看到这种争论。
- en: Speaking of community, there's the fact that Angular developers have formed
    an ad hoc network of people helping each other out. The discussions alone are
    valuable and help you navigate the landscape.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到社区，事实上Angular开发人员已经形成了一个临时网络，相互帮助。单单讨论就很有价值，可以帮助您在这个领域中导航。
- en: There are a few other advantages to Angular, such as two-way data binding (making
    sure the model and view talk to each other) and specialized directives bound to
    HTML elements, but those are nuances that aren't important to discuss right now.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Angular还有一些其他优点，比如双向数据绑定（确保模型和视图相互通信）和绑定到HTML元素的专门指令，但这些都是现在不重要讨论的细微差别。
- en: Disadvantages of Angular
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular的缺点
- en: The main con of Angular is its steep learning curve. Along with the discrepancy
    between the original AngularJS and the more modern Angular iterations, Angular
    is, unfortunately, suffering from decreasing popularity among developers. Additionally,
    it is *quite* verbose and complex. According to some Angular developers, tasks
    such as working with third-party libraries can be repetitive.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的主要缺点是其陡峭的学习曲线。除了原始的AngularJS和更现代的Angular迭代之间的差异之外，Angular不幸地在开发人员中的流行度正在下降。此外，它*相当*冗长和复杂。根据一些Angular开发人员的说法，诸如使用第三方库之类的任务可能会重复。
- en: The use of TypeScript instead of standard ES6 is also a point of concern. While
    TypeScript is useful, it adds to the learning curve of using Angular. That being
    said, Angular is indeed very versatile.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript而不是标准的ES6也是一个值得关注的问题。虽然TypeScript很有用，但它增加了使用Angular的学习曲线。也就是说，Angular确实非常灵活。
- en: Examples of Angular
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular的例子
- en: Let's build a small "Hello World" application with Angular. We'll need a few
    tools to start our work, such as `npm`. Refer to [Chapter 2](94fc54d0-7655-4e18-ac2b-762a0752afaa.xhtml),
    *Can We Use JavaScript Server-Side? Sure!,* for installation of `npm` and its
    friends. If you'd prefer, you can also follow along with the code provided at
    [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/angular-example](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/angular-example).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用Angular构建一个小的“Hello World”应用程序。我们需要一些工具来开始我们的工作，比如`npm`。参考[第2章](94fc54d0-7655-4e18-ac2b-762a0752afaa.xhtml)，*我们可以在服务器端使用JavaScript吗？当然可以！*，来安装`npm`及其相关工具。如果您愿意，您也可以按照提供的代码在[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/angular-example](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/angular-example)进行操作。
- en: 'Here are our steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的步骤：
- en: 'Begin by installing the Angular CLI: `npm install -g @angular-cli`.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先安装Angular CLI：`npm install -g @angular-cli`。
- en: Create a new example project with `ng new example`. Accept the defaults for
    this installation by pressing *Enter* at the prompts.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ng new example`创建一个新的示例项目。按照提示接受此安装的默认设置。
- en: 'Go into the directory that was just created: `cd example`.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入刚刚创建的目录：`cd example`。
- en: 'Begin the server: `ng serve --open`.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：`ng serve --open`。
- en: 'At this point, your web browser should open this page at `http://localhost:4200/`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的网络浏览器应该在`http://localhost:4200/`打开此页面：
- en: '![](assets/02598c51-13b8-48aa-929c-53bed1e9d762.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02598c51-13b8-48aa-929c-53bed1e9d762.png)'
- en: Figure 8.3 – Example start page
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 - 示例起始页面
- en: 'OK, great. This looks like a simple enough page for us to work with. Here''s
    the file structure that our CLI created:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这看起来是一个足够简单的页面供我们使用。这是我们的CLI创建的文件结构：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s look at the code that was generated. Open `src/index.html`. Here''s
    what you''ll see:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下生成的代码。打开`src/index.html`。您会看到：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That's it! You see, this is just a template for Angular to create the page we
    were just looking at, and then the JavaScript does the rest. If you view the source
    of the page in the browser, you'll see something very similar, but just with a
    few script calls. All JavaScript for a **single-page app** (**SPA**) is downloaded
    at once or possibly chunked into blocks intended to be used in harmony.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您看，这只是Angular创建我们刚刚查看的页面的模板，然后JavaScript完成其余工作。如果您在浏览器中查看页面的源代码，您会看到非常相似的内容，只是有一些脚本调用。所有JavaScript都是一次性下载或可能被分块成用于协同使用的块。
- en: Single-page applications
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单页应用程序
- en: It's worth discussing exactly what a SPA is. We've touched on this topic before,
    but let's now take a look at why Angular (and React and Vue, which we'll get to
    shortly) are popular and compelling to use. Think of a standard, HTML-based website.
    It probably has a consistent header, footer, and styling. However, a standard
    website needs to download (or serve from local cache) these assets every time
    you navigate to a different page (not to mention retrieving the HTML and rerendering
    it). A SPA eliminates this redundancy by packaging together all of the relevant
    data into one unified package that's transmitted to the browser. The browser then
    parses the JavaScript and renders it. The result is a fast, smooth experience
    that essentially eliminates page load time lag. You've used these already. If
    you use Gmail or most of the modern online email systems, you may have noticed
    that the page load time is negligible, or, at worst, has a small loading icon.
    The load time and ostensibly wasteful redownload of resources and content is one
    problem that SPAs are designed to handle.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 值得讨论的是什么是SPA。我们之前已经提到过这个话题，但现在让我们来看看为什么Angular（以及我们即将介绍的React和Vue）如此受欢迎和引人注目。想象一个标准的基于HTML的网站。它可能有一个一致的页眉、页脚和样式。然而，一个标准的网站需要在每次导航到不同页面时下载（或从本地缓存中提供）这些资产（更不用说检索HTML并重新呈现它了）。SPA通过将所有相关数据打包到一个统一的包中，然后传输到浏览器中来消除这种冗余。浏览器然后解析JavaScript并呈现它。结果是一个快速、流畅的体验，基本上消除了页面加载时间的延迟。你已经使用过这些了。如果你使用Gmail或大多数现代在线电子邮件系统，你可能已经注意到页面加载时间是可以忽略的，或者最坏的情况下有一个小的加载图标。页面加载时间和表面上浪费的资源和内容重新下载是SPA旨在处理的一个问题。
- en: Now that we've discussed how a SPA can help increase our efficiency, let's take
    a look at the JavaScript behind our Angular example.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了SPA如何帮助提高我们的效率，让我们来看看我们的Angular示例背后的JavaScript。
- en: The JavaScript
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: 'First of all, let''s open `src/app/app.component.html` and look at line 2:
    `{{ title }}!`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们打开`src/app/app.component.html`，看看第2行：`{{ title }}!`。
- en: Hm, what are these curly braces? If you're familiar with other templating languages,
    you may recognize this as a template token that's intended to be replaced by our
    rendering language before being rendered. So, what is the method to replace it?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这些花括号是什么？如果你熟悉其他模板语言，你可能会认出这是一个模板标记，旨在在呈现之前被我们的呈现语言替换。那么，替换它的方法是什么？
- en: 'Let''s now look at `src/app/app.component.ts`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`src/app/app.component.ts`：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can see that the template is referencing `app.component.html` and our `AppComponent`
    class is specifying `title` as `app works!`. That's exactly what we saw in our
    browser. Welcome to the power of a templating system!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到模板引用了`app.component.html`，而我们的`AppComponent`类将`title`指定为`app works!`。这正是我们在浏览器中看到的。欢迎来到模板系统的强大之处！
- en: For now, we won't get into the SPA feature of Angular, but check out the Angular
    tutorial at [https://angular.io/tutorial](https://angular.io/tutorial) for more
    details.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不会深入讨论Angular的SPA特性，但是请查看[https://angular.io/tutorial](https://angular.io/tutorial)上的Angular教程以获取更多详细信息。
- en: Now, let's continue on our tour with React.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续我们的React之旅。
- en: React and React Native
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React和React Native
- en: Originally created by Jordan Walke at Facebook in 2013, React has quickly evolved
    into one of the leading user interface libraries currently in use. In contrast
    with Angular, React does not seek to be a complete framework, but rather focuses
    on specific parts of the web workflow. Since web pages are inherently *stateless*
    (that is, no real information is transferred from page to page), SPAs aim to store
    certain pieces of state in JavaScript memory, enabling subsequent views to be
    populated with data. React is a prime example of how this type of architecture
    works while still not encompassing the entire framework paradigm. In MVC terminology,
    React deals with the view layer.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: React最初是由Facebook的Jordan Walke于2013年创建的，迅速发展成为目前使用最广泛的用户界面库之一。与Angular相比，React并不试图成为一个完整的框架，而是专注于Web工作流的特定部分。由于Web页面本质上是*无状态*的（也就是说，没有真正的信息从页面传递到页面），SPA旨在将某些状态的片段存储在JavaScript内存中，从而使后续视图能够填充数据。React是这种类型架构如何工作的一个典型例子，同时又不包含整个框架范式。在MVC术语中，React处理视图层。
- en: Advantages of React
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React的优势
- en: Since React *itself* only deals with views, it relies on other libraries to
    round out its feature set, such as React Router and Hooks. That is, the base architecture
    of React is designed to be modular and have add-ons used to do other parts of
    the workflow. At the moment, it's not important to know about React Router, Hooks,
    or Redux, but just be aware that React is only one part of the puzzle for a complete
    website.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于React *本身*只处理视图，它依赖于其他库来补充其功能集，比如React Router和Hooks。也就是说，React的基本架构被设计为模块化，并且有附加组件用于执行工作流的其他部分。目前，了解React
    Router、Hooks或Redux并不重要，但要知道React只是完整网站中的一个部分。
- en: So, why is this an advantage? Unlike some other JavaScript tools, such as Angular,
    React doesn't try to reinvent the wheel with its own rules and regulations or
    language structures. It feels like you're coding in basic JavaScript because,
    for the most part, you are!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么这是一个优势呢？与一些其他JavaScript工具（如Angular）不同，React并不试图用自己的规则、法规或语言结构重新发明轮子。它感觉就像你在基本的JavaScript中编码，因为在大多数情况下，你确实是！
- en: Another advantage of React is how it deals with components and templates. Components
    are simply reusable pieces of code that can be used in multiple places in your
    program with different data to populate the view. React also has a great step-by-step
    tutorial at [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html).
    We'll dissect this in the *Examples of React* section. For now, of course, we
    need to discuss the disadvantages.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: React的另一个优势是它如何处理组件和模板。组件只是可重用的代码片段，可以在程序中的多个位置使用不同的数据来填充视图。React还在[https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)上有一个很好的逐步教程。我们将在*React示例*部分对此进行分析。现在，当然，我们需要讨论一下缺点。
- en: Disadvantages of React
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React的缺点
- en: 'To be honest, the learning curve for React (and especially its newer sister
    technologies, such as Redux and Hooks, which simplify state-based management)
    is steep. However, by the community, that''s not even considered a major disadvantage,
    because the same is true with almost all libraries and frameworks. A major disadvantage,
    however, is its rapid pace of development. Now, you may be thinking: *but a continually
    evolving technology is good*! That is good thinking, but in practice, it can be
    a bit daunting, especially when dealing with breaking changes.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，React的学习曲线（尤其是它的新姐妹技术，如Redux和Hooks，简化了基于状态的管理）是陡峭的。然而，对于社区来说，这甚至不被认为是一个主要的缺点，因为几乎所有的库和框架都是如此。然而，一个主要的缺点是它的快速发展速度。现在，你可能会想：“但是一个不断发展的技术是好事”！这是一个好想法，但在实践中，这可能有点令人生畏，特别是在处理重大变化时。
- en: Another turn-off for some developers is the mixing of HTML and JavaScript inside
    JavaScript. It uses a syntax extension that allows adding HTML within your JavaScript
    that is called JSX. For purists, the mixing of presentation layer code into logic
    structures may seem foreign and an architectural anti-pattern. There is, again,
    a learning curve to JSX.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发人员的另一个不喜欢的地方是在JavaScript中混合HTML和JavaScript。它使用一种语法扩展，允许在JavaScript中添加HTML，称为JSX。对于纯粹主义者来说，将表示层代码混合到逻辑结构中可能会显得陌生和构架反模式。再次强调，JSX有一个学习曲线。
- en: 'It''s time to take a look at a classic React example application: Tic Tac Toe.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看一个经典的React示例应用程序了：井字棋。
- en: Example of React
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React示例
- en: 'You can follow along a step-by-step tutorial to build this application at [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html),
    and for ease of use, you can use this GitHub directory—[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/react-tic-tac-toe](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/react-tic-tac-toe)—for
    the completed example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照逐步教程构建此应用程序，网址为[https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)，为了方便使用，您可以使用这个GitHub目录
    - [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/react-tic-tac-toe](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/react-tic-tac-toe)
    - 完整的示例：
- en: Clone the repository and `cd` into the `react-tic-tac-toe` directory.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆存储库并`cd`进入`react-tic-tac-toe`目录。
- en: Execute `yarn start`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`yarn start`。
- en: Don't be surprised by the new `yarn` command. It's a different package manager
    that is similar to `npm`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 不要对新的`yarn`命令感到惊讶。这是一个类似于`npm`的不同的包管理器。
- en: 'When `yarn start` is complete, it will provide you with a URL similar to `http://localhost:3000/`.
    Open it in your browser. You should see this:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`yarn start`完成后，它会为您提供一个类似于`http://localhost:3000/`的URL。在浏览器中打开它。你应该看到这个：
- en: '![](assets/b835bbd5-7d50-4e48-85b0-2cfa2d433f29.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b835bbd5-7d50-4e48-85b0-2cfa2d433f29.png)'
- en: Figure 8.4 – React Tic Tac Toe, starting
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 - React井字棋，开始
- en: If you're not familiar with the game Tic Tac Toe, the logic is simple. Two players
    alternate marking an X or an O in a 3-by-3 grid until one player has three of
    their marks in a row, whether horizontally, vertically, or diagonally.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉井字棋游戏，逻辑很简单。两名玩家轮流在3x3的网格中标记X或O，直到一名玩家在横向、纵向或对角线上有三个标记。
- en: 'Let''s play! If you click the boxes, here''s what you may arrive at:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们玩吧！如果你点击方框，你可能会得到以下结果：
- en: '![](assets/c72eaaa5-a451-4068-8d2c-56d9562eb12a.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c72eaaa5-a451-4068-8d2c-56d9562eb12a.png)'
- en: Figure 8.5 – React Tic Tac Toe, possible end state
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 - React井字棋，可能的结束状态
- en: Notice that the example also maintains a state history with the buttons on the
    right side of the screen. You can rewind play into any of those states by clicking
    the buttons. This is an example of how React uses **state** in order to maintain
    a sense of continuity across parts of the application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，示例还在屏幕右侧的按钮上保持状态历史。您可以通过单击按钮将播放倒带到这些状态中的任何一个。这是React如何使用**状态**来保持应用程序各部分的连续性的一个例子。
- en: Components
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件
- en: To illustrate the concept of reusable components, consider the code for the
    top row of the Tic Tac Toe grid. Take a peek at `src/index.js`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明可重用组件的概念，考虑一下井字棋网格的顶行代码。看一下`src/index.js`。
- en: 'You should see this starting on line 27:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在第27行看到这个：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`renderSquare` is a fairly simple function that renders JavaScript XML, or
    **JSX**. As mentioned before, JSX is an extension to JavaScript. It introduces
    XML-like capabilities in a standard JavaScript file, marrying JavaScript syntax
    with a set of HTML and XML to construct the components we''ve been talking about.
    It''s not its own fully fledged templating language per se, but it might, in some
    ways, actually be more powerful.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderSquare`是一个相当简单的函数，它呈现JavaScript XML，或**JSX**。如前所述，JSX是JavaScript的扩展。它在标准JavaScript文件中引入了类似XML的功能，将JavaScript语法与一组HTML和XML结合起来构建我们一直在谈论的组件。它并不是自己的完全成熟的模板语言，但在某些方面，它实际上可能更强大。'
- en: 'Here''s `renderSquare`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`renderSquare`：
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So far, so good…it''s fairly standard-looking…except for one thing. What is
    `Square`? That''s not an HTML tag! Here''s the power of JSX: we can define our
    own reusable tags as these wonderful components we''ve been talking about. Think
    of them as LEGO® bricks we can use to assemble our own application. From basic
    building blocks, we can construct a very sophisticated SPA.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好...看起来相当标准...除了一件事。什么是`Square`？那不是HTML标签！这就是JSX的威力：我们可以定义自己的可重用标签，就像我们一直在谈论的这些精彩的组件一样。把它们想象成我们可以用来组装自己应用程序的LEGO®积木。从基本的构建块中，我们可以构建一个非常复杂的SPA。
- en: 'Thus, `Square` is simply a function that returns a standard HTML button with
    a few properties, such as its `onClick` handler. You can see what this handler
    does later on in the code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`Square`只是一个返回标准HTML按钮的函数，具有一些属性，例如它的`onClick`处理程序。您可以在代码后面看到这个处理程序的作用：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We've really only scratched the surface of React, but I hope you've gotten a
    sense of its power. In fact, it's poised to be the dominant frontend framework
    in the ecosystem. At the time of writing, React has far eclipsed Angular in the
    number of job openings in the technology world.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是初步了解了React，但我希望你已经感受到了它的强大。事实上，它有望成为生态系统中主导的前端框架。在撰写本文时，React在技术世界的工作机会数量上远远超过了Angular。
- en: React Native
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React Native
- en: A discussion of React would be incomplete without mentioning React Native. One
    of the difficult aspects of native mobile application development is, well, native
    languages. The Android platform utilizes Java, while iOS relies on Swift as a
    programming language. We won't get into the details of mobile development here
    (or React Native), but it's important to note that there are major differences
    between React and React Native. When I first began experimenting with React, I
    was under the impression that the components were reusable between React and React
    Native. To an extent, this is *mildly* true, but the differences between the two
    outweigh the similarities.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 谈论React而不提及React Native是不完整的。原生移动应用程序开发的一个困难之处在于，嗯，原生语言。Android平台使用Java，而iOS依赖Swift作为编程语言。我们不会在这里深入讨论移动开发（或React
    Native），但重要的是要注意React和React Native之间存在重大差异。当我开始尝试React时，我以为组件在React和React Native之间是可重用的。在某种程度上，这是*轻微*正确的，但两者之间的差异超过了相似之处。
- en: Native's main strength comes from the fact that you're not writing in another
    language; rather, you're still writing JavaScript. With that being said, there
    are additional complexities to Native, especially when dealing with the native
    features of a mobile device, such as the camera. To that end, I advise you to
    consider carefully the use of React Native in your project lifespan and do *not*
    assume all knowledge transfers from one to the other.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Native的主要优势在于你不需要使用另一种语言；相反，你仍然在使用JavaScript。话虽如此，Native还存在额外的复杂性，特别是在处理移动设备的原生功能（如相机）时。因此，我建议您在项目生命周期中慎重考虑使用React
    Native，并*不要*假设所有知识都可以从一个项目转移到另一个项目。
- en: 'Next, let''s discuss a relative newcomer to the JavaScript world: Vue.js.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论一下JavaScript世界的新成员：Vue.js。
- en: Vue.js
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js
- en: Another newcomer to the JavaScript framework ecosystem is Vue.js (more commonly
    referred to simply as Vue). Developed in 2014 by Evan You, it's another open source
    framework that's designed to provide advanced functionality for SPAs and user
    interfaces. Evan You felt that there were worthwhile parts of Angular worth keeping,
    yet room for improvement. It's an admirable goal! Some may say the project succeeded
    in doing just that, while others find other projects superior. However, the goal
    of this chapter isn't to pass judgment on any technology but rather to expose
    you to various extensions of JavaScript that will make your work easier and more
    adherent to modern standards.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript框架生态系统中的另一个新成员是Vue.js（通常简称为Vue）。由Evan You于2014年开发，这是另一个旨在为单页应用程序和用户界面提供高级功能的开源框架。Evan
    You认为Angular中有值得保留的部分，但还有改进的空间。这是一个值得赞赏的目标！有人可能会说该项目成功做到了这一点，而其他人则认为其他项目更优秀。然而，本章的目标不是对任何技术进行评判，而是让您了解JavaScript的各种扩展，以使您的工作更轻松，并更符合现代标准。
- en: Vue, unlike React, includes *routing*, *state*, and *build tooling* out of the
    box. It also has a learning curve, as do many similar technologies, so be sure
    to give yourself space and time to learn if you choose to explore Vue.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 与React不同，Vue包含*路由*、*状态*和*构建工具*。它也有一个学习曲线，就像许多类似的技术一样，所以如果您选择探索Vue，请确保给自己足够的空间和时间来学习。
- en: We'll be investigating the base example of Vue from the official guide at [https://vuejs.org/v2/guide/](https://vuejs.org/v2/guide/). If
    you look at the lesson in the *Declarative Rendering *section, you'll find a Scrimba
    lesson. Feel free to watch the tutorial or access the code from [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/vue-tutorial](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/vue-tutorial),
    but here are the basics.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在官方指南的基本示例中研究Vue的基本示例[https://vuejs.org/v2/guide/](https://vuejs.org/v2/guide/)。如果你查看*声明性渲染*部分的课程，你会发现一个Scrimba课程。随意观看教程或从[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/vue-tutorial](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/vue-tutorial)访问代码，但以下是基础知识。
- en: 'The HTML of Vue looks fairly similar to any other framework that uses curly-brace
    tokens for content replacement:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Vue的HTML看起来与使用花括号标记进行内容替换的任何其他框架非常相似：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It's worth noting that the curly-brace syntax will likely conflict with other
    templating systems, such as Mustache, but we'll continue using the built-in Vue
    technologies for now.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，花括号语法可能会与其他模板系统（如Mustache）发生冲突，但我们暂时将继续使用内置的Vue技术。
- en: Since you have the `{{ message }}` token, let's see what powers it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你有`{{ message }}`标记，让我们看看它的功能。
- en: 'If you look at the `index.js` file, you''ll find it is very simple:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`index.js`文件，你会发现它非常简单：
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This basic structure should look familiar: it''s an instantiation of a class
    with an object as a parameter. Note that the data element contains a key of the
    message with the value `Hello Vue`. This is what is passed to the view layer as
    `{{ message }}` and thus our app renders our message:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基本结构应该看起来很熟悉：它是一个带有对象作为参数的类的实例化。请注意，数据元素包含一个带有值`Hello Vue`的消息键。这是传递给视图层的`{{
    message }}`，因此我们的应用程序呈现我们的消息：
- en: '![](assets/dbd93645-a1f0-44fc-b42b-7fb6f8b1598d.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dbd93645-a1f0-44fc-b42b-7fb6f8b1598d.png)'
- en: Figure 8.6 – Vue's "Hello World" example
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 - Vue的“Hello World”示例
- en: So far, its abilities seem similar to other tools we've explored, so let's dive
    into the advantages and disadvantages.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，它的能力似乎与我们探索过的其他工具类似，所以让我们深入探讨其优缺点。
- en: Features of Vue.js
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue.js的特点
- en: 'As the only competitor to Vue in practice is React, it might be enough to leave
    this comparison in your hands: [https://vuejs.org/v2/guide/comparison.html](https://vuejs.org/v2/guide/comparison.html).
    However, let''s break down a couple of points of the comparison with a more objective
    eye, as even the author(s) of the comparison admitted it was biased toward Vue
    (as one would expect):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Vue在实践中唯一的竞争对手是React，也许将这个比较留给你来决定就足够了：[https://vuejs.org/v2/guide/comparison.html](https://vuejs.org/v2/guide/comparison.html)。然而，让我们以更客观的眼光来分析比较的一些要点，因为即使是比较的作者也承认它对Vue有偏见（这是可以预料的）：
- en: '**Performance**: Ideally, any framework or library adds only a negligible load
    time or instantiation time to an application, but in practice, this varies. I''m
    sure we all remember the days of multi-second Ajax or Flash (or even Java servlet!)
    loaders, but in general, these delays have been mitigated by an asynchronous,
    step-by-step loading pattern. One of the signature details of a modern web technology
    should be its unobtrusive and progressive enhancement of the user experience.
    To that point, Vue does an excellent job of being an additive experience.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能：理想情况下，任何框架或库对应用程序的加载时间或实例化时间只会增加可忽略的时间，但实际情况却有所不同。我相信我们都记得多秒级的Ajax或Flash（甚至是Java
    servlet！）加载器的日子，但总的来说，这些延迟已经被异步、分步加载模式所缓解。现代Web技术的一个标志性细节应该是对用户体验的不显眼和渐进式增强。在这一点上，Vue在增强用户体验方面做得非常出色。
- en: '**HTML + JavaScript + CSS**: Vue allows an unprecedented mixing and matching
    of technologies, whereby it can take standard HTML, CSS, and JavaScript combined
    with JSX and Vue-specific syntax in order to construct an application. It''s a
    bit of a mixed bag to say whether this is a benefit or a liability, but it is
    a fact of the technology.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML + JavaScript + CSS：Vue允许技术的混合和匹配，它可以使用标准的HTML、CSS和JavaScript与JSX和Vue特定的语法相结合来构建应用程序。这是一个利弊参半的问题，但这是技术的事实。
- en: '**Angular ideas**: Unlike React, which rejects almost all Angular conventions,
    Vue leverages a few learning points from Angular. This could make it a worthwhile
    framework for someone looking to leave Angular, though the jury is still out on
    the value/efficacy of this approach.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular的思想：与React拒绝几乎所有Angular约定不同，Vue从Angular中借鉴了一些学习要点。这可能使它成为一个值得考虑的框架，适合想要离开Angular的人，尽管对这种方法的价值/效果尚未定论。
- en: Now, let's look at an example of Vue.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个Vue的例子。
- en: Example of Vue.js
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue.js示例
- en: 'Let''s work with the Vue CLI to create a sample project:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Vue CLI创建一个示例项目：
- en: Install the CLI with `npm install -g @vue/cli`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm install -g @vue/cli`安装CLI。
- en: Execute `vue create vue-example` in a new directory. For our purposes, you can
    use the default options by pressing *Enter* at each prompt.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新目录中执行`vue create vue-example`。对于我们的目的，你可以在每个提示处按*Enter*使用默认选项。
- en: 'Enter the directory: `cd vue-example`.'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入目录：`cd vue-example`。
- en: 'Start the program with `yarn serve`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`yarn serve`启动程序：
- en: '![](assets/1d33161d-5c7b-4bbc-9880-0ad1eb76c6fb.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d33161d-5c7b-4bbc-9880-0ad1eb76c6fb.png)'
- en: Figure 8.7 – Vue generator home page
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 - Vue生成器主页
- en: 'Vue''s CLI generator created a number of files for us in the `vue-example`
    directory:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Vue的CLI生成器在`vue-example`目录中为我们创建了许多文件：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s examine the pieces that it created for us:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看它为我们创建的部分：
- en: 'Open `src/App.vue`. We''ll see this in the script block:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/App.vue`。我们将在脚本块中看到这个：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We don't see any of the links we saw in our browser, but the `import` line tells
    us where the content is.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在浏览器中看不到任何链接，但`import`行告诉我们内容在哪里。
- en: Open `src/components/HelloWorld.vue`. Now, we see the content of our page in
    a `<template>` node. Feel free to change some of the markup and experiment with
    the different variables.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/components/HelloWorld.vue`。现在，我们在`<template>`节点中看到了页面的内容。随意更改一些标记并尝试不同的变量。
- en: And that's Vue in a nutshell! You'll find that after going through Angular and
    React, the concepts in Vue are a logical progression and will not be difficult
    to pick up.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Vue的要点！你会发现在学习了Angular和React之后，Vue中的概念是一个逻辑的进步，不难掌握。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Frontend frameworks are powerful tools, but they're not interchangeable. Each
    has its pros and cons and your use of them should not only be dictated by what's
    en vogue at the moment but also by the community support available, performance
    considerations, and longevity of the project. At the end of the day, choosing
    a framework is a nuanced process that requires careful thought and planning. At
    this point in time, React has quite the uptick in adoption, but as time goes by,
    all frameworks fall in and out of favor. What we've covered here only scratches
    the surface of each of these frameworks, so be sure to do your research before
    committing to one.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 前端框架是强大的工具，但它们并不是可以互换的。每种框架都有其优缺点，你使用它们不仅应该受到当下流行的影响，还应该考虑到社区支持、性能考虑和项目的长期性。选择一个框架是一个需要仔细思考和规划的复杂过程。目前，React在采用率上有相当大的增长，但随着时间的推移，所有的框架都会受到青睐和抛弃。我们在这里所涵盖的只是每个框架的冰山一角，所以在承诺之前一定要做好你的研究。
- en: 'In the next chapter, we''ll explore debugging JavaScript, because let''s face
    it: we''re going to make mistakes and we''ll need to know how to fix them.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨调试JavaScript，因为让我们面对现实吧：我们会犯错误，我们需要知道如何修复它们。
- en: Further reading
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Browser wars: [https://en.wikipedia.org/wiki/Browser_wars](https://en.wikipedia.org/wiki/Browser_wars)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器之战：[https://en.wikipedia.org/wiki/Browser_wars](https://en.wikipedia.org/wiki/Browser_wars)
- en: jQuery: [https://en.wikipedia.org/wiki/JQuery](https://en.wikipedia.org/wiki/JQuery)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery：[https://en.wikipedia.org/wiki/JQuery](https://en.wikipedia.org/wiki/JQuery)
- en: Understanding ES6 arrow functions for jQuery developers: [https://wesbos.com/javascript-arrow-functions/](https://wesbos.com/javascript-arrow-functions/)
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解ES6箭头函数对于jQuery开发人员：[https://wesbos.com/javascript-arrow-functions/](https://wesbos.com/javascript-arrow-functions/)
- en: jQuery tutorial and reference: [https://www.w3schools.com/jquery/](https://www.w3schools.com/jquery/)
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery教程和参考：[https://www.w3schools.com/jquery/](https://www.w3schools.com/jquery/)
- en: 'Angular tutorial: [https://angular.io/tutorial](https://angular.io/tutorial)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular教程：[https://angular.io/tutorial](https://angular.io/tutorial)
- en: Navigating the React ecosystem: [https://www.toptal.com/react/navigating-the-react-ecosystem](https://www.toptal.com/react/navigating-the-react-ecosystem)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React生态系统导航：[https://www.toptal.com/react/navigating-the-react-ecosystem](https://www.toptal.com/react/navigating-the-react-ecosystem)
- en: React tutorial: [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React教程：[https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)
- en: Vue guide: [https://vuejs.org/v2/guide/](https://vuejs.org/v2/guide/)
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue指南：[https://vuejs.org/v2/guide/](https://vuejs.org/v2/guide/)
- en: Vue comparison with other frameworks: [https://vuejs.org/v2/guide/comparison.html](https://vuejs.org/v2/guide/comparison.html)
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue与其他框架的比较：[https://vuejs.org/v2/guide/comparison.html](https://vuejs.org/v2/guide/comparison.html)
