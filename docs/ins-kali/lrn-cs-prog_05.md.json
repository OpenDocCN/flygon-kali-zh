["```cs\npublic class Employee\n{\n\u00a0\u00a0\u00a0\u00a0private string name;\n\u00a0\u00a0\u00a0\u00a0private double salary;\n\u00a0\u00a0\u00a0\u00a0public string Name\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get { return name; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set { name = value; }\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public double Salary\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get { return salary; }\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public Employee(string name, double salary)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.salary = salary;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void GiveRaise(double percent)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0salary *= (1.0 + percent / 100.0);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nEmployee employee = new Employee(\"John Doe\", 2500);\nConsole.WriteLine($\"{employee.Name} earns {employee.Salary}\");\nemployee.GiveRaise(5.5);\nConsole.WriteLine($\"{employee.Name} earns {employee.Salary}\");\n```", "```cs\nclass GameUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Position Position { get; protected set; }\n\u00a0\u00a0\u00a0\u00a0public GameUnit(Position position)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Position = position;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Draw(Surface surface)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0surface.DrawAt(GetImage(), Position);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0protected virtual char GetImage() { return ' '; }\n}\n```", "```cs\nstruct Position\n{\n\u00a0\u00a0\u00a0\u00a0public int X { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public int Y { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public Position(int x = 0, int y = 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X = x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Y = y;\n\u00a0\u00a0\u00a0\u00a0}\n}\nclass Surface\n{\n\u00a0\u00a0\u00a0\u00a0private int left;\n\u00a0\u00a0\u00a0\u00a0private int top;\n\u00a0\u00a0\u00a0\u00a0public void BeginDraw()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Clear();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0left = Console.CursorLeft;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top = Console.CursorTop;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void DrawAt(char c, Position position)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.SetCursorPosition(left + position.X, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top + position.Y);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write(c);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (ArgumentOutOfRangeException e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Clear();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(e.Message);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Terrain : GameUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Terrain(Position position) : base(position) { }\n}\nclass Water : Terrain\n{\n\u00a0\u00a0\u00a0\u00a0public Water(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected override char GetImage() { return '\u2591'; }\n}\nclass Hill : Terrain\n{\n\u00a0\u00a0\u00a0\u00a0public Hill(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected override char GetImage() { return '\u2261'; }\n}\n```", "```cs\nvar objects = new List<v1.GameUnit>()\n{\n\u00a0\u00a0\u00a0\u00a0new v1.Water(new Position(3, 2)),\n\u00a0\u00a0\u00a0\u00a0new v1.Water(new Position(4, 2)),\n\u00a0\u00a0\u00a0\u00a0new v1.Water(new Position(5, 2)),\n\u00a0\u00a0\u00a0\u00a0new v1.Hill(new Position(3, 1)),\n\u00a0\u00a0\u00a0\u00a0new v1.Hill(new Position(5, 3)),\n};\nvar surface = new v1.Surface();\nsurface.BeginDraw();\nforeach (var unit in objects)\n\u00a0\u00a0\u00a0\u00a0unit.Draw(surface);\n```", "```cs\nclass GameUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Position Position { get; protected set; }\n\u00a0\u00a0\u00a0\u00a0public GameUnit(Position position)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Position = position;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Draw(Surface surface)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0surface.DrawAt(Image, Position);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0protected virtual char Image => ' ';\n}\nclass Terrain : GameUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Terrain(Position position) : base(position) { }\n}\nclass Water : Terrain\n{\n\u00a0\u00a0\u00a0\u00a0public Water(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected override char Image => '\u2591';\n}\nclass Hill : Terrain\n{\n\u00a0\u00a0\u00a0\u00a0public Hill(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected override char Image => '\u2261';\n}\n```", "```cs\nabstract class GameUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Position Position { get; protected set; }\n\u00a0\u00a0\u00a0\u00a0public GameUnit(Position position)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Position = position;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Draw(Surface surface)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0surface.DrawAt(Image, Position);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0protected abstract char Image { get; }\n}\nabstract class Terrain : GameUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Terrain(Position position) : base(position) { }\n}\nclass Water : Terrain\n{\n\u00a0\u00a0\u00a0\u00a0public Water(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected override char Image => '\u2591';\n}\nclass Hill : Terrain\n{\n\u00a0\u00a0\u00a0\u00a0public Hill(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected override char Image => '\u2261';\n}\n```", "```cs\nsealed class Water : Terrain\n{\n\u00a0\u00a0\u00a0public Water(Position position) : base(position) { }\n\u00a0\u00a0\u00a0protected override char Image => '\u2591';\n}\nclass Lake : Water\u00a0\u00a0// ERROR: cannot derived from sealed type\n{\n\u00a0\u00a0\u00a0public Lake(Position position) : base(position) { }\n}\n```", "```cs\nclass Water : Terrain\n{\n\u00a0\u00a0\u00a0\u00a0public Water(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected sealed override char Image => '\u2591';\n}\n\nclass Lake : Water\n{\n\u00a0\u00a0\u00a0\u00a0public Lake(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected sealed override char Image => '\u2591';\u00a0\u00a0// ERROR\n}\n```", "```cs\nclass Base\n{\n\u00a0\u00a0\u00a0\u00a0public int Get() { return 42; }\n}\nclass Derived : Base\n{\n\u00a0\u00a0\u00a0\u00a0public new int Get() { return 10; }\n}\n```", "```cs\nDerived d = new Derived();\nConsole.WriteLine(d.Get()); // prints 10\nBase b = d;\nConsole.WriteLine(b.Get()); // prints 42\n```", "```cs\nclass Pet\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0public string Name { get; private set; }\n\u00a0\u00a0\u00a0\u00a0\u00a0public Pet(string name)\n\u00a0\u00a0\u00a0\u00a0\u00a0{ Name = name; }\n\u00a0\u00a0\u00a0\u00a0\u00a0public Pet Clone() { return new Pet(Name); }\n}\nclass Dog : Pet\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0public string Color { get; private set; }\n\u00a0\u00a0\u00a0\u00a0\u00a0public Dog(string name, string color):base(name)\n\u00a0\u00a0\u00a0\u00a0\u00a0{ Color = color; }\n\u00a0\u00a0\u00a0\u00a0\u00a0public new Dog Clone() { return new Dog(Name, Color); }\n}\n```", "```cs\nPet pet = new Pet(\"Lola\");\nDog dog = new Dog(\"Rex\", \"black\");\nPet cpet = pet.Clone();\nDog ddog = dog.Clone();\n```", "```cs\nPet another = new Dog(\"Dark\", \"white\");\nDog copy = another.Clone(); // ERROR this method returns a Pet\n```", "```cs\ninterface ISurface\n{\n\u00a0\u00a0\u00a0\u00a0void BeginDraw();\n\u00a0\u00a0\u00a0\u00a0void EndDraw();\n\u00a0\u00a0\u00a0\u00a0void DrawAt(char c, Position position);\n}\n```", "```cs\nclass Surface : ISurface\n{\n\u00a0\u00a0\u00a0\u00a0private int left;\n\u00a0\u00a0\u00a0\u00a0private int top;\n\u00a0\u00a0\u00a0\u00a0public void BeginDraw()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Clear();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0left = Console.CursorLeft;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top = Console.CursorTop;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void EndDraw()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void DrawAt(char c, Position position)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.SetCursorPosition(left + position.X, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top + position.Y);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write(c);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (ArgumentOutOfRangeException e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Clear();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(e.Message);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nabstract class GameUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Position Position { get; protected set; }\n\u00a0\u00a0\u00a0\u00a0public GameUnit(Position position)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Position = position;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Draw(ISurface surface)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0surface?.DrawAt(Image, Position);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0protected abstract char Image { get; }\n}\n```", "```cs\ninterface IMoveable\n{\n\u00a0\u00a0\u00a0\u00a0void MoveTo(Position pos);\n}\n```", "```cs\nabstract class ActionUnit : GameUnit, IMoveable\n{\n\u00a0\u00a0\u00a0\u00a0public ActionUnit(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0public void MoveTo(Position pos)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Position = pos;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Meeple : ActionUnit\n{\n\u00a0\u00a0\u00a0\u00a0public Meeple(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0protected override char Image => 'M';\n}\n```", "```cs\nvar objects = new List<GameUnit>()\n{\n\u00a0\u00a0\u00a0\u00a0new Water(new Position(3, 2)),\n\u00a0\u00a0\u00a0\u00a0new Water(new Position(4, 2)),\n\u00a0\u00a0\u00a0\u00a0new Water(new Position(5, 2)),\n\u00a0\u00a0\u00a0\u00a0new Hill(new Position(3, 1)),\n\u00a0\u00a0\u00a0\u00a0new Hill(new Position(5, 3)),\n\u00a0\u00a0\u00a0\u00a0new Meeple(new Position(0, 0)),\n\u00a0\u00a0\u00a0\u00a0new Meeple(new Position(4, 3)),\n};\nISurface surface = new Surface();\nsurface.BeginDraw();\nforeach (var unit in objects)\n\u00a0\u00a0\u00a0unit.Draw(surface);\nsurface.EndDraw();\n```", "```cs\nvar objects = new List<GameUnit>()\n{\n\u00a0\u00a0\u00a0\u00a0new Water(new Position(3, 2)),\n\u00a0\u00a0\u00a0\u00a0new Hill(new Position(3, 1)),\n\u00a0\u00a0\u00a0\u00a0new Meeple(new Position(0, 0)),\n};\n```", "```cs\ninterface IMoveable\n{\n\u00a0\u00a0\u00a0\u00a0void MoveTo(Position pos);\n\u00a0\u00a0\u00a0\u00a0void MoveTo(int x, int y);\n}\nabstract class ActionUnit : GameUnit, IMoveable\n{\n\u00a0\u00a0\u00a0\u00a0public ActionUnit(Position position) : base(position) { }\n\u00a0\u00a0\u00a0\u00a0public void MoveTo(Position pos)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Position = pos;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void MoveTo(int x, int y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Position = new Position(x, y);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nMeeple m = new Meeple(new Position(3, 4));\nm.MoveTo(new Position(1, 1));\nm.MoveTo(2, 5);\n```", "```cs\nstruct Complex\n{\n\u00a0\u00a0\u00a0\u00a0public double Real\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ get; private set; }\n\u00a0\u00a0\u00a0\u00a0public double Imaginary { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public Complex(double real = 0, double imaginary = 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Real = real;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Imaginary = imaginary;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar c1 = new Complex(2, 3);\nvar c2 = new Complex(4, 5);\nvar c3 = c1 + c2;\nvar c4 = c1 - c2;\n```", "```cs\npublic struct Complex\n{\n\u00a0\u00a0\u00a0\u00a0// [...] omitted members\n\u00a0\u00a0\u00a0\u00a0public static Complex operator +(Complex number1, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Complex number2)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new Complex()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Real = number1.Real + number2.Real,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Imaginary = number2.Imaginary + number2.Imaginary\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static Complex operator -(Complex number1, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Complex number2)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new Complex()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Real = number1.Real - number2.Real,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Imaginary = number2.Imaginary - number2.Imaginary\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nif (c3 == c2) { /* do something */}\nif (c1 != c4) { /* do something else */}\n```", "```cs\nstruct Complex\n{\n\u00a0\u00a0\u00a0\u00a0// [...] omitted members\n\u00a0\u00a0\u00a0\u00a0public static bool operator ==(Complex number1, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Complex number2)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return number1.Real.Equals(number2.Real) &&\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number2.Imaginary.Equals(number2.Imaginary);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static bool operator !=(Complex number1, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Complex number2)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return !number1.Real.Equals(number2.Real) ||\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!number2.Imaginary.Equals(number2.Imaginary);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public override bool Equals(object obj)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Real.Equals(((Complex)obj).Real) &&\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Imaginary.Equals(((Complex)obj).Imaginary);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public override int GetHashCode()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Real.GetHashCode() * 17 + \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Imaginary.GetHashCode();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nstruct Complex\n{\n\u00a0\u00a0\u00a0\u00a0// [...] omitted members\n\u00a0\u00a0\u00a0\u00a0public static Complex operator ++(Complex number)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new Complex(number.Real + 1, number.Imaginary);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static Complex operator --(Complex number)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new Complex(number.Real - 1, number.Imaginary);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar c = new Complex(5, 7);\nConsole.WriteLine(c);\u00a0\u00a0// 5i + 7\nc++;\nConsole.WriteLine(c);\u00a0\u00a0// 6i + 7\n++c;\nConsole.WriteLine(c);\u00a0\u00a0// 7i + 7\n```", "```cs\npublic class Complex\n{\n\u00a0\u00a0\u00a0\u00a0// [...] omitted members\n\u00a0\u00a0\u00a0\u00a0public static Complex operator ++(Complex number)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// WRONG implementation\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number.Real++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return number;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar c1 = new Complex(5, 7);\nvar c2 = c1;\nConsole.WriteLine(c1);\u00a0\u00a0// 5i + 7\nConsole.WriteLine(c2);\u00a0\u00a0// 5i + 7\nc1++;\nConsole.WriteLine(c1);\u00a0\u00a0// 6i + 7\nConsole.WriteLine(c2);\u00a0\u00a0// 6i + 7\n```", "```cs\nclass Complex\n{\n\u00a0\u00a0\u00a0\u00a0// [...] omitted members \n\u00a0\u00a0\u00a0\u00a0public static Complex operator ++(Complex number)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new Complex(number.Real + 1, number.Imaginary);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```"]