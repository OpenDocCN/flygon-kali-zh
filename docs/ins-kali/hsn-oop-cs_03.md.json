["```cs\ninterface IBankAccount {\n    void Debit(double amount);\n    void Credit(double amount);\n}\nclass BankAccount : IBankAccount {\n    public void Debit(double amount){\n        Console.WriteLine($\"${amount} has been debited from your account!\");\n    } \n    public void Credit(double amount){\n        Console.WriteLine($\"${amount} has been credited to your account!\");\n    }\n}\n```", "```cs\nabstract class Animal {\n    public string name;\n    public int ageInMonths;\n    public abstract void Move();\n    public void Eat(){\n        Console.WriteLine(\"Eating\");\n    }\n}\nclass Dog : Animal {\n    public override void Move() {\n        Console.WriteLine(\"Moving\");\n    }\n} \n```", "```cs\nusing System;\nnamespace AnimalProject {\n    abstract class Animal {\n        public string name;\n        public int ageInMonths;\n        public abstract void Move();\n        public void Eat(){\n            Console.WriteLine(\"Eating\");\n        }\n    }\n    static void Main(){\n        Animal animal = new Animal(); // Not possible as the Animal class is abstract class\n```", "```cs\n    }\n}\n```", "```cs\n// File name: Animal.cs\nusing System;\nnamespace AnimalProject {\n    public partial class Animal {\n        public string name;\n        public int ageInMonths;\n\n        public void Eat(){\n            Console.WriteLine(\"Eating\");\n        }\n     }\n}\n// File name: AnimalMoving.cs\nusing System;\nnamespace AnimalProject {\n    public partial class Animal {\n\n        public void Move(){\n            Console.WriteLine(\"Moving\");\n        }\n    }\n}\n```", "```cs\nsealed class Animal {\n    public string name;\n    public int ageInMonths;\n    public void Move(){\n        Console.WriteLine(\"Moving\");\n    }\n    public void Eat(){\n        Console.WriteLine(\"Eating\");\n    }\n}\npublic static void Main(){\n    Animal dog = new Animal();\n    dog.name = \"Doggy\";\n    dog.ageInMonths = 1;\n\n    dog.Move();\n    dog.Eat();\n}\n```", "```cs\nclass Dog : Animal {\n    public char gender;\n}\n```", "```cs\nvar person = new Tuple<string, int, string>(\"Martin Dew\", 42, \"Software Developer\"); // name, age, occupation\nor \nvar person = new Tuple.Create(\"Martin Dew\", 42, \"Software Developer\");\n```", "```cs\npublic static Tuple<string, int, string> GetPerson() {\n    var person = new Tuple<string, int, string>(\"Martin Dew\", 42, \"Software Developer\");\n    return person;\n}\nstatic void Main() {\n    var developer = GetPerson();\n    Console.WriteLine(\"The person is {0}. He is {1} years old. He is a {2}\", developer.Item1, developer.Item2, developer.Item3 );\n}\n```", "```cs\nclass Animal {\n    public string Name {set; get;}\n    public int Age {set; get;}\n}\n```", "```cs\nclass Animal {\n    public string Name {\n        set {\n            name = value;\n        }\n        get {\n            return name;\n        }\n    }\n    public int Age {set; get;}\n}\n```", "```cs\npublic class Animal {\n}\n```", "```cs\npublic class Animal {\n    private string name;\n    public string GetName() {\n        return name;\n    }\n}\n```", "```cs\nusing System;\nnamespace AnimalProject {\n    static void Main(){\n        Animal animal = new Animal();\n        animal.name = \"Dog\"; // Not possible, as the name field is private\n        animal.GetName(); // Possible, as the GetName method is public\n    }\n}\n```", "```cs\nusing System;\nnamespage AnimalProject {\n    static void Main(){\n        Dog dog = new Dog();\n        dog.GetName();\n    }\n\n    internal class Dog {\n        internal string GetName(){\n            return \"doggy\";\n        }\n    }\n}\n```", "```cs\nusing System;\nnamespage AnimalProject {\n    static void Main(){\n        Animal animal = new Animal();\n        Dog dog = new Dog();\n        animal.GetName(); // Not possible as Main is not a child of Animal\n        dog.GetDogName();\n    }\n\n    class Animal {\n        protected string GetName(){\n            return \"doggy\";\n        }\n    }\n    class Dog : Animal {\n        public string GetDogName() {\n            return base.GetName();\n        }\n    }\n}\n```", "```cs\n//Assembly1.dll\nusing System;\nnamespace AnimalProject {\n    public class Animal {\n        protected internal string GetName(){\n            return \"Nice Animal\";\n        }\n    }\n}\n//Assembly2.dll\nusing System;\nnamespace AnimalProject2 {\n    public class Dog : Animal {\n        public string GetDogName(){\n            return base.GetName(); // This will work\n        }\n    }\n    public class Cat {\n        Animal animal = new Animal();\n\n        public string GetCatName(){\n            return animal.GetName(); // This is not possible, as GetName is protected internal\n        }\n    }\n}\n```"]