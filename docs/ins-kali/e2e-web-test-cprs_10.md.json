["```js\nit('carries out asynchronous events', () => {\n\u00a0\u00a0\u00a0const button = cy.get('#submit-button');\n\u00a0\u00a0\u00a0const username = cy.get('#username-input');\n\u00a0\u00a0\u00a0button.click()\n});\n```", "```js\ndescribe('Closures', () => {\n\u00a0\u00a0\u00a0\u00a0it('creates a closure', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// { This is the external environment for the test }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('#submit-button').then(($submitBtn) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// $submitBtn is the Object of the yielded cy.get()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// response\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// { This is the lexical environment for the test }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\t // Code written here will not execute until .then()\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//finishes execution\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0});\n```", "```js\nit('can Add todo item - (Closures)', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").type(\"New Todo {Enter}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('.todo-list>li:nth-child(1)').then(($todoItem) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Storing our todo item Name \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const txt = $todoItem.text()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(txt).to.eq('New Todo')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// This command will run after all the above commands\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// have finished their execution.\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").type(\"Another New Todo {Enter}\");\n\u00a0\u00a0\u00a0\u00a0});\n```", "```js\ndescribe('Cypress Variables', () => {\n\u00a0\u00a0var a = 20;\n\u00a0\u00a0it('var scope context', () => {\n\u00a0\u00a0\u00a0\u00a0a = 30; // overriding global scope\n\u00a0\u00a0\u00a0\u00a0expect(a).to.eq(30) // a = 30\n\u00a0\u00a0});\n it('var scope context - changed context', () => {\n\u00a0\u00a0\u00a0\u00a0// Variable scope remains the same as the change affects \n\u00a0\u00a0\u00a0\u00a0// the global scope \u00a0\u00a0\u00a0\u00a0expect(a).to.eq(30) //a = 30\n\u00a0\u00a0});\n});\n```", "```js\ndescribe('Cypress Variables', () => {\n\u00a0\u00a0// Variable declaration\n\u00a0\u00a0let a = 20;\n\u00a0\u00a0it('let scope context', () => {\n\u00a0\u00a0\u00a0\u00a0let a = 30;\n\u00a0\u00a0\u00a0\u00a0// Local scoped variable\n\u00a0\u00a0\u00a0\u00a0expect(a).to.eq(30) // a = 30\n\u00a0\u00a0});\n\u00a0\u00a0it('let scope context - global', () => {\n\u00a0\u00a0\u00a0\u00a0// Global scoped variable\n\u00a0\u00a0\u00a0\u00a0expect(a).to.eq(30) // a = 20\n\u00a0\u00a0});\n\n```", "```js\ndescribe('const Keyword', () => {\n\u00a0\u00a0\u00a0\u00a0const a = 20;\n\u00a0\u00a0\u00a0\u00a0it('let scope context', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = 30;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Fails as We cannot reassign\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// a variable declared with a const keyword\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(a).to.eq(30) // a = 20\n\u00a0\u00a0\u00a0\u00a0});\n});\n```", "```js\ncontext('TODO MVC - Aliases Tests', () => {\n\u00a0\u00a0let text;\n\u00a0\u00a0beforeEach(() => {\n\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").type(\"New Todo {Enter}\");\n\u00a0\u00a0\u00a0\u00a0cy.get('.todo-list>li:nth-child(1)').then(($todoItem) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = $todoItem.text()\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0});\n\u00a0\u00a0it('gets added todo item', () => {\n\u00a0\u00a0\u00a0\u00a0// todo item text is available for use\n\u00a0\u00a0\u00a0\u00a0expect(text).to.eq('New Todo')\n\u00a0\u00a0});\n});\n```", "```js\ndescribe('Sharing Context between hooks and tests', () => {\n\u00a0\u00a0\u00a0\u00a0beforeEach(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").type(\"New Todo {Enter}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('.todo-list>li:nth-\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0child(1)').invoke('text').as('todoItem');\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0it('gets added todo item', function () {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// todo item text is available for use\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(this.todoItem).to.eq('New Todo');\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0});\n```", "```js\ndescribe('Todo fixtures', () => {\n\u00a0\u00a0\u00a0\u00a0beforeEach(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// alias the todos fixtures\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").type(\"New Todo {Enter}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('.todo-list>li:nth-\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0child(1)').invoke('text').as('todoItem')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.fixture('todos.json').as('todos')\n\u00a0\u00a0\u00a0\u00a0})\n\n\u00a0\u00a0\u00a0\u00a0it('todo fixtures have name', function () {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// access the todos property\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todos = this.todos[0]\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// make sure the first todo item contains the first\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// todo item name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(this.todoItem).to.contain(todos.name)\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0})\n```", "```js\nit('todo fixtures have name', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// access the todos property\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('@todos').then((todos) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todo = todos[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// make sure the first todo item contains the first\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// todo item name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(this.todoItem).to.contain(todo.name)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0});\n```", "```js\nit('can add a todo - DOM element access reference', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").as('todoInput');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Aliased todo input element\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('@todoInput').type(\"New Todo {Enter}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('@todoInput').type(\"Another New Todo {Enter}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".todo-list\").find('li').should('have.length', 2)\n\u00a0\u00a0});\n```", "```js\nit('can wait for a todo response', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.server()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.intercept('POST', '/todos', { id: 123 }).as('todoItem')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('form').submit()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.wait('@todoItem').its('requestBody')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.should('have.property', 'name', 'New Todo')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.contains('Successfully created item: New Todo')\n\u00a0\u00a0\u00a0\u00a0});\n```", "```js\nit('can wait for a comment response', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.request('https://jsonplaceholder.cypress.io/comments/6')\n\u00a0\u00a0\u00a0\u00a0.as('sixthComment');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('@sixthComment').should((response) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(response.body.id).to.eq(6)\n\u00a0\u00a0\u00a0\u00a0});\n });\n```"]