["```\n# Dockerfile\nFROM nginx:1.15.2\n```", "```\n# hello-world Dockerfile\nFROM scratch\nCOPY hello /\nCMD [\"/hello\"]\n```", "```\n# LABEL instruction syntax\n# LABEL <key>=<value> <key>=<value> <key>=<value> ...\nLABEL maintainer=\"Earl Waud <earlwaud@mycompany.com>\"\nLABEL \"description\"=\"My development Ubuntu image\"\nLABEL version=\"1.0\"\nLABEL label1=\"value1\" \\\n label2=\"value2\" \\\n lable3=\"value3\"\nLABEL my-multi-line-label=\"Labels can span \\\nmore than one line in a Dockerfile.\"\nLABEL support-email=\"support@mycompany.com\" support-phone=\"(123) 456-7890\"\n```", "```\n# earlier in the Dockerfile\nLABEL version=\"1.0\"\n# later in the Dockerfile...\nLABEL version=\"2.0\"\n# The Docker image metadata will show version=\"2.0\"\n```", "```\n# COPY instruction syntax\nCOPY [--chown=<user>:<group>] <src>... <dest>\n# Use double quotes for paths containing whitespace)\nCOPY [--chown=<user>:<group>] [\"<src>\",... \"<dest>\"]\n```", "```\n# COPY instruction Dockerfile for Docker Quick Start\nFROM alpine:latest\nLABEL maintainer=\"Earl Waud <earlwaud@mycompany.com>\"\nLABEL version=1.0\n# copy multiple files, creating the path \"/theqsg/files\" in the process\nCOPY file* theqsg/files/\n# copy all of the contents of folder \"folder1\" to \"/theqsg/\" \n# (but not the folder \"folder1\" itself)\nCOPY folder1 theqsg/\n# change the current working directory in the image to \"/theqsg\"\nWORKDIR theqsg\n# copy the file special1 into \"/theqsg/special-files/\"\nCOPY --chown=35:35 special1 special-files/\n# return the current working directory to \"/\"\nWORKDIR /\nCMD [\"sh\"]\n```", "```\n# ADD instruction syntax\nADD [--chown=<user>:<group>] <src>... <dest>\n# Use double quotes for paths containing whitespace)\nADD [--chown=<user>:<group>] [\"<src>\",... \"<dest>\"]\n```", "```\n# ADD instruction Dockerfile for Docker Quick Start\nFROM alpine\nLABEL maintainer=\"Earl Waud <earlwaud@mycompany.com>\"\nLABEL version=3.0\nADD https://github.com/docker-library/hello-world/raw/master/amd64/hello-world/hello /\nRUN chmod +x /hello\nCMD [\"/hello\"]\n```", "```\n# ENV instruction syntax\n# This is the form to create a single environment variable per instruction\n# Everything after the space following the <key> becomes the value\nENV <key> <value>\n# This is the form to use when you want to create more than one variable per instruction\nENV <key>=<value> ...\n```", "```\n# ENV instruction Dockerfile for Docker Quick Start\nFROM alpine\nLABEL maintainer=\"Earl Waud <earlwaud@mycompany.com>\"\nENV appDescription This app is a sample of using ENV instructions\nENV appName=env-demo\nENV note1=\"The First Note First\" note2=The\\ Second\\ Note\\ Second \\\nnote3=\"The Third Note Third\"\nENV changeMe=\"Old Value\"\nCMD [\"sh\"]\n```", "```\n# The ARG instruction syntax\nARG <varname>[=<default value>]\n\n# The build-arg parameter syntax\ndocker image build --build-arg <varname>[=<value>] ...\n```", "```\n# ARG instruction Dockerfile for Docker Quick Start\nFROM alpine\nLABEL maintainer=\"Earl Waud <earlwaud@mycompany.com>\"\n\nENV key1=\"ENV is stronger than an ARG\"\nRUN echo ${key1}\nARG key1=\"not going to matter\"\nRUN echo ${key1}\n\nRUN echo ${key2}\nARG key2=\"defaultValue\"\nRUN echo ${key2}\nENV key2=\"ENV value takes over\"\nRUN echo ${key2}\nCMD [\"sh\"]\n```", "```\n# Build the image and look at the output from the echo commands\n docker image build --rm \\\n --build-arg key1=\"buildTimeValue\" \\\n --build-arg key2=\"good till env instruction\" \\\n --tag arg-demo:2.0 .\n```", "```\n# ENV vs ARG instruction Dockerfile for Docker Quick Start\nFROM alpine\nLABEL maintainer=\"Earl Waud <earlwaud@mycompany.com>\"\nENV lifecycle=\"production\"\nRUN echo ${lifecycle}\nARG username=\"35\"\nRUN echo ${username}\nARG appdir\nRUN echo ${appdir}\nADD hello /${appdir}/\nRUN chown -R ${username}:${username} ${appdir}\nWORKDIR ${appdir}\nUSER ${username}\nCMD [\"./hello\"]\n```", "```\n# Build the arg3 demo image\ndocker image build --rm \\\n --build-arg appdir=\"/opt/hello\" \\\n --tag arg-demo:3.0 .\n\n# Run the arg3 demo container\ndocker container run --rm --env lifecycle=\"test\" arg-demo:3.0\n```", "```\n# User instruction syntax\nUSER <user>[:<group>] or\nUSER <UID>[:<GID>]\n```", "```\n# USER instruction Dockerfile for Docker Quick Start \nFROM alpine\nLABEL maintainer=\"Earl Waud <earl@mycompany.com>\"\nRUN id\nUSER games:games\nrun id\nCMD [\"sh\"]\n```", "```\n# WORKDIR instruction syntax\nWORKDIR instruction syntax\nWORKDIR /path/to/workdir\n```", "```\n# WORKDIR instruction Dockerfile for Docker Quick Start\nFROM alpine\n# Absolute path...\nWORKDIR /\n# relative path, relative to previous WORKDIR instruction\n# creates new folder\nWORKDIR sub-folder-level-1\nRUN touch file1.txt\n# relative path, relative to previous WORKDIR instruction\n# creates new folder\nWORKDIR sub-folder-level-2\nRUN touch file2.txt\n# relative path, relative to previous WORKDIR instruction\n# creates new folder\nWORKDIR sub-folder-level-3\nRUN touch file3.txt\n# Absolute path, creates three sub folders...\nWORKDIR /l1/l2/l3\nCMD [\"sh\"]\n```", "```\n# VOLUME instruction syntax\nVOLUME [\"/data\"]\n# or for creating multiple volumes with a single instruction\nVOLUME /var/log /var/db /moreData\n```", "```\n# VOLUME instruction Dockerfile for Docker Quick Start\nFROM alpine\nRUN mkdir /myvol\nRUN echo \"hello world\" > /myvol/greeting\nVOLUME /myvol\nCMD [\"sh\"]\n```", "```\n# EXPOSE instruction syntax\nEXPOSE <port> [<port>/<protocol>...]\n```", "```\n# RUN instruction syntax\n# Shell form to run the command in a shell\n# For Linux the default is \"/bin/sh -c\"\n# For Windows the default is \"cmd /S /C\"\nRUN <command>\n\n# Exec form\nRUN [\"executable\", \"param1\", \"param2\"]\n```", "```\n# Exec form of RUN instruction using bash\nRUN [\"/bin/bash\", \"-c\", \"echo hello world > /myvol/greeting\"]\n```", "```\n# RUN instruction Dockerfile for Docker Quick Start\nFROM ubuntu\nRUN useradd --create-home -m -s /bin/bash dev\nRUN mkdir /myvol\nRUN echo \"hello DQS Guide\" > /myvol/greeting\nRUN [\"chmod\", \"664\", \"/myvol/greeting\"]\nRUN [\"chown\", \"dev:dev\", \"/myvol/greeting\"]\nVOLUME /myvol\nUSER dev\nCMD [\"/bin/bash\"]\n```", "```\n# RUN instruction Dockerfile for Docker Quick Start\nFROM ubuntu\nRUN useradd --create-home -m -s /bin/bash dev\n# Add a fun prompt for dev user of my-app\n# whale: \"\\xF0\\x9F\\x90\\xB3\"\n# alien:\"\\xF0\\x9F\\x91\\xBD\"\n# fish:\"\\xF0\\x9F\\x90\\xA0\"\n# elephant:\"\\xF0\\x9F\\x91\\xBD\"\n# moneybag:\"\\xF0\\x9F\\x92\\xB0\"\nRUN echo 'PS1=\"\\[$(tput bold)$(tput setaf 4)\\]my-app $(echo -e \"\\xF0\\x9F\\x90\\xB3\") \\[$(tput sgr0)\\] [\\\\u@\\\\h]:\\\\W \\\\$ \"' >> /home/dev/.bashrc && \\\n echo 'alias ls=\"ls --color=auto\"' >> /home/dev/.bashrc\nUSER dev\nCMD [\"/bin/bash\"]\n```", "```\n# CMD instruction syntax\nCMD command param1 param2 (shell form)\nCMD [\"executable\",\"param1\",\"param2\"] (exec form)\nCMD [\"param1\",\"param2\"] (as default parameters to ENTRYPOINT)\n```", "```\n# CMD instruction examples\nCMD [\"/bin/bash\"]\nCMD while true; do echo 'DQS Expose Demo' | nc -l -p 80; done\nCMD echo \"How many words are in this echo command\" | wc -\nCMD tail -f /dev/null\nCMD [\"-latr\", \"/var/opt\"]\n```", "```\n# ENTRYPOINT instruction Dockerfile for Docker Quick Start\nFROM alpine\nRUN apk add curl\nENTRYPOINT [\"curl\"]\nCMD [\"--help\"]\n```", "```\n# ENTRYPOINT instruction syntax\nENTRYPOINT command param1 param2 (shell form)\nENTRYPOINT [\"executable\", \"param1\", \"param2\"] (exec form, best practice)\n```", "```\n# HEALTHCHECK instruction syntax\nHEALTHCHECK [OPTIONS] CMD command (check container health by running a command inside the container)\nHEALTHCHECK NONE (disable any HEALTHCHECK inherited from the base image)\n```", "```\n# HEALTHCHECK CMD options\n--interval=DURATION (default: 30s)\n--timeout=DURATION (default: 30s)\n--start-period=DURATION (default: 0s)\n--retries=N (default: 3)\n```", "```\n# HEALTHCHECK instruction Dockerfile for Docker Quick Start\nFROM alpine\nRUN apk add curl\nEXPOSE 80/tcp\nHEALTHCHECK --interval=30s --timeout=3s \\\n CMD curl -f http://localhost/ || exit 1\nCMD while true; do echo 'DQS Expose Demo' | nc -l -p 80; done\n```", "```\n# ONBUILD instruction syntax\nONBUILD [INSTRUCTION]\n```", "```\n# my-base Dockerfile\nFROM alpine\nLABEL maintainer=\"Earl Waud <earlwaud@mycompany.com>\"\nONBUILD LABEL version=\"1.0\"\nONBUILD LABEL support-email=\"support@mycompany.com\" support-phone=\"(123) 456-7890\"\nCMD [\"sh\"]\n```", "```\n# my-app Dockerfile\nFROM my-base:1.0\nCMD [\"sh\"]\n```", "```\n# STOPSIGNAL instruction syntax\nSTOPSIGNAL signal\n```", "```\n# Sample STOPSIGNAL instruction using a position number in the syscall table\nSTOPSIGNAL 9\n# or using a signal name\nSTOPSIGNAL SIGQUIT\n```", "```\n# SHELL instruction syntax\nSHELL [\"executable\", \"parameters\"]\n```", "```\n# Docker image build command syntax\nUsage: docker image build [OPTIONS] PATH | URL | -\n```", "```\n# Common options used with the image build command\n--rm         Remove intermediate containers after a successful build\n--build-arg  Set build-time variables\n--tag        Name and optionally a tag in the 'name:tag' format\n--file       Name of the Dockerfile (Default is 'PATH/Dockerfile')\n```", "```\n# build command samples\ndocker image build --rm --build-arg username=35 --tag arg-demo:2.0 .\ndocker image build --rm --tag user-demo:1.0 .\ndocker image build --rm --tag workdir-demo:1.0 .\n```", "```\n# directive=value\n# The line above shows the syntax for a parser directive\n```", "```\n# escape=\\ (backslash)\nOr\n# escape=` (backtick)\n```", "```\n# build context Dockerfile for Docker Quick Start guide\nFROM scratch\nCOPY hello /\nCMD [\"/hello\"]\n```", "```\n# Example of a .dockerignore file\n# Exclude unwanted files\n**/*~\n**/*.log\n**/.DS_Store\n```"]