["```js\n#include <stdio.h>\nint main() {\n   printf(\"Hello, World!\");\n   return 0;\n}\n```", "```js\n(module)\n```", "```js\n> wat2wasm useless.wat\n```", "```js\n<script type=\"module\"></script>\n```", "```js\n<!DOCTYPE html>\n<html>\n    <head></head>\n    <body>\n        <script type=\"text/javascript\">\n        </script>\n </body>\n</html>\n```", "```js\nWebAssembly.instantiateStreaming(fetch('useless.wasm')).then(obj => {\n    // nothing here\n});\n```", "```js\n(module\n    (func $add (param $p1 i32) (param $p2 i32) (result i32)\n        local.get $p1\n        local.get $p2\n        i32.add\n    )\n    (export \"add\" (func $add))\n)\n```", "```js\nconsole.log(obj.instance.exports.add(100,200));\n```", "```js\nconst add = function(p1, p2) {\n    return p1 + p2;\n}\nconst importObject = { math : { add : add }};\nWebAssembly.instantiateStreaming(fetch('math.wasm'), importObject).then(obj => {\n    console.log(obj.instance.exports.add(100, 200));\n    console.log(obj.instance.exports.add2(100, 200));\n});\n```", "```js\n(func  $add2 (param  $p1  i32) (param  $p2  i32) (result  i32)\n  local.get $p1\n  local.get $p2\n  call  $externalAdd )\n```", "```js\n(module\n   (import \"js\" \"mem\" (memory 1))\n    (func $storeNumber\n        (i32.store (i32.const 0) (i32.const 100))\n    )\n    (func $readNumber (result i32)\n        (i32.load (i32.const 0))\n    )\n    (export \"readNumber\" (func $readNumber))\n    (export \"storeNumber\" (func $storeNumber))\n)\n```", "```js\nconst memory = new WebAssembly.Memory({initial : 1});\nconst importObject = { js: {mem: memory}};\nWebAssembly.instantiateStreaming(fetch('sharing_resources.wasm'), importObject).then(obj => {\n    obj.instance.exports.storeNumber();\n    console.log(obj.instance.exports.readNumber());\n});\n```", "```js\nfunction readNumber() {\n    const bytes = new Uint32Array(memory.buffer, 0, 1);\n    console.log('The number that was put here is:', bytes[0]);\n}\n```", "```js\nobj.instance.exports.storeNumber();\nreadNumber();\n```", "```js\nconst memory = new WebAssembly.Memory({initial : 1});\nconst storeByte = new Int32Array(memory.buffer, 0, 1);    \nstoreByte[0] = 200;\nconst importObject = {js: {mem: memory}};\nWebAssembly.instantiateStreaming(fetch('sharing_resources.wasm'), importObject).then(obj => {\n    console.log(obj.instance.exports.readNumber());\n});\n```", "```js\nconst memory = new WebAssembly.Memory({initial : 1});\nconst storeByte = new Int32Array(memory.buffer, 0, 1);   \nfunction consoleLogString(offset, length) {\n    const bytes = new Uint8Array(memory.buffer, offset, length);\n    const string = new TextDecoder('utf8').decode(bytes);\n    console.log(string);\n}\nconst importObject = { console: {log: consoleLogString}, js: {mem: memory}};\nWebAssembly.instantiateStreaming(fetch('fizzbuzz.wasm'), importObject).then(obj => {\n    //obj.instance.exports.fizzbuzz(10);\n});\n```", "```js\n(module\n    (import \"console\" \"log\" (func $log (param i32 i32)))\n    (import \"js\" \"mem\" (memory 1))\n    (global $g (mut i32) (i32.const 0))\n    (func $fizzbuzz (param $p i32)\n        ;; content of the function\n    )\n\n    (export \"fizzbuzz\" (func $fizzbuzz))\n)\n```", "```js\n(func $checkFizz (param $p1 i32))\n(func $checkBuzz (param $p1 i32))\n```", "```js\nlocal.get $p1\ni32.const 3\ni32.rem_s\n(if (i32.eq (i32.const 0))\n    (then\n        (i32.store8 (global.get $g) (i32.const 70))\n        (i32.store8 (i32.add (global.get $g) (i32.const 1)) \n         (i32.const 105))\n        (i32.store8 (i32.add (global.get $g) (i32.const 2)) \n         (i32.const 122))\n        (i32.store8 (i32.add (global.get $g) (i32.const 3)) \n         (i32.const 122))\n        (global.set $g (i32.add (global.get $g) (i32.const 4)))\n    )\n)\n```", "```js\n(func $checkBuzz (param $p1 i32)\n    local.get $p1\n    i32.const 5\n    i32.rem_s\n    (if (i32.eq (i32.const 0))\n        (then\n            (i32.store8 (global.get $g) (i32.const 66))\n            (i32.store8 (i32.add (global.get $g) (i32.const 1)) \n             (i32.const 117))\n            (i32.store8 (i32.add (global.get $g) (i32.const 2)) \n             (i32.const 122))\n            (i32.store8 (i32.add (global.get $g) (i32.const 3)) \n             (i32.const 122))\n            (global.set $g (i32.add (global.get $g) (i32.const 4)))\n        )\n    )\n)\n```", "```js\n(func $fizzbuzz (param $p i32)\n    (local $start i32)\n    (local.set $start (i32.const 1))\n    (block\n        (loop\n            (call $checkFizz (local.get $start))\n            (call $checkBuzz (local.get $start))\n            (br_if 1 (i32.eq (local.get $start) (local.get $p)))\n            (local.set $start (i32.add (local.get $start) \n            (i32.const 1)))\n            (br 0)\n        )\n    )\n    i32.const 0\n    global.get $g\n    call $log\n)\n```", "```js\nobj.instance.exports.fizzbuzz(10);\n```", "```js\nFizzBuzzFizzFizzBuzz\n```", "```js\n> git clone https://github.com/emscripten-core/emsdk.git\n```", "```js\n> cd emsdk\n```", "```js\n> git pull\n> emsdk latest install\n> emsdk activate latest\n> emsdk_env.bat\n```", "```js\n#include <stdio.h>\nint main() {\n   printf(\"Hello, World!\\n\");\n   return 0;\n}\n```", "```js\n> emcc hello_world.c\n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>    \n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"a.out.js\"></script>\n    </body>\n</html>\n```", "```js\n#include <stdio.h>\nvoid fizzbuzz(int num) {\n    for(int i = 1; i <= num; i++) {\n        if(i%3 == 0) {\n            printf(\"Fizz\");\n        }\n        if(i%5 == 0) {\n            printf(\"Buzz\");\n        }\n    }\n    printf(\"\\n\");\n}\n```", "```js\n> emcc -s \"EXPORTED_FUNCTIONS=['_fizzbuzz']\" fizzbuzz.c\n```", "```js\nModule._fizzbuzz(10);\n```", "```js\n#include <stdio.h>\nextern int add(int, int);\nint main() {\n    printf(\"%d\\n\", add(100, 200));\n    return 1;\n}\n```", "```js\nmergeInto(LibraryManager.library, {\n    add: function(x, y) {\n        return x + y;\n    }\n});\n```", "```js\n> emcc -s extern.c --js-library external.js\n```", "```js\n> emcc --help\n```", "```js\nvoid placeBits(int data, int* parity) {\n}\n// creation of true data point with parity bits attached\nint createData(int data) {\n    int num = 0;\n    placeBits(data, &num);\n    return num;\n}\n```", "```js\nvoid createParity(int* data) \n```", "```js\nint checkAndVerifyData(int data)\n```", "```js\nconst int INT_SIZE = sizeof(int) * 8;\nvoid placeBits(int data, int* parity) {\n    int currentDataLoc = 1;\n    int dataIterator = 0;\n    for(int i = 1, j = 0; i < INT_SIZE; i++, j++) {\n        if(ceil(log2(i)) == floor(log2(i))) continue; //we are at a \n         parity bit section\n        *parity |= ((data & (currentDataLoc << dataIterator)) << (j \n         - dataIterator));\n        dataIterator++;\n    }\n}\n```", "```js\n#include <math.h>\n```", "```js\nvoid createParity(int* data) {\n    int parityChecks[4] = {1, 2, 4, 8};\n    int bitSet[4] = {1, 2, 8, 128};\n    for(int i = 0; i < 4; i++) {\n        int count = 0;\n        for(int j = 0; j < INT_SIZE; j++) {\n            if((parityChecks[i] & (j+1)) != 0) {\n                count += ((*data & (1 << j)) != 0) ? 1 : 0;\n            }\n        }\n        if( count % 2 != 0 ) {\n            *data |= bitSet[i];\n        }\n    }\n}\n```", "```js\nif((parityChecks[i] & (j+1)) != 0) {\n    count += ((*data & (1 << j)) != 0) ? 1 : 0;\n}\n```", "```js\n> emcc -s \"EXPORTED_FUNCTIONS=['_createData']\" hamming.c\n```", "```js\nModule._createData(100);\n```", "```js\nint checkAndVerifyData(int data) {\n    int verify = 0;\n    int parityChecks[4] = {1, 2, 8, 128};\n    for(int i = 0; i < 4; i++) {\n        verify = checkRow(&data, parityChecks[i]);\n        if(verify != 0) { // we do not have even parity\n            return -1;\n        }\n    }\n    return 1;\n}\n```", "```js\nint checkRow(int* data, int loc) {\n    int count = 0;\n    int verifier = 1;\n    for(int i = 1; i < INT_SIZE; i++) {\n        if((loc & i) != 0 ){\n            count += (*data & (verifier << (i - 1))) != 0 ? 1 : 0;\n        }\n    }\n    return count % 2;\n}\n```", "```js\n> emcc -s \"EXPORTED_FUNCTIONS=['_createData', '_checkAndVerifyData']\" hamming.c\n```", "```js\nModule._checkAndVerifyData(1579);\n```", "```js\nModule._createData(1000); // produces 16065\nModule._checkAndVerifyData(16065); //produces 1\n```", "```js\n> git clone https://github.com/kripken/sql.js.git\n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src='sqljs/dist/sql-wasm.js'></script>\n    </head>\n    <body>\n        <script type=\"module\">\n            initSqlJs({locateFile: () => `sqljs/dist/sql-wasm.wasm`\n              }).then(function(SQL){\n                console.log(\"SQL\", SQL);\n            });\n        </script>\n    </body>\n</html>\n```", "```js\ninitSqlJs({locateFile: () => `sqljs/dist/sql-wasm.wasm` }).then(function(SQL){\n    const db = new SQL.Database();\n    db.run(`CREATE TABLE customer\n        (id INTEGER PRIMARY KEY ASC,\n        first_name TEXT,\n        last_name TEXT,\n        username TEXT UNIQUE)\n    `);\n    db.run(`CREATE TABLE rpc_operations\n        (id INTEGER PRIMARY KEY ASC,\n        customer_id INTEGER,\n        op TEXT,\n        timestamp INTEGER,\n        FOREIGN KEY(customer_id) REFERENCES customer(id))`);\n});\n```", "```js\nconst insertCustomerData = `INSERT INTO customer VALUES (NULL, ?, ?, ?)`;\nconst insertRpcData = `INSERT INTO rpc_operations VALUES (NULL, ?, ?, time('now'))`;\nconst customers = [\n    ['Morissa', 'Catford', 'mcatford0'],\n    ['Aguistin', 'Blaxlande', 'ablaxlande1'] ];\nconst ops = [\n    ['1', 'add'],\n    ['2', 'subtract'] ]\nfor(let i = 0; i < customers.length; i++) {\n    db.run(insertCustomerData, customers[i]);\n}\nfor(let i = 0; i < ops.length; i++) {\n    db.run(insertRpcData, ops[i]);\n}\n```", "```js\nconst statement = db.prepare(\"SELECT * FROM customer c JOIN rpc_operations ro ON c.id = ro.customer_id WHERE c.username = $username\");\nstatement.bind({$username : 'mcatford0'});\nwhile(statement.step()) {\n    const row = statement.getAsObject();\n    console.log(JSON.stringify(row));\n}\n```", "```js\n> wasm2wat sql-wasm-debug.wasm --output=sql-wasm.wat\n```", "```js\nelse\n    i32.const 0\nend\nelse\n    i32.const 0\nend)\n```"]