["```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInfo;\n\nclass TestInfoTest {\n\n    @BeforeEach\n    void init(TestInfo testInfo) {\n        String displayName = testInfo.getDisplayName();\n        System.*out*.printf(\"@BeforeEach %s %n\", displayName);\n    }\n\n    @Test\n    @DisplayName(\"My test\")\n    @Tag(\"my-tag\")\n    void testOne(TestInfo testInfo) {\n        System.*out*.println(testInfo.getDisplayName());\n        System.*out*.println(testInfo.getTags());\n        System.*out*.println(testInfo.getTestClass());\n        System.*out*.println(testInfo.getTestMethod());\n    }\n\n    @Test\n    void testTwo() {\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.RepeatedTest;\nimport org.junit.jupiter.api.RepetitionInfo;\n\nclass RepetitionInfoTest {\n\n    @RepeatedTest(2)\n    void test(RepetitionInfo repetitionInfo) {\n        System.*out*.println(\"** Test \" + \n            repetitionInfo.getCurrentRepetition()\n            + \"/\" + repetitionInfo.getTotalRepetitions());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestReporter;\n\nclass TestReporterTest {\n\n    @Test\n    void reportSingleValue(TestReporter testReporter) {\n        testReporter.publishEntry(\"key\", \"value\");\n    }\n\n    @Test\n    void reportSeveralValues(TestReporter testReporter) {\n        HashMap<String, String> values = new HashMap<>();\n        values.put(\"name\", \"john\");\n        values.put(\"surname\", \"doe\");\n        testReporter.publishEntry(values);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.Test;\n\npublic class MyTest {\n\n    @Test\n    public void test() {\n        String[] input = { \"A\", \"B\", \"C\" };\n        for (String s : input) {\n            exercise(s);\n        }\n    }\n\n    private void exercise(String s) {\n        System.*out.*println*(s);\n*    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameter;\nimport org.junit.runners.Parameterized.Parameters;\n\n@RunWith(Parameterized.class)\npublic class ParameterizedTest {\n\n    @Parameter(0)\n    public Integer input1;\n\n    @Parameter(1)\n    public String input2;\n\n    @Parameters(name = \"My test #{index} -- input data: {0} and {1}\")\n    public static Collection<Object[]> data() {\n        return Arrays\n           .*asList*(new Object[][] { { 1, \"hello\" }, { 2, \"goodbye\" } });\n    }\n\n    @Test\n    public void test() {\n        System.*out*.println(input1 + \" \" + input2);\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.DynamicTest.dynamicTest;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.DynamicTest;\nimport org.junit.jupiter.api.TestFactory;\n\nclass CollectionTest {\n\n    // Warning: this test will raise an exception\n    @TestFactory\n    List<String> dynamicTestsWithInvalidReturnType() {\n        return Arrays.*asList*(\"Hello\");\n    }\n\n    @TestFactory\n    Collection<DynamicTest> dynamicTestsFromCollection() {\n        return Arrays.*asList*(\n                *dynamicTest*(\"1st dynamic test\", () -> \n *assertTrue*(true)),\n                *dynamicTest*(\"2nd dynamic test\", () -> *assertEquals*(4, 2 \n                     * 2)));\n    }\n\n    @TestFactory\n    Iterable<DynamicTest> dynamicTestsFromIterable() {\n        return Arrays.*asList*(\n                *dynamicTest*(\"3rd dynamic test\", () -> \n *assertTrue*(true)),\n                *dynamicTest*(\"4th dynamic test\", () -> *assertEquals*(4, 2 \n                    * 2)));\n    }\n\n    @TestFactory\n    Iterator<DynamicTest> dynamicTestsFromIterator() {\n        return Arrays.*asList*(\n                *dynamicTest*(\"5th dynamic test\", () -> \n *assertTrue*(true)),\n                *dynamicTest*(\"6th dynamic test\", () -> *assertEquals*(4, 2 \n                     * 2))).iterator();\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.DynamicTest.dynamicTest;\n\nimport java.util.stream.Stream;\nimport org.junit.jupiter.api.DynamicTest;\nimport org.junit.jupiter.api.TestFactory;\n\nclass DynamicExampleTest {\n\n    @TestFactory\n    Stream<DynamicTest> dynamicTestsFromStream() {\n        Stream<String> inputStream = Stream.*of*(\"A\", \"B\", \"C\");\n        return inputStream.*map*(\n                input -> *dynamicTest*(\"Display name for input \" + input, \n                () -> {\n                     System.*out*.println(\"Testing \" + input);\n                }));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.DynamicTest.stream;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.function.Function;\nimport java.util.stream.Stream;\nimport org.junit.jupiter.api.DynamicTest;\nimport org.junit.jupiter.api.TestFactory;\nimport org.junit.jupiter.api.function.ThrowingConsumer;\n\nclass StreamExampleTest {\n\n    @TestFactory\n    Stream<DynamicTest> streamTest() {\n        // Input data\n        Integer array[] = { 1, 2, 3 };\n        Iterator<Integer> inputGenerator = Arrays.*asList*(array).iterator();\n\n        // Display names\n        Function<Integer, String> displayNameGenerator = (\n                input) -> \"Data input:\" + input;\n\n        // Test executor\n        ThrowingConsumer<Integer> testExecutor = (input) -> {\n            System.*out*.println(input);\n            *assertTrue*(input % 2 == 0);\n        };\n\n        // Returns a stream of dynamic tests\n        return *stream*(inputGenerator, displayNameGenerator, \n            testExecutor);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.TestInfo;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic interface TestLifecycleLogger {\n\n static final Logger ***log*** = LoggerFactory\n            .getLogger(TestLifecycleLogger.class.getName());\n\n    @BeforeAll\n    static void beforeAllTests() {\n        ***log***.info(\"beforeAllTests\");\n    }\n\n    @AfterAll\n    static void afterAllTests() {\n        ***log***.info(\"afterAllTests\");\n    }\n\n    @BeforeEach\n    default void beforeEachTest(TestInfo testInfo) {\n        ***log***.info(\"About to execute {}\", testInfo.getDisplayName());\n    }\n\n    @AfterEach\n    default void afterEachTest(TestInfo testInfo) {\n        ***log***.info(\"Finished executing {}\", testInfo.getDisplayName());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.DynamicTest.dynamicTest;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.junit.jupiter.api.DynamicTest;\nimport org.junit.jupiter.api.TestFactory;\n\ninterface TestInterfaceDynamicTestsDemo {\n\n    @TestFactory\n    default Collection<DynamicTest> dynamicTestsFromCollection() {\n        return Arrays.*asList*(\n                *dynamicTest*(\"1st dynamic test in test interface\",\n                        () -> *assertTrue*(true)),\n                *dynamicTest*(\"2nd dynamic test in test interface\",\n                        () -> *assertTrue*(true)));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@Tag(\"timed\")\n@ExtendWith(TimingExtension.class)\npublic interface TimeExecutionLogger {\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\n\nimport org.junit.jupiter.api.Test;\n\nclass TestInterfaceTest implements TestLifecycleLogger, \n        TimeExecutionLogger, \n        TestInterfaceDynamicTestsDemo {\n\n    @Test\n    void isEqualValue() {\n        *assertEquals*(1, 1);\n    }\n\n}\n```", "```java\n@TestTemplate, and also declaring an extension of the type MyTestTemplateInvocationContextProvider:\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.TestTemplate;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\nclass TemplateTest {\n\n    @TestTemplate\n    @ExtendWith(MyTestTemplateInvocationContextProvider.class)\n    void testTemplate(String parameter) {\n        System.*out*.println(parameter);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport org.junit.jupiter.api.extension.Extension;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolver;\nimport org.junit.jupiter.api.extension.TestTemplateInvocationContext;\nimport org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;\n\npublic class MyTestTemplateInvocationContextProvider\n        implements TestTemplateInvocationContextProvider {\n\n    @Override\n    public boolean supportsTestTemplate(ExtensionContext context) {\n        return true;\n    }\n\n    @Override\n    public Stream<TestTemplateInvocationContext> \n        provideTestTemplateInvocationContexts(\n       ExtensionContext context) {\n        return Stream.*of*(invocationContext(\"parameter-1\"),\n                invocationContext(\"parameter-2\"));\n    }\n\n    private TestTemplateInvocationContext invocationContext(String parameter) {\n        return new TestTemplateInvocationContext() {\n            @Override\n            public String getDisplayName(int invocationIndex) {\n                return parameter;\n            }\n\n            @Override\n            public List<Extension> getAdditionalExtensions() {\n                return Collections.singletonList(new ParameterResolver() {\n                    @Override\n                    public boolean supportsParameter(\n                            ParameterContext parameterContext,\n                            ExtensionContext extensionContext) {\n                        return parameterContext.getParameter().getType()\n                             .equals(String.class);\n                    }\n\n                    @Override\n                    public Object resolveParameter(\n                            ParameterContext parameterContext,\n                            ExtensionContext extensionContext) {\n                        return parameter;\n                    }\n                });\n            }\n        };\n    }\n\n}\n```", "```java\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-params</artifactId>\n    <version>${junit.jupiter.version}</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\ndependencies {\n      testCompile(\"org.junit.jupiter:junit-jupiter-\n      params:${junitJupiterVersion}\")\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n class ValueSourceStringsParameterizedTest {\n\n    @ParameterizedTest\n    @ValueSource(strings = { \"Hello\", \"World\" })\n    void testWithStrings(String argument) {\n      System.*out*.println(\"Parameterized test with (String) parameter:  \"             \n        + argument);\n      *assertNotNull*(argument);\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nclass ValueSourcePrimitiveTypesParameterizedTest {\n\n   @ParameterizedTest\n    @ValueSource(ints = { 0, 1 })\n    void testWithInts(int argument) {\n        System.*out*.println(\"Parameterized test with (int) argument: \" + \n            argument);\n        *assertNotNull*(argument);\n    }\n\n    @ParameterizedTest\n    @ValueSource(longs = { 2L, 3L })\n    void testWithLongs(long argument) {\n        System.*out*.println(\n        \"Parameterized test with (long) \n              argument: \" + argument);\n        *assertNotNull*(argument);\n    }\n\n    @ParameterizedTest\n    @ValueSource(doubles = { 4d, 5d })\n    void testWithDoubles(double argument) {\n        System.*out*.println(\"Parameterized test with (double)\n              argument: \" + argument);\n        *assertNotNull*(argument);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport java.util.concurrent.TimeUnit;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\n\nclass EnumSourceParameterizedTest {\n\n    @ParameterizedTest\n    @EnumSource(TimeUnit.class)\n    void testWithEnum(TimeUnit argument) {\n        System.*out*.println(\"Parameterized test with (TimeUnit)         \n            argument: \" + argument);\n        *assertNotNull*(argument);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\nimport static org.junit.jupiter.params.provider.EnumSource.Mode.*EXCLUDE*;\nimport static org.junit.jupiter.params.provider.EnumSource.Mode.*MATCH_ALL*;\n\nimport java.util.concurrent.TimeUnit;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\n\nclass EnumSourceFilteringParameterizedTest {\n\n    @ParameterizedTest\n    @EnumSource(value = TimeUnit.class, names = { \"DAYS\", \"HOURS\" })\n    void testWithFilteredEnum(TimeUnit argument) {\n        System.*out*.println(\"Parameterized test with some (TimeUnit) \n            argument: \"+ argument);\n        *assertNotNull*(argument);\n    }\n\n    @ParameterizedTest\n    @EnumSource(value = TimeUnit.class, mode = *EXCLUDE*, names = { \n    \"DAYS\", \"HOURS\" })\n    void testWithExcludeEnum(TimeUnit argument) {\n        System.*out*.println(\"Parameterized test with excluded (TimeUnit) \n            argument: \" + argument);\n        *assertNotNull*(argument);\n    }\n\n    @ParameterizedTest\n    @EnumSource(value = TimeUnit.class, mode = *MATCH_ALL*, names = \n    \"^(M|N).+SECONDS$\")\n    void testWithRegexEnum(TimeUnit argument) {\n        System.*out*.println(\"Parameterized test with regex filtered \n            (TimeUnit) argument: \" + argument);\n        *assertNotNull*(argument);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport java.util.stream.Stream;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass MethodSourceStringsParameterizedTest {\n\n    static Stream<String> stringProvider() {\n        return Stream.*of*(\"hello\", \"world\");\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"stringProvider\")\n    void testWithStringProvider(String argument) {\n        System.*out*.println(\"Parameterized test with (String) argument: \"\n           + argument);\n        *assertNotNull*(argument);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport java.util.stream.Stream;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass MethodSourceObjectsParameterizedTest {\n\n    static Stream<Person> personProvider() {\n        Person john = new Person(\"John\", \"Doe\");\n        Person jane = new Person(\"Jane\", \"Roe\");\n        return Stream.*of*(john, jane);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"personProvider\")\n    void testWithPersonProvider(Person argument) {\n        System.*out*.println(\"Parameterized test with (Person) argument: \" + \n                argument);\n        *assertNotNull*(argument);\n    }\n\n    static class Person {\n        String name;\n        String surname;\n\n        public Person(String name, String surname) {\n            this.name = name;\n            this.surname = surname;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public String getSurname() {\n            return surname;\n        }\n\n        public void setSurname(String surname) {\n            this.surname = surname;\n        }\n\n        @Override\n        public String toString() {\n            return \"Person [name=\" + name + \", surname=\" + surname + \"]\";\n        }\n\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport java.util.stream.DoubleStream;\nimport java.util.stream.IntStream;\nimport java.util.stream.LongStream;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass MethodSourcePrimitiveTypesParameterizedTest {\n\n    static IntStream intProvider() {\n        return IntStream.*of*(0, 1);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"intProvider\")\n    void testWithIntProvider(int argument) {\n        System.*out*.println(\"Parameterized test with (int) argument: \" + \n            argument);\n        *assertNotNull*(argument);\n    }\n\n    static DoubleStream doubleProvider() {\n        return DoubleStream.*of*(2d, 3d);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"doubleProvider\")\n    void testWithDoubleProvider(double argument) {\n        System.*out*.println(\n            \"Parameterized test with (double) argument: \" + argument);\n        *assertNotNull*(argument);\n    }\n\n    static LongStream longProvider() {\n        return LongStream.*of*(4L, 5L);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"longProvider\")\n    void testWithLongProvider(long argument) {\n        System.*out*.println(\n            \"Parameterized test with (long) argument: \" + argument);\n        *assertNotNull*(argument);\n   }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotEquals*;\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport java.util.stream.Stream;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass MethodSourceMixedTypesParameterizedTest {\n\n    static Stream<Arguments> stringAndIntProvider() {\n        return Stream.*of*(Arguments.*of*(\"Mastering\", 10),\n            Arguments.*of*(\"JUnit 5\", 20));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"stringAndIntProvider\")\n    void testWithMultiArgMethodSource(String first, int second) {\n        System.*out*.println(\"Parameterized test with two arguments: \n            (String) \" + first + \" and (int) \" + second);\n        *assertNotNull*(first);\n        *assertNotEquals*(0, second);\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotEquals*;\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nclass CsvSourceParameterizedTest {\n\n    @ParameterizedTest\n    @CsvSource({ \"hello, 1\", \"world, 2\", \"'happy, testing', 3\" })\n    void testWithCsvSource(String first, int second) {\n        System.*out*.println(\"Parameterized test with (String) \" + first\n            + \" and (int) \" + second);\n        *assertNotNull*(first);\n        *assertNotEquals*(0, second);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotEquals*;\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvFileSource;\n\nclass CsvFileSourceParameterizedTest {\n\n    @ParameterizedTest\n    @CsvFileSource(resources = \"/input.csv\")\n    void testWithCsvFileSource(String first, int second) {\n        System.*out*.println(\"Yet another parameterized test with \n            (String) \" + first + \" and (int) \" + second);\n        *assertNotNull*(first);\n        *assertNotEquals*(0, second);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ArgumentsSource;\n\nclass ArgumentSourceParameterizedTest {\n\n    @ParameterizedTest\n    @ArgumentsSource(CustomArgumentsProvider1.class)\n    void testWithArgumentsSource(String first, int second) {\n        System.*out*.println(\"Parameterized test with (String) \" + first\n             + \" and (int) \" + second);\n        *assertNotNull*(first);\n        *assertTrue*(second > 0);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.util.stream.Stream;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.ArgumentsProvider;\n public class CustomArgumentsProvider1 implements ArgumentsProvider {\n\n    @Override\n    public Stream<? extends Arguments> provideArguments(\n            ExtensionContext context) {\n        System.*out*.println(\"Arguments provider to test \"\n            + context.getTestMethod().get().getName());\n        return Stream.*of*(Arguments.*of*(\"hello\", 1), \n            Arguments.*of*(\"world\", 2));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ArgumentsSource;\nimport org.junit.jupiter.params.provider.ArgumentsSources;\n\nclass ArgumentSourcesParameterizedTest {\n\n    @ParameterizedTest\n    @ArgumentsSources({ \n    @ArgumentsSource(CustomArgumentsProvider1.class),\n    @ArgumentsSource(CustomArgumentsProvider2.class) })\n    void testWithArgumentsSource(String first, int second) {\n        System.*out*.println(\"Parameterized test with (String) \" + first\n            + \" and (int) \" + second);\n        *assertNotNull*(first);\n        *assertTrue*(second > 0);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\n\nimport java.time.LocalDate;\nimport java.util.concurrent.TimeUnit;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nclass ImplicitConversionParameterizedTest {\n\n    @ParameterizedTest\n    @ValueSource(strings = \"true\")\n    void testWithImplicitConversionToBoolean(Boolean argument) {\n        System.*out*.println(\"Argument \" + argument + \" is a type of \"\n            + argument.getClass());\n        *assertTrue*(argument);\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = \"11\")\n    void testWithImplicitConversionToInteger(Integer argument) {\n        System.*out*.println(\"Argument \" + argument + \" is a type of \"\n            + argument.getClass());\n        *assertTrue*(argument > 10);\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = \"SECONDS\")\n    void testWithImplicitConversionToEnum(TimeUnit argument) {\n        System.*out*.println(\"Argument \" + argument + \" is a type of \"\n            + argument.getDeclaringClass());\n        *assertNotNull*(argument.name());\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = \"2017-07-25\")\n    void testWithImplicitConversionToLocalDate(LocalDate argument) {\n        System.*out*.println(\"Argument \" + argument + \" is a type of \"\n            + argument.getClass());\n        *assertNotNull*(argument);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\n\nimport java.util.concurrent.TimeUnit;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.converter.ConvertWith;\nimport org.junit.jupiter.params.provider.EnumSource;\n\nclass ExplicitConversionParameterizedTest {\n\n    @ParameterizedTest\n    @EnumSource(TimeUnit.class)\n    void testWithExplicitArgumentConversion(\n            @ConvertWith(CustomArgumentsConverter.class) String \n            argument) {\n          System.*out*.println(\"Argument \" + argument + \" is a type of \"\n              + argument.getClass());\n          *assertNotNull*(argument);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.params.converter.SimpleArgumentConverter;\n public class CustomArgumentsConverter extends SimpleArgumentConverter {\n\n    @Override\n    protected Object convert(Object source, Class<?> targetType) {\n          return String.*valueOf*(source);\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n class CustomNamesParameterizedTest {\n\n    @DisplayName(\"Display name of test container\")\n    @ParameterizedTest(name = \"[{index}] first argument=\\\"{0}\\\", second                 \n       argument={1}\")\n    @CsvSource({ \"mastering, 1\", \"parameterized, 2\", \"tests, 3\" })\n    void testWithCustomDisplayNames(String first, int second) {\n        System.*out*.println(\"Testing with parameters: \" + first + \" and \" +       \n           second);\n    }\n\n}\n```", "```java\nmodule mymodule {\n  exports io.github.bonigarcia;\n\n  requires mydependency;\n}\n```", "```java\n      Set<Integer> ints = Set.of(1, 2, 3);\n      List<String> strings = List.*of*(\"first\", \"second\");\n```", "```java\nManifest-Version: 1.0\nImplementation-Title: junit-jupiter-api\nAutomatic-Module-Name: org.junit.jupiter.api\nBuild-Date: 2017-07-18\nImplementation-Version: 5.0.0-M6\nBuilt-By: JUnit Team\nSpecification-Vendor: junit.org\nSpecification-Title: junit-jupiter-api\nImplementation-Vendor: junit.org\nBuild-Revision: 3e6482ab8b0dc5376a4ca4bb42bef1eb454b6f1b\nBuild-Time: 21:26:15.224+0200\nCreated-By: 1.8.0_131 (Oracle Corporation 25.131-b11)\nSpecification-Version: 5.0.0\n```", "```java\nmodule foo.bar {\n      requires org.junit.jupiter.api;\n}\n```"]