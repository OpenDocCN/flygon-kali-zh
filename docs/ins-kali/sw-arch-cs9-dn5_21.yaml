- en: '21'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '21'
- en: Challenges of Applying CI Scenarios
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用CI场景的挑战
- en: '**Continuous Integration** (**CI**) is sometimes stated as a prerequisite for
    DevOps. In the previous chapter, we discussed the basics of CI and how DevOps
    depends on it. Its implementation was presented in *Chapter 20*, *Understanding
    DevOps Principles*, too. But differently from the other practical chapters, the
    purpose of this chapter is to discuss how to enable CI in a real scenario, considering
    the challenges that you, as a software architect, will need to deal with.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）有时被视为DevOps的先决条件。在上一章中，我们讨论了CI的基础知识以及DevOps对其的依赖。它的实施也在*第20章*“理解DevOps原则”中进行了介绍。但与其他实践章节不同，本章的目的是讨论如何在实际场景中启用CI，考虑到您作为软件架构师需要处理的挑战。'
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Understanding CI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解CI
- en: Continuous Integration and GitHub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成和GitHub
- en: Understanding the risks and challenges when using CI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解在使用CI时面临的风险和挑战
- en: Understanding the WWTravelClub project approach for this chapter
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解WWTravelClub项目在本章的方法
- en: Like in the previous chapter, the sample of the WWTravelClub will be presented
    during the explanation of the chapter, since all the screens captured to exemplify
    CI came from it. Besides this, we will offer a conclusion at the end of the chapter
    so you can understand CI principles easily.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章类似，在解释本章内容时，将介绍WWTravelClub的示例，因为用于说明CI的所有屏幕截图都来自它。除此之外，我们将在本章末尾提供结论，以便您能够轻松理解CI的原则。
- en: By the end of the chapter, you will be able to decide whether to use CI in your
    project environment. Additionally, you will be able to define the tools needed
    for the successful use of this approach.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够决定是否在项目环境中使用CI。此外，您将能够定义成功使用此方法所需的工具。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Visual Studio 2019 Community edition or better. You may
    also need an Azure DevOps account, as described in *Chapter 3*, *Documenting Requirements
    with Azure DevOps*. You can find the sample code for the chapter at [https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5](https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要Visual Studio 2019社区版或更高版本。您可能还需要一个Azure DevOps帐户，如*第3章*“使用Azure DevOps记录需求”中所述。您可以在以下网址找到本章的示例代码：[https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5](https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5)。
- en: Understanding CI
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解CI
- en: As soon as you start working with a platform such as Azure DevOps, enabling
    CI will definitely be easy when it comes to clicking on the options for doing
    so, as we saw in *Chapter 20*, *Understanding DevOps Principles*. So, technology
    is not the Achilles' heel for implementing this process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始使用Azure DevOps这样的平台，启用CI肯定会很容易，当然，只需点击相应的选项即可，就像我们在*第20章*“理解DevOps原则”中所看到的那样。因此，技术并不是实施这一流程的阿喀琉斯之踵。
- en: 'The following screenshot shows an example of how easy it is to turn on CI using
    Azure DevOps. By clicking in the build pipeline and editing it, you will be able
    to set a trigger that enables CI after some clicks:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用Azure DevOps启用CI有多么容易。通过点击构建管道并对其进行编辑，您将能够设置触发器，以便在一些点击后启用CI：
- en: '![](img/B16756_21_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_01.png)'
- en: 'Figure 21.1: Enabling Continuous Integration trigger'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.1：启用持续集成触发器
- en: The truth is that CI will help you solve some problems. For instance, it will
    force you to test your code, since you will need to commit the changes faster,
    so other developers can make use of the code you are programming.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，CI将帮助您解决一些问题。例如，它将迫使您测试您的代码，因为您需要更快地提交更改，这样其他开发人员就可以使用您正在编程的代码。
- en: On the other hand, you will not do CI just by enabling a CI build in Azure DevOps.
    For sure, you will turn on the possibility of starting a build as soon as you
    get a commit done and the code is done, but this is far from saying you have CI
    available in your solution.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，您不能只是在Azure DevOps中启用CI构建。当然，一旦您提交了更改并完成了代码，您就可以启动构建的可能性，但这远非意味着您的解决方案中有可用的CI。
- en: The reason why you as a software architect need to worry a bit more about it
    is related to a real understanding of what DevOps is. As discussed in *Chapter
    20*, *Understanding DevOps Principles*, the need to deliver value to the end user
    will always be a good way to decide on and draw the development life cycle. So,
    even if turning on CI is easy, what is the real business impact of this feature
    being enabled for your end user? Once you have all the answers to this question
    and you know how to reduce the risks of its implementation, then you will be able
    to say that you have a CI process implemented.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件架构师，您需要更多地关注这一点的原因与对DevOps的真正理解有关。正如在*第20章*“理解DevOps原则”中所讨论的，向最终用户提供价值的需求将始终是决定和制定开发生命周期的良好方式。因此，即使启用CI很容易，但启用此功能对最终用户的真正业务影响是什么？一旦您对这个问题有了所有的答案，并且知道如何减少其实施的风险，那么您就能够说您已经实施了CI流程。
- en: It is worth mentioning that CI is a principle that will make DevOps work better
    and faster, as was discussed in *Chapter 20*, *Understanding DevOps Principles*.
    However, DevOps surely can live without it, once you are not sure if your process
    is mature enough to enable code being continuously delivered. More than that,
    if you turn on CI in a team that is not mature enough to deal with its complexity,
    you will probably cause a bad understanding of DevOps, since you will start incurring
    some risks while deploying your solution. The point is, CI is not a prerequisite
    for DevOps. When you have CI enabled, you can make things faster in DevOps. However,
    you can practice DevOps without it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，CI是一个原则，可以使DevOps工作更加高效和快速，正如在*第20章* *理解DevOps原则*中所讨论的那样。然而，一旦你不确定你的流程是否足够成熟，可以启用持续交付代码，DevOps肯定可以在没有它的情况下运行。更重要的是，如果你在一个还不够成熟以处理其复杂性的团队中启用CI，你可能会导致对DevOps的误解，因为在部署解决方案时，你可能会开始遇到一些风险。关键是，CI不是DevOps的先决条件。一旦启用了CI，你可以在DevOps中加快速度。然而，你可以在没有它的情况下实践DevOps。
- en: This is the reason why we are dedicating an extra chapter to CI. As a software
    architect, you need to understand the key points of having CI switched on. But,
    before we check this out, let's learn another tool that can help us out with continuous
    integration – GitHub.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们要专门为CI增加一个额外的章节。作为软件架构师，你需要了解开启CI的关键点。但在我们检查这个之前，让我们学习另一个工具，可以帮助我们进行持续集成
    - GitHub。
- en: Continuous Integration and GitHub
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成和GitHub
- en: Since GitHub's acquisition by Microsoft, many features have evolved and new
    options have been delivered, enhancing the power of this powerful tool. This integration
    can be checked using the Azure portal, and particularly using GitHub Actions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 自从GitHub被微软收购以来，许多功能已经发展，并且提供了新的选项，增强了这个强大工具的功能。可以使用Azure门户网站，特别是使用GitHub Actions来检查这个集成。
- en: 'GitHub Actions is a set of tools that helps with the automation of software
    development. It enables a fast CI/**Continuous Deployment** (**CD**) service on
    any platform, having YAML files to define its workflows. You can consider GitHub
    Actions as an alternative to Azure DevOps Pipelines. However, it is worth mentioning
    that you can automate any GitHub event using GitHub Actions, having thousands
    of actions available at GitHub Marketplace:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions是一组工具，用于自动化软件开发。它可以在任何平台上快速启用CI/持续部署（CD）服务，使用YAML文件定义工作流程。你可以将GitHub
    Actions视为Azure DevOps Pipelines的替代方案。然而，值得一提的是，你可以使用GitHub Actions自动化任何GitHub事件，在GitHub
    Marketplace上有数千种可用的操作：
- en: '![](img/B16756_21_02.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_02.png)'
- en: 'Figure 21.2: GitHub Actions'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.2：GitHub Actions
- en: 'Creating a workflow to build a .NET Core Web App is quite simple via the GitHub Actions
    interface. As you can see in the preceding screenshot, there are some workflows
    already created, to help us out. The YAML we have below was generated by clicking
    the **Set up this workflow** option under **.NET Core**:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过GitHub Actions界面创建构建.NET Core Web应用程序的工作流程非常简单。正如你在前面的截图中所看到的，已经创建了一些工作流程来帮助我们。我们下面的YAML是通过在**.NET
    Core**下点击**设置此工作流程**选项生成的：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the adaptations made below, it was able to build the application specific
    created for this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过下面的调整，可以构建本章特定创建的应用程序。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see below, once the script is updated, it is possible to check the
    result of the workflow. It is also possible to enable Continuous Deployment if
    you want to. It is just a matter of defining the correct script:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一旦脚本更新，就可以检查工作流程的结果。如果你愿意，也可以启用持续部署。这只是定义正确脚本的问题：
- en: '![](img/B16756_21_03.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_03.png)'
- en: 'Figure 21.3: Simple application compilation using GitHub Actions'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.3：使用GitHub Actions进行简单应用程序编译
- en: Microsoft provides documentation specifically to present Azure and GitHub integration.
    Check this out at [https://docs.microsoft.com/en-us/azure/developer/github](https://docs.microsoft.com/en-us/azure/developer/github).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 微软专门提供文档来介绍Azure和GitHub的集成。在[https://docs.microsoft.com/en-us/azure/developer/github](https://docs.microsoft.com/en-us/azure/developer/github)查看。
- en: As a software architect, you need to understand which tool best fits your development
    team. Azure DevOps has a wonderful environment for enabling continuous integration,
    so does GitHub. The key point here is that no matter the option you decide upon,
    there are risks and challenges that you will face once CI is enabled. Let us check
    them out in the next topic.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件架构师，你需要了解哪种工具最适合你的开发团队。Azure DevOps为启用持续集成提供了一个很好的环境，GitHub也是如此。关键在于，无论你决定选择哪个选项，一旦启用CI，你将面临风险和挑战。让我们在下一个主题中看看它们。
- en: Understanding the risks and challenges when using CI
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解使用CI时的风险和挑战
- en: Now, you may be thinking about the risks and challenges as a way for you to
    avoid using CI. But why should we avoid using it if it will help you create a
    better DevOps process? This is not the purpose of the chapter. The idea of this
    section is to help you, as a software architect, to mitigate the risks and find
    a better way to pass through the challenges using good processes and techniques.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会考虑风险和挑战，作为避免使用CI的一种方式。但是，如果它可以帮助你创建更好的DevOps流程，为什么我们要避免使用它呢？这不是本章的目的。本节的目的是帮助你作为软件架构师，减轻风险，并找到通过良好的流程和技术来应对挑战的更好方式。
- en: 'The list of risks and challenges that will be discussed in this section are
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论的风险和挑战列表如下：
- en: Continuous production deployment
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续生产部署
- en: Incomplete features in production
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产中的不完整功能
- en: Unstable solutions for testing
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试中的不稳定解决方案
- en: Once you have the techniques and the processes defined to deal with them, there
    is no reason to not use CI. It is worth mentioning that DevOps does not depend
    on CI. However, it does make DevOps work more smoothly. Now, let us have a look
    at them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了处理这些问题的技术和流程，就没有理由不使用CI。值得一提的是，DevOps并不依赖于CI。然而，它确实可以使DevOps工作更加顺畅。现在，让我们来看一下它们。
- en: Disabling continuous production deployment
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用持续生产部署
- en: Continuous production deployment is a process where, after a commit of a new
    piece of code and some pipeline steps, you will have this code in the **production**
    environment. This is not impossible but is hard and expensive to do. Besides,
    you need to have a mature team to enable it. The problem is that most of the demos
    and samples you will find on the internet presenting CI will show you a fast track
    to deploy the code. The demonstrations of CI/CD look so simple and easy to do!
    This *simplicity* can suggest that you should work as soon as possible on its
    implementation. However, if you think a little more, this scenario can be dangerous
    if you deploy directly into production! In a solution that needs to be available
    24 hours a day, 7 days a week, this is impractical. So, you will need to worry
    about that and think of different solutions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 持续生产部署是一个过程，在提交了新的代码片段并经过一些管道步骤后，你将在**生产**环境中拥有这段代码。这并非不可能，但是很难且成本高昂。此外，你需要一个成熟的团队来实现它。问题在于，大多数在互联网上找到的演示和示例都会向你展示一个快速部署代码的捷径。CI/CD的演示看起来如此简单和容易！这种*简单性*可能会暗示你应该尽快开始实施。然而，如果你再多考虑一下，如果直接部署到生产环境，这种情况可能是危险的！在一个需要24小时、7天全天候可用的解决方案中，这是不切实际的。因此，你需要担心这一点，并考虑不同的解决方案。
- en: 'The first one is the use of a multi-stage scenario, as described in *Chapter
    20*, *Understanding DevOps Principles*. The multi-stage scenario can bring more
    security to the ecosystem of the deployment you are building. Besides, you will
    get more options to avoid incorrect deployments into production, such as pre-deployment
    approvals:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是使用多阶段场景，如*第20章*中所述，*理解DevOps原则*。多阶段场景可以为你构建的部署生态系统带来更多的安全性。此外，你将有更多的选择来避免不正确的部署到生产环境，比如预部署批准：
- en: '![](img/B16756_21_04.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_04.png)'
- en: 'Figure 21.4: Multi-stage scenario for production environment security'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.4：生产环境安全的多阶段场景
- en: It is worth mentioning, too, that you can build a deployment pipeline where
    all your code and software structure will be updated by this tool. However, if
    you have something outside of this scenario, such as database scripts and environment
    configurations, an incorrect publication into production may cause damage to end
    users. Besides, the decision of when the production environment will be updated
    needs to be planned and, in many scenarios, all the platform users need to be
    notified of the upcoming change. Use a *change management* procedure in these
    hard-to-decide cases.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，你可以构建一个部署管道，通过这个工具更新所有的代码和软件结构。然而，如果你有一些超出这种情况的东西，比如数据库脚本和环境配置，一个不正确的发布可能会对最终用户造成损害。此外，生产环境何时更新的决定需要计划，并且在许多情况下，所有平台用户需要被通知即将发生的变化。在这些难以决定的情况下使用*变更管理*程序。
- en: So, the challenge of delivering code to production will make you think about
    a schedule to do so. It does not matter if your cycle is monthly, daily, or even
    at each commit. The key point here is that you need to create a process and a
    pipeline that guarantees that only good and approved software is at the production
    stage. It is worth noting, however, that the longer you leave deployments, the
    scarier they are as the deviation between the previously deployed version and
    the new one will be greater, and more changes will be pushed out in one go. The
    more frequently you can manage this, the better.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将代码交付到生产环境的挑战将让你考虑一个时间表。无论你的周期是每月、每天，甚至每次提交。关键点在于你需要创建一个流程和管道，确保只有良好和经过批准的软件在生产阶段。然而，值得注意的是，你离开部署的时间越长，以前部署版本和新版本之间的偏差就会越大，一次推出的变化也会越多。你能够更频繁地管理这一点，就越好。
- en: Incomplete features
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不完整的功能
- en: 'While a developer of your team is creating a new feature or fixing a bug, you
    will probably consider generating a branch that can avoid the use of the branch
    designed for continuous delivery. A branch can be considered a feature available
    in code repositories to enable the creation of an independent line of development
    since it isolates the code. As you can see in the following screenshot, creating
    a branch using Visual Studio is quite simple:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的团队的开发人员正在创建一个新的功能或修复一个错误时，你可能会考虑生成一个分支，以避免使用为持续交付设计的分支。分支可以被认为是代码存储库中可用的功能，以启用独立的开发线，因为它隔离了代码。如下截图所示，使用Visual
    Studio创建一个分支非常简单：
- en: '![](img/B16756_21_05.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_05.png)'
- en: 'Figure 21.5: Creating a branch in Visual Studio'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.5：在Visual Studio中创建分支
- en: This seems to be a good approach but let us suppose that the developer has considered
    the implementation ready for deploying and has just merged the code into the master
    branch. What if this feature is not ready yet, just because a requirement was
    omitted? What if the bug has caused incorrect behavior? The result could be a
    release with an incomplete feature or an incorrect fix.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是一个不错的方法，但让我们假设开发人员认为实现已经准备好部署，并且刚刚将代码合并到主分支。如果这个功能还没有准备好，只是因为遗漏了一个需求呢？如果错误导致了不正确的行为呢？结果可能是发布一个不完整的功能或不正确的修复。
- en: 'One of the good practices to avoid broken features and even incorrect fixes
    in the master branch is the use of pull requests. Pull requests will let other
    team developers know that the code you developed is ready to be merged. The following
    screenshot shows how you can use Azure DevOps to create a **New Pull Request**
    for a change you have made:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 避免主分支中出现损坏的功能甚至不正确的修复的一个好的做法是使用拉取请求。拉取请求将让其他团队开发人员知道你开发的代码已经准备好合并。以下截图显示了如何使用Azure
    DevOps创建一个你所做更改的**新拉取请求**：
- en: '![](img/B16756_21_06.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_06.png)'
- en: 'Figure 21.6: Creating a pull request'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.6：创建拉取请求
- en: 'Once the pull request is created and the reviewers are defined, each reviewer
    will be able to analyze the code and decide whether this code is healthy enough
    to be in the master branch. The following screenshot shows a way to check it by
    using the compare tool to analyze the change:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了拉取请求并确定了审阅者，每个审阅者都将能够分析代码，并决定这段代码是否足够健康，可以合并到主分支中。以下截图显示了使用比较工具来分析更改的方法：
- en: '![](img/B16756_21_07.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_07.png)'
- en: 'Figure 21.7: Analyzing the pull request'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.7：分析拉取请求
- en: 'Once all approvals are done, you will be able to safely merge the code to the
    master branch, as you can see in the following screenshot. To merge the code,
    you will need to click on **Complete merge**. If the CI trigger is enabled, as
    shown earlier in the chapter, Azure DevOps will start a build pipeline:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有的批准都完成了，你就可以安全地将代码合并到主分支，就像你在下面的截图中所看到的那样。要合并代码，你需要点击“完成合并”。如果CI触发器已启用，就像在本章前面所示的那样，Azure
    DevOps将启动一个构建流水线：
- en: '![](img/B16756_21_08.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_08.png)'
- en: 'Figure 21.8: Merging the pull request'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.8：合并拉取请求
- en: There is no way to argue with the fact that without a process like this, the
    master branch will suffer from a lot of bad code being deployed that could cause
    damage together with CD. It is worth mentioning that code review is an excellent
    practice in CI/CD scenarios, and it is considered a wonderful practice for creating
    good quality software as well.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，如果没有这样的流程，主分支将遭受大量可能会造成损害的糟糕代码，尤其是在CD的情况下。值得一提的是，代码审查在CI/CD场景中是一个很好的实践，也被认为是创建高质量软件的绝佳实践。
- en: The challenge that you need to focus on here is guaranteeing that only entire
    features will appear to your end users. You may use the feature flag principle
    to solve this, which is a technique that makes sure only features that are ready
    are presented to end users. Again, we are not talking about CI as a tool but as
    a process to be defined and used every single time you need to deliver code for
    production.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要关注的挑战是确保只有完整的功能才会呈现给最终用户。你可以使用特性标志原则来解决这个问题，这是一种确保只有准备好的功能呈现给最终用户的技术。我们再次强调的不是CI作为一种工具，而是作为一种在每次需要为生产交付代码时定义和使用的过程。
- en: It is worth mentioning that for controlling feature availability in an environment,
    feature flags are much safer than using branching/pull requests. Both have their
    place but pull requests are about controlling the quality of code at the CI stage,
    and feature flags are for controlling feature availability at the CD stage.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，在控制环境中的特性可用性方面，特性标志比使用分支/拉取请求要安全得多。两者都有各自的用处，但拉取请求是关于在CI阶段控制代码质量，而特性标志是在CD阶段控制特性可用性。
- en: An unstable solution for testing
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个不稳定的测试解决方案
- en: Considering that you have already mitigated the two other risks presented in
    this topic, you may find it uncommon to have bad code after CI. It is true that
    the worries presented earlier will certainly be lessened since you are working
    with a multi-stage scenario and pull requests before pushing to the first stage.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到你已经减轻了本主题中提出的另外两个风险，你可能会发现在CI之后出现糟糕的代码是不太常见的。确实，早前提到的担忧肯定会减轻，因为你正在处理一个多阶段的情景，并且在推送到第一个阶段之前进行了拉取请求。
- en: But is there a way to accelerate the evaluation of release, being sure that
    this new release is ready for your stakeholder's tests? Yes, there is! Technically,
    the way you can do so is described in the use cases of *Chapter 18*, *Testing
    Your Code with Unit Test Cases and TDD*, and *Chapter 22*, *Automation for Functional
    Tests*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有没有一种方法可以加速发布的评估，确保这个新版本已经准备好供利益相关者测试？是的，有！从技术上讲，你可以在第18章“使用单元测试用例和TDD测试你的代码”和第22章“功能测试自动化”中找到这样做的方法。
- en: As discussed in both those chapters, it is impracticable to automate every single
    part of the software, considering the efforts needed to do so. Besides, the maintenance
    of automation can be more expensive in scenarios where the user interface or the
    business rules change a lot. Although this is a tough decision, as a software
    architect, you must always incentivize the usage of automated testing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两章讨论中，自动化软件的每一个部分都是不切实际的，考虑到所需的努力。此外，在用户界面或业务规则经常变化的情况下，自动化的维护成本可能更高。虽然这是一个艰难的决定，作为软件架构师，你必须始终鼓励自动化测试的使用。
- en: 'To exemplify it, let us have a look at the following screenshot, which shows
    the unit and functional tests samples of WWTravelClub, created by an Azure DevOps
    project template:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，让我们看一下下面的截图，它显示了由Azure DevOps项目模板创建的WWTravelClub的单元测试和功能测试样本：
- en: '![](img/B16756_21_09.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_09.png)'
- en: 'Figure 21.9: Unit and functional tests projects'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.9：单元测试和功能测试项目
- en: There are some architectural patterns, such as SOLID, presented in *Chapter
    11*, *Design Patterns and .NET 5 Implementation*, and quality assurance approaches,
    such as peer review, that will give you better results than software testing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在第11章“设计模式和.NET 5实现”中介绍了一些架构模式，比如SOLID，以及一些质量保证方法，比如同行评审，这些方法会给你比软件测试更好的结果。
- en: However, these approaches do not invalidate automation practice. The truth is
    that all of them will be useful for getting a stable solution, especially when
    you are running a CI scenario. In this environment, the best thing you can do
    is to detect errors and wrong behaviors as fast as you can. Both unit and functional
    tests, as shown earlier, will help you with this.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些方法并不否定自动化实践。事实上，所有这些方法都将有助于获得稳定的解决方案，特别是在运行CI场景时。在这种环境中，你能做的最好的事情就是尽快检测错误和错误行为。正如前面所示，单元测试和功能测试都将帮助你做到这一点。
- en: 'Unit tests will help you a lot while discovering business logic errors before
    deployment, during the build pipeline. For instance, in the following screenshot,
    you will find a simulated error that canceled the build since the unit test did
    not pass:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试将在构建流水线期间帮助你发现业务逻辑错误。例如，在下面的截图中，你会发现一个模拟错误，导致单元测试未通过而取消了构建：
- en: '![](img/B16756_21_10.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_10.png)'
- en: 'Figure 21.10: Unit tests result'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.10：单元测试结果
- en: The way to get this error is quite simple. You need to code something that does
    not respond according to what the unit tests are checking. Once you commit it,
    considering you have the trigger of continuous deployment on, you will have the
    code building in the pipeline. One of the last steps provided by the Azure DevOps
    Project Wizard we have created is the execution of the unit tests. So, after the
    build of the code, the unit tests will run. If the code does not match the tests
    anymore, you will get an error.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 获得此错误的方法非常简单。您需要编写一些不符合单元测试检查的代码。一旦提交，假设您已经启用了持续部署触发器，代码将在流水线中构建。我们创建的Azure
    DevOps项目向导提供的最后一步之一是执行单元测试。因此，在构建代码之后，将运行单元测试。如果代码不再符合测试，您将收到错误。
- en: 'Meanwhile, the following screenshot shows an error during the functional tests
    in the **Development/Tests** stage. At this moment, the **Development/Tests**
    environment has a bug that was rapidly detected by functional tests:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，以下截图显示了在**开发/测试**阶段功能测试中出现的错误。此时，**开发/测试**环境存在一个错误，被功能测试迅速检测到：
- en: '![](img/B16756_21_11.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_11.png)'
- en: 'Figure 21.11: Functional tests result'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.11：功能测试结果
- en: 'But this is not the only good thing about applying functional tests in the
    process of CI/CD, once you have protected other deployment stages with this approach.
    For instance, let us look at the following screenshot from the **Releases** pipeline
    interface in Azure DevOps. If you look at **Release-9**, you will realize that
    since this error happened after the publication in the **Development/Tests** environment,
    the multi-staged environment will protect the other stages of the deployment:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是在CI/CD过程中应用功能测试的唯一好处，一旦您用这种方法保护了其他部署阶段。例如，让我们看一下Azure DevOps中**Releases**流水线界面的以下截图。如果您查看**Release-9**，您将意识到，由于此错误发生在**开发/测试**环境中发布之后，多阶段环境将保护部署的其他阶段：
- en: '![](img/B16756_21_12.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_21_12.png)'
- en: 'Figure 21.12: Multi-staged environment protection'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.12：多阶段环境保护
- en: The key point for success in the CI process is to think about it as a useful
    tool for accelerating the delivery of software and to not forget that a team always
    needs to deliver value to their end users. With this approach, the techniques
    presented earlier will provide incredible ways to achieve the results that your
    team aims for.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: CI过程成功的关键是将其视为加速软件交付的有用工具，并且不要忘记团队始终需要为最终用户提供价值。采用这种方法，之前介绍的技术将为您的团队实现其目标提供令人难以置信的方式。
- en: Understanding the WWTravelClub project approach
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解WWTravelClub项目的方法
- en: 'In the chapter, WWTravelClub project screenshots were presented, exemplifying
    the steps for adopting a safer approach while enabling CI. Even considering WWTravelClub
    as a hypothetical scenario, some concerns were considered while building it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，展示了WWTravelClub项目的截图，示范了采用更安全的方法来实现CI的步骤。即使将WWTravelClub视为假设的情景，建立它时也考虑了一些问题：
- en: CI is enabled but a multi-stage scenario is enabled too.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI已启用，但多阶段场景也已启用。
- en: Even with a multi-stage scenario, the pull request is a way to guarantee that
    only good-quality code will be presented in the first stage.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使有多阶段场景，拉取请求也是确保只有高质量代码会出现在第一阶段的一种方式。
- en: To do a good job in the pull request, peer reviews are undertaken.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在拉取请求中做好工作，进行了同行评审。
- en: The peer reviews check, for instance, the presence of a feature flag while creating
    a new feature.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同行评审检查，例如在创建新功能时是否存在功能标志。
- en: The peer reviews check both unit and functional tests developed during the creation
    of the new feature.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同行评审检查在创建新功能期间开发的单元测试和功能测试。
- en: The preceding steps are not exclusively for WWTravelClub. You, as a software
    architect, will need to define the approach to guarantee a safe CI scenario. You
    may use this as a starting point.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤不仅适用于WWTravelClub。作为软件架构师，您需要定义一种方法来确保安全的CI场景。您可以将此作为起点。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered the importance of understanding when you can enable CI
    in the software development life cycle, considering the risks and challenges you
    will take as a software architect once you decide to use it for your solution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在软件开发生命周期中启用CI的重要性，考虑到您作为软件架构师决定为解决方案使用它时将面临的风险和挑战。
- en: Additionally, the chapter introduced some solutions and concepts that can make
    this process easier, such as multi-stage environments, pull request reviews, feature
    flags, peer reviews, and automated tests. Understanding these techniques and processes
    will enable you to guide your project toward safer behavior when it comes to CI
    in a DevOps scenario.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本章介绍了一些可以使这个过程更容易的解决方案和概念，例如多阶段环境、拉取请求审查、功能标志、同行评审和自动化测试。理解这些技术和流程将使您能够在DevOps场景中引导项目朝着更安全的行为方向发展。
- en: In the next chapter, we will see how automation for software testing works.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到软件测试的自动化是如何工作的。
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is CI?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是CI？
- en: Can you have DevOps without CI?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有CI，你能有DevOps吗？
- en: What are the risks of enabling CI in a non-mature team?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在非成熟团队启用CI的风险是什么？
- en: How can a multi-stage environment help CI?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多阶段环境如何帮助CI？
- en: How can automated tests help CI?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化测试如何帮助CI？
- en: How can pull requests help CI?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求如何帮助CI？
- en: Do pull requests only work with CI?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求只能与CI一起使用吗？
- en: Further reading
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are some websites where you will find more information on the topics
    covered in this chapter:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些网站，您可以在其中找到有关本章涵盖主题的更多信息：
- en: 'Official Microsoft Documentation about CI/CD:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关CI/CD的官方微软文档：
- en: '[https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps/](https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-con)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps/](https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-con)'
- en: '[https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github](https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github](https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github)'
- en: '[https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd](https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd](https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd)'
- en: '[https://docs.microsoft.com/en-us/azure/devops/repos/git/pullrequest](https://docs.microsoft.com/en-us/azure/devops/repos/git/pullrequest)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/devops/repos/git/pullrequest](https://docs.microsoft.com/en-us/azure/devops/repos/git/pullrequest)'
- en: 'Azure and GitHub integration:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure和GitHub集成：
- en: '[https://docs.microsoft.com/en-us/azure/developer/github](https://docs.microsoft.com/en-us/azure/developer/github)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/developer/github](https://docs.microsoft.com/en-us/azure/developer/github)'
- en: 'Great Packt material about DevOps:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于DevOps的优秀Packt材料：
- en: '[https://www.packtpub.com/virtualization-and-cloud/professional-microsoft-azure-devops-engineering](https://www.packtpub.com/virtualization-and-cloud/professional-microsoft-azure-devops-engineering)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/virtualization-and-cloud/professional-microsoft-azure-devops-engineering](https://www.packtpub.com/virtualization-and-cloud/professional-microsoft-azure-devops-engineering)'
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video](https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video](https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video)'
- en: '[https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure](https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure
    )'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure](https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure
    )'
- en: 'Some new information about Azure Pipelines:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Azure Pipelines的一些新信息：
- en: '[https://devblogs.microsoft.com/devops/whats-new-with-azure-pipelines/](https://devblogs.microsoft.com/devops/whats-new-with-azure-pipelines/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/devops/whats-new-with-azure-pipelines/](https://devblogs.microsoft.com/devops/whats-new-with-azure-pipelines/)'
- en: 'Explanation about Feature Flags:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于功能标志的解释：
- en: '[https://martinfowler.com/bliki/FeatureToggle.html](https://martinfowler.com/bliki/FeatureToggle.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://martinfowler.com/bliki/FeatureToggle.html](https://martinfowler.com/bliki/FeatureToggle.html)'
