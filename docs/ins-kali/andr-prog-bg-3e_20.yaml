- en: '*Chapter 20*: Drawing Graphics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第20章*：绘制图形'
- en: This entire chapter will be about the Android `Canvas` class and some related
    classes, including `Paint`, `Color`, and `Bitmap`. These classes combined bring
    great power when it comes to drawing to the screen. Sometimes the default UI provided
    by the Android API isn't what we need. If we want to make a drawing app, draw
    graphs, or perhaps create a game, we need to take control of every pixel that
    the Android device has to offer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 整个章节将涉及Android的`Canvas`类和一些相关类，包括`Paint`、`Color`和`Bitmap`。这些类结合起来在绘制屏幕时具有强大的功能。有时，Android
    API提供的默认UI并不是我们需要的。如果我们想要制作一个绘图应用、绘制图表，或者创建一个游戏，我们需要控制Android设备提供的每个像素。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下内容：
- en: Understanding `Canvas` and related classes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`Canvas`和相关类
- en: Writing a `Canvas`-based demo app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基于`Canvas`的演示应用
- en: Looking at the Android coordinate system so we know where to do our drawing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Android坐标系统，以便知道在哪里进行绘图
- en: Learning about drawing and manipulating bitmaps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习绘制和操作位图
- en: Writing a bitmap-based demo app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基于位图的演示应用
- en: Let's draw!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始绘图！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2020](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2020).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，网址为[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2020](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2020)。
- en: Understanding the Canvas class
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Canvas类
- en: 'The `Canvas` class is part of the `android.graphics` package. In the next two
    chapters, we will be using all the following `import` statements from the `android.graphics`
    package and one more from the now-familiar `View` package. They give us access
    to some powerful drawing methods from the Android API:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`Canvas`类是`android.graphics`包的一部分。在接下来的两章中，我们将使用`android.graphics`包中的所有以下`import`语句，以及来自现在熟悉的`View`包的一个额外的`import`语句。它们为我们提供了从Android
    API中获取一些强大绘图方法的权限：'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, let's talk about `Bitmap`, `Canvas`, and `ImageView`, as highlighted
    in the previous code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论`Bitmap`、`Canvas`和`ImageView`，正如前面的代码所强调的那样。
- en: Getting started drawing with Bitmap, Canvas, and ImageView
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bitmap、Canvas和ImageView开始绘图
- en: As Android is designed to run all types of mobile apps, we can't immediately
    start typing our drawing code and expect it to work. We need to do a bit of preparation
    (coding) to consider the specific device our app is running on. It is true that
    some of this preparation can be slightly counterintuitive, but we will go through
    it a step at a time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Android设计用于运行各种类型的移动应用程序，我们不能立即开始输入绘图代码并期望它能够工作。我们需要做一些准备（编码）来考虑我们的应用正在运行的特定设备。有些准备可能有点反直觉，但我们将一步一步地进行。
- en: Canvas and Bitmap
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Canvas和Bitmap
- en: Depending on how you use the `Canvas` class, the term can be slightly misleading.
    While the `Canvas` class *is* the class to which you draw your graphics, like
    a painting canvas, you still need a surface to transpose the canvas to.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您如何使用`Canvas`类，这个术语可能会有点误导。虽然`Canvas`类*是*您绘制图形的类，就像绘画画布一样，但您仍然需要一个表面来转置画布。
- en: 'The surface, in this case (and in our first two demo apps), will be from the
    `Bitmap` class. We can think of it like this: we get a `Canvas` object and a `Bitmap`
    object and then set the `Bitmap` object as the part of the `Canvas` object to
    draw upon.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下（以及我们的前两个演示应用中），表面将来自`Bitmap`类。我们可以这样想：我们得到一个`Canvas`对象和一个`Bitmap`对象，然后将`Bitmap`对象设置为`Canvas`对象的一部分来进行绘制。
- en: This is slightly counterintuitive if you take the word canvas in its literal
    sense but once it is all set up, we can forget about it and concentrate on the
    graphics we want to draw.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照字面意义上的画布这个词，这可能有点反直觉，但一旦设置好了，我们就可以忘记它，专注于我们想要绘制的图形。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `Canvas` class supplies the *ability* to draw. It has all the methods for
    doing things such as drawing shapes, text, lines, and image files (including other
    bitmaps), and even plotting individual pixels.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Canvas`类提供了绘制的*能力*。它具有绘制形状、文本、线条和图像文件（包括其他位图），甚至绘制单个像素的所有方法。'
- en: The `Bitmap` class is used by the `Canvas` class and is the surface that gets
    drawn upon. You can think of the `Bitmap` instance as being inside a picture frame
    on the `Canvas` instance.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bitmap`类被`Canvas`类使用，并且是被绘制的表面。你可以把`Bitmap`实例想象成在`Canvas`实例上的图片框内。'
- en: Paint
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Paint
- en: In addition to the `Canvas` and `Bitmap` classes, we will be using the `Paint`
    class. This is much more easily understood. `Paint` is the class used to configure
    specific properties such as the color that we will draw on `Bitmap` (within `Canvas`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Canvas`和`Bitmap`类之外，我们还将使用`Paint`类。这更容易理解。`Paint`是用来配置特定属性的类，比如我们将在`Bitmap`（在`Canvas`内）上绘制的颜色。
- en: There is still another piece of the puzzle to cover before we can start drawing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始绘图之前，还有一个谜题需要解决。
- en: ImageView and Activity
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ImageView 和 Activity
- en: The `ImageView` class is the class that the `Activity` class will use to display
    output to the user. The reason for this third layer of abstraction is that as
    we have seen throughout the book, the `Activity` class needs to pass a `View`
    to the `setContentView` method to display something to the user. Throughout the
    book so far, this has been a layout that we created in the visual designer or
    in XML code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageView`类是`Activity`类用于向用户显示输出的类。有第三层抽象的原因是，正如我们在整本书中所看到的，`Activity`类需要将一个`View`传递给`setContentView`方法，以向用户显示内容。到目前为止，这一直是我们在可视化设计器或XML代码中创建的布局。'
- en: This time, we don't want a regular UI; we want to draw lines, pixels, and shapes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们不需要常规的UI；我们需要绘制线条、像素和形状。
- en: There are multiple types of classes that extend the `View` class, enabling many
    different types of apps to be made, and they will all be compatible with the `Activity`
    class, which is the foundation of all regular Android apps (including drawing
    apps and games).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种类型的类扩展了`View`类，使得可以制作许多不同类型的应用程序，并且它们都与`Activity`类兼容，这是所有常规Android应用程序（包括绘图应用程序和游戏）的基础。
- en: It is, therefore, necessary to associate the `Bitmap` class that gets drawn
    on (through its association with `Canvas`) with `ImageView`, once the drawing
    is done. The last step will be telling `Activity` that our `ImageView` class represents
    the content for the user to see by passing it to the `setContentView` method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦绘制完成，就需要将`Bitmap`类（通过与`Canvas`的关联）与`ImageView`关联起来。最后一步是通过将其传递给`setContentView`方法，告诉`Activity`我们的`ImageView`类代表用户要看到的内容。
- en: Canvas, Bitmap, Paint, and ImageView quick summary
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Canvas、Bitmap、Paint和ImageView的简要总结
- en: If the theory of the code structure we need to set up seems like it is not simple,
    you will breathe a sigh of relief when you see the relatively simple code shortly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要设置的代码结构的理论看起来并不简单，当你看到相对简单的代码时，你会松一口气。
- en: 'A quick summary of what we know so far:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止我们所知道的内容的一个简要总结：
- en: Every app needs an `Activity` class to interact with the user and the underlying
    operating system. Therefore, we must conform to the required hierarchy if we want
    to succeed.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个应用程序都需要一个`Activity`类来与用户和底层操作系统交互。因此，如果我们想成功，我们必须遵循所需的层次结构。
- en: We will use the `ImageView` class, which is a type of the `View` class. The
    `View` class is what `Activity` needs to display our app to the user.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用`ImageView`类，它是`View`类的一种类型。`View`类是`Activity`需要显示我们的应用程序给用户的内容。
- en: The `Canvas` class supplies the *ability* to draw lines, pixels, and other graphics
    too. It has all the methods for doing things such as drawing shapes, text, lines,
    and image files, and even plotting individual pixels.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Canvas`类还提供了绘制线条、像素和其他图形的*能力*。它具有绘制形状、文本、线条和图像文件，甚至绘制单个像素的所有方法。'
- en: The `Bitmap` class will be associated with the `Canvas` class and it is the
    surface that actually gets drawn upon.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Bitmap`类将与`Canvas`类关联，它是实际绘制的表面。'
- en: The `Canvas` class uses the `Paint` class to configure details such as the color.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Canvas`类使用`Paint`类来配置颜色等细节。'
- en: Finally, once the bitmap has been drawn upon, we must associate it with the
    `ImageView` instance, which in turn is set as the view for `Activity` via the
    `setContentView` method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦位图被绘制，我们必须将其与`ImageView`实例关联起来，然后通过`setContentView`方法将其设置为`Activity`的视图。
- en: The result will be what we draw on the `Bitmap` instance in the `Canvas` instance,
    which is displayed to the user through the `ImageView` instance via the call to
    the `setContentView` method. Phew!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是我们在`Canvas`实例中绘制的`Bitmap`实例，通过调用`setContentView`方法显示给用户的`ImageView`实例。哦！
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It doesn't matter if that isn't 100% clear. It is not that you aren't seeing
    things clearly – it simply isn't a clear relationship. Writing the code and using
    the techniques over and over will cause things to become clearer. Look at the
    code, do the demo apps in this chapter and the next, and then re-read this section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这并不是100%清楚也没关系。并不是你没有清晰地看到事情 - 它只是没有一个清晰的关系。反复编写代码并使用这些技术将使事情变得更清晰。看看代码，做一下本章和下一章的演示应用程序，然后重新阅读本节。
- en: Let's look at how to set up this relationship in code. Don't worry about typing
    the code; just study it first.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在代码中建立这种关系。不要担心输入代码，先学习它。
- en: Using the Canvas class
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Canvas类
- en: Let's look at the code and the different stages required to get drawing, and
    then we can quickly move on to drawing something for real, with the `Canvas` demo
    app.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码和获取绘图所需的不同阶段，然后我们可以快速转移到使用`Canvas`演示应用程序真正绘制一些东西。
- en: Preparing the instances of the required classes
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备所需类的实例
- en: 'The first step is to declare the instances of the classes we require:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是声明我们需要的类的实例：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code declares references of the `ImageView`, `Bitmap`, `Canvas`,
    and `Paint` types. They are named `myImageView`, `myBlankBitmap`, `myCanvas`,
    and `myPaint`, respectively.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码声明了`ImageView`、`Bitmap`、`Canvas`和`Paint`类型的引用。它们分别被命名为`myImageView`、`myBlankBitmap`、`myCanvas`和`myPaint`。
- en: Initializing the objects
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化对象
- en: 'Next, we need to initialize our new objects before using them:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在使用之前初始化我们的新对象：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice this comment in the previous code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意上面代码中的这条注释：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is where we would configure our color and draw stuff. Also, notice at the
    top of the code we declare and initialize two `int` variables called `widthInPixels`
    and `heightInPixels`. When we code the `Canvas` demo app, I will go into greater
    detail about some of those lines of code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们配置颜色和绘制内容的地方。还要注意代码顶部我们声明和初始化了两个名为`widthInPixels`和`heightInPixels`的`int`变量。当我们编写`Canvas`演示应用程序时，我将更详细地介绍其中的一些代码行。
- en: We are now ready to draw. All we must do is assign the `ImageView` instance
    to `Activity`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好绘制了。我们所需要做的就是将`ImageView`实例分配给`Activity`。
- en: Setting the Activity content
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Activity内容
- en: 'Finally, before we can see our drawing, we tell Android to use our `ImageView`
    instance called `myImageView` as the content to display to the user:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们看到我们的绘图之前，我们告诉Android使用我们称为`myImageView`的`ImageView`实例作为要显示给用户的内容：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we have already seen in every app so far, the `setContentView` method is
    part of the `Activity` class and we pass in `myImageView` as an argument, instead
    of an XML layout as we have been doing throughout the book so far. That's it.
    All we must learn now is how to actually draw on that `Bitmap` instance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们迄今为止在每个应用程序中看到的那样，`setContentView`方法是`Activity`类的一部分，我们传入`myImageView`作为参数，而不是像我们在整本书中一直做的那样传入XML布局。就是这样。我们现在所需要学习的就是如何在`Bitmap`实例上实际绘制。
- en: Before we do some drawing, I thought it would be useful to start a real project,
    copy and paste the code we have just discussed, a step at a time, into the correct
    place, and then actually see something drawn to the screen.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行一些绘图之前，我认为开始一个真正的项目，逐步复制和粘贴我们刚刚讨论过的代码到正确的位置，然后实际看到一些东西被绘制到屏幕上会很有用。
- en: Let's do some drawing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们进行一些绘制。 '
- en: Canvas demo app
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 画布演示应用程序
- en: We will create a new project just to explore the topic of drawing with `Canvas`.
    We will reuse what we have just learned and this time, we will also draw to the
    `Bitmap` instance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新项目，只是为了探索使用`Canvas`进行绘制的主题。我们将重用我们刚刚学到的知识，这次还将绘制到`Bitmap`实例上。
- en: Creating a new project
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: Create a new project and call it `Canvas Demo`. Choose the **Empty Activity**
    template.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新项目，命名为`Canvas Demo`。选择**空活动**模板。
- en: In addition, we are going to be using the vanilla version of the `Activity`
    class and the `MainActivity` class will therefore extend `Activity` instead of
    `AppCompatActivity` as we have been using previously. This is simply because we
    no longer need the extra features provided by the `AppCompatActivity` class.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用`Activity`类的原始版本，因此`MainActivity`类将扩展`Activity`，而不是之前使用的`AppCompatActivity`。这仅仅是因为我们不再需要`AppCompatActivity`类提供的额外功能。
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The complete code for this app can be found in the download bundle in the [*Chapter
    20*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)`/Canvas Demo` folder.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的完整代码可以在[*第20章*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)`/Canvas Demo`文件夹中的下载包中找到。
- en: Coding the Canvas demo app
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写Canvas演示应用程序
- en: 'To get started, edit the code in `MainActivity.java`, including adding the
    `import` directives and changing the version of the `Activity` class that the
    `MainActivity` class inherits from. Also notice in the next code that the call
    to the `setContentView` method has also been deleted. We will replace it soon:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请编辑`MainActivity.java`中的代码，包括添加`import`指令和更改`MainActivity`类继承的`Activity`类的版本。还要注意下一个代码中`setContentView`方法的调用也已被删除。我们很快会替换它：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have declared instances of the required classes, we can initialize
    them. Add the following code to the `onCreate` method after the call to `super.onCreate…`,
    as shown in this next code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经声明了所需类的实例，我们可以初始化它们。在`onCreate`方法中调用`super.onCreate…`之后，添加以下代码，如下一个代码所示：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code is the same as we saw when we were discussing `Canvas` earlier. It
    is worth exploring the `Bitmap` class initialization as it is not straightforward.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与我们之前讨论`Canvas`时看到的一样。值得探索`Bitmap`类的初始化，因为它并不简单。
- en: Exploring the Bitmap initialization
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 探索位图初始化
- en: Bitmaps, more typically in graphics-based apps and games, are used to represent
    objects such as different brushes to paint with, the player, backgrounds, game
    objects, and so on. Here we are simply using it to draw upon. In the next project,
    we will use bitmaps to represent the subject of our drawing, not just the surface
    to draw upon.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 位图，在基于图形的应用程序和游戏中更典型地用于表示不同的画笔、玩家、背景、游戏对象等。在这里，我们只是用它来绘制。在下一个项目中，我们将使用位图来表示我们绘制的主题，而不仅仅是绘制的表面。
- en: 'The method that needs explaining is the `createBitmap` method. The parameters
    from left to right are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 需要解释的方法是`createBitmap`方法。从左到右的参数如下：
- en: The width (in pixels)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度（以像素为单位）
- en: The height (in pixels)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度（以像素为单位）
- en: The bitmap configuration
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位图配置
- en: Bitmaps can be configured in several different ways. The `ARGB_8888` configuration
    means that each pixel is represented by 4 bytes of memory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 位图可以以几种不同的方式配置。`ARGB_8888`配置意味着每个像素由4个字节的内存表示。
- en: There are a few bitmap formats that Android can use. This one is perfect for
    a good range of colors and will ensure that the bitmaps we use and the colors
    we request will be drawn as intended. There are higher and lower configurations
    but `ARGB_8888` is perfect for the entirety of this chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Android可以使用几种位图格式。这个对于一系列的颜色来说是完美的，并且将确保我们使用的位图和我们请求的颜色将按预期绘制。有更高和更低的配置，但`ARGB_8888`对于本章来说是完美的。
- en: Now we can do the actual drawing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以进行实际的绘制了。
- en: Drawing on the screen
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在屏幕上绘制
- en: 'Add this next highlighted code after the initialization of `myPaint` and inside
    the closing curly brace of the `onCreate` method:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`myPaint`初始化之后，在`onCreate`方法的闭合大括号内添加下面突出显示的代码：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous code uses the `myCanvas.drawColor` method to fill the screen with
    color.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用`myCanvas.drawColor`方法来填充屏幕颜色。
- en: The `myPaint.setTextSize` method defines the size of the text that will be drawn
    next. The `myPaint.setColor` method determines what color any future drawing will
    be. The `myCanvas.drawText` method actually draws the text to the screen.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`myPaint.setTextSize`方法定义了接下来将绘制的文本的大小。`myPaint.setColor`方法确定了未来绘制的颜色。`myCanvas.drawText`方法实际将文本绘制到屏幕上。'
- en: Analyze the arguments passed into the `drawText` method and we can see that
    the text will say "Hello World!" and will be drawn 100 pixels from the left and
    100 pixels from the top of our bitmap (`myBitmap`).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 分析传递给`drawText`方法的参数，我们可以看到文本将会显示“Hello World!”，并且将在我们的位图（`myBitmap`）的左侧100像素和顶部100像素处绘制。
- en: Next, we use the `setColor` method again to change the color that will be used
    for drawing. Finally, we use the `drawCircle` method to draw a circle that is
    400 pixels from the left and 100 pixels from the top. The circle will have a radius
    of 100 pixels.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们再次使用`setColor`方法来改变将用于绘制的颜色。最后，我们使用`drawCircle`方法来绘制一个距左侧400像素，顶部100像素的圆。圆的半径为100像素。
- en: I reserved explaining the `Color.argb` method until now.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我保留了解释`Color.argb`方法直到现在。
- en: Explaining Color.argb
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解释Color.argb
- en: The `Color` class, unsurprisingly, helps us to manipulate and represent color.
    The `argb` method used previously returns a color constructed using the **alpha
    (opacity/transparency), red, green, blue** (**argb**) model. This model uses values
    ranging from 0 (no color) to 255 (full color) for each element. It is important
    to note, although on reflection it might seem obvious, that the colors mixed are
    intensities of light and are quite different to what happens when we mix paint,
    for example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Color`类，不出所料，帮助我们操纵和表示颜色。先前使用的`argb`方法返回使用**alpha（不透明度/透明度），红色，绿色，蓝色**（**argb**）模型构建的颜色。该模型使用从0（无颜色）到255（全颜色）的值。重要的是要注意，尽管在反思时可能似乎显而易见，但混合的颜色是光的强度，与我们混合颜色时发生的情况完全不同，例如混合油漆。'
- en: Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To devise an argb value and explore this model further, look at this handy
    website: [https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html).
    The site helps you pick the RGB values; you can then experiment with the alpha
    values.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要设计argb值并进一步探索这个模型，请查看这个方便的网站：[https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html)。该网站可以帮助您选择RGB值；然后您可以尝试alpha值。
- en: The values used to clear the drawing surface were `255, 0, 0, 255`. These values
    mean full opacity (solid color), no red, no green, and full blue. This makes a
    blue color.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 用于清除绘图表面的值是`255, 0, 0, 255`。这些值意味着完全不透明（纯色），没有红色，没有绿色，完全蓝色。这制作了一个蓝色。
- en: The next call to the `argb` method is in the first call to `setColor` where
    we are setting the required color for the text. The values `255, 255, 255, 255`
    mean full opacity, full red, full green, and full blue. When you combine light
    with these values, you get white.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对`argb`方法的下一个调用是在第一个调用`setColor`时，我们正在设置文本所需的颜色。值`255, 255, 255, 255`表示完全不透明，完全红色，完全绿色和完全蓝色。当您将光与这些值混合时，您会得到白色。
- en: The final call to the `argb` method is in the final call to the `setColor` method
    when we are setting the color to draw the circle. `255, 21, 207, 62` makes a sun-yellow
    color.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对`argb`方法的最终调用是在最终调用`setColor`方法时，我们正在设置绘制圆的颜色。`255, 21, 207, 62`制作了太阳黄色。
- en: 'The last step before we can run the code is to add the call to the `setContentView`
    method that places our `ImageView` (`myImageView`) as the `View` instance to be
    set as the content for this app. Here are the final lines of code to be added
    before the closing curly brace of the `onCreate` method:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行代码之前的最后一步是添加对`setContentView`方法的调用，该方法将我们的`ImageView`（`myImageView`）放置为要设置为此应用程序内容的`View`实例。以下是要在`onCreate`方法的结束大括号之前添加的最终代码行：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, we tell the `Activity` class to use `myImageView` by calling the `setContentView`
    method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过调用`setContentView`方法告诉`Activity`类使用`myImageView`。
- en: 'This is what the `Canvas` demo looks like when you run it. We can see an 800
    by 800-pixel drawing. In the next chapter, we will use more advanced techniques
    to utilize the entire screen and we will also learn about threads to make the
    graphics move in real time:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行时，这就是`Canvas`演示的样子。我们可以看到一个800 x 800像素的图纸。在下一章中，我们将使用更高级的技术来利用整个屏幕，并且我们还将学习有关线程以使图形实时移动：
- en: '![Figure 20.1 – Canvas demo'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.1 - 画布演示
- en: '](img/Figure_20.1_B16773.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.1_B16773.jpg)'
- en: Figure 20.1 – Canvas demo
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.1 - 画布演示
- en: It will help to understand the result of the coordinates we use in our `Canvas`
    class drawing methods if we better understand the Android coordinate system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更好地了解Android坐标系统，将有助于理解我们在`Canvas`类绘图方法中使用的坐标的结果。
- en: The Android coordinate system
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android坐标系统
- en: As we can see, drawing a bitmap is trivial. But the coordinate system that we
    use to draw our graphics onto needs a brief explanation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，绘制位图是微不足道的。但是，我们用来绘制图形的坐标系统需要简要解释。
- en: Plotting and drawing
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘图和绘制
- en: When we draw a `Bitmap` object to the screen, we pass in the coordinates we
    want to draw the object at. The available coordinates of a given Android device
    depend upon the resolution of its screen.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`Bitmap`对象绘制到屏幕上时，我们传入要绘制对象的坐标。给定Android设备的可用坐标取决于其屏幕的分辨率。
- en: For example, the Google Pixel phone has a screen resolution of 1,920 pixels
    (across) by 1,080 pixels (down) when held in landscape view.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Google Pixel手机在横向视图中的屏幕分辨率为1,920像素（横向）x 1,080像素（纵向）。
- en: The numbering system of these coordinates starts in the top left-hand corner
    at `0, 0` and proceeds down and to the right until the bottom-right corner, which
    is pixel `1919, 1079`. The apparent 1-pixel disparity between `1920` and `1919`
    and `1080` and `1079` is because the numbering starts at 0\.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些坐标的编号系统从左上角的`0, 0`开始，然后向下和向右移动，直到右下角，即像素`1919, 1079`。`1920`和`1919`之间以及`1080`和`1079`之间明显的1像素差异是因为编号从0开始。
- en: So, when we draw a bitmap or anything else to the screen (such as `Canvas` circles
    and rectangles), we must specify an `x, y` coordinate.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们将位图或其他任何东西绘制到屏幕上（例如`Canvas`圆和矩形），我们必须指定一个`x，y`坐标。
- en: Furthermore, a bitmap (or `Canvas` shape) of course comprises many pixels. So,
    which pixel of a given bitmap is drawn at the `x, y` screen coordinate that we
    will be specifying?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，位图（或`Canvas`形状）当然包括许多像素。那么，给定位图的哪个像素会在我们指定的`x，y`屏幕坐标处绘制？
- en: 'The answer is the top-left pixel of the `Bitmap` object. Look at the next figure,
    which should clarify the screen coordinates using the Google Pixel phone as an
    example. As a graphical means for explaining the Android coordinate drawing system,
    I will use a cute spaceship graphic:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是`Bitmap`对象的左上角像素。看看下一个图，它应该使用Google Pixel手机作为示例来澄清屏幕坐标。作为解释Android坐标绘图系统的图形手段，我将使用一个可爱的太空飞船图形：
- en: '![Figure 20.2 – Screen coordinates'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.2 - 屏幕坐标'
- en: '](img/Figure_20.2_B16773.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.2_B16773.jpg)'
- en: Figure 20.2 – Screen coordinates
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.2 - 屏幕坐标
- en: Furthermore, the coordinates are relative to what you draw upon. So, in the
    `Canvas` demo app we just coded, as well as the next demo, the coordinates are
    relative to the bitmap (`myBitmap`). In the next chapter, we will use the entire
    screen and the previous figure will be an accurate representation of what is happening.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，坐标是相对于您所绘制的内容的。因此，在我们刚刚编写的`Canvas`演示应用程序以及下一个演示应用程序中，坐标是相对于位图（`myBitmap`）的。在下一章中，我们将使用整个屏幕，前面的图将准确地表示发生的情况。
- en: Let's do some more drawing, this time with bitmaps from a graphics file. We
    will use the same starting code as we have seen in this app.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一些绘图，这次使用来自图形文件的位图。我们将使用与此应用程序中看到的相同的起始代码。
- en: Creating bitmaps
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建位图
- en: Let's do a little bit of theory before we dive into the code and consider exactly
    how we are going to bring images to life on the screen. To draw a bitmap, we will
    use the `drawBitmap` method of the `Canvas` class.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入代码之前，让我们先做一点理论，考虑一下我们将如何在屏幕上呈现图像。要绘制位图，我们将使用`Canvas`类的`drawBitmap`方法。
- en: First, we would need to add a bitmap to the project in the `res/drawable` folder;
    we will do this for real in the `Bitmap` demo app coming up shortly. For now,
    assume the graphics file/bitmap has the name `myImage.png`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`res/drawable`文件夹中的项目中添加一个位图；我们将在接下来的`Bitmap`演示应用程序中真正做到这一点。现在，假设图形文件/位图的名称为`myImage.png`。
- en: 'Next, we declare an object of the `Bitmap` type, just the same as we did for
    the `Bitmap` object we used for our background in the previous demo:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明一个`Bitmap`类型的对象，就像我们在上一个演示中用于背景的`Bitmap`对象一样：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we need to initialize the `mBitmap` object using our preferred image
    that we previously added to the project''s `drawable` folder:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用我们之前添加到项目的`drawable`文件夹中的首选图像来初始化`mBitmap`对象：
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The static `decodeResource` method of the `BitmapFactory` method is used to
    initialize `mBitmap`. It takes two parameters. The first is a call to `getResources`,
    which is made available by the `Activity` class. This method, as the name suggests,
    gives access to the project resources, and the second parameter, `R.drawable.myImage`,
    points to the `myImage.png` file in the `drawable` folder. The bitmap (`mBitmap`)
    is now ready to be drawn by the `Canvas` class.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`BitmapFactory`方法的静态`decodeResource`方法用于初始化`mBitmap`。它接受两个参数。第一个是对`getResources`的调用，这是由`Activity`类提供的。这个方法，顾名思义，可以访问项目资源，第二个参数`R.drawable.myImage`指向`drawable`文件夹中的`myImage.png`文件。位图（`mBitmap`）现在已经准备好由`Canvas`类绘制。'
- en: 'You could then draw the bitmap with the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用以下代码绘制位图：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is what the spaceship graphic from the previous section looks like when
    drawn to the screen as a reference for when we talk about rotating bitmaps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是前一节中的飞船图形在屏幕上绘制时的样子，作为我们讨论旋转位图时的参考：
- en: '![Figure 20.3 – Spaceship graphic'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.3 - 飞船图形'
- en: '](img/Figure_20.3_B16773.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.3_B16773.jpg)'
- en: Figure 20.3 – Spaceship graphic
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.3 - 飞船图形
- en: Manipulating bitmaps
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作位图
- en: Quite often, however, we need to draw bitmaps in a rotated or otherwise-altered
    state. It would be quite easy to use Photoshop or whatever your favorite image
    editing software happens to be to create more bitmaps from the original bitmap
    to face in other directions. Then, when we come to draw our bitmap, we can simply
    decide which way to face and draw the appropriate pre-loaded bitmap.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通常情况下，我们需要以旋转或其他方式改变的状态绘制位图。很容易使用Photoshop或您喜欢的任何图像编辑软件从原始位图创建更多位图以面向其他方向。然后，当我们来绘制我们的位图时，我们可以简单地决定面向哪个方向，并绘制适当的预加载位图。
- en: However, I thought it would be much more interesting and instructive if we worked
    with just one single source image and learned about the class that Android provides
    to manipulate images in our Java code. You will then be able to add rotating and
    inverting graphics to your app developer's toolkit.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我认为如果我们只使用一个单一的源图像，并学习Android提供的用于在我们的Java代码中操作图像的类，将会更有趣和有教育意义。然后，您将能够将旋转和反转的图形添加到您的应用程序开发工具包中。
- en: What is a bitmap exactly?
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位图到底是什么？
- en: 'A bitmap is called a bitmap because that is exactly what it is: a *map of bits*.
    While there are many bitmap formats that use different ranges and values to represent
    colors and transparency, they all amount to the same thing. They are a grid/map
    of values and each value represents the color of a single pixel.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 位图之所以被称为位图，是因为它确实就是这样：一张*位的地图*。虽然有许多使用不同范围和值来表示颜色和透明度的位图格式，但它们都归结为同一件事。它们是一组/地图值，每个值代表一个像素的颜色。
- en: Therefore, to rotate, scale, or invert a bitmap, we must perform the appropriate
    mathematical calculation upon each pixel/bit of the image/grid/map of the bitmap.
    The calculations are not terribly complicated, but they are not especially simple
    either. If you took math to the end of high school, you will probably understand
    the math without too much bother.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要旋转、缩放或反转位图，我们必须对位图的每个像素/位进行适当的数学计算。这些计算并不是非常复杂，但也不是特别简单。如果您完成了高中的数学课程，您可能不会太费力地理解这些数学知识。
- en: Unfortunately, understanding the math isn't enough. We would also need to devise
    efficient code, as well as understanding the bitmap format, and then modify our
    code for each format. This would not be trivial. Fortunately, the Android API
    has done it all for us. Meet the `Matrix` class.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，仅仅理解数学是不够的。我们还需要设计高效的代码，以及了解位图格式，然后为每种格式修改我们的代码。这并不是微不足道的。幸运的是，Android
    API已经为我们做好了一切。见识一下`Matrix`类。
- en: The Matrix class
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Matrix类
- en: The class is named `Matrix` because it uses the mathematical concept and rules
    to perform calculations on a series of values known as matrices – the plural of
    matrix.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类被命名为`Matrix`，因为它使用数学概念和规则来对一系列值（称为矩阵的复数）进行计算。
- en: Note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Android `Matrix` class has nothing to do with the movie series of the same
    name. However, the author advises that all aspiring app developers take the red
    pill.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Android的`Matrix`类与同名电影系列无关。然而，作者建议所有有抱负的应用程序开发者服用红色药丸。
- en: You might be familiar with matrices but don't worry if you're not because the
    `Matrix` class hides all the complexity away. Furthermore, the `Matrix` class
    not only allows us to perform calculations on a series of values, but it also
    has some pre-prepared calculations that enable us to do things such as rotating
    a point around another point by a specific number of degrees. All this without
    knowing anything about trigonometry.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对矩阵很熟悉，但如果你不熟悉也不用担心，因为`Matrix`类隐藏了所有的复杂性。此外，`Matrix`类不仅允许我们对一系列值进行计算，还具有一些预先准备的计算，使我们能够做一些事情，比如围绕另一个点旋转特定角度的点。所有这些都不需要了解三角学。
- en: Note
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are intrigued by how the math works and want an absolute beginner''s
    guide to the mathematics of rotating game objects, then look at this series of
    Android tutorials on my website that ends with a flyable and rotatable spaceship:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对数学运算的工作方式感到好奇，并且想要一个绝对初学者指南来了解旋转游戏对象的数学知识，那么请看看我网站上以可飞行和可旋转的飞船为结尾的一系列Android教程：
- en: '[http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/)'
- en: '[http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/](http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/](http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/)'
- en: '[http://gamecodeschool.com/android/2d-rotation-and-heading-demo/](http://gamecodeschool.com/android/2d-rotation-and-heading-demo/)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gamecodeschool.com/android/2d-rotation-and-heading-demo/](http://gamecodeschool.com/android/2d-rotation-and-heading-demo/)'
- en: This book will stick to using the Android `Matrix` class, but we will do slightly
    more advanced math when we create a particle system in the next chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将继续使用Android的`Matrix`类，但在下一章创建粒子系统时，我们将进行稍微更高级的数学运算。
- en: Inverting a bitmap to face the opposite direction
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将位图反转以面对相反方向
- en: 'First, we need to create an instance of the `Matrix` class. This next line
    of code does so in a familiar way by calling `new` on the default constructor:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建`Matrix`类的一个实例。下一行代码以熟悉的方式调用`new`来调用默认构造函数：
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you don't need to add any of this code to a project right now; it
    will all be shown again shortly with much more context. I just thought it would
    be easier to see all the `Matrix`-related code on its own beforehand.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您现在不需要将任何此代码添加到项目中；稍后将再次显示所有与`Matrix`相关的代码，其中将提供更多的上下文。我只是认为在此之前单独看到所有与`Matrix`相关的代码会更容易一些。
- en: 'Now we can use one of the many neat methods of the `Matrix` class. The `preScale`
    method takes two parameters: one for the horizontal change and one for the vertical
    change. Look at this line of code:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`Matrix`类的许多巧妙方法之一。`preScale`方法需要两个参数：一个用于水平变化，一个用于垂直变化。看看下面的代码：
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What the `preScale` method will do is loop through every pixel position and
    multiply all the horizontal coordinates by `-1` and all the vertical coordinates
    by `1`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`preScale`方法将循环遍历每个像素位置，并将所有水平坐标乘以`-1`，所有垂直坐标乘以`1`。'
- en: 'The effect of these calculations is that all the vertical coordinates will
    remain the same because if you multiply by 1, then the number doesn''t change.
    However, when you multiply by -1, the horizontal position of the pixel will be
    inverted. Take the following example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些计算的效果是所有垂直坐标将保持不变，因为如果乘以1，那么数字不会改变。然而，当你乘以-1时，像素的水平位置将被倒置。看下面的例子：
- en: Horizontal positions 0, 1, 2, 3, and 4 will become 0, -1, -2, -3, and -4.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 水平位置0、1、2、3和4将变为0、-1、-2、-3和-4。
- en: 'At this stage, we have created a matrix that can perform the necessary calculations
    on a bitmap. We haven''t actually done anything with the bitmap yet. To use the
    matrix, we call the `createBitmap` method of the `Bitmap` class such as this line
    of code shown next:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经创建了一个可以对位图执行必要计算的矩阵。我们实际上还没有对位图做任何事情。要使用这个矩阵，我们调用`Bitmap`类的`createBitmap`方法，如下面所示的代码行：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The previous code assumes that `mBitmapLeft` is already initialized as well
    as `mBitmap`. The parameters of the `createBitmap` method are explained as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码假设`mBitmapLeft`已经初始化，以及`mBitmap`。`createBitmap`方法的参数解释如下：
- en: '`mBitmapHeadRight` is a `Bitmap` object that has already been created and scaled
    and has the image of a spaceship (facing the right) loaded into it. This is the
    image that will be used as the source for creating the new bitmap. The source
    bitmap will not actually be altered at all.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mBitmapHeadRight`是一个`Bitmap`对象，已经被创建和缩放，并且已经加载了一个飞船（面向右侧）的图像。这个图像将被用作创建新位图的源。源位图实际上不会被改变。'
- en: '`0, 0` is the horizontal and vertical starting position that we want the new
    bitmap to be mapped into.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0, 0`是我们希望将新位图映射到的水平和垂直起始位置。'
- en: The `25, 25` parameters are values that set the size that the bitmap is scaled
    to.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`25, 25`参数是设置位图缩放大小的值。'
- en: The next parameter is our pre-prepared `Matrix` instance, `matrix`.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个参数是我们预先准备的`Matrix`实例`matrix`。
- en: The final parameter, `true`, instructs the `createBitmap` method that filtering
    is required to correctly handle the creation of the bitmap.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数`true`指示`createBitmap`方法需要过滤以正确处理位图的创建。
- en: 'This is what `mBitmapLeft` will look like when drawn to the screen:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当绘制到屏幕上时，`mBitmapLeft`将如下所示：
- en: '![Figure 20.4 – mBitmapLeft'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.4 - mBitmapLeft'
- en: '](img/Figure_20.4_B16773.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.4_B16773.jpg)'
- en: Figure 20.4 – mBitmapLeft
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.4 - mBitmapLeft
- en: We can also create the bitmap facing up or down using a rotation matrix.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用旋转矩阵创建面向上或面向下的位图。
- en: Rotating the bitmap to face up or down
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转位图以面向上或向下
- en: 'Let''s look at rotating a bitmap, and then we can build the demo app. We already
    have an instance of the `Matrix` class, so all we must do is call the `preRotate`
    method to create a matrix capable of rotating every pixel by a specified number
    of degrees in the single argument to `preRotate`. Look at this line of code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何旋转位图，然后我们可以构建演示应用程序。我们已经有了`Matrix`类的一个实例，所以我们所要做的就是调用`preRotate`方法，创建一个能够按照`preRotate`的单个参数指定的角度旋转每个像素的矩阵。看看这行代码：
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How simple was that? The `matrix` instance is now ready to rotate any series
    of numbers we pass to it, anti-clockwise (`-`), by `90` degrees.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这有多简单？`matrix`实例现在已准备好逆时针（`-`）旋转我们传递给它的任何一系列数字，旋转`90`度。
- en: 'This next line of code has exactly the same parameters as the previous call
    to `createBitmap` that we previously dissected, except that the new `Bitmap` instance
    is assigned to `mBitmapUp` and the effect of `matrix` is to perform the rotation
    instead of `preScale`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码与我们之前解析的对`createBitmap`的调用具有完全相同的参数，只是新的`Bitmap`实例分配给了`mBitmapUp`，`matrix`的效果是执行旋转而不是`preScale`：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is what `mBitmapUp` will look like when drawn:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这是绘制`mBitmapUp`时的样子：
- en: '![Figure 20.5 – mBitmapUp'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.5 - mBitmapUp'
- en: '](img/Figure_20.5_B16773.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.5_B16773.jpg)'
- en: Figure 20.5 – mBitmapUp
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.5 - mBitmapUp
- en: You can also use the same technique but a different value in the argument to
    `preRotate` to turn the bitmap downward. Let's get on with the demo app to see
    all this stuff in action.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用相同的技术，但在`preRotate`的参数中使用不同的值来将位图向下旋转。让我们继续进行演示应用程序，看看所有这些内容是如何运作的。
- en: Bitmap manipulation demo app
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位图操作演示应用程序
- en: Now that we have studied the theory, let's draw and spin some bitmaps. Create
    a new project using the `Manipulating Bitmaps`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经学习了理论，让我们来绘制和旋转一些位图。使用`操作位图`创建一个新项目。
- en: Adding the graphic to the project
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图形添加到项目中
- en: Right-click and select `bob.png` graphics file from the download bundle in the
    [*Chapter 20*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)`/Manipulating Bitmaps/drawable`
    folder.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击并从[*第20章*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)`/操作位图/可绘制`文件夹中选择`bob.png`图形文件。
- en: 'In Android Studio, locate the `app/res/drawable` folder in the project explorer
    window. This next screenshot makes clear where this folder can be located and
    what it will look like with the `bob.png` image in it:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中，定位项目资源管理器窗口中的`app/res/drawable`文件夹。下一张截图清楚地显示了这个文件夹的位置以及其中带有`bob.png`图像的样子：
- en: '![Figure 20.6 – app/res/drawable folder with bob.png'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.6 - app/res/drawable文件夹中的bob.png'
- en: '](img/Figure_20.6_B16773.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.6_B16773.jpg)'
- en: Figure 20.6 – app/res/drawable folder with bob.png
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.6 - app/res/drawable文件夹中的bob.png
- en: Right-click on the `bob.png` file to the project. Click **OK** twice to confirm
    the default options for importing the file into the project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击项目中的`bob.png`文件。单击两次**确定**，以确认将文件导入项目的默认选项。
- en: 'Edit the code of the `MainActivity` class to include all the required `import`
    directives, the basic version of the `Activity` class, and a selection of member
    variables so we can get started. The state of the `MainActivity` class at this
    stage is shown next:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`MainActivity`类的代码，包括所有必需的`import`指令、`Activity`类的基本版本和一些成员变量，以便我们可以开始。此阶段`MainActivity`类的状态如下所示：
- en: '[PRE17]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we can initialize all the members in `onCreate`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在`onCreate`中初始化所有成员：
- en: '[PRE18]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we add calls to three methods that we will write soon and set our new
    drawing as the view for the app:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加对三种方法的调用，我们很快将编写这些方法，并将我们的新绘图设置为应用程序的视图：
- en: '[PRE19]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now add the `drawRotatedBitmap` method that does the bitmap manipulation:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加执行位图操作的`drawRotatedBitmap`方法：
- en: '[PRE20]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The previous code uses a `for` loop to loop through 360 degrees 30 degrees at
    a time. The value that each pass through the loop is used in the `Matrix` instance
    to rotate the image of Bob, and he is then drawn to the screen using the `drawBitmap`
    method.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码使用`for`循环来循环遍历360度，每次30度。循环中的每个值都用于`Matrix`实例中旋转Bob的图像，然后使用`drawBitmap`方法将其绘制到屏幕上。
- en: 'Add the final two methods as shown next:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 按照下面显示的方式添加最后两种方法：
- en: '[PRE21]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `drawEnlargedBitmap` method uses the `createScaledBitmap` method, which
    is 300 by 400 pixels. The `drawBitmap` method then draws it to the screen.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawEnlargedBitmap`方法使用`createScaledBitmap`方法，大小为300x400像素。然后，`drawBitmap`方法将其绘制到屏幕上。'
- en: '`drawShrunkenBitmap` uses the exact same technique except it scales then draws
    a 50 by 75-pixel image.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawShrunkenBitmap`使用完全相同的技术，只是缩放然后绘制一个50x75像素的图像。'
- en: 'Run the app to see Bob grow, then shrink, then spin around through 360 degrees
    at 30-degree intervals, as shown in this next screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，看看Bob是如何长大、缩小，然后在30度间隔下360度旋转的，如下一张截图所示：
- en: '![Figure 20.7 – How the app runs'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.7 - 应用程序运行方式'
- en: '](img/Figure_20.7_B16773.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 第20.7图 - B16773.jpg
- en: Figure 20.7 – How the app runs
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.7 - 应用程序运行方式
- en: The only thing missing from our drawing repertoire is the ability to watch all
    this activity as it happens. We will fix this gap in our knowledge in the next
    chapter.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绘图库中唯一缺少的是观看所有这些活动发生的能力。我们将在下一章中填补这一知识空白。
- en: Frequently asked question
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: I know how to do all this drawing but I can't see anything move. Why?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我知道如何进行所有这些绘图，但我看不到任何移动。为什么？
- en: To see things move, you need to be able to regulate when each part of the drawing
    occurs. You need to use animation techniques. This is not trivial but it is not
    beyond the grasp of a determined beginner either. We will study the required topics
    in the next chapter.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '要看到物体移动，您需要能够调节绘图的每个部分发生的时间。您需要使用动画技术。这并不是微不足道的，但对于一个有决心的初学者来说也不是难以掌握的。我们将在下一章中学习所需的主题。 '
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how to draw custom shapes, text, and bitmaps. Now that
    we know how to draw and manipulate primitive shapes, text, and bitmaps, we can
    take things up a level.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何绘制自定义形状、文本和位图。现在我们知道如何绘制和操作基本形状、文本和位图，我们可以把事情提升到一个新水平。
- en: In the next chapter, we will start our next major app, which is a kid's drawing
    app that actually comes to life at the press of a button.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始我们的下一个重要应用程序，这是一个儿童绘画应用程序，实际上在按下按钮时会活跃起来。
