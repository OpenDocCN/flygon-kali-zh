["```\n$ docker swarm init\n```", "```\n$ docker swarm join  \n```", "```\n        $ curl -LO https://storage.googleapis.com/kubernetes-\n        release/release/$(curl -s https://storage.googleapis.com/kubernetes\n        release/release/stable.txt)/bin/linux/amd64/kubectl\n```", "```\n        $ chmod +x ./kubectl  \n```", "```\n        $ sudo -i  \n```", "```\n        $ apt-get update && apt-get install -y apt-transport-https\n```", "```\n        $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg \n        | apt-key add -  \n```", "```\n        $ cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\n        deb http://apt.kubernetes.io/ kubernetes-xenial main\n        EOF  \n```", "```\n        $ apt-get update\n        $ apt-get install -y kubelet kubeadm  \n```", "```\n          $ kubeadm init --pod-network-cidr=10.244.0.0/16  \n```", "```\n[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.\n[init] Using Kubernetes version: v1.7.4\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Running pre-flight checks\n[preflight] WARNING: docker version is greater than the most recently validated version. Docker version: 17.06.1-ce. Max validated version: 1.12\n[preflight] Starting the kubelet service\n[kubeadm] WARNING: starting in 1.8, tokens expire after 24 hours by default (if you require a non-expiring token use --token-ttl 0)\n[certificates] Generated CA certificate and key.\n[certificates] Generated API server certificate and key.\n[certificates] API Server serving cert is signed for DNS names [galvin kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.2.15]\n[certificates] Generated API server kubelet client certificate and key.\n[certificates] Generated service account token signing key and public key.\n[certificates] Generated front-proxy CA certificate and key.\n[certificates] Generated front-proxy client certificate and key.\n[certificates] Valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/admin.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/kubelet.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/controller-manager.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/scheduler.conf\"\n[apiclient] Created API client, waiting for the control plane to become ready\n[apiclient] All control plane components are healthy after 62.001439 seconds\n[token] Using token: 07fb67.033bd701ad81236a\n[apiconfig] Created RBAC rules\n[addons] Applied essential addon: kube-proxy\n[addons] Applied essential addon: kube-dns  \nYour Kubernetes master has initialized successfully:\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config \nYou should now deploy a pod network to the cluster.\nRun kubectl apply -f [podnetwork].yaml with one of the options listed at: http://kubernetes.io/docs/admin/addons/. You can now join any number of machines by running the following on each node as the root:\nkubeadm join --token 07fb67.033bd701ad81236a 10.0.2.15:6443 \n```", "```\n$ mkdir -p $HOME/.kube\n$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n$ sudo chown $(id -u):$(id -g) $HOME/.kube/config  \n```", "```\n $ sudo kubectl apply -f \nhttps://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n serviceaccount \"flannel\" created\n configmap \"kube-flannel-cfg\" created\n daemonset \"kube-flannel-ds\" created\n $ sudo kubectl apply -f \nhttps://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-rbac.yml\n clusterrole \"flannel\" created\n clusterrolebinding \"flannel\" created  \n```", "```\n$ kubectl get pods --all-namespaces\nNAMESPACE     NAME                             READY     STATUS    RESTARTS   AGE\nkube-system   etcd-galvin                      1/1       Running   0          2m\nkube-system   kube-apiserver-galvin            1/1       Running   0          2m\nkube-system   kube-controller-manager-galvin   1/1       Running   0          2m\nkube-system   kube-dns-2425271678-lz9fp        3/3       Running   0          2m\nkube-system   kube-flannel-ds-f9nx8            2/2       Running   2          1m\nkube-system   kube-proxy-wcmdg                 1/1       Running   0          2m\nkube-system   kube-scheduler-galvin            1/1       Running   0          2m  \n```", "```\n$ sudo kubeadm join --token <token> <master-ip>:<port>\n[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.\n[preflight] Running pre-flight checks\n[discovery] Trying to connect to API Server \"10.0.2.15:6443\"\n[discovery] Created cluster-info discovery client, requesting info from \"https://10.0.2.15:6443\"\n[discovery] Cluster info signature and contents are valid, will use API Server \"https://10.0.2.15:6443\"\n[discovery] Successfully established connection with API Server \"10.0.2.15:6443\"\n[bootstrap] Detected server version: v1.7.4\n[bootstrap] The server supports the Certificates API (certificates.k8s.io/v1beta1)\n[csr] Created API client to obtain unique certificate for this node, generating keys and certificate signing request\n[csr] Received signed certificate from the API server, generating KubeConfig...\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/kubelet.conf\"  \nNode join complete:\nCertificate signing request sent to master and response\nReceived\nKubelet informed of new secure connection details\nRun kubectl get nodes on the master to see this machine join.\n```", "```\n$ kubectl get nodes\nNAME      STATUS    AGE       VERSION\nbrunno    Ready     14m       v1.7.4\n```", "```\n$ kubectl run my-nginx --image=nginx --replicas=2 --port=80\ndeployment \"my-nginx\" created\n\n$ kubectl get pods \nNAME                        READY     STATUS    RESTARTS   AGE\nmy-nginx-4293833666-c4c5p   1/1       Running   0          22s\nmy-nginx-4293833666-czrnf   1/1       Running   0          22s  \n```", "```\n        apiVersion: v1\n        kind: PersistentVolume\n        metadata:\n          name: pv-1\n          labels:\n            type: local\n        spec:\n          capacity:\n            storage: 5Gi\n          accessModes:\n            - ReadWriteOnce\n          hostPath:\n            path: /tmp/data/pv-1\n         storageClassName: slow \n        ---\n        apiVersion: v1\n        kind: PersistentVolume\n        metadata:\n          name: pv-2\n          labels:\n            type: local\n        spec:\n          capacity:\n            storage: 5Gi\n          accessModes:\n            - ReadWriteOnce\n          hostPath:\n            path: /tmp/data/pv-2\n        storageClassName: slow \n\n```", "```\n $ kubectl create -f volumes.yaml \n persistentvolume \"pv-1\" created\n persistentvolume \"pv-2\" created    \n```", "```\n          $ kubectl get pv\n          NAME      CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS      \n          CLAIM     STORAGECLASS   REASON    AGE\n          pv-1      5Gi        RWO           Retain          Available                                     \n          8s\n          pv-2      5Gi        RWO           Retain          Available                                    \n          8s  \n```", "```\n        $ kubectl create secret generic mysql-pass -from-\n        literal=password=admin\n        secret \"mysql-pass\" created\n```", "```\n        $ kubectl get secrets\n        NAME                  TYPE                                  DATA    \n        AGE\n        default-token-1tb58   kubernetes.io/service-account-token   3      \n        3m\n        mysql-pass            Opaque                                1   \n        9s\n```", "```\n        apiVersion: v1\n        kind: Service\n        metadata:\n          name: wordpress-mysql\n          labels:\n            app: wordpress\n        spec:\n          ports:\n            - port: 3306\n          selector:\n            app: wordpress\n            tier: mysql\n          clusterIP: None\n        ---\n        apiVersion: v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: mysql-pv-claim\n          labels:\n            app: wordpress\n        spec:\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 5Gi\n        storageClassName: slow \n\n        ---\n        apiVersion: extensions/v1beta1\n        kind: Deployment\n        metadata:\n          name: wordpress-mysql\n          labels:\n            app: wordpress\n        spec:\n          strategy:\n            type: Recreate\n          template:\n            metadata:\n              labels:\n                app: wordpress\n                tier: mysql\n            spec:\n              containers:\n              - image: mysql:5.6\n                name: mysql\n                env:\n                - name: MYSQL_ROOT_PASSWORD\n                  valueFrom:\n                    secretKeyRef:\n                      name: mysql-pass\n                      key: password\n                    ports:\n                - containerPort: 3306\n                  name: mysql\n                volumeMounts:\n                - name: mysql-persistent-storage\n                  mountPath: /var/lib/mysql\n              volumes:\n              - name: mysql-persistent-storage\n                persistentVolumeClaim:\n                   claimName: mysql-pv-claim  \n```", "```\n        $ kubectl create -f mysql-deployment.yaml \n          service \"wordpress-mysql\" created\n          persistentvolumeclaim \"mysql-pv-claim\" created\n          deployment \"wordpress-mysql\" created  \n```", "```\n          $ kubectl get pods\n          NAME                               READY     STATUS    RESTARTS\n          AGE\n            wordpress-mysql-2222028001-l8x9x   1/1       Running   0  \n          6m      \n```", "```\n        $ kubectl logs wordpress-mysql-2222028001-l8x9x\n\n        Initializing database\n        2017-08-27 15:30:00 0 [Warning] TIMESTAMP with implicit DEFAULT \n        value is deprecated. Please use --explicit_defaults_for_timestamp \n        server \n        option (see documentation for more details).\n        2017-08-27 15:30:00 0 [Note] Ignoring --secure-file-priv value as\n        server is running with --bootstrap.\n        2017-08-27 15:30:00 0 [Note] /usr/sbin/mysqld (mysqld 5.6.37)\n        starting as process 36 ...\n\n        2017-08-27 15:30:03 0 [Warning] TIMESTAMP with implicit DEFAULT\n        value is deprecated. Please use --explicit_defaults_for_timestamp \n        server \n        option (see documentation for more details).\n        2017-08-27 15:30:03 0 [Note] Ignoring --secure-file-priv value as \n        server is running with --bootstrap.\n        2017-08-27 15:30:03 0 [Note] /usr/sbin/mysqld (mysqld 5.6.37)\n        starting as process 59 ...\n        Please remember to set a password for the MySQL root user!\n To do so, start the server, then issue the following \n commands:\n /usr/bin/mysqladmin -u root password 'new-password' \n        /usr/bin/mysqladmin -u root -h wordpress-mysql-2917821887-dccql \n        password 'new-password' \n```", "```\n/usr/bin/mysql_secure_installation \n```", "```\n--defaults-file argument to mysqld_safe when starting the server\n\nDatabase initialized\nMySQL init process in progress...\n2017-08-27 15:30:05 0 [Warning] TIMESTAMP with implicit DEFAULT \nvalue is deprecated. Please use --explicit_defaults_for_timestamp \nserver option (see documentation for more details).\n2017-08-27 15:30:05 0 [Note] mysqld (mysqld 5.6.37) starting as \nprocess 87 ...\nWarning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time \nzone. Skipping it.\nWarning: Unable to load '/usr/share/zoneinfo/leap-seconds.list' as\ntime zone. Skipping it.\nWarning: Unable to load '/usr/share/zoneinfo/zone.tab' as time\nzone. Skipping it.  \n```", "```\n2017-08-27 15:30:11 0 [Warning] TIMESTAMP with implicit DEFAULT \nvalue is deprecated. Please use --explicit_defaults_for_timestamp\nserver \noption (see documentation for more details).\n2017-08-27 15:30:11 0 [Note] mysqld (mysqld 5.6.37) starting as\nprocess 5 ...  \n```", "```\n$ kubectl get pvc\nNAME             STATUS    VOLUME    CAPACITY   ACCESSMODES   \nSTORAGECLASS   AGE\nmysql-pv-claim   Bound     pv-1      5Gi        RWO         \nslow           2h\nwp-pv-claim      Bound     pv-2      5Gi        RWO         \nslow           2h\n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: wordpress \n  labels: \n    app: wordpress \nspec: \n  ports: \n    - port: 80 \n  selector: \n    app: wordpress \n    tier: frontend \n  type: NodePort \n--- \napiVersion: v1 \nkind: PersistentVolumeClaim \nmetadata: \n  name: wp-pv-claim \n  labels: \n    app: wordpress \nspec: \n  accessModes: \n    - ReadWriteOnce \n  resources: \n    requests: \n      storage: 5Gi \n  storageClassName: slow  \n\n--- \napiVersion: extensions/v1beta1 \nkind: Deployment \nmetadata: \n  name: wordpress \n  labels: \n    app: wordpress \nspec: \n  strategy: \n    type: Recreate \n  template: \n    metadata: \n      labels: \n        app: wordpress \n        tier: frontend \n    spec: \n      containers: \n      - image: wordpress:4.7.3-apache \n        name: wordpress \n        env: \n        - name: WORDPRESS_DB_HOST \n          value: wordpress-mysql \n        - name: WORDPRESS_DB_PASSWORD \n          valueFrom: \n            secretKeyRef: \n              name: mysql-pass \n              key: password \n        ports: \n        - containerPort: 80 \n          name: wordpress \n        volumeMounts: \n        - name: wordpress-persistent-storage \n          mountPath: /var/www/html \n      volumes: \n      - name: wordpress-persistent-storage \n        persistentVolumeClaim: \n          claimName: wp-pv-claim \n```", "```\n    $ kubectl create -f wordpress-deployment.yaml \n      service \"wordpress\" created\n      persistentvolumeclaim \"wp-pv-claim\" created\n      deployment \"wordpress\" created\n\n```", "```\n        $ kubectl get services wordpress\n        NAME        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE\n        wordpress   10.99.124.161   <nodes>      80:31079/TCP   4m\n```", "```\n        $ kubectl delete secret mysql-pass  \n```", "```\n        $ kubectl delete deployment -l app=wordpress\n        $ kubectl delete service -l app=wordpress\n```", "```\n        $ kubectl delete pvc -l app=wordpress\n        $ kubectl delete pv pv-1 pv-2  \n```"]