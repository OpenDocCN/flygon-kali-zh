- en: Chapter 5. Linear Algebra in NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：NumPy 中的线性代数
- en: NumPy is designed for numeric computations; underneath the hood it is still
    the powerful `ndarray` object, but at the same time NumPy provides different types
    of objects to solve mathematical problems. In this chapter, we will cover the
    matrix object and polynomial object to help you solve problems using a non-ndarray
    way. Again, NumPy provides a lot of standard mathematical algorithms and supports
    multi-dimensional data. While a matrix can't perform three-dimensional data, using
    the `ndarray` objects with the NumPy functions of linear algebra and polynomials
    is more preferable (the extensive SciPy library is another good choice for linear
    algebra, but NumPy is our focus in this book). Let's use NumPy to do some math
    now!
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 专为数值计算而设计； 在引擎盖下，它仍然是功能强大的`ndarray`对象，但同时 NumPy 提供了不同类型的对象来解决数学问题。 在本章中，我们将介绍矩阵对象和多项式对象，以帮助您使用非
    ndarray 方法解决问题。 同样，NumPy 提供了许多标准的数学算法并支持多维数据。 虽然矩阵无法执行三维数据，但更可取的是使用`ndarray`对象以及线性代数和多项式的
    NumPy 函数（更广泛的 SciPy 库是线性代数的另一个不错的选择，但是 NumPy 是我们关注的重点） 书）。 现在让我们使用 NumPy 进行一些数学运算！
- en: 'The topics that will be covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及的主题是：
- en: Matrix and vector operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵和向量运算
- en: Decompositions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分解
- en: Mathematics of polynomials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多项式运算
- en: Regression and curve fitting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归和曲线拟合
- en: The matrix class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵类型
- en: For linear algebra, using matrices might be more straightforward. The matrix
    object in NumPy inherits all the attributes and methods from `ndarray` , but it's
    strictly two-dimensional, while `ndarray` can be multi-dimensional. The well-known
    advantage of using NumPy matrices is that they provide matrix multiplication as
    the `*` notation; for example, if `x` and `y` are matrices, `x * y` is their matrix
    product. However, starting from Python 3.5/NumPy 1.10, native matrix multiplication
    is supported with the new operator "
  prefs: []
  type: TYPE_NORMAL
  zh: 对于线性代数，使用矩阵可能更直接。 NumPy 中的矩阵对象继承了`ndarray`的所有属性和方法，但严格来说是二维的，而`ndarray`可以是多维的。
    使用 NumPy 矩阵的众所周知的优点是它们提供矩阵乘法作为`*`表示法； 例如，如果`x`和`y`是矩阵，则`x * y`是它们的矩阵乘积。 但是，从 Python
    3.5 / NumPy 1.10 开始，新的运算符“
- en: However, starting from Python 3.5/NumPy 1.10, native matrix multiplication is
    supported with the new operator "`@` ". So that is one more good reason to use `ndarray`
    ( [https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465)
    ).
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，从 Python 3.5 / NumPy 1.10 开始，新的运算符`@`支持本机矩阵乘法。 因此这是使用[`ndarray`](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465)的另一个很好的理由。
- en: 'However, matrix objects still provide convenient conversion such as inverse
    and conjugate transpose while an `ndarray` does not. Let''s start by creating
    NumPy matrices:'
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，矩阵对象仍提供方便的转换，例如逆和共轭转置，而`ndarray`不提供。 让我们从创建 NumPy 矩阵开始：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are a couple of ways to create or convert to a NumPy matrix object, and
    the more preferred way is to use `numpy.mat()` or `numpy.matrix()` . Both methods
    create matrices, but `numpy.matrix()` creates a copy while `numpy.mat()` changes
    the view only; it''s equivalent to `numpy.matrix(data, copy = False)` . In the
    previous example, we create two matrices, both of which are from the `ndarray`
    object (the `np.identity(3)` returns a 3 x 3 identity array). Of course you can
    use a string or list to create a matrix, for example: `np.matrix(''0 1 2; 3 4
    5; 6 7 8'')` , and `np.matrix([[0,1,2],[3,4,5],[6,7,8]])` will create the same
    matrix as `x` . In the following example, we are going to do some basic matrix
    operations:'
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种创建或转换为 NumPy 矩阵对象的方法，更优选的方法是使用`numpy.mat()`或`numpy.matrix()`。 两种方法都创建矩阵，但是`numpy.matrix()`创建一个副本，而`numpy.mat()`仅更改视图;
    等效于`numpy.matrix(data, copy = False)`。 在前面的示例中，我们创建了两个矩阵，两个矩阵均来自`ndarray`对象（`np.identity(3)`返回`3
    x 3`的单位数组）。 当然，您可以使用字符串或列表来创建矩阵，例如：`np.matrix('0 1 2; 3 4 5; 6 7 8')`和`np.matrix([[0,1,2],[3,4,5],[6,7,8]])`将创建与`x`相同的矩阵。
    在以下示例中，我们将执行一些基本的矩阵运算：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can see from the previous example that, when we use the `*` notation, it
    applies the matrix multiplication as you use `numpy.dot()` for `ndarray` (we will
    talk about this in the next section). Also, the `**` power notation is done in
    a matrix way. We also created a matrix `z` from random functions to show when
    the matrix is invertible (not singular). You can obtain the inverse matrix using `numpy.matrix.I`
    . We can also do a conjugate (Hermitian) transpose using `numpy.matrix.H` .
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从前面的示例中看到，当我们使用`*`表示法时，当您为`ndarray`使用`numpy.dot()`时，它会应用矩阵乘法（我们将在下一节中讨论）。
    同样，`**`幂运算符以矩阵方式完成。 我们还根据随机函数创建了一个矩阵`z`，以显示该矩阵何时可逆（非奇异）。 您可以使用`numpy.matrix.I`获得逆矩阵。
    我们还可以使用`numpy.matrix.H`进行共轭（Hermitian）转置。
- en: 'Now we know how to create a matrix object and do some basic operations, it''s
    time for some practice. Let''s try to solve a simple linear equation. Suppose
    we have a linear equation as *A x = b* and we want to know the value of  *x* .
    A possible solution will be as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何创建矩阵对象并执行一些基本操作，是时候进行一些练习了。 让我们尝试求解一个简单的线性方程。 假设我们有一个线性方程`A x = b`，我们想知道`x`的值。
    可能的解决方案如下：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We obtain `x` by multiplying the inverse of `A` and `b` , so let''s do this
    with `numpy.matrix` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将`A`和`b`的逆数相乘来获得`x`，所以我们用`numpy.matrix`来做到这一点：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We obtained `x` , and we used `numpy.allclose()` to compare the LHS and the
    RHS within a tolerance. The default absolute tolerance is `1e-8` . The result
    returns `True` , meaning that LHS and RHS are equal within the tolerance, which
    verifies our solution. Though `numpy.matrix()` takes an ordinary matrix form,
    in most cases `ndarray` would be good enough for you to do linear algebra. Now
    we will simply compare the performance between `ndarray` and `matrix` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得了`x`，并使用`numpy.allclose()`在公差范围内比较了 LHS 和 RHS。 默认的绝对公差为`1e-8`。 结果返回`True`，这意味着
    LHS 和 RHS 在公差范围内相等，这验证了我们的解决方案。 尽管`numpy.matrix()`采用普通矩阵形式，但在大多数情况下`ndarray`足以满足您进行线性代数的需要。
    现在我们将简单比较`ndarray`和`matrix`的性能：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This example shows a huge performance difference between `ndarray` and `matrix`
    when doing a transpose. Both `x` and `y` have 5,000 by 5,000 elements, but `x`
    is a two-dimensional `ndarray` , while `y` converted it to the same shape `matrix`
    . The NumPy matrix will always do operations in the matrix way, even if the computation
    has been optimized by NumPy.
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例显示了转置时`ndarray`和`matrix`之间的巨大性能差异。 `x`和`y`都具有`5,000 x 5,000`元素，但是`x`是二维`ndarray`，而`y`将其转换为相同的形状`matrix`。
    即使计算已通过 NumPy 优化，NumPy 矩阵也将始终以矩阵方式进行运算。
- en: 'While `ndarray` here by default reverses the dimensions instead of permuting
    the axes (the matrix always permutes the axes), that''s a huge performance improvement
    trick done in `ndarray` . Therefore, `ndarray` is preferred when doing linear
    algebra especially for large sets of data considering its performance. Use `matrix`
    only when necessary. Before we go on to the next section, let''s go through two
    more `matrix` object properties that convert a `matrix` to a basic `ndarray` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然默认情况下`ndarray`会反转尺寸而不是对轴进行置换（矩阵始终对轴进行置换），但这是`ndarray`中完成的一项巨大的性能改进技巧。 因此，考虑到线性代数的性能，`ndarray`
    特别适用于大型数据集。 仅在必要时使用`matrix`。 在继续下一节之前，让我们看一下另外两个`matrix`对象属性，这些属性将`matrix`转换​​为基本的`ndarray`：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous examples use the matrix `A` we created in the linear equation practice. `numpy.matrix.A`
    returns the basic `ndarray` and `numpy.matrix.A1` returns a one-dimensional `ndarray`
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用了我们在线性方程实践中创建的矩阵`A`。 `numpy.matrix.A`返回基本的`ndarray`，`numpy.matrix.A1`返回一维的`ndarray`。
- en: Linear algebra in NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 中的线性代数
- en: 'Before we get into linear algebra class in NumPy, there are five vector products
    we will cover at the beginning of this section. Let''s review them one by one,
    starting with the `numpy.dot()` product:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入 NumPy 的线性代数类之前，我们将在本节的开头介绍五种向量积。 让我们从`numpy.dot()`产品开始逐一回顾它们：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `numpy.dot()` function performs matrix multiplication, and the detailed
    calculation is shown here:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.dot()`函数执行矩阵乘法，其详细计算如下所示：'
- en: '![Linear algebra in NumPy](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![NumPy 中的线性代数](img/00010.jpeg)'
- en: '`numpy.vdot()` handles multi-dimensional arrays differently than `numpy.dot()`
    . It does not perform a matrix product, but flattens input arguments to one-dimensional
    vectors first:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.vdot()`处理多维数组的方式与`numpy.dot()`不同。 它不执行矩阵乘积，而是首先将输入参数展平到一维向量：'
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The detailed calculation of `numpy.vdot()` is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.vdot()`的详细计算如下：'
- en: '![Linear algebra in NumPy](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![NumPy 中的线性代数](img/00011.jpeg)'
- en: 'The `numpy.outer()` function is the outer product of two vectors. It flattens
    the input arrays if they are not one-dimensional. Let''s say that the flattened
    input vector A has shape `(M, )` and the flattened input vector B has shape `(N,
    )` . Then the result shape would be `(M, N)` :'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.outer()`函数是两个向量的外积。 如果输入数组不是一维的，则它将变平。 假设扁平化的输入向量`A`的形状为`(M, )`，扁平化的输入向量`B`的形状为`(N,
    )`。 那么结果形状将是`(M, N)`：'
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The detailed calculation of `numpy.outer()` is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.outer()`的详细计算如下：'
- en: '![Linear algebra in NumPy](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![NumPy 中的线性代数](img/00012.jpeg)'
- en: 'The last one is the `numpy.cross()` product, a binary operation of two vectors
    (and it can only work for vectors) in three-dimensional space, the result of which
    is a vector perpendicular to both input data (`a` ,`b` ). If you are not familiar
    with the outer product, please refer to [https://en.wikipedia.org/wiki/Cross_product](https://en.wikipedia.org/wiki/Cross_product)
    . The following example shows that `a` and `b` are arrays of vectors, and the
    cross product of (`a` ,`b` ) and (`b` ,`a` ):'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个是`numpy.cross()`乘积，它是三维空间中两个向量的二进制运算（并且仅适用于向量），其结果是垂直于两个输入数据的向量（`a`，`b`）。
    如果您不熟悉外积，请参考[`en.wikipedia.org/wiki/Cross_product`](https://en.wikipedia.org/wiki/Cross_product)。 以下示例显示`a`和`b`是向量数组，以及（`a`，`b`）和（`b`，`a`）的叉积：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A detailed calculation is shown in the following graph, and the cross-product
    of two vectors `a` and `b` is denoted by  *a x b* :'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了详细的计算，并且两个向量`a`与`b`的叉积由`a x b`表示：
- en: '![Linear algebra in NumPy](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![NumPy 中的线性代数](img/00013.jpeg)'
- en: 'The previous functions are provided by NumPy for standard vector routines.
    Now we are going to talk about the key topic of this section: the `numpy.linalg`
    sub-modules for linear algebra. Using the NumPy `ndarray` with `numpy.linalg`
    would be better than using `numpy.matrix()` .'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 为标准向量例程提供了前面的功能。 现在，我们将讨论本节的关键主题：用于线性代数的`numpy.linalg`子模块。 将 NumPy `ndarray`与`numpy.linalg`结合使用会比`numpy.matrix()`更好。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you have scipy as a dependency to your program, `scipy.linalg` has more advanced
    functions such as trigonometric functions in matrix, and more decomposition choices
    than `numpy.linalg` . However, NumPy includes all the basic operations.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将 SciPy 作为程序的依赖项，则`scipy.linalg`具有比`numpy.linalg`更高级的功能，例如矩阵中的三角函数以及更多的分解选择。
    但是，NumPy 包含所有基本操作。
- en: 'In the following examples, we will go through the rest of the basic operations
    of `numpy.linalg` and use them to solve the linear equation in the matrix section:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将介绍`numpy.linalg`的其余基本操作，并使用它们来求解矩阵部分中的线性方程：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The previous example computes the determinant of a square array. Of course
    we can use `numpy.linalg.inv()` to compute the inverse of an array, just as we
    use `numpy.matrix.I` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例计算方阵的行列式。 当然，我们可以使用`numpy.linalg.inv()`来计算数组的逆数，就像我们使用`numpy.matrix.I`一样：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'From the previous example, we can see that `numpy.linalg.inv()` provides an
    identical result to `numpy.matrix.I` . The only difference is that `numpy.linalg`
    returns `ndarray` . Next, we will go back to the linear equation  *A x = b* again,
    to see how we can use `numpy.linalg.solve()` to achieve the same result as using
    the matrix object:'
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，我们可以看到`numpy.linalg.inv()`提供与`numpy.matrix.I`相同的结果。 唯一的区别是`numpy.linalg`返回`ndarray`。
    接下来，我们将再次回到线性方程式`A x = b`，以了解如何使用`numpy.linalg.solve()`获得与使用矩阵对象相同的结果：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`numpy.linalg.solve(A,b)` computes the solution for `x` , where the first input
    parameter (`A` ) stands for the coefficient array and the second parameter (`b`
    ) stands for the coordinate or dependent variable values. The `numpy.linalg.solve()`
    function honored the input data type. In the example, we use matrices as input,
    so the output also returns a matrix `x` . We can also use the `ndarray ` as our
    inputs.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.linalg.solve(A,b)`计算`x`的解，其中第一个输入参数（`A`）代表系数数组，第二个参数（`b`）代表坐标或因变量值。
    `numpy.linalg.solve()`函数支持输入数据类型。 在示例中，我们使用矩阵作为输入，因此输出还返回一个矩阵`x`。 我们也可以使用`ndarray `作为输入。'
- en: When doing linear algebra with NumPy, it's better to use only one data type,
    either `ndarray` or `matrix` . It's not recommended to have a mixed type in the
    calculation. One reason is to reduce the conversion between different data types;
    the other reason is to avoid unexpected errors in the computation with two types.
    Since `ndarray` has fewer restrictions on data dimensions and can perform all
    matrix-like operations, using `ndarray` with `numpy.linalg` , is preferred over `matrix`
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy 进行线性代数运算时，最好仅使用一种数据类型，即`ndarray`或`matrix`。 不建议在计算中使用混合类型。 原因之一是减少了不同数据类型之间的转换。
    另一个原因是要避免两种类型的计算中的意外错误。 由于`ndarray`对数据尺寸的限制较少，并且可以执行所有类似矩阵的运算，因此与`matrix`相比，`ndarray`与`numpy.linalg`结合使用是首选的。
- en: Decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分解
- en: 'There are there decompositions provided by `numpy.linalg`  and in this section,
    we will cover two that are the most commonly used:  **singular value decomposition**
    ( **svd** ) and  **QR** factorization. Let''s start by computing the  **eigenvalues**
    and  **eigenvectors** first. Before we get started, if you are not familiar with
    eigenvalues and eigenvectors, you may review them at [https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors](https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors)
    . Let''s start:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.linalg`提供了分解，在本节中，我们将介绍两种最常用的分解：**奇异值分解**（**svd**）和 **QR** 因式分解。 让我们首先计算**特征值**和**特征向量**。
    在我们开始之前，如果您不熟悉特征值和特征向量，可以在[`en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors`](https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors)进行检查。
    开始吧：'
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the previous example, first we created a 3 x 3 `ndarray` using `numpy.random.randint`
    `()` and we computed the eigenvalues and eigenvectors using `np.linalg.eig()`
    . The function returns two tuples: the first one is the eigenvalues, each repeated
    according to its multiplicity, and the second one is the normalized eigenvectors,
    in which column `v[: , i]` is the eigenvector corresponding to the eigenvalue `w[i]`
    . In this example, we unpacked the tuples into `w` and `v` . If the input `ndarray`
    is complex-valued, the computed eigenvectors would be the complex type too, as
    you can see in the following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的示例中，首先我们使用`numpy.random.randint` `()`创建了一个`3 x 3`的`ndarray`，然后使用`np.linalg.eig()`计算了特征值和特征向量。
    该函数返回两个元组：第一个元组是特征值，每个元组根据其多重性重复;第二个元组是规范化的特征向量，其中`v[: , i]`列是与特征值`w[i]`相对应的特征向量。
    在此示例中，我们将元组解压缩为`w`和`v`。 如果输入`ndarray`是复数值，则计算出的特征向量也将是复数类型，如下面的示例所示：'
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'But if the input `ndarray` is real, the computed eigenvalues would also be
    real; therefore, when computing, we should be careful of rounding errors, as you
    can see in the following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果输入`ndarray`是实数，则计算出的特征值也将是实数； 因此，在计算时，我们应注意舍入错误，如以下示例所示：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`ndarrayz` is the real type (`numpy.float64` ), so when computing the eigenvalues
    it will automatically round off. In theory, the eigenvalues should be  *1 +/-
    1e-* *10* , but you can see from the first `np.linalg.eig()` that the eigenvalues
    are both rounding up to  *1* .'
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarrayz`是实型（`numpy.float64`），因此在计算特征值时会自动四舍五入。 从理论上讲，特征值应为`1 ± 1e-10`，但从第一个`np.linalg.eig()`可以看出特征值都向上舍入为`1`。'
- en: '`svd` can be thought of as an extension of the eigenvalue. We can use `numpy.linalg.svd()`
    to decompose an M x N array, so let''s start with a simple example:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`svd`可以认为是特征值的扩展。 我们可以使用`numpy.linalg.svd()`分解`M x N`数组，所以让我们从一个简单的例子开始：'
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this example, `numpy.linalg.svd()` returned three tuples of arrays and we
    unpacked it into three variables: `u` , `sigma` , and `vh` , in which `u` stands
    for the left-singular vectors of `A` (eigenvectors of  *AA-1* ), `vh` is the inverse
    matrix of the right singular vectors of `A` (eigenvectors of  *(A-1A) -1* ), and `sigma`
    is the non-zero singular values of `A` (eigenvalues of both  *AA-1* and  *A-1A*
    ). In the example, there are three eigenvalues and they were returned in order.
    You might be suspicious about the result, so let''s do some math to verify it:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`numpy.linalg.svd()`返回了三个元组数组，我们将其解压缩为三个变量：`u`，`sigma`和`vh`，其中`u`代表`A`的左奇异向量（`AA-1`的特征向量），`vh`是`A`的右奇异向量（`A-1A`的特征向量的逆矩阵），`sigma`是`A`的非零奇异值（`AA-1`和`A-1A`的特征值）。
    在该示例中，存在三个特征值，它们按顺序返回。 您可能会对结果感到怀疑，所以让我们做一些数学运算来验证它：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The input array `A` can be translated to  *U ∑ V** in `svd` , where  *∑* is
    the vector of singular values. However, the returned sigma from NumPy is an array
    with non-zero values, and we need to make it into a vector, so in this example
    the shape would be ( *3* , *3* ). We first use `numpy.diag()` to make `sigma`
     a diagonal matrix called `diag_sigma` . Then we just perform a matrix multiplication
    between `u` , `diag_sigma` , and `vh` , to check that the calculated result (`Av`
    ) is identical to the original input `A` , meaning we verified the svd result.
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数组`A`可以转换为`svd`中的`U ∑ V*`，其中`∑`是奇异向量的值。 但是，从 NumPy 返回的`sigma`是具有非零值的数组，我们需要将其设为向量，因此在此示例中，形状为`(3,
    3)`。 我们首先使用`numpy.diag()`制作`sigma`对角矩阵`diag_sigma`。 然后我们只需在`u`，`diag_sigma`和`vh`之间执行矩阵乘法，以检查计算结果（`Av`）是否与原始输入`A`相同，这意味着我们验证了 SVD 结果。
- en: 'QR decomposition, sometimes called polar decomposition, works for any M x N
    array and decomposes it into an orthogonal matrix (Q) and an upper triangular
    matrix (R). Let''s try to use it to solve the previous *Ax = b* problem:'
  prefs: []
  type: TYPE_NORMAL
  zh: QR 分解（有时称为极坐标分解）可用于任何`M x N`数组，并将其分解为正交矩阵（`Q`）和上三角矩阵（`R`）。 让我们尝试使用它来解决先前的`Ax
    = b`问题：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We decomposed `A` using `numpy.linalg.qr()` to obtain `q` and `r` . So now the
    original equation is translated into  *(q * r)x = b* . We can obtain `x` using
    matrix multiplication (the dot product) of inverse `r` and inverse `q` and `b`
    . Since `q` is a unitary matrix, we used transpose instead of inverse. As you
    can see, the result `x` is the same as when we used matrix and `numpy.linalg.solve()`
    ; it's just another way to solve the linear problem.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`numpy.linalg.qr()`分解`A`以获得`q`和`r`。 因此现在将原始方程式转换为`(q * r) x = b`。 我们可以使用`r`和`q`和`b`的逆矩阵乘法（点积）获得`x`。
    由于`q`是一个单位矩阵，因此我们使用了转置而不是逆。 如您所见，结果`x`与我们使用矩阵和`numpy.linalg.solve()`时的结果相同; 这是解决线性问题的另一种方法。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: In general, the calculation of the inverse of the triangular matrix is much
    more efficient, as you can create a large dataset and compare the performance
    between different solutions.
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，三角矩阵逆的计算效率更高，因为您可以创建一个大型数据集并比较不同解决方案之间的性能。
- en: Polynomial mathematics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多项式运算
- en: NumPy also provides methods to work with polynomials, and includes a package
    called `numpy.polynomial` to create, manipulate, and fit the polynomials. A common
    application of this would be interpolation and extrapolation. In this section,
    our focus is still on using `ndarray` with NumPy functions instead of using polynomial
    instances. (Don't worry, we will still show you the usage of the polynomial class.)
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 还提供了使用多项式的方法，并包括一个名为`numpy.polynomial`的包，用于创建，操作和拟合多项式。 常见的应用是内插和外推。 在本节中，我们的重点仍然是将`ndarray`与
    NumPy 函数一起使用，而不是使用多项式实例。 （不用担心，我们仍将向您展示多项式类的用法。）
- en: As we stated in the matrix class section, using `ndarray` with NumPy functions
    is preferred since `ndarray` can be accepted in any functions while matrix and
    polynomial objects need to be converted, especially when communicating to other
    programs. Both of them provided handy properties, but in most cases `ndarray`
    would be good enough.
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在矩阵类部分所述，将`ndarray`与 NumPy 函数结合使用是首选，因为`ndarray`可以在任何函数中接受，而矩阵和多项式对象则需要转换，尤其是在与其他程序通信时。
    它们都提供了方便的属性，但是在大多数情况下，`ndarray`足够好。
- en: 'In this section, we will cover how to calculate the coefficients based on a
    set of roots, and how to solve a polynomial equation, and finally we will evaluate
    integrals and derivatives. Let''s start by calculating the coefficients of a polynomial:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何基于一组根来计算系数，以及如何求解多项式方程，最后我们将求值积分和导数。 让我们从计算多项式的系数开始：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`numpy.poly()` returned a one-dimensional array of polynomial coefficients
    whose roots are the given array `root` from the highest to lowest exponents. In
    this example, we take the root array `[1,2,3,4]` and return the polynomial, which
    is equivalent to x4 - 10*3 + 35*2 - 50x + 24.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.poly()`返回一阶多项式系数数组，其根是从最高到最低指数的给定数组`root`。 在此示例中，我们采用根数组`[1,2,3,4]`并返回多项式，等效于`x^4
    - 10x^3 + 35x^2 - 50x + 24`。'
- en: 'One thing we need be careful about is that the input roots array should be
    a one-dimensional or square two-dimensional array, or a `ValueError` will be triggered.
    Of course, we can also perform the opposite operation: calculating the roots based
    on the coefficients using `numpy.roots()` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要注意的一件事是输入根数组应该是一维或正方形二维数组，否则会触发`ValueError`。 当然，我们也可以执行相反的操作：使用`numpy.roots()`根据系数计算根：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s say we have the equation *y = x4 - 10*3 + 35*2 - 50x + 24* , and
    we want to know the value of  *y* when  *x = 5* . We can use `numpy.polyval()`
    to calculate this:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有方程式`y = x^4 - 10x^3 + 35x^2 - 50x + 24`，当`x = 5`时我们想知道`y`的值。 我们可以使用`numpy.polyval()`来计算：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`numpy.polyval()` takes two input parameters, the first being the coefficient
    array of the polynomial, and the second one being the specific point value to
    evaluate the given polynomial. We can also input a sequence of `x` , and the result
    will return an `ndarray` whose values correspond to the given `x` sequence.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.polyval()`具有两个输入参数，第一个是多项式的系数数组，第二个是用于求值给定多项式的特定点值。 我们也可以输入`x`的序列，结果将返回`ndarray`，其值对应于给定的`x`序列。'
- en: 'Next we will talk about **integrals** and  **derivatives** . We will continue
    the example of *x⁴ - 10x³ + 35x² - 50x + 24* :'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将讨论**积分**和**导数**。 我们将继续以`x^4 - 10x^3 + 35x^2 - 50x + 24`的示例为例：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this example, we use `numpy.polyint()` for the integral calculus and the
    result is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们对整数演算使用`numpy.polyint()`，结果等于：
- en: '![Polynomial mathematics](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![多项式数学](img/00014.jpeg)'
- en: The default integration constant is 0, but we can specify it using the input
    parameter `k` . You can do some exercises on this by yourself for the integral
    of a different `k` .
  prefs: []
  type: TYPE_NORMAL
  zh: 默认积分常数为 0，但我们可以使用输入参数`k`进行指定。 您可以自己做一些练习，以获得不同的`k`的积分。
- en: Let's go back to the previous example-after doing the integration, we performed
    the differential calculus right away using `numpy.polyder()` and we compared the
    derivatives to the original `coef` array. We got five `True` boolean arrays, which
    verified that both are identical.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到前面的示例-完成积分后，我们立即使用`numpy.polyder()`执行了微积分，并将导数与原始`coef`数组进行了比较。 我们得到了五个`True`布尔数组，它们验证了两个数组是否相同。
- en: We can also specify the order of differentiation (the default is 1) in `numpy.polyder()`
    . As we expected, when we calculate the fifth-order derivative of a fourth-order
    polynomial, it returns an empty array.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在`numpy.polyder()`中指定区分的顺序（默认为 1）。 如我们所料，当我们计算四阶多项式的五阶导数时，它将返回一个空数组。
- en: 'Now we will repeat these examples using an instance of the polynomial class
    to see the differences in the usage. The very first step in using the `numpy.polynomial`
    class is to initialize a polynomial instance. Let''s start:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用多项式类的实例重复这些示例，以查看用法的差异。 使用`numpy.polynomial`类的第一步是初始化多项式实例。 开始吧：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Note that beside the returned type of  `p` is an instance of the class `Polynomial`
    , and there are three parts returned. The first part is the coefficient of the
    polynomial. The second one is `domain` , which represents the input value interval
    in the polynomial (the default is `[-1, 1]` ). And the third one is `window` ,
    which maps the domain interval to the corresponding interval based on the polynomial
    (the default is also `[-1, 1]` ):'
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在返回的`p`类型旁边是`Polynomial`类的实例，并且返回了三部分。 第一部分是多项式的系数。 第二个是`domain`，它表示多项式中的输入值间隔（默认为`[-1,
    1]`）。 第三个是`window`，它根据多项式将域间隔映射到相应的间隔（默认也是`[-1, 1]`）：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With the `Polynomial` instance, we can simply call the `coef` property to show
    the `ndarray` of the coefficient. The `roots()` method will show the roots. Next
    we will evaluate the polynomial of a specific value, `5` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Polynomial`实例，我们可以简单地调用`coef`属性以显示系数的`ndarray`。 `roots()`方法将显示根。 接下来，我们将求值特定值的多项式`5`：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The integration and derivation is also done with the built-in functions in
    the `Polynomial` class as `roots()` , but the function names change to `integ()`
    and `derive()` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 集成和派生还使用`Polynomial`类中的内置函数`roots()`完成，但函数名称更改为`integ()`和`derive()`：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The polynomial package also provides special polynomials such as Chebyshev,
    Legendre, and Hermite. For more details on these, please refer to [http://docs.scipy.org/doc/numpy-1.10.0/reference/routines.polynomials.classes.html](http://docs.scipy.org/doc/numpy-1.10.0/reference/routines.polynomials.classes.html)
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式包还提供了特殊的多项式，例如切比雪夫，勒让德和埃米特。 有关这些内容的更多详细信息，请参考[`docs.scipy.org/doc/numpy-1.10.0/reference/routines.polynomials.classes.html`](http://docs.scipy.org/doc/numpy-1.10.0/reference/routines.polynomials.classes.html)。
- en: In summary, for most cases `ndarray` and NumPy functions can solve problems
    related to polynomials. They are also a more preferred way since there is less
    conversion between types in the program, meaning fewer potential issues. However,
    when dealing with special polynomials, we still need the polynomial package. We
    are almost done with the math part. In the next section, we will talk about the
    application of linear algebra.
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在大多数情况下，`ndarray`和 NumPy 函数可以解决与多项式有关的问题。 它们也是一种更可取的方式，因为程序中类型之间的转换较少，这意味着较少的潜在问题。
    但是，在处理特殊多项式时，我们仍然需要多项式包。 我们几乎完成了数学部分。 在下一节中，我们将讨论线性代数的应用。
- en: Application - regression and curve fitting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用 -- 回归和曲线拟合
- en: Since we are talking about the application of linear algebra, our experience
    comes from real-world cases. Let's begin with linear regression. So, let's say
    we are curious about the relationship between the age of a person and his/her
    sleeping quality. We'll use the data available online from the Great British Sleep
    Survey 2012 ([https://www.sleepio.com/2012report/](https://www.sleepio.com/2012report/)
    ).
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在讨论线性代数的应用，因此我们的经验来自实际案例。 让我们从线性回归开始。 因此，假设我们对一个人的年龄与其睡眠质量之间的关系感到好奇。 我们将使用 2012 年大不列颠睡眠调查（[`www.sleepio.com/2012report`](https://www.sleepio.com/2012report/)）在线提供的数据。
- en: There were 20,814 people who took the survey, in an age range from under 20
    to over 60 years old, and they evaluated their sleeping quality by scores from
    4 to 6.
  prefs: []
  type: TYPE_NORMAL
  zh: 有 20,814 人参加了调查，年龄范围从 20 岁以下到 60 岁以上，他们通过 4 到 6 分对他们的睡眠质量进行了评估。
- en: In this practice, we will just use 100 as our total population and simulate
    the age and sleeping scores followed the same distribution as the survey results.
    We want to know whether their age grows, sleep quality (scores) increases or decreases?
    As you already know, this is a hidden linear regression practice. Once we drew
    the regression line of the age and sleeping scores, by looking at the slope of
    the line, the answer will just come up.
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将只使用 100 作为总人口，并模拟年龄和睡眠得分，其分布与调查结果相同。 我们想知道他们的年龄在增长，睡眠质量（分数）增加还是减少？
    如您所知，这是一个隐藏的线性回归实践。 一旦我们绘制了年龄和睡眠分数的回归线，通过观察该线的斜率，就可以得出答案。
- en: 'But before we talk about which NumPy function we should use and how we use
    it, let''s create the dataset first. From the survey, we know there are 7% of
    participants under 20, 24% between 21 and 30, 21% between 31 and 40, and 21% over
    60\. So we first create a group list to represent the number of people in each
    age group and use `numpy.random.randint()` to simulate the real age among our
    100 population, to see the age variable. Now we know the distribution of sleeping
    scores based on each age group, which we called `scores` : it''s a list of `[5.5,
    5.7, 5.4, 4.9, 4.6, 4.4]` , the order according to the age group from youngest
    to the oldest. Here we also use the `np.random.rand()` function with the mean
    (from the scores list) and the standard variance (all set to `0.01` ) to simulate
    the score distribution (of course, if you have a good dataset you want to play
    with, it would be better to just use the `numpy.genfromtxt()` function we introduced
    in the previous chapter):'
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在讨论应该使用哪个 NumPy 函数以及如何使用它之前，让我们首先创建数据集。 根据调查，我们知道 20 岁以下的参与者占 7%，21 岁至 30
    岁的参与者占 24%，31 岁至 40 岁的参与者占 21%，60 岁以上的参与者占 21% 。因此，我们首先创建一组列表，代表每个年龄组的人数，并使用`numpy.random.randint()`模拟我们
    100 个人口中的实际年龄，以查看年龄变量。 现在我们知道了每个年龄段的睡眠分数分布，我们称其为`scores`：这是`[5.5, 5.7, 5.4, 4.9,
    4.6, 4.4]`的列表，`[5.5, 5.7, 5.4, 4.9, 4.6, 4.4]`是根据年龄段从最小到最大的顺序排列的。 在这里，我们还使用`np.random.rand()`函数以及均值（来自分数列表）和标准方差（均设置为`0.01`）来模拟分数分布（当然，如果您有一个好的数据集，则可以使用）
    ，最好只使用上一章介绍的`numpy.genfromtxt()`函数）：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we have the age and sleeping scores and each variable has 100 incidents.
    Next, we will calculate the regression line: *y = mx + c* , where  *y* represents `sleeping_score`
    , and  *x* represents `age` . The NumPy function for the regression line is `numpy.linalg.lstsq()`
    and it takes the coefficient matrix and dependent variable values as inputs. So
    the first thing we need to do is to pack the variable age into a coefficient matrix,
    which we call `AGE` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了年龄和睡眠得分，每个变量都有 100 次事件。 接下来，我们将计算回归线：`y = mx + c`，其中`y`代表`sleeping_score`，而`x`代表`age`。
    回归线的 NumPy 函数为`numpy.linalg.lstsq()`，它将系数矩阵和因变量值作为输入。 因此，我们要做的第一件事是将变量年龄打包到一个系数矩阵中，我们称之为`AGE`：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now we have the slope `m` and constant `c` . Our regression line is  *y =*
    *-0.0294x + 6.3031* , which shows that, when people grow older, there is a slight
    decrease in their sleeping scores/quality, as you can see in the following graph:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有斜率`m`和常数`c`。 我们的回归线是`y = -0.0294x + 6.3031`，这表明，随着年龄的增长，人的睡眠分数/质量会略有下降，如下图所示：
- en: '![Application - regression and curve fitting](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![应用：回归和曲线拟合](img/00015.jpeg)'
- en: You may think that the regression line equation looks familiar. Remember the
    first linear equation we solved in the matrix section? Yes, you can also use `numpy.linalg.lstsq()`
    to solve the  *Ax = b* equation, and actually it will be the fourth solution in
    this chapter. Try it by yourself; the usage is very similar to when you used `numpy.linalg.solve()`
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能认为回归线方程看起来很熟悉。 还记得我们在矩阵部分求解的第一个线性方程吗？ 是的，您也可以使用`numpy.linalg.lstsq()`来求解`Ax
    = b`方程，实际上这将是本章的第四个解决方案。 自己尝试； 用法与您使用`numpy.linalg.solve()`时非常相似。
- en: However, not every question can simply be answered by drawing a regression line,
    such as the housing price by year. It's apparently not a linear relation, and
    is probably a squared or third-degree relation. So how do we solve such a problem?
    Let's use the statistical data from the House Price Indices (Office for National
    Statistics, [http://ons.gov.uk/ons/taxonomy/index.html?nscl=House+Price+Indices#tab-data-tables](http://ons.gov.uk/ons/taxonomy/index.html?nscl=House+Price+Indices#tab-data-tables)
    ) and pick the years 2004 to 2013\. We have the average house price (in £GBP)
    adjusted by inflation; we want to know the average price for next year.
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，并非每个问题都能简单地通过绘制回归线来回答，例如按年的房价。 它显然不是线性关系，可能是平方或三次关系。 那么我们如何解决这个问题呢？ 让我们使用房价指数（国家统计局中的统计数据，[`ons.gov.uk/ons/taxonomy/index.html?nscl=House+Price+Indices#tab-data-tables`](http://ons.gov.uk/ons/taxonomy/index.html?nscl=House+Price+Indices#tab-data-tables)），然后选择
    2004 年至 2013 年。我们将平均房价（英镑）调整为通胀因素； 我们想知道明年的平均价格。
- en: 'Before we go for the solution, let''s analyze the question first. Underlying
    the question is a polynomial curve fitting problem; we want to find the best-fit
    polynomial for our questions, but which NumPy function should we choose for it?
    But before doing that, let''s create two variables: the price by each year, `price`
    , and the year of the house, `year` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻求解决方案之前，让我们首先分析问题。 问题的背后是多项式曲线拟合问题； 我们想找到最适合我们的问题的多项式，但是我们应该为它选择哪个 NumPy 函数？
    但是在此之前，让我们创建两个变量：每年的价格`price`和房屋的年份`year`：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we have the year and price data, let''s assume their relation is squared.
    Our goal is to find the polynomial: *y = ax2 + bx + c* to represent the relations
    (a typical least-squares approach).  *y* represents `price` at  *x * `year` .
    Here we will use `numpy.polyfit()` to help us find the coefficients for this polynomial:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了年份和价格数据，我们假设它们之间的关系是平方的。 我们的目标是找到多项式：`y = ax^2 + bx + c`表示关系（一种典型的最小二乘法）。`y`代表`price`，`x`代表`year`。
    这里我们将使用`numpy.polyfit()`帮助我们找到该多项式的系数：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We have all the coefficients for the polynomial from `numpy.polyfit()` , which
    takes three input parameters: the first one stands for the independent variable: `year`
    ; the second one is the dependent variable: `price` ; and the last one is the
    degree of the polynomial, which in this case is 2\. Now we just need to use `year`
    `= 11` (11 years from 2004), then the estimated price can be calculated. You can
    see the result in the following graph:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`numpy.polyfit()`获得了多项式的所有系数，它采用三个输入参数：第一个代表自变量：`year`; 第二个是因变量：`price`;
    最后一个是多项式的阶数，在这种情况下为 2。现在我们只需要使用`year = 11`（从 2004 年起 11 年），就可以计算出估算价格。 您可以在下图中看到结果：
- en: '![Application - regression and curve fitting](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![应用：回归和曲线拟合](img/00016.jpeg)'
- en: There are many applications from linear algebra that NumPy can achieve such
    as interpolation and extrapolation, but we can't cover them all in this chapter.
    We hope this chapter is a good start for you to use NumPy to solve linear or polynomial
    problems.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 可以从线性代数中获得许多应用，例如插值和外推，但是我们不能在本章中全部介绍它们。 我们希望本章为您使用 NumPy 解决线性或多项式问题提供一个良好的开端。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the matrix class and polynomial class for linear
    algebra. We looked at the advanced functions provided by both classes, and also
    saw the performance advantage given by `ndarray` when doing the basic transpose.
    Also we introduced the `numpy.linalg`  class, which provides many functions to
    deal with linear or polynomial computations with `ndarray` .
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了线性代数的矩阵类和多项式类。 我们研究了两个类提供的高级功能，还看到了`ndarray`在进行基本转置时的性能优势。 我们还介绍了`numpy.linalg`类，它提供了许多函数来处理`ndarray`的线性或多项式计算。
- en: We did lots of math in this chapter, but we also found out how to use NumPy
    to help us answer some real-world questions.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们做了很多数学运算，但同时也发现了如何使用 NumPy 帮助我们回答一些现实问题。
- en: In next chapter, we will get to know Fourier transformation and its application
    within NumPy.
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解傅立叶变换及其在 NumPy 中的应用。
