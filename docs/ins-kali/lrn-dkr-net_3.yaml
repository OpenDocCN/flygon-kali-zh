- en: Chapter 3. Building Your First Docker Network
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。构建您的第一个Docker网络
- en: 'This chapter describes practical examples of Docker networking, spanning multiple
    containers over multiple hosts. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了Docker网络的实际示例，跨多个主机连接多个容器。我们将涵盖以下主题：
- en: Introduction to Pipework
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipework简介
- en: Multiple containers over multiple hosts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个主机上的多个容器
- en: Towards scaling networks – introducing Open vSwitch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 朝着扩展网络-介绍Open vSwitch
- en: Networking with overlay networks – Flannel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用覆盖网络进行网络连接-Flannel
- en: Comparison of Docker networking options
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker网络选项的比较
- en: Introduction to Pipework
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pipework简介
- en: Pipework lets you connect together containers in arbitrarily complex scenarios.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Pipework让您在任意复杂的场景中连接容器。
- en: In practical terms, it creates a legacy Linux bridge, adds a new interface to
    the container, and then attaches the interface to that bridge; containers get
    a network segment on which to communicate with each other.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，它创建了一个传统的Linux桥接，向容器添加一个新的接口，然后将接口连接到该桥接；容器获得了一个网络段，可以在其中相互通信。
- en: Multiple containers over a single host
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在单个主机上的多个容器
- en: 'Pipework is a shell script and installing it is simple:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pipework是一个shell脚本，安装它很简单：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following figure shows container communication using Pipework:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了使用Pipework进行容器通信：
- en: '![Multiple containers over a single host](../images/00019.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![在单个主机上的多个容器](../images/00019.jpeg)'
- en: 'First, create two containers:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建两个容器：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let''s use Pipework to connect them:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用Pipework来连接它们：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command creates a bridge, `brpipe`, on the host machine. It adds an `eth1`
    interface to the container `c1` with the IP address `192.168.1.1` and attaches
    the interface to the bridge as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在主机上创建一个桥接`brpipe`。它向容器`c1`添加一个`eth1`接口，IP地址为`192.168.1.1`，并将接口连接到桥接如下：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will not create bridge `brpipe` as it already exists. It will
    add an `eth1` interface to the container `c2` and connect it to the bridge as
    follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令不会创建桥接`brpipe`，因为它已经存在。它将向容器`c2`添加一个`eth1`接口，并将其连接到桥接如下：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now the containers are connected and will be able to ping each other as they
    are on the same subnet, `192.168.1.0/24`. Pipework provides the advantage of adding
    static IP addresses to the containers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在容器已连接，将能够相互ping通，因为它们在同一个子网`192.168.1.0/24`上。Pipework提供了向容器添加静态IP地址的优势。
- en: Weave your containers
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编织您的容器
- en: Weave creates a virtual network that can connect Docker containers across multiple
    hosts as if they are all connected to a single switch. The Weave router itself
    runs as a Docker container and can encrypt routed traffic for transmission over
    the Internet. Services provided by application containers on the Weave network
    can be made accessible to the outside world, regardless of where those containers
    are running.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编织创建了一个虚拟网络，可以连接Docker容器跨多个主机，就像它们都连接到一个单一的交换机上一样。编织路由器本身作为一个Docker容器运行，并且可以加密路由的流量以通过互联网进行传输。在编织网络上由应用容器提供的服务可以被外部世界访问，无论这些容器在哪里运行。
- en: 'Use the following code to install Weave:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码安装Weave：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following figure shows multihost communication using Weave:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了使用Weave进行多主机通信：
- en: '![Weave your containers](../images/00020.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![编织您的容器](../images/00020.jpeg)'
- en: 'On `$HOST1`, we run the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在`$HOST1`上，我们运行以下命令：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we repeat similar steps on `$HOST2`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在`$HOST2`上重复类似的步骤：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the container started on `$HOST1`, the following output is generated:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`$HOST1`上启动的容器中，生成以下输出：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see the Weave network interface, `ethwe`, using the `ifconfig` command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`ifconfig`命令查看编织网络接口`ethwe`：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, in the container started on `$HOST2`, the following output is generated:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在`$HOST2`上启动的容器中，生成以下输出：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So there we have it—two containers on separate hosts happily talking to each
    other.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有了—两个容器在不同的主机上愉快地交流。
- en: Open vSwitch
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Open vSwitch
- en: Docker uses the Linux bridge `docker0` by default. However, there are cases
    where **Open vSwitch** (**OVS**) might be required instead of a Linux bridge.
    A single Linux bridge can only handle 1024 ports – this limits the scalability
    of Docker as we can only create 1024 containers, each with a single network interface.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Docker默认使用Linux桥`docker0`。但是，在某些情况下，可能需要使用**Open vSwitch**（**OVS**）而不是Linux桥。单个Linux桥只能处理1024个端口-这限制了Docker的可扩展性，因为我们只能创建1024个容器，每个容器只有一个网络接口。
- en: Single host OVS
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单主机OVS
- en: We will now install OVS on a single host, create two containers, and connect
    them to an OVS bridge.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在单个主机上安装OVS，创建两个容器，并将它们连接到OVS桥。
- en: 'Use this command to install OVS:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令安装OVS：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install the `ovs-docker` utility with the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装`ovs-docker`实用程序：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following diagram shows the single-host OVS:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了单主机OVS：
- en: '![Single host OVS](../images/00021.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![单主机OVS](../images/00021.jpeg)'
- en: Creating an OVS bridge
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建OVS桥
- en: 'Here, we will be adding a new OVS bridge and configuring it so that we can
    get the containers connected on a different network, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将添加一个新的OVS桥并对其进行配置，以便我们可以在不同的网络上连接容器，如下所示：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a port from the OVS bridge to the Docker container using the following
    steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个端口从OVS桥添加到Docker容器，使用以下步骤：
- en: 'Create two Ubuntu Docker containers:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个Ubuntu Docker容器：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Connect the container to the OVS bridge:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器连接到OVS桥：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Test the connection between the two containers connected via an OVS bridge
    using the `ping` command. First, find out their IP addresses:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ping`命令测试通过OVS桥连接的两个容器之间的连接。首先找出它们的IP地址：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we know the IP addresses of `container1` and `container2`, we can
    ping them:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了`container1`和`container2`的IP地址，我们可以ping它们：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Multiple host OVS
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多主机OVS
- en: Let's see how to connect Docker containers on multiple hosts using OVS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用OVS连接多个主机上的Docker容器。
- en: 'Let''s consider our setup as shown in the following diagram, which contains
    two hosts, **Host 1** and **Host 2**, running Ubuntu 14.04:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下我们的设置，如下图所示，其中包含两个主机，**主机1**和**主机2**，运行Ubuntu 14.04：
- en: '![Multiple host OVS](../images/00022.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![多主机OVS](../images/00022.jpeg)'
- en: 'Install Docker and Open vSwitch on both the hosts:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个主机上安装Docker和Open vSwitch：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Install the `ovs-docker` utility:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`ovs-docker`实用程序：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: By default, Docker chooses a random network to run its containers in. It creates
    a bridge, `docker0`, and assigns an IP address (`172.17.42.1`) to it. So, both
    **Host 1** and **Host 2** `docker0` bridge IP addresses are the same, due to which
    it is difficult for containers in both the hosts to communicate. To overcome this,
    let's assign static IP addresses to the network, that is, `192.168.10.0/24`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker选择一个随机网络来运行其容器。它创建一个桥，`docker0`，并为其分配一个IP地址（`172.17.42.1`）。因此，**主机1**和**主机2**的`docker0`桥IP地址相同，这使得两个主机中的容器难以通信。为了克服这个问题，让我们为网络分配静态IP地址，即`192.168.10.0/24`。
- en: Let's see how to change the default Docker subnet.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何更改默认的Docker子网。
- en: 'Execute the following commands on Host 1:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机1上执行以下命令：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the `br0` OVS bridge:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`br0` OVS桥：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the tunnel to the other host and attach it to the:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建到其他主机的隧道并将其附加到：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the `br0` bridge to the `docker0` bridge:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将`br0`桥添加到`docker0`桥：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Execute the following commands on Host 2:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机2上执行以下命令：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the `br0` OVS bridge:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`br0` OVS桥：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the tunnel to the other host and attach it to the:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 创建到其他主机的隧道并将其附加到：
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the `br0` bridge to the `docker0` bridge:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将`br0`桥添加到`docker0`桥：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `docker0` bridge is attached to another bridge, `br0`. This time, it's an
    OVS bridge. This means that all traffic between the containers is routed through
    `br0` too.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker0`桥连接到另一个桥`br0`。这次是一个OVS桥。这意味着容器之间的所有流量也通过`br0`路由。'
- en: Additionally, we need to connect together the networks from both the hosts in
    which the containers are running. A GRE tunnel is used for this purpose. This
    tunnel is attached to the `br0` OVS bridge and, as a result, to `docker0` too.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要连接两台主机的网络，容器正在其中运行。为此目的使用GRE隧道。该隧道连接到`br0` OVS桥，结果也连接到`docker0`。
- en: After executing the preceding commands on both hosts, you should be able to
    ping the `docker0` bridge addresses from both hosts.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在两台主机上执行上述命令后，您应该能够从两台主机上ping通`docker0`桥地址。
- en: 'On Host 1, the following output is generated on using the `ping` command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机1上，使用`ping`命令会生成以下输出：
- en: '[PRE28]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'On Host 2, the following output is generated on using the `ping` command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机2上，使用`ping`命令会生成以下输出：
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Let's see how to create containers on both the hosts.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在两台主机上创建容器。
- en: 'On Host 1, use the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机1上，使用以下代码：
- en: '[PRE30]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'On Host 2, use the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机2上，使用以下代码：
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now we can ping `container2` from `container1`. In this way, we connect Docker
    containers on multiple hosts using Open vSwitch.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从`container1` ping通`container2`。通过这种方式，我们使用Open vSwitch连接多台主机上的Docker容器。
- en: Networking with overlay networks – Flannel
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用覆盖网络进行网络连接 - Flannel
- en: 'Flannel is the virtual network layer that provides the subnet to each host
    for use with Docker containers. It is packaged with CoreOS but can be configured
    on other Linux OSes as well. Flannel creates the overlay by actually connecting
    itself to Docker bridge, to which containers are attached, as shown in the following
    figure. To setup Flannel, two host machines or VMs are required, which can be
    CoreOS or, more preferably, Linux OS, as shown in this figure:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Flannel是提供给每个主机用于Docker容器的子网的虚拟网络层。它与CoreOS捆绑在一起，但也可以在其他Linux OS上进行配置。Flannel通过实际连接自身到Docker桥来创建覆盖网络，容器连接到该桥，如下图所示。要设置Flannel，需要两台主机或虚拟机，可以是CoreOS或更可取的是Linux
    OS，如下图所示：
- en: '![Networking with overlay networks – Flannel](../images/00023.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![使用覆盖网络进行网络连接 - Flannel](../images/00023.jpeg)'
- en: 'The Flannel code can be cloned from GitHub and built locally, if required,
    on a different flavor of Linux OS, as shown here. It comes preinstalled in CoreOS:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以从GitHub克隆Flannel代码并在本地构建，如下所示，可以在不同版本的Linux OS上进行。它已经预装在CoreOS中：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'CoreOS machines can be easily configured using Vagrant and VirtualBox, as per
    the tutorial mentioned in the following link:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Vagrant和VirtualBox轻松配置CoreOS机器，如下链接中提到的教程：
- en: '[https://coreos.com/os/docs/latest/booting-on-vagrant.html](https://coreos.com/os/docs/latest/booting-on-vagrant.html)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://coreos.com/os/docs/latest/booting-on-vagrant.html](https://coreos.com/os/docs/latest/booting-on-vagrant.html)'
- en: 'After the machines are created and logged in to, we will find a Flannel bridge
    automatically created using the `etcd` configuration:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并登录到机器后，我们将发现使用`etcd`配置自动创建了Flannel桥：
- en: '[PRE33]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The Flannel environment can be checked by viewing `subnet.env`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过查看`subnet.env`来检查Flannel环境：
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The Docker daemon requires to be restarted with the following commands in order
    to get the networking re-instantiated with the subnet from the Flannel bridge:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重新实例化Flannel桥的子网，需要使用以下命令重新启动Docker守护程序：
- en: '[PRE35]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The Flannel environment for the second host can also be checked by viewing
    `subnet.env`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过查看`subnet.env`来检查第二台主机的Flannel环境：
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'A different subnet is allocated to the second host. The Docker service can
    also be restarted in this host by pointing to the Flannel bridge:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为第二台主机分配了不同的子网。也可以通过指向Flannel桥来重新启动此主机上的Docker服务：
- en: '[PRE37]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Docker containers can be created in their respective hosts, and they can be
    tested using the `ping` command in order to check the Flannel overlay network
    connectivity.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器可以在各自的主机上创建，并且可以使用`ping`命令进行测试，以检查Flannel叠加网络的连通性。
- en: 'For Host 1, use the following commands:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于主机1，请使用以下命令：
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'For Host 2, use the following commands:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于主机2，请使用以下命令：
- en: '[PRE39]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Thus, in the preceding example, we can see the complexity that Flannel reduces
    by running the `flanneld` agent on each host, which is responsible for allocating
    a subnet lease out of preconfigured address space. Flannel internally uses `etcd`
    to store the network configuration and other details, such as host IP and allocated
    subnets. The forwarding of packets is achieved using the backend strategy.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在上面的例子中，我们可以看到Flannel通过在每个主机上运行`flanneld`代理来减少的复杂性，该代理负责从预配置的地址空间中分配子网租约。Flannel在内部使用`etcd`来存储网络配置和其他细节，例如主机IP和分配的子网。数据包的转发是使用后端策略实现的。
- en: Flannel also aims to resolve the problem of Kubernetes deployment on cloud providers
    other than GCE, where a Flannel overlay mesh network can ease the issue of assigning
    a unique IP address to each pod by creating a subnet for each server.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Flannel还旨在解决在GCE以外的云提供商上部署Kubernetes时的问题，Flannel叠加网格网络可以通过为每个服务器创建一个子网来简化为每个pod分配唯一IP地址的问题。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learnt how Docker containers communicate across multiple
    hosts using different networking options such as Weave, OVS, and Flannel. Pipework
    uses the legacy Linux bridge, Weave creates a virtual network, OVS uses GRE tunneling
    technology, and Flannel provides a separate subnet to each host in order to connect
    containers to multiple hosts. Some of the implementations, such as Pipework, are
    legacy and will become obsolete over a period of time, while others are designed
    to be used in the context of specific OSes, such as Flannel with CoreOS.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Docker容器如何使用不同的网络选项（如Weave、OVS和Flannel）在多个主机之间进行通信。Pipework使用传统的Linux桥接，Weave创建虚拟网络，OVS使用GRE隧道技术，而Flannel为每个主机提供单独的子网，以便将容器连接到多个主机。一些实现，如Pipework，是传统的，并将随着时间的推移而过时，而其他一些则设计用于在特定操作系统的上下文中使用，例如Flannel与CoreOS。
- en: 'The following diagram shows a basic comparison of Docker networking options:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了Docker网络选项的基本比较：
- en: '![Summary](../images/00024.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Summary](../images/00024.jpeg)'
- en: In the next chapter, we will discuss how Docker containers are networked when
    using frameworks such as Kubernetes, Docker Swarm, and Mesosphere.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论在使用Kubernetes、Docker Swarm和Mesosphere等框架时，Docker容器是如何进行网络连接的。
