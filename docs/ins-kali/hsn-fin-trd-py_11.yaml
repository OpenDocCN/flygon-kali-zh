- en: '*Chapter 8*: Introduction to Zipline and PyFolio'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：Zipline和PyFolio简介'
- en: In this chapter, you will learn about the Python libraries known as Zipline
    and PyFolio, which abstract away the complexities of the backtesting and performance/risk
    analysis aspects of algorithmic trading strategies. They allow you to completely
    focus on the trading logic.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到Zipline和PyFolio这两个Python库，它们抽象了算法交易策略的回测和性能/风险分析方面的复杂性。它们允许您完全专注于交易逻辑。
- en: 'For this, we are going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将涵盖以下主要主题：
- en: Introduction to Zipline and PyFolio
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipline和PyFolio简介
- en: Installing Zipline and PyFolio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Zipline和PyFolio
- en: Importing market data into a Zipline/PyFolio backtesting system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将市场数据导入Zipline/PyFolio回测系统
- en: Structuring Zipline/PyFolio backtesting modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Zipline/PyFolio回测模块
- en: Reviewing the key Zipline API reference
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查Zipline API的关键参考
- en: Running Zipline backtesting from the command line
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行运行Zipline回测
- en: Introduction to the key risk management figures provided by PyFolio
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍PyFolio提供的关键风险管理指标
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Python code used in this chapter is available in the `Chapter08/risk_management.ipynb`
    notebook in the book's code repository.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的Python代码可在书籍代码库的`Chapter08/risk_management.ipynb`笔记本中找到。
- en: Introduction to Zipline and PyFolio
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zipline和PyFolio简介
- en: Backtesting is a computational method of assessing how well a trading strategy
    would have done if it had been applied to historical data. Ideally, this historical
    data should come from a period of time where there were similar market conditions,
    such as it having similar volatility to the present and the future.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 回测是一种计算方法，用于评估如果将交易策略应用于历史数据，它将表现如何。理想情况下，这些历史数据应来自于市场条件相似的时期，例如具有与现在和未来相似的波动性。
- en: Backtesting should include all relevant factors, such as slippage and trading
    costs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 回测应包括所有相关因素，如滑点和交易成本。
- en: '**Zipline** is one of the most advanced open source Python libraries for algorithmic
    trading backtesting engines. Its source code can be found at [https://github.com/quantopian/zipline](https://github.com/quantopian/zipline).
    Zipline is a backtesting library ideal for daily trading (you can also backtest
    weekly, monthly, and so on). It is less suitable for backtesting high-frequency
    trading strategies.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zipline**是用于算法交易回测引擎的最先进的开源Python库之一。其源代码可以在[https://github.com/quantopian/zipline](https://github.com/quantopian/zipline)找到。Zipline是一个适用于日常交易的回测库（也可以进行每周、每月等回测）。它不太适合高频交易策略的回测。'
- en: '**PyFolio** is an open source Python performance and risk analysis library
    consisting of financial portfolios that''s closely integrated with Zipline. You
    can find its documentation at [https://github.com/quantopian/pyfolio](https://github.com/quantopian/pyfolio).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyFolio**是一个开源的Python性能和风险分析库，由与Zipline密切集成的金融投资组合组成。您可以在[https://github.com/quantopian/pyfolio](https://github.com/quantopian/pyfolio)找到其文档。'
- en: Using these two libraries to backtest your trading strategy saves you an enormous
    amount of time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两个库来回测您的交易策略可以节省大量时间。
- en: The objective of this chapter is to describe the key functionality of these
    libraries and to build your intuition. You are encouraged to debug the code in
    PyCharm or any other Python IDE and study the contents of each result's variables
    to make full use of the provided information. Once you become familiar with the
    contents of each resultant object, briefly study the source code of the libraries
    to see their full functionality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是描述这些库的关键功能并建立您的直觉。鼓励您在PyCharm或任何其他Python IDE中调试代码，并研究每个结果变量的内容，以充分利用提供的信息。一旦熟悉了每个结果对象的内容，请简要研究库的源代码，以了解其全部功能。
- en: Installing Zipline and PyFolio
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Zipline和PyFolio
- en: We recommend setting up the development environment as described in [*Appendix
    A*](B15029_App_Final_NM_ePub.xhtml#_idTextAnchor200). Nevertheless, the detailed
    instructions are given in the following sections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议按照[*附录A*](B15029_App_Final_NM_ePub.xhtml#_idTextAnchor200)中描述的开发环境进行设置。然而，详细的说明在以下章节中给出。
- en: Installing Zipline
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Zipline
- en: For performance reasons, Zipline is closely dependent on a particular version
    of Python and its related libraries. Therefore, the best way to install it is
    to create a `conda` virtual environment and install Zipline there. We recommend
    using Anaconda Python for this.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能原因，Zipline严重依赖于特定版本的Python及其相关库。因此，安装它的最佳方式是创建一个`conda`虚拟环境，并在那里安装Zipline。我们建议使用Anaconda
    Python进行此操作。
- en: 'Let''s create a virtual environment called `zipline_env` with Python 3.6 and
    install the `zipline` package:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`zipline_env`的虚拟环境，使用Python 3.6并安装`zipline`包：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will now install PyFolio.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将安装PyFolio。
- en: Installing PyFolio
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装PyFolio
- en: 'You can install the `pyfolio` package via `pip`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`pip`安装`pyfolio`包：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see, installing PyFolio is also an easy task.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，安装PyFolio也是一项简单的任务。
- en: Importing market data into a Zipline/PyFolio backtesting system
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将市场数据导入Zipline/PyFolio回测系统
- en: Backtesting depends on us having an extensive market data database.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 回测取决于我们拥有一个广泛的市场数据数据库。
- en: 'Zipline introduces two market data-specific terms – bundle and ingest:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Zipline引入了两个市场数据特定的术语 - bundle和ingest：
- en: A **bundle** is an interface for incrementally importing market data into Zipline's
    proprietary database from a custom source.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bundle**是一个接口，用于从自定义源逐步将市场数据导入Zipline的专有数据库。'
- en: An **ingest** is the actual process of incrementally importing the custom source
    market data into Zipline's proprietary database; the data ingest is not automatically
    updated. Each time you need fresh data, you must re-ingest the bundle.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ingest**是将自定义源市场数据逐步导入Zipline专有数据库的实际过程；数据摄取不会自动更新。每次需要新鲜数据时，您必须重新摄取bundle。'
- en: 'By default, Zipline supports these bundles:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Zipline支持这些bundle：
- en: Historical Quandl bundle (complimentary daily data for US equities up to 2018)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Historical Quandl bundle（2018年之前的美国股票每日数据）
- en: '`.csv` files bundle'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.csv`文件捆绑包'
- en: We will now learn how to import these two bundles in more detail.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将更详细地学习如何导入这两个捆绑包。
- en: Importing data from the historical Quandl bundle
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从历史Quandl捆绑包导入数据
- en: First, in the activated `zipline_env` environment, set the `QUANDL_API_KEY`
    environment variable to your free (or paid) Quandl API key. Then, ingest the `quandl`
    data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在激活的`zipline_env`环境中，将`QUANDL_API_KEY`环境变量设置为您的免费（或付费）Quandl API密钥。然后，摄取`quandl`数据。
- en: 'For Windows, use the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，请使用以下代码：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For Mac/Linux, use the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac/Linux，请使用以下代码：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Quandl stopped updating the complimentary bundle in 2018 but is still more than
    useful for the first few algorithmic trading steps.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Quandl于2018年停止更新免费捆绑包，但对于前几个算法交易步骤仍然非常有用。
- en: 'It''s best to set `QUANDL_API_KEY` in Windows'' System Properties (press the
    Windows icon and type `Environment Variables`):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在Windows的系统属性中设置`QUANDL_API_KEY`（按Windows图标并键入`环境变量`）：
- en: '![Figure 8.1 – Locating the Edit the system environment variables dialog on
    Windows](img/Figure_8.1_B15029.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1-在Windows上定位编辑系统环境变量对话框](img/Figure_8.1_B15029.jpg)'
- en: Figure 8.1 – Locating the Edit the system environment variables dialog on Windows
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1-在Windows上定位编辑系统环境变量对话框
- en: Then, choose **Edit the system environment variables**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择**编辑系统环境变量**。
- en: '![Figure 8.2 – The location of the Environment Variables… dialog in System
    Properties on Windows](img/Figure_8.2_B15029.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2-在Windows系统属性的环境变量…对话框的位置](img/Figure_8.2_B15029.jpg)'
- en: Figure 8.2 – The location of the Environment Variables… dialog in System Properties
    on Windows
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2-在Windows系统属性的环境变量…对话框的位置
- en: Then, specify the variable in the **Environment Variables...** dialog.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在**环境变量…**对话框中指定变量。
- en: 'On Mac/Linux, add the following command to `~/.bash_profile` for user-based
    operations or `~/.bashrc` for non-login interactive shells:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac/Linux，对于基于用户的操作，请将以下命令添加到`~/.bash_profile`，对于非登录交互式shell，请将其添加到`~/.bashrc`：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, let's learn how to import data from the CSV files bundle.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何从CSV文件捆绑包中导入数据。
- en: Importing data from the CSV files bundle
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从CSV文件捆绑包导入数据
- en: 'The default CSV bundle requires the CSV file to be in **open, high, low, close,
    volume** (**OHLCV**) format with dates, dividends, and splits:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的CSV捆绑包要求CSV文件以**开盘价、最高价、最低价、收盘价、成交量**（**OHLCV**）格式具有日期、股息和拆分：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This book''s GitHub repository contains one sample input CSV file. Its top
    few lines are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的GitHub存储库包含一个样本输入CSV文件。其前几行如下：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To use the custom CSV files bundle, follow these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用自定义的CSV文件捆绑包，请按照以下步骤操作：
- en: Create a directory for CSV files, for example, `C:\MarketData`, with a subdirectory
    called `Daily`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为CSV文件创建一个目录，例如`C:\MarketData`，其中包含一个名为`Daily`的子目录。
- en: Copy the CSV files to the created directory (for example, `C:\MarketData\Daily`).
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将CSV文件复制到创建的目录中（例如，`C:\MarketData\Daily`）。
- en: 'Edit the `.py` file extension in the `C:\Users\<username>\.zipline\extension.py`
    directory on Windows or `~/.zipline/extension.py` on Mac/Linux, as shown:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows的`C:\Users\<username>\.zipline\extension.py`目录中或Mac/Linux的`~/.zipline/extension.py`中编辑`.py`文件扩展名，如下所示：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that we associate the market data with a trading calendar. In this case,
    we're using `NYSE`, which corresponds to the US equities.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将市场数据与交易日历关联起来。在这种情况下，我们使用的是`NYSE`，它对应于美国股票。
- en: 'Ingest the bundle, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 摄取捆绑包，如下所示：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.3 – Output of the zipline ingest for packt-csvdir-bundle](img/Figure_8.3_B15029.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3-zipline摄取packt-csvdir-bundle的输出](img/Figure_8.3_B15029.jpg)'
- en: Figure 8.3 – Output of the zipline ingest for packt-csvdir-bundle
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3-zipline摄取packt-csvdir-bundle的输出
- en: This has created one asset with the `A` ticker.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个具有`A`股票代码的资产。
- en: Importing data from custom bundles
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从自定义捆绑包导入数据
- en: The historical Quandl bundle is most suitable for learning how to design and
    backtest an algorithmic strategy. The CSV files bundle is most suitable for importing
    prices of assets with no public prices. However, for other purposes, you should
    purchase a market data subscription.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 历史Quandl捆绑包最适合学习如何设计和回测算法策略。CSV文件捆绑包最适合导入没有公开价格的资产的价格。但是，对于其他目的，您应该购买市场数据订阅。
- en: Importing data from Quandl's EOD US Stock Prices data
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Quandl的EOD美国股票价格数据导入数据
- en: Quandl offers a subscription service for the End of Day US Stock Prices database
    ([https://www.quandl.com/data/EOD-End-of-Day-US-Stock-Prices](https://www.quandl.com/data/EOD-End-of-Day-US-Stock-Prices))
    at 49 USD per month, with discounts for quarterly or annual payments.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Quandl提供了美国股票收盘价格数据库的订阅服务（[https://www.quandl.com/data/EOD-End-of-Day-US-Stock-Prices](https://www.quandl.com/data/EOD-End-of-Day-US-Stock-Prices)），每月49美元，季度或年度付款有折扣。
- en: 'The advantages of this service, compared to others, are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他服务相比，这项服务的优势如下：
- en: Quandl is deeply integrated into Zipline and you can download the history of
    all the stocks using one command.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quandl已深度集成到Zipline中，您可以使用一个命令下载所有股票的历史记录。
- en: There is no hard limit in terms of the number of API calls you can make per
    month, unlike other providers.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他提供商不同，每月您可以进行的API调用次数没有硬限制。
- en: 'Installing the custom bundle is straightforward:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安装自定义捆绑包很简单：
- en: 'Find the location of the `bundles` directory using the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令找到`bundles`目录的位置：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This results in the following output on my computer:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这在我的计算机上产生了以下输出：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Copy the `quandl_eod.py` file from this book's GitHub repository into that directory.
    The file is a slight modification of the code from Zipline's GitHub.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`quandl_eod.py`文件从本书的GitHub存储库复制到该目录。该文件是对Zipline的GitHub中代码的轻微修改。
- en: 'In the same directory, modify the `__init__.py` file (add this line there):'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一目录中，修改`__init__.py`文件（在其中添加此行）：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'An example of the full `__init__.py` file is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`__init__.py`文件示例如下：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once you have set this up, ensure you have set the `QUANDL_API_KEY` environment
    variable to your API key and run the `ingest` command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，请确保已将`QUANDL_API_KEY`环境变量设置为您的API密钥并运行`ingest`命令：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.4 – Output of ingesting the quandl_eod bundle](img/Figure_8.4_B15029.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 - 摄取quandl_eod捆绑包的输出](img/Figure_8.4_B15029.jpg)'
- en: Figure 8.4 – Output of ingesting the quandl_eod bundle
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 - 摄取quandl_eod捆绑包的输出
- en: 'The actual source code of `quandl_eod.py` is self-explanatory. The `quandl_eod_bundle`
    function, which is annotated with `@bundles.register("quandl_eod")`, defines the
    download process:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`quandl_eod.py`的实际源代码是不言自明的。带有`@bundles.register("quandl_eod")`注释的`quandl_eod_bundle`函数定义了下载过程：'
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The steps that are involved in this process are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程涉及的步骤如下：
- en: Download all the EOD data.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载所有EOD数据。
- en: Generate the metadata.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成元数据。
- en: Apply the trading calendar.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用交易日历。
- en: Apply the corporate events.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用公司事件。
- en: While Quandl's commercial data source is deeply integrated with Zipline, there
    are alternative data sources.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Quandl的商业数据源与Zipline深度集成，但也有替代数据源。
- en: Importing data from Yahoo Finance and IEX paid data
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Yahoo Finance和IEX付费数据导入数据
- en: The project at [https://github.com/hhatefi/zipline_bundles](https://github.com/hhatefi/zipline_bundles)
    provides a Zipline bundle for Yahoo Finance and IEX. The package supports Zipline
    imports from a Yahoo Finance `.csv` file, Yahoo Finance directly, and from IEX.
    This book will only focus on directly importing from Yahoo Finance and IEX.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/hhatefi/zipline_bundles](https://github.com/hhatefi/zipline_bundles)项目为Yahoo
    Finance和IEX提供了一个Zipline捆绑包。该软件包支持从Yahoo Finance的`.csv`文件、直接从Yahoo Finance以及从IEX导入Zipline。本书将仅专注于直接从Yahoo
    Finance和IEX导入。'
- en: While the package does allow automatic installation, I do not recommend it since
    it requires an empty `extension.py` file in the `C:\Users\<username>\.zipline\extension.py`
    directory on Windows or `~/.zipline/extension.py` on Mac/Linux.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然该软件包允许自动安装，但我不建议这样做，因为它需要在Windows上的`C:\Users\<username>\.zipline\extension.py`目录中或Mac/Linux上的`~/.zipline/extension.py`中有一个空的`extension.py`文件。
- en: 'The installation steps are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 安装步骤如下：
- en: Download the repository from [https://github.com/hhatefi/zipline_bundles](https://github.com/hhatefi/zipline_bundles).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/hhatefi/zipline_bundles](https://github.com/hhatefi/zipline_bundles)下载存储库。
- en: Merge the repository's `\zipline_bundles-master\lib\extension.py` file with
    `C:\Users\<username>\.zipline\extension.py` on Windows or `~/.zipline/extension.py`
    on Mac/Linux. If the latter file does not exist, just copy and paste the file.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将存储库的`\zipline_bundles-master\lib\extension.py`文件与Windows上的`C:\Users\<username>\.zipline\extension.py`或Mac/Linux上的`~/.zipline/extension.py`合并。如果后一个文件不存在，只需复制粘贴文件。
- en: 'Edit the start and end dates in the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑以下代码中的开始和结束日期：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Do the same in the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中执行相同的操作：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The full file should look as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 完整文件应如下所示：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Find the location of the `bundles` directory using the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令找到`bundles`目录的位置：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This results in the following output on my computer:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了在我的计算机上的以下输出：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Copy the `Copy \zipline_bundles-master\lib\iex.py`, `\zipline_bundles-master\lib\ingester.py`,
    and `\zipline_bundles-master\lib\yahoo.py` repository files into your Zipline
    `bundles` directory; for example, `d:\\Anaconda3\\envs\\zipline_env\\lib\\site-packages\\zipline\\data\\bundles\`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Copy \zipline_bundles-master\lib\iex.py`，`\zipline_bundles-master\lib\ingester.py`和`\zipline_bundles-master\lib\yahoo.py`存储库文件复制到Zipline
    `bundles`目录中；例如，`d:\\Anaconda3\\envs\\zipline_env\\lib\\site-packages\\zipline\\data\\bundles\`。
- en: 'Set the tickers of interest as environmental variables. For example, for Windows,
    use the following code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将感兴趣的股票代码设置为环境变量。例如，对于Windows，使用以下代码：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For Mac/Linux, use the following code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac/Linux，使用以下代码：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Set an IEX token (it starts with `sk_`), if available, like so on Windows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置IEX令牌（以`sk_`开头），如果可用，如在Windows上所示：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For Mac/Linux, do the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac/Linux，执行以下操作：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Ingest the data:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 摄取数据：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This results in the following output in terms of the `yahoo_direct` bundle:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了`yahoo_direct`捆绑包的以下输出：
- en: '![Figure 8.5 – Output of ingesting the yahoo_direct bundle](img/Figure_8.5_B15029.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 - 摄取yahoo_direct捆绑包的输出](img/Figure_8.5_B15029.jpg)'
- en: Figure 8.5 – Output of ingesting the yahoo_direct bundle
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 - 摄取yahoo_direct捆绑包的输出
- en: 'This also results in the following output, which is for the `iex` bundle:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这也导致以下输出，这是为`iex`捆绑包：
- en: '![Figure 8.6 – Output of ingesting the iex bundle](img/Figure_8.6_B15029.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 - 摄取iex捆绑包的输出](img/Figure_8.6_B15029.jpg)'
- en: Figure 8.6 – Output of ingesting the iex bundle
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 - 摄取iex捆绑包的输出
- en: Integrating with other data sources, such as a local MySQL database, is similar
    to the code in [https://github.com/hhatefi/zipline_bundles](https://github.com/hhatefi/zipline_bundles).
    Some such bundles are available on [github.com](http://github.com).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他数据源集成，例如本地MySQL数据库，类似于[https://github.com/hhatefi/zipline_bundles](https://github.com/hhatefi/zipline_bundles)中的代码。一些这样的捆绑包可在[github.com](http://github.com)上找到。
- en: Structuring Zipline/PyFolio backtesting modules
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Zipline/PyFolio回测模块
- en: 'Typical Zipline backtesting code defines three functions:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的Zipline回测代码定义了三个函数：
- en: '`initialize`: This method is called before any simulated trading happens; it''s
    used to enrich the context object with the definition of tickers and other key
    trading information. It also enables commission and slippage considerations.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initialize`：在发生任何模拟交易之前调用此方法；它用于丰富上下文对象的定义，包括股票代码和其他关键交易信息。它还启用佣金和滑点考虑。'
- en: '`handle_data`: This method downloads the market data, calculates the trading
    signals, and places the trades. This is where you put the actual trading logic
    on entry/exit positions.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handle_data`：此方法下载市场数据，计算交易信号并进行交易。这是您放置实际交易逻辑的地方，用于进入/退出位置。'
- en: '`analyze`: This method is called to perform trading analytics. In our code,
    we will use pyfolio''s standard analytics. Notice that the `pf.utils.extract_rets_pos_txn_from_zipline(perf)`
    function returns any returns, positions, and transactions for custom analytics.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`analyze`：调用此方法执行交易分析。在我们的代码中，我们将使用pyfolio的标准分析。请注意，`pf.utils.extract_rets_pos_txn_from_zipline(perf)`函数返回任何返回、持仓和交易以进行自定义分析。'
- en: Finally, the code defines the `run_algorithm` method. This method returns a
    comprehensive summary of all the trades to be persisted to a file, which can be
    analyzed later.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码定义了`run_algorithm`方法。该方法返回所有交易的综合摘要，以便持久化到文件中，以供以后分析。
- en: There are a few typical patterns when it comes to Zipline's code, depending
    on the use case.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在Zipline的代码中，根据用例，有一些典型的模式。
- en: Trading happens every day
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易每天都会发生
- en: 'Let''s refer to the `handle_data` method directly from the `run_algorithm`
    method:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接从`run_algorithm`方法中引用`handle_data`方法：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `handle_data` method will be called for every single day between `start_date`
    and `end_date`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`handle_data`方法将在`start_date`和`end_date`之间的每一天都会被调用。'
- en: Trading happens on a custom schedule
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易发生在自定义的时间表上
- en: 'We omit the references to the `handle_data` method in the `run_algorithm` method.
    Instead, we set the scheduler in the `initialize` method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`run_algorithm`方法中省略了对`handle_data`方法的引用。相反，我们在`initialize`方法中设置了调度程序：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `handle_data` method will be called for every single `month_end` with the
    prices 1 hour after the market opens.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`handle_data`方法将在每个`month_end`时调用，市场开放后1小时。'
- en: 'We can specify various date rules, as shown here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定各种日期规则，如下所示：
- en: '![Figure 8.7 – Table containing various date rules](img/Figure_8.7_B15029.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – 包含各种日期规则的表](img/Figure_8.7_B15029.jpg)'
- en: Figure 8.7 – Table containing various date rules
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 包含各种日期规则的表
- en: 'Similarly, we can specify time rules, as shown here:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以指定时间规则，如下所示：
- en: '![Figure 8.8 – Table containing various time rules](img/Figure_8.8_B15029.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 包含各种时间规则的表](img/Figure_8.8_B15029.jpg)'
- en: Figure 8.8 – Table containing various time rules
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – 包含各种时间规则的表
- en: We will now learn how to review the key Zipline API reference.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将学习如何审查关键的Zipline API参考。
- en: Reviewing the key Zipline API reference
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查关键的Zipline API参考
- en: In this section, we will outline the key features from [https://www.zipline.io/appendix.html](https://www.zipline.io/appendix.html).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将概述来自[https://www.zipline.io/appendix.html](https://www.zipline.io/appendix.html)的主要特点。
- en: For backtesting, the most important features are order types, commission models,
    and slippage models. Let's look at them in more detail.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于回测来说，最重要的特性是订单类型、佣金模型和滑点模型。让我们更详细地看一下它们。
- en: Types of orders
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 订单类型
- en: 'Zipline supports these types of orders:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Zipline支持这些类型的订单：
- en: '![Figure 8.9 – Supported order types](img/Figure_8.9_B15029.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 支持的订单类型](img/Figure_8.9_B15029.jpg)'
- en: Figure 8.9 – Supported order types
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 支持的订单类型
- en: The order-placing logic is typically placed in the `handle_data` method.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下订单的逻辑通常放在`handle_data`方法中。
- en: 'The following is an example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个例子：
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This example places an order so that we own 100% of the stock if the last daily
    price is above the average of the close prices.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子下订单，如果最后的每日价格高于收盘价的平均值，我们将拥有100%的股票。
- en: Commission models
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 佣金模型
- en: Commission is the fee that's charged by a brokerage for selling or buying stocks.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 佣金是券商为买卖股票收取的费用。
- en: 'Zipline supports various types of commissions, as shown here:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Zipline支持各种类型的佣金，如下所示：
- en: '![Figure 8.10 – Supported commission types](img/Figure_8.10_B15029.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 支持的佣金类型](img/Figure_8.10_B15029.jpg)'
- en: Figure 8.10 – Supported commission types
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 支持的佣金类型
- en: This logic is typically placed into the `initialize` method.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逻辑通常放在`initialize`方法中。
- en: 'The following is an example:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个例子：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this example, we have defined a commission of 5 USD per trade.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了每笔交易5美元的佣金。
- en: Slippage models
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑点模型
- en: Slippage is defined as the difference between the expected price and the executed
    price.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 滑点被定义为预期价格和执行价格之间的差异。
- en: 'Zipline offers these slippage models:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Zipline提供这些滑点模型：
- en: '![Figure 8.11 – Supported slippage models ](img/Figure_8.11_B15029.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图8.11 – 支持的滑点模型](img/Figure_8.11_B15029.jpg)'
- en: Figure 8.11 – Supported slippage models
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 支持的滑点模型
- en: The slippage model should be placed in the `initialize` method.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 滑点模型应该放在`initialize`方法中。
- en: 'The following is an example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个例子：
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this example, we have chosen `VolumeShareSlippage` with a limit of `0.025`
    and a price impact of `0.05`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们选择了`VolumeShareSlippage`，限制为`0.025`，价格影响为`0.05`。
- en: Running Zipline backtesting from the command line
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行运行Zipline回测
- en: For large backtesting jobs, it's preferred to run backtesting from the command
    line.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型的回测作业，最好从命令行运行回测。
- en: 'The following command runs the backtesting strategy defined in the `job.py`
    Python script and saves the resulting DataFrame in the `job_results.pickle` pickle
    file:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令运行在`job.py` Python脚本中定义的回测策略，并将结果DataFrame保存在`job_results.pickle` pickle文件中：
- en: '[PRE30]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For example, you can set up a batch consisting of tens of Zipline command-line
    jobs to run overnight, with each storing the results in a pickle file for later
    analysis.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以设置一个批处理，包括数十个Zipline命令行作业在夜间运行，每个作业将结果存储在pickle文件中以供以后分析。
- en: It's a good practice to keep a journal and library of past backtesting pickle
    files for easy reference.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 保持日志和过去的回测pickle文件库以便轻松参考是一个好习惯。
- en: Introduction to risk management with PyFolio
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PyFolio进行风险管理介绍
- en: Having a risk management system is a fundamental part of having a successful
    algorithmic trading system.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有风险管理系统是成功的算法交易系统的基本部分。
- en: 'Various risks are involved in algorithmic trading:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易涉及各种风险：
- en: '**Market risk**: While all strategies lose money at some point in their life
    cycle, quantifying risk measures and ensuring there are risk management systems
    in place can mitigate strategy losses. In some cases, bad risk management can
    increase trading losses to an extreme and even shut down successful trading firms
    completely.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**市场风险**：虽然所有策略在其生命周期的某个阶段都会亏损，但量化风险度量和确保有风险管理系统可以减轻策略损失。在某些情况下，糟糕的风险管理可能会将交易损失增加到极端，并且甚至完全关闭成功的交易公司。'
- en: '**Regulatory risk**: This is the risk that stems from either accidentally or
    intentionally violating regulations. It is designed to enforce smooth and fair
    market functionality. Some well-known examples include *spoofing*, *quote stuffing*,
    and *banging the close*.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监管风险**：这是源于意外或故意违反法规的风险。它旨在强制执行市场的平稳和公平功能。一些著名的例子包括*虚假交易*、*报价塞满*和*封盘操作*。'
- en: '**Software implementation risk**: Software development is a complex process
    and sophisticated algorithmic trading strategy systems are especially complex.
    Even seemingly minor software bugs can lead to malfunctioning algorithmic trading
    strategies and yield catastrophic outcomes.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件实施风险**：软件开发是一个复杂的过程，而复杂的算法交易策略系统尤其复杂。即使是看似微小的软件错误也可能导致算法交易策略的故障和灾难性的结果。'
- en: '**Operational risk**: This risk comes from deploying and operating these algorithmic
    trading systems. Operations/trading personnel mistakes can also lead to disastrous
    outcomes. Perhaps the most well-known error in this category is the fat-finger
    error, which refers to accidentally sending huge orders and/or at unintentional
    prices.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营风险**：这种风险来自于部署和操作这些算法交易系统。运营/交易人员的错误也可能导致灾难性的结果。这个类别中最著名的错误可能是“手误”，指的是意外发送大额订单和/或以非预期的价格。'
- en: The PyFolio library provides extensive market performance and risk reporting
    functionality.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: PyFolio库提供了广泛的市场表现和风险报告功能。
- en: 'A typical PyFolio report looks as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的PyFolio报告如下所示：
- en: '![Figure 8.12 – PyFolio''s standard output showing the backtesting summary
    and key risk statistics](img/Figure_8.12_B15029.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图8.12 – PyFolio的标准输出显示了回测摘要和关键风险统计数据](img/Figure_8.12_B15029.jpg)'
- en: Figure 8.12 – PyFolio's standard output showing the backtesting summary and
    key risk statistics
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – PyFolio的标准输出显示了回测摘要和关键风险统计数据
- en: The following text aims to explain the key statistics in this report; that is,
    **Annual volatility**, **Sharpe ratio**, and **drawdown**.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文本旨在解释报告中的关键统计数据，即**年波动率**、**夏普比率**和**回撤**。
- en: For the purpose of this chapter, let's generate trades and returns from a hypothetical
    trading strategy.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，让我们从一个假设的交易策略中生成交易和收益。
- en: 'The following code block generates hypothetical PnLs for a trading strategy
    with a slight positive bias and hypothetical positions with no bias:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块生成了一个具有轻微正偏差的交易策略的假设PnL，并且假设头寸没有偏差：
- en: '[PRE31]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s review how the PnL varies over the course of 20 years:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下20年期间PnL的变化：
- en: '[PRE32]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here''s the output:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 8.13 – Plot showing the synthetically generated PnLs with a slight
    positive bias](img/Figure_8.13_B15029.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图8.13 – 显示具有轻微正偏差的合成PnL的图表](img/Figure_8.13_B15029.jpg)'
- en: Figure 8.13 – Plot showing the synthetically generated PnLs with a slight positive
    bias
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – 显示具有轻微正偏差的合成PnL的图表
- en: This plot confirms that the slight positive bias causes the strategy to be profitable
    in the long run.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表证实了轻微的正偏差导致该策略从长期来看是盈利的。
- en: Now, let's explore some risk metrics of this hypothetical strategy's performance.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索一些这个假设策略表现的风险指标。
- en: Market volatility, PnL variance, and PnL standard deviation
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 市场波动性、PnL方差和PnL标准偏差
- en: '**Market volatility** is defined as the standard deviation of prices. Generally,
    during more volatile market conditions, trading strategy PnLs also undergo increased
    swings in magnitude. This is because the same positions are susceptible to larger
    price moves, which means that the PnL moves.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**市场波动性**被定义为价格的标准偏差。一般来说，在市场波动性更高的情况下，交易策略的PnL也会经历更大幅度的波动。这是因为相同的头寸容易受到更大的价格波动的影响，这意味着PnL也会波动。'
- en: '**PnL variance** is used to measure the magnitude of volatility in the strategy''s
    performance/returns.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**PnL方差**用于衡量策略表现/收益的波动幅度。'
- en: The code to compute the PnL's standard deviation is identical to the code that's
    used to compute the standard deviation of prices (market volatility).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 计算PnL标准偏差的代码与用于计算价格标准偏差（市场波动性）的代码相同。
- en: 'Let''s compute the PnL standard deviation over a rolling 20-day period:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算滚动20天期间的PnL标准偏差：
- en: '[PRE33]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output is as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 8.14 – Plot showing PnL standard deviations across a 20-day rolling
    period](img/Figure_8.14_B15029.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – 显示20天滚动期间PnL标准偏差的图表](img/Figure_8.14_B15029.jpg)'
- en: Figure 8.14 – Plot showing PnL standard deviations across a 20-day rolling period
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 显示20天滚动期间PnL标准偏差的图表
- en: This plot proves that, in this case, there is not a significant pattern – it
    is a relatively random strategy.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表证明了，在这种情况下，没有明显的模式 - 这是一个相对随机的策略。
- en: Trade-level Sharpe ratio
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交易级夏普比率
- en: The trade-level Sharpe ratio compares average PnLs (strategy returns) relative
    to PnL standard deviations (strategy volatility). Compared to the standard Sharpe
    ratio, the Trade Level Sharpe Ratio assumes that the risk-free rate is *0* since
    we don't roll over positions, so there is no interest charge. This assumption
    is realistic for intraday or daily trading.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 交易级夏普比率比较了平均PnL（策略收益）与PnL标准偏差（策略波动性）。与标准夏普比率相比，交易级夏普比率假设无风险利率为*0*，因为我们不滚动头寸，所以没有利息费用。这个假设对于日内或日常交易是现实的。
- en: The advantage of this measure is that it's a single number that takes all the
    relevant risk management factors into account, so we can easily compare the performance
    of different strategies. Nevertheless, it's important to realize that the Sharpe
    ratio does not tell the whole story and that it's critical to use it in combination
    with other risk measures.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指标的优势在于它是一个单一的数字，考虑了所有相关的风险管理因素，因此我们可以轻松地比较不同策略的表现。然而，重要的是要意识到夏普比率并不能讲述全部故事，关键是要与其他风险指标结合使用。
- en: 'The Trade Level Sharpe Ratio is defined as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 交易级夏普比率的定义如下：
- en: '![](img/Formula_8.1_B15029.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_8.1_B15029.jpg)'
- en: 'Let''s generate the Sharpe ratio for our strategy''s returns. First, we''ll
    generate the daily PnLs:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的策略收益生成夏普比率。首先，我们将生成每日PnLs：
- en: '[PRE34]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Intuitively, this Sharpe ratio makes sense since the hypothetical strategy''s
    expected daily average performance was set to (1000-990)/2 = $5 and the daily
    standard deviation of PnLs was set to be roughly $1,000 based on this line:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 直观地，这个夏普比率是有意义的，因为假设策略的预期日均表现被设定为(1000-990)/2 = 5美元，而PnLs的日标准差被设定为大约1000美元，基于这条线：
- en: '[PRE35]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In practice, Sharpe ratios are often annualized so that we can make comparisons
    between strategies with different horizons fairer. To annualize the Sharpe ratio
    computed over daily returns, we must multiply it by the square root of 252 (the
    number of trading dates in a year):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，夏普比率通常是年化的，这样我们可以更公平地比较不同时间跨度策略之间的差异。要将基于日收益计算的夏普比率年化，我们必须将其乘以252的平方根（一年中的交易日期数）：
- en: '![](img/Formula_8.2_B15029.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_8.2_B15029.jpg)'
- en: 'The code for this is as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE36]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, let''s interpret the Sharpe ratio:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们解释一下夏普比率：
- en: A ratio of 3.0 or higher is excellent.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3.0或更高的比率是优秀的。
- en: A ratio > 1.5 is very good.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比率>1.5是非常好的。
- en: A ratio > 1.0 is acceptable.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比率>1.0是可以接受的。
- en: A ratio < 1.0 is considered sub-optimal.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比率<1.0被认为是次优的。
- en: We will now look at maximum drawdown.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下最大回撤。
- en: Maximum drawdown
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大回撤
- en: Maximum drawdown is the peak-to-trough decline in a trading strategy's cumulative
    PnL over a period of time. In other words, it's the longest streak of losing money
    compared to the last known maximum cumulative PnL.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 最大回撤是一个交易策略累积PnL在一段时间内的峰值到谷底的下降。换句话说，它是与上一个已知的最大累积PnL相比，亏损资金的最长连续时间。
- en: This metric quantifies the worst-case decline in a trading account's value based
    on historical results.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指标根据历史结果量化了交易账户价值的最坏情况下的下降。
- en: 'Let''s visually find the maximum drawdown in the hypothetical strategy''s performance:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直观地找出假设策略表现中的最大回撤：
- en: '[PRE37]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here''s the output:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![Figure 8.15 – Plot showing the peak and trough PnLs and max drawdown](img/Figure_8.15_B15029.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图8.15 - 显示峰值和谷底PnLs和最大回撤的图表](img/Figure_8.15_B15029.jpg)'
- en: Figure 8.15 – Plot showing the peak and trough PnLs and max drawdown
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 - 显示峰值和谷底PnLs和最大回撤
- en: From this plot, we can assess that the biggest drawdown was $43K for this strategy,
    from the peak PnL of roughly $28K in 1996 to the trough PnL of roughly -$15K in
    2001\. If we had started this strategy in 1996, we would have experienced a loss
    of $43K in our account, which we need to be aware of and prepared for moving forward.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个图表中，我们可以评估出这个策略的最大回撤是43,000美元，从1996年的大约28,000美元的峰值PnL到2001年的大约-15,000美元的谷底PnL。如果我们在1996年开始这个策略，我们的账户将会亏损43,000美元，这是我们需要意识到并为未来做好准备的。
- en: Strategy stop rule – stop loss/maximum loss
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 策略停止规则 - 止损/最大亏损
- en: Before opening trades, it's important to set a stop loss barrier, which is defined
    as the maximum number of losses that a strategy or portfolio (which is just a
    collection of strategies) can take before it is stopped.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在开仓交易之前，设置止损阈值非常重要，它被定义为策略或投资组合（只是一系列策略）在停止之前可以承受的最大亏损次数。
- en: The stop loss barrier can be set using historical maximum drawdown values. For
    our hypothetical strategy, we saw that over the course of 20 years, the maximum
    drawdown that was achieved was $43K. While historical results are not 100% representative
    of future results, you might wish to use a $43K stop loss value for this strategy
    and shut it down if it loses that much money in the future. In practice, setting
    stop losses is much more complex than described here, but this should help you
    build some intuition about stop losses.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 止损阈值可以使用历史最大回撤值来设置。对于我们的假设策略，我们发现在20年的时间里，最大回撤达到了43,000美元。虽然历史结果并不能完全代表未来结果，但你可能希望为这个策略设置一个43,000美元的止损值，并在未来如果亏损达到这个金额时关闭它。实际上，设置止损远比这里描述的复杂得多，但这应该可以帮助你对止损有一些直觉。
- en: Once a strategy is stopped, we can decide to shut down the strategy forever
    or just shut it down for a certain period of time, or even shut it down until
    certain market conditions change. This decision depends on the strategy's behavior
    and its risk tolerance.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦策略停止，我们可以决定永久关闭策略，或者只关闭一段时间，甚至直到某些市场条件改变。这个决定取决于策略的行为和其风险承受能力。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to install and set up a complete backtesting
    and risk/performance analysis system based on Zipline and PyFolio. We then imported
    market data into a Zipline/PyFolio backtesting protfolio and structured it and
    reviewed it. Then, we looked into how to manage risk with PyFolio and make a successful
    algorithmic trading system.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装和设置基于Zipline和PyFolio的完整回测和风险/绩效分析系统。然后，我们将市场数据导入到Zipline/PyFolio回测投资组合中，并对其进行了结构化和审查。然后，我们研究了如何使用PyFolio管理风险并构建一个成功的算法交易系统。
- en: In the next chapter, we make full use of this setup and introduce several key
    trading strategies.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将充分利用这个设置，并介绍几个关键的交易策略。
