- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。入门
- en: In this chapter, we will set up our development environment and discuss how
    we can leverage **SpringSource Tool Suite** (**STS**) to its maximum. Although
    any popular Java development IDE such as *Eclipse*, *intelliJ*, *NetBeans*, and
    others can be used for developing Spring Integration solutions, pivotal, the company
    spearheading Spring Integration, recommends that you use **STS** which is an Eclipse-based
    IDE.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设置我们的开发环境，并讨论如何最大限度地利用**SpringSource Tool Suite**（**STS**）。尽管任何流行的Java开发IDE，如*Eclipse*、*intelliJ*、*NetBeans*和其他都可以用于开发Spring集成解决方案，但是Spring集成的主导公司pivotal建议您使用基于Eclipse的IDE**STS**。
- en: Setting up STS
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置STS
- en: 'STS comes with many off-the-shelf plugins, visual editors, and other features,
    which ease the development of Spring-powered enterprise applications. The look
    and feel of the IDE is very similar to Eclipse. Install STS by following these
    steps:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: STS带有许多现成的插件、可视化编辑器和其他功能，可以简化Spring驱动的企业应用程序的开发。IDE的外观和感觉非常类似于Eclipse。按照以下步骤安装STS：
- en: JDK 1.6 and above is a prerequisite, download and install it from [http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html](http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html).
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JDK 1.6及以上是先决条件，从[http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html](http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html)下载并安装它。
- en: Set `JAVA_HOME` properties as explained in the documentation at [https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html).
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照文档中的说明设置`JAVA_HOME`属性，网址为[https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html)。
- en: Download STS from [http://spring.io/tools/sts](http://spring.io/tools/sts).
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://spring.io/tools/sts](http://spring.io/tools/sts)下载STS。
- en: The downloaded file is in ZIP format. Extract it to the preferred folder and
    it's all set.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载的文件是ZIP格式。将其解压到首选文件夹，一切都设置好了。
- en: Go to `<installation-directory>\sts-bundle\sts-3.6.1.RELEASE`. The `STS.exe`
    file is the executable for launching the IDE.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`<installation-directory>\sts-bundle\sts-3.6.1.RELEASE`。`STS.exe`文件是启动IDE的可执行文件。
- en: This step is optional but can help in efficient functioning of the OS editor—change
    the memory allocation parameter. Locate `STS.ini` (in the same folder as `STS.exe`)
    and change the value of `Xmx`. For 2 GB, I've put it as `Xmx2048m`.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一步是可选的，但可以帮助OS编辑器的高效运行——更改内存分配参数。找到`STS.ini`（与`STS.exe`在同一文件夹中），并更改`Xmx`的值。对于2GB，我将其设置为`Xmx2048m`。
- en: Creating your first project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个项目
- en: 'The following steps will help you in creating your first project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您创建您的第一个项目：
- en: Create a Spring Integration project by navigating to **File** | **Spring Project**,
    as shown in the following screenshot:![Creating your first project](img/00002.jpeg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**File** | **Spring Project**创建一个Spring集成项目，如下面的屏幕截图所示：![创建您的第一个项目](img/00002.jpeg)
- en: Under the templates section, select **Spring Integration Project - Simple**.
    Provide a project name, for example, `sisimple`, as shown in the following screenshot:![Creating
    your first project](img/00003.jpeg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板部分下，选择**Spring Integration Project - Simple**。提供一个项目名称，例如，`sisimple`，如下面的屏幕截图所示：![创建您的第一个项目](img/00003.jpeg)
- en: Fill in the information required to create a Maven-based project, as shown in
    this screenshot:![Creating your first project](img/00004.jpeg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写创建基于Maven的项目所需的信息，如下面的屏幕截图所示：![创建您的第一个项目](img/00004.jpeg)
- en: Click on **Finish**; this will create a project with the name that was provided
    by us (`sisimple`), as shown in this screenshot:![Creating your first project](img/00005.jpeg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Finish**；这将创建一个项目，其名称由我们提供（`sisimple`），如下面的屏幕截图所示：![创建您的第一个项目](img/00005.jpeg)
- en: 'This project is as simple as it can be. Let''s take a quick look at the generated
    Java classes in the following points:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目尽可能简单。让我们快速查看以下几点中生成的Java类：
- en: '`Main.java`: This file is located at the path: `/sisimple/src/main/java/com/chandan/example/si/`.
    It has the main method and will be used to run this sample. Right-click on this
    file from the package explorer and click on **Run As** | **Java Application**—this
    will start the program. This class has the code to bootstrap Spring Integration
    configuration files and load components defined in it. Additionally, it converts
    user input to upper case.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main.java`：此文件位于路径：`/sisimple/src/main/java/com/chandan/example/si/`。它具有主要方法，并将用于运行此示例。从包资源管理器中右键单击此文件，然后单击**Run
    As** | **Java Application**—这将启动程序。此类具有引导Spring集成配置文件和加载其中定义的组件的代码。此外，它将用户输入转换为大写。'
- en: '`StringConversionService.java`: This file is located at the path: `/sisimple/src/main/java/com/chandan/example/si/service/`.
    This is the service interface that is used to convert user input to upper case.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringConversionService.java`：此文件位于路径：`/sisimple/src/main/java/com/chandan/example/si/service/`。这是用于将用户输入转换为大写的服务接口。'
- en: '`spring-integration-context.xml`: This file is located at the path: `/sisimple/src/main/resources/META-INF/spring/integration/`.
    It is the Spring Integration configuration file. It contains the XML-based declaration
    of Spring Integration components.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-integration-context.xml`：此文件位于路径：`/sisimple/src/main/resources/META-INF/spring/integration/`。这是Spring集成配置文件。它包含基于XML的Spring集成组件的声明。'
- en: '`log4j.xml`: This file is located at the path: `/sisimple/src/main/resources/`.
    It is the `Log4j` configuration file. It can be edited to control the log level,
    appenders, and other logging-related aspects.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j.xml`：此文件位于路径：`/sisimple/src/main/resources/`。这是`Log4j`配置文件。它可以被编辑以控制日志级别、附加器和其他与日志相关的方面。'
- en: '`StringConversionServiceTest.java`: This file is located at the path: `/sisimple/src/test/java/com/chandan/example/si/`.
    This is the test file for `StringConversionService`. This will be used to run
    tests against the service classes.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringConversionServiceTest.java`：此文件位于路径：`/sisimple/src/test/java/com/chandan/example/si/`。这是`StringConversionService`的测试文件。这将用于针对服务类运行测试。'
- en: '`pom.xml`: This is the file used for rmaven dependency management, located
    in `/sisimple/`. It has entries for all the dependencies used by the project.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom.xml`：这是用于rmaven依赖管理的文件，位于`/sisimple/`中。它包含项目使用的所有依赖项的条目。'
- en: It will be a bit heavy and premature to explain each of the components in these
    classes and configuration files without having built up some theoretical concepts—we
    will discuss each of the elements in detail, as we move ahead in the chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有建立一些理论概念的情况下，解释这些类和配置文件中的每个组件将会有些沉重和过早——随着我们在章节中的进展，我们将详细讨论每个元素。
- en: STS visual editor
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: STS可视化编辑器
- en: 'STS provides visual ways to add different namespaces. Locate `spring-integration-context.xml`
    under `/sisimple/src/main/resources/META-INF/spring/integration/` and open it.
    This is the default Spring configuration file. Click on the **Namespaces** tab
    to manage different namespaces of Spring Integration. The following screenshot
    shows imported namespaces for this sample project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: STS提供了可视化的方式来添加不同的命名空间。定位`/sisimple/src/main/resources/META-INF/spring/integration/`下的`spring-integration-context.xml`并打开它。这是默认的Spring配置文件。单击**命名空间**选项卡以管理Spring
    Integration的不同命名空间。以下截图显示了此示例项目的导入命名空间：
- en: '![STS visual editor](img/00006.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![STS可视化编辑器](img/00006.jpeg)'
- en: 'In the same editor, clicking on the **Integration-graph** tab will open a visual
    editor, which can be used to add/modify or delete endpoints, channels, and other
    components of Spring Integration. The following screenshot contains the integration
    graph for our sample project:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一编辑器中，单击**Integration-graph**选项卡将打开一个可视化编辑器，可用于添加/修改或删除Spring Integration的端点、通道和其他组件。以下截图包含了我们示例项目的集成图：
- en: '![STS visual editor](img/00007.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![STS可视化编辑器](img/00007.jpeg)'
- en: 'Let''s have a quick look at the generated Maven POM—overall, there are three
    dependencies; only one for Spring Integration, and the other ones for *Junit*
    and *log4j*, as shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看生成的Maven POM——总共有三个依赖项；只有一个用于Spring Integration，另外两个用于*Junit*和*log4j*，如下面的截图所示：
- en: '![STS visual editor](img/00008.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![STS可视化编辑器](img/00008.jpeg)'
- en: Spring Integration Scala DSL
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Integration Scala DSL
- en: This is still in the very early stages and is an incubation project. Scala DSL
    should not be confused with other EIP implementations being offered in Scala—rather,
    it is built on top of Spring Integration and provides DSL-based configuration
    and flow management.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍处于非常早期阶段，是一个孵化项目。Scala DSL不应与Scala提供的其他EIP实现混淆，而是建立在Spring Integration之上，并提供基于DSL的配置和流程管理。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Check out the official Spring Integration Scala DSL blog at [http://spring.io/blog/2012/03/05/introducing-spring-integration-scala-dsl/](http://spring.io/blog/2012/03/05/introducing-spring-integration-scala-dsl/)
    and the GitHub page at [https://github.com/spring-projects/spring-integration-dsl-groovy](https://github.com/spring-projects/spring-integration-dsl-groovy).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '查看官方Spring Integration Scala DSL博客[http://spring.io/blog/2012/03/05/introducing-spring-integration-scala-dsl/](http://spring.io/blog/2012/03/05/introducing-spring-integration-scala-dsl/)和GitHub页面[https://github.com/spring-projects/spring-integration-dsl-groovy](https://github.com/spring-projects/spring-integration-dsl-groovy)。 '
- en: Summary
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to set up your IDE and created a basic project.
    We also tried our hands at the visual editor of STS and covered a quick introduction
    of the upcoming Scala DSL for Spring Integration. We will leverage this knowledge
    to build a compelling Spring Integration application using STS throughout the
    rest of the chapters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何设置IDE并创建了一个基本项目。我们还尝试了STS的可视化编辑器，并对即将推出的Spring Integration Scala
    DSL进行了快速介绍。我们将利用这些知识在接下来的章节中使用STS构建一个引人注目的Spring Integration应用程序。
- en: In the next chapter, we will cover how to ingest messages in the application
    and then how to process them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何在应用程序中接收消息，然后如何处理它们。
