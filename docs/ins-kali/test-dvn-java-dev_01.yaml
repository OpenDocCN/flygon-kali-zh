- en: Why Should I Care for Test-Driven Development?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我为什么要关心测试驱动开发？
- en: This book is written by developers for developers. As such, most of the learning
    will be through code. Each chapter will present one or more **t****est-driven
    development** (**TDD**) practices and we'll try to master them by solving **katas**.
    In karate, a kata is an exercise where you repeat a form many times, making little
    improvements in each. Following the same philosophy, we'll be making small, but
    significant improvements from one chapter to the next. You'll learn how to design
    and code better, reduce **time to market** (**TTM**), produce always up-to-date
    documentation, obtain high code coverage through quality tests, and write clean
    code that works.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是由开发人员为开发人员编写的。因此，大部分学习将通过代码进行。每一章都将介绍一个或多个测试驱动开发（TDD）实践，并我们将通过解决kata来尝试掌握它们。在空手道中，kata是一种练习，您可以在其中多次重复一个动作，每次都有一点改进。遵循相同的哲学，我们将从一章到下一章进行小而显著的改进。您将学会如何更好地设计和编码，减少上市时间，始终获得最新的文档，通过高质量的测试获得高代码覆盖率，并编写有效的代码。
- en: Every journey has a start and this one is no exception. Our destination is a
    Java developer with the TDD black belt.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每次旅行都有一个开始，这次也不例外。我们的目的地是具有TDD黑带的Java开发人员。
- en: In order to know where we're going, we'll have to discuss, and find answers,
    to some questions that will define our voyage. What is TDD? Is it a testing technique,
    or something else? What are the benefits of applying TDD?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了知道我们要去哪里，我们将不得不讨论并找到一些问题的答案，这些问题将定义我们的旅程。什么是TDD？它是一种测试技术，还是其他东西？应用TDD的好处是什么？
- en: The goal of this chapter is to obtain an overview of TDD, to understand what
    it is, and to grasp the benefits it provides for its practitioners.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是获得TDD的概述，了解它是什么，并了解它为从业者提供的好处。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding TDD
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解TDD
- en: What is TDD?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是TDD？
- en: Testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Mocking
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟
- en: Executable documentation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行文档
- en: No debugging
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有调试
- en: Why TDD?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么TDD？
- en: 'You might be working in an agile or waterfall environment. Maybe you have well-defined
    procedures that were battle-tested through years of hard work, or maybe you just
    started your own start-up. No matter what the situation was, you likely faced
    at least one, if not more, of the following pains, problems, or causes for unsuccessful
    delivery:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能是在敏捷或瀑布环境中工作。也许您有经过多年的艰苦工作经过实战检验的明确定义的程序，或者您刚刚开始自己的创业公司。无论情况如何，您可能至少面临以下一种或多种痛苦、问题或导致交付失败的原因：
- en: Part of your team is kept out of the loop during the creation of requirements,
    specifications, or user stories
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的团队在需求、规格或用户故事的创建过程中被排除在外
- en: Most, if not all, of your tests are manual, or you don't have tests at all
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数，如果不是所有的测试都是手动的，或者根本没有测试
- en: Even though you have automated tests, they do not detect real problems
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使您有自动化测试，它们也无法检测到真正的问题
- en: Automated tests are written and executed when it's too late for them to provide
    any real value to the project
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试是在项目提供任何真正价值的时候编写和执行的
- en: There is always something more urgent than dedicating time to testing
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是有比花时间进行测试更紧急的事情
- en: Teams are split between testing, development, and functional analysis departments,
    and they are often out of sync
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队在测试、开发和功能分析部门之间分裂，他们经常不同步
- en: There is an inability to refactor the code because of the fear that something
    will be broken
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于担心会破坏某些东西，无法重构代码
- en: The maintenance cost is too high
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护成本太高
- en: The time to market is too big
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上市时间太长
- en: Clients do not feel that what was delivered is what they asked for
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户觉得交付的东西不是他们要求的
- en: Documentation is never up-to-date
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档永远不是最新的
- en: You're afraid to deploy to production because the result is unknown
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您害怕部署到生产环境，因为结果是未知的
- en: You're often not able to deploy to production because regression tests take
    too long to run
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于回归测试运行时间太长，通常无法部署到生产环境
- en: The team is spending too much time trying to figure out what some method or
    a class does
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队花费太多时间试图弄清楚某个方法或类的作用
- en: TDD does not magically solve all of these problems. Instead, it puts us on the
    way towards the solution. There is no silver bullet, but if there is one development
    practice that can make a difference on so many levels, that practice is TDD.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: TDD并不能神奇地解决所有这些问题。相反，它让我们走上了解决问题的道路。没有银弹，但如果有一种开发实践可以在许多层面上产生巨大影响，那就是TDD。
- en: TDD speeds up the time to market, enables easier refactoring, helps to create
    better design, and fosters looser coupling.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TDD加快了上市时间，使重构更容易，有助于创建更好的设计，并促进了更松散的耦合。
- en: On top of the direct benefits, TDD is a prerequisite for many other practices
    (continuous delivery being one of them). Better design, well-written code, faster
    TTM, up-to-date documentation, and solid test coverage, are some of the results
    you will accomplish by applying TDD.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直接的好处外，TDD还是许多其他实践的先决条件（持续交付就是其中之一）。更好的设计、编写良好的代码、更快的上市时间、最新的文档和扎实的测试覆盖率，是您通过应用TDD将实现的一些结果。
- en: It's not an easy thing to master TDD. Even after learning all the theory and
    going through best practices and anti-patterns, the journey is only just beginning.
    TDD requires time and a lot of practice. It's a long trip that does not stop with
    this book. As a matter of fact, it never truly ends. There are always new ways
    to become more proficient and faster. However, even though the cost is high, the
    benefits are even higher. People who have spent enough time with TDD claim that
    there is no other way to develop a software. We are one of them and we're sure
    that you will be too.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握TDD并不容易。即使学习了所有的理论，经历了最佳实践和反模式，旅程也刚刚开始。TDD需要时间和大量的实践。这是一次漫长的旅程，不会在这本书中结束。事实上，它永远不会真正结束。总是有新的方法可以变得更加熟练和更快。然而，尽管成本很高，但好处更大。花足够的时间与TDD一起的人声称没有其他开发软件的方式。我们是其中之一，我们确信您也会成为其中之一。
- en: We are strong believers that the best way to learn some coding technique is
    by coding. You won't be able to finish this book by reading it in a metro on the
    way to work. It's not a book that one can read in bed. You'll have to get your
    hands dirty and code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们坚信学习编码技术的最佳方式是通过编码。你不可能在地铁上读完这本书去上班。这不是一本可以在床上读的书。你必须动手编码。
- en: In this chapter, we'll go through basics; starting from the next, you'll be
    learning by reading, writing, and running code. We'd like to say that by the time
    you're finished with this book, you'll be an experienced TDD programmer, but this
    is not true. By the end of this book, you'll be comfortable with TDD and you'll
    have a strong base in both theory and practice. The rest is up to you and the
    experience you'll be building by applying it in your day-to-day job.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将从基础知识开始；从下一章开始，你将通过阅读、编写和运行代码来学习。我们想说，当你完成这本书时，你将成为一名经验丰富的TDD程序员，但这是不正确的。在这本书结束时，你将对TDD感到舒适，并且在理论和实践上有一个坚实的基础。其余的取决于你，以及你在日常工作中应用它所建立的经验。
- en: Understanding TDD
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解TDD
- en: At this time, you are probably saying to yourself, *OK, I understand that TDD
    will give me some benefits, but what exactly is TDD?* TDD is a simple procedure
    of writing tests before the actual implementation. It's an inversion of a traditional
    approach where testing is performed after the code is written.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能会对自己说，“好吧，我明白TDD会给我带来一些好处，但TDD到底是什么？”TDD是在实际实现之前编写测试的简单过程。这是传统方法的颠倒，传统方法是在编写代码之后进行测试。
- en: Red-Green-Refactor
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 红-绿-重构
- en: TDD is a process that relies on the repetition of a very short development cycle.
    It is based on the test-first concept of **extreme programming** (**XP**) that
    encourages simple design with a high-level of confidence. The procedure that drives
    this cycle is called **Red-Green-Refactor**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: TDD是一个依赖于非常短的开发周期重复的过程。它基于**极限编程**（**XP**）的测试优先概念，鼓励简单的设计和高度的信心。驱动这一周期的过程被称为**红-绿-重构**。
- en: 'The procedure itself is simple and it consists of a few steps that are repeated
    over and over again:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程本身很简单，它由几个重复的步骤组成：
- en: Write a test
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个测试
- en: Run all tests
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行所有测试
- en: Write the implementation code
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写实现代码
- en: Run all tests
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行所有测试
- en: Refactor
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构
- en: Run all tests
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行所有测试
- en: Since a test is written before the actual implementation, it is supposed to
    fail. If it doesn't, the test is wrong. It describes something that already exists
    or it was written incorrectly. Being in the green state while writing tests is
    a sign of a false positive. Tests like these should be removed or refactored.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试是在实际实现之前编写的，所以它应该失败。如果没有失败，那么测试是错误的。它描述了已经存在的东西，或者写错了。在编写测试时处于绿色状态是一个假阳性的迹象。这样的测试应该被移除或重构。
- en: While writing tests, we are in the red state. When the implementation of a test
    is finished, all tests should pass and then we will be in the green state.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，我们处于红色状态。当测试的实现完成时，所有测试都应该通过，然后我们就处于绿色状态了。
- en: If the last test failed, the implementation is wrong and should be corrected.
    Either the test we just finished is incorrect or the implementation of that test
    did not meet the specification we had set. If any but the last test failed, we
    broke something and changes should be reverted.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最后一个测试失败了，那么实现是错误的，应该进行更正。要么我们刚刚完成的测试是不正确的，要么该测试的实现未满足我们设定的规范。如果除了最后一个测试之外的任何测试都失败了，那么我们就破坏了一些东西，应该撤销更改。
- en: When this happens, the natural reaction is to spend as much time as needed to
    fix the code so that all tests are passing. However, this is wrong. If a fix is
    not done in a matter of minutes, the best thing to do is to revert the changes.
    After all, everything worked not long ago. An implementation that broke something
    is obviously wrong, so why not go back to where we started and think again about
    the correct way to implement the test? That way, we wasted minutes on a wrong
    implementation instead of wasting much more time to correct something that was
    not done right in the first place. Existing test coverage (excluding the implementation
    of the last test) should be sacred. We change the existing code through intentional
    refactoring, not as a way to fix recently written code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，自然的反应是花费尽可能多的时间来修复代码，以确保所有测试都通过。然而，这是错误的。如果修复不是在几分钟内完成的，最好的做法是撤销更改。毕竟，不久前一切都是正常的。明显破坏了某些东西的实现显然是错误的，那么为什么不回到起点，重新考虑正确的实现方式呢？这样，我们浪费了几分钟在错误的实现上，而不是浪费更多的时间来纠正一开始就不正确的东西。现有的测试覆盖范围（不包括最后一个测试的实现）应该是神圣的。我们通过有意的重构来改变现有的代码，而不是作为修复最近编写的代码的一种方式。
- en: Do not make the implementation of the last test final, but provide just enough
    code for this test to pass.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使最后一个测试的实现最终化，而是提供足够的代码让这个测试通过。
- en: Write the code in any way you want, but do it fast. Once everything is green,
    we have confidence that there is a safety net in the form of tests. From this
    moment on, we can proceed to refactor the code. This means that we are making
    the code better and more optimal without introducing new features. While refactoring
    is in place, all tests should be passing all the time.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以任何你想要的方式编写代码，但要快。一旦一切都是绿色的，我们就有信心有一种测试的安全网。从这一刻起，我们可以开始重构代码。这意味着我们正在使代码变得更好、更优化，而不是引入新功能。在重构进行时，所有测试都应该始终通过。
- en: If, while refactoring, one of the tests failed, refactoring broke an existing
    functionality and, as before, changes should be reverted. Not only that, at this
    stage we are not changing any features, but we are also not introducing any new
    tests. All we're doing is making the code better while continuously running all
    tests to make sure that nothing got broken. At the same time, we're proving code
    correctness and cutting down on future maintenance costs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在重构过程中，其中一个测试失败了，说明重构破坏了现有的功能，和之前一样，改动应该被撤销。此时，我们不仅不改变任何功能，也不引入任何新的测试。我们所做的只是不断地改进代码，同时持续运行所有的测试，确保没有出现问题。同时，我们正在证明代码的正确性，减少未来的维护成本。
- en: Once refactoring is finished, the process is repeated. It's an endless loop
    of a very short cycle.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 重构完成后，这个过程会重复。这是一个非常短的循环的无尽循环。
- en: Speed is the key
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 速度是关键
- en: Imagine a game of ping pong (or table tennis). The game is very fast; sometimes
    it is hard even to follow the ball when professionals play the game. TDD is very
    similar. TDD veterans tend not to spend more than a minute on either side of the
    table (test and implementation). Write a short test and run all tests (ping),
    write the implementation and run all tests (pong), write another test (ping),
    write the implementation of that test (pong), refactor and confirm that all tests
    are passing (score), and then repeat—ping, pong, ping, pong, ping, pong, score,
    serve again. Do not try to make the perfect code. Instead, try to keep the ball
    rolling until you think that the time is right to score (refactor).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一场乒乓球比赛（或乒乓球）。比赛非常快速；有时甚至连专业运动员打比赛时都很难跟上球的速度。TDD非常类似。TDD老手往往不会在乒乓球桌的任一边花费超过一分钟的时间（测试和实现）。编写一个简短的测试并运行所有测试（乒），编写实现并运行所有测试（乓），编写另一个测试（乒），编写该测试的实现（乓），重构并确认所有测试都通过（得分），然后重复——乒，乓，乒，乓，乒，乓，得分，再发球。不要试图编写完美的代码。相反，尽量保持球的运动，直到你认为是时候得分（重构）。
- en: Time between switching from tests to implementation (and vice versa) should
    be measured in minutes (if not seconds).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从测试切换到实现（反之亦然）的时间应该以分钟（如果不是秒）计算。
- en: It's not about testing
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这不是关于测试
- en: '**T** in **TDD** is often misunderstood. TDD is the way we approach the design.
    It is the way to force us to think about the implementation and what the code
    needs to do before writing it. It is the way to focus on requirements and the
    implementation of just one thing at a time—organize your thoughts and better structure
    the code. This does not mean that tests resulting from TDD are useless—they are
    far from that. They are very useful and they allow us to develop with great speed
    without being afraid that something will be broken. This is especially true when
    refactoring takes place. Being able to reorganize the code while having the confidence
    that no functionality is broken is a huge boost to its quality.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**T**在**TDD**中经常被误解。TDD是我们处理设计的方式。它是一种迫使我们在编写代码之前思考实现和代码需要做什么的方式。它是一种专注于需求和一次只实现一件事的方式——组织你的思绪并更好地结构代码。这并不意味着TDD产生的测试是无用的——它们远非如此。它们非常有用，它们让我们能够以极快的速度开发，而不用担心会出现问题。特别是在重构时。能够在重组代码的同时确保没有破坏任何功能，对其质量是一个巨大的提升。'
- en: The main objective of TDD is testable code design with tests as a very useful
    side product.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: TDD的主要目标是可测试的代码设计，测试只是一个非常有用的副产品。
- en: Testing
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Even though the main objective of TDD is the approach to code design, tests
    are still a very important aspect of TDD and we should have a clear understanding
    of two major groups of techniques, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TDD的主要目标是代码设计的方法，测试仍然是TDD非常重要的一个方面，我们应该清楚地了解两大类技术，如下所示：
- en: Black-box testing
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑盒测试
- en: White-box testing
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白盒测试
- en: Black-box testing
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 黑盒测试
- en: Black-box testing (also known as **functional testing**) treats software under
    test as a black box without knowing its internals. Tests use software interfaces
    and try to ensure that they work as expected. As long as the functionality of
    interfaces remains unchanged, tests should pass even if internals are changed.
    The tester is aware of what the program should do, but does not have the knowledge
    of how it does it. Black-box testing is the most commonly used type of testing
    in traditional organizations that have testers as a separate department, especially
    when they are not proficient in coding and have difficulties understanding it.
    This technique provides an external perspective on the software under test.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试（也称为**功能测试**）将被测试的软件视为黑盒，不了解其内部。测试使用软件接口，并尝试确保它们按预期工作。只要接口的功能保持不变，即使内部发生了变化，测试也应该通过。测试人员知道程序应该做什么，但不知道它是如何做到的。黑盒测试是传统组织中最常用的测试类型，这些组织通常有一个独立的测试部门，特别是当测试人员不擅长编码并且难以理解时。这种技术为被测试的软件提供了外部视角。
- en: 'Some of the advantages of black-box testing are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试的一些优点如下：
- en: It is efficient for large segments of code
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对大段代码非常有效
- en: Code access, understanding the code, and ability to code are not required
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要访问代码、理解代码和编写代码的能力
- en: It offers separation between users and developers perspectives
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为用户和开发者提供了分离的视角
- en: 'Some of the disadvantages of black-box testing are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试的一些缺点如下：
- en: It provides limited coverage, since only a fraction of test scenarios is performed
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了有限的覆盖范围，因为只执行了一小部分测试场景
- en: It can result in inefficient testing due to tester's lack of knowledge about
    software internals
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于测试人员对软件内部知识的缺乏，可能导致测试效率低下
- en: It can lead to blind coverage, since testers have limited knowledge about the
    application
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能导致盲目覆盖，因为测试人员对应用程序的了解有限
- en: If tests are driving the development, they are often done in the form of acceptance
    criteria that is later used as a definition of what should be developed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试驱动开发，通常以验收标准的形式进行，后来作为应该开发的定义。
- en: Automated black-box testing relies on some form of automation, such as **behavior-driven
    development** (**BDD**).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化的黑盒测试依赖于某种形式的自动化，如BDD。
- en: White-box testing
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 白盒测试
- en: White-box testing (also known as **clear box testing**, **glass box testing**,
    **transparent box testing**, and **structural testing**) looks inside the software
    that is being tested and uses that knowledge as part of the testing process. If,
    for example, an exception should be thrown under certain conditions, a test might
    want to reproduce those conditions. White-box testing requires internal knowledge
    of the system and programming skills. It provides an internal perspective on the
    software under test.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 白盒测试（也称为透明盒测试、玻璃盒测试、透明盒测试和结构测试）查看被测试软件的内部，并将这些知识作为测试过程的一部分。例如，如果在某些条件下应该抛出异常，测试可能希望重现这些条件。白盒测试需要对系统和编程技能有内部知识。它提供了对被测试软件的内部视角。
- en: 'Some of the advantages of white-box testing are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 白盒测试的一些优点如下：
- en: It is efficient in finding errors and problems
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在发现错误和问题方面非常有效
- en: Required knowledge of internals of the software under test is beneficial for
    thorough testing
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对被测试软件内部的了解对于彻底测试是有益的
- en: It allows finding hidden errors
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以发现隐藏的错误
- en: It encourages programmer's introspection
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它鼓励程序员的内省
- en: It helps in optimizing the code
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于优化代码
- en: Due to the required internal knowledge of the software, maximum coverage is
    obtained
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于对软件内部知识的要求，可以获得最大的覆盖率
- en: 'Some of the disadvantages of white-box testing are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 白盒测试的一些缺点如下：
- en: It might not find unimplemented or missing features
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能无法发现未实现或缺失的功能
- en: It requires high-level knowledge of internals of the software under test
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要对被测试软件的内部有高级别的了解
- en: It requires code access
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要代码访问
- en: Tests are often tightly coupled to the implementation details of the production
    code, causing unwanted test failures when the code is refactored
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试通常与生产代码的实现细节紧密耦合，导致在重构代码时出现不希望的测试失败
- en: White-box testing is almost always automated and, in most cases, take the form
    of unit tests.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 白盒测试几乎总是自动化的，并且在大多数情况下采用单元测试的形式。
- en: When white-box testing is done before the implementation, it takes the form
    of TDD.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当白盒测试在实施之前进行时，它采用TDD的形式。
- en: The difference between quality checking and quality assurance
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 质量检查和质量保证之间的区别
- en: The approach to testing can also be distinguished by looking at the objectives
    they are trying to accomplish. Those objectives are often split between **quality
    checking** (**QC**) and **quality assurance** (**QA**). While QC is focused on
    defects identification, QA tries to prevent them. QC is product-oriented and intends
    to make sure that results are as expected. On the other hand, QA is more focused
    on processes that assure that quality is built-in. It tries to make sure that
    correct things are done in the correct way.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法也可以通过它们试图实现的目标来区分。这些目标通常在质量检查（QC）和质量保证（QA）之间分开。虽然QC专注于缺陷识别，QA试图防止它们。QC是产品导向的，旨在确保结果符合预期。另一方面，QA更专注于确保质量内建的过程。它试图确保以正确的方式完成正确的事情。
- en: While QC had a more important role in the past, with the emergence of TDD, **acceptance
    test-driven development** (**ATDD**), and later on BDD, focus has been shifting
    towards QA.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在过去，质量检查在质量保证方面起着更重要的作用，但随着TDD、ATDD和后来的BDD的出现，焦点已经开始转向质量保证。
- en: Better tests
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的测试
- en: No matter whether one is using black-box, white-box, or both types of testing,
    the order in which they are written is very important.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是使用黑盒测试、白盒测试还是两者兼而有之，它们的编写顺序都非常重要。
- en: Requirements (specifications and user stories) are written before the code that
    implements them. They come first so they define the code, not the other way around.
    The same can be said for tests. If they are written after the code is done, in
    a certain way, that code (and the functionalities it implements) is defining tests.
    Tests that are defined by an already existing application are biased. They have
    a tendency to confirm what code does, and not to test whether a client's expectations
    are met, or that the code is behaving as expected. With manual testing, that is
    less the case since it is often done by a siloed QC department (even though it's
    often called QA). They tend to work on test definition in isolation from developers.
    That in itself leads to bigger problems caused by inevitably poor communication
    and the **police syndrome**, where testers are not trying to help the team to
    write applications with quality built in, but to find faults at the end of the
    process. The sooner we find problems, the cheaper it is to fix them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 需求（规格和用户故事）在实现它们的代码之前编写。它们首先定义了代码，而不是相反。测试也是如此。如果它们是在代码完成后编写的，以某种方式，那么代码（以及它实现的功能）正在定义测试。由已经存在的应用程序定义的测试是有偏见的。它们倾向于确认代码的功能，而不是测试客户的期望是否得到满足，或者代码是否按预期行为。与手动测试相比，情况就不那么明显，因为它通常由一个独立的QC部门（尽管通常被称为QA）进行（即使它通常被称为QA）。他们倾向于在与开发人员隔离的测试定义上工作。这本身就会导致由于不可避免的沟通不良和“警察综合症”而引起的更大问题，测试人员不是试图帮助团队编写具有内建质量的应用程序，而是在过程结束时找到错误。我们越早发现问题，修复它们就越便宜。
- en: Tests written in the TDD fashion (including its flavors such as ATDD and BDD)
    are an attempt to develop applications with quality built in from the very start.
    It's an attempt to avoid having problems in the first place.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以TDD方式编写的测试（包括其变体，如ATDD和BDD）是试图从一开始就开发具有内建质量的应用程序。这是为了避免一开始就出现问题。
- en: Mocking
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟
- en: In order for tests to run quickly and provide constant feedback, code needs
    to be organized in such a way that the methods, functions, and classes can be
    easily replaced with mocks and stubs. A common word for this type of replacements
    of the actual code is **test double**. The speed of execution can be severely
    affected with external dependencies; for example, our code might need to communicate
    with the database. By mocking external dependencies, we are able to increase that
    speed drastically. Whole unit test suite execution should be measured in minutes,
    if not seconds. Designing the code in a way that can be easily mocked and stubbed
    forces us to structure that code better by applying a separation of concerns.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让测试快速运行并提供持续反馈，代码需要以这样一种方式组织，即方法、函数和类可以很容易地被替换为模拟和存根。这种类型的实际代码替换的常用术语是**测试替身**。执行速度可能会受到外部依赖的严重影响；例如，我们的代码可能需要与数据库通信。通过模拟外部依赖，我们能够大大提高速度。整个单元测试套件的执行时间应该以分钟计算，如果不是秒。以便易于模拟和存根的方式设计代码，迫使我们通过关注点的分离来更好地构建代码。
- en: More important than speed is the benefit of the removal of external factors.
    Setting up databases, web servers, external APIs, and other dependencies that
    our code might need, is both time consuming and unreliable. In many cases, those
    dependencies might not even be available. For example, we might need to create
    a code that communicates with a database and have someone else create a schema.
    Without mocks, we would need to wait until that schema is set.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 比速度更重要的是消除外部因素的好处。设置数据库、Web 服务器、外部 API 和其他可能需要的依赖项，既耗时又不可靠。在许多情况下，这些依赖项甚至可能不可用。例如，我们可能需要创建一个与数据库通信并让其他人创建模式的代码。没有模拟，我们需要等到模式设置好为止。
- en: With or without mocks, the code should be written in such a way that we can
    easily replace one dependency with another.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是否有模拟，代码都应该以便于用另一个依赖项替换的方式编写。
- en: Executable documentation
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可执行文档
- en: Another very useful aspect of TDD (and well-structured tests in general) is
    documentation. In most cases, it is much easier to find out what the code does
    by looking at tests than at the implementation itself. What is the purpose of
    some methods? Look at the tests associated with it. What is the desired functionality
    of some part of the application UI? Look at the tests associated with it. Documentation
    written in the form of tests is one of the pillars of TDD and deserves further
    explanation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: TDD（以及良好结构的测试）的另一个非常有用的方面是文档。在大多数情况下，通过查看测试来了解代码的功能要比查看实现本身容易得多。某些方法的目的是什么？看看与之相关的测试。应用程序
    UI 的某些部分的期望功能是什么？看看与之相关的测试。以测试形式编写的文档是TDD 的支柱之一，值得进一步解释。
- en: The main problem with (traditional) software documentation is that it is not
    up-to-date most of the time. As soon as some part of the code changes, the documentation
    stops reflecting the actual situation. This statement applies to almost any type
    of documentation, with requirements and test cases being the most affected.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: （传统）软件文档的主要问题是大部分时间都不是最新的。一旦代码的某部分发生变化，文档就停止反映实际情况。这种情况几乎适用于任何类型的文档，需求和测试用例受到的影响最大。
- en: The necessity to document code is often a sign that the code itself is not well-written.
    Moreover, no matter how hard we try, documentation inevitably gets outdated.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记录代码的必要性通常表明代码本身写得不好。此外，无论我们如何努力，文档都不可避免地会过时。
- en: Developers shouldn't rely on system documentation because it is almost never
    up-to-date. Besides, no documentation can provide as detailed and up-to-date a
    description of the code as the code itself.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员不应依赖系统文档，因为它几乎永远不会是最新的。此外，没有文档能够提供与代码本身一样详细和最新的描述。
- en: Using code as documentation does not exclude other types of documents. The key
    is to avoid duplication. If details of the system can be obtained by reading the
    code, other types of documentation can provide quick guidelines and a high-level
    overview. Non-code documentation should answer questions such as what the general
    purpose of the system is and what technologies are used by the system. In many
    cases, a simple `README` is enough to provide the quick start that developers
    need. Sections such as project description, environment setup, installation, and
    build and packaging instructions are very helpful for newcomers. From there on,
    code is the bible.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码作为文档并不排除其他类型的文档。关键是要避免重复。如果通过阅读代码可以获取系统的细节，其他类型的文档可以提供快速指南和高层概述。非代码文档应该回答诸如系统的一般目的是什么，系统使用了哪些技术等问题。在许多情况下，一个简单的`README`就足以为开发人员提供快速入门。项目描述、环境设置、安装以及构建和打包说明等部分对新手非常有帮助。从那时起，代码就是圣经。
- en: Implementation code provides all needed details while test code acts as the
    description of the intent behind the production code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 实现代码提供了所有所需的细节，而测试代码则充当了对生产代码背后意图的描述。
- en: Tests are executable documentation with TDD being the most common way to create
    and maintain it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是可执行的文档，TDD 是创建和维护它的最常见方式。
- en: Assuming that some form of **continuous integration** (**CI**) is in use, if
    some part of the test documentation is incorrect, it will fail and be fixed soon
    afterwards. CI solves the problem of incorrect test documentation, but it does
    not ensure that all functionality is documented. For this reason (among many others),
    test documentation should be created in the TDD fashion. If all functionality
    is defined as tests before the implementation code is written and the execution
    of all tests is successful, then tests act as a complete and up-to-date information
    source that can be used by developers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 假设某种形式的持续集成（CI）正在使用，如果测试文档的某部分不正确，它将失败并很快被修复。持续集成解决了测试文档不正确的问题，但并不能确保所有功能都有文档记录。因此（以及其他许多原因），测试文档应该以TDD的方式创建。如果在编写实现代码之前将所有功能定义为测试，并且所有测试执行成功，那么测试就可以作为开发人员可以使用的完整和最新的信息源。
- en: What should we do with the rest of the team? Testers, customers, managers, and
    other non-coders might not be able to obtain the necessary information from the
    production and test code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该怎么处理团队的其他成员？测试人员、客户、经理和其他非编码人员可能无法从生产和测试代码中获取必要的信息。
- en: As we saw earlier, two of the most common types of testing are black-box and
    white-box testing. This division is important since it also divides testers into
    those who do know how to write or at least read code (white-box testing) and those
    who don't (black-box testing). In some cases, testers can do both types. However,
    more often than not, they do not know how to code so the documentation that is
    usable by developers is not usable by them. If documentation needs to be decoupled
    from the code, unit tests are not a good match. That is one of the reasons why
    BDD came in to being.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，黑盒测试和白盒测试是最常见的两种测试类型。这种区分很重要，因为它也将测试人员分为那些知道如何编写或至少阅读代码的人（白盒测试）和那些不知道的人（黑盒测试）。在某些情况下，测试人员可以做两种类型的测试。然而，更多的情况是，他们不知道如何编码，因此开发人员可以使用的文档对他们来说是无用的。如果需要将文档与代码解耦，单元测试就不是一个好选择。这就是BDD出现的原因之一。
- en: BDD can provide documentation necessary for non-coders, while still maintaining
    the advantages of TDD and automation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: BDD可以为非编码人员提供必要的文档，同时仍然保持TDD和自动化的优势。
- en: Customers need to be able to define new functionality of the system, as well
    as to be able to get information about all the important aspects of the current
    system. That documentation should not be too technical (code is not an option),
    but it still must be always up-to-date. BDD narratives and scenarios are one of
    the best ways to provide this type of documentation. The ability to act as acceptance
    criteria (written before the code), be executed frequently (preferably on every
    commit), and be written in a natural language makes BDD stories not only always
    up-to-date, but usable by those who do not want to inspect the code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 客户需要能够定义系统的新功能，以及能够获取有关当前系统所有重要方面的信息。该文档不应该太技术化（代码不是选项），但它仍然必须始终保持最新。BDD叙述和场景是提供这种类型文档的最佳方式之一。作为验收标准（在编写代码之前编写），经常执行（最好在每次提交时），并用自然语言编写的能力使BDD故事不仅始终保持最新，而且可供不想检查代码的人使用。
- en: Documentation is an integral part of the software. As with any other part of
    the code, it needs to be tested often so that we're sure that it is accurate and
    up-to-date.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是软件的一个组成部分。与代码的任何其他部分一样，它需要经常进行测试，以确保它准确和最新。
- en: The only cost-effective way to have accurate and up-to-date information is to
    have executable documentation that can be integrated into your CI system.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 具有准确和最新信息的唯一经济有效的方法是拥有可集成到CI系统中的可执行文档。
- en: TDD as a methodology is a good way to move along in this direction. On a low-level,
    unit tests are a best fit. On the other hand, BDD provides a good way to work
    on a functional level while maintaining understanding that is accomplished by
    using natural language.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: TDD作为一种方法论是朝着这个方向前进的好方法。在低级别上，单元测试是最合适的。另一方面，BDD提供了一种在功能级别上工作的好方法，同时保持了使用自然语言所实现的理解。
- en: No debugging
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要调试
- en: We (authors of this book) almost never debug applications we're working on!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们（本书的作者）几乎从不调试我们正在处理的应用程序！
- en: This statement might sound pompous, but it's true. We almost never debug because
    there is rarely a reason to debug an application. When tests are written before
    the code and the code coverage is high, we can have high confidence that the application
    works as expected. This does not mean that applications written using TDD do not
    have bugs—they do. All applications do. However, when that happens, it is easy
    to isolate them by simply looking for the code that is not covered by tests.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个说法可能听起来很自大，但事实如此。我们几乎从不调试，因为很少有理由调试应用程序。当测试在编写代码之前编写，并且代码覆盖率很高时，我们可以非常有信心地认为应用程序按预期工作。这并不意味着使用TDD编写的应用程序没有错误-它们有。所有应用程序都有。然而，当发生这种情况时，通过简单查找未被测试覆盖的代码来隔离它们是很容易的。
- en: Tests themselves might not include some cases. In those situations, the action
    is to write additional tests.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 测试本身可能不包括某些情况。在这种情况下，行动就是编写额外的测试。
- en: With high code coverage, finding the cause of some bug is much faster through
    tests than spending time debugging line by line until the culprit is found.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过高代码覆盖率，通过测试找到某个错误的原因比花时间逐行调试要快得多。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you got the general understanding of TDD practice and insights
    into what TDD is and what it isn't. You learned that it is a way to design code
    through a short and repeatable cycle called Red-Green-Refactor. Failure is an
    expected state that should not only be embraced, but enforced throughout the TDD
    process. This cycle is so short that we move from one phase to another with great
    speed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了TDD实践的一般理解以及TDD是什么以及它不是什么。您了解到它是通过一个称为红-绿-重构的短小可重复的周期来设计代码的一种方式。失败是一种预期状态，不仅应该被接受，而且应该在整个TDD过程中得到强制执行。这个周期是如此短，以至于我们可以以很快的速度从一个阶段转移到另一个阶段。
- en: While code design is the main objective, tests created throughout the TDD process
    are a valuable asset that should be utilized and severely impact our view of traditional
    testing practices. We went through the most common of those practices, such as
    white-box and black-box testing, tried to put them into the TDD perspective, and
    showed benefits that they can bring to each other.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码设计是主要目标的同时，整个TDD过程中创建的测试是一项宝贵的资产，应该被充分利用，并严重影响我们对传统测试实践的看法。我们经历了最常见的那些实践，比如白盒测试和黑盒测试，试图将它们放入TDD的视角，并展示它们可以互相带来的好处。
- en: You discovered that mocks are very important tools that are often a must when
    writing tests. Finally, we discussed how tests can and should be utilized as executable
    documentation and how TDD can make debugging much less necessary.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您发现模拟是编写测试时经常必不可少的重要工具。最后，我们讨论了测试如何可以和应该被用作可执行文档，以及TDD如何可以使调试变得不那么必要。
- en: Now that we are armed with theoretical knowledge, it is time to set up the development
    environment and get an overview and comparison of different testing frameworks
    and tools.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了理论知识，是时候建立开发环境，概述和比较不同的测试框架和工具了。
