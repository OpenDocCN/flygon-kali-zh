- en: '*Chapter 5*:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第5章*：'
- en: How to Approach a Coding Challenge
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何应对编码挑战
- en: This chapter covers *technical quizzes* and *coding challenges*, which are commonly
    used in technical interviews.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了技术测验和编码挑战，这在技术面试中常见。
- en: 'The coding challenge is the most important part of an interview. This part
    can consist of a single session or multiple sessions. Some companies prefer to
    split the technical interview into two parts: the first part consists of a technical
    quiz, while the second part consists of one or more coding challenges. In this
    chapter, we’ll tackle these two topics in detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编码挑战是面试中最重要的部分。这部分可以由单个会话或多个会话组成。一些公司更喜欢将技术面试分为两部分：第一部分包括技术测验，而第二部分包括一个或多个编码挑战。在本章中，我们将详细讨论这两个主题：
- en: Technical quiz
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术测验
- en: Coding challenge
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码挑战
- en: By the end of this chapter, you should be able to sketch a plan of your own
    to approach the technical interview. You’ll know how to deal with the key moments
    during the interview, what the interviewer is expecting to see and hear from you,
    and how to deal with blocking moments when you don’t have a clue about the answer/solution.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，你应该能够规划自己的技术面试方法。你将知道如何处理面试中的关键时刻，面试官期望从你那里看到和听到什么，以及如何处理当你对答案/解决方案一无所知时的阻塞时刻。
- en: Technical quiz
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术测验
- en: The technical quiz can take on a question-answer format with the technical interviewer,
    or it can be an on-site quiz. Commonly, it contains 20-40 questions and takes
    less than an hour.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 技术测验可以采用技术面试官问答的形式，也可以是现场测验。通常包含20-40个问题，耗时不到一小时。
- en: When the technical interviewer conducts the process, you will have to provide
    free answers and the duration may vary (for example, between 30-45 minutes). It
    is important to be crystal clear, concise, and always on topic.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当技术面试官进行这个过程时，你将需要提供自由回答，持续时间可能会有所不同（例如，30-45分钟之间）。清晰、简洁、并且始终保持话题相关是很重要的。
- en: 'Usually, when a technical interviewer conducts the interview, the questions
    are formulated as scenarios that require you to make a decision or choice. For
    example, a question may sound like this: *We need a space-efficient algorithm
    capable of searching millions of records extremely quickly with a decent number
    of false positives. What do you recommend for us?* Most probably, the expected
    answer is something like, *I will consider algorithms from the Bloom filters family*.
    If you came across a similar case in your previous projects, then you may say
    it like this: *We had the same scenario in a project about streaming data, and
    we decided to go with the Bloom filter algorithm*.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当技术面试官进行面试时，问题会被构建成需要你做出决定或选择的场景。例如，一个问题可能听起来像这样：*我们需要一个能够以极快的速度搜索数百万条记录并具有相当数量的误报的高效算法。你会为我们推荐什么？*
    很可能，期望的答案是类似于，*我会考虑Bloom过滤器家族的算法*。如果你在以前的项目中遇到过类似的情况，那么你可以这样说：*我们在一个关于流数据的项目中遇到了相同的情况，我们决定采用Bloom过滤器算法*。
- en: Another category of questions is meant to simply check your technical knowledge.
    These questions are not in the context of a scenario or project; for example,
    *Can you tell me what the life cycle states of a thread in Java are?* The expected
    answer is, *At any moment, a Java thread can be in one of the following states:*
    **NEW**, **RUNNABLE,** **RUNNING**, **BLOCKED**, **SLEEP**, **WAITING**/**TIMED/WAITING**,
    *or* **TERMINATED**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一类问题旨在简单检查你的技术知识。这些问题不是在场景或项目的背景下提出的；例如，*你能告诉我Java中线程的生命周期状态是什么吗？* 期望的答案是，*在任何时刻，Java线程可以处于以下状态之一：*
    **NEW**, **RUNNABLE,** **RUNNING**, **BLOCKED**, **SLEEP**, **WAITING**/**TIMED/WAITING**,
    *或* **TERMINATED**。
- en: 'Typically, answering technical questions is a three-step approach, as shown
    in the following diagram. First, you should understand the question. If you have
    any doubts, then ask for clarification. Second, you must know that the interviewer
    expects you to identify several keywords or key points in your answer. This is
    like a checklist. This means that you must know about the key things that should
    be highlighted in the answer. Third, you just need to wrap the keywords/key points
    in a logical and meaningful answer:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，回答技术问题是一个三步方法，如下图所示。首先，你应该理解问题。如果有任何疑问，就要求澄清。其次，你必须知道面试官希望你在回答中识别出几个关键词或要点。这就像一个清单。这意味着你必须了解应该在答案中突出的关键内容。第三，你只需要用逻辑和有意义的方式包装关键词/要点：
- en: '![Figure 5.1 – The process of tackling a technical quiz'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 - 处理技术测验的过程'
- en: '](img/Figure_5.1_B15403.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.1_B15403.jpg)'
- en: Figure 5.1 – The process of tackling a technical quiz
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 - 处理技术测验的过程
- en: You will see plenty of examples from [*Chapter 6*](B15403_06_Final_JM_ePub.xhtml#_idTextAnchor080)*,
    Object-Oriented Programming*, onward.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在[*第6章*](B15403_06_Final_JM_ePub.xhtml#_idTextAnchor080)*，面向对象编程*中看到大量例子。
- en: As a rule of thumb, your answers should be technical, articulated in a concise
    but comprehensive way, and communicated with confidence in yourself. A common
    mistake of shy people is to provide an answer that sounds like a question. Their
    tone is like they’re asking for confirmation for every word. When your answer
    sounds like a question, the interviewer will probably tell you to just give the
    answer without asking him.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，你的答案应该是技术性的，简洁但全面，并且自信地表达出来。害羞的人常见的错误是提供一个听起来像问题的答案。他们的语气就像他们对每个词都在询问确认。当你的答案听起来像一个问题时，面试官可能会告诉你直接给出答案而不要问他。
- en: Important note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When you can only partially answer a question, don’t rush to answer or say you
    don’t know. Try to ask the interviewer for more details and/or a 20-second thinking
    time period. Sometimes, this will help you provide an incomplete but decent answer.
    For example, the interviewer may ask you, *What is the main difference between
    checked and unchecked exceptions in Java*? If you don’t know the difference, then
    you can give an answer such as, *The checked exceptions are subclasses of Exception,
    while the unchecked exceptions are subclasses of RuntimeException*. You didn’t
    actually answer the question, but it is better than saying, *I don’t know*! Alternatively,
    you could formulate a question such as, *Are you referring to the exceptions that
    we are forced to catch?* By doing this, you may get more details from the interviewer.
    Pay attention and don’t ask it like, *Are you referring to the exceptions that
    we are forced to catch and to the exceptions that we are not forced to catch?*
    You will probably receive a short answer, such as *Yes*. This doesn’t help you!On
    the other hand, if you really have no clue about the answer/solution, then it
    is better to say, *I don’t know*. This is not necessarily a strike against you,
    while trying to baffle the interviewer with too much gobbledygook will definitely
    be against you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只能部分回答一个问题时，不要急于回答或者说你不知道。尝试向面试官询问更多细节和/或20秒的思考时间。有时，这会帮助你提供一个不完整但还不错的答案。例如，面试官可能会问你，“Java中检查异常和未检查异常的主要区别是什么？”如果你不知道区别，那么你可以给出一个答案，比如，“检查异常是Exception的子类，而未检查异常是RuntimeException的子类”。你实际上没有回答问题，但这比说“我不知道”要好！或者，你可以提出一个问题，比如，“您是指我们被迫捕获的异常吗？”通过这样做，你可能会从面试官那里得到更多细节。注意不要问得像，“您是指我们被迫捕获的异常和我们不被迫捕获的异常吗？”你可能会得到一个简短的答复，比如“是”。这对你没有帮助！另一方面，如果你真的不知道答案/解决方案，那么最好说“我不知道”。这不一定会对你不利，而试图用太多的废话来迷惑面试官肯定会对你不利。
- en: There are companies that prefer an on-site multiple choice quiz. In this case,
    there is no human assistance, and you’ll have to finish the quiz in a fixed period
    of time (for example, in 30 minutes). It is important to try to answer as many
    questions as possible. If you don’t know a question, then move on to the next
    one. The clock is ticking! At the end (the last 2-3 minutes), you can come back
    and try to provide an answer to those questions that you passed on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有些公司更喜欢进行现场的多项选择测验。在这种情况下，没有人的帮助，你必须在固定的时间内完成测验（例如，30分钟）。重要的是要尽量回答尽可能多的问题。如果你不知道一个问题，那就继续下一个。时间在流逝！在最后（最后的2-3分钟），你可以回过头来尝试回答那些你放弃的问题。
- en: Nevertheless, there are platforms that don’t allow you to navigate backward
    and forward between the questions. In such a case, when you don’t know the answer
    to a question, you are forced to risk it and try to guess an answer. Spending
    a lot of time answering a single question will result in a poor score at the end.
    Ideally, you should try to spend the same amount of time on each question. For
    example, if you have 20 questions to answer in 30 minutes, then you can allocate
    30/20 = 1.5 minutes to each question.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些平台不允许你在问题之间来回跳转。在这种情况下，当你不知道问题的答案时，你被迫冒险猜测答案。花费大量时间回答一个问题最终会导致得分不佳。理想情况下，你应该尽量在每个问题上花相同的时间。例如，如果你有20个问题要在30分钟内回答，那么你可以为每个问题分配30/20
    = 1.5分钟。
- en: One of the best techniques to approaching a technical quiz (no matter what type
    of quiz) is to perform several *mock* interviews. Grab a friend and ask him to
    act as the interviewer. Put the questions in a bowl and ask him to randomly choose
    them one by one. Answer the questions and act exactly as if you were in front
    of the real interviewer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接近技术测验（无论是什么类型的测验）的最佳技巧之一是进行几次“模拟”面试。找个朋友，让他扮演面试官的角色。把问题放在一个碗里，让他随机挑选一个一个来回答。回答问题，表现得就像你真的在面对真正的面试官一样。
- en: Coding challenge
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码挑战
- en: The coding challenge is the climax of any technical interview. This is the moment
    where you can show all your coding skills. It’s time to demonstrate that you can
    do this job. Having working and clean code can help you make a great impression.
    A great impression may fill in the gaps that you left open during any other stage
    of the interview.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 编码挑战是任何技术面试的高潮。这是你展示所有编码技能的时刻。是时候证明你能胜任这份工作了。有工作和整洁的代码可以帮助你留下良好的印象。一个良好的印象可能弥补你在面试的其他阶段留下的空白。
- en: The coding challenge is a double-edged sword that may radically change the final
    result of the interview. One edge can cut you off from the scheme, while the other
    edge can bring you an offer in spite of other shortcomings.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编码挑战是一把双刃剑，可能会从计划中将你剔除，另一方面可能会让你尽管有其他缺点，但还是得到一个工作机会。
- en: However, the problems specific to these coding challenges are really hard for
    a variety of reasons. These will be covered in the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些编码挑战所特有的问题因为各种原因而非常困难。这些将在下一节中介绍。
- en: The problems specific to coding challenges are meant to be difficult
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战所特有的问题意在困难
- en: Have you ever seen a problem specific to the coding challenge stage and found
    it weird, silly, or maybe pointless and nothing to do with real problems? If so,
    then you’ve seen an excellent problem specific to the coding challenge stage.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经见过一个特定于编码挑战阶段的问题，觉得奇怪、愚蠢，或者可能毫无意义，与真正的问题毫无关联？如果是的话，那么你见到了一个特别好的编码挑战阶段的问题。
- en: 'To better understand how to prepare for such problems, it is important to know
    their characteristics and requirements. So, let’s have a look at them:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解如何为这些问题做准备，了解它们的特点和要求是很重要的。所以，让我们来看一下它们：
- en: '**They are not real-world problems**: Commonly, real-world problems need a
    lot of time to be coded, so they are not a good candidate for coding challenges.
    The interviewer will ask you to solve problems that can be explained and coded
    in a reasonable amount of time, and such problems are usually not real-world problems.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它们不是现实世界的问题**：通常，现实世界的问题需要大量时间来编码，因此它们不适合编码挑战。面试官会要求您解决可以在合理时间内解释和编码的问题，而这些问题通常不是现实世界的问题。'
- en: '**They can be quite silly**: It is not uncommon to see problems that are quite
    silly and look like they have been invented just to complicate your life. They
    don’t seem to be useful for something or serve a goal. This is normal since, most
    of the time, they are not real-world problems.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它们可能相当愚蠢**：看到相当愚蠢的问题并不罕见，看起来就像它们是为了使您的生活变得更加复杂而创造的。它们似乎对某事没有用或没有目标。这是正常的，因为它们大多数时候不是现实世界的问题。'
- en: '**They are fairly complex**: Even if they can be solved pretty quickly, they
    are not easy! Most probably, you’ll be asked to code a method or a class, but
    this doesn’t mean that it will be easy. Commonly, they require all kinds of tricks,
    they are brain-teasing, and/or they exploit less well-known features of the programming
    languages (for example, working with bits).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它们相当复杂**：即使它们可以很快解决，它们也不容易！很可能，您将被要求编写一个方法或一个类，但这并不意味着它会很容易。通常，它们需要各种技巧，它们是令人费解的，和/或它们利用编程语言的不太知名的特性（例如，使用位操作）。'
- en: '**The solution is not obvious**: Since they are fairly complex, the solutions
    to these problems are not obvious. Don’t expect to find a solution immediately!
    Almost nobody does! These questions are specially designed to see how you handle
    a situation where you cannot immediately see the solution. This is why you may
    have couple of hours to solve it (most commonly, between 1 and 3 hours).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案并不明显**：由于它们相当复杂，这些问题的解决方案并不明显。不要指望立即找到解决方案！几乎没有人能做到！这些问题是特别设计的，以查看您如何处理无法立即看到解决方案的情况。这就是为什么您可能需要几个小时来解决它（通常是1到3个小时之间）。'
- en: '**Prohibit the common solving paths**: Most of the time, such problems have
    clear clauses that prohibit the usage of common solving paths. For example, you
    may receive a problem that sounds like this: *Write a method that extracts a substring
    of a string between the given positions without using a built-in method such as
    String#substring().* There are countless examples like this one. Simply choose
    one or more built-in Java methods (for example, utility methods) that can be implemented
    in a relatively short amount of time and formulate it; for example, *Write a method
    that does X without using a built-in solution such as Y*. Exploring API source
    code, participating in open source projects, and practicing such problems is quite
    useful for solving such problems.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁止常见的解决路径**：大多数时候，这样的问题有明确的条款，禁止使用常见的解决路径。例如，您可能会收到一个听起来像这样的问题：*编写一个方法，它可以在给定位置之间提取字符串的子字符串，而不使用String#substring()这样的内置方法。*就像这个例子一样，有无数的例子。只需选择一个或多个内置的Java方法（例如，实用方法），可以在相对短的时间内实现，并加以阐述；例如，*编写一个方法，它可以做X而不使用Y这样的内置解决方案*。探索API源代码，参与开源项目，并练习这样的问题对于解决这样的问题非常有用。'
- en: '**They are meant to place you in an exclusive range of candidates that receive
    offers**: The difficulty of these coding challenges is calibrated to place you
    in an exclusive percentage of candidates. Some companies are making offers to
    less than 5% of candidates. If a certain problem can be easily solved by most
    candidates, then it will be replaced.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**他们的目的是将您置于一组接受录用的候选人中**：这些编码挑战的难度被校准，以使您成为一组独特百分比的候选人。一些公司只向不到5%的候选人提供工作机会。如果大多数候选人可以轻松解决某个特定问题，那么它将被替换。'
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The problems specific to coding challenges are meant to be difficult and are
    usually asked in ascending order of difficulty. Most probably, to pass these coding
    challenges, your experience and coding skills will not be enough. So, don’t get
    frustrated if, in spite of your knowledge, you cannot see a solution right away.
    Many such problems are meant to test your ability to find solutions to uncommon
    scenarios and test your coding skills. They might have ridiculous clauses and/or
    obscure solutions that exploit uncommon features of a programming language. They
    might contain silly requirements and/or dummy cases. Focus only on how to solve
    them and always do it by the rules.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 编码挑战特有的问题旨在具有挑战性，并通常按难度递增的顺序提出。很可能，要通过这些编码挑战，您的经验和编码技能是不够的。因此，如果尽管您的知识，您无法立即看到解决方案，不要感到沮丧。许多这样的问题旨在测试您解决不寻常情况的能力和测试您的编码技能。它们可能具有荒谬的条款和/或模糊的解决方案，利用编程语言的不常见特性。它们可能包含愚蠢的要求和/或虚假案例。只专注于如何解决它们，并始终遵守规则。
- en: A single coding challenge session is, most of the time, enough for the interviewers.
    Nevertheless, there are cases where you’ll have to pass two or even three such
    challenges. The key is to practice as much as possible. The next section shows
    you how to handle, in general, a coding challenge problem.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一次编码挑战会足够面试官。然而，也有一些情况下，您可能需要通过两次甚至三次这样的挑战。关键是尽可能多地练习。下一节将向您展示如何处理一般的编码挑战问题。
- en: Tackling a coding challenge problem
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决编码挑战问题
- en: 'Before we discuss the process of tackling a coding challenge problem, let’s
    quickly set up a possible environment for a coding challenge. Mainly, there are
    two coordinates that define this environment: the presence of the interviewer
    during the coding challenge and the paper-pen versus computer approach.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论解决编码挑战问题的过程之前，让我们快速为编码挑战设置一个可能的环境。主要有两个坐标定义了这个环境：面试官在编码挑战期间的存在和纸笔对电脑的方法。
- en: The interviewer’s presence during the coding challenge
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面试官在编码挑战过程中的存在
- en: Most commonly, the interviewer is present (by phone screen or in-person) during
    the coding challenge. They will evaluate your final result (code), but they are
    not there just for this reason. Measuring just your coding ability doesn’t require
    their presence and is usually encountered in programming contests. An interview
    coding challenge is not a programming contest. The interviewer wants to see you
    during the entire process in order to analyze your behavior and communication
    skills. They want to see whether you have a plan to solve the problem, whether
    you act in an organized or chaotic way, whether you write ugly code, whether you
    are willing to communicate your actions, or whether you are introverted. Moreover,
    they want to assist and guide you. Of course, you need to strive for no guidance
    or as little as possible, but a proper reaction to guidance is also appreciated.
    However, striving for no guidance doesn’t mean that you should not interact with
    the interviewer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的情况是，在编码挑战期间面试官会在场（通过电话或者面对面）。他们会评估你的最终结果（代码），但他们不仅仅是为了这个原因在场。仅仅衡量你的编码能力并不需要他们的存在，通常在编程比赛中会遇到。面试编码挑战不是一个编程比赛。面试官想要在整个过程中看到你，以分析你的行为和沟通能力。他们想要看到你是否有解决问题的计划，你是以有组织还是混乱的方式行动，你是否写了丑陋的代码，你是否愿意沟通你的行动，或者你是否内向。此外，他们想要协助和指导你。当然，你需要努力不需要指导或尽可能少的指导，但对指导的适当反应也是受欢迎的。然而，努力不需要指导并不意味着你不应该与面试官互动。
- en: Keep talking!
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 继续交流！
- en: 'Interaction with the interviewer is an important factor. The following list
    explains several aspects of the interactivity plan:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与面试官的互动是一个重要因素。以下列表解释了互动计划的几个方面：
- en: '**Explain your solution before coding**: Before you start coding, it is important
    to squeeze some valuable information from the interviewer. Describe to them how
    you want to solve the problem, what steps you want to follow, and what you’ll
    use. For example, you could say, *I think that a HashSet is the proper choice
    here because the order of insertion is not relevant and we don’t need duplicate
    values*. You’ll get a thumbs up or some guidance or advice that will help you
    obtain the expected results.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在编码之前解释你的解决方案**：在开始编码之前，从面试官那里挤出一些有价值的信息是很重要的。向他们描述你想要如何解决问题，你要遵循什么步骤，以及你会使用什么。例如，你可以说，“我认为在这里使用HashSet是合适的选择，因为插入的顺序不重要，而且我们不需要重复的值”。你会得到一个赞成的手势或一些建议，这将帮助你获得预期的结果。'
- en: '**Explain what you are doing while coding**: While you’re coding, explain it
    to the interviewer. For example, you could say, *First, I will create an instance
    of ArrayList*, or, *Here, I load the file from the local folder into memory*.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在编码时解释你在做什么**：在编码时，向面试官解释。例如，你可以说，*首先，我会创建一个ArrayList的实例*，或者，*在这里，我将文件从本地文件夹加载到内存中*。'
- en: '**Ask the proper questions**: As long as you know and respect the limits, you
    can ask questions that can save you time. For example, it is OK to ask, *I can’t
    remember – what is the default MySQL port, 3308 or 3306?* However, don’t exaggerate
    with these questions!'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提出适当的问题**：只要你知道并尊重限制，你可以提出可以节省时间的问题。例如，问，“我记不得了 - 默认的MySQL端口是3308还是3306？”然而，不要过分夸大这些问题！'
- en: '**Mention the aspects that matter**: If you know additional information related
    to the problem, then share it with the interviewer. This is a good chance to expose
    your programming knowledge, your thoughts, and your ideas around the problem.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提及重要方面**：如果你知道与问题相关的其他信息，那么与面试官分享。这是一个展示你的编程知识、思想和围绕问题的想法的好机会。'
- en: If you encounter a problem that you already know (maybe you’ve solved it while
    practicing such problems), then don’t blurt 'it' out. This will not impress the
    interviewer, and you will probably get another coding challenge. It is better
    to follow the same process that you’d follow for any other problem. Before we
    cover this process, let’s tackle one more aspect of the interview environment.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到一个你已经知道的问题（也许你在练习中解决过这样的问题），那么不要马上说出来。这不会给面试官留下好印象，你可能会得到另一个编码挑战。最好遵循你对任何其他问题的处理过程。在我们讨论这个过程之前，让我们解决面试环境的另一个方面。
- en: Paper-pen versus computer approach
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 纸笔与电脑的方法
- en: If the coding challenge takes place via a phone screen, then the interviewer
    will ask you to share your screen and code in your favorite **Integrated Development
    Environment** (**IDE**). This way, the interviewer can see how you take advantage
    of IDE help as well (for example, they can see if you use the IDE to generate
    getters and setters or if you write them by hand).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编码挑战是通过电话屏幕进行的，那么面试官会要求你分享屏幕并在你喜欢的**集成开发环境**（**IDE**）中编码。这样，面试官可以看到你如何利用IDE的帮助（例如，他们可以看到你是否使用IDE生成getter和setter，还是手动编写它们）。
- en: Important note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Avoid running the application after each line of code. Instead, run the application
    after each logical block of code. Make the corrections and run it again. Take
    advantage of the IDE debugging tool.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在每行代码后运行应用程序。相反，在每个逻辑代码块后运行应用程序。进行更正并再次运行。利用IDE调试工具。
- en: If you meet the interviewer in person, then you could be asked to use paper
    or a whiteboard for coding. This time, coding can be in Java or even pseudocode.
    Since your code cannot be compiled and executed, you have to test it manually.
    It is important to show that your code works by taking an example and passing
    it through your code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你与面试官面对面，那么可能会被要求使用纸张或白板进行编码。这时，编码可以使用Java甚至伪代码。由于你的代码无法编译和执行，你必须手动测试它。通过拿一个例子并将其通过你的代码来展示你的代码是有效的是很重要的。
- en: Important note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Avoid excessive write-delete code cycles in a chaotic approach. Think twice
    and write once! Otherwise, you will give the interviewer a headache.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在混乱的方法中避免过多的写入-删除代码循环。三思而后行！否则，你会让面试官头疼。
- en: Now, let’s take a look at the general steps that are meant to provide a methodological
    and logical approach to solving a problem.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下旨在提供解决问题的方法论和逻辑方法的一般步骤。
- en: The process of tackling a coding challenge problem
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理编码挑战问题的过程
- en: 'The process of tackling a coding challenge problem can be done in a suite of
    steps that should be applied sequentially. The following diagram shows these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 处理编码挑战问题的过程可以通过一系列顺序应用的步骤来完成。以下图表显示了这些步骤：
- en: '![Figure 5.2 – The process of tackling a coding challenge problem'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 - 处理编码挑战问题的过程'
- en: '](img/Figure_5.2_B15403.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.2_B15403.jpg)'
- en: Figure 5.2 – The process of tackling a coding challenge problem
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 - 处理编码挑战问题的过程
- en: Now, let’s detail each of these steps. While applying this problem-solving process,
    don’t forget the interactivity component.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细说明每个步骤。在应用这个解决问题的过程中，不要忘记交互组件。
- en: Understand the problem
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 理解问题
- en: It is very important to understand the problem. Don’t start solving the problem
    based on assumptions or a partial understanding of the problem. Read the problem
    at least twice! Don’t rely on a single read since, in most cases, these problems
    contain hidden and obscure requirements or details that are easy to miss.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 理解问题非常重要。不要基于假设或对问题的部分理解开始解决问题。至少要读两遍问题！不要依赖于一次阅读，因为在大多数情况下，这些问题包含隐藏和模糊的要求或细节，很容易被忽略。
- en: Don’t hesitate to ask your interviewer questions about the problem. There are
    cases when details are intentionally forgotten to test your ability to discover
    the underlying problem.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不要犹豫向面试官询问关于问题的问题。有些情况下，故意忽略细节，以测试你发现潜在问题的能力。
- en: Important note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Only if you understand the problem will you have a chance of solving it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 只有你理解了问题，你才有解决它的机会。
- en: Next, it is time to build an example. If you manage to build an example, then
    this is a clear signal that you have understood the problem.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，是时候建立一个例子了。如果你能建立一个例子，那么这清楚地表明你已经理解了问题。
- en: Build an example
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 建立一个例子
- en: As they say, *A picture’s worth a thousand words*, but we can say the same thing
    about an example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 据说，“一幅图值千言”，但我们也可以用同样的方式来描述一个例子。
- en: Sketching the problem and building an example will clarify any remaining misunderstandings.
    It will give you the chance to discover the problem in detail via a methodological
    approach (step by step). Once you have a working example, you should start seeing
    the overall solution. This is also useful for testing your final code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 勾画问题并建立一个例子将澄清任何剩下的误解。这将给你一个通过逐步方法详细了解问题的机会。一旦你有一个可行的例子，你应该开始看到整体解决方案。这对于测试你的最终代码也是有用的。
- en: Important note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A sketch and an example are useful for solidifying your understanding of the
    problem.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 草图和例子对于巩固你对问题的理解是有用的。
- en: Now, it is time to think about the overall solution and decide on the algorithm(s)
    to use.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候考虑整体解决方案，并决定要使用的算法了。
- en: Deciding on the algorithm(s) to use and explaining them
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 决定要使用的算法并解释它们
- en: At this point, you have understood the problem and even built an example. Now,
    it is time to shape an overall solution and split it into steps and algorithms.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你已经理解了问题，甚至建立了一个例子。现在，是时候形成一个整体解决方案，并将其分解为步骤和算法了。
- en: This is a time-consuming process. At this point, it is important to apply the
    *Communicate What You Think* approach. If you don’t say anything, then the interviewer
    doesn’t know if you are clueless or if you are in a brainstorm. For example, you
    could say, *I think I can use a List for storing the emails, ... hmmm ... no,
    this is not OK because a List accepts duplicates.* While you are talking (even
    if it looks like you are talking to yourself), the interviewer can judge the correctness
    of your reasoning, can see your knowledge level, and can provide you with some
    tips. The interviewer may reply with something like, *Yes, that is a good point*,
    *but nevertheless, do not forget that you need to maintain the order of insertion*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个耗时的过程。在这一点上，重要的是应用“表达你的想法”的方法。如果你什么都不说，面试官就不知道你是一无所知还是在头脑风暴。例如，你可以说，“我觉得我可以用一个列表来存储邮件，...嗯...不，这不行，因为列表接受重复项。”当你在说话时（即使看起来像是在自言自语），面试官可以判断你推理的正确性，看到你的知识水平，并给你一些建议。面试官可能会回答说，“是的，这是一个很好的观点”，“但是不要忘记你需要保持插入的顺序”。
- en: 'Most of the time, the problem requires some form of data (strings, numbers,
    bits, objects, and so on) manipulation, such as sorting, ordering, filtering,
    reversing, flattening, searching, computing, and so on. Where there is data, there
    are data structures as well (arrays, lists, sets, maps, trees, and so on). The
    trick is to find the proper matches between the data manipulations that you need
    and the data structures. Usually, a proper match means the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，问题需要对数据（字符串、数字、位、对象等）进行某种形式的操作，比如排序、排序、过滤、反转、展平、搜索、计算等。有数据的地方，也有数据结构（数组、列表、集合、映射、树等）。关键是找到你需要的数据操作和数据结构之间的适当匹配。通常，适当的匹配意味着以下内容：
- en: You can easily apply certain manipulations to the data structure.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以轻松地对数据结构应用某些操作。
- en: You can obtain good performance (Big O – see [*Chapter 7*](B15403_07_Final_JM_ePub.xhtml#_idTextAnchor135)*,
    Big O Analysis of Algorithms*).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以获得良好的性能（大O - 见[*第7章*]（B15403_07_Final_JM_ePub.xhtml#_idTextAnchor135）*，算法的大O分析*）。
- en: You can maintain harmony between the used data structure(s). This means that
    you don’t need heavy or complex algorithms, nor do you need to perform conversion
    to move/exploit the data between data structures.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在使用的数据结构之间保持和谐。这意味着你不需要复杂或繁重的算法，也不需要进行数据结构之间的转换或利用数据。
- en: These are the big pieces of the puzzle. Managing to identify the proper matches
    is half of the job. The other half is to bring these pieces together to shape
    the solution. In other words, you need to bring logic into the equation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是拼图的大块。成功识别正确的匹配是工作的一半。另一半是将这些块组合在一起形成解决方案。换句话说，你需要在方程中引入逻辑。
- en: It is very tempting to start coding immediately after you read the problem or
    after you’ve understood it and shaped the big picture of the solution in your
    mind. *Don’t do that!* Often, this will lead to a chain of failures that will
    make you lose your temper. Very soon, all your ideas will be surrounded by a dense
    mist of distrust and you will start to code hastily, even with ridiculous mistakes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读问题或理解问题并在脑海中构思解决方案的大局之后，立即开始编码是非常诱人的。*不要这样做！*通常，这会导致一连串的失败，让你失去耐心。很快，你所有的想法都会被浓雾所包围，你会开始匆忙编码，甚至出现荒谬的错误。
- en: Important note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Take your time and think about the solution deeply before starting to code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，花时间深思熟虑解决方案。
- en: Now, it’s time to start coding your solution and impress the interviewer with
    your coding skills.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候开始编写你的解决方案，并用你的编码技能给面试官留下深刻印象了。
- en: Coding the skeleton
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写骨架
- en: Start coding the solution with a skeleton. More precisely, define your classes,
    methods, and interfaces without implementation (behavior/actions). You will fill
    them up with code in the next step. This way, you’re showing the interviewer that
    your coding stage follows a clear road. Don’t jump into the code too hastily?
    Moreover, respect the fundamental principles of programming, such as **Single
    responsibility, Open–closed, Liskov substitution, Interface segregation, Dependency
    inversion** (**SOLID**) and **Don’t Repeat Yourself** (**DRY**). Most probably,
    the interviewer will watch out for these principles.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 用一个骨架开始编写解决方案。更准确地说，定义你的类、方法和接口，但不实现（行为/动作）。你将在下一步中填充它们。这样，你向面试官展示你的编码阶段遵循了一条清晰的道路。不要过于匆忙地跳入代码中。此外，尊重编程的基本原则，如**单一职责、开闭原则、里氏替换原则、接口隔离原则、依赖反转**（**SOLID**）和**不要重复自己**（**DRY**）。面试官很可能会关注这些原则。
- en: Important note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Coding the skeleton of your solution helps the interviewer follow you easily
    and better understand your reasoning.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 编写解决方案的骨架有助于面试官更容易地跟随你，并更好地理解你的推理。
- en: At this point, you have the attention of the interviewer. Now, it’s time to
    bring your skeleton to life.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经吸引了面试官的注意。现在，是时候让你的骨架活起来了。
- en: Coding the solution
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写解决方案
- en: Now, it’s time to code the solution. While you’re doing so, explain the main
    code lines that you write to the interviewer. Pay attention and respect the well-known
    Java coding style (for example, follow the *Google Java Style Guide* at google.github.io/styleguide/javaguide.html).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候编写解决方案了。在这个过程中，向面试官解释你编写的主要代码行。注意并遵守著名的Java编码风格（例如，遵循google.github.io/styleguide/javaguide.html上的*Google
    Java Style Guide*）。
- en: Important note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Following a well-known Java coding style and communicating your actions to the
    interviewer will be a big plus for the final result.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循著名的Java编码风格并向面试官解释你的行动将对最终结果有很大帮助。
- en: Once you’ve done the core implementation of your solution, it is time to increase
    the robustness of your code. So, as a final touch, don’t ignore exceptions handling
    and validations (for example, validating the arguments of methods). Also, ensure
    that you’ve covered all the requirements of the problem and that you’ve employed
    the right data types. Finally, it is time to keep your fingers crossed that your
    code will pass the testing step.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了解决方案的核心实现，就是增加代码的健壮性的时候了。因此，作为最后的一步，不要忽视异常处理和验证（例如，验证方法的参数）。同时，确保你满足了问题的所有要求，并且使用了正确的数据类型。最后，是时候祈祷你的代码能够通过测试了。
- en: Testing the solution is the final step of this process.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 测试解决方案是这个过程的最后一步。
- en: Testing the solution
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试解决方案
- en: In the second step of this process, you built an example. Now, it is time to
    show the interviewer that your code works by passing the example through it. *It
    is very important to demonstrate that your code works at least for this example*.
    It may go to the first key or run successfully after you’ve repaired some minor
    bugs, but in the end, it is just important that it works.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程的第二步中，你建立了一个例子。现在，是时候向面试官展示你的代码通过了例子的测试。*非常重要的是要证明你的代码至少对这个例子有效*。它可能会出现一些小错误，但最终，重要的是它能够运行。
- en: Don’t relax! You have won the current battle, but not the war! Often, the interviewer
    will want to see your code working for corner cases or special cases as well.
    Usually, such special cases involve dummy values, boundaries values, improper
    inputs, actions that force exceptions, and so on. If your code is not robust and
    it fails these attempts, then the interviewer will think that this is exactly
    how you’ll code the production applications as well. On the other hand, if your
    code works, then the interviewer will be totally impressed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 不要放松！你赢得了当前的战斗，但并没有赢得战争！通常，面试官还想看到你的代码对边界情况或特殊情况的处理。通常，这些特殊情况涉及虚拟值、边界值、不当输入、强制异常的操作等。如果你的代码不够健壮，无法通过这些尝试，那么面试官会认为你在生产应用中也会这样编码。另一方面，如果你的代码有效，那么面试官会完全印象深刻。
- en: Important note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Code that works should put a smile on your interviewer’s face. At the very least,
    you will feel that they are a little bit more friendly toward you and relaxed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的代码应该让面试官满意。至少，你会感到他们对你更友好和放松一些。
- en: If you made a good impression, then the interviewer may want to ask you some
    extra questions. You should expect to be asked about the code’s performance and
    alternative solutions. Of course, you can provide such information without being
    asked. The interviewer will be pleased to see that you can tackle a problem in
    multiple ways and that you understand the pros and cons of each solution and decision.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你给面试官留下了良好的印象，那么面试官可能会想要问你一些额外的问题。你应该期待被问及代码的性能和替代解决方案。当然，你可以在没有被问及的情况下提供这样的信息。面试官会很高兴看到你能够以多种方式解决问题，并且你理解每种解决方案和决策的利弊。
- en: Getting stuck makes you freeze
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卡住会让你僵住
- en: First of all, it is normal to get stuck. Don’t panic! Don’t get frustrated!
    Don’t quit!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，卡住是正常的。不要惊慌！不要沮丧！不要放弃！
- en: 'If you get stuck, then others taking the interview will probably get stuck
    as well. The main problem is how to handle such a blockage, not the blockage itself.
    You have to stay calm and try to do the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你卡住了，那么面试官可能也会卡住。主要问题是如何处理这种障碍，而不是障碍本身。你必须保持冷静，并尝试做以下事情：
- en: '**Get back to your example**: Sometimes, it is helpful to detail your example,
    or to take a look at one more example. Having two examples can help you shape
    the general case in your mind and understand the pillars of the problem.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回到你的示例**：有时，详细说明你的示例或查看另一个示例会有所帮助。有两个示例可以帮助你在脑海中塑造出一般情况，并理解问题的支柱。'
- en: '**Isolate the problem in the example**: Every example has a suite of steps.
    Identify the step where you got stuck and focus on it as a separate problem. Sometimes,
    pulling out the issue from its context allows you to understand it better and
    solve it.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在示例中孤立问题：每个示例都有一系列步骤。确定你卡住的步骤，并将其作为一个单独的问题专注解决。有时，将问题从上下文中分离出来可以让你更好地理解并解决它。
- en: '**Try a different approach**: Sometimes, the solution is to tackle the issue
    from different angles. A different perspective can give you a new view. Maybe
    another data structure, a hidden feature of Java, a brute-force approach, and
    so on can help. An ugly solution is better than no solution!'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尝试不同的方法**：有时，解决问题的方法是从不同的角度来解决问题。不同的视角可以给你一个新的视野。也许另一个数据结构，Java的隐藏功能，蛮力方法等等可以帮助你。一个丑陋的解决方案总比没有解决方案好！'
- en: '**Mock or postpone the issue**: Struggling for a long time to solve a step
    may lead to the unpleasant situation of you not being able to finish the problem
    on time. Sometimes, it is better to mock or postpone the step that causes you
    trouble and continue with the other steps. It is possible that, in the end, when
    you come back to this step, you will have a much clearer picture of it and will
    know how to code it.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟或推迟问题**：长时间挣扎解决一个步骤可能会导致你无法及时完成问题的不愉快情况。有时，最好是模拟或推迟导致你困扰的步骤，并继续进行其他步骤。可能最后当你回到这一步时，你会对它有更清晰的认识，并知道如何编码。'
- en: '**Ask for guidance**: This should be your last resort, but in a crisis, you
    must apply desperate solutions. You can ask something such as, *I am confused
    about this aspect because…* (and explain; try to justify your confusion). *Can
    you please give me a tip about what I am missing here?*'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**寻求指导**：这应该是你的最后手段，但在危机中，你必须采取拼命的解决方案。你可以询问类似于“我对这个方面感到困惑，因为…”（并解释；尝试证明你的困惑）。“你能否给我一些关于我在这里错过了什么的提示？”'
- en: The interviewer is aware of the difficulty of the step(s), so they will not
    be surprised that you got stuck. They will appreciate your perseverance, analytical
    capabilities, and calmness in trying to find a solution, even if you don’t find
    it. The interviewer knows that you’ll encounter similar situations in your daily
    job and that the most important thing in such scenarios is to stay calm and search
    for solutions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 面试官意识到这一步（步骤）的困难，所以他们不会对你卡住感到惊讶。他们会欣赏你的毅力、分析能力和在寻找解决方案时的冷静，即使你找不到解决方案。面试官知道你在日常工作中会遇到类似的情况，而在这种情况下最重要的是保持冷静并寻找解决方案。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we talked about the process of tackling a coding challenge
    problem. Besides the steps we enumerated earlier – understand the problem, build
    an example, decide and explain the algorithm(s), code the skeleton, and code and
    test the solution – there is one more step that will become the objective of the
    chapters that follow: practice a lot of problems! In the next chapter, we will
    start with the fundamental concepts of programming.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们谈到了解决编程挑战问题的过程。除了我们之前列举的步骤 - 理解问题，构建示例，决定和解释算法，编写框架代码，编写和测试解决方案 - 还有一个步骤将成为接下来章节的目标：大量练习问题！在下一章中，我们将从编程的基本概念开始。
