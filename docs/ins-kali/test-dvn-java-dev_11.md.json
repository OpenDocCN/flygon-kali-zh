["```java\n    @Test \n    public void whenPlayAndWholeHorizontalLineThenWinner() { \n        ticTacToe.play(1, 1); // X \n        ticTacToe.play(1, 2); // O \n        ticTacToe.play(2, 1); // X \n        ticTacToe.play(2, 2); // O \n        String actual = ticTacToe.play(3, 1); // X \n        assertEquals(\"X is the winner\", actual); \n    } \n```", "```java\n@Test \n\npublic final void whenOneNumberIsUsedThenReturnValueIsThatSameNumber() { \n    Assert.assertEquals(3, StringCalculator.add(\"3\")); \n} \n\n@Test \npublic final void whenTwoNumbersAreUsedThenReturnValueIsTheirSum() { \n    Assert.assertEquals(3+6, StringCalculator.add(\"3,6\")); \n} \n```", "```java\n@Test \npublic final void whenNegativeNumbersAreUsedThenRuntimeExceptionIsThrown() { \n    RuntimeException exception = null; \n    try { \n        StringCalculator.add(\"3,-6,15,-18,46,33\"); \n    } catch (RuntimeException e) { \n        exception = e; \n    } \n    Assert.assertNotNull(\"Exception was not thrown\", exception); \n    Assert.assertEquals(\"Negatives not allowed: [-6, -18]\",  \n            exception.getMessage()); \n} \n```", "```java\n@Test \npublic final void whenAddIsUsedThenItWorks() { \n    Assert.assertEquals(0, StringCalculator.add(\"\")); \n    Assert.assertEquals(3, StringCalculator.add(\"3\")); \n    Assert.assertEquals(3+6, StringCalculator.add(\"3,6\")); \n    Assert.assertEquals(3+6+15+18+46+33, \n            StringCalculator.add(\"3,6,15,18,46,33\")); \n    Assert.assertEquals(3+6+15, StringCalculator.add(\"3,6n15\")); \n    Assert.assertEquals(3+6+15, \n            StringCalculator.add(\"//;n3;6;15\"));    Assert.assertEquals(3+1000+6, \n            StringCalculator.add(\"3,1000,1001,6,1234\")); \n} \n```"]