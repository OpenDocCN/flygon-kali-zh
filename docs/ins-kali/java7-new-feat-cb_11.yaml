- en: Chapter 11. Odds and Ends
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。杂项
- en: 'In this chapter, we will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Handling weeks in Java 7
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java 7中处理周
- en: Using Currency in Java 7
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java 7中使用货币
- en: Using the NumericShaper.Range enumeration to support the display of digits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NumericShaper.Range枚举支持数字显示
- en: JavaBean improvements in Java 7
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 7中的JavaBean改进
- en: Handling locales and the Locale.Builder class in Java 7
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java 7中处理区域设置和Locale.Builder类
- en: Handling null references
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理空引用
- en: Using the new BitSet methods in Java 7
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java 7中使用新的BitSet方法
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter will address many new additions to Java 7 that do not fit into
    the previous chapters. Many of these enhancements have potentially widespread
    application, such as the `java.lang.Objects` class and `java.util.Locale` class
    improvements as discussed in the *Handling locales and the Locale.Builder class
    in Java 7* recipe. Others are more specialized, such as the improvements made
    to the `java.util.BitSet` class, which is covered in the *Using the new BitSet
    methods in Java 7* recipe.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍Java 7中许多不适合前几章的新内容。其中许多增强功能具有潜在的广泛应用，例如在*在Java 7中处理区域设置和Locale.Builder类*中讨论的`java.lang.Objects`类和`java.util.Locale`类的改进。其他更专业，例如对`java.util.BitSet`类的改进，这在*在Java
    7中使用新的BitSet方法*中有所涉及。
- en: There have been a number of improvements in the handling of weeks and currency.
    The calculation of the current week and the number of weeks per year is impacted
    by the locale. In addition, it is now possible to determine the currencies available
    on a platform. These issues are illustrated in the *Handling weeks in Java 7*
    and *Using Currency on Java 7* recipes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理周和货币方面进行了许多改进。当前周数和每年的周数计算受区域设置的影响。此外，现在可以确定平台上可用的货币。这些问题在*在Java 7中处理周*和*在Java
    7中使用货币*中有所说明。
- en: A new enumeration has been added that eases the display of digits in different
    languages. The use of the `java.awt.font.NumericShaper` class for this endeavor
    is discussed in the *Using the NumericShaper.Range enumeration to support the
    display of digits* recipe. Improvements in the support of JavaBeans are discussed
    in the *JavaBean improvements in Java 7* recipe.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个新的枚举，以便在不同语言中显示数字。讨论了使用`java.awt.font.NumericShaper`类来支持此工作的*使用NumericShaper.Range枚举支持数字显示*配方。在JavaBeans的支持方面也有改进，这在*Java
    7中的JavaBean改进*配方中有所讨论。
- en: There are also a number of enhancements, which do not warrant separate recipes.
    The rest of this introduction is devoted to these topics.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多增强功能，不值得单独列为配方。本介绍的其余部分都致力于这些主题。
- en: Unicode 6.0
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unicode 6.0
- en: '**Unicode 6.0** is the newest revision of the Unicode standard. Java 7 supports
    this release with the addition of thousands of more characters and numerous new
    methods. In addition, regular expression pattern matching supports Unicode 6.0
    using either **\u** or **\x** escape sequences.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unicode 6.0**是Unicode标准的最新修订版。Java 7通过添加数千个更多的字符和许多新方法来支持此版本。此外，正则表达式模式匹配使用**\u**或**\x**转义序列支持Unicode
    6.0。'
- en: 'Numerous new character blocks were added to the `Character.UnicodeBlock` class.
    The `Character.UnicodeScript` enumeration was added in Java 7 to represent the
    character scripts defined in the **Unicode Standard Annex #24: Script Names.**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Character.UnicodeBlock`类中添加了许多新的字符块。Java 7中添加了`Character.UnicodeScript`枚举，用于表示**Unicode标准附录＃24：脚本名称**中定义的字符脚本。'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information regarding Unicode Standard Annex #24: Script Names can be
    found at [http://download.oracle.com/javase/7/docs/api/index.html](http://download.oracle.com/javase/7/docs/api/index.html).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Unicode标准附录＃24：脚本名称的更多信息，请访问[http://download.oracle.com/javase/7/docs/api/index.html](http://download.oracle.com/javase/7/docs/api/index.html)。
- en: 'Several methods have been added to the `Character` class in support of the
    Unicode operations. The following illustrates their use with the string 朝鲜圆, which
    is the display name for North Korean Won in Chinese based on the locale, and the
    simplified script as used in mainland China. Add the following code sequence to
    a new application:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Character`类中添加了几种方法，以支持Unicode操作。以下是它们在字符串朝鲜圆上的使用示例，这是基于区域设置的朝鲜圆的中文显示名称，以及在中国大陆使用的简化脚本。将以下代码序列添加到新应用程序中：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When executed, your output should appear as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，您的输出应如下所示：
- en: '**isBmpCodePoint: true**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**isBmpCodePoint: true**'
- en: '**isSurrogate: false**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**isSurrogate: false**'
- en: '**highSurrogate: 55257**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**highSurrogate: 55257**'
- en: '**lowSurrogate: 57117**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**lowSurrogate: 57117**'
- en: '**isAlphabetic: true**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**isAlphabetic: true**'
- en: '**isIdeographic: true**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**isIdeographic: true**'
- en: '**getName: CJK UNIFIED IDEOGRAPHS 671D**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**getName: CJK UNIFIED IDEOGRAPHS 671D**'
- en: Since the character is not a Unicode surrogate code, the `highSurrogate` and
    `lowSurrogate` method results are not useful.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于字符不是Unicode代理代码，因此`highSurrogate`和`lowSurrogate`方法的结果是无用的。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information regarding Unicode 6.0 can be found at [http://www.unicode.org/versions/Unicode6.0.0/](http://www.unicode.org/versions/Unicode6.0.0/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Unicode 6.0的更多信息，请访问[http://www.unicode.org/versions/Unicode6.0.0/](http://www.unicode.org/versions/Unicode6.0.0/)。
- en: Primitive types and the compare method
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始类型和比较方法
- en: 'Java 7 introduced new static methods for comparing primitive data types `Boolean,
    byte, long, short`, and `int`. Each wrapper class now has a `compare` method,
    which takes two instances of the data type as arguments and returns an integer
    representing the result of the comparison. For example, you would have previously
    needed to use the `compareTo` method to compare two Boolean variables, x and y
    as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Java 7引入了用于比较原始数据类型`Boolean, byte, long, short`和`int`的新静态方法。每个包装类现在都有一个`compare`方法，它接受两个数据类型的实例作为参数，并返回表示比较结果的整数。例如，您以前需要使用`compareTo`方法来比较两个布尔变量x和y，如下所示：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can now use the `compare` method as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用`compare`方法如下：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While this is new to Java for the Boolean data type, the `compare` method was
    previously available for `doubles` and `floats`. Additionally in 7, the `parse,
    valueof`, and `decode` methods, used for converting strings to numeric values,
    will accept a leading plus (+) sign with data types `Byte, Short, Integer, Long`,
    and `BigInteger`, in addition to `Float, Double`, and `BigDecimal`, which previously
    accepted the sign.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这对于布尔数据类型是Java的新功能，但`compare`方法以前已经适用于`double`和`float`。此外，在7中，`parse, valueof`和`decode`方法用于将字符串转换为数值，将接受`Byte,
    Short, Integer, Long`和`BigInteger`的前导加号（+）标记，以及`Float, Double`和`BigDecimal`，这些类型以前接受该标记。
- en: Global logger
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局记录器
- en: The `java.util.logging.Logger` class has a new method, `getGlobal`, used for
    retrieving the global logger object named `GLOBAL_LOGGER_NAME`. The static field
    global of the `Logger` class is prone to deadlocks when the `Logger` class is
    used in conjunction with the `LogManager` class, as both classes will wait on
    each other to complete initialization. The `getGlobal` method is the preferred
    way to access the `global logger` object, in order to prevent such deadlock.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util.logging.Logger`类有一个新方法`getGlobal`，用于检索名为`GLOBAL_LOGGER_NAME`的全局记录器对象。`Logger`类的静态字段`global`在`Logger`类与`LogManager`类一起使用时容易发生死锁，因为两个类都会等待对方完成初始化。`getGlobal`方法是访问`全局记录器`对象的首选方式，以防止这种死锁。'
- en: JavaDocs improvements
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaDocs改进
- en: There have been significant improvements in JavaDocs as of Java 7\. From a structural
    standpoint, the generation of the HTML pages is now accomplished by using the
    `HTMLTree` classes to create a document tree, which results in more accurate HTML
    generation and fewer invalid pages.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从结构上讲，JavaDocs在Java 7中有了重大改进。现在，通过使用`HTMLTree`类来创建文档树来生成HTML页面，从而实现了更准确的HTML生成和更少的无效页面。
- en: There have also been external changes to the JavaDocs, some of which were in
    order to comply with the new **Section 508** accessibility guidelines. These are
    developed to ensure screen readers, used for translating web-based text into audible
    output, are able to accurately translate an HTML page. Primarily, this has resulted
    in the addition of more captions and headings on the tables. JavaDocs now also
    use a CSS stylesheet to simplify changes to the appearance of the pages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: JavaDocs的外部变化也有一些，其中一些是为了符合新的**第508节**可访问性指南。这些指南旨在确保屏幕阅读器能够准确地将HTML页面翻译成可听的输出。主要结果是在表格上添加了更多的标题和标题。JavaDocs现在还使用CSS样式表来简化页面外观的更改。
- en: JVM performance enhancements
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JVM性能增强
- en: The performance of the Java HotSpotTM virtual machine has been improved. Most
    of these improvements are not under the control of the developer and are specialized
    in nature. The interested reader will find more details about these enhancements
    at [http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Java HotSpotTM虚拟机的性能已经得到了改进。这些改进大多数不在开发人员的控制范围之内，而且具有专业性质。感兴趣的读者可以在[http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html)找到有关这些增强的更多详细信息。
- en: Handling weeks in Java 7
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Java 7中处理周
- en: Some applications are concerned with the number of weeks in a year and the current
    week of the year. It is common knowledge that there are 52 weeks in a year, but
    52 weeks multiplied by 7 days per week equals 364 days per year, not the actual
    365 days. A **week number** is used to refer to the week of the year. But how
    is that calculated? Java 7 has introduced several methods to support determining
    the week of the year. In this recipe we will examine these methods, and see how
    week-related values are calculated. The **ISO 8601** standard provides methods
    for representing dates and time. The `java.util.GregorianCalendar` class supports
    this standard, except as described in the following section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序关心一年中的周数和本年的当前周数。众所周知，一年有52周，但52周乘以每周7天等于每年364天，而不是实际的365天。**周数**用于指代一年中的周。但是如何计算呢？Java
    7引入了几种方法来支持确定一年中的周。在本教程中，我们将检查这些方法，并看看如何计算与周相关的值。**ISO 8601**标准提供了表示日期和时间的方法。`java.util.GregorianCalendar`类支持此标准，除了以下部分中描述的内容。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use these week-based methods we need to:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些基于周的方法，我们需要：
- en: Create an instance of the `Calendar` class.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Calendar`类的实例。
- en: Use its methods as appropriate.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要使用其方法。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Some implementations of the abstract `java.util.Calendar` class do not support
    week calculations. To determine if the `Calendar` implementation supports week
    calculations, we need to execute the `isWeekDateSupported` method. It returns
    `true` if the support is provided. To return the number of weeks for the current
    calendar year, use the `getWeeksInWeekYear` method. To determine the week for
    the current date, use the `get` method with the `WEEK_OF_YEAR` as its argument.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 某些抽象`java.util.Calendar`类的实现不支持周计算。要确定`Calendar`实现是否支持周计算，我们需要执行`isWeekDateSupported`方法。如果提供支持，则返回`true`。要返回当前日历年的周数，请使用`getWeeksInWeekYear`方法。要确定当前日期的周，请使用`get`方法，并将`WEEK_OF_YEAR`作为其参数。
- en: 'Create a new console application. Add the following code to the `main` method:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。将以下代码添加到`main`方法：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Execute the application. Your output should appear as follows, but the values
    will be dependent upon the date the application was executed:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应如下所示，但值将取决于应用程序执行的日期：
- en: '**Number of weeks in this year: 53**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**今年的周数：53**'
- en: '**Current week number: 48**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**当前周数：48**'
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: An instance of the `Calendar` class was created. This is normally an instance
    of the `GregorianCalendar` class. An `if` statement was controlled by the `isWeekDateSupported`
    method. It returned `true`, which resulted in the execution of the `getWeeksInWeekYear`
    and `get` methods. The `get` method was passed in the field `WEEK_OF_YEAR`, which
    returned the current week number.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`Calendar`类的一个实例。这通常是`GregorianCalendar`类的一个实例。`if`语句由`isWeekDateSupported`方法控制。它返回`true`，导致执行`getWeeksInWeekYear`和`get`方法。`get`方法传入了字段`WEEK_OF_YEAR`，返回当前的周数。
- en: There's more...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The date can be set using the `setWeekDate` method. This method has three arguments
    specifying the year, week, and day. It provides a convenient technique for setting
    the date based on weeks. The following illustrates this process by setting the
    year to 2012, the week to the 16th week of the year, and the day to the third
    day of the week:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`setWeekDate`方法设置日期。此方法有三个参数，指定年、周和日。它提供了一种根据周设置日期的便捷技术。以下是通过将年份设置为2012年，将周设置为该年的第16周，将日期设置为该周的第三天来说明此过程：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When this code is executed, we get the following output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码时，我们得到以下输出：
- en: '**April 17, 2012 12:00:08 PM CDT**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**2012年4月17日下午12:00:08 CDT**'
- en: 'The way that the first and last week of the year is calculated is locale-dependent.
    The `GregorianCalendar` class'' `WEEK_OF_YEAR` field ranges from 1 to 53, where
    53 represents a leap week. The first week of the year is:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一年中第一周和最后一周的计算方式取决于区域设置。`GregorianCalendar`类的`WEEK_OF_YEAR`字段范围从1到53，其中53代表闰周。一年中的第一周是：
- en: The earliest seven day period
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最早的七天周期
- en: Starting on the first day of the week (`getFirstDayOfWeek`)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一周的第一天开始（`getFirstDayOfWeek`）
- en: That contains at least the minimal days in a week (`getMinimalDaysInFirstWeek`)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中至少包含一周的最小天数（`getMinimalDaysInFirstWeek`）
- en: The `getFirstDayOfWeek` and `getMinimalDaysInFirstWeek` methods are locale-dependent.
    For example, the `getFirstDayOfWeek` method returns an integer representing the
    first day of the week for a locale. In the U.S., it is SUNDAY, but in France it
    is MONDAY.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`getFirstDayOfWeek`和`getMinimalDaysInFirstWeek`方法是与区域设置相关的。例如，`getFirstDayOfWeek`方法返回一个整数，表示该区域设置的一周的第一天。在美国，它是星期日，但在法国是星期一。'
- en: 'The first and last week of a week year may have different calendar years. Consider
    the following code sequence. The calendar is set to the first day of the first
    week of 2022:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一年中的第一周和最后一周可能有不同的日历年。考虑以下代码序列。日历设置为2022年第一周的第一天：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When executed, we get the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，我们得到以下输出：
- en: '**December 26, 2021 12:15:39 PM CST**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**2021年12月26日下午12:15:39 CST**'
- en: This shows that the week actually starts in the previous year.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明这周实际上是从上一年开始的。
- en: 'In addition, the `TimeZone` and `SimpleTimeZone` classes have an `observesDaylightTime`
    method that returns `true` if the time zone observes daylight saving time. The
    following code sequence creates an instance of a `SimpleTimeZone` class and then
    determines if daylight saving time is supported. The time zone used is for **Central
    Standard Time** (**CST**):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`TimeZone`和`SimpleTimeZone`类有一个`observesDaylightTime`方法，如果时区遵守夏令时，则返回`true`。以下代码序列创建了一个`SimpleTimeZone`类的实例，然后确定是否支持夏令时。使用的时区是**中央标准时间**（**CST**）：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When this sequence is executed, you should get the following output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此序列时，您应该获得以下输出：
- en: '**Central Standard Time - true**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 中央标准时间-真
- en: Using the Currency class in Java 7
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Java 7中使用Currency类
- en: 'The `java.util.Currency` class introduced four new methods for retrieving information
    about available currencies and their properties. This recipe illustrates the use
    of the following methods:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util.Currency`类引入了四种检索有关可用货币及其属性的信息的新方法。本示例说明了以下方法的使用：'
- en: '`getAvailableCurrencies:` This method returns a set of currencies available'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAvailableCurrencies：`此方法返回一组可用的货币'
- en: '`getNumericCode:` This method returns the ISO 4217 numeric code for the currency'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getNumericCode：`此方法返回货币的ISO 4217数字代码'
- en: '`getDisplayName:` This overloaded method returns a string representing the
    display name of the currency. One method is passed a `Locale` object. The string
    returned is specific for that locale.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDisplayName：`此重载方法返回表示货币显示名称的字符串。一个方法传递了一个`Locale`对象。返回的字符串是特定于该区域设置的。'
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The `getAvailableCurrencies` method is static, so it should be executed against
    the class name. The other methods execute against an instance of the `Currency`
    class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAvailableCurrencies`方法是静态的，因此应该针对类名执行。其他方法针对`Currency`类的实例执行。'
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. Add the following code to the `main` method:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。将以下代码添加到`main`方法中：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When the application is executed, you should get output similar to the following.
    However, the first part of each may differ depending on the current locale.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序时，您应该获得类似以下内容的输出。但是，每个的第一部分可能会有所不同，这取决于当前的区域设置。
- en: '**North Korean Won - Nordkoreanischer Won - 408**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**朝鲜元 - 朝鲜元 - 408**'
- en: '**Euro - Euro - 978**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**欧元 - 欧元 - 978**'
- en: '**Dutch Guilder - Holländischer Gulden - 528**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**荷兰盾 - 荷兰盾 - 528**'
- en: '**Falkland Islands Pound - Falkland-Pfund - 238**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**福克兰群岛镑 - 福克兰-镑 - 238**'
- en: '**Danish Krone - Dänische Krone - 208**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹麦克朗 - 丹麦克朗 - 208**'
- en: '**Belize Dollar - Belize-Dollar - 84**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**伯利兹元 - 伯利兹元 - 84**'
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The code sequence begins with the generation of a `Set` of the `Currency` objects
    representing the current system's configuration. The overloaded `getDisplayName`
    methods were executed against each element of the set. The `Locale.GERMAN` argument
    was used to illustrate the use of this method. The last value displayed was the
    numeric code for the currency.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 代码序列从生成代表当前系统配置的`Currency`对象的`Set`开始。对每个集合元素执行了重载的`getDisplayName`方法。使用了`Locale.GERMAN`参数来说明此方法的使用。显示的最后一个值是货币的数字代码。
- en: Using the NumericShaper.Range enumeration to support the display of digits
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumericShaper.Range枚举来支持数字的显示
- en: In this recipe we will demonstrate the use of `java.awt.font.NumericShaper.Range`
    enumeration to support the display of digits using the `java.awt.font.NumericShaper`
    class. Sometimes it is desirable to display numeric digits using a different language
    than is currently being used. For example, in an English language tutorial regarding
    the Mongolian language, we may want to explain the numeric system in English,
    but display numbers using the Mongolian digits. The `NumericShaper` class provides
    this support. The new `NumericShaper.Range` enumeration has simplified this support.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将演示使用`java.awt.font.NumericShaper.Range`枚举来支持使用`java.awt.font.NumericShaper`类显示数字。有时希望使用不同于当前使用的语言显示数字。例如，在关于蒙古语的英语教程中，我们可能希望用英语解释数字系统，但使用蒙古数字显示数字。`NumericShaper`类提供了这种支持。新的`NumericShaper.Range`枚举简化了这种支持。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To display digits using the `NumericShaper.Range` enumeration:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`NumericShaper.Range`枚举来显示数字：
- en: Create a `HashMap` to hold display attribute information.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`HashMap`来保存显示属性信息。
- en: Create a `Font` object to define the font to use.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Font`对象来定义要使用的字体。
- en: Specify the range of Unicode characters to display the text.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定要显示文本的Unicode字符范围。
- en: Create a `FontRenderContext` object to hold information about how to measure
    the text to be displayed.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`FontRenderContext`对象来保存有关如何测量要显示的文本的信息。
- en: Create an instance of `TextLayout` and use it in the `paintComponent` method
    to render the text.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`TextLayout`的实例，并在`paintComponent`方法中使用它来渲染文本。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: We will illustrate the use of the `NumericShaper.Range` enumeration to display
    Mongolian digits. This is a simplified version of the example found at [http://download.oracle.com/javase/tutorial/i18n/text/shapedDigits.html](http://download.oracle.com/javase/tutorial/i18n/text/shapedDigits.html).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示使用`NumericShaper.Range`枚举来显示蒙古数字。这是在[http://download.oracle.com/javase/tutorial/i18n/text/shapedDigits.html](http://download.oracle.com/javase/tutorial/i18n/text/shapedDigits.html)中找到的示例的简化版本。
- en: 'Create an application that extends the `JFrame` class, which is shown as follows.
    We will illustrate the use of the `NumericShaper` class in the `NumericShaperPanel`
    class:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展`JFrame`类的应用程序，如下所示。我们将在`NumericShaperPanel`类中演示`NumericShaper`类的使用：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, add the `NumericShaperPanel` class to the project as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`NumericShaperPanel`类添加到项目中，如下所示：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Execute the application. Your output should appear as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应该如下所示：
- en: '![How to do it...](img/5627_11_01.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5627_11_01.jpg)'
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the `main` method, an instance of the `NumericShaperExample` class was created.
    Within its constructor, an instance of the `NumericShaperPanel` class was created
    and added to the center of the window. The title, default close operation, and
    size of the window were set. Next, the window was made visible.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`方法中，创建了`NumericShaperExample`类的一个实例。在其构造函数中，创建了`NumericShaperPanel`类的一个实例，并将其添加到窗口的中心。设置了窗口的标题、默认关闭操作和大小。接下来，窗口被显示出来。
- en: In the constructor of the `NumericShaperPanel` class, a text string was created
    along with a `HashMap` to hold the essential features of the display. This map
    was used as an argument to the `TextLayout` constructor along with the string
    to be displayed and the map. The text was displayed in Mongolian using the Mongolian
    Baiti font and with the MONGOLIAN range. We used this font to demonstrate the
    new methods of the `NumericShaper` class.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NumericShaperPanel`类的构造函数中，创建了一个文本字符串以及一个`HashMap`来保存显示的基本特性。将此映射用作`TextLayout`构造函数的参数，以及要显示的字符串和映射。使用蒙古Baiti字体和MONGOLIAN范围显示蒙古文。我们使用这种字体来演示`NumericShaper`类的新方法。
- en: The `NumericShaper` class has added new methods to make it easier to display
    numeric values in a different language. The `getShaper` method is overloaded with
    one version accepting a `NumericShaper.Range` enumeration value. The value specifies
    the language to use. The `NumericShaper.Range` enumeration has been added to represent
    a range of Unicode characters for digits in a given language.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumericShaper`类已添加了新方法，使得在不同语言中显示数字值更加容易。`getShaper`方法被重载，其中一个版本接受一个`NumericShaper.Range`枚举值。该值指定要使用的语言。`NumericShaper.Range`枚举已添加以表示给定语言中数字的Unicode字符范围。'
- en: In the `paintComponent` method, the `Graphics2D` object was used as an argument
    of the `draw` method to render the string to the window.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`paintComponent`方法中，使用`Graphics2D`对象作为`draw`方法的参数来将字符串渲染到窗口中。
- en: There's more...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `getContextualShaper` method is used to control how digits are displayed
    when used with a different script. This means if Japanese script is used before
    digits, then Japanese digits are displayed. The method takes a set of `NumericShaper.Range`
    enumeration values.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`getContextualShaper`方法用于控制在与不同脚本一起使用时如何显示数字。这意味着如果在数字之前使用日语脚本，则会显示日语数字。该方法接受一组`NumericShaper.Range`枚举值。'
- en: The `shape` method also uses a range to specify the script to use for an array
    of char given a start and an end index in the array. The `getRangeSet` method
    returns a set of `NumericShaper.Range` used by the `NumericShaper` instance.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`shape`方法还使用范围来指定要在数组中的起始和结束索引处使用的脚本。`getRangeSet`方法返回`NumericShaper`实例使用的一组`NumericShaper.Range`。'
- en: JavaBean enhancements in Java 7
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 7中的JavaBean增强功能
- en: '**JavaBean** is a way of building reusable components for Java applications.
    They are Java classes that follow certain naming conventions. There have been
    several JavaBean enhancements added in Java 7\. Here we will focus on the `java.beans.Expression`
    class, which is useful in executing methods. The `execute` method has been added
    to facilitate this capability.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaBean**是构建Java应用程序可重用组件的一种方式。它们是遵循特定命名约定的Java类。在Java 7中添加了几个JavaBean增强功能。在这里，我们将重点关注`java.beans.Expression`类，它在执行方法时非常有用。`execute`方法已经添加以实现这一功能。'
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use the `Expression` class to execute a method:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Expression`类来执行方法：
- en: Create an array of arguments for the method, if needed.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为方法创建参数数组，如果需要的话。
- en: Create an instance of the `Expression` class specifying the object that the
    method is to be executed against, the method name, and any arguments needed.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Expression`类的一个实例，指定要执行方法的对象、方法名称和任何需要的参数。
- en: Invoke the `execute` method against the expression.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 针对表达式调用`execute`方法。
- en: Use the `getValue` method to obtain the results of the method execution, if
    necessary.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有必要，使用`getValue`方法获取方法执行的结果。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. Create two classes: `JavaBeanExample`, which
    contains the `main` method and a `Person` class. The `Person` class contains a
    single field for a name along with constructors, a getter method, and a setter
    method:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。创建两个类：`JavaBeanExample`，其中包含`main`方法和`Person`类。`Person`类包含一个用于名称的单个字段，以及构造函数、getter方法和setter方法：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `main` method of the `JavaBeanExample` class, we will create an instance
    of the `Person` class, and use the `Expression` class to execute its `getName`
    and `setName` methods:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`JavaBeanExample`类的`main`方法中，我们将创建`Person`类的一个实例，并使用`Expression`类来执行其`getName`和`setName`方法：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Execute the application. Its output should appear as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。其输出应如下所示：
- en: '**Name: Jane**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称：Jane**'
- en: '**Name: Peter**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称：Peter**'
- en: '**Name: Peter**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称：Peter**'
- en: '**getValue: Peter**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**getValue：Peter**'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Person` class used a single field, name. The `getName` and `setName` methods
    were used from the `main` method, where a `Person` instance was created. The `Expression`
    class' constructor has four arguments. The first argument was not used in this
    example, but can be used to define a return value for the method executed. The
    second argument was the object that the method would be executed against. The
    third argument is a string containing the name of the method, and the last argument
    was an array containing the parameters used by the method.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`Person`类使用了一个名为name的字段。`getName`和`setName`方法是从`main`方法中使用的，其中创建了一个`Person`实例。`Expression`类的构造函数有四个参数。第一个参数在本例中没有使用，但可以用来定义方法执行的返回值。第二个参数是方法将被执行的对象。第三个参数是包含方法名称的字符串，最后一个参数是包含方法使用的参数的数组。'
- en: In the first sequence, the `setName` method was executed using an argument of
    `Peter`. The output of the application shows that the name was initially `Jane`,
    but was changed to `Peter` after the `execute` method was executed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个序列中，使用`Peter`作为参数执行了`setName`方法。应用程序的输出显示名称最初为`Jane`，但在执行`execute`方法后更改为`Peter`。
- en: In the second sequence, the `getName` method was executed. The `getValue` method
    returns the results of the execution of the method. The output shows that the
    `getName` method returned `Peter`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个序列中，执行了`getName`方法。`getValue`方法返回方法执行的结果。输出显示`getName`方法返回了`Peter`。
- en: There's more...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There have been other enhancements to the classes of the `java.bean` package.
    For example, the `toString` method has been overridden in the `FeatureDescriptor`
    and `PropertyChangeEvent` classes to provide a more meaningful description.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.bean`包的类还有其他增强。例如，`FeatureDescriptor`和`PropertyChangeEvent`类中的`toString`方法已被重写，以提供更有意义的描述。'
- en: The `Introspector` class provides a way of learning about the properties, methods,
    and events of a Java Bean without using the Reflection API, which can be tedious.
    The class has added a `getBeanInfo` method, which uses the `Inspector` class'
    control flags to affect the `BeanInfo` object returned.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`Introspector`类提供了一种了解Java Bean的属性、方法和事件的方式，而不使用可能很繁琐的反射API。该类已添加了一个`getBeanInfo`方法，该方法使用`Inspector`类的控制标志来影响返回的`BeanInfo`对象。'
- en: The `Transient` annotation has been added to control what is included. A `true`
    value for the attribute means that the annotated feature should be ignored.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transient`注解已添加以控制包含什么。属性的`true`值意味着应忽略带注解的特性。'
- en: A new constructor has been added to the `XMLDecoder` class that accepts an `InputSource`
    object. Also, the `createHandler` method has been added, which returns a `DefaultHandler`
    object. This handler is used to parse XML archives created by the `XMLEncoder`
    class.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLDecoder`类中添加了一个新的构造函数，接受一个`InputSource`对象。此外，添加了`createHandler`方法，返回一个`DefaultHandler`对象。此处理程序用于解析`XMLEncoder`类创建的XML存档。'
- en: A new constructor has been added to the `XMLEncoder` class. This permits writing
    out JavaBeans to an `OutputStream` using a specific charset with a specific indention.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLEncoder`类中添加了一个新的构造函数。这允许使用特定的字符集和特定的缩进将JavaBeans写入`OutputStream`。'
- en: Handling locales and the Locale.Builder class in Java 7
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Java 7中处理区域设置和`Locale.Builder`类
- en: The `java.util.Locale.Builder` class has been added to Java 7 and provides an
    easy way of creating a locale. The `Locale.Category` enumeration is also new and
    makes using different locales for display and formatting purposes easy. We will
    first look at the use of the `Locale.Builder` class and then examine other locale
    improvements and the use of the `Locale.Category` enumeration in the *There's
    more..*. section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util.Locale.Builder`类已添加到Java 7中，并提供了一种简单的创建区域设置的方法。`Locale.Category`枚举也是新的，使得在显示和格式化目的上使用不同的区域设置变得容易。我们首先将看一下`Locale.Builder`类的使用，然后检查其他区域设置的改进以及在*还有更多..*部分中使用`Locale.Category`枚举。'
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To build and use a new `Locale` object:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和使用新的`Locale`对象：
- en: Create an instance of the `Builder` class.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Builder`类的一个实例。
- en: Use the relevant methods of the class to set up the attributes needed.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类的相关方法设置所需的属性。
- en: Use the `Locale` object as needed.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要使用`Locale`对象。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. In the `main` method, add the following code.
    We will create a new locale based on Eastern Armenian using Latin script as found
    in Italy. The locale is demonstrated by displaying the date for the third day
    of the 16th week in 2012 using the `setWeekDate` method. This method is discussed
    in more detail in the *Handling Weeks in Java 7* recipe:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。在`main`方法中，添加以下代码。我们将创建一个基于东亚美尼亚语的区域设置，使用意大利的拉丁文。通过使用`setWeekDate`方法，演示了该区域设置，显示了2012年第16周的第三天的日期。这种方法在*Java
    7中处理周*中有更详细的讨论：
- en: '[PRE12]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A second example builds a locale based on Chinese using the Simplified script,
    which is used in mainland China:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个示例构建了一个基于中国语言的区域设置，使用了在中国大陆使用的简体字：
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When executed, the output should appear as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行时，输出应如下所示：
- en: '**April 17, 2012 7:25:42 PM CDT**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**April 17, 2012 7:25:42 PM CDT**'
- en: '**Armenian**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚美尼亚语**'
- en: '**2012年4月17日 下午07时25分42秒**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**2012年4月17日 下午07时25分42秒**'
- en: '**中文**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**中文**'
- en: How it works...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Builder` object was created. Using this object, we applied methods to set
    the language, script, and region for the locale. The `build` method was then executed
    and a `Locale` object was returned. We used this locale to display the date and
    the display language for the locale. This was performed twice. First, for the
    Armenian language, and then for Chinese.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`Builder`对象。使用该对象，我们应用了方法来设置区域设置的语言、脚本和地区。然后执行了`build`方法，并返回了一个`Locale`对象。我们使用这个区域设置来显示日期和区域设置的显示语言。这是两次执行的。首先是亚美尼亚语，然后是中文。
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is important to be able to label a piece of information to indicate the language
    being used. A tag is used for this purpose. A standard set of tags is defined
    by the **IETF BCP 47** standard. Java 7 conforms to this standard and has added
    several methods to handle tags.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 能够标记一条信息以指示所使用的语言是很重要的。为此目的使用了一个标签。一组标准标签由**IETF BCP 47**标准定义。Java 7符合这一标准，并添加了几种方法来处理标签。
- en: 'The standard supports the concept of extensions to a tag. These extensions
    can be used to provide more information about the locale. There are two types:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 该标准支持对标签的扩展概念。这些扩展可用于提供有关区域设置的更多信息。有两种类型：
- en: Unicode locale extension
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unicode区域设置扩展
- en: Private use extension
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有使用扩展
- en: The Unicode locale extensions are defined by the **Unicode Common Locale Data
    Repository** (**CLDR**) ([http://cldr.unicode.org/](http://cldr.unicode.org/)).
    These extensions are concerned with non-language information, such as currency
    and dates. The CLDR maintains a standard repository of locale information. Private
    use extensions are used to specify platform-specific information, such as that
    related to operating systems or programming languages.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode区域设置扩展由**Unicode通用区域设置数据存储库**（**CLDR**）（[http://cldr.unicode.org/](http://cldr.unicode.org/)）定义。这些扩展涉及非语言信息，如货币和日期。CLDR维护了一个区域设置信息的标准存储库。私有使用扩展用于指定特定于平台的信息，例如与操作系统或编程语言相关的信息。
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information regarding the IETF BCP 47 standard can be found at [http://tools.ietf.org/rfc/bcp/bcp47.txt](http://tools.ietf.org/rfc/bcp/bcp47.txt).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有关IETF BCP 47标准的更多信息，请访问[http://tools.ietf.org/rfc/bcp/bcp47.txt](http://tools.ietf.org/rfc/bcp/bcp47.txt)。
- en: 'An extension consists of a key/value pair. The key is a single character and
    the value follows the following format:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展由键/值对组成。键是一个单个字符，值遵循以下格式：
- en: '[PRE14]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A `SUBTAG` consists of a series of alphanumeric characters. For Unicode locale
    extensions, the value must be at least two characters, but not more than 8 characters
    in length. For private use extensions, 1 to 8 characters are permitted. All extension
    strings are case-insensitive.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`SUBTAG`由一系列字母数字字符组成。对于Unicode区域设置扩展，值必须至少为两个字符，但不超过8个字符的长度。对于私有使用扩展，允许1到8个字符。所有扩展字符串不区分大小写。'
- en: The key for Unicode locale extension is **u**, and for private use extensions
    it is **x**. These extensions can be added to a locale to provide additional information,
    such as the calendar number types to use.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode区域设置扩展的键为**u**，私有使用扩展的键为**x**。这些扩展可以添加到区域设置中，以提供额外的信息，例如要使用的日历编号类型。
- en: 'The keys that can be used are listed in the following table:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用的键列在下表中：
- en: '| Key code | Description |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 键代码 | 描述 |'
- en: '| --- | --- |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *ca* | Calendar algorithm for determining dates |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| *ca* | 用于确定日期的日历算法 |'
- en: '| *co* | Collation—type the ordering used in a language |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| *co* | 整理—语言中使用的排序 |'
- en: '| *ka* | Collation parameters—used to specify the ordering |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| *ka* | 整理参数—用于指定排序 |'
- en: '| *cu* | Currency type information |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| *cu* | 货币类型信息 |'
- en: '| *nu* | Numbering system |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| *nu* | 编号系统 |'
- en: '| *va* | Common variant type |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| *va* | 常见变体类型 |'
- en: 'Examples of key and types are found in the following table:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 键和类型的示例列在下表中：
- en: '| Key/Type | Meaning |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 键/类型 | 含义 |'
- en: '| --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| nu-armnlow | Armenian lowercase numerals |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| nu-armnlow | 亚美尼亚小写数字 |'
- en: '| ca-indian | Indian calendar |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| ca-indian | 印度日历 |'
- en: Several methods have been added to use these extensions. The `getExtensionKeys`
    method returns a set of `Character` objects of all keys used with the locale.
    Likewise, the `getUnicodeLocaleAttributes` and `getUnicodeLocaleKeys` methods
    return a set of strings listing the attributes and the Unicode keys available.
    The methods return an empty set if there are no extensions available. If the key
    is known, the `getExtension` method or `getUnicodeLocaleType` methods will return
    a string containing the value for that key.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加了几种方法来使用这些扩展。`getExtensionKeys`方法返回一个包含区域设置中使用的所有键的`Character`对象集。同样，`getUnicodeLocaleAttributes`和`getUnicodeLocaleKeys`方法返回一个列出属性和可用的Unicode键的字符串集。如果没有可用的扩展，这些方法将返回一个空集。如果已知键，则`getExtension`方法或`getUnicodeLocaleType`方法将返回一个包含该键值的字符串。
- en: For a given locale, the `getScript, getDisplayScript`, and `toLanguageTag` methods
    return the script, a displayable name for the script, and a well-formed **BCP
    47** tag for the locale respectively. The `getDisplayScript` method will also
    return a displayable name for the script, given a locale as an argument.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的区域设置，`getScript, getDisplayScript`和`toLanguageTag`方法分别返回脚本、脚本的可显示名称和区域设置的格式良好的**BCP
    47**标签。`getDisplayScript`方法还将返回给定区域设置的脚本的可显示名称。
- en: The next section discusses the use of the `setDefault` method to control the
    display of information using two different locales at the same time.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分讨论了使用`setDefault`方法同时控制使用两种不同区域设置显示信息的方法。
- en: Using the Locale.Category enumeration to display information using two different
    locales
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`Locale.Category`枚举来使用两种不同的区域设置显示信息
- en: The `Locale.Category` enumeration has been added to Java 7\. It has two values,
    `DISPLAY` and `FORMAT`. This permits the default locale to be set for format type
    resources (dates, numbers, and currency) and for display resources (GUI aspects
    of an application). For example, part of an application may set the format to
    accommodate one locale, such as `JAPANESE` while displaying related information
    in another, such as `GERMAN.`
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locale.Category`枚举已添加到Java 7。它有两个值，`DISPLAY`和`FORMAT`。这允许为格式类型资源（日期、数字和货币）和显示资源（应用程序的GUI方面）设置默认区域设置。例如，应用程序的一部分可以将格式设置为适应一个区域设置，比如`JAPANESE`，同时在另一个区域设置中显示相关信息，比如`GERMAN`。'
- en: 'Consider the following example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE15]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When this code sequence is executed, you should get output similar to the following.
    The initial date and display language may differ depending on your default locale.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行此代码序列时，您应该会得到类似以下的输出。初始日期和显示语言可能会因默认区域设置而有所不同。
- en: '**April 17, 2012 7:15:14 PM CDT**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**2012年4月17日下午7:15:14 CDT**'
- en: '**English**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**英语**'
- en: '**2012/04/17 19:15:14 CDT**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**2012/04/17 19:15:14 CDT**'
- en: '**English**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**英语**'
- en: The default locale was retrieved and the `setWeekDate` method was used to set
    a date. This method is discussed in more detail in the *Using Weeks in Java 7*
    recipe. Next, the date and the display language are printed. The display was repeated,
    except that the default locale is changed using the `setDefault` method. The display
    resources were changed to use `Locale.JAPANESE`, and the format type resources
    were changed to `Locale.GERMAN`. The output reflected this change.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 已检索默认区域设置，并使用`setWeekDate`方法设置了一个日期。这个方法在*在Java 7中使用星期*示例中有更详细的讨论。接下来，打印日期和显示语言。显示被重复，只是使用`setDefault`方法更改了默认区域设置。显示资源已更改为使用`Locale.JAPANESE`，格式类型资源已更改为`Locale.GERMAN`。输出反映了这一变化。
- en: Handling null references
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理null引用
- en: A fairly common exception is the `java.lang.NullPointerException`. This occurs
    when an attempt is made to execute a method against a reference variable, which
    contains a value of null. In this recipe we will examine various techniques that
    are available to address this type of exception.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.lang.NullPointerException`是一个相当常见的异常。当尝试对包含null值的引用变量执行方法时，就会发生这种情况。在这个示例中，我们将研究各种可用的技术来解决这种类型的异常。'
- en: The `java.util.Objects` class has been introduced and provides a number of static
    methods that address situations where null values need to be handled. The use
    of this class simplifies the testing for null values.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util.Objects`类已被引入，并提供了许多静态方法来处理需要处理null值的情况。使用这个类简化了对null值的测试。'
- en: The *There's more..*. section examines the use of empty lists, which could be
    used instead of returning null. The `java.util.Collections` class has three methods
    that return empty lists.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*还有更多..*部分讨论了使用空列表的情况，这可以用来代替返回null。`java.util.Collections`类有三个返回空列表的方法。'
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To use the `Objects` class to override the `equals` and `hashCode` methods:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Objects`类来覆盖`equals`和`hashCode`方法：
- en: Override the methods in the target class.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖目标类中的方法。
- en: Use the `Objects` class' `equals` method to avoid explicit code to check for
    null values in the `equals` method.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Objects`类的`equals`方法来避免在`equals`方法中检查null值的显式代码。
- en: Use the `Objects` class' `hashCode` method to avoid the need for explicit code
    to check for null values in the `hashCode` method.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Objects`类的`hashCode`方法来避免在`hashCode`方法中检查null值的显式代码。
- en: How to do it...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. We will create an `Item` class to demonstrate
    the use of the `Objects` class. In the `Item` class, we will override the `equals`
    and `hashCode` methods. These methods were generated by the NetBeans'' insert
    code command. We use these methods, because they illustrate the `Objects` class''
    methods and are well structured. Start by creating the class as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。我们将创建一个`Item`类来演示`Objects`类的使用。在`Item`类中，我们将覆盖`equals`和`hashCode`方法。这些方法是由NetBeans的插入代码命令生成的。我们使用这些方法，因为它们说明了`Objects`类的方法并且结构良好。首先按以下方式创建类：
- en: '[PRE16]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, override the `equals` and `hashCode` methods as follows. They provide
    code to check for null values:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按以下方式覆盖`equals`和`hashCode`方法。它们提供了检查null值的代码：
- en: '[PRE17]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finish the class by adding a `toString` method:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加`toString`方法完成类：
- en: '[PRE18]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, add the following to the `main` method:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`main`方法中添加以下内容：
- en: '[PRE19]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Execute the application. Your output should appear as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应如下所示：
- en: '**item1 equals item1: true**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**item1等于item1：true**'
- en: '**item1 equals item2: true**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**item1等于item2：true**'
- en: '**item1 equals item3: false**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**item1等于item3：false**'
- en: '**item1 equals item4: false**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**item1等于item4：false**'
- en: '**Exception in thread "main" java.lang.NullPointerException**'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**线程"main"中的异常java.lang.NullPointerException**'
- en: '**at java.util.Objects.requireNonNull(Objects.java:201)**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**在java.util.Objects.requireNonNull(Objects.java:201)**'
- en: '**at packt.Item.setName(Item.java:23)**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**在packt.Item.setName(Item.java:23)**'
- en: '**at packt.NullReferenceExamples.main(NullReferenceExamples.java:71)**'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**在packt.NullReferenceExamples.main(NullReferenceExamples.java:71)**'
- en: As we will see shortly, the `NullPointerException` is the result of trying to
    assign a null value to an Item's name field.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将很快看到的，`NullPointerException`是尝试将null值分配给Item的名称字段的结果。
- en: How it works...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `equals` method, a test was first made to determine if the object passed
    was null. If it was, then `false` is returned. A test was made to ensure that
    the classes were of the same type. The `equals` method was then used to see if
    the two name fields were equal to each other.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在`equals`方法中，首先进行了一个测试，以确定传递的对象是否为null。如果是，则返回`false`。进行了一个测试，以确保类是相同类型的。然后使用`equals`方法来查看两个名称字段是否相等。
- en: 'The `Objects` class'' `equals` method behaves as summarized in the following
    table. The meaning of equality is determined by the `equals` method of the first
    argument:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`Objects`类的`equals`方法的行为如下表所示。相等性的含义由第一个参数的`equals`方法确定：'
- en: '| First argument | Second argument | Returns |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 第一个参数 | 第二个参数 | 返回 |'
- en: '| --- | --- | --- |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Not null | Not null | `true` if they are the same object, otherwise `false`
    |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 非null | 非null | 如果它们是相同的对象，则为`true`，否则为`false` |'
- en: '| Not null | null | `false` |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 非null | null | `false` |'
- en: '| null | Not null | `false` |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| null | 非null | `false` |'
- en: '| null | null | `true` |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| null | null | `true` |'
- en: The last test compared the two integer `partNumber` fields for equality.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的测试比较了两个整数`partNumber`字段的相等性。
- en: In the `Item` class' `hashCode` method, the `Objects` class' `hashCode` method
    was applied to the name field. This method will return 0 if its argument is null
    otherwise it returns the hash code for the argument. The `partNumber` was then
    used to compute the final value for the hash code.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Item`类的`hashCode`方法中，`Objects`类的`hashCode`方法被应用于名称字段。如果其参数为null，则该方法将返回0，否则返回参数的哈希码。然后使用`partNumber`来计算哈希码的最终值。
- en: Notice the use of the `requireNonNull` method in the two argument constructors
    and the `setName` method. The method checks for a non-null argument. If the argument
    is null, it then throws a `NullPointerException`. This effectively catches a potential
    error earlier in the application.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在两个参数构造函数和`setName`方法中使用了`requireNonNull`方法。该方法检查非空参数。如果参数为null，则抛出`NullPointerException`。这有效地在应用程序中更早地捕获潜在的错误。
- en: 'The `requireNonNull` method is overloaded with a second version accepting a
    second string argument. This argument changes the message generated, when an exception
    occurs. Replace the body of the `setName` method with the following code:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`requireNonNull`方法有两个版本，第二个版本接受第二个字符串参数。当发生异常时，此参数会改变生成的消息。用以下代码替换`setName`方法的主体：'
- en: '[PRE20]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Re-execute the application. The exception message will now appear as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 重新执行应用程序。异常消息现在将显示如下：
- en: '**Exception in thread "main" java.lang.NullPointerException: The name field
    requires a non-null value**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**Exception in thread "main" java.lang.NullPointerException: The name field
    requires a non-null value**'
- en: There's more...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are several other `Objects` class methods that may be of interest. In
    addition, the second section will examine the use of empty iterators to avoid
    null pointer exceptions.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个其他`Objects`类的方法可能会引起兴趣。此外，第二部分将讨论使用空迭代器来避免空指针异常。
- en: Additional Objects class methods
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他`Objects`类方法
- en: 'The `Objects` class'' `hashCode` method is overloaded. A second version takes
    a variable number of objects as arguments. The method will generate a hash code
    using this sequence of objects. For example, the `Item` class'' `hashCode` method
    could have been written as:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`Objects`类的`hashCode`方法是重载的。第二个版本接受可变数量的对象作为参数。该方法将使用这些对象的序列生成哈希码。例如，`Item`类的`hashCode`方法可以这样编写：'
- en: '[PRE21]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `deepEquals` method compares two objects deeply. This means it compares
    more than just the reference values. Two null arguments are considered to be deeply
    equal. If both arguments are arrays, then the `Arrays.deepEqual` method is invoked.
    Equality of objects is determined by the `equals` method of the first argument.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`deepEquals`方法深度比较两个对象。这意味着它比较的不仅仅是引用值。两个null参数被认为是深度相等的。如果两个参数都是数组，则调用`Arrays.deepEqual`方法。对象的相等性由第一个参数的`equals`方法确定。'
- en: The `compare` method is used to compare the first two arguments returning either
    a negative value, a zero, or a positive value depending on the relationship between
    the arguments. Typically, returning a 0 indicates that the arguments are the same.
    A negative value means that the first argument is less than the second argument.
    A positive value indicates that the first argument is greater than the second
    argument.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`compare`方法用于比较前两个参数，根据参数之间的关系返回负值、零或正值。通常，返回0表示参数相同。负值表示第一个参数小于第二个参数。正值表示第一个参数大于第二个参数。'
- en: The method will return a zero if its arguments are identical, or if both arguments
    are null. Otherwise, the return value is determined using the `Comparator` interface's
    `compare` method.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其参数相同，或者两个参数都为null，则该方法将返回零。否则，返回值将使用`Comparator`接口的`compare`方法确定。
- en: 'The `Objects` class'' `toString` method is used to guarantee that a string
    is returned even if the object is null. The following sequence illustrates the
    use of this overloaded method:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`Objects`类的`toString`方法用于确保即使对象为null也返回字符串。以下序列说明了这个重载方法的使用：'
- en: '[PRE22]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When executed, the first use of the method displays the word **null**. In the
    second version, the string argument is displayed as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行时，该方法的第一次使用将显示单词**null**。在第二个版本中，字符串参数显示如下：
- en: '**toString: null**'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**toString: null**'
- en: '**toString: Item is null**'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**toString: Item is null**'
- en: Using empty iterators to avoid null pointer exceptions
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用空迭代器来避免空指针异常
- en: One approach to avoid a `NullPointerException` is to return a non-null value,
    when the list could not be created. It could be beneficial to return an empty
    `Iterator` instead.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 避免`NullPointerException`的一种方法是在无法创建列表时返回非空值。返回空的`Iterator`可能是有益的。
- en: In Java 7, the `Collections` class has added three new methods that return an
    `Iterator`, a `ListIterator`, or an `Enumeration`, all of which are empty. By
    returning empty, they can be used without incurring a null pointer exception.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 7中，`Collections`类添加了三种新方法，返回一个`Iterator`、一个`ListIterator`或一个`Enumeration`，它们都是空的。通过返回空，它们可以在不引发空指针异常的情况下使用。
- en: To demonstrate the use of an empty list iterator, create a new method that returns
    a generic `ListIterator<String>` as shown in the following code. An `if` statement
    is used to return either a `ListIterator` or an empty `ListIterator:`
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 演示使用空列表迭代器，创建一个新的方法，返回一个通用的`ListIterator<String>`，如下所示。使用`if`语句来返回`ListIterator`或空的`ListIterator`：
- en: '[PRE23]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use the following `main` method to test the behavior of the iterator:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下`main`方法来测试迭代器的行为：
- en: '[PRE24]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When it executes, there should be no output. This indicates that the iterator
    is empty. If we had returned null instead, we would have received a `NullPointerException`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，不应有输出。这表示迭代器是空的。如果我们返回null，我们将收到`NullPointerException`。
- en: 'The `Collections` class'' static `emptyListIterator` method returns a `ListIterator`,
    whose methods work as listed in the following table:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collections`类的静态`emptyListIterator`方法返回一个`ListIterator`，其方法如下表所列：'
- en: '| Method | Behavior |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 行为 |'
- en: '| --- | --- |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `hasNext``hasPrevious` | Always returns `false` |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `hasNext``hasPrevious` | 总是返回`false` |'
- en: '| `next``Previous` | Always throws `NoSuchElementException` |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `next``Previous` | 总是抛出`NoSuchElementException` |'
- en: '| `remove``set` | Always throws `IllegalStateException` |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `remove``set` | 总是抛出`IllegalStateException` |'
- en: '| `add` | Always throws `UnsupportedOperationException` |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `add` | 总是抛出`UnsupportedOperationException` |'
- en: '| `nextIndex` | Always returns 0 |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `nextIndex` | 总是返回0 |'
- en: '| `previousIndex` | Always returns -1 |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `previousIndex` | 总是返回-1 |'
- en: 'The `emptyIterator` method will return an empty iterator with the following
    behavior:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`emptyIterator`方法将返回一个具有以下行为的空迭代器：'
- en: '| Method | Behavior |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 行为 |'
- en: '| --- | --- |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `hasNext` | Always returns `false` |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `hasNext` | 总是返回`false` |'
- en: '| `next` | Always throws `NoSuchElementException` |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `next` | 总是抛出`NoSuchElementException` |'
- en: '| `remove` | Always throws `IllegalStateException` |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `remove` | 总是抛出`IllegalStateException` |'
- en: The `emptyEnumeration` method returns an empty enumeration. Its `hasMoreElements`
    will always return `false`, and its `nextElement` will always throw a `NoSuchElementException`
    exception.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`emptyEnumeration`方法返回一个空枚举。它的`hasMoreElements`将始终返回`false`，它的`nextElement`将始终抛出`NoSuchElementException`异常。'
- en: Using the new BitSet methods in Java 7
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Java 7中使用新的BitSet方法
- en: The `java.util.BitSet` class gained several new methods with the latest release
    of Java. These are designed to simplify the manipulation of large sets of bits
    and provide easier access to information about bit location. Bit sets can be used
    for priority queues or compressed data structures. This recipe demonstrates some
    of the new methods.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util.BitSet`类在最新的Java版本中增加了几种新方法。这些方法旨在简化大量位的操作，并提供更容易访问有关位位置的信息。位集可用于优先级队列或压缩数据结构。本示例演示了一些新方法。'
- en: Getting ready
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use the new `BitSet` methods:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用新的`BitSet`方法：
- en: Create an instance of a `BitSet`.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`BitSet`的实例。
- en: Execute methods against the `BitSet` object as needed.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要对`BitSet`对象执行方法。
- en: How to do it...
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new console application. In the `main` method, create an instance of
    a `BitSet` object. Then declare an array of long numbers and use the static `valueOf`
    method to set our `BitSet` object to the value of this long array. Add a `println`
    statement, so we see the way our long numbers are represented in the `BitSet:`
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。在`main`方法中，创建一个`BitSet`对象的实例。然后声明一个长数字的数组，并使用静态的`valueOf`方法将我们的`BitSet`对象设置为这个长数组的值。添加一个`println`语句，这样我们就可以看到我们的长数字在`BitSet`中的表示方式：
- en: '[PRE25]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, use the `toLongArray` method to convert the `BitSet` back to an array
    of long numbers. Use a for loop to print out the values in the array:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用`toLongArray`方法将`BitSet`转换回长数字的数组。使用for循环打印数组中的值：
- en: '[PRE26]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Execute the application. You should see the following output:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您应该看到以下输出：
- en: '**{0, 64, 66, 68, 128, 129}**'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**{0, 64, 66, 68, 128, 129}**'
- en: '**1**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**21**'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**21**'
- en: '**3**'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**3**'
- en: How it works...
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After creating our `BitSet` object, we created an array containing three `long`
    numbers, which serve as a representation of the sequence of bits that we wish
    to use in our `BitSet`. The `valueOf` method takes this representation and converts
    it to the sequence of bits.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`BitSet`对象后，我们创建了一个包含三个`long`数字的数组，这些数字用作我们在`BitSet`中希望使用的位序列的表示。`valueOf`方法接受这个表示并将其转换为位序列。
- en: When we printed out the `BitSet`, we saw the sequence {0, 64, 66, 68, 128, 129}.
    Each number in this `BitSet` represents the index of the bit that was set in our
    sequence of bits. For example, the 0 represents the `long` number 1 in our array,
    as the index of the bit used to represent the one was at position 0\. Likewise,
    bits 64, 66, and 68 were set to represent our `long` number 21\. The 128th and
    129th bits in the sequence were set to represent our `long` number 3\. We reversed
    the process in the next section, when we used the `toLongArray` method to return
    our `BitSet` to its original form.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打印出`BitSet`时，我们看到了序列{0, 64, 66, 68, 128, 129}。这个`BitSet`中的每个数字代表了在我们的位序列中设置的位的索引。例如，0代表数组中的`long`数字1，因为用于表示1的位的索引在位置0。同样，位64、66和68被设置为表示我们的`long`数字21。序列中的第128和129位被设置为表示我们的`long`数字3。在下一节中，我们使用`toLongArray`方法将`BitSet`返回到其原始形式。
- en: In our example, we used an array of `long` numbers. Similar `valueOf` methods
    exist for `byte, LongBuffer`, and `ByteBuffer` arrays. When using a `LongBuffer`
    or `ByteBuffer` array, the buffers are not modified by the `valueOf` method, and
    the `BitSet` cannot be converted back to the buffer. Instead, the `BitSet` must
    be converted by using the `toLongArray` method, or the similar `toByteArray` method
    that converts a `BitSet` into an array of bytes.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用了一个`long`数字的数组。类似的`valueOf`方法也适用于`byte, LongBuffer`和`ByteBuffer`数组。当使用`LongBuffer`或`ByteBuffer`数组时，缓冲区不会被`valueOf`方法修改，并且`BitSet`不能被转换回缓冲区。相反，必须使用`toLongArray`方法或类似的`toByteArray`方法将`BitSet`转换为字节数组。
- en: There's more...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are two new methods useful for locating a set or clearing bits in a `BitSet`.
    The method `previousSetBit` takes an integer representing a specific index as
    its argument and returns an integer representing the closest bit in the `BitSet`
    that is set. For example, add the following code sequence to our previous example
    (using `BitSet` represented by long numbers `{1, 21, 3}):`
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种有用的方法用于定位`BitSet`中的设置或清除位。方法`previousSetBit`以整数表示特定索引作为其参数，并返回表示`BitSet`中最接近的设置位的整数。例如，将以下代码序列添加到我们的先前示例中（使用由长数字`{1,
    21, 3}`表示的`BitSet`）：
- en: '[PRE27]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This would result in an output of integer 0\. This is because we passed an argument
    of index 1 to the `previousSetBit` method and the closest previous bit set in
    our `BitSet` was at index 0.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致输出整数0。这是因为我们将索引1的参数传递给`previousSetBit`方法，而我们的`BitSet`中最接近的前一个设置位是在索引0处。
- en: 'The `previousClearBit` method operates in a similar fashion. If we were to
    execute the following code in our previous example:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`previousClearBit`方法以类似的方式运行。如果我们在上一个示例中执行以下代码：'
- en: '[PRE28]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We would get output of integer 65\. The bit sitting at index 65 is the closest
    clear bit to our argument 66\. Both methods will return a -1 if no such bit exists
    in the `BitSet`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到整数65的输出。位于索引65的位是最接近我们的参数66的最近的清除位。如果在`BitSet`中不存在这样的位，则两种方法都将返回-1。
