- en: '*Chapter 2*: Differences between Selenium WebDriver and Cypress'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*：Selenium WebDriver和Cypress之间的差异'
- en: Both Cypress and Selenium WebDriver are test automation frameworks that support
    end-to-end testing, and when someone mentions Cypress, there is a quick need to
    compare or find out which is better than the other. Before we get started on understanding
    the differences between Selenium WebDriver and Cypress, we will first need to
    understand the different motives for development between the two testing frameworks
    and who their intended users are.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress和Selenium WebDriver都是支持端到端测试的测试自动化框架，当有人提到Cypress时，很快就需要比较或找出哪个比另一个更好。在我们开始了解Selenium
    WebDriver和Cypress之间的差异之前，我们首先需要了解两个测试框架开发的不同动机以及它们的预期用户是谁。
- en: Understanding the reasons why both Cypress and Selenium WebDriver are architecturally
    different will play a major role in helping you understand different and similar
    aspects of both the Selenium WebDriver and Cypress frameworks. In this section,
    we will evaluate ways in which both WebDriver and Cypress are unique, different,
    and similar in different ways.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Cypress和Selenium WebDriver在架构上为何不同将在帮助您了解Selenium WebDriver和Cypress框架的不同和相似方面起到重要作用。在本节中，我们将评估WebDriver和Cypress在不同方面的独特之处、不同之处和相似之处。
- en: We will explore the different use cases for both Selenium WebDriver and Cypress,
    and examine how each one is suitable for the purpose of its use. We will also
    clearly identify the audience of each of the testing frameworks, and what you
    can gain from both or each of them. We will describe why you should choose Cypress
    as a test automation framework and why it is a perfect candidate for end-to-end
    testing automation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨Selenium WebDriver和Cypress的不同用例，并检查每个用例适用的目的。我们还将清楚地确定每个测试框架的受众，以及您可以从两者或每个测试框架中获得什么。我们将描述为什么应该选择Cypress作为测试自动化框架，以及为什么它是端到端测试自动化的完美候选者。
- en: 'After understanding the differences and similarities between Cypress and WebDriver
    we will conclude by listing factors and tools that make it stand out and put it
    ahead of the curve when it comes to end-to-end web testing automation. The following
    are the key topics that we will cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了Cypress和WebDriver之间的差异和相似之处后，我们将总结列出使其在端到端网页测试自动化方面脱颖而出并领先于其他测试框架的因素和工具。以下是本章将涵盖的关键主题：
- en: Why choose Cypress?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择Cypress？
- en: Comparing Cypress and Selenium WebDriver
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较Cypress和Selenium WebDriver
- en: Using Cypress for frontend testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cypress进行前端测试
- en: By the end of this chapter, you will be able to understand the ways in which
    Cypress is different and similar to Selenium WebDriver and how it shows prowess
    in frontend web automation testing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的学习，您将能够了解Cypress与Selenium WebDriver之间的差异和相似之处，以及它在前端Web自动化测试中的优势。
- en: Why choose Cypress?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Cypress？
- en: Cypress is an end-to-end testing framework that is written by developers, for
    developers and **Quality Assurance** (**QA**) engineers. Cypress focuses on testing
    web applications and since the only way to automate the web is by using JavaScript,
    Cypress only supports the use of JavaScript to write its tests.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress是一个端到端测试框架，由开发人员为开发人员和质量保证（QA）工程师编写。Cypress专注于测试Web应用程序，由于自动化Web的唯一方法是使用JavaScript，因此Cypress仅支持使用JavaScript编写其测试。
- en: Cypress was specifically written for frontend teams that utilize JavaScript
    for the development of their products, along with teams that need to quickly get
    started with the process of writing unit, integration, and end-to-end tests without
    the complicated intricacies of properly setting up a testing framework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress专门为利用JavaScript开发其产品的前端团队编写，以及需要快速开始编写单元、集成和端到端测试的团队，而无需正确设置测试框架的复杂细节。
- en: Cypress is not only beginner-friendly, but also ensures that everything that
    a developer or a QA engineer needs to get started on their tests is already packaged
    in the bundle that is downloaded and installed from the Cypress website. Cypress
    comes bundled with its own browser, a test runner, and chai as an assertion framework.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress不仅适合初学者，而且确保开发人员或QA工程师需要开始测试的一切都已经打包在从Cypress网站下载和安装的捆绑包中。Cypress捆绑了自己的浏览器、测试运行器和chai作为断言框架。
- en: Having a bundle that contains everything required to get started with the process
    of writing tests means that anyone can just get started on the business of testing
    without needing to know about the setup process for assertion frameworks, test
    runners, or even the addition of browser drivers, such as in the case of using
    Selenium WebDriver.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个包含一切所需的捆绑包，可以让任何人开始测试的过程，而无需了解断言框架、测试运行器的设置过程，甚至不需要添加浏览器驱动程序，就像使用Selenium
    WebDriver的情况一样。
- en: Cypress makes use of JavaScript, which makes it significantly easier for JavaScript
    developers to onboard and quickly grasp the Cypress concepts. The ease of onboarding
    also ensures that developers and QA engineers can quickly get up to speed with
    writing tests using Cypress. Since Cypress is developed in JavaScript, developers
    and QA teams using JavaScript find it easier to debug and also understand the
    errors as they are similar to those in JavaScript applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress使用JavaScript，这使得JavaScript开发人员更容易上手并快速掌握Cypress的概念。上手的简便性还确保开发人员和QA工程师可以快速掌握使用Cypress编写测试的技能。由于Cypress是用JavaScript开发的，使用JavaScript的开发人员和QA团队发现它更容易调试，也更容易理解错误，因为它们与JavaScript应用程序中的错误类似。
- en: Cypress utilizes a universal driver that is currently compatible with Firefox,
    Edge, Chrome, and the Chromium family of browsers. Unlike Selenium, which utilizes
    WebDriver and interacts with the **Document Object Model** (**DOM**) using HTTP
    network requests, the Cypress driver works directly in the browser without the
    need to make network requests. The ability to run inside the browser with the
    tests ensures that Cypress can effectively interpret commands without introducing
    timeouts when commands are passed from the tests to the driver and then to the
    application running in the browser.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress使用的通用驱动程序目前与Firefox、Edge、Chrome和Chromium系列浏览器兼容。与Selenium不同，Selenium使用WebDriver并通过HTTP网络请求与**文档对象模型**（**DOM**）进行交互，而Cypress驱动程序直接在浏览器中工作，无需进行网络请求。在浏览器中运行测试的能力确保了Cypress能够有效地解释命令，而不会在命令从测试传递到驱动程序，然后到浏览器中运行的应用程序时引入超时。
- en: Utilizing a universal driver also ensures that Cypress maintains the consistency
    of the methods that are utilized in all the browsers and also a standard format
    for the tests regardless of the browser that the tests will be run in. With this
    approach, it is possible for a QA team or an individual developer to grow their
    cross-browser testing as the only required thing is to run their existing test
    suites against the newly supported browser with Cypress.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通用驱动程序还确保了Cypress在所有浏览器中使用的方法的一致性，以及测试的标准格式，无论测试将在哪个浏览器中运行。采用这种方法，QA团队或个人开发人员可以扩展他们的跨浏览器测试，因为唯一需要做的就是在新支持的浏览器上运行他们现有的测试套件。
- en: The Cypress framework runs on the browser as it's architecturally different
    from any other test automation tools such as Selenium WebDriver. The ability of
    Cypress to run on the browser gives it a competitive advantage over other automation
    tools as it comes packaged with automatic wait sequences that could otherwise
    need to be defined in tests. Cypress therefore knows when to wait for an event,
    such as a network request, which would otherwise need to be specified as an explicit
    or implicit wait in a Selenium-driven test.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress框架在浏览器上运行，因此在架构上与Selenium WebDriver等其他测试自动化工具不同。Cypress在浏览器上运行的能力使其比其他自动化工具具有竞争优势，因为它自带了自动等待序列，否则需要在测试中定义。因此，Cypress知道何时等待事件，例如网络请求，否则需要在Selenium驱动的测试中指定为显式或隐式等待。
- en: Software development technologies such as JavaScript frameworks change quickly
    than the testing technologies and frameworks that are available. Cypress presents
    a unique opportunity where the developers and QA engineers can quickly get started
    with the process of writing tests without the need to worry that a testing setup
    needs to be done. Removing the worry about the underlying test infrastructure
    not only quickens the testing process but also ensures that teams can quickly
    get started with the tasks that matter and are critical in the software development
    life cycle.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 像JavaScript框架这样的软件开发技术变化比测试技术和可用框架快得多。Cypress提供了一个独特的机会，开发人员和QA工程师可以快速开始编写测试，而无需担心测试设置的问题。消除对底层测试基础设施的担忧不仅加快了测试过程，还确保团队可以快速开始软件开发生命周期中重要的任务。
- en: Recap – why choose Cypress?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-为什么选择Cypress？
- en: In this section, we learned why Cypress is a preferred choice when it comes
    to web development testing and what makes it stand out from other test frameworks,
    including Selenium WebDriver. In the next section, we will be directly comparing
    the differences and similarities between Cypress and Selenium WebDriver.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们了解了为什么Cypress在网页开发测试方面是首选，以及它与其他测试框架（包括Selenium WebDriver）的区别和优势。在下一部分，我们将直接比较Cypress和Selenium
    WebDriver之间的差异和相似之处。
- en: Comparing Cypress and Selenium WebDriver
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较Cypress和Selenium WebDriver
- en: It is easy to fall into the trap of making assumptions that Cypress is a replacement
    for Selenium WebDriver and that its use could render Selenium WebDriver completely
    obsolete in the world of testing automation. While it is simple to directly assume
    that either Cypress is better or superior to Selenium or the other way round,
    this thinking is flawed and is incorrect in most instances.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易陷入这样的陷阱，认为Cypress可以取代Selenium WebDriver，其使用可能会使Selenium WebDriver在测试自动化领域完全过时。虽然直接假设Cypress要么更好，要么优于Selenium，或者反过来，这种想法是错误的，在大多数情况下都是不正确的。
- en: In this section, we will cover why Cypress is unique and how its purpose is
    more complementary to Selenium WebDriver than supplementary. The following sections
    outline some of the differences between Selenium WebDriver and Cypress.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将介绍Cypress的独特之处，以及它的目的如何更多地是作为Selenium WebDriver的补充而不是附加。接下来的部分将概述Selenium
    WebDriver和Cypress之间的一些差异。
- en: Browser driver
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器驱动程序
- en: Cypress utilizes a custom universal driver for all the browsers that it supports,
    while on the other hand, Selenium WebDriver utilizes different drivers for each
    of the different browsers that it supports. The ability to use a universal driver
    for all the browsers means that on installation, we can run our tests on all the
    Cypress-supported browsers without the need to install an external driver. Selenium,
    on the other hand, requires a driver for every browser to be able to run tests
    in different browsers. The universal driver also gives Cypress a competitive edge
    as the team developing it is able to fix problems that are common in WebDriver,
    and can extend the functionality to different browsers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress使用一个通用驱动程序来支持所有浏览器，而另一方面，Selenium WebDriver使用不同的驱动程序来支持每个不同的浏览器。使用通用驱动程序可以在安装时在所有Cypress支持的浏览器上运行测试，而无需安装外部驱动程序。另一方面，Selenium需要为每个浏览器安装驱动程序才能在不同浏览器中运行测试。通用驱动程序还使Cypress具有竞争优势，因为开发团队能够解决WebDriver中常见的问题，并将功能扩展到不同的浏览器。
- en: Retries and waits
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重试和等待
- en: Cypress comes with built-in explicit retries to search for elements in the **DOM**
    and explicitly waits for events to happen before a test is considered to have
    failed. Cypress comes coupled with events that determine whether requests need
    to be waited for before the browser decides whether they have failed or passed.
    Cypress is able to handle the waits and retries because it runs on the browser
    with the tests and is able to understand the state of the tests at any given time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress内置了显式重试来搜索**DOM**中的元素，并在测试被视为失败之前显式等待事件发生。Cypress配备了确定请求是否需要等待的事件，然后浏览器决定它们是失败还是通过。Cypress能够处理等待和重试，因为它与测试一起在浏览器上运行，并能够了解任何给定时间测试的状态。
- en: Selenium, on the other hand, utilizes HTTP requests to WebDriver and it is therefore
    difficult for the framework to determine whether explicit or implicit waits are
    required when the tests are running. To solve the problem, Selenium users have
    to write the waits themselves in situations where the tests would need to wait
    for a request to complete before proceeding to the next step of execution. Selenium
    also does not come bundled with automatic retries when the tests are run, a feature
    that Cypress does possess.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Selenium利用HTTP请求到WebDriver，因此在测试运行时很难确定是否需要显式或隐式等待。为了解决这个问题，Selenium用户必须在测试需要等待请求完成后再执行下一步时自己编写等待。在测试运行时，Selenium也不自带自动重试的功能，而Cypress却具备这一功能。
- en: Target usage
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标使用
- en: Cypress is built for JavaScript developers and QA engineers who want to quickly
    set up an automation framework and get to testing their end-to-end web applications,
    without spending too much bandwidth on setting up test frameworks or understanding
    the technologies behind building test frameworks. With Cypress, it is easy for
    developers to go beyond writing unit tests, to writing integration tests and even
    acceptance tests with features such as stubbing external dependencies, and testing
    how their applications behave. Cypress also currently favors developers and QA
    practices that are consistent with the Chromium family of browsers including Edge,
    with the addition of Firefox, which is currently in beta testing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress是为JavaScript开发人员和QA工程师设计的，他们希望快速建立自动化框架并开始测试端到端的Web应用程序，而不需要花费太多带宽来设置测试框架或理解构建测试框架背后的技术。使用Cypress，开发人员可以轻松地从编写单元测试转向编写集成测试，甚至是接受测试，包括存根外部依赖项的功能，并测试他们的应用程序的行为。Cypress目前也更偏向于与Chromium系列浏览器兼容的开发人员和QA实践，包括Edge，还有目前处于测试阶段的Firefox。
- en: On the other hand, Selenium WebDriver is built to test anything that runs on
    the web. Selenium focuses on QA teams that want to test every aspect of their
    web applications and is not limited by factors such as browser compatibility or
    a single test runner, which is the case in Cypress. Selenium WebDriver gives the
    user options to extend it with different browsers and plugins, and also supports
    different languages such as Java, Python, Ruby, C#, JavaScript, Perl, and PHP.
    It is really difficult to plainly say that Selenium is a direct competitor to
    Cypress, as we can vividly see that while their use cases are closely similar,
    their audience and target users are totally different. While Selenium targets
    users of all major development languages, supporting even mobile automation in
    tools such as Appium, Cypress is only focused on making testing better for JavaScript
    web developers and QA engineers that understand the JavaScript language.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Selenium WebDriver是用来测试在网络上运行的任何东西。Selenium专注于想要测试其Web应用程序的每个方面的QA团队，并不受浏览器兼容性或单一测试运行器等因素的限制，而这在Cypress中是存在的。Selenium
    WebDriver为用户提供了使用不同浏览器和插件扩展它的选项，还支持不同的语言，如Java、Python、Ruby、C＃、JavaScript、Perl和PHP。很难明确地说Selenium是Cypress的直接竞争对手，因为我们可以清楚地看到，虽然它们的用例非常相似，但它们的受众和目标用户完全不同。虽然Selenium针对所有主要开发语言的用户，甚至支持在诸如Appium之类的工具中进行移动自动化，但Cypress只专注于为理解JavaScript语言的Web开发人员和QA工程师提供更好的测试。
- en: Architecture
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构
- en: 'Cypress runs on the browser and this gives it an edge over tools such as Selenium
    WebDriver. Running on the browser means that Cypress is significantly faster and
    can interpret commands quicker at runtime, as there are no third-party services
    interpreting the commands on its behalf or sending HTTP requests to the browser
    driver. While all the Cypress commands run inside the browser, it is possible
    for Cypress to tell what is happening outside the browser, as it has access to
    everything that the application has, including the window object, the DOM, a document
    object, or any other process and method. As long as your application has access,
    then Cypress tests will have access. The following diagram shows the architecture
    of Cypress versus the Selenium WebDriver architecture. Where in Cypress, the execution
    takes place in the browser, in Selenium, the execution takes place outside the
    browser:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在浏览器上运行，这使其比Selenium WebDriver等工具更具优势。在浏览器上运行意味着Cypress速度更快，可以在运行时更快地解释命令，因为没有第三方服务代表其解释命令或向浏览器驱动程序发送HTTP请求。虽然所有Cypress命令都在浏览器内运行，但Cypress可以了解浏览器外发生的事情，因为它可以访问应用程序的所有内容，包括窗口对象、DOM、文档对象或任何其他进程和方法。只要您的应用程序有访问权限，Cypress测试就会有访问权限。以下图表显示了Cypress与Selenium
    WebDriver架构的对比。在Cypress中，执行在浏览器中进行，而在Selenium中，执行在浏览器外进行：
- en: '![Figure 2.1 – Selenium versus the Cypress test execution architecture'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1– Selenium与Cypress测试执行架构的对比'
- en: '](image/Chapter_2_Image01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Chapter_2_Image01.jpg)'
- en: Figure 2.1 – Selenium versus the Cypress test execution architecture
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1– Selenium与Cypress测试执行架构的对比
- en: Cross-browser compatibility
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨浏览器兼容性
- en: Cypress does not currently support all major browsers in the way Selenium WebDriver
    does. Cypress is currently supporting browsers built using the Chromium open source
    project, Firefox, Edge, and Electron (the default browser in Cypress). On the
    other hand, Selenium has support for all major browsers and this gives it an advantage
    when it comes to the ability to test applications on multiple platforms. While
    it is possible to argue that cross-browser functionality across more than three
    browsers increases the architecture complexity with minimal value to the testing
    process, support for multiple browsers may lead to identifying bugs that are of
    high priority, even though the severity of the bugs could potentially be low.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress目前不支持像Selenium WebDriver那样支持所有主要浏览器。Cypress目前支持使用Chromium开源项目构建的浏览器，Firefox，Edge和Electron（Cypress中的默认浏览器）。另一方面，Selenium支持所有主要浏览器，这使得它在能够在多个平台上测试应用程序的能力方面具有优势。虽然可以争论跨三个以上浏览器的跨浏览器功能会增加架构复杂性，对测试过程的价值很小，但支持多个浏览器可能会导致识别出优先级较高的错误，即使错误的严重性可能很低。
- en: Cypress trade-offs
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cypress的权衡
- en: As mentioned previously, Cypress is a test automation tool that is focused on
    end-to-end test automation on the browser. Being able to run on the browser means
    that Cypress can interact with the elements on the browser better than any other
    tools but it also means that Cypress has permanent trade-offs that cannot be changed
    due to its architecture. The trade-offs are described in the following subsections.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Cypress是一个专注于浏览器端到端测试自动化的测试工具。能够在浏览器上运行意味着Cypress可以与浏览器上的元素进行更好的交互，但这也意味着Cypress具有永久的权衡，由于其架构无法更改。这些权衡在以下子节中描述。
- en: Scope limitations
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 范围限制
- en: Cypress works best when used as an automation utility for QA engineers and developers
    who are writing tests. Cypress does not support tools for manual automation and
    has no plans to integrate manual testing tools in the framework.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在作为QA工程师和编写测试的开发人员的自动化工具时效果最佳。Cypress不支持手动自动化工具，并且没有计划在框架中集成手动测试工具。
- en: Cypress is also not designed for activities such as web indexing and performance
    testing, and carrying out such activities may reduce the performance ability of
    the framework.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress也不适用于诸如Web索引和性能测试之类的活动，进行这些活动可能会降低框架的性能能力。
- en: Environment limitations
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境限制
- en: Cypress runs on the browser and that means the language it supports will always
    be JavaScript, as the test code will always be evaluated in the browser. Being
    able to run in the browser means that to connect to a database or a server we
    can only use the Cypress commands of `cy.exec()`, `cy.request()`, or `cy.task()`,
    which provide a way to expose the database or the server, which might be more
    work than if we could explicitly define their configurations and Cypress understood
    them. Having tests run in the browser creates a great experience for running tests,
    but it is a little cumbersome to plug in functionality that needs to run outside
    the browser.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在浏览器上运行，这意味着它始终支持的语言将是JavaScript，因为测试代码将始终在浏览器中进行评估。能够在浏览器中运行意味着要连接到数据库或服务器，我们只能使用Cypress命令`cy.exec()`，`cy.request()`或`cy.task()`，这提供了一种公开数据库或服务器的方法，这可能比明确定义它们的配置并让Cypress理解它们更费力。在浏览器中运行测试为运行测试提供了很好的体验，但是要插入需要在浏览器外部运行的功能有点麻烦。
- en: Multiple browsers and multiple tabs – limitations
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个浏览器和多个标签-限制
- en: The Cypress framework does not support the ability for a test to control multiple
    browsers when running. This is a permanent trade-off since the ability to control
    multiple browsers is not possible when running tests within one browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress框架不支持测试在运行时控制多个浏览器的能力。这是一个永久的权衡，因为在一个浏览器中运行测试时无法控制多个浏览器。
- en: The Cypress framework does not support the ability to interact with more than
    one browser tab, as this functionality is not exposed inside the browser. However,
    Cypress provides the ability to incorporate other tools such as Selenium or Puppeteer
    to operate and drive multiple browser tabs when needed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress框架不支持与多个浏览器标签交互的能力，因为这种功能在浏览器内部不可用。但是，Cypress提供了集成其他工具（如Selenium或Puppeteer）以在需要时操作和驱动多个浏览器标签的能力。
- en: Control origin limitations
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制来源的限制
- en: Cypress only supports visiting URLs that are from the same origin in the same
    test. The control origin limitation means that for any particular test, you are
    not able to visit different URLs that do not belong to the same origin. An example
    would be trying to send a request to [https://github.com](https://github.com)
    and [https://gitlab.com](https://gitlab.com) in the same test, which would lead
    to an error. The following examples illustrate the improper and proper ways of
    utilizing the cross-origin when writing Cypress tests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress只支持在同一个测试中访问来自相同来源的URL。控制来源的限制意味着对于任何特定的测试，您无法访问不属于相同来源的不同URL。例如，尝试在同一个测试中发送请求到[https://github.com](https://github.com)和[https://gitlab.com](https://gitlab.com)将导致错误。以下示例说明了编写Cypress测试时利用跨域的不正确和正确的方式。
- en: The proper way of utilizing cross-origin to run tests
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正确地利用跨域来运行测试
- en: 'In the following test, the user prompts Cypress to first navigate to the [https://github.com](https://github.com)
    GitHub website and then to [https://docs.github.com/en](https://docs.github.com/en)
    (documentation link) for the GitHub resources. Both of the links belong to the
    same origin, `github.com`, and therefore Cypress would have no issue executing
    the requests:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下测试中，用户提示Cypress首先导航到[https://github.com](https://github.com) GitHub网站，然后导航到[https://docs.github.com/en](https://docs.github.com/en)（文档链接）以获取GitHub资源。这两个链接都属于相同的来源`github.com`，因此Cypress执行请求时不会出现问题。
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The improper way of utilizing cross-origin to run tests
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不正确地利用跨域来运行测试
- en: 'In this test, the user prompts Cypress to first navigate to [https://github.com](https://github.com),
    then later navigate to https://gitlab.com, which is of a different origin to the
    first URL. This will lead to an error being thrown when the test is run:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，用户首先提示Cypress导航到[https://github.com](https://github.com)，然后再导航到https://gitlab.com，这是与第一个URL不同源的网站。当运行测试时，这将导致错误被抛出：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Cypress and Selenium complementary actions
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cypress和Selenium互补的行动
- en: We can utilize both Cypress and Selenium together in some instances that are
    rare but still achievable when writing our tests. While Cypress has the limitation
    of not being able to control more than one browser tab, it is possible to configure
    Cypress to use Selenium to run multiple tabs. We can also utilize Cypress for
    our end-to-end tests and Selenium for activities such as load tests. Selenium
    has the ability to perform tests such as load tests, which are not supported in
    Cypress, and in such instances both test frameworks can be utilized together.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些罕见但仍可实现的情况下，我们可以同时利用Cypress和Selenium编写测试。虽然Cypress有不能控制多个浏览器标签的限制，但可以配置Cypress使用Selenium来运行多个标签。我们还可以利用Cypress进行端到端测试，而使用Selenium进行诸如负载测试之类的活动。Selenium能够执行Cypress不支持的负载测试等测试，并且在这种情况下，两个测试框架可以一起使用。
- en: Summarizing the differences
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结差异
- en: Cypress is built for the web and is optimized to run on browsers. The architecture
    of Cypress allows it to effectively run tests, while at the same time overcoming
    the challenges of WebDriver. While Cypress is able to run on the browser, WebDriver
    interacts with the browser using the HTTP protocol, hence causing delays and unknown
    wait events when running tests. Cypress also targets QA engineers and developers
    who are looking to write tests without worrying about the underlying infrastructure
    and the limitation of one assertion library and programming language. Cypress
    also promises a future, as plans are underway to support Safari and Internet Explorer,
    that will ensure that developers and testers can try out Cypress on the browser
    of their choice.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress是为网络而构建的，并且经过优化以在浏览器上运行。Cypress的架构允许它有效地运行测试，同时克服了WebDriver的挑战。虽然Cypress能够在浏览器上运行，但WebDriver使用HTTP协议与浏览器交互，因此在运行测试时会导致延迟和未知的等待事件。Cypress还针对寻求编写测试而不必担心基础架构和断言库和编程语言限制的质量保证工程师和开发人员。Cypress还承诺未来，计划支持Safari和Internet
    Explorer，这将确保开发人员和测试人员可以在他们选择的浏览器上尝试Cypress。
- en: With all the perks that Cypress comes bundled with, it also comes with some
    temporary and permanent trade-offs. Some of the temporary trade-offs are the ability
    to support all major browsers or to perform certain functions such as hovering
    over an element. The permanent trade-offs on the other hand mean that the architecture
    of Cypress cannot support them even in the future. They include aspects such as
    controlling multiple open browsers and/or operating multiple tabs in browsers,
    being able to connect to external databases and servers, and calling different
    cross-origins. All of the permanent trade-offs have workarounds and users can
    always implement the workarounds at will. Cypress, however, advises that workarounds
    should not be used in cases that would stretch Cypress beyond its intended purpose.
    Using Cypress for non-intended purposes may cause hurdles such as test automation
    complexity, which could end up reducing the effectiveness of Cypress as an automation
    tool.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress捆绑了所有的优势，但也伴随着一些临时和永久的权衡。一些临时的权衡是支持所有主要浏览器或执行某些功能，比如悬停在一个元素上。另一方面，永久的权衡意味着Cypress的架构甚至在未来也无法支持它们。它们包括控制多个打开的浏览器和/或在浏览器中操作多个标签，能够连接到外部数据库和服务器，并调用不同的跨源。所有永久的权衡都有解决方法，用户可以随时实施解决方法。然而，Cypress建议在不应该使用解决方法的情况下不要使用解决方法，因为这可能会导致测试自动化复杂性，从而降低Cypress作为自动化工具的效果。
- en: Recap – comparing Cypress and Selenium WebDriver
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-比较Cypress和Selenium WebDriver
- en: In this section, we learned the advantages of using Cypress and also compared
    it to using Selenium to write tests. We also identified why Selenium is architecturally
    different from Cypress and why both are more complementary than they are supplementary.
    We explored the trade-offs that Cypress has and some of the solutions to overcome
    the trade-offs that are permanent in the Cypress automation framework. In the
    next section, we will dive into the tools that make Cypress the best candidate
    for end-to-end web test automation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们了解了使用Cypress的优势，并将其与使用Selenium编写测试进行了比较。我们还确定了为什么Selenium在架构上与Cypress不同，以及为什么两者更多地是互补而不是补充。我们探讨了Cypress存在的权衡以及在Cypress自动化框架中克服永久权衡的一些解决方案。在下一节中，我们将深入探讨使Cypress成为端到端网页测试自动化的最佳选择的工具。
- en: Cypress for frontend applications
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cypress用于前端应用程序
- en: Cypress is built for the web, and that means it comes packed with some tools
    and features that other frameworks may not have. This improves the testing experience
    for frontend web developers and QA engineers. In this section, we will explore
    the different elements that Cypress is packed with that make it convenient and
    easy for its users to jump in and get started. The following are some of the elements
    that make Cypress stand out from other test automation frameworks for frontend
    applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress是为网络而构建的，这意味着它装载了一些其他框架可能没有的工具和功能。这提高了前端Web开发人员和质量保证工程师的测试体验。在这一部分，我们将探讨Cypress装载的不同元素，这些元素使其用户可以方便地开始并快速上手。以下是一些使Cypress脱颖而出的元素，这些元素使其与其他前端应用程序的测试自动化框架不同。
- en: Test Runner
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试运行器
- en: The Cypress Test Runner comes by default when Cypress is installed on the user's
    machine. It is an interactive user interface that allows the user of the Cypress
    framework to see the commands that are running in the tests, and also the application
    that is under test as the commands interact with it. The Test Runner has the ability
    to show the number of test failures, test passes, skipped tests, the command log,
    and even the viewport of the browser when the tests are running.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当Cypress安装在用户的计算机上时，默认情况下会附带Cypress测试运行器。这是一个交互式用户界面，允许Cypress框架的用户查看测试中运行的命令，以及与之交互的应用程序。测试运行器具有显示测试失败次数、测试通过次数、跳过的测试、命令日志以及测试运行时浏览器的视口的能力。
- en: Setup process
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置过程
- en: As explained in the previous chapter, the setup process of Cypress is not only
    clear and simple but it also ensures that the QA engineers and frontend developers
    need to run a single command to install Cypress. This eliminates the need to configure
    external dependencies to get started on the process of writing their tests. The
    Cypress documentation is also very interactive and clear, which makes it easy
    for developers and QA engineers to quickly onboard and use Cypress features.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，Cypress的设置过程不仅清晰简单，而且确保QA工程师和前端开发人员只需运行一个命令即可安装Cypress。这消除了配置外部依赖项来开始编写测试的需要。Cypress文档也非常互动和清晰，这使得开发人员和QA工程师可以快速上手并使用Cypress的功能。
- en: Implementation and debugging
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施和调试
- en: Cypress Test Runner comes with a built-in command log, and this means that when
    in **debug mode**, the user is able to check in real time the commands and assertions
    that have passed and the others that have failed. The ability to highlight failed
    commands and check which elements failed to be called, or what functions failed,
    is a capability that makes Cypress stand out, as debugging frontend applications
    not only becomes a walk in the park, but it also saves on the time that could
    have been used to investigate the cause of the failures. The command log also
    gives Cypress users instant feedback, and they can tell whether the tests have
    been properly written or not, just by checking the commands that are running on
    the Test Runner.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress测试运行器带有内置的命令日志，这意味着在调试模式下，用户可以实时检查已通过的命令和断言，以及未通过的命令。突出显示失败的命令并检查未能调用的元素或失败的功能的能力使Cypress脱颖而出，因为调试前端应用程序不仅变得轻而易举，而且还节省了用于调查失败原因的时间。命令日志还为Cypress用户提供了即时反馈，他们可以通过检查测试运行器上运行的命令来判断测试是否已经正确编写。
- en: Exhaustive testing capabilities
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全面的测试能力
- en: Cypress combines the ability to write functional tests and also check responses
    from API calls made by the frontend. It also comes with visual regression capabilities
    that can identify whether an intentional change was made to the application under
    test.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress结合了编写功能测试和检查前端发出的API调用的响应的能力。它还具有可视化回归功能，可以识别应用程序是否有意进行了更改。
- en: When writing functional tests, the Cypress framework checks that the frontend
    functionality works as stipulated in the requirements document, and this would
    involve a process such as clicking a button or signing up a user.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写功能测试时，Cypress框架会检查前端功能是否符合需求文档中规定的要求，这可能涉及点击按钮或注册用户等过程。
- en: API verification tests on the other hand check that the returned **XHR** (**XMLHttpRequest**)
    requests are successful with the correct responses received when the requests
    are returned. XHR requests provide an extra verification layer for API tests,
    as we can confirm that the structure of the expected data is similar to what we
    received in the frontend application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: API验证测试另一方面检查返回的XHR（XMLHttpRequest）请求是否成功，并在请求返回时收到正确的响应。XHR请求为API测试提供了额外的验证层，因为我们可以确认预期数据的结构与前端应用程序中收到的数据类似。
- en: Important note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: XHR works as an API but is represented in the form of an object, and its main
    purpose is to transfer data between a given web server and a web browser.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: XHR作为API工作，但以对象的形式表示，其主要目的是在给定的Web服务器和Web浏览器之间传输数据。
- en: Visual regression tests check the consistency of the elements in a page by comparing
    a page snapshot of the baseline to that of the latest test runs. If differences
    are spotted, then the tests being run will fail. On failure, a snapshot showing
    the differences between expected and generated images is created to show the differences
    between the generated snapshot and the baseline image. After a test run, the QA
    engineer or developer can then accept or reject the changes that have been made
    to the frontend application in relation to the application changes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化回归测试通过比较基线的页面快照和最新测试运行的页面快照来检查页面元素的一致性。如果发现差异，那么正在运行的测试将失败。失败时，将创建一个显示预期图像和生成图像之间差异的快照，以显示生成的快照与基线图像之间的差异。测试运行后，QA工程师或开发人员可以接受或拒绝对前端应用程序所做的更改。
- en: Recap – Cypress for frontend applications
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾-用于前端应用程序的Cypress
- en: In this section, we learned why Cypress is the most suitable when it comes to
    testing frontend applications. We learned of different elements that make it a
    preferable testing framework and the way that we can leverage its strengths to
    write better and more exhaustive tests.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了为什么Cypress在测试前端应用程序时是最合适的。我们了解了使其成为首选测试框架的不同因素，以及如何利用其优势来编写更好、更全面的测试。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: It is without a doubt that Cypress is a powerful tool that can be leveraged
    by frontend teams and QA engineers to quickly get started and write tests without
    worrying about the overhead that comes with building test automation tools from
    the ground up. In this chapter, we learned why Cypress is the best web automation
    framework for testing, and we did this by comparing the different tools between
    Cypress and existing test automation tools. We also covered the differences between
    Cypress and Selenium, and the specific architectural similarities and differences
    between the two. Finally, we explored how we can leverage the tools. In the next
    chapter, we will learn how to use command-line tools to run, test, and debug Cypress
    tests.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，Cypress是一个强大的工具，可以被前端团队和质量保证工程师利用，快速开始编写测试，而不必担心从头开始构建测试自动化工具所带来的额外开销。在本章中，我们了解了为什么Cypress是用于测试的最佳Web自动化框架，我们通过比较Cypress和现有测试自动化工具之间的不同工具来做到这一点。我们还介绍了Cypress和Selenium之间的区别，以及两者之间的特定架构相似性和差异性。最后，我们探讨了如何利用这些工具。在下一章中，我们将学习如何使用命令行工具来运行、测试和调试Cypress测试。
