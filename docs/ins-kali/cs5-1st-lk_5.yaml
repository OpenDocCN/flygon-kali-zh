- en: Chapter 5. Mobile Web App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。移动Web应用
- en: 'In the previous chapter, we looked at the creation of a native desktop application,
    meant for distribution on the Windows Store. In this chapter, we will create a
    web application that lets a user log in, and see other users in the same physical
    area on a map. We will be using the following technologies:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了一个用于在Windows商店分发的本机桌面应用程序的创建。在本章中，我们将创建一个Web应用程序，让用户登录，并在地图上看到与自己在同一物理区域的其他用户。我们将使用以下技术：
- en: '**ASP.NET MVC 4**: This lets you build web applications using the Model-View-Controller
    design pattern and asynchronous programming'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET MVC 4**：这让你可以使用模型-视图-控制器设计模式和异步编程构建Web应用程序'
- en: '**SignalR**: This is an asynchronous two-way communication framework'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**：这是一个异步的双向通信框架'
- en: '**HTML5 GeoLocation**: This provides real-world location to the application'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML5 GeoLocation**：为应用程序提供真实世界的位置'
- en: '**Client-side mapping with Google**: This is to visualize geospatial information'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Google进行客户端地图映射**：这是为了可视化地理空间信息'
- en: These technologies together let you create very powerful web applications, and
    with ASP.NET MVC 4—which was released along with C# 5—it is easier than ever to
    create mobile applications that are easily accessible to everyone over the Internet.
    By the end of this chapter, we will have a web application which uses modern browser
    features such as WebSockets lets you to connect with other web users that are
    physically in your vicinity. All of this makes choosing the C# technology stack
    a very compelling option for creating web applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术共同让你创建非常强大的Web应用程序，并且借助与C# 5一同发布的ASP.NET MVC 4，现在更容易创建可以轻松访问互联网的移动应用程序。在本章结束时，我们将拥有一个Web应用程序，它使用现代浏览器功能，如WebSockets，让你与其他在你附近的Web用户连接。所有这些都使选择C#技术栈成为创建Web应用程序的一个非常引人注目的选择。
- en: Mobile Web with ASP.NET MVC
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ASP.NET MVC的移动Web
- en: ASP.NET has evolved as a server platform that supports a number of different
    products. On the web side, we have Web Forms and MVC. On the service side we have
    ASMX web services, **Windows Communication Framework** (**WCF**), and Web Services,
    even some open source technologies, such as ServiceStack have emerged.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET已经发展成为支持多种不同产品的服务器平台。在Web端，我们有Web Forms和MVC。在服务端，我们有ASMX Web服务、**Windows通信框架**（**WCF**）和Web服务，甚至一些开源技术，如ServiceStack也已经出现。
- en: 'Development for the Web can be summarized as a melting pot of technologies.
    A successful web developer should be well-versed in HTML, CSS, JavaScript, and
    the HTTP protocol. In this sense, web development can help you develop into a
    polyglot programmer, someone who can work in several programming languages. We
    will use ASP.NET MVC for this project because of the way it applies the Model-View-Controller
    design pattern in the context of web development, while at the same time allowing
    each contributing technology the chance to do what it does best. It is shown in
    the following diagram:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Web开发可以被总结为技术的大熔炉。成功的Web开发人员应该精通HTML、CSS、JavaScript和HTTP协议。在这个意义上，Web开发可以帮助你成为一名多语言程序员，可以在多种编程语言中工作。我们将在这个项目中使用ASP.NET
    MVC，因为它在Web开发的背景下应用了模型-视图-控制器设计模式，同时允许每个贡献的技术有机会发挥其所长。它在下图中显示：
- en: '![Mobile Web with ASP.NET MVC](img/6761EN_05_06.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用ASP.NET MVC的移动Web](img/6761EN_05_06.jpg)'
- en: Your **Model** blocks will be all the code that contains your business logic,
    and the code that connects to remote services and databases. The **Controller**
    block will retrieve information from your **Model** layer, and pass information
    into it as your user interacts with the **View** block.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你的**模型**块将包含所有包含业务逻辑的代码，以及连接到远程服务和数据库的代码。**控制器**块将从**模型**层检索信息，并在用户与**视图**块交互时将信息传递给它。
- en: An interesting observation with regards to client-side development with JavaScript
    is that many of the application's architecture choices will be very similar to
    when developing any other native application. From the way you have to maintain
    the state of the application in memory, to the way you access and cache remote
    information, there are many parallels.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用JavaScript进行客户端开发的有趣观察是，许多应用程序的架构选择与开发任何其他本机应用程序时非常相似。从在内存中维护应用程序状态的方式到访问和缓存远程信息的方式，有许多相似之处。
- en: Building a MeatSpace tracker
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个MeatSpace跟踪器
- en: On to the application we are going to build!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们要构建的应用程序！
- en: Just as the term **CyberSpace** refers to the digital realm, the term **MeatSpace**
    is colloquially used to refer to things or interactions that happen in the real
    world. The project we are going to create in this chapter is a mobile application
    to help you connect with other users of the web application that are physically
    near you. Something about the juxtaposition of building a mobile website that
    knows your location in the real world is very appealing, because just a few short
    years ago these kinds of applications were impossible on the Web.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如术语**CyberSpace**指的是数字领域一样，术语**MeatSpace**在口语中用来指代在现实世界中发生的事物或互动。我们将在本章中创建的项目是一个移动应用程序，可以帮助你与Web应用程序的其他用户在你附近的物理位置进行连接。构建一个在真实世界中知道你位置的移动网站的对比非常吸引人，因为就在短短几年前，这类应用程序在Web上是不可能的。
- en: '![Building a MeatSpace tracker](img/6761_05_07.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![构建一个MeatSpace跟踪器](img/6761_05_07.jpg)'
- en: This application will use the HTML 5 geolocation APIs to let you see other users
    of the application on a map. When a user connects, it will open a persistent connection
    to the server using SignalR, an open source project that was started by several
    Microsoft employees.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序将使用HTML 5地理位置API来让你在地图上看到应用程序的其他用户。当用户连接时，它将使用SignalR与服务器建立持久连接，这是一个由几名微软员工发起的开源项目。
- en: Iteration zero
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代零
- en: Before we can begin writing code, we have to start the project, **iteration
    zero** . We start by creating a new ASP.NET MVC 4 project, as shown in the following
    screenshot. In this example, I am using Visual Studio 2012 Express for Web, though
    of course the full version of Visual Studio 2012 will work as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，我们必须启动项目，**迭代零**。我们首先创建一个新的ASP.NET MVC 4项目，如下截图所示。在这个例子中，我正在使用Visual
    Studio 2012 Express for Web，当然，完整版本的Visual Studio 2012也可以使用。
- en: '![Iteration zero](img/6761_05_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![迭代零](img/6761_05_01.jpg)'
- en: 'Once you have chosen the MVC 4 project, you are presented with a dialog of
    several different kinds of project templates. As we want our web application to
    be accessible from a mobile phone, we choose one of the new project templates
    included in Visual Studio 2012, **Mobile Application**. This template comes preloaded
    with a number of helpful JavaScript libraries listed as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了MVC 4项目，就会出现一个对话框，其中包含几种不同类型的项目模板。由于我们希望我们的Web应用程序可以从手机访问，所以我们选择Visual
    Studio 2012中包含的新项目模板之一，**Mobile Application**。该模板预装了一些有用的JavaScript库，列举如下：
- en: '**jQuery** and **jQuery.UI**: This is a very popular library for simplifying
    access to the HTML DOM. The UI portion of the library provides a nice widget toolkit
    that works across browsers with controls such as date pickers.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery**和**jQuery.UI**：这是一个非常流行的库，用于简化对HTML DOM的访问。该库的UI部分提供了一个漂亮的小部件工具包，可在各种浏览器上使用，包括日期选择器等控件。'
- en: '**jQuery.Mobile**: This provides a framework to create mobile-friendly web
    applications.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery.Mobile**：这提供了一个框架，用于创建移动友好的Web应用程序。'
- en: '**KnockoutJS**: This is a JavaScript binding framework that lets you implement
    the Model-View-ViewModel pattern.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KnockoutJS**：这是一个JavaScript绑定框架，可以让您实现Model-View-ViewModel模式。'
- en: '**Modernizr**: This allows you to do rich feature detection, instead of looking
    at the browser''s user agent string to determine what features you can count on.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Modernizr**：这允许您进行丰富的功能检测，而不是查看浏览器的用户代理字符串来确定您可以依赖的功能。'
- en: We will not be using all of these libraries, and of course you could use different
    JavaScript libraries if you so choose. But these provide a convenient starting
    point. You should take some time to get familiar with the files created by the
    project template.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不会使用所有这些库，当然，您也可以选择不同的JavaScript库。但这些提供了一个方便的起点。您应该花一些时间熟悉项目模板创建的文件。
- en: The first thing you should look at is the main `HomeController` class, as this
    is (by default) the entry point of your application. There is some placeholder
    text included by default; you can easily change this to suit the application you
    are building. For our purposes we just change some of the text to act as simple
    information, and a call to action for the user to sign up.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该首先查看主`HomeController`类，因为这是（默认情况下）应用程序的入口点。默认情况下包含一些占位文本；您可以轻松更改此文本以适应您正在构建的应用程序。对于我们的目的，我们只需更改一些文本，以充当简单的信息，并鼓励用户注册。
- en: 'Modify the `Views/Home/Index.cshtml` file as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`Views/Home/Index.cshtml`文件如下：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note the `@ViewBag.Message` header, you can change this particular value in
    the `Index` action method of the `HomeController` class as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`@ViewBag.Message`标题，您可以按照以下方式更改`HomeController`类的`Index`操作方法中的特定值：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are other views which you can change to add your own information, such
    as the about and contact pages, but they are not critical for the purposes of
    this particular demonstration.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他视图，您可以更改以添加自己的信息，例如关于和联系页面，但对于这个特定的演示目的来说，它们并不是关键的。
- en: Going asynchronous
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行异步操作
- en: One of the most powerful additions to this latest version of ASP.NET MVC is
    the ability to use new `async` and `await` keywords in C# 5 to write asynchronous
    action methods. To be clear, you have had the ability to create asynchronous action
    methods since ASP.NET MVC 2, but they were rather ungainly and difficult to use.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET MVC的最新版本中最强大的新增功能之一是能够使用C# 5中的新`async`和`await`关键字编写异步操作方法。要清楚，自ASP.NET
    MVC 2以来，您就已经有了创建异步操作方法的能力，但它们相当笨拙且难以使用。
- en: You had to manually keep track of the number of asynchronous operations that
    were going on, and then let the asynchronous controller know when they were complete
    so that it could finalize the response. In ASP.NET MVC 4 this is no longer necessary.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须手动跟踪正在进行的异步操作的数量，然后让异步控制器知道它们何时完成，以便它可以完成响应。在ASP.NET MVC 4中，这不再是必要的。
- en: As an example, we can rewrite the `Index` method that we went over in the previous
    section, to be asynchronous. Let's say that we wanted the message that we print
    in the title of the landing page to come from a database. Because that would likely
    be communicating with a database server on another machine, it is a perfect candidate
    for an asynchronous method.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以重写我们在上一节中讨论的`Index`方法，使其成为异步的。假设我们希望在登陆页面的标题中打印的消息来自数据库。因为这可能需要与另一台机器上的数据库服务器通信，所以这是一个完美的异步方法候选者。
- en: 'First, create an awaitable method that will serve as a placeholder for retrieving
    the message from the database as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个可等待的方法，用作从数据库中检索消息的占位符，如下所示：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Of course in your actual code, this would connect to a database, as an example,
    it simply introduces a very small delay before returning the string. Now you can
    rewrite the `Index` method as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在您的实际代码中，这将连接到数据库，例如，它只是在返回字符串之前引入了一个非常小的延迟。现在，您可以按照以下方式重写`Index`方法：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see the changes to the method highlighted in the previous code, all
    you have to do is add the `async` keyword to the method, make the return value
    a `Task<ActionResult>` class, and then use `await` in the method body somewhere.
    And that's it! Your method will now let the ASP.NET runtime optimize its resources
    as best as possible by processing other requests while it is waiting for your
    method to finish processing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在先前代码中突出显示的方法的更改，您只需向方法添加`async`关键字，将返回值设置为`Task<ActionResult>`类，然后在方法体中使用`await`。就是这样！现在，您的方法将允许ASP.NET运行时通过处理其他请求来最大程度地优化其资源，同时等待您的方法完成处理。
- en: Getting the user's location
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户位置
- en: Once we have defined our initial landing page, we can start looking at the logged
    in interface. Remember that the stated goal of our application is to help you
    connect with other users in the real world. To do so, we will use a feature that
    is included in many of the modern browsers, including mobile browsers, to retrieve
    the user's location. To connect everyone together, we will also use a library
    called **SignalR** , which lets you establish a two-way communication channel
    with the user's browser.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了初始着陆页面，我们就可以开始查看已登录的界面。请记住，我们应用程序的明确目标是帮助您在现实世界中与其他用户建立联系。为此，我们将使用包括移动浏览器在内的许多现代浏览器中包含的一个功能，以检索用户的位置。为了将所有人连接在一起，我们还将使用一个名为**SignalR**的库，它可以让您与用户的浏览器建立双向通信渠道。
- en: 'The project''s website describes itself simply as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的网站简单地描述如下：
- en: Async library for .NET to help build real-time, multi-user interactive web applications.
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: .NET的异步库，用于帮助构建实时的、多用户交互式的Web应用程序。
- en: 'With SignalR, you can write an application that lets you communicate bidirectionally
    to and from the user''s browser. So rather than waiting for the browser to initiate
    communication with the server, you can actually call out and send information
    to the browser from the server. Interestingly, SignalR is open source, so you
    can dig into the implementation if you are curious. But for our purposes, we will
    start by adding a reference to our web application. You can do so easily through
    Nuget by running the following command in the package management console:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SignalR，您可以编写一个应用程序，让您可以双向与用户的浏览器进行通信。因此，您不必等待浏览器与服务器发起通信，实际上您可以从服务器调用并向浏览器发送信息。有趣的是，SignalR是开源的，因此您可以深入了解其实现。但是对于我们的目的，我们将首先向我们的Web应用程序添加一个引用。您可以通过Nuget轻松实现这一点，只需在包管理控制台中运行以下命令：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Or if you would prefer to use the GUI tools, you can right-click on your project's
    reference nodes and choose **Manage NuGet Packages**. From there you can search
    for the SignalR package and click on the **Install** button.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您更喜欢使用GUI工具，可以右键单击项目的引用节点，然后选择**管理NuGet包**。从那里，您可以搜索SignalR包并单击**安装**按钮。
- en: 'With that dependency installed, we can begin sketching out the interface that
    our users will see when they are logged in, and provide us with the primary functionality
    of the app. We start the process of adding the new screen by adding a new controller
    to the `Controllers` folder using the `Empty MVC Controller` template. Name the
    class `MapController` as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了该依赖项后，我们可以开始勾画用户在登录时将看到的界面，并为我们提供应用程序的主要功能。我们通过使用`Empty MVC Controller`模板向`Controllers`文件夹添加一个新的控制器来开始添加新屏幕的过程。将类命名为`MapController`，如下所示：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By default, the file you create will look like the one in the previous code;
    make note of the controller prefix (`Map`), and action method name (`Index`).
    After you have created the controller, you can add the view which, as per the
    conventions, uses the controller name and action method name.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您创建的文件将与先前代码中的文件相似；请注意控制器前缀（`Map`）和操作方法名称（`Index`）。创建控制器后，您可以添加视图，根据约定，使用控制器名称和操作方法名称。
- en: 'First, add a folder to the `Views` folder named `Map`, all views for this controller
    will go in here. In that folder, add a view called `Index.cshtml`. Make sure to
    select the `Razor` view engine, if it''s not chosen already. The generated razor
    file is pretty bare, it just sets the title of the page (using a razor code block),
    and then outputs a heading with the name of the action as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`Views`文件夹中添加一个名为`Map`的文件夹，所有此控制器的视图都将放在这里。在该文件夹中，添加一个名为`Index.cshtml`的视图。确保选择`Razor`视图引擎，如果尚未选择。生成的razor文件非常简单，它只是设置页面的标题（使用razor代码块），然后输出一个带有操作名称的标题，如下所示：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we can start modifying this view and adding the geolocation features. Add
    the following block of code to the bottom of `Views/map/Index.cshtml`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始修改此视图并添加地理位置功能。将以下代码块添加到`Views/map/Index.cshtml`的底部：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This scripts' section is defined in the site-wide template and makes sure to
    render the script reference in the correct order so that all other primary dependencies,
    such as jQuery, are already referenced.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本部分在站点范围模板中定义，并确保以正确的顺序呈现脚本引用，以便所有其他主要依赖项（例如jQuery）已被引用。
- en: 'Next we create the `map.js` file that we referenced in the previous code, which
    will hold all of our JavaScript code. The first thing we want to do in our application
    is to get our geolocation working. Add the following code to `map.js` to get an
    understanding of how the user''s location is obtained:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了在先前代码中引用的`map.js`文件，其中将保存我们所有的JavaScript代码。在我们的应用程序中，首先要做的是让我们的地理位置工作起来。将以下代码添加到`map.js`中，以了解如何获取用户的位置：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This starts with a function definition being passed to jQuery, which will be
    executed when the DOM has been loaded. In that method, we get a reference to the
    `navigator.geolocation` property. If that object exists (for example, the browser
    implements geolocation), then we call the `.getCurrentPosition` method and pass
    in two callbacks, which we define as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这从一个传递给jQuery的函数定义开始，当DOM加载完成时将执行该函数。在该方法中，我们获取对`navigator.geolocation`属性的引用。如果该对象存在（例如，浏览器实现了地理位置），那么我们调用`.getCurrentPosition`方法并传入两个我们定义的回调函数，如下所示：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once you have saved `map.js` with the previous code, you can run the web application
    (*F5*) to see how it behaves. As you can see in the following screenshot, the
    user will be prompted to accept whether they want the web application to track
    their whereabouts. If they click on **Allow**, the `userAccepted` method will
    be executed. If they click on **Deny**, the `userDenied` message will be executed.
    You can use this method to adjust your application accordingly, when no location
    is provided.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 保存了带有上述代码的`map.js`后，您可以运行Web应用程序（*F5*）以查看其行为。如下截图所示，用户将被提示是否要允许Web应用程序跟踪他们的位置。如果他们点击**允许**，将执行`userAccepted`方法。如果他们点击**拒绝**，将执行`userDenied`消息。当未提供位置时，您可以使用此方法来相应地调整应用程序。
- en: '![Getting the user''s location](img/6761_05_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![获取用户位置](img/6761_05_02.jpg)'
- en: Broadcasting with SignalR
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SignalR进行广播
- en: With the user's location established, the next part of the process will involve
    using SignalR to broadcast everybody's location to every other user that is connected.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的位置确定后，接下来的过程将涉及使用SignalR将每个连接的用户的位置广播给其他每个用户。
- en: 'The first thing we can do is add script references for SignalR by adding the
    following two lines to the script references in `Views/Map/Index.cshtml`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的第一件事是通过在`Views/Map/Index.cshtml`的脚本引用中添加以下两行来为SignalR添加脚本引用：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This initializes the SignalR infrastructure and allows us to build out the client
    side of the application before we implement the server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将初始化SignalR基础设施，并允许我们在实现服务器之前构建应用程序的客户端部分。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the time of writing, Version 0.5.3 of the `jQuery.signalR` library was the
    latest one. Depending on when you read this book, there's a good chance this version
    will have changed. Simply look at the `Scripts` directory after you add the SignalR
    dependency via Nuget to see what version you should use here.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`jQuery.signalR`库的版本0.5.3是最新版本。根据您阅读本书的时间，这个版本很可能已经改变。只需在通过Nuget添加SignalR依赖项后查看`Scripts`目录，以查看您应该在此处使用哪个版本。
- en: 'Next, erase all of the previous contents of the `map.js` class. To keep things
    organized, we begin by declaring a JavaScript class with a few methods, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，删除`map.js`类的所有先前内容。为了保持组织，我们首先声明一个JavaScript类，其中包含一些方法，如下所示：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will recognize the `initializeLocation` method as the same code we had in
    there previously to initialize the geolocation API. In this version, the initialization
    function passes another function, `geoAccepted`, as the callback that executes
    when the user accepts the location prompt. The final function, `onNewPosition`,
    is meant to execute when somebody notifies the server of a new position. SignalR
    will broadcast the location and execute this function to let this script know
    the name of the user, and their new coordinate.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您将认出`initializeLocation`方法，它与我们先前在其中初始化地理位置API的代码相同。在此版本中，初始化函数传递了另一个函数`geoAccepted`，作为用户接受位置提示时执行的回调。最终函数`onNewPosition`旨在在有人通知服务器有新位置时执行。SignalR将广播位置并执行此函数，以让此脚本知道用户的名称和他们的新坐标。
- en: 'When the page loads, we want to initialize the connection to SignalR, and in
    the process use the object that we just created in the variable named `app`, and
    this can be done as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时，我们希望初始化与SignalR的连接，并在此过程中使用我们刚刚在名为`app`的变量中创建的对象，可以按如下方式完成：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Hubs** , in SignalR, is a very simple way of exposing methods that can be
    invoked easily by JavaScript code on the client. Add a new class to your `Models`
    folder called `ServerHub` as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hubs**，在SignalR中，是一种非常简单的方式，可以轻松地由客户端的JavaScript代码调用方法。在`Models`文件夹中添加一个名为`ServerHub`的新类，如下所示：'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are defining a single method in this hub, `notifyNewPosition` , which accepts
    a string. When we get the coordinates from a user, this method will broadcast
    it to all other connected users. To do so, the code first gets the user's name
    and then calls the `.onNewPosition` method to broadcast the name and coordinate
    with all connected users.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在此hub中定义了一个方法`notifyNewPosition`，它接受一个字符串。当我们从用户那里获得坐标时，此方法将将其广播给所有其他连接的用户。为此，代码首先获取用户的名称，然后调用`.onNewPosition`方法将名称和坐标与所有连接的用户一起广播。
- en: It is interesting to note that the `Clients` property is a dynamic type, so
    `onNewPosition` doesn't actually exist as a method on that property. The name
    of that method is used to automatically generate the client-side method that is
    called from the JavaScript code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，`Clients`属性是一个动态类型，因此`onNewPosition`实际上并不存在于该属性的方法中。该方法的名称用于自动生成从JavaScript代码调用的客户端方法。
- en: 'In order to ensure that the user is logged in when they visit the page, all
    we have to do is add the `[Authorize]` attribute to the top of the `MapController`
    class as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保用户在访问页面时已登录，我们只需在`MapController`类的顶部添加`[Authorize]`属性，如下所示：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Press *F5* to run your application and see how we are doing. If everything
    is in working order, you will see a screen like the one shown in the following
    screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*F5*运行您的应用程序，看看我们的进展如何。如果一切正常，您将看到如下截图所示的屏幕：
- en: '![Broadcasting with SignalR](img/6761_05_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用SignalR进行广播](img/6761_05_03.jpg)'
- en: As people join the site, their location is acquired and pushed to everyone else.
    Meanwhile, on the client side, when a new location is received, we append a new
    list item element detailing the name and coordinate that was just received.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们加入网站时，他们的位置被获取并推送给其他人。同时，在客户端，当收到新的位置时，我们会添加一个新的列表项元素，详细说明刚刚收到的名称和坐标。
- en: We are slowly building up our features one by one, once we have verified that
    this works, we can start fleshing out the next piece.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在逐步逐一地构建我们的功能，一旦我们验证了这一点，我们就可以开始完善下一个部分。
- en: Mapping users
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射用户
- en: With location information being pushed to everyone, we can start displaying
    their location on a map. For this sample, we are going to use Google Maps, but
    you could easily use Bing, Nokia, or OpenStreet maps. But the idea is to give
    you a spatial reference to see who else is viewing the same web page and where
    they are relative to you in the world.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随着位置信息被推送给每个人，我们可以开始在地图上显示他们的位置。对于这个示例，我们将使用Google Maps，但您也可以轻松地使用Bing、Nokia或OpenStreet地图。但是，这个想法是为您提供一个空间参考，以查看谁还在查看相同的网页，以及他们相对于您在世界上的位置。
- en: 'Start by adding an HTML element to hold the map to `Views/Map/Index.cshtml`,
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`Views/Map/Index.cshtml`中添加一个HTML元素来保存地图，如下所示：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This `<div>` will serve as a container for the actual map, and will be managed
    by the Google Maps API. Next add the JavaScript to the scripts section above the
    `map.js` reference as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`<div>`将作为实际地图的容器，并将由Google Maps API管理。接下来在`map.js`引用上面的脚本部分添加JavaScript，如下所示：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As with the SignalR scripts, we just need to ensure that it is referenced before
    our own script (`map.js`) so that it is available in our source. Next we add code
    to initialize the map as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与SignalR脚本一样，我们只需要确保它在我们自己的脚本(`map.js`)之前被引用，以便在我们的源中可用。接下来，我们添加代码来初始化地图，如下所示：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This function will be invoked when the location is obtained. It works by taking
    the user's initially reported location, and passing a reference to the `<div>`
    HTML element we created earlier with the `map` ID to a new instance of `google.maps.Map`
    object, setting the center of the map to the user's reported location. If the
    function is called again, it will simply set the center of the map to the user's
    coordinates.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当获取位置时，将调用此函数。它通过获取用户最初报告的位置，并将对`map` ID的`<div>` HTML元素的引用传递给`google.maps.Map`对象的新实例，将地图的中心设置为用户报告的位置。如果再次调用该函数，它将简单地将地图的中心设置为用户的坐标。
- en: 'To show all the locations, we will use a feature of Google Maps to be able
    to drop a marker onto the map. Add the following function to `map.js`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示所有位置，我们将使用Google Maps的一个功能来在地图上放置一个标记。将以下函数添加到`map.js`中：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This method keeps track of the markers that have been added by using an associative
    JavaScript array, which is similar to a `Dictionary<string, object>` collection
    in C#. When a user reports a new position, it will take the existing marker and
    move it to the new position. So this means that, for every unique user that signs
    in, the map will display a marker and then move it every time a new location is
    reported.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法通过使用一个关联的JavaScript数组来跟踪已添加的标记，类似于C#中的`Dictionary<string, object>`集合。当用户报告新位置时，它将获取现有的标记并将其移动到新位置。这意味着，对于每个登录的唯一用户，地图将显示一个标记，然后每次报告新位置时都会移动它。
- en: 'Finally, we make three small changes to the existing functions in the app object
    to interact with the map. First in `initializeLocation`, we change from `getCurrentPosition`
    to use the `watchPosition` method as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们对应用对象中的现有函数进行了三个小的更改，以便与地图进行交互。首先在`initializeLocation`中，我们从`getCurrentPosition`更改为使用`watchPosition`方法，如下所示：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `watchPosition` method will update the user's location every time it changes,
    which should result in a real-time view of all the locations as they report it
    to the server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`watchPosition`方法将在用户位置发生变化时更新用户的位置，这应该导致所有位置的实时视图，因为它们将其报告给服务器。'
- en: 'Next, we update the `geoAccepted` method, which is run every time the user
    gets a new coordinate. We can take advantage of this event to initialize the map
    before we notify the server of the new position as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们更新`geoAccepted`方法，该方法在用户获得新坐标时运行。我们可以利用这个事件在通知服务器新位置之前初始化地图，如下所示：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Lastly, in the method that notifies our page whenever a new position is reported
    by a user, we add a call to the `addMarker` function as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在通知我们的页面每当用户报告新位置时的方法中，我们添加一个调用`addMarker`函数，如下所示：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Testing the app
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试应用
- en: When the time comes to test the application, you can do some of the preliminary
    testing locally on your own computer. But it means that you will always have only
    a single marker in the middle of the map (that is you). In order to do a deeper
    test, you will need to deploy your web application to a server accessible from
    the Internet.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试应用程序时，您可以在自己的计算机上进行一些初步测试。但这意味着您将始终只有一个标记位于地图的中心（即您）。为了进行更深入的测试，您需要将您的Web应用程序部署到可以从互联网访问的服务器上。
- en: There are many options available, ranging from free (great for testing) to solutions
    that cost money. And of course you can always set up a server with IIS on your
    own and manage it that way. A great resource for finding a host can be found on
    the ASP.NET site at the URL [http://www.asp.net/hosting](http://www.asp.net/hosting).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的选项，从免费（用于测试）到需要付费的解决方案。当然，您也可以自己设置一个带有IIS的服务器并以这种方式进行管理。在ASP.NET网站的URL
    [http://www.asp.net/hosting](http://www.asp.net/hosting)上可以找到一个寻找主机的好资源。
- en: 'Once the application has been uploaded to the server, try accessing it from
    various different devices in different places. The next three screenshots demonstrate
    proof of the app working on the desktop:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序上传到服务器，尝试从不同的设备和不同的地方访问它。接下来的三个屏幕截图证明了应用程序在桌面上的工作：
- en: '![Testing the app](img/6761_05_04.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用](img/6761_05_04.jpg)'
- en: 'On an iPad you will see the following screen:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPad上，您将看到以下屏幕：
- en: '![Testing the app](img/6761_05_05.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用](img/6761_05_05.jpg)'
- en: 'And on an iPhone you will see the following screen:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPhone上，您将看到以下屏幕：
- en: '![Testing the app](img/6761_05_08.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![测试应用](img/6761_05_08.jpg)'
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'There you have it… a web application that takes your physical location, and
    connects you in real time to other users of the app. To do this, we explored a
    variety of technologies that any modern web developer, and in particular, ASP.NET
    developer should be familiar with: ASP.NET MVC, SignalR, HTML5 GeoLocation, and
    client-side mapping with Google Maps.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样……一个Web应用程序，可以根据您的实际位置，实时连接您与该应用程序的其他用户。为此，我们探索了各种技术，任何现代Web开发人员，特别是ASP.NET开发人员都应该熟悉：ASP.NET
    MVC，SignalR，HTML5 GeoLocation以及使用Google Maps进行客户端地图绘制。
- en: 'The following are some ideas that you could use to extend this sample:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些您可以用来扩展此示例的想法：
- en: Consider persisting the user's last known location in a database such as SQL
    Server or MongoDB
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑将用户的最后已知位置持久化存储在诸如SQL Server或MongoDB之类的数据库中
- en: Think about how you can scale this kind of application to support more users
    (**l**ook at the `SignalR.Scaleout` library)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑如何扩展这种应用程序以支持更多用户（查看`SignalR.Scaleout`库）
- en: Limit the users that you notify to only those within a certain distance (learn
    how to calculate distance between two points on the globe with the haversine formula)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将通知的用户限制为仅在一定距离内的用户（学习如何使用haversine公式计算地球上两点之间的距离）
- en: Show points of interest that are near the user with one of the various location
    databases that are available on the Web such as the FourSquare Venus API, or the
    FaceBook Places API.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示用户附近的兴趣点，可以使用Web上可用的各种位置数据库，如FourSquare Venus API或FaceBook Places API。
