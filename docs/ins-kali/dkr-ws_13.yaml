- en: 13\. Monitoring Docker Metrics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13. 监控Docker指标
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will provide you with the skills needed to set up a monitoring
    environment for your system to start collecting container and resource metrics.
    By the end of this chapter, you will be able to devise a monitoring strategy for
    your metrics and determine what you need to think about before you start development
    on your project. You will also implement a basic Prometheus configuration on your
    system. The chapter will extend your knowledge of Prometheus by exploring the
    user interface, the PromQL query language, configuration options, and the collection
    of your Docker and application metrics. It will also enhance your visualizations
    and dashboarding with the inclusion of Grafana as part of your Prometheus installation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供设置系统监控环境以开始收集容器和资源指标所需的技能。通过本章结束时，您将能够为您的指标制定监控策略，并确定在开始项目开发之前需要考虑的事项。您还将在系统上实施基本的Prometheus配置。本章将通过探索用户界面、PromQL查询语言、配置选项以及收集Docker和应用程序指标来扩展您对Prometheus的了解。它还将通过将Grafana作为Prometheus安装的一部分来增强您的可视化和仪表板功能。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter of this book, we spent some time investigating how our
    containers use resources on their host system. We did this to ensure our applications
    and containers were running as efficiently as possible, but when we start to move
    our applications and containers into a larger production environment, using command-line
    tools such as `docker stats` will start to become cumbersome. You'll notice that
    as the number of your containers increases, it becomes difficult to understand
    the metrics by only using the `stats` command. As you'll see in the following
    pages, with a little bit of planning and configuration, setting up monitoring
    for our container environment will allow us to easily keep track of how our containers
    and system are functioning and ensure uptime for our production services.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的上一章中，我们花了一些时间研究了我们的容器如何在其主机系统上使用资源。我们这样做是为了确保我们的应用程序和容器尽可能高效地运行，但是当我们开始将我们的应用程序和容器转移到更大的生产环境时，使用诸如`docker
    stats`之类的命令行工具将变得繁琐。您会注意到，随着您的容器数量的增加，仅使用`stats`命令来理解指标变得困难。正如您将在接下来的页面中看到的，通过一点规划和配置，为我们的容器环境设置监控将使我们能够轻松跟踪我们的容器和系统的运行情况，并确保我们的生产服务的正常运行时间。
- en: As we move into more agile development processes, the development of applications
    needs to incorporate the monitoring of our applications. Having a clear plan to
    monitor our applications at the start of the project will allow developers to
    incorporate monitoring tools as part of their development process. This means
    that it is important to have a clear understanding of how we're planning to collect
    and monitor our applications even before we create them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们转向更敏捷的开发流程，应用程序的开发需要纳入对应用程序的监控。在项目开始阶段制定清晰的应用程序监控计划将允许开发人员将监控工具纳入其开发流程。这意味着在创建应用程序之前，就有必要清楚地了解我们计划如何收集和监控我们的应用程序。
- en: In addition to applications and services, it is also important to monitor the
    infrastructure, orchestration, and containers that run in our environments so
    that we have a complete view of everything that is happening in our environment.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除了应用程序和服务之外，监控基础设施、编排和在我们环境中运行的容器也很重要，这样我们就可以全面了解我们环境中发生的一切。
- en: 'Some things you will need to consider when you establish your metrics monitoring
    policy are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在制定指标监控政策时，您需要考虑以下一些事项：
- en: '**Applications and Services**: This includes third-party applications on which
    your code may be relying that don''t reside on your hardware. It would also include
    the orchestration services your applications are running on.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序和服务**：这包括您的代码可能依赖的第三方应用程序，这些应用程序不驻留在您的硬件上。它还将包括您的应用程序正在运行的编排服务。'
- en: '**Hardware**: It is sometimes good to step back and make sure you take note
    of all the hardware your services rely on as well, including databases, API gateways,
    and servers.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件**：有时候，退一步并确保您注意到所有您的服务所依赖的硬件，包括数据库、API网关和服务器，是很有必要的。'
- en: '**Services to Monitor and Alert**: As your applications grow, you may not only
    want to monitor a specific service or web page; you may also want to ensure that
    users are able to perform all the transactions. This could increase the complexity
    of your alerting and monitoring system.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要监控和警报的服务**：随着您的应用程序增长，您可能不仅想要监控特定的服务或网页；您可能还想确保用户能够执行所有的交易。这可能会增加您的警报和监控系统的复杂性。'
- en: '**Dashboarding and Reporting**: Dashboards and reports can provide a lot of
    useful information to non-technical users.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表板和报告**：仪表板和报告可以为非技术用户提供大量有用的信息。'
- en: '**What Application Fits Your Needs**: If you are working for a larger company,
    they will most likely have a list of applications you can choose from. It should
    not be one size fits all though. The application you decide to use to monitor
    your environment should be fit for purpose and agreed upon by everyone involved
    in the project.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适合您需求的应用程序**：如果您在一家较大的公司工作，他们很可能会有一个您可以选择的应用程序列表。但这并不意味着一刀切。您决定用来监控您的环境的应用程序应该适合特定目的，并得到项目中所有相关人员的认可。'
- en: This is where **Prometheus** comes in. In this chapter, we will use Prometheus
    as a monitoring solution as it is widely adopted, open-source, and free to use.
    There are a number of other free and enterprise applications available in the
    market that provide similar monitoring, including self-hosted applications such
    as Nagios and SCOM, through to newer subscription-based services, including New
    Relic, Sumo Logic, and Datadog. Prometheus was built from a specific need to monitor
    services on the cloud. It provides class-leading functionality that is ahead of
    the other major players in the market.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**Prometheus**发挥作用的地方。在本章中，我们将使用Prometheus作为监控解决方案，因为它被广泛采用，是开源的，并且免费使用。市场上还有许多其他免费和企业应用程序可提供类似的监控功能，包括自托管的应用程序，如Nagios和SCOM，以及较新的订阅式服务，包括New
    Relic、Sumo Logic和Datadog。Prometheus是为了监控云上的服务而构建的。它提供了领先市场的功能，领先于其他主要竞争对手。
- en: Some of the other applications also provide log collection and aggregation,
    but we have assigned this to a separate application and will be dedicating our
    next chapter to log management for our Docker environment. Prometheus is only
    focused on metrics collection and monitoring, and as there are suitable free and
    open-source alternatives in log management, it has not moved to incorporate log
    management as part of its focus.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些应用程序还提供日志收集和聚合，但我们已经将这部分分配给了一个单独的应用程序，并将在下一章专门讨论我们的Docker环境的日志管理。Prometheus只专注于指标收集和监控，由于在日志管理方面有合适的免费和开源替代品，它并没有将日志管理纳入其重点范围。
- en: Monitoring Environment Metrics with Prometheus
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prometheus监控环境指标
- en: Prometheus was originally created and developed by SoundCloud as they needed
    a way to monitor their highly dynamic container environments and were not satisfied
    with the current tooling at the time because they felt it didn't fit their needs.
    Prometheus was developed as a way for SoundCloud to monitor not only their containers
    but also the underlying hosting hardware and orchestration running their services.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus最初是由SoundCloud创建和开发的，因为他们需要一种监控高度动态的容器环境的方法，并且当时对当前的工具感到不满意，因为他们觉得它不符合他们的需求。Prometheus被开发为SoundCloud监控他们的容器以及运行其服务的基础托管硬件和编排的一种方式。
- en: Its initial creation was back in 2012, and since then, the project has been
    free and open source and part of the Cloud Native Computing Foundation. It has
    also been widely adopted by companies across the globe needing to gain more insight
    into how their cloud environments are performing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它最初是在2012年创建的，自那时起，该项目一直是免费和开源的，并且是云原生计算基金会的一部分。它还被全球各地的公司广泛采用，这些公司需要更多地了解他们的云环境的性能。
- en: Prometheus works by gathering metrics of interest from our system and stores
    these in its local on-disk, time-series database. It does this by scraping an
    HTTP endpoint provided by the service or application you are collecting data from.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus通过从系统中收集感兴趣的指标并将其存储在本地磁盘上的时间序列数据库中来工作。它通过从服务或应用程序提供的HTTP端点进行抓取来实现这一点。
- en: The endpoint can either be written into the application to provide a basic web
    interface providing metrics related to the application or service, or it can be
    provided by an exporter that will take data from the service or application and
    then expose it in a form that is understandable to Prometheus.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 端点可以被写入应用程序中，以提供与应用程序或服务相关的基本网络界面，提供指标，或者可以由导出器提供，导出器将从服务或应用程序中获取数据，然后以Prometheus能理解的形式暴露出来。
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter mentions the HTTP endpoint on a number of occasions, and this may
    lead to confusion. You will see later in this chapter that the HTTP endpoint is
    a very basic HTTP web page provided by the service or an application. As you'll
    see shortly, this HTTP web page provides a list of all the metrics the service
    exposes to Prometheus and also provides a metrics value that is stored in the
    Prometheus time-series database.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章多次提到了HTTP端点，这可能会引起混淆。您将在本章后面看到，HTTP端点是由服务或应用程序提供的非常基本的HTTP网页。正如您很快将看到的那样，这个HTTP网页提供了服务向Prometheus公开的所有指标的列表，并提供了存储在Prometheus时间序列数据库中的指标值。
- en: 'Prometheus includes a number of components:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus包括多个组件：
- en: '**Prometheus**: The Prometheus application performs the scraping and collecting
    of metrics and stores them in its time-series database.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus**：Prometheus应用程序执行抓取和收集指标，并将其存储在其时间序列数据库中。'
- en: '**Grafana**: The Prometheus binary also includes a basic web interface to help
    you start to query the database. In most cases, Grafana will also be added to
    the environment to allow a more visually appealing interface. It will allow dashboards
    to be created and stored to allow metric monitoring in a much easier manner.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana**：Prometheus二进制文件还包括一个基本的网络界面，帮助您开始查询数据库。在大多数情况下，Grafana也会被添加到环境中，以允许更具视觉吸引力的界面。它将允许创建和存储仪表板，以便更轻松地进行指标监控。'
- en: '**Exporters**: Exporters provide Prometheus with the metrics endpoints needed
    to collect data from the different applications and services. In this chapter,
    we will enable the Docker daemon to export data and install `cAdvisor` to provide
    metrics on the specific containers running on our system.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导出器**：导出器为Prometheus提供了收集来自不同应用程序和服务的数据所需的指标端点。在本章中，我们将启用Docker守护程序来导出数据，并安装`cAdvisor`来提供有关系统上运行的特定容器的指标。'
- en: '**AlertManager**: Although not covered in this chapter, `AlertManager` will
    usually be installed with Prometheus to trigger an alert when services are down
    or other alerts that are triggered in your environment.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AlertManager**：虽然本章未涉及，但通常会与Prometheus一起安装`AlertManager`，以在服务停机或环境中触发的其他警报时触发警报。'
- en: Prometheus also provides a web-based expression browser to allow you to then
    view and aggregate the time-series metrics you have collected using the functional
    PromQL query language. This means you are able to view your data as you collect
    it. The expression browser is a little limited but can be integrated with Grafana
    to allow you to create dashboards, monitoring services, and `AlertManager` to
    allow you to trigger alerts and be notified when needed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus还提供了基于Web的表达式浏览器，允许您使用功能性的PromQL查询语言查看和聚合您收集的时间序列指标。这意味着您可以在收集数据时查看数据。表达式浏览器功能有限，但可以与Grafana集成，以便您创建仪表板、监控服务和`AlertManager`，从而在需要时触发警报并得到通知。
- en: Prometheus is easy to install and configure (as you'll see shortly) and collects
    data on itself to allow you to start testing your application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus易于安装和配置（您很快就会看到），并且可以收集有关自身的数据，以便您开始测试您的应用程序。
- en: Due to the rate of adoption and popularity of Prometheus, many companies have
    created exporters for their applications and services. We will be giving you some
    examples of the exporters available throughout this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Prometheus的采用率和受欢迎程度，许多公司为其应用程序和服务创建了出口器。在本章中，我们将为您提供一些出口器的示例。
- en: It's now time to get your hands dirty. In the following exercise, you will download
    and run the Prometheus binary on your own system to start monitoring the services.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候动手了。在接下来的练习中，您将在自己的系统上下载并运行Prometheus二进制文件，以开始监控服务。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`touch`命令创建文件，并使用`vim`命令在vim编辑器中处理文件。
- en: 'Exercise 13.01: Installing and Running Prometheus'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13.01：安装和运行Prometheus
- en: In this exercise, you will download and unpack the Prometheus binary, start
    the application, and explore the web interface and some basic configurations of
    Prometheus. You will also practice monitoring metrics, such as the total HTTP
    requests made to the Prometheus interface.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您将下载并解压Prometheus二进制文件，启动应用程序，并探索Prometheus的Web界面和一些基本配置。您还将练习监控指标，例如发送到Prometheus接口的总HTTP请求。
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'As of the time of writing this book, the latest version of Prometheus is version
    2.15.1\. The latest version of the application can be found at the following URL:
    https://prometheus.io/download/.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本书时，Prometheus的最新版本是2.15.1。应用程序的最新版本可以在以下网址找到：https://prometheus.io/download/。
- en: 'Locate the latest version of Prometheus to install. Use the `wget` command
    to bring the compressed archive onto your system. The URL you use in your command
    may differ from the one here, depending on your operating system and the version
    of Prometheus you are using:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到最新版本的Prometheus进行安装。使用`wget`命令将压缩的存档文件下载到您的系统上。您在命令中使用的URL可能与此处的URL不同，这取决于您使用的操作系统和Prometheus的版本：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Uncompress the Prometheus archive you downloaded in the previous step using
    the `tar` command. The following command uses the `zxvf` options to unzip the
    file, and then extract the archive and files, with verbose output:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tar`命令解压您在上一步下载的Prometheus存档。以下命令使用`zxvf`选项解压文件，然后提取存档和文件，并显示详细输出：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The archive provides a fully created Prometheus binary application ready to
    be started up. Move into the application directory to look through some of the
    import files included in the directory:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存档提供了一个完全创建的Prometheus二进制应用程序，可以立即启动。进入应用程序目录，查看目录中包含的一些重要文件：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'List the files in the application directory using the `ls` command to look
    into the important files in our application:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ls`命令列出应用程序目录中的文件，以查看我们应用程序中的重要文件：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Make note of the output as it should look similar to the following, with the
    `prometheus.yml` file being our configuration file. The `prometheus` file is the
    application binary and the `tsdb` and data directories are where our time-series
    database data is stored:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意输出，它应该类似于以下内容，其中`prometheus.yml`文件是我们的配置文件。`prometheus`文件是应用程序二进制文件，`tsdb`和数据目录是我们存储时间序列数据库数据的位置：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding directory listing, take note that the `console_libraries` and
    `consoles` directories include the binaries provided to view the Prometheus web
    interface we will work in shortly. The `promtool` directory includes tools you
    can use to work with Prometheus, including a configuration check tool to make
    sure your `prometheus.yml` file is valid.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的目录列表中，请注意`console_libraries`和`consoles`目录包括用于查看我们即将使用的Prometheus Web界面的提供的二进制文件。`promtool`目录包括您可以使用的工具来处理Prometheus，包括一个配置检查工具，以确保您的`prometheus.yml`文件有效。
- en: 'If there is no issue with your binary and the application is ready to run,
    you should be able to verify the version of Prometheus. Run the application from
    the command line using the `--version` option:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的二进制文件没有问题，应用程序已准备就绪，您应该能够验证Prometheus的版本。使用`--version`选项从命令行运行应用程序：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output should look like the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You won''t be making any changes to your configuration file, but before you
    get started, make sure it has valid information for Prometheus. Run the `cat`
    command to view the content of the file:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不会对配置文件进行任何更改，但在开始之前，请确保它包含Prometheus的有效信息。运行`cat`命令查看文件的内容：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The number of lines in the output has been reduced here. As you can see from
    the following output, your global `scrap_interval` parameter and `evaluation_interval`
    parameter is set to `15` seconds:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的行数已经减少。从以下输出中可以看出，全局的`scrap_interval`参数和`evaluation_interval`参数设置为`15`秒：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you have a moment to look over the `prometheus.yml` configuration file,
    you will notice that it is separated into four main sections:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有时间查看`prometheus.yml`配置文件，您会注意到它分为四个主要部分：
- en: '`global`: This controls the server''s global configurations. The configurations
    include `scrape_interval`, to know how often it will scrape the target, and `evaluation_interval`,
    to control how often it will evaluate rules to create time-series data and generate
    rules.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`global`：这控制服务器的全局配置。配置包括`scrape_interval`，用于了解它将多久抓取目标，以及`evaluation_interval`，用于控制它将多久评估规则以创建时间序列数据和生成规则。'
- en: '`alerting`: By default, the configuration file will also have alerting set
    up via AlertManager.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`alerting`：默认情况下，配置文件还将通过AlertManager设置警报。'
- en: '`rule_files`: This is where Prometheus will locate additional rules to load
    as part of its metric gathering. `rule_files` points to a location where the rules
    are stored.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`rule_files`：这是Prometheus将定位为其度量收集加载的附加规则的位置。`rule_files`指向规则存储的位置。'
- en: '`scrape_configs`: These are the resources Prometheus will monitor. Any additional
    targets we wish to monitor will be added to this section of the configuration
    file.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrape_configs`：这些是Prometheus将监视的资源。我们希望监视的任何其他目标都将添加到配置文件的此部分中。'
- en: 'Starting Prometheus is simply a matter of running the binary and specifying
    the configuration file you would like it to use with the `--config.file` command-line
    option. Run the following command to start Prometheus:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Prometheus只是运行二进制文件并使用“--config.file”命令行选项指定要使用的配置文件的简单问题。运行以下命令启动Prometheus：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After a few seconds, you should hopefully see the message that the `"Server
    is ready to receive web requests."`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，您应该会看到消息“服务器已准备好接收Web请求。”：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Enter the URL `http://localhost:9090`. Prometheus provides an easy-to-use web
    interface. If the application has started up correctly, you should now be able
    to open a web browser on your system. You should have the expression browser presented
    to you, similar to the following screenshot.Although the expression browser doesn't
    look very impressive, it does have some good functionality out of the box. It
    is set up in three distinct sections.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入URL `http://localhost:9090`。Prometheus提供了一个易于使用的Web界面。如果应用程序已正确启动，您现在应该能够在系统上打开Web浏览器。应该会呈现给您表达式浏览器，类似于以下屏幕截图。虽然表达式浏览器看起来并不那么令人印象深刻，但它在开箱即用时具有一些很好的功能。它分为三个不同的部分。
- en: '**The Main Menu**: The main menu across the top of the screen, with a black
    background, allows you to view extra configuration details via the `Status` drop-down
    menu, shows you the alert history with the `Alerts` option, and brings you back
    to the main expression browser screen with the `Prometheus` and `Graph` options.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**主菜单**：屏幕顶部的主菜单，黑色背景，允许您通过“状态”下拉菜单查看额外的配置细节，通过“警报”选项查看警报历史，并通过“Prometheus”和“Graph”选项返回主表达式浏览器屏幕。'
- en: '**The Expression Editor**: This is the top textbox where we can enter our PromQL
    queries or select a metric from the drop-down list. You then click on the `Execute`
    button to start displaying data.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**表达式编辑器**：这是顶部的文本框，我们可以在其中输入我们的PromQL查询或从下拉列表中选择指标。然后，单击“执行”按钮开始显示数据。'
- en: '**The Graph and Console Display**: Once you decide what data you wish to query,
    it will be displayed in both the `Console` tab in a table format and in a time-series
    graph format in the `Graph` tab, with the option to add more graphs down the web
    page using the `Add Graph` button:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**图形和控制台显示**：一旦确定要查询的数据，它将以表格格式显示在“控制台”选项卡中，并以时间序列图形格式显示在“图形”选项卡中，您可以使用“添加图形”按钮在网页下方添加更多图形：'
- en: '![Figure 13.1: Loading the expression browser for the first time'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.1：首次加载表达式浏览器'
- en: '](image/B15021_13_01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_01.jpg)'
- en: 'Figure 13.1: Loading the expression browser for the first time'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：首次加载表达式浏览器
- en: 'Click the `Status` drop-down menu. You''ll get to see the following image with
    useful information, including `Runtime & Build Information` to display details
    of the version running, `Command-Line Flags` to run the application with, `Configuration`,
    which displays the current `config` file running, and `Rules` for alerting rules.
    The final two options in the drop-down menu show `Targets`, which you are currently
    scraping data from, and `Service Discovery`, which is showing automatic services
    that are being monitored:![Figure 13.2: Status drop-down menu'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“状态”下拉菜单。您将看到以下图像，其中包括有用的信息，包括“运行时和构建信息”以显示正在运行的版本的详细信息，“命令行标志”以运行应用程序，“配置”显示当前运行的“config”文件，以及用于警报规则的“规则”。下拉菜单中的最后两个选项显示“目标”，您当前正在从中获取数据的目标，以及“服务发现”，显示正在监控的自动服务：![图13.2：状态下拉菜单
- en: '](image/B15021_13_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_02.jpg)'
- en: 'Figure 13.2: Status drop-down menu'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：状态下拉菜单
- en: 'From the `Status` menu, select the `Targets` option and you will be able to
    see what Prometheus is scraping data from. You can also get the same result by
    going to the URL `HTTP:localhost:9090/targets`. You should see a screenshot similar
    to the following, as Prometheus is currently only monitoring itself:![Figure 13.3:
    The Prometheus Targets page'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“状态”菜单中选择“目标”选项，您将能够看到Prometheus正在从哪里抓取数据。您也可以通过转到URL“HTTP：localhost:9090/targets”来获得相同的结果。您应该会看到类似于以下内容的屏幕截图，因为Prometheus目前只监视自身：![图13.3：Prometheus目标页面
- en: '](image/B15021_13_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_03.jpg)'
- en: 'Figure 13.3: The Prometheus Targets page'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：Prometheus目标页面
- en: 'Click the target endpoint. You will be able to see the metrics exposed by the
    target. You can now see how Prometheus makes use of its pull architecture to scrape
    data from its targets. Click the link or open a browser and enter the URL `http://localhost:9090/metrics`
    to see the Prometheus metrics endpoint. You should see something similar to the
    following, showing all the metrics points Prometheus is exposing to then be scraped
    by itself:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击目标端点。您将能够看到目标公开的指标。现在您可以看到Prometheus如何利用其拉取架构从目标中抓取数据。单击链接或打开浏览器，输入URL“http://localhost:9090/metrics”以查看Prometheus指标端点。您应该会看到类似于以下内容的内容，显示了Prometheus正在公开的所有指标点，然后由自身抓取：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Return to the expression browser by either clicking the back button or by entering
    the URL `http://localhost:9090/graph`. Click the drop-down list next to the `Execute`
    button to see all the metric points available:![Figure 13.4: Prometheus metrics
    available from the expression browser'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击返回按钮或输入URL“http://localhost:9090/graph”返回到表达式浏览器。单击“执行”按钮旁边的下拉列表，以查看所有可用的指标点：![图13.4：从表达式浏览器中获得的Prometheus指标
- en: '](image/B15021_13_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_04.jpg)'
- en: 'Figure 13.4: Prometheus metrics available from the expression browser'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：从表达式浏览器中获得的Prometheus指标
- en: 'From the drop-down list or in the query editor, add the `prometheus_http_requests_total`
    metrics to view all the HTTP requests made to the Prometheus application. Your
    output may differ from the following. Click the `Execute` button and click the
    `Graphs` tab to see a visual view of our data:![Figure 13.5: Prometheus HTTP requests
    graph displayed from the expression browser'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表或查询编辑器中，添加“prometheus_http_requests_total”指标以查看发送到Prometheus应用程序的所有HTTP请求。您的输出可能与以下内容不同。单击“执行”按钮，然后单击“图形”选项卡以查看我们数据的可视化视图：![图13.5：从表达式浏览器中显示的Prometheus
    HTTP请求图
- en: '](image/B15021_13_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_05.jpg)'
- en: 'Figure 13.5: Prometheus HTTP requests graph displayed from the expression browser'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：从表达式浏览器中显示的Prometheus HTTP请求图
- en: Don't worry if you are still a little confused about what we have achieved so
    far. In a short period, we've set up Prometheus and started collecting data on
    it. Even though we have only been collecting data on Prometheus itself, we have
    been able to demonstrate how we can now quickly and easily visualize the HTTP
    requests being performed by the application. The next section will show you how
    to start to capture data from Docker and your running containers by making small
    changes to your Prometheus configurations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对我们到目前为止所取得的成就还感到有些困惑，不要担心。在短时间内，我们已经设置了Prometheus并开始收集数据。尽管我们只收集了Prometheus本身的数据，但我们已经能够演示如何快速轻松地可视化应用程序执行的HTTP请求。接下来的部分将向您展示如何通过对Prometheus配置进行小的更改，开始从Docker和正在运行的容器中捕获数据。
- en: Monitoring Docker Containers with Prometheus
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prometheus监控Docker容器
- en: Prometheus monitoring is a great way to understand what the application is capable
    of, but it doesn't do much more to help us with monitoring Docker and the containers
    that we have running on our system. Fortunately, there are two ways we can collect
    data to give us greater insights into our running containers. We can expose metrics
    using the Docker daemon to Prometheus and can also install some extra applications,
    such as `cAdvisor`, to collect further metrics on the containers running on our
    system.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus监控是了解应用程序能力的好方法，但它对于帮助我们监控Docker和我们系统上运行的容器并没有太多帮助。幸运的是，我们有两种方法可以收集数据，以便更深入地了解我们正在运行的容器。我们可以使用Docker守护程序将指标暴露给Prometheus，并且还可以安装一些额外的应用程序，比如`cAdvisor`，来收集我们系统上运行的容器的更多指标。
- en: With some minor changes to the Docker configurations, we are able to expose
    metrics to Prometheus to allow it to collect specific data of the Docker daemon
    running on our system. This will go part of the way to collecting the metrics
    but will not give us the metrics of the actual running containers. This is where
    we will then need to install `cAdvisor`, which was created by Google specifically
    to collect our running container metrics.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对Docker配置进行一些小的更改，我们能够将指标暴露给Prometheus，以便它收集运行在我们系统上的Docker守护程序的特定数据。这将部分地收集指标，但不会给我们提供实际运行容器的指标。这就是我们需要安装`cAdvisor`的地方，它是由谷歌专门用来收集我们运行容器指标的。
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If we needed to gather more metrics on the underlying hardware, Docker and
    our containers are running on, we could also gather further metrics using `node_exporter`.
    We will not be covering `node_exporter` in this chapter but supporting documentation
    can be found at the following URL:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要收集更多关于底层硬件、Docker和我们的容器运行情况的指标，我们还可以使用`node_exporter`来收集更多的指标。我们将不会在本章中涵盖`node_exporter`，但支持文档可以在以下网址找到：
- en: https://github.com/prometheus/node_exporter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: https://github.com/prometheus/node_exporter。
- en: 'With Docker already running on your host system, setting it up to allow Prometheus
    to connect metrics from it is a matter of adding a configuration change to the
    `/etc/docker/daemon.json` file. In most instances, the file will most likely be
    blank. If you already have details in the file, you will simply add *lines 2*
    and *3* from the following example to your configuration file. *Line 2* enables
    this `experimental` feature to expose metrics for Prometheus to collect, and *line
    3* sets up the IP address and port for these data points to be exposed to:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker已经在您的主机系统上运行，设置它以允许Prometheus连接其指标只是向`/etc/docker/daemon.json`文件添加一个配置更改。在大多数情况下，该文件很可能是空白的。如果您已经在文件中有详细信息，您只需将以下示例中的*第2行*和*第3行*添加到您的配置文件中。*第2行*启用了这个`experimental`功能，以便暴露给Prometheus收集指标，*第3行*设置了这些数据点要暴露的IP地址和端口：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Due to a change in configuration, the Docker daemon on your system will need
    to be restarted for it to take effect. But once that occurs, you should then have
    metrics available at the specified IP address and port you added to the `daemon.json`
    file. In our instance above, this will be at `http://0.0.0.0:9191`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于配置更改，您系统上的Docker守护程序需要重新启动才能生效。但一旦发生这种情况，您应该可以在`daemon.json`文件中添加的指定IP地址和端口处获得可用的指标。在上面的示例中，这将是在`http://0.0.0.0:9191`。
- en: To install `cAdvisor`, Google has provided an easy-to-use Docker image that
    can be pulled from Google's Cloud Registry and run on your environment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`cAdvisor`，谷歌提供了一个易于使用的Docker镜像，可以从谷歌的云注册表中拉取并在您的环境中运行。
- en: To run `cAdvisor`, you will run the image mounting all the directories that
    are relevant to the Docker daemon and running containers. You also need to make
    sure that you expose the port the metrics will be available on. By default, `cAdvisor`
    is configured to expose metrics on port `8080`, which you will not be able to
    change unless you make changes to the underlying image of `cAdvisor`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`cAdvisor`，您将运行镜像，挂载所有与Docker守护程序和运行容器相关的目录。您还需要确保暴露度量标准将可用的端口。默认情况下，`cAdvisor`配置为在端口`8080`上公开度量标准，除非您对`cAdvisor`的基础图像进行更改，否则您将无法更改。
- en: 'The following `docker run` command mounts the volumes on the container, such
    as `/var/lib/docker` and `/var/run`, exposes port `8080` to the host system, and
    finally uses the latest `cadvisor` image available from Google:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`docker run`命令在容器上挂载卷，例如`/var/lib/docker`和`/var/run`，将端口`8080`暴露给主机系统，并最终使用来自Google的最新`cadvisor`镜像：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Making changes to the underlying image of `cAdvisor` is not something we will
    cover in this chapter, but you will need to refer to the `cAdvisor` documentation
    and make specific changes to the `cAdvisor` code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对`cAdvisor`的基础图像进行更改不是本章将涵盖的内容，但您需要参考`cAdvisor`文档并对`cAdvisor`代码进行特定更改。
- en: The `cAdvisor` image will also provide a useful web interface to view these
    metrics. `cAdvisor` does not hold any historical data, so you need to collect
    the data with Prometheus.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`cAdvisor`镜像还将提供一个有用的Web界面来查看这些指标。`cAdvisor`不保存任何历史数据，因此您需要使用Prometheus收集数据。'
- en: 'Once the Docker daemon and `cAdvisor` have data available for Prometheus to
    collect, we need to ensure we have a scheduled configuration to have the data
    added to the time-series database. The `prometheus.yml` configuration file in
    the application directory allows us to do this. You simply add a configuration
    to the `scrape_configs` section of the file. As you can see from the following
    example, you need to add a `job_name` parameter and provide details of where the
    metrics are being provided as a `targets` entry:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Docker守护程序和`cAdvisor`有数据可供Prometheus收集，我们需要确保我们有一个定期的配置，将数据添加到时间序列数据库中。应用程序目录中的`prometheus.yml`配置文件允许我们执行此操作。您只需在文件的`scrape_configs`部分添加配置。正如您从以下示例中看到的，您需要添加一个`job_name`参数，并提供指标提供位置的详细信息作为`targets`条目：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once the targets are available to Prometheus, you can then start searching for
    data. Now that we've provided a breakdown of how you can start to collect Docker
    metrics using Prometheus, the following exercise will show you how to perform
    this on your running system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦目标对Prometheus可用，您就可以开始搜索数据。现在我们已经提供了如何开始使用Prometheus收集Docker指标的分解，以下练习将向您展示如何在运行系统上执行此操作。
- en: 'Exercise 13.02: Collecting Docker Metrics with Prometheus'
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13.02：使用Prometheus收集Docker指标
- en: 'In this exercise, you will configure Prometheus to start collecting data from
    our Docker daemon. This will allow you to see what resources are specifically
    being used by the Docker daemon itself. You will also run the `cAdvisor` Docker
    image to start collecting specific metrics on your running containers:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，您将配置Prometheus开始从我们的Docker守护程序收集数据。这将使您能够查看Docker守护程序本身特别使用了哪些资源。您还将运行`cAdvisor`
    Docker镜像，以开始收集运行容器的特定指标：
- en: 'To start collecting data from the Docker daemon, you first need to enable this
    functionality on your system. Start by opening the `/etc/docker/daemon.json` file
    with your text editor and add in the following details:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始从Docker守护程序收集数据，您首先需要在系统上启用此功能。首先通过文本编辑器打开`/etc/docker/daemon.json`文件，并添加以下详细信息：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The changes you've made to the configuration file will expose the Docker daemon
    metrics to allow Prometheus to scrape and store these values. To enable this change,
    save the Docker configuration file and restart the Docker daemon.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您对配置文件所做的更改将会公开Docker守护程序的指标，以允许Prometheus进行抓取和存储这些值。要启用此更改，请保存Docker配置文件并重新启动Docker守护程序。
- en: 'Verify this has worked by opening your web browser and using the URL and port
    number you have set up in your configuration. Enter the URL `http://0.0.0.0:9191/metrics`,
    and you should see a list of metrics being exposed to allow Prometheus to scrape:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开您的Web浏览器并使用您在配置中设置的URL和端口号来验证是否已经生效。输入URL `http://0.0.0.0:9191/metrics`，您应该会看到一系列指标被公开以允许Prometheus进行抓取：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You now need to let Prometheus know where it can find the metrics Docker is
    exposing to it. You do this through the `prometheus.yml` file in the application
    directory. Before you do this though, you will need to stop the Prometheus service
    from running, so the additions to the configuration file will take effect. Open
    the terminal Prometheus is running on and press *Ctrl* + *C*. You should see an
    output similar to the following when you do this successfully:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要让Prometheus知道它可以在哪里找到Docker正在向其公开的指标。您可以通过应用程序目录中的`prometheus.yml`文件来完成这一点。不过，在这样做之前，您需要停止Prometheus服务的运行，以便配置文件的添加生效。打开Prometheus正在运行的终端并按下*Ctrl*
    + *C*。成功执行此操作时，您应该会看到类似以下的输出：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the `prometheus.yml` configuration file in the application directory with
    your text editor. Move to the end of the file in the `scrape_configs` section
    and add *lines 21* to *34*. The additional lines will tell Prometheus that it
    can now obtain metrics from the Docker daemon that has been exposed on IP address
    `0.0.0.0` and port `9191`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开应用程序目录中的`prometheus.yml`配置文件。转到文件的`scrape_configs`部分的末尾，并添加*行21*至*34*。额外的行将告诉Prometheus它现在可以从已在IP地址`0.0.0.0`和端口`9191`上公开的Docker守护程序获取指标：
- en: prometheus.yml
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: prometheus.yml
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The complete code for this step can be found at https://packt.live/33satLe.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤的完整代码可以在https://packt.live/33satLe找到。
- en: 'Save the changes you have made to the `prometheus.yml` file and start the Prometheus
    application again from the command line as shown here:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您对`prometheus.yml`文件所做的更改，并按照以下方式从命令行再次启动Prometheus应用程序：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you move back to the expression browser for Prometheus, you can once again
    verify it is now configured to collect data from the Docker daemon. Either select
    `Targets` from the `Status` menu or use the URL `http://localhost:9090/targets`,
    which should now include the `docker_daemon` job we specified in our configuration
    file:![Figure 13.6: Prometheus Targets now with docker_daemon'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您返回到Prometheus的表达式浏览器，您可以再次验证它现在已配置为从Docker守护程序收集数据。从`Status`菜单中选择`Targets`，或者使用URL
    `http://localhost:9090/targets`，现在应该包括我们在配置文件中指定的`docker_daemon`作业：![图13.6：带有docker_daemon的Prometheus
    Targets
- en: '](image/B15021_13_06.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_06.jpg)'
- en: 'Figure 13.6: Prometheus Targets now with docker_daemon'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6：带有docker_daemon的Prometheus Targets
- en: 'Verify that you are collecting data by searching `engine_daemon_engine_cpus_cpus`.
    This value should be the same as the number of CPUs or cores available on your
    host system. Enter this into the Prometheus expression browser and click the `Execute`
    button:![Figure 13.7: docker_daemon CPUs available on the host system'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过搜索`engine_daemon_engine_cpus_cpus`来验证您是否正在收集数据。这个值应该与您的主机系统上可用的CPU或核心数量相同。将其输入到Prometheus表达式浏览器中，然后单击`Execute`按钮：![图13.7：主机系统上可用的docker_daemon
    CPU
- en: '](image/B15021_13_07.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_07.jpg)'
- en: 'Figure 13.7: docker_daemon CPUs available on the host system'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7：主机系统上可用的docker_daemon CPU
- en: 'The Docker daemon is limited to the amount of data it can expose to Prometheus.
    Set up the `cAdvisor` image to collect details about your running containers.
    Run this as a container made available by Google with the following `docker run`
    command on the command line. The `docker run` command uses the `cadvisor:latest`
    image stored in the Google Container Registry, similar to Docker Hub. There is
    no need to log in to this registry; the image will automatically be pulled to
    your system:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker守护程序受限于其可以向Prometheus公开的数据量。设置`cAdvisor`镜像以收集有关正在运行的容器的详细信息。在命令行上使用以下`docker
    run`命令将其作为由Google提供的容器运行。`docker run`命令使用存储在Google容器注册表中的`cadvisor:latest`镜像，类似于Docker
    Hub。无需登录到此注册表；镜像将自动拉到您的系统中：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`cAdvisor` comes with a web interface that will give you some basic functionality,
    but as it does not store historical data, you will be collecting the data and
    storing it on Prometheus. For now, open another web browser session and enter
    the URL `http://0.0.0.0:8080` and you should see a web page similar to the following:![Figure
    13.8: The cAdvisor welcome page'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cAdvisor`带有一个Web界面，可以为您提供一些基本功能，但由于它不存储历史数据，您将收集数据并将其存储在Prometheus上。现在，打开另一个Web浏览器会话，并输入URL
    `http://0.0.0.0:8080`，您应该会看到一个类似以下的网页：![图13.8：cAdvisor欢迎页面'
- en: '](image/B15021_13_08.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_08.jpg)'
- en: 'Figure 13.8: The cAdvisor welcome page'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8：cAdvisor欢迎页面
- en: Enter the URL `http://0.0.0.0:8080/metrics` to view all the data that `cAdvisor`
    is displaying on the web interface.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入URL `http://0.0.0.0:8080/metrics`，以查看`cAdvisor`在Web界面上显示的所有数据。
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When changes are being made to the Prometheus configuration file, the application
    will need to be restarted for the changes to take effect. In the exercises we
    have been performing, we have been achieving this by stopping the service instead
    to achieve the same result.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当对Prometheus配置文件进行更改时，应用程序需要重新启动才能生效。在我们进行的练习中，我们一直通过停止服务来实现相同的结果。
- en: 'As you did with the Docker daemon, configure Prometheus to periodically scrape
    data from the metrics endpoint. Stop the Prometheus application running and, once
    again, open the `prometheus.yml` configuration file with your text editor. At
    the bottom of the configuration, add in another configuration for `cAdvisor` with
    the following details:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与Docker守护程序一样，配置Prometheus定期从指标端点抓取数据。停止运行Prometheus应用程序，并再次使用文本编辑器打开`prometheus.yml`配置文件。在配置文件底部，添加另一个`cAdvisor`的配置，具体如下：
- en: prometheus.yml
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: prometheus.yml
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The complete code for this step can be found at https://packt.live/33BuFub.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤的完整代码可在https://packt.live/33BuFub找到。
- en: 'Save your configuration changes once again and run the Prometheus application
    from the command line, as shown here:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次保存您的配置更改，并从命令行运行Prometheus应用程序，如下所示：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you now view the `Targets` available on the Prometheus web interface, you
    should see something similar to the following, showing `cAdvisor` also available
    on our interface:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在查看Prometheus Web界面上的`Targets`，您应该会看到类似以下的内容，显示`cAdvisor`也在我们的界面上可用：
- en: '![Figure 13.9: Prometheus Targets page with cAdvisor added'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.9：添加了cAdvisor的Prometheus Targets页面'
- en: '](image/B15021_13_09.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_09.jpg)'
- en: 'Figure 13.9: Prometheus Targets page with cAdvisor added'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9：添加了cAdvisor的Prometheus Targets页面
- en: 'With the `Targets` page of Prometheus showing that `cAdvisor` is now available
    and connected, it verifies that Prometheus is now collecting metrics data from
    `cAdvisor`. You can also test this from the expression browser to verify it is
    working as it should. Move into the expression browser by selecting `Graphs` or
    `Prometheus` from the top menu. When the page loads, add the following PromQL
    query to the query editor and click the `Execute` button:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Prometheus的`Targets`页面显示`cAdvisor`现在可用并已连接，验证了Prometheus现在正在从`cAdvisor`收集指标数据。您还可以从表达式浏览器中测试这一点，以验证它是否按预期工作。通过从顶部菜单中选择`Graphs`或`Prometheus`进入表达式浏览器。页面加载后，将以下PromQL查询添加到查询编辑器中，然后单击`Execute`按钮：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We are starting to use some more advanced PromQL queries, and it may look a
    little confusing. The next part of this chapter is dedicated to providing you
    with a better understanding of the PromQL query language.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始使用一些更高级的PromQL查询，可能看起来有点混乱。本章的下一部分致力于让您更好地理解PromQL查询语言。
- en: 'The query is using the `process_start_time_seconds` metric, specifically for
    the `cAdvisor` application and the `time()` function to add the total seconds.
    You should see a result similar to the following on the expression browser:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 查询正在使用`process_start_time_seconds`指标，特别是针对`cAdvisor`应用程序和`time()`函数来添加总秒数。您应该在表达式浏览器上看到类似以下的结果：
- en: '![Figure 13.10: cAdvisor uptime from the expression browser'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.10：来自表达式浏览器的cAdvisor正常运行时间'
- en: '](image/B15021_13_10.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_10.jpg)'
- en: 'Figure 13.10: cAdvisor uptime from the expression browser'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10：来自表达式浏览器的cAdvisor正常运行时间
- en: With this exercise, we now have a running instance of Prometheus and are collecting
    data from the Docker daemon. We have also set up `cAdvisor` to give us some further
    information on the running container instances. The next part of this chapter
    will discuss the PromQL query language in greater depth to help you become more
    comfortable querying the metrics available from Prometheus.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，我们现在有一个正在运行的Prometheus实例，并且正在从Docker守护程序收集数据。我们还设置了`cAdvisor`，以便为我们提供有关正在运行的容器实例的更多信息。本章的下一部分将更深入地讨论PromQL查询语言，以帮助您更轻松地查询Prometheus提供的指标。
- en: Understanding the Prometheus Query Language
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Prometheus查询语言
- en: As we've seen in the previous parts of this chapter, Prometheus provides its
    own query language called PromQL. It allows you to search, view, and aggregate
    the time-series data stored in the Prometheus database. This section helps you
    understand the query language further. There are four core metric types in Prometheus,
    and we will start by describing each.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章的前几部分中所看到的，Prometheus提供了自己的查询语言，称为PromQL。它允许您搜索、查看和聚合存储在Prometheus数据库中的时间序列数据。本节将帮助您进一步了解查询语言。Prometheus中有四种核心指标类型，我们将从描述每种类型开始。
- en: Counter
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计数器
- en: A counter counts elements over time; for example, this could be the number of
    visits to your website. The count will only go up or it will reset when a service
    or application is restarted. They are suited to counting the number of certain
    events at a point in time. Each time the counter changes, the number will also
    be reflected in the data you collect.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器随时间计算元素；例如，这可以是您网站的访问次数。当服务或应用程序重新启动时，计数只会增加或重置。它们适用于在某个时间点计算特定事件的次数。每次计数器更改时，收集的数据中的数字也会反映出来。
- en: Counters usually end with the `_total` suffix. But due to the nature of counters,
    each time a service is restarted, the counter will be set back to 0\. Using the
    `rate()` or `irate()` functions in our query, we will be able to view our metric
    rate over time and disregard any time the counter is reset to 0\. The `rate()`
    and `irate()` functions both take in a range of values using the square brackets
    `[ ]` where you specify a time value, such as `[1m]`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器通常以`_total`后缀结尾。但由于计数器的性质，每次服务重新启动时，计数器将被重置为0。使用我们查询中的`rate()`或`irate()`函数，我们将能够随时间查看我们的指标速率，并忽略计数器被重置为0的任何时间。`rate()`和`irate()`函数都使用方括号`[]`指定时间值，例如`[1m]`。
- en: 'If you are interested in examples of counters in the data we are collecting,
    open the metrics page for the data being collected for `cAdvisor` at the URL `http://0.0.0.0:8080/metrics`.
    One of the first metrics provided is `container_cpu_system_seconds_total`. If
    we look through the metrics page, we will see the information provided on the
    metric value and the type as listed here:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对我们正在收集的数据中的计数器示例感兴趣，请打开`cAdvisor`的数据收集的指标页面，网址为`http://0.0.0.0:8080/metrics`。提供的第一个指标之一是`container_cpu_system_seconds_total`。如果我们浏览指标页面，我们将看到有关指标值和类型的信息如下：
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, we will look into the second metric type available in Prometheus, in other
    words, gauges.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将研究Prometheus中可用的第二种指标类型，也就是仪表。
- en: Gauges
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表
- en: Gauges are designed to handle values that may decrease over time and are designed
    for any metric exposing the current state of something. Just like a thermometer
    or fuel gauge, you would be able to see the current state value. Gauges are restricted
    in their functionality because not all the data will be collected as there may
    be missing values between time points. Therefore, they are less reliable than
    a counter, and so counters are still used for time-series representations of data.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表旨在处理随时间可能减少的值，并设计用于公开某物的当前状态的任何指标。就像温度计或燃料表一样，您将能够看到当前状态值。仪表在功能上受到限制，因为可能会在时间点之间存在缺失值，因此它们比计数器不太可靠，因此计数器仍然用于数据的时间序列表示。
- en: 'If we once again move to the metrics page for `cAdvisor`, you can see some
    of our metrics being displayed as a gauge. One of the first metrics we see is
    `container_cpu_load_average_10s`, which is provided as a gauge, similar to the
    following values:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次转到`cAdvisor`的指标页面，您可以看到一些指标显示为仪表。我们看到的第一个指标之一是`container_cpu_load_average_10s`，它作为一个仪表提供，类似于以下值：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The next section will take you through histograms, the third type of metric
    available in Prometheus.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分将带您了解直方图，Prometheus中可用的第三种指标类型。
- en: Histograms
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直方图
- en: Histograms are a lot more complex than gauges and counters and provide additional
    information, like the sum of an observation. They are used to provide a distribution
    of a set of data. Histograms use sampling and can be used to estimate quantiles
    on the Prometheus server.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图比仪表和计数器复杂得多，并提供额外信息，如观察的总和。它们用于提供一组数据的分布。直方图使用抽样，可以用于在Prometheus服务器上估计分位数。
- en: 'Histograms are less common than gauges and counters and do not seem to be set
    up for `cAdvisor`, but we can see some available in our Docker daemon metrics.
    Move to the URL `http://0.0.0.0:9191/metrics` and you''ll be able to see that
    one of the first histogram metrics listed is `engine_daemon_container_actions_seconds`.
    This is the number of seconds the Docker daemon takes to process each action:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图比仪表和计数器更不常见，似乎没有为`cAdvisor`设置，但我们可以在Docker守护程序指标中看到一些可用的直方图。转到URL `http://0.0.0.0:9191/metrics`，您将能够看到列出的第一个直方图指标是`engine_daemon_container_actions_seconds`。这是Docker守护程序处理每个操作所需的秒数：
- en: '[PRE26]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The next section will now cover the fourth metric type available, in other words,
    summaries.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将介绍第四种可用的指标类型，换句话说，摘要。
- en: Summaries
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Summaries are an extension of histograms and are calculated on the client-side.
    They have the advantage of being more accurate, but they can be expensive for
    the client, too. We can see an example of a summary in the Docker daemon metrics
    where `http_request_duration_microseconds` is listed here:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要是直方图的扩展，是在客户端计算的。它们具有更高的准确性优势，但对客户端来说也可能很昂贵。我们可以在Docker守护程序指标中看到摘要的示例，其中`http_request_duration_microseconds`在这里列出：
- en: '[PRE27]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, since we've explained the type of metrics available in PromQL, we can take
    a further look at how these metrics can be implemented as a part of our queries.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然我们已经解释了PromQL中可用的指标类型，我们可以进一步看看这些指标如何作为查询的一部分实现。
- en: Performing PromQL Queries
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行PromQL查询
- en: Running queries on the expression browser is easy, but you may not always get
    the information you need. By simply adding the metric name, such as `countainer_cpu_system_seconds_total`,
    we can get quite a few responses. Though, the amount depends on the number of
    containers we have on our system along with the returning values for each of the
    filesystems that are running on our host system. To limit the number of responses
    provided in our result, we can search for specific text using curly braces `{
    }`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式浏览器上运行查询很容易，但您可能并不总是能获得所需的信息。只需添加指标名称，例如`countainer_cpu_system_seconds_total`，我们就可以得到相当多的响应。不过，响应的数量取决于我们系统上的容器数量以及我们主机系统上正在运行的每个文件系统的返回值。为了限制结果中提供的响应数量，我们可以使用花括号`{}`搜索特定文本。
- en: 'Consider the following examples. The following command provides the full name
    of the `"cadvisor"` container we wish to view:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例。以下命令提供了我们希望查看的`"cadvisor"`容器的完整名称：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following example uses a regular expression compatible with GO. The command
    looks for any names that start with `ca` and have further characters afterward:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用与GO兼容的正则表达式。该命令查找以`ca`开头并在后面有更多字符的任何名称：
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following code snippet is searching for any containers that do not have
    the name value as blank by using the not equal to ( `!=` ) value:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段正在搜索任何名称值不为空的容器，使用不等于（`!=`）值：
- en: '[PRE30]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we placed any of these metrics searches in the expression browser and created
    a graph, what you would notice is that the graph would simply climb in a linear
    fashion over time. As we mentioned earlier, this is because the metric `container_cpu_system_seconds_total`
    is a counter and will only ever increase over time or be set back to zero. With
    the use of functions, we can calculate more useful time-series data. The following
    example uses the `rate()` function to calculate the per-second rate for the matching
    time-series data. We have used `[1m]`, which represents 1 minute. The higher the
    number, the smoother the graph will be:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将任何这些指标搜索放在表达式浏览器中并创建图表，您会注意到图表会随着时间线性上升。正如我们之前提到的，这是因为指标`container_cpu_system_seconds_total`是一个计数器，它只会随着时间增加或被设置为零。通过使用函数，我们可以计算更有用的时间序列数据。以下示例使用`rate()`函数来计算匹配时间序列数据的每秒速率。我们使用了`[1m]`，表示1分钟。数字越大，图表就会更平滑：
- en: '[PRE31]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `rate` function can only be used for a counter metric. If we had more than
    one container running, we could then use the `sum()` function to add all the values
    together and provide a graph by container name using the `(name)` function as
    we have here:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`rate`函数只能用于计数器指标。如果我们运行了多个容器，我们可以使用`sum()`函数将所有值相加，并使用`(name)`函数按容器名称提供图表，就像我们在这里做的那样：'
- en: '[PRE32]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you would like to see a list of all the functions available in PromQL, go
    to the following link provided by the official Prometheus documentation:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看PromQL中所有可用函数的列表，请转到官方Prometheus文档提供的以下链接：
- en: https://prometheus.io/docs/prometheus/latest/querying/functions/.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: https://prometheus.io/docs/prometheus/latest/querying/functions/。
- en: 'PromQL also lets us perform arithmetic from our queries. In the following example,
    we are using the `process_start_time_seconds` metric and searching for the Prometheus
    instance. We can subtract this time from the `time()` function, which gives us
    the current date and time in epoch time:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: PromQL还允许我们从查询中执行算术运算。在以下示例中，我们使用`process_start_time_seconds`指标并搜索Prometheus实例。我们可以从`time()`函数中减去这个时间，该函数给出了当前的日期和时间的时代时间：
- en: '[PRE33]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Epoch time is the number of seconds from January 1, 1970, and is represented
    by a number; for example, 1578897429 is converted to 6:37 a.m. (GMT) on January
    13, 2020.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 时代时间是从1970年1月1日起的秒数，用一个数字表示；例如，1578897429被转换为2020年1月13日上午6:37（GMT）。
- en: We're hoping this primer in PromQL has given you some more insight into using
    the query language within your projects. The following exercise will help enforce
    what we have learned by specifically working further with monitoring our running
    Docker containers.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这个PromQL入门能让您更深入地了解在项目中使用查询语言。以下练习将通过具体的使用案例，进一步加强我们学到的内容，特别是监视我们正在运行的Docker容器。
- en: 'Exercise 13.03: Working with the PromQL Query Language'
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13.03：使用PromQL查询语言
- en: 'In the following exercise, we will introduce a new Docker image onto your system
    to help you demonstrate some of the available metrics specific to Docker while
    using Prometheus. The exercise will reinforce what you have learned so far about
    the PromQL query language with a tangible use case of gathering and displaying
    metrics data for a basic website:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，我们将在您的系统上引入一个新的Docker镜像，以帮助您演示使用Prometheus时特定于Docker的一些可用指标。这个练习将加强您到目前为止对PromQL查询语言的学习，通过一个具体的使用案例来收集和显示基本网站的指标数据。
- en: 'Open a new terminal and create a new directory, calling it `web-nginx`:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端并创建一个名为`web-nginx`的新目录：
- en: '[PRE34]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a new file in the `web-nginx` directory and call it `index.html`. Open
    the new file with your text editor and add the following HTML code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web-nginx`目录中创建一个新文件，命名为`index.html`。用文本编辑器打开新文件，并添加以下HTML代码：
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run a new Docker container with the following command. By now, you should be
    familiar with the syntax, but the following command will pull the latest `nginx`
    image, name it `web-nginx`, and expose port `80` so that you can then view the
    mounted `index.html` file you created in the previous step:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下命令运行一个新的Docker容器。到目前为止，您应该已经熟悉了语法，但以下命令将拉取最新的`nginx`镜像，命名为`web-nginx`，并暴露端口`80`，以便您可以查看在上一步中创建的挂载的`index.html`文件：
- en: '[PRE36]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Open a web browser and access `http://0.0.0.0`. The only thing you should see
    is the greeting `Hello Prometheus`:![Figure 13.11: Sample web page'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器，访问`http://0.0.0.0`。你应该看到的唯一的东西是问候语`Hello Prometheus`：![图13.11：示例网页
- en: '](image/B15021_13_11.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_11.jpg)'
- en: 'Figure 13.11: Sample web page'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11：示例网页
- en: 'If Prometheus is not running on your system, open a new terminal and, from
    the Prometheus application directory, start the application from the command line:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Prometheus没有在您的系统上运行，请打开一个新的终端，并从Prometheus应用程序目录中，从命令行启动应用程序：
- en: '[PRE37]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will not show screenshots of all the PromQL queries that we perform in this
    part of the chapter as we don't want to waste too much space. But the queries
    should all be valid for the running containers and system we have set up.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们不会展示所有PromQL查询的屏幕截图，因为我们不想浪费太多空间。但是这些查询应该对我们设置的正在运行的容器和系统都是有效的。
- en: 'The bulk of the `cAdvisor` metrics now available in Prometheus will start with
    the word `container`. Use the `count()` function with the metric `container_memory_usage_bytes`
    to see the count of the current memory usage in bytes:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在Prometheus中可用的大部分`cAdvisor`指标将以`container`开头。使用`count()`函数与指标`container_memory_usage_bytes`，以查看当前内存使用量的字节数：
- en: '[PRE38]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding query provides the 28 results on the system on which it is running.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询提供了系统上正在运行的28个结果。
- en: 'To limit the information you are looking for, either use the curly brackets
    to search or, as in the following command, use not search (`!=`) for specific
    image names. Currently, you only have two containers running with image names,
    `cAdvisor` and `web-nginx`. By using the `scalar()` function, you can count the
    number of containers you have running on your system over time. Click the `Execute`
    button after entering the following query:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了限制您正在寻找的信息，可以使用花括号进行搜索，或者如下命令中所示，使用不搜索（`!=`）特定的图像名称。目前，您只有两个正在运行的容器，图像名称为`cAdvisor`和`web-nginx`。通过使用`scalar()`函数，您可以计算系统上随时间运行的容器数量。在输入以下查询后，单击`Execute`按钮：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Click the `Graphs` tab, and you should now have a plotted graph of the preceding
    query. The graph should be like the following image in which you started up a
    third image `web-nginx` container to show how the Prometheus expression browser
    displays this type of data. Remember that you are only seeing one line in the
    graph as this is the memory used by the two containers on our system and there
    is not a separate memory usage value for both:![Figure 13.12: cAdvisor metrics
    from the expression browser'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`Graphs`选项卡，现在您应该有一个绘制的查询图。该图应该类似于以下图像，其中您启动了第三个图像`web-nginx`容器，以显示Prometheus表达式浏览器如何显示此类型的数据。请记住，您只能在图表中看到一条线，因为这是我们系统上两个容器使用的内存，而没有单独的内存使用值：![图13.12：来自表达式浏览器的cAdvisor指标
- en: '](image/B15021_13_12.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_12.jpg)'
- en: 'Figure 13.12: cAdvisor metrics from the expression browser'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12：来自表达式浏览器的cAdvisor指标
- en: 'Use the `container_start_time_seconds` metric to get the Unix timestamp of
    when the container started up:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`container_start_time_seconds`指标获取容器启动的Unix时间戳：
- en: '[PRE40]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You will see something like 1578364679, which is the number of seconds past
    epoch time, which is 1 January 1970.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似于1578364679的东西，这是自纪元时间以来的秒数，即1970年1月1日。
- en: 'Use the `time()` function to get the current time and then subtract `container_start_time_seconds`
    from this value to show how many seconds the container has been running for:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`time()`函数获取当前时间，然后从该值中减去`container_start_time_seconds`，以显示容器已运行多少秒：
- en: '[PRE41]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Monitor HTTP requests on your application via Prometheus'' `prometheus_http_request_duration_seconds_count`
    metric. Use the `rate()` function to plot a graph of the duration of each HTTP
    request to Prometheus:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监视您的应用程序通过Prometheus的`prometheus_http_request_duration_seconds_count`指标的HTTP请求。使用`rate()`函数绘制每个HTTP请求到Prometheus的持续时间的图表：
- en: '[PRE42]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It would be great to be using the `web-nginx` container to view its HTTP request
    time and latency, but the container has not been set up to provide this information
    to Prometheus yet. We will address this shortly in the chapter.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`web-nginx`容器查看其HTTP请求时间和延迟将是很好的，但是该容器尚未设置为向Prometheus提供此信息。我们将在本章中很快解决这个问题。
- en: 'Use an arithmetic operator to divide `prometheus_http_request_duration_seconds_sum`
    by `prometheus_http_request_duration_seconds_count`, which will then provide the
    HTTP latency of the requests made:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用算术运算符将`prometheus_http_request_duration_seconds_sum`除以`prometheus_http_request_duration_seconds_count`，这将提供所做请求的HTTP延迟：
- en: '[PRE43]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Run the following command using the `container_memory_usage_bytes` metric to
    see the memory being used by each of the running containers on your system. In
    this query, we are using the `sum by (name)` command to add the values per container
    name:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `container_memory_usage_bytes` 指标运行以下命令，以查看系统上每个运行容器使用的内存。在此查询中，我们使用 `sum
    by (name)` 命令按容器名称添加值：
- en: '[PRE44]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If you execute the preceding query, you''ll see the graph in the expression
    browser showing the memory used by the `web-nginx` and `cAdvisor` containers:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您执行上述查询，您将在表达式浏览器中看到图形，显示 `web-nginx` 和 `cAdvisor` 容器使用的内存：
- en: '![Figure 13.13: Memory of both the containers running on our system'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.13：我们系统上运行的两个容器的内存'
- en: '](image/B15021_13_13.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_13.jpg)'
- en: 'Figure 13.13: Memory of both the containers running on our system'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13：我们系统上运行的两个容器的内存
- en: This section has helped you gain a little more familiarity with the `PromQL`
    query language and put together your queries to start viewing your metrics from
    the expression browser. The following section will provide details on how you
    can start to collect metrics from the apps and services you have created in Docker
    using exporters to expose data in a Prometheus-friendly way.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本节帮助您更加熟悉 `PromQL` 查询语言，并组合您的查询以开始从表达式浏览器查看指标。接下来的部分将提供有关如何开始从在 Docker 中创建的应用程序和服务收集指标的详细信息，使用出口商以一种
    Prometheus 友好的方式公开数据。
- en: Using Prometheus Exporters
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Prometheus 出口商
- en: In this chapter, we have configured application metrics to provide data for
    Prometheus to scrape and collect, so why do we need to worry about exporters?
    As you have seen, Docker and `cAdvisor` have nicely exposed data endpoints from
    which Prometheus can gather metrics. But these have limited functionality. As
    we have seen from our new `web-nginx` site, there is no relevant data exposed
    by the web page running on our image. We can use exporters to help gather metrics
    from the application or service, and then provide data in a way that Prometheus
    can understand and gather.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已配置应用程序指标以提供数据供 Prometheus 抓取和收集，那么为什么我们需要担心出口商呢？正如您所见，Docker 和 `cAdvisor`
    已经很好地公开了数据端点，Prometheus 可以从中收集指标。但这些功能有限。正如我们从我们的新 `web-nginx` 网站中看到的，我们的镜像上运行的网页没有相关的数据暴露出来。我们可以使用出口商来帮助从应用程序或服务中收集指标，然后以
    Prometheus 能够理解和收集的方式提供数据。
- en: Although this may seem to be a major flaw in how Prometheus works, due to the
    increase in the use of Prometheus and the fact that it is open-source, vendors
    and third-party providers are now providing exporters to help you get your metrics
    from the application.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这可能看起来是 Prometheus 工作方式的一个主要缺陷，但由于 Prometheus 的使用增加以及它是开源的事实，供应商和第三方提供商现在提供出口商来帮助您从应用程序获取指标。
- en: This means that, by installing a specific library or using a prebuilt Docker
    image to run your application, you can expose your metrics data for collection.
    As an example, the `web-nginx` application we created earlier in this chapter
    is running on NGINK. To get metrics on our web application, we could simply install
    the `ngx_stub_status_prometheus` library onto our NGINX instance that is running
    our web application. Or better still, we can find a Docker image that someone
    has already built to run our web application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，通过安装特定库或使用预构建的 Docker 镜像来运行您的应用程序，您可以公开您的指标数据供收集。例如，我们在本章前面创建的 `web-nginx`
    应用程序正在 NGINX 上运行。要获取我们的 Web 应用程序的指标，我们可以简单地在运行我们的 Web 应用程序的 NGINX 实例上安装 `ngx_stub_status_prometheus`
    库。或者更好的是，我们可以找到某人已经构建好的 Docker 镜像来运行我们的 Web 应用程序。
- en: Note
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This section of the chapter has focused on NGINX Exporter, but exporters for
    a large number of applications can be found in their supporting documentation
    or with the Prometheus documentation.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的这一部分重点介绍了NGINX Exporter，但是大量应用程序的导出器可以在其支持文档或Prometheus文档中找到。
- en: In the following exercise, we will use our `nginx` container as an example and
    use an exporter with our `web-nginx` container to expose metrics available to
    Prometheus to collect.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将以我们的`nginx`容器为例，并将导出器与我们的`web-nginx`容器一起使用，以公开可供Prometheus收集的指标。
- en: 'Exercise 13.04: Using Metrics Exporters with Your Applications'
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13.04：使用应用程序的指标导出器
- en: 'So far, we''ve used an `nginx` container to provide a basic web page, but we
    do not have specific metrics available for our web page. In this exercise, you
    will use a different NGINX image, built with a metrics exporter that can be exposed
    to Prometheus:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用`nginx`容器提供了一个基本的网页，但我们没有特定的指标可用于我们的网页。在这个练习中，您将使用一个不同的NGINX镜像，该镜像带有可以暴露给Prometheus的指标导出器。
- en: 'If the `web-nginx` container is still running, stop the container with the
    following command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`web-nginx`容器仍在运行，请使用以下命令停止容器：
- en: '[PRE45]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Within Docker Hub, you have an image called `mhowlett/ngx-stud-status-prometheus`,
    which already has the `ngx_stub_status_prometheus` library installed. The library
    will allow you to set up an HTTP endpoint to provide metrics to Prometheus from
    your `nginx` container. Pull this image down onto your working environment:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker Hub中，您有一个名为`mhowlett/ngx-stud-status-prometheus`的镜像，其中已经安装了`ngx_stub_status_prometheus`库。该库将允许您设置一个HTTP端点，以从您的`nginx`容器向Prometheus提供指标。将此镜像下载到您的工作环境中：
- en: '[PRE46]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the previous exercise, you used the default NGINX configuration on the container
    to run your web application. To expose the metrics to Prometheus, you will need
    to create your configuration to override the default configuration and provide
    your metrics as an available HTTP endpoint. Create a file named `nginx.conf` in
    your working directory and add the following configuration details:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个练习中，您使用容器上的默认NGINX配置来运行您的Web应用程序。要将指标暴露给Prometheus，您需要创建自己的配置来覆盖默认配置，并将您的指标作为可用的HTTP端点提供。在您的工作目录中创建一个名为`nginx.conf`的文件，并添加以下配置细节：
- en: '[PRE47]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The preceding configuration will ensure that your server is still available
    on port `80` in *line 8*. *Line 11* will ensure that your current `index.html`
    page is provided, and *line 14* will then set up a subdomain of `/metrics` to
    provide the details available from the `ngx_stub_status_prometheus` library.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置将确保您的服务器仍然在端口`80`上可用*第8行*。*第11行*将确保提供您当前的`index.html`页面，*第14行*将设置一个子域`/metrics`，以提供`ngx_stub_status_prometheus`库中可用的详细信息。
- en: 'Provide the mount point for the `index.html` file to start up the `web-nginx`
    container and mount the `nginx.conf` configuration you created in the previous
    step using the following command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供`index.html`文件的挂载点，以启动`web-nginx`容器并使用以下命令挂载您在上一步中创建的`nginx.conf`配置：
- en: '[PRE48]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Your `web-nginx` application should be running again, and you should be able
    to see it from your web browser. Enter the URL `http://0.0.0.0/metrics` to see
    the metrics endpoint. The results in your web browser window should look similar
    to the following information:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的`web-nginx`应用程序应该再次运行，并且您应该能够从Web浏览器中看到它。输入URL `http://0.0.0.0/metrics`以查看指标端点。您的Web浏览器窗口中的结果应该类似于以下信息：
- en: '[PRE49]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You still need to let Prometheus know that it needs to collect the data from
    the new endpoint. So, stop Prometheus from running. Move into the application
    directory again, and with your text editor, add the following target to the end
    of the `prometheus.yml` configuration file:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您仍然需要让Prometheus知道它需要从新的端点收集数据。因此，停止Prometheus的运行。再次进入应用程序目录，并使用您的文本编辑器，在`prometheus.yml`配置文件的末尾添加以下目标：
- en: prometheus.yml
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: prometheus.yml
- en: '[PRE50]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The complete code for this step can be found at https://packt.live/3hzbQgj.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤的完整代码可在https://packt.live/3hzbQgj找到。
- en: 'Save the changes to the configuration and start Prometheus running again:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存配置更改，并重新启动Prometheus的运行：
- en: '[PRE51]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Confirm whether Prometheus is configured to collect data from the new metrics
    endpoint you have just created. Open your web browser and enter the URL `http://0.0.0.0:9090/targets`:![Figure
    13.14: Targets page showing web-nginx'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认Prometheus是否配置为从您刚刚创建的新指标端点收集数据。打开您的网络浏览器，输入URL `http://0.0.0.0:9090/targets`：![图13.14：显示web-nginx的目标页面
- en: '](image/B15021_13_14.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_14.jpg)'
- en: 'Figure 13.14: Targets page showing web-nginx'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.14：显示web-nginx的目标页面
- en: In this exercise, you learned to add an exporter to an application running on
    your environment. We first expanded on our previous `web-nginx` application to
    allow it to display more than one HTTP endpoint. We then used a Docker image that
    included the `ngx_stub_status_prometheus` library to allow us to display our `web-nginx`
    statistics. We then configured Prometheus to gather these details from the endpoint
    provided.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您学会了向在您的环境中运行的应用程序添加导出器。我们首先扩展了我们之前的`web-nginx`应用程序，以允许它显示多个HTTP端点。然后，我们使用了一个包含了`ngx_stub_status_prometheus`库的Docker镜像，以便我们能够显示我们的`web-nginx`统计信息。然后，我们配置了Prometheus以从提供的端点收集这些详细信息。
- en: In the following section, we will set up Grafana to allow us to view our data
    a lot more closely and provide user-friendly dashboards for the data we are collecting.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将设置Grafana，以便我们能够更仔细地查看我们的数据，并为我们正在收集的数据提供用户友好的仪表板。
- en: Extending Prometheus with Grafana
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grafana扩展Prometheus
- en: The Prometheus web interface provides a functional expression browser that allows
    us to search and view the data in our time-series database with limited installation.
    It provides a graphical interface but doesn't allow us to save any of our searches
    or visualizations. The Prometheus web interface is also limited as it cannot group
    queries in dashboards. Also, there are not many visualizations that are provided
    by the interface. This is where we can expand our collected data further with
    the use of an application such as Grafana.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus web界面提供了一个功能表达式浏览器，允许我们在有限的安装中搜索和查看我们的时间序列数据库中的数据。它提供了一个图形界面，但不允许我们保存任何搜索或可视化。Prometheus
    web界面也有限，因为它不能在仪表板中分组查询。而且，界面提供的可视化并不多。这就是我们可以通过使用Grafana等应用程序进一步扩展我们收集的数据的地方。
- en: Grafana allows us to connect directly with the Prometheus time-series database
    and perform queries and create visually appealing dashboards. Grafana can run
    as a standalone application on a server. We can preconfigure the Grafana Docker
    image to deploy onto our system, configured with a connection to our Prometheus
    database, and with a basic dashboard already set up to monitor our running containers.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana允许我们直接连接到Prometheus时间序列数据库，并执行查询并创建视觉上吸引人的仪表板。Grafana可以作为一个独立的应用程序在服务器上运行。我们可以预先配置Grafana
    Docker镜像，部署到我们的系统上，并配置到我们的Prometheus数据库的连接，并设置一个基本的仪表板来监视我们正在运行的容器。
- en: 'The following screen, Grafana Home Dashboard, is presented when you first log
    in to Grafana. You can always return to this page by clicking on the Grafana icon
    at the top left of the screen. This is the main work area where you can start
    to build dashboards, configure your environment, and add users'' plugins:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次登录Grafana时，会显示下面的屏幕，Grafana主页仪表板。您可以通过点击屏幕左上角的Grafana图标来返回到这个页面。这是主要的工作区，您可以在这里开始构建仪表板，配置您的环境，并添加用户插件：
- en: '![Figure 13.15: Grafana Home Dashboard'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.15：Grafana主页仪表板'
- en: '](image/B15021_13_15.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_15.jpg)'
- en: 'Figure 13.15: Grafana Home Dashboard'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.15：Grafana主页仪表板
- en: The left side of the screen is a handy menu that will help you configure Grafana
    further. The plus symbol will allow you to add new dashboards and data sources
    to your installation, while the dashboard icon (four squares) organizes all your
    dashboards into one area to search and view. Underneath the dashboard icon is
    the explore button, which provides an expression browser just like Prometheus
    has in order to run PromQL queries, while the alerts icon (bell) takes you to
    the window where you can configure alerts to trigger after different events occur.
    The configuration icon takes you to the screen where you can configure how Grafana
    operates, while the server admin icon allows you to manage who can access your
    Grafana web interface and what privileges they can have.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕左侧是一个方便的菜单，可以帮助您进一步配置Grafana。加号符号将允许您向安装中添加新的仪表板和数据源，而仪表板图标（四个方块）将所有仪表板组织到一个区域进行搜索和查看。在仪表板图标下面是探索按钮，它提供一个表达式浏览器，就像Prometheus一样，以便运行PromQL查询，而警报图标（铃铛）将带您到窗口，您可以在其中配置在不同事件发生后触发警报。配置图标将带您到屏幕，您可以在其中配置Grafana的操作方式，而服务器管理员图标允许您管理谁可以访问您的Grafana
    Web界面以及他们可以拥有什么权限。
- en: Feel free to explore the interface further when you install Grafana in the next
    exercise, but we will be working to automate the process as much as possible to
    avoid making any changes to your working environment.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中安装Grafana时，随意探索界面，但我们将努力尽可能自动化这个过程，以避免对您的工作环境进行任何更改。
- en: 'Exercise 13.05: Installing and Running Grafana on Your System'
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13.05：在您的系统上安装和运行Grafana
- en: 'In this exercise, you will set up Grafana on your system and allow the application
    to start using the data you have stored in your Prometheus database. You will
    install Grafana using its Docker image, provide a brief explanation of the interface,
    and begin to set up basic dashboards:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将在您的系统上设置Grafana，并允许应用程序开始使用您在Prometheus数据库中存储的数据。您将使用Grafana的Docker镜像安装Grafana，提供界面的简要说明，并开始设置基本的仪表板：
- en: 'If Prometheus is not running, start it up again. Also, make sure that your
    containers, `cAdvisor`, and the test NGINX server (`web-nginx`) are running:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Prometheus没有运行，请重新启动。另外，请确保您的容器、`cAdvisor`和测试NGINX服务器（`web-nginx`）正在运行：
- en: '[PRE52]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Open the `/etc/hosts` file of your system and add a domain name to the host
    IP of `127.0.0.1`. Unfortunately, you will not be able to use the localhost IP
    address you have been using to access Prometheus to automatically provision a
    data source for Grafana. IP addresses such as `127.0.0.1`, `0.0.0.0`, or using
    localhost will not be recognized as a data source for Grafana. Depending on your
    system, you may have a number of different entries already added to the `hosts`
    file. You will usually have the IP address of `127.0.0.1` listed as one of the
    first IP addresses that will reference the domain of `localhost` and amend `prometheus`
    to this line, as we have in the following output:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您系统的`/etc/hosts`文件，并将一个域名添加到主机IP`127.0.0.1`。不幸的是，您将无法使用您一直用来访问Prometheus的localhost
    IP地址来自动为Grafana配置数据源。诸如`127.0.0.1`、`0.0.0.0`或使用localhost的IP地址将不被识别为Grafana的数据源。根据您的系统，您可能已经添加了许多不同的条目到`hosts`文件中。通常您将会在最前面的IP地址列表中有`127.0.0.1`的IP地址，它将引用`localhost`域并将`prometheus`修改为这一行，就像我们在以下输出中所做的那样：
- en: '[PRE53]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Save the `hosts` file. Open your web browser and enter the URL `http://prometheus:9090`.
    The Prometheus expression browser should now be displayed. You no longer need
    to provide the system IP address.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`hosts`文件。打开您的网络浏览器并输入URL`http://prometheus:9090`。Prometheus表达式浏览器现在应该显示出来。您不再需要提供系统IP地址。
- en: 'To automatically provision your Grafana image, you will need to mount a `provisioning`
    directory from your host system. Create a provisioning directory and ensure this
    directory includes extra directories for `dashboards`, `datasources`, `plugins`
    and `notifiers`, as in the following command:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要自动配置您的Grafana镜像，您需要从主机系统挂载一个`provisioning`目录。创建一个provisioning目录，并确保该目录包括额外的目录`dashboards`、`datasources`、`plugins`和`notifiers`，就像以下命令中所示：
- en: '[PRE54]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create a file called `automatic_data.yml` in the `provisioning/datasources`
    directory. Open the file with your text editor and enter the following details
    to tell Grafana what data it will use to provide dashboards and visualizations.
    The following details simply name the data source, provide the type of data, and
    where to find the data. In this instance, this is your new Prometheus domain name:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`provisioning/datasources`目录中创建一个名为`automatic_data.yml`的文件。用文本编辑器打开文件并输入以下细节，告诉Grafana它将使用哪些数据来提供仪表板和可视化效果。以下细节只是命名数据源，提供数据类型以及数据的位置。在这种情况下，这是您的新Prometheus域名：
- en: '[PRE55]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, create a file, `automatic_dashboard.yml`, in the `provisioning/dashboards`
    directory. Open the file with your text editor and add the following details.
    This simply provides the location of where future dashboards can be stored on
    startup:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`provisioning/dashboards`目录中创建一个名为`automatic_dashboard.yml`的文件。用文本编辑器打开文件并添加以下细节。这只是提供了未来仪表板可以在启动时存储的位置：
- en: '[PRE56]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You've done enough to start up our Grafana Docker image. You are using the supported
    Grafana image provided as `grafana/grafana`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经做了足够的工作来启动我们的Grafana Docker镜像。您正在使用提供的受支持的Grafana镜像`grafana/grafana`。
- en: Note
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We don't have any code to add as a dashboard as yet, but in the following steps,
    you will create a basic dashboard that will be automatically provisioned later
    in this exercise. If you wanted to, you could also search the internet for existing
    dashboards that Grafana users have created and provision them instead.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前没有任何代码可以添加为仪表板，但在接下来的步骤中，您将创建一个基本的仪表板，稍后将自动配置。如果您愿意，您也可以搜索互联网上Grafana用户创建的现有仪表板，并代替它们进行配置。
- en: 'Run the following command to pull and start up the Grafana image. It mounts
    your provisioning directory to the `/etc/grafana/provisioning` directory on your
    Docker image using the `-v` option. It also uses the `-e` option to set the administration
    password to `secret` using the `GF_SECURITY_ADMIN_PASSWORD` environment variable,
    which will mean you won''t need to reset the administration password each time
    you log in to a newly started container. Finally, you also use `-p` to expose
    port `3000` of your image to port `3000` of our system:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以拉取并启动Grafana镜像。它使用`-v`选项将您的配置目录挂载到Docker镜像上的`/etc/grafana/provisioning`目录。它还使用`-e`选项，使用`GF_SECURITY_ADMIN_PASSWORD`环境变量将管理密码设置为`secret`，这意味着您不需要每次登录到新启动的容器时重置管理密码。最后，您还使用`-p`将您的镜像端口`3000`暴露到我们系统的端口`3000`：
- en: '[PRE57]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Although using a Grafana Docker image is convenient, you will lose all your
    changes and dashboards each time the image restarts. That is why we will provision
    the installation while demonstrating how to use Grafana at the same time.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然使用Grafana Docker镜像很方便，但每次镜像重新启动时，您将丢失所有更改和仪表板。这就是为什么我们将在演示如何同时使用Grafana的同时进行安装配置。 '
- en: 'You have started up the image on port `3000`, so you should now be able to
    open a web browser. Enter the URL `http://0.0.0.0:3000` in your web browser. It
    should display the welcome page for Grafana. To log in to the application, use
    the default administrator account that has a username of `admin` and the password
    we specified as the `GF_SECURITY_ADMIN_PASSWORD` environment variable:![Figure
    13.16: The Grafana login screen'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经在端口`3000`上启动了镜像，因此现在应该能够打开Web浏览器。在您的Web浏览器中输入URL`http://0.0.0.0:3000`。它应该显示Grafana的欢迎页面。要登录到应用程序，请使用具有用户名`admin`和我们指定为`GF_SECURITY_ADMIN_PASSWORD`环境变量的密码的默认管理员帐户：![图13.16：Grafana登录屏幕
- en: '](image/B15021_13_16.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_16.jpg)'
- en: 'Figure 13.16: The Grafana login screen'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.16：Grafana登录屏幕
- en: 'When you log in, you''ll be presented with the Grafana Home Dashboard. Click
    the plus symbol on the left of the screen and select `Dashboard` to add a new
    dashboard:![Figure 13.17: The Grafana welcome screen'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，您将看到Grafana主页仪表板。单击屏幕左侧的加号符号，然后选择“仪表板”以添加新的仪表板：![图13.17：Grafana欢迎屏幕
- en: '](image/B15021_13_17.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_17.jpg)'
- en: 'Figure 13.17: The Grafana welcome screen'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.17：Grafana欢迎屏幕
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Your Grafana interface will most likely be displayed in the dark default theme.
    We have changed ours to the light theme to make it easier to read. To change this
    preference on your own Grafana application, you can click the user icon at the
    bottom left of the screen, select `Preferences`, and then search for `UI Theme`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Grafana界面很可能显示为深色默认主题。我们已将我们的更改为浅色主题以便阅读。要在您自己的Grafana应用程序上更改此首选项，您可以单击屏幕左下角的用户图标，选择“首选项”，然后搜索“UI主题”。
- en: Click on the `Add new panel` button.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加新面板”按钮。
- en: 'To add a new query using `Prometheus` data, select `Prometheus` as the data
    source from the drop-down list:![Figure 13.18: Creating our first dashboard in
    Grafana'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用`Prometheus`数据添加新查询，请从下拉列表中选择`Prometheus`作为数据源：![图13.18：在Grafana中创建我们的第一个仪表板
- en: '](image/B15021_13_18.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_18.jpg)'
- en: 'Figure 13.18: Creating our first dashboard in Grafana'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.18：在Grafana中创建我们的第一个仪表板
- en: In the metrics section, add the PromQL query `sum (rate (container_cpu_usage_seconds_total{image!=""}[1m]))
    by (name)`. The query will provide the details of all the containers running on
    your system. It will also provide the CPU usage of each overtime. Depending on
    the amount of data you have, you may want to set `Relative time` to `15m` in the
    `Query options` drop down menu.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指标部分，添加PromQL查询`sum (rate (container_cpu_usage_seconds_total{image!=""}[1m]))
    by (name)`。该查询将提供系统上所有正在运行的容器的详细信息。它还将随时间提供每个容器的CPU使用情况。根据您拥有的数据量，您可能希望在`查询选项`下拉菜单中将`相对时间`设置为`15m`。
- en: 'This example uses `15m` to make sure you have enough data for the graph, but
    this time range could be set to whatever you wish:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用`15m`来确保您有足够的数据用于图表，但是此时间范围可以设置为您希望的任何值：
- en: '![Figure 13.19: Adding dashboard metrics'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.19：添加仪表板指标'
- en: '](image/B15021_13_19.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_19.jpg)'
- en: 'Figure 13.19: Adding dashboard metrics'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.19：添加仪表板指标
- en: 'Select the `Show options` button to add a title to your dashboard panel. In
    the following image, the title of your panel is set as `CPU Container Usage`:![Figure
    13.20: Adding a dashboard title'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`显示选项`按钮以向仪表板面板添加标题。在下图中，面板的标题设置为`CPU Container Usage`：![图13.20：添加仪表板标题
- en: '](image/B15021_13_20.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_20.jpg)'
- en: 'Figure 13.20: Adding a dashboard title'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.20：添加仪表板标题
- en: 'Click the save icon at the top of the screen. This will give you the option
    to name the dashboard— `Container Monitoring` in this instance. When you click
    `Save`, you will then be taken to your completed dashboard screen, similar to
    the one here:![Figure 13.21: Dashboard screen'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击屏幕顶部的保存图标。这将为您提供命名仪表板的选项—在这种情况下为`Container Monitoring`。单击`保存`后，您将被带到已完成的仪表板屏幕，类似于这里的屏幕：![图13.21：仪表板屏幕
- en: '](image/B15021_13_21.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_21.jpg)'
- en: 'Figure 13.21: Dashboard screen'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.21：仪表板屏幕
- en: 'At the top of the dashboard screen, to the left of the save icon, you will
    have the option to export your dashboard in `JSON` format. If you do this, you
    can use this `JSON` file to add to your provisioning directory. It will help you
    install the dashboard into your Grafana image when you run it. Select `Export`
    and save the file to the `/tmp` directory where the name of the file will default
    to something similar to the name of the dashboard and the timestamp data. In this
    example, it saved the `JSON` file as `Container Monitoring-1579130313205.json`.
    Also make sure the `Export for sharing externally` option is not turned on, as
    shown in the image below:![Figure 13.22: Exporting your dashboard as JSON'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仪表板屏幕顶部，在保存图标的左侧，您将有选项以`JSON`格式导出您的仪表板。如果这样做，您可以使用此`JSON`文件添加到您的配置目录中。当您运行时，它将帮助您将仪表板安装到Grafana映像中。选择`导出`并将文件保存到`/tmp`目录，文件名将默认为类似于仪表板名称和时间戳数据的内容。在此示例中，它将`JSON`文件保存为`Container
    Monitoring-1579130313205.json`。还要确保未打开`用于外部共享的导出`选项，如下图所示：![图13.22：将仪表板导出为JSON
- en: '](image/B15021_13_22.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_22.jpg)'
- en: 'Figure 13.22: Exporting your dashboard as JSON'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.22：将您的仪表板导出为JSON
- en: 'To add the dashboard to your provisioning file, you need to first stop the
    Grafana image from running. Do this with the following `docker kill` command:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将仪表板添加到您的配置文件中，您需要首先停止运行Grafana映像。使用以下`docker kill`命令执行此操作：
- en: '[PRE58]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add the dashboard file you saved in *Step 15* to the `provisioning/dashboards`
    directory and name the file `ContainerMonitoring.json` as a part of the copy,
    shown in the following command:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您在*步骤15*中保存的仪表板文件添加到`provisioning/dashboards`目录，并将文件命名为`ContainerMonitoring.json`作为复制的一部分，如下命令所示：
- en: '[PRE59]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Start the Grafana image again and log in to the application using the default
    administration password:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Grafana映像，并使用默认管理密码登录应用程序：
- en: '[PRE60]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Note
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: By provisioning the dashboard and data sources in this manner, this means you
    will no longer be able to create dashboards from the Grafana web interface. When
    you create a dashboard from now on, you will be presented with an option to save
    the dashboard as a JSON file, as we did during the exporting of our dashboard.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式预配仪表板和数据源，这意味着您将无法再从Grafana Web界面创建仪表板。从现在开始，当您创建仪表板时，您将被要求将仪表板保存为JSON文件，就像我们在导出仪表板时所做的那样。
- en: 'Log in to the home dashboard now. You should see the `Container Monitoring`
    dashboard available as a recently accessed dashboard, but if you click the home
    icon at the top of the screen, it will also show it available in the `General`
    folder of your Grafana installation:![Figure 13.23: Container monitoring dashboard
    available and provisioned'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在登录主页仪表板。您应该会看到`Container Monitoring`仪表板作为最近访问的仪表板可用，但如果您点击屏幕顶部的主页图标，它也会显示在您的Grafana安装的`General`文件夹中可用：![图13.23：可用和预配的容器监控仪表板
- en: '](image/B15021_13_23.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_23.jpg)'
- en: 'Figure 13.23: Container monitoring dashboard available and provisioned'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.23：可用和预配的容器监控仪表板
- en: We have now set up a fully functional dashboard that loads automatically when
    we run our Grafana Docker image. As you can see, Grafana provides a professional
    user interface to help us monitor the resource usage of our running containers.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置了一个完全功能的仪表板，当我们运行Grafana Docker镜像时会自动加载。正如你所看到的，Grafana提供了一个专业的用户界面，帮助我们监视正在运行的容器的资源使用情况。
- en: This has brought us to the end of this section, where we've shown you how you
    can collect your metrics using Prometheus to help monitor how your container applications
    are running. The following activities will use the knowledge you have learned
    in the previous sections to expand your installation and monitoring further.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们本节的结束，我们向您展示了如何使用Prometheus收集指标，以帮助监视您的容器应用程序的运行情况。接下来的活动将使用您在之前章节中学到的知识，进一步扩展您的安装和监控。
- en: 'Activity 13.01: Creating a Grafana Dashboard to Monitor System Memory'
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动13.01：创建一个Grafana仪表板来监视系统内存
- en: 'In previous exercises, you''ve set up a quick dashboard to monitor the system
    CPU being used by our Docker containers. As you saw in the previous chapter, it''s
    also important to monitor the system memory being used by our running containers
    as well. In this activity, you are asked to create a Grafana dashboard that will
    monitor the system memory being used by our running containers and add it to our
    `Container Monitoring` dashboard, ensuring it can be provisioned when our Grafana
    image is started up:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的练习中，您已经设置了一个快速仪表板，以监视我们的Docker容器使用的系统CPU。正如您在上一章中所看到的，监视正在运行的容器使用的系统内存也很重要。在这个活动中，您被要求创建一个Grafana仪表板，用于监视正在运行的容器使用的系统内存，并将其添加到我们的`Container
    Monitoring`仪表板中，确保在启动我们的Grafana镜像时可以预配：
- en: 'The steps you''ll need to complete this activity are as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要完成此活动的步骤如下：
- en: Ensure your environment is being monitored by Prometheus and that Grafana is
    installed on your system. Make sure you use Grafana to search over the time-series
    data stored on Prometheus.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的环境正在被Prometheus监视，并且Grafana已安装在您的系统上。确保您使用Grafana在Prometheus上存储的时间序列数据上进行搜索。
- en: Create a PromQL query to monitor the container memory being used by your running
    Docker containers.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个PromQL查询，监视正在运行的Docker容器使用的容器内存。
- en: Save the new dashboard panel on your `Container Monitoring` dashboard.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的`Container Monitoring`仪表板上的新仪表板面板。
- en: Ensure that the new and improved `Container Monitoring` dashboard is now available
    and provisioned when you start up your Grafana container.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保新的改进后的`Container Monitoring`仪表板现在在启动Grafana容器时可用和预配。
- en: '**Expected Output**:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**预期输出**：'
- en: 'You should see the newly created `Memory Container usage` panel on the top
    of the dashboard when you start the Grafana container:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动Grafana容器时，您应该在仪表板顶部看到新创建的`内存容器使用情况`面板：
- en: '![Figure 13.24: New dashboard panel displaying memory usage'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.24：显示内存使用情况的新仪表板面板'
- en: '](image/B15021_13_24.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_24.jpg)'
- en: 'Figure 13.24: New dashboard panel displaying memory usage'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.24：显示内存使用情况的新仪表板面板
- en: Note
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor353).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor353)找到。
- en: The next activity will make sure you are comfortable using exporters and adding
    new targets to Prometheus to start tracking extra metrics in your panoramic trekking
    app.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个活动将确保您能够舒适地使用导出器，并向Prometheus添加新的目标，以开始跟踪全景徒步应用程序中的额外指标。
- en: 'Activity 13.02: Configuring the Panoramic Trekking App to Expose Metrics to
    Prometheus'
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动13.02：配置全景徒步应用程序以向Prometheus暴露指标
- en: 'Your metrics monitoring environment is starting to look pretty good, but there
    are some applications in your panoramic trekking app that could be providing extra
    details and metrics to monitor—for example, the PostgreSQL application running
    on your database. Choose one of the applications in the panoramic trekking app
    to expose metrics to your Prometheus environment:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 您的指标监控环境开始看起来相当不错，但是全景徒步应用程序中有一些应用可能会提供额外的细节和指标供监控，例如在您的数据库上运行的PostgreSQL应用程序。选择全景徒步应用程序中的一个应用程序，将其指标暴露给您的Prometheus环境：
- en: 'The steps you''ll have to take in order to complete this activity are as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要完成此活动的步骤如下：
- en: Ensure Prometheus is running on your system and collecting metrics.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Prometheus正在您的系统上运行并收集指标。
- en: Choose a service or application running as part of the panoramic trekking app
    and research how you can expose metrics for Prometheus to collect.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择作为全景徒步应用程序一部分运行的服务或应用程序，并研究如何暴露指标以供Prometheus收集。
- en: Implement your changes to your application or service.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改实施到您的应用程序或服务中。
- en: Test your changes and verify that the metrics are available to be collected.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试您的更改，并验证指标是否可供收集。
- en: Configure a new target on Prometheus to collect the new panoramic trekking app
    metrics.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Prometheus上的新目标以收集新的全景徒步应用程序指标。
- en: Verify that you are able to query your new metrics on Prometheus.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您能够在Prometheus上查询您的新指标。
- en: 'Upon successful completion of the activity, you should see the `postgres-web`
    target displayed on the Prometheus `Targets` page:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 成功完成活动后，您应该在Prometheus的“Targets”页面上看到`postgres-web`目标显示：
- en: '![Figure 13.25: New postgres-web Targets page displayed on Prometheus'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.25：在Prometheus上显示的新postgres-web目标页面'
- en: '](image/B15021_13_25.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_25.jpg)'
- en: 'Figure 13.25: New postgres-web Targets page displayed on Prometheus'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.25：在Prometheus上显示的新postgres-web目标页面
- en: Note
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor354).
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor354)找到。
- en: Summary
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a long look at metrics and monitoring our container
    applications and services. We started with a discussion on why you need to have
    a clear strategy on your metric monitoring and why you need to make a lot of decisions
    before your project even starts development. We then introduced Prometheus and
    gave an overview of its history, how it works, and why it has grown in popularity
    over a very short period. It was then time to get back working again and we installed
    Prometheus onto our system, became familiar with using the web interface, started
    to gather metrics from Docker (with some minor changes), and by using `cAdvisor`,
    collected metrics on the running containers.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入研究了度量标准和监控我们的容器应用程序和服务。我们从讨论为什么您需要在度量监控上制定清晰的策略以及为什么您需要在项目开始开发之前做出许多决策开始。然后，我们介绍了Prometheus，并概述了其历史、工作原理以及为什么它在很短的时间内就变得非常流行。然后是重新开始工作的时候，我们将Prometheus安装到我们的系统上，熟悉使用Web界面，开始从Docker收集度量标准（进行了一些小的更改），并使用`cAdvisor`收集正在运行的容器的度量标准。
- en: The query language used by Prometheus can sometimes be a little confusing, so
    we took some time to explore PromQL before looking at using exporters to collect
    even more metrics. We finished up this chapter by integrating Grafana into our
    environment, displaying our times-series data from Prometheus, and creating useful
    dashboards and visualizations on the data we are collecting.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus使用的查询语言有时可能会有点令人困惑，因此我们花了一些时间来探索PromQL，然后再看看如何使用导出器来收集更多的度量标准。我们在本章结束时将Grafana集成到我们的环境中，显示来自Prometheus的时间序列数据，并创建有用的仪表板和可视化数据。
- en: Our next chapter is going to continue the monitoring theme with the collection
    and monitoring of log data from our running containers.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一章将继续监控主题，收集和监控我们正在运行的容器的日志数据。
