["```\npassword, user name, userid\n\n```", "```\npassword, user, userid,\"group1,group2,group3\"\n\n```", "```\nBASE64ENCODED(USER:PASSWORD)\n\n```", "```\necho -n \"user:secret\" | base64\n\n```", "```\ntoken, user, userid, group\n\n```", "```\n$ echo `dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d \"=+/\" | dd bs=32 count=1 2>/dev/null`\n\n```", "```\n3XQ8W6IAourkXOLH2yfpbGFXftbH0vn,default,default\n\n```", "```\nAuthorization: Bearer 3XQ8W6IAourkXOLH2yfpbGFXftbH0vn\n\n```", "```\n--client-ca-file=<PATH_TO_CA_CERTIFICATE_FILE>\n\n```", "```\n$ openssl req -new -key user.pem -out user-csr.pem \\\n\n-subj \"/CN=user/O=group1/O=group2\"\n\n```", "```\n$ kube-apiserver --authorization-mode <mode>\n\n```", "```\n$ kube-apiserver --authorization-mode=ABAC \\\n\n--authorization-policy-file=<PATH_TO_ POLICY_FILE>\n\n```", "```\n{\n\n \"apiVersion\": \"abac.authorization.kubernetes.io/v1beta1\", \n\n \"kind\": \"Policy\", \n\n \"spec\": {\n\n \"user\":\"john\", \n\n \"namespace\": \"myApp\", \n\n \"resource\": \"*\", \n\n \"apiGroup\": \"*\", \n\n \"nonResourcePath\": \"*\" \n\n }\n\n}\n\n```", "```\n{\n\n \"apiVersion\": \"abac.authorization.kubernetes.io/v1beta1\", \n\n \"kind\": \"Policy\", \n\n \"spec\":{\n\n \"user\":\"admin\", \n\n \"namespace\": \"*\", \n\n \"resource\": \"*\", \n\n \"apiGroup\": \"*\", \n\n \"nonResourcePath\": \"*\" \n\n }\n\n}\n\n```", "```\n{\n\n \"apiVersion\": \"abac.authorization.kubernetes.io/v1beta1\", \n\n \"kind\": \"Policy\", \n\n \"spec\": {\n\n \"user\":\"*\", \n\n \"namespace\": \"*\", \n\n \"resource\": \"*\", \n\n \"apiGroup\": \"*\", \n\n \"nonResourcePath\": \"*\", \n\n \"readonly\":true \n\n }\n\n} \n\n```", "```\n--authorization-mode=RBAC\n\n```", "```\napiVersion: rbac.authorization.k8s.io/v1beta1\n\nmetadata:\n\n name: cluster-writer\n\nrules:\n\n - apiGroups: [\"*\"]\n\n resources: [\"*\"]\n\n verbs: [\"*\"]\n\n nonResourceURLs: [\"*\"]\n\n```", "```\n$ kubectl create -f cluster-writer.yml\n\n```", "```\n$ kubectl create rolebinding john-admin-binding \\\n\n--clusterrole=admin --user=john --namespace=myApp\n\n```", "```\n$ kubectl create clusterrolebinding admin-cluster-admin-binding \\\n\n--clusterrole=cluster-admin --user=admin\n\n```", "```\napiVersion: rbac.authorization.k8s.io/v1beta1\n\nkind: ClusterRoleBinding\n\nmetadata:\n\n name: admin-cluster-admin-binding\n\nroleRef:\n\n apiGroup: rbac.authorization.k8s.io\n\n kind: ClusterRole\n\n name cluster-admin\n\nsubjects:\n\n- kind: User\n\n name: admin\n\n```", "```\n{\n\n \"apiVersion\": \"authorization.k8s.io/v1beta1\",\n\n \"kind\": \"SubjectAccessReview\",\n\n \"spec\": {\n\n \"resourceAttributes\": {\n\n \"namespace\": \"rest-example\",\n\n \"verb\": \"get\",\n\n \"resource\": \"pods\"\n\n },\n\n \"user\": \"john\",\n\n \"group\": [\n\n \"group1\",\n\n \"group2\"\n\n ]\n\n }\n\n} \n\n```", "```\n{\n\n \"apiVersion\": \"authorization.k8s.io/v1beta1\",\n\n \"kind\": \"SubjectAccessReview\",\n\n \"status\": {\n\n \"allowed\": true\n\n }\n\n} \n\n```", "```\n{\n\n \"apiVersion\": \"authorization.k8s.io/v1beta1\",\n\n \"kind\": \"SubjectAccessReview\",\n\n \"status\": {\n\n \"allowed\": false,\n\n \"reason\": \"user does not have read access to the namespace\"\n\n }\n\n}\n\n```", "```\n$ kubectl proxy --port=8080\n\n```", "```\n$ curl http://localhost:8080/api/\n\n```", "```\n{\n\n \"apiVersion\": \"v1\",\n\n \"kind\": \"Service\",\n\n \"metadata\": {\n\n \"name\": \"rest-example\",\n\n \"labels\": {\n\n \"app\": \"rest-example\",\n\n \"tier\": \"backend\"\n\n }\n\n },\n\n \"spec\": {\n\n \"type\": \"NodePort\",\n\n \"ports\": [\n\n {\n\n \"port\": 8080\n\n }\n\n ],\n\n \"selector\": {\n\n \"app\": \"rest-example\",\n\n \"tier\": \"backend\"\n\n }\n\n }\n\n} \n\n```", "```\n$ curl -s http://localhost:8080/api/v1/namespaces/default/services \\\n\n-XPOST -H 'Content-Type: application/json' -d@service.json\n\n```", "```\n{\n\n \"apiVersion\": \"extensions/v1beta1\",\n\n \"kind\": \"Deployment\",\n\n \"metadata\": {\n\n \"name\": \"rest-example\"\n\n },\n\n \"spec\": {\n\n \"replicas\": 1,\n\n \"template\": {\n\n \"metadata\": {\n\n \"labels\": {\n\n \"app\": \"rest-example\",\n\n \"tier\": \"backend\"\n\n }\n\n },\n\n \"spec\": {\n\n \"containers\": [\n\n {\n\n \"name\": \"rest-example\",\n\n \"image\": \"jotka/rest-example\",\n\n \"imagePullPolicy\": \"IfNotPresent\",\n\n \"resources\": {\n\n \"requests\": {\n\n \"cpu\": \"100m\",\n\n \"memory\": \"100Mi\"\n\n }\n\n },\n\n \"env\": [\n\n {\n\n \"name\": \"GET_HOSTS_FROM\",\n\n \"value\": \"dns\"\n\n }\n\n ],\n\n \"ports\": [\n\n {\n\n \"containerPort\": 8080\n\n }\n\n ]\n\n }\n\n ]\n\n }\n\n }\n\n }\n\n}\n\n```", "```\n$ curl -s \\ http://localhost:8080/apis/extensions/v1beta1/namespaces/default/deployments -XPOST -H 'Content-Type: application/json' \\\n\n-d@deployment.json\n\n```", "```\n$ kubectl get services\n\n$ kubectl get deployments\n\n$ kubectl get pods\n\n```", "```\n$ kubectl get pods -v6\n\n```", "```\nGET https://192.168.99.100:8443/api/v1/namespaces/default/pods\n\n```", "```\n$ curl http://localhost:8080/api/v1/namespaces/default/pods\n\n```", "```\n$ curl http://localhost:8000/ \\ apis/extensions/v1beta1/namespaces/default/deployments/rest-example \\ \n\n-XDELETE\n\n$ curl http://localhost:8080/ \\ api/v1/namespaces/default/services/rest-example -XDELETE\n\n```", "```\n$ minikube start --extra-config=apiserver.Features.EnableSwaggerUI=true\n\n```", "```\nhttp://localhost:8080/swagger-ui/\n\n```"]