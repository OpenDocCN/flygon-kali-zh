- en: Chapter 7. Building a Spy Police with the Internet of Things Dashboard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。用物联网仪表盘构建间谍警察
- en: 'In this chapter, we will look at several home domestic projects. You can combine
    these projects with the other tools that we have seen in previous chapters. Doing
    so will help you improve your knowledge and also let you develop your own. In
    this chapter, the following topics will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看几个家庭项目。您可以将这些项目与我们在前几章中看到的其他工具结合使用。这样做将有助于提高您的知识，也让您自己开发。本章将涵盖以下主题：
- en: Spy microphone that detects noise
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测噪音的间谍麦克风
- en: Regulating the current of an AC lamp dimmer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调节交流灯调光器的电流
- en: Controlling access with an RFID card
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用RFID卡控制访问
- en: Detecting smoke
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测烟雾
- en: Building an alarm system using Raspberry Pi Zero
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用树莓派Zero构建报警系统
- en: Monitoring the climate from a remote dashboard
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从远程仪表盘监控气候
- en: Spy microphone that detects noise
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测噪音的间谍麦克风
- en: 'In this section, we will look at a project that we can use in a house to detect
    noise or the level of sound so that we can detect when a person talks in front
    of the house. This project consists of a module that has a microphone, similar
    to the following image:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一个可以在房子里使用的项目，用于检测噪音或声音级别，以便我们可以检测到有人在房子前说话。这个项目包括一个带有麦克风的模块，类似于下面的图像：
- en: '![Spy microphone that detects noise](graphics/B05170_07_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![检测噪音的间谍麦克风](graphics/B05170_07_01.jpg)'
- en: Software code
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件代码
- en: 'We need to make a program that can read the analog signal that the module sends
    to the Arduino board:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要制作一个程序，可以读取模块发送到Arduino板的模拟信号：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We then download the sketch, and in the following screenshot we have the results
    of the level of sound:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们下载草图，在下面的截图中我们有声音级别的结果：
- en: '![Software code](graphics/B05170_07_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_02.jpg)'
- en: 'In the following image we can see the final circuit connection to the Arduino
    Board:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图像中，我们可以看到最终的电路连接到Arduino板：
- en: '![Software code](graphics/B05170_07_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_03.jpg)'
- en: Regulating the current of an AC lamp dimmer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调节交流灯调光器的电流
- en: 'In this section, we will see how to regulate an AC lamp. For so many years
    I''ve wanted to explain and share a project like this, and I''m finally. This
    can be applied to regulate your lamps at home in order to decrease domestic power
    the consumption: the following sections will explain the project in more detail.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何调节交流灯。多年来，我一直想解释和分享这样的项目，现在终于可以了。这可以应用于调节家里的灯，以减少家庭用电量：接下来的章节将更详细地解释这个项目。
- en: Hardware requirements
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件要求
- en: 'We need the following electronic components:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下电子元件：
- en: H-bridge
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H桥
- en: 24 AC transformer
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 24V交流变压器
- en: Two resistors 22k (1 watt)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个电阻22k（1瓦）
- en: One integrated circuit (4N25)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个集成电路（4N25）
- en: One resistor 10k
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电阻10k
- en: One potentiometer of 5k
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个5k的电位计
- en: One resistor 330 ohms
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电阻330欧姆
- en: One resistor 180 ohms
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电阻180欧姆
- en: One integrated circuit MOC3011
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个集成电路MOC3011
- en: One TRIAC 2N6073
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个TRIAC 2N6073
- en: 'In the following circuit diagram, we can see the connections for the dimmer
    from the Arduino board:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的电路图中，我们可以看到Arduino板上调光器的连接：
- en: '![Hardware requirements](graphics/B05170_07_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![硬件要求](graphics/B05170_07_04.jpg)'
- en: Software code
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件代码
- en: 'You can now either copy the code inside a file called `Dimner.ino`, or just
    get the complete code from the folder for this project:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以将代码复制到一个名为`Dimner.ino`的文件中，或者只需从此项目的文件夹中获取完整的代码：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After we have downloaded the sketch we can see the final results. With the
    potentiometer, we can regulate the intensity of the lamp. In our house we can
    have our lamps on whenever we want: maybe we can control them according the ambient
    light of the environment.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载了草图之后，我们可以看到最终的结果。通过电位器，我们可以调节灯的亮度。在我们的房子里，我们可以随时打开灯：也许我们可以根据环境光控制它们。
- en: 'In the following images, we will see the different moments of lamp, if we regulate
    the input signal of the potentiometer:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图像中，我们将看到灯的不同时刻，如果我们调节电位器的输入信号：
- en: '![Software code](graphics/B05170_07_05.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_05.jpg)'
- en: 'In the following image, we can see the result of regulating the brightness
    of the lamp:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图像中，我们可以看到调节灯的亮度的结果：
- en: '![Software code](graphics/B05170_07_06.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_06.jpg)'
- en: 'Here we can see the dimmer of the lamp at its maximum brightness:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到灯的调光器处于最大亮度：
- en: '![Software code](graphics/B05170_07_07.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_07.jpg)'
- en: Controlling access with an RFID card
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用RFID卡控制访问
- en: In this section, we will see how to control access via a door. In the last chapter,
    we saw how to control the lock and the lamps of a house. This project can complement
    the last one as it will enable you to control the opening of a door, a specific
    bedroom door, or lights in other rooms.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何通过门控制访问。在上一章中，我们看到了如何控制房子的锁和灯。这个项目可以作为上一个项目的补充，因为它可以让您控制门的打开，特定卧室的门，或其他房间的灯。
- en: Hardware requirements
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件要求
- en: 'For this project, we need the following equipment:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们需要以下设备：
- en: Reading TAGS cards
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取标签卡
- en: RFID RC522 Module
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFID RC522模块
- en: Arduino Board
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino板
- en: 'The following image shows the RFID tags for reading and controlling the access:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了用于读取和控制访问的RFID标签：
- en: '![Hardware requirements](graphics/B05170_07_08.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![硬件要求](graphics/B05170_07_08.jpg)'
- en: 'The following figure, shows the RFID card interface for Arduino:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了Arduino的RFID卡接口：
- en: '![Hardware requirements](graphics/RFID-RC522-pinout.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![硬件要求](graphics/RFID-RC522-pinout.jpg)'
- en: Software requirements
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件要求
- en: We need to install the `<MFRC522.h>` library, this file can communicate with
    and configure the module for reading the tag cards. This library can be downloaded
    from [https://github.com/miguelbalboa/rfid](https://github.com/miguelbalboa/rfid).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装`<MFRC522.h>`库，这个文件可以与并配置模块以读取标签卡进行通信。这个库可以从[https://github.com/miguelbalboa/rfid](https://github.com/miguelbalboa/rfid)下载。
- en: Software code
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件代码
- en: 'You can now either copy the code inside a file called `RFID.ino`, or just get
    the complete code from the folder for this project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将代码复制到名为`RFID.ino`的文件中，或者直接从该项目的文件夹中获取完整的代码：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is the final result when we pass the Tag card in front of the RFID module
    connected to the Arduino, if the code below, it will display the message (Access
    Granted).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将标签卡放在连接到Arduino的RFID模块前时，如果以下代码，它将显示消息（访问已授权）。
- en: 'In this part of the code, we configure the number of cards authorized:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的这一部分，我们配置了授权卡的数量：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Software code](graphics/B05170_07_10.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_10.jpg)'
- en: 'If we keep the card on the tag and card that is not registered, it can provide
    the correct access:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将卡片放在未注册的标签和卡上，它可以提供正确的访问：
- en: '![Software code](graphics/B05170_07_11.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_11.jpg)'
- en: 'The final result with the complete connections is shown in the following image:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完整连接的最终结果如下图所示：
- en: '![Software code](graphics/B05170_07_12.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_12.jpg)'
- en: Detecting smoke
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测烟雾
- en: In this section, we will test an **MQ135** sensor which can detect smoke. This
    could also be used in a home to detect a gas leak. In this case, we will use it
    to detect smoke.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将测试一个可以检测烟雾的**MQ135**传感器。这也可以用于家庭检测气体泄漏。在这种情况下，我们将用它来检测烟雾。
- en: 'In home automation systems, putting all the sensors to detect something at
    home, we measure the real world: in this case we used the MQ135 sensor which can
    detect gas and smoke, as shown in the following image:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在家庭自动化系统中，将所有传感器放置在家中以检测某些东西，我们测量真实世界：在这种情况下，我们使用了可以检测气体和烟雾的MQ135传感器，如下图所示：
- en: '![Detecting smoke](graphics/B05170_07_13.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![检测烟雾](graphics/B05170_07_13.jpg)'
- en: Software code
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件代码
- en: 'In the following code, we explain how program and detect smoke using the gas
    sensor:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们解释了如何使用气体传感器编程和检测烟雾：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If it doesn''t detect smoke, it produces the following values, as shown in
    the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它没有检测到烟雾，它会产生以下数值，如下截图所示：
- en: '![Software code](graphics/B05170_07_14.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_14.jpg)'
- en: 'If it detects smoke the measurements are in range *305* and *320* which can
    be seen in the file as the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到烟雾，测量值在*305*和*320*之间，可以在文件中看到如下截图：
- en: '![Software code](graphics/B05170_07_15.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_15.jpg)'
- en: 'The final result (with the complete circuit connections) is shown in the following
    image:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 完整电路连接的最终结果如下图所示：
- en: '![Software code](graphics/B05170_07_16.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_16.jpg)'
- en: Building an alarm system using the Raspberry Pi Zero
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用树莓派Zero构建警报系统
- en: In this section, we will build a simple alarm system with a PIR sensor connected
    to the Raspberry Pi Zero. This is an important project as it can be added to the
    home, including other sensors, in order to monitor it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用一个PIR传感器连接到树莓派Zero来构建一个简单的警报系统。这是一个重要的项目，因为它可以添加到家庭中，包括其他传感器，以便监控。
- en: Motion sensor with Raspberry Pi Zero
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用树莓派Zero的运动传感器
- en: For this project we need the Raspberry Pi Zero, a motion sensor PIR, and some
    cables. The hardware configuration for this project will actually be very simple.
    First, connect the **VCC** pin of the motion sensor to a **3.3V** pin on the Raspberry
    Pi. Then, connect the **GND** pin of the sensor to one **GND** pin on the Pi.
    Finally, connect the **OUT** pin of the motion sensor to the **GPIO17** pin on
    the Raspberry Pi. You can refer to the previous chapters to find out about pin
    mapping on the Raspberry Pi Zero board.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们需要树莓派Zero、一个运动传感器PIR和一些电缆。实际上，这个项目的硬件配置将非常简单。首先，将运动传感器的**VCC**引脚连接到树莓派上的一个**3.3V**引脚。然后，将传感器的**GND**引脚连接到树莓派上的一个**GND**引脚。最后，将运动传感器的**OUT**引脚连接到树莓派上的**GPIO17**引脚。你可以参考前面的章节了解树莓派Zero板上的引脚映射。
- en: 'The following image shows the final circuit with the connections:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了连接的最终电路：
- en: '![Motion sensor with Raspberry Pi Zero](graphics/B05170_07_17.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![使用树莓派Zero的运动传感器](graphics/B05170_07_17.jpg)'
- en: Software code
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件代码
- en: 'You can now either copy the code inside the folder called `Project1`, or just
    get the complete code from the folder for this project:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将代码复制到名为`Project1`的文件夹中，或者直接从该项目的文件夹中获取完整的代码：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The alarm module
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警报模块
- en: You will usually have a modules in your home that will flash a light and emit
    sound when motion is detected. Of course you could perfectly well connect it to
    a real siren instead of a buzzer to have a loud sound in case any motion is detected.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，家中会有模块，在检测到运动时会闪烁灯光并发出声音。当然，你也可以将其连接到真正的警报器而不是蜂鸣器，以便在检测到任何运动时发出响亮的声音。
- en: To assemble this module, first place the LED in series with the 330 Ohm resistor
    on the breadboard, with the longest pin of the LED in contact with the resistor.
    Also place the Buzzer on the breadboard. Then, connect the other side of the resistor
    to **GPIO14** on the Pi and the other part of the LED to one **GND** pin on the
    Pi. For the Buzzer, connect the pin marked **+** on the buzzer to **GPIO15** and
    the other pin on the Buzzer to one **GND** pin on the Pi.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要组装这个模块，首先将LED与330欧姆电阻串联放在面包板上，LED的最长引脚与电阻接触。还要将蜂鸣器放在面包板上。然后，将电阻的另一端连接到树莓派上的**GPIO14**，LED的另一端连接到树莓派上的一个**GND**引脚。对于蜂鸣器，将标有**+**的引脚连接到**GPIO15**，另一端连接到树莓派上的一个**GND**引脚。
- en: Software code
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件代码
- en: 'Here we go with the coding details:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是编码细节：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the final circuit showing the connections:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示连接的最终电路：
- en: '![Software code](graphics/B05170_07_18.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![软件代码](graphics/B05170_07_18.jpg)'
- en: Central interface
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中央接口
- en: 'First we create a central interface for the app using the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用以下代码为应用程序创建一个中央接口：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Graphical interface
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形界面
- en: 'Let''s now see the interface file, starting with the HTML. We start by importing
    all the required libraries and files for the project:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看界面文件，从HTML开始。我们首先导入项目所需的所有库和文件。
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Monitoring the climate from a remote dashboard
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从远程仪表板监控气候
- en: Today, most smart homes are connected to the Internet, and this allows the user
    to monitor their home. In this section, we are going to learn how to monitor your
    climate remotely. First, we are simply going to add a sensor to our Raspberry
    Pi Zero and monitor the measurements from a cloud dashboard. Let's see how it
    works.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，大多数智能家居都连接到互联网，这使用户能够监控他们的家。在本节中，我们将学习如何远程监控您的气候。首先，我们只需向树莓派Zero添加一个传感器，并从云仪表板监测测量值。让我们看看它是如何工作的。
- en: 'The following image shows the final connections:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了最终的连接：
- en: '![Monitoring the climate from a remote dashboard](graphics/B05170_07_19.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![从远程仪表板监控气候](graphics/B05170_07_19.jpg)'
- en: Exploring the sensor test
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索传感器测试
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring the remote dashboard (Dweet.io)
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置远程仪表板（Dweet.io）
- en: 'We need to go to [http://freeboard.io](http://freeboard.io) and create an account:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要访问[http://freeboard.io](http://freeboard.io)并创建一个账户：
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_20.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![配置远程仪表板（Dweet.io）](graphics/B05170_07_20.jpg)'
- en: 'Now, we create a new dashboard to control the sensor:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们创建一个新的仪表板来控制传感器：
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_21.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![配置远程仪表板（Dweet.io）](graphics/B05170_07_21.jpg)'
- en: 'Add a new data source with the following parameters:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下参数添加新的数据源：
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_22.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![配置远程仪表板（Dweet.io）](graphics/B05170_07_22.jpg)'
- en: 'Create a new pane inside the dashboard and also create a **Gauge** widget for
    the temperature:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板内创建一个新的窗格，并为温度创建一个**表盘**小部件：
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_23.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![配置远程仪表板（Dweet.io）](graphics/B05170_07_23.jpg)'
- en: 'We will then immediately see the temperature in the interface:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们会立即在界面上看到温度：
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_24.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![配置远程仪表板（Dweet.io）](graphics/B05170_07_24.jpg)'
- en: 'We do the same with the Humidity:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以用湿度做同样的操作：
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_25.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![配置远程仪表板（Dweet.io）](graphics/B05170_07_25.jpg)'
- en: 'We should see the final result:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到最终结果：
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_26.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![配置远程仪表板（Dweet.io）](graphics/B05170_07_26.jpg)'
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to build and integrate a modular security system
    based on Raspberry Pi Zero and Arduino boards. There are of course many ways to
    improve this project. For example, you can simply add more modules to the project,
    such as more motion sensors that trigger the same alarm. You can monitor the system,
    even if you are outside of the Wi-Fi network of your home.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何构建和集成基于树莓派Zero和Arduino板的模块化安全系统。当然，有许多方法可以改进这个项目。例如，您可以简单地向项目添加更多模块，比如更多触发相同警报的运动传感器。即使您不在家庭Wi-Fi网络之外，也可以监控系统。
- en: In the next chapter, we are going to learn how to control your system from an
    Android application, and how to integrate a real system from your smartphone that's
    fantastic!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何从Android应用程序控制您的系统，以及如何从智能手机集成一个真实的系统，这太棒了！
