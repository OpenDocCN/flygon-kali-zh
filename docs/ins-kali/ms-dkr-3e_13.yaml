- en: Docker Workflows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker工作流程
- en: 'In this chapter, we will be looking at Docker and various workflows for Docker.
    We''ll put all the pieces together so you can start using Docker in your production
    environments and feel comfortable doing so. Let''s take a peek at what we will
    be covering in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究Docker以及Docker的各种工作流程。我们将把所有的部分整合在一起，这样你就可以开始在生产环境中使用Docker，并且感到舒适。让我们来看看本章将涵盖的内容：
- en: Docker for development
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于开发的Docker
- en: Monitoring Docker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控Docker
- en: Extending to external platforms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展到外部平台
- en: What does production look like?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境是什么样子？
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using Docker on the desktop. Like previous chapters,
    I will be using my preferred operating system, which is macOS. The Docker commands
    we will be running will work on all three of the operating systems we have installed
    Docker on so far. However, some of the supporting commands, which will be few
    and far between, may only apply to macOS and Linux- based operating system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在桌面上使用Docker。与之前的章节一样，我将使用我偏好的操作系统，即macOS。我们将运行的Docker命令将适用于我们迄今为止安装了Docker的三种操作系统。然而，一些支持命令可能只适用于基于macOS和Linux的操作系统。
- en: A full copy of the code used in this chapter can be found in the GitHub repository
    at [https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter14](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter14).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码的完整副本可以在GitHub存储库中找到：[https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter14](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter14)。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2SaG0uP](http://bit.ly/2SaG0uP)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2SaG0uP](http://bit.ly/2SaG0uP)'
- en: Docker for development
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于开发的Docker
- en: We are going to start our look at the workflows by discussing how Docker can
    be used to aid developers. Right back at the start of [Chapter 1](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml),
    *Docker Overview*, one of the first things we discussed in the *Understanding
    Docker* section was developers and the *Works on my machine* problem. So far,
    we have not really fully addressed this, so let's do that now.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从讨论Docker如何帮助开发人员开始我们对工作流程的研究。在[第1章](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml)
    *Docker概述*中，我们讨论的第一件事是开发人员和*在我的机器上可以运行*的问题。到目前为止，我们还没有完全解决这个问题，所以现在让我们来解决这个问题。
- en: For this section, we are going to look at how a developer could develop their
    WordPress project on their local machine using Docker for macOS or Docker for
    Windows along with Docker Compose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看开发人员如何在本地机器上使用Docker for macOS或Docker for Windows以及Docker Compose开发他们的WordPress项目。
- en: 'The aim of this is for us to launch a WordPress installation, which is what
    you will do with the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是启动WordPress安装，以下是您将要执行的步骤：
- en: Download and install WordPress.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装WordPress。
- en: Allow access to the WordPress files from desktop editors, such as Atom, Visual
    Studio Code, or Sublime Text, on your local machine.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许从桌面编辑器（如Atom、Visual Studio Code或Sublime Text）在本地机器上访问WordPress文件。
- en: Configure and manage WordPress using the WordPress command-line tool (`WP-CLI`). 
    This allows you to stop, start, and even remove containers without losing your
    work.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用WordPress命令行工具（`WP-CLI`）配置和管理WordPress。这使您可以在不丢失工作的情况下停止、启动甚至删除容器。
- en: 'Before we launch our WordPress installation, let''s take a look at the Docker
    Compose file and what services we have running:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动WordPress安装之前，让我们来看看Docker Compose文件以及我们正在运行的服务：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can visualize the Docker Compose file using the `docker-compose-viz` tool
    from PMSIpilot. To do this, run the following command in the same folder as the
    `docker-compose.yml` file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用PMSIpilot的`docker-compose-viz`工具来可视化Docker Compose文件。要做到这一点，在与`docker-compose.yml`文件相同的文件夹中运行以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will output a file called `docker-compose.png`, and you should get something
    that looks like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一个名为`docker-compose.png`的文件，您应该会得到类似于这样的东西：
- en: '![](Images/7a4d5fa8-68e1-4249-b542-17d059154743.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7a4d5fa8-68e1-4249-b542-17d059154743.png)'
- en: You can use `docker-compose-viz` to give yourself a visual representation of
    any Docker Compose file. As you can see from ours, we have four services defined.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`docker-compose-viz`来为任何Docker Compose文件提供可视化表示。正如您从我们的文件中看到的，我们定义了四个服务。
- en: 'The first is called `web`. This service is the only one of the four that is
    exposed to the host network, and it acts as a frontend to our WordPress installation.
    It runs the official nginx image from [https://store.docker.com/images/nginx/](https://store.docker.com/images/nginx/),
    and it performs two roles. Before we look at these, take a look at the following
    nginx configuration:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个被称为`web`。这个服务是四个中唯一暴露给主机网络的服务，并且它充当我们WordPress安装的前端。它运行来自[https://store.docker.com/images/nginx/](https://store.docker.com/images/nginx/)的官方nginx镜像，并且扮演两个角色。在我们看这些之前，先看一下以下nginx配置：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see that we are serving all content, apart from PHP, using nginx from
    `/var/www/html/`, which we are mounting from our host machine using nginx, and
    all requests for PHP files are being proxied to our second service, which is called
    `wordpress`, on port `9000`. The nginx configuration itself is being mounted from
    our host machine to `/etc/nginx/conf.d/default.conf`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们正在使用nginx从`/var/www/html/`提供除PHP之外的所有内容，我们正在使用nginx从我们的主机机器挂载，并且所有PHP文件的请求都被代理到我们的第二个名为`wordpress`的服务，端口为`9000`。nginx配置本身被挂载到我们的主机机器上的`/etc/nginx/conf.d/default.conf`。
- en: This means our nginx container is acting as a web server for the static content,
    the first role, and also as a proxy through to the WordPress container for the
    dynamic content, which is the second role the container takes on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的nginx容器充当静态内容的Web服务器，这是第一个角色，同时也充当代理通过到WordPress容器的动态内容，这是容器承担的第二个角色。
- en: The second service is `wordpress`; this is the official WordPress image from
    [https://store.docker.com/images/wordpress](https://store.docker.com/images/wordpress),
    and I am using the `php7.2-fpm-alpine` tag. This gives us a WordPress installation
    running on PHP 7.2 using `PHP-FPM` built on top of an Alpine Linux base.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个服务是`wordpress`；这是来自[https://store.docker.com/images/wordpress](https://store.docker.com/images/wordpress)的官方WordPress镜像，我正在使用`php7.2-fpm-alpine`标签。这使我们可以在Alpine
    Linux基础上运行的PHP 7.2上使用`PHP-FPM`构建的WordPress安装。
- en: '**FastCGI Process Manager** (**PHP-FPM**) is a PHP FastCGI implementation with
    some great features. For us, it allows PHP to run as a service that we can bind
    to a port and pass requests to; this fits in with the Docker approach of running
    a single service on each container.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**FastCGI进程管理器**（**PHP-FPM**）是一个具有一些出色功能的PHP FastCGI实现。对我们来说，它允许PHP作为一个我们可以绑定到端口并传递请求的服务运行；这符合Docker在每个容器上运行单个服务的方法。'
- en: We are mounting the same web root as we are doing for the web service, which
    on the host machine is `wordpress/web` and on the service is `/var/www/html/`.
    To start off with, the folder on our host machine will be empty; however, once
    the WordPress service starts, it will detect that there isn't any core WordPress
    installation and copy one to that location, effectively bootstrapping our WordPress
    installation and copying it to our host machine, ready for us to start work on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们挂载了与web服务相同的网站根目录，在主机上是`wordpress/web`，在服务上是`/var/www/html/`。一开始，我们主机上的文件夹将是空的；然而，一旦WordPress服务启动，它将检测到没有任何核心WordPress安装，并将其复制到该位置，有效地引导我们的WordPress安装并将其复制到我们的主机上，准备让我们开始工作。
- en: The next service is MySQL, which uses the official MySQL image ([https://store.docker.com/images/mysql/](https://store.docker.com/images/mysql/))
    and is the only image out of the four we are using that doesn't use Alpine Linux
    (come on MySQL, pull your finger out and publish an Alpine Linux-based image!).
    Instead, it uses `debian:stretch-slim`. We are passing a few environment variables
    so that a database, username, and password are all created when the container
    first runs; the password is something you should change if you ever use this as
    a base for one of your projects.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个服务是MySQL，它使用官方的MySQL镜像（[https://store.docker.com/images/mysql/](https://store.docker.com/images/mysql/)），是我们使用的四个镜像中唯一不使用Alpine
    Linux的镜像（来吧MySQL，动作快点，发布一个基于Alpine Linux的镜像！）。相反，它使用`debian:stretch-slim`。我们传递了一些环境变量，以便在容器首次运行时创建数据库、用户名和密码；如果您将来使用这个作为项目的基础，密码是您应该更改的内容。
- en: Like the `web` and `wordpress` containers, we are mounting a folder from our
    host machine. In this case, it is `wordpress/mysql`, and we are mounting it to
    `/var/lib/mysql/`, which is the default folder where MySQL stores its databases
    and associated files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 像`web`和`wordpress`容器一样，我们从主机机器上挂载一个文件夹。在这种情况下，它是`wordpress/mysql`，我们将其挂载到`/var/lib/mysql/`，这是MySQL存储其数据库和相关文件的默认文件夹。
- en: You will notice that when the container starts, `wordpress/mysql` is populated
    with a few files. I do not recommend editing them using your local IDE.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到当容器启动时，`wordpress/mysql`中填充了一些文件。我不建议使用本地IDE对其进行编辑。
- en: 'The final service is simply called `wp`. It differs from the other three services:
    this service will immediately exit when executed because there is no long-running
    process within the container. Instead of a long-running process, it provides access
    to the WordPress command-line tool in an environment that exactly matches our
    main `wordpress` container.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的服务简单地称为`wp`。它与其他三个服务不同：这个服务在执行时会立即退出，因为容器内没有长时间运行的进程。它不提供长时间运行的进程，而是在与我们的主`wordpress`容器完全匹配的环境中提供对WordPress命令行工具的访问。
- en: You will notice that we are mounting the web root as we have done on web and
    WordPress as well as a second mount called `/export`; we will look at this in
    more detail once we have WordPress configured.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们挂载了网站根目录，就像我们在web和WordPress上做的那样，还有一个名为`/export`的第二个挂载；一旦我们配置了WordPress，我们将更详细地看一下这一点。
- en: 'To start WordPress, we just need to run the following command to pull the images:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 启动WordPress，我们只需要运行以下命令来拉取镜像：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will pull the images and start the `web`, `wordpress`, and `mysql` services
    as well as readying the `wp` service. Before the services start, our `wordpress`
    folder looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将拉取镜像并启动`web`，`wordpress`和`mysql`服务，以及准备`wp`服务。在服务启动之前，我们的`wordpress`文件夹看起来是这样的：
- en: '![](Images/a43578b3-ae10-48cd-a955-c9ae51cf4a22.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a43578b3-ae10-48cd-a955-c9ae51cf4a22.png)'
- en: 'As you can see, we only have `nginx.conf` in there, which is part of the Git
    repository. Then we can use the following commands to start the containers and
    check their status:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们只在其中有`nginx.conf`，这是Git存储库的一部分。然后，我们可以使用以下命令启动容器并检查它们的状态：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](Images/32a9383e-8a5f-446e-a591-56c5824da777.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/32a9383e-8a5f-446e-a591-56c5824da777.png)'
- en: 'You should see that three folders have been created in the `wordpress` folder:
    `export`, `mysql`, and `web`. Also, remember that we are expecting `dockerwordpress_wp_1`
    to have an `exit` state, so that''s fine:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到在`wordpress`文件夹中已创建了三个文件夹：`export`，`mysql`和`web`。还要记住，我们期望`dockerwordpress_wp_1`有一个`exit`状态，所以没问题：
- en: '![](Images/2c39b6fd-5299-4d71-b8ec-e949ab69dfba.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2c39b6fd-5299-4d71-b8ec-e949ab69dfba.png)'
- en: 'Opening a browser and going to `http://localhost:8080/` should show you the
    standard WordPress pre-installation welcome page, where you can select the language
    you wish to use for your installation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`http://localhost:8080/`应该显示标准的WordPress预安装欢迎页面，您可以在其中选择要用于安装的语言：
- en: '![](Images/002b9525-f3e6-4362-82ee-c457ac83674b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/002b9525-f3e6-4362-82ee-c457ac83674b.png)'
- en: Do not click on **Continue**, as it will take you to the next screen of the
    GUI-based installation. Instead, return to your Terminal.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不要点击**继续**，因为它会带您到基于GUI的安装的下一个屏幕。而是返回到您的终端。
- en: 'Rather than using the GUI to complete the installation, we are going to use
    WP-CLI. There are two steps to this. The first step is to create a `wp-config.php`
    file. To do this, run the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用WP-CLI而不是使用GUI来完成安装。这有两个步骤。第一步是创建一个`wp-config.php`文件。要做到这一点，请运行以下命令：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you will see in the following Terminal output, before I ran the command,
    I just had the `wp-config-sample.php` file, which ships with core WordPress. Then,
    after running the command, I had my own `wp-config.php` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您将在以下终端输出中看到的，在运行命令之前，我只有`wp-config-sample.php`文件，这是WordPress核心附带的。然后，在运行命令后，我有了自己的`wp-config.php`文件：
- en: '![](Images/93ff2e9d-9e0e-4c46-bdc6-438a7e65c5bf.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/93ff2e9d-9e0e-4c46-bdc6-438a7e65c5bf.png)'
- en: You will notice that in the command, we are passing the database details we
    defined in the Docker Compose file and telling WordPress that it can connect to
    the database service at the address of `mysql`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到在命令中，我们传递了我们在Docker Compose文件中定义的数据库详细信息，并告诉WordPress它可以连接到地址为`mysql`的数据库服务。
- en: 'Now that we have configured database connection details, we need to configure
    our WordPress site as well a create an admin user and set a password. To do this,
    run the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了数据库连接详细信息，我们需要配置我们的WordPress网站以及创建一个管理员用户并设置密码。要做到这一点，请运行以下命令：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running this command will produce an error about the email service; do not
    worry about that message, as this is only a local development environment. We
    are not too worried about emails leaving our WordPress installation:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将产生有关电子邮件服务的错误；不要担心这条消息，因为这只是一个本地开发环境。我们不太担心电子邮件离开我们的WordPress安装：
- en: '![](Images/20b6bd8f-dcf6-4822-a6e0-7ca29deddc65.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/20b6bd8f-dcf6-4822-a6e0-7ca29deddc65.png)'
- en: 'We have used WP-CLI to configure the following in WordPress:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用WP-CLI在WordPress中配置了以下内容：
- en: Our URL is `http://localhost:8080`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的URL是`http://localhost:8080`
- en: Our site title should be `Blog Title`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的网站标题应该是`博客标题`
- en: Our admin username is `admin` and password is `password`, and the user has an
    email of `email@domain.com`
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的管理员用户名是`admin`，密码是`password`，用户的电子邮件是`email@domain.com`
- en: 'Going back to your browser and entering [http://localhost:8080/](http://localhost:8080/)
    should present you with a vanilla WordPress site:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您的浏览器并输入[http://localhost:8080/](http://localhost:8080/)应该呈现给您一个原始的WordPress网站：
- en: '![](Images/8375e8c2-0472-4227-bdfe-5db42c6b12ea.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8375e8c2-0472-4227-bdfe-5db42c6b12ea.png)'
- en: 'Before we do anything further, let''s customize our installation a little,
    first by installing and enabling the JetPack plugin:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步操作之前，让我们先定制一下我们的安装，首先安装并启用JetPack插件：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the command is given here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '![](Images/7eb7c72d-cad0-4837-9df6-5cdd0c6d30b9.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7eb7c72d-cad0-4837-9df6-5cdd0c6d30b9.png)'
- en: 'Then, install and enable the `sydney` theme:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，安装并启用`sydney`主题：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the command is given here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '![](Images/a5063118-333d-47e6-b534-9c7ebadbcabc.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a5063118-333d-47e6-b534-9c7ebadbcabc.png)'
- en: 'Refreshing our WordPress page at [http://localhost:8080/](http://localhost:8080/)
    should show something like the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新我们的WordPress页面[http://localhost:8080/](http://localhost:8080/)应该显示类似以下内容：
- en: '![](Images/8957b6fe-d698-4b21-9f37-292acb3742a5.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8957b6fe-d698-4b21-9f37-292acb3742a5.png)'
- en: 'Before we open our IDE, let''s destroy the containers running our WordPress
    installation using the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开IDE之前，让我们使用以下命令销毁运行我们WordPress安装的容器：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the command is given here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '![](Images/d4e8f2f0-b75d-4f41-a203-be965f441683.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d4e8f2f0-b75d-4f41-a203-be965f441683.png)'
- en: 'As our entire WordPress installation, including all of the files and database,
    is stored on our local machine, we should be able to run the following command
    to return to our WordPress site where we left it:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们整个WordPress安装，包括所有文件和数据库，都存储在我们的本地机器上，我们应该能够运行以下命令返回到我们离开的WordPress网站：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once you have confirmed it is up and running as expected by going to [http://localhost:8080/](http://localhost:8080/),
    open the `docker-wordpress` folder in your desktop editor. I used Sublime Text.
     In your editor, open the `wordpress/web/wp-blog-header.php` file and add the
    following line to the opening PHP statement and save it:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认它按预期运行并正在运行，打开桌面编辑器中的`docker-wordpress`文件夹。我使用Sublime Text。在编辑器中，打开`wordpress/web/wp-blog-header.php`文件，并在开头的PHP语句中添加以下行并保存：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The file should look something like the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 文件应该看起来像以下内容：
- en: '![](Images/522fd0f5-a1e0-4f20-aca7-f5d9f1b45843.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/522fd0f5-a1e0-4f20-aca7-f5d9f1b45843.png)'
- en: 'Once saved, refresh your browser and you should see the message **Testing editing**
    in the IDE at the very bottom of the page (the following screen is zoomed; it
    may be more difficult to spot if you are following along, as the text is is quite
    small):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，刷新浏览器，你应该在页面底部的IDE中看到消息**Testing editing**（以下屏幕是放大的；如果你在跟随，可能更难发现，因为文本非常小）：
- en: '![](Images/28881359-ecf2-43c1-a05c-91a7904d1bab.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/28881359-ecf2-43c1-a05c-91a7904d1bab.png)'
- en: The final thing we are going to look at is why we had the `wordpress/export`
    folder mounted on the `wp` container.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的最后一件事是为什么`wordpress/export`文件夹被挂载到`wp`容器上。
- en: As already mentioned earlier in the chapter, you shouldn't be really touching
    the contents of the `wordpress/mysql` folder; this also includes sharing it. While
    it would probably work if you were to zip up your project folder and pass it to
    a colleague, it is not considered as best practice. Because of this, we have mounted
    the export folder to allow us to use WP-CLI to make a database dump and import
    it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面已经提到的，你不应该真的去触碰`wordpress/mysql`文件夹的内容；这也包括共享它。虽然如果你将项目文件夹压缩并传递给同事，它可能会工作，但这并不被认为是最佳实践。因此，我们已经挂载了导出文件夹，以便我们可以使用WP-CLI进行数据库转储和导入。
- en: 'To do this, run the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，运行以下命令：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following Terminal output shows the export and also the contents of `wordpress/export`
    before and after, and finally, the top few lines of the MySQL dump:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下终端输出显示了导出以及`wordpress/export`文件夹的内容，最后是MySQL转储的前几行：
- en: '![](Images/05768ab0-7d48-487d-ab2e-a1e4d693a0f4.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/05768ab0-7d48-487d-ab2e-a1e4d693a0f4.png)'
- en: 'If I needed to,  because, say, I had made a mistake during development, I could
    roll back to that version of the database by running the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要的话，比如说，我在开发过程中犯了一个错误，我可以通过运行以下命令回滚到数据库的那个版本：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the command is given here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![](Images/2f5dcc3c-517c-485c-8463-5b12d7aa5fb1.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2f5dcc3c-517c-485c-8463-5b12d7aa5fb1.png)'
- en: As you have seen, we have installed WordPress, interacted with it both using
    WP-CLI and the browser, edited the code, and also backed up and restored the database,
    all without having to install or configure nginx, PHP, MySQL, or WP-CLI. Nor did
    we have to log in to a container. By mounting volumes from our host machine, our
    content was safe when we tore our WordPress containers down and we didn't lose
    any work.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们已经安装了WordPress，使用WP-CLI和浏览器与其进行了交互，编辑了代码，并备份和恢复了数据库，所有这些都不需要安装或配置nginx、PHP、MySQL或WP-CLI。我们也不需要登录到容器中。通过从主机机器挂载卷，我们的内容在我们关闭WordPress容器时是安全的，我们没有丢失任何工作。
- en: Also, if needed, we could have easily passed a copy of our project folder to
    a colleague who has Docker installed, and with a single command, they could be
    working on our code, knowing it is running in the exact environment as our own
    installation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果需要，我们可以轻松地将项目文件夹的副本传递给安装了Docker的同事，然后通过一条命令，他们就可以在我们的代码上工作，知道它在与我们自己的安装相同的环境中运行。
- en: Finally, as we're using official images from the Docker Store, we know we can
    safely ask to have them deployed into production as they have been built with
    Docker's best practices in mind.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于我们正在使用Docker Store的官方镜像，我们知道可以安全地要求将它们部署到生产环境中，因为它们是根据Docker的最佳实践构建的。
- en: Don't forget to stop and remove your WordPress containers by running `docker-compose
    down`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记通过运行`docker-compose down`停止和删除您的WordPress容器。
- en: Monitoring
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: Next, we are going to take a look at monitoring our containers and also Docker
    hosts. In [Chapter 4](d1bc49d6-f8f8-4c0d-b094-695d42c09f88.xhtml)*, Managing Containers*,
    we discussed the `docker container top` and `docker container stats` commands.
    You may recall that both of these commands show real-time information only; there
    is no historical data kept.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下监视我们的容器和Docker主机。在[第4章](d1bc49d6-f8f8-4c0d-b094-695d42c09f88.xhtml)*，管理容器*中，我们讨论了`docker
    container top`和`docker container stats`命令。您可能还记得，这两个命令只显示实时信息；没有保留历史数据。
- en: 'While this is great if you are trying to debug a problem as it is running or
    want to quickly get an idea of what is going on inside your containers, it is
    not too helpful if you need to look back at a problem: maybe you have configured
    your containers to restart if they have become unresponsive. While that will help
    with the availability of your application, it isn''t much of a help if you need
    to look at why your container became unresponsive.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在尝试调试问题或者想快速了解容器内部发生了什么，这很棒，但如果您需要回顾问题，那就不太有帮助：也许您已经配置了容器，使其在变得无响应时重新启动。虽然这对应用程序的可用性有所帮助，但如果您需要查看容器为何变得无响应，那就没有太多帮助了。
- en: 'In the GitHub repository in the `/chapter14` folder, there is a folder called
    `prometheus` in which there is a Docker Compose file that launches three different
    containers on two networks. Rather than looking at the Docker Compose file, itself
    let''s take a look at the visualization:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub存储库的`/chapter14`文件夹中，有一个名为`prometheus`的文件夹，其中有一个Docker Compose文件，可以在两个网络上启动三个不同的容器。而不是查看Docker
    Compose文件本身，让我们来看一下可视化：
- en: '![](Images/3efc549a-54a8-4083-8edc-b1679455d5af.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3efc549a-54a8-4083-8edc-b1679455d5af.png)'
- en: 'As you can see, there is a lot going on. The three services we are running
    are:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有很多事情正在进行。我们正在运行的三个服务是：
- en: '**Cadvisor**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cadvisor**'
- en: '**Prometheus**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus**'
- en: '**Grafana**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana**'
- en: Before we launch and configure our Docker Compose services, we should talk about
    why each one is needed, starting with cadvisor.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动和配置Docker Compose服务之前，我们应该讨论每个服务为什么需要，从`cadvisor`开始。
- en: 'The `cadvisor` is a project released by Google. As you can see from Docker
    Hub username in the image we are using, the service section in the Docker Compose
    file looks like the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`cadvisor`是Google发布的一个项目。正如您从我们使用的Docker Hub用户名在图像中看到的那样，Docker Compose文件中的服务部分如下所示：'
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are mounting the various parts of our host's filesystem to allow `cadvisor`
    access to our Docker installation in much the same way as we did in [Chapter 11](d1ef4eff-f35b-47b2-8efc-24a90caa254b.xhtml)*,
    Portainer – A GUI for Docker*. The reason for this is that in our case, we are
    going to be using `cadvisor` to collect statistics on our containers. While it
    can be used as a standalone container-monitoring service, we do not want to publicly
    expose the cadvisor container. Instead, we are just making it available to other
    containers within our Docker Compose stack on the back network.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在挂载我们主机文件系统的各个部分，以便让`cadvisor`访问我们的Docker安装，方式与我们在[第11章](d1ef4eff-f35b-47b2-8efc-24a90caa254b.xhtml)*，Portainer
    – A GUI for Docker*中所做的方式相同。这样做的原因是，在我们的情况下，我们将使用`cadvisor`来收集容器的统计信息。虽然它可以作为独立的容器监控服务使用，但我们不希望公开暴露`cadvisor`容器。相反，我们只是让它在后端网络的Docker
    Compose堆栈中对其他容器可用。
- en: '`cadvisor` is a self-contained web frontend to the Docker container `stat`
    command, displaying graphs and allowing you to drill down from your Docker host
    into your containers from an easy-to-use interface. However, it doesn''t keep
    more than 5 minutes'' worth of metrics.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`cadvisor`是Docker容器`stat`命令的自包含Web前端，显示图形并允许您从Docker主机轻松进入容器的易于使用的界面。但是，它不会保留超过5分钟的指标。'
- en: 'As we are attempting to record metrics that can be available hours or even
    days later, having no more than 5 minutes of metrics means that we are going to
    have to use additional tools to record the metrics it processes. `cadvisor` exposes
    the information we want to record our containers as structured data at the following
    endpoint: `http://cadvisor:8080/metrics/`.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们试图记录可能在几个小时甚至几天后可用的指标，所以最多只有5分钟的指标意味着我们将不得不使用其他工具来记录它处理的指标。`cadvisor`将我们想要记录的信息作为结构化数据暴露在以下端点：`http://cadvisor:8080/metrics/`。
- en: 'We will look at why this is important in a moment. The `cadvisor` endpoint
    is being scraped automatically by our next service, `prometheus`. This is where
    most of the heavy lifting happens. The `prometheus` is a monitoring tool written
    and open sourced by SoundCloud:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一会儿看到这为什么很重要。`cadvisor`端点正在被我们接下来的服务`prometheus`自动抓取。这是大部分繁重工作发生的地方。`prometheus`是由SoundCloud编写并开源的监控工具：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see from the preceding service definition, we are mounting a configuration
    file called `./prometheus/prometheus.yml` and also a volume called `prometheus_data`.
    The configuration file contains information about the sources we want to scrape,
    as you can see from the following configuration:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从前面的服务定义中看到的，我们正在挂载一个名为`./prometheus/prometheus.yml`的配置文件，还有一个名为`prometheus_data`的卷。配置文件包含有关我们要抓取的源的信息，正如您从以下配置中看到的那样：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We are instructing Prometheus to scrape data from our endpoints every `15` seconds.
    The endpoints are defined in the `scrape_configs` section, and as you can see,
    we have `cadvisor` in there as well as Prometheus itself defined. The reason we
    are creating and mounting the `prometheus_data` volume is that Prometheus is going
    to be storing all of our metrics, so we need to keep it safe.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指示Prometheus每`15`秒从我们的端点抓取数据。端点在`scrape_configs`部分中定义，正如你所看到的，我们在其中定义了`cadvisor`以及Prometheus本身。我们创建和挂载`prometheus_data`卷的原因是，Prometheus将存储我们所有的指标，因此我们需要确保它的安全。
- en: At its core, Prometheus is a time-series database. It takes the data it has
    scraped, processes it to find the metric name and value, and then stores it along
    with a timestamp.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，Prometheus是一个时间序列数据库。它获取已经抓取的数据，处理数据以找到指标名称和数值，然后将其与时间戳一起存储。
- en: Prometheus also comes with a powerful query engine and API, making it the perfect
    database for this kind of data. While it does come with basic graphing capabilities,
    it is recommended that you use Grafana, which is our final service and also the
    only one to be exposed publicly.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus还配备了强大的查询引擎和API，使其成为这种数据的完美数据库。虽然它具有基本的图形能力，但建议您使用Grafana，这是我们的最终服务，也是唯一一个公开暴露的服务。
- en: '**Grafana** is an open source tool for displaying monitoring graphs and metric
    analytics, which allows you to create dashboards using time-series databases,
    such as Graphite, InfluxDB, and also Prometheus. There are also further backend
    database options that are available as plugins.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Grafana**是一个用于显示监控图形和指标分析的开源工具，它允许您使用时间序列数据库（如Graphite、InfluxDB和Prometheus）创建仪表板。还有其他后端数据库选项可用作插件。'
- en: 'The Docker Compose definition for Grafana follows a similar pattern to our
    other services:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana的Docker Compose定义遵循与我们其他服务类似的模式：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are using the `grafana_data` volume to store Grafana's own internal configuration
    database, and rather than storing the environment variables in the Docker Compose
    file, we are loading them from an external file called `./grafana/grafana.config`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`grafana_data`卷来存储Grafana自己的内部配置数据库，而不是将环境变量存储在Docker Compose文件中，我们是从名为`./grafana/grafana.config`的外部文件中加载它们。
- en: 'The variables are as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 变量如下：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, we are setting the username and password here, so having them
    in an external file means that you can change these values without editing the
    core Docker Compose file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在这里设置了用户名和密码，因此将它们放在外部文件中意味着你可以在不编辑核心Docker Compose文件的情况下更改这些值。
- en: 'Now that we know the role that each of the four services fulfills, let''s launch
    them. To do this, simply run the following commands from the `prometheus` folder:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了这四个服务各自的角色，让我们启动它们。要做到这一点，只需从`prometheus`文件夹运行以下命令：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will create a network and the volumes and pull the images from the Docker
    Hub. It will then go about launching the four services:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个网络和卷，并从Docker Hub拉取镜像。然后它将启动这四个服务：
- en: '![](Images/9f337042-8244-4838-bff2-40c8d518ba0c.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9f337042-8244-4838-bff2-40c8d518ba0c.png)'
- en: 'You may be tempted to go immediately to your Grafana dashboard. If you did
    so, you would not see anything, as Grafana takes a few minutes to initialize itself.
    You can follow its progress by following the logs:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会立刻转到Grafana仪表板。如果你这样做，你将看不到任何东西，因为Grafana需要几分钟来初始化自己。你可以通过查看日志来跟踪它的进度：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the command is given here:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![](Images/385e8580-5b68-48c3-b69e-abd387fb61b6.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/385e8580-5b68-48c3-b69e-abd387fb61b6.png)'
- en: Once you see the `HTTP Server Listen` message, Grafana will be available. With
    Grafana 5 you can now import data sources and dashboards, which is why we are
    mounting `./grafana/provisioning/` to `/etc/grafana/provisioning/`. This folder
    contains the configuration which automatically configures Grafana to talk to our
    Prometheus service and also imports the dashboard, which will display the data
    that Prometheus is scraping from cadvisor.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您看到`HTTP服务器监听`的消息，Grafana将可用。使用Grafana 5，您现在可以导入数据源和仪表板，这就是为什么我们将`./grafana/provisioning/`挂载到`/etc/grafana/provisioning/`的原因。这个文件夹包含配置，自动配置Grafana与我们的Prometheus服务通信，并导入仪表板，显示Prometheus从cadvisor中抓取的数据。
- en: 'Open your browser and enter `http://localhost:3000/`, and you should be greeted
    with a login screen:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器，输入`http://localhost:3000/`，您应该会看到一个登录界面：
- en: '![](Images/649978eb-8e40-4a14-9f29-58f31272ae83.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/649978eb-8e40-4a14-9f29-58f31272ae83.png)'
- en: 'Enter the **User** as `admin` and the **Password** as `password`. Once logged
    in, if you have configured the data source, you should see the following page:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输入**用户**为`admin`，**密码**为`password`。一旦登录，如果您已配置数据源，您应该会看到以下页面：
- en: '![](Images/ddac6a6f-0e09-439a-a2cb-9cf553af9050.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ddac6a6f-0e09-439a-a2cb-9cf553af9050.png)'
- en: 'As you can see, the initial steps of Install Grafana | Create your first data
    source | Create your first dashboard have all been executed, leaving just the
    remaining two. For now, we will ignore these. Clicking on the Home button in the
    top left will bring up a menu that lists the available dashboards:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，安装Grafana的初始步骤|创建您的第一个数据源|创建您的第一个仪表板都已经执行完毕，只剩下最后两个步骤。现在，我们将忽略这些。点击左上角的主页按钮将会弹出一个菜单，列出可用的仪表板：
- en: '![](Images/ed39f3be-0f1b-4fd7-9dac-6a257b5ff551.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ed39f3be-0f1b-4fd7-9dac-6a257b5ff551.png)'
- en: 'As you can see, we have one called Docker Monitoring. Clicking on it will take
    you to the following page:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个名为Docker Monitoring的数据源。点击它将会带您到以下页面：
- en: '![](Images/e4442959-0f79-4cf4-a8c0-7a057e461f22.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e4442959-0f79-4cf4-a8c0-7a057e461f22.png)'
- en: 'As you can see from the timing information on the top right of the screen,
    by default it displays the last five minutes worth of data. Clicking on it will
    allow you to change the time frame displays. For example, the following screen
    shows the last 15 minutes, which obviously is more than the five minutes that
    cadvisor is recording:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从屏幕右上角的时间信息中所见，默认情况下显示最近五分钟的数据。点击它将允许您更改时间范围的显示。例如，以下屏幕显示了最近15分钟的数据，显然比cadvisor记录的五分钟要多：
- en: '![](Images/461543ed-904b-47f9-a747-8fcd743f3e3f.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/461543ed-904b-47f9-a747-8fcd743f3e3f.png)'
- en: I have already mentioned that this is a complex solution; eventually, Docker
    will expand the recently released built-in endpoint, which presently only exposes
    information about the Docker Engine and not the containers themselves. For more
    information on the built-in endpoint, check out the official Docker documentation,
    which can be found at [https://docs.docker.com/config/thirdparty/prometheus/](https://docs.docker.com/config/thirdparty/prometheus/).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经提到这是一个复杂的解决方案；最终，Docker将扩展最近发布的内置端点，目前只公开有关Docker引擎而不是容器本身的信息。有关内置端点的更多信息，请查看官方Docker文档，网址为[https://docs.docker.com/config/thirdparty/prometheus/](https://docs.docker.com/config/thirdparty/prometheus/)。
- en: There are other monitoring solutions out there; most of them take the form of
    third-party **Software as a service** (**SaaS**). As you can see from the list
    of services in the *Further reading* section, there are a few well-established
    monitoring solutions listed. In fact, you may already be using them, so it would
    be easy for you when expanding your configuration to take into account when monitoring
    your containers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他监控解决方案；其中大多数采用第三方**软件即服务**（**SaaS**）的形式。从*进一步阅读*部分的服务列表中可以看出，列出了一些成熟的监控解决方案。实际上，您可能已经在使用它们，因此在扩展配置时，考虑监视容器时会很容易。
- en: 'Once you have finished exploring your Prometheus installation, don''t forget
    to remove it by running the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了对Prometheus安装的探索，请不要忘记通过运行以下命令来删除它：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This removes all of the containers, volumes, images, and network.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除所有容器、卷、镜像和网络。
- en: Extending to external platforms
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展到外部平台
- en: We have already looked at how we can extend to some other external platforms
    using tools such as Docker Machine, Docker Swarm, Docker for Amazon Web Services,
    and Rancher to launch clusters and also clusters and container services from public
    cloud services, such as Amazon Web Services, Microsoft Azure, and DigitalOcean.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过如何使用诸如Docker Machine、Docker Swarm、Docker for Amazon Web Services和Rancher等工具来扩展到其他外部平台，并启动集群以及来自公共云服务的集群和容器服务，如Amazon
    Web Services、Microsoft Azure和DigitalOcean。
- en: Heroku
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Heroku
- en: '**Heroku** is a little different than the other cloud services, as it is a
    considered a **Platform as a service** (**PaaS**). Instead of deploying containers
    on it, you link your containers to that Heroku platform, from which it will be
    running a service, such as PHP, Java, Node.js, or Python. So, you can run your
    Rails application on Heroku and then attach your Docker container to that platform.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**Heroku**与其他云服务有些不同，因为它被认为是**平台即服务**（**PaaS**）。您不是在其上部署容器，而是将您的容器链接到Heroku平台，从中它将运行服务，如PHP、Java、Node.js或Python。因此，您可以在Heroku上运行您的Rails应用程序，然后将您的Docker容器附加到该平台。'
- en: We will not be covering installing Heroku here as it is a little off topic.
    Please see the *Further readin*g section of the chapter for more details on Heroku.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里涵盖安装Heroku，因为这有点离题。有关Heroku的更多详细信息，请参阅本章的*进一步阅读*部分。
- en: 'The way you can use Docker and Heroku together is to create your application
    on the Heroku platform, and then in your code, you will have something similar
    to the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将Docker和Heroku结合使用的方法是在Heroku平台上创建您的应用程序，然后在您的代码中，您将有类似以下内容的东西：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To take a step back, we first need to install the plugin to be able to get
    this functionality working. Simply run the following command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要退一步，我们首先需要安装插件才能使此功能正常工作。只需运行以下命令：
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, if you are wondering what image you can or should be using from the Docker
    Hub, Heroku maintains a lot of images you can use in the preceding code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您想知道您可以或应该从Docker Hub使用哪个镜像，Heroku维护了许多您可以在上述代码中使用的镜像：
- en: '`heroku/nodejs`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/nodejs`'
- en: '`heroku/ruby`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/ruby`'
- en: '`heroku/jruby`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/jruby`'
- en: '`heroku/python`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/python`'
- en: '`heroku/scala`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/scala`'
- en: '`heroku/clojure`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/clojure`'
- en: '`heroku/gradle`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/gradle`'
- en: '`heroku/java`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/java`'
- en: '`heroku/go`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/go`'
- en: '`heroku/go-gb`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku/go-gb`'
- en: What does production look like?
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境是什么样子的？
- en: For the final section of this chapter, we are going to discuss what production
    should look like. This section isn't going to be as long as you think it will
    be. This is due to the sheer number of options that are available, so it would
    be impossible to cover them all. Also, you should already have a good idea based
    on the previous sections and chapters on what would work best for you.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节，我们将讨论生产环境应该是什么样子。这一节不会像你想象的那么长。这是因为有大量可用的选项，所以不可能覆盖它们所有。此外，根据前面的章节，你应该已经对什么对你最好有了一个很好的想法。
- en: Instead, we are going to be looking at some questions you should be asking yourself
    when planning your environments.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将看一些在规划环境时应该问自己的问题。
- en: Docker hosts
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker主机
- en: Docker hosts are the key component of your environment. Without these, you won't
    have anywhere to run your containers. As we have already seen in previous chapters,
    there are a few considerations when it comes to running your Docker hosts. The
    first thing you need to take into account is that, if your hosts are running Docker,
    they should not run any other services.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Docker主机是你的环境的关键组件。没有这些，你就没有地方运行你的容器。正如我们在之前的章节中已经看到的，当涉及到运行Docker主机时有一些考虑因素。你需要考虑的第一件事是，如果你的主机正在运行Docker，它们不应该运行任何其他服务。
- en: Mixing of processes
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程混合
- en: You should resist the temptation of quickly installing Docker on an existing
    host and launching a container. This might not only have a security implication
    with you having a mixture of isolated and non-isolated processes on a single host,
    but it can also cause performance issues as you are not able to add resource limits
    to your non-containerized applications, meaning that, potentially, they can also
    have a negative impact on your running containers.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该抵制迅速在现有主机上安装Docker并启动容器的诱惑。这不仅可能会导致安全问题，因为你在单个主机上同时运行了隔离和非隔离的进程，而且还可能会导致性能问题，因为你无法为非容器化的应用添加资源限制，这意味着它们可能也会对正在运行的容器产生负面影响。
- en: Multiple isolated Docker hosts
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个隔离的Docker主机
- en: If you have more than a few Docker hosts, how are you going to manage them?
    Running a tool such as Portainer is great, but it can get troublesome when attempting
    to manage more than a few hosts. Also, if you are running multiple isolated Docker
    hosts, you do not have the option of moving containers between hosts.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个Docker主机，你将如何管理它们？运行像Portainer这样的工具很好，但当尝试管理多个主机时可能会麻烦。此外，如果你运行多个隔离的Docker主机，你就没有将容器在主机之间移动的选项。
- en: Sure, you can use tools such as Weave Net to span the container network across
    multiple individual Docker hosts. Depending on your hosting environment, you may
    also have the option of creating volumes on external storage and presenting them
    to Docker hosts as needed, but you are very much creating a manual process to
    manage the migration of containers between hosts.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以使用诸如Weave Net之类的工具来跨多个独立的Docker主机扩展容器网络。根据你的托管环境，你可能还可以选择在外部存储上创建卷，并根据需要将它们呈现给Docker主机，但你很可能正在创建一个手动过程来管理容器在主机之间的迁移。
- en: Routing to your containers
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由到你的容器
- en: You need to consider how are you going to route requests among your containers
    if you have multiple hosts.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个主机，你需要考虑如何在你的容器之间路由请求。
- en: For example, if you have an external load balancer, such as an ELB in AWS, or
    a dedicated device in front of an on-premise cluster, do you have the ability
    to dynamically add routes for traffic hitting `port x` on your Load Balancer to
    `port y` on your Docker hosts, at which point the traffic is then routed through
    to your container?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有外部负载均衡器，例如AWS中的ELB，或者在本地集群前面有一个专用设备，您是否有能力动态添加路由，将命中`端口x`的流量添加到您的Docker主机上的`端口y`，然后将流量路由到您的容器？
- en: If you have multiple containers that all need to be accessible on the same external
    port, how are you going handle that?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个容器都需要在同一个外部端口上访问，您将如何处理？
- en: Do you need to install a proxy such as Traefik, HAProxy, or nginx to accept
    and then route your requests based on virtual hosts based on domains or subdomains,
    rather than just using port-based routing?
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否需要安装代理，如Traefik、HAProxy或nginx，以接受并根据基于域或子域的虚拟主机路由请求，而不仅仅是使用基于端口的路由？
- en: For example, you could use just ports for a website, everything on ports `80`
    and `443` to the container that is configured by Docker, to accept traffic on
    those ports. Using virtual host routing means that you can route `domain-a.com`
    to `container a` and then [domainb.com](https://www.domain-b.com/) to `container
    b`. Both `domain-a.com` and `domain-b.com` can point toward the same IP address
    and port.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以仅使用网站的端口，将所有内容都配置到由Docker配置的容器上的端口`80`和`443`，以接受这些端口上的流量。使用虚拟主机路由意味着您可以将`domain-a.com`路由到`容器a`，然后将[domainb.com](https://www.domain-b.com/)路由到`容器b`。`domain-a.com`和`domain-b.com`都可以指向相同的IP地址和端口。
- en: Clustering
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚类
- en: A lot of what we have discussed in the previous section can be solved by introducing
    clustering tools, such as Docker Swarm and Kubernetes
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一节讨论的许多问题都可以通过引入集群工具来解决，例如Docker Swarm和Kubernetes
- en: Compatibility
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 兼容性
- en: Even though an application works fine on a developer's local Docker installation,
    you need to be able to guarantee that if you take the application and deploy it
    to, for example, a Kubernetes cluster, it works in the same way.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 即使应用程序在开发人员的本地Docker安装上运行良好，您也需要能够保证，如果将应用程序部署到例如Kubernetes集群，它也能以相同的方式工作。
- en: Nine out of ten times, you will not have a problem, but you do need to consider
    how the application is communicating internally with other containers within the
    same application set.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 十次中有九次，您不会遇到问题，但您确实需要考虑应用程序如何在同一应用程序集内部与其他容器进行通信。
- en: Reference architectures
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考架构
- en: Are there reference architectures available for your chosen clustering technology?
    It is always best to check when deploying a cluster. There are best practice guides
    that are close to or match your proposed environment. After all, no one wants
    to create one big single point of failure.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的集群技术是否有参考架构？在部署集群时最好检查一下。有最佳实践指南与您提出的环境接近或匹配。毕竟，没有人想要创建一个巨大的单点故障。
- en: Also, what are the recommended resources? There is no point in deploying a cluster
    with five management nodes and a single Docker host, just like there is little
    point in deploying five Docker hosts and single management server, as you have
    quite a large single point of failure.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，推荐的资源是什么？部署具有五个管理节点和单个Docker主机的集群没有意义，就像部署五个Docker主机和单个管理服务器一样，因为您有一个相当大的单点故障。
- en: What supporting technologies does your cluster technology support (for example,
    remote storage, load balancers, and firewalls)?
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您的集群技术支持哪些支持技术（例如，远程存储、负载均衡器和防火墙）？
- en: Cluster communication
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群通信
- en: What are the requirements when it comes to the cluster communicating with either
    management or Docker hosts? Do you need an internal or separate network to isolate
    the cluster traffic?
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当集群与管理或Docker主机通信时，有哪些要求？您是否需要内部或单独的网络来隔离集群流量？
- en: Can you easily lock a cluster member down to only your cluster? Is the cluster
    communication encrypted? What information about your cluster could be exposed?
    Does this make it a target for hackers?
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否可以轻松地将集群成员限制在您的集群中？集群通信是否加密？您的集群可能会泄露哪些信息？这是否使其成为黑客的目标？
- en: What external access does the cluster need to APIs, such as your public cloud
    providers? How securely are any API/access credentials stored?
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 集群需要对API进行什么样的外部访问，比如您的公共云提供商？任何API/访问凭据存储得有多安全？
- en: Image registries
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像注册表
- en: How is your application packaged? Have you baked the code into the image? If
    so, do you need to host a private local image registry, or are you okay with using
    an external service such as Docker Hub, Docker Trusted Registry (DTR), or Quay?
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序是如何打包的？您是否已经将代码嵌入到镜像中？如果是，您是否需要托管一个私有的本地镜像注册表，还是可以使用外部服务，比如Docker Hub、Docker
    Trusted Registry (DTR)或Quay？
- en: If you need to host your own private registry, where in your environment should
    it sit? Who has or needs access? Can it hook into your directory provider, such
    as an Active Directory installation?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要托管自己的私有注册表，在您的环境中应该放在哪里？谁有或需要访问权限？它是否可以连接到您的目录提供者，比如Active Directory安装？
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at a few different workflows for Docker along with
    how to get some monitoring for your containers and Docker hosts up and running.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些关于Docker的不同工作流程，以及如何为您的容器和Docker主机启动一些监控。
- en: The best thing you can do when it comes to your own environment is building
    a proof of concept and trying as hard as you can to cover every disaster scenario
    you can think of. You can get a head start by using the container services provided
    by your cloud provider or by looking for a good reference architecture, which
    should all limit your trial and error.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到您自己的环境时，最好的做法是构建一个概念验证，并尽力覆盖您能想到的每一种灾难情景。您可以通过使用云提供商提供的容器服务或寻找一个良好的参考架构来提前开始，这些都应该限制您的试错。
- en: In the next chapter, we are going to take a look at what your next step in the
    world of containers could be.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一看容器世界中您的下一步是什么。
- en: Questions
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which container serves our WordPress website?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个容器为我们的WordPress网站提供服务？
- en: Why doesn't the `wp` container remain running?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么`wp`容器不能保持运行状态？
- en: In minutes, how long does cadvisor keep metrics for?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: cAdvisor会保留多长时间的指标？
- en: What Docker Compose command can be used to remove everything to do with the
    application?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么Docker Compose命令可以用来删除与应用程序有关的所有内容？
- en: Further reading
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find details on the software we have used in this chapter at the following
    sites:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本章中找到我们使用的软件的详细信息，网址如下：
- en: WordPress: [http://wordpress.org/](http://wordpress.org/)
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WordPress: [http://wordpress.org/](http://wordpress.org/)'
- en: WP-CLI: [https://wp-cli.org/](https://wp-cli.org/)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WP-CLI: [https://wp-cli.org/](https://wp-cli.org/)'
- en: 'PHP-FPM: [https://php-fpm.org/](https://php-fpm.org/)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PHP-FPM: [https://php-fpm.org/](https://php-fpm.org/)'
- en: 'cAdvisor: [https://github.com/google/cadvisor/](https://github.com/google/cadvisor/)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'cAdvisor: [https://github.com/google/cadvisor/](https://github.com/google/cadvisor/)'
- en: 'Prometheus: [https://prometheus.io/](https://prometheus.io/)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Prometheus: [https://prometheus.io/](https://prometheus.io/)'
- en: 'Grafana: [https://grafana.com/](https://grafana.com/)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Grafana: [https://grafana.com/](https://grafana.com/)'
- en: Prometheus data model: [https://prometheus.io/docs/concepts/data_model/](https://prometheus.io/docs/concepts/data_model/)
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Prometheus数据模型: [https://prometheus.io/docs/concepts/data_model/](https://prometheus.io/docs/concepts/data_model/)'
- en: 'Traefik: [https://traefik.io/](https://traefik.io/)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Traefik: [https://traefik.io/](https://traefik.io/)'
- en: 'HAProxy: [https://www.haproxy.org/](https://www.haproxy.org/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'HAProxy: [https://www.haproxy.org/](https://www.haproxy.org/)'
- en: 'NGINX: [https://nginx.org/](https://nginx.org/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NGINX: [https://nginx.org/](https://nginx.org/)'
- en: Heroku: [https://www.heroku.com](https://www.heroku.com)
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Heroku: [https://www.heroku.com](https://www.heroku.com)'
- en: 'Other externally hosted Docker monitoring platforms include the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 其他外部托管的Docker监控平台包括以下内容：
- en: 'Sysdig Cloud: [https://sysdig.com/](https://sysdig.com/)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig Cloud: [https://sysdig.com/](https://sysdig.com/)'
- en: 'Datadog: [http://docs.datadoghq.com/integrations/docker/](http://docs.datadoghq.com/integrations/docker/)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Datadog: [http://docs.datadoghq.com/integrations/docker/](http://docs.datadoghq.com/integrations/docker/)'
- en: 'CoScale: [http://www.coscale.com/docker-monitoring](http://www.coscale.com/docker-monitoring)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CoScale: [http://www.coscale.com/docker-monitoring](http://www.coscale.com/docker-monitoring)'
- en: 'Dynatrace: [https://www.dynatrace.com/capabilities/microservices-and-container-monitoring/](https://www.dynatrace.com/capabilities/microservices-and-container-monitoring/)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Dynatrace: [https://www.dynatrace.com/capabilities/microservices-and-container-monitoring/](https://www.dynatrace.com/capabilities/microservices-and-container-monitoring/)'
- en: 'SignalFx: [https://signalfx.com/docker-monitoring/](https://signalfx.com/docker-monitoring/)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SignalFx: [https://signalfx.com/docker-monitoring/](https://signalfx.com/docker-monitoring/)'
- en: 'New Relic: [https://newrelic.com/partner/docker](https://newrelic.com/partner/docker)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'New Relic: [https://newrelic.com/partner/docker](https://newrelic.com/partner/docker)'
- en: 'Sematext: [https://sematext.com/docker/](https://sematext.com/docker/)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sematext: [https://sematext.com/docker/](https://sematext.com/docker/)'
- en: 'There are also other self-hosted options, such as the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他自托管选项，例如：
- en: 'Elastic Beats: [https://www.elastic.co/products/beats](https://www.elastic.co/products/beats)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Elastic Beats: [https://www.elastic.co/products/beats](https://www.elastic.co/products/beats)'
- en: 'Sysdig: [https://www.sysdig.org](https://www.sysdig.org)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig: [https://www.sysdig.org](https://www.sysdig.org)'
- en: 'Zabbix: [https://github.com/monitoringartist/zabbix-docker-monitoring](https://github.com/monitoringartist/zabbix-docker-monitoring)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Zabbix: [https://github.com/monitoringartist/zabbix-docker-monitoring](https://github.com/monitoringartist/zabbix-docker-monitoring)'
