["```java\n    public class Task implements Runnable {\n    ```", "```java\n      private Date initDate;\n      private String name;\n    ```", "```java\n      public Task(String name){\n        initDate=new Date();\n        this.name=name;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n    ```", "```java\n        System.out.printf(\"%s: Task %s: Created on: %s\\n\",Thread.currentThread().getName(),name,initDate);\n        System.out.printf(\"%s: Task %s: Started on: %s\\n\",Thread.currentThread().getName(),name,new Date());\n    ```", "```java\n        try {\n          Long duration=(long)(Math.random()*10);\n          System.out.printf(\"%s: Task %s: Doing a task during %d seconds\\n\",Thread.currentThread().getName(),name,duration);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"%s: Task %s: Finished on: %s\\n\",Thread.currentThread().getName(),name,new Date());\n    ```", "```java\n    public class Server {\n    ```", "```java\n      private ThreadPoolExecutor executor;\n    ```", "```java\n      public Server(){\n      executor=(ThreadPoolExecutor)Executors.newCachedThreadPool();\n      }\n    ```", "```java\n      public void executeTask(Task task){\n        System.out.printf(\"Server: A new task has arrived\\n\");\n    ```", "```java\n        executor.execute(task);\n    ```", "```java\n        System.out.printf(\"Server: Pool Size: %d\\n\",executor.getPoolSize());\n        System.out.printf(\"Server: Active Count: %d\\n\",executor.getActiveCount());\n        System.out.printf(\"Server: Completed Tasks: %d\\n\",executor.getCompletedTaskCount());\n    ```", "```java\n      public void endServer() {\n        executor.shutdown();\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n        Server server=new Server();\n        for (int i=0; i<100; i++){\n          Task task=new Task(\"Task \"+i);\n          server.executeTask(task);\n        }\n        server.endServer();\n      }\n    }\n    ```", "```java\n    public Server(){\n    executor=(ThreadPoolExecutor)Executors.newFixedThreadPool(5);\n    }\n    ```", "```java\n        System.out.printf(\"Server: Task Count: %d\\n\",executor.getTaskCount());\n    ```", "```java\n    public class FactorialCalculator implements Callable<Integer> {\n    ```", "```java\n      private Integer number;\n    ```", "```java\n      public FactorialCalculator(Integer number){\n        this.number=number;\n      }\n    ```", "```java\n       @Override\n      public Integer call() throws Exception {\n    ```", "```java\n           int result = 1;  \n    ```", "```java\n        if ((num==0)||(num==1)) {\n          result=1;\n        } else {\n          for (int i=2; i<=number; i++) {\n            result*=i;\n            TimeUnit.MILLISECONDS.sleep(20);\n          }\n        }\n    ```", "```java\n        System.out.printf(\"%s: %d\\n\",Thread.currentThread().getName(),result);\n    ```", "```java\n        return result;\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors.newFixedThreadPool(2);\n    ```", "```java\n        List<Future<Integer>> resultList=new ArrayList<>();\n    ```", "```java\n        Random random=new Random();\n    ```", "```java\n        for (int i=0; i<10; i++){\n          Integer number= random.nextInt(10);\n    ```", "```java\n          FactorialCalculator calculator=new FactorialCalculator(number);\n    ```", "```java\n          Future<Integer> result=executor.submit(calculator);\n    ```", "```java\n          resultList.add(result);\n        }\n    ```", "```java\n        do {\n    ```", "```java\n          System.out.printf(\"Main: Number of Completed Tasks: %d\\n\",executor.getCompletedTaskCount());\n    ```", "```java\n          for (int i=0; i<resultList.size(); i++) {\n            Future<Integer> result=resultList.get(i);\n            System.out.printf(\"Main: Task %d: %s\\n\",i,result.isDone());\n          }\n    ```", "```java\n          try {\n            TimeUnit.MILLISECONDS.sleep(50);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n    ```", "```java\n        } while (executor.getCompletedTaskCount()<resultList.size());\n    ```", "```java\n        System.out.printf(\"Main: Results\\n\");\n        for (int i=0; i<resultList.size(); i++) {\n          Future<Integer> result=resultList.get(i);\n          Integer number=null;\n          try {\n            number=result.get();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          } catch (ExecutionException e) {\n            e.printStackTrace();\n          }\n    ```", "```java\n          System.out.printf(\"Main: Task %d: %d\\n\",i,number);\n        }\n    ```", "```java\n        executor.shutdown();\n    ```", "```java\n    public class UserValidator {\n    ```", "```java\n      private String name;\n    ```", "```java\n      public UserValidator(String name) {\n        this.name=name;\n      }\n    ```", "```java\n      public boolean validate(String name, String password) {\n    ```", "```java\n        Random random=new Random();\n    ```", "```java\n        try {\n          long duration=(long)(Math.random()*10);\n          System.out.printf(\"Validator %s: Validating a user during %d seconds\\n\",this.name,duration);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          return false;\n        }\n    ```", "```java\n        return random.nextBoolean();\n       }\n    ```", "```java\n      public String getName(){\n        return name;\n      }\n    ```", "```java\n    public class TaskValidator implements Callable<String> {\n    ```", "```java\n      private UserValidator validator;\n    ```", "```java\n      private String user;\n      private String password;\n    ```", "```java\n      public TaskValidator(UserValidator validator, String user, String password){\n        this.validator=validator;\n        this.user=user;\n        this.password=password;\n      }\n    ```", "```java\n      @Override\n      public String call() throws Exception {\n    ```", "```java\n        if (!validator.validate(user, password)) {\n          System.out.printf(\"%s: The user has not been found\\n\",validator.getName());\n          throw new Exception(\"Error validating user\");\n        }\n    ```", "```java\n        System.out.printf(\"%s: The user has been found\\n\",validator.getName());\n        return validator.getName();\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        String username=\"test\";\n        String password=\"test\";\n    ```", "```java\n        UserValidator ldapValidator=new UserValidator(\"LDAP\");\n        UserValidator dbValidator=new UserValidator(\"DataBase\");\n    ```", "```java\n        TaskValidator ldapTask=new TaskValidator(ldapValidator, username, password);\n        TaskValidator dbTask=new TaskValidator(dbValidator,username,password);\n    ```", "```java\n        List<TaskValidator> taskList=new ArrayList<>();\n        taskList.add(ldapTask);\n        taskList.add(dbTask);\n    ```", "```java\n        ExecutorService executor=(ExecutorService)Executors.newCachedThreadPool();\n        String result;\n    ```", "```java\n        try {\n          result = executor.invokeAny(taskList);\n          System.out.printf(\"Main: Result: %s\\n\",result);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } catch (ExecutionException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        executor.shutdown();\n        System.out.printf(\"Main: End of the Execution\\n\");\n    ```", "```java\n    public class Result {\n    ```", "```java\n      private String name;\n      private int value;\n    ```", "```java\n      public String getName() {\n        return name;\n      }\n      public void setName(String name) {\n        this.name = name;\n      }\n      public int getValue() {\n        return value;\n      }\n      public void setValue(int value) {\n        this.value = value;\n      }\n    ```", "```java\n    public class Task implements Callable<Result> {\n    ```", "```java\n      private String name;\n    ```", "```java\n      public Task(String name) {\n        this.name=name;\n      }\n    ```", "```java\n      @Override\n      public Result call() throws Exception {\n    ```", "```java\n        System.out.printf(\"%s: Staring\\n\",this.name);\n    ```", "```java\n        try {\n          long duration=(long)(Math.random()*10);\n          System.out.printf(\"%s: Waiting %d seconds for results.\\n\",this.name,duration);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        int value=0;\n        for (int i=0; i<5; i++){\n          value+=(int)(Math.random()*100);\n\n        }\n    ```", "```java\n        Result result=new Result();\n        result.setName(this.name);\n        result.setValue(value);\n    ```", "```java\n        System.out.println(this.name+\": Ends\");\n    ```", "```java\n        return result;\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        ExecutorService executor=(ExecutorService)Executors.newCachedThreadPool();\n    ```", "```java\n        List<Task> taskList=new ArrayList<>();\n        for (int i=0; i<3; i++){\n          Task task=new Task(i);\n          taskList.add(task);\n        }\n    ```", "```java\n        List<Future<Result>>resultList=null;\n    ```", "```java\n        try {\n          resultList=executor.invokeAll(taskList);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        executor.shutdown();\n    ```", "```java\n        System.out.println(\"Main: Printing the results\");\n        for (int i=0; i<resultList.size(); i++){\n          Future<Result> future=resultList.get(i);\n          try {\n            Result result=future.get();\n            System.out.println(result.getName()+\": \"+result.getValue());\n          } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n    public class Task implements Callable<String> {\n    ```", "```java\n      private String name;\n    ```", "```java\n      public Task(String name) {\n        this.name=name;\n      }\n    ```", "```java\n      public String call() throws Exception {\n        System.out.printf(\"%s: Starting at : %s\\n\",name,new Date());\n        return \"Hello, world\";\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ScheduledThreadPoolExecutor executor=(ScheduledThreadPoolExecutor)Executors.newScheduledThreadPool(1); \n    ```", "```java\n        System.out.printf(\"Main: Starting at: %s\\n\",new Date());\n        for (int i=0; i<5; i++) {\n          Task task=new Task(\"Task \"+i);\n          executor.schedule(task,i+1 , TimeUnit.SECONDS);\n        }\n    ```", "```java\n        executor.shutdown();\n    ```", "```java\n        try {\n          executor.awaitTermination(1, TimeUnit.DAYS);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Main: Ends at: %s\\n\",new Date());\n    ```", "```java\n    public class Task implements Runnable {\n    ```", "```java\n      private String name;\n    ```", "```java\n      public Task(String name) {\n        this.name=name;\n      }\n    ```", "```java\n      @Override\n      public String call() throws Exception {\n        System.out.printf(\"%s: Starting at : %s\\n\",name,new Date());\n        return \"Hello, world\";\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ScheduledExecutorService executor=Executors.newScheduledThreadPool(1);\n    ```", "```java\n        System.out.printf(\"Main: Starting at: %s\\n\",new Date());\n    ```", "```java\n        Task task=new Task(\"Task\");\n    ```", "```java\n        ScheduledFuture<?> result=executor.scheduleAtFixedRate(task, 1, 2, TimeUnit.SECONDS);\n    ```", "```java\n        for (int i=0; i<10; i++){\n          System.out.printf(\"Main: Delay: %d\\n\",result.getDelay(TimeUnit.MILLISECONDS));\n    Sleep the thread during 500 milliseconds.\n          try {\n            TimeUnit.MILLISECONDS.sleep(500);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        executor.shutdown();\n    ```", "```java\n        try {\n          TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Main: Finished at: %s\\n\",new Date());\n    ```", "```java\n    public class Task implements Callable<String> {\n      @Override\n      public String call() throws Exception {\n        while (true){\n          System.out.printf(\"Task: Test\\n\");\n          Thread.sleep(100);\n        }\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors.newCachedThreadPool();\n    ```", "```java\n        Task task=new Task();\n    ```", "```java\n        System.out.printf(\"Main: Executing the Task\\n\");\n        Future<String> result=executor.submit(task);\n    ```", "```java\n        try {\n          TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Main: Canceling the Task\\n\");\n        result.cancel(true);\n    ```", "```java\n        System.out.printf(\"Main: Canceled: %s\\n\",result.isCanceled());\n        System.out.printf(\"Main: Done: %s\\n\",result.isDone());\n    ```", "```java\n        executor.shutdown();\n        System.out.printf(\"Main: The executor has finished\\n\");\n    ```", "```java\n    public class ExecutableTask implements Callable<String> {\n    ```", "```java\n      private String name;\n      public String getName(){\n        return name;\n      }\n    ```", "```java\n      public ExecutableTask(String name){\n        this.name=name;\n      }\n    ```", "```java\n      @Override\n      public String call() throws Exception {\n        try {\n          long duration=(long)(Math.random()*10);\n          System.out.printf(\"%s: Waiting %d seconds for results.\\n\",this.name,duration);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n        }    \n        return \"Hello, world. I'm \"+name;\n      }\n    ```", "```java\n    public class ResultTask extends FutureTask<String> {\n    ```", "```java\n      private String name;\n    ```", "```java\n      public ResultTask(Callable<String> callable) {\n        super(callable);\n        this.name=((ExecutableTask)callable).getName();\n      }\n    ```", "```java\n      @Override\n      protected void done() {\n        if (isCancelled()) {\n          System.out.printf(\"%s: Has been canceled\\n\",name);\n        } else {\n          System.out.printf(\"%s: Has finished\\n\",name);\n        }\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ExecutorService executor=(ExecutorService)Executors.newCachedThreadPool();\n    ```", "```java\n        ResultTask resultTasks[]=new ResultTask[5];\n    ```", "```java\n        for (int i=0; i<5; i++) {\n          ExecutableTask executableTask=new ExecutableTask(\"Task \"+i);\n          resultTasks[i]=new ResultTask(executableTask);\n          executor.submit(resultTasks[i]);\n        }\n    ```", "```java\n        try {\n          TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException e1) {\n          e1.printStackTrace();\n        }\n    ```", "```java\n        for (int i=0; i<resultTasks.length; i++) {\n          resultTasks[i].cancel(true);\n        }\n    ```", "```java\n        for (int i=0; i<resultTasks.length; i++) {\n          try {\n            if (!resultTasks[i].isCanceled()){\n              System.out.printf(\"%s\\n\",resultTasks[i].get());\n            }\n          } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n          }    }\n    ```", "```java\n        executor.shutdown();\n      }\n    }\n    ```", "```java\n    public class ReportGenerator implements Callable<String> {\n    ```", "```java\n      private String sender;\n      private String title;\n    ```", "```java\n      public ReportGenerator(String sender, String title){\n        this.sender=sender;\n        this.title=title;\n      }\n    ```", "```java\n      @Override\n      public String call() throws Exception {\n        try {\n          Long duration=(long)(Math.random()*10);\n          System.out.printf(\"%s_%s: ReportGenerator: Generating a report during %d seconds\\n\",this.sender,this.title,duration);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        String ret=sender+\": \"+title;\n        return ret;\n      }\n    ```", "```java\n    public class ReportRequest implements Runnable {\n    ```", "```java\n      private String name;\n    ```", "```java\n      private CompletionService<String> service;\n    ```", "```java\n      public ReportRequest(String name, CompletionService<String> service){\n        this.name=name;\n        this.service=service;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n\n          ReportGenerator reportGenerator=new ReportGenerator(name, \"Report\");\n          service.submit(reportGenerator);\n\n      }\n    ```", "```java\n    public class ReportProcessor implements Runnable {\n    ```", "```java\n      private CompletionService<String> service;\n    ```", "```java\n      private boolean end;\n    ```", "```java\n      public ReportProcessor (CompletionService<String> service){\n        this.service=service;\n        end=false;\n      }\n    ```", "```java\n        @Override\n      public void run() {\n        while (!end){\n          try {\n            Future<String> result=service.poll(20, TimeUnit.SECONDS);\n    ```", "```java\n            if (result!=null) {\n              String report=result.get();\n              System.out.printf(\"ReportReceiver: Report Received: %s\\n\",report);\n            }      \n          } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n          }\n        }\n        System.out.printf(\"ReportSender: End\\n\");\n      }\n    ```", "```java\n      public void setEnd(boolean end) {\n        this.end = end;\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ExecutorService executor=(ExecutorService)Executors.newCachedThreadPool();\n    ```", "```java\n        CompletionService<String> service=new ExecutorCompletionService<>(executor);\n    ```", "```java\n        ReportRequest faceRequest=new ReportRequest(\"Face\", service);\n        ReportRequest onlineRequest=new ReportRequest(\"Online\", service);  \n        Thread faceThread=new Thread(faceRequest);\n        Thread onlineThread=new Thread(onlineRequest);\n    ```", "```java\n        ReportProcessor processor=new ReportProcessor(service);\n        Thread senderThread=new Thread(processor);\n    ```", "```java\n        System.out.printf(\"Main: Starting the Threads\\n\");\n        faceThread.start();\n        onlineThread.start();\n        senderThread.start();\n    ```", "```java\n        try {\n          System.out.printf(\"Main: Waiting for the report generators.\\n\");\n          faceThread.join();\n          onlineThread.join();\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Main: Shutting down the executor.\\n\");\n        executor.shutdown();\n        try {\n          executor.awaitTermination(1, TimeUnit.DAYS);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        processor.setEnd(true);\n        System.out.println(\"Main: Ends\");\n    ```", "```java\n    public class RejectedTaskController implements RejectedExecutionHandler {\n      @Override\n      public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n        System.out.printf(\"RejectedTaskController: The task %s has been rejected\\n\",r.toString());\n        System.out.printf(\"RejectedTaskController: %s\\n\",executor.toString());\n        System.out.printf(\"RejectedTaskController: Terminating: %s\\n\",executor.isTerminating());\n        System.out.printf(\"RejectedTaksController: Terminated: %s\\n\",executor.isTerminated());\n      }\n    ```", "```java\n    public class Task implements Runnable{\n    ```", "```java\n      private String name;\n    ```", "```java\n      public Task(String name){\n        this.name=name;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        System.out.println(\"Task \"+name+\": Starting\");\n    ```", "```java\n        try {\n          long duration=(long)(Math.random()*10);\n          System.out.printf(\"Task %s: ReportGenerator: Generating a report during %d seconds\\n\",name,duration);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Task %s: Ending\\n\",name);\n      }\n    ```", "```java\n      public String toString() {\n        return name;\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        RejectecTaskController controller=new RejectecTaskController();\n    ```", "```java\n        ThreadPoolExecutor executor=(ThreadPoolExecutor) Executors.newCachedThreadPool();\n    ```", "```java\n        executor.setRejectedExecutionHandler(controller);\n    ```", "```java\n        System.out.printf(\"Main: Starting.\\n\");\n        for (int i=0; i<3; i++) {\n          Task task=new Task(\"Task\"+i);\n          executor.submit(task);\n        }\n    ```", "```java\n        System.out.printf(\"Main: Shutting down the Executor.\\n\");\n        executor.shutdown();\n    ```", "```java\n        System.out.printf(\"Main: Sending another Task.\\n\");\n        Task task=new Task(\"RejectedTask\");\n        executor.submit(task);\n    ```", "```java\n        System.out.println(\"Main: End\");\n        System.out.printf(\"Main: End.\\n\");\n    ```"]