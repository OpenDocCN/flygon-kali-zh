- en: Events and Delegates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和委托
- en: 'Events and delegates may seem like complex programming topics, but actually,
    they are not. In this chapter, we will first learn about these concepts by analyzing
    the meaning of their respective names. Then we will relate the general meaning
    of these words to programming. We will look at a lot of example code in this chapter,
    which will help us understand the concepts with ease. Before we dive into this,
    let''s look at the topics that we are going to cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 事件和委托可能看起来像复杂的编程主题，但实际上并不是。在本章中，我们将首先通过分析它们各自名称的含义来学习这些概念。然后我们将把这些词的一般含义与编程联系起来。在本章中，我们将看到很多示例代码，这将帮助我们轻松理解这些概念。在我们深入讨论之前，让我们先看一下本章将涵盖的主题：
- en: How to create and use delegates
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建和使用委托
- en: Method group conversion
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法组转换
- en: Multicasting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多播
- en: Covariance and contravariance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协变和逆变
- en: Events and multicast events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件和多播事件
- en: .NET event guidelines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET事件指南
- en: What is a delegate?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是委托？
- en: A **delegate** is a proxy, an alternative, or a representative of someone else.
    For example, we may read in the newspaper that a delegate from another country
    is coming to our country to meet a high official. This person is a delegate because
    they have come to our country to represent their own country. They could be a
    representative for the president, prime minister, or any other high official of
    that country. Let's imagine that the delegate is representing the president of
    a country. Maybe the president was unable to attend this meeting in person for
    some reason, and that is why a delegate was sent on their behalf. This delegate
    will do the same work that the president was supposed to do on the trip and make
    decisions on behalf of the president. The delegate is not a fixed individual;
    could be any qualified person that the president chooses.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**委托**是一个代理，一个替代者，或者某人的代表。例如，我们可能在报纸上看到另一个国家的代表来到我们国家会见高级官员。这个人是一个代表，因为他们来到我们国家代表他们自己的国家。他们可能是总统、总理或者那个国家的任何其他高级官员的代表。让我们想象一下，这个代表是总统的代表。也许总统因某种原因无法亲自出席这次会议，这就是为什么派遣了一个代表代表他们。这个代表将会做总统应该在这次旅行中做的工作，并代表总统做出决定。代表不是一个固定的个人；可以是总统选择的任何合格的人。'
- en: The concept of a delegate is similar in software development. We can have a
    functionality where a method doesn't do the actual work that it was ask to do,
    but rather, it will call another method to execute that work. Furthermore, in
    programming, the method that doesn't do the actual work, but passes it to another
    method, is called a **delegate**. Consequently, a delegate will actually hold
    a reference of a method. When the delegate is called, the referenced method will
    actually be called and executed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 委托的概念在软件开发中是类似的。我们可以有一个功能，其中一个方法不执行它被要求执行的实际工作，而是调用另一个方法来执行那项工作。此外，在编程中，那个不执行实际工作而是将其传递给另一个方法的方法被称为**委托**。因此，委托实际上将持有一个方法的引用。当调用委托时，引用的方法将被调用和执行。
- en: Now, you may ask, *"Why should I call a delegate if it is going to call another
    method? Why don't I just call the method directly?"* Well, we do this because
    if you directly call the method, you lose your flexibility by making your code
    coupled. You are hard coding the method name in your code so that, whenever that
    line of code will run, that method will be executed. However, with a delegate,
    you can decide which method to call at runtime instead of compile time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会问，*"如果委托要调用另一个方法，为什么我不直接调用这个方法呢？"* 好吧，我们这样做是因为如果你直接调用方法，你会失去灵活性，使你的代码耦合在一起。你在代码中硬编码了方法名，所以每当那行代码运行时，该方法就会被执行。然而，使用委托，你可以在运行时决定调用哪个方法，而不是在编译时。
- en: How to create and use delegates
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建和使用委托
- en: 'To create a delegate, we need to use the `delegate` keyword. Let me show you
    how to declare a delegate in a general form:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个委托，我们需要使用`delegate`关键字。让我向你展示如何以一般形式声明一个委托：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let me show you some real example code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我给你展示一些真实的示例代码：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![](img/ec78bb93-f19d-4cd4-9c4b-3234205bb9c7.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec78bb93-f19d-4cd4-9c4b-3234205bb9c7.png)'
- en: 'Let''s now discuss the preceding code. At the very top, inside the namespace,
    we can see the declaration of the delegate, as shown in the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论上述代码。在命名空间内的顶部，我们可以看到委托的声明，如下所示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We used the `delegate` keyword to let the compiler know that we are declaring
    a `delegate`. Then we set the return type to `int` and named the delegate `MathFunc`.
    We also passed two `int` type parameters in this delegate.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`delegate`关键字来告诉编译器我们在声明一个`delegate`。然后我们将返回类型设置为`int`，并命名了委托为`MathFunc`。我们还在这个委托中传递了两个`int`类型的参数。
- en: After that, the `program` class gets started, and in that class, we have two
    methods in addition to the main method. One is `add` and the other is `sub`. If
    you pay close attention to these methods, you will see that they have the same
    signature as the delegate. This is done deliberately, because a method can use
    a `delegate` when the method has the same signature as the `delegate`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，`program`类开始运行，在该类中，除了主方法外，我们还有两个方法。一个是`add`，另一个是`sub`。如果你仔细观察这些方法，你会发现它们与委托具有相同的签名。这是故意这样做的，因为当方法具有与委托相同的签名时，方法可以使用`delegate`。
- en: 'Now, if we look at the main method, we will find the following interesting
    code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们看一下主方法，我们会发现以下有趣的代码：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this first line of the main method, we create an object of the delegate.
    While doing this, we pass the `add` method in the constructor. This is required,
    as you need to pass a method for which you want to use the delegate. Then we can
    see that, when we call the delegate `mf(4,5)`, it returns `9`. This means that
    it is actually calling the `add` method. After that, we assign `sub` to the `delegate`.
    Upon calling the `mf(4,5)`, this time we get `1`. This means that the `sub` method
    was called. In this way, a `delegate` can be used for many methods that have the
    same signature.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在主方法的第一行，我们创建了一个代理对象。在这样做时，我们将`add`方法传递给构造函数。这是必需的，因为你需要传递一个你想要使用代理的方法。然后我们可以看到，当我们调用代理`mf(4,5)`时，它返回`9`。这意味着它实际上调用了`add`方法。之后，我们将`sub`分配给`delegate`。在调用`mf(4,5)`时，这次我们得到了`1`。这意味着调用了`sub`方法。通过这种方式，一个`delegate`可以用于具有相同签名的许多方法。
- en: Method group conversion
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法组转换
- en: 'In the last example, we saw how we can create an object of a delegate and pass
    the method name in the constructor. Now we will look at another way of achieving
    the same thing, but in an easier way. This is called **method group conversion**.
    Here, you don''t need to initialize the `delegate` object, but you can directly
    assign the method to it. Let me show you an example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们看到了如何创建一个代理对象并在构造函数中传递方法名。现在我们将看另一种实现相同目的的方法，但更简单。这被称为**方法组转换**。在这里，你不需要初始化`delegate`对象，而是可以直接将方法分配给它。让我给你举个例子：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we can see that instead of passing the method name in the constructor,
    we directly assign the method to it. This is a quick way of assigning a delegate
    in C#.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，我们直接将方法分配给它，而不是在构造函数中传递方法名。这是在C#中分配代理的一种快速方法。
- en: Using the static and instance methods as delegates
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态和实例方法作为代理
- en: 'In the previous examples, we used static methods in our delegates. However,
    you can also use instance methods in delegates. Let''s look at an example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的例子中，我们在代理中使用了静态方法。然而，你也可以在代理中使用实例方法。让我们看一个例子：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, we can see that we have instance methods under the `MyMath` class.
    To use those methods in delegates, we first have to create an object of that class
    and simply assign the methods to a delegate using the object instance.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们可以看到我们在`MyMath`类下有实例方法。要在代理中使用这些方法，我们首先必须创建该类的对象，然后简单地使用对象实例将方法分配给代理。
- en: Multicasting
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多播
- en: '**Multicasting** is an excellent feature of delegates. With multicasting, you
    can assign more than one method to a delegate. When that delegate is executed,
    it runs all the methods that were assigned one after another. Using the `+` or
    `+=` operator, you can add methods to a delegate. There is also a way to remove
    added methods from the delegate. To do this, you have to use the `-` or `-=` operator.
    Let''s look at an example to understand clearly what multicasting is:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**多播**是代理的一个很好的特性。通过多播，你可以将多个方法分配给一个代理。当执行该代理时，它依次运行所有被分配的方法。使用`+`或`+=`运算符，你可以向代理添加方法。还有一种方法可以从代理中删除添加的方法。要做到这一点，你必须使用`-`或`-=`运算符。让我们看一个例子来清楚地理解多播是什么：'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code will give the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将给出以下输出：
- en: '![](img/9e13be43-8af9-4cc0-84fb-356853c3a9e3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e13be43-8af9-4cc0-84fb-356853c3a9e3.png)'
- en: 'Here, we can see how our delegate executed the two methods one after the other.
    We have to keep in mind that it works like a queue, so the first method you add
    will be the first method to get executed. Now let''s see how we can remove a method
    from a delegate:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们的代理依次执行了两种方法。我们必须记住它的工作原理就像一个队列，所以你添加的第一个方法将是第一个执行的方法。现在让我们看看如何从代理中删除一个方法：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code will give us the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将给我们以下输出：
- en: '![](img/375ab662-d4d2-4e43-98e7-77e000cf9870.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/375ab662-d4d2-4e43-98e7-77e000cf9870.png)'
- en: Here, we have firstly added two methods to the delegate. Then, we removed the
    `sub3` method and added the `mul10` method. After making all these changes when
    we executed the delegate, we saw that `5` was added to the number, then `10` was
    multiplied by the number. No subtraction took place.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先向代理添加了两种方法。然后，我们删除了`sub3`方法并添加了`mul10`方法。在进行了所有这些更改后，当我们执行了代理时，我们看到`5`被加到了数字上，然后`10`被乘以数字。没有发生减法。
- en: Covariance and contravariance
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协变和逆变
- en: There are two important delegate features. What we have learned so far is that
    normally, to register a method in a delegate, the method has to match the signature
    of the delegate. This means that the return type and the parameters of the method
    and the delegate have to be the same. However, with the use of the concepts of
    covariance and contravariance, you can actually register methods to a delegate
    that don't have the same return types or parameters. The delegate will then be
    able to execute them when called.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个重要的代理特性。到目前为止，我们学到的是通常情况下，要向代理注册一个方法，该方法必须与代理的签名匹配。这意味着方法和代理的返回类型和参数必须相同。然而，通过协变和逆变的概念，你实际上可以向代理注册不具有相同返回类型或参数的方法。然后在调用时，代理将能够执行它们。
- en: '**Covariance** is when you assign a method to a delegate that has a return
    type that is a derived type of the delegate''s return type. For example, if class
    `B` is derived from class `A`, and if the delegate returns class `A`, then a method
    can be registered to the delegate that returns class `B`. Let''s look at the example
    in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**协变**是指当你将一个返回类型是委托返回类型的派生类型的方法分配给委托时。例如，如果类`B`是从类`A`派生出来的，并且如果委托返回类`A`，那么可以向委托注册返回类`B`的方法。让我们看看以下代码中的例子：'
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出将如下所示：
- en: '![](img/a25f3142-a1f1-4a9a-b26d-b33aa0902724.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a25f3142-a1f1-4a9a-b26d-b33aa0902724.png)'
- en: 'On the other hand, **contravariance** is when a method is passed to a delegate
    and the parameters of the method don''t match the parameters of the delegate.
    Here, we have to keep in mind that the parameter type of the method has to be
    at least derived from the parameter type of the delegate. Let''s look at an example
    of contravariance:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**逆变**是指当一个方法传递给委托时，该方法的参数与委托的参数不匹配。在这里，我们必须记住，方法的参数类型至少必须派生自委托的参数类型。让我们看一个逆变的例子：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code will give the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将产生以下输出：
- en: '![](img/8c0d2d79-d593-41b5-acac-a4a38caeab8e.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c0d2d79-d593-41b5-acac-a4a38caeab8e.png)'
- en: Here, we can see that the delegate takes type `B` as a parameter. However, when
    the `WorkA` method had been registered as a method in the delegate, it didn't
    give any error or warning, even though the parameter that `WorkA` method takes
    is type `A`. The reason why it works is because type `B` is derived from type
    `A`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到委托以类型`B`作为参数。然而，当`WorkA`方法被注册为委托中的一个方法时，它并没有给出任何错误或警告，尽管`WorkA`方法的参数类型是`A`类型。它能够工作的原因是因为`B`类型是从`A`类型派生出来的。
- en: Events
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'You can think of an **event **as a kind of method that gets executed in some circumstances
    and notifies handlers or delegates about that incident. For example, when you
    sign up for an email newsletter, you get emails from the website about the latest
    articles, blog posts, or news that are posted. These emails could be daily, weekly,
    monthly, yearly, or according to some other specified period of time that you
    have chosen. These emails are not sent by a human being manually, but by an automatic
    system/software. This automatic email sender can be developed using events. Now,
    you might think, why do I need an event for this, can''t I send an email to the
    subscriber by a normal method? Yes, you can. However, suppose that in the near
    future, you also want to introduce a feature where you will be notified on the
    mobile app. You''d have to change the code and add the functionality for that.
    A few days after that, if you want to further extend your system and send an SMS
    to specific subscribers, you have to change the code again. Not only that, but
    the code you write to achieve this will be very strongly coupled if you write
    it using normal methods. You can solve these kinds of problem using `event`. You
    can also create different event handlers and assign those event handlers to an
    event so that, whenever that event gets fired, it will notify all the registered
    handlers that will perform their work. Let''s now look at an example to make this
    a little clearer:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将**事件**看作是在某些情况下执行的一种方法，并通知处理程序或委托有关该事件的发生。例如，当你订阅电子邮件时，你会收到来自网站的关于最新文章、博客帖子或新闻的电子邮件。这些电子邮件可以是每天、每周、每月、每年，或者根据你选择的其他指定时间段。这些电子邮件不是由人手动发送的，而是由自动系统/软件发送的。可以使用事件来开发这种自动电子邮件发送器。现在，你可能会想，为什么我需要一个事件来做这个，我不能通过普通方法发送电子邮件给订阅者吗？是的，你可以。但是，假设在不久的将来，你还想引入一个功能，即在移动应用程序上收到通知。你将不得不更改代码并添加该功能。几天后，如果你想进一步扩展你的系统并向特定订阅者发送短信，你又必须再次更改代码。不仅如此，如果你使用普通方法编写代码，那么你编写的代码将非常紧密耦合。你可以使用`event`来解决这类问题。你还可以创建不同的事件处理程序，并将这些事件处理程序分配给一个事件，这样，每当该事件被触发时，它将通知所有注册的处理程序来执行它们的工作。现在让我们看一个例子来使这一点更清晰：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '![](img/4c7feacb-1170-499c-b38e-72151467b6f4.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c7feacb-1170-499c-b38e-72151467b6f4.png)'
- en: In the preceding code, we can see that, when the `PublishResultNow()` method
    gets called, it basically fires the  `PublishResult` event. Furthermore, the `SendMail()` method that
    did subscribe to the event gets executed and prints `Results have been emailed
    successfully!` on the console.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们可以看到，当调用`PublishResultNow()`方法时，它基本上触发了`PublishResult`事件。此外，订阅了该事件的`SendMail()`方法被执行，并在控制台上打印出`Results
    have been emailed successfully!`。
- en: Multicasting events
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多播事件
- en: 'You can multicast in an event in the same way that you can in a delegate. This
    means that you can register multiple event handlers (methods that have subscribed
    to the event) to an event and all of them will be executed one by one when the
    event gets fired. To multicast, you have to use the `+=` sign to register event
    handlers to the event. You can also remove event handlers from the event by using
    the `-=` operator. When you apply multicast, the first event handler that was
    registered will get executed first, then the second, and so on. By multicasting,
    you can easily extend or reduce event handlers in your application without doing
    much work. Let''s look at an example of multicasting:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件中，你可以像在委托中一样进行多播。这意味着你可以注册多个事件处理程序（订阅事件的方法）到一个事件中，当事件被触发时，所有这些处理程序都会依次执行。要进行多播，你必须使用`+=`符号来注册事件处理程序到事件中。你也可以使用`-=`运算符从事件中移除事件处理程序。当应用多播时，首先注册的事件处理程序将首先执行，然后是第二个，依此类推。通过多播，你可以在应用程序中轻松扩展或减少事件处理程序而不需要做太多工作。让我们看一个多播的例子：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following is the output of the preceding code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的输出如下：
- en: '![](img/fd85efc4-6818-457e-ab15-3c69366339d0.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd85efc4-6818-457e-ab15-3c69366339d0.png)'
- en: 'Now if we analyze the preceding code, we can see that we have created another
    class, `SmsEventHandler`, and this class has a method called `SmsSender`, which
    follows the same signature as our delegate `GetResult`, as shown in the following
    code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们分析上面的代码，我们可以看到我们创建了另一个类`SmsEventHandler`，这个类有一个名为`SmsSender`的方法，它的签名与我们的委托`GetResult`相同，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, in the main method, we create an instance of this `SmsEventHandler` class
    and register the `SmsSender` method to the event, as shown in the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在主方法中，我们创建了这个`SmsEventHandler`类的一个实例，并将`SmsSender`方法注册到事件中，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After firing the event once, we remove the `SmsSender` event handler from the
    event using the `-=` operator, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 触发事件一次后，我们使用`-=`运算符从事件中移除`SmsSender`事件处理程序，如下所示：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When we fire the event again, we can see in the output that only the email event
    handler was executed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次触发事件时，可以在输出中看到只有电子邮件事件处理程序被执行。
- en: Event guidelines from .NET
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET 中的事件准则
- en: For better stability, .NET Framework has provided some guidelines for using
    events in C#. It's not that you absolutely must follow these guidelines, but following
    these guidelines will certainly make your program more productive. Now let's see
    what guidelines we need to follow.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好的稳定性，.NET Framework 提供了一些在 C# 中使用事件的准则。并不是说你一定要遵循这些准则，但遵循这些准则肯定会使你的程序更加高效。现在让我们看看需要遵循哪些准则。
- en: 'An event should take the following two parameters:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 事件应该有以下两个参数：
- en: The reference to the object that generated the event
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成事件的对象的引用
- en: The type of `EventArgs` that will hold other important information needed by
    the event handlers
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventArgs` 的类型将保存事件处理程序所需的其他重要信息'
- en: 'The general form of the code should be as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的一般形式应该如下：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s look at an example that follows these guidelines:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个遵循这些准则的例子：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '![](img/0eb0b9af-e892-43c3-ab91-1f574877789d.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0eb0b9af-e892-43c3-ab91-1f574877789d.png)'
- en: If we analyze the preceding code, we will see that we have passed the counter
    value using the  `EventArgs` parameter, and the reference of the object using
    the `object` parameter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们分析上述代码，我们会看到我们使用 `EventArgs` 参数传递了计数器的值，使用 `object` 参数传递了对象的引用。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about delegates and events. These topics are very
    important in software development as they provide the functionality to automate
    code over a particular occasion. These concepts are both heavily used in the field
    of web development.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了委托和事件。这些主题在软件开发中非常重要，因为它们提供了在特定场合自动化代码的功能。这些概念在 Web 开发领域都被广泛使用。
- en: In the next chapter, we will look into generics and collections in C#. These
    are very interesting features of the C# programming language that you can use
    to write generic delegates in your programs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 C# 中的泛型和集合。这些是 C# 编程语言非常有趣的特性，你可以使用它们在程序中编写通用的委托。
