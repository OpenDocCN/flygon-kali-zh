["```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh\n```", "```\nhelm install -f values.yaml /path/to/chart/root\n```", "```\nhelm install -f values.yaml stable/drupal\n```", "```\nhelm repo add jetstack https://charts.jetstack.io\nhelm install certmanager --namespace cert-manager jetstack/cert-manager\n```", "```\nhelm install certmanager --namespace cert-manager jetstack/cert-manager\n```", "```\nNAME: certmanager\nLAST DEPLOYED: Sun May 23 19:07:04 2020\nNAMESPACE: cert-manager\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n```", "```\nNOTES:\ncert-manager has been deployed successfully!\nIn order to begin issuing certificates, you will need to set up a ClusterIssuer\nor Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).\nMore information on the different types of issuers and how to configure them\ncan be found in our documentation:\nhttps://cert-manager.io/docs/configuration/\nFor information on how to configure cert-manager to automatically provision\nCertificates for Ingress resources, take a look at the `ingress-shim`\ndocumentation:\nhttps://cert-manager.io/docs/usage/ingress/\n```", "```\nKubectl get secret -n cert-manager\n```", "```\nhelm ls -A\n```", "```\nChart.yaml\ncharts/\ntemplates/\ndev-values.yaml\nstaging-values.yaml\nproduction-values.yaml\n```", "```\napiVersion: v2\nname: mynodeapp\nversion: 1.0.0\n```", "```\nhelm create myfakenodeapp\n```", "```\nLs myfakenodeapp/templates\n```", "```\nhelpers.tpl\ndeployment.yaml\nNOTES.txt\nservice.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n\u00a0\u00a0name: frontend-myapp\n\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0app: frontend-myapp\nspec:\n\u00a0\u00a0replicas: 2\n\u00a0\u00a0selector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-myapp\n\u00a0\u00a0template:\n\u00a0\u00a0\u00a0\u00a0metadata:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-myapp\n\u00a0\u00a0\u00a0\u00a0spec:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: frontend-myapp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: myrepo/myapp:1.0.0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 80\n```", "```\nhelm install myapp .\n```", "```\nkubectl get deployment\n```", "```\nNAMESPACE\u00a0\u00a0NAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0READY\u00a0\u00a0\u00a0UP-TO-DATE\u00a0\u00a0\u00a0AVAILABLE\u00a0\u00a0\u00a0AGE\ndefault\u00a0\u00a0\u00a0\u00a0frontend-myapp\u00a0\u00a02/2\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02m\n```", "```\nhelm uninstall myapp\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n\u00a0\u00a0name: frontend-{{ .Release.Name }}\n\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0app: frontend-{{ .Release.Name }}\n\u00a0\u00a0\u00a0\u00a0chartVersion: {{ .Chart.version }}\nspec:\n\u00a0\u00a0replicas: 2\n\u00a0\u00a0selector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-{{ .Release.Name }}\n\u00a0\u00a0template:\n\u00a0\u00a0\u00a0\u00a0metadata:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-{{ .Release.Name }}\n\u00a0\u00a0\u00a0\u00a0spec:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: frontend-{{ .Release.Name }}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: myrepo/{{ .Values.image.name }}\n:{{ .Values.image.tag }}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 80\n```", "```\nimage:\n\u00a0\u00a0name: myapp\n\u00a0\u00a0tag: 2.0.1\n```", "```\nhelm install myrelease -f values.yaml .\n```", "```\nimage:\n\u00a0\u00a0name: myapp\n\u00a0\u00a0tag: 2.0.2\n```", "```\napiVersion: v2\nname: mynodeapp\nversion: 1.0.1\n```", "```\nhelm upgrade myrelease -f values.yaml .\n```", "```\nhelm rollback myrelease 1.0.0\n```", "```\ncurl -s \"https://raw.githubusercontent.com/\\\nkubernetes-sigs/kustomize/master/hack/install_kustomize.sh\"\u00a0\u00a0| bash\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n\u00a0\u00a0name: frontend-myapp\n\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0app: frontend-myapp\nspec:\n\u00a0\u00a0replicas: 2\n\u00a0\u00a0selector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-myapp\n\u00a0\u00a0template:\n\u00a0\u00a0\u00a0\u00a0metadata:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-myapp\n\u00a0\u00a0\u00a0\u00a0spec:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: frontend-myapp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: myrepo/myapp:1.0.0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 80\n```", "```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- deployment.yaml\nnamespace: default\ncommonLabels:\n\u00a0\u00a0app: frontend-app\nimages:\n\u00a0\u00a0- name: frontend-myapp\n\u00a0\u00a0\u00a0\u00a0newTag: 2.0.0\n\u00a0\u00a0\u00a0\u00a0newName: frontend-app-1\n```", "```\nkustomize build deployment-kustomization1.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n\u00a0\u00a0name: frontend-myapp\n\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0app: frontend-app\nspec:\n\u00a0\u00a0replicas: 2\n\u00a0\u00a0selector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-app\n\u00a0\u00a0template:\n\u00a0\u00a0\u00a0\u00a0metadata:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend-app\n\u00a0\u00a0\u00a0\u00a0spec:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: frontend-app-1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: myrepo/myapp:2.0.0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 80\n```", "```\nkustomize build deployment-kustomization.yaml | kubectl apply -f -\n```", "```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- deployment.yaml\nnamespace: default\npatchesStrategicMerge:\n\u00a0\u00a0- deployment-patch-1.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n\u00a0\u00a0name: frontend-myapp\n\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0app: frontend-myapp\nspec:\n\u00a0\u00a0replicas: 4\n```", "```\n kustomize build deployment-kustomization2.yaml\n```", "```\nKubectl apply -k deployment-kustomization2.yaml\n```", "```\nkustomize build deployment-kustomization2.yaml | kubectl apply -f -\n```", "```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- deployment.yaml\nnamespace: default\npatches:\n- path: deployment-patch-2.json\n\u00a0\u00a0target:\n\u00a0\u00a0\u00a0\u00a0group: apps\n\u00a0\u00a0\u00a0\u00a0version: v1\n\u00a0\u00a0\u00a0\u00a0kind: Deployment\n\u00a0\u00a0\u00a0\u00a0name: frontend-myapp\n```", "```\n[\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\"op\": \"replace\",\n\u00a0\u00a0\u00a0\"path\": \"/spec/template/spec/containers/0/name\",\n\u00a0\u00a0\u00a0\"value\": \"frontend-myreplacedapp\"\n\u00a0\u00a0}\n]\n```", "```\nversion: 0.2\nphases:\n\u00a0\u00a0build:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- npm run build\n\u00a0\u00a0test:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- npm test\n\u00a0\u00a0containerbuild:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- docker build -t $ECR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .\n\u00a0\u00a0push:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- docker push_$ECR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG\n```", "```\nversion: 0.2\nphases:\n\u00a0\u00a0install:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/darwin/amd64/kubectl\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- chmod +x ./kubectl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- source ~/.bashrc\n\u00a0\u00a0pre_deploy:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $K8S_CLUSTER\n\u00a0\u00a0deploy:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- cd $CODEBUILD_SRC_DIR\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- kubectl set image deployment/$KUBERNETES-DEPLOY-NAME myrepo:\"$IMAGE_TAG\"\n```", "```\nversion: 0.2\nphases:\n\u00a0\u00a0install:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/darwin/amd64/kubectl\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- chmod +x ./kubectl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- source ~/.bashrc\n\u00a0\u00a0pre_deploy:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $K8S_CLUSTER\n\u00a0\u00a0deploy:\n\u00a0\u00a0\u00a0\u00a0commands:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- cd $CODEBUILD_SRC_DIR\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- kubectl apply -f .\n```", "```\n    helm repo add fluxcd https://charts.fluxcd.io\n    ```", "```\n    kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/master/deploy/crds.yaml\n    ```", "```\n    kubectl create namespace flux\n    ```", "```\n    helm upgrade -i flux fluxcd/flux \\\n    --set git.url=git@github.com:GITHUB_USERNAME/REPOSITORY_NAME \\\n    --namespace flux\n    helm upgrade -i helm-operator fluxcd/helm-operator \\\n    --set git.ssh.secretName=flux-git-deploy \\\n    --namespace flux\n    ```", "```\napiVersion: helm.fluxcd.io/v1\nkind: HelmRelease\nmetadata:\n\u00a0\u00a0name: myapp\n\u00a0\u00a0annotations:\n\u00a0\u00a0\u00a0\u00a0fluxcd.io/automated: \"true\"\n\u00a0\u00a0\u00a0\u00a0fluxcd.io/tag.chart-image: glob:myapp-v*\nspec:\n\u00a0\u00a0releaseName: myapp\n\u00a0\u00a0chart:\n\u00a0\u00a0\u00a0\u00a0git: ssh://git@github.com/<myuser>/<myinfrastructurerepository>/myhelmchart\n\u00a0\u00a0\u00a0\u00a0ref: master\n\u00a0\u00a0\u00a0\u00a0path: charts/myapp\n\u00a0\u00a0values:\n\u00a0\u00a0\u00a0\u00a0image:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0repository: myrepo/myapp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tag: myapp-v2\n```", "```\nhelmrelease1.yaml\n```", "```\nhelmrelease1.yaml\nmyhelmchart/\n\u00a0\u00a0Chart.yaml\n\u00a0\u00a0Values.yaml\n\u00a0\u00a0Templates/\n\u00a0\u00a0\u00a0\u00a0\u2026 chart templates\n```"]