["```js\n\"proxy\": \"http://localhost:3001\",\n```", "```js\n<p><button id=\"upload\" onClick={this.upload}>Upload Photo</button></p>\n<div id=\"uploadForm\" className=\"w3-modal\">   <form method=\"post\"\n encType=\"multipart/form-data\">\n     <p><input type=\"file\" name=\"filetoupload\" /></p>\n     <p><button type=\"submit\" onClick={this.uploadForm}>Upload</button></p>\n   </form>\n</div>\n```", "```js\n uploadForm(e) {\n e.preventDefault();\n const formData = new FormData()\n\n formData.append('file', document.querySelector('input').files[0]);\n\n fetch(\"http://localhost:3000/upload\", {\n   method: 'POST',\n   body: formData\n })\n   .then(() => {\n     this.props.reload()\n   })\n}\n```", "```js\nconst express = require('express');\nconst formidable = require('formidable');\nconst router = express.Router();\nconst fs = require('fs');\n\nrouter.post('/', (req, res, next) => {\n  const form = new formidable.IncomingForm().parse(req)\n    .on('fileBegin', (name, file) => {\n      file.path = __dirname + '/../public/images/' + file.name\n    })\n    .on('file', () => {\n      res.sendStatus(200)\n    })\n});\n\nmodule.exports = router;\n```", "```js\nvar express = require('express');\nconst fs = require('fs');\n\nvar router = express.Router();\n\nrouter.get('/', (req, res, next) => {\n fs.readdir(`${__dirname}/../public/images`, (err, files) => {\n     if (err) {\n       res.json({\n         path: '',\n         files: []\n       });\n       return;\n     }\n\n     const data = {\n       path: 'images/',\n       files: files.splice(1,files.length) // remove the .gitignore\n     };\n     res.json(data);\n });\n});\n\nrouter.delete('/:name', (req, res) => {\n fs.unlink(`${__dirname}/../public/images/${req.params.name}`, (err) => {\n   res.json(1)\n });\n});\n\nmodule.exports = router;\n```", "```js\nAPPLICATION_ID=<your id>\nAPPLICATION_KEY=<your key>\n```", "```js\nconsole.log(process.env.APPLICATION_ID, process.env.APPLICATION_KEY);\n```", "```js\nconst https = require('https');\n\nrequire('dotenv').config();\n\nhttps.get(`https://api.edamam.com/search?app_id=${process.env.APPLICATION_ID}&app_key=${process.env.APPLICATION_KEY}&q=cheesecake`, (res) => {\n console.log(\"Got response: \" + res.statusCode)\n\n res.setEncoding('utf8')\n  res.on(\"data\", (chunk) => {\n   console.log(chunk)\n })\n}).on('error', (e) => {\n console.log(\"Got error: \" + e.message);\n})\n```", "```js\nrender() {\n return (\n   <h2>Search for: <input type=\"text\" id=\"searchTerm\" />\n     <button onClick={this.submitSearch}>Search!</button></h2>\n )\n}\n```", "```js\n submitSearch(e) {\n e.preventDefault()\n\n fetch(`http://localhost:3000/search?q=${document.querySelector('#searchTerm').value}`)\n   .then(data => data.json())\n   .then((json) => {\n     this.props.handleSearchResults(json)\n   })\n}\n```", "```js\nrouter.get('/', (req, res, next) => {\n https.get(`https://api.edamam.com/search?app_id=${process.env.APPLICATION_ID}&app_key=${process.env.APPLICATION_KEY}&q=${req.query.q}`, (data) => {\n\n   let chunks = '';\n\n   data.on(\"data\", (chunk) => {\n     chunks += chunk\n   })\n\n   data.on(\"end\", () => {\n     res.send(JSON.parse(chunks))\n   })\n\n   data.on('error', (e) => {\n     console.log(\"Got error: \" + e.message);\n   })\n })\n});\n```", "```js\nhandleSearchResults(data) {\n const recipes = []\n\n data.hits.forEach( (item) => {\n   const recipe = item.recipe\n\n   recipes.push({\n     \"title\": recipe.label,\n     \"url\": recipe.url,\n     \"image\": recipe.image\n   })\n })\n\n this.setState({\n   recipes: recipes\n })\n}\n```", "```js\n<Search handleSearchResults={this.handleSearchResults} />\n\n{\n recipes.length > 0 ? (\n   <>\n     <p>Search Results</p>\n     <div className=\"card-columns\">\n       {\n         recipes.map((recipe, i) => (\n           <Recipe recipe={recipe} key={i} search=\"true\" \n            refresh={this.refresh} />\n         ))\n       }\n     </div>\n   </>\n ) : <p></p>\n```", "```js\nsave(e) {\n   e.preventDefault()\n\n   const recipe = { [this.props.recipe.title]: this.props.recipe }\n\n   fetch('http://localhost:3000/recipes', {\n     method: 'POST',\n     headers: {\n       'Accept': 'application/json',\n       'Content-Type': 'application/json'\n     },\n     body: JSON.stringify(recipe)\n   })\n   .then(json => json.json())\n   .then( (data) => {\n     this.props.refresh(data)\n   })\n }\n```", "```js\n{\"Strawberry Cheesecake Parfaits\": {\"title\":\"Strawberry Cheesecake Parfaits\", \"image\":\"https://www.edamam.com/web-img/d4c/d4c3a4f1db4e8c413301ae1f324cf32a.jpg\", \"url\":\"http://honestcooking.com/strawberry-cheesecake-parfaits/\"}}\n```", "```js\nconst readData = () => {\n if (!fs.existsSync(__dirname + \"/../data/recipes.json\")) {\n   fs.writeFileSync(__dirname + \"/../data/recipes.json\", '[]')\n }\n\n return JSON.parse(fs.readFileSync(__dirname + \"/../data/recipes.json\"))\n}\n```", "```js\nrouter.get('/', (req, res, next) => {\n const recipes = readData()\n res.json(recipes)\n})\n```", "```js\nrouter.post('/', (req, res) => {\n let recipes = readData()\n const data = req.body\n recipes.push(data)\n fs.writeFileSync(__dirname + \"/../data/recipes.json\",JSON.stringify(recipes))\n res.json(recipes)\n})\n```", "```js\nREACT_APP_apiKey=<key>\nREACT_APP_authDomain=restaurant-database-<id>.firebaseapp.com\nREACT_APP_databaseURL=https://restaurant-database-<id>.firebaseio.com\nREACT_APP_projectId=restaurant-database-<id>\nREACT_APP_storageBucket=restaurant-database-<id>.appspot.com\nREACT_APP_messagingSenderId=<id>\nREACT_APP_appId=<id>\n```", "```js\nimport * as firebase from 'firebase'\n\nconst app = firebase.initializeApp({\n apiKey: process.env.REACT_APP_apiKey,\n authDomain: process.env.REACT_APP_authDomain,\n databaseURL: process.env.REACT_APP_databaseURL,\n projectId: process.env.REACT_APP_projectId,\n storageBucket: process.env.REACT_APP_storageBucket,\n messagingSenderId: process.env.REACT_APP_messagingSenderId,\n appId: process.env.REACT_APP_appId\n})\n\nconst Database = app.database()\n\nexport default Database\n```", "```js\nimport React from 'react'\nimport Database from '../database/database'\n\nexport default class Finder extends React.Component {\n constructor() {\n   super()\n\n   Database.ref('/test').set({\n     helloworld: 'Hello, World'\n   })\n }\n\n render() {\n   return <h1>Let's find some restaurants!</h1>\n }\n}\n```", "```js\nimport React from 'react'\nimport Finder from './components/finder/Finder'\nimport './App.css'\n\nfunction App() {\n return (\n   <div className=\"App\">\n     <Finder />     \n   </div>\n );\n}\n\nexport default App;\n```", "```js\nYelp_Client_ID=<your client id>\nYELP_API_Key=<your api key>\n```", "```js\nconst yelp = require('yelp-fusion');\nconst http = require('http');\nconst url = require('url');\nrequire('dotenv').config();\n\nconst hostname = 'localhost';\nconst port = 3001;\n\nconst client = yelp.client(process.env.YELP_API_Key);\n\nconst server = http.createServer((req, res) => {\n const { lat, lng, value } = url.parse(req.url, true).query\n\n client.search({\n   term: value,\n   latitude: lat,\n   longitude: lng,\n   categories: 'Restaurants'\n }).then(response => {\n   res.statusCode = 200;\n   res.setHeader('Content-Type', 'application/json');\n\n   res.write(response.body);\n   res.end();\n })\n   .catch(e => {\n     console.error('error',e)\n   })\n });\n\n server.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n });\n```", "```js\n.\n\u251c\u2500\u2500 App.css\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 App.test.js\n\u251c\u2500\u2500 components\n\u2502   \u251c\u2500\u2500 database\n\u2502   \u2502 \u2514\u2500\u2500 database.js\n\u2502   \u251c\u2500\u2500 finder\n\u2502   \u2502 \u2514\u2500\u2500 Finder.jsx\n\u2502   \u251c\u2500\u2500 restaurant\n\u2502   \u2502 \u251c\u2500\u2500 Restaurant.css\n\u2502   \u2502 \u2514\u2500\u2500 Restaurant.jsx\n\u2502   \u2514\u2500\u2500 search\n\u2502       \u2514\u2500\u2500 Search.jsx\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 logo.svg\n\u251c\u2500\u2500 serviceWorker.js\n\u2514\u2500\u2500 setupTests.js\n```", "```js\nimport React from 'react'\nimport { Button, Card } from 'react-bootstrap'\nimport Database from '../database/database'\n\nimport './Restaurant.css'\n\nexport default class Restaurant extends React.Component {\n constructor() {\n   super();\n\n   this.saveRestaurant = this.saveRestaurant.bind(this)\n }\n\n saveRestaurant(e) {\n   const { restaurant } = this.props\n\n   Database.ref(`/restaurants/${restaurant.id}`).set({\n     ...restaurant\n   })\n }\n\n render() {\n   const { restaurant } = this.props\n\n   return (\n     <Card>\n       <Card.Img variant=\"top\" src={restaurant.image_url} \n        alt={restaurant.name} />\n       <Card.Body>\n         <Card.Title>{restaurant.name}</Card.Title>\n         {!this.props.saved && <Button variant=\"primary\" \n         onClick={this.saveRestaurant}>Save Restaurant</Button>}\n      </Card.Body>\n     </Card>\n   )\n }\n}\n```", "```js\nsaveRestaurant(e) {\n   const { restaurant } = this.props\n\n   Database.ref(`/restaurants/${restaurant.id}`).set({\n     ...restaurant\n   })\n }\n```", "```js\n{id: \"CO3lm5309asRY7XG5eXNgg\", alias: \"rahi-new-york\", name: \"Rahi\", image_url: \"https://s3-media1.fl.yelpcdn.com/bphoto/rPh_LboeIOiTVeXCuas5jA/o.jpg\", is_closed: false, ...}\nid: \"CO3lm5309asRY7XG5eXNgg\"\nalias: \"rahi-new-york\"\nname: \"Rahi\"\nimage_url: \"https://s3-media1.fl.yelpcdn.com/bphoto/rPh_LboeIOiTVeXCuas5jA/o.jpg\"\nis_closed: false\nurl: \"https://www.yelp.com/biz/rahi-new-york?adjust_creative=-YEyXjz9iO0W5ymAnPt6kA&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=-YEyXjz9iO0W5ymAnPt6kA\"\nreview_count: 448\ncategories: (3) [{...}, {...}, {...}]\nrating: 4.5\ncoordinates: {latitude: 40.7360271, longitude: -74.0005436}\ntransactions: (2) [\"delivery\", \"pickup\"]\nprice: \"$$$\"\nlocation: {address1: \"60 Greenwich Ave\", address2: \"\", address3: null, city: \"New York\", zip_code: \"10011\", ...}\nphone: \"+12123738900\"\ndisplay_phone: \"(212) 373-8900\"\ndistance: 1305.5181202902097\n```", "```js\nDatabase.ref(`/restaurants/${restaurant.id}`).set({\n  ...restaurant\n})\n```", "```js\nimport React from 'react'\nimport { Button } from 'react-bootstrap'\nimport Restaurant from '../restaurant/Restaurant'\n\nexport default class Search extends React.Component {\n constructor() {\n   super()\n\n   this.state = {\n     businesses: []\n   }\n```", "```js\n   if (navigator.geolocation) {\n     navigator.geolocation.getCurrentPosition((position) => {\n       this.setState({\n         lng: position.coords.longitude,\n         lat: position.coords.latitude\n       })\n     })\n\n   } else {\n     this.setState({\n       lng: null,\n       lat: null\n     })\n   }\n\n   this.search = this.search.bind(this)\n   this.handleChange = this.handleChange.bind(this)\n }\n\n handleChange(e) {\n   this.setState({\n     val: e.target.value\n   })\n }\n\n```", "```js\n search(event) {\n   const { lng, lat, val } = this.state\n\n   fetch(`http://localhost:3000/businesses/search?\n   value=${val}&lat=${lat}&lng=${lng}`)\n     .then(data => data.json())\n     .then(data => this.handleSearchResults(data))\n }\n\n handleSearchResults(data) {\n   this.setState({\n     businesses: data.businesses\n   })\n }\n\n render() {\n   const { businesses } = this.state\n\n   return (\n     <>\n       <h2>Enter a type of cuisine: <input type=\"text\" onChange=\n       {this.handleChange} /> <Button id=\"search\" onClick={this.search}>\n       Search!</Button></h2>\n       <div className=\"card-columns\">\n         {\n           businesses.length > 0 ? (\n             businesses.map((restaurant, i) => (\n               <Restaurant restaurant={restaurant} key={i} />\n             ))\n           ) : <p>No results</p>\n         }\n       </div>\n     </>\n   )\n }\n}\n```", "```js\nimport React from 'react'\nimport Database from '../database/database'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Search from '../search/Search'\nimport Restaurant from '../restaurant/Restaurant'\n\n```", "```js\nexport default class Finder extends React.Component {\n constructor() {\n   super()\n\n   this.state = {\n     restaurants: []\n   }\n\n   this.getRestaurants = this.getRestaurants.bind(this)\n }\n\n componentDidMount() {\n   this.getRestaurants()\n }\n```", "```js\n getRestaurants() {\n\n   Database.ref('/restaurants').on('value', (snapshot) => {\n     const restaurants = []\n\n     const data = snapshot.val()\n\n     for(let restaurant in data) {\n       restaurants.push(data[restaurant])\n     }\n     this.setState({\n       restaurants: restaurants\n     })\n   })\n }\n```", "```js\n render() {\n\n   const { restaurants } = this.state\n   return (\n     <>\n       <h1>Let's find some restaurants!</h1>\n\n       <Tabs defaultActiveKey=\"search\" id=\"restaurantsearch\">\n         <Tab eventKey=\"search\" title=\"Search!\">\n           <Search handleSearchResults={this.handleSearchResults} \n        />\n         </Tab>\n         <Tab eventKey=\"saved\" title=\"Saved!\">\n           <div className=\"card-columns\">\n             {\n               restaurants.length > 0 ? (\n                 restaurants.map((restaurant, i) => (\n                   <Restaurant restaurant={restaurant} saved={true} \n                    key={i} />\n                 ))\n               ) : <p>No saved restaurants</p>\n             }\n           </div>\n         </Tab>\n       </Tabs>\n     </>\n   )\n }\n}\n```"]