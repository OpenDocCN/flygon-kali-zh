- en: Smart Agriculture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能农业
- en: In this chapter, we are going to take our framework which we built in [Chapter
    2](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee), *IoTFW.js - I* and [Chapter
    3](part0072.html#24L8G0-ce91715363d04669bca1c1545beb57ee), *IoTFW.js - II,* and
    start working on various use cases. We are going to start with the agricultural
    sector and build a smart weather station in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们在[第2章](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee)中构建的框架，*IoTFW.js
    - I*和[第3章](part0072.html#24L8G0-ce91715363d04669bca1c1545beb57ee)，*IoTFW.js -
    II*，并开始处理各种用例。我们将从农业领域开始，在本章中建立一个智能气象站。
- en: 'A simple requirement for any farmer is to have the ability to understand the
    environmental factors near and around their farm. So, we are going to build a
    prototype of a portable weather station. We are going to work on the following
    topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 任何农民的一个简单要求是能够了解他们农场附近和周围的环境因素。因此，我们将建立一个便携式气象站的原型。在本章中，我们将研究以下主题：
- en: Agriculture and IoT
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 农业和物联网
- en: Designing a smart weather station
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计智能气象站
- en: Developing the code for Raspberry Pi 3
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Raspberry Pi 3开发代码
- en: Updating MQTT code in the API engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在API引擎中更新MQTT代码
- en: Modifying the templates for web apps, desktop apps, and mobile apps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改Web应用程序、桌面应用程序和移动应用程序的模板
- en: Agriculture and IoT
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 农业和物联网
- en: 'A report by Beecham Research predicts that the world population will reach
    8 billion by 2025 and 9.6 billion by 2050, and in order to keep pace, food production
    must increase by 70% by 2050\. Here is the report: [https://www.beechamresearch.com/files/BRL%20Smart%20Farming%20Executive%20Summary.pdf](https://www.beechamresearch.com/files/BRL%20Smart%20Farming%20Executive%20Summary.pdf)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Beecham Research的一份报告预测，到2025年，全球人口将达到80亿，到2050年将达到96亿，为了跟上步伐，到2050年，粮食产量必须增加70%。这是报告：[https://www.beechamresearch.com/files/BRL%20Smart%20Farming%20Executive%20Summary.pdf](https://www.beechamresearch.com/files/BRL%20Smart%20Farming%20Executive%20Summary.pdf)
- en: This means that we need to find quicker and more productive ways of farming.
    Land and resources are going to get scarcer as we keep moving toward 2050\. This
    is when, given the resources, we would need to feed more mouths than ever before,
    unless a zombie apocalypse comes and all of us get eaten up by other zombies!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们需要找到更快更有效的耕作方式。随着我们不断朝着2050年迈进，土地和资源将变得更加稀缺。这是因为，如果有资源的话，我们需要喂饱比以往任何时候都更多的人，除非有僵尸启示录发生，我们所有人都被其他僵尸吃掉！
- en: This is a very good opportunity for technology to provide solutions to make
    this happen. IoT has almost always been about smart homes, smart offices, and
    convenience, but it can do more than that. That is what we are going to cover
    in this chapter. We are going to build a smart weather station that a farmer can
    deploy in their farm to get real-time metrics such as temperature, humidity, soil
    moisture, and rain detection.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是技术提供解决方案的一个很好的机会。物联网几乎一直是关于智能家居、智能办公室和便利性，但它可以做得更多。这就是我们将在本章中涵盖的内容。我们将建立一个智能气象站，农民可以在他们的农场部署，以获取实时的温度、湿度、土壤湿度和雨水检测等指标。
- en: Other sensors can be added based on availability and need.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 其他传感器可以根据可用性和需求进行添加。
- en: Designing a smart weather station
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计智能气象站
- en: 'Now that we have an idea of what we are building and why, let us get started
    with the design. The first thing we are going to do is identify the sensors needed.
    In this smart weather station, we are going to use the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道我们要构建什么以及为什么，让我们开始设计。我们要做的第一件事是确定所需的传感器。在这个智能气象站中，我们将使用以下传感器：
- en: A temperature sensor
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度传感器
- en: A humidity sensor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 湿度传感器
- en: A soil moisture sensor
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 土壤湿度传感器
- en: A rain detector sensor
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雨水检测传感器
- en: I have picked sensors that are available off the shelf, to showcase the proof
    of concept. Most of them will work well for testing, and validating an idea, or
    as a hobby, but are not suitable for production.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了现成的传感器，以展示概念的证明。它们中的大多数对于测试和验证想法或作为爱好来说都很好，但不适合生产。
- en: 'We are going to connect these sensors to our Raspberry Pi 3\. We are going
    to use the following models for the sensors:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这些传感器连接到我们的Raspberry Pi 3上。我们将使用以下型号的传感器：
- en: 'Temperature and humidity: [https://www.amazon.com/Gowoops-Temperature-Humidity-Digital-Raspberry/dp/B01H3J3H82/ref=sr_1_5](https://www.amazon.com/Gowoops-Temperature-Humidity-Digital-Raspberry/dp/B01H3J3H82/ref=sr_1_5)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度和湿度：[https://www.amazon.com/Gowoops-Temperature-Humidity-Digital-Raspberry/dp/B01H3J3H82/ref=sr_1_5](https://www.amazon.com/Gowoops-Temperature-Humidity-Digital-Raspberry/dp/B01H3J3H82/ref=sr_1_5)
- en: 'Soil moisture sensor: [https://www.amazon.com/Hygrometer-Humidity-Detection-Moisture-Arduino/dp/B01FDGUHBM/ref=sr_1_4](https://www.amazon.com/Hygrometer-Humidity-Detection-Moisture-Arduino/dp/B01FDGUHBM/ref=sr_1_4)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 土壤湿度传感器：[https://www.amazon.com/Hygrometer-Humidity-Detection-Moisture-Arduino/dp/B01FDGUHBM/ref=sr_1_4](https://www.amazon.com/Hygrometer-Humidity-Detection-Moisture-Arduino/dp/B01FDGUHBM/ref=sr_1_4)
- en: 'Rain detector sensor: [https://www.amazon.com/Uxcell-a13082300ux1431-Rainwater-Detection-3-3V-5V/dp/B00GN7O7JE](https://www.amazon.com/Uxcell-a13082300ux1431-Rainwater-Detection-3-3V-5V/dp/B00GN7O7JE)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雨水检测传感器：[https://www.amazon.com/Uxcell-a13082300ux1431-Rainwater-Detection-3-3V-5V/dp/B00GN7O7JE](https://www.amazon.com/Uxcell-a13082300ux1431-Rainwater-Detection-3-3V-5V/dp/B00GN7O7JE)
- en: You can buy these sensors elsewhere as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在其他地方购买这些传感器。
- en: As we have seen in [Chapter 3](https://cdp.packtpub.com/b07286advancediotwithjavascripteas/wp-admin/post.php?post=266&action=edit#post_235),
    *IoTFW.js - II*, the temperature and humidity sensor is a digital sensor, and
    we are going to use the `node-dht-sensor` module to read the temperature and humidity
    values. The soil moisture sensor is an analog sensor, and Raspberry Pi 3 does
    not have any analog pins. For this, we are going to use a 12-bit A/D IC from Microchip
    named MCP3208, to convert the analog output from the sensor and feed it to Raspberry
    Pi over the SPI protocol.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](https://cdp.packtpub.com/b07286advancediotwithjavascripteas/wp-admin/post.php?post=266&action=edit#post_235)中看到的，温度和湿度传感器是数字传感器，我们将使用`node-dht-sensor`模块来读取温度和湿度值。土壤湿度传感器是模拟传感器，而Raspberry
    Pi 3没有任何模拟引脚。因此，我们将使用Microchip的MCP3208 12位A/D IC，将传感器的模拟输出转换为数字，并通过SPI协议传输到Raspberry
    Pi。
- en: 'Wikipedia defines the SPI protocol in the following way:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科对SPI协议的定义如下：
- en: 'The **Serial Peripheral Interface** (**SPI**) bus is a synchronous serial communication
    interface specification used for short distance communication, primarily in embedded
    systems. The interface was developed by Motorola in the late 1980s and has become
    a de facto standard.For more information on SPI, refer to: [https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**串行外围接口**（**SPI**）总线是一种用于短距离通信的同步串行通信接口规范，主要用于嵌入式系统。该接口是由Motorola在20世纪80年代后期开发的，并已成为事实上的标准。有关SPI的更多信息，请参阅：[https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus)。'
- en: The rain detector sensor can be read as both analog and digital. We are going
    to use the analog output to detect the level of rain, and not just whether it
    is raining or not.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 雨水检测传感器可以被读取为模拟和数字信号。我们将使用模拟输出来检测雨水的级别，而不仅仅是是否下雨。
- en: 'Going back to MCP3208, it is a 16-pin package that can read eight analog inputs
    at once and can convert them and feed to Raspberry Pi over the SPI protocol. You
    can read more about MCP3208 IC here: [`http://ww1.microchip.com/downloads/en/DeviceDoc/21298c.pdf`](http://ww1.microchip.com/downloads/en/DeviceDoc/21298c.pdf).
    You can purchase it from here: [https://www.amazon.com/Adafruit-MCP3008-8-Channel-Interface-Raspberry/dp/B00NAY3RB2/ref=sr_1_1](https://www.amazon.com/Adafruit-MCP3008-8-Channel-Interface-Raspberry/dp/B00NAY3RB2/ref=sr_1_1).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 回到MCP3208，它是一个16引脚封装，可以同时读取八个模拟输入，并可以将它们转换并通过SPI协议馈送到树莓派。您可以在这里阅读更多关于MCP3208
    IC的信息：[`http://ww1.microchip.com/downloads/en/DeviceDoc/21298c.pdf`](http://ww1.microchip.com/downloads/en/DeviceDoc/21298c.pdf)。您可以从这里购买：[https://www.amazon.com/Adafruit-MCP3008-8-Channel-Interface-Raspberry/dp/B00NAY3RB2/ref=sr_1_1](https://www.amazon.com/Adafruit-MCP3008-8-Channel-Interface-Raspberry/dp/B00NAY3RB2/ref=sr_1_1)。
- en: We are going to connect the temperature and humidity sensor directly to Raspberry
    Pi 3, and the moisture sensor and the rain sensor to MCP3208, and MCP3208 will
    connect to Raspberry Pi 3 over SPI.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接将温度和湿度传感器连接到树莓派3，将湿度传感器和雨水传感器连接到MCP3208，然后将MCP3208通过SPI连接到树莓派3。
- en: And on the broker, we are not going to change anything. In the API engine, we
    are going to add a new topic to the MQTT client named `weather-status`, and then
    send the data from Raspberry Pi 3 to this topic.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在代理上，我们不打算改变任何东西。在API引擎中，我们将向MQTT客户端添加一个名为`weather-status`的新主题，然后将来自树莓派3的数据发送到这个主题。
- en: On the web app, we are going to update the template for viewing the weather
    metrics. The same goes for the desktop app and mobile app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，我们将更新用于查看天气指标的模板。桌面应用程序和移动应用程序也是如此。
- en: Setting up Raspberry Pi 3
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置树莓派3
- en: Let us get started with the schematics.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始制作原理图。
- en: 'Set up Raspberry Pi 3 and the sensors as shown here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 设置树莓派3和传感器如下所示：
- en: '![](../images/00054.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00054.jpeg)'
- en: 'Here is a table showing these connections:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个显示这些连接的表格：
- en: Raspberry Pi and MCP3208
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树莓派和MCP3208
- en: 'Refer to the following table:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下表格：
- en: '| **Raspberry Pi pin number - pin name** | **MCP3208 pin number - pin name**
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **树莓派引脚编号 - 引脚名称** | **MCP3208引脚编号 - 引脚名称** |'
- en: '| 1 - 3.3V | 16 - VDD |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 1 - 3.3V | 16 - VDD |'
- en: '| 1 - 3.3V | 15 - AREF |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 1 - 3.3V | 15 - AREF |'
- en: '| 6 - GND | 14 - AGND |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 6 - GND | 14 - AGND |'
- en: '| 23 - GPIO11, SPI0_SCLK | 13 - CLK |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 23 - GPIO11, SPI0_SCLK | 13 - CLK |'
- en: '| 21 - GPIO09, SPI0_MISO | 12 - DOUT |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 21 - GPIO09, SPI0_MISO | 12 - DOUT |'
- en: '| 19 -GPIO10, SPI0_MOSI | 11 - DIN |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 19 -GPIO10, SPI0_MOSI | 11 - DIN |'
- en: '| 24 - GPIO08, CEO | 10 - CS |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 24 - GPIO08, CEO | 10 - CS |'
- en: '| 6 - GND | 9 - DGND |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 6 - GND | 9 - DGND |'
- en: Moisture sensor and MCP3208
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 湿度传感器和MCP3208
- en: 'Refer to the following table:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下表格：
- en: '| **MCP3208 pin number - pin name** | **Sensor name** - **pin number** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **MCP3208引脚编号 - 引脚名称** | **传感器名称** - **引脚编号** |'
- en: '| 1 - A0 | Rain sensor - A0 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 1 - A0 | 雨水传感器 - A0 |'
- en: '| 2 - A1 | Moisture sensor - A0 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 2 - A1 | 湿度传感器 - A0 |'
- en: Raspberry Pi and DHT11
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树莓派和DHT11
- en: 'Refer to the following table:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下表格：
- en: '| **Raspberry Pi number - pin name** | **Sensor name** - **pin number** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **树莓派编号 - 引脚名称** | **传感器名称** - **引脚编号** |'
- en: '| 3 - GPIO2 | DHT11 - Data |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 3 - GPIO2 | DHT11 - Data |'
- en: All grounds and all 3.3V are connected to a common point.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有接地和所有3.3V都连接到一个公共点。
- en: Once we have connected the sensors as shown previously, we will write the code
    needed to interface with the sensors.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们按照之前显示的方式连接了传感器，我们将编写所需的代码来与传感器进行接口。
- en: Before we go further, we are going to copy the entire [Chapter 2](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee),
    *IoTFW.js - I*, and [Chapter 3](part0072.html#24L8G0-ce91715363d04669bca1c1545beb57ee),
    *IoTFW.js - II*, code into another folder named `chapter4`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们将把整个[第2章](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee)，*IoTFW.js
    - I*，和[第3章](part0072.html#24L8G0-ce91715363d04669bca1c1545beb57ee)，*IoTFW.js -
    II*，的代码复制到另一个名为`chapter4`的文件夹中。
- en: 'The `chapter4` folder should look as shown here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`chapter4`文件夹应该如下所示：'
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will head back to the Raspberry Pi and inside the `pi-client` folder, we
    will update the `index.js` file. Update `pi-client/index.js`, as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将返回到树莓派，并在`pi-client`文件夹中更新`index.js`文件。更新`pi-client/index.js`，如下所示：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we have left the MQTT setup as is. We have added the
    `mcp-adc` ([https://github.com/anha1/mcp-adc](https://github.com/anha1/mcp-adc))
    and `async` ([https://github.com/caolan/async](https://github.com/caolan/async))
    modules. `mcp-adc` manages the SPI protocol interface exposed by MCP3208, and
    we are using the `async` module to read data from all sensors in parallel.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们保留了MQTT设置。我们添加了`mcp-adc`（[https://github.com/anha1/mcp-adc](https://github.com/anha1/mcp-adc)）和`async`（[https://github.com/caolan/async](https://github.com/caolan/async)）模块。`mcp-adc`管理MCP3208暴露的SPI协议接口，我们使用`async`模块并行读取所有传感器的数据。
- en: We have started off by establishing a connection with the broker over MQTTS.
    Then, we have set up an infinite loop using `setInterval()` with a time delay
    of 3 seconds between executions. Inside the `callback` of `setInterval()`, we
    have invoked `readSensorValues()` to get the latest sensor values.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过MQTTS与代理建立连接。然后，我们使用`setInterval()`设置了一个间隔为3秒的无限循环。在`setInterval()`的`callback`中，我们调用`readSensorValues()`来获取最新的传感器数值。
- en: '`readSensorValues()` uses `async.parallel()` to read the three sensors in parallel
    and update the data in the global variables we have defined. Once all the sensor
    data is gathered, we are passing the results to the `callback` function as an
    argument.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`readSensorValues()`使用`async.parallel()`并行读取三个传感器的数据，并更新我们定义的全局变量中的数据。一旦收集到所有传感器数据，我们将结果作为参数传递给`callback`函数。'
- en: Once we receive the sensor data, we are going to check whether something has
    changed between the temperature, humidity, rain, and moisture values. If nothing
    has changed, we chill; otherwise, we will publish this data to the broker on the
    weather-status topic.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收到传感器数据，我们将检查温度、湿度、雨量和湿度数值之间是否有变化。如果没有变化，我们就放松；否则，我们将把这些数据发布到天气状态主题的代理上。
- en: 'Save all the files. Now, we will start the Mosca broker from our desktop machine:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件。现在，我们将从我们的桌面机器上启动Mosca代理：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once you have started the Mosca server, check the IP address of the server on
    which Mosca is running. Update the same IP in your Raspberry Pi `config.js` file.
    Otherwise, Raspberry Pi cannot post data to the broker.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启动了Mosca服务器，请检查Mosca运行的服务器的IP地址。在树莓派的`config.js`文件中更新相同的IP。否则，树莓派无法将数据发布到代理。
- en: 'Once Mosca has started successfully and we have validated the IP, run this
    on Raspberry Pi:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Mosca成功启动并且我们已经验证了IP，就在树莓派上运行这个：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will start the server, and we should see the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动服务器，我们应该看到以下内容：
- en: '![](../images/00055.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00055.jpeg)'
- en: When I started the Raspberry Pi, the rain sensor was dry and the moisture sensor
    was placed inside dry soil. Initially, the value of the rain sensor was `1.86%`
    and the moisture sensor value was `4.57%`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我启动树莓派时，雨传感器是干的，湿度传感器被放置在干燥的土壤中。最初，雨传感器的值为`1.86%`，湿度传感器的值为`4.57%`。
- en: When I added water to the plant/moisture sensor, the percentage increased to
    `98.83%`; similarly, when I simulated rainfall on the rain sensor, the value went
    up to `89.48%`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我向植物/湿度传感器添加水时，百分比增加到`98.83%`；同样，当我在雨传感器上模拟降雨时，数值上升到`89.48%`。
- en: 'Here is my prototype setup of the smart weather station:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我智能气象站的原型设置：
- en: '![](../images/00056.jpeg)![](../images/00057.jpeg)![](../images/00058.jpeg)![](../images/00059.jpeg)The
    blue chip is DHT11, the moisture sensor is plotted inside my desk-side plant,
    and the rain sensor is placed inside a plastic tray for collecting rainwater.
    The breadboard has the MCP3208 IC and the required connections.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00056.jpeg)![](../images/00057.jpeg)![](../images/00058.jpeg)![](../images/00059.jpeg)蓝色芯片是DHT11，湿度传感器被放置在我的桌边植物中，雨传感器被放置在一个塑料托盘中，用于收集雨水。面包板上有MCP3208
    IC和所需的连接。'
- en: Lots of wires!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 很多电线！
- en: With this, we complete the code needed for Raspberry Pi 3\. In the next section,
    we are going to set up the code needed for the API engine.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了树莓派3所需的代码。在下一节中，我们将设置API引擎所需的代码。
- en: Setting up the API engine
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置API引擎
- en: In this last section, we have seen how to set up the components and code needed
    to set up our smart weather station using Raspberry Pi 3\. Now, we will work on
    managing the data that we receive on the API engine from the Raspberry Pi 3.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们已经看到了如何设置组件和代码，以便使用树莓派3建立智能气象站。现在，我们将致力于管理从树莓派3接收的数据的API引擎。
- en: 'Open `api-engine/server/mqtt/index.js` and update it, as shown here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`api-engine/server/mqtt/index.js`并更新，如下所示：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we are waiting for a message on the `weather-status` topic, and when we
    receive the data from the Raspberry Pi, we save it to our database and that pushes
    the data to the web app, mobile app, and desktop app.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在等待`weather-status`主题上的消息，当我们从树莓派接收到数据时，我们将其保存到我们的数据库，并将数据推送到Web应用程序、移动应用程序和桌面应用程序。
- en: Those are all the changes we need to make to absorb the data from the Raspberry
    Pi 3 and pass it on to the web, desktop, and mobile apps.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们需要做的所有更改，以吸收来自树莓派3的数据并传递给Web、桌面和移动应用程序。
- en: 'Save all the files and run the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并运行以下代码：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will start the API engine and connect to Mosca, along with Raspberry Pi:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动API引擎并连接到Mosca，以及树莓派：
- en: '![](../images/00060.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00060.jpeg)'
- en: 'And if we leave the API engine running for a while, we should see the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们让API引擎运行一段时间，我们应该会看到以下内容：
- en: '![](../images/00061.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00061.jpeg)'
- en: The data from the device is logged here.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的数据在这里记录。
- en: In the next section, we are going to update the web app so it can represent
    the data from the API engine.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更新Web应用程序，以便表示来自API引擎的数据。
- en: Setting up the web app
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Web应用程序
- en: Now that we are done with the API engine, we are going to develop the interface
    needed to show the weather output from the Raspberry Pi 3.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了API引擎，我们将开发所需的界面，以显示来自树莓派3的天气输出。
- en: 'Open `web-app/src/app/device/device.component.html` and update it, as shown
    here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`web-app/src/app/device/device.component.html`并更新，如下所示：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we have added four rows in a table that displays temperature,
    humidity, rain level, and moisture level. We have also set up the canvas to display
    the values in the chart.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们在表中添加了四行，显示温度、湿度、雨量和湿度等级。我们还设置了画布来显示图表中的数值。
- en: 'Next is the class definition for `DeviceComponent`, present in `web-app/src/app/device/device.component.ts`.
    Update `web-app/src/app/device/device.component.ts`, as shown here:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`DeviceComponent`的类定义，位于`web-app/src/app/device/device.component.ts`中。按照下面的示例更新`web-app/src/app/device/device.component.ts`：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, we have used the `ngOnInit` hook and have made a request
    to get the device data. Using `socketInit()`, along with the data, we are going
    to register for socket data events for the current device.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用了`ngOnInit`钩子，并发出请求以获取设备数据。使用`socketInit()`，连同数据，我们将为当前设备注册套接字数据事件。
- en: In `getData()`, we fetch the data from the server, extract the latest record,
    and set it to the `lastRecord` property. And finally, we call `genChart()` to
    draw a chart.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getData()`中，我们从服务器获取数据，提取最新记录，并将其设置为`lastRecord`属性。最后，我们调用`genChart()`来绘制图表。
- en: 'Now, we are done with the required changes. Save all the files and run the
    following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了所需的更改。保存所有文件并运行以下命令：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we navigate to `http://localhost:4200`, log in, and click on VIEW **DEVICE**,
    we should see the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到`http://localhost:4200`，登录，并点击**DEVICE**，我们应该看到以下内容：
- en: '![](../images/00062.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00062.jpeg)'
- en: Whenever there is change in the data, we should see the UI update automatically.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 每当数据发生变化时，我们应该看到UI会自动更新。
- en: In the next section, we are going to build the same app and show it inside the
    electron shell.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将构建相同的应用程序并在电子外壳中显示它。
- en: Setting up the desktop app
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置桌面应用程序
- en: In the last section, we developed the template and interface for the web app.
    In this section, we are going to build the same thing and dump it inside the desktop
    app.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们为Web应用程序开发了模板和界面。在本节中，我们将构建相同的内容并将其放入桌面应用程序中。
- en: 'To get started, head back to the terminal/prompt of the `web-app` folder, and
    run the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请返回到`web-app`文件夹的终端/提示符，并运行以下命令：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will create a new folder inside the `web-app` folder named `dist`. The
    contents of the `dist` folder should consist of:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`web-app`文件夹内创建一个名为`dist`的新文件夹。`dist`文件夹的内容应包括：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'All the code we have written is finally bundled into the preceding files. We
    will grab all the files (not the `dist` folder) present inside the `dist` folder
    and then paste them inside the `desktop-app/app` folder. The final structure of
    desktop-app after the preceding changes will be as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的所有代码最终都打包到了上述文件中。我们将获取`dist`文件夹内的所有文件（而不是`dist`文件夹），然后将它们粘贴到`desktop-app/app`文件夹内。在进行上述更改后，桌面应用程序的最终结构将如下所示：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To test drive the process, run the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试该过程，请运行以下命令：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Navigate to the VIEW **DEVICE** page, and we should see the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到**DEVICE**页面，我们应该看到以下内容：
- en: '![](../images/00063.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00063.jpeg)'
- en: Whenever there is a change in the data, we should see the UI update automatically.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 每当数据发生变化时，我们应该看到UI会自动更新。
- en: With this, we are done with the development of the desktop app. In the next
    section, we will update the mobile app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了桌面应用程序的开发。在下一节中，我们将更新移动应用程序。
- en: Setting up the mobile app
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置移动应用程序
- en: In the last section, we saw how to build and run the desktop app for the smart
    weather station. In this section, we are going to update the template of the mobile
    app to show the weather station data.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看到了如何为智能气象站构建和运行桌面应用程序。在本节中，我们将更新移动应用程序的模板，以显示气象站数据。
- en: 'Open `mobile-app/src/pages/view-device/view-device.html` and update it, as
    shown here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`mobile-app/src/pages/view-device/view-device.html`并更新它，如下所示：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding code, we have created four items inside the list view to display
    the temperature, humidity, rain level, and moisture level. And the required logic
    for `ViewDevicePage` class would be present in `mobile-app/src/pages/view-device/view-device.ts`.
    Update `mobile-app/src/pages/view-device/view-device.ts`, as shown here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们在列表视图中创建了四个项目，用于显示温度、湿度、降雨量和湿度水平。`ViewDevicePage`类的所需逻辑将存在于`mobile-app/src/pages/view-device/view-device.ts`中。按照下面所示更新`mobile-app/src/pages/view-device/view-device.ts`：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code, we are getting the latest data from the API engine using
    `getData()`. Then, using `socketInit()`, we are subscribing to the latest changes
    to the data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`getData()`从API引擎获取最新数据。然后，使用`socketInit()`，我们订阅了数据的最新更改。
- en: Check the IP address of the server on which the API engine is running. Update
    the same IP in your mobile app's `mobile-app/src/app/app.globals.ts` file. Otherwise,
    the mobile app cannot communicate with the API engine.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 检查API引擎运行的服务器的IP地址。在移动应用程序的`mobile-app/src/app/app.globals.ts`文件中更新相同的IP。否则，移动应用程序无法与API引擎通信。
- en: 'Now, save all the files and run the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存所有文件并运行以下命令：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or, you can deploy the same to your device as well, by running the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以通过运行以下命令将其部署到您的设备上：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Or
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once the app is launched, and when we navigate to the VIEW **DEVICE** page,
    we should see the following on our screen:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动后，当我们导航到**DEVICE**页面时，我们应该在屏幕上看到以下内容：
- en: '![](../images/00064.gif)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00064.gif)'
- en: As we can see from the image, we are able to view the data updating in real
    time.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从图像中可以看出，我们能够实时查看数据更新。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we used the knowledge we gained in chapters two and three and
    built a prototype of a smart weather station. We started by identifying the sensors
    needed to build the weather station. Next, we set them up on the Raspberry Pi
    3\. We wrote the code needed to interface with the sensors. Once this was done,
    we updated the API engine to read the data from the Raspberry Pi 3 on the new
    topic. Once the API engine received the data, we saved it in the database and
    then sent it to the web, desktop, and mobile apps over web-sockets. Finally, we
    updated the presentation templates on the web, desktop, and mobile apps; then,
    we displayed the data from the Raspberry Pi on the web, desktop, and mobile apps.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们利用了第二章和第三章中所学到的知识，构建了智能气象站的原型。我们首先确定了构建气象站所需的传感器。接下来，我们在树莓派3上设置了它们。我们编写了与传感器进行接口的所需代码。完成这些工作后，我们更新了API引擎，以从树莓派3上的新主题读取数据。一旦API引擎接收到数据，我们就将其保存在数据库中，然后通过Web套接字将其发送到Web、桌面和移动应用程序。最后，我们更新了Web、桌面和移动应用程序上的演示模板；然后，我们在Web、桌面和移动应用程序上显示了来自树莓派的数据。
- en: In [Chapter 5](part0095.html#2QJ5E0-ce91715363d04669bca1c1545beb57ee), *Smart
    Agriculture and Voice AI*, we are going to work with voice artificial intelligence,
    using Alexa from Amazon and the smart weather station we built.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0095.html#2QJ5E0-ce91715363d04669bca1c1545beb57ee)中，*智能农业和语音人工智能*，我们将使用亚马逊的Alexa和我们建立的智能气象站来进行语音人工智能的工作。
