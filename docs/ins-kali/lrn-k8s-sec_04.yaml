- en: '*Chapter 3*: Threat Modeling'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章*：威胁建模'
- en: Kubernetes is a large ecosystem comprising multiple components such as `kube-apiserver`,
    `etcd`, `kube-scheduler`, `kubelet`, and more. In the first chapter, we highlighted
    the basic functionality of different Kubernetes components. In the default configuration,
    interactions between Kubernetes components result in threats that developers and
    cluster administrators should be aware of. Additionally, deploying applications
    in Kubernetes introduces new entities that the application interacts with, adding
    new threat actors and attack surfaces to the threat model of the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个庞大的生态系统，包括多个组件，如`kube-apiserver`、`etcd`、`kube-scheduler`、`kubelet`等。在第一章中，我们强调了不同Kubernetes组件的基本功能。在默认配置中，Kubernetes组件之间的交互会导致开发人员和集群管理员应该意识到的威胁。此外，在Kubernetes中部署应用程序会引入应用程序与之交互的新实体，为应用程序的威胁模型增加新的威胁行为者和攻击面。
- en: In this chapter, we will start with a brief introduction to threat modeling
    and discuss component interactions within the Kubernetes ecosystem. We will look
    at the threats in the default Kubernetes configuration. Finally, we will talk
    about how threat modeling an application in the Kubernetes ecosystem introduces
    additional threat actors and attack surfaces.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从简要介绍威胁建模开始，讨论Kubernetes生态系统内的组件交互。我们将研究默认Kubernetes配置中的威胁。最后，我们将讨论在Kubernetes生态系统中对应用进行威胁建模如何引入额外的威胁行为者和攻击面。
- en: The goal of this chapter is to help you understand that the default Kubernetes
    configuration is not sufficient to protect your deployed application from attackers.
    Kubernetes is a constantly evolving and community-maintained platform, so some
    of the threats that we are going to highlight in this chapter do not have mitigations
    because the severity of the threats varies with every environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是帮助您了解，默认的Kubernetes配置不足以保护您部署的应用免受攻击者的侵害。Kubernetes是一个不断发展和由社区维护的平台，因此本章要突出的一些威胁并没有相应的缓解措施，因为威胁的严重程度会随着每个环境的不同而变化。
- en: 'This chapter aims to highlight the threats in the Kubernetes ecosystem, which
    includes the Kubernetes components and workloads in a Kubernetes cluster, so developers
    and DevOps engineers understand the risks of their deployments and have a risk
    mitigation plan in place for the known threats. In this chapter, we will cover
    the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在突出Kubernetes生态系统中的威胁，其中包括Kubernetes集群中的Kubernetes组件和工作负载，以便开发人员和DevOps工程师了解其部署的风险，并制定已知威胁的风险缓解计划。在本章中，我们将涵盖以下主题：
- en: Introduction to threat modeling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 威胁建模介绍
- en: Component interactions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件交互
- en: Threat actors in the Kubernetes environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes环境中的威胁行为者
- en: The Kubernetes components/objects threat model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes组件/对象威胁模型
- en: Threat modeling applications in Kubernetes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kubernetes中对应用程序进行威胁建模
- en: Introduction to threat modeling
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁建模介绍
- en: Threat modeling is a process of analyzing the system as a whole during the design
    phase of the **software development life cycle** (**SDLC**) to identify risks
    to the system proactively. Threat modeling is used to think about security requirements
    early in the development cycle to reduce the severity of risks from the start.
    Threat modeling involves identifying threats, understanding the effects of each
    threat, and finally developing a mitigation strategy for every threat. Threat
    modeling aims to highlight the risks in an ecosystem as a simple matrix with the
    likelihood and impact of the risk and a corresponding risk mitigation strategy
    if it exists.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁建模是在**软件开发生命周期**（**SDLC**）的设计阶段分析系统作为整体，以主动识别系统的风险的过程。威胁建模用于在开发周期的早期考虑安全需求，以从一开始减轻风险的严重性。威胁建模涉及识别威胁，了解每个威胁的影响，最终为每个威胁制定缓解策略。威胁建模旨在将生态系统中的风险突出显示为一个简单的矩阵，其中包括风险的可能性和影响，以及相应的风险缓解策略（如果存在）。
- en: 'After a successful threat modeling session, you''re able to define the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的威胁建模会使您能够定义以下内容：
- en: '**Asset**: A property of an ecosystem that you need to protect.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**资产**：生态系统中需要保护的财产。'
- en: '**Security control**: A property of a system that protects the asset against
    identified risks. These are either safeguards or countermeasures against the risk
    to the asset.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全控制**：系统的属性，用于保护资产免受已识别风险的影响。这些是对资产风险的防护措施或对策。'
- en: '**Threat actor**: A threat actor is an entity or organization including script
    kiddies, nation-state attackers, and hacktivists who exploit risks.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**威胁行为者**：威胁行为者是利用风险的实体或组织，包括脚本小子、国家级攻击者和黑客活动分子。'
- en: '**Attack surface**: The part of the system that the threat actor is interacting
    with. It includes the entry point of the threat actor into the system.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**攻击面**：威胁行为者与系统交互的部分。它包括威胁行为者进入系统的入口点。'
- en: '**Threat**: The risk to the asset.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**威胁**：对资产的风险。'
- en: '**Mitigation**: Mitigation defines how to reduce the likelihood and impact
    of a threat to an asset.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**缓解**：缓解定义了如何减少对资产的威胁的可能性和影响。'
- en: 'The industry usually follows one of the following approaches to threat modeling:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 行业通常遵循以下威胁建模方法之一：
- en: '**STRIDE**: The STRIDE model was published by Microsoft in 1999\. It is an
    acronym for Spoofing, Tampering, Repudiation, Information Disclosure, Denial of
    Service, and Escalation of Privilege. STRIDE models threats to a system to answer
    the question, ''What can go wrong with the system?'''
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STRIDE**：STRIDE模型于1999年由微软发布。它是欺骗、篡改、否认、信息泄露、拒绝服务和特权升级的首字母缩略词。STRIDE模型威胁系统，以回答“系统可能出现什么问题？”的问题。'
- en: '**PASTA**: Process for Attack Simulation and Threat Analysis is a risk-centric
    approach to threat modeling. PASTA follows an attacker-centric approach, which
    is used by the business and technical teams to develop asset-centric mitigation
    strategies.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PASTA**：攻击模拟和威胁分析过程是一种以风险为中心的威胁建模方法。PASTA遵循以攻击者为中心的方法，由业务和技术团队开发以资产为中心的缓解策略。'
- en: '**VAST**: Visual, Agile, and Simple Threat modeling aims to integrate threat
    modeling across application and infrastructure development with SDLC and agile
    software development. It provides a visualization scheme that provides actionable
    outputs to all stakeholders such as developers, architects, security researchers,
    and business executives.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VAST**：Visual, Agile, and Simple Threat modeling旨在将威胁建模整合到应用程序和基础架构开发中，与SDLC和敏捷软件开发相结合。它提供了一种可视化方案，为开发人员、架构师、安全研究人员和业务执行人员提供可操作的输出。'
- en: There are other approaches to threat modeling, but the preceding three are the
    most used within the industry.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁建模还有其他方法，但前面三种是行业内最常用的方法。
- en: Threat modeling can be an infinitely long task if the scope for the threat model
    is not well defined. Before starting to identify threats in an ecosystem, it is
    important that the architecture and workings of each component, and the interactions
    between components, are clearly understood.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果威胁模型的范围没有明确定义，威胁建模可能是一个无限长的任务。在开始识别生态系统中的威胁之前，重要的是清楚地了解每个组件的架构和工作方式，以及组件之间的交互。
- en: In previous chapters, we have already looked in detail at the basic functionality
    of every Kubernetes component. Now, we will look at the interactions between different
    components in Kubernetes before investigating the threats within the Kubernetes
    ecosystem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经详细了解了每个Kubernetes组件的基本功能。现在，我们将在调查Kubernetes生态系统内的威胁之前，先看一下Kubernetes中不同组件之间的交互。
- en: Component interactions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件交互
- en: 'Kubernetes components work collaboratively to ensure the microservices running
    inside the cluster are functioning as expected. If you deploy a microservice as
    a DaemonSet, then the Kubernetes components will make sure there will be one pod
    running the microservice in every node, no more, no less. So what happens behind
    the scenes? Let''s look at a diagram to show the components'' interaction at a
    high level:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes组件共同工作，以确保集群内运行的微服务能够如预期般运行。如果将微服务部署为DaemonSet，则Kubernetes组件将确保每个节点上都有一个运行微服务的pod，不多不少。那么在幕后会发生什么？让我们看一下高层次上组件之间的交互的图表：
- en: '![Figure 3.1 – Interactions between Kubernetes components'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 - Kubernetes组件之间的交互'
- en: '](image/B15566_03_001.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_03_001.jpg)'
- en: Figure 3.1 – Interactions between Kubernetes components
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 - Kubernetes组件之间的交互
- en: 'A quick recap on what these components do:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件的快速回顾：
- en: '**kube-apiserver**: The Kubernetes API server (`kube-apiserver`) is a control
    plane component that validates and configures data for objects.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kube-apiserver：Kubernetes API服务器（`kube-apiserver`）是一个控制平面组件，用于验证和配置对象的数据。
- en: '**etcd**: `etcd` is a high-availability key-value store used to store data
    such as configuration, state, and metadata.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: etcd：`etcd`是一个高可用的键值存储，用于存储配置、状态和元数据等数据。
- en: '**kube-scheduler**: `kube-scheduler` is a default scheduler for Kubernetes.
    It watches for newly created pods and assigns the pods to nodes.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kube-scheduler：`kube-scheduler`是Kubernetes的默认调度程序。它监视新创建的pod，并将pod分配给节点。
- en: '**kube-controller-manager**: The Kubernetes controller manager is a combination
    of the core controllers that watch for state updates and make changes to the cluster
    accordingly.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kube-controller-manager：Kubernetes控制器管理器是一组核心控制器，它们监视状态更新并相应地对集群进行更改。
- en: '**cloud-controller-manager**: The cloud controller manager runs controllers
    to interact with the underlying cloud providers.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cloud-controller-manager：云控制器管理器运行控制器，与底层云提供商进行交互。
- en: '**kubelet**: `kubelet` registers the node with the API server and monitors
    the pods created using Podspecs to ensure that the pods and containers are healthy.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubelet：`kubelet`向API服务器注册节点，并监视使用Podspecs创建的pod，以确保pod和容器健康。
- en: It is worth noting that only `kube-apiserver` communicates with `etcd`. Other
    Kubernetes components such as `kube-scheduler`, `kube-controller-manager`, and
    `cloud-controller manager` interact with `kube-apiserver` running in the master
    nodes in order to fulfill their responsibilities. On the worker nodes, both `kubelet`
    and `kube-proxy` communicate with `kube-apiserver`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，只有`kube-apiserver`与`etcd`通信。其他Kubernetes组件，如`kube-scheduler`、`kube-controller-manager`和`cloud-controller
    manager`与运行在主节点上的`kube-apiserver`进行交互，以履行它们的责任。在工作节点上，`kubelet`和`kube-proxy`都与`kube-apiserver`通信。
- en: 'Let''s use a DaemonSet creation as an example to show how these components
    talk to each other:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以DaemonSet创建为例，展示这些组件如何相互通信：
- en: '![Figure 3.2 – Creating a DaemonSet in Kubernetes'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 - 在Kubernetes中创建DaemonSet'
- en: '](image/B15566_03_002.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_03_002.jpg)'
- en: Figure 3.2 – Creating a DaemonSet in Kubernetes
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 - 在Kubernetes中创建DaemonSet
- en: 'To create a DaemonSet, we use the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个DaemonSet，我们使用以下步骤：
- en: The user sends a request to `kube-apiserver` to create a DaemonSet workload
    via HTTPS.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户通过HTTPS向`kube-apiserver`发送请求以创建DaemonSet工作负载。
- en: After authentication, authorization, and object validation, `kube-apiserver`
    creates the workload object information for the DaemonSet in the `etcd` database.
    Neither data in transit nor at rest is encrypted by default in `etcd`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过身份验证、授权和对象验证后，`kube-apiserver`在`etcd`数据库中为DaemonSet创建工作负载对象信息。默认情况下，`etcd`中的数据在传输和静止状态下都不加密。
- en: The DaemonSet controller watches that a new DaemonSet object is created, and
    then sends a pod creation request to `kube-apiserver`. Note that the DaemonSet
    basically means the microservice will run inside a pod in every node.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DaemonSet控制器监视新的DaemonSet对象的创建，然后向`kube-apiserver`发送pod创建请求。请注意，DaemonSet基本上意味着微服务将在每个节点的pod中运行。
- en: '`kube-apiserver` repeats the actions in *step 2* and creates the workload object
    information for pods in the `etcd` database.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`重复*步骤2*中的操作，并在`etcd`数据库中为pod创建工作负载对象信息。'
- en: '`kube-scheduler` watches as a new pod is created, then decides which node to
    run the pod on based on the node selection criteria. After that, `kube-scheduler`
    sends a request to `kube-apiserver` for which node the pod will be running on.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-scheduler`监视新的pod的创建，然后根据节点选择标准决定在哪个节点上运行该pod。之后，`kube-scheduler`向`kube-apiserver`发送有关pod将在哪个节点上运行的请求。'
- en: '`kube-apiserver` receives the request from `kube-scheduler` and then updates
    `etcd` with the pod''s node assignment information.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`接收来自`kube-scheduler`的请求，然后使用pod的节点分配信息更新`etcd`。'
- en: The `kubelet` running on the worker node watches the new pod that is assigned
    to this node, then sends request to the **Container Runtime Interface** (**CRI**)
    components, such as Docker, to start a container. After that, the `kubelet` will
    send the pod's status back to `kube-apiserver`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行在工作节点上的`kubelet`监视分配给该节点的新pod，然后向**容器运行时接口**（**CRI**）组件（如Docker）发送请求以启动容器。之后，`kubelet`将pod的状态发送回`kube-apiserver`。
- en: '`kube-apiserver` receives the pod''s status information from the `kubelet`
    on the target node, then updates the `etcd` database with the pod status.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`从目标节点上的`kubelet`接收pod的状态信息，然后更新`etcd`数据库中的pod状态。'
- en: Once the pods (from the DaemonSet) are created, the pods are able to communicate
    with other Kubernetes components and the microservice should be up and running.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了（来自DaemonSet的）pod，这些pod就能够与其他Kubernetes组件进行通信，微服务应该已经启动并运行。
- en: Note that *not* all communication between components is secure by default. It
    depends on the configuration of those components. We will cover this in more detail
    in [*Chapter 6*](B15566_06_Final_ASB_ePub.xhtml#_idTextAnchor170), *Securing Cluster
    Components*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有组件之间的通信都默认安全。这取决于这些组件的配置。我们将在[*第6章*](B15566_06_Final_ASB_ePub.xhtml#_idTextAnchor170)中更详细地介绍这一点，*保护集群组件*。
- en: Threat actors in Kubernetes environments
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes环境中的威胁行为者
- en: 'A threat actor is an entity or code executing in the system that the asset
    should be protected from. From a defense standpoint, you first need to understand
    who your potential enemies are, or your defense strategy will be too vague. Threat
    actors in Kubernetes environments can be broadly classified into three categories:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁行为者是系统中执行的应该受到保护的资产的实体或代码。从防御的角度来看，你首先需要了解你的潜在敌人是谁，否则你的防御策略将太模糊。Kubernetes环境中的威胁行为者可以大致分为三类：
- en: '**End user**: An entity that can connect to the application. The entry point
    for this actor is usually the load balancer or ingress. Sometimes, pods, containers,
    or NodePorts may be directly exposed to the internet, adding more entry points
    for the end user.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端用户：可以连接到应用程序的实体。该参与者的入口点通常是负载均衡器或入口。有时，Pod、容器或NodePorts可能直接暴露在互联网上，为终端用户增加了更多的入口点。
- en: '**Internal attacker**: An entity that has limited access inside the Kubernetes
    cluster. Malicious containers or pods spawned within the cluster are examples
    of internal attackers.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内部攻击者：在Kubernetes集群内部具有有限访问权限的实体。集群内生成的恶意容器或Pod是内部攻击者的示例。
- en: '**Privileged attacker**: An entity that has administrator access inside the
    Kubernetes cluster. Infrastructure administrators, compromised `kube-apiserver`
    instances, and malicious nodes are all examples of privileged attackers.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特权攻击者：在Kubernetes集群内部具有管理员访问权限的实体。基础设施管理员、被 compromise 的`kube-apiserver`实例和恶意节点都是特权攻击者的示例。
- en: Examples of threat actors include script kiddies, hacktivists, and nation-state
    actors. All these actors fall into the three aforementioned categories, depending
    on where in the system the actor exists.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁参与者的示例包括脚本小子、骇客活动分子和国家行为者。所有这些参与者都属于前面提到的三类，取决于参与者在系统中的位置。
- en: 'The following diagram highlights the different actors in the Kubernetes ecosystem:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表突出了Kubernetes生态系统中的不同参与者：
- en: '![Figure 3.3 – Threat actors in Kubernetes environments'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3– Kubernetes环境中的威胁参与者'
- en: '](image/B15566_03_003.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_03_003.jpg)'
- en: Figure 3.3 – Threat actors in Kubernetes environments
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3– Kubernetes环境中的威胁参与者
- en: As you can see in this diagram, the end user generally interacts with the HTTP/HTTPS
    routes exposed by the ingress controller, the load balancer, or the pods. The
    end user is the least privileged. The internal attacker on the other hand has
    limited access to resources within the cluster. The privileged attacker is most
    privileged and has the ability to modify the cluster. These three categories of
    attackers help determine the severity of a threat. A threat involving an end user
    has a higher severity compared to a threat involving a privileged attacker. Although
    these roles seem isolated in the diagram, an attacker can change from an end user
    to an internal attacker using an elevation of privilege attack.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在此图表中所看到的，终端用户通常与入口控制器、负载均衡器或Pod暴露的HTTP/HTTPS路由进行交互。终端用户权限最低。另一方面，内部攻击者对集群内部的资源具有有限访问权限。特权攻击者权限最高，并且有能力修改集群。这三类攻击者有助于确定威胁的严重程度。涉及终端用户的威胁比涉及特权攻击者的威胁具有更高的严重性。尽管这些角色在图表中似乎是孤立的，但攻击者可以通过权限提升攻击从终端用户变为内部攻击者。
- en: Threats in Kubernetes clusters
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes集群中的威胁
- en: With our new understanding of Kubernetes components and threat actors, we're
    moving on to the journey of threat modeling a Kubernetes cluster. In the following
    table, we cover the major Kubernetes components, nodes, and pods. Nodes and pods
    are the fundamental Kubernetes objects that run workloads. Note that all these
    components are assets and should be protected from threats. Any of these components
    getting compromised could lead to the next step of an attack, such as privilege
    escalation. Also, note that `kube-apiserver` and `etcd` are the brain and heart
    of a Kubernetes cluster. If either of them were to get compromised, that would
    be game over.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对Kubernetes组件和威胁参与者的新理解，我们将继续进行Kubernetes集群的威胁建模之旅。在下表中，我们涵盖了主要的Kubernetes组件、节点和Pod。节点和Pod是运行工作负载的基本Kubernetes对象。请注意，所有这些组件都是资产，应该受到威胁的保护。这些组件中的任何一个被
    compromise 都可能导致攻击的下一步，比如权限提升。还要注意，`kube-apiserver`和`etcd`是Kubernetes集群的大脑和心脏。如果它们中的任何一个被
    compromise，那将是游戏结束。
- en: 'The following table highlights the threats in the default Kubernetes configuration.
    This table also highlights how developers and cluster administrators can protect
    their assets from these threats:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下表突出了默认Kubernetes配置中的威胁。该表还突出了开发人员和集群管理员如何保护其资产免受这些威胁的影响：
- en: '![](image/Table_3.1-a.jpg)![](image/Table_3.1-b.jpg)![](image/Table_3.1-c.jpg)![](image/Table_3.1-d.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Table_3.1-a.jpg)![](image/Table_3.1-b.jpg)![](image/Table_3.1-c.jpg)![](image/Table_3.1-d.jpg)'
- en: This table only highlights some of the threats. There are more threats, which
    will be covered in later chapters. We hope the preceding table will inspire you
    to think out loud about what needs to be protected and how to protect it in your
    Kubernetes cluster.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这张表只突出了一些威胁。还有更多的威胁，将在后面的章节中进行讨论。我们希望前面的表格能激发您对需要在Kubernetes集群中保护什么以及如何保护的思考。
- en: Threat modeling application in Kubernetes
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Kubernetes中进行威胁建模应用
- en: Now that we have looked at threats in a Kubernetes cluster, let's move on to
    discuss how threat modeling will differ for an application deployed on Kubernetes.
    Deployment in Kubernetes adds additional complexities to the threat model. Kubernetes
    adds additional considerations, assets, threat actors, and new security controls
    that need to be considered before investigating the threats to the deployed application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过Kubernetes集群中的威胁，让我们继续讨论在Kubernetes上部署的应用程序的威胁建模将会有何不同。在Kubernetes中部署会给威胁模型增加额外的复杂性。Kubernetes增加了额外的考虑因素、资产、威胁行为者和需要在调查部署应用程序的威胁之前考虑的新安全控制。
- en: 'Let''s look at a simple example of a three-tier web application:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的三层Web应用的例子：
- en: '![Figure 3.4 – Threat model of a traditional web application'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 - 传统Web应用的威胁模型'
- en: '](image/B15566_03_004.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_03_004.jpg)'
- en: Figure 3.4 – Threat model of a traditional web application
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 - 传统Web应用的威胁模型
- en: 'The same application looks a little different in the Kubernetes environment:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes环境中，同一应用看起来有些不同：
- en: '![Figure 3.5 – Threat model of the three-tier web application in Kubernetes'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 - Kubernetes中三层Web应用的威胁模型
- en: '](image/B15566_03_005.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_03_005.jpg)'
- en: Figure 3.5 – Threat model of the three-tier web application in Kubernetes
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 - Kubernetes中三层Web应用的威胁模型
- en: 'As shown in the previous diagram, the web server, application server, and databases
    are all running inside pods. Let''s do a high-level comparison of threat modeling
    between traditional web architecture and cloud-native architecture:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，Web服务器、应用服务器和数据库都在pod中运行。让我们对传统Web架构和云原生架构之间的威胁建模进行高层比较：
- en: '![](image/Table_3.2-a.jpg)![](image/Table_3.2-b.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Table_3.2-a.jpg)![](image/Table_3.2-b.jpg)'
- en: 'To summarize the preceding comparison, you will find that more assets need
    to be protected in a cloud-native architecture, and you will face more threat
    actors in this space. Kubernetes provides more security controls, but it also
    adds more complexity. More security controls doesn''t necessarily mean more security.
    Remember: complexity is the enemy of security.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 总结前面的比较，您会发现在云原生架构中需要保护更多的资产，并且在这个领域会面临更多的威胁行为者。Kubernetes提供了更多的安全控制，但也增加了更多的复杂性。更多的安全控制并不一定意味着更安全。请记住：复杂性是安全的敌人。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by introducing the basic concepts of threat modeling.
    We discussed the important assets, threats, and threat actors in Kubernetes environments.
    We discussed different security controls and mitigation strategies to improve
    the security posture of your Kubernetes cluster.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先介绍了威胁建模的基本概念。我们讨论了Kubernetes环境中的重要资产、威胁和威胁行为者。我们讨论了不同的安全控制和缓解策略，以改善您的Kubernetes集群的安全状况。
- en: 'Then we walked through application threat modeling, taking into consideration
    applications deployed in Kubernetes, and compared it to the traditional threat
    modeling of monolithic applications. The complexity introduced by the Kubernetes
    design makes threat modeling more complicated, as we''ve shown: more assets to
    be protected and more threat actors. And more security control doesn''t necessarily
    mean more safety.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们通过应用程序威胁建模，考虑了部署在Kubernetes中的应用程序，并将其与传统的单片应用程序的威胁建模进行了比较。Kubernetes设计引入的复杂性使威胁建模变得更加复杂，正如我们所展示的：需要保护的资产更多，威胁行为者也更多。而更多的安全控制并不一定意味着更安全。
- en: You should keep in mind that although threat modeling can be a long and complex
    process, it is worth doing to understand the security posture of your environment.
    It's quite necessary to do both application threat modeling and infrastructure
    threat modeling together to better secure your Kubernetes cluster.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该记住，尽管威胁建模可能是一个漫长而复杂的过程，但值得去了解您环境的安全状况。同时进行应用程序威胁建模和基础设施威胁建模对于更好地保护您的Kubernetes集群非常必要。
- en: In the next chapter, to help you learn about securing your Kubernetes cluster
    to the next level, we will talk about the principle of least privilege and how
    to implement it in the Kubernetes cluster.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，为了帮助您了解如何将您的Kubernetes集群安全性提升到更高水平，我们将讨论最小特权原则以及如何在Kubernetes集群中实施它。
- en: Questions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: When do you start threat modeling your application?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时开始对应用程序进行威胁建模？
- en: What are the different threat actors in Kubernetes environments?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes环境中有哪些不同的威胁行为者？
- en: Name one of the most severe threats to the default Kubernetes deployment.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提到默认Kubernetes部署的最严重的威胁之一。
- en: Why is threat modeling more difficult in a Kubernetes environment?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在Kubernetes环境中威胁建模更加困难？
- en: How does the attack surface of deployments in Kubernetes compare to deployments
    in traditional architectures?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes部署的攻击面与传统架构中的部署相比如何？
- en: Further reading
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Trail of Bits and Atredis Partners have done a good job on Kubernetes components'
    threat modeling. Their whitepaper highlights in detail the threats in each Kubernetes
    component. You can find the whitepaper at [https://github.com/kubernetes/community/blob/master/wg-security-audit/findings/Kubernetes%20Threat%20Model.pdf](https://github.com/kubernetes/community/blob/master/wg-security-audit/findings/Kubernetes%20Threat%20Model.pdf).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Trail of Bits和Atredis Partners在Kubernetes组件的威胁建模方面做得很好。他们的白皮书详细介绍了每个Kubernetes组件中的威胁。您可以在[https://github.com/kubernetes/community/blob/master/wg-security-audit/findings/Kubernetes%20Threat%20Model.pdf](https://github.com/kubernetes/community/blob/master/wg-security-audit/findings/Kubernetes%20Threat%20Model.pdf)找到这份白皮书。
- en: Note that the intent, scope, and approach of threat modeling was different for
    the preceding whitepaper. So, the results will look a little different.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前述白皮书的威胁建模的意图、范围和方法是不同的。因此，结果会有些不同。
