["```cs\n#include \"stdafx.h\"\n#include \"Nodes/G2FlowBaseNode.h\"\n\n  class CTutorialNode : public CFlowBaseNode<eNCT_Instanced>\n  {\n\n  };\n\n  REGISTER_FLOW_NODE(\"Tutorial:Multiplier\", CTutorialNode);\n```", "```cs\npublic:\n```", "```cs\n  CTutorialNode(SActivationInfo *pActInfo)\n  {\n  }\n\n  virtual IFlowNodePtr Clone(SActivationInfo *pActInfo)\n  {\n    return new CTutorialNode(pActInfo);\n  }\n```", "```cs\n  virtual void ProcessEvent(EFlowEvent evt, SActivationInfo *pActInfo)\n  {\n  }\n\n  virtual void GetConfiguration(SFlowNodeConfig &config)\n  {\n  }\n\n  virtual void GetMemoryUsage(ICrySizer *s) const\n  {\n    s->Add(*this);\n  }\n```", "```cs\n  enum EInput\n  {\n    EIP_Activate,\n    EIP_Left,\n    EIP_Right\n  };\n```", "```cs\n  enum EOutput\n  {\n    EOP_Result\n  };\n```", "```cs\n  virtual void GetConfiguration(SFlowNodeConfig &config)\n  {\n    static const SInputPortConfig inputs[] =\n    {\n      InputPortConfig_Void(\"Activate\", \"Triggers the calculation\"),\n      InputPortConfig<float>(\"Left\", 0, \"The left side of the calculation\"),\n      InputPortConfig<float>(\"Right\", 0, \"The right side of the calculation\"),\n      {0}\n    };\n  }\n```", "```cs\n  static const SOutputPortConfig outputs[] =\n  {\n    OutputPortConfig<float>(\"Result\", \"The result of the calculation\"),\n    {0}\n  };\n```", "```cs\n  config.pInputPorts = inputs;\n  config.pOutputPorts = outputs;\n  config.sDescription = _HELP(\"Multiplies two numbers\");\n  config.SetCategory(EFLN_APPROVED);\n```", "```cs\n  config.nFlags |= EFLN_TARGET_ENTITY;\n```", "```cs\n  virtual void ProcessEvent(EFlowEvent evt, SActivationInfo *pActInfo)\n  {\n    switch (evt)\n    {\n      case eFE_Activate:\n      {\n\n      }\n      break;\n    }\n  }\n```", "```cs\n  if (IsPortActive(pActInfo, EIP_Activate))\n  {\n    float left = GetPortFloat(pActInfo, EIP_Left);\n    float right = GetPortFloat(pActInfo, EIP_Right);\n    float answer = left * right;\n\n    ActivateOutput(pActInfo, EOP_Result, answer);\n  }\n```", "```cs\n  using CryEngine.Flowgraph;\n\n  namespace CryGameCode.FlowNodes\n  {\n    [FlowNode(Name = \"Multiplier\", Category = \"CSharpTutorial\", Filter = FlowNodeFilter.Approved)]\n    public class TutorialNode : FlowNode\n    {\n\n    }\n  }\n```", "```cs\n  [Port]\n  public void Activate()\n  {\n  }\n\n  [Port]\n  public void Left(float value)\n  {\n  }\n\n  [Port]\n  public void Right(float value)\n  {\n  }\n```", "```cs\n  public OutputPort<float> Result { get; set; }\n```", "```cs\n  var left = GetPortValue<float>(Left);\n  var right = GetPortValue<float>(Right);\n  var answer = left * right;\n\n  Result.Activate(answer);\n```", "```cs\n  [FlowNode(TargetsEntity = true)]\n```"]