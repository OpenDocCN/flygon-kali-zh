["```kt\n    var name = \"Igor\" // Inferred type is String \n    name = \"Marcin\" \n```", "```kt\n    var name = \"Igor\" \n    name = 2 // Error, because name type is String \n```", "```kt\n    val name = \"Marcin\" \n    println(\"My name is $name\") // Prints: My name is Marcin \n```", "```kt\n    val name = \"Igor\" \n        println(\"My name is ${name.toUpperCase()}\") \n\n        // Prints: My name is IGOR \n```", "```kt\n    var a: String = \"abc\"\n\n    a = null // compilation error\n\n    var b: String? = \"abc\"\n\n    b = null // It is correct\n```", "```kt\n    savedInstanceState?.doSomething \n```", "```kt\n    for (i in 1..10) { \n        print(i) \n    } // 12345678910 \n```", "```kt\n    val capitol = \"England\" to \"London\" \n    println(capitol.first) // Prints: England \n    println(capitol.second) // Prints: London \n```", "```kt\n    val (country, city) = capitol \n    println(country) // Prints: England \n    println(city) // Prints: London \n```", "```kt\n    val capitols = listOf(\"England\" to \"London\", \"Poland\" to \"Warsaw\") \n    for ((country, city) in capitols) { \n        println(\"Capitol of $country is $city\") \n    } \n\n    // Prints: \n    // Capitol of England is London \n    // Capitol of Poland is Warsaw \n```", "```kt\n    val capitols = listOf(\"England\" to \"London\", \"Poland\" to \"Warsaw\") \n    capitols.forEach { (country, city) -> \n        println(\"Capitol of $country is $city\") \n    } \n```", "```kt\n    val list = listOf(1, 2, 3, 4, 5, 6) // Inferred type is List \n    val mutableList = mutableListOf(1, 2, 3, 4, 5, 6) \n\n    // Inferred type  is MutableList \n```", "```kt\n    view.setOnClickListener { \n        println(\"Click\") \n    } \n```", "```kt\n    val text = capitols.map { (country, _) -> country.toUpperCase() } \n                       .onEach { println(it) } \n                       .filter { it.startsWith(\"P\") } \n                       .joinToString (prefix = \"Countries prefix P:\")\n    // Prints: ENGLAND POLAND\n\n    println(text) // Prints: Countries prefix P: POLAND\n\n    .joinToString (prefix = \"Countries prefix P:\")\n```", "```kt\n    inline fun supportsMarshmallow(code: () -> Unit) { \n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) \n        code() \n    } \n\n    //usage \n    supportsMarshmallow { \n        println(\"This code will only run on Android Nougat and newer\") \n    } \n```", "```kt\n    doAsync { \n        var result = runLongTask()  // runs on background thread \n\n        uiThread { \n            toast(result)           // run on main thread \n        } \n    } \n```", "```kt\n    if (x is String) { \n        print(x.length) // x is automatically casted to String \n    } \n\n    x.length //error, x is not casted to a String outside if block \n\n    if (x !is String) \n        return \n\n    x.length // x is automatically casted to String \n```", "```kt\n    fun sum(a: Int, b: Int) = a + b \n    println (sum(2 + 4)) // Prints: 6 \n```", "```kt\n    fun printMessage(product: String, amount: Int = 0, \n\n        name: String = \"Anonymous\") { \n        println(\"$name has $amount $product\")  \n    } \n\n    printMessage(\"oranges\") // Prints: Anonymous has 0 oranges \n    printMessage(\"oranges\", 10) // Prints: Anonymous has 10 oranges \n    printMessage(\"oranges\", 10, \"Johny\") \n\n    // Prints: Johny has 10 oranges \n```", "```kt\n    printMessage(\"oranges\", name = \"Bill\") \n```", "```kt\n    data class Ball(var size:Int, val color:String) \n\n    val ball = Ball(12, \"Red\") \n    println(ball) // Prints: Ball(size=12, color=Red) \n```", "```kt\n    val ball = Ball(12, \"Red\") \n    println(ball) // prints: Ball(size=12, color=Red) \n    val smallBall = ball.copy(size = 3) \n    println(smallBall) // prints: Ball(size=3, color=Red) \n    smallBall.size++ \n    println(smallBall) // prints: Ball(size=4, color=Red) \n    println(ball) // prints: Ball(size=12, color=Red) \n```", "```kt\n    fun ImageView.loadUrl(url: String) { \n        Picasso.with(context).load(url).into(this) \n    } \n\n    \\\\usage \n    imageView.loadUrl(\"www.test.com\\\\image1.png\") \n```", "```kt\n    fun Context.toast(text:String) { \n        Toast.makeText(this, text, Toast.LENGTH_SHORT).show() \n    } \n\n    //usage (inside Activity class)\n\n    toast(\"Hello\") \n```", "```kt\n    interface BasicData { \n        val email:String \n        val name:String \n        get() = email.substringBefore(\"@\") \n    } \n```", "```kt\n    val retrofit by lazy { \n        Retrofit.Builder() \n            .baseUrl(\"https://www.github.com\") \n            .addConverterFactory(MoshiConverterFactory.create()) \n            .build() \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n        println(\"Hello, world!\") \n    }\n```", "```kt\n//build.gradle file in project root folder \nbuildscript { \n    ext.kotlin_version = '1.1' \n\n    repositories { \n        google() \n        jcenter() \n    } \n    dependencies { \n       classpath 'com.android.tools.build:gradle:3.0.0-alpha9' \n       classpath \"org.jetbrains.kotlin:kotlin-gradle-\n\n             plugin:$kotlin_version\" \n    } \n} \n\n...  \n//build.gradle file in the selected modules \napply plugin: 'com.android.application' \napply plugin: 'kotlin-android' \n\napply plugin: 'kotlin-android-extensions'\n\n... \ndependencies { \n    ...\n\n    implementation 'com.android.support.constraint:constraint-\n\n          layout:1.0.2'\n\n} \n... \n```"]