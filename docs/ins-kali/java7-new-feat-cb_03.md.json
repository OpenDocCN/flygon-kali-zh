["```java\n    public static void main(String[] args) throws Exception {\n    displayContentType(\"/home/docs/users.txt\");\n    displayContentType(\"/home/docs/Chapter 2.doc\");\n    displayContentType(\"/home/docs/java.exe\");\n    }\n    static void displayContentType(String pathText) throws Exception {\n    Path path = Paths.get(pathText);\n    String type = Files.probeContentType(path);\n    System.out.println(type);\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    try {\n    Path path = FileSystems.getDefault().getPath(\"/home/docs/users.txt\");\n    System.out.println(Files.getAttribute(path, \"size\"));\n    }\n    catch (IOException ex) {\n    System.out.println(\"IOException\");\n    }\n    }\n\n    ```", "```java\nSystem.out.println(Files.getAttribute(path, \"sizes\"));\n\n```", "```java\n    public static void main(String[] args) throws Exception {\n    Path path = Paths.getPath(\"/home/docs/users.txt\");\n    try {\n    Map<String, Object> attrsMap = Files.readAttributes(path, \"*\");\n    Set<String> keys = attrsMap.keySet();\n    for(String attribute : keys) {\n    out.println(attribute + \": \"\n    + Files.getAttribute(path, attribute));\n    }\n    }\n    }\n\n    ```", "```java\nMap<String, Object> attrsMap = Files.readAttributes(path, \"*\", LinkOption.NOFOLLOW_LINKS);\n\n```", "```java\n    public static void main(String[] args) throws Exception {\n    Path path = FileSystems.getDefault().getPath(\"/home/docs/users.txt\");\n    displayFileAttributes(path);\n    }\n    private static void displayFileAttributes(Path path) throws Exception {\n    String format =\n    \"Exists: %s %n\"\n    + \"notExists: %s %n\"\n    + \"Directory: %s %n\"\n    + \"Regular: %s %n\"\n    + \"Executable: %s %n\"\n    + \"Readable: %s %n\"\n    + \"Writable: %s %n\"\n    + \"Hidden: %s %n\"\n    + \"Symbolic: %s %n\"\n    + \"Last Modified Date: %s %n\"\n    + \"Size: %s %n\";\n    System.out.printf(format,\n    Files.exists(path, LinkOption.NOFOLLOW_LINKS),\n    Files.notExists(path, LinkOption.NOFOLLOW_LINKS),\n    Files.isDirectory(path, LinkOption.NOFOLLOW_LINKS),\n    Files.isRegularFile(path, LinkOption.NOFOLLOW_LINKS),\n    Files.isExecutable(path),\n    Files.isReadable(path),\n    Files.isWritable(path),\n    Files.isHidden(path),\n    Files.isSymbolicLink(path),\n    Files.getLastModifiedTime(path, LinkOption.NOFOLLOW_LINKS),\n    Files.size(path));\n    }\n\n    ```", "```java\n    public static void main(String[] args)\n    Path path = Paths.get(\"C:/home/docs/users.txt\");\n    FileSystem fileSystem = path.getFileSystem();\n    Set<String> supportedViews = fileSystem.supportedFileAttributeViews();\n    for(String view : supportedViews) {\n    System.out.println(view);\n    }\n    }\n\n    ```", "```java\ntry {\nFileStore fileStore = Files.getFileStore(path);\nSystem.out.println(\"FileAttributeView supported: \" + fileStore.supportsFileAttributeView(\nFileAttributeView.class));\nSystem.out.println(\"BasicFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\nBasicFileAttributeView.class));\nSystem.out.println(\"FileOwnerAttributeView supported: \" + fileStore.supportsFileAttributeView(\nFileOwnerAttributeView.class));\nSystem.out.println(\"AclFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\nAclFileAttributeView.class));\nSystem.out.println(\"PosixFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\nPosixFileAttributeView.class));\nSystem.out.println(\"UserDefinedFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\nUserDefinedFileAttributeView.class));\nSystem.out.println(\"DosFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\nDosFileAttributeView.class));\n}\ncatch (IOException ex) {\nSystem.out.println(\"Attribute view not supported\");\n}\n\n```", "```java\nSystem.out.println(\"FileAttributeView supported: \" + fileStore.supportsFileAttributeView(\n\"file\"));\nSystem.out.println(\"BasicFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\n\"basic\"));\nSystem.out.println(\"FileOwnerAttributeView supported: \" + fileStore.supportsFileAttributeView(\n\"owner\"));\nSystem.out.println(\"AclFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\n\"acl\"));\nSystem.out.println(\"PosixFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\n\"posix\"));\nSystem.out.println(\"UserDefinedFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\n\"user\"));\nSystem.out.println(\"DosFileAttributeView supported: \" + fileStore.supportsFileAttributeView(\n\"dos\"));\n\n```", "```java\n    public static void main(String[] args) {\n    Path path\n    = FileSystems.getDefault().getPath(\"/home/docs/users.txt\");\n    try {\n    BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes.class);\n    System.out.println(\"Creation Time: \" + attributes.creationTime());\n    System.out.println(\"Last Accessed Time: \" + attributes.lastAccessTime());\n    System.out.println(\"Last Modified Time: \" + attributes.lastModifiedTime());\n    System.out.println(\"File Key: \" + attributes.fileKey());\n    System.out.println(\"Directory: \" + attributes.isDirectory());\n    System.out.println(\"Other Type of File: \" + attributes.isOther());\n    System.out.println(\"Regular File: \" + attributes.isRegularFile());\n    System.out.println(\"Symbolic File: \" + attributes.isSymbolicLink());\n    System.out.println(\"Size: \" + attributes.size());\n    }\n    catch (IOException ex) {\n    System.out.println(\"Attribute error\");\n    }\n    }\n\n    ```", "```java\n    BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes.class);\n\n    ```", "```java\n    BasicFileAttributeView view = Files.getFileAttributeView(path, BasicFileAttributeView.class);\n    BasicFileAttributes attributes = view.readAttributes();\n\n    ```", "```java\n    System.out.println(\"Name: \" + view.name());\n\n    ```", "```java\n    public static void main(String[] args) throws Exception {\n    Path path = Paths.get(\"home/docs/users.txt\");\n    FileSystem fileSystem = path.getFileSystem();\n    PosixFileAttributeView view = Files.getFileAttributeView(path, PosixFileAttributeView.class);\n    PosixFileAttributes attributes = view.readAttributes();\n    System.out.println(\"Group: \" + attributes.group());\n    System.out.println(\"Owner: \" + attributes.owner().getName());\n    Set<PosixFilePermission> permissions = attributes.permissions();\n    for(PosixFilePermission permission : permissions) {\n    System.out.print(permission.name() + \" \");\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    Path path = FileSystems.getDefault().getPath(\"/home/docs/users.txt\");\n    try {\n    DosFileAttributeView view = Files.getFileAttributeView(path, DosFileAttributeView.class);\n    DosFileAttributes attributes = view.readAttributes();\n    System.out.println(\"isArchive: \" + attributes.isArchive());\n    System.out.println(\"isHidden: \" + attributes.isHidden());\n    System.out.println(\"isReadOnly: \" + attributes.isReadOnly());\n    System.out.println(\"isSystem: \" + attributes.isSystem());\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    Path path = Paths.get(\"C:/home/docs/users.txt\");\n    try {\n    FileOwnerAttributeView view = Files.getFileAttributeView(path, FileOwnerAttributeView.class);\n    UserPrincipal userPrincipal = view.getOwner();\n    System.out.println(userPrincipal.getName());\n    }\n    catch (IOException e) {\n    e.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    Path path = Paths.get(\"C:/home/docs/users.txt\");\n    try {\n    AclFileAttributeView view = Files.getFileAttributeView(path, AclFileAttributeView.class);\n    List<AclEntry> aclEntryList = view.getAcl();\n    for (AclEntry entry : aclEntryList) {\n    System.out.println(\"User Principal Name: \" + entry.principal().getName());\n    System.out.println(\"ACL Entry Type: \" + entry.type());\n    displayEntryFlags(entry.flags());\n    displayPermissions(entry.permissions());\n    System.out.println();\n    }\n    }\n    catch (IOException e) {\n    e.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    private static void displayPermissions(Set<AclEntryPermission> permissionSet) {\n    if (permissionSet.isEmpty()) {\n    System.out.println(\"No Permissions present\");\n    }\n    else {\n    System.out.println(\"Permissions\");\n    for (AclEntryPermission permission : permissionSet) {\n    System.out.print(permission.name() + \" \" );\n    }\n    System.out.println();\n    }\n    }\n\n    ```", "```java\n    private static void displayEntryFlags(Set<AclEntryFlag> flagSet) {\n    if (flagSet.isEmpty()) {\n    System.out.println(\"No ACL Entry Flags present\");\n    }\n    else {\n    System.out.println(\"ACL Entry Flags\");\n    for (AclEntryFlag flag : flagSet) {\n    System.out.print(flag.name() + \" \");\n    }\n    System.out.println();\n    }\n    }\n\n    ```", "```java\ntry {\nUserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();\nGroupPrincipal groupPrincipal = lookupService.lookupPrincipalByGroupName(\"Administrators\");\nUserPrincipal userPrincipal = lookupService.lookupPrincipalByName(\"Richard\");\nSystem.out.println(groupPrincipal.getName());\nSystem.out.println(userPrincipal.getName());\n}\ncatch (IOException e) {\ne.printStackTrace();\n}\n\n```", "```java\n    public static void main(String[] args) {\n    Path path = Paths.get(\"C:/home/docs/users.txt\");\n    try {\n    UserDefinedFileAttributeView view = Files.getFileAttributeView(path, UserDefinedFileAttributeView.class);\n    view.write(\"publishable\", Charset.defaultCharset().encode(\"true\"));\n    System.out.println(\"Publishable set\");\n    }\n    catch (IOException e) {\n    e.printStackTrace();\n    }\n    }\n\n    ```", "```java\nString name = \"publishable\";\nByteBuffer buffer = ByteBuffer.allocate(view.size(name));\nview.read(name, buffer);\nbuffer.flip();\nString value = Charset.defaultCharset().decode(buffer).toString();\nSystem.out.println(value);\n\n```"]