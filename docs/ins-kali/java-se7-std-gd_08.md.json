["```java\npublic void someMethod() throws IOException {\n   \u2026\n   object.anotherMethod(); // may throw an IOException\n   \u2026\n}\n```", "```java\npublic class ExceptionDemo {\n\n   public void foo3() {\n      try {\n         \u2026\n         throw new Exception();\n      }\n      catch (Exception e) {\n         e.printStackTrace();\n      }\n   }\n\n   public void foo2() { foo3(); }\n   public void foo1() { foo2(); }\n\n   public static void main(String args[]) {\n      new ExceptionDemo().foo1();\n   }\n}\n```", "```java\njava.lang.Exception\n at ExceptionDemo.foo3(ExceptionDemo.java:8)\n at ExceptionDemo.foo2(ExceptionDemo.java:16)\n at ExceptionDemo.foo1(ExceptionDemo.java:20)\n at ExceptionDemo.main(ExceptionDemo.java:25)\n\n```", "```java\nprivate static void losingStackTrace(){\n   try {\n      File file = new File(\"c:\\\\NonExistentFile.txt\");\n      FileReader fileReader = new FileReader(file);\n   } \n   catch (FileNotFoundException e) {\n      e.printStackTrace();\n\n      System.out.println();\n      System.out.println(\"---e.getCause(): \" + \n                   e.getCause());\n      System.out.println(\"---e.getMessage(): \" + \n                   e.getMessage());\n      System.out.println(\"---e.getLocalizedMessage(): \" + \n                   e.getLocalizedMessage());\n      System.out.println(\"---e.toString(): \" + \n                   e.toString());\n   }\n}\n\n```", "```java\njava.io.FileNotFoundException: c:\\NonExistentFile.txt (The system cannot find the file specified)\n---e.getCause(): null\n---e.getMessage(): c:\\NonExistentFile.txt (The system cannot find the file specified)\n   at java.io.FileInputStream.open(Native Method)\n---e.getLocalizedMessage(): c:\\NonExistentFile.txt (The system cannot find the file specified)\n---e.toString(): java.io.FileNotFoundException: c:\\NonExistentFile.txt (The system cannot find the file specified)\n   at java.io.FileInputStream.<init>(FileInputStream.java:138)\n   at java.io.FileReader.<init>(FileReader.java:72)\n   at packt.Chapter8Examples.losingStackTrace(Chapter8Examples.java:64)\n   at packt.Chapter8Examples.main(Chapter8Examples.java:57)\n\n```", "```java\ntry {\n   File file = new File(\"c:\\\\NonExistentFile.txt\");\n   FileReader fileReader = new FileReader(file);\n} \ncatch (FileNotFoundException e) {\n   e.printStackTrace();\n   System.out.println();\n   StackTraceElement traces[] = e.getStackTrace();\n   for (StackTraceElement ste : traces) {\n      System.out.println(ste);\n   }\n}\n```", "```java\njava.io.FileNotFoundException: c:\\NonExistentFile.txt (The system cannot find the file specified)\n at java.io.FileInputStream.open(Native Method)\n at java.io.FileInputStream.<init>(FileInputStream.java:138)\n at java.io.FileReader.<init>(FileReader.java:72)\n at packt.Chapter8Examples.losingStackTrace(Chapter8Examples.java:64)\n at packt.Chapter8Examples.main(Chapter8Examples.java:57)\n\njava.io.FileInputStream.open(Native Method)\njava.io.FileInputStream.<init>(FileInputStream.java:138)\njava.io.FileReader.<init>(FileReader.java:72)\npackt.Chapter8Examples.losingStackTrace(Chapter8Examples.java:64)\npackt.Chapter8Examples.main(Chapter8Examples.java:57)\n\n```", "```java\ntry {\n   inString = is.readLine();\n   value = Integer.parseInt (inString);\n   \u2026\n} \ncatch (IOException e) {\n   System.out.println(\"I/O Exception occurred\");\n} \ncatch (NumberFormatException e) {\n   System.out.println(\"Bad format, try again...\");\n} \nfinally {\n   // Perform any necessary clean-up action\n}\n\n```", "```java\ntry (BufferedReader reader = Files.newBufferedReader(\n    Paths.get(new URI(\"file:///C:/data.txt\")),\n      Charset.defaultCharset());\n    BufferedWriter writer = Files.newBufferedWriter(\n      Paths.get(new URI(\"file:///C:/data.bak\")),\n      Charset.defaultCharset())) {\n\n  String input;\n  while ((input = reader.readLine()) != null) {\n    writer.write(input);\n    writer.newLine();\n  }\n} catch (URISyntaxException | IOException ex) {\n  ex.printStackTrace();\n}\n\n```", "```java\ntry {\n   \u2026\n} \ncatch (IOException e) {\n   System.out.println(\"I/O Exception occurred\");\n} \ncatch (NumberFormatException e) {\n   System.out.println(\"Bad format, try again...\");\n} \n```", "```java\ntry {\n   \u2026\n}\ncatch (AException e) {\u2026}\ncatch (BException e) {\u2026}\ncatch (CException e) {\u2026}\ncatch (DException e) {\u2026}\n```", "```java\ntry {\n   \u2026\n}\ncatch (DException e) {\u2026}\ncatch (BException e) {\u2026}\ncatch (CException e) {\u2026}\ncatch (AException e) {\u2026}\n```", "```java\ntry {\n   \u2026\n} \ncatch (IOException e) {\n   e.printStackTrace();\n} \ncatch (NumberFormatException e) {\n   e.printStackTrace();\n} \n```", "```java\ntry {\n   \u2026\n} \ncatch (IOException | NumberFormatException e) {\n   e.printStackTrace();\n}\n```", "```java\ncatch (IOException | NumberFormatException e) {\n   e = new Exception();  // Compile time error\n}\n```", "```java\nBufferedReader reader = null;     \ntry {\n   File file1 = new File(\"c:\\\\File1.txt\");\n\n   reader = new BufferedReader(new FileReader(file1));\n   // Copy file\n   String line;\n   while((line = reader.readLine()) != null) {\n      System.out.println(line);\n   }\n} \ncatch (IOException e) {\n   e.printStackTrace();\n}\nfinally {\n   if(reader != null) {\n      reader.close();\n   }\n}\n```", "```java\nBufferedReader br = null;\nBufferedWriter bw = null;        \ntry {\n   File file1 = new File(\"c:\\\\File1.txt\");\n   File file2 = new File(\"c:\\\\File2.txt\");\n\n   br = new BufferedReader(new FileReader(file1));\n   bw = new BufferedWriter(new FileWriter(file2));\n   // Copy file\n} \ncatch (FileNotFoundException e) {\n   e.printStackTrace();\n}\ncatch (IOException e) {\n   e.printStackTrace();\n}\nfinally {\n   try {\n      br.close();\n      bw.close();\n   } catch (IOException ex) {\n      // Handle close exception\n   }\n}\n```", "```java\ntry {\n   // Code that may throw an exception\n}\ncatch (someException e) {\n   try {\n      // Code to handle the exception\n   }\n   catch (anException e) {\n      // Code to handle the nested exception\n   } \n}\ncatch (someOtherException e) {\n   // Code to handle the exception\n} \n```", "```java\nfinally {\n   try {\n      br.close();\n      bw.close();\n   } catch (IOException | NullPointerException e) {\n       // Handle close exceptions\n   }\n   }\n```", "```java\nboolean errorsArePresent;\n\n\u2026\nerrorsArePresent = true;\t\nwhile (errorsArePresent) {\n   try {\n      \u2026\n      errorsArePresent = false;\n   } \n\n   catch (someException e) {\n      // Process error\n   } \n\n}\n```", "```java\ntry {\n   someMethod();\n} catch (Exception e) {\n   System.out.println(\"Something failed\" + e);\n}\n```", "```java\ntry {\n   someMethod();\n} catch (SpecificException e) {\n   System.out.println(\"A specific exception message\" + e);\n}\n```", "```java\nprivate static void losingStackTrace(){\n   try {\n      File file = new File(\"c:\\\\NonExistentFile.txt\");\n      FileReader fileReader = new FileReader(file);\n   }\n   catch(FileNotFoundException e) {\n      e.printStackTrace();\n   }\n}\n```", "```java\njava.io.FileNotFoundException: c:\\NonExistentFile.txt (The system cannot find the file specified)\n   at java.io.FileInputStream.open(Native Method)\n   at java.io.FileInputStream.<init>(FileInputStream.java:138)\n   at java.io.FileReader.<init>(FileReader.java:72)\n   at packt.Chapter8Examples.losingStackTrace(Chapter8Examples.java:49)\n   at packt.Chapter8Examples.main(Chapter8Examples.java:42)\n```", "```java\npublic class MyException extends Exception {\n   private String information;\n\n   public MyException(String information) {\n      this.information = information;\n   }\n}\n```", "```java\nprivate static void losingStackTrace() throws MyException {\n   try {\n      File file = new File(\"c:\\\\NonExistentFile.txt\");\n      FileReader fileReader = new FileReader(file);\n   }\n   catch(FileNotFoundException e) {\n      throw new MyException(e.getMessage());\n   }\n}\n```", "```java\nException in thread \"main\" packt.MyException\n at packt.Chapter8Examples.losingStackTrace(Chapter8Examples.java:53)\n at packt.Chapter8Examples.main(Chapter8Examples.java:42)\n\n```", "```java\npublic MyException(Throwable cause) {\n   super(cause);\n}\n\n```", "```java\ncatch (FileNotFoundException e) {\n   (new MyException(e)).printStackTrace();\n}\n```", "```java\npackt.MyException: java.io.FileNotFoundException: c:\\NonExistentFile.txt (The system cannot find the file specified)\n at packt.Chapter8Examples.losingStackTrace(Chapter8Examples.java:139)\n at packt.Chapter8Examples.main(Chapter8Examples.java:40)\nCaused by: java.io.FileNotFoundException: c:\\NonExistentFile.txt (The system cannot find the file specified)\n at java.io.FileInputStream.open(Native Method)\n at java.io.FileInputStream.<init>(FileInputStream.java:138)\n at java.io.FileReader.<init>(FileReader.java:72)\n at packt.Chapter8Examples.losingStackTrace(Chapter8Examples.java:136)\n\n```", "```java\nBufferedReader reader = null;\ntry {\n   reader = \u2026\n   \u2026\n}\ncatch (IOException e) {\n   \u2026\n} finally {\n   try {\n      reader.close();\n   } \n   catch (Exception e) {\n      \u2026\n   }\n}\n```", "```java\ntry {\n   method1();\n}\ncatch (Exception1 e1) {\n   \u2026\n} \ntry {\n   method2();\n}\n\ncatch (Exception1 e2) {\n   \u2026\n} \ntry {\n   method3();\n}\ncatch (Exception1 e3) {\n   \u2026\n} \ntry {\n   method4();\n}\ncatch (Exception1 e4) {\n   \u2026\n} \n```", "```java\ntry {\n   method1();\n   method2();\n   method3();\n   method4();\n}\ncatch (Exception1 e1) {\n   \u2026\n} \ncatch (Exception1 e2) {\n   \u2026\n} \ncatch (Exception1 e3) {\n   \u2026\n} \ncatch (Exception1 e4) {\n   \u2026\n} \n\nfinally {\n      \u2026\n}\n\n```", "```java\nclass Base {\n   public String getAttribute() {\n      return null;\n   }\n   \u2026\n}\n```", "```java\nclass Base {\n   public String getAttribute() {\n      throw new UnsupportedOperationException();\n   }\n   \u2026\n}\n```", "```java\nwhile (true) {\n   try {\n      Thread.sleep(100000);\n   } \n   catch (InterruptedException e) {\n      // Ignore it\n   }\n}\n```", "```java\nprivate static void losingStackTrace(){\n   try {\n      File file = new File(\"c:\\\\NonExistentFile.txt\");\n      FileReader fileReader = new FileReader(file);\n   }\n   catch(FileNotFoundException e) {\n      // Do nothing\n   }\n}\n```", "```java\ntry {\n   \u2026\n}\ncatch (Exception e) {\n   \u2026\n} \n```", "```java\ntry {\n   \u2026\n}\ncatch (Exception1 e1) {\n   \u2026\n} \ncatch (Exception1 e2) {\n   \u2026\n} \ncatch (Exception1 e3) {\n   \u2026\n} \ncatch (Exception1 e4) {\n   \u2026\n} \n```", "```java\nString state = ...  // Somehow assigned a null value\ntry {\n   if(state.equals(\"Ready\") { \u2026 }\n}\ncatch(NullPointerException e) {\n   // Handle null state\n}\n```", "```java\nString state = ...  // Somehow assigned a null value\n\nif(state != null) {\n   if(state.equals(\"Ready\") { \u2026 }\n} else {\n   // Handle null state\n}\n```", "```java\nString state = ...  // Somehow assigned a null value\n\nif(state != null && state.equals(\"Ready\") { \n   // Handle ready state\n} else {\n   // Handle null state\n}\n```", "```java\n    try {\n       // method throws an exception of the above types\n    }\n    ```", "```java\n    String s;\n    int i = 5;\n    try{\n       i = i/0;\n       s += \"next\";\n    }\n    ```"]