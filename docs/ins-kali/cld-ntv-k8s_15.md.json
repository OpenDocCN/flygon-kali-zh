["```\n// This function is called when a request hits the\n// \"/mutate\" endpoint\nfunction acceptAdmissionWebhookRequest(req)\n{\n\u00a0\u00a0// First, we need to validate the incoming req\n\u00a0\u00a0// This function will check if the request is formatted properly\n\u00a0\u00a0// and will add a \"valid\" attribute If so\n\u00a0\u00a0// The webhook will be a POST request from Kubernetes in the\n\u00a0\u00a0// \"AdmissionReviewRequest\" schema\n\u00a0\u00a0req = validateRequest(req);\n\u00a0\u00a0// If the request isn't valid, return an Error\n\u00a0\u00a0if(!req.valid) return Error; \n\u00a0\u00a0// Next, we need to decide whether to accept or deny the Admission\n\u00a0\u00a0// Request. This function will add the \"accepted\" attribute\n\u00a0\u00a0req = decideAcceptOrDeny(req);\n\u00a0\u00a0if(!req.accepted) return Error;\n\u00a0\u00a0// Now that we know we want to allow this resource, we need to\n\u00a0\u00a0// decide if any \"patches\" or changes are necessary\n\u00a0\u00a0patch = patchResourceFromWebhook(req);\n\u00a0\u00a0// Finally, we create an AdmissionReviewResponse and pass it back\n\u00a0\u00a0// to Kubernetes in the response\n\u00a0\u00a0// This AdmissionReviewResponse includes the patches and\n\u00a0\u00a0// whether the resource is accepted.\n\u00a0\u00a0admitReviewResp = createAdmitReviewResp(req, patch);\n\u00a0\u00a0return admitReviewResp;\n}\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n\u00a0\u00a0name: my-custom-webhook-server\nspec:\n\u00a0\u00a0selector:\n\u00a0\u00a0\u00a0\u00a0app: my-custom-webhook-server\n\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0- port: 443\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0targetPort: 8443\n```", "```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: MutatingWebhookConfiguration\nmetadata:\n\u00a0\u00a0name: my-service-webhook\nwebhooks:\n\u00a0\u00a0- name: my-custom-webhook-server.default.svc\n\u00a0\u00a0\u00a0\u00a0rules:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- operations: [ \"CREATE\" ]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0apiGroups: [\"\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0apiVersions: [\"v1\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources: [\"pods\", \"deployments\", \"configmaps\"]\n\u00a0\u00a0\u00a0\u00a0clientConfig:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0service:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: my-custom-webhook-server\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace: default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: \"/mutate\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0caBundle: ${CA_PEM_B64}\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n\u00a0\u00a0name: my-pod-to-deny\nspec:\n\u00a0\u00a0containers:\n\u00a0\u00a0- name: nginx\n\u00a0\u00a0\u00a0\u00a0image: nginx\n```", "```\nkubectl create -f to-deny-pod.yaml\n```", "```\nError from server (InternalError): error when creating \"to-deny-pod.yaml\": Internal error occurred: admission webhook \"my-custom-webhook-server.default.svc\" denied the request: Pod name contains \"to-deny\"!\n```", "```\nkube-apiserver --enable-admission-plugins=PodSecurityPolicy,ServiceAccount\u2026<all other desired admission controllers>\n```", "```\nkube-apiserver -h | grep enable-admission-plugins\n```", "```\nNamespaceLifecycle, LimitRanger, ServiceAccount\u2026\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n\u00a0\u00a0name: privileged-psp\n\u00a0\u00a0annotations:\n\u00a0\u00a0\u00a0\u00a0seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'\nspec:\n\u00a0\u00a0privileged: true\n\u00a0\u00a0allowedCapabilities:\n\u00a0\u00a0- '*'\n\u00a0\u00a0volumes:\n\u00a0\u00a0- '*'\n\u00a0\u00a0hostNetwork: true\n\u00a0\u00a0hostPorts:\n\u00a0\u00a0- min: 2000\n\u00a0\u00a0\u00a0\u00a0max: 65535\n\u00a0\u00a0hostIPC: true\n\u00a0\u00a0hostPID: true\n\u00a0\u00a0allowPrivilegeEscalation: true\n\u00a0\u00a0runAsUser:\n\u00a0\u00a0\u00a0\u00a0rule: 'RunAsAny'\n\u00a0\u00a0supplementalGroups:\n\u00a0\u00a0\u00a0\u00a0rule: 'RunAsAny'\n\u00a0\u00a0fsGroup:\n\u00a0\u00a0\u00a0\u00a0rule: 'RunAsAny'\n```", "```\napiVersion: rbac.authorization.k8s.io\nkind: ClusterRole\nmetadata:\n\u00a0\u00a0name: privileged-role\nrules:\n- apiGroups: ['policy']\n\u00a0\u00a0resources: ['podsecuritypolicies']\n\u00a0\u00a0verbs:\u00a0\u00a0\u00a0\u00a0\u00a0['use']\n\u00a0\u00a0resourceNames:\n\u00a0\u00a0- privileged-psp\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n\u00a0\u00a0name: privileged-crb\nroleRef:\n\u00a0\u00a0kind: ClusterRole\n\u00a0\u00a0name: privileged-role\n\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\nsubjects:\n- kind: Group\n\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n\u00a0\u00a0name: system:authenticated\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n\u00a0\u00a0name: unprivileged-psp\nspec:\n\u00a0\u00a0privileged: false\n\u00a0\u00a0allowPrivilegeEscalation: false\n\u00a0\u00a0volumes:\n\u00a0\u00a0\u00a0\u00a0- 'configMap'\n\u00a0\u00a0\u00a0\u00a0- 'emptyDir'\n\u00a0\u00a0\u00a0\u00a0- 'projected'\n\u00a0\u00a0\u00a0\u00a0- 'secret'\n\u00a0\u00a0\u00a0\u00a0- 'downwardAPI'\n\u00a0\u00a0\u00a0\u00a0- 'persistentVolumeClaim'\n\u00a0\u00a0hostNetwork: false\n\u00a0\u00a0hostIPC: false\n\u00a0\u00a0hostPID: false\n\u00a0\u00a0runAsUser:\n\u00a0\u00a0\u00a0\u00a0rule: 'MustRunAsNonRoot'\n\u00a0\u00a0supplementalGroups:\n\u00a0\u00a0\u00a0\u00a0rule: 'MustRunAs'\n\u00a0\u00a0\u00a0\u00a0ranges:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- min: 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max: 65535\n\u00a0\u00a0fsGroup:\n\u00a0\u00a0\u00a0\u00a0rule: 'MustRunAs'\n\u00a0\u00a0\u00a0\u00a0ranges:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- min: 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max: 65535\n\u00a0\u00a0readOnlyRootFilesystem: false\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n\u00a0\u00a0name: specific-user-psp\nspec:\n\u00a0\u00a0privileged: false\n\u00a0\u00a0allowPrivilegeEscalation: false\n\u00a0\u00a0hostNetwork: false\n\u00a0\u00a0hostIPC: false\n\u00a0\u00a0hostPID: false\n\u00a0\u00a0runAsUser:\n\u00a0\u00a0\u00a0\u00a0rule: 'MustRunAs'\n\u00a0\u00a0\u00a0\u00a0ranges:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- min: 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max: 3000\n\u00a0\u00a0readOnlyRootFilesystem: false\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n\u00a0\u00a0name: specific-user-pod\nspec:\n\u00a0\u00a0securityContext:\n\u00a0\u00a0\u00a0\u00a0runAsUser: 1000\n\u00a0\u00a0containers:\n\u00a0\u00a0- name: test\n\u00a0\u00a0\u00a0\u00a0image: busybox\n\u00a0\u00a0\u00a0\u00a0securityContext:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0allowPrivilegeEscalation: false\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n\u00a0\u00a0name: frontend-network-policy\nspec:\n\u00a0\u00a0podSelector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: server\n\u00a0\u00a0policyTypes:\n\u00a0\u00a0- Ingress\n\u00a0\u00a0ingress:\n\u00a0\u00a0- from:\n\u00a0\u00a0\u00a0\u00a0- podSelector:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend\n\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0- protocol: TCP\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port: 80\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n\u00a0\u00a0name: full-restriction-policy\n\u00a0\u00a0namespace: development\nspec:\n\u00a0\u00a0policyTypes:\n\u00a0\u00a0- Ingress\n\u00a0\u00a0- Egress\n\u00a0\u00a0podSelector: {}\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n\u00a0\u00a0name: override-restriction-policy\n\u00a0\u00a0namespace: development\nspec:\n\u00a0\u00a0podSelector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: server\n\u00a0\u00a0policyTypes:\n\u00a0\u00a0- Ingress\n\u00a0\u00a0- Egress\n\u00a0\u00a0ingress:\n\u00a0\u00a0- from:\n\u00a0\u00a0\u00a0\u00a0- podSelector:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: frontend\n\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0- protocol: TCP\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port: 443\n\u00a0\u00a0egress:\n\u00a0\u00a0- to:\n\u00a0\u00a0\u00a0\u00a0- podSelector:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: database\n\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0- protocol: TCP\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port: 6379\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n\u00a0\u00a0name: allow-all-egress\nspec:\n\u00a0\u00a0podSelector: {}\n\u00a0\u00a0egress:\n\u00a0\u00a0- {}\n\u00a0\u00a0ingress:\n\u00a0\u00a0- {}\n\u00a0\u00a0policyTypes:\n\u00a0\u00a0- Egress\n\u00a0\u00a0- Ingress\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n\u00a0\u00a0name: specific-ip-policy\nspec:\n\u00a0\u00a0podSelector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: worker\n\u00a0\u00a0policyTypes:\n\u00a0\u00a0- Ingress\n\u00a0\u00a0- Egress\n\u00a0\u00a0ingress:\n\u00a0\u00a0- from:\n\u00a0\u00a0\u00a0\u00a0- ipBlock:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cidr: 157.10.0.0/16\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 157.10.1.0/24\n\u00a0\u00a0egress:\n\u00a0\u00a0- to:\n\u00a0\u00a0\u00a0\u00a0- ipBlock:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cidr: 157.10.0.0/16\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 157.10.1.0/24\n```", "```\n    helm repo add falcosecurity https://falcosecurity.github.io/charts\n    helm repo update\n    ```", "```\n    helm install falco falcosecurity/falco\n    ```", "```\ncustomRules:\n\u00a0\u00a0my-rules.yaml: |-\n\u00a0\u00a0\u00a0\u00a0Rule1\n\u00a0\u00a0\u00a0\u00a0Rule2\n\u00a0\u00a0\u00a0\u00a0etc...\n```", "```\n- rule: Launch Privileged Container\n\u00a0\u00a0desc: Detect the initial process started in a privileged container. Exceptions are made for known trusted images.\n\u00a0\u00a0condition: >\n\u00a0\u00a0\u00a0\u00a0container_started and container\n\u00a0\u00a0\u00a0\u00a0and container.privileged=true\n\u00a0\u00a0\u00a0\u00a0and not falco_privileged_containers\n\u00a0\u00a0\u00a0\u00a0and not user_privileged_containers\n\u00a0\u00a0output: Privileged container started (user=%user.name command=%proc.cmdline %container.info image=%container.image.repository:%container.image.tag)\n\u00a0\u00a0priority: INFO\n\u00a0\u00a0tags: [container, cis, mitre_privilege_escalation, mitre_lateral_movement]\n```", "```\n- macro: container\n\u00a0\u00a0condition: (container.id != host)\n- macro: container_started\n\u00a0\u00a0condition: >\n\u00a0\u00a0\u00a0\u00a0((evt.type = container or\n\u00a0\u00a0\u00a0\u00a0\u00a0(evt.type=execve and evt.dir=< and proc.vpid=1)) and\n\u00a0\u00a0\u00a0\u00a0\u00a0container.image.repository != incomplete)\n- macro: user_sensitive_mount_containers\n\u00a0\u00a0condition: (container.image.repository = docker.io/sysdig/agent)\n- macro: falco_privileged_containers\n\u00a0\u00a0condition: (openshift_image or\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user_trusted_containers or\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container.image.repository in (trusted_images) or\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container.image.repository in (falco_privileged_images) or\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container.image.repository startswith istio/proxy_ or\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container.image.repository startswith quay.io/sysdig)\n- macro: user_privileged_containers\n\u00a0\u00a0condition: (container.image.repository endswith sysdig/agent)\n```", "```\n- list: trusted_images\n\u00a0\u00a0items: []\n```", "```\n- rule: Create Disallowed Pod\n\u00a0\u00a0desc: >\n\u00a0\u00a0\u00a0\u00a0Detect an attempt to start a pod with a container image outside of a list of allowed images.\n\u00a0\u00a0condition: kevt and pod and kcreate and not allowed_k8s_containers\n\u00a0\u00a0output: Pod started with container not in allowed list (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace images=%ka.req.pod.containers.image)\n\u00a0\u00a0priority: WARNING\n\u00a0\u00a0source: k8s_audit\n\u00a0\u00a0tags: [k8s]\n```", "```\n- rule: Create HostNetwork Pod\n\u00a0\u00a0desc: Detect an attempt to start a pod using the host network.\n\u00a0\u00a0condition: kevt and pod and kcreate and ka.req.pod.host_network intersects (true) and not ka.req.pod.containers.image.repository in (falco_hostnetwork_images)\n\u00a0\u00a0output: Pod started using host network (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace images=%ka.req.pod.containers.image)\n\u00a0\u00a0priority: WARNING\n\u00a0\u00a0source: k8s_audit\n\u00a0\u00a0tags: [k8s]\n```"]