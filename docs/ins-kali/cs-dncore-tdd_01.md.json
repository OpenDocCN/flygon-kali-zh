["```cs\npublic void SendSMS()\n{\n    SmppManager smppManager= new SmppManager(); \n    smppManager.SendMessage(\"0802312345\",\"Hello\", \"John\");\n}\n\npublic class SmppManager\n{\n    private string sourceAddress;\n    private SmppClient smppClient;\n\n    public SmppManager()\n    {\n       smppClient = new SmppClient();\n       smppClient.Start();            \n    }        \n\n    public void SendMessage(string recipient, string message, string senderName)\n    {\n       // send message using referenced library            \n    }    \n}\n```", "```cs\n[HttpGet]\npublic ActionResult GetAllTransactions()\n{\n    List<string> years = new List<string>();\n    for (int i = DateTime.Now.Year; i >= 2015; i--)\n         years.Add(i.ToString());\n    List<string> months = new List<string>();\n    for (int j = 1; j <= 12; j++)\n         months.Add(j.ToString());\n    ViewBag.Transactions= GetTransactions(years,months);\n     return View();\n}\n\n[HttpGet]\npublic ActionResult SearchTransactions()\n{\n    List<string> years = new List<string>();\n    for (int i = DateTime.Now.Year; i >= 2015; i--)\n         years.Add(i.ToString());\n    List<string> months = new List<string>();\n    for (int j = 1; j <= 12; j++)\n        months.Add(j.ToString());\n    ViewBag.Years = years;\n    ViewBag.Months = months;\n    return View();\n}\n```", "```cs\npublic void ProcessTransaction(string  username, string password, float transactionAmount, string transactionType, DateTime time, bool canProcess, bool retryOnfailure)\n{\n    //Do something\n}\n```", "```cs\npublic class SMTPGateway\n{\n    private static SMTPGateway smtpGateway=null;\n\n    private SMTPGateway()\n    {\n    }\n\n    public static SMTPGateway SMTPGatewayObject\n    {\n        get\n        {\n            if (smtpGateway==null)\n            {\n                smtpGateway = new SMTPGateway();\n            }\n            return smtpGateway;\n        }\n    }\n} \n```", "```cs\nint x2;\n\nstring xxya;\n```", "```cs\npublic void updatetableloginentries()\n{\n   com.Connection = conn;\n   SqlParameter par1 = new SqlParameter();\n   par1.ParameterName = \"@username\";\n   par1.Value = main.username;\n   com.Parameters.Add(par1);\n   SqlParameter par2 = new SqlParameter();\n   par2.ParameterName = \"@date\";\n   par2.Value = main.date;\n   com.Parameters.Add(par2);\n   SqlParameter par3 = new SqlParameter();\n   par3.ParameterName = \"@logintime\";\n   par3.Value = main.logintime;\n   com.Parameters.Add(par3);\n   SqlParameter par4 = new SqlParameter();\n   par4.ParameterName = \"@logouttime\";\n   par4.Value = DateTime.Now.ToShortTimeString(); ;\n   com.Parameters.Add(par4);\n   com.CommandType = CommandType.Text;\n   com.CommandText = \"update loginentries set logouttime=@logouttime where username=@username and date=@date and logintime=@logintime\";\n   openconn();\n   com.ExecuteNonQuery();\n   closeconn();\n}\n```", "```cs\n//The dependency injection would be done using Ninject\npublic ISmppManager smppManager { get; private set; }\n\npublic void SendSMS()\n{    \n    smppManager.SendMessage(\"0802312345\",\"Hello\", \"John\");\n}\n\npublic class SmppManager\n{\n    private string sourceAddress;\n    private SmppClient smppClient;\n\n    public SmppManager()\n    {\n       smppClient = new SmppClient();\n       smppClient.Start();            \n    }        \n\n    public void SendMessage(string recipient, string message, string senderName)\n    {\n       // send message using referenced library            \n    }    \n}\npublic interface ISmppManager\n{\n    void SendMessage(string recipient, string message, string senderName);\n}\n```", "```cs\npublic class SMTPGateway\n{\n    private static SMTPGateway smtpGateway=null;\n    private static object lockObject= new object();\n\n    private SMTPGateway()\n    {\n    }\n\n    public static SMTPGateway SMTPGatewayObject\n    {\n        get\n        {\n            lock (lockObject)\n            {\n                if (smtpGateway==null)\n                {\n                    smtpGateway = new SMTPGateway();\n                }\n            }\n            return smtpGateway;\n        }\n    }\n} \n```", "```cs\n[HttpGet]\npublic ActionResult GetAllTransactions()\n{\n    var yearsAndMonths=GetYearsAndMonths();\n    ViewBag.Transactions= GetTransactions(yearsAndMonths.Item1,yearsAndMonths.Item2);\n    return View();\n}\n\n[HttpGet]\npublic ActionResult SearchTransactions()\n{\n    var yearsAndMonths=GetYearsAndMonths();\n    ViewBag.Years = yearsAndMonths.Item1;\n    ViewBag.Months = yearsAndMonths.Item2;\n    return View();\n}\n\nprivate (List<string>, List<string>) GetYearsAndMonths(){\n    List<string> years = new List<string>();\n    for (int i = DateTime.Now.Year; i >= 2015; i--)\n         years.Add(i.ToString());\n    List<string> months = new List<string>();\n    for (int j = 1; j <= 12; j++)\n        months.Add(j.ToString());\n    return (years,months);\n}\n```", "```cs\npublic void ProcessTransaction(Transaction transaction)\n{\n    //Do something\n}\n\npublic class Transaction\n{\n    public string  Username{get;set;}\n    public string Password{get;set;}\n    public float TransactionAmount{get;set;}\n    public string TransactionType{get;set;}\n    public DateTime Time{get;set;}\n    public bool CanProcess{get;set;}\n    public bool RetryOnfailure{get;set;}    \n}\n```", "```cs\nint accountNumber;\n\nstring firstName;\n```", "```cs\n///\n/// This class uses SHA1 algorithm for encryption with randomly generated salt for uniqueness\n///\npublic class AESEncryptor\n{\n    //Code goes here\n}\n```", "```cs\npublic bool IsServerOnline()\n{\n    return false;\n}\n\n [Fact]\n public void Test_IsServerOnline_ShouldReturnTrue() \n { \n    bool isOnline=IsServerOnline();   \n\n    Assert.True(isOnline);\n }\n```", "```cs\npublic bool IsServerOnline()\n{\n    string address=\"localhost\";\n    int port=8034;\n    SmppManager smppManager= new SmppManager(address, port); \n    bool isOnline=smppManager.TestConnection();\n    return isOnline;\n}\n\n [Fact]\n public void Test_IsServerOnline_ShouldReturnTrue() \n { \n    bool isOnline=IsServerOnline();   \n\n    Assert.True(isOnline);\n }\n```"]