["```ts\nnpm install -g typescript\n```", "```ts\nnpm install typescript --save-dev\n```", "```ts\ntsc --init\n```", "```ts\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2015\",\n    \"module\": \"commonjs\",\n    \"lib\": [ \"ES2015\", \"dom\" ],\n    \"sourceMap\": true,\n    \"outDir\": \"./script\", \n    \"strict\": true, \n    \"strictNullChecks\": true, \n    \"strictFunctionTypes\": true, \n    \"noImplicitThis\": true, \n    \"alwaysStrict\": true, \n    \"noImplicitReturns\": true, \n    \"noFallthroughCasesInSwitch\": true,\n    \"esModuleInterop\": true,\n    \"experimentalDecorators\": true, \n  }\n}\n```", "```ts\nclass RangeValidationBase {\n     constructor(private start : number, private end : number) { }\n     protected RangeCheck(value : number) : boolean {\n         return value >= this.start && value <= this.end;\n     }\n     protected GetNumber(value : string) : number {\n        return new Number(value).valueOf();\n     }\n }\n```", "```ts\n private start : number = 0;\n private end : number = 0;\n constructor(start : number, end : number) {\n     this.start = start;\n     this.end = end;\n }\n```", "```ts\nclass SeparateTypeRangeValidation extends RangeValidationBase {\n     IsInRangeString(value : string) : boolean {\n         return this.RangeCheck(this.GetNumber(value));\n     }\n     IsInRangeNumber(value : number) : boolean {\n         return this.RangeCheck(value);\n     }\n }\n```", "```ts\nclass AnyRangeValidation extends RangeValidationBase {\n     IsInRange(value : any) : boolean {\n         if (typeof value === \"number\") {\n             return this.RangeCheck(value);\n         } else if (typeof value === \"string\") {\n             return this.RangeCheck(this.GetNumber(value));\n         }\n         return false;\n     }\n }\n```", "```ts\nclass UnionRangeValidation extends RangeValidationBase {\n     IsInRange(value : string | number) : boolean {\n         if (typeof value === \"number\") {\n             return this.RangeCheck(value);\n         }\n         return this.RangeCheck(this.GetNumber(value));\n     }\n }\n```", "```ts\nclass Grid {\n     Width : number = 0;\n     Height : number = 0;\n }\n class Margin {\n     Left : number = 0;\n     Top : number = 0;\n }\n```", "```ts\nfunction ConsolidatedGrid(grid : Grid, margin : Margin) : Grid & Margin {\n     let consolidatedGrid = <Grid & Margin>{};\n     consolidatedGrid.Width = grid.Width;\n     consolidatedGrid.Height = grid.Height;\n     consolidatedGrid.Left = margin.Left;\n     consolidatedGrid.Top = margin.Top;\n     return consolidatedGrid;\n }\n```", "```ts\nclass Margin {\n     Left : number = 0;\n     Top : number = 0;\n     Width : number = 10;\n     Height : number = 20;\n }\n```", "```ts\nfunction ConsolidatedGrid(grid : Grid, margin : Margin) : Grid & Margin {\n     let consolidatedGrid = <Grid & Margin>{};\n     consolidatedGrid.Width = grid.Width + margin.Width;\n     consolidatedGrid.Height = grid.Height + margin.Height;\n     consolidatedGrid.Left = margin.Left;\n     consolidatedGrid.Top = margin.Top;\n     return consolidatedGrid;\n }\n```", "```ts\nclass Grid {\n     Width : number = 0;\n     Height : number = 0;\n     Weight : number = 0;\n }\n class Margin {\n     Left : number = 0;\n     Top : number = 0;\n     Width : number = 10;\n     Height : number = 20;\n     Weight : string = \"1\";\n }\n```", "```ts\nconsolidatedGrid.Weight = grid.Weight + new          \n    Number(margin.Weight).valueOf();\n```", "```ts\nerror TS2322: Type 'number' is not assignable to type 'number & string'.\n   Type 'number' is not assignable to type 'string'.\n```", "```ts\nclass Grid {\n     Width : number = 0;\n     Height : number = 0;\n     Padding : number;\n }\n class Margin {\n     Left : number = 0;\n     Top : number = 0;\n     Width : number = 10;\n     Height : number = 20;\n     Padding?: number;\n }\n```", "```ts\nconsolidatedGrid.Padding = margin.Padding;\n```", "```ts\nconsolidatedGrid.Padding = margin.Padding ? margin.Padding : grid.Padding;\n```", "```ts\ntype StringOrNumber = string | number;\n```", "```ts\nclass UnionRangeValidationWithTypeAlias extends RangeValidationBase {\n     IsInRange(value : StringOrNumber) : boolean {\n         if (typeof value === \"number\") {\n             return this.RangeCheck(value);\n         }\n         return this.RangeCheck(this.GetNumber(value));\n     }\n }\n```", "```ts\ntype NullableStringOrNumber = StringOrNumber | null;\n```", "```ts\nlet total : string | number = 10;\nif (new UnionRangeValidationWithTypeAlias(0,100).IsInRange(total)) {\n    console.log(`This value is in range`);\n}\n```", "```ts\nfunction ConsolidatedGrid(grid : Grid, margin : Margin) : Grid  & Margin {\n    let consolidatedGrid = <Grid & Margin>{...margin};\n    consolidatedGrid.Width += grid.Width;\n    consolidatedGrid.Height += grid.Height;\n    consolidatedGrid.Padding = margin.Padding ? margin.Padding : \n    grid.Padding;\n    return consolidatedGrid;\n}\n```", "```ts\nlet consolidatedGrid = <Grid & Margin>{\u2026grid, ...margin};\n```", "```ts\nlet consolidatedGrid = <Grid & Margin>{...margin, \u2026grid };\n```", "```ts\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s,\n            p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction ConsolidatedGrid(grid, margin) {\n    var consolidatedGrid = __assign({}, margin, grid);\n    consolidatedGrid.Width += grid.Width;\n    consolidatedGrid.Height += grid.Height;\n    consolidatedGrid.Padding = margin.Padding ? margin.Padding : \n    grid.Padding;\n    return consolidatedGrid;\n}\n```", "```ts\nfunction ConsolidatedGrid(grid, margin) {\n    let consolidatedGrid = Object.assign({}, margin, grid);\n    consolidatedGrid.Width += grid.Width;\n    consolidatedGrid.Height += grid.Height;\n    consolidatedGrid.Padding = margin.Padding ? margin.Padding : \n    grid.Padding;\n    return consolidatedGrid;\n}\n```", "```ts\nlet guitar = { manufacturer: 'Ibanez', type : 'Jem 777', strings : 6 };\n```", "```ts\nconst manufacturer = guitar.manufacturer;\nconst type = guitar.type;\nconst strings = guitar.strings;\n```", "```ts\nlet {manufacturer, type, strings} = guitar;\n```", "```ts\nlet {manufacturer : maker, type, strings} = guitar;\n```", "```ts\nlet { manufacturer, ...details } = guitar;\n```", "```ts\n// Compiled as ES5\nvar manufacturer = guitar.manufacturer, details = __rest(guitar, [\"manufacturer\"]);\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && \n    e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length;\n        i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\n```", "```ts\nconst instruments = [ 'Guitar', 'Violin', 'Oboe', 'Drums' ];\nconst gtr = instruments[0];\nconst violin = instruments[1];\nconst oboe = instruments[2];\nconst drums = instruments[3];\n```", "```ts\nlet [ gtr, violin, oboe, drums ] = instruments;\n```", "```ts\nlet [gtr, ...instrumentslice] = instruments;\n```", "```ts\n// Compiled as ES5\nvar gtr = instruments[0], instrumentslice = instruments.slice(1);\n```", "```ts\nfunction PrintInstruments(log : string, ...instruments : string[]) : void {\n    console.log(log);\n    instruments.forEach(instrument => {\n        console.log(instrument);\n    });\n}\nPrintInstruments('Music Shop Inventory', 'Guitar', 'Drums', 'Clarinet', 'Clavinova');\n```", "```ts\nfunction PrintInstruments(log) {\n    var instruments = [];\n    // As our rest parameter starts at the 1st position in the list of \n    // arguments,\n    // our index starts at 1.\n    for (var _i = 1; _i < arguments.length; _i++) {\n        instruments[_i - 1] = arguments[_i];\n    }\n    console.log(log);\n    instruments.forEach(function (instrument) {\n        console.log(instrument);\n    });\n}\n```", "```ts\nfunction PrintInstruments(log, ...instruments) {\n    console.log(log);\n    instruments.forEach(instrument => {\n        console.log(instrument);\n    });\n}\n```", "```ts\ninterface IDecoratorExample {\n    AnyoneCanRun(args:string) : void;\n    AdminOnly(args:string) : void;\n}\nclass NoRoleCheck implements IDecoratorExample {\n    AnyoneCanRun(args: string): void {\n        console.log(args);\n    }   \n    AdminOnly(args: string): void {\n        console.log(args);\n    }\n}\n```", "```ts\nlet currentUser = {user: \"peter\", roles : [{role:\"user\"}, {role:\"admin\"}] };\nfunction TestDecoratorExample(decoratorMethod : IDecoratorExample) {\n    console.log(`Current user ${currentUser.user}`);\n    decoratorMethod.AnyoneCanRun(`Running as user`);\n    decoratorMethod.AdminOnly(`Running as admin`);       \n}\nTestDecoratorExample(new NoRoleCheck());\n```", "```ts\nCurrent user Peter\nRunning as user\nRunning as admin\n```", "```ts\nfunction IsInRole(role : string) : boolean {\n    return currentUser.roles.some(r => r.role === role);\n}\n```", "```ts\nAnyoneCanRun(args: string): void {\n    if (!IsInRole(\"user\")) {\n        console.log(`${currentUser.user} is not in the user role`);\n        return;\n    };\n    console.log(args);\n}   \nAdminOnly(args: string): void {\n    if (!IsInRole(\"admin\")) {\n        console.log(`${currentUser.user} is not in the admin role`);\n    };\n    console.log(args);\n}\n```", "```ts\ntsc --target ES5 --experimentalDecorators\n```", "```ts\n\"compilerOptions\": {\n        \"target\": \"ES5\",\n// other parameters\u2026.\n        \"experimentalDecorators\": true\n    }\n```", "```ts\nfunction Admin(target: any, propertyKey : string | symbol, descriptor : PropertyDescriptor) {\n        let originalMethod = descriptor.value;\n        descriptor.value = function() {\n            if (IsInRole(`admin`)) {\n                originalMethod.apply(this, arguments);\n                return;\n            }\n            console.log(`${currentUser.user} is not in the admin role`);\n        }\n        return descriptor;\n    }\n```", "```ts\nfunction \u2026(target: any, propertyKey : string | symbol, descriptor : PropertyDescriptor)\n```", "```ts\nlet originalMethod = descriptor.value;\ndescriptor.value = function() {\n    ...\n}\nreturn descriptor;\n```", "```ts\nif (IsInRole(`admin`)) {\n    originalMethod.apply(this, arguments);\n    return;\n}\nconsole.log(`${currentUser.user} is not in the admin role`);\n```", "```ts\nclass DecoratedExampleMethodDecoration implements IDecoratorExample {\n    AnyoneCanRun(args:string) : void {\n        console.log(args);\n    }\n    @Admin\n    AdminOnly(args:string) : void {\n        console.log(args);\n    }\n}\n```", "```ts\nfunction Role(role : string) {\n    return function(target: any, propertyKey : string | symbol, descriptor \n    : PropertyDescriptor) {\n        let originalMethod = descriptor.value;\n        descriptor.value = function() {\n            if (IsInRole(role)) {\n                originalMethod.apply(this, arguments);\n                return;\n            }\n            console.log(`${currentUser.user} is not in the ${role} role`);\n        }\n        return descriptor;\n    }\n}\n```", "```ts\nclass DecoratedExampleMethodDecoration implements IDecoratorExample {\n    @Role(\"user\") // Note, no semi-colon\n    AnyoneCanRun(args:string) : void {\n        console.log(args);\n    }\n    @Role(\"admin\")\n    AdminOnly(args:string) : void {\n        console.log(args);\n    }\n}\n```", "```ts\nfunction Role(role : string) {\n    return function(constructor : Function) {\n        if (!IsInRole (role)) {\n            throw new Error(`The user is not authorized to access this class`);\n        }\n    }\n}\n```", "```ts\n@Role (\"admin\")\nclass RestrictedClass {\n    constructor() {\n        console.log(`Inside the constructor`);\n    }\n    Validate() {\n        console.log(`Validating`);\n    }\n}\n```", "```ts\n@Role (\"admin\")\n@Log(\u201cCreating RestrictedClass\u201d)\nclass RestrictedClass {\n    constructor() {\n        console.log(`Inside the constructor`);\n    }\n    Validate() {\n        console.log(`Validating`);\n    }\n}\n```", "```ts\nclass ActiveRecord {\n    Deleted = false;\n}\nclass Person extends ActiveRecord {\n    constructor(firstName : string, lastName : string) {\n        this.FirstName = firstName;\n        this.LastName = lastName;\n    }\n\n    FirstName : string;\n    LastName : string;\n} \n```", "```ts\ntype Constructor<T ={}> = new(...args: any[]) => T;\n```", "```ts\nfunction RecordStatus<T extends Constructor>(base : T) {\n    return class extends base {\n        Deleted : boolean = false;\n    }\n}\n```", "```ts\nconst ActivePerson = RecordStatus(Person);\n```", "```ts\nlet activePerson = new ActivePerson(\"Peter\", \"O'Hanlon\");\nactivePerson.Deleted = true;\n```", "```ts\nfunction Timestamp<T extends Constructor>(base : T) {\n return class extends base {\n   Updated : Date = new Date();\n }\n}\n```", "```ts\nconst  ActivePerson  =  RecordStatus(Timestamp(Person));\n```", "```ts\nfunction RecordStatus<T extends Constructor>(base : T) {\n    return class extends base {\n        private deleted : boolean = false;\n        get Deleted() : boolean {\n            return this.deleted;\n        }\n        Delete() : void {\n            this.deleted = true;\n            console.log(`The record has been marked as deleted.`);\n        }\n    }\n}\n```", "```ts\nfunction DeletePerson(person : ActivePerson) {\n     person.Delete();\n}\n```", "```ts\nclass QueueOfInt {\n    private queue : number[]= [];\n\n    public Push(value : number) : void {\n        this.queue.push(value);\n    }\n\n    public Pop() : number | undefined {\n        return this.queue.shift();\n    }\n}\n```", "```ts\nconst intQueue : QueueOfInt = new QueueOfInt();\nintQueue.Push(10);\nintQueue.Push(35);\nconsole.log(intQueue.Pop()); // Prints 10\nconsole.log(intQueue.Pop()); // Prints 35\n```", "```ts\nclass QueueOfString {\n    private queue : string[]= [];\n\n    public Push(value : string) : void {\n        this.queue.push(value);\n    }\n\n    public Pop() : string | undefined {\n        return this.queue.shift();\n    }\n}\n```", "```ts\nclass Queue<T> {\n    private queue : T[]= [];\n\n    public Push(value : T) : void {\n        this.queue.push(value);\n    }\n\n    public Pop() : T | undefined {\n        return this.queue.shift();\n    }\n}\n```", "```ts\nclass Queue<T> {\n}\n```", "```ts\nprivate queue : T[]= [];\n```", "```ts\npublic Push(value : T) : void {\n    this.queue.push(value);\n}\n\npublic Pop() : T | undefined {\n    return this.queue.shift();\n}\n```", "```ts\nconst queue : Queue<number> = new Queue<number>();\nconst stringQueue : Queue<string> = new Queue<string>();\nqueue.Push(10);\nqueue.Push(35);\nconsole.log(queue.Pop());\nconsole.log(queue.Pop());\nstringQueue.Push(`Hello`);\nstringQueue.Push(`Generics`);\nconsole.log(stringQueue.Pop());\nconsole.log(stringQueue.Pop());\n```", "```ts\nfunction KeyValuePair<TKey, TValue>(key : TKey, value : TValue)\n```", "```ts\ninterface IStream {\n    ReadStream() : Int8Array; // Array of bytes\n}\nclass Data<T> {\n    ReadStream(stream : T) {\n        let output = stream.ReadStream();\n        console.log(output.byteLength);\n    }\n}\n```", "```ts\nclass Data<T extends IStream> {\n    ReadStream(stream : T) {\n        let output = stream.ReadStream();\n        console.log(output.byteLength);\n    }\n}\n```", "```ts\nclass WebStream implements IStream {\n    ReadStream(): Int8Array {\n        let array : Int8Array = new Int8Array(8);\n        for (let index : number = 0; index < array.length; index++){\n            array[index] = index + 3; \n        }\n        return array;\n    }\n}\nclass DiskStream implements IStream {\n    ReadStream(): Int8Array {\n        let array : Int8Array = new Int8Array(20); \n        for (let index : number = 0; index < array.length; index++){\n            array[index] = index + 3;\n        }\n        return array;\n    }\n}\n```", "```ts\nconst webStream = new Data<WebStream>();\nconst diskStream = new Data<DiskStream>();\n```", "```ts\nwebStream.ReadStream(new WebStream());\ndiskStream.ReadStream(new DiskStream());\n```", "```ts\nclass Data {\n    ReadStream<T extends IStream>(stream : T) {\n        let output = stream.ReadStream();\n        console.log(output.byteLength);\n    }\n}\n```", "```ts\nenum Genre {\n    Rock,\n    CountryAndWestern,\n    Classical,\n    Pop,\n    HeavyMetal\n}\n```", "```ts\nclass MusicCollection {\n    private readonly collection : Map<Genre, string[]>;\n    constructor() {\n        this.collection = new Map<Genre, string[]>();\n    }\n}\n```", "```ts\npublic Add(genre : Genre, artist : string[]) : void {\n    this.collection.set(genre, artist);\n}\n```", "```ts\npublic Get(genre : Genre) : string[] | undefined {\n    return this.collection.get(genre);\n}\n```", "```ts\nlet collection = new MusicCollection();\ncollection.Add(Genre.Classical, [`Debussy`, `Bach`, `Elgar`, `Beethoven`]);\ncollection.Add(Genre.CountryAndWestern, [`Dolly Parton`, `Toby Keith`, `Willie Nelson`]);\ncollection.Add(Genre.HeavyMetal, [`Tygers of Pan Tang`, `Saxon`, `Doro`]);\ncollection.Add(Genre.Pop, [`Michael Jackson`, `Abba`, `The Spice Girls`]);\ncollection.Add(Genre.Rock, [`Deep Purple`, `Led Zeppelin`, `The Dixie Dregs`]);\n```", "```ts\npublic AddArtist(genre: Genre, artist : string) : void {\n    if (!this.collection.has(genre)) {\n        this.collection.set(genre, []);\n    }\n    let artists = this.collection.get(genre);\n    if (artists) {\n        artists.push(artist);\n    }\n}\n```", "```ts\ncollection.AddArtist(Genre.HeavyMetal, `Iron Maiden`);\n// At this point, HeavyMetal just contains Iron Maiden\ncollection.Add(Genre.HeavyMetal, [`Tygers of Pan Tang`, `Saxon`, `Doro`]);\n// Now HeavyMetal just contains Tygers of Pan Tang, Saxon and Doro\n```", "```ts\npublic Add(genre : Genre, artist : string[]) : void {\n    for (let individual of artist) {\n        this.AddArtist(genre, individual);\n    }\n}\n```", "```ts\nfunction ExpensiveWebCall(time : number) : Promise<void> {\n    return new Promise((resolve, reject) => setTimeout(resolve, time));\n}\nclass MyWebService {\n    CallExpensiveWebOperation() : void {\n        ExpensiveWebCall(4000).then(()=> console.log(`Finished web \n        service`))\n            .catch(()=> console.log(`Expensive web call failure`));\n    }\n}\n```", "```ts\nconsole.log(`calling service`);\nnew MyWebService().CallExpensiveWebOperation();\nconsole.log(`Processing continues until the web service returns`);\n```", "```ts\ncalling service\nProcessing continues until the web service returns\nFinished web service\n```", "```ts\nfunction ExpensiveWebCall(time : number) {\n    return  new Promise((resolve, reject) => setTimeout(resolve, time));\n}\nclass MyWebService {\n    async CallExpensiveWebOperation() {\n        await ExpensiveWebCall(4000);\n        console.log(`Finished web service`);\n    }\n}\n```", "```ts\nclass MyWebService {\n    async CallExpensiveWebOperation() {\n        try {\n            await ExpensiveWebCall(4000);\n            console.log(`Finished web service`); \n        } catch (error) {\n            console.log(`Caught ${error}`);\n        }\n    }\n}\n```", "```ts\n<!doctype html>\n<html lang=\"en\">\n   <head>\n      <!-- Required meta tags -->\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, \n      shrink-to-fit=no\">\n      <link rel=\"stylesheet\"href=\"https://stackpath.bootstrapcdn.com/bootstrap\n      /4.1.3/css/bootstrap.min.css\" integrity=\"sha384-\n      MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\"\n      crossorigin=\"anonymous\">\n      <title>\n         <\n         <Template Bootstrap>\n         >\n      </title>\n   </head>\n   <body>\n      <!-- \n         Content goes here...\n         Start with the container.\n         -->\n      <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" \n         integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" \n         crossorigin=\"anonymous\"></script>\n      <script \n         src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" \n         integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" \n         crossorigin=\"anonymous\"></script>\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" \n         integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" \n         crossorigin=\"anonymous\"></script>\n   </body>\n</html>\n```", "```ts\n<div class=\"container\">\n\n</div>\n```", "```ts\n<div class=\"row\">\n  <div class=\"col-sm-3\">Hello</div>\n  <div class=\"col-sm-6\">Hello</div>\n  <div class=\"col-sm-3\">Hello</div>\n</div>\n```", "```ts\n<div class=\"row\">\n  <div class=\"col-sm-3 col-lg-5\">Hello</div>\n  <div class=\"col-sm-6 col-lg-2\">Hello</div>\n  <div class=\"col-sm-3 col-lg-5\">Hello</div>\n</div>\n```", "```ts\n<div class=\"row\">\n  <div class=\"col-md-3\">\n    <div class=\"jumbotron\">\n      <h2>\n        Hello, world!\n      </h2>\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus \n        eget mi odio. Praesent a neque sed purus sodales interdum. In augue sapien, \n        molestie id lacus eleifend...\n      </p>\n      <p>\n        <a class=\"btn btn-primary btn-large\" href=\"#\">Learn more</a>\n      </p>\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n    <h2>\n      Heading\n    </h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus \n      eget mi odio. Praesent a neque sed purus sodales interdum. In augue sapien, \n      molestie id lacus eleifend...\n    </p>\n    <p>\n      <a class=\"btn\" href=\"#\">View details</a>\n    </p>\n  </div>\n  <div class=\"col-md-3\">\n    <button type=\"button\" class=\"btn btn-primary btn-lg btn-block active\">\n      Button\n    </button>\n  </div>\n</div>\n```", "```ts\nclass FahrenheitToCelsius {\n    Convert(temperature : number) : number {\n        return (temperature - 32) * 5 / 9;\n    }\n}\n\nclass CelsiusToFahrenheit {\n    Convert(temperature : number) : number {\n        return (temperature * 9/5) + 32;\n    }\n}\n```", "```ts\nclass Command {\n    public constructor(public Name : string = \"\", public Action : Function = new Function()){}\n}\n```"]