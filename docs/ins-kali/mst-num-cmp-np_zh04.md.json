["```py\nB0 = (1748*2712) - (158*27975) / (10*2712) - (158)^2\u00a0= 320526/2156 = 148.66\n\nB1 = (10*27975) - (158*1748) / (10*2712) - (158)^2\u00a0= 1.65\n```", "```py\nIn [1]: import numpy as np\n        import pandas as pd\n        from sklearn.cross_validation import train_test_split\n        from sklearn.linear_model import LinearRegression\n        import matplotlib.pyplot as plt\n        %matplotlib inline\nIn [2]: from sklearn.datasets import load_boston\n        dataset = load_boston()\n        samples , label, feature_names = dataset.data, dataset.target, dataset.feature_names\nIn [3]: bostondf = pd.DataFrame(dataset.data)\n        bostondf.columns = dataset.feature_names\n        bostondf['Target Price'] = dataset.target\n        bostondf.head()\nOut[3]:   CRIM    ZN    INDUS CHAS  NOX   RM    AGE   DIS    RAD  TAX  PTRATIO  B      LSTAT  Target Price\n 0 0.00632  18.0  2.31  0.0  0.538  6.575 65.2  4.0900 1.0  296.0  15.3  396.90   4.98       24.0\n 1 0.02731  0.0   7.07  0.0  0.469  6.421 78.9  4.9671 2.0  242.0  17.8  396.90   9.14       21.6\n 2 0.02729  0.0   7.07  0.0  0.469  7.185 61.1  4.9671 2.0  242.0  17.8  392.83   4.03       34.7\n 3 0.03237  0.0   2.18  0.0  0.458  6.998 45.8  6.0622 3.0  222.0  18.7  394.63   2.94       33.4\n 4 0.06905  0.0   2.18  0.0  0.458  7.147 54.2  6.0622 3.0  222.0  18.7  396.90   5.33       36.2\n```", "```py\nIn [4]: import matplotlib.pyplot as plt\n        bostondf.plot(x='RM', y='Target Price', style= 'o')\n        plt.title('RM vs Target Price')\n        plt.ylabel('Target Price')\n        plt.show()\n```", "```py\nIn [5]: def prediction(X, coefficient, intercept):\n        return X*coefficient + intercept\n```", "```py\nIn [6]: def cost_function(X, Y, coefficient, intercept):\n        MSE = 0.0\n        for i in range(len(X)):\n            MSE += (Y[i] - (coefficient*X[i] + intercept))**2\n        return MSE / len(X)\n```", "```py\nIn [7]: def update_weights(X, Y, coefficient, intercept, learning_rate):\n            coefficient_derivative = 0\n            intercept_derivative = 0\n\n            for i in range(len(X)):\n                coefficient_derivative += -2*X[i] * (Y[i] - (coefficient*X[i] + intercept))\n                intercept_derivative += -2*(Y[i] - (coefficient*X[i] + intercept))\n\n            coefficient -= (coefficient_derivative / len(X)) * learning_rate\n            intercept -= (intercept_derivative / len(X)) * learning_rate\n\n            return coefficient, intercept\n```", "```py\nIn [8]: def train(X, Y, coefficient, intercept, LearningRate, iteration):\n            cost_hist = []\n            for i in range(iteration):\n                coefficient, intercept = update_weights(X, Y, coefficient, intercept, learning_cost =                     cost_function(X, Y, coefficient, intercept)\n                cost_hist.append(cost)\n            return coefficient, intercept, cost_hist\n```", "```py\nIn [9]: learning_rate = 0.01\n        iteration = 10001\n        coefficient = 0.3\n        intercept = 2\n```", "```py\n      X = bostondf.iloc[:, 5:6].values\n        Y = bostondf.iloc[:, 13:14].values\n\n        coefficient, intercept, cost_history = train(X, Y, coefficient, intercept, learning_rate, iteration)\n```", "```py\ncoefficient, intercept, cost_history = train(X, Y, coefficient, intercept = 2, learning_rate = 0.01, iteration = 10001)\n```", "```py\nIn [10]: coefficient\nOut[10]: array([8.57526661])\nIn [11]: intercept\nOut[11]: array([-31.31931428])\nIn [12]: cost_history\n         array([54.18545801]),\n        array([54.18036786]),\n        array([54.17528017]),\n        array([54.17019493]),\n        array([54.16511212]),\n        array([54.16003177]),\n        array([54.15495385]),\n        array([54.14987838]),\n        array([54.14480535]),\n        array([54.13973476]),\n        array([54.13466661]),\n        array([54.12960089]),\n        array([54.12453761]),\n        array([54.11947677]),\n        array([54.11441836]),\n        array([54.10936238]),\n        array([54.10430883]),\n        ...]\n```", "```py\nIn [13]: y_hat = X*coefficient + intercept\n         plt.plot(X, Y, 'bo')\n         plt.plot(X, y_hat)\n         plt.show()\n```", "```py\nIn [14]: import numpy as np\n         import pandas as pd\n         from scipy import stats\n         from sklearn.cross_validation import train_test_split\n         from sklearn.linear_model import LinearRegression\nIn [15]: from sklearn.datasets import load_boston\n         dataset = load_boston()\nIn [16]: samples , label, feature_names = dataset.data, dataset.target, dataset.feature_names\nIn [17]: samples_trim = stats.trimboth(samples, 0.1)\n         label_trim = stats.trimboth(label, 0.1)\nIn [18]: print(samples.shape)\n         print(label.shape)\n         (506, 13)\n         (506,)\nIn [19]: print(samples_trim.shape)\n         print(label_trim.shape)\n         (406, 13)\n         (406,)\n```", "```py\nIn [20]: from sklearn.model_selection import train_test_split\n         samples_train, samples_test, label_train, label_test = train_test_split(samples_trim, In [21]:          In [21]: print(samples_train.shape)\n         print(samples_test.shape)\n         print(label_train.shape)\n         print(label_test.shape)\n         (324, 13)\n         (82, 13)\n         (324,)\n         (82,)\nIn [22]: regressor = LinearRegression()\n         regressor.fit(samples_train, label_train)\nOut[22]: LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)\nIn [23]: regressor.coef_\nOut[23]: array([ 2.12924665e-01, 9.16706914e-02, 1.04316071e-01, -3.18634008e-14,\n                 5.34177385e+00, -7.81823481e-02, 1.91366342e-02, 2.81852916e-01,\n                 3.19533878e-04, -4.24007416e-03, 1.94206366e-01, 3.96802252e-02,\n                 3.81858253e-01])\nIn [24]: regressor.intercept_\nOut[24]: -6.899291747292615\n```", "```py\nIn [25]: label_pred = regressor.predict(samples_test)\nIn [26]: plt.scatter(label_test, label_pred)\n         plt.xlabel(\"Prices\")\n         plt.ylabel(\"Predicted Prices\")\n         plt.title(\"Prices vs Predicted Prices\")\n         plt.axis(\"equal\")\nOut[26]: (11.770143369175626, 34.22985663082437, 10.865962968036989, 34.20549738482051)\n```", "```py\nIn [27]: from sklearn.metrics import mean_squared_error\n         from sklearn.metrics import r2_score\n         mse = mean_squared_error(label_test, label_pred)\n         r2 = r2_score(label_test, label_pred)\n         print(mse)\n         print(r2)\n         2.032691267250478\n         0.9154474686142619\n```"]