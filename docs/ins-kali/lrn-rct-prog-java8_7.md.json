["```java\npublic class SortedObservableTest {\n  private Observable<String> tested;\n  private List<String> expected;\n  @Before\n  public void before() {\n    tested = CreateObservable.<String>sorted(\n (a, b) -> a.compareTo(b),\n \"Star\", \"Bar\", \"Car\", \"War\", \"Far\", \"Jar\");\n    expected = Arrays.asList(\n      \"Bar\", \"Car\", \"Far\", \"Jar\", \"Star\", \"War\"\n    );\n  }\n  TestData data = new TestData();\n  tested.subscribe(\n    (v) -> data.getResult().add(v),\n    (e) -> data.setError(e),\n    () -> data.setCompleted(true)\n  );\n  Assert.assertTrue(data.isCompleted());\n  Assert.assertNull(data.getError());\n  Assert.assertEquals(expected, data.getResult());\n}\n```", "```java\n@SafeVarargs\npublic static <T> Observable<T> sorted(\n  Comparator<? super T> comparator,\n  T... data) {\n    List<T> listData = Arrays.asList(data);\n    listData.sort(comparator);\n  return Observable.from(listData);\n}\n```", "```java\n    Observable\n      .interval(100L, TimeUnit.MILLISECONDS)\n      .take(5)\n      .toBlocking()\n     .forEach(System.out::println);\n    System.out.println(\"END\");\n    ```", "```java\n    Integer first = Observable\n      .range(3, 13).toBlocking().first();\n      System.out.println(first);\n      Integer last = Observable\n      .range(3, 13).toBlocking().last();\n      System.out.println(last);\n    ```", "```java\n    Iterable<Long> next = Observable\n      .interval(100L, TimeUnit.MILLISECONDS)\n      .toBlocking()\n     .next();\n    Iterator<Long> iterator = next.iterator();\n    System.out.println(iterator.next());\n    System.out.println(iterator.next());\n    System.out.println(iterator.next());\n    ```", "```java\nIterable<Long> latest = Observable\n  .interval(1000L, TimeUnit.MILLISECONDS)\n  .toBlocking()\n .latest();\niterator = latest.iterator();\nSystem.out.println(iterator.next());\nThread.sleep(5500L);\nSystem.out.println(iterator.next());\nSystem.out.println(iterator.next());\n```", "```java\nObservable\n  .range(10, 100)\n  .count()\n  .subscribe(System.out::println);\n```", "```java\nList<Integer> list = Observable\n  .range(5, 15)\n  .toList()\n  .subscribe(System.out::println);\n```", "```java\n[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n```", "```java\nList<Integer> single = Observable\n  .range(5, 15)\n  .toList()\n .toBlocking().single();\n```", "```java\n@Test\npublic void testUsingBlockingObservable() {\n  List<String> result = tested\n    .toList()\n .toBlocking()\n .single();\n  Assert.assertEquals(expected, result);\n}\n```", "```java\n@Test\npublic void testUsingTestSubscriber() {\n  TestSubscriber<String> subscriber =\n new TestSubscriber<String>();\n  tested.subscribe(subscriber);\n  Assert.assertEquals(expected, subscriber.getOnNextEvents());\n  Assert.assertSame(1, subscriber.getOnCompletedEvents().size());\n  Assert.assertTrue(subscriber.getOnErrorEvents().isEmpty());\n  Assert.assertTrue(subscriber.isUnsubscribed());\n}\n```", "```java\n@Test\npublic void testUsingTestSubscriberAssertions() {\n  TestSubscriber<String> subscriber = new TestSubscriber<String>();\n  tested.subscribe(subscriber);\n subscriber.assertReceivedOnNext(expected);\n subscriber.assertTerminalEvent();\n subscriber.assertNoErrors();\n subscriber.assertUnsubscribed();\n}\n```", "```java\nObservable<Long> interval(List<Long> gaps, TimeUnit unit, Scheduler scheduler)\n```", "```java\n@Test\npublic void testBehavesAsNormalIntervalWithOneGap() {\n  TestScheduler testScheduler = Schedulers.test(); // (1)\n  Observable<Long> interval = CreateObservable.interval(\n Arrays.asList(100L), TimeUnit.MILLISECONDS, testScheduler\n ); // (2)\n  TestSubscriber<Long> subscriber = new TestSubscriber<Long>();\n  interval.subscribe(subscriber); // (3)\n  assertTrue(subscriber.getOnNextEvents().isEmpty()); // (4)\n  testScheduler.advanceTimeBy(101L, TimeUnit.MILLISECONDS); // (5)\n  assertEquals(Arrays.asList(0L), subscriber.getOnNextEvents());\n  testScheduler.advanceTimeBy(101L, TimeUnit.MILLISECONDS); // (6)\n  assertEquals(\n    Arrays.asList(0L, 1L),\n    subscriber.getOnNextEvents()\n  );\n  testScheduler.advanceTimeTo(1L, TimeUnit.SECONDS); // (7)\n  assertEquals(\n    Arrays.asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L),\n    subscriber.getOnNextEvents()\n  );\n}\n```"]