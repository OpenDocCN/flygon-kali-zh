["```java\npublic interface Sociable {\n    String getName();\n    int getAge();\n    void actAlone();\n    void danceAlone();\n    void danceWith(Sociable partner);\n    void singALyric(String lyric);\n    void speak(String message);\n    void welcome(Sociable other);\n    void sayGoodbyeTo(Sociable other);\n}\n```", "```java\nSocialAnimal abstract class. The code file for the sample is included in the java_9_oop_chapter_10_01 folder, in the example10_01.java file.\n```", "```java\npublic abstract class SocialAnimal implements Sociable, Comparable<Sociable> {\n    public final String name;\n    public final int age;\n\n    public SocialAnimal(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    protected void printMessageWithNameAsPrefix(String message) {\n        System.out.println(\n            String.format(\"%s %s\", \n                getName(), \n                message));\n    }\n\n    public abstract String getDanceRepresentation();\n\n    public abstract String getFirstSoundInWords();\n\n    public abstract String getSecondSoundInWords();\n\n    public abstract String getThirdSoundInWords();\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getAge() {\n        return age;\n    }\n```", "```java\nSocialAnimal class declares a constructor that assigns the value of the required name and age arguments to the immutable name and age protected fields. Then the class declares a protected printMessageWithNameAsPrefix method that receives a message and prints the name for the SocialAnimal followed by a space and this message. Many methods will call this method to easily add the name as a prefix for many messages.\nSocialAnimal abstract class. The code file for the sample is included in the java_9_oop_chapter_10_01 folder, in the example10_01.java file.\n```", "```java\n    @Override\n    public void actAlone() {\n        printMessageWithNameAsPrefix(\"to be or not to be\");\n    }\n\n    @Override\n    public void danceAlone() {\n        printMessageWithNameAsPrefix(\n            String.format(\"dances alone %s\", \n                getDanceRepresentation()));\n    }\n\n    @Override\n    public void danceWith(Sociable partner) {\n        printMessageWithNameAsPrefix(\n            String.format(\"dances with %s %s\", \n                partner.getName(),\n                getDanceRepresentation()));\n    }\n\n    @Override\n    public void singALyric(String lyric) {\n        printMessageWithNameAsPrefix(\n            String.format(\"sings %s %s %s %s\", \n                lyric,\n                getFirstSoundInWords(),\n                getSecondSoundInWords(),\n                getThirdSoundInWords()));\n    }\n\n    @Override\n    public void speak(String message) {\n        printMessageWithNameAsPrefix(\n            String.format(\"says: %s %s\", \n                message,\n                getDanceRepresentation()));\n    }\n\n    @Override\n    public void welcome(Sociable other) {\n        printMessageWithNameAsPrefix(\n            String.format(\"welcomes %s\", \n                other.getName()));\n    }\n\n    @Override\n    public void sayGoodbyeTo(Sociable other) {\n        printMessageWithNameAsPrefix(\n            String.format(\"says goodbye to %s%s%s%s\", \n                other.getName(),\n                getFirstSoundInWords(),\n                getSecondSoundInWords(),\n                getThirdSoundInWords()));\n    }\n```", "```java\n for the SocialAnimal class implements the other methods required by the Sociable interface:\n```", "```java\nfor the SocialAnimal class overrides the compareTo method to implement the Comparable<Sociable> interface. In addition, this last code snippet for the SocialAnimal class overrides the equals method. The code file for the sample is included in the java_9_oop_chapter_10_01 folder, in the example10_01.java file.\n```", "```java\n    @Override\n    public boolean equals(Object other) {\n        // Is other this object?\n        if (this == other) {\n            return true;\n        }\n        // Is other null?\n        if (other == null) {\n            return false;\n        }\n        // Does other have the same type?\n        if (!getClass().equals(other.getClass())) {\n            return false;\n        }\n        SocialAnimal otherSocialAnimal = (SocialAnimal) other;\n        // Make sure both the name and age are equal\n        return Objects.equals(getName(), otherSocialAnimal.getName())\n        && Objects.equals(getAge(), otherSocialAnimal.getAge());\n    }\n\n    @Override\n    public int compareTo(final Sociable otherSociable) {\n        return Integer.compare(getAge(),otherSociable.getAge());\n    }\n}\n```", "```java\nSocialAnimal class overrides the equals method inherited from java.lang.Object that receives the instance that we must compare with the actual instance in the other argument. Unluckily, we must use the Object type for the other argument in order to override the inherited method, and therefore, the code for the method has to use typecasting to cast the received instance to the SocialAnimal type.\n```", "```java\npublic class SocialLion extends SocialAnimal {\n public SocialLion(String name, int age) {\n        super(name, age);\n    }\n\n    @Override\n public String getDanceRepresentation() {\n        return \"*-* ^\\\\/^ (-)\";\n    }\n\n    @Override\n public String getFirstSoundInWords() {\n        return \"Roar\";\n    }\n\n    @Override\n public String getSecondSoundInWords() {\n        return \"Rrooaarr\";\n    }\n\n    @Override\n public String getThirdSoundInWords() {\n        return \"Rrrrrrrroooooaaarrrr\";\n    }\n}\n```", "```java\npublic class SocialParrot extends SocialAnimal {\n    public SocialParrot(String name, int age) {\n        super(name, age);\n    }\n\n    @Override\n public String getDanceRepresentation() {\n        return \"/|\\\\ -=- % % +=+\";\n    }\n\n    @Override\n public String getFirstSoundInWords() {\n        return \"Yeah\";\n    }\n\n    @Override\n public String getSecondSoundInWords() {\n        return \"Yeeaah\";\n    }\n\n    @Override\n public String getThirdSoundInWords() {\n        return \"Yeeeaaaah\";\n    }\n}\n```", "```java\npublic class SocialSwan extends SocialAnimal {\n    public SocialSwan(String name, int age) {\n        super(name, age);\n    }\n\n    @Override\n public String getDanceRepresentation() {\n        return \"^- ^- ^- -^ -^ -^\";\n    }\n\n    @Override\n public String getFirstSoundInWords() {\n        return \"OO-OO-OO\";\n    }\n\n    @Override\n public String getSecondSoundInWords() {\n        return \"WHO-HO WHO-HO\";\n    }\n\n    @Override\n public String getThirdSoundInWords() {\n        return \"WHO-WHO WHO-WHO\";\n    }\n}\n```", "```java\npublic class InsufficientMembersException extends Exception {\n    private final int numberOfMembers;\n\n    public InsufficientMembersException(int numberOfMembers) {\n        this.numberOfMembers = numberOfMembers;\n    }\n\n    public int getNumberOfMembers() {\n        return numberOfMembers;\n    }\n}\n```", "```java\npublic class CannotRemovePartyLeaderException extends Exception {\n}\n```", "```java\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Party<T extends Sociable & Comparable<Sociable>> {\n protected final List<T> members;\n protected T partyLeader;\n\n public Party(T partyLeader) {\n        this.partyLeader = partyLeader;\n members = new ArrayList<>();\n        members.add(partyLeader);\n    }\n\n public T getPartyLeader() {\n        return partyLeader;\n    }\n public void addMember(T newMember) {\n        members.add(newMember);\n        partyLeader.welcome(newMember);\n    }\n\n public T removeMember(T memberToRemove) throws CannotRemovePartyLeaderException {\n        if (memberToRemove.equals(partyLeader)) {\n            throw new CannotRemovePartyLeaderException();\n        }\n        int memberIndex = members.indexOf(memberToRemove);\n        if (memberIndex >= 0) {\n            members.remove(memberToRemove);\n            memberToRemove.sayGoodbyeTo(partyLeader);\n            return memberToRemove;\n        } else {\n            return null;\n        }\n    }\n\n    public void makeMembersAct() {\n for (T member : members) {\n            member.actAlone();\n        }\n    }\n\n    public void makeMembersDance() {\n for (T member : members) {\n            member.danceAlone();\n        }\n    }\n\n    public void makeMembersSingALyric(String lyric) {\n for (T member : members) {\n            member.singALyric(lyric);\n        }\n    }\n\n    public void declareNewPartyLeader() throws InsufficientMembersException {\n        if (members.size() == 1) {\n            throw new InsufficientMembersException(members.size());\n        }\n T newPartyLeader = partyLeader;\n        while (newPartyLeader.equals(partyLeader)) {\n            int pseudoRandomIndex = \n                ThreadLocalRandom.current().nextInt(\n                    0, \n                    members.size());\n            newPartyLeader = members.get(pseudoRandomIndex);\n        }\n        partyLeader.speak(\n            String.format(\"%s is our new party leader.\", \n                newPartyLeader.getName()));\n        newPartyLeader.danceWith(partyLeader);\n        if (newPartyLeader.compareTo(partyLeader) < 0) {\n            // The new party leader is younger\n            newPartyLeader.danceAlone();\n        }\n        partyLeader = newPartyLeader;\n    }\n}\n```", "```java\nprotected final List<T> members;\n```", "```java\nprotected T partyLeader;\n```", "```java\npublic Party(T partyLeader) {\n    this.partyLeader = partyLeader;\n    members = new ArrayList<>();\n    members.add(partyLeader);\n}\n```", "```java\npublic T getPartyLeader() {\n    return partyLeader;\n}\n```", "```java\npublic void addMember(T newMember) {\n    members.add(newMember);\n    partyLeader.welcome(newMember);\n}\n```", "```java\npublic T removeMember(T memberToRemove) throws CannotRemovePartyLeaderException {\n    if (memberToRemove.equals(partyLeader)) {\n        throw new CannotRemovePartyLeaderException();\n    }\n    int memberIndex = members.indexOf(memberToRemove);\n    if (memberIndex >= 0) {\n        members.remove(memberToRemove);\n        memberToRemove.sayGoodbyeTo(partyLeader);\n        return memberToRemove;\n    } else {\n        return null;\n    }\n}\n```", "```java\npublic void makeMembersAct() {\n    for (T member : members) {\n        member.actAlone();\n    }\n}\n```", "```java\npublic void makeMembersDance() {\n    for (T member : members) {\n        member.danceAlone();\n    }\n}\n```", "```java\npublic void makeMembersSingALyric(String lyric) {\n    for (T member : members) {\n        member.singALyric(lyric);\n    }\n}\n```", "```java\npublic void declareNewPartyLeader() throws InsufficientMembersException {\n    if (members.size() == 1) {\n        throw new InsufficientMembersException(members.size());\n    }\n    T newPartyLeader = partyLeader;\n    while (newPartyLeader.equals(partyLeader)) {\n        int pseudoRandomIndex = \n            ThreadLocalRandom.current().nextInt(\n                0, \n                members.size());\n        newPartyLeader = members.get(pseudoRandomIndex);\n    }\n    partyLeader.speak(\n        String.format(\"%s is our new party leader.\", \n            newPartyLeader.getName()));\n    newPartyLeader.danceWith(partyLeader);\n    if (newPartyLeader.compareTo(partyLeader) < 0) {\n        // The new party leader is younger\n        newPartyLeader.danceAlone();\n    }\n    partyLeader = newPartyLeader;\n}\n```", "```java\nSocialLion simba = new SocialLion(\"Simba\", 10);\nSocialLion mufasa = new SocialLion(\"Mufasa\", 5);\nSocialLion scar = new SocialLion(\"Scar\", 9);\nSocialLion nala = new SocialLion(\"Nala\", 7);\nParty<SocialLion> lionsParty = new Party<>(simba);\n```", "```java\nlionsParty.addMember(mufasa);\nlionsParty.addMember(scar);\nlionsParty.addMember(nala);\n```", "```java\nlionsParty.makeMembersAct();\nlionsParty.makeMembersDance();\ntry {\n    lionsParty.removeMember(nala);\n} catch (CannotRemovePartyLeaderException e) {\n    System.out.println(\n        \"We cannot remove the party leader.\");\n}\ntry {\n    lionsParty.declareNewPartyLeader();\n} catch (InsufficientMembersException e) {\n    System.out.println(\n        String.format(\"We just have %s member\",\n            e.getNumberOfMembers()));\n}\nlionsParty.makeMembersSingALyric(\"Welcome to the jungle\");\n```", "```java\nSimba welcomes Mufasa\nSimba welcomes Scar\nSimba welcomes Nala\nSimba to be or not to be\nMufasa to be or not to be\nScar to be or not to be\nNala to be or not to be\nSimba dances alone *-* ^\\/^ (-)\nMufasa dances alone *-* ^\\/^ (-)\nScar dances alone *-* ^\\/^ (-)\nNala dances alone *-* ^\\/^ (-)\nNala says goodbye to Simba RoarRrooaarrRrrrrrrroooooaaarrrr\nSimba says: Scar is our new party leader. *-* ^\\/^ (-)\nScar dances with Simba *-* ^\\/^ (-)\nScar dances alone *-* ^\\/^ (-)\nSimba sings Welcome to the jungle Roar Rrooaarr Rrrrrrrroooooaaarrrr\nMufasa sings Welcome to the jungle Roar Rrooaarr Rrrrrrrroooooaaarrrr\nScar sings Welcome to the jungle Roar Rrooaarr Rrrrrrrroooooaaarrrr\n\n```", "```java\nSocialParrot rio = new SocialParrot(\"Rio\", 3);\nSocialParrot thor = new SocialParrot(\"Thor\", 6);\nSocialParrot rambo = new SocialParrot(\"Rambo\", 4);\nSocialParrot woody = new SocialParrot(\"Woody\", 5);\nParty<SocialParrot> parrotsParty = new Party<>(rio);\n```", "```java\nparrotsParty.addMember(thor);\nparrotsParty.addMember(rambo);\nparrotsParty.addMember(woody);\n```", "```java\nparrotsParty.makeMembersDance();\ntry {\n    parrotsParty.removeMember(rambo);\n} catch (CannotRemovePartyLeaderException e) {\n    System.out.println(\n        \"We cannot remove the party leader.\");\n}\ntry {\n    parrotsParty.declareNewPartyLeader();\n} catch (InsufficientMembersException e) {\n    System.out.println(\n        String.format(\"We just have %s member\",\n            e.getNumberOfMembers()));\n}\nparrotsParty.makeMembersSingALyric(\"Fly like a bird\");\n```", "```java\nRio welcomes Thor\nRio welcomes Rambo\nRio welcomes Woody\nRio dances alone /|\\ -=- % % +=+\nThor dances alone /|\\ -=- % % +=+\nRambo dances alone /|\\ -=- % % +=+\nWoody dances alone /|\\ -=- % % +=+\nRambo says goodbye to Rio YeahYeeaahYeeeaaaah\nRio says: Woody is our new party leader. /|\\ -=- % % +=+\nWoody dances with Rio /|\\ -=- % % +=+\nRio sings Fly like a bird Yeah Yeeaah Yeeeaaaah\nThor sings Fly like a bird Yeah Yeeaah Yeeeaaaah\nWoody sings Fly like a bird Yeah Yeeaah Yeeeaaaah\n\n```", "```java\n// The following lines won't compile\n// and will generate errors in JShell\nlionsParty.addMember(rio);\nparrotsParty.addMember(simba);\n```", "```java\nSocialSwan kevin = new SocialSwan(\"Kevin\", 3);\nSocialSwan brandon = new SocialSwan(\"Brandon\", 5);\nSocialSwan nicholas = new SocialSwan(\"Nicholas\", 6);\nParty<SocialSwan> swansParty = new Party<>(kevin);\n```", "```java\nswansParty.addMember(brandon);\nswansParty.addMember(nicholas);\n```", "```java\nswansParty.makeMembersDance();\ntry {\n    swansParty.removeMember(kevin);\n} catch (CannotRemovePartyLeaderException e) {\n    System.out.println(\n        \"We cannot remove the party leader.\");\n}\ntry {\n    swansParty.declareNewPartyLeader();\n} catch (InsufficientMembersException e) {\n    System.out.println(\n        String.format(\"We just have %s member\",\n            e.getNumberOfMembers()));\n}\nswansParty.makeMembersSingALyric(\"It will be our swan song\");\n```", "```java\nKevin welcomes Brandon\nKevin welcomes Nicholas\nKevin dances alone ^- ^- ^- -^ -^ -^\nBrandon dances alone ^- ^- ^- -^ -^ -^\nNicholas dances alone ^- ^- ^- -^ -^ -^\nWe cannot remove the party leader.\nKevin says: Brandon is our new party leader. ^- ^- ^- -^ -^ -^\nBrandon dances with Kevin ^- ^- ^- -^ -^ -^\nKevin sings It will be our swan song OO-OO-OO WHO-HO WHO-HO WHO-WHO WHO-WHO\nBrandon sings It will be our swan song OO-OO-OO WHO-HO WHO-HO WHO-WHO WHO-WHO\nNicholas sings It will be our swan song OO-OO-OO WHO-HO WHO-HO WHO-WHO WHO-WHO\n\n```"]