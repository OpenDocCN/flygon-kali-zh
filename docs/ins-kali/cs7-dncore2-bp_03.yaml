- en: Cross Platform .NET Core System Info Manager
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台.NET Core系统信息管理器
- en: In this chapter, we will be creating a simple *Information Dashboard* application
    that displays information about the computer we are running on as well as the
    weather conditions at the location of that machine. This is done using the IP
    address, and while perhaps not 100% accurate (seeing as the location given for
    me was a town or so away), the concept I want to prove here is not location accuracy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个简单的*信息仪表板*应用程序，显示我们正在运行的计算机的信息，以及该计算机位置的天气情况。这是使用IP地址完成的，虽然可能不是100%准确（因为给我的位置是一个镇或者离这里有一段距离），但我想要证明的概念不是位置准确性。
- en: 'Regarding the application we''re creating, we will be doing the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们正在创建的应用程序，我们将做以下事情：
- en: Setting up the application on Windows
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上设置应用程序
- en: Having a look at the `Startup.cs` file and adding controllers and views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看`Startup.cs`文件并添加控制器和视图
- en: Running the application on Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上运行应用程序
- en: Running the application on macOS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上运行应用程序
- en: Setting up and running the application on Linux
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上设置和运行应用程序
- en: This chapter is all about what ASP.NET Core is. For those of you who don't know,
    .NET Core allows us to create applications that will run on Windows, macOS, and
    Linux.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要介绍ASP.NET Core是什么。对于那些不知道的人，.NET Core允许我们创建可以在Windows、macOS和Linux上运行的应用程序。
- en: .NET Core includes ASP.NET Core and EF Core.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core包括ASP.NET Core和EF Core。
- en: 'Microsoft defines ASP.NET Core as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft将ASP.NET Core定义如下：
- en: '"ASP.NET Core is a cross-platform, high-performance, open-source framework
    for building modern, cloud-based, Internet-connected applications."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '"ASP.NET Core是一个跨平台、高性能、开源框架，用于构建现代、基于云的、互联网连接的应用程序。"'
- en: 'Yes, .NET Core is open source. You can find it on GitHub at—[https://github.com/dotnet/core](https://github.com/dotnet/core).
    The benefits of using .NET Core are listed on the document site—[https://docs.microsoft.com/en-us/aspnet/core/](https://docs.microsoft.com/en-us/aspnet/core/).
    These are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，.NET Core是开源的。您可以在GitHub上找到它 - [https://github.com/dotnet/core](https://github.com/dotnet/core)。使用.NET
    Core的好处列在文档网站上 - [https://docs.microsoft.com/en-us/aspnet/core/](https://docs.microsoft.com/en-us/aspnet/core/)。这些好处如下：
- en: A unified story for building web UI and web APIs
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Web UI和Web API的统一故事
- en: Integration of modern client-side frameworks and development workflows
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成现代客户端框架和开发工作流
- en: A cloud-ready, environment-based configuration system
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云就绪，基于环境的配置系统
- en: Built-in dependency injection
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置依赖注入
- en: A lightweight, high-performance, and modular HTTP request pipeline
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级、高性能和模块化的HTTP请求管道
- en: Ability to host on **IIS** (**Internet Information Services**) or self-host
    in your own process
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在**IIS**（**Internet Information Services**）上托管或在自己的进程中进行自托管
- en: Can run on .NET Core, which supports true side-by-side app versioning
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在.NET Core上运行，支持真正的并行应用程序版本
- en: Tooling that simplifies modern web development
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化现代Web开发的工具
- en: Ability to build and run on Windows, macOS, and Linux
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在Windows、macOS和Linux上构建和运行
- en: Open source and community-focused
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源和社区关注
- en: I encourage you to have a look at the Microsoft document site for this topic
    at—[https://docs.microsoft.com/en-us/aspnet/core/](https://docs.microsoft.com/en-us/aspnet/core/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励您查看Microsoft文档网站上关于这个主题的内容 - [https://docs.microsoft.com/en-us/aspnet/core/](https://docs.microsoft.com/en-us/aspnet/core/)。
- en: In reality, ASP.NET Core includes just the NuGet packages applicable to your
    project. This means smaller and better-performing applications. The use of NuGet
    will become evident in this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，ASP.NET Core只包括适用于您的项目的NuGet包。这意味着应用程序更小、性能更好。在本章中，将会看到NuGet的用法。
- en: So, let's get to it. Let's create our first cross-platform ASP.NET Core MVC
    application next.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始吧。接下来，让我们创建我们的第一个跨平台ASP.NET Core MVC应用程序。
- en: Setting up the project on Windows
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上设置项目
- en: The first thing we need to do is set up .NET Core 2.0 on our development machine.
    For the purposes of this book, I am using a Windows PC to illustrate this step
    but, in reality, you would be able to set up a .NET Core application on macOS
    or on Linux.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是在开发机器上设置.NET Core 2.0。出于本书的目的，我使用Windows PC来说明这一步骤，但实际上，您可以在macOS或Linux上设置.NET
    Core应用程序。
- en: I will be illustrating how to set up .NET Core on Linux later on in this chapter.
    The process is similar for macOS, but I find that it is a bit trickier on Linux.
    Therefore, I have opted to show this step by step for Linux.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本章后面说明如何在Linux上设置.NET Core。对于macOS，这个过程类似，但我发现在Linux上有点棘手。因此，我选择逐步为Linux展示这一步骤。
- en: 'For macOS, I will show you how to run this application created on a Windows
    PC. This is the true beauty of .NET Core. It is a truly cross-platform technology
    capable of performing flawlessly on any of the three platforms (Windows, macOS,
    and Linux):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS，我将向您展示如何在Windows PC上创建的应用程序上运行。这就是.NET Core的真正之美。它是一种真正的跨平台技术，能够在任何三个平台（Windows、macOS和Linux）上完美运行：
- en: 'Point your browser to [https://www.microsoft.com/net/core](https://www.microsoft.com/net/core)
    and download the .NET Core SDK:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器指向[https://www.microsoft.com/net/core](https://www.microsoft.com/net/core)并下载.NET
    Core SDK：
- en: '![](img/96908c83-5395-4f3b-86e3-dda1b45b6af5.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96908c83-5395-4f3b-86e3-dda1b45b6af5.png)'
- en: 'The installation is also quite straightforward. If you have a look at this
    screen, you will notice similarities between this and the Linux installation.
    Both have a note that informs you that it will run a command during the installation
    process to improve the project restore speed:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装也非常简单。如果您看一下这个屏幕，您会注意到这与Linux安装之间的相似之处。两者都有一个通知，告诉您在安装过程中运行一个命令来提高项目恢复速度：
- en: '![](img/01c16d8d-5324-4943-a661-1fcc7cd38ffa.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01c16d8d-5324-4943-a661-1fcc7cd38ffa.png)'
- en: 'After the installation is complete, you will find some links to resources,
    documentation, tutorials, and release notes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您会找到一些资源、文档、教程和发布说明的链接：
- en: '![](img/ee852623-3c0e-43c8-b119-6a6a57b7bf9f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee852623-3c0e-43c8-b119-6a6a57b7bf9f.png)'
- en: 'Start Visual Studio and create a new ASP.NET Core Web Application. Also, select
    .NET Framework 4.6.2:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio并创建一个新的ASP.NET Core Web应用程序。同时，选择.NET Framework 4.6.2：
- en: '![](img/6d128c41-30b5-4433-a094-a294ede6f7f5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d128c41-30b5-4433-a094-a294ede6f7f5.png)'
- en: 'On the next screen, select the Web Application (Model-View-Controller**)**
    from the templates and ensure that you have selected ASP.NET Core 2.0\. When you
    are ready, click on the OK button to create your ASP.NET Core project:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，从模板中选择Web应用程序（模型-视图-控制器**）**，并确保您已选择了ASP.NET Core 2.0。准备好后，单击“确定”按钮创建ASP.NET
    Core项目：
- en: '![](img/77f9efc7-3da3-460e-a758-8e931920f2f9.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77f9efc7-3da3-460e-a758-8e931920f2f9.png)'
- en: After your project is created, you will see the familiar MVC structure in Solution
    Explorer. The Model-View-Controller architectural pattern takes a bit of getting
    used to, especially if you are a web developer coming from the traditional ASP.NET
    Web Forms approach.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，您将在解决方案资源管理器中看到熟悉的MVC结构。模型-视图-控制器架构模式需要一点时间来适应，特别是如果您是从传统的ASP.NET Web
    Forms方法转变而来的Web开发人员。
- en: 'I guarantee you that after a while of working with MVC, you will not want to
    go back to ASP.NET Web Forms. Working with MVC is a lot of fun and in many ways
    more rewarding, especially if this is still all new to you:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我向您保证，使用MVC工作一段时间后，您将不想回到ASP.NET Web Forms。使用MVC非常有趣，而且在许多方面更有益，特别是如果这对您来说仍然是全新的：
- en: '![](img/3da47bd2-8afa-47db-a2a0-d084d240f0ff.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3da47bd2-8afa-47db-a2a0-d084d240f0ff.png)'
- en: 'As the application is now, you can run it by holding down *Ctrl *+ *F5* or
    hitting the debug button in Visual Studio. When the application starts up, the
    browser will display the standard view for your MVC application:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以通过按住*Ctrl* + *F5*或在Visual Studio中点击调试按钮来运行应用程序。应用程序启动后，浏览器将显示MVC应用程序的标准视图：
- en: '![](img/55f91ff8-2bc4-4181-8243-c85ba648a3df.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55f91ff8-2bc4-4181-8243-c85ba648a3df.png)'
- en: Stop the debug session and right-click on the project in Solution Explorer.
    From the context menu that pops up, click on ManageNuGetPackages**...**, which
    will open the NuGet form.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止调试会话，右键单击解决方案资源管理器中的项目。从弹出的上下文菜单中，单击ManageNuGetPackages**...**，这将打开NuGet表单。
- en: The first NuGet package we are going to add is `Newtonsoft.Json`. This is to
    enable us to work with JSON in our application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要添加的第一个NuGet包是`Newtonsoft.Json`。这是为了使我们能够在应用程序中使用JSON。
- en: 'Click on the Install button to add the latest version to your application:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击安装按钮以将最新版本添加到您的应用程序中：
- en: '![](img/712f18a2-9b07-4d54-b714-934e92d39ea3.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/712f18a2-9b07-4d54-b714-934e92d39ea3.png)'
- en: The next NuGet package we are going to add is called `DarkSkyCore`. This is
    a .NET Standard library for using the Dark Sky API.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要添加的下一个NuGet包叫做`DarkSkyCore`。这是一个用于使用Dark Sky API的.NET Standard库。
- en: I can already see the question marks popping up at the statement a .NET Standard
    library. We are dealing with .NET Core here, right? What, then, is the .NET Standard?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经看到有人对.NET Standard库的说法产生了疑问。我们在这里处理的是.NET Core，对吧？那么，.NET Standard是什么呢？
- en: 'The following website (.NET Core Tutorials) explains it really well ([https://dotnetcoretutorials.com/2017/01/13/net-standard-vs-net-core-whats-difference/](https://dotnetcoretutorials.com/2017/01/13/net-standard-vs-net-core-whats-difference/)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下网站（.NET Core教程）对此有很好的解释（[https://dotnetcoretutorials.com/2017/01/13/net-standard-vs-net-core-whats-difference/](https://dotnetcoretutorials.com/2017/01/13/net-standard-vs-net-core-whats-difference/)）：
- en: '"If you write a library that you want working on .net Core, UWP, Windows Phone
    and .net Framework, you will need to only use classes that are available on all
    of those platforms. How do you know what classes are available on all platforms?
    The .net Standard!"'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果您编写一个希望在.net Core、UWP、Windows Phone和.net Framework上运行的库，您只需要使用所有这些平台上都可用的类。您如何知道哪些类在所有平台上都可用？.net
    Standard！"'
- en: The .NET Standard is exactly that, a standard. If you want to target more platforms,
    you need to target a lower version of the standard. If you want more APIs available
    to you, you need to target a higher version of the standard. There is a GitHub
    repository, [https://github.com/dotnet/standard](https://github.com/dotnet/standard),
    that you can check out, and for a handy chart that shows you which version of
    each platform implements each version of the standard, swing over to—[https://github.com/dotnet/standard/blob/master/docs/versions.md](https://github.com/dotnet/standard/blob/master/docs/versions.md)
    and check it out.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard就是这样一个标准。如果您想要针对更多平台进行目标化，您需要针对较低版本的标准。如果您想要更多的API可用，您需要针对较高版本的标准。有一个GitHub存储库，[https://github.com/dotnet/standard](https://github.com/dotnet/standard)，您可以查看，并且有一个方便的图表显示每个平台版本实现了标准的哪个版本，可以转到[https://github.com/dotnet/standard/blob/master/docs/versions.md](https://github.com/dotnet/standard/blob/master/docs/versions.md)查看。
- en: 'Back to `DarkSkyCore`. Click on the Install button to get the latest version:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`DarkSkyCore`。单击安装按钮以获取最新版本：
- en: '![](img/5da45e25-a948-46e4-bf5b-5d32da6fa99d.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5da45e25-a948-46e4-bf5b-5d32da6fa99d.png)'
- en: Now that we have our NuGet packages in place, let's have a look at the project
    in more detail.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了NuGet包，让我们更详细地查看项目。
- en: The project in detail
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目详细信息
- en: Looking at the project after I have added all the required resources, controllers,
    views, and models, you will notice that I have added some extra folders.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我添加了所有必需的资源、控制器、视图和模型之后查看项目，您会注意到我添加了一些额外的文件夹。
- en: 'My solution will look as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我的解决方案将如下所示：
- en: '`_docs` (marked **1** in the following screenshot): A personal preference of
    mine is to keep a folder where I can make notes and keep relevant links I find
    useful for the project'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_docs`（在下面的截图中标记为**1**）：我个人的偏好是保留一个文件夹，我可以在其中做笔记并保存我发现对项目有用的相关链接'
- en: '`climacons`(**2**): This is the folder containing the SVG files that will serve
    as the weather icon'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`climacons`(**2**): 这是包含将用作天气图标的SVG文件的文件夹'
- en: '`InformationController`(**3**): This is the controller for the project'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InformationController`(**3**): 这是项目的控制器'
- en: '`InformationModel`(**4**): This is the model for the project'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InformationModel`(**4**): 这是项目的模型'
- en: '`GetInfo`(**5**): This is the view corresponding to the `GetInfo()` method
    on my controller'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetInfo`(**5**): 这是与我的控制器上的`GetInfo()`方法对应的视图'
- en: 'Apart from the `Models`, `Views`, and `Controllers` folders, you can place
    the other folders where you see fit. Just remember to keep references to them
    relevant to your solution:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Models`，`Views`和`Controllers`文件夹，您可以根据需要放置其他文件夹。只需记住保持与解决方案相关的引用即可：
- en: '![](img/dfd236a6-dcef-439d-b104-671e6b24bce2.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfd236a6-dcef-439d-b104-671e6b24bce2.png)'
- en: Climacons
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Climacons
- en: 'Adam Whitcroft has created 75 climatically categorized pictographs for web
    applications and UI designers. We will need to download them to use in our application:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Adam Whitcroft为Web应用程序和UI设计师创建了75个气候分类的象形文字。我们需要下载它们以在我们的应用程序中使用：
- en: Head on over to [http://adamwhitcroft.com/climacons/](http://adamwhitcroft.com/climacons/)
    and download the set to include them in your project.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[http://adamwhitcroft.com/climacons/](http://adamwhitcroft.com/climacons/)并下载该集合以将其包含在您的项目中。
- en: Always remember to provide attribution back to the creators of resources you
    use in your applications.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 始终记得要对你应用程序中使用的资源的创建者进行归因。
- en: 'To include the folder in the project, simply place the SVG files in a folder
    in your project:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将文件夹包含在项目中，只需将SVG文件放在项目中的一个文件夹中：
- en: '![](img/bad6f486-dddc-490a-b932-810e3082fbcb.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bad6f486-dddc-490a-b932-810e3082fbcb.png)'
- en: The Startup.cs file
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Startup.cs文件
- en: Digging deeper into the code, let's start at the `Startup.cs` file. It should
    have been created by default as in the following code listings, but for the sake
    of completeness, I have included it here too.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 深入代码，让我们从`Startup.cs`文件开始。它应该已经默认创建了，但为了完整起见，我也在这里包含了它。
- en: As a standard naming convention, the name `Startup` is used for this file. In
    reality, though, you can call it whatever you like. Just be sure to rename it
    in the `Program.cs` file too.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 作为标准命名约定，名称`Startup`用于此文件。但实际上，您可以随意命名它。只需确保在`Program.cs`文件中也将其重命名。
- en: 'The following `using` statements should be included in the `Startup.cs` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup.cs`文件中应包括以下`using`语句：'
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The code contained in the `Startup` file will be the same for you and is generated
    by default when creating the application. We will not be modifying this file for
    this chapter but, typically, if you wanted to add any middleware, you would come
    here to the `Configure()` method:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup`文件中包含的代码对您来说将是相同的，并且在创建应用程序时默认生成。在本章中，我们不会修改此文件，但是通常情况下，如果您想要添加任何中间件，您会来到`Configure()`方法：'
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The InformationModel class
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InformationModel类
- en: 'The model for this application is pretty straightforward. All this will do
    is expose the values obtained in our controller and provide the view access to
    these values. To add the model, right-click the `Models` folder and add a new
    class called `InformationModel`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的模型非常简单。它将仅公开在我们的控制器中获取的值，并提供视图访问这些值的权限。要添加模型，请右键单击“Models”文件夹，然后添加一个名为“InformationModel”的新类：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can then add the properties, as illustrated in the preceding code listing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照前面的代码清单所示，添加属性。
- en: The InformationController class
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InformationController类
- en: 'The next step we need to take is to add the controller for our application:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要采取的下一步是为我们的应用程序添加控制器：
- en: 'Right-click the `Controllers` folder and select Add, and then click on Controller
    from the context menu:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“Controllers”文件夹，选择“添加”，然后在上下文菜单中单击“Controller”：
- en: '![](img/e4d643e4-f6b4-4c7c-a11d-0cd38a4722e6.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4d643e4-f6b4-4c7c-a11d-0cd38a4722e6.png)'
- en: 'Add a new controller called `InformationController` by selecting MVC Controller
    - Empty from the Add Scaffold screen. The following `using` statements need to
    be added to the controller:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从添加脚手架屏幕中选择MVC Controller - Empty来添加一个名为`InformationController`的新控制器。需要将以下`using`语句添加到控制器中：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Microsoft documentation says the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 微软文档中提到：
- en: '"The IHostingEnvironment service provides the core abstraction for working
    with environments. This service is provided by the ASP.NET hosting layer, and
    can be injected into your startup logic via Dependency Injection."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: IHostingEnvironment服务提供了与环境交互的核心抽象。这项服务由ASP.NET托管层提供，并可以通过依赖注入注入到启动逻辑中。
- en: To read more on this, browse to [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments)
    and check out the documentation.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多信息，请浏览[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments)并查看文档。
- en: 'Add the following properties to the preceding constructor in our controller.
    You will notice that we have added the `IHostingEnvironment` interface to the
    class:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的控制器的前面构造函数中添加以下属性。您会注意到我们已经将`IHostingEnvironment`接口添加到了类中：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create an empty method called `GetInfo()`. The naming of the controllers (and
    the methods contained inside them), views, and models is quite deliberate. The
    MVC design pattern follows a set of conventions that, if adhered to, make binding
    this altogether quite easy:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`GetInfo()`的空方法。控制器（以及其中包含的方法）、视图和模型的命名是非常有意义的。如果遵循MVC设计模式的一组约定，将所有这些绑定在一起就会变得非常容易：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you recall, the `Startup` class defined a `MapRoute` call in the `Configure()`
    method:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还记得，`Startup`类在`Configure()`方法中定义了一个`MapRoute`调用：
- en: '![](img/c8f289d8-e874-4fff-9ae2-000d4299d608.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8f289d8-e874-4fff-9ae2-000d4299d608.png)'
- en: This section of code `{controller=Home}/{action=Index}/{id?}` is called the
    **route template**. The MVC application uses tokenizing to extract the route values.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的这一部分`{controller=Home}/{action=Index}/{id?}`被称为**路由模板**。MVC应用程序使用标记化来提取路由值。
- en: 'This means the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着以下内容：
- en: '`{controller=Home}` defines the name of the controller with a default of `Home`'
  id: totrans-101
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{controller=Home}`定义了默认为`Home`的控制器的名称'
- en: '`{action=Index}` defines the method of the controller with a default of `Index`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{action=Index}`定义了默认为`Index`的控制器的方法'
- en: Lastly, `{id?}` is defined as an optional by the `?` and can be used to pass
    around parameters
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`{id?}`被定义为可选的，通过`?`，可以用来传递参数
- en: This means that if I don't give the application a route (or URL), it will use
    the defaults which have been set up in the `MapRoute` call.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果我不给应用程序指定路由（或URL），它将使用在`MapRoute`调用中设置的默认值。
- en: If, however, I give the application a route of `http://localhost:50239/Information/GetInfo`,
    it will redirect to the `GetInfo()` method on the `InformationController`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我给应用程序一个`http://localhost:50239/Information/GetInfo`的路由，它将重定向到`InformationController`上的`GetInfo()`方法。
- en: For more information on routing, go to—[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing)
    and read through the documentation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有关路由的更多信息，请访问[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing)并阅读文档。
- en: 'Staying inside our `Controllers` folder, add a class called `LocationInfo`.
    We will use this to bind the JSON string to it after calling the location info
    API:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`Controllers`文件夹中，添加一个名为`LocationInfo`的类。我们将在调用位置信息API后使用它将JSON字符串绑定到它：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To get the location information, you can use one of many location APIs. I used
    an API over at [https://ipapi.co](https://ipapi.co) to provide the location information
    for me. The `GetLocationInfo()` method simply calls the API and deserializes the
    JSON returned into the `LocationInfo` class created a moment ago.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取位置信息，您可以使用许多位置API之一。我在[https://ipapi.co](https://ipapi.co)上使用了一个API来为我提供位置信息。`GetLocationInfo()`方法只是调用API并将返回的JSON反序列化为刚刚创建的`LocationInfo`类。
- en: 'Personally, I think that the name `ipapi` is really clever. It is something
    one will not easily forget. They also provide a free tier in their pricing which
    is for 1,000 requests per day. This is perfect for personal use:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我认为`ipapi`这个名字真的很聪明。这是一个人不容易忘记的东西。他们还在他们的定价中提供了一个免费层，每天可以进行1,000次请求。这非常适合个人使用：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next API we will be using is **Dark Sky**. You will need to sign up for
    an account at [https://darksky.net/dev](https://darksky.net/dev) in order to get
    your API key:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用的下一个API是**Dark Sky**。您需要在[https://darksky.net/dev](https://darksky.net/dev)注册帐户以获取您的API密钥：
- en: '![](img/b41cd207-2ca0-4ea1-bf25-873c143c1e7d.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b41cd207-2ca0-4ea1-bf25-873c143c1e7d.png)'
- en: 'What I like about Dark Sky is that their API also allows you 1,000 free API
    calls every day:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢Dark Sky的一点是，他们的API还允许您每天进行1,000次免费API调用：
- en: '![](img/f8380a50-69da-404c-9e9e-ee8f186cc26f.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8380a50-69da-404c-9e9e-ee8f186cc26f.png)'
- en: This makes it perfect for personal use. If you have high-volume users, even
    the pay-as-you-go option isn't expensive at all.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这使它非常适合个人使用。如果您有大量用户，即使选择按使用付费的选项也不贵。
- en: Please note that if you make use of the Dark Sky API for a commercial application,
    you cannot require each user of your application to register for a Dark Sky API
    key. All users of your Dark Sky application must use the specific API key you
    generated via the online portal.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您将Dark Sky API用于商业应用程序，您不能要求您应用程序的每个用户注册Dark Sky API密钥。您Dark Sky应用程序的所有用户必须使用您通过在线门户生成的特定API密钥。
- en: 'For those who are interested, the FAQ provides clarity on this and many other
    important questions:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些感兴趣的人，常见问题解答提供了对此和许多其他重要问题的澄清：
- en: '"...your end-users should not sign up for Dark Sky API keys: the API key should
    be associated with your app or service, not your users.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “...您的最终用户不应该注册Dark Sky API密钥：API密钥应与您的应用程序或服务关联，而不是与您的用户关联。
- en: The 1,000 free calls per day are intended to facilitate personal use and application
    development, not to provide free weather data to your app. It costs us money to
    develop and maintain the infrastructure that supports the Dark Sky API. If your
    application were to grow in popularity, we would have to pay for the use of resources
    necessary to handle increased traffic (to the benefit of your service and your
    users) without the financial means to support it. For this reason, applications
    that ask users to register for an API key are prohibited by our terms of service."
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 每天1,000次免费调用旨在促进个人使用和应用程序开发，而不是为您的应用程序提供免费天气数据。我们花费了大量资金来开发和维护支持Dark Sky API的基础设施。如果您的应用程序因受欢迎而增长，我们将不得不支付用于处理增加的流量所需资源的费用（这将使您的服务和用户受益），而没有财务手段来支持它。因此，我们的服务条款禁止要求用户注册API密钥的应用程序。”
- en: 'Keeping track of the API calls is also very easy and can be viewed via the
    online portal:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪API调用也非常容易，可以通过在线门户查看：
- en: '![](img/6030bb06-60d1-407e-8783-b192fbc5a0b6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6030bb06-60d1-407e-8783-b192fbc5a0b6.png)'
- en: With the Dark Sky API registration sorted, we want to see whether the application
    is running in a region that uses the metric system or imperial system for units
    of measure.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有了Dark Sky API注册，我们想要看看应用程序是否在使用公制系统或英制系统来测量单位的地区运行。
- en: Create a method called `GetUnitOfMeasure()` that returns a `DarkSkyService.OptionalParameters`
    object. All this essentially does is use the `RegionInfo` class to check whether
    the current region is metric or not.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`GetUnitOfMeasure()`的方法，该方法返回一个`DarkSkyService.OptionalParameters`对象。这本质上只是使用`RegionInfo`类来检查当前地区是否为公制。
- en: 'It then sets the `optParms` variable and returns it to the calling class. I
    also take the liberty of sneaking in the symbol for Celsius or Fahrenheit for
    the `TempUnitOfMeasure` property:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后设置`optParms`变量并将其返回给调用类。我还趁机加入了`TempUnitOfMeasure`属性的摄氏度或华氏度符号：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The next method to add is called `GetCurrentWeatherIcon()`, which will be used
    to determine the Dark Sky icon to display on our web page. There are many more
    to choose from, but I have opted, for the sake of brevity, to only include these
    few icon names. These icon names correspond to the fill list of SVG filenames
    in the `climacons` folder in our solution:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加的下一种方法称为`GetCurrentWeatherIcon()`，它将用于确定要在我们的网页上显示的Dark Sky图标。还有许多选择，但出于简洁起见，我选择只包括这几个图标名称。这些图标名称对应于我们解决方案中`climacons`文件夹中的SVG文件名的完整列表：
- en: '[PRE9]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The next method to create is the `GetWeatherInfo()` method. All this does is
    call the `DarkSkyService` class and pass it the API key you generated earlier
    in the Dark Sky portal. You will notice that the code is not really rocket science
    at all.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的下一个方法是`GetWeatherInfo()`方法。这只是调用`DarkSkyService`类并将之前在Dark Sky门户中生成的API密钥传递给它。您会注意到，代码实际上并不是什么高深莫测的东西。
- en: 'The steps in the class are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 该类中的步骤如下：
- en: Define the API key for Dark Sky.
  id: totrans-131
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义Dark Sky的API密钥。
- en: Instantiate a new `DarkSkyService` object using the API key.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用API密钥实例化一个新的`DarkSkyService`对象。
- en: Get the `OptionalParameters` object that determines the unit of measure.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取确定度量单位的`OptionalParameters`对象。
- en: We then use the latitude and longitude along with `optParms` to get the forecast.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用纬度和经度以及`optParms`来获取预报。
- en: Based on the forecast, I find the appropriate weather icon.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据预报，我找到了适当的天气图标。
- en: I do a `Path.Combine` to get the correct path to the SVG file.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我使用`Path.Combine`来获取SVG文件的正确路径。
- en: I read all the text contained inside that SVG file.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我读取了SVG文件中包含的所有文本。
- en: Lastly, I set some properties for the attribution back to Dark Sky, the weather
    summary, and set the temperature value rounded up using the `Round` function in
    the static `Math` class. In the code, I don't need to fully qualify this because
    I have imported the static `Math` class earlier.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我设置了一些属性，用于将归因于Dark Sky的天气摘要和温度值四舍五入，使用静态`Math`类中的`Round`函数。在代码中，我不需要完全限定这一点，因为我之前已经导入了静态`Math`类。
- en: 'Your code therefore needs to look as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您的代码需要如下所示：
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Last but not least, we need to add the appropriate code to the `GetInfo()`
    method. The first section of the method deals with finding the system information
    of the computer the application is running on. This will obviously change based
    on the operating system we are running our .NET Core app on:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要向`GetInfo()`方法添加适当的代码。该方法的第一部分涉及查找应用程序正在运行的计算机的系统信息。这显然会根据我们在其上运行.NET
    Core应用程序的操作系统而改变：
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The last section of the `GetInfo()` method deals with determining the weather
    information we crafted in the previous steps.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetInfo()`方法的最后一部分涉及确定我们在前面步骤中制作的天气信息。'
- en: The next portion of work will entail creating our view. Once we are done with
    that, the real fun starts.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的工作部分将涉及创建我们的视图。一旦我们完成了这一点，真正的乐趣就开始了。
- en: The GetInfo view
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GetInfo视图
- en: 'Putting the view together is quite straightforward. I opted for a very minimalistic
    approach (apart from the weather icon), but you can be as creative here as you
    like:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将视图放在一起非常简单。除了天气图标之外，我选择了非常简约的方式，但您可以在这里尽情发挥创意：
- en: 'Right-click the `Views` folder and add a new folder called `Information`. Inside
    the `Information` folder, add a new view called `GetInfo` by right-clicking the
    folder and selecting Add and then clicking on View... from the context menu:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Views`文件夹，然后添加一个名为`Information`的新文件夹。在`Information`文件夹中，通过右键单击文件夹并从上下文菜单中选择添加，然后单击View...来添加一个名为`GetInfo`的新视图：
- en: '![](img/392dc872-5f29-429c-9e32-c300a7592f36.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/392dc872-5f29-429c-9e32-c300a7592f36.png)'
- en: The naming of the view also adheres to the naming convention used in MVC.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 视图的命名也遵循了MVC中使用的命名约定。
- en: Refer to the *The project in detail* section earlier in this chapter for an
    image of the Visual Studio solution displaying the layout of the `Views` folder.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本章前面的*详细项目*部分，以查看显示`Views`文件夹布局的Visual Studio解决方案的图像。
- en: 'The view which has been created uses Razor syntax. Razor is a way for developers
    to add C# code (server code) directly inside web pages. The code inside the `GetInfo.cshtml`
    page looks as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 已创建的视图使用了Razor语法。Razor是开发人员直接在网页内添加C#代码（服务器代码）的一种方式。`GetInfo.cshtml`页面内的代码如下：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, MVC adds the `@model` keyword to Razor's vernacular. By doing
    this, you are allowing the view to specify the type of the view's `Model` property.
    The syntax is `@model class` and is contained in the first line, `@model` `SystemInfo.Models.InformationModel`,
    which strongly types the view to the `InformationModel` class.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，MVC将`@model`关键字添加到Razor的术语中。通过这样做，您允许视图指定视图的`Model`属性的类型。语法是`@model
    class`，包含在第一行中，`@model` `SystemInfo.Models.InformationModel`，将视图强类型化为`InformationModel`类。
- en: With this kind of flexibility, you can add C# expressions directly into your
    client-side code.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这种灵活性，您可以直接将C#表达式添加到客户端代码中。
- en: 'The last bit of code you need to add is to the `_Layout.cshtml` file in the
    `Views/Shared` folder:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要添加的最后一部分代码是在`Views/Shared`文件夹中的`_Layout.cshtml`文件中：
- en: '![](img/2fc9200b-bf77-48d7-a2dd-f26898cde252.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fc9200b-bf77-48d7-a2dd-f26898cde252.png)'
- en: We are just adding a link to the menu here to navigate to our `InformationController`
    class. You will notice that the code follows the convention of controller and
    action, where the `asp-controller` specifies the `InformationController` class
    and the `asp-action` specifies the `GetInfo` method inside that controller.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是在这里的菜单中添加一个链接，以便导航到我们的`InformationController`类。您会注意到，代码遵循控制器和操作的约定，其中`asp-controller`指定`InformationController`类，`asp-action`指定该控制器内的`GetInfo`方法。
- en: At this stage, the application should be ready to run. Build it and make sure
    you get a clean build. Run the application and click on the Information Dashboard
    menu item.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，应用程序应该已经准备好运行。构建它并确保您获得了一个干净的构建。运行应用程序，然后单击信息仪表板菜单项。
- en: 'The Information Dashboard will display the computer information it is running
    on as well as the weather information for the current location the machine is
    located at (or close thereby):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 信息仪表板将显示它正在运行的计算机信息，以及当前位置的天气信息（或附近位置）：
- en: '![](img/e06fe826-52a5-4d73-9316-dd992810413a.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e06fe826-52a5-4d73-9316-dd992810413a.png)'
- en: For the Windows portion of this chapter, I used Azure and therefore the server
    is located in the US. That is why the information displayed is US-based.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的Windows部分，我使用了Azure，因此服务器位于美国。这就是为什么显示的信息是基于美国的。
- en: 'Finally, let''s have a peek at the generated HTML code from our Razor view.
    If you use the built-in developer tools (I''m using Chrome) and view the page
    source, you will find that the HTML created from the Razor view is quite unremarkable:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们来看一下从我们的Razor视图生成的HTML代码。如果您使用内置的开发者工具（我使用的是Chrome）并查看页面源代码，您会发现从Razor视图创建的HTML相当普通：
- en: '[PRE13]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: At the end of the day, all this is is just HTML. What is remarkable, however,
    is the fact that we used Razor to access properties on our model and place them
    directly inside the HTML of our view.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底，这只是HTML。然而，值得注意的是，我们使用Razor来访问我们模型上的属性，并将它们直接放在我们视图的HTML中。
- en: Running the application on macOS
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上运行应用程序
- en: 'For this portion of the chapter, I will assume that you are using a Mac that
    has had .NET Core 1.1 installed. If you do not have .NET Core installed on your
    Mac, head on over to [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)
    and follow the installation steps (or follow along):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我将假设您正在使用已安装.NET Core 1.1的Mac。如果您的Mac上没有安装.NET Core，请前往[https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)并按照安装步骤进行安装（或跟随）：
- en: 'Simply put, from your .NET Core solution in Windows, just publish the .NET
    Core application. Then, go ahead and copy the published files to your Mac. I just
    put my published files in a desktop folder called `netCoreInfoDash`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，从Windows的.NET Core解决方案中，只需发布.NET Core应用程序。然后，将发布的文件复制到您的Mac上。我只是把我的发布文件放在一个名为`netCoreInfoDash`的桌面文件夹中：
- en: '![](img/ac9f3d05-7015-495b-8c70-66299776af27.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac9f3d05-7015-495b-8c70-66299776af27.png)'
- en: 'Open the Terminal on your Mac and change the working directory to the `netCoreInfoDash`
    folder. Type in the command `dotnet SystemInfo.dll` and hit *Enter*:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Mac上打开终端，并将工作目录更改为`netCoreInfoDash`文件夹。输入命令`dotnet SystemInfo.dll`并按*Enter*：
- en: '![](img/ec98083f-8bc4-48c4-9917-e7532b1588bd.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec98083f-8bc4-48c4-9917-e7532b1588bd.png)'
- en: 'Because the project was created for .NET Core 2.0 and our Mac only has .NET
    Core 1.1, we will see the following error message in the Terminal:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 因为该项目是为.NET Core 2.0创建的，而我们的Mac只有.NET Core 1.1，所以我们将在终端中看到以下错误消息：
- en: '![](img/7e3e57ef-1ec4-41a4-ae7f-09c5f71c7515.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e3e57ef-1ec4-41a4-ae7f-09c5f71c7515.png)'
- en: We need to update the version of .NET Core on the Mac to version 2.0\. To do
    this, go to [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)
    and install .NET Core 2.0.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将Mac上的.NET Core版本更新到2.0版。要做到这一点，前往[https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)并安装.NET
    Core 2.0。
- en: 'Installing the .NET Core SDK is quite straightforward:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 安装.NET Core SDK非常简单：
- en: '![](img/b63d4f5a-8068-4356-b453-f3f11bb5e9f6.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b63d4f5a-8068-4356-b453-f3f11bb5e9f6.png)'
- en: 'In no time at all, .NET Core 2.0 is installed on your Mac:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在很短的时间内，.NET Core 2.0就安装在您的Mac上了：
- en: '![](img/bfdaab9f-2f88-4965-8225-adbddd07312f.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfdaab9f-2f88-4965-8225-adbddd07312f.png)'
- en: 'Back in the Terminal, type in `dotnet SystemInfo.dll` and hit *Enter*. This
    time, you will see the following information output in the Terminal window. You
    will see that the address `http://localhost:5000` is specified. The port listed
    for you might change, but `5000` is usually the port given:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到终端，输入`dotnet SystemInfo.dll`并按*Enter*。这次，您将在终端窗口中看到以下信息输出。您将看到指定了地址`http://localhost:5000`。列出的端口可能会改变，但`5000`通常是给定的端口：
- en: '![](img/b1cd2559-ea7c-429e-b621-53c40c11d9b3.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1cd2559-ea7c-429e-b621-53c40c11d9b3.png)'
- en: 'Open the browser on your Mac (it can be Safari, but I use Chrome) and navigate
    to—`http://localhost:5000`. You will see that the familiar application start page
    is displayed. If you click on the Information Dashboard menu item, you will see
    the page we created exactly as it was displayed on the Windows machine:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Mac上打开浏览器（可以是Safari，但我使用Chrome），并导航到—`http://localhost:5000`。您将看到熟悉的应用程序起始页显示出来。如果您点击“信息仪表板”菜单项，您将看到我们创建的页面与在Windows机器上显示的完全相同：
- en: '![](img/c503ed7d-dae5-4827-b646-48d2c6d12c0a.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c503ed7d-dae5-4827-b646-48d2c6d12c0a.png)'
- en: The only difference here is that the Mac is not on Azure and is in fact in my
    office in South Africa. The temperature information has changed to Celsius and
    the machine information displayed is for that of my Mac. It's a nice Spring evening
    here in South Africa.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是Mac不在Azure上，实际上在南非的我的办公室。温度信息已更改为摄氏度，并且显示的机器信息是我的Mac的信息。南非这里是一个美好的春天傍晚。
- en: Setting up the app on Linux
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上设置应用程序
- en: Everyone keeps talking about the ability of .NET Core to run cross-platform,
    even on Linux. I, therefore, decided to give it a try. I know that Linux might
    not interest many of you, but there is a definite sense of satisfaction of being
    able to use a powerful operating system such as Linux.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都在谈论.NET Core跨平台运行的能力，甚至在Linux上也可以。因此，我决定试一试。我知道Linux可能不会吸引你们许多人，但能够使用强大的操作系统Linux确实有一种明显的满足感。
- en: If you are developing .NET Core applications, I would encourage you to set up
    a Linux box for testing purposes. There are many ways that you can go about doing
    this. If you have access to Azure, you can set up a Linux VM on Azure.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发.NET Core应用程序，我建议您为测试目的设置一个Linux框。有许多方法可以做到这一点。如果您可以访问Azure，可以在Azure上设置一个Linux虚拟机。
- en: You can also use virtualization software to provide a fully functional VM on
    your local machine. The option I chose was to use **VirtualBox** as well as testing
    out the process on **Parallels**. Both methods are really easy, but VirtualBox
    is free to use so this would be a good option. You can download the latest version
    of VirtualBox from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    for free.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用虚拟化软件在本地机器上提供一个完全功能的虚拟机。我选择的选项是使用**VirtualBox**，并测试了**Parallels**上的过程。这两种方法都非常简单，但VirtualBox是免费使用的，所以这将是一个不错的选择。您可以免费从[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)下载最新版本的VirtualBox。
- en: You can also save yourself the setup time by downloading ready to use VirtualBox
    images from a variety of sites online. Just make sure they are reputable sites
    such as **OS Boxes** at—[http://www.osboxes.org/virtualbox-images/](http://www.osboxes.org/virtualbox-images/).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过从各种在线网站下载现成的VirtualBox镜像来节省设置时间。只要确保它们是值得信赖的网站，比如**OS Boxes**在[http://www.osboxes.org/virtualbox-images/](http://www.osboxes.org/virtualbox-images/)。
- en: Whatever route you choose to follow, the rest of this chapter will assume that
    you have already set up your Linux environment and that you are ready to set up
    your .NET Core application.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种方式，本章的其余部分将假设你已经设置好了你的Linux环境，并且准备好设置你的.NET Core应用程序。
- en: 'So let''s see how to install .NET Core for Linux:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看如何在Linux上安装.NET Core：
- en: 'Find the instructions for installing .NET Core 2.0 for your particular flavor
    of Linux from—[https://www.microsoft.com/net/download/linux](https://www.microsoft.com/net/download/linux):'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://www.microsoft.com/net/download/linux](https://www.microsoft.com/net/download/linux)找到安装.NET
    Core 2.0的特定Linux版本的说明：
- en: '![](img/0a84828a-443c-458d-a77e-a68bc49fdbb7.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a84828a-443c-458d-a77e-a68bc49fdbb7.png)'
- en: I am using **Ubuntu 16.04**, and clicking on the `sudo apt-get install dotnet-sdk-2.0.0`
    link will take me to the installation steps.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我正在使用**Ubuntu 16.04**，点击`sudo apt-get install dotnet-sdk-2.0.0`链接将带我到安装步骤。
- en: Open up the Terminal window on Linux Ubuntu (or Linux Mint) by typing *Ctrl*
    + *Alt* + *T*.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入*Ctrl* + *Alt* + *T*在Linux Ubuntu（或Linux Mint）上打开终端窗口。
- en: Seeing as I am running a fresh copy of Linux, I need to install **cURL** first.
    This tool allows me to transfer data to and from servers to my local machine.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我正在运行全新的Linux，我需要先安装**cURL**。这个工具允许我在服务器和本地机器之间传输数据。
- en: 'Run the following command to get cURL:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令获取cURL：
- en: '[PRE14]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The Terminal will ask for your password. Typing in the password does nothing
    on the screen, but keep on typing and hit *Enter*:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端会要求输入密码。在屏幕上输入密码不会有任何显示，但继续输入并按*Enter*：
- en: The password that doesn't display a masked output to the screen as you type
    is by design when working with Linux. It's a feature.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Linux上工作时，屏幕上不显示你输入的密码是有意设计的。这是一个特性。
- en: '![](img/238b9dd6-ea4d-4fa2-9b77-b9b37a2dec66.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/238b9dd6-ea4d-4fa2-9b77-b9b37a2dec66.png)'
- en: 'Now, we need to register the trusted Microsoft signature key. Type-in the following:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要注册受信任的Microsoft签名密钥。输入以下内容：
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/7ba9167c-cfa0-47e2-8276-5f3647615c80.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ba9167c-cfa0-47e2-8276-5f3647615c80.png)'
- en: 'When this is done, type in the following:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当这个完成时，输入以下内容：
- en: '[PRE16]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we need to register the Microsoft Product feed for Ubuntu 16.04\. To do
    this, type in the following:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为Ubuntu 16.04注册Microsoft产品源。要做到这一点，请输入以下内容：
- en: '[PRE17]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, directly after that, type in the following:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在那之后，输入以下内容：
- en: '[PRE18]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we can install the .NET Core 2.0 SDK by typing in the following:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过输入以下内容来安装.NET Core 2.0 SDK：
- en: '[PRE19]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The Terminal asks us if we want to continue, which we do. So, type in `Y` and
    hit *Enter*:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端问我们是否要继续，我们要。所以，输入`Y`并按*Enter*：
- en: '![](img/6637c3ca-6c08-4303-8e0a-8030ed021670.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6637c3ca-6c08-4303-8e0a-8030ed021670.png)'
- en: 'When this process is complete, you will see the cursor ready for input next
    to the `~$`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个过程完成时，你会看到光标准备好在`~$`旁边输入：
- en: '![](img/596c89d6-1133-417a-9826-cf6866f3f434.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/596c89d6-1133-417a-9826-cf6866f3f434.png)'
- en: 'To check which version of .NET Core is installed, type in the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查安装了哪个版本的.NET Core，请输入以下命令：
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This should display 2.0.0\. We now have .NET Core 2.0 installed on our Linux
    machine. As a quick start, make a new directory called `testapp` and change your
    working directory to the `testapp` directory by typing the following:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该显示2.0.0。我们现在在我们的Linux机器上安装了.NET Core 2.0。作为一个快速开始，创建一个名为`testapp`的新目录，并通过输入以下内容将你的工作目录更改为`testapp`目录：
- en: '[PRE21]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Consider the following screenshot:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的屏幕截图：
- en: '![](img/e59a2cb7-4e9b-4e4c-971b-b4205f046ee4.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e59a2cb7-4e9b-4e4c-971b-b4205f046ee4.png)'
- en: 'We just want to see whether .NET Core is working on our Linux machine, so while
    you''re in the `testapp` directory, type in the following:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只是想看看.NET Core是否在我们的Linux机器上工作，所以当你在`testapp`目录中时，输入以下内容：
- en: '[PRE22]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Yes, it is that easy. This has just created a new MVC Web project for us on
    Linux:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这么简单。这刚刚在Linux上为我们创建了一个新的MVC Web项目：
- en: '![](img/ce22123e-4dfd-4512-ab10-45613f438473.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce22123e-4dfd-4512-ab10-45613f438473.png)'
- en: 'As we did on our Mac, type in the following command:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像我们在Mac上做的那样，输入以下命令：
- en: '[PRE23]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Take a look at the following screenshot:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的屏幕截图：
- en: '![](img/30d2d43e-713b-4cda-a2a6-c1b0adea6372.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30d2d43e-713b-4cda-a2a6-c1b0adea6372.png)'
- en: 'In the output in the Terminal, you will notice that the same port number is
    displayed for localhost. Unlike macOS, on Ubuntu I can click on `http://localhost:5000`
    inside the Terminal window. This will open up the application we just created:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端的输出中，你会注意到本地主机显示了相同的端口号。与macOS不同，在Ubuntu上我可以在终端窗口中点击`http://localhost:5000`。这将打开我们刚刚创建的应用程序：
- en: '![](img/06247e66-347f-494b-98e1-d618a8e97e3c.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06247e66-347f-494b-98e1-d618a8e97e3c.png)'
- en: 'Now that we know .NET Core 2.0 is running correctly on Linux, let''s copy over
    the project files to our Linux machine:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道.NET Core 2.0在Linux上正常运行了，让我们把项目文件复制到我们的Linux机器上：
- en: 'Create a folder on the desktop; you can call it whatever you like. Copy the
    project files for the .NET Core application into that folder (do not copy the
    published files into this folder):'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在桌面上创建一个文件夹；你可以随意命名。将.NET Core应用程序的项目文件复制到该文件夹中（不要将发布的文件复制到此文件夹中）：
- en: You will remember that on macOS, we only copied the published files. This is
    different on Linux. Here, you need to copy all your project files.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得在macOS上，我们只复制了发布的文件。但在Linux上是不同的。在这里，你需要复制所有的项目文件。
- en: '![](img/ae9ec898-2504-4f9d-bf4c-bba33f9d63f3.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae9ec898-2504-4f9d-bf4c-bba33f9d63f3.png)'
- en: Right-click the folder and select Open in Terminal.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件夹，选择在终端中打开。
- en: 'Now that we are in the folder containing our solution files, type in the following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在包含我们解决方案文件的文件夹中，输入以下内容：
- en: '[PRE24]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This command restores the dependencies and tools of our project:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令恢复了我们项目的依赖和工具：
- en: '![](img/35fb27ba-59f9-4336-8443-c916776a7fbd.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35fb27ba-59f9-4336-8443-c916776a7fbd.png)'
- en: 'Because we are working with the solution files, I needed to navigate one folder
    down and type the following:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们正在处理解决方案文件，所以我需要向下导航一个文件夹并输入以下内容：
- en: '[PRE25]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Take a look at the following screenshot:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的截图：
- en: '![](img/90b9e971-656c-4fda-83cb-e0bb7c91da44.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90b9e971-656c-4fda-83cb-e0bb7c91da44.png)'
- en: 'Navigating to `http://localhost:50240` displayed in the Terminal window takes
    me to the start page of my application:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:50240`在终端窗口中显示，将我带到我的应用程序的起始页面：
- en: '![](img/a7261740-3045-486f-b517-99bf2ae47acb.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7261740-3045-486f-b517-99bf2ae47acb.png)'
- en: 'Clicking on the Information Dashboard menu item will take us to the page we
    created:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击信息仪表板菜单项将带我们到我们创建的页面：
- en: '![](img/b6709a9b-66d2-48ce-b661-f34c9fbd3862.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6709a9b-66d2-48ce-b661-f34c9fbd3862.png)'
- en: And that is all there is to it. We have an ASP.NET Core MVC application created
    on a Windows PC using Visual Studio 2017 Enterprise, which is running on a Linux
    machine. The best thing of all is that we didn't change a single line of code
    to get our application to run on the different platforms.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部。我们在Windows PC上使用Visual Studio 2017 Enterprise创建了一个ASP.NET Core MVC应用程序，该应用程序正在Linux机器上运行。最好的是，我们没有改变一行代码就让我们的应用程序在不同的平台上运行。
- en: Summary
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Looking back at this chapter, we had a look at setting up an ASP.NET Core application
    on Windows. We looked at adding views and controllers and, if you are familiar
    with ASP.NET MVC, then you will have felt right at home. If not, ASP.NET MVC is
    really very easy.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾本章，我们看了一下在Windows上设置ASP.NET Core应用程序。我们看了添加视图和控制器，如果你熟悉ASP.NET MVC，那么你会感到非常亲切。如果不熟悉，ASP.NET
    MVC真的很容易。
- en: Lastly, we had a look at what makes .NET Core so powerful by running the same
    application on Windows, macOS, and Linux.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了一下.NET Core的强大之处，通过在Windows、macOS和Linux上运行相同的应用程序。
- en: The power of .NET Core should be evident to you by now. It allows developers
    to write truly cross-platform applications using .NET. This technology is a game
    changer and something every developer must get to grips with.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该明白.NET Core的强大之处了。它允许开发人员使用.NET编写真正的跨平台应用程序。这项技术是一个改变游戏规则的东西，每个开发人员都必须掌握。
- en: Next, you might wonder what we need to do when we want to hook up a database
    to a .NET Core application. In the next chapter, we will look at using MongoDB
    on an ASP.NET Core MVC application.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可能会想知道当我们想要将数据库连接到.NET Core应用程序时，我们需要做什么。在下一章中，我们将看看如何在ASP.NET Core MVC应用程序上使用MongoDB。
- en: Why do we want to use MongoDB, you might wonder? Well, MongoDB is free, open
    source, and flexible. Then again, why would we not want to use MongoDB? See you
    in the next chapter!
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想为什么我们要使用MongoDB？嗯，MongoDB是免费的、开源的和灵活的。再说，我们为什么不想使用MongoDB呢？下一章见！
