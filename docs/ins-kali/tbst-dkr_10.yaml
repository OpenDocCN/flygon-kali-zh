- en: Chapter 10. Docker Deployment in a Public Cloud - AWS and Azure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。在公共云中部署Docker - AWS和Azure
- en: 'In this chapter, we''ll be doing Docker deployment on public clouds AWS and
    Azure. AWS rolled out the **Elastic Compute Cloud** (**EC2**) container service
    towards the end of 2014\. When it was launched, the company emphasised the management
    tasks with container cluster management with high-level APIs calls based on Amazon
    services release in the past. AWS has recently released Docker for AWS Beta, which
    allows users to quickly set up and configure a Docker 1.13 swarm mode on AWS as
    well as on Azure. With the help of this new service, we get the following features:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在公共云AWS和Azure上进行Docker部署。 AWS在2014年底推出了**弹性计算云**（**EC2**）容器服务。当它推出时，该公司强调了基于过去发布的亚马逊服务的高级API调用的容器集群管理任务。
    AWS最近发布了Docker for AWS Beta，允许用户快速在AWS和Azure上设置和配置Docker 1.13 swarm模式。借助这项新服务，我们可以获得以下功能：
- en: It ensures teams to can seamlessly move apps from the developer's laptop to
    a Dockerised staging and production environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保团队可以无缝地将应用程序从开发人员的笔记本电脑移动到基于Docker的暂存和生产环境
- en: It helps to deeply integrate with underlying AWS and Azure infrastructure, takes
    advantage of the host environment, and exposes familiar interfaces to administrators
    using the public cloud
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于与底层AWS和Azure基础设施深度集成，利用主机环境，并向使用公共云的管理员公开熟悉的接口
- en: It deploys the platform and migrates easily across various platforms where Dockerised
    apps can be moved simply and efficiently
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它部署平台并在各种平台之间轻松迁移，其中Docker化的应用程序可以简单高效地移动
- en: It makes sure the apps run perfectly with the latest and greatest Docker versions
    on the chosen platform, hardware, infrastructure, and OS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保应用程序在所选平台、硬件、基础设施和操作系统上以最新和最优秀的Docker版本完美运行
- en: In the second half of the chapter, we'll be covering the Azure Container Service,
    which makes it simple to create, configure, and manage clusters of virtual machines
    that provide the support to run containerised applications. It allows us to deploy
    and manage containerised applications with Microsoft Azure. It also supports the
    various Docker orchestration tools, such as DC/OS, Docker Swarm, or Kubernetes
    as per user choice.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后半部分，我们将涵盖Azure容器服务，它可以简单地创建、配置和管理提供支持运行容器化应用程序的虚拟机集群。它允许我们在Microsoft Azure上部署和管理容器化应用程序。它还支持各种Docker编排工具，如DC/OS、Docker
    Swarm或Kubernetes，根据用户选择。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Architecture of **Amazon EC2 Container Service** (**Amazon** **ECS**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon EC2容器服务的架构
- en: Troubleshooting AWS ECS deployment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除AWS ECS部署
- en: Updating the Docker containers in the ECS cluster
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新ECS集群中的Docker容器
- en: Architecture of the Microsoft Azure Container Service
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure容器服务的架构
- en: Troubleshooting the Microsoft Azure Container Service
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure容器服务的故障排除
- en: Docker Beta for AWS and Azure
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS和Azure的Docker Beta
- en: Architecture of Amazon ECS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon ECS的架构
- en: 'The core architecture of Amazon ECS is the cluster manager, a backend service
    which handles the task of cluster coordination and state management. On top of
    the cluster manager sits the scheduler manager. They are decoupled from each other,
    allowing customers to build their own scheduler. The pool of resources includes
    CPU, memory, and the networking resources of Amazon EC2 instances partitioned
    by containers. Amazon ECS coordinates the cluster through the open source Amazon
    ECS container agent running on each EC2 instance, and does the job of starting,
    stopping, and monitoring containers as requested by the scheduler. In order to
    manage a single source of truth: EC2 instances, task running on them and containers
    and resources utilized. We need the state to be stored somewhere, which is done
    in the cluster manager key/value store. To be robust and scalable, this key/value
    store needs to be durable, available, and protect against network partitions and
    hardware failures. To achieve the concurrency control for this key/value store,
    a transactional journal based data store is maintained to keep record of changes
    to every single entry. The Amazon ECS cluster manager has opened a set of APIs
    to allow users to access all the clustered state information stored in the key/value
    store. Through the `list` command, customers can retrieve the cluster under management,
    running tasks, and EC2 instances. The `describe` command can help to retrieve
    details of specific EC2 instances and the resources available with them. Amazon
    ECS architecture delivers a highly scalable, available, and low latency container
    management solution. It is fully managed and provides operational efficiency,
    allowing customers to build and deploy applications and not think about clusters
    to manage or scale:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊ECS的核心架构是集群管理器，这是一个后端服务，负责集群协调和状态管理的任务。在集群管理器的顶部是调度程序管理器。它们彼此解耦，允许客户构建自己的调度程序。资源池包括Amazon
    EC2实例的CPU、内存和网络资源，这些资源由容器分区。 Amazon ECS通过在每个EC2实例上运行的开源Amazon ECS容器代理来协调集群，并根据调度程序的要求启动、停止和监视容器。为了管理单一真相：EC2实例、运行在它们上面的任务以及使用的容器和资源。我们需要将状态存储在某个地方，这是在集群管理器键/值存储中完成的。为了实现这个键/值存储的并发控制，维护了一个基于事务日志的数据存储，以记录对每个条目的更改。亚马逊ECS集群管理器已经开放了一组API，允许用户访问存储在键/值存储中的所有集群状态信息。通过`list`命令，客户可以检索管理的集群、运行的任务和EC2实例。`describe`命令可以帮助检索特定EC2实例的详细信息以及可用的资源。亚马逊ECS架构提供了一个高度可扩展、可用和低延迟的容器管理解决方案。它是完全托管的，并提供运营效率，允许客户构建和部署应用程序，而不必考虑要管理或扩展的集群：
- en: '![Architecture of Amazon ECS](graphics/4534_10_1-1.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Amazon ECS架构](graphics/4534_10_1-1.jpg)'
- en: Amazon ECS architecture
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊ECS架构
- en: Troubleshooting - AWS ECS deployment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除 - AWS ECS部署
- en: An EC2 instance can be deployed manually and Docker can be configured on it,
    but ECS is a group of EC2 instances managed by ECS. ECS will take care of deploying
    Docker containers across the various hosts in a cluster and integrating with other
    AWS infrastructure services.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: EC2实例可以手动部署，并且可以在其上配置Docker，但ECS是由ECS管理的一组EC2实例。 ECS将负责在集群中的各个主机上部署Docker容器，并与其他AWS基础设施服务集成。
- en: 'In this section, we''ll be covering some of the basic steps to set up ECS on
    AWS, which will help to troubleshoot and bypass basic configuration errors:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍在AWS上设置ECS的一些基本步骤，这将有助于解决和绕过基本配置错误：
- en: Creating an ECS cluster
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建ECS集群
- en: Creating an ELB load balancer
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建ELB负载均衡器
- en: Running Docker containers in the ECS cluster
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ECS集群中运行Docker容器
- en: Updating Docker containers in the ECS cluster
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新ECS集群中的Docker容器
- en: Launch the **EC2 Container Service** listed under **Compute** from the AWS Console:![Troubleshooting
    - AWS ECS deployment](graphics/image_10_002.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从AWS控制台中的**计算**下列出的**EC2容器服务**启动：![故障排除 - AWS ECS部署](graphics/image_10_002.jpg)
- en: Click on the **Get Started** button:![Troubleshooting - AWS ECS deployment](graphics/image_10_003.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**开始**按钮：![故障排除 - AWS ECS部署](graphics/image_10_003.jpg)
- en: 'On the next screen, select both options: deploy a sample application, create,
    and manage a private repository. A private repository is created for the EC2 service
    and secured by AWS. It requires an AWS login to push images:![Troubleshooting
    - AWS ECS deployment](graphics/image_10_004.jpg)'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择两个选项：部署示例应用程序，创建和管理私有仓库。为EC2服务创建了一个私有仓库，并由AWS进行了安全保护。需要AWS登录才能推送镜像：![故障排除
    - AWS ECS部署](graphics/image_10_004.jpg)
- en: Provide the repository name, and we'll be able to see the repository address
    where container images need to be pushed being generated:![Troubleshooting - AWS
    ECS deployment](graphics/image_10_005.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供仓库名称，我们将能够看到生成需要推送容器镜像的仓库地址：![故障排除 - AWS ECS部署](graphics/image_10_005.jpg)
- en: 'The next screen shows some of the basic Docker and AWS CLI commands to push
    the container images to the private repository, as the following shows:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个屏幕显示了一些基本的Docker和AWS CLI命令，用于将容器镜像推送到私有仓库，如下所示：
- en: 'Install AWS CLI with the help of the `pip` package manager:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`软件包管理器安装AWS CLI：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use the `aws configure` command and provide an AWS access key ID and AWS secret
    access key to log in:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`aws configure`命令并提供AWS访问密钥ID和AWS秘密访问密钥进行登录：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Get the `docker login` command to authenticate the local Docker client to the
    private AWS registry:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`docker login`命令，以便将本地Docker客户端认证到私有AWS注册表：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the link which is generated as the output of the preceding command which
    will configure the Docker client to work with the private repository deployed
    in AWS:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的链接作为前述命令的输出，该链接将配置Docker客户端以便与部署在AWS中的私有仓库一起工作：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we''ll tag the nginx basic container image with the AWS private repository
    name in order to get it pushed to the private repository:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用AWS私有仓库名称标记nginx基本容器镜像，以便将其推送到私有仓库：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After pushing the image to the private Docker repository, we''ll be creating
    a task definition defining the following:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将镜像推送到私有Docker仓库后，我们将创建一个任务定义，定义以下内容：
- en: The Docker images to run
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要运行的Docker镜像
- en: The resources (CPU, memory, and other) to be allocated
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要分配的资源（CPU、内存等）
- en: The volumes to be mounted
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要挂载的卷
- en: The Docker containers to be linked together
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要链接在一起的Docker容器
- en: The command container that should run when it is started
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动时应运行的命令容器
- en: The environment variables to be set for the container
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要为容器设置的环境变量
- en: The IAM roles the task should use for permission
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务应使用的IAM角色
- en: Privileged Docker container or not
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特权Docker容器与否
- en: The labels to be given to the Docker container
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要给Docker容器的标签
- en: The port mapping and network, and Docker networking mode to be used for the
    containers:![Troubleshooting - AWS ECS deployment](graphics/image_10_006.jpg)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要用于容器的端口映射和网络，以及要用于容器的Docker网络模式：![故障排除 - AWS ECS部署](graphics/image_10_006.jpg)
- en: Advanced container configuration gives us the option to declare the **CPU units**,
    **Entry point**, privileged container or not, and so on:![Troubleshooting - AWS
    ECS deployment](graphics/image_10_007.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高级容器配置给我们提供了声明**CPU单位**、**入口点**、特权容器与否等选项：![故障排除 - AWS ECS部署](graphics/image_10_007.jpg)
- en: In the next step, we'll be declaring the service useful for a task that runs
    continuously, such as a web service.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，我们将声明对于运行持续的任务（如Web服务）有用的服务。
- en: This allows us to run and maintain a specified number (desired count) of task
    definitions simultaneously in the ECS cluster. If any of the tasks fails, the
    Amazon ECS service scheduler launches another instance and maintains the desired
    number of tasks in the service.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够在ECS集群中同时运行和维护指定数量（期望数量）的任务定义。如果任何任务失败，Amazon ECS服务调度程序将启动另一个实例，并保持服务中所需数量的任务。
- en: 'We can optionally run the desired count of tasks in our service behind a load
    balancer. Amazon ECS allows us to configure elastic load balancing to distribute
    traffic across the tasks defined in the service. The load balancer can be configured
    as an application load balancer, which can route requests to one or more ports
    and makes decisions at the application layer (HTTP/HTTPS). A classic load balancer
    makes decisions at the transport layer (TCP/SSL) or application layer (HTTP/HTTPS).
    It requires a fixed relationship between the load balancer port and container
    instance port:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择在负载均衡器后面的服务中运行所需数量的任务。Amazon ECS允许我们配置弹性负载均衡，以在服务中定义的任务之间分发流量。负载均衡器可以配置为应用负载均衡器，它可以将请求路由到一个或多个端口，并在应用层（HTTP/HTTPS）做出决策。经典负载均衡器在传输层（TCP/SSL）或应用层（HTTP/HTTPS）做出决策。它需要负载均衡器端口和容器实例端口之间的固定关系：
- en: '![Troubleshooting - AWS ECS deployment](graphics/image_10_008.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![故障排除 - AWS ECS部署](graphics/image_10_008.jpg)'
- en: In the next step, configure the cluster, which is a logical grouping of EC2
    instances. By default, we'll be defining `t2.micro` as an EC2 instance type and
    the current number of instances as `1`:![Troubleshooting - AWS ECS deployment](graphics/image_10_009.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，配置集群，这是EC2实例的逻辑分组。默认情况下，我们将把`t2.micro`定义为EC2实例类型，并将当前实例数定义为`1`：![故障排除
    - AWS ECS部署](graphics/image_10_009.jpg)
- en: Review the configuration and deploy the ECS cluster. After the cluster is created,
    click on the **View Service** button to see details about the service:![Troubleshooting
    - AWS ECS deployment](graphics/image_10_010.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查配置并部署ECS集群。创建集群后，单击**查看服务**按钮以查看有关服务的详细信息：![故障排除 - AWS ECS部署](graphics/image_10_010.jpg)
- en: Click on the EC2 container load balancer to get the publicly accessible service
    URL:![Troubleshooting - AWS ECS deployment](graphics/image_10_011.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击EC2容器负载均衡器，以获取公开访问的服务URL：![故障排除 - AWS ECS部署](graphics/image_10_011.jpg)
- en: In the description of the load balancer, DNS name is the URL to access the service
    from the Internet:![Troubleshooting - AWS ECS deployment](graphics/image_10_012.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在负载均衡器的描述中，DNS名称是从互联网访问服务的URL：![故障排除 - AWS ECS部署](graphics/image_10_012.jpg)
- en: The Welcome to nginx page can be seen as we access the load balancer public
    URL:![Troubleshooting - AWS ECS deployment](graphics/image_10_013.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们访问负载均衡器的公共URL时，可以看到欢迎使用nginx页面：![故障排除 - AWS ECS部署](graphics/image_10_013.jpg)
- en: Updating Docker containers in the ECS cluster
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新ECS集群中的Docker容器
- en: We have the Docker container running in the ECS cluster, so now, let's walk
    through a scenario where both the container and the service need to be updated.
    Usually, this happens in a continuous delivery model, where we have two production
    environments; the blue environment is the older version of the service and is
    currently live, to handle users' requests. The new release environment is termed
    the green environment, which is in the final stage and will be handling future
    incoming requests from users as we switch from the older version to the newer
    one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在ECS集群中运行Docker容器，现在，让我们走一遍这样一个情景，即容器和服务都需要更新。通常，这发生在持续交付模型中，我们有两个生产环境；蓝色环境是服务的旧版本，目前正在运行，以处理用户的请求。新版本环境被称为绿色环境，它处于最后阶段，并将处理未来用户的请求，因为我们从旧版本切换到新版本。
- en: 'The blue-green deployment helps to give a rapid rollback. We can switch the
    router to the blue environment if we face any issues in the latest green environment.
    Now, as the green environment is live and handling all the requests, the blue
    environment can be used as a staging environment for the final testing step of
    the next deployment. This scenario can easily be achieved with the help of **Task
    definitions** in ECS:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署有助于快速回滚。如果我们在最新的绿色环境中遇到任何问题，我们可以将路由器切换到蓝色环境。现在，由于绿色环境正在运行并处理所有请求，蓝色环境可以用作下一个部署的最终测试步骤的暂存环境。这种情况可以很容易地通过ECS中的任务定义来实现：
- en: '![Updating Docker containers in the ECS cluster](graphics/image_10_014.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![在ECS集群中更新Docker容器](graphics/image_10_014.jpg)'
- en: Blue-green deployment environment
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署环境
- en: The new revision can be created by selecting the ECS task created and clicking
    on the **Create new Task Definition** button:![Updating Docker containers in the
    ECS cluster](graphics/image_10_015.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择创建的ECS任务并单击**创建新任务定义**按钮，可以创建新的修订版本：![在ECS集群中更新Docker容器](graphics/image_10_015.jpg)
- en: In the new definition of the task, we can attach a new container or click on
    the container definition and update it. *Advanced container configuration* can
    also be used to set up the *Environment Variables*:![Updating Docker containers
    in the ECS cluster](graphics/image_10_016.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务的新定义中，我们可以附加一个新容器或单击容器定义并进行更新。*高级容器配置*也可以用于设置*环境变量*：![在ECS集群中更新Docker容器](graphics/image_10_016.jpg)
- en: After creating the latest task, click on **Actions** and then click on **Update
    Service**:![Updating Docker containers in the ECS cluster](graphics/image_10_017.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建最新任务后，单击**操作**，然后单击**更新服务**：![在ECS集群中更新Docker容器](graphics/image_10_017.jpg)
- en: The **console-sample-app-static:2** will update the **console-sample-app-static:1**
    and various options, including number of tasks and auto scaling options, are provided
    on the next screen:![Updating Docker containers in the ECS cluster](graphics/image_10_018.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**console-sample-app-static:2**将更新**console-sample-app-static:1**，并在下一个屏幕上提供了包括任务数量和自动缩放选项在内的各种选项：![在ECS集群中更新Docker容器](graphics/image_10_018.jpg)'
- en: The auto scaling group will launch, including the AMI, instance type, security
    group, and all other details used to launch the ECS instance. Using the scaling
    policy, we can scale the cluster instances and services, and safely scale them
    down as demands subside. The availability zone aware ECS scheduler manages, distributes,
    and scales the cluster, thus making the architecture highly available.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 自动缩放组将启动，包括AMI、实例类型、安全组和用于启动ECS实例的所有其他细节。使用缩放策略，我们可以扩展集群实例和服务，并在需求减少时安全地缩小它们。可用区感知的ECS调度程序管理、分发和扩展集群，从而使架构具有高可用性。
- en: Microsoft Azure container service architecture
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure容器服务架构
- en: Azure is one of the fastest growing infrastructure services in the market today.
    It supports scale-on-demand and the ability to create hybrid environments, and
    big data with the help of Azure Cloud Services. The Azure Container Service provides
    deployment of open source container clustering and orchestrating solutions. With
    the help of the Azure Container Service, we can deploy DC/OS (Marathon), Kubernetes,
    and Swarm based container clusters. The Azure portal provides a simple UI and
    CLI support to achieve this deployment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Azure是当今市场上增长最快的基础设施服务之一。它支持按需扩展和创建混合环境的能力，并借助Azure云服务支持大数据。Azure容器服务提供了开源容器集群和编排解决方案的部署。借助Azure容器服务，我们可以部署基于DC/OS（Marathon）、Kubernetes和Swarm的容器集群。Azure门户提供了简单的UI和CLI支持来实现这种部署。
- en: Microsoft Azure is officially the first public cloud to support mainstream container
    orchestration engines. Even the Azure Container Service engine is open sourced
    on GitHub ([https://github.com/Azure/acs-engine](https://github.com/Azure/acs-engine)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure正式成为第一个支持主流容器编排引擎的公共云。即使Azure容器服务引擎也在GitHub上开源（[https://github.com/Azure/acs-engine](https://github.com/Azure/acs-engine)）。
- en: This step enables developers to understand the architecture and run multiple
    orchestration engines directly on the vSphere Hypervisor, KVM, or HyperV. The
    **Azure Resource Manager** (**ARM**) templates provide the basis of the cluster
    deployed via the ACS APIs. The ACS engine is built in Go, which enables users
    to combine different pieces of configuration and build a final template that can
    be used for deploying a cluster.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步使开发人员能够理解架构并直接在vSphere Hypervisor、KVM或HyperV上运行多个编排引擎。 **Azure资源管理器**（**ARM**）模板为通过ACS
    API部署的集群提供了基础。ACS引擎是用Go构建的，这使用户能够组合不同的配置部件并构建最终模板，用于部署集群。
- en: 'The Azure container engine has the following features:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Azure容器引擎具有以下功能：
- en: Orchestrator of your choice, such as DC/OS, Kubernetes, or Swarm
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您选择的编排器，如DC/OS，Kubernetes或Swarm
- en: Multiple agent pools (availability set and virtual machine set)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个代理池（可用性集和虚拟机集）
- en: 'Docker cluster size up to 1,200:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker集群大小最多可达1,200个：
- en: Supporting custom vNET
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持自定义vNET
- en: 'The Azure Container Service is primarily built with DC/OS as one of the critical
    components, and implementation is optimized for easy creation and usage on Microsoft
    Azure. ACS architecture has three basic components: Azure Compute to manage the
    VM health, Mesos for container health management, and Swarm for Docker API management:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Azure容器服务主要是以DC/OS作为关键组件之一构建的，并且在Microsoft Azure上进行了优化以便轻松创建和使用。ACS架构有三个基本组件：Azure
    Compute用于管理VM健康，Mesos用于容器健康管理，Swarm用于Docker API管理：
- en: '![Microsoft Azure container service architecture](graphics/image_10_019.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Microsoft Azure容器服务架构](graphics/image_10_019.jpg)'
- en: Microsoft Azure container architecture
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure容器架构
- en: Troubleshooting - The Microsoft Azure Container Service
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除-微软Azure容器服务
- en: 'In this section, we''ll be looking at how to deploy a Docker Swarm cluster
    and provide orchestrator configuration details in Microsoft Azure:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何在Microsoft Azure中部署Docker Swarm集群，并提供编排器配置详细信息：
- en: 'We need to create an RSA key, which will be requested in the deployment steps.
    The key will be required to log in to the deployed machines post installation:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个RSA密钥，在部署步骤中将被请求。该密钥将需要用于登录到安装后的部署机器：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once generated, the keys can be found in `~/root/id_rsa`
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成，密钥可以在`~/root/id_rsa`中找到
- en: Click on the **New** button in your Azure account portal:![Troubleshooting -
    The Microsoft Azure Container Service](graphics/image_10_022.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure账户门户中单击**新建**按钮：![故障排除-微软Azure容器服务](graphics/image_10_022.jpg)
- en: Search for the **Azure Container Service** and select it:![Troubleshooting -
    The Microsoft Azure Container Service](graphics/image_10_023.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**Azure容器服务**并选择它：![故障排除-微软Azure容器服务](graphics/image_10_023.jpg)
- en: After this step, select **Resource Manager** as the deployment model and click
    on the **Create** button:![Troubleshooting - The Microsoft Azure Container Service](graphics/image_10_024.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此步骤后，选择**资源管理器**作为部署模型，然后单击**创建**按钮：![故障排除-微软Azure容器服务](graphics/image_10_024.jpg)
- en: Configure the basics settings page, the following details are required: **User
    name**, which will be administrator for the virtual machines deployed in the Docker
    Swarm cluster; the second field is to provide the **SSH public key** we created
    in the step 1; and create a new resource group by specifying the name in the **Resource
    Group** field:![Troubleshooting - The Microsoft Azure Container Service](graphics/image_10_025.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置基本设置页面，需要以下细节：**用户名**，将作为部署在Docker Swarm集群中的虚拟机的管理员；第二个字段是提供我们在步骤1中创建的**SSH公钥**；并通过在**资源组**字段中指定名称来创建一个新的资源组：![故障排除
    - Microsoft Azure容器服务](graphics/image_10_025.jpg)
- en: Select the **Orchestrator configuration** as **Swarm**, **DC/OS**, or **Kubernetes**,
    as required:![Troubleshooting - The Microsoft Azure Container Service](graphics/image_10_026.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要选择**编排器配置**为**Swarm**，**DC/OS**或**Kubernetes**：![故障排除 - Microsoft Azure容器服务](graphics/image_10_026.jpg)
- en: In the next step, provide the orchestrator configuration, **Agent count**, and
    **Master count** for this deployment. Also, the DNS prefix can be provided as
    `dockerswarm` or as required:![Troubleshooting - The Microsoft Azure Container
    Service](graphics/image_10_027.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，为此部署提供编排器配置、**代理计数**和**主服务器计数**。还可以根据需要提供DNS前缀，如`dockerswarm`：![故障排除 -
    Microsoft Azure容器服务](graphics/image_10_027.jpg)
- en: Check the **Summary**, and once validation is passed click on **OK**. On the
    next screen, click on the **Purchase** button to go ahead with the deployment:![Troubleshooting
    - The Microsoft Azure Container Service](graphics/image_10_028.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**摘要**，一旦验证通过，点击**确定**。在下一个屏幕上，点击**购买**按钮继续部署：![故障排除 - Microsoft Azure容器服务](graphics/image_10_028.jpg)
- en: Once the deployment has started, the status can be seen on the Azure primary
    **Dashboard**:![Troubleshooting - The Microsoft Azure Container Service](graphics/image_10_029.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦部署开始，可以在Azure主要**仪表板**上看到状态：![故障排除 - Microsoft Azure容器服务](graphics/image_10_029.jpg)
- en: Once the Docker Swarm cluster is created, click on the swarm-master from the
    Docker Swarm resources shown on the dashboard:![Troubleshooting - The Microsoft
    Azure Container Service](graphics/image_10_030.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Docker Swarm集群后，点击仪表板上显示的Docker Swarm资源中的swarm-master：![故障排除 - Microsoft Azure容器服务](graphics/image_10_030.jpg)
- en: In the **Essentials** section of the swarm-master, you'll be able to find the
    DNS entry, as shown in the following screenshot:![Troubleshooting - The Microsoft
    Azure Container Service](graphics/image_10_031.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在swarm-master的**基本信息**部分，您将能够找到DNS条目，如下面的截图所示：![故障排除 - Microsoft Azure容器服务](graphics/image_10_031.jpg)
- en: 'The following is the command to connect via SSH to the swarm-master:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是连接到swarm-master的SSH命令：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once connected to the master, basic Docker Swarm commands can be executed, and
    container deployment can be done on the Swarm cluster deployed on Microsoft Azure.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接到主服务器，可以执行基本的Docker Swarm命令，并且可以在部署在Microsoft Azure上的Swarm集群上部署容器。
- en: Docker Beta for AWS and Azure
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS和Azure的Docker Beta
- en: With the recent release of this service, Docker has made it simple to deploy
    the Docker engine on AWS and Azure through tight integration with both cloud platforms'
    infrastructure services. This allows developers to bundle their code and deploy
    it in production machines, regardless of the environment. Currently, this service
    is in Beta version, but we have covered a basic tutorial of Docker deployment
    for AWS. This service also allows you to upgrade Docker versions comfortably within
    these environments. Even the Swarm modes are enabled in these services, which
    provides a self-healing and self-organizing Swarm mode for the individual Docker
    engines. They are also distributed across availability zones.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这项服务的最新发布，Docker已经简化了通过与两个云平台的基础设施服务紧密集成，在AWS和Azure上部署Docker引擎的过程。这使开发人员能够将他们的代码捆绑并部署到生产机器中，而不管环境如何。目前，该服务处于Beta版本，但我们已经介绍了AWS的Docker部署的基本教程。该服务还允许您在这些环境中轻松升级Docker版本。甚至这些服务中还启用了Swarm模式，为单个Docker引擎提供了自愈和自组织的Swarm模式。它们还分布在可用性区域中。
- en: 'Docker Beta for AWS and Azure provides the following improvements compared
    to the preceding approaches:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与先前的方法相比，Docker Beta for AWS and Azure提供了以下改进：
- en: Using SSH keys for an IaaS account, for access control
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSH密钥进行IaaS帐户的访问控制
- en: Easy provisioning of infrastructure load balancing, and dynamic updating, as
    apps are provisioned in the system
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松配置基础设施负载平衡和动态更新，因为应用程序在系统中被配置
- en: Secured Docker setups can be done with the help of security groups and virtual
    networks
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用安全组和虚拟网络来进行安全的Docker设置
- en: 'Docker for AWS uses the *CloudFormation* template and creates the following
    objects:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for AWS使用*CloudFormation*模板并创建以下对象：
- en: EC2 instances with auto scaling enabled
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用自动缩放的EC2实例
- en: IAM profiles
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM配置文件
- en: DynamoDB Tables
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DynamoDB表
- en: VPC, subnets, and security groups
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC、子网和安全组
- en: ELB
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELB
- en: 'SSH keys of the AWS region are required to deploy and access the deployed instances.
    The installation can also be done with the CloudFormation template using the AWS
    CLI, but in this tutorial, we''ll be covering the AWS console based approach:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 需要部署和访问部署实例的AWS区域的SSH密钥。安装也可以使用AWS CLI使用CloudFormation模板完成，但在本教程中，我们将介绍基于AWS控制台的方法：
- en: Log in to the console, select CloudFormation, and click on **Create Stack**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录控制台，选择CloudFormation，然后单击**创建堆栈**。
- en: '**Specify the Amazon S3 template URL** as `https://docker-for-aws.s3.amazonaws.com/aws/beta/aws-v1.13.0-rc4-beta14.json`,
    as follows:![Docker Beta for AWS and Azure](graphics/image_10_032.jpg)'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定Amazon S3模板URL为`https://docker-for-aws.s3.amazonaws.com/aws/beta/aws-v1.13.0-rc4-beta14.json`，如下所示：![Docker
    Beta for AWS and Azure](graphics/image_10_032.jpg)
- en: On the next screen, specify the stack details, stating the number of Swarm managers
    and nodes needing to be deployed. The AWS generated SSH key to be used can also
    be specified:![Docker Beta for AWS and Azure](graphics/image_10_033.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，指定堆栈详细信息，说明需要部署的Swarm管理器和节点的数量。还可以指定要使用的AWS生成的SSH密钥：![Docker Beta for
    AWS and Azure](graphics/image_10_033.jpg)
- en: On the next screen, we'll have the option to provide tags as well as IAM permission
    roles:![Docker Beta for AWS and Azure](graphics/image_10_034.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，我们将有提供标签以及IAM权限角色的选项：![Docker Beta for AWS and Azure](graphics/image_10_034.jpg)
- en: Review the details and launch the stack:![Docker Beta for AWS and Azure](graphics/image_10_035.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查详细信息并启动堆栈：![Docker Beta for AWS and Azure](graphics/image_10_035.jpg)
- en: The stack will get listed with the status **CREATE_IN_PROGRESS**. Wait till
    the stack gets fully deployed:![Docker Beta for AWS and Azure](graphics/image_10_036.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆栈将显示为状态**CREATE_IN_PROGRESS**。等待堆栈完全部署：![Docker Beta for AWS and Azure](graphics/image_10_036.jpg)
- en: Post deployment, the stack will have the status **CREATE_COMPLETE**. Click on
    it and the deployed environment details will be listed:![Docker Beta for AWS and
    Azure](graphics/image_10_037.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署后，堆栈将具有状态**CREATE_COMPLETE**。单击它，部署的环境详细信息将被列出：![Docker Beta for AWS and Azure](graphics/image_10_037.jpg)
- en: 'The AWS generated SSH keys can be used to SSH into the manager node and administer
    the deployed Docker Swarm instance:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: AWS生成的SSH密钥可用于SSH到管理节点并管理部署的Docker Swarm实例：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `docker info` command will provide information about the Swarm cluster.
    The Swarm nodes can be listed using the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker info`命令将提供有关Swarm集群的信息。可以使用以下命令列出Swarm节点：'
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The SSH connection can be made directly to the leader node as well, and a basic
    Docker container can be deployed:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: SSH连接也可以直接连接到领导节点，并部署基本的Docker容器：
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The service can be created for the preceding deployed container as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 服务可以按照以下方式为先前部署的容器创建：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The service can be scaled in the Swarm cluster and removed as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照以下方式在Swarm集群中扩展和移除服务：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered Docker deployment on public clouds Microsoft
    Azure and AWS. Both cloud providers provide a competitive container service for
    customers. This chapter helps to explain the detailed architecture of the AWS
    EC2 and Microsoft Azure Container Service architecture. It has also covered installation
    and troubleshooting for all the deployment steps of the container cluster. This
    chapter has covered the blue-green deployment scenario and how it can be supported
    in AWS EC2, which is mostly necessary in the case of modern SaaS applications.
    Finally, we have covered Docker Beta, for AWS and Azure, which was launched recently
    and provides easy migration of containers from a development environment to a
    production environment as they are same. Container-based applications can be easily
    deployed and scaled with Docker Beta, as this service is very well coupled with
    the IaaS of the cloud providers.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了在公共云Microsoft Azure和AWS上部署Docker。两家云服务提供商为客户提供了有竞争力的容器服务。本章帮助解释了AWS
    EC2和Microsoft Azure容器服务架构的详细架构。它还涵盖了容器集群的所有部署步骤的安装和故障排除。本章还涵盖了蓝绿部署场景以及它在AWS EC2中的支持情况，这在现代SaaS应用程序的情况下通常是必要的。最后，我们介绍了最近推出的Docker
    Beta，适用于AWS和Azure，它提供了容器从开发环境迁移到生产环境的简便方法，因为它们是相同的。基于容器的应用程序可以很容易地使用Docker Beta进行部署和扩展，因为这项服务与云服务提供商的IaaS非常紧密地结合在一起。
