["```\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: KMS Keys\n\nResources:\n  KmsKey:\n    Type: AWS::KMS::Key\n    Properties:\n      Description: Custom key for Secrets\n      Enabled: true\n      KeyPolicy:\n        Version: \"2012-10-17\"\n        Id: key-policy\n        Statement: \n          - Sid: Allow root account access to key\n            Effect: Allow\n            Principal:\n              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root\n            Action:\n              - kms:*\n            Resource: \"*\"\n  KmsKeyAlias:\n    Type: AWS::KMS::Alias\n    Properties:\n      AliasName: alias/secrets-key\n      TargetKeyId: !Ref KmsKey\n\n```", "```\nOutputs:\n  KmsKey:\n    Description: Secrets Key KMS Key ARN\n    Value: !Sub ${KmsKey.Arn}\n    Export:\n      Name: secrets-key\n```", "```\n> export AWS_PROFILE=docker-in-aws\n> aws cloudformation deploy --template-file kms.yml --stack-name kms\nEnter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - kms\n> aws cloudformation list-exports\n{\n    \"Exports\": [\n        {\n            \"ExportingStackId\": \"arn:aws:cloudformation:us-east-1:385605022855:stack/kms/be0a6d20-3bd4-11e8-bf63-50faeaabf0d1\",\n            \"Name\": \"secrets-key\",\n            \"Value\": \"arn:aws:kms:us-east-1:385605022855:key/ee08c380-153c-4f31-bf72-9133b41472ad\"\n        }\n    ]\n}\n```", "```\n> aws kms encrypt --key-id alias/secrets-key --plaintext \"Hello World\"\n{\n    \"CiphertextBlob\": \"AQICAHifCoHWAYb859mOk+pmJ7WgRbhk58UL9mhuMIcVAKJ18gHN1/SRRhwQVoVJvDS6i7MoAAAAaTBnBgkqhkiG9w0BBwagWjBYAgEAMFMGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMYm4au5zNZG9wa5ceAgEQgCZdADZyWKTcwDfTpw60kUI8aIAtrECRyW+/tu58bYrMaZFlwVYmdA==\",\n    \"KeyId\": \"arn:aws:kms:us-east-1:385605022855:key/ee08c380-153c-4f31-bf72-9133b41472ad\"\n}\n```", "```\n> ciphertext=$(aws kms encrypt --key-id alias/secrets-key --plaintext \"Hello World\" --query CiphertextBlob --output text)\n> aws kms decrypt --ciphertext-blob fileb://<(echo $ciphertext | base64 --decode)\n{\n    \"KeyId\": \"arn:aws:kms:us-east-1:385605022855:key/ee08c380-153c-4f31-bf72-9133b41472ad\",\n    \"Plaintext\": \"SGVsbG8gV29ybGQ=\"\n}\n```", "```\n> aws kms decrypt --ciphertext-blob fileb://<(echo $ciphertext | base64 --decode) \\\n    --query Plaintext --output text | base64 --decode\nHello World\n```", "```\n> aws secretsmanager create-secret --name test/credentials --kms-key-id alias/secrets-key \\\n --secret-string '{\"MYSQL_PASSWORD\":\"some-super-secret-password\"}'\n{\n    \"ARN\": \"arn:aws:secretsmanager:us-east-1:385605022855:secret:test/credentials-l3JdTI\",\n    \"Name\": \"test/credentials\",\n    \"VersionId\": \"beab75bd-e9bc-4ac8-913e-aca26f6e3940\"\n}\n```", "```\n> aws secretsmanager get-secret-value --secret-id test/credentials\n{\n    \"ARN\": \"arn:aws:secretsmanager:us-east-1:385605022855:secret:test/credentials-l3JdTI\",\n    \"Name\": \"test/credentials\",\n    \"VersionId\": \"beab75bd-e9bc-4ac8-913e-aca26f6e3940\",\n    \"SecretString\": \"{\\\"MYSQL_PASSWORD\\\":\\\"some-super-password\\\"}\",\n    \"VersionStages\": [\n        \"AWSCURRENT\"\n    ],\n    \"CreatedDate\": 1523605423.133\n}\n```", "```\n> aws secretsmanager get-random-password --password-length 50 --exclude-characters \"'\\\"\"\n{\n    \"RandomPassword\": \"E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY\"\n}\n> aws secretsmanager update-secret --secret-id todobackend/credentials \\\n    --kms-key-id alias/secrets-key \\\n    --secret-string '{\n \"MYSQL_PASSWORD\":\"some-super-secret-password\",\n \"SECRET_KEY\": \"E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY\"\n }'\n{\n    \"ARN\": \"arn:aws:secretsmanager:us-east-1:385605022855:secret:todobackend/credentials-f7AQlO\",\n    \"Name\": \"todobackend/credentials\",\n    \"VersionId\": \"cd258b90-d108-4a06-b0f2-849be15f9c33\"\n}\n```", "```\n> aws secretsmanager delete-secret --secret-id test/credentials\n{\n    \"ARN\": \"arn:aws:secretsmanager:us-east-1:385605022855:secret:test/credentials-l3JdTI\",\n    \"Name\": \"test/credentials\",\n    \"DeletionDate\": 1526198116.323\n}\n```", "```\n> aws secretsmanager delete-secret --secret-id todobackend/credentials\n{\n    \"ARN\": \"arn:aws:secretsmanager:us-east-1:385605022855:secret:todobackend/credentials-f7AQlO\",\n    \"Name\": \"todobackend/credentials\",\n    \"DeletionDate\": 1526285256.951\n}\n> aws secretsmanager get-secret-value --secret-id todobackend/credentials\nAn error occurred (InvalidRequestException) when calling the GetSecretValue operation: You can\u2019t perform this operation on the secret because it was deleted.\n\n> aws secretsmanager restore-secret --secret-id todobackend/credentials\n{\n    \"ARN\": \"arn:aws:secretsmanager:us-east-1:385605022855:secret:todobackend/credentials-f7AQlO\",\n    \"Name\": \"todobackend/credentials\"\n}\n\n> aws secretsmanager get-secret-value --secret-id todobackend/credentials \\\n --query SecretString --output text\n```", "```\n{\n  \"MYSQL_PASSWORD\":\"some-super-secret-password\",\n  \"SECRET_KEY\": \"E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY\"\n}\n```", "```\n> pwd\n/Users/jmenga/Source/docker-in-aws/todobackend\n> touch entrypoint.sh > tree -L 1 .\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 entrypoint.sh\n\u2514\u2500\u2500 src\n\n1 directory, 4 files\n```", "```\n#!/bin/bash\nset -e -o pipefail\n\n# Inject AWS Secrets Manager Secrets\n# Read space delimited list of secret names from SECRETS environment variable\necho \"Processing secrets [${SECRETS}]...\"\nread -r -a secrets <<< \"$SECRETS\"\nfor secret in \"${secrets[@]}\"\ndo\n  vars=$(aws secretsmanager get-secret-value --secret-id $secret \\\n    --query SecretString --output text \\\n    | jq -r 'to_entries[] | \"export \\(.key)='\\''\\(.value)'\\''\"')\n  eval \"$vars\"\ndone\n\n# Run application\nexec \"$@\"\n```", "```\n> export SECRETS=\"db/credentials app/credentials\"\n```", "```\n> aws secretsmanager get-secret-value --secret-id todobackend/credentials \\\n --query SecretString --output text \\\n | jq -r 'to_entries[] | \"export \\(.key)='\\''\\(.value)'\\''\"'\nexport MYSQL_PASSWORD='some-super-secret-password'\nexport SECRET_KEY='E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY'\n```", "```\n...\n...\n# Release stage\nFROM alpine\nLABEL=todobackend\n\n# Install operating system dependencies\nRUN apk add --no-cache python3 mariadb-client bash curl bats jq && \\\n pip3 --no-cache-dir install awscli\n\n# Create app user\nRUN addgroup -g 1000 app && \\\n    adduser -u 1000 -G app -D app\n\n# Copy and install application source and pre-built dependencies\nCOPY --from=test --chown=app:app /build /build\nCOPY --from=test --chown=app:app /app /app\nRUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir\nRUN rm -rf /build\n\n# Create public volume\nRUN mkdir /public\nRUN chown app:app /public\nVOLUME /public\n\n# Entrypoint script\nCOPY entrypoint.sh /usr/bin/entrypoint\nRUN chmod +x /usr/bin/entrypoint\nENTRYPOINT [\"/usr/bin/entrypoint\"]\n\n# Set working directory and application user\nWORKDIR /app\nUSER app\n```", "```\n> git add -A\n> git commit -a -m \"Add entrypoint script\"\n[master 5fdbe62] Add entrypoint script\n 4 files changed, 31 insertions(+), 7 deletions(-)\n create mode 100644 entrypoint.sh\n> export AWS_PROFILE=docker-in-aws\n> make login\n$(aws ecr get-login --no-include-email)\nLogin Succeeded\n> make test && make release docker-compose build --pull release\nBuilding release\nStep 1/28 : FROM alpine AS test\nlatest: Pulling from library/alpine...\n...\ndocker-compose run app bats acceptance.bats\nStarting todobackend_db_1 ... done\nProcessing secrets []...\n1..4\nok 1 todobackend root\nok 2 todo items returns empty list\nok 3 create todo item\nok 4 delete todo item\nApp running at http://localhost:32784\n> make publish docker-compose push release\nPushing release (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest)...\nThe push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]\nfdc98d6948f6: Pushed\n9f33f154b3fa: Pushed\nd8aedb2407c9: Pushed\nf778da37eed6: Pushed\n05e5971d2995: Pushed\n4932bb9f39a5: Pushed\nfa63544c9f7e: Pushed\nfd3b38ee8bd6: Pushed\ncd7100a72410: Layer already exists\nlatest: digest: sha256:5d456c61dd23728ec79c281fe5a3c700370382812e75931b45f0f5dd1a8fc150 size: 2201\nPushing app (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:5fdbe62)...\nThe push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]\nfdc98d6948f6: Layer already exists\n9f33f154b3fa: Layer already exists\nd8aedb2407c9: Layer already exists\nf778da37eed6: Layer already exists\n05e5971d2995: Layer already exists\n4932bb9f39a5: Layer already exists\nfa63544c9f7e: Layer already exists\nfd3b38ee8bd6: Layer already exists\ncd7100a72410: Layer already exists\n34d86eb: digest: sha256:5d456c61dd23728ec79c281fe5a3c700370382812e75931b45f0f5dd1a8fc150 size: 2201\n```", "```\n...\n...\nResources:\n  ...\n  ...\n  ApplicationTaskRole:\n Type: AWS::IAM::Role\n Properties:\n AssumeRolePolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Effect: Allow\n Principal:\n Service: ecs-tasks.amazonaws.com\n Action:\n - sts:AssumeRole\n Policies:\n - PolicyName: SecretsManagerPermissions\n PolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Sid: GetSecrets\n Effect: Allow\n Action:\n - secretsmanager:GetSecretValue\n Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:todobackend/*\n - Sid: DecryptSecrets\n Effect: Allow\n Action:\n - kms:Decrypt\n Resource: !ImportValue secrets-key\n  ApplicationTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n...\n...\n```", "```\nParameters:\n  ...\n  ...\n  ApplicationSubnets:\n    Type: List<AWS::EC2::Subnet::Id>\n    Description: Target subnets for EC2 instances\n # The DatabasePassword parameter has been removed\n  VpcId:\n    Type: AWS::EC2::VPC::Id\n    Description: Target VPC\n ...\n  ... \nResources:\n  ...\n  ...\n  MigrateTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: todobackend-migrate\n TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}\n      ContainerDefinitions:\n        - Name: migrate\n          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}\n          MemoryReservation: 5\n          Cpu: 5\n          Environment:\n            - Name: DJANGO_SETTINGS_MODULE\n              Value: todobackend.settings_release\n            - Name: MYSQL_HOST\n              Value: !Sub ${ApplicationDatabase.Endpoint.Address}\n            - Name: MYSQL_USER\n              Value: todobackend\n            - Name: MYSQL_DATABASE\n              Value: todobackend\n            # The MYSQL_PASSWORD variable has been removed\n - Name: SECRETS\n Value: todobackend/credentials\n            - Name: AWS_DEFAULT_REGION\n              Value: !Ref AWS::Region  ...\n  ...\n  ApplicationTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: todobackend\n TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}\n      Volumes:\n        - Name: public\n      ContainerDefinitions:\n        - Name: todobackend\n          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}\n          MemoryReservation: 395\n          Cpu: 245\n          MountPoints:\n            - SourceVolume: public\n              ContainerPath: /public\n          Environment:- Name: DJANGO_SETTINGS_MODULE\n              Value: todobackend.settings_release\n            - Name: MYSQL_HOST\n              Value: !Sub ${ApplicationDatabase.Endpoint.Address}\n            - Name: MYSQL_USER\n              Value: todobackend\n            - Name: MYSQL_DATABASE\n              Value: todobackend\n # The MYSQL_PASSWORD and SECRET_KEY variables have been removed            - Name: SECRETS\n Value: todobackend/credentials\n            - Name: AWS_DEFAULT_REGION\n              Value: !Ref AWS::Region\n...\n...\n```", "```\nApplicationDesiredCount=1\nApplicationImageId=ami-ec957491\nApplicationImageTag=5fdbe62\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\nVpcId=vpc-f8233a80\n```", "```\n...\n...\nResources:\n  SecretsManager:\n Type: AWS::Lambda::Function\n DependsOn:\n - SecretsManagerLogGroup\n Properties:\n FunctionName: !Sub ${AWS::StackName}-secretsManager\n Description: !Sub ${AWS::StackName} Secrets Manager\n Handler: index.handler\n MemorySize: 128\n Runtime: python3.6\n Timeout: 300\n Role: !Sub ${SecretsManagerRole.Arn}\n Code:\n ZipFile: |\n import cfnresponse, json, sys, os\n import boto3\n\n client = boto3.client('secretsmanager')\n\n def handler(event, context):\n            sys.stdout = sys.__stdout__\n try:\n print(\"Received event %s\" % event)\n if event['RequestType'] == 'Delete':\n cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])\n return\n secret = client.get_secret_value(\n SecretId=event['ResourceProperties']['SecretId'],\n )\n credentials = json.loads(secret['SecretString'])\n              # Suppress logging output to ensure credential values are kept secure\n              with open(os.devnull, \"w\") as devnull:\n                sys.stdout = devnull\n                cfnresponse.send(\n                  event, \n                  context, \n                  cfnresponse.SUCCESS,\n                  credentials, # This dictionary will be exposed to CloudFormation resources\n                  secret['VersionId'], # Physical ID of the custom resource\n                  noEcho=True\n                )\n except Exception as e:\n print(\"A failure occurred with exception %s\" % e)\n cfnresponse.send(event, context, cfnresponse.FAILED, {})\n SecretsManagerRole:\n Type: AWS::IAM::Role\n Properties:\n AssumeRolePolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Effect: Allow\n Principal:\n Service: lambda.amazonaws.com\n Action:\n - sts:AssumeRole\n Policies:\n - PolicyName: SecretsManagerPermissions\n PolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Sid: GetSecrets\n Effect: Allow\n Action:\n - secretsmanager:GetSecretValue\n Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:todobackend/*\n            - Sid: DecryptSecrets\n              Effect: Allow\n              Action:\n - kms:Decrypt\n Resource: !ImportValue secrets-key\n- Sid: ManageLambdaLogs\n Effect: Allow\n Action:\n - logs:CreateLogStream\n - logs:PutLogEvents\n Resource: !Sub ${SecretsManagerLogGroup.Arn}\n```", "```\nSecretsManagerLogGroup:\n Type: AWS::Logs::LogGroup\n Properties:\n LogGroupName: !Sub /aws/lambda/${AWS::StackName}-secretsManager\n RetentionInDays: 7...\n  ...\n```", "```\n...\n...\nResources:\n  Secrets:\n Type: AWS::CloudFormation::CustomResource\n Properties:\n ServiceToken: !Sub ${SecretsManager.Arn}\n SecretId: todobackend/credentials\n  SecretsManager:\n    Type: AWS::Lambda::FunctionResources:\n  ...\n  ...\n  ApplicationDatabase:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: MySQL\n      EngineVersion: 5.7\n      DBInstanceClass: db.t2.micro\n      AllocatedStorage: 10\n      StorageType: gp2\n      MasterUsername: todobackend\n MasterUserPassword: !Sub ${Secrets.MYSQL_PASSWORD} ...\n  ...\n```", "```\n> aws cloudformation deploy --template-file stack.yml \\\n --stack-name todobackend --parameter-overrides $(cat dev.cfg) \\\n --capabilities CAPABILITY_NAMED_IAM\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - todobackend\n```"]