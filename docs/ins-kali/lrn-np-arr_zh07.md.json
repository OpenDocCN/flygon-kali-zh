["```py\nprint \"Gaussian integral\", np.sqrt(np.pi),integrate.quad(lambda x: np.exp(-x**2), -np.inf, np.inf)\n```", "```py\nGaussian integral 1.77245385091 (1.7724538509055159, 1.4202636780944923e-08)\n\n```", "```py\n    x = np.linspace(-18, 18, 36)\n    noise = 0.1 * np.random.random(len(x))\n    signal = np.sinc(x) + noise\n    ```", "```py\n    interpolated = interpolate.interp1d(x, signal)\n    x2 = np.linspace(-18, 18, 180)\n    y = interpolated(x2)\n    ```", "```py\n    cubic = interpolate.interp1d(x, signal, kind=\"cubic\")\n    y2 = cubic(x2)\n    ```", "```py\n    plt.plot(x, signal, 'o', label=\"data\")\n    plt.plot(x2, y, '-', label=\"linear\")\n    plt.plot(x2, y2, '--', lw=2, label=\"cubic\")\n\n    plt.legend()\n    plt.show()\n    ```", "```py\nimport numpy as np\nfrom scipy import interpolate\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-18, 18, 36)\nnoise = 0.1 * np.random.random(len(x))\nsignal = np.sinc(x) + noise\n\ninterpolated = interpolate.interp1d(x, signal)\nx2 = np.linspace(-18, 18, 180)\ny = interpolated(x2)\n\ncubic = interpolate.interp1d(x, signal, kind=\"cubic\")\ny2 = cubic(x2)\n\nplt.plot(x, signal, 'o', label=\"data\")\nplt.plot(x2, y, '-', label=\"linear\")\nplt.plot(x2, y2, '--', lw=2, label=\"cubic\")\n\nplt.legend()\nplt.show()\n```", "```py\n    import numpy\n\n    def pos_confidence(numbers):\n       diffs = numpy.diff(numbers)\n       n = float(len(diffs))\n       p = len(diffs[diffs > 0])/n\n       confidence = numpy.sqrt(p * (1 - p)/ n)\n\n       return (p, confidence)\n    ```", "```py\n    from distutils.core import setup\n    from distutils.extension import Extension\n    from Cython.Distutils import build_ext\n\n    ext_modules = [Extension(\"binomial_proportion\", [\"binomial_proportion.pyx\"])]\n\n    setup(\n            name = 'Binomial proportion app',\n            cmdclass = {'build_ext': build_ext},\n            ext_modules = ext_modules\n         )\n    ```", "```py\n    python setup.py build_ext --inplace\n\n    ```", "```py\n    from matplotlib.finance import quotes_historical_yahoo\n    from datetime import date\n    import numpy\n    import sys\n    from binomial_proportion import pos_confidence\n\n    #1\\. Get close prices.\n    today = date.today()\n    start = (today.year - 1, today.month, today.day)\n\n    quotes = quotes_historical_yahoo(sys.argv[1], start, today)\n    close =  numpy.array([q[4] for q in quotes])\n    print pos_confidence(close)\n    ```", "```py\n    (0.56746031746031744, 0.031209043355655924)\n\n    ```", "```py\n    # 2012 to 2013\n    start = datetime.datetime(2012, 01, 01)\n    end = datetime.datetime(2013, 01, 01)\n\n    #Dow Jones symbols\n    symbols = [\"AA\", \"AXP\", \"BA\", \"BAC\", \"CAT\", \"CSCO\", \"CVX\", \"DD\", \"DIS\", \"GE\", \"HD\", \"HPQ\", \"IBM\", \"INTC\", \"JNJ\", \"JPM\", \"KO\", \"MCD\", \"MMM\", \"MRK\", \"MSFT\", \"PFE\", \"PG\", \"T\", \"TRV\", \"UTX\", \"VZ\", \"WMT\", \"XOM\"]\n\n    for symbol in symbols:\n          try :\n             quotes.append(finance.quotes_historical_yahoo_ochl(symbol, start, end, asobject=True))\n          except urllib2.HTTPError:\n             print symbol, \"not found\"\n\n    close = np.array([q.close for q in quotes]).astype(np.float)\n    ```", "```py\n    logreturns = np.diff(np.log(close))\n    print logreturns.shape\n\n    logreturns_norms = np.sum(logreturns ** 2, axis=1)\n    S = - logreturns_norms[:, np.newaxis] - logreturns_norms[np.newaxis, :] + 2 * np.dot(logreturns, logreturns.T)\n    ```", "```py\n    aff_pro = sklearn.cluster.AffinityPropagation().fit(S)\n    labels = aff_pro.labels_\n\n    for i in xrange(len(labels)):\n        print '%s in Cluster %d' % (symbols[i], labels[i])\n    ```", "```py\nimport datetime\nimport numpy as np\nimport sklearn.cluster\nfrom matplotlib import finance\nimport urllib2\n\n##1\\. Download price data\n\n## 2012 to 2013\nstart = datetime.datetime(2012, 01, 01)\nend = datetime.datetime(2013, 01, 01)\n\n##Dow Jones symbols\nsymbols = [\"AA\", \"AXP\", \"BA\", \"BAC\", \"CAT\", \"CSCO\", \"CVX\", \"DD\", \"DIS\", \"GE\", \"HD\", \"HPQ\", \"IBM\", \"INTC\", \"JNJ\", \"JPM\", \"KO\", \"MCD\", \"MMM\", \"MRK\", \"MSFT\", \"PFE\", \"PG\", \"T\", \"TRV\", \"UTX\", \"VZ\", \"WMT\", \"XOM\"]\n\nquotes = []\n```", "```py\n      try :       \n  quotes.append(finance.quotes_historical_yahoo_ochl(symbol, start, end, asobject=True))\n      except urllib2.HTTPError:\n         print symbol, \"not found\"\n\nclose = np.array([q.close for q in quotes]).astype(np.float)\nprint close.shape\n\n##2\\. Calculate affinity matrix\nlogreturns = np.diff(np.log(close))\nprint logreturns.shape\n\nlogreturns_norms = np.sum(logreturns ** 2, axis=1)\nS = - logreturns_norms[:, np.newaxis] - logreturns_norms[np.newaxis, :] + 2 * np.dot(logreturns, logreturns.T)\n\n##3\\. Cluster using affinity propagation\naff_pro = sklearn.cluster.AffinityPropagation().fit(S)\nlabels = aff_pro.labels_\n\nfor i in xrange(len(labels)):\n    print '%s in Cluster %d' % (symbols[i], labels[i])\n```", "```py\nAA in Cluster 2\nAXP in Cluster 0\nBA in Cluster 0\nBAC in Cluster 1\nCAT in Cluster 2\nCSCO in Cluster 3\nCVX in Cluster 8\nDD in Cluster 0\nDIS in Cluster 6\nGE in Cluster 8\nHD in Cluster 0\nHPQ in Cluster 4\nIBM in Cluster 0\nINTC in Cluster 0\nJNJ in Cluster 6\nJPM in Cluster 5\nKO in Cluster 6\nMCD in Cluster 6\nMMM in Cluster 8\nMRK in Cluster 6\nMSFT in Cluster 0\nPFE in Cluster 6\nPG in Cluster 6\nT in Cluster 6\nTRV in Cluster 6\nUTX in Cluster 0\nVZ in Cluster 6\nWMT in Cluster 7\nXOM in Cluster 8\n\n```", "```py\n./configure\n make\n sudo make install\n\n```", "```py\n    dataset = load_sample_images()\n    img = dataset.images[0]\n    ```", "```py\n    harris_coords = harris(img)\n    print \"Harris coords shape\", harris_coords.shape\n    y, x = np.transpose(harris_coords)\n    ```", "```py\n    from sklearn.datasets import load_sample_images\n    from matplotlib.pyplot import imshow, show, axis, plot\n    import numpy as np\n    from skimage.feature import harris\n\n    dataset = load_sample_images()\n    img = dataset.images[0] \n    harris_coords = harris(img)\n    print \"Harris coords shape\", harris_coords.shape\n    y, x = np.transpose(harris_coords)\n    axis('off')\n    imshow(img)\n    plot(x, y, 'ro')\n    show()\n    ```"]