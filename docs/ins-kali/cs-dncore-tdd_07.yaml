- en: Continuous Integration and Project Hosting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成和项目托管
- en: In [Chapter 4](e51bcf25-f258-4c2d-9180-9a3291a2a406.xhtml), *.NET Core Unit
    Testing*, we explored the various unit testing frameworks available for .NET Core
    and C# and later explored in detail the xUnit.net framework. We then moved on
    to the important concepts of data-driven unit tests in [Chapter 5](ef706a31-a272-418d-9706-ed84089d89a4.xhtml), *Data-Driven
    Unit Tests*, which facilitate the creation of unit tests that can be executed
    with data loaded from disparate data sources. In [Chapter 6](0cb02f2e-d71f-48d7-a688-5dec9f56396f.xhtml), *Mocking
    Dependencies*, we explained in details dependencies mocking, where we walked through
    creation of simulated objects using the *Moq framework*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](e51bcf25-f258-4c2d-9180-9a3291a2a406.xhtml)中，我们探讨了.NET Core和C#可用的各种单元测试框架，然后详细探讨了xUnit.net框架。然后我们转向[第5章](ef706a31-a272-418d-9706-ed84089d89a4.xhtml)中的数据驱动单元测试，这有助于创建可以使用来自不同数据源加载的数据执行的单元测试。在[第6章](0cb02f2e-d71f-48d7-a688-5dec9f56396f.xhtml)中，我们详细解释了依赖项模拟，其中我们通过*Moq框架*创建了模拟对象。
- en: Effective practice of TDD can assist with providing useful and insightful feedback
    on the quality of the code base of software projects. With continuous integration,
    the process of build automation and code automated tests are taken to the next
    level, allowing development teams to take advantage of the basic and advanced
    features available in cutting edge modern source code version control systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的TDD实践可以帮助提供有用和深刻的反馈，评估软件项目的代码库质量。通过持续集成，构建自动化和代码自动化测试的过程被提升到了一个新的水平，允许开发团队充分利用现代源代码版本控制系统中提供的基本和高级功能。
- en: Proper continuous integration setup and practice yield a rewarding continuous
    delivery where a software project development process is done in such a way that
    it can be shipped or delivered to production through the life cycle of the project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的持续集成设置和实践会产生有益的持续交付，使软件项目的开发过程能够在项目的生命周期中被交付或部署到生产环境。
- en: 'In this chapter, we will explore the concepts of continuous integration and
    continuous delivery. This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨持续集成和持续交付的概念。本章将涵盖以下主题：
- en: Continuous integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: GitHub online project hosting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub在线项目托管
- en: Basic Git commands
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的Git命令
- en: Configuring GitHub WebHooks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置GitHub WebHooks
- en: TeamCity continuous integration platform
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TeamCity持续集成平台
- en: Continuous integration
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: '**Continuous integration** (**CI**) is a software development practice where
    the source code of software projects is integrated by members of a software development
    team daily into a repository. It is preferably started at an early stage of the
    development process. The code integration is usually carried out by a CI tool
    that performs the verification of the code using an automated build script.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是软件开发实践，软件项目的源代码每天由软件开发团队的成员集成到存储库中。最好在开发过程的早期阶段开始。代码集成通常由CI工具执行，该工具使用自动构建脚本对代码进行验证。'
- en: In a development team, there are often multiple developers working on different
    portions of a project, with the source code of the project hosted in a repository.
    Each developer can have a local version or working copy of the main branch or
    mainline on their computer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发团队中，通常有多个开发人员在项目的不同部分上工作，项目的源代码托管在存储库中。每个开发人员可以在他们的计算机上拥有主分支或主线的本地版本或工作副本。
- en: A developer working on a feature will make a change to the local copy, and test
    the code using a set of prepared automated tests to ensure that the code works
    and does not break any existing working functionalities. Once this can be verified,
    the local copy is updated with the latest from the repository. If there are any
    conflicts resulting from the update, these conflicts need to be resolved before
    eventually committing or integrating the work done into the mainline.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 负责某个功能的开发人员会对本地副本进行更改，并使用一组准备好的自动化测试来测试代码，以确保代码能够正常工作并不会破坏任何现有的工作功能。一旦可以验证，本地副本将更新为存储库中的最新版本。如果更新导致任何冲突，这些冲突需要在最终提交或集成工作之前解决。
- en: The source code repository facilitates adequate versioning of the code base
    of projects, by keeping snapshots and versions of source files also the changes
    made overtime. Developers can revert or checkout an earlier version of commits
    made if necessary. The repository can be hosted locally on the team's infrastructure,
    such as having an onsite **Microsoft Team Foundation Server** or a cloud-based
    repository, such as **GitHub**, **Bitbucket**, and a host of others.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码存储库通过保留源文件的快照和版本以及随时间所做的更改，有助于充分对项目的代码库进行版本控制。开发人员可以在必要时恢复或检出以前的提交版本。存储库可以在团队基础设施上本地托管，例如拥有现场**Microsoft
    Team Foundation Server**或云存储库，例如**GitHub**、**Bitbucket**和其他许多存储库。
- en: CI workflow
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI工作流
- en: CI requires that a proper workflow be put in place. The first major integral
    part of CI is the setup of a working source code repository. This is needed to
    keep track of all the changes made by the contributors to the project and for
    coordinating the different activities.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CI要求建立适当的工作流程。CI的第一个重要组成部分是建立一个可工作的源代码存储库。这是为了跟踪项目贡献者所做的所有更改，并协调不同的活动。
- en: In order to implement a robust and effective CI setup, the following areas need
    to be covered and properly set up.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现一个稳健和有效的CI设置，需要涵盖并正确设置以下领域。
- en: Single source code repository
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一的源代码存储库
- en: To effectively use the source code repository, all the required files needed
    to successfully build a working version of a project should be put in a single
    source code repository. The files should include the source files, properties
    files, database scripts, and schema, as well as third-party libraries and assets
    used.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地使用源代码存储库，所有成功构建项目的所需文件都应该放在一个单一的源代码存储库中。这些文件应该包括源文件、属性文件、数据库脚本和架构，以及第三方库和使用的资产。
- en: Other configuration files can also be put in the repository, especially development
    environment configurations. This will ensure the developers on the project have
    a consistent environment setup. New members of the development team can easily
    set up their environment, using the configuration available in the repository.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其他配置文件也可以放在存储库中，特别是开发环境配置。这将确保项目上的开发人员拥有一致的环境设置。开发团队的新成员可以轻松地使用存储库中可用的配置来设置他们的环境。
- en: Build automation
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自动化
- en: The build automation step of the CI workflow is to ensure that changes in the
    a project's code base are detected and automatically tested and built. The build
    automation is usually done with the help of build scripts, which analyze the changes
    to be made and the compilation needed to be done. The source code should be regularly
    built, preferably daily or nightly. The success of a commit is measured based
    on if the code base has been successfully built.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CI工作流程的构建自动化步骤是为了确保项目代码库中的更改被检测并自动进行测试和构建。构建自动化通常是通过构建脚本完成的，这些脚本分析需要进行的更改和编译。源代码应该经常构建，最好是每天或每晚。提交的成功与否是根据代码库是否成功构建来衡量的。
- en: The build automation scripts should be able to build the system with or without
    the tests. This should be configurable in the build. Irrespective of whether the
    developer's IDEs have in-built build management in place, there should be a central
    build script configured on the server to ensure the project can be built and easily
    run on the development server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自动化脚本应该能够在有或没有测试的情况下构建系统。这应该在构建中进行配置。无论开发人员的集成开发环境是否具有内置的构建管理，都应该在服务器上配置一个中央构建脚本，以确保项目可以构建并在开发服务器上轻松运行。
- en: Automated tests
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: The code base should have automated tests that cover a large percentage of possible
    test combinations using relevant test data. The automated tests should be developed
    using a suitable test framework that can cover all tiers or parts of the software
    project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库应该具有自动化测试，覆盖了大部分可能的测试组合，使用相关的测试数据。自动化测试应该使用适当的测试框架，可以覆盖软件项目的所有层或部分。
- en: With proper automation tests in place, bugs in the source code can be easily
    detected when the automation build script runs. Integrating automated tests into
    the build process will ensure that good test coverage and reports of failing or
    passing tests are provided to facilitate refactoring of the code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过适当的自动化测试，源代码中的错误可以在自动化构建脚本运行时轻松被检测到。将自动化测试整合到构建过程中将确保良好的测试覆盖率，并提供失败或通过测试的报告，以便便于重构代码。
- en: Identical test and production environments
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相同的测试和生产环境
- en: In order to have a smooth CI experience, it is important to ensure that the
    test and production environments are identical. Both environments should have
    similar hardware and operating system configurations, as well as environment setup.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保顺利的CI体验，重要的是要确保测试和生产环境是相同的。两个环境应该具有类似的硬件和操作系统配置，以及环境设置。
- en: Also, for applications that use databases, both the test and production environments
    should have the same versions. The runtimes and libraries should also be similar.
    However, sometimes it might not be possible to test in every instance of the production
    environment, such as desktop applications, but you must ensure that a replica
    of the production environment is used in testing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于使用数据库的应用程序，测试和生产环境应该具有相同的版本。运行时和库也应该是相似的。然而，有时可能无法在每个生产环境实例中进行测试，比如桌面应用程序，但必须确保在测试中使用生产环境的副本。
- en: Daily commit
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每日提交
- en: The overall health of the code base is determined by the successful build process
    run. The project's mainline should be regularly updated with commits from the
    developers. It is the responsibility of the developer making commits to ensure
    that the code is tested before pushing to the repository.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库的整体健康状况取决于成功运行的构建过程。项目的主干应该经常更新，以便开发人员提交。提交代码的开发人员有责任确保在推送到存储库之前对代码进行测试。
- en: In cases where a commit from the developer breaks the build, this should not
    be procrastinated. A rollback can be done to fix the issue in isolation before
    committing the changes again. The projects mainline or main branch should always
    be in good health. Daily commits of changes is usually preferable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发人员的提交导致构建失败的情况下，不应该拖延。可以回滚以在提交更改之前独立修复问题。项目的主干或主分支应该始终保持良好状态。通常更喜欢每日提交更改。
- en: Benefits of CI
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI的好处
- en: Incorporating CI into development process can be greatly valuable to a development
    team. The CI process provides numerous benefits, some of which are explained next.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将CI纳入开发流程中对开发团队非常有价值。CI流程提供了许多好处，下面将解释其中一些。
- en: Quick bugs detection
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速发现错误
- en: With a CI process in place, automated tests are run frequently and bugs can
    be discovered on time and fixed, yielding a robust system of high quality. CI
    will not automatically eliminate the bug in the system; developers must strive
    to write clean code that is well tested. However, CI can facilitate the timely
    detection of bugs that otherwise would have crept into production.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CI流程，自动化测试经常运行，可以及时发现并修复错误，从而产生高质量的健壮系统。CI不会自动消除系统中的错误；开发人员必须努力编写经过充分测试的清洁代码。然而，CI可以促进及时发现本来可能会进入生产环境的错误。
- en: Improved productivity
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高生产力
- en: A development team's overall productivity can be enhanced through CI as developers
    are freed from mundane or manual tasks, which would have been automated as part
    of CI the process. Developers can focus on the important tasks of developing the
    system's features.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CI，开发团队的整体生产力可以得到提高，因为开发人员可以摆脱单调或手动的任务，这些任务已经作为CI过程的一部分自动化了。开发人员可以专注于开发系统的功能。
- en: Reduced risks
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低风险
- en: Sometimes, due to inherent complexities, software projects tend to overshoot
    budgets and timelines due to underestimation of requirements and other issues.
    CI can assist in reducing the risks associated with software development. With
    frequent code commits and integration, a clearer picture of the state of the project
    can be established and any potential issue can be easily isolated and dealt with.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，由于固有的复杂性，软件项目往往会因为对需求的低估和其他问题而超出预算和时间表。CI可以帮助减少与软件开发相关的风险。通过频繁的代码提交和集成，可以建立项目状态的更清晰的图像，并且可以轻松地隔离和处理任何潜在问题。
- en: Facilitating continuous delivery
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 促进持续交付
- en: For a development team that uses CI, continuous or frequent deployment becomes
    relatively easy. This is because new features or requirements can be quickly delivered
    and shipped. This will allow the users to provide adequate and useful feedback
    on the product, which can be used to further refine the software and increase
    the quality.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用CI的开发团队，持续或频繁的部署变得相对容易。这是因为新功能或需求可以快速交付和部署。这将允许用户对产品提供充分和有用的反馈，这可以用来进一步完善软件并提高质量。
- en: CI tools
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI工具
- en: 'There are quite a number of CI tools available, each with different features
    that facilitate easy CI and provide a good structure for the deployment pipeline.
    The choice of a CI tool depends on several factors, including:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的CI工具，每个工具都具有不同的功能，可以促进简单的CI并为部署流水线提供良好的结构。选择CI工具取决于几个因素，包括：
- en: The development environment, program language, frameworks, and application architecture
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发环境、程序语言、框架和应用架构
- en: The development team's composition, level of experience, skills, and capabilities
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发团队的构成、经验水平、技能和能力
- en: The deployment environment setup, operating system, and hardware requirements
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署环境设置、操作系统和硬件要求
- en: Some of the popular and most used CI tools are explained next. These CI tools,
    when effectively used, can assist a development team in achieving quality standards
    in software projects.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来将解释一些流行和最常用的CI工具。这些CI工具在有效使用时可以帮助开发团队在软件项目中达到质量标准。
- en: Microsoft Team Foundation Server
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软Team Foundation Server
- en: Microsoft **Team Foundation Server** (**TFS**) is an integrated server suit
    containing a set of collaborative tools to increase the productivity of software
    development teams. TFS provide tools that can integrate with IDEs, such as **Visual
    Studio**, **Eclipse**, and many more IDEs and code editors.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 微软**Team Foundation Server**（**TFS**）是一个集成的服务器套件，包含一组协作工具，以提高软件开发团队的生产力。TFS提供可以与IDE（如**Visual
    Studio**、**Eclipse**等）集成的工具和代码编辑器。
- en: TFS provides sets of tools and extensions that facilitate a smooth CI process.
    Using TFS, the process of building, testing, and deploying applications can be
    automated. TFS provides great flexibility by supporting wide ranges of programming
    languages and source code repositories.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: TFS提供了一套工具和扩展，可以促进流畅的CI过程。使用TFS，可以自动化构建、测试和部署应用程序。TFS通过支持各种编程语言和源代码存储库，提供了很大的灵活性。
- en: TeamCity
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity
- en: '**TeamCity** is an enterprise level CI tool by JetBrains. It has support for
    a bundled .NET CLI and, similar to TFS, it provides support for automated deployment
    and composite builds. TeamCity can verify and run automated tests on the server
    before the code is committed through the plugins available for IDEs.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**TeamCity**是JetBrains的企业级CI工具。它支持捆绑的.NET CLI，并且与TFS类似，它提供了自动化部署和组合构建的支持。TeamCity可以通过IDE的可用插件在服务器上验证和运行自动化测试，然后再提交代码。'
- en: Jenkins
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins
- en: '**Jenkins** is an open source CI server that can be run as a standalone or
    in a container, or installed through native system packages. It is self-contained
    and capable of automating testing, build related tasks, and application deployment.
    Through a set of chain-tools and plugins, Jenkins can integrate with IDEs and
    source code repositories.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jenkins**是一个开源的CI服务器，可以作为独立运行或在容器中运行，或通过本地系统包安装。它是自包含的，能够自动化测试、构建相关任务和应用部署。通过一组链式工具和插件，Jenkins可以与IDE和源代码存储库集成。'
- en: Continuous delivery
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: '**Continuous delivery** is a sequel or an extension of CI. It is a set of software
    development practices that make sure that a project''s code can be deployed to
    a test environment that is identical to the production environment. Continuous
    delivery ensures that all changes are up-to-date and can be shipped and deployed
    to production, immediately once the changes have passed the automated tests.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**是CI的续篇或延伸。它是一组软件开发实践，确保项目的代码可以部署到与生产环境相同的测试环境。持续交付确保所有更改都是最新的，并且一旦更改通过自动化测试，就可以立即发货和部署到生产环境。'
- en: It is widely known that practicing CI will facilitate good communication among
    team members and can eliminate potential risks. Development teams need to take
    this a step further by practicing continuous delivery to ensure that their development
    activities are beneficial to customers. This can be made possible by ascertaining
    that the application is deployable and production-ready at any stage of the development
    cycle.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，实践CI将促进团队成员之间的良好沟通，并消除潜在风险。开发团队需要进一步实践持续交付，以确保他们的开发活动对客户有益。这可以通过确保应用程序在开发周期的任何阶段都可以部署和准备好生产来实现。
- en: Through effective communication and collaboration of members of a development
    team, continuous delivery can be achieved. This requires that the major parts
    of the application delivery process are automated through a developed and refined
    deployment pipeline. At any point in time, the application being developed should
    be deployable. The product owner or the customer will determine when the application
    is deployed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过开发团队成员的有效沟通和协作，可以实现持续交付。这要求应用程序交付过程的主要部分通过开发和完善的部署管道进行自动化。在任何时候，正在开发的应用程序都应该可以部署。产品所有者或客户将确定应用程序何时部署。
- en: Benefits of continuous delivery
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付的好处
- en: Through continuous delivery, a software development team's productivity can
    be improved while also reducing the cost and turnaround time of releasing software
    applications into production. The following are the reasons why your team should
    practice continuous delivery.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过持续交付，可以提高软件开发团队的生产率，同时降低将软件应用程序发布到生产环境的成本和周转时间。以下是您的团队应该实践持续交付的原因。
- en: Lower risks
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低风险
- en: Similar to CI, continuous delivery assists in lowering risks usually associated
    with software releases and deployment. This can ensure zero downtime and an application's
    high availability because the frequent changes made are regularly integrated and
    production-ready.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于CI，持续交付有助于降低通常与软件发布和部署相关的风险。这可以确保零停机和应用程序的高可用性，因为经常进行的更改会定期集成并准备投入生产。
- en: Quality software products
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 质量软件产品
- en: Software products are readily made available to the end users due to the automation
    of the testing, build, and deployment process. Users will be able to give useful
    and valuable feedback that can be used to further refine and improve the quality
    of the application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试、构建和部署过程的自动化，软件产品可以很快地提供给最终用户。用户将能够提供有用和宝贵的反馈意见，这些意见可以用来进一步完善和提高应用程序的质量。
- en: Reduced costs
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低成本
- en: Software project development and release costs can be greatly reduced, due to
    automation of the different parts of the development and deployment processes.
    This is because costs associated to incremental and continuous changes are eliminated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开发和部署过程的不同部分自动化，软件项目开发和发布成本可以大大降低。这是因为与增量和持续变更相关的成本被消除。
- en: GitHub online project hosting
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub在线项目托管
- en: '**GitHub** is a source code hosting platform for version control that allows
    development team members to collaborate and work on software projects, irrespective
    of their geographical location. GitHub currently houses several open source and
    proprietary projects in different programming languages.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是一个源代码托管平台，用于版本控制，允许开发团队成员协作和开发软件项目，无论他们的地理位置在哪里。GitHub目前托管了多个不同编程语言的开源和专有项目。
- en: GitHub provides basic and advanced features that make collaboration easier.
    It is essentially a web-based source code repository or hosting service using
    Git as the version control system, based on Git's distributed versioning behavior.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub提供了基本和高级功能，使协作变得更加容易。它本质上是一个基于Web的源代码存储库或托管服务，使用Git作为版本控制系统，基于Git的分布式版本控制行为。
- en: It is interesting to know that top companies such as **Microsoft**, **Google**,
    **Facebook**, and **Twitter** host their open source projects on GitHub. Basically,
    any CI tool can be used with GitHub. This gives development teams the flexibility
    to choose CI tools based on their budgets, working with GitHub.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，像**Microsoft**、**Google**、**Facebook**和**Twitter**这样的顶级公司在GitHub上托管他们的开源项目。基本上，任何CI工具都可以与GitHub一起使用。这使得开发团队可以根据预算选择CI工具。
- en: In addition to the source code hosting service provided by GitHub, public web
    pages can also be hosted through GitHub for free. This feature allows GitHub users
    to create personal websites that are related to the open source projects being
    hosted.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了GitHub提供的源代码托管服务外，还可以通过GitHub免费托管公共网页。这个功能允许GitHub用户创建与托管的开源项目相关的个人网站。
- en: GitHub supports both public and private project repository hosting. Anyone can
    see the files and the commit history of a public repository, while private repository
    access is restricted to only the added members. Private repository hosting on
    GitHub comes with a cost.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub支持公共和私人项目存储库托管。任何人都可以查看公共存储库的文件和提交历史，而私人存储库的访问仅限于添加的成员。GitHub上的私人存储库托管是需要付费的。
- en: Project hosting
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目托管
- en: To create a project repository and have access to GitHub's features, you need
    to first create a GitHub account. This can be done by navigating to [https://github.com](https://github.com).
    Upon a successful account creation, you can proceed to create a project repository.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建项目存储库并使用GitHub的功能，您需要首先创建一个GitHub帐户。这可以通过访问[https://github.com](https://github.com)来完成。成功创建帐户后，您可以继续创建项目存储库。
- en: A GitHub repository is used to organize project folders, files, and assets.
    The files can be images, videos, and source files. It is a common practice in
    GitHub for a repository to have a `README` file that contains a concise description
    of the project. Optionally, a software license file can be added to the project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub存储库用于组织项目文件夹、文件和资产。文件可以是图像、视频和源文件。在GitHub中，存储库通常会有一个包含项目简要描述的`README`文件。还可以向项目添加软件许可文件。
- en: 'The following steps describes how to create a new repository in GitHub:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何在GitHub中创建一个新存储库：
- en: Log in to GitHub with the account created.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用创建的帐户登录GitHub。
- en: Navigate to [https://github.com/](https://github.com/) new or from the upper-right
    corner of the screen, next to the account's avatar or profile picture, click on
    the + icon.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/](https://github.com/)的新页面，或者在屏幕右上角，账户的头像或个人资料图片旁边，单击+图标。
- en: 'A drop-down menu is displayed where you can select New repository:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会显示一个下拉菜单，您可以在其中选择新存储库：
- en: '![](img/cae41656-4b6d-42cb-95b1-463cdab802b9.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cae41656-4b6d-42cb-95b1-463cdab802b9.png)'
- en: Name the repository `LoanApplication` and provide a project description.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将存储库命名为 `LoanApplication` 并提供项目描述。
- en: Select Public, to make the repository publicly accessible.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择公共，使存储库可以公开访问。
- en: Select Initialize this repository with a README, to include a `README` file
    in the project.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择使用 README 初始化此存储库，以在项目中包括 `README` 文件。
- en: 'Finally, click on Create repository, to create and initialize the repository:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击创建存储库以创建和初始化存储库：
- en: '![](img/1783a922-7346-4ca5-bd3f-e8f17e64633c.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1783a922-7346-4ca5-bd3f-e8f17e64633c.png)'
- en: Branching with GitHub Flow
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Flow 进行分支
- en: GitHub has a branch-based workflow known as **GitHub Flow**, with great supports
    and tools for development teams to collaborate and frequently deploy projects.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 有一个基于分支的工作流程，称为**GitHub Flow**，为开发团队提供了很好的支持和工具，以便频繁地协作和部署项目。
- en: 'GitHub Flow facilitates the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Flow 便于以下操作：
- en: Creating branches from a new or existing repository
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从新的或现有存储库创建分支
- en: Creating, editing, renaming, moving, or deleting files
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、编辑、重命名、移动或删除文件
- en: Sending a pull request from branches based on agreed changes
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据约定的更改从分支发送拉取请求
- en: Making changes on a branch as needed
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要在分支上进行更改
- en: Merging pull requests when a branch is ready to be merged
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当分支准备好合并时合并拉取请求
- en: Housekeeping and cleaning up branches by using the delete button in the pull
    request or on the branches page
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在拉取请求或分支页面上使用删除按钮进行清理和清理分支
- en: Creating branches from a project is core to Git and is an extension to GitHub,
    which is the central concept of GitHub Flow. **Branches** are created to try out
    new concepts, and ideas or for working on a feature fix. A branch is a different
    version of the repository.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目创建分支是 Git 的核心，并且是 GitHub 流程的扩展，这是 GitHub Flow 的核心概念。**分支**用于尝试新概念和想法，或用于修复功能。分支是存储库的不同版本。
- en: When creating a new branch, the usual practice is to create the branch off the
    master branch. This will create a copy of all the files and configurations contained
    in the master at that time. The branch is technically independent of the master
    as changes made on a branch do not affect the master branch. However, new updates
    can be pulled from the master to the branch and changes made on the branch can
    be merged back to the master.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新分支时，通常的做法是从主分支创建分支。这将在那个时间点创建主分支中包含的所有文件和配置的副本。分支在技术上独立于主分支，因为在分支上进行的更改不会影响主分支。但是，可以从主分支拉取新的更新到分支，并且可以将在分支上进行的更更合并回主分支。
- en: 'The following diagram on GitHub, further explains the GitHub flow of the project
    branch, where committed changes to a branch are merged to the master through a
    pull request:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上的以下图表进一步解释了项目分支的 GitHub 流程，其中对分支进行的提交更改通过拉取请求合并到主分支：
- en: '![](img/0fc03b93-395a-45ac-af19-8d52984d823c.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fc03b93-395a-45ac-af19-8d52984d823c.png)'
- en: The master branch must always be deployable at any time. Changes on created
    branches should only be merged to the master branch after a pull request has been
    opened. The changes will later be carefully reviewed and accepted after passing
    the necessary validation and automated tests.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 主分支必须始终可以随时部署。创建的分支上的更改应该只在拉取请求打开后合并到主分支。更改将在通过必要的验证和自动化测试后进行仔细审查和接受。
- en: 'To create a new branch from the `LoanApplication` repository created earlier,
    perform the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要从之前创建的 `LoanApplication` 存储库创建新分支，请执行以下步骤：
- en: Navigate to the repository.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到存储库。
- en: 'Click the dropdown located at the top of the file list with the caption Branch:
    master.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击位于文件列表顶部的下拉菜单，标题为分支：主。
- en: Type a descriptive branch name that provides meaningful information about the
    branch in the new branch text box.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新分支文本框中键入提供有关分支的有意义信息的描述性分支名称。
- en: 'Click on the highlighted link with the branch name supplied to create the branch:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击带有分支名称的突出显示的链接以创建分支：
- en: '![](img/ec790570-c4e7-4972-910e-f1777864c909.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec790570-c4e7-4972-910e-f1777864c909.png)'
- en: For now, the newly created branch and the master branch are exactly the same.
    You can begin to make changes to the created branch, by adding and modifying source
    files. Changes are committed directly to the branch and not the master.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，新创建的分支和主分支完全相同。您可以开始对创建的分支进行更改，添加和修改源文件。更改直接提交到分支而不是主分支。
- en: Committing changes facilitates the proper tracking of changes made to the branch
    over time. A commit message is provided every time changes are to be committed.
    The commit messages provide a detailed description of what the changes are about.
    It is important to always provide commit messages because Git tracks changes using
    commits. This can facilitate easy collaboration on a project, with the commit
    messages providing a history of the changes made.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 提交更改有助于正确跟踪随时间对分支所做的更改。每次要提交更改时都会提供提交消息。提交消息提供了对更改内容的详细描述。始终提供提交消息很重要，因为 Git
    使用提交跟踪更改。这可以便于在项目上进行轻松的协作，提交消息提供了更改历史记录。
- en: In the repository, each commit is a distinct unit of change. If the working
    code base breaks as a result of a commit, or the commit introduces a bug, the
    commit can be rolled back.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储库中，每个提交都是一个独立的更改单元。如果由于提交而导致工作代码库中断，或者提交引入错误，可以回滚提交。
- en: Pull request
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拉取请求
- en: Irrespective of whether the changes you made to the code base are small or large,
    you can initiate a pull request at any time during the project development process.
    Pull requests are central to collaboration in GitHub as these facilitate the discussion
    and review of commits made.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您对代码库所做的更改是小还是大，您都可以在项目开发过程中的任何时候发起拉取请求。拉取请求对于 GitHub 中的协作至关重要，因为它们促进了提交的讨论和审查。
- en: 'To open a pull request, click the New pull request tab. You will be taken to
    the pull request page, where you can provide a comment or description for the
    request, and click the New pull request button:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开拉取请求，请单击“新拉取请求”选项卡。您将被带到拉取请求页面，在那里您可以为请求提供评论或描述，并单击“新拉取请求”按钮：
- en: '![](img/2fee4803-9d87-4e08-afdc-6432e1c79df4.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fee4803-9d87-4e08-afdc-6432e1c79df4.png)'
- en: 'When you open a pull request, the owners or maintainers of the project are
    notified about the pending changes and your intention to have a merge. Necessary
    feedback can be provided to further refine the code after an appropriate review
    has been done on the changes made to the branch. The pull request shows the differences
    of the files and contents of your branch and the master branch. If the contributions
    made are deemed to be okay, they will be accepted and merged to the master branch:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您发起拉取请求时，项目的所有者或维护者将收到有关待定更改和您意图进行合并的通知。在对分支所做的更改进行适当审查后，可以提供必要的反馈以进一步完善代码。拉取请求显示了文件的差异以及您的分支和主分支的内容。如果所做的贡献被认为是可以接受的，它们将被接受并合并到主分支中：
- en: '![](img/c82db3eb-38cd-403a-a9d8-cceb8bd5d7aa.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c82db3eb-38cd-403a-a9d8-cceb8bd5d7aa.png)'
- en: Reviewing changes and merging
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查更改和合并
- en: After a pull request has been initiated, the changes are reviewed by the participating
    team members and comments are provided based on the current position of the repository.
    You can continue to make changes while a pull request is open, and any comments
    associated with the review will be shown on the unified pull request view. Comments
    are written in markdown and contain pre-formatted text blocks, images, and emoji.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求发起后，参与的团队成员对更改进行审查，并根据存储库的当前位置提供评论。您可以在拉取请求保持打开状态时继续进行更改，并且与审查相关的任何评论都将显示在统一的拉取请求视图上。评论以markdown编写，包含预格式化的文本块、图像和表情符号。
- en: 'Once the pull request has been reviewed and accepted, they will be merged into
    the master branch. The following steps can be followed to merge requests in GitHub.
    Click the Merge pull request button to merge the changes into master. Then click
    Confirm merge, which will merge the commits on the branch to the master:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦拉取请求经过审查并被接受，它们将被合并到主分支中。可以按以下步骤在GitHub中合并请求。单击“合并拉取请求”按钮将更改合并到主分支中。然后单击“确认合并”，这将将分支上的提交合并到主分支中：
- en: '![](img/ad16d568-f7cf-4473-88e2-7fd68cbedbca.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad16d568-f7cf-4473-88e2-7fd68cbedbca.png)'
- en: A history of pull requests are kept in GitHub and can be searched later on to
    determine why the pull requests were initiated while providing access to the review
    done and the comments added.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub中保存了拉取请求的历史记录，可以在以后进行搜索，以确定为什么发起了拉取请求，同时提供对已进行的审查和添加的评论的访问。
- en: Basic Git commands
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的Git命令
- en: Git is a **distributed version control system** (**DVCS**). The branching system
    of Git is very robust and makes it stand out among other version control systems.
    Using Git, several branches of a project can be created, independent of each other.
    The process of creation, merging, and deletion of branches are seamless and very
    fast.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一种**分布式版本控制系统**（**DVCS**）。Git的分支系统非常强大，使其在其他版本控制系统中脱颖而出。使用Git，可以创建项目的多个独立分支。分支的创建、合并和删除过程是无缝且非常快速的。
- en: Git greatly supports the concept of frictionless context switching, where you
    can easily create a branch to explore your ideas, create and apply patches, make
    commits, merge the branches, and later switch back to the earlier branch you were
    working on. The branching workflow being used will determine whether to create
    a branch for each feature or group of features, while easily switching between
    the branches to test the features.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Git极大地支持无摩擦的上下文切换概念，您可以轻松地创建一个分支来探索您的想法，创建和应用补丁，进行提交，合并分支，然后稍后切换回您正在工作的早期分支。使用的分支工作流程将决定是否为每个功能或一组功能创建一个分支，同时在分支之间轻松切换以测试功能。
- en: Your development can get organized and be productive with Git, by having different
    branches for your production, test, and development, thereby controlling the flow
    of files and commits that go into each branch. By having a good repository structure,
    you can easily and quickly experiment with new ideas and delete the branches when
    done.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为生产、测试和开发设置不同的分支，您的开发可以得到组织并且高效，从而控制进入每个分支的文件和提交的流程。通过拥有良好的存储库结构，您可以轻松快速地尝试新的想法，并在完成后删除分支。
- en: Git has a rich set of useful commands that when mastered provide full access
    to its internals and allow basic and advanced source code versioning operations.
    Git provides command line interface and graphical user interface clients for the
    Windows, Macintosh, and Linux operating systems. The commands can be run from
    the Terminal on Mac and Linux, while in Windows there is Git Bash, an emulator
    used to run Git from the command line.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Git具有丰富的有用命令集，掌握后可以完全访问其内部，并允许基本和高级源代码版本控制操作。Git为Windows、Macintosh和Linux操作系统提供命令行界面和图形用户界面客户端。命令可以从Mac和Linux上的终端运行，而在Windows上有Git
    Bash，用于从命令行运行Git的仿真器。
- en: The available commands on Git are used to perform the initial setup and configuration
    of the source code repository, sharing and updating projects, branching and merging,
    as well as various source code versioning related operations.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Git上的可用命令用于执行源代码存储库的初始设置和配置，共享和更新项目，分支和合并，以及各种与源代码版本控制相关的操作。
- en: Configuration commands
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置命令
- en: There are a set of commands that can be used to configure user information that
    cut across all local repositories on the computer where Git is installed. The `git
    config` command is used to get and set global repository options. It accepts the `--global`
    option which is followed by the specific configuration to get or set entries from
    the global `.gitconfig` file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有一组命令可用于配置用户信息，这些命令跨越安装了Git的计算机上的所有本地存储库。`git config`命令用于获取和设置全局存储库选项。它接受`--global`选项，后跟要从全局`.gitconfig`文件中获取或设置的特定配置。
- en: 'To set the global username that will be attached to all commit transactions,
    run the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置将附加到所有提交事务的全局用户名，请运行以下命令：
- en: '[PRE0]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The global user email address can also be set. This will attach the set email
    address to all commit transactions. Run the following command to achieve that:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以设置全局用户电子邮件地址。这将将设置的电子邮件地址附加到所有提交事务。运行以下命令来实现这一点：
- en: '[PRE1]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For good aesthetics, you can enable colorization of the command line output,
    using the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了美观，可以使用以下命令启用命令行输出的颜色：
- en: '[PRE2]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Initializing repository commands
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化存储库命令
- en: 'The `git init` command is used to create an empty Git repository as well as
    to reinitialize an existing repository. When the `git init` command is run, a
    `.git` directory is created alongside sub-directories to hold objects, `refs/heads`,
    `refs/tags`, template files, and an initial HEAD file, which references the HEAD
    of the master branch. In its simplest form, the `git init` command passes the
    repository name, and this creates a repository with the specified name:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`git init` 命令用于创建一个空的Git存储库，以及重新初始化现有存储库。运行`git init` 命令时，会创建一个`.git` 目录，以及用于保存对象、`refs/heads`、`refs/tags`、模板文件和初始HEAD文件的子目录，该文件引用主分支的HEAD。在其最简单的形式中，`git
    init` 命令传递存储库名称，这将创建一个具有指定名称的存储库：'
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To update and pick newly added templates or relocate a repository to another
    location, `git init` can be rerun in an existing repository. The command will
    not overwrite the configurations already in the repository. The full `git init`
    command synopsis is as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新并选择新添加的模板或将存储库重新定位到另一个位置，可以在现有存储库中重新运行`git init`。该命令不会覆盖存储库中已有的配置。完整的`git
    init` 命令概要如下：
- en: '[PRE4]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s discuss the preceding command in detail:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论前面的命令：
- en: The `-q` or `--quiet` option when used will print errors and warning messages
    while other output messages are suppressed.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用`-q` 或 `--quiet` 选项时，将打印错误和警告消息，而其他输出消息将被抑制。
- en: The `--bare` option is used to create a bare repository.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--bare` 选项用于创建一个裸存储库。'
- en: '`--template=<template_directory>` is used to specify the folder where the templates
    will be used.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--template=<template_directory>` 用于指定要使用模板的文件夹。'
- en: '`--separate-git-dir=<git dir>` is used to indicate the directory or path to
    the repository, or the path to move the repository to, in case of re-initialization.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--separate-git-dir=<git dir>` 用于指示存储库的目录或路径，或者在重新初始化的情况下，移动存储库的路径。'
- en: '`--shared[=(false|true|umask|group|all|world|everybody|0xxx)]` is the option
    is used to notify Git that the repository is to be shared among many users. Users
    that are in the same group can push into the repository.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--shared[=(false|true|umask|group|all|world|everybody|0xxx)]` 选项用于通知Git存储库将被多个用户共享。属于同一组的用户可以推送到存储库中。'
- en: 'Using the `git clone` command, the existing repository can be cloned into a
    new directory. The command creates remote-tracking branches for all the branches
    in the cloned repository. It will download the project and its entire version
    history. The `git clone` command can simply be used by passing the URL of the
    repository as an option:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`git clone` 命令，可以将现有存储库克隆到新目录中。该命令为克隆存储库中的所有分支创建远程跟踪分支。它将下载项目及其整个版本历史。`git
    clone` 命令可以通过传递存储库的URL作为选项来简单使用：
- en: '[PRE5]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The URL passed to the command will contain information of the transport protocol,
    the address of the remote server, and the repository path. The protocols Git supports
    are SSH, Git, HTTP, and HTTPS. The command has other options that can be passed
    to it, to configure the repository to be cloned.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给命令的URL将包含传输协议的信息、远程服务器的地址和存储库路径。Git支持的协议有SSH、Git、HTTP和HTTPS。该命令还有其他选项可以传递给它，以配置要克隆的存储库。
- en: Change commands
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改命令
- en: Git has a set of useful commands that are used to check the status of files
    in the repository, review updates made to the files, and commit changes made to
    the project files.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Git有一组有用的命令，用于检查存储库中文件的状态，审查对文件所做的更新，并提交对项目文件所做的更改。
- en: 'The `git status` command is used to show the working status of the repository.
    The command essentially gives a summary of the files that have changed and are
    staged for the next commit. It displays the paths of the files that have differences
    between the current HEAD commit and the index file. It also displays the paths
    of the files that have differences between the index file and the working tree
    as well as paths of the files that are not currently being tracked by Git but
    have not been added in the `.gitignore` file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`git status` 命令用于显示存储库的工作状态。该命令基本上提供了已更改并准备提交的文件的摘要。它显示了当前HEAD提交和索引文件之间存在差异的文件路径。它还显示了索引文件和工作树之间存在差异的文件路径，以及当前未被Git跟踪但未在`.gitignore`
    文件中添加的文件路径：'
- en: '[PRE6]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `git add` command uses the content found in the working tree to update the
    index. It basically adds file content to the index. It is used to add the current
    content of existing paths. It can be used to remove paths that no longer exist
    in the tree or add content with the part of the changes made to the working tree.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`git add` 命令使用工作树中找到的内容来更新索引。它基本上是将文件内容添加到索引中。它用于添加现有路径的当前内容。它可以用于删除树中不再存在的路径，或者添加工作树中所做更改的部分内容。'
- en: 'The practice is usually to run the command several times before performing
    a commit. It adds the content of the files as it was at the time when the command
    was run. It takes options that are used for tweaking its behavior:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的做法是在执行提交之前多次运行该命令。它会添加文件的内容，就像在运行命令时的那样。它接受用于调整其行为的选项：
- en: '[PRE7]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `git commit` command is used to record or store the content of the index
    in a commit together with the commit message supplied by the user to describe
    the changes made to the project files. The changes must have been added, using
    `git add`, before the command is run.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`git commit` 命令用于将索引的内容与用户提供的提交消息一起记录或存储到提交中，以描述对项目文件所做的更改。在运行该命令之前，必须使用`git
    add` 添加更改。'
- en: The command is flexible and the usage allows different options for recording
    the changes. An approach is to list the files with changes as parameters to the
    commit command, which informs Git to ignore changes staged in the index and store
    the current contents of the listed files.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令灵活，使用允许不同的选项来记录更改。一种方法是将具有更改的文件列为提交命令的参数，这会告诉Git忽略在索引中暂存的更改，并存储列出的文件的当前内容。
- en: 'Also, `-a` switch can be used with the command to add changes from all files
    that are listed in the index and are not in the working tree. Switch `-m` is used
    to specify the commit message:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以使用`-a`开关与该命令一起使用，以添加索引中列出但不在工作树中的所有文件的更改。开关`-m`用于指定提交消息：
- en: '[PRE8]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Sometimes, it is desirable to display the differences or changes between the
    index and the working tree, changes available between two files or blob objects.
    The `git diff` command is used for this purpose. When the `--staged` option is
    passed to the command, Git displays the differences between the staging and the
    last file version:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，希望显示索引和工作树之间的差异或更改，两个文件或blob对象之间可用的更改。`git diff`命令用于此目的。当传递`--staged`选项给命令时，Git显示暂存和最后一个文件版本之间的差异：
- en: '[PRE9]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `git rm` command removes files from the working tree and the index. The
    files to be removed are passed as an option to the command. The files passed to
    the command as arguments are deleted from the working directory and staged for
    deletion. When the `--cached` option is passed to the command, Git does not delete
    the file from the working directory, but removes it from the version control:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`git rm`命令从工作树和索引中删除文件。要删除的文件作为命令的选项传递。作为参数传递给命令的文件将从工作目录中删除并标记为删除。当传递`--cached`选项给命令时，Git不会从工作目录中删除文件，而是从版本控制中删除它：'
- en: '[PRE10]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `git reset` command can be used to unstage and preserve the contents of
    files that have already been staged in a repository. The command is used to reset
    the current `HEAD` to a specified state. Also, it can be used to modify the index
    and working tree, based on the option specified.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`git reset`命令可用于取消暂存并保留已在存储库中暂存的文件的内容。该命令用于将当前`HEAD`重置为指定状态。此外，它还可以根据指定的选项修改索引和工作树。'
- en: 'The command has three forms. The first and second forms are used to copy the
    entries from tree to the index, while the last form is used to set the current
    branch `HEAD` to a particular commit:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令有三种形式。第一和第二种形式用于从树复制条目到索引，而最后一种形式用于将当前分支`HEAD`设置为特定提交：
- en: '[PRE11]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Branching and merging commands
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支和合并命令
- en: The `git branch` command is core to the Git version control system. It is used
    to create, move, rename, delete, and list available branches in a repository.
    The command has several forms and accepts different options used to set up and
    configure repository branches. When the `git branch` command is run on Bash, without
    specifying an option, the available branches in the repository are listed. This
    is similar to using the `--list` option.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`git branch`命令是Git版本控制系统的核心。它用于在存储库中创建、移动、重命名、删除和列出可用的分支。该命令有几种形式，并接受用于设置和配置存储库分支的不同选项。在Bash上运行`git
    branch`命令，不指定选项时，将列出存储库中可用的分支。这类似于使用`--list`选项。'
- en: 'To create a new branch, the `git branch` command is run with the branch name
    as the argument:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新分支，使用`git branch`命令并将分支名称作为参数运行：
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `--delete` option is used to delete the branch specified, and the `--copy` option
    is used to create a copy of the specified branch alongside its `reflog`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`--delete`选项用于删除指定的分支，`--copy`选项用于创建指定分支的副本以及其`reflog`。'
- en: To update the files in a working tree or branch to match what is available in
    another working tree, the `git checkout` command is used. The command is used
    to switch branch or to restore working tree files. Similar to `git branch`, it
    has several forms and accepts different options.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要将工作树或分支中的文件更新为另一个工作树中可用的内容，使用`git checkout`命令。该命令用于切换分支或恢复工作树文件。与`git branch`类似，它有几种形式并接受不同的选项。
- en: 'When the command is run with the branch name passed as an argument, Git switches
    to the branch specified, updates the working directory, and points the HEAD at
    the branch:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用分支名称作为参数运行该命令时，Git切换到指定的分支，更新工作目录，并将HEAD指向该分支：
- en: '[PRE13]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As discussed in the previous section, branching concepts allow development teams
    to try out new ideas and create new versions of a project from existing ones.
    The beauty of branching lies in being able to incorporate changes from one branch
    to another, in essence joining or merging branches or development lines together.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，分支概念允许开发团队尝试新想法，并从现有项目创建新版本。分支的美妙之处在于能够将一个分支的更改合并到另一个分支中，实质上是将分支或开发线连接或合并在一起。
- en: 'In Git, the `git merge` command is used for the purpose of integrating development
    branches created from a branch into a single branch. For example, if there is
    a development branch, created from a master branch to test a certain feature,
    when the `git merge [branch name]` command is run, Git will retrace the changes
    that have been made to the branch. This is because it was spurned from the master
    branch until the latest branch and stores these changes on the master branch in
    a new commit:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，`git merge`命令用于将从一个分支创建的开发分支集成到单个分支中。例如，如果有一个从主分支创建的开发分支来测试某个功能，当运行`git
    merge [分支名称]`命令时，Git将追溯对该分支所做的更改。这是因为它是从主分支分出的，直到最新的分支，并将这些更改存储在主分支上的新提交中：
- en: '[PRE14]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Quite often, the merge process can result in conflicts between files of the
    different branches. Running the `git merge --abort` command will abort the merge
    process and restore the branches back to the pre-merge state. After the conflicts
    encountered have been resolved, `git merge --continue` can be run to re-run the
    merge process.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，合并过程可能会导致不同分支的文件之间发生冲突。运行`git merge --abort`命令将中止合并过程并将分支恢复到合并前的状态。解决了遇到的冲突后，可以运行`git
    merge --continue`重新运行合并过程。
- en: Configuring GitHub WebHooks
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置GitHub WebHooks
- en: A **WebHook** is an event notification delivered through an HTTP POST. A WebHook
    is often referred to as a web callback or HTTP push API. A WebHook provides a
    mechanism by which an application delivers data to other applications in real
    time as they arrive.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebHook**是通过HTTP POST传递的事件通知。WebHook通常被称为Web回调或HTTP推送API。WebHook提供了一种机制，应用程序可以实时将数据传递给其他应用程序。'
- en: A WebHook differs from a regular API in that there is no continuous resource
    utilization through polling of data to get the latest data. The subscriber or
    consuming application receives the data when it is available through a URL that
    must have been registered with the WebHook provider. A WebHook is effective and
    efficient for both the provider of the data and the consumer.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: WebHook与常规API不同之处在于，它没有通过轮询数据来获取最新数据的持续资源利用。当数据可用时，订阅者或消费应用程序将通过已在WebHook提供程序注册的URL接收数据。WebHook对数据提供程序和消费者都是有效且高效的。
- en: Consuming WebHooks
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费WebHooks
- en: To receive notifications or data from a WebHook, the consuming application needs
    to register a URL with the provider. The provider will deliver the data through
    POST to the URL. The URL must be publicly accessible from the web and be reachable.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要从WebHook接收通知或数据，消费应用程序需要向提供程序注册一个URL。提供程序将通过POST将数据传递到URL。URL必须从网络公开访问并可达。
- en: The WebHook provider usually delivers the data through HTTP POST as JSON, XML,
    or as a form data through multipart or URL encoded. The implementation of the
    API at the URL of the subscriber will be influenced by the mode of data delivery
    used by the WebHook provider.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: WebHook提供程序通常通过HTTP POST以JSON、XML或作为多部分或URL编码的表单数据的形式传递数据。订阅者URL上的API的实现将受到WebHook提供程序使用的数据传递模式的影响。
- en: Quite often, there are situations that require that WebHooks be debugged. This
    might be to troubleshoot an error. This can sometimes be challenging because of
    the asynchronous nature of WebHooks. First, the data from the WebHook must be
    understood. This can be achieved using tools that can get and parse WebHook requests.
    Based on the knowledge of the structure and content of the WebHook data, the requests
    can be mocked in order to test the URL API code to resolve the issue.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 经常会出现需要调试WebHooks的情况。这可能是为了解决错误。由于WebHooks的异步性质，有时可能会有挑战。首先，必须理解来自WebHook的数据。可以使用能够获取和解析WebHook请求的工具来实现这一点。根据对WebHook数据结构和内容的了解，可以模拟请求以测试URL
    API代码以解决问题。
- en: When consuming data from a WebHook, it is important to be security aware and
    factor this into the design of the consuming application. Because the callback
    URL that the WebHook provider will POST data to is publicly available, it can
    be subject to malicious attacks.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在从WebHook消费数据时，重要的是要注意安全性，并将其纳入消费应用程序的设计中。因为WebHook提供程序将POST数据到的回调URL是公开可用的，所以可能会受到恶意攻击。
- en: A common and easy approach is to append to the URL a mandatory authentication
    token that will be verified on each request. Also, basic authentication can be
    built around the URL to verify the party initiating the POST before accepting
    and processing the data. Alternatively, the provider can sign every WebHook request,
    if the request signing is already implemented at the provider's end. The signature
    of every request posted will be verified by the consumer.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见且简单的方法是在URL中附加一个强制身份验证令牌，每次请求都将对其进行验证。还可以围绕URL构建基本身份验证，以在接受和处理数据之前验证发起POST的一方。或者，如果请求签名已经在提供程序端实现，提供程序可以对每个WebHook请求进行签名。每个发布的请求的签名将由消费者进行验证。
- en: Depending on the frequency of events generation from the subscriber, a lot of
    requests can be raised by WebHooks. If the subscriber is not properly designed
    to handle such large requests, this can lead to high resource utilization, both
    in terms of bandwidth and server resources. When resources are fully utilized
    and used up, the consumer might no longer be able to handle more requests, resulting
    in a denial of service of the consumer application.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 根据订阅者生成事件的频率，WebHooks可能会引发大量请求。如果订阅者未能正确设计以处理这样大量的请求，这可能会导致资源利用率高，无论是带宽还是服务器资源。当资源被充分利用并用完时，消费者可能无法处理更多请求，导致消费应用程序的拒绝服务。
- en: GitHub WebHook
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub WebHook
- en: In GitHub, WebHooks serve as a means of delivering notifications to an external
    web server when events occur. GitHub WebHooks allow you to set up your projects
    that are hosted on GitHub to subscribe to the desired events available on the [www.github.com](http://www.github.com)
    platform. When the event occurs, GitHub sends a payload to the configured endpoint.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub中，WebHooks用作在事件发生时向外部Web服务器发送通知的手段。GitHub WebHooks允许您设置托管在GitHub上的项目以订阅[www.github.com](http://www.github.com)平台上可用的所需事件。当事件发生时，GitHub将向配置的端点发送有效负载。
- en: WebHooks are configured on any of the repository or at the organizational level.
    Once successfully configured, the WebHook will be triggered every time a subscribed
    event or action is triggered. GitHub allows for the creation of up to 20 WebHooks
    per event for a repository or organization. The WebHooks, after installation,
    can be triggered on a repository or organization.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: WebHooks可以在任何存储库或组织级别进行配置。成功配置后，每当触发订阅的事件或操作时，WebHook都将被触发。GitHub允许为存储库或组织的每个事件创建多达20个WebHooks。安装后，WebHooks可以在存储库或组织上触发。
- en: Events and payloads
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和负载
- en: At the point of WebHook configuration in GitHub, you can specify which events
    you want to receive requests from GitHub. WebHook requests data is termed payloads
    in GitHub. It is smarter to subscribe to only the events for the data that is
    needed so as to limit the HTTP requests sent to the application server from GitHub.
    By default, even a WebHook created on GitHub is subscribed to the `push` event.
    Event subscriptions can be modified through the GitHub web or API.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub的WebHook配置点，您可以指定要从GitHub接收请求的事件。GitHub中的WebHook请求数据称为有效负载。最好只订阅所需数据的事件，以限制从GitHub发送到应用程序服务器的HTTP请求。默认情况下，即使在GitHub上创建的WebHook也订阅了`push`事件。事件订阅可以通过GitHub
    Web或API进行修改。
- en: 'Some of the available events that can be subscribed to on GitHub are explained
    in the following table:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格中解释了GitHub上可订阅的一些可用事件：
- en: '| **Event** | **Description** |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| **事件** | **描述** |'
- en: '| `push` | This is the default event and is raised when there is a Git push
    to a repository. This also includes editing tags or branches and commits made
    via API actions that update references |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `push` | 这是默认事件，当对存储库进行Git推送时引发。这还包括通过更新引用的API操作进行的编辑标签或分支和提交 |'
- en: '| `create` | Raised whenever a branch or tag is created. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `create` | 每当创建分支或标签时引发。 |'
- en: '| `delete` | Raised whenever a branch or tag is deleted. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `delete` | 每当删除分支或标签时引发。 |'
- en: '| `issues` | Raised whenever an issue is assigned, unassigned, labeled, unlabeled,
    opened, edited, milestoned, de-milestoned, closed, or reopened. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `issues` | 每当分配问题，取消分配，加标签，取消标签，打开，编辑，里程碑，取消里程碑，关闭或重新打开时引发。 |'
- en: '| `repository` | Raised whenever a repository is created, deleted (organization
    hooks only), archived, unarchived, made public, or made private. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `repository` | 每当创建，删除（仅限组织挂钩），存档，取消存档，公开或私有化存储库时引发。 |'
- en: '| `*` | This is a wildcard event and indicates that the URL should be notified
    for any event. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 这是通配符事件，表示应通知URL以获取任何事件。 |'
- en: A full list of all available events on GitHub is available at [https://developer.github.com/webhooks/](https://developer.github.com/webhooks/).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上所有可用事件的完整列表可在[https://developer.github.com/webhooks/](https://developer.github.com/webhooks/)上找到。
- en: The `push` event has a payload that contains more detailed information. Every
    event in GitHub has a specific payload format that describes the information required
    for that event. Besides the specific fields peculiar to an event, each event includes
    in the payload the user or sender who triggers the event.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`push`事件具有包含更详细信息的有效负载。GitHub中的每个事件都具有特定的有效负载格式，用于描述该事件所需的信息。除了特定于事件的特定字段外，每个事件在有效负载中都包括触发事件的用户或发送者。'
- en: 'Also, included in the payload is the repository or organization that the event
    occurred on and the application that the event is related to. Payloads cannot
    exceed 5 MB in size. An event that produces a payload with a size larger than
    5 MB will not be fired. A payload delivered to the URL usually contains several
    headers, some of which are explained in the following table. When a new WebHook
    is created, GitHub sends a ping to the configured URL, as an indicator that the
    WebHook configuration was successful:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 有效负载还包括发生事件的存储库或组织以及与事件相关的应用程序。有效负载大小不能超过5 MB。产生有效负载大小超过5 MB的事件将不会触发。传递到URL的有效负载通常包含几个标头，其中一些在以下表格中进行了解释。创建新WebHook时，GitHub会向配置的URL发送ping，作为WebHook配置成功的指示：
- en: '| **Header** | **Description** |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| **标题** | **描述** |'
- en: '| --- | --- |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `User-Agent` | User agent initiating the request. This will always have the
    prefix `Github-Hookshot`. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `User-Agent` | 发起请求的用户代理。这将始终具有前缀`Github-Hookshot`。 |'
- en: '| `X-GitHub-Event` | Contains the name of the event that triggered the delivery.
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `X-GitHub-Event` | 包含触发交付的事件名称。 |'
- en: '| `X-GitHub-Delivery` | A GUID to identify the delivery. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `X-GitHub-Delivery` | 用于标识交付的GUID。 |'
- en: '| `X-Hub-Signature` | This header contains the HMAC hex digest of the response
    body. This header will be sent if the WebHook is configured with a secret. The
    content of the header is generated using the `sha1 hash` function and the secret
    as the HMAC key. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `X-Hub-Signature` | 此标头包含响应正文的HMAC十六进制摘要。如果WebHook配置了密钥，则将发送此标头。标头的内容使用`sha1
    hash`函数和密钥作为HMAC密钥生成。 |'
- en: Setting up your first WebHook
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的第一个WebHook
- en: 'To configure a WebHook, we will use the `LoanApplication` repository created
    earlier. Click on the Settings page of the repository, click on Webhooks, and
    click on Add webhook:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置WebHook，我们将使用之前创建的`LoanApplication`存储库。单击存储库的设置页面，单击Webhooks，然后单击添加Webhook：
- en: '![](img/ec26cece-7d41-4bc6-95a3-bfca75bf8c3b.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec26cece-7d41-4bc6-95a3-bfca75bf8c3b.png)'
- en: 'GitHub will ask you to authenticate the action. Supply your GitHub account
    password to continue. The WebHook configuration page will be loaded, where you
    can configure the options for the WebHook:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub将要求您对操作进行身份验证。提供您的GitHub帐户密码以继续。将加载WebHook配置页面，在那里您可以配置WebHook的选项：
- en: In the Payload URL field, provide the endpoint of the web application server.
    Since we will be running the `LoanApplication` from Visual Studio, we will use
    the following URL: `http://localhost:54113/API/webhook`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在有效负载URL字段中，提供Web应用程序服务器的端点。由于我们将从Visual Studio运行`LoanApplication`，我们将使用以下URL：`http://localhost:54113/API/webhook`。
- en: Change the Content type dropdown to application/json, to allow GitHub to send
    the payload via POST as JSON.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内容类型下拉菜单更改为application/json，以允许GitHub通过POST以JSON发送有效负载。
- en: Next, choose the option Let me select individual events. This will display a
    full list of available WebHook events.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择“让我选择单个事件”选项。这将显示所有可用WebHook事件的完整列表。
- en: Select the events that you want the WebHook to subscribe to.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您希望WebHook订阅的事件。
- en: 'Finally, click on the **Add webhook** button, to finish the configuration:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击**添加Webhook**按钮，完成配置：
- en: '![](img/b97675f1-e44e-42a9-8f1b-ba2fb96c5776.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b97675f1-e44e-42a9-8f1b-ba2fb96c5776.png)'
- en: 'Once the WebHook has been created, GitHub will attempt to send a ping to the
    configured URL in the WebHook. The URL specified, `http://localhost:54113/api/webhook`,
    is a local development and not publicly available. It is therefore not reachable
    by GitHub, causing the WebHook request to fail:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 创建WebHook后，GitHub将尝试向WebHook中配置的URL发送ping。指定的URL `http://localhost:54113/api/webhook`
    是本地开发，不是公开可用的。因此，GitHub无法访问，导致WebHook请求失败：
- en: '![](img/49e0be46-65e8-444e-a98e-1f099a77f7a7.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49e0be46-65e8-444e-a98e-1f099a77f7a7.png)'
- en: To expose the development environment to the internet to make it accessible
    to GitHub, we can use **Ngrok**, a tool to create a public URL for exposing a
    local web server. Navigate to [https://ngrok.com/download](https://ngrok.com/download)
    to download Ngrok for your operating system.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将开发环境暴露给GitHub以使其可访问互联网，我们可以使用**Ngrok**，这是一个用于暴露本地Web服务器的公共URL的工具。转到[https://ngrok.com/download](https://ngrok.com/download)下载适用于您操作系统的Ngrok。
- en: 'Run the following command to tell Ngrok to expose port `54113` to the internet:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令告诉Ngrok将端口`54113`暴露到互联网上：
- en: '[PRE15]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Ngrok will create a public URL that will be accessible and forwarded to the
    specified port on your development PC. In this case, Ngrok generated `http://d73c1ef5.ngrok.io`
    as the URL that will be forwarded to port `54113`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Ngrok将创建一个公共URL，可访问并转发到开发PC上指定的端口。在这种情况下，Ngrok生成了`http://d73c1ef5.ngrok.io`作为将转发到端口`54113`的URL：
- en: '![](img/fe7fb1cc-5047-411e-bd21-54370828ea77.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe7fb1cc-5047-411e-bd21-54370828ea77.png)'
- en: Next, update the payload URL for the WebHook created earlier to `http://d73c1ef5.ngrok.io/api/webhook`.
    Click on the Update WebHook button to save the changes. Under Recent Deliveries
    tab, click on the GUID for the payload that failed to deliver. This will open
    up a screen showing the JSON payload, with a request and response.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新之前创建的WebHook的有效负载URL为`http://d73c1ef5.ngrok.io/api/webhook`。单击“更新WebHook”按钮以保存更改。在“最近的交付”选项卡下，单击未能交付的有效负载的GUID。这将打开一个屏幕，显示JSON有效负载，包括请求和响应。
- en: 'Click on the Redeliver button. This will display a dialog box asking you if
    want to redeliver the payload. Click on Yes, redeliver this payload button. This
    will attempt to POST the JSON payload to the new endpoint specified in the payload
    URL field. This time, the payload delivery will be successful with HTTP response
    code `200`, indicating that the endpoint was contacted successfully:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“重新交付”按钮。这将显示一个对话框，询问您是否要重新交付有效负载。单击“是，重新交付此有效负载”按钮。这将尝试将JSON有效负载POST到有效负载URL字段中指定的新端点。这次，有效负载交付将成功，HTTP响应代码为`200`，表示端点已成功联系：
- en: '![](img/12d0e466-f986-4972-8f42-e63c11de1f64.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12d0e466-f986-4972-8f42-e63c11de1f64.png)'
- en: You can program the consumer web application to process the payload data the
    way you want. With the successful configuration, GitHub will POST the payload
    to the endpoint whenever any event subscribed to in the WebHook is raised.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以编写消费者Web应用程序以按照您的意愿处理有效负载数据。成功配置后，GitHub将在WebHook订阅的任何事件引发时将有效负载POST到端点。
- en: TeamCity CI platform
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity CI平台
- en: TeamCity is a platform-independent CI tool by JetBrains. It is a user-friendly
    CI tool specifically built with software developers and engineers in mind. TeamCity
    is a robust and powerful CI tool because of the capability to fully optimize the
    integration cycle.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity是JetBrains推出的一个独立于平台的CI工具。它是一个用户友好的CI工具，专门为软件开发人员和工程师设计。TeamCity是一个强大而功能强大的CI工具，因为它能够充分优化集成周期。
- en: TeamCity can also run builds in parallel simultaneously on different platforms
    and environments. Using TeamCity, you can have customized statistics on code quality,
    build duration, or even create custom metrics. It has a feature for running code
    coverage and it has a duplicates finder.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity还可以在不同平台和环境上同时并行运行构建。使用TeamCity，您可以获得有关代码质量、构建持续时间甚至创建自定义指标的定制统计信息。它具有运行代码覆盖率和查找重复项的功能。
- en: TeamCity concepts
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity概念
- en: 'In this section, some basic terms regularly used in TeamCity will be explained.
    This is necessary in order to understand some of the concepts required to successfully
    configure the build steps as well as artifacts needed for a quality continuous
    process. Let''s have a look at some basic terms:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，将解释TeamCity中经常使用的一些基本术语。这是为了理解成功配置构建步骤以及质量连续过程所需的一些概念。让我们来看看一些基本术语：
- en: '**Project**: This is the software project being developed. It can be a release
    or specific version. Also, it includes the collection of Build Configurations.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：这是正在开发的软件项目。它可以是一个发布或特定版本。此外，它包括构建配置的集合。'
- en: '**Build Agent**: This is the software that executes a build process. It is
    installed independently from the TeamCity Server. They can both reside on the
    same machine or on separate machines running similar or different operating systems.
    For production purposes, it is usually recommended that they both are installed
    on different machines for optimal performance.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建代理**：这是执行构建过程的软件。它独立安装在TeamCity服务器之外。它们可以都驻留在同一台机器上，也可以在运行相似或不同操作系统的不同机器上。对于生产目的，通常建议它们都安装在不同的机器上以获得最佳性能。'
- en: '**TeamCity Server**: The TeamCity Server monitors the Build Agents while using
    compatibility requirements to distribute builds to connected agents, and it reports
    the progress and results. The information in the results include the build history,
    logs, and build data.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TeamCity服务器**：TeamCity服务器监视构建代理，同时使用兼容性要求将构建分发到连接的代理，并报告进度和结果。结果中的信息包括构建历史记录、日志和构建数据。'
- en: '**Build**: This is the process of creating a specific version of a software
    project. Triggering a build process places it in the Build Queue and will be started
    when there is an available agent to run it. The Build Agent sends Build Artifacts
    to the TeamCity Server upon completion of the build.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：这是创建软件项目的特定版本的过程。触发构建过程会将其放入构建队列，并在有可用代理运行时启动。构建代理在构建完成后将构建产物发送到TeamCity服务器。'
- en: '**Build Queue**: This is a list containing builds that have been triggered
    and yet to be started. The TeamCity Server reads the queue for pending builds
    and distributes the build to compatible Build Agents the moment the agent is idle.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建队列**：这是一个包含已触发但尚未启动的构建的列表。TeamCity服务器读取待处理构建的队列，并在代理空闲时将构建分发给兼容的构建代理。'
- en: '**Build Artifacts**: These are files generated by a build. These can include `dll`
    files, executables, installers, reports, log files, and so on.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建产物**：这些是构建生成的文件。这些可以包括`dll`文件、可执行文件、安装程序、报告、日志文件等。'
- en: '**Build Configuration**: This is a collection of settings describing a build
    procedure. This includes VCS Roots, Build Steps, and Build Triggers.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建配置**：这是描述构建过程的一组设置。这包括VCS根、构建步骤和构建触发器。'
- en: '**Build Step**: A Build Step is represented by a build runner with integration
    with a build tool, such as MSBuild, a code analysis engine, and a testing framework,
    such as xUnit.net. The build step is essentially a task to be executed, which
    can contain many steps that are sequentially executed.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建步骤**：构建步骤由与构建工具集成的构建运行器表示，例如MSBuild，代码分析引擎和测试框架，例如xUnit.net。构建步骤本质上是要执行的任务，可以包含顺序执行的许多步骤。'
- en: '**Build Trigger**: This is a set of rules that triggers a new build on certain
    events, such as when a VCS triggers a new build when TeamCity detects changes
    in the configured VCS Roots.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建触发器**：这是一组规则，触发某些事件的新构建，例如当VCS触发新构建时，当TeamCity检测到配置的VCS根中的更改时。'
- en: '**VCS Root**: This is a collection of version control settings, including paths
    to sources, credentials, and other settings that define the way TeamCity communicates
    with a version control system.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VCS根**：这是一组版本控制设置，包括源路径、凭据和其他定义TeamCity与版本控制系统通信方式的设置。'
- en: '**Change**: This is a modification to the source code of the project. A Change
    is termed pending for a certain Build Configuration when the Change has been committed
    to the version control system, but not yet included in a build.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改**：这是对项目源代码的修改。当更改已提交到版本控制系统但尚未包含在构建中时，对于某个构建配置，更改被称为待处理更改。'
- en: Installing TeamCity Server
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装TeamCity服务器
- en: TeamCity can be hosted locally on a development team's server infrastructure
    or by integrating TeamCity with cloud solutions. This allows virtual machines
    to be provisioned to run TeamCity. A TeamCity installation will comprise of the
    server installation and a default Build Agent.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity可以在开发团队的服务器基础设施上本地托管，也可以通过与云解决方案集成来托管TeamCity。这允许虚拟机被配置以运行TeamCity。TeamCity安装将包括服务器安装和默认的构建代理。
- en: To install the TeamCity Server, navigate to the JetBrains download site to get
    the free professional edition of the TeamCity Server which comes with free licence
    key that unlocks 3 Build Agents and 100 Build Configurations. If you are on the
    Windows operating system, run the download `.exe`, which is bundled with Tomcat
    Java JRE 1.8\. Follow the dialog prompts to extract and install the TeamCity core
    files.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装TeamCity服务器，请转到JetBrains下载站点，获取TeamCity服务器的免费专业版，该版本附带免费许可密钥，可解锁3个构建代理和100个构建配置。如果您使用Windows操作系统，请运行捆绑了Tomcat
    Java JRE 1.8的下载`.exe`。按照对话框提示提取和安装TeamCity核心文件。
- en: 'During the installation, you can set up the port that TeamCity will be listening
    to or leave it at default `8080`. If the installation is successful, TeamCity
    will open in the browser, prompting you to complete the installation process by
    specifying the Data Directory Location on the server. Specify the path and click
    Proceed:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，您可以设置TeamCity将监听的端口，也可以将其保留为默认的`8080`。如果安装成功，TeamCity将在浏览器中打开，并提示您通过在服务器上指定数据目录位置来完成安装过程。指定路径并单击“继续”：
- en: '![](img/b00f61fc-a20d-4a35-a237-6c9e9230ea17.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b00f61fc-a20d-4a35-a237-6c9e9230ea17.png)'
- en: 'After the Data Directory Location path has been initialized, you will be taken
    to the database selection page, where you will be given the option of selecting
    any of the supported databases. Select Internal (HSQLDB) and click the Proceed
    button:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据目录位置路径初始化后，您将进入数据库选择页面，在该页面上，您将有选择任何受支持的数据库的选项。选择内部（HSQLDB）并单击“继续”按钮：
- en: '![](img/05532102-4ddf-410e-85ff-f09b3e93ac84.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05532102-4ddf-410e-85ff-f09b3e93ac84.png)'
- en: 'The database configuration will take a few seconds, before you are presented
    with the license agreement page. Accept the license agreement and click on the
    Continue button. The next page is the admin account creation page. Create the
    account with the desired credentials to finish the installation. After the installation
    is completed, you will be directed to the overview page:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库配置将需要几秒钟，然后您将看到许可协议页面。接受许可协议并单击“继续”按钮。下一页是管理员帐户创建页面。使用所需的凭据创建帐户以完成安装。安装完成后，您将被引导到概述页面：
- en: '![](img/7f576b08-af3d-4e25-9925-ba7709abb491.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f576b08-af3d-4e25-9925-ba7709abb491.png)'
- en: TeamCity CI workflow
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity CI工作流
- en: 'The TeamCity build life cycle describes the data flow between the server and
    the agents. This is basically the information passed to the agents and the process
    of retrieving the results by TeamCity. The workflow describes the manner in which
    configured build steps for projects are executed end to end:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity构建生命周期描述了服务器和代理之间的数据流。这基本上是传递给代理的信息以及TeamCity检索结果的过程。工作流描述了为项目配置的构建步骤是如何端到端执行的：
- en: The TeamCity Server detects a change in the VCS Root and persists this in the
    database.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TeamCity服务器检测VCS根中的更改，并将其持久化到数据库中。
- en: The Build Trigger notices the change in the database and adds a build to the
    queue.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建触发器注意到数据库中的更改并将构建添加到队列中。
- en: The TeamCity Server assigns the build on the queue to a compatible idle Build
    Agent.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TeamCity服务器将队列中的构建分配给兼容的空闲构建代理。
- en: The Build Agent executes the build steps. During the execution of the build
    steps, the agents sends reports of the build progress to the server. The Build
    Agent reports the build progress to the TeamCity Server to allow for real time
    monitoring of the build process.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建代理执行构建步骤。在执行构建步骤期间，代理将构建进度报告发送到服务器。构建代理将构建进度报告发送到TeamCity服务器，以允许实时监控构建过程。
- en: The Build Agent sends Build Artifacts to the TeamCity Server upon completion
    of the build.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建代理在构建完成后将构建产物发送到TeamCity服务器。
- en: Configuring and running build
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和运行构建
- en: Essentially, a project should contain configuration and project properties required
    to run a successful build. Using the TeamCity CI server, the steps required to
    run tests, perform environmental checks, compile, build, and make available a
    deploy-ready version of a project can be automated end to end.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，项目应包含运行成功构建所需的配置和项目属性。使用TeamCity CI服务器，可以自动化运行测试、执行环境检查、编译、构建，并提供可部署版本的项目。
- en: The installed TeamCity Server can be accessed locally at the port specified
    during installation. In this case, we will use `http://localhost:8060`. To create
    a TeamCity project, navigate to the server URL and log in using the earlier created
    credentials. Click on the Projects menu and click on the Create Project button.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的TeamCity服务器可以在安装期间指定的端口上本地访问。在这种情况下，我们将使用`http://localhost:8060`。要创建一个TeamCity项目，请转到服务器URL并使用之前创建的凭据登录。点击“项目”菜单，然后点击“创建项目”按钮。
- en: 'You will be presented with several project options for creating the project
    from a repository, manually, or connecting to any of GitHub, Bitbucket, or Visual
    Studio Team Services. Click on the From GitHub.com button to connect TeamCity
    to the `LoanApplication` repository we created earlier on GitHub:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到创建项目的几个选项，可以从存储库、手动创建，或连接到GitHub、Bitbucket或Visual Studio Team Services中的任何一个。点击“来自GitHub.com”按钮，将TeamCity连接到我们之前在GitHub上创建的“LoanApplication”存储库：
- en: '![](img/822c68c9-b100-4914-b97d-e1a7bc1db8a2.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/822c68c9-b100-4914-b97d-e1a7bc1db8a2.png)'
- en: 'The **Add Connection** dialog is displayed where TeamCity will be connected
    to GitHub. A new GitHub OAuth application needs to be created to successfully
    connect TeamCity to GitHub. To create a new OAuth application in GitHub, perform
    the following steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加连接**对话框显示了TeamCity将连接到GitHub。需要创建一个新的GitHub OAuth应用程序才能成功将TeamCity连接到GitHub。要在GitHub中创建新的OAuth应用程序，请执行以下步骤：'
- en: Navigate to [https://github.com/settings/applications/new](https://github.com/settings/applications/new).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/settings/applications/new](https://github.com/settings/applications/new)。
- en: 'In the homepage URL field, supply the URL of the TeamCity Server: `http://localhost:8060`.'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页URL字段中，提供TeamCity服务器的URL：`http://localhost:8060`。
- en: Supply `http://localhost:8060/oauth/github/accessToken.html` in the Authorization
    callback URL.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在授权回调URL中提供`http://localhost:8060/oauth/github/accessToken.html`。
- en: 'Click on the Register application button to complete the registration. A new
    client secret and client ID will be created for you:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“注册应用程序”按钮完成注册。将为您创建新的客户端密钥和客户端ID：
- en: '![](img/c22bc375-7ebb-4be0-8cae-a8a4ff68e247.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c22bc375-7ebb-4be0-8cae-a8a4ff68e247.png)'
- en: 'The new client ID and client secret created will be used to fill the fields
    in the add connection dialog on TeamCity to create a connection from TeamCity
    to GitHub. Click on the Save button to save the settings:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的新客户端ID和客户端密钥将用于填写TeamCity上添加连接对话框中的字段，以创建从TeamCity到GitHub的连接。点击“保存”按钮保存设置：
- en: '![](img/5647f0d2-7fe4-4e6b-b598-49a9e4b0093c.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5647f0d2-7fe4-4e6b-b598-49a9e4b0093c.png)'
- en: The next step is to authorize TeamCity to have access to the VCS. This can be
    done by clicking the Sign in to GitHub button. A page will be displayed where
    you have to authorize TeamCity to access both public and private repositories
    in the GitHub account. Click Authorize to complete the process.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是授权TeamCity访问VCS。点击“登录GitHub”按钮即可完成。将显示一个页面，您必须授权TeamCity访问GitHub帐户中的公共和私有存储库。点击“授权”完成流程。
- en: 'TeamCity will initiate a connection to GitHub to retrieve the list of available repositories
    that you can select from. You can filter the list to select the desired repository:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TeamCity将启动到GitHub的连接，以检索可以选择的可用存储库列表。您可以筛选列表以选择所需的存储库：
- en: '![](img/c1b4cd33-b1dc-4121-827f-c91eccd445db.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1b4cd33-b1dc-4121-827f-c91eccd445db.png)'
- en: 'Connection to the selected repository will be verified by TeamCity. If this
    is successful, Create Project will be displayed. On this page, the project and
    Build configuration name will be displayed. You can modify this if required. Click
    the Proceed button to continue with the project setup:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TeamCity将验证与所选存储库的连接。如果成功，将显示“创建项目”。在此页面上，将显示项目和构建配置名称。如果需要，可以进行修改。点击“继续”按钮继续进行项目设置：
- en: '![](img/d6ae2ec9-1eb6-4a07-a6fd-48a12a03e947.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6ae2ec9-1eb6-4a07-a6fd-48a12a03e947.png)'
- en: 'In the next screen, TeamCity will scan the connected repository for available
    configured build steps. You can click on the Create Build Step button to add a
    build step:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，TeamCity将扫描连接的存储库以查找可用的配置构建步骤。您可以点击“创建构建步骤”按钮添加构建步骤：
- en: '![](img/dc7ee611-53ce-4ae6-9b25-715412134b99.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc7ee611-53ce-4ae6-9b25-715412134b99.png)'
- en: In the New Build Step screen, you have to select the build runner from the dropdown.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的构建步骤屏幕上，您必须从下拉菜单中选择构建运行程序。
- en: Specify a descriptive name for the build step.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为构建步骤指定一个描述性名称。
- en: Next select the command that you want the build runner to execute. Fill in all
    the other required fields
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后选择要构建运行程序执行的命令。填写所有其他必填字段
- en: 'Click the Save button to save the build step:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存按钮保存构建步骤：
- en: '![](img/0b5ea0f5-99b2-4a42-ba57-1e21abc60196.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b5ea0f5-99b2-4a42-ba57-1e21abc60196.png)'
- en: Once the build step is saved, the list of the available build steps will be
    displayed where you can add more build steps as desired following the same procedure.
    Also, you can reorder the build steps and can detect build steps, by clicking
    the Auto-detect build steps button.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存构建步骤后，将显示可用构建步骤的列表，您可以按照相同的步骤添加更多构建步骤。此外，您可以重新排序构建步骤，并通过单击“自动检测构建步骤”按钮来检测构建步骤。
- en: 'After configuring the build steps, you can run the build by clicking on the
    run link on the top menu of the TeamCity web page. This will redirect to you to
    the build result page where you can view the progress of the build and subsequently
    review it or edit the Build Configuration:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置构建步骤后，您可以通过单击TeamCity网页顶部菜单上的运行链接来运行构建。这将重定向到构建结果页面，您可以在那里查看构建的进度，随后审查或编辑构建配置：
- en: '![](img/b2cf317b-51ea-4584-a517-412c6b142bec.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2cf317b-51ea-4584-a517-412c6b142bec.png)'
- en: Summary
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have extensively explored the concept of CI, a software
    development practice that assists development teams in integrating their code
    frequently. Developers are expected to check the code several times a day, which
    is then verified by an automated build process, using a CI tool.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们广泛探讨了CI的概念，这是一种软件开发实践，可以帮助开发团队频繁地集成其代码。开发人员预计每天多次检查代码，然后由CI工具通过自动化构建过程进行验证。
- en: Also, common terminologies of CI be for continuous delivery were discussed.
    We explained the steps on how to host software projects on GitHub and online hosting
    platforms and later discussed basic Git commands.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 还讨论了CI的常见术语，用于持续交付。我们解释了如何在GitHub和在线托管平台上托管软件项目的步骤，然后讨论了基本的Git命令。
- en: The process of creating GitHub WebHooks to configure integrations with build
    management systems was explored. Finally, a step-by-step description of installing
    and configuring the TeamCity CI platform was given.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 探讨了创建GitHub WebHooks以配置与构建管理系统集成的过程。最后，给出了安装和配置TeamCity CI平台的逐步说明。
- en: In the next chapter, we will explore Cake Bootstrapper and configure TeamCity
    to use a cross-platform build automation system called Cake to clean, build, and
    restore package dependencies and test our `LoanApplication` project.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Cake Bootstrapper并配置TeamCity以使用名为Cake的跨平台构建自动化系统来清理、构建和恢复软件包依赖项并测试我们的“LoanApplication”项目。
