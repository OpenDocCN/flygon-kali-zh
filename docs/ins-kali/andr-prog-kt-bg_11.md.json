["```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\nsuper.onCreate(... \n```", "```kt\nopen class Soldier() {\n\n    fun shoot () {\n        Log.i(\"Action\",\"Bang bang bang\")\n    }\n}\n```", "```kt\nval soldier = Soldier()\nsoldier.shoot()\n```", "```kt\nclass SpecialForces: Soldier(){\n    fun SneakUpOnEnemy(){\n        Log.i(\"Action\",\"Sneaking up on enemy\")\n    }\n}\n```", "```kt\nclass Paratrooper: Soldier() {\n    fun jumpOutOfPlane() {\n        Log.i(\"Action\", \"Jump out of plane\")\n    }\n}\n```", "```kt\nval specialForces = SpecialForces()\nspecialForces.shoot()\nspecialForces.SneakUpOnEnemy()\n\nval paratrooper = Paratrooper()\nparatrooper.shoot()\nparatrooper.jumpOutOfPlane()\n```", "```kt\nAction: Bang bang bang\nAction: Sneaking up on enemy\nAction: Bang bang bang\nAction: Jump out of plane\n\n```", "```kt\nclass Sniper: Soldier(){\n    override fun shoot(){\n        Log.i(\"Action\",\"Steady\u2026 Adjust for wind\u2026 Bang.\")\n    }\n\n    fun getIntoPosition(){\n        Log.i(\"Action\",\"Preparing line of sight to target\")\n    }\n}\n```", "```kt\nopen class Soldier() {\n\n    open fun shoot () {\n        Log.i(\"Action\",\"Bang bang bang\")\n    }\n}\n```", "```kt\nval sniper = Sniper()\nsniper.shoot()\nsniper.getIntoPosition()\n```", "```kt\nAction: Steady\u2026 Adjust for wind\u2026 Bang.\nAction: Preparing line of sight to target\n\n```", "```kt\nclass Sniper: Soldier(){\n    // He forget to bring enough ammo\n    var sniperAmmo = 3\n\n    override fun shoot(){\n        when (sniperAmmo > 0) {\n            true -> {\n                Log.i(\"Action\", \"Steady\u2026 Adjust for wind\u2026 Bang.\")\n                sniperAmmo--;\n            }\n            false -> super.shoot()\n        }\n    }\n\n    fun getIntoPosition(){\n        Log.i(\"Action\",\"Preparing line of sight to target\")\n    }\n}\n```", "```kt\nval sniper = Sniper()\nsniper.getIntoPosition()\nsniper.shoot()\nsniper.shoot()\nsniper.shoot()\n// Damn! where did I put that spare ammo\nsniper.shoot()\n```", "```kt\nAction: Preparing line of sight to target\nAction: Steady\u2026 Adjust for wind\u2026 Bang.\nAction: Steady\u2026 Adjust for wind\u2026 Bang.\nAction: Steady\u2026 Adjust for wind\u2026 Bang.\nAction: Bang bang bang\n\n```", "```kt\nfun feed(animalToFeed: Animal){\n   // Feed any animal here\n}\n```", "```kt\nabstract fun attack(): Int\n```", "```kt\nabstract class someClass{\n   /*\n         All functions and properties here.\n         As usual!\n         Just don't try and make \n         an object out of me!\n   */\n}\n```", "```kt\nabstract class Ship(\n        val name: String,\n        private var type: String,\n        private val maxAttacks: Int,\n        private val maxHullIntegrity: Int) {\n\n    // The stats that all ships have\n    private var sunk = false\n    private var hullIntegrity: Int\n    protected var attacksRemaining: Int\n\n    init{\n        hullIntegrity = this.maxHullIntegrity\n        attacksRemaining = 1\n    }\n\n    // Anything can use this function\n    fun takeDamage(damageTaken: Int) {\n        if (!sunk) {\n            hullIntegrity -= damageTaken\n            Log.i(\"$name damage taken =\",\"$damageTaken\")\n            Log.i(\"$name hull integrity =\",\"$hullIntegrity\")\n\n            if (hullIntegrity <= 0) {\n                Log.i(type, \"$name has been sunk\")\n                sunk = true\n            }\n        } else {\n            // Already sunk\n            Log.i(\"Error\", \"Ship does not exist\")\n        }\n    }\n\n    fun serviceShip() {\n        attacksRemaining = maxAttacks\n        hullIntegrity = maxHullIntegrity\n    }\n\n    fun showStats(){\n        Log.i(\"$type $name\",\n                \"Attacks:$attacksRemaining - Hull:$hullIntegrity\")\n    }\n\n    abstract fun attack(): Int\n\n}\n```", "```kt\nclass Destroyer(name: String): Ship(\n        name,\n        \"Destroyer\",\n        10,\n        200) {\n\n    // No external access whatsoever\n    private var shotPower = 60\n\n    override fun attack():Int {\n        // Let the calling code no how much damage to do\n        return if (attacksRemaining > 0) {\n            attacksRemaining--\n            shotPower\n        }else{\n            0\n        }\n    }\n}\n```", "```kt\nclass Carrier (name: String): Ship(\n        name,\n        \"Carrier\",\n        20,\n        100){\n\n    // No external access whatsoever\n    private var attackPower = 120\n\n    override fun attack(): Int {\n        // Let the calling code no how much damage to do\n        return if (attacksRemaining > 0) {\n            attacksRemaining--\n            attackPower\n        }else{\n            0\n        }\n    }\n}\n```", "```kt\nclass ShipYard {\n    fun serviceShip(shipToBeServiced: Ship){\n        shipToBeServiced.serviceShip()\n        Log.i(\"Servicing\",\"${shipToBeServiced.name}\")\n    }\n}\n```", "```kt\nval friendlyDestroyer = Destroyer(\"Invincible\")\nval friendlyCarrier = Carrier(\"Indomitable\")\n\nval enemyDestroyer = Destroyer(\"Grey Death\")\nval enemyCarrier = Carrier(\"Big Grey Death\")\n\nval friendlyShipyard = ShipYard()\n\n// A small battle\nfriendlyDestroyer.takeDamage(enemyDestroyer.attack())\nfriendlyDestroyer.takeDamage(enemyCarrier.attack())\nenemyCarrier.takeDamage(friendlyCarrier.attack())\nenemyCarrier.takeDamage(friendlyDestroyer.attack())\n\n// Take stock of the supplies situation\nfriendlyDestroyer.showStats()\nfriendlyCarrier.showStats()\n\n// Dock at the shipyard\nfriendlyShipyard.serviceShip(friendlyCarrier)\nfriendlyShipyard.serviceShip(friendlyDestroyer)\n\n// Take stock of the supplies situation\nfriendlyDestroyer.showStats()\nfriendlyCarrier.showStats()\n\n// Finish off the enemy\nenemyDestroyer.takeDamage(friendlyDestroyer.attack())\nenemyDestroyer.takeDamage(friendlyCarrier.attack())\nenemyDestroyer.takeDamage(friendlyDestroyer.attack())\n```", "```kt\nInvincible damage taken =: 60\nInvincible hull integrity =: 140\nInvincible damage taken =: 120\nInvincible hull integrity =: 20\nBig Grey Death damage taken =: 120\nBig Grey Death hull integrity =: -20\nCarrier: Big Grey Death has been sunk\nError: Ship does not exist\nDestroyer Invincible: Attacks:0 - Hull:20\nCarrier Indomitable: Attacks:0 - Hull:100\nServicing: Indomitable\nServicing: Invincible\nDestroyer Invincible: Attacks:10 - Hull:200\nCarrier Indomitable: Attacks:20 - Hull:100\nGrey Death damage taken =: 60\nGrey Death hull integrity =: 140\nGrey Death damage taken =: 120\nGrey Death hull integrity =: 20\nGrey Death damage taken =: 60\nGrey Death hull integrity =: -40\nDestroyer: Grey Death has been sunk\n\n```"]