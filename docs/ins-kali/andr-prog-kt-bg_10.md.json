["```kt\nlocationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER)\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n// This code goes in a file named Soldier.kt\nclass Soldier\n\n// This code would go in a file called Message.kt\nclass Message\n\n// This code would go in a file called ParticleSystem.kt\nclass ParticleSystem\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n         // Instantiating one of each of our classes\n             val soldier = Soldier()\n val message = Message()\n val particleSystem = ParticleSystem()    \n\n   } // End of onCreate function\n\n}// End of MainActivity class\n```", "```kt\nval soldier = Soldier()\n```", "```kt\nval soldier = Soldier()\n```", "```kt\nval soldier1 = Soldier()\nval soldier2 = Soldier()\nval soldier3 = Soldier()\n```", "```kt\nclass Soldier{\n\n    // Variables\n    val name = \"Ryan\"\n    val rank = \"Private\"\n    val missing = true\n}\n```", "```kt\n// First declare an instance of Soldier called soldier1\nval soldier1 = Soldier()\n\n// Now access and print each of the variables  \nLog.i(\"Name =\",\"${soldier1.name}\")\nLog.i(\"Rank =\",\"${soldier1.rank}\")\nLog.i(\"Missing =\",\"${soldier1.missing}\")\n```", "```kt\nName =: Ryan\nRank =: Private\nMissing =: true\n\n```", "```kt\ninstanceName.variableName\n```", "```kt\nsoldier1.name\nsoldier1.rank\n// Etc..\n```", "```kt\nSoldier.name // ERROR!\n```", "```kt\nclass Soldier{\n\n    // Member variables\n    var name = \"Ryan\"\n    var rank = \"Private\"\n    var missing = true\n}\n```", "```kt\n// First declare an instance of Soldier called soldier1\nval soldier1 = Soldier()\n\n// Now access and print each of the variables  \nLog.i(\"Name =\",\"${soldier1.name}\")\nLog.i(\"Rank =\",\"${soldier1.rank}\")\nLog.i(\"Missing =\",\"${soldier1.missing}\")\n\n// Mission to rescue Private Ryan succeeds\nsoldier1.missing = false;\n\n// Ryan behaved impeccably\nsoldier1.rank = \"Private First Class\"\n\n// Now access and print each of the variables  \nLog.i(\"Name =\",\"${soldier1.name}\")\nLog.i(\"Rank =\",\"${soldier1.rank}\")\nLog.i(\"Missing =\",\"${soldier1.missing}\")\n```", "```kt\nName =: Ryan\nRank =: Private\nMissing =: true\nName =: Ryan\nRank =: Private First Class\nMissing =: false\n\n```", "```kt\nclass Soldier{\n\n    // members\n    val name = \"Ryan\"\n    val rank = \"Private\"\n    val missing = true\n\n    // Class function\n fun getStatus() {\n var status = \"$rank $name\"\n if(missing){\n status = \"$status is missing!\"\n }else{\n status = \"$status ready for duty.\"\n }\n\n // Print out the status\n Log.i(\"Status\",status)\n }\n}\n```", "```kt\nval soldier1 = Soldier()\nsoldier1.getStatus()\n```", "```kt\nStatus: Private Ryan is missing!\n\n```", "```kt\nStatus: Private Ryan ready for duty.\n\n```", "```kt\nvar bullets = 100\nget() {\n   Log.i(\"Getter being used\",\"Value = $field\")\n   return field\n}\nset(value) {\n   field = if (value < 0) 0 else value\n   Log.i(\"Setter being used\",\"New value = $field\")\n}\n```", "```kt\nget() {\n   //.. Executes when we try to retrieve the value\n}\nset(value) {\n   //.. Executes when we try to set the value \n}\n```", "```kt\n// In onCreate or some other function/class from our app\n// Create a new instance of the Soldier class\nval soldier = Soldier()\n// Access the value of bullets\nLog.i(\"bullets = \",\"${soldier.bullets}\")// Getter will execute\n// Reduce the number of bullets by one\nsoldier.bullets --\nLog.i(\"bullets =\",\"${soldier.bullets}\")// Setter will execute\n```", "```kt\nGetter being used: Value = 100\nbullets =: 100\nGetter being used: Value = 100\nSetter being used: New value = 99\nGetter being used: Value = 99\nbullets =: 99\n\n```", "```kt\nGetter being used: Value = 100\n\n```", "```kt\nbullets =: 100\n\n```", "```kt\nsoldier.bullets --\n```", "```kt\nGetter being used: Value = 100\nSetter being used: New value = 99\n\n```", "```kt\nGetter being used: Value = 99\nbullets =: 99\n\n```", "```kt\nvar packWeight = 150\nval gunWeight = 30\nvar totalWeight = packWeight + gunWeight\n   get() = packWeight + gunWeight\n```", "```kt\n// Create a soldier\nval strongSoldier = Soldier()\n\n// Print out the totalWeight value\nLog.i(\"totalWeight =\",\"${strongSoldier.totalWeight}\")\n\n// Change the value of packWeight\nstrongSoldier.packWeight = 300\n\n// Print out the totalWeight value again\nLog.i(\"totalWeight =\",\"${strongSoldier.totalWeight}\")\n```", "```kt\ntotalWeight =: 180\ntotalWeight =: 330\n\n```", "```kt\nprivate class SatelliteController {\n   private var gpsCoordinates = \"51.331958,0.029057\"\n\n   private fun dropOutOfTheSky() {\n   }\n}\n```", "```kt\nclass SatelliteController {\n    var gpsCoordinates = \"51.331958,0.029057\"\n    private set\n\n    private fun dropOutOfTheSky() {\n    }\n}\n```", "```kt\n// This still doesn't work which is what we want\n// satelliteController.gpsCoordinates = \"1.2345, 5.6789\"\n\n// But this will print the gpsCoordinates\nLog.i(\"Coords=\",\"$satelliteController.gpsCoordinates\")\n```", "```kt\nclass SatelliteController {\n    var gpsCoordinates = \"51.331958,0.029057\"\n    private set\n\n    private fun dropOutOfTheSky() {\n    }\n\n    fun updateCoordinates(){\n        // Recalculate coordinates and update\n        // the gpsCoordinates property\n        gpsCoordinates = \"21.123456, 2.654321\"\n\n        // user can now access the new coordinates\n        // but still can't change them\n    }\n}\n```", "```kt\nsatelliteController.updateCoordinates()\n```", "```kt\nclass SatelliteController {\n    var gpsCoordinates = \"51.331958,0.029057\"\n    private set\n\n    private var bigProblem = false\n\n    private fun dropOutOfTheSky() {\n    }\n\n    private fun doDiagnostics() {\n      // Maybe set bigProblem to true\n      // etc\n    }\n\n    private fun recalibrateSensors(){\n      // Maybe set bigProblem to true\n      // etc\n    }\n\n    fun updateCoordinates(){\n        // Recalculate coordinates and update\n        // the gpsCoordinates property\n        gpsCoordinates = \"21.123456, 2.654321\"\n\n        // user can now access the new coordinates\n        // but still can't change them\n    }\n\n    fun runMaintenance(){\n        doDiagnostics()\n        recalibrateSensors()\n\n        if(bigProblem){\n            dropOutOfTheSky()\n        }\n\n    }\n}\n```", "```kt\nval soldier = Soldier()\n\n```", "```kt\nclass Book(val title: String, var copiesSold: Int) {\n   // Here we put our code as normal\n   // But title and copiesSold are properties that\n   // are already declared and initialized\n}\n```", "```kt\n// Instantiate a Book using the primary constructor\nval book = Book(\"Animal Farm\", 20000000)\n```", "```kt\n// Perhaps the user of the class \n// doesn't know the time as it\n// is yet to be confirmed\nclass Meeting(val day: String, val person: String) {\n    var time: String = \"To be decided\"\n    // The user of the class can\n    // supply the day, time and person \n    // of a meeting\n    constructor(day: String, person: String, time: String)\n            :this(day, person ){\n\n        // \"this\" refers to the current instance\n        this.time = time\n        // time (the property) now equals time\n        // that was passed in as a parameter\n    }\n}\n```", "```kt\n// Book two meetings\n// First when we don't yet know the time\nval meeting = Meeting(\"Thursday\", \"Bob\")\n\n// And secondly when we do know the time\nval anotherMeeting = Meeting(\"Wednesday\",\"Dave\",\"3 PM\")\n```", "```kt\ninit{\n  // This code runs when the class is instantiated\n  // and can be used to initialize properties\n}\n```", "```kt\npackage com.gamecodeschool.basicclasses\n\nclass Destroyer {\n}\n```", "```kt\npackage com.gamecodeschool.basicclasses\n\nclass Carrier {\n}\n```", "```kt\npackage com.gamecodeschool.basicclasses\n\nclass ShipYard {\n}\n```", "```kt\nclass Destroyer(name: String) {\n    // What is the name of this ship\n    var name: String = \"\"\n        private set\n\n    // What type of ship is it\n    // Always a destroyer\n    val type = \"Destroyer\"\n\n    // How much the ship can take before sinking\n    private var hullIntegrity = 200\n\n    // How many shots left in the arsenal\n    var ammo = 1\n    // Cannot be directly set externally\n        private set\n\n    // No external access whatsoever\n    private var shotPower = 60\n\n    // Has the ship been sunk\n    private var sunk = false\n\n    // This code runs as the instance is being initialized\n    init {\n        // So we can use the name parameter\n        this.name = \"$type $name\"\n    }\n```", "```kt\nfun takeDamage(damageTaken: Int) {\n   if (!sunk) {\n        hullIntegrity -= damageTaken\n        Log.i(\"$name damage taken =\",\"$damageTaken\")\n        Log.i(\"$name hull integrity =\",\"$hullIntegrity\")\n\n        if (hullIntegrity <= 0) {\n               Log.d(\"Destroyer\", \"$name has been sunk\")\n               sunk = true\n        }\n  } else {\n         // Already sunk\n         Log.d(\"Error\", \"Ship does not exist\")\n  }\n}\n```", "```kt\nfun shootShell():Int {\n  // Let the calling code no how much damage to do\n  return if (ammo > 0) {\n         ammo--\n         shotPower\n  }else{\n        0\n  }\n}\n```", "```kt\nfun serviceShip() {\n    ammo = 10\n    hullIntegrity = 100\n}\n```", "```kt\nclass Carrier (name: String){\n    // What is the name of this ship\n    var name: String = \"\"\n        private set\n\n    // What type of ship is it\n    // Always a destroyer\n    val type = \"Carrier\"\n\n    // How much the ship can take before sinking\n    private var hullIntegrity = 100\n\n    // How many shots left in the arsenal\n    var attacksRemaining = 1\n    // Cannot be directly set externally\n        private set\n\n    private var attackPower = 120\n\n    // Has the ship been sunk\n    private var sunk = false\n\n    // This code runs as the instance is being initialized\n    init {\n        // So we can use the name parameter\n        this.name = \"$type $name\"\n    }\n\n    fun takeDamage(damageTaken: Int) {\n        if (!sunk) {\n            hullIntegrity -= damageTaken\n            Log.d(\"$name damage taken =\",\"$damageTaken\")\n            Log.d(\"$name hull integrity =\",\"$hullIntegrity\")\n\n            if (hullIntegrity <= 0) {\n                Log.d(\"Carrier\", \"$name has been sunk\")\n                sunk = true\n            }\n        } else {\n            // Already sunk\n            Log.d(\"Error\", \"Ship does not exist\")\n        }\n    }\n\n    fun launchAerialAttack() :Int {\n        // Let the calling code no how much damage to do\n        return if (attacksRemaining > 0) {\n            attacksRemaining--\n            attackPower\n        }else{\n            0\n        }\n    }\n\n    fun serviceShip() {\n        attacksRemaining = 20\n        hullIntegrity = 200\n    }\n}\n```", "```kt\nclass ShipYard {\n\n    fun serviceDestroyer(destroyer: Destroyer){\n        destroyer.serviceShip()\n    }\n\n    fun serviceCarrier(carrier: Carrier){\n        carrier.serviceShip()\n    }\n}\n```", "```kt\nval friendlyDestroyer = Destroyer(\"Invincible\")\nval friendlyCarrier = Carrier(\"Indomitable\")\n\nval enemyDestroyer = Destroyer(\"Grey Death\")\nval enemyCarrier = Carrier(\"Big Grey Death\")\n\nval friendlyShipyard = ShipYard()\n\n// Uh oh!\nfriendlyDestroyer.takeDamage(enemyDestroyer.shootShell())\nfriendlyDestroyer.takeDamage(enemyCarrier.launchAerialAttack())\n\n// Fight back\nenemyCarrier.takeDamage(friendlyCarrier.launchAerialAttack())\nenemyCarrier.takeDamage(friendlyDestroyer.shootShell())\n\n// Take stock of the supplies situation\nLog.d(\"${friendlyDestroyer.name} ammo = \",\n         \"${friendlyDestroyer.ammo}\")\n\nLog.d(\"${friendlyCarrier.name} attacks = \",\n         \"${friendlyCarrier.attacksRemaining}\")\n\n// Dock at the shipyard\nfriendlyShipyard.serviceCarrier(friendlyCarrier)\nfriendlyShipyard.serviceDestroyer(friendlyDestroyer)\n\n// Take stock of the supplies situation again\nLog.d(\"${friendlyDestroyer.name} ammo = \",\n         \"${friendlyDestroyer.ammo}\")\n\nLog.d(\"${friendlyCarrier.name} attacks = \",\n         \"${friendlyCarrier.attacksRemaining}\")\n\n// Finish off the enemy\nenemyDestroyer.takeDamage(friendlyDestroyer.shootShell())\nenemyDestroyer.takeDamage(friendlyCarrier.launchAerialAttack())\nenemyDestroyer.takeDamage(friendlyDestroyer.shootShell())\n```", "```kt\nval friendlyDestroyer = Destroyer(\"Invincible\")\nval friendlyCarrier = Carrier(\"Indomitable\")\n\nval enemyDestroyer = Destroyer(\"Grey Death\")\nval enemyCarrier = Carrier(\"Big Grey Death\")\n\nval friendlyShipyard = ShipYard()\n```", "```kt\n// Uh oh!\nfriendlyDestroyer.takeDamage(enemyDestroyer.shootShell())\nfriendlyDestroyer.takeDamage(enemyCarrier.launchAerialAttack())\n```", "```kt\n// Fight back\nenemyCarrier.takeDamage(friendlyCarrier.launchAerialAttack())\nenemyCarrier.takeDamage(friendlyDestroyer.shootShell())\n```", "```kt\n// Take stock of the supplies situation\nLog.d(\"${friendlyDestroyer.name} ammo = \",\n         \"${friendlyDestroyer.ammo}\")\n\nLog.d(\"${friendlyCarrier.name} attacks = \",\n         \"${friendlyCarrier.attacksRemaining}\")\n```", "```kt\n// Dock at the shipyard\nfriendlyShipyard.serviceCarrier(friendlyCarrier)\nfriendlyShipyard.serviceDestroyer(friendlyDestroyer)\n```", "```kt\n// Take stock of the supplies situation again\nLog.d(\"${friendlyDestroyer.name} ammo = \",\n         \"${friendlyDestroyer.ammo}\")\n\nLog.d(\"${friendlyCarrier.name} attacks = \",\n         \"${friendlyCarrier.attacksRemaining}\")\n```", "```kt\n// Finish off the enemy\nenemyDestroyer.takeDamage(friendlyDestroyer.shootShell())\nenemyDestroyer.takeDamage(friendlyCarrier.launchAerialAttack())\nenemyDestroyer.takeDamage(friendlyDestroyer.shootShell())\n```", "```kt\nDestroyer Invincible damage taken =: 60\nDestroyer Invincible hull integrity =: 140\nDestroyer Invincible damage taken =: 120\nDestroyer Invincible hull integrity =: 20\nCarrier Big Grey Death damage taken =: 120\nCarrier Big Grey Death hull integrity =: -20\nCarrier: Carrier Big Grey Death has been sunk\nError: Ship does not exist\nDestroyer Invincible ammo =: 0\nCarrier Indomitable attacks =: 0\nDestroyer Invincible ammo =: 10\nCarrier Indomitable attacks =: 20\nDestroyer Grey Death damage taken =: 60\nDestroyer Grey Death hull integrity =: 140\nDestroyer Grey Death damage taken =: 120\nDestroyer Grey Death hull integrity =: 20\nDestroyer Grey Death damage taken =: 60\nDestroyer Grey Death hull integrity =: -40\nDestroyer: Destroyer Grey Death has been sunk\n```", "```kt\nDestroyer Invincible damage taken =: 60\nDestroyer Invincible hull integrity =: 140\nDestroyer Invincible damage taken =: 120\nDestroyer Invincible hull integrity =: 20\n```", "```kt\nCarrier Big Grey Death damage taken =: 120\nCarrier Big Grey Death hull integrity =: -20\nCarrier: Carrier Big Grey Death has been sunk\n```", "```kt\nError: Ship does not exist\n```", "```kt\nDestroyer Invincible ammo =: 0\nCarrier Indomitable attacks =: 0\n```", "```kt\nDestroyer Invincible ammo =: 10\nCarrier Indomitable attacks =: 20\n```", "```kt\nDestroyer Grey Death damage taken =: 60\nDestroyer Grey Death hull integrity =: 140\nDestroyer Grey Death damage taken =: 120\nDestroyer Grey Death hull integrity =: 20\nDestroyer Grey Death damage taken =: 60\nDestroyer Grey Death hull integrity =: -40\nDestroyer: Destroyer Grey Death has been sunk\n```", "```kt\nfun serviceDestroyer(destroyer: Destroyer){\n        destroyer.serviceShip()\n}\n\nfun serviceCarrier(carrier: Carrier){\n        carrier.serviceShip()\n}\n```"]