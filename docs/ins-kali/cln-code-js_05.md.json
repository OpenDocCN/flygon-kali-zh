["```js\nclass Customer {}\nclass Shopkeeper {}\n```", "```js\nclass Customer {\n  constructor() {\n    this.wallet = new CustomerWallet();\n  }\n}\n\nclass CustomerWallet {\n  constructor() {\n    this.amount = 0;\n  }\n  addMoney(deposit) {\n    this.amount += deposit;\n  }\n  takeMoney(debit) {\n    this.amount -= debit;\n  }\n}\n```", "```js\nclass Shopkeeper {\n  processPurchase(product, customer) {\n    const price = product.price();\n    customer.wallet.takeMoney(price);\n    // ...\n  }\n}\n```", "```js\nclass Shopkeeper {\n  processPurchase(product, customer) {\n    const price = product.price();\n    customer.requestPayment(price);\n    // ...\n  }\n}\n```", "```js\nfunction displayHappyBirthday(name) {\n const container = document.createElement('div');\n container.className = 'message birthday-message';\n container.appendChild(\n   document.createTextNode(`Happy Birthday ${name}!`)\n );\n document.body.appendChild(container);\n}\n```", "```js\nfunction displayMessage(message, className) {\n  const container = document.createElement('div');\n  container.className = `message ${className}`;\n  container.appendChild(\n    document.createTextNode(message)\n  );\n  document.body.appendChild(container);\n}\n```", "```js\nfunction displayHappyBirthday(name) {\n  return displayMessage(\n    `Happy Birthday ${name}!`,\n    'birthday-message'\n  );\n}\n```", "```js\nfunction displayHappyNewYear(name) {\n  return displayMessage(\n    `Happy New Year! ${name}`,\n    'happy-new-year-message'\n  );\n}\n```", "```js\nclass Calendar {}\nclass Event {}\n```", "```js\nclass Calendar {\n  addEvent(event) {...}\n  removeEvent(event) {...}\n}\n```", "```js\nclass Calendar {\n\n  addEvent(event) {...}\n  removeEvent(event) {...}\n  getEventsBetween(stateDate, endDate) {...}\n\n  setTimeOfEvent(event, startTime, endTime) {...}\n  setTitleOfEvent(event, title) {...}\n\n  exportFilteredEventsToXML(filter) {...}\n  exportFilteredEventsToJSON(filter) {...}\n\n}\n```", "```js\nclass Event {\n  setTime(startTime, endTime) {...}\n  setTitle(title) {...}\n}\n\nclass Calendar {\n  addEvent(event) {...}\n  removeEvent(event) {...}\n  getEventsBetween(stateDate, endDate) {...}\n}\n\nclass CalendarExporter {\n  exportFilteredEventsToXML(filter) {...}\n  exportFilteredEventsToJSON(filter) {...}\n}\n```", "```js\nclass Event {\n\n  renderNotification() {\n    return `\n      You have an event occurring in\n      ${this.calcMinutesUntil()} minutes!\n    `;\n  }\n\n  // ...\n\n}\n```", "```js\nclass ImportantEvent extends Event {\n  renderNotification() {\n    return `Urgent! ${super.renderNotification()}`;\n  }\n}\n```", "```js\nclass Event {\n\n  renderNotification() {\n    const defaultNotification = `\n      You have an event occurring in\n      ${this.calcMinutesUntil()} minutes!\n    `;\n    return (\n      this.config.renderCustomNotification\n        ? this.config.renderCustomNotification(defaultNotification)\n        : defaultNotification\n    );\n  }\n\n  // ...\n\n}\n```", "```js\nnew Event({\n  title: 'Doctor Appointment',\n  config: {\n    renderCustomNotification: defaultNotification => {\n      return `Urgent! ${defaultNotifcation}`;\n    }\n  }\n});\n```", "```js\nclass ImportantEvent extends Event {\n  renderNotification() {\n    return `Urgent! ${super.renderNotification()}`;\n  }\n}\n```", "```js\nclass Calendar {\n\n  getEventsWithinMinutes(minutes) {\n    return this.events.filter(event => {\n      return event.startsWithinMinutes(minutes);\n    });\n  }\n\n  notifiyUpcomingEvents() {\n    this.getEventsWithinMinutes(10).forEach(event => {\n      this.sendNotification(\n        event.renderNotification()\n      );\n    });\n  }\n\n  // ...\n}\n```", "```js\nclass Calendar {\n\n  getEventsAtLocation(targetLocation, kilometerRadius) {\n\n    const geocoder = new GeoCoder();\n    const distanceCalc = new DistanceCalculator();\n\n    return this.events.filter(event => {\n\n      const eventLocation = event.location.address\n        ? geocoder.geocode(event.location.address)\n        : event.location.coords;\n\n      return distanceCalc.haversineFormulaDistance(\n        eventLocation,\n        targetLocation\n      ) <= kilometerRadius / 1000;\n\n    });\n\n  }\n\n  // ... \n\n}\n```", "```js\nconst distanceCalculator = new DistanceCalculator();\nconst geocoder = new GeoCoder();\nconst METRES_IN_KM = 1000;\n\nclass EventLocationCalculator {\n  constructor(event) {\n    this.event = event;\n  }\n\n  getCoords() {\n    return this.event.location.address\n      ? geocoder.geocode(this.event.location.address)\n      : this.event.location.coords\n  }\n\n  calculateDistanceInKilometers(targetLocation) {\n    return distanceCalculator.haversineFormulaDistance(\n      this.getCoords(),\n      targetLocation\n    ) / METRES_IN_KM;\n  }\n}\n```", "```js\nclass Event {\n\n  constructor() {\n    // ...\n    this.locationCalculator = new EventLocationCalculator();\n  }\n\n  isEventWithinRadiusOf(targetLocation, kilometerRadius) {\n    return locationCalculator.calculateDistanceInKilometers(\n      targetLocation\n    ) <= kilometerRadius;\n  }\n\n  // ...\n\n}\n```", "```js\nclass Calendar {\n\n  getEventsAtLocation(targetLocation, kilometerRadius) {\n    return this.events.filter(event => {\n      return event.isEventWithinRadiusOf(\n        targetLocation,\n        kilometerRadius\n      );\n    });\n  }\n\n  // ...\n\n}\n```", "```js\nconst gallery = new GalleryComponent(\n  [\n    new GalleryComponentImage(\n      new GalleryComponentImage.PathOfImage('JPEG', '/foo/images/Picture1.jpg'),\n      new GalleryComponentImage.Options({\n        imageDimensionWidth: { unit: 'px', amount: 200 },\n        imageDimensionHeight: { unit: 'px', amount: 150 },\n        customStyleStrings: ['border::yellow::1px']\n      }),\n      [\n        new GalleryComponentImage.SubBorderCaptionElementWithText({\n          content: { e: 'paragraph', t: 'The caption for this employee' }\n        })\n      ]\n    }),\n    new GalleryComponentImage(\n      new GalleryComponentImage.PathOfImage('JPEG', '/foo/images/Picture2.jpg'),\n      new GalleryComponentImage.Options({\n        imageDimensionWidth: { unit: 'px', amount: 200 },\n        imageDimensionHeight: { unit: 'px', amount: 150 },\n        customStyleStrings: ['border::yellow::1px']\n      }),\n      [\n        new GalleryComponentImage.SubBorderCaptionElementWithText({\n          content: { e: 'paragraph', t: 'The caption for this employee' }\n        })\n      ]\n    })\n  ]\n);\n```", "```js\nconst gallery = new GalleryComponent(\n  '/foo/images/PictureOne.jpg',\n  '/foo/images/PictureTwo.jpg'\n);\n```", "```js\nconst gallery = new GalleryComponent({\n  web: [\n    () => {\n      const el = document.createElement('div');\n      el.className = 'gallery-container';\n      return el;\n    },\n    {\n      data: [\n        `<img src=\"/foo/images/PictureOne.jpg\" width=200 height=150 />\n         <span>The caption</span>`,\n        `<img src=\"/foo/images/PictureTwo.jpg\" width=200 height=150 />\n         <span>The caption</span>`\n       ]\n    }\n  ],\n  android: [\n    (view, galleryPrepData) => {\n      view.setHasFixedSize(true);\n      view.setLayoutManager(new GridLayoutManager(getApplicationContext(),2));\n      return new MyAdapter(getApplicationContext(), galleryPrepData());\n    },\n    {\n      data: [\n        ['/foo/images/PictureOne.jpg', 200, 150, 'The Caption']\n        ['/foo/images/PictureTwo.jpg', 200, 150, 'The Caption']\n      ]\n    }\n  ]\n});\n```", "```js\nconst gallery = new GalleryComponent([\n  {\n    src: '/foo/images/PictureOne.jpg',\n    caption: 'The Caption',\n    width: 200,\n    height: 150\n  },\n  {\n    src: '/foo/images/PictureTwo.jpg',\n    caption: 'The Caption',\n    width: 200,\n    height: 150\n  },\n]);\n```", "```js\n// An OOP approach\n\nclass PaginatedDataFetcher {\n\n  constructor(endpoint, startingPage) {\n    this.endpoint = endpoint;\n    this.nextPage = startingPage || 1;\n  }\n\n  getNextPage() {\n    const response = fetch(\n      `/api/${this.endpoint}/${this.nextPage}`\n    );\n    this.nextPage++;\n    return fetched;\n  }\n\n}\n```", "```js\nconst pageFetcher = new PaginatedDataFetcher('account_data', 30);\n\nawait pageFetcher.getNextPage(); // => Fetches /api/account_data/30\nawait pageFetcher.getNextPage(); // => Fetches /api/account_data/31\nawait pageFetcher.getNextPage(); // => Fetches /api/account_data/32\n```", "```js\n// A more functional approach\n\nconst getPage = async (endpoint, pageNumber = 1) => ({\n endpoint,\n pageNumber,\n response: await fetch(`/api/${endpoint}/${pageNumber}`)\n next: () => getPage(endpoint, pageNumber + 1)\n});\n```", "```js\nconst page1 = await getPage('account_data');\nconst page2 = await page1.next();\nconst page3 = await page2.next();\nconst page4 = await page3.next();\n\n// Etc.\n```", "```js\nclass Adder {\n  constructor() {\n    this.total = 0;\n  }\n  add(n) {\n    return this.total += n;\n  }\n}\n\nconst adder = new Adder();\nadder.add(10); // => 10\nadder.add(10); // => 20\nadder.add(5);  // => 25\n```", "```js\nconst add = (a, b) => a + b;\n\nadd(10, 10); // => 20\nadd(10, 20); // => 30\n```", "```js\nconst name = 'James';\nname = 'Samuel L. Jackson';\n// => Uncaught TypeError: Assignment to constant variable.\n```"]