["```\n> ssh -i ~/.ssh/admin.pem docker@54.145.175.148\nThe authenticity of host '54.145.175.148 (54.145.175.148)' can't be established.\nECDSA key fingerprint is SHA256:Br/8IMAuEzPOV29B8zdbT6H+DjK9sSEEPSbXdn+v0YM.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '54.145.175.148' (ECDSA) to the list of known hosts.\nWelcome to Docker!\n~ $ docker ps --format \"{{ .ID }}: {{ .Names }}\"\na5a2dfe609e4: l4controller-aws\n0d7f5d2ae4a0: meta-aws\nd54308064314: guide-aws\n58cb47dad3e1: shell-aws\n```", "```\n> docker node ls\nID                         HOSTNAME                      STATUS   MANAGER STATUS   ENGINE VERSION\nqna4v46afttl007jq0ec712dk  ip-172-31-27-91.ec2.internal  Ready                     18.03.0-ce\nym3jdy1ol17pfw7emwfen0b4e* ip-172-31-40-246.ec2.internal Ready    Leader           18.03.0-ce\n> ssh docker@ip-172-31-27-91.ec2.internal Permission denied (publickey,keyboard-interactive).\n```", "```\n> ssh-add -K ~/.ssh/admin.pem\nIdentity added: /Users/jmenga/.ssh/admin.pem (/Users/jmenga/.ssh/admin.pem)\n> ssh-add -L\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkF7aAzIRayGHiiR81wcz/k9b+ZdmAEkdIBU0pOvAaFYjrDPf4JL4I0rJjdpFBjFZIqKXM9dLWg0skENYSUl9pfLT+CzValQat/XpBw/HfwzbzMy8wqcKehN0pB4V1bpzfOYe7lTLmTYIQ/21wW63QVlZnNyV1VZiVgN5DcLqgiG5CHHAooMIbiExAYvRrgo8XEXoqFRODLwIn4HZ7OAtojWzxElBx+EC4lmDekykgxnfGd30QgATIEF8/+UzM17j91JJohfxU7tA3GhXkScMBXnxBhdOftVvtB8/bGc+DHjJlkYSxL20792eBEv/ZsooMhNFxGLGhidrznmSeC8qL /Users/jmenga/.ssh/admin.pem\n```", "```\n> ssh -A docker@54.145.175.148\nWelcome to Docker!\n~ $ ssh docker@ip-172-31-27-91.ec2.internal\nWelcome to Docker!\n```", "```\n> ssh -i ~/.ssh/admin.pem -NL localhost:2374:/var/run/docker.sock docker@54.145.175.148 &\n[1] 7482\n> docker -H localhost:2374 ps --format \"{{ .ID }}: {{ .Names }}\"\na5a2dfe609e4: l4controller-aws\n0d7f5d2ae4a0: meta-aws\nd54308064314: guide-aws\n58cb47dad3e1: shell-aws\n> export DOCKER_HOST=localhost:2374\n> docker node ls --format \"{{ .ID }}: {{ .Hostname }}\" qna4v46afttl007jq0ec712dk: ip-172-31-27-91.ec2.internal\nym3jdy1ol17pfw7emwfen0b4e: ip-172-31-40-246.ec2.internal\n```", "```\n> docker service create --name nginx --publish published=80,target=80 --replicas 2 nginx ez24df69qb2yq1zhyxma38dzo\noverall progress: 2 out of 2 tasks\n1/2: running [==================================================>]\n2/2: running [==================================================>]\nverify: Service converged\n> docker service ps --format \"{{ .ID }} ({{ .Name }}): {{ .Node }} {{ .CurrentState }}\" nginx \n```", "```\nwcq6jfazrums (nginx.1): ip-172-31-27-91.ec2.internal  Running 2 minutes ago\ni0vj5jftf6cb (nginx.2): ip-172-31-40-246.ec2.internal Running 2 minutes ago\n```", "```\n> docker service rm nginx\nnginx\n```", "```\nversion: '3.6'\n\nservices:\n```", "```\n\n  app:\n    image: swarmpit/swarmpit:latest\n    environment:\n      - SWARMPIT_DB=http://db:5984\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    ports:\n - target: 8080\n published: 8888\n mode: ingress\n    networks:\n      - net\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 1024M\n        reservations:\n          cpus: '0.25'\n          memory: 512M\n      placement:\n        constraints:\n          - node.role == manager\n\n  db:\n    image: klaemo/couchdb:2.0.0\n    volumes:\n      - db-data:/opt/couchdb/data\n    networks:\n      - net\n    deploy:\n      resources:\n        limits:\n          cpus: '0.30'\n          memory: 512M\n        reservations:\n          cpus: '0.15'\n          memory: 256M\n placement:\n constraints:\n - node.role == manager\n\n  agent:\n    ...\n    ...\n\nnetworks:\n  net:\n    driver: overlay\n\nvolumes:\n  db-data:\n    driver: local\n```", "```\n> docker stack deploy -c docker-compose.yml swarmpit\nCreating network swarmpit_net\nCreating service swarmpit_agent\nCreating service swarmpit_app\nCreating service swarmpit_db\n> docker stack services swarmpit\nID            NAME            MODE        REPLICAS  IMAGE                     PORTS\n8g5smxmqfc6a  swarmpit_app    replicated  1/1       swarmpit/swarmpit:latest  *:8888->8080/tcp\nomc7ewvqjecj  swarmpit_db     replicated  1/1\n```", "```\nklaemo/couchdb:2.0.0\nu88gzgeg8rym  swarmpit_agent  global      2/2       swarmpit/agent:latest\n```", "```\n> docker service create \\\n    --name aws_ecr_auth \\\n    --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \\\n    --constraint 'node.role == manager' \\\n    --restart-condition 'none' \\\n    --detach=false \\\n    mroca/swarm-aws-ecr-auth\nlmf37a9pbzc3nzhe88s1nzqto\noverall progress: 1 out of 1 tasks\n1/1: running [==================================================>]\nverify: Service converged\n```", "```\n> export AWS_PROFILE=docker-in-aws\n> $(aws ecr get-login --no-include-email)\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nLogin Succeeded\n> docker service create --name todobackend --with-registry-auth \\\n --publish published=80,target=8000 --env DJANGO_SETTINGS_MODULE=todobackend.settings_release\\\n 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend \\\n uwsgi --http=0.0.0.0:8000 --module=todobackend.wsgi p71rje93a6pqvipqf2a14v6cc\noverall progress: 1 out of 1 tasks\n1/1: running [==================================================>]\nverify: Service converged\n```", "```\nversion: '3.6'\n\nnetworks:\n  net:\n    driver: overlay\n\nservices:\n  app:\n    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\n    ports:\n      - target: 8000\n        published: 80\n    networks:\n      - net\n    environment:\n      DJANGO_SETTINGS_MODULE: todobackend.settings_release\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n      - --die-on-term\n      - --processes=4\n      - --threads=2\n      - --check-static=/public\n```", "```\n\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 1\n        delay: 30s\n\n```", "```\n> $(aws ecr get-login --no-include-email)\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nLogin Succeeded\n> docker stack deploy --with-registry-auth -c stack.yml todobackend Creating network todobackend_net\nCreating service todobackend_app\n> docker service ps todobackend_app --format \"{{ .Name }} -> {{ .Node }} ({{ .CurrentState }})\"\ntodobackend_app.1 -> ip-172-31-27-91.ec2.internal (Running 6 seconds ago)\ntodobackend_app.2 -> ip-172-31-40-246.ec2.internal (Running 6 seconds ago)\n```", "```\n> docker stack deploy --with-registry-auth -c stack.yml todobackend image 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest could not be accessed on a registry to record\nits digest. Each node will access 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest independently,\npossibly leading to different nodes running different\nversions of the image.\n...\n...\n```", "```\nversion: '3.6'\n\nnetworks:\n  net:\n    driver: overlay\n\nvolumes:\n public:\n driver: cloudstor:aws\n driver_opts:\n backing: shared\n\nservices:\n  app:\n    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\n    ports:\n      - target: 8000\n        published: 80\n    networks:\n```", "```\n\n      - net\n volumes:\n - public:/public\n    ...\n    ...\n```", "```\n> docker stack deploy --with-registry-auth -c stack.yml todobackend\nUpdating service todobackend_app (id: 59gpr2x9n7buikeorpf0llfmc)\n> docker volume ls\nDRIVER          VOLUME NAME\nlocal           bd3d2804c796064d6e7c4040040fd474d9adbe7aaf68b6e30b1d195b50cdefde\nlocal           sshkey\ncloudstor:aws   todobackend_public\n>  docker service ps todobackend_app \\\n --format \"{{ .Name }} -> {{ .DesiredState }} ({{ .CurrentState }})\"\ntodobackend_app.1 -> Running (Running 44 seconds ago)\ntodobackend_app.1 -> Shutdown (Shutdown 45 seconds ago)\ntodobackend_app.2 -> Running (Running 9 seconds ago)\ntodobackend_app.2 -> Shutdown (Shutdown 9 seconds ago)\n```", "```\n> docker ps -f name=todobackend -q\n60b33d8b0bb1\n> docker exec -it 60b33d8b0bb1 touch /public/test\n> docker exec -it 60b33d8b0bb1 ls -l /public\ntotal 4\n-rw-r--r-- 1 app app 0 Jul 19 13:45 test\n```", "```\n> ssh -A docker@54.145.175.148\nWelcome to Docker!\n~ $ docker node ls\nID                          HOSTNAME                        STATUS  MANAGER  STATUS\nqna4v46afttl007jq0ec712dk   ip-172-31-27-91.ec2.internal    Ready   Active \nym3jdy1ol17pfw7emwfen0b4e * ip-172-31-40-246.ec2.internal   Ready   Active   Leader\n> ssh docker@ip-172-31-27-91.ec2.internal\nWelcome to Docker!\n> docker ps -f name=todobackend -q\n71df5495080f\n~ $ docker exec -it 71df5495080f ls -l /public\ntotal 4\n-rw-r--r-- 1 app app 0 Jul 19 13:58 test\n~ $ docker exec -it 71df5495080f rm /public/test\n```", "```\n> docker stack rm todobackend\nRemoving service todobackend_app\nRemoving network todobackend_net\n> docker volume ls\nDRIVER         VOLUME NAME\nlocal          sshkey\ncloudstor:aws  todobackend_public\n> docker volume rm todobackend_public\n```", "```\nversion: '3.6'\n\nnetworks:\n  net:\n    driver: overlay\n\nvolumes:\n  public:\n    driver: cloudstor:aws\n    driver_opts:\n      backing: shared\n\nservices:\n  app:\n    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\n    ports:\n      - target: 8000\n        published: 80\n    networks:\n      - net\n    volumes:\n      - public:/public\n    ...\n    ...\n  collectstatic:\n image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend volumes:\n - public:/public    networks:\n - net\n environment:\n DJANGO_SETTINGS_MODULE: todobackend.settings_release\n command:\n - python3\n - manage.py\n - collectstatic\n - --no-input\n deploy:\n replicas: 1\n restart_policy:\n condition: on-failure\n delay: 30s\n max_attempts: 6\n```", "```\n> docker stack deploy --with-registry-auth -c stack.yml todobackend\nCreating network todobackend_default\nCreating network todobackend_net\nCreating service todobackend_collectstatic\nCreating service todobackend_app\n> docker service ps todobackend_collectstatic NAME                        NODE                          DESIRED STATE CURRENT STATE\ntodobackend_collectstatic.1 ip-172-31-40-246.ec2.internal Running       Running 2 seconds ago\n\\_ todobackend_collectstatic.1 ip-172-31-40-246.ec2.internal Shutdown     Rejected 32 seconds ago\n```", "```\nversion: '3.6'\n\nnetworks:\n  net:\n    driver: overlay\n\nvolumes:\n  public:\n    driver: cloudstor:aws\n    driver_opts:\n      backing: shared\n data:\n driver: cloudstor:aws\n driver_opts: \n backing: relocatable\n size: 10\n ebstype: gp2\n\nservices:\n  app:\n    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\n    ports:\n      - target: 8000\n        published: 80\n    networks:\n      - net\n    volumes:\n      - public:/public\n    ...\n    ...\n  collectstatic:\n    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\n    volumes:\n      - public:/public\n    ...\n    ...\n  db:\n image: mysql:5.7\n environment:\n MYSQL_DATABASE: todobackend\n MYSQL_USER: todo\n MYSQL_PASSWORD: password\n MYSQL_ROOT_PASSWORD: password\n networks:\n - net\n volumes:\n - data:/var/lib/mysql\n command:\n - --ignore-db-dir=lost+found\n deploy:\n      replicas: 1\n placement:\n constraints:\n - node.role == manager\n```", "```\n> docker stack deploy --with-registry-auth -c stack.yml todobackend\ndocker stack deploy --with-registry-auth -c stack.yml todobackend\nUpdating service todobackend_app (id: 28vrdqcsekdvoqcmxtum1eaoj)\nUpdating service todobackend_collectstatic (id: sowciy4i0zuikf93lmhi624iw)\nCreating service todobackend_db\n> docker service ps todobackend_db --format \"{{ .Name }} ({{ .ID }}): {{ .CurrentState }}\" todobackend_db.1 (u4upsnirpucs): Preparing 35 seconds ago\n> docker service ps todobackend_db --format \"{{ .Name }} ({{ .ID }}): {{ .CurrentState }}\"\ntodobackend_db.1 (u4upsnirpucs): Running 2 seconds ago\n```", "```\n> aws ec2 describe-volumes --filters Name=tag:CloudstorVolumeName,Values=* \\\n    --query \"Volumes[*].{ID:VolumeId,Zone:AvailabilityZone,Attachment:Attachments,Tag:Tags}\"\n[\n    {\n        \"ID\": \"vol-0db01995ba87433b3\",\n        \"Zone\": \"us-east-1b\",\n        \"Attachment\": [\n            {\n                \"AttachTime\": \"2018-07-20T09:58:16.000Z\",\n                \"Device\": \"/dev/xvdf\",\n                \"InstanceId\": \"i-0dc762f73f8ce4abf\",\n                \"State\": \"attached\",\n                \"VolumeId\": \"vol-0db01995ba87433b3\",\n                \"DeleteOnTermination\": false\n            }\n        ],\n        \"Tag\": [\n            {\n                \"Key\": \"CloudstorVolumeName\",\n                \"Value\": \"todobackend_data\"\n            },\n            {\n                \"Key\": \"StackID\",\n                \"Value\": \"0825319e9d91a2fc0bf06d2139708b1a\"\n            }\n        ]\n    }\n]\n```", "```\nversion: '3.6'\n...\n...\nservices:\n  ...\n  ...\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_DATABASE: todobackend\n      MYSQL_USER: todo\n      MYSQL_PASSWORD: password\n      MYSQL_ROOT_PASSWORD: password\n    networks:\n      - net\n    volumes:\n      - data:/var/lib/mysql\n    command:\n      - --ignore-db-dir=lost+found\n    deploy:\n      replicas: 1\n      placement:\n        constraints:\n - node.role == worker\n```", "```\n> volumes='aws ec2 describe-volumes --filters Name=tag:CloudstorVolumeName,Values=*\n --query \"Volumes[*].{ID:VolumeId,State:Attachments[0].State,Zone:AvailabilityZone}\"\n --output text' > snapshots='aws ec2 describe-snapshots --filters Name=status,Values=pending\n    --query \"Snapshots[].{Id:VolumeId,Progress:Progress}\" --output text' > docker stack deploy --with-registry-auth -c stack.yml todobackend\nUpdating service todobackend_app (id: 28vrdqcsekdvoqcmxtum1eaoj)\nUpdating service todobackend_collectstatic (id: sowciy4i0zuikf93lmhi624iw)\nUpdating service todobackend_db (id: 4e3sc0dlot9lxlmt5kwfw3sis)\n> eval $volumes vol-0db01995ba87433b3 detaching us-east-1b\n> eval $volumes vol-0db01995ba87433b3 None us-east-1b\n> eval $snapshots vol-0db01995ba87433b3 76%\n> eval $snapshots\nvol-0db01995ba87433b3 99%\n> eval $volumes vol-0db01995ba87433b3 None us-east-1b\nvol-07e328572e6223396 None us-east-1a\n> eval $volume\nvol-07e328572e6223396 None us-east-1a\n> eval $volume\nvol-07e328572e6223396 attached us-east-1a\n> docker service ps todobackend_db --format \"{{ .Name }} ({{ .ID }}): {{ .CurrentState }}\"\ntodobackend_db.1 (a3i84kwz45w9): Running 1 minute ago\ntodobackend_db.1 (u4upsnirpucs): Shutdown 2 minutes ago\n```", "```\n> docker stack rm todobackend\nRemoving service todobackend_app\nRemoving service todobackend_collectstatic\nRemoving service todobackend_db\nRemoving network todobackend_net\n> docker volume ls\nDRIVER          VOLUME NAME\nlocal           sshkey\ncloudstor:aws   todobackend_data\ncloudstor:aws   todobackend_public\n> docker volume rm todobackend_public\ntodobackend_public\n> docker volume rm todobackend_data\ntodobackend_data\n```", "```\n> openssl rand -base64 32 | docker secret create todobackend_mysql_password -\nwk5fpokcz8wbwmuw587izl1in\n> openssl rand -base64 32 | docker secret create todobackend_mysql_root_password -\n584ojwg31c0oidjydxkglv4qz\n> openssl rand -base64 50 | docker secret create todobackend_secret_key -\nt5rb04xcqyrqiglmfwrfs122y\n> docker secret ls\nID                          NAME                              CREATED          UPDATED\nwk5fpokcz8wbwmuw587izl1in   todobackend_mysql_password        57 seconds ago   57 seconds ago\n584ojwg31c0oidjydxkglv4qz   todobackend_mysql_root_password   50 seconds ago   50 seconds ago\nt5rb04xcqyrqiglmfwrfs122y   todobackend_secret_key            33 seconds ago   33 seconds ago\n```", "```\nversion: '3.6'\n\nnetworks:\n  ...\n\nvolumes:\n  ...\n\nsecrets:\n todobackend_mysql_password:\n external: true\n todobackend_mysql_root_password:\n external: true\n todobackend_secret_key:\n external: true\n\nservices:\n  app:\n    ...\n    ...\n    environment:\n      DJANGO_SETTINGS_MODULE: todobackend.settings_release\n MYSQL_HOST: db\n MYSQL_USER: todo\n    secrets:\n - source: todobackend_mysql_password\n target: MYSQL_PASSWORD\n - source: todobackend_secret_key\n target: SECRET_KEY\n    command:\n    ...\n    ...\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_DATABASE: todobackend\n      MYSQL_USER: todo\n      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password\n      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password\n    secrets:\n - source: todobackend_mysql_password\n target: mysql_password\n - source: todobackend_mysql_root_password\n target: mysql_root_password\n  ...\n  ...\n```", "```\n> docker stack deploy --with-registry-auth -c stack.yml todobackend\nCreating network todobackend_net\nCreating service todobackend_db\nCreating service todobackend_app\nCreating service todobackend_collectstatic\n> docker ps -f name=todobackend -q\n7804a7496fa2\n> docker exec -it 7804a7496fa2 ls -l /run/secrets\ntotal 8\n-r--r--r-- 1 root root 45 Jul 20 23:49 MYSQL_PASSWORD\n-r--r--r-- 1 root root 70 Jul 20 23:49 SECRET_KEY\n> docker exec -it 7804a7496fa2 cat /run/secrets/MYSQL_PASSWORD\nqvImrAEBDz9OWJS779uvs/EWuf/YlepTlwPkx4cLSHE=\n```", "```\nfrom .settings import *\nimport os\n\n# Disable debug\nDEBUG = True\n\n# Looks up secret in following order:\n# 1\\. /run/secret/<key>\n# 2\\. Environment variable named <key>\n# 3\\. Value of default or None if no default supplied\ndef secret(key, default=None):\n root = os.environ.get('SECRETS_ROOT','/run/secrets')\n path = os.path.join(root,key)\n if os.path.isfile(path):\n with open(path) as f:\n return f.read().rstrip()\n else:\n return os.environ.get(key,default)\n\n# Set secret key\nSECRET_KEY = secret('SECRET_KEY', SECRET_KEY)\n\n# Must be explicitly specified when Debug is disabled\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')\n\n# Database settings\nDATABASES = {\n    'default': {\n        'ENGINE': 'mysql.connector.django',\n        'NAME': os.environ.get('MYSQL_DATABASE','todobackend'),\n        'USER': os.environ.get('MYSQL_USER','todo'),\n 'PASSWORD': secret('MYSQL_PASSWORD','password'),\n        'HOST': os.environ.get('MYSQL_HOST','localhost'),\n        'PORT': os.environ.get('MYSQL_PORT','3306'),\n    },\n    'OPTIONS': {\n      'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"\n    }\n}\n\nSTATIC_ROOT = os.environ.get('STATIC_ROOT', '/public/static')\nMEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/public/media')\n\nMIDDLEWARE.insert(0,'aws_xray_sdk.ext.django.middleware.XRayMiddleware')\n```", "```\n> git commit -a -m \"Add support for Docker secrets\"\n[master 3db46c4] Add support for Docker secrets\n> make login\n...\n...\n> make test\n...\n...\n> make release\n...\n...\n> make publish\n...\n...\n```", "```\n> docker stack deploy --with-registry-auth -c stack.yml todobackend\nUpdating service todobackend_app (id: xz0tl79iv75qvq3tw6yqzracm)\nUpdating service todobackend_collectstatic (id: tkal4xxuejmf1jipsg24eq1bm)\nUpdating service todobackend_db (id: 9vj845j54nsz360q70lk1nrkr)\n> docker service ps todobackend_app --format \"{{ .Name }}: {{ .CurrentState }}\"\ntodobackend_app.1: Running 20 minutes ago\ntodobackend_app.2: Running 20 minutes ago\n```", "```\nversion: '3.6'\n\nservices:\n  app:\n image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}\n    ...\n    ...\n  collectstatic:\n image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}\n    ...\n    ...\n```", "```\n.PHONY: test release clean version login logout publish deploy\n\nexport APP_VERSION ?= $(shell git rev-parse --short HEAD)\n\nversion:\n  @ echo '{\"Version\": \"$(APP_VERSION)\"}'\n\ndeploy: login\n  @ echo \"Deploying version ${APP_VERSION}...\"\n docker stack deploy --with-registry-auth -c stack.yml todobackend \nlogin:\n  $$(aws ecr get-login --no-include-email)\n...\n...\n```", "```\n> make deploy\nDeploying version 3db46c4,,,\ndocker stack deploy --with-registry-auth -c stack.yml todobackend\nUpdating service todobackend_app (id: xz0tl79iv75qvq3tw6yqzracm)\nUpdating service todobackend_collectstatic (id: tkal4xxuejmf1jipsg24eq1bm)\nUpdating service todobackend_db (id: 9vj845j54nsz360q70lk1nrkr)\n> docker service ps todobackend_app --format \"{{ .Name }}: {{ .CurrentState }}\"\ntodobackend_app.1: Running 5 seconds ago\ntodobackend_app.1: Shutdown 6 seconds ago\ntodobackend_app.2: Running 25 minutes ago\n> docker service ps todobackend_app --format \"{{ .Name }}: {{ .CurrentState }}\"\ntodobackend_app.1: Running 45 seconds ago\ntodobackend_app.1: Shutdown 46 seconds ago\ntodobackend_app.2: Running 14 seconds ago\ntodobackend_app.2: Shutdown 15 seconds ago\n```", "```\nversion: '3.6'\n\nnetworks:\n  ...\n\nvolumes:\n  ...\n\nsecrets:\n  ...\n\nservices:\n  app:\n    ...\n  migrate:\n image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}\n networks:\n - net\n environment:\n DJANGO_SETTINGS_MODULE: todobackend.settings_release\n MYSQL_HOST: db\n MYSQL_USER: todo\n secrets:\n - source: todobackend_mysql_password\n target: MYSQL_PASSWORD\n```", "```\ncommand:\n - python3\n - manage.py\n - migrate\n - --no-input\n deploy:\n replicas: 1\n restart_policy:\n condition: on-failure\n delay: 30s\n max_attempts: 6\n  collectstatic:\n    ...\n  db:\n    ...\n```", "```\n> make deploy\nDeploying version 3db46c4...\ndocker stack deploy --with-registry-auth -c stack.yml todobackend\nUpdating service todobackend_collectstatic (id: tkal4xxuejmf1jipsg24eq1bm)\nUpdating service todobackend_db (id: 9vj845j54nsz360q70lk1nrkr)\nUpdating service todobackend_app (id: xz0tl79iv75qvq3tw6yqzracm)\nCreating service todobackend_migrate\n> docker service ps todobackend_migrate --format \"{{ .Name }}: {{ .CurrentState }}\"\ntodobackend_migrate.1: Complete 18 seconds ago\n```", "```\n> docker run -it --rm \\ \n -e APP_URL=http://docker-sw-external-1a5qzeykya672-1599369435.us-east-1.elb.amazonaws.com \\ \n 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:3db46c4 \\\n bats /app/src/acceptance.bats\n```", "```\nProcessing secrets []...\n1..4\nok 1 todobackend root\n```", "```\nok 2 todo items returns empty list\nok 3 create todo item\nok 4 delete todo item\n```"]