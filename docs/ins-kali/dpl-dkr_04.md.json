["```\nInitial State: Service #1 (3 tasks), Service #2 (2 tasks)\nDesired State: Service #1 (1 task),  Service #2 (4 tasks)\n\nReconciliation:\n - Kill 2 random Service #1 tasks\n - Start 2 Service #2 tasks on available nodes\n\nNew Initial State: Service #1 (1 tasks), Service #2 (4 tasks)\n\nNew Desired State: Service #1 (2 tasks), Service #2 (0 tasks)\n\nReconciliation:\n - Start 1 tasks of Service #1 on available node\n - Kill all 4 running tasks of Service #2\n\nFinal State: Service #1 (2 tasks), Service #2 (0 tasks)\n```", "```\n$ docker swarm\n<snip>\nCommands:\n init        Initialize a swarm\n join        Join a swarm as a node and/or manager\n join-token  Manage join tokens\n leave       Leave the swarm\n unlock      Unlock swarm\n unlock-key  Manage the unlock key\n update      Update the swarm\n```", "```\n$ docker swarm init \nSwarm initialized: current node (osb7tritzhtlux1o9unlu2vd0) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n docker swarm join \\\n --token SWMTKN-1-4atg39hw64uagiqk3i6s3zlv5mforrzj0kk1aeae22tpsat2jj-2zn0ak0ldxo58d1q7347t4rd5 \\\n 192.168.4.128:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n\n$ # Make sure that our node is operational\n$ docker node ls\nID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\nosb7tritzhtlux1o9unlu2vd0 *  feather2  Ready   Active        Leader\n```", "```\n$ docker service\n<snip>\nCommands:\n create      Create a new service\n inspect     Display detailed information on one or more services\n logs        Fetch the logs of a service or task\n ls          List services\n ps          List the tasks of one or more services\n rm          Remove one or more services\n scale       Scale one or multiple replicated services\n update      Update a service\n```", "```\nFROM python:3\n\nENV SRV_PATH=/srv/www/html\n\nEXPOSE 8000\n\nRUN mkdir -p $SRV_PATH && \\\n groupadd -r -g 350 pythonsrv && \\\n useradd -r -m -u 350 -g 350 pythonsrv && \\\n echo \"Test file content\" > $SRV_PATH/test.txt && \\\n chown -R pythonsrv:pythonsrv $SRV_PATH\n\nWORKDIR $SRV_PATH\n\nCMD [ \"python3\", \"-m\", \"http.server\" ]\n```", "```\n$ docker build -t simple_server .\n```", "```\n$ docker service create --detach=true \\\n --name simple-server \\\n -p 8000:8000 \\\n simple_server \nimage simple_server could not be accessed on a registry to record\nits digest. Each node will access simple_server independently,\npossibly leading to different nodes running different\nversions of the image.\n\nz0z90wgylcpf11xxbm8knks9m\n\n$ docker service ls\nID           NAME          MODE       REPLICAS IMAGE         PORTS\nz0z90wgylcpf simple-server replicated 1/1      simple_server *:8000->8000/tcp\n```", "```\n$ docker service scale simple-server=3 \nimage simple_server could not be accessed on a registry to record\nits digest. Each node will access simple_server independently,\npossibly leading to different nodes running different\nversions of the image.\n\nsimple-server scaled to 3\n\n$ docker service ls\nID           NAME          MODE       REPLICAS IMAGE         PORTS\nz0z90wgylcpf simple-server replicated 2/3      simple_server *:8000->8000/tcp\n\n$ # After waiting a bit, let's see if we have 3 instances now\n$ docker service ls\nID           NAME          MODE       REPLICAS IMAGE         PORTS\nz0z90wgylcpf simple-server replicated 3/3      simple_server *:8000->8000/tcp\n\n$ # You can even use regular container commands to see it\n$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'\nCONTAINER ID  IMAGE  PORTS\n0c9fdf88634f  simple_server:latest  8000/tcp\n98d158f82132  simple_server:latest  8000/tcp\n9242a969632f  simple_server:latest  8000/tcp\n```", "```\n$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'\nCONTAINER ID  IMAGE  PORTS\n0c9fdf88634f  simple_server:latest  8000/tcp\n98d158f82132  simple_server:latest  8000/tcp\n9242a969632f  simple_server:latest  8000/tcp\n\n$ docker kill 0c9fdf88634f\n0c9fdf88634f\n\n$ # We should only now have 2 containers\n$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'\nCONTAINER ID  IMAGE  PORTS\n98d158f82132  simple_server:latest  8000/tcp\n9242a969632f  simple_server:latest  8000/tcp\n\n$ # Wait a few seconds and try again\n$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'\nCONTAINER ID  IMAGE  PORTS\nd98622eaabe5  simple_server:latest  8000/tcp\n98d158f82132  simple_server:latest  8000/tcp\n9242a969632f  simple_server:latest  8000/tcp\n\n$ docker service ls\nID           NAME          MODE       REPLICAS IMAGE         PORTS\nz0z90wgylcpf simple-server replicated 3/3      simple_server *:8000->8000/tcp\n```", "```\n$ docker service ls\nID           NAME          MODE       REPLICAS IMAGE         PORTS\nz0z90wgylcpf simple-server replicated 3/3      simple_server *:8000->8000/tcp\n\n$ docker service rm simple-server\nsimple-server\n\n$ docker service ls\nID           NAME          MODE       REPLICAS IMAGE         PORTS\n\n$ docker swarm leave --force\nNode left the swarm.\n```", "```\n'use strict'\n\nconst bodyParser = require('body-parser')\nconst express = require('express');\nconst mongo = require('mongodb')\n\nconst DB_NAME = 'word_database';\nconst DB_HOST = process.env.DB_HOST || 'localhost:27017';\nconst COLLECTION_NAME = 'words';\nconst SERVER_PORT = 8000;\n\nconst app = express();\nconst client = mongo.MongoClient();\nconst dbUri = `mongodb://${DB_HOST}/${DB_NAME}`;\n\napp.set('view engine', 'pug')\napp.use(bodyParser.urlencoded({ extended: false }))\n\nfunction loadWordsFromDatabase() {\n    return client.connect(dbUri).then((db) => {\n        return db.collection(COLLECTION_NAME).find({}).toArray();\n    })\n    .then((docs) => {\n        return docs.map(doc => doc.word);\n    });\n}\n\napp.get('/', (req, res) => {\n    console.info(\"Loading data from database...\");\n    loadWordsFromDatabase().then(words => {\n        console.info(\"Data loaded, showing the result...\");\n        res.render('index', { words: words });\n    });\n});\n\napp.post('/new', (req, res) => {\n    const word = req.body.word;\n\n    console.info(`Got word: ${word}`);\n    if (word) {\n        client.connect(dbUri).then((db) => {\n            db.collection(COLLECTION_NAME).insertOne({ word }, () => {\n                db.close();\n            });\n        });\n    }\n\n    res.redirect('/');\n});\n\napp.listen(SERVER_PORT, () => {\n    console.info(\"Server started on port %d...\", SERVER_PORT);\n});\n```", "```\nserver {\n  listen         8080;\n  server_name    _;  \n\n  resolver $DNS_RESOLVERS;\n\n  root /srv/www/html;\n\n  location ~/\\. {\n    deny all;\n  }\n\n  location / { \n    auth_basic           \"Authentication required\";\n    auth_basic_user_file /srv/www/html/.htpasswd;\n\n    proxy_pass           http://$APP_NAME:8000;\n  }\n}\n```", "```\n#!/bin/bash -e\n\nexport DNS_RESOLVERS=$(cat /etc/resolv.conf | grep 'nameserver' | awk '{ print $2 }' | xargs echo)\n\ncat /etc/nginx/conf.d/nginx_main_site.conf.template | envsubst '$DNS_RESOLVERS $APP_NAME' > /etc/nginx/conf.d/nginx_main_site.conf\n\nnginx -g 'daemon off;'\n```", "```\nFROM nginx:latest\n\nRUN apt-get update -q && \\\n    apt-get dist-upgrade -y && \\\n    apt-get install openssl && \\\n    apt-get clean && \\\n    apt-get autoclean\n\nEXPOSE 8080\n\nENV SRV_PATH /srv/www/html\n\nARG PASSWORD=test\n\nRUN rm /etc/nginx/conf.d/default.conf\n\nCOPY start_nginx.sh /usr/local/bin/\n\nRUN mkdir -p $SRV_PATH && \\\n    chown nginx:nginx $SRV_PATH && \\\n    printf \"user:$(openssl passwd -crypt $PASSWORD)\\n\" >> $SRV_PATH/.htpasswd && \\\n    chmod +x /usr/local/bin/start_nginx.sh\n\nCOPY nginx_main_site.conf.template /etc/nginx/conf.d/\n\nCMD [\"/usr/local/bin/start_nginx.sh\"]\n```", "```\n$ docker swarm init\nSwarm initialized: current node (1y1h7rgpxbsfqryvrxa04rvcp) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n docker swarm join \\\n --token SWMTKN-1-36flmf9vnika6x5mbxx7vf9kldqaw6bq8lxtkeyaj4r5s461ln-aiqlw49iufv3s6po4z2fytos1 \\\n 192.168.4.128:2377\n```", "```\n$ docker network create --driver overlay service_network\n44cyg4vsitbx81p208vslp0rx\n```", "```\n$ cd ../database\n$ docker build . -t local_database\n$ docker service create -d --replicas 1 \\\n --name local-database \\\n --network service_network \\\n --mount type=volume,source=database_volume,destination=/data/db \\\n                           local_database\n<snip>\npilssv8du68rg0oztm6gdsqse\n\n$ cd ../application_server\n$ docker build -t application_server .\n$ docker service create -d -e DB_HOST=local-database \\\n --replicas 3 \\\n --network service_network \\\n --name application-server \\\n application_server\n<snip>\npue2ant1lg2u8ejocbsovsxy3\n\n$ cd ../web_server\n$ docker build -t web_server .\n$ docker service create -d --name web-server \\\n --network service_network \\\n --replicas 3 \\\n -e APP_NAME=application-server \\\n -p 8080:8080 \\\n web_server\n<snip>\nswi95q7z38i2wepmdzoiuudv7\n\n$ # Sanity checks\n$ docker service ls\nID           NAME               MODE       REPLICAS IMAGE                PORTS\npilssv8du68r local-database     replicated 1/1      local_database \npue2ant1lg2u application-server replicated 3/3      application_server\nswi95q7z38i2 web-server         replicated 3/3      web_server            *:8080->8080/tcp\n\n$ docker ps --format 'table {{.ID}}  {{.Image}}\\t  {{.Ports}}'\nCONTAINER ID  IMAGE                         PORTS\n8cdbec233de7  application_server:latest     8000/tcp\n372c0b3195cd  application_server:latest     8000/tcp\n6be2d6e9ce77  web_server:latest             80/tcp, 8080/tcp\n7aca0c1564f0  web_server:latest             80/tcp, 8080/tcp\n3d621c697ed0  web_server:latest             80/tcp, 8080/tcp\nd3dad64c4837  application_server:latest     8000/tcp\naab4b2e62952  local_database:latest         27017/tcp \n```", "```\n$ docker service ls -q | xargs docker service rm\npilssv8du68r\npue2ant1lg2u\nswi95q7z38i2\n\n$ docker network rm service_network\nservice_network\n```", "```\nversion: \"3\"\nservices:\n local-database:\n image: local_database\n networks:\n - service_network\n deploy:\n replicas: 1\n restart_policy:\n condition: on-failure\n volumes:\n - database_volume:/data/db \n application-server:\n image: application_server\n networks:\n - service_network\n depends_on:\n - local-database\n environment:\n - DB_HOST=local-database\n deploy:\n replicas: 3\n restart_policy:\n condition: on-failure \n web-server:\n image: web_server\n networks:\n - service_network\n ports:\n - 8080:8080\n depends_on:\n - application-server\n environment:\n - APP_NAME=application-server\n deploy:\n replicas: 3\n restart_policy:\n condition: on-failure\n\nnetworks:\n service_network:\n\nvolumes:\n database_volume:\n```", "```\n$ docker stack deploy --compose-file swarm_application.yml swarm_test\nCreating network swarm_test_service_network\nCreating service swarm_test_local-database\nCreating service swarm_test_application-server\nCreating service swarm_test_web-server\n\n$ # Sanity checks\n$ docker stack ls\nNAME        SERVICES\nswarm_test  3\n\n$ docker stack services swarm_test\nID           NAME                          MODE       REPLICAS            IMAGE                PORTS\nn5qnthc6031k swarm_test_application-server replicated 3/3                 application_server \nv9ho17uniwc4 swarm_test_web-server         replicated 3/3                 web_server           *:8080->8080/tcp\nvu06jxakqn6o swarm_test_local-database     replicated 1/1                 local_database\n\n$ docker ps --format 'table {{.ID}}  {{.Image}}\\t  {{.Ports}}'\nCONTAINER ID  IMAGE                         PORTS\nafb936897b0d  application_server:latest     8000/tcp\nd9c6bab2453a  web_server:latest             80/tcp, 8080/tcp\n5e6591ee608b  web_server:latest             80/tcp, 8080/tcp\nc8a8dc620023  web_server:latest             80/tcp, 8080/tcp\n5db03c196fda  application_server:latest     8000/tcp\nd2bf613ecae0  application_server:latest     8000/tcp\n369c86b73ae1  local_database:latest         27017/tcp\n```", "```\n$ docker stack rm swarm_test\nRemoving service swarm_test_application-server\nRemoving service swarm_test_web-server\nRemoving service swarm_test_local-database\nRemoving network swarm_test_service_network\n\n$ docker swarm leave --force\nNode left the swarm.\n```"]