- en: '17: Enterprise-grade features'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17：企业级功能
- en: This chapter follows on from the previous chapter, and covers some of the enterprise-grade
    features provided by Docker Universal Control Plane (UCP) and Docker Trusted Registry
    (DTR).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是上一章的延续，涵盖了Docker Universal Control Plane（UCP）和Docker Trusted Registry（DTR）提供的一些企业级功能。
- en: We’ll be assuming you’ve read the previous chapter, so know how to install and
    configure them, as well as perform backup and recovery operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设您已经阅读了上一章，因此知道如何安装和配置它们，以及执行备份和恢复操作。
- en: 'We’ll split this chapter into two parts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把本章分为两部分：
- en: The TLDR
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简而言之
- en: The deep dive
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入挖掘
- en: Enterprise-grade features - The TLDR
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 企业级功能-简而言之
- en: Enterprises want to use Docker and containers, but they need things packaged
    and supported like a real enterprise app. They also need things like role-based
    access control and integration with enterprise directory services like Active
    Directory. This is where *Docker Enterprise Edition* comes into play.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 企业希望使用Docker和容器，但他们需要像真正的企业应用程序一样打包和支持。他们还需要像基于角色的访问控制和与Active Directory等企业目录服务的集成。这就是*Docker企业版*发挥作用的地方。
- en: Docker Enterprise Edition is a hardened version of the Docker engine, an Ops
    UI, a secure registry, and a bunch of enterprise-focussed features. You can deploy
    it on-premises or in the cloud, you manage it yourself, and you can get it with
    a support contract.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Docker企业版是Docker引擎的强化版本，具有运维UI，安全注册表和一堆企业专注的功能。您可以在本地或云端部署它，自己管理它，并且可以获得支持合同。
- en: In summary, it’s a container-as-a-service platform that you can run in the safety
    of your own corporate data center.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，它是一个容器即服务平台，您可以在自己公司的数据中心安全运行。
- en: Enterprise-grade features - The Deep Dive
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 企业级功能-深入挖掘
- en: 'We’ll divide this main section of the chapter as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把本章的主要部分分为以下几个部分：
- en: Role-based access control (RBAC)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC）
- en: Active Directory integration
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Directory集成
- en: Docker Content Trust (DCT)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker内容信任（DCT）
- en: Configuring Docker Trusted Registry (DTR)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Docker Trusted Registry（DTR）
- en: Using Docker Trusted Registry
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Trusted Registry
- en: Image promotions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像推广
- en: HTTP Routing Mesh (HRM)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP路由网格（HRM）
- en: Role-based access control (RBAC)
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC）
- en: I’ve spent the majority of the last 10 years of my career running IT in the
    financial services sector. Two checkboxes that are mandatory at most places I
    worked, are role-based access control (RBAC) and Active Directory (AD) integration.
    If you were trying to sell us a product, and it didn’t have these two features,
    we wouldn’t buy it!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的10年中，我大部分时间都在金融服务行业从事IT工作。在我工作的大多数地方，角色基础访问控制（RBAC）和Active Directory（AD）集成是强制性的两个复选框。如果你试图向我们销售一个产品，而它没有这两个功能，我们是不会购买的！
- en: Fortunately, Docker EE has both. In this section we’ll talk about RBAC.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Docker EE都有。在本节中，我们将讨论RBAC。
- en: 'UCP implements RBAC via something called a *grant*. At a high level, a grant
    is made of three things:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: UCP通过一种称为*授予*的东西来实现RBAC。在高层次上，授予由三个部分组成：
- en: '**Subject**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**'
- en: '**Role**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色**'
- en: '**Collection**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集合**'
- en: The *subject* is one or more users or a team. The *role* is the set of permissions,
    and the *collection* is the resources these permissions apply to. See Figure 17.1.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*主题*是一个或多个用户或团队。*角色*是权限集，*集合*是这些权限适用的资源。见图17.1。'
- en: '![Figure 17.1 Grant](images/figure17-1.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图17.1授予](images/figure17-1.png)'
- en: Figure 17.1 Grant
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1授予
- en: Figure 17.2, shows an example where the `SRT` team has `container-full-control`
    access to all resources in the `/zones/dev/srt` collection.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2显示了一个示例，其中`SRT`团队对`/zones/dev/srt`集合中的所有资源具有`container-full-control`访问权限。
- en: '![Figure 17.2](images/figure17-2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图17.2](images/figure17-2.png)'
- en: Figure 17.2
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2
- en: 'Let’s complete the following steps to create a grant:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们完成以下步骤来创建一个授予：
- en: Create users and teams
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户和团队
- en: Create a custom role
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个自定义角色
- en: Create a collection
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个集合
- en: Create a grant
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个授权
- en: Only UCP Admins can create and manage users, teams, roles, collections, and
    grants. So to follow along, you’ll need to be logged in as a UCP admin.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '只有UCP管理员才能创建和管理用户、团队、角色、集合和授权。因此，为了跟随操作，你需要以UCP管理员身份登录。 '
- en: Create users and teams
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建用户和团队
- en: It’s a best practice to group users into teams, and assign teams to grants.
    You *can* assign individual users to a *grant*, but it’s not recommended.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户分组到团队，并将团队分配到授权是最佳实践。你*可以*将单个用户分配给*授权*，但这并不推荐。
- en: Let’s create some users and teams.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些用户和团队。
- en: Log in to UCP.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到UCP。
- en: Expand `User Management` and click `Users`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开“用户管理”并点击“用户”。
- en: From here you can create users.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里你可以创建用户。
- en: Click `Organization & Teams`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“组织和团队”。
- en: From here you can create organizations. For the examples in the next few steps,
    we’ll be using an organization called “manufacturing”.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里你可以创建组织。在接下来的几个步骤中，我们将使用一个名为“制造业”的组织作为示例。
- en: Click the `manufacturing` organization and create a team.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“制造业”组织并创建一个团队。
- en: Teams exist within an organization. It’s not possible to create a team that
    isn’t part of an organization, and a team can only be a member of one organization.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 团队存在于组织中。不可能创建一个不属于任何组织的团队，一个团队只能是一个组织的成员。
- en: Add users to a team.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户添加到一个团队。
- en: To add a user to a team, you need to click into the team and choose `Add Users`
    from the `Actions` menu.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要将用户添加到团队，你需要点击进入团队，并从“操作”菜单中选择“添加用户”。
- en: Figure 17.3 shows how to add users to the `SRT` team in the `manufacturing`
    organization.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3显示了如何将用户添加到“制造业”组织中的“SRT”团队。
- en: '![Figure 17.3 Adding users to teams](images/figure17-3.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图17.3 将用户添加到团队](images/figure17-3.png)'
- en: Figure 17.3 Adding users to teams
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3 将用户添加到团队
- en: You now have some users and teams. UCP shares its user database with DTR, meaning
    any users and teams you create in UCP are also available in DTR.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一些用户和团队。UCP与DTR共享其用户数据库，这意味着你在UCP中创建的任何用户和团队也可以在DTR中使用。
- en: Create a custom role
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建一个自定义角色
- en: Custom roles are powerful, they let you get extremely granular with the permissions
    you assign. In this step we’ll create a new custom role called `secret-ops` that
    allows subjects to create, delete, update, use, and view Docker secrets.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义角色非常强大，它们可以让你对分配的权限进行极其精细的控制。在这一步中，我们将创建一个名为“secret-ops”的新自定义角色，允许主体创建、删除、更新、使用和查看Docker
    secrets。
- en: Expand the `User Management` tab of the left-hand navigation pane and select
    `Roles`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开左侧导航窗格的“用户管理”选项卡，选择“角色”。
- en: Create a new role.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新角色。
- en: Give the role a name.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给角色命名。
- en: In this example we’re going to create a new custom role called “secret-ops”
    with permission to perform all secret-related operations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个名为“secret-ops”的新自定义角色，具有执行所有与secret相关的操作的权限。
- en: Select `Operations` and explore the list of operations that can be assigned
    to the role.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“操作”并探索可以分配给角色的操作列表。
- en: The list is long, and allows you to specify individual API operations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 列表很长，允许你指定单个API操作。
- en: Select the individual API operations you want to assign to the role.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想要分配给角色的单个API操作。
- en: In the example, we’ll assign all secret-related API operations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将分配所有与secret相关的API操作。
- en: '![Figure 17.4 Assigning API operations to a custom role](images/figure17-4.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图17.4 分配API操作给自定义角色](images/figure17-4.png)'
- en: Figure 17.4 Assigning API operations to a custom role
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4 分配API操作给自定义角色
- en: Click `Create`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”。
- en: The role is now on the system and can be assigned to multiple grants.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色现在已经在系统中，并可以分配给多个授权。
- en: Let’s create a collection.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个集合。
- en: Create a collection
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建一个集合
- en: In the previous chapter we learned that networks, volumes, secrets, services,
    and nodes are Swarm resources — they get stored in the Swarm config at `/var/lib/docker/swarm`.
    *Collections* let you group these in ways that match your organizational structure
    and IT requirements. For example, your IT infrastructure might be divided into
    three zones; `prod`, `test`, and `dev`. If this is the case, you could create
    three collections and assign resources to each, as shown in Figure 17.5.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解到网络、卷、秘密、服务和节点都是Swarm资源——它们被存储在Swarm配置中的“/var/lib/docker/swarm”中。*集合*让你以符合组织结构和IT要求的方式对它们进行分组。例如，您的IT基础设施可能分为三个区域；`prod`、`test`和`dev`。如果是这种情况，您可以创建三个集合，并分配资源给每个集合，如图17.5所示。
- en: '![Figure 17.5 High-level collections](images/figure17-5.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图17.5高级集合](images/figure17-5.png)'
- en: Figure 17.5 High-level collections
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5高级集合
- en: Each resource can only be in one collection.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个资源只能属于一个集合。
- en: 'In the next steps, we’ll create a new collection called `zones/dev/srt` and
    assign a secret to it. Collections are hierarchical by nature, so you’ll need
    to create three nested collections like this: `zones` > `dev` > `srt`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将创建一个名为“zones/dev/srt”的新集合，并将一个秘密分配给它。集合本质上是分层的，因此您需要创建三个嵌套的集合，如下所示：“zones”
    > “dev” > “srt”。
- en: Perform all of the following steps from the Docker UCP web UI.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从Docker UCP web UI执行以下所有步骤。
- en: Select `Collections` from the left navigation pane, and choose `Create Collection`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧导航窗格中选择`集合`，然后选择`创建集合`。
- en: Create the root collection called `zones`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为“zones”的根集合。
- en: Click `View Children` for the `/zones` collection.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“查看子项”以查看“/zones”集合。
- en: Create a nested child collection called `dev`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“dev”的嵌套子集合。
- en: Click `View Children` for the `/zones/dev` collection.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“查看子项”以查看“/zones/dev”集合。
- en: Create the final nested child collection called `srt`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为“srt”的最终嵌套子集合。
- en: You now have a collection called `/zones/dev/srt`. However, it’s currently empty.
    In the next steps we’ll add a *secret* to it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有一个名为“/zones/dev/srt”的集合。但是，它目前是空的。在接下来的步骤中，我们将向其中添加一个*秘密*。
- en: Create a new secret.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的秘密。
- en: You can create it from the command line or the UCP web UI. We’ll explain the
    web UI method.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从命令行或UCP web UI中创建它。我们将解释web UI方法。
- en: 'From the UCP web UI click: `Secrets` > `Create Secret`. Give it a name, some
    data and click `Save`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从UCP web UI中点击：`秘密` > `创建秘密`。给它一个名称，一些数据，然后点击`保存`。
- en: It’s possible to configure the *collection* at the same time you create the
    secret. But we’re not doing it that way.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建秘密的同时也可以配置*集合*。但我们不是这样做的。
- en: Locate and select the secret in the UCP web UI.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UCP web UI中找到并选择秘密。
- en: Click `Collection` from the `Configure` drop-down menu.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“配置”下拉菜单中点击“集合”。
- en: Navigate through the `View Children` hierarchy until the `/zones/dev/srt` collection
    is selected and click `Save`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过“查看子项”层次结构导航，直到选择“/zones/dev/srt”集合，然后点击“保存”。
- en: The secret is now part of the `/zones/dev/srt` collection. It cannot be a member
    of any other collections.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密现在是“/zones/dev/srt”集合的一部分。它不能是任何其他集合的成员。
- en: One final thing about *collections* before we create the *grant*. Collections
    have an inheritance model where access to any collection automatically implies
    access to nested child collections. In Figure 17.6, the `dev` team has access
    to the `/zones/dev` collection, and as such, it automatically gets access to the
    resources in the `srt`, `hellcat` and `daemon` child collections.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建*授权*之前，还有一件关于*集合*的事情。集合具有继承模型，其中对任何集合的访问自动意味着对嵌套子集合的访问。在图17.6中，“dev”团队可以访问“/zones/dev”集合，因此它自动获得对“srt”、“hellcat”和“daemon”子集合中资源的访问权限。
- en: '![Figure 17.6 Collection inheritance](images/figure17-6.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图17.6集合继承](images/figure17-6.png)'
- en: Figure 17.6 Collection inheritance
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6 集合继承
- en: Create a grant
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 创建授予
- en: Now that you have users and teams, a custom role, and a collection, you can
    create a grant. In this example, we’ll create a grant for the `srt-dev` team to
    have the custom `secret-ops` role against all resources in the `/zones/dev/srt`
    collection.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了用户和团队、自定义角色和集合，您可以创建一个授予。在这个例子中，我们将为`srt-dev`团队创建一个授予，使其对`/zones/dev/srt`集合中的所有资源具有自定义`secret-ops`角色。
- en: Grants are about *who*, gets *what access*, to *which resources*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 授予涉及*谁*，获得*什么访问权限*，对*哪些资源*。
- en: '![](images/figure17-7.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](images/figure17-7.png)'
- en: Expand the `User Management` tab on the left navigation pane and click `Grants`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开左侧导航窗格上的“用户管理”选项卡，然后单击“授予”。
- en: Create a new grant.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的授予。
- en: Click `Subject` and choose the `SRT` team from the `manufacturing` organization.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Subject”，从“manufacturing”组织中选择“SRT”团队。
- en: It’s possible to select an entire organization. If you do this, all teams within
    the organization will be included in the grant.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可以选择整个组织。如果这样做，组织内的所有团队都将包括在授予中。
- en: Click `Role` and select the custom `secret-ops` role.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“角色”，然后选择自定义的`secret-ops`角色。
- en: Click `Collections` and select the `/zones/dev/srt` collection.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“集合”，然后选择`/zones/dev/srt`集合。
- en: You may have to view the children of the top-level `Swarm` collection before
    you see `/zones`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到`/zones`之前，您可能需要查看顶级`Swarm`集合的子项。
- en: Click `Save` to create the grant.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“保存”以创建授予。
- en: The grant is now created and can be viewed in the list of all grants on the
    system. Members of the `manufacturing/SRT` team can now perform all secret-related
    operations on resources in the `/zones/dev/srt` collection.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经创建了授予，并且可以在系统上的所有授予列表中查看。`manufacturing/SRT`团队的成员现在可以在`/zones/dev/srt`集合中执行所有与秘密相关的操作。
- en: '![](images/figure17-8.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](images/figure17-8.png)'
- en: You can modify components of a grant while the grant is live. For example, you
    can add users to the team, and resources to the collection. But you cannot alter
    the API operations assigned to the role. If you want to change the permissions
    of the role, you will need to create a new one with the desired permissions.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在授予处于活动状态时修改授予的组件。例如，您可以将用户添加到团队，将资源添加到集合。但是您不能更改分配给角色的API操作。如果您想要更改角色的权限，您需要创建一个具有所需权限的新角色。
- en: RBAC for nodes
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 节点的RBAC
- en: One final thing on RBAC. It’s possible to group the worker nodes in your cluster
    for scheduling purposes. For example, you might run a single cluster for dev,
    testing, and QA workloads — a single cluster might reduce admin overheads and
    make it easier to assign nodes to the three different environments. But you might
    also want worker nodes divided up so that only members of the `dev` team can schedule
    work onto nodes in the `dev` collection etc.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后关于RBAC的一件事。您可以将集群中的工作节点分组以进行调度。例如，您可能会为开发、测试和QA工作负载运行一个单一集群——一个单一集群可能会减少管理开销，并使将节点分配给三个不同环境变得更容易。但是您可能还希望将工作节点分成几部分，以便只有`dev`团队的成员可以将工作安排到`dev`集合中的节点等。
- en: As you’d expect, you accomplish this with *grants*. First of all, you’d assign
    UCP Worker nodes to a custom *collection*. Then you’d create a grant comprising
    the collection, the built-in `Scheduler` *role*, and the team that you want to
    assign the grant to. This lets you control which users can schedule work to which
    nodes in the cluster.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的那样，您可以通过*授予*来实现这一点。首先，您会将UCP Worker节点分配给一个自定义*集合*。然后，您会创建一个包括集合、内置的`Scheduler`*角色*和您想要分配授予的团队的授予。这样可以让您控制哪些用户可以将工作安排到集群中的哪些节点。
- en: As a simple example, the grant shown in Figure 17.9 will allow members of the
    `dev` team to be able to schedule services and containers onto worker nodes in
    the `/zones/dev` collection.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个简单的例子，图17.9中显示的授权将允许`dev`团队的成员能够将服务和容器调度到`/zones/dev`集合中的工作节点上。
- en: '![Figure 17.9 RBAC for nodes](images/figure17-9.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图17.9节点的RBAC](images/figure17-9.png)'
- en: Figure 17.9 RBAC for nodes
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.9节点的RBAC
- en: That’s it! You know how to implement RBAC in Docker UCP!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您知道如何在Docker UCP中实现RBAC了！
- en: Active Directory integration
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Active Directory集成
- en: Like all good enterprise tools, UCP integrates with Active Directory and other
    LDAP directory services. This allows it to leverage existing users and groups
    from your organization’s established single-sign-on system.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有优秀的企业工具一样，UCP集成了Active Directory和其他LDAP目录服务。这使其能够利用来自您组织已建立的单一登录系统的现有用户和组。
- en: Before going any further in this section, it is vital that you discuss any AD/DLAP
    integration plans with the teams responsible for directory services in your organization.
    Get them involved from the start, so that your planning and implementation can
    be as smooth as possible!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中进一步进行之前，非常重要的是与负责组织目录服务的团队讨论任何AD/DLAP集成计划。让他们从一开始就参与进来，这样您的规划和实施才能尽可能顺利！
- en: Out-of-the-box, UCP user and group data is stored in a local database that’s
    leveraged by DTR for a single-sign-on (SSO) experience. This authenticates all
    access requests locally, and allows you to login to DTR without having to enter
    your UCP credentials again. However, **UCP admins** can configure UCP to leverage
    existing corporate user accounts stored in AD or other LDAP directory services
    — offloading authentication and account management to existing teams and processes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 开箱即用，UCP用户和组数据存储在本地数据库中，DTR利用该数据库实现单一登录（SSO）体验。这会在本地验证所有访问请求，并允许您登录到DTR而无需再次输入UCP凭据。但是，**UCP管理员**可以配置UCP以利用存储在AD或其他LDAP目录服务中的现有企业用户帐户，将认证和帐户管理外包给现有团队和流程。
- en: The following procedure will show you how to configure UCP to leverage AD for
    user accounts. At a high level, the process tells UCP to search for user accounts,
    in a specific directory, and copy them into UCP. As previously stated, co-ordinate
    this work with your directory services team.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将向您展示如何配置UCP以利用AD进行用户帐户。在高层次上，该过程告诉UCP在特定目录中搜索用户帐户，并将其复制到UCP中。如前所述，与您的目录服务团队协调此工作。
- en: Let’s do it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Expand the `Admin` drop-down in the left navigation pane and select `Admin Settings`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开左侧导航窗格中的`Admin`下拉菜单，然后选择`Admin Settings`。
- en: Select `Authentication & Authorization` and click `Yes` under the **LDAP Enabled**
    heading.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Authentication & Authorization`，并在**LDAP Enabled**标题下单击`Yes`。
- en: Configure LDAP Server settings.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置LDAP服务器设置。
- en: At a high level, you can think of the `LDAP Server Settings` as *where to search*.
    E.g. which directories to look in for user accounts.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，您可以将`LDAP服务器设置`视为*搜索位置*。例如，要在哪些目录中查找用户帐户。
- en: The values entered here will be specific to your environment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处输入的值将特定于您的环境。
- en: '**LDAP Server URL** is the name of an LDAP server in the domain you’ll be searching
    for accounts in. For example, `ad.mycompany.internal`.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**LDAP服务器URL**是您将在其中搜索帐户的域中LDAP服务器的名称。例如，`ad.mycompany.internal`。'
- en: '**Reader DN** and **Reader Password** are the credentials for an account in
    the directory with permission to search it. The account must exist in, or be trusted
    by, the directory you are searching. It’s best practice for it to have *read-only*
    permissions in the directory.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reader DN**和**Reader Password**是具有搜索权限的目录中帐户的凭据。该帐户必须存在于您正在搜索的目录中，或者受到该目录的信任。最佳做法是让它在目录中具有*只读*权限。'
- en: You can use the `Add LDAP Domain +` button to add additional domains to search.
    Each one needs its own LDAP Server URL and Reader account.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用“添加LDAP域+”按钮添加要搜索的其他域。每个域都需要自己的LDAP服务器URL和读取器帐户。
- en: Configure LDAP User Search Configuration.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置LDAP用户搜索配置。
- en: If `LDAP Server Settings` is *where to search*, then `LDAP User Search Configuration`
    is *what to search for*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果“LDAP服务器设置”是*搜索位置*，那么“LDAP用户搜索配置”就是*搜索对象*。
- en: '**Base DN** Specifies the LDAP node to start the search from.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本DN**指定从哪个LDAP节点开始搜索。'
- en: '**Username Attribute** is the LDAP attribute to use as the UCP username.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户名属性**是用作UCP用户名的LDAP属性。'
- en: '**Full Name Attribute** is the LDAP Attribute to use as the full name of the
    UCP account.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**全名属性**是用作UCP帐户全名的LDAP属性。'
- en: See the documentation for other more advanced settings. You should also consult
    with you directory services team when configuring LDAP integration.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅其他更高级的设置的文档。在配置LDAP集成时，您还应该与目录服务团队进行咨询。
- en: Once you’ve configured the LDAP settings, UCP Will search for matching users
    and create them in the UCP user database. It will then perform periodic sync operations
    according to the `Sync Interval (Hours)` setting.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您配置了LDAP设置，UCP将搜索匹配的用户并在UCP用户数据库中创建它们。然后，它将根据“同步间隔（小时）”设置执行定期同步操作。
- en: If you checked the `Just-In-Time User Provisioning` box, UCP will defer the
    creation of user accounts until each account’s first logon event.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您勾选了“即时用户配置”框，UCP将推迟创建用户帐户，直到每个帐户的第一次登录事件。
- en: Before clicking `Save`, you should always perform a test login under the `LDAP
    Test Login` section.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击“保存”之前，您应该始终在“LDAP测试登录”部分执行测试登录。
- en: The test login needs to be with a valid user account in the LDAP system you’re
    configuring UCP To use. The test will apply all of the configuration values defined
    in the sections above (the LDAP config you’re about to save).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 测试登录需要使用LDAP系统中有效的用户帐户。测试将应用上面各节中定义的所有配置值（您即将保存的LDAP配置）。
- en: Only save the configuration if the test login succeeds.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在测试登录成功时才保存配置。
- en: Save the configuration.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存配置。
- en: At this point, UCP will search the LDAP system and create the user accounts
    matching the Base DN and other criteria provided.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，UCP将搜索LDAP系统并创建与基本DN和其他提供的条件匹配的用户帐户。
- en: Local user accounts created prior to configuring LDAP will still be present
    on the system and can still be used.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置LDAP之前创建的本地用户帐户仍将存在于系统中，并且仍然可以使用。
- en: Docker Content Trust (DCT)
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Docker内容信任（DCT）
- en: In the modern IT world, *trust* is a big deal! And going forward, it’s going
    to get bigger. Fortunately, Docker implements trust through a feature called Docker
    Content Trust (DCT).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代IT世界中，*信任*是一件大事！并且未来它将变得更加重要。幸运的是，Docker通过一个名为Docker内容信任（DCT）的功能来实现信任。
- en: At a very high level, publishers of Docker images can sign their images when
    pushing them to a repo. Consumers can then verify them when they pull them, or
    perform build and run operations. To cut a long story short, DCT enables consumers
    to guarantee they’re getting what they ask for!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在非常高的层次上，Docker镜像的发布者可以在将其推送到存储库时对其进行签名。消费者随后可以在拉取它们时验证它们，或执行构建和运行操作。长话短说，DCT使消费者能够保证他们得到了他们所要求的东西！
- en: Figure 17.10 shows the high level architecture.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10显示了高级架构。
- en: '![Figure 17.10 High level DCT architecture](images/figure17-10.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图17.10高级DCT架构](images/figure17-10.png)'
- en: Figure 17.10 High level DCT architecture
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10高级DCT架构
- en: DCT implements *client-side* signing and verification operations, meaning the
    Docker client performs them.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: DCT实现*客户端*签名和验证操作，这意味着Docker客户端执行这些操作。
- en: While it’s obvious that cryptographic guarantees like this are important when
    pulling and pushing software across the internet, it’s increasingly important
    at every level of the stack and at every step in the software delivery pipeline.
    Hopefully it won’t be long before all aspects of the delivery chain are infused
    with cryptographic trust guarantees.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '- 尽管在互联网上传输和推送软件时，加密保证非常重要，但在整个软件交付流程的每个层面和每个步骤中，它变得越来越重要。希望不久的将来，交付链的所有方面都将充满加密信任保证。'
- en: Let’s walk through a quick example of configuring DCT and seeing it in action.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '- 让我们快速示例配置DCT并看到它的运行情况。'
- en: You’ll need a single Docker client and a repository that you can push an image
    to. A repository on Docker Hub will work.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '- 您将需要一个单独的Docker客户端和一个可以将镜像推送到的仓库。Docker Hub上的仓库将起作用。'
- en: DCT is turned on and off via the `DOCKER_CONTENT_TRUST` environment variable.
    Setting it to a value of “1” will turn DCT **on** in your current session. Setting
    it to any other value will turn it **off**. The following example will turn it
    on a Linux-based Docker host.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '- DCT是通过DOCKER_CONTENT_TRUST环境变量打开和关闭的。将其设置为“1”将在当前会话中打开DCT。将其设置为任何其他值将关闭它。以下示例将在基于Linux的Docker主机上打开它。'
- en: '[PRE0]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`All future `docker push` commands will automatically sign images as part of
    the push operation. Likewise, all `pull`, `build`, and `run` commands will only
    work if the image they are acting on is signed.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '- 未来的docker push命令将自动在推送操作中签署镜像。同样，只有签署的镜像才能使用pull、build和run命令。'
- en: Let’s push an image to a repo with a new tag.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '- 让我们将一个带有新标记的镜像推送到一个仓库。'
- en: The image being pushed can be any image. In fact, the one I’m using is the current
    `alpine:latest` that I just pulled a minute ago. At the moment, it’s not signed
    by me!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '- 被推送的镜像可以是任何镜像。实际上，我正在使用的是我刚刚拉取的当前alpine:latest。目前，它还没有由我签名！'
- en: Tag the image so it can be pushed to your desired repo. I’m going to push it
    to a new repo within the namespace of my personal Docker Hub account.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '- 给镜像打标记，这样它就可以推送到您想要的仓库。我将把它推送到我个人Docker Hub帐户命名空间内的一个新仓库。'
- en: '[PRE1]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`*   Login to Docker Hub (or another registry) so you can push the image in
    the next step.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '- 登录到Docker Hub（或其他注册表），这样您就可以在下一步中推送镜像。'
- en: '[PRE2]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`*   Push the newly tagged image.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '- 推送新标记的镜像。'
- en: '[PRE3]``'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '- [PRE3]``'
- en: '[PRE4]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: $ docker image pull nigelpoulton/dockerbook:unsigned
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker image pull nigelpoulton/dockerbook:unsigned'
- en: 'Error: trust data does not exist `for` docker.io/nigelpoulton/dockerbook:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '- 错误：docker.io/nigelpoulton/dockerbook的信任数据不存在：'
- en: notary.docker.io no trust data `for` docker.io/nigelpoulton/dockerbook
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '- notary.docker.io没有docker.io/nigelpoulton/dockerbook的信任数据'
- en: '[PRE5]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: $ docker image pull --disable-content-trust nigelpoulton/dockerbook:unsigned
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker image pull --disable-content-trust nigelpoulton/dockerbook:unsigned'
- en: '[PRE6]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: $ docker container run -d --rm nigelpoulton/dockerbook:unsigned
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker容器运行-d --rm nigelpoulton/dockerbook:unsigned'
- en: 'docker: No trust data `for` unsigned.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker：未签名的没有信任数据。'
- en: '[PRE7]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: $ docker pull alpine:latest
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker pull alpine:latest'
- en: 'latest: Pulling from library/alpine'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '- 最新：正在从库/alpine拉取'
- en: 'ff3a5c916c92: Pull `complete`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '- ff3a5c916c92：拉取完成'
- en: 'Digest: sha256:7df6...b1c0'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '- 摘要：sha256:7df6...b1c0'
- en: 'Status: Downloaded newer image `for` alpine:latest'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '- 状态：已下载更新的镜像alpine:latest'
- en: '[PRE8]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: $ docker image tag alpine:latest dtr.mydns.com/technology/test:v1
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker image tag alpine:latest dtr.mydns.com/technology/test:v1'
- en: '[PRE9]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: $ eval "$(<env.sh)"
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '- 执行“$（<env.sh）”。'
- en: '[PRE10]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: $ docker login dtr.mydns.com
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker login dtr.mydns.com'
- en: 'Username: nigelpoulton'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '- 用户名：nigelpoulton'
- en: 'Password:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '- 密码：'
- en: Login Succeeded
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '- 登录成功'
- en: '[PRE11]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: $ docker image push dtr.mydns.com/technology/test:v1
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '- docker image push dtr.mydns.com/technology/test:v1'
- en: The push refers to a repository `[`dtr.mydns.com/technology/test`]`
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '- 推送是指一个仓库`[dtr.mydns.com/technology/test]`'
- en: 'cd7100a72410: Pushed'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '- cd7100a72410：已推送'
- en: 'v1: digest: sha256:8c03...acbc size: `528`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '- v1：摘要：sha256:8c03...acbc 大小：528'
- en: '[PRE12][PRE13]'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '- [PRE12][PRE13]'
