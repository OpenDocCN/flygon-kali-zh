["```js\n~(?:\\b[a-z\\d.-]+://[^<>\\s]+|\\b(?:(?:(?:[^\\s!@#$%^&*()_=+[\\]{}\\|;:'\n```", "```js\nvar Calendar = React.createClass({\n```", "```js\n  getInitialState: function() {\n    return {entries: [], entry_being_added: this.new_entry()};\n  },\n```", "```js\n  handle_submit: function(event) {\n    event.preventDefault();\n    (this.state.entry_being_added.month =\n      parseInt(document.getElementById('month').value));\n    (this.state.entry_being_added.date =\n      parseInt(document.getElementById('date').value));\n    (this.state.entry_being_added.year =\n      parseInt(document.getElementById('year').value));\n    if (document.getElementById('all_day').checked) {\n      this.state.entry_being_added.all_day = true;\n    }\n    (this.state.entry_being_added.description =\n      document.getElementById('description').value);\n    if (this.state.entry_being_added.hasOwnProperty('repeats') \n    && this.state.entry_being_added.repeats) {\n      (this.state.entry_being_added.start.time =\n        this.state.entry_being_added.time);\n```", "```js\n      var old_entry = this.state.entry_being_added;\n      this.state.entries.push(this.state.entry_being_added);\n      this.state.entry_being_added = this.new_entry();\n      var entry = this.new_entry();\n      (document.getElementById('month').value =\n        entry.month.toString());\n      (document.getElementById('date').value =\n        entry.date.toString());\n      (document.getElementById('year').value =\n        entry.year.toString());\n      document.getElementById('all_day').checked = false;\n      document.getElementById('description').value = '';\n      document.getElementById('advanced').checked = false;\n      if (old_entry.hasOwnProperty('repeats') &&\n        old_entry.repeats) {\n        (document.getElementById('month_based_frequency').value =\n          'Every');\n        document.getElementById('month_occurrence').value = '-1';\n        document.getElementById('series_ends').checked = false;\n        (document.getElementById('end_month').value = \n          '' + new Date().getMonth());\n        (document.getElementById('end_date').value = \n          '' + new Date().getDate());\n        (document.getElementById('end_year').value =\n          '' + new Date().getFullYear() + 1);\n      }\n    },\n```", "```js\n    new_entry: function() {\n      var result = {};\n      result.hours = 12;\n      result.minutes = 0;\n      result.month = new Date().getMonth();\n      result.date = new Date().getDate();\n      result.year = new Date().getFullYear();\n      result.weekday = new Date().getDay();\n      result.description = '';\n      return result;\n    },\n```", "```js\n    new_series_entry: function() {\n      var result = this.new_entry();\n      result.repeats = true;\n      result.start = {};\n      result.start.hours = null;\n      result.start.minutes = null;\n      result.start.month = new Date().getMonth();\n      result.start.date = new Date().getDate();\n      result.start.year = new Date().getFullYear();\n      result.frequency = null;\n      result.sunday = false;\n      result.monday = false;\n      result.tuesday = false;\n      result.wednesday = false;\n      result.thursday = false;\n      result.friday = false;\n      result.saturday = false;\n      result.month_occurrence = -1;\n      result.end = {};\n      result.end.time = null;\n      result.end.month = null;\n      result.end.date = null;\n      result.end.year = null;\n      return result;\n    },\n```", "```js\n    on_change: function() {\n      if (this.state.entry_being_added.hasOwnProperty('repeats') {\n        (this.state.entry_being_added.repeats =\n          !this.state.entry_being_added.repeats);\n      } else {\n        var new_entry = this.new_series_entry();\n        new_entry.time = this.state.entry_being_added.time;\n        new_entry.month = this.state.entry_being_added.month;\n        new_entry.date = this.state.entry_being_added.date;\n        new_entry.year = this.state.entry_being_added.year;\n        this.state.entry_being_added = new_entry;\n      }\n    },\n```", "```js\n    render: function() {\n      var result = [this.render_basic_entry(\n        this.state.entry_being_added)];\n      if (this.state.entry_being_added &&\n        this.state.entry_being_added.hasOwnProperty('repeats')\n        this.state.entry_being_added.repeats) {\n        result.push(this.render_entry_additionals(\n          this.state.entry_being_added));\n      }\n      return (<div id=\"Calendar\">\n        <h1>Calendar</h1>\n        {this.render_upcoming()}<form onSubmit={\n        this.handle_submit}>{result}\n        <input type=\"submit\" value=\"Save\" /></form></div>);\n    },\n```", "```js\n    render_basic_entry: function(entry) {\n      var result = [];\n      var all_day = false;\n      var hour_options = [[0, '12AM'],\n        [1, '1AM'],\n        [2, '2AM'],\n        [3, '3AM'],\n        [4, '4AM'],\n        [5, '5AM'],\n        [6, '6AM'],\n        [7, '7AM'],\n        [8, '8AM'],\n        [9, '9AM'],\n        [10, '10AM'],\n        [11, '11AM'],\n        [12, '12PM'],\n        [13, '1PM'],\n        [14, '2PM'],\n        [15, '3PM'],\n        [16, '4PM'],\n        [17, '5PM'],\n        [18, '6PM'],\n        [19, '7PM'],\n        [20, '8PM'],\n        [21, '9PM'],\n        [22, '10PM'],\n        [23, '11PM']];\n      var hours = [];\n      for(var index = 0; index < hour_options.length; ++index) {\n        hours.push(<option\n          value={hour_options[index][0]}\n          >{hour_options[index][1]}</option>);\n    }\n```", "```js\n    result.push(<li><input type=\"checkbox\" name=\"all_day\"\n    id=\"all_day\" />All day event.\n    &nbsp;<strong>\u2014or\u2014</strong>&nbsp;\n    <select id=\"hours\" id=\"hours\"\n    defaultValue=\"12\">{hours}</select>:\n    <select id=\"minutes\" id=\"minutes\"\n    defaultValue=\"0\">{minutes}</select></li>);\n```", "```js\n      var days_in_month = null;\n      if (entry && entry.hasOwnProperty('month')) {\n        var month = entry.month;\n        if (document.getElementById('month')) {\n          month = parseInt(\n            document.getElementById('month').value);\n        }\n        if (month === 0 || month === 2 || month === 4 || month\n          === 6 || month === 7 || month === 9 || month === 11) {\n          days_in_month = 31;\n        } else if (month === 1) {\n          if (entry && entry.hasOwnProperty('year') && entry.year\n            % 4 === 0) {\n            days_in_month = 29;\n          } else {\n            days_in_month = 28;\n          }\n        } else {\n          days_in_month = 30;\n        }\n      }\n      var date_options = [];\n      for(var index = 1; index <= days_in_month; index += 1) {\n        date_options.push([index, index.toString()]);\n      }\n      var dates = [];\n      for(var index = 0; index < date_options.length; ++index) {\n        dates.push(<option value={date_options[index][0]}\n          >{date_options[index][1]}</option>);\n      }\n      result.push(<li>Date: <select id=\"date\" name=\"date\"\n        defaultValue={entry.date}>{dates}</select></li>);\n      var year_options = [];\n      for(var index = new Date().getFullYear(); index < new\n        Date().getFullYear() + 100; ++index) {\n        year_options.push([index, index.toString()]);\n      }\n      var years = [];\n      for(var index = 0; index < year_options.length; ++index) {\n        years.push(<option value={year_options[index][0]}\n          >{year_options[index][1]}</option>);\n      }\n      result.push(<li>Year: <select id=\"year\" name=\"year\"\n        defaultValue={entry.years}>{years}</select></li>);\n      result.push(<li>Description: <input type=\"text\"\n        name=\"description\" id=\"description\" /></li>);\n      result.push(<li><input type=\"checkbox\" name=\"advanced\"\n        id=\"advanced\" onChange={this.on_change} />\n        Recurring event</li>);\n      result.push(<li><input type=\"submit\" value=\"Save\" /></li>);\n      return <ul>{result}</ul>;\n    },\n```", "```js\n    render_entry_additionals: function(entry) {\n      var result = [];\n      result.push(<li><input type=\"checkbox\" \n        name=\"yearly\" id=\"yearly\"> This day,\n        every year.</li>);\n      var frequency = [];\n      var frequency_options = ['Every',\n        'Every First',\n        'Every Second',\n        'Every Third',\n        'Every Fourth',\n        'Every Last',\n        'Every First and Third',\n        'Every Second and Fourth'];\n      for(var index = 0; index < frequency_options.length;\n        ++index) {\n        frequency.push(<option>{frequency_options[index]}\n          </option>);\n      }\n```", "```js\nresult.push(<li><select name=\"month_based_frequency\"\n        id=\"month_based_frequency\" defaultValue=\"0\"\n        >{frequency}</select></li>);\n      var weekdays = [];\n      var weekday_options = ['Sunday', 'Monday', 'Tuesday',\n        'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      for(var index = 0; index < weekday_options.length; ++index) {\n        var checked = false;\n        if (entry && entry.hasOwnProperty(\n          weekday_options[index].toLowerCase()) &&\n          entry[weekday_options[index].toLowerCase()]) {\n          checked = true;\n        }\n        weekdays.push(<span><input type=\"checkbox\"\n          name={weekday_options[index].toLowerCase()}\n          id={weekday_options[index].toLowerCase()}\n          defaultChecked={checked} />\n          {weekday_options[index]}</span>);\n        }\n      }\n      result.push(<li>{weekdays}</li>);\n```", "```js\n      var month_occurrences = [[0, 'January'],\n        [1, 'February'],\n        [2, 'March'],\n        [3, 'April'],\n        [4, 'May'],\n        [5, 'June'],\n        [6, 'July'],\n        [7, 'August'],\n        [8, 'September'],\n        [9, 'October'],\n        [10, 'November'],\n        [11, 'December']];\n      var month_occurrences_with_all = [[-1, 'Every Month'],\n        [0, 'January'],\n        [1, 'February'],\n        [2, 'March'],\n        [3, 'April'],\n        [4, 'May'],\n        [5, 'June'],\n        [6, 'July'],\n        [7, 'August'],\n        [8, 'September'],\n        [9, 'October'],\n        [10, 'November'],\n        [11, 'December']];\n```", "```js\n      result.push(<li>Ends on (optional): <input type=\"checkbox\"\n        name=\"series_ends\" id=\"series_ends\" /><ul><li>Month:\n        <select id=\"end_month\" name=\"end_month\"\n        defaultValue={month}>{months}</select></li>\n        <li>End date:<select id=\"end_date\"\n        name=\"end_date\" defaultValue={entry.date}\n        >{dates}</select></li>\n        <li>End year:<select id=\"end_year\"\n        name=\"end_year\" defaultValue={entry.end_year + 1}\n        >{years}</select></li></ul></li>);\n      return <ul>{result}</ul>;\n    },\n```", "```js\n    render_upcoming: function() {\n      var that = this;\n      var result = [];\n```", "```js\n      var compare = function(first, second) {\n        if (first.year > second.year) {\n          return 1;\n        } else if (first.year === second.year && first.month >\n          second.month) {\n          return 1;\n        } else if (first.year === second.year && first.month ===\n          second.month && first.date > second.date) {\n          return 1;\n        } else if (first.year === second.year && first.month ===\n          second.month && first.date === second.date) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n```", "```js\n      var successor = function(entry) {\n        var result = that.new_entry();\n        var days_in_month = null;\n        if (entry.month === 0 || entry.month === 2 ||\n          entry.month === 4 || entry.month === 6 ||\n          entry.month === 7 || entry.month === 9 ||\n          entry.month === 11) {\n          days_in_month = 31;\n        } else if (entry.month === 1) {\n          if (entry && entry.hasOwnProperty('year') &&\n            entry.year % 4 === 0) {\n            days_in_month = 29;\n          } else {\n            days_in_month = 28;\n          }\n        } else {\n          days_in_month = 30;\n        }\n        if (entry.date === days_in_month) {\n          if (entry.month === 11) {\n            result.year = entry.year + 1;\n            result.month = 0;\n          } else {\n            result.year = entry.year;\n            result.month = entry.month + 1;\n          }\n          result.date = 1;\n        } else {\n          result.year = entry.year;\n          result.month = entry.month;\n          result.date = entry.date + 1;\n        }\n        result.days_ahead = entry.days_ahead + 1;\n        result.weekday = (entry.weekday + 1) % 7;\n        return result;\n      }\n```", "```js\n      var greatest = this.new_entry();\n      for(var index = 0; index < this.state.entries.length;\n        ++index) {\n        var entry = this.state.entries[index];\n        if (!entry.hasOwnProperty('repeats') && entry.repeats) {\n          if (compare(entry, greatest) === 1) {\n            greatest = this.new_entry();\n            greatest.year = entry.year;\n            greatest.month = entry.month;\n            greatest.date = entry.date;\n          }\n        }\n      }\n```", "```js\n      var once = {};\n      var repeating = [];\n      for(var index = 0; index < this.state.entries.length;\n        ++index) {\n        var entry = this.state.entries[index];\n        if (entry.hasOwnProperty('repeats') && entry.repeats) {\n          repeating.push(entry);\n        } else {\n          var key = (entry.date + '/' + entry.month + '/' +\n            entry.year);\n          if (once.hasOwnProperty(key)) {\n            once[key].push(entry);\n          } else {\n            once[key] = [entry];\n          }\n        }\n      }\n      greatest.year += 1;\n      var first_day = this.new_entry();\n      first_day.days_ahead = 0;\n```", "```js\n         for(var day = first_day; compare(day, greatest)\n        === -1; day = successor(day)) {\n        var activities_today = [];\n        if (once.hasOwnProperty(day.date + '/' + day.month + '/' +\n          day.year)) {\n          activities_today = activities_today.concat(\n            once[day.date + '/' + day.month + '/' + day.year]);\n        }\n        for(var index = 0; index < repeating.length;\n          ++index) {\n          var entry = repeating[index];\n          var accepts_this_date = true;\n          if (entry.yearly) {\n            if (!(day.date === entry.start.date &&\n              day.month === entry.start.month)) {\n              accepts_this_date = false;\n            }\n          }\n          if (entry.date === day.date && entry.month ===\n            day.month && entry.year === day.year) {\n            entry.days_ahead = day.days_ahead;\n          }\n          if (entry.frequency === 'Every First') {\n            if (!day.date < 8) {\n              accepts_this_date = false;\n            }\n```", "```js\n          if (activities_today.length) {\n            activities_logged_today = true;\n            var comparator = function(first, second) {\n              if (first.all_day && second.all_day) {\n                if (first.description < second.description) {\n                  return -1;\n                } else if (first.description ===\n                  second.description) {\n                  return 0;\n                } else {\n                  return 1;\n                }\n              } else if (first.all_day && !second.all_day) {\n                return -1;\n              } else if (!first.all_day && second.all_day) {\n                return 1;\n              } else {\n                if (first.hour < second.hour) {\n                  return -1;\n                } else if (first.hour > second.hour) {\n                  return 1;\n                } else if (first.hour === second.hour) {\n                  if (first.minute < second.minute) {\n                    return -1;\n                  } else if (first.minute > second.minute) {\n                    return -1;\n                  } else {\n                    if (first.hour < second.hour) {\n                  return -1;\n                } else if (first.hour > second.hour) {\n                  return 1;\n                } else if (first.hour === second.hour) {\n                  if (first.minute < second.minute) {\n                    return -1;\n                  } else if (first.minute > second.minute) {\n                    return -1;\n                  }\n                }\n              }\n            }\n            activities_today.sort(comparator);\n```", "```js\n            if (activities_today.length)\n              {\n              var weekday = null;\n              if (day.weekday === 0)\n                {\n                weekday = 'Sunday';\n                }\n```", "```js\n                if (activity.all_day) {\n                  rendered_activities.push(<li\n                    dangerouslySetInnerHTML={{__html:\n                    converter.makeHtml(activity.description)\n                    .replace('<p>', '').replace('</p>', '')}}\n                    />);\n                } else if (activity.minutes) {\n                  rendered_activities.push(<li\n                    dangerouslySetInnerHTML={{__html:\n                    hour_options[activity.hours][1] + ':' +\n                    minute_options[activity.minutes][1] + ' ' +\n                    converter.makeHtml(activity.description)\n                    .replace('<p>', '').replace('</p>', '')}}\n                    />);\n                } else {\n                  rendered_activities.push(<li\n                    dangerouslySetInnerHTML={{__html:\n                    hour_options[activity.hours][1] + ' ' +\n                    converter.makeHtml(activity.description)\n                    .replace('<p>', '').replace('</p>', '')}}\n                    />);\n                }\n              }\n              result.push(<ul className=\"activities\">\n                {rendered_activities}</ul>);\n            }\n          }\n        }\n        if (entry_displayed) {\n          result.push(<hr />);\n        }\n        return result;\n      }\n    });\n```", "```js\n  var Pragmatometer = React.createClass({\n    render: function() {\n      return (\n        <div className=\"Pragmatometer\">\n          <Calendar />\n          {/* <Todo />\n          <Scratch />\n          <YouPick /> */}\n        </div>\n      );\n    }\n  });\n```"]