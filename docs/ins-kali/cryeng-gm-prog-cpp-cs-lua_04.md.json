["```cs\npGameRulesSystem->RegisterGameRules(\"MyGameMode\", \"GameRules\");\n```", "```cs\ngEnv->pGameFramework->GetIGameRulesSystem()->AddGameRulesLevelLocation(\"MyGameMode\", \"MGM_Levels\");\n```", "```cs\nclass CGameRules \n  : public CGameObjectExtensionHelper<CGameRules, IGameRules>\n  {\n  };\n```", "```cs\n  REGISTER_FACTORY(pFramework, \"GameRules\", CGameRules, false);\n```", "```cs\n  gEnv->pGameFramework->GetIGameRulesSystem()->RegisterGameRules(\"MyGameMode\", \"GameRules\");\n\n```", "```cs\n  m_script = GetEntity()->GetScriptTable();\n```", "```cs\n  IScriptSystem *pScriptSystem = gEnv->pScriptSystem;\n\n  pScriptSystem->BeginCall(m_script, \"MyMethod\");\n  pScriptSystem->EndCall();\n```", "```cs\n  MyGameMode = { }\n\n  function MyGameMode:MyMethod()\n  end\n```", "```cs\n  pScriptSystem->BeginCall(m_script, name);\n  pScriptSystem->PushFuncParam(\"myStringParameter\");\n  pScriptSystem->EndCall();\n```", "```cs\n  function MyGameMode:MyMethod(stringParam)\n  end\n```", "```cs\n  int result = 0;\n  pScriptSystem->EndCall(&result);\n  CryLog(\"MyMethod returned %i!\", result);\n```", "```cs\n  bool bValue = false;\n  m_script->GetValue(\"bMyBool\", &bValue);\n```", "```cs\n  IMonoObjaect *pScript = GetMonoScriptSystem()->InstantiateScript(GetEntity()->GetClass()->GetName(), eScriptFlag_GameRules);\n```", "```cs\n  m_pScript->CallMethod(\"OnClientConnect\", channelId, isReset, playerName)\n```", "```cs\n  public bool OnClientConnect(int channelId, bool isReset = false, string playerName = \"\")\n  {\n  }\n```", "```cs\n  mono::object result = m_pScript->CallMethod(\"OnClientConnect\", channelId, isReset, playerName);\n\n  IMonoObject *pResult = *result;\n  bool result = pResult->Unbox<bool>();\n```", "```cs\n  mono::object propertyValue = m_pScript->GetPropertyValue(\"MyFloatProperty\");\n\n  if(propertyValue)\n  {\n    IMonoObject *pObject = *propertyValue;\n\n    float value = pObject->Unbox<float>();\n  }\n```", "```cs\n  float myValue = 5.5f;\n\n  mono::object boxedValue = GetMonoScriptSystem()->GetActiveDomain()->BoxAnyValue(MonoAnyValue(myValue));\n\n  m_pScript->SetPropertyValue(\"MyFloatProperty\", boxedValue);\n```", "```cs\n  public class MyActor : Actor \n  {\n  }\n```", "```cs\n  protected override void UpdateView(ref ViewParams viewParams)\n  {\n    var fov = MathHelpers.DegreesToRadians(60);\n\n    viewParams.FieldOfView = fov;\n    viewParams.Position = Position;\n    viewParams.Rotation = Rotation;\n  }\n```", "```cs\n  public class ReachTheHeadquarters : CryEngine.GameRules\n  {\n  }\n```", "```cs\n  public bool OnClientConnect(int channelId, bool isReset = false,  string playerName = \"Dude\")\n  {\n    // Only the server can create actors.\n    if (!Game.IsServer)\n      return false;\n\n    var actor = Actor.Create<MyActor>(channelId, playerName);\n    if (actor == null)\n    {\n      Debug.LogWarning(\"Failed to create the player.\");\n      return false;\n    }\n\n    return true;\n  }\n```", "```cs\n  bool CGameRules::OnClientConnect(int channelId, bool isReset)\n  {\n  const char *playerName;\n  if (gEnv->bServer && gEnv->bMultiplayer)\n  {\n    if (INetChannel *pNetChannel = gEnv->pGameFramework->GetNetChannel(channelId))\n      playerName = pNetChannel->GetNickname();\n  }\n    else\n      playerName = \"Dude\";\n\n  return m_pScript->CallMethod(\"OnClientConnect\", channelId, isReset, playerName) != 0;\n  }\n```", "```cs\n  [Entity(Category = \"Others\", EditorHelper = \"Editor/Objects/spawnpointhelper.cgf\")]\n  public class SpawnPoint : Entity\n  {\n    public void Spawn(EntityBase otherEntity)\n    {\n      otherEntity.Position = this.Position;\n      otherEntity.Rotation = this.Rotation;\n    }\n}\n```", "```cs\n  public void OnClientEnteredGame(int channelId, EntityId playerId, bool reset)\n  {\n    var player = Actor.Get<MyActor>(channelId);\n    if (player == null)\n    {\n      Debug.LogWarning(\"Failed to get player\");\n      return;\n    }\n    var random = new Random();\n\n // Get all spawned entities off type SpawnPoint\n    var spawnPoints = Entity.GetByClass<SpawnPoint>();\n\n// Get a random spawpoint\n    var spawnPoint = spawnPoints.ElementAt(random.Next(spawnPoints.Count()));\n    if(spawnPoint != null)\n    {\n     // Found one! Spawn the player here.\n      spawnPoint.Spawn(player);\n    }\n  }\n```", "```cs\n  public override void OnClientDisconnect(int channelId)\n  {\n    Actor.Remove(channelId);\n  }\n```", "```cs\n  public virtual IEnumerable<string> Teams\n  {\n    get\n    {\n      return new string[] { \"Red\", \"Blue\" };\n    }\n  }\n```", "```cs\n  public string Team { get; set; }\n```", "```cs\n// Get all spawned entities of type SpawnPoint\n  var spawnPoints = Entity.GetByClass<SpawnPoint>(); \n\n```", "```cs\n// Get all spawned entities of type SpawnPoint belonging to the players team\n  var spawnPoints = Entity.GetByClass<SpawnPoint>().Where(x => x.Team == player.Team);\n```", "```cs\n  player.Team = Teams.ElementAt(random.Next(Teams.Count()));\n```", "```cs\n  public void EndGame(string winningTeam)\n  {\n    Debug.LogAlways(\"{0} won the game!\", winningTeam);\n  }\n```", "```cs\n  public class Headquarters : Entity\n  {\n    public override void OnSpawn()\n    {\n      TriggerBounds = new BoundingBox(Minimum, Maximum);\n    }\n\n    protected override void OnEnterArea(EntityId entityId, int areaId, EntityId areaEntityId)\n    {\n    }\n\n    [EditorProperty]\n    public string Team { get; set; }\n\n    [EditorProperty]\n    public Vec3 Minimum { get; set; }\n\n    [EditorProperty]\n    public Vec3 Maximum { get; set; }\n  }\n```", "```cs\n  protected override void OnEnterArea(EntityId entityId, int areaId, EntityId areaEntityId)\n  {\n    var actor = Actor.Get<MyActor>(entityId);\n    if (actor == null)\n      return;\n\n    if (actor.Team != Team)\n    {\n      var gameMode = CryEngine.GameRules.Current;\n      var rthGameRules = gameMode as ReachTheHeadquarters;\n\n      if (rthGameRules != null)\n        rthGameRules.EndGame(actor.Team);\n    }\n  }\n```"]