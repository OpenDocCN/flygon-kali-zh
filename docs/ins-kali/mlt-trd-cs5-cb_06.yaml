- en: Chapter 6. Using Concurrent Collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 使用并发集合
- en: 'In this chapter, we will look through the different data structures for concurrent
    programming included in the .NET Framework base class library. You will learn
    about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将浏览包含在.NET Framework基类库中的并发编程的不同数据结构。您将学习以下内容：
- en: Using a concurrent dictionary
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用并发字典
- en: Implementing asynchronous processing using the concurrent queue
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用并发队列实现异步处理
- en: Changing asynchronous processing order with the concurrent stack
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用并发堆栈改变异步处理顺序
- en: Creating a scalable crawler with the concurrent bag
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用并发包创建可扩展的网络爬虫
- en: Generalizing asynchronous processing with the blocking collection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用阻塞集合泛化异步处理
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Programming requires understanding and knowledge of basic data structures and
    algorithms. To choose the best-suited data structure for a concurrent situation,
    a programmer has to know about many things, such as algorithm time, space complexity,
    and big O notation. In different well-known scenarios, we always know which data
    structures are more efficient.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编程需要理解和掌握基本的数据结构和算法。为了选择最适合并发情况的数据结构，程序员必须了解许多事情，比如算法时间、空间复杂度和大O符号。在不同的知名场景中，我们总是知道哪些数据结构更有效。
- en: For concurrent computations, we need to have appropriate data structures. These
    data structures have to be scalable, avoid locks when possible, and at the same
    time provide thread-safe access. The .NET framework, since Version 4, has the
    `System.Collections.Concurrent` namespace with several data structures in it.
    In this chapter, we will cover several data structures and show very simple examples
    of how to use them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于并发计算，我们需要适当的数据结构。这些数据结构必须是可扩展的，在可能的情况下避免锁，并且同时提供线程安全的访问。自.NET Framework 4以来，具有几种数据结构的`System.Collections.Concurrent`命名空间。在本章中，我们将涵盖几种数据结构，并展示如何使用它们的非常简单的示例。
- en: Let us start with `ConcurrentQueue`. This collection uses atomic **Compare and
    Swap** (**CAS**) operations and `SpinWait` to ensure thread safety. It implements
    a **First In First Out** (**FIFO**) collection, which means that the items go
    out of the queue in the same order in which they were added to the queue. To add
    an item to a queue you call the `Enqueue` method. The `TryDequeue` method tries
    to take the first item from the queue, and the `TryPeek` method tries to get the
    first item without removing it from the queue.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`ConcurrentQueue`开始。这个集合使用原子**比较和交换**（**CAS**）操作和`SpinWait`来确保线程安全。它实现了一个**先进先出**（**FIFO**）集合，这意味着项目以它们被添加到队列的顺序出队。要向队列添加项目，您调用`Enqueue`方法。`TryDequeue`方法尝试从队列中取出第一个项目，`TryPeek`方法尝试获取第一个项目而不从队列中移除它。
- en: '`ConcurrentStack` is also implemented without using any locks with only CAS
    operations. It is a **Last In First Out** (**LIFO**) collection, which means that
    the most recently added item will be returned first. To add items you use the
    `Push` and `PushRange` methods, to retrieve you use `TryPop` and `TryPopRange`,
    and to inspect you use the `TryPeek` method.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentStack`也是使用CAS操作而没有使用任何锁来实现的。它是一个**后进先出**（**LIFO**）集合，这意味着最近添加的项目将首先返回。要添加项目，您可以使用`Push`和`PushRange`方法，要检索，您可以使用`TryPop`和`TryPopRange`，要检查，您可以使用`TryPeek`方法。'
- en: '`ConcurrentBag` is an unordered collection that supports duplicate items. It
    is optimized for a scenario where multiple threads partition their work in such
    a way that each thread produces and consumes its own tasks, dealing with other
    threads'' tasks very rarely (in which case it uses locks). You add items to a
    bag with the `Add` method, inspect with `TryPeek`, and take with the `TryTake`
    method.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentBag`是一个支持重复项目的无序集合。它针对多个线程以每个线程产生和消耗自己的任务的方式进行分区的场景进行了优化，很少处理其他线程的任务（在这种情况下，它使用锁）。您可以使用`Add`方法向包中添加项目，使用`TryPeek`进行检查，并使用`TryTake`方法进行获取。'
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please avoid using the `Count` property on the collections mentioned. They are
    implemented using linked lists, while `Count` is an `O(N)` operation. If you need
    to check whether the collection is empty, use the `IsEmpty` property, which is
    an `O(1)` operation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请避免在提到的集合上使用`Count`属性。它们使用链表实现，而`Count`是一个`O(N)`操作。如果您需要检查集合是否为空，请使用`IsEmpty`属性，这是一个`O(1)`操作。
- en: '`ConcurrentDictionary` is a thread-safe dictionary collection implementation.
    It is lock free for read operations. However, it requires locking for write operations.
    The concurrent dictionary uses multiple locks, implementing a fine-grained locking
    model over the dictionary buckets. The number of locks could be defined by using
    a constructor with the parameter `concurrencyLevel`, which means that an estimated
    number of threads will update the dictionary concurrently.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentDictionary`是一个线程安全的字典集合实现。它对读操作是无锁的。但是，它对写操作需要锁定。并发字典使用多个锁，实现了对字典桶的细粒度锁定模型。锁的数量可以通过使用带有参数`concurrencyLevel`的构造函数来定义，这意味着估计数量的线程将同时更新字典。'
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Since a concurrent dictionary uses locking, there are a number of operations
    that require acquiring all the locks inside the dictionary. Please avoid using
    these operations without need. They are: `Count`, `IsEmpty`, `Keys`, `Values`,
    `CopyTo`, and `ToArray`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于并发字典使用锁定，有许多操作需要在字典内部获取所有锁。请避免在不需要的情况下使用这些操作。它们是：`Count`，`IsEmpty`，`Keys`，`Values`，`CopyTo`和`ToArray`。
- en: '`BlockingCollection` is an advanced wrapper over the `IProducerConsumerCollection`
    generic interface implementation. It has many features that are more advanced
    and is very useful to implement pipeline scenarios when you have some steps that
    use the results from processing the previous steps. The `BlockingCollection` class
    supports such features as blocking, bounding inner collections capacity, cancelling
    collection operations, and retrieving values from multiple blocking collections.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`BlockingCollection`是`IProducerConsumerCollection`泛型接口实现的高级包装器。它具有许多更先进的功能，并且在实现管道场景时非常有用，当您有一些步骤使用了处理前一步骤结果时。`BlockingCollection`类支持阻塞、限制内部集合容量、取消集合操作以及从多个阻塞集合中检索值等功能。'
- en: The concurrent algorithms can be very complicated, and covering all the concurrent
    collections—whether more or less advanced— would require writing a separate book.
    Here we illustrate only the simplest examples of using concurrent collections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 并发算法可能非常复杂，覆盖所有并发集合——无论是更先进还是更简单——都需要编写一本单独的书。在这里，我们只展示了使用并发集合的最简单的例子。
- en: Using ConcurrentDictionary
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ConcurrentDictionary
- en: This recipe shows a very simple scenario, comparing the performance of a usual
    dictionary collection with the concurrent dictionary in a single-threaded environment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了一个非常简单的场景，在单线程环境中比较了普通字典集合与并发字典的性能。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found at `BookSamples\Chapter6\Recipe1`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个示例，您需要Visual Studio 2012。没有其他先决条件。这个示例的源代码可以在`BookSamples\Chapter6\Recipe1`中找到。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand the difference between performance of a usual dictionary collection
    with the concurrent dictionary, perform the following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解普通字典集合与并发字典集合性能差异，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the program.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the program starts, we create two collections. One of them is a standard
    dictionary collection and the other is a new concurrent dictionary. Then we start
    adding to it, using a standard dictionary with a lock and measuring the time it
    takes for one million iterations to complete. Then we measure the `ConcurrentDictionary`
    performance in the same scenario, and we finally compare the performance of retrieving
    values from both collections.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序启动时，我们创建了两个集合。其中一个是标准字典集合，另一个是一个新的并发字典。然后我们开始添加到它，使用带锁的标准字典并测量一百万次迭代完成所需的时间。然后我们测量在相同情况下`ConcurrentDictionary`的性能，最后比较从两个集合中检索值的性能。
- en: In this very simple scenario, we find that `ConcurrentDictionary` is significantly
    slower on write operations than a usual dictionary with a lock but is faster on
    retrieval operations. Therefore, if we need many thread-safe reads from a dictionary,
    the `ConcurrendDictionary` collection is the best choice.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个非常简单的场景中，我们发现`ConcurrentDictionary`在写操作上比普通的带锁的字典慢得多，但在检索操作上更快。因此，如果我们需要从字典中进行许多线程安全的读取，`ConcurrendDictionary`集合是最佳选择。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you need just read-only, multithreaded access to the dictionary, it may not
    be necessary to perform thread-safe reads. In this scenario, it is much better
    to use just a regular dictionary or the `ReadOnlyDictionary` collections.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只需要对字典进行只读、多线程访问，可能不需要执行线程安全读取。在这种情况下，最好只使用普通字典或`ReadOnlyDictionary`集合。
- en: '`ConcurrentDictionary` is implemented using the **fine-grained locking** technique,
    and this allows it to scale better on multiple writes than using a regular dictionary
    with a lock (which is called **coarse-grained locking**). As we saw in this example,
    when we use just one thread, a concurrent dictionary is much slower, but when
    we scale this up to five-six threads (if we have enough CPU cores that could run
    them simultaneously), the concurrent dictionary will actually perform better.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentDictionary`是使用**细粒度锁定**技术实现的，这使得它在多次写入时比使用带锁的常规字典更好地扩展（称为**粗粒度锁定**）。正如我们在这个例子中看到的，当我们只使用一个线程时，并发字典要慢得多，但当我们将其扩展到五六个线程时（如果我们有足够的CPU核心可以同时运行它们），并发字典实际上会表现得更好。'
- en: Implementing asynchronous processing using ConcurrentQueue
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ConcurrentQueue实现异步处理
- en: This recipe will show an example of creating a set of tasks to be processed
    asynchronously by multiple workers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将展示一个创建一组任务，由多个工作线程异步处理的示例。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter6\Recipe2`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个示例，您需要Visual Studio 2012。没有其他先决条件。这个示例的源代码可以在`BookSamples\Chapter6\Recipe2`中找到。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand the working of creating a set of tasks to be processed asynchronously
    by multiple workers, perform the following steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解创建一组任务，由多个工作线程异步处理的工作原理，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the program.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the program runs, we create a queue of tasks with an instance of the `ConcurrentQueue`
    collection. Then we create a cancellation token, which will be used to stop work
    after we are done posting tasks to the queue. Next, we start a separate worker
    thread that will be posting tasks to the tasks queue. This part produces a workload
    for our asynchronous processing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 程序运行时，我们使用`ConcurrentQueue`集合创建了一个任务队列。然后我们创建了一个取消标记，用于在我们将任务发布到队列后停止工作。接下来，我们启动一个单独的工作者线程，将任务发布到任务队列。这部分产生了我们异步处理的工作负载。
- en: Now let us define a task-consuming part of the program. We create four workers
    that will wait a random time, then get a task from the task queue, process it,
    and repeat the whole process until we signal the cancellation token. Finally,
    we start the task-producing thread, wait for its completion, and then signal to
    the consumers that we finished work with the cancellation token. The last step
    will be to wait for all our consumers to complete.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义程序的任务消耗部分。我们创建四个工作者，它们将等待一段随机时间，然后从任务队列获取一个任务，处理它，并重复整个过程，直到我们发出取消标记。最后，我们启动任务生成线程，等待其完成，然后使用取消标记向消费者发出我们完成工作的信号。最后一步是等待所有消费者完成。
- en: We see that we have tasks processing from start to end, but it is possible that
    a later task will be processed before an earlier one because we have four workers
    running independently and the task processing time is not constant. We see that
    the access to the queue is thread-safe; no work item was taken twice.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们有任务从头到尾处理，但可能会出现一个后续任务在较早的任务之前被处理，因为我们有四个独立运行的工作者，任务处理时间不是恒定的。我们看到队列的访问是线程安全的；没有工作项被重复获取。
- en: Changing asynchronous processing order ConcurrentStack
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改异步处理顺序ConcurrentStack
- en: This recipe is a slight modification of the previous one. We will once again
    create a set of tasks to be processed asynchronously by multiple workers, but
    this time we implement it with `ConcurrentStack` and see the differences.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱是对上一个的轻微修改。我们将再次创建一组任务，由多个工作者异步处理，但这次我们使用`ConcurrentStack`来实现，并看到其中的区别。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter6\Recipe3`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个食谱进行操作，你需要Visual Studio 2012。没有其他先决条件。这个食谱的源代码可以在`BookSamples\Chapter6\Recipe3`中找到。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand the processing of a set of tasks implemented with `ConcurrentStack`,
    perform the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解使用`ConcurrentStack`实现的一组任务的处理，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the program.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the program runs, we now create an instance of the `ConcurrentStack` collection.
    The rest is almost like in the previous recipe, except instead of using the `Push`
    and `TryPop` methods on the concurrent stack, we use `Enqueue` and `TryDequeue`
    on a concurrent queue.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，我们现在创建了`ConcurrentStack`集合的一个实例。其余部分几乎与上一个食谱相同，只是在并发栈上使用`Push`和`TryPop`方法的地方，我们在并发队列上使用`Enqueue`和`TryDequeue`。
- en: We now see that the task processing order has been changed. The stack is a LIFO
    collection and workers process the later tasks first. In case of a concurrent
    queue, tasks were processed in almost the same order in which they were added.
    This means that by depending on the number of workers, we will surely process
    the task that was created first in a given time frame. In case of a stack, the
    tasks that were created earlier will have lower priority and may be not processed
    until a producer stops putting more tasks to the stack. This behavior is very
    specific and it is much better to use a queue in this scenario.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到任务处理顺序已经改变。栈是一个后进先出的集合，工作者首先处理后续任务。在并发队列的情况下，任务几乎按照它们被添加的顺序进行处理。这意味着根据工作者的数量，我们肯定会在给定的时间范围内处理首先创建的任务。在栈的情况下，较早创建的任务优先级较低，可能在生产者停止向栈中添加更多任务之前不会被处理。这种行为非常特殊，最好在这种情况下使用队列。
- en: Creating a scalable crawler with ConcurrentBag
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ConcurrentBag创建可扩展的爬虫
- en: This recipe shows how to scale workload between a number of independent workers
    that both produce work and process it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何在多个独立的工作者之间分配工作负载，他们既生产工作，又处理工作。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples`
    `\Chapter6\Recipe4`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个食谱进行操作，你需要Visual Studio 2012。没有其他先决条件。这个食谱的源代码可以在`BookSamples`的`\Chapter6\Recipe4`中找到。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate how to scale workload between a number of independent
    workers that both produce work and process it:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了如何在多个独立的工作者之间分配工作负载，他们既生产工作，又处理工作：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the program.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The program simulates web-page indexing with multiple web crawlers. A web crawler
    is a program that opens a web page by its address, indexes the content, and tries
    to visit all the links that this page contains and index these linked pages as
    well. At the beginning, we define a dictionary containing different web-page URLs.
    This dictionary simulates web pages containing links to other pages. The implementation
    is very naive; it does not care about indexing already visited pages, but it is
    simple and allows us to focus on the concurrent workload.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序模拟了多个网络爬虫进行网页索引。网络爬虫是一个打开网页并索引内容的程序，并尝试访问该页面包含的所有链接，并索引这些链接页面。一开始，我们定义了一个包含不同网页URL的字典。这个字典模拟了包含指向其他页面链接的网页。实现非常天真；它不关心已经访问过的页面，但它很简单，可以让我们专注于并发工作负载。
- en: Then we create a concurrent bag, containing crawling tasks. We create four crawlers
    and provide a different site root URL to each of them. Then we wait for all crawlers
    to compete. Now, each crawler starts to index the site URL it was given. We simulate
    the network I/O process by waiting for some random amount of time; then if the
    page contains more URLs, the crawler posts more crawling tasks to the bag. Then,
    it checks whether there are any tasks left to crawl in the bag. If not, the crawler
    completes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个包含爬行任务的并发包。我们创建四个爬虫，并为每个爬虫提供不同的站点根URL。然后，我们等待所有爬虫竞争。现在，每个爬虫开始索引它所给定的站点URL。我们通过等待一些随机时间来模拟网络I/O过程；然后，如果页面包含更多的URL，爬虫会将更多的爬行任务发布到包中。然后，它检查包中是否还有任何任务需要爬行。如果没有，爬虫就完成了。
- en: If we check the output in the first lines below the first four, which were root
    URLs, we will see that usually a task posted by crawler number *N* is processed
    by the same crawler. However, the later lines will be different. This happens
    because internally `ConcurrentBag` is optimized for exactly this scenario where
    there are multiple threads that both add items and remove them. This is achieved
    by letting each thread work with its own local queue of items, and thus, we do
    not need any locks while this queue is occupied. Only when we have no items left
    in the local queue will we perform some locking and try to "steal" the work from
    another thread's local queue. This behavior helps to distribute the work between
    all workers and avoid locking.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查前四行下面的输出，这些行是根URL，我们会发现通常由爬虫编号*N*发布的任务会被同一个爬虫处理。然而，后面的行会有所不同。这是因为内部`ConcurrentBag`针对有多个线程同时添加和删除项目的情况进行了优化。这是通过让每个线程使用自己的本地项目队列来实现的，因此，在这个队列被占用时，我们不需要任何锁。只有当本地队列中没有项目时，我们才会执行一些锁定，并尝试从另一个线程的本地队列中“窃取”工作。这种行为有助于在所有工作者之间分配工作并避免锁定。
- en: Generalizing asynchronous processing with BlockingCollection
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BlockingCollection泛化异步处理
- en: This recipe will describe how to use `BlockingCollection` to simplify implementation
    of workload asynchronous processing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将描述如何使用`BlockingCollection`来简化工作负载异步处理的实现。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. No other prerequisites
    are required. The source code for this recipe can be found in `BookSamples\Chapter6\Recipe5`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此示例，您需要Visual Studio 2012。不需要其他先决条件。此示例的源代码可以在`BookSamples\Chapter6\Recipe5`中找到。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how `BlockingCollection` simplifies the implementation of workload
    asynchronous processing, perform the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`BlockingCollection`如何简化工作负载异步处理的实现，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the program.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here we take exactly the first scenario, but now we use a `BlockingCollection`
    class that provides many useful benefits. First of all, we are able to change
    the way the tasks are stored inside the blocking collection. By default, it uses
    a `ConcurrentQueue` container, but we are able to use any collection that implements
    the `IProducerConsumerCollection` generic interface. To illustrate this, we run
    the program twice, using `ConcurrentStack` as the underlying collection the second
    time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们正好采用了第一种情况，但现在我们使用了一个提供许多有用好处的`BlockingCollection`类。首先，我们能够改变任务在阻塞集合中存储的方式。默认情况下，它使用`ConcurrentQueue`容器，但我们可以使用任何实现`IProducerConsumerCollection`泛型接口的集合。为了说明这一点，我们运行程序两次，第二次使用`ConcurrentStack`作为底层集合。
- en: Workers get work items by iterating over the `GetConsumingEnumerable` method
    call result on a blocking collection. If there are no items inside the collection,
    the iterator will just block the worker thread until an item is posted to the
    collection. The cycle ends when the producer calls the `CompleteAdding` method
    on the collection. It signals that the work is done.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 工作者通过迭代阻塞集合上的`GetConsumingEnumerable`方法调用结果来获取工作项。如果集合中没有项目，迭代器将阻塞工作者线程，直到有项目发布到集合中。当生产者在集合上调用`CompleteAdding`方法时，循环结束。这表示工作已完成。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is very easy to make a mistake and just iterate over `BlockingCollection`
    as it implements `IEnumerable` itself. Do not forget to use `GetConsumingEnumerable`,
    or else you will just iterate over a "snapshot" of a collection and get completely
    unexpected program behavior.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易犯一个错误，只是迭代`BlockingCollection`，因为它本身实现了`IEnumerable`。不要忘记使用`GetConsumingEnumerable`，否则你将只是迭代集合的“快照”，并得到完全意想不到的程序行为。
- en: The workload producer inserts the tasks into `BlockingCollection` and then calls
    the `CompleteAdding` method, which causes all the workers to complete. Now in
    the program output we see two result sequences illustrating the difference between
    the concurrent queue and stack collections.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载生产者将任务插入`BlockingCollection`，然后调用`CompleteAdding`方法，导致所有工作人员完成。现在在程序输出中，我们看到两个结果序列，说明并发队列和堆栈集合之间的区别。
