["```cs\npublic void BookConcert(string concert, bool standing)\n{\n    if (standing)\n   {\n        // Issue standing ticket.\n    }\n    else\n    {\n        // Issue sitting ticket.\n    }\n}\n```", "```cs\nprivate void BooleanBlindnessConcertBooking()\n{\n    var booking = new ProblemCode.ConcertBooking();\n    booking.BookConcert(\"Solitary Experiments\", true);\n}\n```", "```cs\n[Flags]\ninternal enum TicketType\n{\n    Seated,\n    Standing\n}\n```", "```cs\ninternal void BookConcert(string concert, TicketType ticketType)\n{\n    if (ticketType == TicketType.Seated)\n    {\n        // Issue seated ticket.\n    }\n    else\n    {\n        // Issue standing ticket.\n    }\n}\n```", "```cs\nprivate void ClearSightedConcertBooking()\n{\n    var booking = new RefactoredCode.ConcertBooking();\n    booking.BookConcert(\"Chrom\", TicketType.Seated);\n}\n```", "```cs\npublic int Add(int x, int y)\n{\n    return x + y;\n}\n\npublic double Add(double x, double y)\n{\n    return x + y;\n}\n\npublic float Add(float x, float y)\n{\n    return x + y;\n}\n```", "```cs\npublic T Add<T>(T x, T y)\n{\n    dynamic a = x;\n    dynamic b = y;\n    return a + b;\n}\n```", "```cs\nvar addition = new RefactoredCode.Maths();\naddition.Add<int>(1, 2);\naddition.Add<double>(1.2, 3.4);\naddition.Add<float>(5.6f, 7.8f);\n```", "```cs\n[InstrumentationAspect]\npublic class Mutant\n{\n    public int IntegerSquaredSum(List<int> integers)\n    {\n        var squaredSum = 0;\n        foreach (var integer in integers)\n        {\n            squaredSum += integer * integer;\n        }\n        return squaredSum;\n    }\n}\n```", "```cs\n[InstrumentationAspect]\npublic class Function\n{\n    public int IntegerSquaredSum(List<int> integers)\n    {\n            return integers.Sum(integer => integer * integer);\n    }\n}\n```", "```cs\nMethod: IntegerSquaredSum, Start Time: 01/07/2020 11:41:43\nMethod: IntegerSquaredSum, Stop Time: 01/07/2020 11:41:43, Duration: 00:00:00.0005489\nMethod: IntegerSquaredSum, Start Time: 01/07/2020 11:41:43\nMethod: IntegerSquaredSum, Stop Time: 01/07/2020 11:41:43, Duration: 00:00:00.0000027\n```", "```cs\npublic class Adaptee\n{\n    public void AdapteeOperation()\n    {\n        Console.WriteLine($\"AdapteeOperation() has just executed.\");\n    }\n}\n```", "```cs\npublic class Target\n{\n    public virtual void Operation()\n    {\n        Console.WriteLine(\"Target.Operation() has executed.\");\n    }\n}\n```", "```cs\npublic class Adapter : Target\n{\n    private readonly Adaptee _adaptee = new Adaptee();\n\n    public override void Operation()\n    {\n        _adaptee.AdapteeOperation();\n    }\n}\n```", "```cs\n    public class Client\n    {\n        public void Operation()\n        {\n            Target target = new Adapter();\n            target.Operation();\n        }\n    }\n```", "```cs\npublic interface IService\n{\n    void Operation();\n}\n```", "```cs\npublic class Dependency : IService\n{\n    public void Operation()\n    {\n        Console.WriteLine(\"Dependency.Operation() has executed.\");\n    }\n}\n```", "```cs\npublic class LooselyCoupled\n{\n    private readonly IService _service;\n\n    public LooselyCoupled(IService service)\n    {\n        _service = service;\n    }\n\n    public void DoWork()\n    {\n        _service.Operation();\n    }\n}\n```", "```cs\n[Flags]\npublic enum Report\n{\n    StaffShiftPattern,\n    EndofMonthSalaryRun,\n    HrStarters,\n    HrLeavers,\n    EndofMonthSalesFigures,\n    YearToDateSalesFigures\n}\n```", "```cs\npublic void RunReport(Report report)\n{\n    switch (report)\n    {\n        case Report.EndofMonthSalaryRun:\n            Console.WriteLine(\"Running End of Month Salary Run Report.\");\n            break;\n        case Report.EndofMonthSalesFigures:\n            Console.WriteLine(\"Running End of Month Sales Figures Report.\");\n            break;\n        case Report.HrLeavers:\n            Console.WriteLine(\"Running HR Leavers Report.\");\n            break;\n        case Report.HrStarters:\n            Console.WriteLine(\"Running HR Starters Report.\");\n            break;\n        case Report.StaffShiftPattern:\n            Console.WriteLine(\"Running Staff Shift Pattern Report.\");\n            break;\n        case Report.YearToDateSalesFigures:\n            Console.WriteLine(\"Running Year to Date Sales Figures Report.\");\n            break;\n        default:\n            Console.WriteLine(\"Report unrecognized.\");\n            break;\n    }\n}\n```", "```cs\npublic interface IReportFactory\n{\n    void Run();\n}\n```", "```cs\npublic class StaffShiftPatternReport : IReportFactory\n{\n    public void Run()\n    {\n        Console.WriteLine(\"Running Staff Shift Pattern Report.\");\n    }\n}\n```", "```cs\npublic class ReportRunner\n{\n    public void RunReport(Report report)\n    {\n        var reportName = $\"CH13_CodeRefactoring.RefactoredCode.{report}Report, CH13_CodeRefactoring\";\n        var factory = Activator.CreateInstance(\n            Type.GetType(reportName) ?? throw new InvalidOperationException()\n        ) as IReportFactory;\n        factory?.Run();\n    }\n}\n```", "```cs\npublic string GetHrReport(string reportName)\n{\n    if (reportName.Equals(\"Staff Joiners Report\"))\n        return \"Staff Joiners Report\";\n    else if (reportName.Equals(\"Staff Leavers Report\"))\n        return \"Staff Leavers Report\";\n    else if (reportName.Equals(\"Balance Sheet Report\"))\n        return \"Balance Sheet Report\";\n}\n```", "```cs\npublic abstract class ReportBase\n{\n    public abstract void Print();\n}\n```", "```cs\n    internal class NewStartersReport : ReportBase\n    {\n        public override void Print()\n        {\n            Console.WriteLine(\"Printing New Starters Report.\");\n        }\n    }\n```", "```cs\n    public class LeaversReport : ReportBase\n    {\n        public override void Print()\n        {\n            Console.WriteLine(\"Printing Leavers Report.\");\n        }\n    }\n```", "```cs\nReportBase newStarters = new NewStartersReport();\nnewStarters.Print();\n\nReportBase leavers = new LeaversReport();\nleavers.Print();\n```", "```cs\npublic class Authentication\n{\n    private bool _isAuthenticated = false;\n\n    public void Login(ICredentials credentials)\n    {\n        _isAuthenticated = true;\n    }\n\n    public void Logout()\n    {\n        _isAuthenticated = false;\n    }\n\n    public bool IsAuthenticated()\n    {\n        return _isAuthenticated;\n    }\n}\n```", "```cs\npublic class Authorization\n{\n    private Authentication _authentication;\n\n    public Authorization(Authentication authentication)\n    {\n        _authentication = authentication;\n    }\n\n    public void Login(ICredentials credentials)\n    {\n        _authentication.Login(credentials);\n    }\n\n    public void Logout()\n    {\n        _authentication.Logout();\n    }\n\n    public bool IsAuthenticated()\n    {\n        return _authentication.IsAuthenticated();\n    }\n\n    public bool IsAuthorized(string role)\n    {\n        return IsAuthenticated && role.Contains(\"Administrator\");\n    }\n}\n```", "```cs\npublic class Authorization\n{\n    private ProblemCode.Authentication _authentication;\n\n    public Authorization(ProblemCode.Authentication authentication)\n    {\n        _authentication = authentication;\n    }\n\n    public bool IsAuthorized(string role)\n    {\n        return _authentication.IsAuthenticated() && role.Contains(\"Administrator\");\n    }\n}\n```"]