["```java\nString URL = \"jdbc:postgresql://localhost/javaintro\";\nProperties prop = new Properties( );\n//prop.put( \"user\", \"java\" );\n//prop.put( \"password\", \"secretPass123\" );\ntry {\n  Connection conn = DriverManager.getConnection(URL, prop);\n} catch(SQLException ex){\n  ex.printStackTrace();\n}\n```", "```java\nPGSimpleDataSource source = new PGSimpleDataSource();\nsource.setServerName(\"localhost\");\nsource.setDatabaseName(\"javaintro\");\nsource.setLoginTimeout(10);\nConnection conn = source.getConnection();\n```", "```java\nPGConnectionPoolDataSource source = new PGConnectionPoolDataSource();\n```", "```java\nConnection conn = getConnection();\ntry {\n  //use object conn here \n} finally {\n  if(conn != null){\n    conn.close();\n  }\n}\n```", "```java\ntry (Connection conn = getConnection()) {\n  //use object conn here\n}\ncatch(SQLException ex) {\n  ex.printStackTrace();\n}\n```", "```java\nConnection conn = getConnection();\ntry {\n  //use object conn here \n} finally {\n  if(conn != null){\n    try {\n      conn.close();\n    } catch(SQLException ex){\n      //do here what has to be done\n    }\n  }\n}\n```", "```java\nConnection conn = getConnection();\ntry {\n  //use object conn here \n} catch(SQLException ex) {\n  ex.printStackTrace();\n} finally {\n  if(conn != null){\n    try {\n      conn.close();\n    } catch(SQLException ex){\n      //do here what has to be done\n    }\n  }\n}\n```", "```java\nConnection conn = getConnection();\ntry {\n  Statement statement = conn.createStatement();\n  try{\n    //use statement here\n  } catch(SQLException ex){\n    //some code here\n  } finally {\n    if(statement != null){\n      try {\n      } catch (SQLException ex){\n        //some code here\n      }\n    } \n  }\n} catch(SQLException ex) {\n  ex.printStackTrace();\n} finally {\n  if(conn != null){\n    try {\n      conn.close();\n    } catch(SQLException ex){\n      //do here what has to be done\n    }\n  }\n}\n```", "```java\ntry (Connection conn = getConnection();\n  Statement statement = conn.createStatement()) {\n  //use statement here\n} catch(SQLException ex) {\n  ex.printStackTrace();\n}\n```", "```java\nConnection conn = getConnection();\ntry (conn; Statement statement = conn.createStatement()) {\n  //use statement here\n} catch(SQLException ex) {\n  ex.printStackTrace();\n}\n```", "```java\nCREATE USER java SUPERUSER;\nCREATE DATABASE javaintro OWNER java;\n```", "```java\nDROP USER java;\nDROP DATABASE javaintro;\n```", "```java\nCREATE TABLE tablename (\n  column1 type1,\n  column2 type2,\n  column3 type3,\n  ....\n);\n```", "```java\nCREATE TABLE person (\n  id SERIAL PRIMARY KEY,\n  first_name VARCHAR NOT NULL,\n  last_name VARCHAR NOT NULL,\n  dob DATE NOT NULL\n);\n```", "```java\nclass Person {\n  private String firstName, lastName;\n  private LocalDate dob;\n  public Person(String firstName, String lastName, LocalDate dob) {\n    this.firstName = firstName == null ? \"\" : firstName;\n    this.lastName = lastName == null ? \"\" : lastName;\n    if(dob == null){\n      throw new RuntimeException(\"Date of birth is null\");\n    }\n    this.dob = dob;\n  }\n  public String getFirstName() { return firstName; }\n  public String getLastName() { return lastName; }\n  public LocalDate getDob() { return dob; }\n}\n```", "```java\nCREATE TABLE person (\n  first_name VARCHAR NOT NULL,\n  last_name VARCHAR NOT NULL,\n  dob DATE NOT NULL,\n  PRIMARY KEY (first_name, last_name, dob)\n);\n```", "```java\npublic class Person {\n  private String firstName, lastName;\n  private LocalDate dob;\n  private int id;\n  public Person(int id, String firstName, \n                                  String lastName, LocalDate dob) {\n    this(firstName, lastName, dob);\n    this.id = id;\n  }   \n  public Person(String firstName, String lastName, LocalDate dob) {\n    this.firstName = firstName == null ? \"\" : firstName;\n    this.lastName = lastName == null ? \"\" : lastName;\n    if(dob == null){\n      throw new RuntimeException(\"Date of birth is null\");\n    }\n    this.dob = dob;\n  }\n  public String getFirstName() { return firstName; }\n  public String getLastName() { return lastName; }\n  public LocalDate getDob() { return dob; }\n}\n```", "```java\nDROP table person;\n```", "```java\nALTER table person add column address VARCHAR;\n```", "```java\nALTER table person add column IF NOT EXISTS address VARCHAR;\n```", "```java\nCREATE INDEX idx_names ON person ((lower(first_name), lower(last_name));\n```", "```java\ndrop index idx_names;\n```", "```java\nALTER table person DROP column address;\n```", "```java\n<dependency>\n  <groupId>org.postgresql</groupId>\n  <artifactId>postgresql</artifactId>\n  <version>42.2.2</version>\n</dependency>\n```", "```java\nINSERT INTO table_name (column1,column2,column3,...)\n   VALUES (value1,value2,value3,...);\n```", "```java\nINSERT INTO table_name (column1,column2,column3,...)\n VALUES (value1,value2,value3,...), (value11,value21,value31,...), ...;\n```", "```java\nvoid executeStatement(String sql){\n  Connection conn = getConnection();\n  try (conn; Statement st = conn.createStatement()) {\n    st.execute(sql);\n  } catch (SQLException ex) {\n    ex.printStackTrace();\n  }\n}\n```", "```java\nexecuteStatement(\"insert into person (first_name, last_name, dob)\" +\n                             \" values ('Bill', 'Grey', '1980-01-27')\");\n```", "```java\n        void executeStatement(String sql){\n          Connection conn = getConnection();\n          try (conn; Statement st = conn.createStatement()) {\n            System.out.println(st.execute(sql));      //prints: false\n            System.out.println(st.getResultSet());    //prints: null\n            System.out.println(st.getUpdateCount());  //prints: 1\n          } catch (SQLException ex) {\n            ex.printStackTrace();\n          }\n        }\n```", "```java\n        void executeStatement(String sql){\n          Connection conn = getConnection();\n          try (conn; Statement st = conn.createStatement()) {\n             System.out.println(st.executeQuery(sql)); //prints: ResultSet\n             System.out.println(st.getResultSet());    //prints: ResultSet\n             System.out.println(st.getUpdateCount());  //prints: -1\n          } catch (SQLException ex) {\n             ex.printStackTrace();\n          }\n        }\n```", "```java\n        void executeStatement4(String sql){\n          Connection conn = getConnection();\n          try (conn; Statement st = conn.createStatement()) {\n            System.out.println(st.executeUpdate(sql));//prints: 1\n            System.out.println(st.getResultSet());    //prints: null\n            System.out.println(st.getUpdateCount());  //prints: 1\n          } catch (SQLException ex) {\n            ex.printStackTrace();\n          }\n        }\n```", "```java\nSELECT column_name, column_name\nFROM table_name WHERE some_column = some_value;\n```", "```java\nSELECT * FROM table_name WHERE some_column=some_value;\n```", "```java\nWHERE column_name operator value\nOperator:\n   =   Equal\n   <>  Not equal. In some versions of SQL, !=\n   >   Greater than\n   <   Less than\n   >=  Greater than or equal\n   <=  Less than or equal\n   IN  Specifies multiple possible values for a column\n   LIKE  Specifies the search pattern\n   BETWEEN  Specifies the inclusive range of vlaues in a column\n```", "```java\nConnection conn = getConnection();\ntry (conn; Statement st = conn.createStatement()) {\n  ResultSet rs = st.executeQuery(\"select first_name from person\");\n  while (rs.next()){\n    System.out.print(rs.getString(1) + \" \"); //prints: Jim Bill\n  }\n} catch (SQLException ex) {\n  ex.printStackTrace();\n}\n```", "```java\nselect * from person;\n```", "```java\nUPDATE table_name SET column1=value1,column2=value2,... WHERE-clause;\n```", "```java\nupdate person set first_name = 'Jim' where last_name = 'Adams'\n```", "```java\nDELETE FROM table_name WHERE-clause;\n```", "```java\ndelete from person where first_name = 'Jim';\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n  ResultSet rs = st.executeQuery(sql);\n```", "```java\ntry (conn; PreparedStatement st = conn.prepareStatement(sql)) {\n  ResultSet rs = st.executeQuery();\n```", "```java\nList<Person> selectPersonsByFirstName(String sql, String searchValue){\n  List<Person> list = new ArrayList<>();\n  Connection conn = getConnection();\n  try (conn; PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setString(1, searchValue);\n    ResultSet rs = st.executeQuery();\n    while (rs.next()){\n      list.add(new Person(rs.getInt(\"id\"),\n               rs.getString(\"first_name\"),\n               rs.getString(\"last_name\"),\n               rs.getDate(\"dob\").toLocalDate()));\n    }\n  } catch (SQLException ex) {\n    ex.printStackTrace();\n  }\n  return list;\n}\n```", "```java\nString sql = \"select * from person where first_name = ?\";\nList<Person> list = selectPersonsByFirstName(sql, \"Jim\");\nfor(Person person: list){\n  System.out.println(person);\n}\n```", "```java\nPerson{firstName='Jim', lastName='Adams', dob=1999-08-23, id=1}\n```", "```java\n@Override\npublic String toString() {\n  return \"Person{\" +\n          \"firstName='\" + firstName + '\\'' +\n          \", lastName='\" + lastName + '\\'' +\n          \", dob=\" + dob +\n          \", id=\" + id +\n          '}';\n}\n```", "```java\nString sql = \"select * from person where last_name = ?\";\nList<Person> list = selectPersonsByFirstName(sql, \"Adams\");\nfor(Person person: list){\n    System.out.println(person);\n}\n```", "```java\nselect distinct first_name from person;\n```"]