- en: IoTFW.js - II
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IoTFW.js - II
- en: In the previous chapter, we have seen the basic setup among Raspberry Pi, broker,
    API engine, and the web app. In this chapter, we will work on the remaining part
    of the framework. We will also build a simple example that involves sensing and
    actuating. We will read temperature and humidity using a temperature and humidity
    sensor and also turn on/off an LED connected to our Raspberry Pi using web, desktop,
    or mobile app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经看到了树莓派、代理、API引擎和Web应用程序之间的基本设置。在本章中，我们将继续处理框架的其余部分。我们还将构建一个涉及传感和执行的简单示例。我们将使用温湿度传感器读取温度和湿度，并使用Web、桌面或移动应用程序打开/关闭连接到我们的树莓派的LED。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Updating the API engine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新API引擎
- en: Integrating the API engine with web app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将API引擎与Web应用程序集成
- en: Building an end-to-end example using DHT11 and LED
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DHT11和LED构建端到端示例
- en: Building a desktop app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建桌面应用程序
- en: Building a mobile app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建移动应用程序
- en: Updating the API engine
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新API引擎
- en: Now that we are done with the web app development, we will update the API engine
    to add the device's API and data service, along with web sockets.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了Web应用程序的开发，我们将更新API引擎以添加设备的API和数据服务，以及Web套接字。
- en: 'Open `api-engine/server/routes.js`; we will add two routes here. Update `api-engine/server/routes.js`,
    as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`api-engine/server/routes.js`；我们将在这里添加两个路由。更新`api-engine/server/routes.js`如下：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we will add the definitions for these routes. Inside the `api-engine/server/api`
    folder, create a new folder named `device`. Inside the `device` folder, create
    a new file named `index.js`. Update `api-engine/server/api/device/index.js`, as
    follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为这些路由添加定义。在`api-engine/server/api`文件夹内，创建一个名为`device`的新文件夹。在`device`文件夹内，创建一个名为`index.js`的新文件。更新`api-engine/server/api/device/index.js`如下：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we have added five routes, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了五个路由，如下：
- en: Get all devices
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有设备
- en: Delete a device
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除设备
- en: Update a device
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新设备
- en: Get one device
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个设备
- en: Create a device
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个设备
- en: 'Next, create another file inside the `api-engine/server/api/device/` folder
    named `device.model.js`. This file will consist of the mongoose schema for the
    device collection. Update `api-engine/server/api/device/device.model.js`, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`api-engine/server/api/device/`文件夹内创建另一个文件，命名为`device.model.js`。这个文件将包含设备集合的mongoose模式。更新`api-engine/server/api/device/device.model.js`如下：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, the controller logic. Create a file named `device.controller.js` inside
    the `api-engine/server/api/device` folder and update `api-engine/server/api/device/device.controller.js`,
    as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，控制器逻辑。在`api-engine/server/api/device`文件夹内创建一个名为`device.controller.js`的文件，并更新`api-engine/server/api/device/device.controller.js`如下：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we have defined the logic for the routes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经定义了路由的逻辑。
- en: The device API manages the device for us. To manage the data for each device,
    we will use this collection.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 设备API为我们管理设备。为了管理每个设备的数据，我们将使用这个集合。
- en: 'Now, we will define the data APIs. Create a new folder named `data` inside
    the `api-engine/server/api` folder. Inside the `api-engine/server/api/data` folder,
    create a new file named `index.js` and update `api-engine/server/api/data/index.js`,
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义数据API。在`api-engine/server/api`文件夹内创建一个名为`data`的新文件夹。在`api-engine/server/api/data`文件夹内，创建一个名为`index.js`的新文件，并更新`api-engine/server/api/data/index.js`如下：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have defined two routes here: one to view data based on a device ID and
    another to create data. The view data route returns the data from a device that
    is limited to the number passed in as part of the request. If you remember, in
    the `web-app/src/app/services/data.service.ts`, we have defined the `dataLimit`
    class variable as `30`. This is the number of records we get, at a given time,
    from the API.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里定义了两个路由：一个用于基于设备ID查看数据，另一个用于创建数据。查看数据路由返回作为请求的一部分传递的数量限制的设备数据。如果您记得，在`web-app/src/app/services/data.service.ts`中，我们已经将`dataLimit`类变量定义为`30`。这是我们从API中一次获取的记录数。
- en: 'Next, for the mongoose schema, create a new file named `data.model.js` inside
    the `api-engine/server/api/data` folder and update `api-engine/server/api/data/data.model.js`,
    as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对于mongoose模式，在`api-engine/server/api/data`文件夹内创建一个名为`data.model.js`的新文件，并更新`api-engine/server/api/data/data.model.js`如下：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, the controller logic for the data API. Create a file named `data.controller.js`
    inside `api-engine/server/api/data` and update `api-engine/server/api/data/data.controller.js`,
    as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，数据API的控制器逻辑。在`api-engine/server/api/data`文件夹内创建一个名为`data.controller.js`的文件，并更新`api-engine/server/api/data/data.controller.js`如下：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we have defined two methods: one for getting data for a device and one
    for creating a new data record for a device.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了两种方法：一种是为设备获取数据，另一种是为设备创建新的数据记录。
- en: For the data API, we will implement sockets as well, so when a new record comes
    from the Raspberry Pi, we immediately notify the web app, desktop app, or mobile
    app so that the data can be displayed in real time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据API，我们也将实现套接字，因此当来自树莓派的新记录时，我们立即通知Web应用程序、桌面应用程序或移动应用程序，以便数据可以实时显示。
- en: As we see from the preceding code, if the incoming topic is `LED`, we will call
    the `sendLEDData()`, which in turns publishes the data to the device.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中可以看到，如果传入的主题是`LED`，我们将调用`sendLEDData()`，它会将数据发布到设备。
- en: 'Create a file named `data.socket.js` inside the `api-engine/server/api/data`
    folder and update `api-engine/server/api/data/data.socket.js`, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api-engine/server/api/data`文件夹内创建一个名为`data.socket.js`的文件，并更新`api-engine/server/api/data/data.socket.js`如下：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will take care of sending a new data record as it successfully gets saved
    in the database.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将负责在成功保存到数据库后发送新的数据记录。
- en: 'Next, we need to add the socket to the socket configuration. Open `api-engine/server/config/socketio.js`
    and update it, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将socket添加到socket配置中。打开`api-engine/server/config/socketio.js`并进行更新如下：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we are using `socketio-jwt` to validate the socket connection to see
    if it has JWT. If a valid JWT is not provided, we do not allow the client to connect.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用`socketio-jwt`来验证套接字连接，以查看它是否具有JWT。如果没有提供有效的JWT，我们不允许客户端连接。
- en: 'With this, we are done with the required changes to the API engine. Save all
    the files and launch the API engine by running the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了对API引擎的所需更改。保存所有文件并通过运行以下命令启动API引擎：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will launch the API engine. In the next section, we will test the integration
    between the web app and API engine and continue our walk through from the previous
    section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动API引擎。在下一节中，我们将测试Web应用程序和API引擎之间的集成，并继续从上一节开始的步骤。
- en: Integrating web app and API engine
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成Web应用程序和API引擎
- en: 'Launch the broker, API engine, and web app. Once all of them are successfully
    launched, navigate to `http://localhost:4200/`. Log in with the credentials we
    have created. Once we have successfully logged in, we should see the following
    screen:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 启动代理商、API引擎和Web应用程序。一旦它们都成功启动，导航到`http://localhost:4200/`。使用我们创建的凭据登录。一旦成功登录，我们应该看到以下屏幕：
- en: '![](../images/00032.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00032.jpeg)'
- en: 'Which is true, as we do not have any devices in our account. Click on Add Device
    and we should see something as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是真的，因为我们的账户中没有任何设备。点击添加设备，我们应该看到如下内容：
- en: '![](../images/00033.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00033.jpeg)'
- en: Add a new device by giving it a name. I named my device `Pi 1` and added the
    mac address. We will use the mac address of the device as a unique way of identifying
    the device.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过给设备命名来添加一个新设备。我给我的设备命名为`Pi 1`并添加了mac地址。我们将使用设备的mac地址作为识别设备的唯一方式。
- en: 'Click on Create and we should see a new device created, it will redirect us
    to the home page and display the newly created device, which can be seen in the
    following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 点击创建，我们应该看到一个新设备被创建，它将重定向我们到主页并显示新创建的设备，可以在以下截图中看到：
- en: '![](../images/00034.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00034.jpeg)'
- en: 'Now, when we click on the View button, we should see the following page:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们点击查看按钮时，我们应该看到以下页面：
- en: '![](../images/00035.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00035.jpeg)'
- en: In the examples across this book, we will keep updating this template and keep
    modifying it as we need to. For now, this is a dummy template represented by `web-app/src/app/device/device.component.html`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的示例中，我们将不断更新此模板，并根据需要进行修改。目前，这是一个由`web-app/src/app/device/device.component.html`表示的虚拟模板。
- en: 'If we open the developer tools and look at the network tab WS section, as shown
    in the following screenshot, we should be able to see that a web socket request
    is sent to our server with the JWT token:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开开发者工具并查看网络选项卡WS部分，如下截图所示，我们应该能够看到一个带有JWT令牌的Web套接字请求被发送到我们的服务器：
- en: '![](../images/00036.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00036.jpeg)'
- en: With this, we are done with stitching the Raspberry Pi with the broker, the
    broker with the API engine, and the API engine with the web app. To complete the
    entire round trip of data from the device to the web app, we will implement a
    simple use case in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了将树莓派与代理商、代理商与API引擎以及API引擎与Web应用程序连接起来。为了完成从设备到Web应用程序的整个数据往返，我们将在下一节实现一个简单的用例。
- en: Testing an end-to-end flow using DHT11 and LED
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DHT11和LED测试端到端流程
- en: Before we start working on the desktop and mobile app, we will implement an
    end-to-end data flow for the Raspberry Pi to the web app and back.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始处理桌面和移动应用程序之前，我们将为树莓派到Web应用程序的端到端数据流实现一个流程。
- en: The example that we will work on implements an actuator and a sensor use case.
    We will connect an LED to the Raspberry Pi and turn the LED on/off from the web
    app, and we will also connect a DHT11 temperature sensor to the Raspberry Pi and
    view its values in real time on the web app.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要处理的示例实现了执行器和传感器用例。我们将把LED连接到树莓派，并从Web应用程序中打开/关闭LED，我们还将把DHT11温度传感器连接到树莓派，并在Web应用程序中实时查看其值。
- en: We will get started with the Raspberry Pi, implement the required logic there;
    next, work with the API engine, make the required changes, and finally the web
    app to represent the data.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始使用树莓派，在那里实现所需的逻辑；接下来，与API引擎一起工作，进行所需的更改，最后是Web应用程序来表示数据。
- en: Setting up and updating the Raspberry Pi
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和更新树莓派
- en: 'First, we will set up the circuit, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将按照以下方式设置电路：
- en: '![](../images/00037.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00037.jpeg)'
- en: 'Now, we will make the following connections:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进行以下连接：
- en: '| **Source pin** | **Component pin** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **源引脚** | **组件引脚** |'
- en: '| Raspberry Pi pin 1 - 3.3V | Breadboard + railing |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 树莓派引脚1 - 3.3V | 面包板+栏杆 |'
- en: '| Raspberry Pi pin 6 - Ground | Breadboard - railing |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 树莓派引脚6 - 地面 | 面包板-栏杆 |'
- en: '| Raspberry Pi pin 3 - GPIO 2 | Temperature sensor signal pin |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 树莓派引脚3 - GPIO 2 | 温度传感器信号引脚 |'
- en: '| Raspberry Pi pin 12 - GPIO 18 | LED anode pin |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 树莓派引脚12 - GPIO 18 | LED阳极引脚 |'
- en: '| LED cathode pin | Breadboard - railing |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| LED阴极引脚 | 面包板-栏杆 |'
- en: '| Temperature sensor + pin | Breadboard + railing |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 温度传感器+引脚 | 面包板+栏杆 |'
- en: '| Temperature sensor - pin | Breadboard - railing |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 温度传感器-引脚 | 面包板-栏杆 |'
- en: We have used a current limiting resistor of 220 ohms between pin 12/GPIO 18
    and the anode of a LED pin.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在引脚12/GPIO 18和LED引脚的阳极之间使用了一个220欧姆的限流电阻。
- en: 'Once this connection has been set up, we will write the required logic. On
    the Raspberry Pi, open the `pi-client/index.js` file and update it, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立了这种连接，我们将编写所需的逻辑。在树莓派上，打开`pi-client/index.js`文件并更新如下：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding code, we have added a couple of node modules, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们添加了一些节点模块，如下所示：
- en: '`rpi-dht-sensor`: [https://www.npmjs.com/package/rpi-dht-sensor](https://www.npmjs.com/package/rpi-dht-sensor);
    this module will help us in reading the values of the DHT11 sensor'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rpi-dht-sensor`: [https://www.npmjs.com/package/rpi-dht-sensor](https://www.npmjs.com/package/rpi-dht-sensor)；这个模块将帮助我们读取DHT11传感器的值'
- en: '`rpio`: [https://www.npmjs.com/package/rpio](https://www.npmjs.com/package/rpio);
    this module will help us manage GPIOs on the board, using which we will manage
    the LED'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rpio`: [https://www.npmjs.com/package/rpio](https://www.npmjs.com/package/rpio)；这个模块将帮助我们管理板上的GPIO，我们将使用它来管理LED'
- en: We have written a `setInterval()` that keeps running forever, every 3 seconds.
    Inside the `callback`, we call the `getDHT11Values()` that read the temperature
    and humidity from the sensor. If there is any change in the temperature and humidity
    values, we publish this data to the broker.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一个`setInterval()`，它会每3秒运行一次。在`callback`中，我们调用`getDHT11Values()`来从传感器读取温度和湿度。如果温度和湿度值发生变化，我们就会将这些数据发布到代理。
- en: Also, notice the `client.on('message')`; here, we have added another `if` condition
    and are listening for the `LED` topic. If the current message is from the `LED`
    topic, we know that we will receive either a `1` or `0` indicating to switch on
    or switch off the LED.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意`client.on('message')`；在这里，我们添加了另一个`if`条件，并监听`LED`主题。如果当前消息来自`LED`主题，我们知道我们将收到一个`1`或`0`，表示打开或关闭LED。
- en: 'Now, finally we will install the two modules, run:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将安装这两个模块，运行：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Save all the files and run `npm start`; this should connect the Raspberry Pi
    to the broker and subscribe to the `LED` topic, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并运行`npm start`；这应该将树莓派连接到代理并订阅`LED`主题，如下所示：
- en: '![](../images/00038.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00038.jpeg)'
- en: 'Additionally, if we see the console out from the Raspberry Pi, we should see
    something as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们从树莓派的控制台输出中看到，应该会看到以下内容：
- en: '![](../images/00039.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00039.jpeg)'
- en: Whenever there is a change in the data, the data is published to the broker.
    We have not yet implemented the logic for reacting to this data on the API engine,
    which we will do in the next section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每当数据发生变化时，数据就会发布到代理。我们还没有实现对API引擎上的数据做出反应的逻辑，这将在下一节中完成。
- en: Updating the API engine
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新API引擎
- en: 'Now, we will add the required code to the MQTT client running on the API engine
    to handle the data from the device. Update `api-engine/server/mqtt/index.js`,
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向在API引擎上运行的MQTT客户端添加所需的代码来处理来自设备的数据。更新`api-engine/server/mqtt/index.js`，如下所示：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we have subscribed to a topic named `dht11`, to listen for a message published
    by the Raspberry Pi about the temperature and humidity values. We have also exposed
    another method named `sendLEDData` that will accept the data that needs to be
    sent to the device.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们订阅了一个名为`dht11`的主题，以监听树莓派发布的关于温度和湿度值的消息。我们还公开了另一个名为`sendLEDData`的方法，用于接受需要发送到设备的数据。
- en: 'If we save all the files and restart the API engine, we should see something
    as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存所有文件并重新启动API引擎，应该会看到以下内容：
- en: '![](../images/00040.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00040.jpeg)'
- en: 'From the preceding screenshot, we can see that the data comes from the Raspberry
    Pi and gets saved to MongoDB. To validate if the data is saved, we can head over
    to the `mlab` DB and look for a collection named `datas` and it should look as
    follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的截图中，我们可以看到数据来自树莓派并保存到MongoDB。要验证数据是否已保存，我们可以转到`mlab`数据库并查找名为`datas`的集合，应该如下所示：
- en: '![](../images/00041.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00041.jpeg)'
- en: Whenever the data is saved successfully, the same copy will be sent to the web
    app as well. In the next section, we will display this data in real time on the
    web dashboard.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每当数据成功保存时，相同的副本也将发送到Web应用程序。在下一节中，我们将在Web仪表板上实时显示这些数据。
- en: Updating the web app
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Web应用程序
- en: In this section, we will develop the code needed to display the data in real
    time inside the web app, as well as provide an interface, using which we can turn
    on/off the LED.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发在Web应用程序中实时显示数据所需的代码，以及提供一个界面，通过该界面我们可以打开/关闭LED。
- en: We will get started by adding a toggle switch component. We will use the `ngx-ui-switch`
    ([https://github.com/webcat12345/ngx-ui-switch](https://github.com/webcat12345/ngx-ui-switch))
    for the same.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先添加一个切换开关组件。我们将使用`ngx-ui-switch` ([https://github.com/webcat12345/ngx-ui-switch](https://github.com/webcat12345/ngx-ui-switch))。
- en: 'From inside the `web-app-base` folder, run the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从`web-app-base`文件夹内运行以下命令：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will use the `ng2-charts` [https://valor-software.com/ng2-charts/](https://valor-software.com/ng2-charts/)
    for plotting charts of our temperature and humidity values. We will install this
    module as well by running the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ng2-charts` [https://valor-software.com/ng2-charts/](https://valor-software.com/ng2-charts/)来绘制温度和湿度值的图表。我们也将通过运行以下命令安装这个模块：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will install the toggle switch and `ng2-charts` modules. Next, we need
    to add this to `@NgModule`. Open `web-app/src/app/app.module.ts` and add the following
    command to the imports:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装切换开关和`ng2-charts`模块。接下来，我们需要将其添加到`@NgModule`中。打开`web-app/src/app/app.module.ts`并将以下命令添加到imports中：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, add `UiSwitchModule` and `ChartsModule` to the imports array:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`UiSwitchModule`和`ChartsModule`添加到imports数组中：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once this is done, we need to import `chart.js` into our application. Open
    `web-app/.angular-cli.json` and update the `scripts` section, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们需要将`chart.js`导入到我们的应用程序中。打开`web-app/.angular-cli.json`并更新`scripts`部分，如下所示：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save all the files and restart the web app, if it is already running.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并重新启动Web应用程序，如果它已经在运行。
- en: Now, we can use this directive in the device component.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在设备组件中使用这个指令。
- en: 'In our current use case, we have to display the temperature and humidity values
    as well as provide a toggle switch to turn the LED on/off. For this, our template
    in `web-app/src/app/device/device.component.html` will be as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的用例中，我们需要显示温度和湿度值，并提供一个切换开关来打开/关闭LED。为此，我们在`web-app/src/app/device/device.component.html`中的模板将如下所示：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The required code for the `DeviceComponent` class: `web-app/src/app/device/device.component.ts`
    will be as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeviceComponent`类的所需代码：`web-app/src/app/device/device.component.ts`将如下所示：'
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The key methods to notice are as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的关键方法如下：
- en: '`getData()`: This method is used to get the last 30 records on page load. We
    are sending the data in the descending order from the API engine; hence we extract
    the last record and save it as the last record. We can use the remaining records
    to plot a chart if needed'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getData()`: 此方法用于在页面加载时获取最近的30条记录。我们从API引擎中以降序发送数据；因此我们提取最后一条记录并将其保存为最后一条记录。如果需要，我们可以使用剩余的记录来绘制图表'
- en: '`toggleChange()`: This method will get fired when the toggle switch is clicked.
    This method will send the data to the API engine to save it'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toggleChange()`: 当切换开关被点击时，将触发此方法。此方法将发送数据到API引擎以保存'
- en: '`socketInit()`: This method keeps listening to the data save event on the device.
    Using this, we update the `lastRecord` variable with the latest data from the
    device'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`socketInit()`: 此方法一直监听设备上的数据保存事件。使用此方法，我们将`lastRecord`变量更新为设备上的最新数据'
- en: '`genChart()`: This method takes the data collection and then plots a graph.
    When a new data arrives over the socket, we remove the last record in the data
    array and push the new record, keeping the total size of 30 records at all times'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genChart()`: 此方法获取数据集合，然后绘制图表。当新数据通过套接字到达时，我们会从数据数组中删除最后一条记录并推送新记录，始终保持30条记录的总数'
- en: With this, we are done with the development of the template needed to process
    this setup.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就完成了处理此设置所需的模板开发。
- en: Save all files, launch the broker, API engine, and the web app and then log
    in to the application and then navigate to the device page.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件，启动代理程序、API引擎和Web应用程序，然后登录应用程序，然后导航到设备页面。
- en: 'If everything is set up correctly, we should see the following screen:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置正确，我们应该看到以下屏幕：
- en: '![](../images/00042.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00042.jpeg)'
- en: Now, whenever the data comes via sockets, the chart updates automatically!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当数据通过套接字传输时，图表会自动更新！
- en: Now to test the LED, toggle the LED button to on and you should see that the
    LED that we have set up on the Raspberry Pi will light up and similarly if we
    turn it off, it will turn off the LED.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试LED，切换LED按钮到开启状态，您应该看到我们在树莓派上设置的LED会亮起，同样，如果我们关闭它，LED也会关闭。
- en: Building the desktop app and implementing an end-to-end flow
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建桌面应用程序并实现端到端流程
- en: Now that we are done with an end-to-end flow with the web app, we will extend
    the same to the desktop and mobile apps. We will start off by building a desktop
    client for the same API engine. So, if a user is more comfortable in using a desktop
    app over a web or mobile app, he/she could use this.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了与Web应用程序的端到端流程，我们将扩展到桌面和移动应用程序。我们将首先构建相同API引擎的桌面客户端。因此，如果用户更喜欢使用桌面应用程序而不是Web或移动应用程序，他/她可以使用这个。
- en: This desktop app, we will have all the same features as the web app.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个桌面应用程序将具有与Web应用程序相同的所有功能。
- en: For building the desktop app, we will use the electron ([https://electron.atom.io/](https://electron.atom.io/))
    framework. Using a Yeoman ([http://yeoman.io/](http://yeoman.io/)) generator named
    `generator-electron` ([https://github.com/sindresorhus/generator-electron](https://github.com/sindresorhus/generator-electron)),
    we will scaffold the base application. Then, we will build our web app and use
    the `dist` folder from that build as an input to the desktop app. All this will
    be more clear once we start working.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建桌面应用程序，我们将使用electron ([https://electron.atom.io/](https://electron.atom.io/))
    框架。使用名为`generator-electron` ([https://github.com/sindresorhus/generator-electron](https://github.com/sindresorhus/generator-electron))
    的Yeoman ([http://yeoman.io/](http://yeoman.io/)) 生成器，我们将创建基本应用程序。然后，我们将构建我们的Web应用程序，并使用该构建的`dist`文件夹作为桌面应用程序的输入。一旦我们开始工作，所有这些将更加清晰。
- en: 'To get started, run the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请运行以下命令：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will install the yeoman generator and the electron generator. Next, inside
    the `chapter2` folder, create a folder named `desktop-app` and then, open a new
    command prompt/terminal and run the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装yeoman生成器和electron生成器。接下来，在`chapter2`文件夹内，创建一个名为`desktop-app`的文件夹，然后，在新的命令提示符/终端中运行以下命令：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This wizard will ask a few questions and you can answer them accordingly:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个向导将询问一些问题，您可以相应地回答：
- en: '![](../images/00043.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00043.jpeg)'
- en: 'This will go ahead and install the required dependencies. Once the installation
    is completed, we should see a folder structure, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装所需的依赖项。安装完成后，我们应该看到以下文件夹结构：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With the `node_modules` folder present at the root.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有了根目录下的`node_modules`文件夹。
- en: Everything starts with `desktop-app/package.json` start script, which launches
    the `desktop-app/index.js`. `desktop-app/index.js` creates a new browser window
    and launches the `desktop-app/index.html` page.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都始于`desktop-app/package.json`的启动脚本，它启动`desktop-app/index.js`。`desktop-app/index.js`创建一个新的浏览器窗口，并启动`desktop-app/index.html`页面。
- en: 'To quickly test drive from inside the `desktop-app` folder, run the following
    command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`desktop-app`文件夹内快速测试驱动，请运行以下命令：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As a result, we should see the following screen:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应该看到以下屏幕：
- en: '![](../images/00044.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00044.jpeg)'
- en: 'Now, we will add the required code. At the root of the `desktop-app` folder,
    create a file named `freeport.js` and update `desktop-app/freeport.js`, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加所需的代码。在`desktop-app`文件夹的根目录下，创建一个名为`freeport.js`的文件，并更新`desktop-app/freeport.js`如下：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: With the preceding code, we will find a free port on the end user's machine
    and launch our web app inside the electron shell.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述代码，我们将在最终用户的计算机上找到一个空闲端口，并在electron外壳中启动我们的Web应用程序。
- en: 'Next, create a folder named `app` at the root of the `desktop-app` folder.
    We will dump files into this in a moment. Next, at the root of the `desktop-app`
    folder, create a file named `server.js`. Update `server.js`, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`desktop-app`文件夹的根目录下创建一个名为`app`的文件夹。我们将在这里倾倒文件。接下来，在`desktop-app`文件夹的根目录下，创建一个名为`server.js`的文件。更新`server.js`如下：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here, we listen to a free port and launch `index.html`. Now, all we need to
    do is update `createMainWindow()` in `desktop-app/index.js`, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们监听一个空闲端口并启动`index.html`。现在，我们需要做的就是更新`desktop-app/index.js`中的`createMainWindow()`如下：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That is all the setup we need.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要的所有设置。
- en: 'Now, head back to the terminal/prompt of the `web-app` folder (yes `web-app`,
    not `desktop-app`) and run the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到`web-app`文件夹的终端/提示符（是的`web-app`，而不是`desktop-app`），并运行以下命令：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will create a new folder inside the `web app` folder named `dist`. The
    contents of the `dist` folder should be on the following lines:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`web app`文件夹内创建一个名为`dist`的新文件夹。`dist`文件夹的内容应如下所示：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'All code we have written in the web app is finally bundled into the preceding
    files. We will grab all the files (not the `dist` folder) present inside the `dist`
    folder and then paste it inside the `desktop-app/app` folder. The final structure
    of the desktop app after the preceding changes will be as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在web应用程序中编写的所有代码最终都打包到了前述文件中。我们将获取`dist`文件夹内的所有文件（而不是`dist`文件夹），然后将其粘贴到`desktop-app/app`文件夹中。在进行前述更改后，桌面应用程序的最终结构将如下所示：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: From now on, we are just going to paste the contents of the `web-app/dist` folder
    into the `app` folder of the `desktop-app`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们只需将`web-app/dist`文件夹的内容粘贴到`desktop-app`的`app`文件夹中。
- en: 'To test drive, run the following command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行测试，请运行以下命令：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This will bring up the log in screen, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带来登录屏幕，如下所示：
- en: '![](../images/00045.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00045.jpeg)'
- en: 'If you see a pop up as shown previously, allow it. Once you have successfully
    logged in, you should be able to see all the devices in your account, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到之前显示的弹出窗口，请允许。成功登录后，您应该能够看到您帐户中的所有设备，如下所示：
- en: '![](../images/00046.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00046.jpeg)'
- en: 'And finally, the device information screen:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，设备信息屏幕：
- en: '![](../images/00047.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00047.jpeg)'
- en: Now we can turn the LED on/off and it should react accordingly.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以打开/关闭LED，它应该有相应的反应。
- en: With this, we are done with the desktop app.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了桌面应用程序。
- en: In the next section, we will build a mobile app using the Ionic framework.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用Ionic框架构建一个移动应用程序。
- en: Building the mobile app and implementing an end-to-end flow
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建移动应用程序并实现端到端流程
- en: In this section, we will build our mobile companion app using the Ionic framework
    ([http://ionicframework.com/](http://ionicframework.com/)). The output or the
    example would be the same as what we have done for the web and desktop app.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Ionic框架（[http://ionicframework.com/](http://ionicframework.com/)）构建我们的移动伴侣应用程序。输出或示例与我们为web和桌面应用程序所做的相同。
- en: 'To get started, we will install the latest version of `ionic` and `cordova`
    by running the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 开始时，我们将通过运行以下命令安装最新版本的`ionic`和`cordova`：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we need the mobile app base. If you have not already cloned the book''s
    code repository, you can do so using the following command (anywhere on your machine):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要移动应用程序基础。如果您还没有克隆该书的代码存储库，可以使用以下命令（在您的任何位置）进行克隆：
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: or you can download the zip file from [https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript](https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript)
    as well.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您也可以从[https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript](https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript)下载zip文件。
- en: Once the repository has been downloaded, `cd` into the `base` folder and make
    a copy of `mobile-app-base` folder into `chapter2` folder.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦存储库被下载，`cd`进入`base`文件夹，并将`mobile-app-base`文件夹复制到`chapter2`文件夹中。
- en: 'Once the copy is completed, `cd` into the `mobile-app` folder and run the following
    command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 复制完成后，`cd`进入`mobile-app`文件夹并运行以下命令：
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: And then
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然后
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Or
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE37]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This will take care of installing the required dependencies and adding Android
    or iOS platforms.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这将负责安装所需的依赖项并添加Android或iOS平台。
- en: 'If we look at the `mobile-app` folder, we should see the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`mobile-app`文件夹，应该会看到以下内容：
- en: '[PRE38]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In our `mobile-app` folder, the most important file is `mobile-app/config.xml`.
    This file consists of the definitions needed by cordova to convert the HTML/CSS/JS
    application into a hybrid mobile app.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`mobile-app`文件夹中，最重要的文件是`mobile-app/config.xml`。该文件包含了cordova需要将HTML/CSS/JS应用程序转换为混合移动应用程序所需的定义。
- en: Next, we have the `mobile-app/resources`, `mobile-app/plugins`, and `mobile-app/platforms`
    folder that will consist of the cordova wrapped code for the app we are developing.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`mobile-app/resources`、`mobile-app/plugins`和`mobile-app/platforms`文件夹，其中包含我们正在开发的应用程序的cordova封装代码。
- en: And finally, the `mobile-app/src` folder, this folder is where we have all our
    source code. The setup for the mobile is similar to what we had for the web app
    and the desktop app. We have a service folder that has the `mobile-app/src/services/auth.service.ts`
    for authentication, `mobile-app/src/services/device.service.ts` for interfacing
    with the devices API, `mobile-app/src/services/data.service.ts` for fetching the
    latest data from the device, `mobile-app/src/services/socket.service.ts` to set
    up web sockets in our mobile app, and finally, `mobile-app/src/services/toast.service.ts`
    to show notifications, tailored to a mobile. `mobile-app/src/services/toast.service.ts`
    is similar to the notification service we have used in the web and desktop apps.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`mobile-app/src`文件夹，这个文件夹是我们所有源代码的所在地。移动端的设置与我们为web应用程序和桌面应用程序所做的设置类似。我们有一个服务文件夹，其中包括`mobile-app/src/services/auth.service.ts`用于身份验证，`mobile-app/src/services/device.service.ts`用于与设备API进行交互，`mobile-app/src/services/data.service.ts`用于从设备获取最新数据，`mobile-app/src/services/socket.service.ts`用于在我们的移动应用程序中设置Web套接字，最后，`mobile-app/src/services/toast.service.ts`用于显示适用于移动设备的通知。`mobile-app/src/services/toast.service.ts`类似于我们在web和桌面应用程序中使用的通知服务。
- en: Next, we have the needed pages. The mobile app implements only the login page.
    We are forcing the user to use the web or desktop app to create a new account.
    `mobile-app/src/pages/login/login.ts` consists of the authentication logic. `mobile-app/src/pages/home/home.ts`
    consists of the list of all devices that a user is registered with. `mobile-app/src/pages/add-device/add-device.ts`
    has the logic needed to add a new device and `mobile-app/src/pages/view-device/view-device.ts`
    to view the device information.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有所需的页面。移动应用程序只实现了登录页面。我们强制用户使用Web或桌面应用程序来创建新帐户。`mobile-app/src/pages/login/login.ts`包括身份验证逻辑。`mobile-app/src/pages/home/home.ts`包括用户注册的所有设备列表。`mobile-app/src/pages/add-device/add-device.ts`具有添加新设备所需的逻辑，`mobile-app/src/pages/view-device/view-device.ts`用于查看设备信息。
- en: 'Now, from inside the `mobile-app` folder, run the following command:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`mobile-app`文件夹中，运行以下命令：
- en: '[PRE39]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This will launch the app in the browser. If you would like to test it on an
    actual app, you can run the following command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在浏览器中启动应用程序。如果您想在实际应用程序上进行测试，可以运行以下命令：
- en: '[PRE40]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Alternatively, you can run the following command:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以运行以下命令：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This will launch the app on the device. In either case, the app will behave
    the same.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在设备上启动应用程序。在任何情况下，应用程序的行为都将相同。
- en: 'Once the app is launched, we will see the login page:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动后，我们将看到登录页面：
- en: '![](../images/00048.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00048.jpeg)'
- en: 'Once we have successfully logged in, we should see the home page as follows.
    We can add a new device using the + icon in the header:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功登录，我们应该看到如下的主页。我们可以使用标题栏中的+图标添加新设备：
- en: '![](../images/00049.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00049.jpeg)'
- en: 'The newly created device should reflect on our home screen, as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的设备应该在我们的主屏幕上反映出来，如下所示：
- en: '![](../images/00050.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00050.jpeg)'
- en: 'If we click on VIEW DEVICE, we should see the device information, as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击“查看设备”，我们应该看到设备信息，如下所示：
- en: '![](../images/00051.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00051.jpeg)'
- en: 'When we toggle the button on/off, the LED on the Raspberry Pi should turn on/off:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们切换按钮开/关时，树莓派上的LED应该打开/关闭：
- en: '![](../images/00052.jpeg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00052.jpeg)'
- en: 'Another view of the same setup is shown as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 同一设置的另一个视图如下所示：
- en: '![](../images/00053.jpeg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00053.jpeg)'
- en: The preceding is the setup of the Raspberry Pi 3 with a DHT11 sensor and LED.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是使用DHT11传感器和LED设置的树莓派3的设置。
- en: With this, we have successfully established an end-to-end architecture for executing
    out the Internet of Things examples. From now on, we will work with the web app,
    mobile app, desktop app, Raspberry Pi, and a bit of API engine for our next examples.
    The changes we will make are minimal. We will focus on the use case rather than
    building the setup again and again.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经成功建立了一个端到端的架构，用于执行物联网示例。从现在开始，我们将与Web应用程序、移动应用程序、桌面应用程序、树莓派以及一些API引擎一起工作，用于我们接下来的示例。我们将进行最小的更改。我们将专注于用例，而不是一遍又一遍地构建设置。
- en: Troubleshooting
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'In case you do not see the expected output, check the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到预期的输出，请检查以下内容：
- en: Check if the broker, API engine, web app, and Raspberry Pi app are running
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查经纪人、API引擎、Web应用程序和树莓派应用程序是否正在运行
- en: Check the IP address of the broker provided to the Raspberry Pi
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查提供给树莓派的经纪人的IP地址
- en: Check the IP address of the API engine provided to the mobile app
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查提供给移动应用程序的API引擎的IP地址
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In [Chapter 2](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee), *IoTFW.js
    - I* and in this chapter, we went through the entire process of setting up an
    entire frame to work with the Internet of Things solutions. We built the entire
    framework using only JavaScript as our programming language.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee)，*IoTFW.js - I*和在本章中，我们经历了设置整个框架以与物联网解决方案一起工作的整个过程。我们只使用JavaScript作为编程语言构建了整个框架。
- en: We started with understanding the architecture and data flow from Raspberry
    Pi to an end user device, such as a web app, desktop app, or a mobile app. Then
    we started working on the broker using Mosca, after setting up MongoDB. Next we
    designed and developed the API engine and completed the basic Raspberry Pi setup.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从理解架构和数据流开始，从树莓派到最终用户设备，如Web应用程序、桌面应用程序或移动应用程序。然后我们开始使用Mosca设置经纪人，设置MongoDB后。接下来，我们设计并开发了API引擎，并完成了基本的树莓派设置。
- en: We worked on the web app and desktop app and integrated a simple LED and a DHT11
    temperature and humidity sensor with the Raspberry Pi, and saw a simple flow from
    one end to another. We streamed the temperature and humidity in real time to the
    web app and desktop app, and using the toggle button, we turned on the LED.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Web应用程序和桌面应用程序上工作，并将简单的LED和DHT11温湿度传感器与树莓派集成，并看到了从一端到另一端的简单流程。我们将温度和湿度实时传输到Web应用程序和桌面应用程序，并使用切换按钮打开了LED。
- en: And finally, we built a mobile app and implemented/validated the LED and DHT11
    setup.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们建立了一个移动应用程序，并实现/验证了LED和DHT11的设置。
- en: In the [Chapter 4](part0083.html#2F4UM0-ce91715363d04669bca1c1545beb57ee), *Smart
    Agriculture*, using the current setup as a base, we will build a smart agriculture
    solution.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0083.html#2F4UM0-ce91715363d04669bca1c1545beb57ee)，*智能农业*，使用当前设置作为基础，我们将构建智能农业解决方案。
