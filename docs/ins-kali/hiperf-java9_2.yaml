- en: Chapter 2. Tools for Higher Productivity and Faster Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。提高生产力和加快应用程序的工具
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Creating a JShell Session and Setting Context](img/02_07.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![创建JShell会话和设置上下文](img/02_07.jpg)'
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'By default, at the startup, several common packages are imported. You can see
    them by typing the `/l -start` or `/l -all` command:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在启动时导入了几个常见的包。您可以通过键入`/l -start`或`/l -all`命令来查看它们：
- en: '![JShell Commands](img/02_12.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![JShell命令](img/02_12.jpg)'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![JShell Commands](img/02_13.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![JShell命令](img/02_13.jpg)'
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![JShell Commands](img/02_15.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![JShell命令](img/02_15.jpg)'
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![JShell Commands](img/02_29.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![JShell命令](img/02_29.jpg)'
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The commands `/en`, `/res`, and `/rel` have an overlapping functionality:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`/en`、`/res`和`/rel`具有重叠的功能：
- en: '`/en [options]`: This allows to view or change the evaluation context'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/en [options]`：这允许查看或更改评估上下文'
- en: '`/res [options]`: This discards all entered snippets and restarts the session'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/res [options]`：这将丢弃所有输入的片段并重新启动会话'
- en: '`/rel[options]`: This reloads the session the same way the command `/en` does'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/rel[options]`：这将重新加载会话，与命令`/en`的方式相同'
- en: See the official Oracle documentation ([http://docs.oracle.com/javase/9/tools/jshell.htm](http://docs.oracle.com/javase/9/tools/jshell.htm))
    for more details and possible options.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和可能的选项，请参阅官方Oracle文档（[http://docs.oracle.com/javase/9/tools/jshell.htm](http://docs.oracle.com/javase/9/tools/jshell.htm)）。
- en: The command `[/se [setting]` sets configuration information, including the external
    editor, startup settings, and feedback mode. This command is also used to create
    a custom feedback mode with customized prompt, format, and truncation values.
    If no setting is entered, then the current setting for the editor, startup settings,
    and feedback mode are displayed. The documentation referred to earlier describes
    all possible settings in all details.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`[/se [setting]`设置配置信息，包括外部编辑器、启动设置和反馈模式。此命令还用于创建具有自定义提示、格式和截断值的自定义反馈模式。如果未输入任何设置，则显示编辑器、启动设置和反馈模式的当前设置。前面提到的文档详细描述了所有可能的设置。
- en: The JShell is going to be even more helpful when integrated inside of the IDE
    so that a programmer can evaluate expressions on the fly or, even better, they
    can be evaluated automatically the same way the compiler today evaluates the syntax.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JShell在IDE内部集成后将变得更加有用，这样程序员就可以实时评估表达式，甚至更好的是，它们可以像编译器今天评估语法一样自动评估。
- en: Ahead-of-Time (AOT)
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提前（AOT）
- en: The big claim of Java was write-once-run-anywhere. It was achieved by creating
    an implementation of **Java Runtime Environment** (**JRE**) for practically all
    platforms, so the bytecode generated once from the source by Java compiler (`javac`
    tool) could be executed everywhere where JRE was installed, provided the version
    of the compiler `javac` was compatible with the version of JRE.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Java的一个重要宣称是一次编写，到处运行。这是通过为几乎所有平台创建**Java Runtime Environment**（**JRE**）的实现来实现的，因此通过Java编译器（`javac`工具）从源代码生成的字节码可以在安装了JRE的任何地方执行，前提是编译器`javac`的版本与JRE的版本兼容。
- en: The first releases of JRE were primarily the interpreters of the bytecode and
    yielded slower performance than some other languages and their compilers, such
    as C and C++. However, over time, JRE was improved substantially and now produces
    quite decent results, on a par with many other popular systems. In big part, it
    is due to the JIT dynamic compiler that converts the bytecodes of the most frequently
    used methods to the native code. Once generated, the compiled methods (the platform-specific
    machine code) is executed as needed without any interpretation, thus decreasing
    the execution time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: JRE的最初版本主要是字节码的解释器，性能比一些其他语言和它们的编译器（如C和C++）要慢。然而，随着时间的推移，JRE得到了大幅改进，现在产生的结果相当不错，与许多其他流行的系统一样。在很大程度上，这要归功于JIT动态编译器，它将最常用的方法的字节码转换为本机代码。一旦生成，编译后的方法（特定于平台的机器代码）将根据需要执行，而无需任何解释，从而减少执行时间。
- en: To utilize this approach, JRE needs some time for figuring out which methods
    of the application are used most often. The people working in this area of programming
    call them hot methods. This period of discovery, until the peak performance is
    reached, is often called a JVM's warm-up time. It is bigger for the larger and
    more complex Java applications and can be just a few seconds for smaller ones.
    However, even after the peak performance is reached, the application might, because
    of the particular input, start utilizing an execution path never used before and
    calling the methods that were not compiled yet, thus suddenly degrading the performance.
    It can be especially consequential when the code not compiled yet belongs to the
    complex procedures invoked in some rare critical situations, exactly when the
    best possible performance is needed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这种方法，JRE需要一些时间来找出应用程序中最常用的方法。在这个编程领域工作的人称之为热方法。这种发现期直到达到最佳性能通常被称为JVM的预热时间。对于更大更复杂的Java应用程序，这个时间更长，对于较小的应用程序可能只有几秒钟。然而，即使在达到最佳性能之后，由于特定输入的原因，应用程序可能会开始利用以前从未使用过的执行路径，并调用尚未编译的方法，从而突然降低性能。当代码尚未编译的部分属于在某些罕见的关键情况下调用的复杂过程时，这可能尤为重要，这正是需要最佳性能的时候。
- en: 'The natural solution was to allow the programmer to decide which components
    of the application have to be precompiled into the native machine code--those
    that are more often used (thus decreasing the application''s warm-up time), and
    those that are used not often but have to be executed as quickly as possible (in
    support of the critical situations and stable performance overall). That was the
    motivation of the **Java Enhancement ProposalJEP 295: Ahead-of-Time Compilation**:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '自然的解决方案是允许程序员决定应用程序的哪些组件必须预编译成本机机器代码--那些经常使用的（从而减少应用程序的预热时间），以及那些不经常使用但必须尽快执行的（以支持关键情况和整体稳定性能）。这就是**Java
    Enhancement ProposalJEP 295: Ahead-of-Time Compilation**的动机：'
- en: JIT compilers are fast, but Java programs can become so large that it takes
    a long time for the JIT to warm up completely. Infrequently used Java methods
    might never be compiled at all, potentially incurring a performance penalty due
    to repeated interpreted invocations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JIT编译器速度快，但Java程序可能变得非常庞大，以至于JIT完全预热需要很长时间。很少使用的Java方法可能根本不会被编译，可能因为重复的解释调用而导致性能下降。
- en: 'It is worth noticing though that already in JIT compiler, it is possible to
    decrease the warm-up time by setting the compilation threshold--how many times
    a method has to be called before it gets compiled into the native code. By default,
    the number is 1,500\. So, if we set it to less than that, the warm-up time will
    be shorter. It can be done using the option `-XX:CompileThreshold` with the `java`
    tool. For example, we can set the threshold to 500 as follows (where `Test` is
    the compiled Java class with the `main()` method in it):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，即使在JIT编译器中，也可以通过设置编译阈值来减少预热时间--一个方法被调用多少次后才将其编译成本机代码。默认情况下，这个数字是1500。因此，如果我们将其设置为小于这个值，预热时间将会更短。可以使用`java`工具的`-XX:CompileThreshold`选项来实现。例如，我们可以将阈值设置为500，如下所示（其中`Test`是具有`main()`方法的编译过的Java类）：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The option `-XX:-TieredCompilation` was added to disable the tiered compilation
    because it is enabled by default and does not honor the compilation threshold.
    The possible drawback is that the 500 threshold might be too low and too many
    methods will be compiled, thus slowing down the performance and increasing the
    warm-up time. The best value for this option will vary from application to an
    application and may even depend on the particular data input with the same application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`-XX:-TieredCompilation`选项以禁用分层编译，因为它默认启用并且不遵守编译阈值。可能的缺点是500的阈值可能太低，太多的方法将被编译，从而降低性能并增加预热时间。这个选项的最佳值将因应用程序而异，并且甚至可能取决于相同应用程序的特定数据输入。
- en: Static versus Dynamic Compilation
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态与动态编译
- en: Many higher level programming languages such as C or C++ used AOT compilation
    from the very beginning. They are also called **statically compiled** languages.
    Since AOT (or static) compilers are not constrained by performance requirements
    (at least not as much as the interpreters at runtime, also called **dynamic compilers**),
    they can afford to spend the time producing complex code optimizations. On the
    other hand, the static compilers do not have the runtime (profiling) data, which
    is especially limiting in the case of dynamically typed languages, Java being
    one of them. Since the ability of dynamic typing in Java--downcasting to the subtype,
    querying an object for its type, and other type operations--is one of the pillars
    of object-oriented programming (principle of polymorphism), AOT compilation for
    Java becomes even more limited. Lambda expressions pause another challenge for
    static compilation and are currently not supported yet.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 许多高级编程语言，如C或C++，从一开始就使用AOT编译。它们也被称为**静态编译**语言。由于AOT（或静态）编译器不受性能要求的限制（至少不像运行时的解释器，也称为**动态编译器**），它们可以花费时间产生复杂的代码优化。另一方面，静态编译器没有运行时（分析）数据，这在动态类型语言的情况下尤其受限，Java就是其中之一。由于Java中的动态类型能力--向子类型进行下转换，查询对象的类型以及其他类型操作--是面向对象编程的支柱之一（多态原则），Java的AOT编译变得更加受限。Lambda表达式对静态编译提出了另一个挑战，目前还不支持。
- en: Another advantage of a dynamic compiler is that it can make assumptions and
    optimize the code accordingly. If the assumption turned out to be wrong, the compiler
    can try another assumption until the performance goal is achieved. Such a procedure
    may slow down the application and/or increase the warm-up time, but it may result
    in a much better performance in the long run. The profile-guided optimization
    can help a static compiler to move along this path too, but it will always remain
    limited in its opportunity to optimize by comparison with a dynamic one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 动态编译器的另一个优点是它可以做出假设并相应地优化代码。如果假设被证明是错误的，编译器可以尝试另一个假设，直到达到性能目标。这样的过程可能会减慢应用程序的速度和/或增加预热时间，但从长远来看，可能会导致更好的性能。基于配置文件的优化也可以帮助静态编译器沿着这条道路前进，但与动态编译器相比，它在优化的机会上始终受到限制。
- en: 'That said, we should not be surprised that the current AOT implementation in
    JDK 9 is experimental and limited, so far, to 64-bit Linux-based systems only,
    with both Parallel or G1 garbage collection and the only supported module being
    `java.base`. Further, AOT compilation should be executed on the same system or
    a system with the same configuration on which the resulting machine code will
    be executed. Yet, despite all that, the JEP 295 states:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们不应该感到惊讶，JDK 9中当前的AOT实现是实验性的且受限的，目前仅适用于64位Linux系统，支持并行或G1垃圾回收，并且唯一支持的模块是`java.base`。此外，AOT编译应该在执行生成的机器代码的相同系统或具有相同配置的系统上执行。然而，尽管如此，JEP
    295指出：
- en: Performance testing shows that some applications benefit from AOT-compiled code,
    while others clearly show regressions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试显示，一些应用程序受益于AOT编译的代码，而其他一些明显显示出退化。
- en: It is worth noting that AOT compilation has been long supported in **Java Micro
    Edition** (**ME**), but more use cases for AOT in **Java Standard Edition** (**SE**)
    are yet to be identified, which was one of the reasons the experimental AOT implementation
    was released with JDK 9-- in order to facilitate the community to try and tell
    about the practical needs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，AOT编译在**Java Micro Edition**（**ME**）中长期得到支持，但在**Java Standard Edition**（**SE**）中AOT的更多用例尚待确定，这是实验性AOT实现随JDK
    9发布的原因之一--以便促进社区尝试并反馈实际需求。
- en: The AOT Commands and Procedures
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AOT命令和程序
- en: The underlying AOT compilation in JDK 9 is based on the Oracle project `Graal`--an
    open source compiler introduced with JDK 8 with a goal of improving the performance
    of the Java dynamic compiler. The AOT group had to modify it, mostly around constants
    processing and optimization. They have also added probabilistic profiling and
    a special inlining policy, thus making Grall more suitable for static compilation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 9中的底层AOT编译基于Oracle项目`Graal`，这是一个在JDK 8中引入的开源编译器，旨在改进Java动态编译器的性能。 AOT组不得不对其进行修改，主要是围绕常量处理和优化。他们还添加了概率性分析和特殊的内联策略，从而使Grall更适合静态编译。
- en: In addition to the existing compiling tool `javac`, a new `jaotc` tool is included
    in the JDK 9 installation. The resulting AOT shared libraries `.so` are generated
    using the `libelf` library--the dependency that is going to be removed in the
    future releases.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了现有的编译工具`javac`之外，JDK 9安装中还包括一个新的`jaotc`工具。使用`libelf`库生成AOT共享库`.so`，这是将来版本中将要删除的依赖项。
- en: 'To start AOT compilation, a user has to launch `jaotc` and specify classes,
    JAR files, or modules that have to be compiled. The name of the output library
    (that holds the generated machine code) can also be passed as the `jaotc` parameter.
    If not specified, the default name of the output will be `unnamed.so`. As an example,
    let''s look at how the AOT compiler can work with the class `HelloWorld`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始AOT编译，用户必须启动`jaotc`并指定要编译的类、JAR文件或模块。还可以将输出库的名称（保存生成的机器代码）作为`jaotc`参数传递。如果未指定，默认输出的名称将为`unnamed.so`。例如，让我们看看AOT编译器如何与类`HelloWorld`一起工作：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'First, we will generate the bytecode and produce `HelloWorld.class` using `javac`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`javac`生成字节码并生成`HelloWorld.class`：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we will use the bytecode from the file `HelloWorld.class` to generate
    machine code into the library `libHelloWorld.so`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用文件`HelloWorld.class`中的字节码生成库`libHelloWorld.so`中的机器代码：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we can execute the generated library (on the platform with the same specification
    as the one where `jaotc`was executed) using the `java` tool with an option `-XX:AOTLibrary`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`java`工具执行生成的库（在与执行`jaotc`的平台规格相同的平台上），并使用`-XX:AOTLibrary`选项：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The option `-XX:AOTLibrary` allows us to list several AOT libraries separated
    by commas.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 选项`-XX:AOTLibrary`允许我们列出用逗号分隔的多个AOT库。
- en: Notice that the `java` tool requires bytecode of all the applications in addition
    to the native code of some of its components. This fact diminishes the alleged
    advantage of static compilation, which some AOT enthusiasts claim, that it protects
    code better from being decompiled. It might be so in the future when bytecode
    will not be required at runtime if the same class or method is in the AOT library
    already. However, as of today, it is not the case.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`java`工具除了一些组件的本机代码外，还需要所有应用程序的字节码。这一事实减少了一些AOT爱好者声称的静态编译的所谓优势，即它更好地保护代码免受反编译。如果相同的类或方法已经在AOT库中，未来当字节码在运行时不再需要时，这可能是真的。但是，就目前而言，情况并非如此。
- en: 'To see if AOT-compiled methods were used, you can add an option `-XX:+PrintAOT`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看是否使用了AOT编译的方法，可以添加一个`-XX:+PrintAOT`选项：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It will allow you to see the line loaded `./libHelloWorld.so` AOT library in
    the output.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它将允许您在输出中看到加载的行`./libHelloWorld.so` AOT库。
- en: If the source code of a class was changed but not pushed (through the `jaotc`
    tool) into the AOT library, JVM will notice it at runtime because the fingerprint
    of each compiled class is stored with its native code in the AOT library. JIT
    will then ignore the code in the AOT library and use the bytecode instead.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类的源代码已更改但未通过`jaotc`工具推送到AOT库中，JVM将在运行时注意到，因为每个编译类的指纹都与其在AOT库中的本机代码一起存储。 JIT然后将忽略AOT库中的代码，而使用字节码。
- en: 'The `java` tool in JDK 9 supports a few other flags and options related to
    AOT:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 9中的`java`工具支持与AOT相关的其他几个标志和选项：
- en: '`-XX:+/-UseAOT` tells the JVM to use or to ignore AOT-compiled files (by default,
    it is set to use AOT)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-XX:+/-UseAOT`告诉JVM使用或忽略AOT编译的文件（默认情况下，设置为使用AOT）'
- en: '`-XX:+/-UseAOTStrictLoading` turns on/off the AOT strict loading; if on, it
    directs JVM to exit if any of the AOT libraries were generated on a platform with
    a configuration different from the current runtime configuration'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-XX:+/-UseAOTStrictLoading`打开/关闭AOT严格加载；如果打开，它指示JVM在任何AOT库是在与当前运行时配置不同的平台上生成的时退出'
- en: 'The JEP 295 describes the `jaotc` tool''s command format as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JEP 295描述了`jaotc`工具的命令格式如下：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `name` is a class name or JAR file. The `list` is a colon `:` separated
    list of class names, modules, JAR files, or directories that contain class files.
    The `options` is one or many flags from the following list:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`是类名或JAR文件。`list`是一个以冒号`:`分隔的类名、模块、JAR文件或包含类文件的目录列表。`options`是以下列表中的一个或多个标志：'
- en: '`--output <file>`: This is the output file name (by default, `unnamed.so`)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--output <file>`：这是输出文件名（默认情况下为`unnamed.so`）'
- en: '`--class-name <class names>`: This is the list of Java classes to compile'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--class-name <class names>`：这是要编译的Java类列表'
- en: '`--jar <jar files>`: This is the list of JAR files to compile'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --jar <jar files>：这是要编译的JAR文件列表
- en: '`--module <modules>`: This is the list of Java modules to compile'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--module <modules>`：这是要编译的Java模块列表'
- en: '`--directory <dirs>`: This is the list of directories where you can search
    for files to compile'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--directory <dirs>`：这是您可以搜索要编译的文件的目录列表'
- en: '`--search-path <dirs>`: This is the list of directories where to search for
    specified files'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--search-path <dirs>`：这是要搜索指定文件的目录列表'
- en: '`--compile-commands <file>`: This is the name of the file with compile commands;
    here is an example:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--compile-commands <file>`：这是带有编译命令的文件名；这是一个例子：'
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'AOT recognizes two compile commands currently:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: AOT目前识别两个编译命令：
- en: '`exclude`: This excludes the compilation of specified methods'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exclude`：这将排除指定方法的编译'
- en: '`compileOnly`: This compiles only specified methods'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compileOnly`：这只编译指定的方法'
- en: 'Regular expressions are used to specify classes and methods, which are mentioned
    here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式用于指定这里提到的类和方法：
- en: '`--compile-for-tiered`: This generates profiling code for tiered compilation
    (by default, profiling code is not generated)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --compile-for-tiered：这为分层编译生成了分析代码（默认情况下，不会生成分析代码）
- en: '`--compile-with-assertions`: This generates code with Java assertions (by default,
    assertions code is not generated)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --compile-with-assertions：这生成带有Java断言的代码（默认情况下，不会生成断言代码）
- en: '`--compile-threads <number>`: This is the number of compilation threads to
    be used (by default, the smaller value of 16 and number of available CPUs)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --compile-threads <number>：这是要使用的编译线程数（默认情况下，使用较小值16和可用CPU的数量）
- en: '`--ignore-errors`: This ignores all exceptions thrown during class loading
    (by default, exits on compilation if class loading throws an exception)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --ignore-errors：这忽略在类加载期间抛出的所有异常（默认情况下，如果类加载抛出异常，则在编译时退出）
- en: '`--exit-on-error`: This exits on compilation errors (by default, failed compilation
    is skipped, while the compilation of other methods continues)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --exit-on-error：这在编译错误时退出（默认情况下，跳过编译失败，而其他方法的编译继续）
- en: '`--info`: This prints information about compilation phases'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --info：这打印有关编译阶段的信息
- en: '`--verbose`: This prints more details about compilation phases'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --verbose：这打印有关编译阶段的更多细节
- en: '`--debug`: This prints even more details'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --debug：这打印更多细节
- en: '`--help`: This prints help information'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --help：这打印帮助信息
- en: '`--version`: This prints version information'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --version：这打印版本信息
- en: '`-J<flag>`: This passes a flag directly to the JVM runtime system'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -J<flag>：这将一个标志直接传递给JVM运行时系统
- en: 'As we mentioned already, some applications can improve performance using AOT,
    while others may become slower. Only testing will provide a definite answer to
    the question about the usefulness of AOT for each application. In any case, one
    of the ways to improve performance is to compile and use the AOT library of the
    `java.base` module:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，一些应用程序可以通过AOT来提高性能，而其他一些可能会变慢。只有测试才能对每个应用程序的AOT的有用性问题提供明确的答案。无论如何，改善性能的一种方法是编译和使用`java.base`模块的AOT库：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At runtime, the AOT initialization code looks for shared libraries in the `$JAVA_HOME/lib`
    directory or among the libraries listed by the `-XX:AOTLibrary` option. If shared
    libraries are found, they are picked up and used. If no shared libraries can be
    found, AOT will be turned off.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，AOT初始化代码在`$JAVA_HOME/lib`目录中查找共享库，或者在`-XX:AOTLibrary`选项列出的库中查找。如果找到共享库，则会被选中并使用。如果找不到共享库，则AOT将被关闭。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this lesson, we described two new tools that can help a developer be more
    productive (JShell tool) and help improve Java application performance (`jaotc`
    tool). The examples and steps to use them will help you understand the benefits
    of their usage and get you started in case you decide to try them.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们描述了两个新工具，可以帮助开发人员更加高效（JShell工具）并帮助改善Java应用程序的性能（`jaotc`工具）。使用它们的示例和步骤将帮助您了解其使用的好处，并在您决定尝试它们的情况下帮助您入门。
- en: In the next lesson, we will discuss how to monitor Java applications programmatically
    using command-line tools. We will also explore how to improve the application
    performance via multithreading and how to tune the JVM itself after learning about
    the bottlenecks through monitoring.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一课中，我们将讨论如何使用命令行工具以编程方式监视Java应用程序。我们还将探讨如何通过多线程来改善应用程序性能，以及在通过监视了解瓶颈后如何调整JVM本身。
- en: Assessments
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: The ________ compiler takes Java bytecode and generates a native machine code
    so that the resulting binary file can execute natively.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ______编译器接受Java字节码并生成本机机器代码，以便生成的二进制文件可以在本机上执行。
- en: Which of the following commands drops a snippet referenced by a name or on ID?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令丢弃了一个由名称或ID引用的片段？
- en: '`/d <name or id>`'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /d <name or id>
- en: '`/drop <name or id>`'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /drop <name or id>
- en: '`/dr <name or id>`'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /dr <name or id>
- en: '`/dp <name or id>`'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /dp <name or id>
- en: 'State whether True or False: Shell is Ahead-of-Time tool that is well-known
    for those who program in Scala, Ruby. It takes a user input, evaluates it, and
    returns the result after sometime.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断真假：Shell是一种著名的Ahead-of-Time工具，适用于那些使用Scala、Ruby编程的人。它接受用户输入，对其进行评估，并在一段时间后返回结果。
- en: Which of the following commands is used to list the source you have typed in
    JShell?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令用于列出您在JShell中键入的源代码？
- en: '`/l [<name or id>|-all|-start]`'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /l [<name or id>|-all|-start]
- en: '`/m [<name or id>|-all|-start]L`'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /m [<name or id>|-all|-start]L
- en: '`/t [<name or id>|-all|-start]`'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /t [<name or id>|-all|-start]
- en: '`/v [<name or id>|-all|-start]`'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: /v [<name or id>|-all|-start]
- en: Which of the following regular expressions ignores all exceptions thrown during
    class loading?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个正则表达式忽略在类加载期间抛出的所有异常？
- en: '`--exit-on-error`'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: --exit-on-error
- en: '`–ignores-errors`'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: –ignores-errors
- en: '`--ignore-errors`'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: --ignore-errors
- en: '`--exits-on-error`'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: --exits-on-error
