- en: '*Chapter 1*: Kubernetes Architecture'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：Kubernetes架构
- en: Traditional applications, such as web applications, are known to follow a modular
    architecture, splitting code into an application layer, business logic, a storage
    layer, and a communication layer. Despite the modular architecture, the components
    are packaged and deployed as a monolith. A monolith application, despite being
    easy to develop, test, and deploy, is hard to maintain and scale. This led to
    the growth of microservices architecture. Development of container runtimes like
    Docker and **Linux Containers** (**LXC**) has eased deployment and maintenance
    of applications as microservices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用程序，如Web应用程序，通常遵循模块化架构，将代码分为应用层、业务逻辑、存储层和通信层。尽管采用了模块化架构，但组件被打包并部署为单体。单体应用虽然易于开发、测试和部署，但难以维护和扩展。这导致了微服务架构的增长。像Docker和Linux容器（LXC）这样的容器运行时的开发已经简化了应用程序作为微服务的部署和维护。
- en: Microservices architecture splits application deployment into small and interconnected
    entities. The increasing popularity of microservices architecture has led to the
    growth of orchestration platforms such as Apache Swarm, Mesos, and Kubernetes.
    Container orchestration platforms help manage containers in large and dynamic
    environments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构将应用部署分为小型且相互连接的实体。微服务架构的日益流行导致了诸如Apache Swarm、Mesos和Kubernetes等编排平台的增长。容器编排平台有助于在大型和动态环境中管理容器。
- en: Kubernetes is an open source orchestration platform for containerized applications
    that support automated deployment, scaling, and management. It was originally
    developed by Google in 2014 and it is now maintained by the **Cloud Native Computing
    Foundation** (**CNCF**). Kubernetes is the first CNCF-graduated project that graduated
    in 2018\. Established global organizations, such as Uber, Bloomberg, Blackrock,
    BlaBlaCar, The New York Times, Lyft, eBay, Buffer, Ancestry, GolfNow, Goldman
    Sachs, and many others, use Kubernetes in production at a massive scale ([https://kubernetes.io/case-studies/](https://kubernetes.io/case-studies/)).
    Large cloud providers, such as **Elastic Kubernetes Service** (Amazon), **Azure
    Kubernetes Service** (Microsoft), **Google Kubernetes Engine** (Google), and **Alibaba
    Cloud Kubernetes** (Alibaba), offer their own managed Kubernetes services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个开源的容器化应用编排平台，支持自动化部署、扩展和管理。它最初由Google在2014年开发，现在由云原生计算基金会（CNCF）维护。Kubernetes是2018年首个毕业于CNCF的项目。成立的全球组织，如Uber、Bloomberg、Blackrock、BlaBlaCar、纽约时报、Lyft、eBay、Buffer、Ancestry、GolfNow、高盛等，都在大规模生产中使用Kubernetes。大型云服务提供商，如Amazon的弹性Kubernetes服务、微软的Azure
    Kubernetes服务、谷歌的谷歌Kubernetes引擎和阿里巴巴的阿里云Kubernetes，都提供自己的托管Kubernetes服务。
- en: In a microservices model, application developers ensure that the applications
    work correctly in containerized environments. They write a Docker file to bundle
    their applications. DevOps and infrastructure engineers interact with the Kubernetes
    cluster directly. They ensure that the application bundles provided by developers
    run smoothly within the cluster. They monitor the nodes, pods, and other Kubernetes
    components to ensure the cluster is healthy. However, security requires the joint
    effort of both parties and the security team. To learn how to secure a Kubernetes
    cluster, we will first have to understand what Kubernetes is and how it works.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务模型中，应用程序开发人员确保应用程序在容器化环境中正常工作。他们编写Docker文件来打包他们的应用程序。DevOps和基础设施工程师直接与Kubernetes集群进行交互。他们确保开发人员提供的应用程序包在集群中顺利运行。他们监视节点、Pod和其他Kubernetes组件，以确保集群健康。然而，安全性需要双方和安全团队的共同努力。要了解如何保护Kubernetes集群，我们首先必须了解Kubernetes是什么以及它是如何工作的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The rise of Docker and the trend of microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker的崛起和微服务的趋势
- en: Kubernetes components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes组件
- en: Kubernetes objects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes对象
- en: Kubernetes variations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes的变种
- en: Kubernetes and cloud providers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes和云服务提供商
- en: The rise of Docker and the trend of microservices
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker的崛起和微服务的趋势
- en: 'Before we start looking into Kubernetes, it''s important to understand the
    growth of microservices and containerization. With the evolution of a monolithic
    application, developers face inevitable problems as the applications evolve:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始研究Kubernetes之前，了解微服务和容器化的增长是很重要的。随着单体应用程序的演变，开发人员面临着不可避免的问题：
- en: '**Scaling**: A monolith application is difficult to scale. It''s been proven
    that the proper way to solve a scalability problem is via a distributed method.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：单体应用程序很难扩展。已经证明解决可扩展性问题的正确方法是通过分布式方法。'
- en: '**Operational cost**: The operation cost increases with the complexity of a
    monolith application. Updates and maintenance require careful analysis and enough
    testing before deployment. This is the opposite of scalability; you can''t scale
    down a monolithic application easily as the minimum resource requirement is high.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营成本**：随着单体应用程序的复杂性增加，运营成本也会增加。更新和维护需要在部署之前进行仔细分析和足够的测试。这与可扩展性相反；你不能轻易地缩减单体应用程序，因为最低资源需求很高。'
- en: '**Longer release cycle**: The maintenance and development barrier is significantly
    high for monolith applications. For developers, when there is a bug, it takes
    a lot of time to identify the root cause in a complex and ever-growing code base.
    The testing time increases significantly. Regression, integration, and unit tests
    take significantly longer to pass with a complex code base. When the customer''s
    requests come in, it takes months or even a year for a single feature to ship.
    This makes the release cycle long and impacts the company''s business significantly.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布周期更长**：对于单体应用程序，维护和开发的障碍非常高。对于开发人员来说，当出现错误时，在复杂且不断增长的代码库中识别根本原因需要很长时间。测试时间显著增加。回归、集成和单元测试在复杂的代码库中需要更长的时间才能通过。当客户的请求到来时，一个功能要发布需要几个月甚至一年的时间。这使得发布周期变长，并且对公司的业务产生重大影响。'
- en: 'This creates a huge incentive to break down monolithic applications into microservices.
    The benefits are obvious:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这激励着将单片应用程序拆分为微服务。好处是显而易见的：
- en: With a well-defined interface, developers only need to focus on the functionality
    of the services they own.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有了明确定义的接口，开发人员只需要关注他们拥有的服务的功能。
- en: The code logic is simplified, which makes the application easier to maintain
    and easier to debug. Furthermore, the release cycle of microservices has shortened
    tremendously compared to monolithic applications, so customers do not have to
    wait for too long for a new feature.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码逻辑被简化了，这使得应用程序更容易维护和调试。此外，与单片应用程序相比，微服务的发布周期大大缩短，因此客户不必等待太长时间才能获得新功能。
- en: When a monolithic application breaks down into many microservices, it increases
    the deployment and management complexity on the DevOps side. The complexity is
    obvious; microservices are usually written in different programming languages
    that require different runtimes or interpreters, with different package dependencies,
    different configurations, and so on, not to mention the interdependence among
    microservices. This is exactly the right time for Docker to come into the picture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当单片应用程序分解为许多微服务时，这增加了DevOps方面的部署和管理复杂性。这种复杂性是显而易见的；微服务通常使用不同的编程语言编写，需要不同的运行时或解释器，具有不同的软件包依赖关系、不同的配置等，更不用说微服务之间的相互依赖了。这正是Docker出现的合适时机。
- en: Let's look at the evolution of Docker. Process isolation has been a part of
    Linux for a long time in the form of **Control Groups** (**cgroups**) and **namespaces**.
    With the cgroup setting, each process has limited resources (CPU, memory, and
    so on) to use. With a dedicated process namespace, the processes within a namespace
    do not have any knowledge of other processes running in the same node but in different
    process namespaces. With a dedicated network namespace, processes cannot communicate
    with other processes without a proper network configuration, even though they're
    running on the same node.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下Docker的演变。进程隔离长期以来一直是Linux的一部分，以**控制组**（**cgroups**）和**命名空间**的形式存在。通过cgroup设置，每个进程都有限制的资源（CPU、内存等）可供使用。通过专用的进程命名空间，命名空间内的进程不会知道在同一节点但在不同进程命名空间中运行的其他进程。通过专用的网络命名空间，进程在没有适当的网络配置的情况下无法与其他进程通信，即使它们在同一节点上运行。
- en: Docker eases process management for infrastructure and DevOps engineers. In
    2013, Docker as a company released the Docker open source project. Instead of
    managing namespaces and cgroups, DevOps engineers manage containers through Docker
    engine. Docker containers leverage these isolation mechanisms in Linux to run
    and manage microservices. Each container has a dedicated cgroup and namespaces.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker简化了基础设施和DevOps工程师的进程管理。2013年，Docker公司发布了Docker开源项目。DevOps工程师不再需要管理命名空间和cgroups，而是通过Docker引擎管理容器。Docker容器利用Linux中的这些隔离机制来运行和管理微服务。每个容器都有专用的cgroup和命名空间。
- en: The interdependency complexity remains. Orchestration platforms are ones that
    try to solve this problem. Docker also offered Docker Swarm mode (later renamed
    Docker **Enterprise Edition**, or Docker **EE**) to support clustering containers,
    around the same time as Kubernetes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 相互依赖的复杂性仍然存在。编排平台是试图解决这个问题的平台。Docker还提供了Docker Swarm模式（后来更名为Docker企业版，或Docker
    EE）来支持集群容器，与Kubernetes大致同时期。
- en: Kubernetes adoption status
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes采用状态
- en: 'According to a container usage report conducted in 2019 by Sysdig ([https://sysdig.com/blog/sysdig-2019-container-usage-report](https://sysdig.com/blog/sysdig-2019-container-usage-report)),
    a container security and orchestration vendor says that Kubernetes takes a whopping
    77% share of orchestrators in use. The market share is close to 90% if OpenShift
    (a variation of Kubernetes from Red Hat) is included:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Sysdig在2019年进行的容器使用报告（[https://sysdig.com/blog/sysdig-2019-container-usage-report](https://sysdig.com/blog/sysdig-2019-container-usage-report)），一家容器安全和编排供应商表示，Kubernetes在使用的编排器中占据了惊人的77%的份额。如果包括OpenShift（来自Red
    Hat的Kubernetes变体），市场份额接近90%：
- en: '![Figure 1.1 – The market share of orchestration platforms'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 –编排平台的市场份额'
- en: '](image/B15566_01_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_01_01.jpg)'
- en: Figure 1.1 – The market share of orchestration platforms
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 –编排平台的市场份额
- en: Although Docker Swarm was released around the same time as Kubernetes, Kubernetes
    has now become the de facto choice of platform for container orchestration. This
    is because of Kubernetes' ability to work well in production environments. It
    is easy to use, supports a multitude of developer configurations, and can handle
    high-scale environments.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Docker Swarm与Kubernetes同时发布，但Kubernetes现在已成为容器编排平台的事实选择。这是因为Kubernetes能够在生产环境中很好地工作。它易于使用，支持多种开发人员配置，并且可以处理高规模环境。
- en: Kubernetes clusters
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes集群
- en: 'A Kubernetes cluster is composed of multiple machines (or **Virtual Machines**
    (**VMs**)) or nodes. There are two types of nodes: master nodes and worker nodes.
    The main control plane, such as `kube-apiserver`, runs on the master nodes. The
    agent running on each worker node is called `kubelet`, working as a minion on
    behalf of `kube-apiserver`, and runs on the worker nodes. A typical workflow in
    Kubernetes starts with a user (for example, DevOps), who communicates with `kube-apiserver`
    in the master node, and `kube-apiserver` delegates the deployment job to the worker
    nodes. In the next section, we will introduce `kube-apiserver` and `kubelet` in
    more detail:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群由多台机器（或**虚拟机**（**VMs**））或节点组成。有两种类型的节点：主节点和工作节点。主控制平面，如`kube-apiserver`，运行在主节点上。每个工作节点上运行的代理称为`kubelet`，代表`kube-apiserver`运行，并运行在工作节点上。Kubernetes中的典型工作流程始于用户（例如，DevOps），与主节点中的`kube-apiserver`通信，`kube-apiserver`将部署工作委派给工作节点。在下一节中，我们将更详细地介绍`kube-apiserver`和`kubelet`：
- en: '![Figure 1.2 – Kubernetes deployment'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 – Kubernetes部署'
- en: '](image/B15566_01_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_01_02.jpg)'
- en: Figure 1.2 – Kubernetes deployment
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – Kubernetes部署
- en: The previous diagram shows how a user sends a deployment request to the master
    node (`kube-apiserver`) and `kube-apiserver` delegates the deployment execution
    to `kubelet` in some of the worker nodes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示用户如何向主节点（`kube-apiserver`）发送部署请求，`kube-apiserver`将部署执行委派给一些工作节点中的`kubelet`。
- en: Kubernetes components
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes组件
- en: 'Kubernetes follows a client-server architecture. In Kubernetes, multiple master
    nodes control multiple worker nodes. Each master and worker has a set of components
    that are required for the cluster to work correctly. A master node generally has
    `kube-apiserver`, `etcd` storage, `kube-controller-manager`, `cloud-controller-manager`,
    and `kube-scheduler`. The worker nodes have `kubelet`, `kube-proxy`, a **Container
    Runtime Interface (CRI)** component, a **Container Storage Interface (CRI)** component,
    and so on. We will go through each of them in detail now:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes遵循客户端-服务器架构。在Kubernetes中，多个主节点控制多个工作节点。每个主节点和工作节点都有一组组件，这些组件对于集群的正常工作是必需的。主节点通常具有`kube-apiserver`、`etcd`存储、`kube-controller-manager`、`cloud-controller-manager`和`kube-scheduler`。工作节点具有`kubelet`、`kube-proxy`、**容器运行时接口（CRI）**组件、**容器存储接口（CRI）**组件等。我们现在将详细介绍每一个：
- en: '`kube-apiserver`: The Kubernetes API server (`kube-apiserver`) is a control-plane
    component that validates and configures data for objects such as pods, services,
    and controllers. It interacts with objects using REST requests.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`：Kubernetes API服务器（`kube-apiserver`）是一个控制平面组件，用于验证和配置诸如pod、服务和控制器等对象的数据。它使用REST请求与对象交互。'
- en: '`etcd`: `etcd` is a high-availability key-value store used to store data such
    as configuration, state, and metadata. The watch functionality of `etcd` provides
    Kubernetes with the ability to listen for updates to configuration and make changes
    accordingly.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd`：`etcd`是一个高可用的键值存储，用于存储配置、状态和元数据等数据。`etcd`的watch功能使Kubernetes能够监听配置的更新并相应地进行更改。'
- en: '`kube-scheduler`: `kube-scheduler` is a default scheduler for Kubernetes. It
    watches for newly created pods and assigns pods to the nodes. The scheduler first
    filters a set of nodes on which the pod can run. Filtering includes creating a
    list of possible nodes based on available resources and policies set by the user.
    Once this list is created, the scheduler ranks the nodes to find the most optimal
    node for the pod.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler`：`kube-scheduler`是Kubernetes的默认调度程序。它监视新创建的pod并将pod分配给节点。调度程序首先过滤可以运行pod的一组节点。过滤包括根据用户设置的可用资源和策略创建可能节点的列表。一旦创建了这个列表，调度程序就会对节点进行排名，找到最适合pod的节点。'
- en: '`kube-controller-manager`: The Kubernetes controller manager is a combination
    of the core controllers that watch for state updates and make changes to the cluster
    accordingly. Controllers that currently ship with Kubernetes include the following:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-controller-manager`：Kubernetes控制器管理器是一组核心控制器，它们监视状态更新并相应地对集群进行更改。目前随Kubernetes一起提供的控制器包括以下内容：'
- en: '![](image/01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](image/01.jpg)'
- en: '`cloud-controller-manager`: The cloud container manager was introduced in v1.6;
    it runs controllers to interact with the underlying cloud providers. This is an
    attempt to decouple the cloud vendor code from the Kubernetes code.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud-controller-manager`：云容器管理器是在v1.6中引入的，它运行控制器与底层云提供商进行交互。这是为了将云供应商的代码与Kubernetes的代码解耦。'
- en: '`kubelet`: `kubelet` runs on every node. It registers the node with the API
    server. `kubelet` monitors pods created using Podspecs and ensures that the pods
    and containers are healthy.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet`：`kubelet`在每个节点上运行。它向API服务器注册节点。`kubelet`监视使用Podspecs创建的pod，并确保pod和容器健康。'
- en: '`kube-proxy`: `kube-proxy` is a networking proxy that runs on each node. It
    manages the networking rules on each node and forwards or filters traffic based
    on these rules.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`：`kube-proxy`是在每个节点上运行的网络代理。它管理每个节点上的网络规则，并根据这些规则转发或过滤流量。'
- en: '`kube-dns`: DNS is a built-in service launched at cluster startup. With v1.12,
    CoreDNS became the recommended DNS server, replacing `kube-dns`. CoreDNS uses
    a single container (versus the three used for `kube-dns`). It uses multithreaded
    caching and has in-built negative caching, thus being superior to `kube-dns` in
    terms of memory and performance.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-dns`：DNS是在集群启动时启动的内置服务。从v1.12开始，CoreDNS成为推荐的DNS服务器，取代了`kube-dns`。CoreDNS使用单个容器（而不是`kube-dns`使用的三个容器）。它使用多线程缓存，并具有内置的负缓存，因此在内存和性能方面优于`kube-dns`。'
- en: In this section, we looked at the core components of Kubernetes. These components
    will be present in all Kubernetes clusters. Kubernetes also has some configurable
    interfaces that allow clusters to be modified to suit the organizational needs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看了Kubernetes的核心组件。这些组件将存在于所有的Kubernetes集群中。Kubernetes还有一些可配置的接口，允许对集群进行修改以适应组织的需求。
- en: The Kubernetes interfaces
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes接口
- en: Kubernetes aims to be flexible and modular, so cluster administrators can modify
    the networking, storage, and container runtime capabilities to suit the organization's
    requirements. Currently, Kubernetes provides three different interfaces that can
    be used by cluster administrators to use different capabilities within the cluster.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes旨在灵活和模块化，因此集群管理员可以修改网络、存储和容器运行时能力，以满足组织的需求。目前，Kubernetes提供了三种不同的接口，集群管理员可以使用这些接口来使用集群中的不同功能。
- en: The container networking interface
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器网络接口
- en: Kubernetes has a default networking provider, `kubenet`, which is limited in
    capability. `kubenet` only supports 50 nodes per cluster, which obviously cannot
    meet any requirements of large-scale deployment. Meanwhile, Kubernetes leverages
    a **Container Networking Interface** (**CNI**) as a common interface between the
    network providers and Kubernetes' networking components to support network communication
    in a cluster with a large scale. Currently, the supported providers include Calico,
    Flannel, `kube-router` and so on.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 有一个默认的网络提供程序 `kubenet`，其功能有限。`kubenet` 只支持每个集群 50 个节点，显然无法满足大规模部署的任何要求。同时，Kubernetes
    利用**容器网络接口**（**CNI**）作为网络提供程序和 Kubernetes 网络组件之间的通用接口，以支持大规模集群中的网络通信。目前支持的提供程序包括
    Calico、Flannel、`kube-router` 等。
- en: The container storage interface
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器存储接口
- en: Kubernetes introduced the container storage interface in v1.13\. Before 1.13,
    new volume plugins were part of the core Kubernetes code. The container storage
    interface provides an interface for exposing arbitrary blocks and file storage
    to Kubernetes. Cloud providers can expose advanced filesystems to Kubernetes by
    using CSI plugins. Plugins such as MapR and Snapshot are popular among cluster
    administrators.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 在 v1.13 中引入了容器存储接口。在 1.13 之前，新的卷插件是核心 Kubernetes 代码的一部分。容器存储接口提供了一个接口，用于向
    Kubernetes 公开任意块和文件存储。云提供商可以使用 CSI 插件向 Kubernetes 公开高级文件系统。MapR 和 Snapshot 等插件在集群管理员中很受欢迎。
- en: The container runtime interface
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器运行时接口
- en: At the lowest level of Kubernetes, container runtimes ensure containers start,
    work, and stop. The most popular container runtime is Docker. The container runtime
    interface gives cluster administrators the ability to use other container runtimes,
    such as `frakti`, `rktlet`, and `cri-o`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 的最低级别，容器运行时确保容器启动、工作和停止。最流行的容器运行时是 Docker。容器运行时接口使集群管理员能够使用其他容器运行时，如
    `frakti`、`rktlet` 和 `cri-o`。
- en: Kubernetes objects
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 对象
- en: The storage and compute resources of the system are classified into different
    objects that reflect the current state of the cluster. Objects are defined using
    a `.yaml` spec and the Kubernetes API is used to create and manage the objects.
    We are going to cover some common Kubernetes objects in detail.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的存储和计算资源被分类为反映集群当前状态的不同对象。对象使用 `.yaml` 规范进行定义，并使用 Kubernetes API 来创建和管理这些对象。我们将详细介绍一些常见的
    Kubernetes 对象。
- en: Pods
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pods
- en: A pod is a basic building block of a Kubernetes cluster. It's a group of one
    or more containers that are expected to co-exist on a single host. Containers
    within a pod can reference each other using localhost or **inter-process communications**
    (**IPCs**).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 是 Kubernetes 集群的基本构建块。它是一个或多个容器的组，这些容器预期在单个主机上共存。Pod 中的容器可以使用本地主机或**进程间通信**（**IPC**）相互引用。
- en: Deployments
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: Kubernetes deployments help scale pods up or down based on labels and selectors.
    The YAML spec for a deployment consists of `replicas`, which is the number of
    instances of pods that are required, and `template`, which is identical to a pod
    specification.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 部署可以根据标签和选择器来扩展或缩减 pod。部署的 YAML 规范包括 `replicas`，即所需的 pod 实例数量，以及
    `template`，与 pod 规范相同。
- en: Services
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: A Kubernetes service is an abstraction of an application. A service enables
    network access for pods. Services and deployments work in conjunction to ease
    the management and communication between different pods of an application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 服务是应用程序的抽象。服务为 pod 提供网络访问。服务和部署共同工作，以便简化不同应用程序的不同 pod 之间的管理和通信。
- en: Replica sets
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 副本集
- en: Replica sets ensure a given number pods are running in a system at any given
    time. It is better to use deployments over replica sets. Deployments encapsulate
    replica sets and pods. Additionally, deployments provide the ability to carry
    out rolling updates.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 副本集确保系统中始终运行指定数量的pod。最好使用部署而不是副本集。部署封装了副本集和pod。此外，部署提供了进行滚动更新的能力。
- en: Volumes
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卷
- en: Container storage is ephemeral. If the container crashes or reboots, it starts
    from its original state when it starts. Kubernetes volumes help solve this problem.
    A container can use volumes to store a state. A Kubernetes volume has a lifetime
    of a pod; as soon as the pod perishes, the volume is cleaned up as well. Some
    of the supported volumes include `awsElasticBlockStore`, `azureDisk`, `flocker`,
    `nfs`, and `gitRepo`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 容器存储是暂时的。如果容器崩溃或重新启动，它会从启动时的原始状态开始。Kubernetes卷有助于解决这个问题。容器可以使用卷来存储状态。Kubernetes卷的生命周期与pod相同；一旦pod消失，卷也会被清理掉。一些支持的卷包括`awsElasticBlockStore`、`azureDisk`、`flocker`、`nfs`和`gitRepo`。
- en: Namespaces
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'Namespaces help a physical cluster to be divided into multiple virtual clusters.
    Multiple objects can be isolated within different namespaces. Default Kubernetes
    ships with three namespaces: `default`, `kube-system`, and `kube-public`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间帮助将物理集群划分为多个虚拟集群。多个对象可以在不同的命名空间中进行隔离。默认的Kubernetes附带三个命名空间：`default`、`kube-system`和`kube-public`。
- en: Service accounts
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务账户
- en: 'Pods that need to interact with `kube-apiserver` use service accounts to identify
    themselves. By default, Kubernetes is provisioned with a list of default service
    accounts: `kube-proxy`, `kube-dns`, `node-controller`, and so on. Additional service
    accounts can be created to enforce custom access control.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 需要与`kube-apiserver`交互的pod使用服务账户来标识自己。默认情况下，Kubernetes配置了一系列默认服务账户：`kube-proxy`、`kube-dns`、`node-controller`等。可以创建额外的服务账户来强制执行自定义访问控制。
- en: Network policies
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络策略
- en: A network policy defines a set of rules of how a group of pods is allowed to
    communicate with each other and other network endpoints. Any incoming and outgoing
    network connections are gated by the network policy. By default, a pod is able
    to communicate with all pods.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 网络策略定义了一组规则，规定了一组pod如何允许与彼此和其他网络端点进行通信。所有传入和传出的网络连接都受网络策略的控制。默认情况下，一个pod可以与所有pod进行通信。
- en: Pod security policies
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pod安全策略
- en: The pod security policy is a cluster-level resource that defines a set of conditions
    that must be fulfilled for a pod to run on the system. Pod security policies define
    the security-sensitive configuration for a pod. These policies must be accessible
    to the requesting user or the service account of the target pod to work.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Pod安全策略是一个集群级资源，定义了必须满足的一组条件，才能在系统上运行pod。Pod安全策略定义了pod的安全敏感配置。这些策略必须对请求用户或目标pod的服务账户可访问才能生效。
- en: Kubernetes variations
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes变体
- en: In the Kubernetes ecosystem, Kubernetes is the flagship among all variations.
    However, there are some other ships that play very important roles. Next, we will
    introduce some Kubernetes-like platforms, which serve different purposes in the
    ecosystem.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes生态系统中，Kubernetes是各种变体中的旗舰。然而，还有一些其他起着非常重要作用的船只。接下来，我们将介绍一些类似Kubernetes的平台，在生态系统中发挥不同的作用。
- en: Minikube
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Minikube
- en: Minikube is the single-node cluster version of Kubernetes that can be run on
    Linux, macOS, and Windows platforms. Minikube supports standard Kubernetes features,
    such as `LoadBalancer`, services, `PersistentVolume`, `Ingress`, container runtimes,
    and developer-friendly features such as add-ons and GPU support.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube是Kubernetes的单节点集群版本，可以在Linux、macOS和Windows平台上运行。Minikube支持标准的Kubernetes功能，如`LoadBalancer`、服务、`PersistentVolume`、`Ingress`、容器运行时，以及开发人员友好的功能，如附加组件和GPU支持。
- en: Minikube is a great starting place to get hands-on experience with Kubernetes.
    It's also a good place to run tests locally, especially cluster dependency or
    working on proof of concepts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube是一个很好的起点，可以让您亲身体验Kubernetes。它也是一个很好的地方来在本地运行测试，特别是集群依赖或工作在概念验证上。
- en: K3s
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: K3s
- en: K3s is a lightweight Kubernetes platform. Its total size is less than 40 MB.
    It is great for Edge, **Internet of Things** (**IoT**), and **ARM**, previously
    **Advanced RISC Machine**, originally **Acorn RISC Machine**, a family of **reduced
    instruction set computing** (**RISC**) architectures for computer processors,
    configured for various environments. It is supposed to be fully compliant with
    Kubernetes. One significant difference from Kubernetes is that it uses `sqlite`
    as a default storage mechanism, while Kubernetes uses `etcd` as its default storage
    server.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: K3s是一个轻量级的Kubernetes平台。其总大小不到40MB。它非常适合边缘计算，物联网（IoT）和ARM，先前是高级RISC机器，最初是Acorn
    RISC Machine的一系列用于各种环境的精简指令集计算（RISC）架构的计算机处理器。它应该完全符合Kubernetes。与Kubernetes的一个重要区别是，它使用`sqlite`作为默认存储机制，而Kubernetes使用`etcd`作为其默认存储服务器。
- en: OpenShift
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift
- en: OpenShift version 3 adopted Docker as its container technology and Kubernetes
    as its container orchestration technology. In version 4, OpenShift switched to
    CRI-O as the default container runtime. It appears as though OpenShift should
    be the same as Kubernetes; however, there are quite a few differences.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 3版本采用了Docker作为其容器技术，Kubernetes作为其容器编排技术。在第4版中，OpenShift切换到CRI-O作为默认的容器运行时。看起来OpenShift应该与Kubernetes相同；然而，它们之间有相当多的区别。
- en: OpenShift versus Kubernetes
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenShift与Kubernetes
- en: The connections between Linux and Red Hat Linux might first appear to be the
    same as the connections between OpenShift and Kubernetes. Now, let's look at some
    of their major differences.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Linux和Red Hat Linux之间的联系可能首先看起来与OpenShift和Kubernetes之间的联系相同。现在，让我们来看一下它们的一些主要区别。
- en: Naming
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命名
- en: Objects named in Kubernetes might have different names in OpenShift, although
    sometimes their functionality is alike. For example, a namespace in Kubernetes
    is called a project in OpenShift, and project creation comes with default objects.
    Ingress in Kubernetes is called routes in OpenShift. Routes were actually introduced
    earlier than Ingress objects. Underneath, routes in OpenShift are implemented
    by HAProxy, while there are many ingress controller options in Kubernetes. Deployment
    in Kubernetes is called `deploymentConfig`. However, the implementation underneath
    is quite different.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中命名的对象在OpenShift中可能有不同的名称，尽管有时它们的功能是相似的。例如，在Kubernetes中，命名空间称为OpenShift中的项目，并且项目创建附带默认对象。在Kubernetes中，Ingress称为OpenShift中的路由。路由实际上比Ingress对象更早引入。在OpenShift下，路由由HAProxy实现，而在Kubernetes中有许多Ingress控制器选项。在Kubernetes中，部署称为`deploymentConfig`。然而，在底层实现上有很大的不同。
- en: Security
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安全性
- en: Kubernetes is open and less secure by default. OpenShift is relatively closed
    and offers a handful of good security mechanisms to secure a cluster. For example,
    when creating an OpenShift cluster, DevOps can enable the internal image registry,
    which is not exposed to the external one. At the same time, the internal image
    registry serves as the trusted registry where the image will be pulled and deployed.
    There is another thing that OpenShift projects do better than `kubernetes` namespaces—when
    creating a project in OpenShift, you can modify the project template and add extra
    objects, such as `NetworkPolicy` and default quotas, to the project that are compliant
    with your company's policy. It also helps hardening, by default.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes默认是开放的，安全性较低。OpenShift相对封闭，并提供了一些良好的安全机制来保护集群。例如，在创建OpenShift集群时，DevOps可以启用内部镜像注册表，该注册表不会暴露给外部。同时，内部镜像注册表充当受信任的注册表，图像将从中拉取和部署。OpenShift项目在某些方面比`kubernetes`命名空间做得更好——在OpenShift中创建项目时，可以修改项目模板并向项目添加额外的对象，例如`NetworkPolicy`和符合公司政策的默认配额。这也有助于默认加固。
- en: Cost
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 成本
- en: OpenShift is a product offered by Red Hat, although there is a community version
    project called OpenShift Origin. When people talk about OpenShift, they usually
    mean the paid option of the OpenShift product with support from Red Hat. Kubernetes
    is a completely free open source project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift是Red Hat提供的产品，尽管有一个名为OpenShift Origin的社区版本项目。当人们谈论OpenShift时，他们通常指的是得到Red
    Hat支持的付费OpenShift产品。Kubernetes是一个完全免费的开源项目。
- en: Kubernetes and cloud providers
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes和云提供商
- en: A lot of people believe that Kubernetes is the future of infrastructure, and
    there are some people who believe that everything will end up on the cloud. However,
    this doesn't mean you have to run Kubernetes on the cloud, but it does work really
    well with the cloud.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人相信Kubernetes是基础设施的未来，也有一些人相信一切都会最终转移到云上。然而，这并不意味着你必须在云上运行Kubernetes，但它确实在云上运行得非常好。
- en: Kubernetes as a service
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes作为服务
- en: Containerization makes applications more portable so that locking down with
    a specific cloud provider becomes unlikely. Although there are some great open
    source tools, such as `kubeadm` and `kops`, that can help DevOps create Kubernetes
    clusters, Kubernetes as a service offered by a cloud provider still sounds attractive.
    As the original creator of Kubernetes, Google has offered Kubernetes as a service
    since 2014\. It is called **Google Kubernetes Engine** (**GKE**). In 2017, Microsoft
    offered its own Kubernetes service, called **Azure Kubernetes Service** (**AKS**).
    AWS offered **Elastic Kubernetes Service** (**EKS**) in 2018.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化使应用程序更具可移植性，因此不太可能与特定的云提供商绑定。尽管有一些出色的开源工具，如`kubeadm`和`kops`，可以帮助DevOps创建Kubernetes集群，但云提供商提供的Kubernetes作为服务仍然很有吸引力。作为Kubernetes的原始创建者，Google自2014年起就提供了Kubernetes作为服务。它被称为**Google
    Kubernetes Engine**（**GKE**）。2017年，微软推出了自己的Kubernetes服务，称为**Azure Kubernetes Service**（**AKS**）。AWS在2018年推出了**Elastic
    Kubernetes Service**（**EKS**）。
- en: 'Kubedex ([https://kubedex.com/google-gke-vs-microsoft-aks-vs-amazon-eks/](https://kubedex.com/google-gke-vs-microsoft-aks-vs-amazon-eks/))
    have carried out a great comparison of the cloud Kubernetes services. Some of
    the differences between the three are listed in the following table:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Kubedex（[https://kubedex.com/google-gke-vs-microsoft-aks-vs-amazon-eks/](https://kubedex.com/google-gke-vs-microsoft-aks-vs-amazon-eks/)）对云Kubernetes服务进行了很好的比较。以下表格列出了这三者之间的一些差异：
- en: '![](image/02_a.jpg)![](image/02_b.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](image/02_a.jpg)![](image/02_b.jpg)'
- en: 'Some highlights worth emphasizing from the preceding list are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 前面列表中值得强调的一些亮点如下：
- en: '**Scalability**: GKE supports up to 5,000 nodes per cluster, while AKS and
    EKS only support a few hundred nodes or less.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：GKE支持每个集群最多5000个节点，而AKS和EKS只支持少量节点或更少。'
- en: '**Advanced security options**: GKE supports Istio service meshes, Sandbox,
    Binary Authorization, and ingress-managed **secure sockets layer** (**SSL**),
    while AKS and EKS cannot.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级安全选项**：GKE支持Istio服务网格、Sandbox、二进制授权和入口管理的**安全套接字层**（**SSL**），而AKS和EKS则不支持。'
- en: 'If the plan is to deploy and manage microservices in a Kubernetes cluster provisioned
    by cloud providers, you need to consider the scalability capability as well as
    security options available with the cloud provider. There are certain limitations
    if you use a cluster managed by a cloud provider:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果计划在由云提供商提供的Kubernetes集群中部署和管理微服务，您需要考虑云提供商提供的可扩展性能力以及安全选项。如果您使用由云提供商管理的集群，则存在一些限制：
- en: Some of the cluster configuration and hardenings are done by the cloud provider
    by default and may not be subject to change.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云提供商默认情况下会执行一些集群配置和加固，并且可能无法更改。
- en: You lose the flexibility of managing the Kubernetes cluster. For example, if
    you want to enable Kubernetes' audit policy and export audit logs to `splunk`,
    you might want to make some configuration changes to the `kube-apiserver` manifest.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您失去了管理Kubernetes集群的灵活性。例如，如果您想要启用Kubernetes的审计策略并将审计日志导出到`splunk`，您可能需要对`kube-apiserver`清单进行一些配置更改。
- en: There is limited access to the master node where `kube-apiserver` is running.
    The limitation totally makes sense if you are focused on deploying and managing
    microservices. In some cases, you need to enable some admission controllers, then
    you will have to make changes to the `kube-apiserver` manifest as well. These
    operations require access to the master node.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对运行`kube-apiserver`的主节点的访问受到限制。如果您专注于部署和管理微服务，这种限制完全是有意义的。在某些情况下，您需要启用一些准入控制器，然后还需要对`kube-apiserver`清单进行更改。这些操作需要访问主节点。
- en: If you want to have a Kubernetes cluster with access to the cluster node, an
    open source tool—`kops`—can help you.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要访问集群节点的Kubernetes集群，可以使用一个开源工具——`kops`。
- en: Kops
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kops
- en: '**Kubernetes Operations** (**kops**), helps in creating, destroying, upgrading,
    and maintaining production-grade, highly available Kubernetes clusters from the
    command line. It officially supports AWS and supports GCE and OpenStack in the
    beta version. The major difference from provisioning a Kubernetes cluster on a
    cloud Kubernetes service is that the provisioning starts from the VM layer. This
    means that with `kops` you can control what OS image you want to use and set up
    your own admin SSH key to access both the master nodes and the worker nodes. An
    example of creating a Kubernetes cluster in AWS is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes操作**（**kops**）有助于通过命令行创建、销毁、升级和维护高可用的生产级Kubernetes集群。它正式支持AWS，并在beta版本中支持GCE和OpenStack。与在云Kubernetes服务上提供Kubernetes集群的主要区别在于，提供是从VM层开始的。这意味着使用`kops`可以控制您想要使用的操作系统映像，并设置自己的管理员SSH密钥以访问主节点和工作节点。在AWS中创建Kubernetes集群的示例如下：'
- en: '[PRE0]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the preceding `kops` command, a three-worker-nodes Kubernetes cluster is
    created. The user can choose the size of the master node and the CNI plugin.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的`kops`命令，创建了一个包含三个工作节点的Kubernetes集群。用户可以选择主节点和CNI插件的大小。
- en: Why worry about Kubernetes' security?
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要担心Kubernetes的安全性？
- en: Kubernetes was in general availability in 2018 and is still evolving very fast.
    There are features that are still under development and are not in a GA state
    (either alpha or beta). This is an indication that Kubernetes itself is far from
    mature, at least from a security standpoint. But this is not the main reason that
    we need to be concerned with Kubernetes security.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes在2018年正式推出，并且仍在快速发展。还有一些功能仍在开发中，尚未达到GA状态（alpha或beta）。这表明Kubernetes本身远未成熟，至少从安全的角度来看。但这并不是我们需要关注Kubernetes安全性的主要原因。
- en: Bruce Schneier summed this up best in 1999 when he said '*Complexity is the
    worst enemy of security*' in an essay titled *A Plea for Simplicity*, correctly
    predicting the cybersecurity problems we encounter today ([https://www.schneier.com/essays/archives/1999/11/a_plea_for_simplicit.html](https://www.schneier.com/essays/archives/1999/11/a_plea_for_simplicit.html)).
    In order to address all the major orchestration requirements of stability, scalability,
    flexibility, and security, Kubernetes has been designed in a complex but cohesive
    way. This complexity no doubt brings with it some security concerns.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Bruce Schneier在1999年的一篇名为《简化的请求》的文章中最好地总结了这一点，他说“*复杂性是安全的最大敌人*”，准确预测了我们今天遇到的网络安全问题。为了满足稳定性、可扩展性、灵活性和安全性的所有主要编排需求，Kubernetes被设计成复杂但紧密的方式。这种复杂性无疑带来了一些安全问题。
- en: Configurability is one of the top benefits of the Kubernetes platform for developers.
    Developers and cloud providers are free to configure their clusters to suit their
    needs. This trait of Kubernetes is one of the major reasons for increasing security
    concerns among enterprises. The ever-growing Kubernetes code and components of
    a Kubernetes cluster make it challenging for DevOps to understand the correct
    configuration. The default configurations are usually not secure (the openness
    does bring advantages to DevOps to try out new features).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可配置性是Kubernetes平台对开发人员的主要优势之一。开发人员和云提供商可以自由配置他们的集群以满足他们的需求。Kubernetes的这一特性是企业日益增加的安全担忧的主要原因之一。Kubernetes代码的不断增长和Kubernetes集群的组件使得DevOps难以理解正确的配置。默认配置通常不安全（开放性确实为DevOps尝试新功能带来了优势）。
- en: 'With the increase in the usage of Kubernetes, it has been in the news for various
    security breaches and flaws:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Kubernetes的使用增加，它因各种安全漏洞和缺陷而成为新闻头条：
- en: Researchers at Palo Alto Networks found 40,000 Docker and Kubernetes containers
    exposed to the internet. This was the result of misconfigured deployments.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Palo Alto Networks的研究人员发现了40,000个Docker和Kubernetes容器暴露在互联网上。这是由于配置错误导致的结果。
- en: Attackers used Tesla's unsecured administrative console to run a crypto-mining
    rig.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者利用了特斯拉的未加密管理控制台来运行加密挖矿设备。
- en: A privilege escalation vulnerability was found in a Kubernetes version, which
    allowed a specially crafted request to establish a connection through the API
    server to the backend and send an arbitrary request.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kubernetes版本中发现了特权升级漏洞，允许经过精心设计的请求通过API服务器与后端建立连接并发送任意请求。
- en: The use of a Kubernetes metadata beta feature in a production environment led
    to an **Server-Side Request Forgery** (**SSRF**) attack on the popular e-commerce
    platform Shopify. The vulnerability exposed the Kubernetes metadata, which revealed
    Google service account tokens and the `kube-env` details, which allowed the attacker
    to compromise the cluster.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中使用Kubernetes元数据测试版功能导致了对流行的电子商务平台Shopify的**服务器端请求伪造**（**SSRF**）攻击。这个漏洞暴露了Kubernetes元数据，揭示了Google服务帐户令牌和`kube-env`详细信息，使攻击者能够
    compromise 集群。
- en: 'A recent survey by The New Stack ([https://thenewstack.io/top-challenges-kubernetes-users-face-deployment/](https://thenewstack.io/top-challenges-kubernetes-users-face-deployment/))
    shows that security is the primary concern of enterprises running Kubernetes:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: The New Stack最近的一项调查（[https://thenewstack.io/top-challenges-kubernetes-users-face-deployment/](https://thenewstack.io/top-challenges-kubernetes-users-face-deployment/)）显示，安全是运行Kubernetes的企业的主要关注点：
- en: '![Figure 1.3 – Top concerns for Kubernetes users'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 - Kubernetes用户的主要关注点'
- en: '](image/B15566_01_03.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_01_03.jpg)'
- en: Figure 1.3 – Top concerns for Kubernetes users
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 - Kubernetes用户的主要关注点
- en: Kubernetes is not secure by default. We will explain more about this in later
    chapters. Security becoming one of the primary concerns of users totally makes
    sense. It is a problem that needs to be addressed properly just like other infrastructure
    or platform.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes默认情况下不安全。我们将在后面的章节中详细解释这一点。安全成为用户的主要关注点之一是完全有道理的。这是一个需要妥善解决的问题，就像其他基础设施或平台一样。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The trend of microservices and the rise of Docker has enabled Kubernetes to
    become the de facto platform for DevOps to deploy, scale, and manage containerized
    applications. Kubernetes abstracts storage and computing resources as Kubernetes
    objects, which are managed by components such as `kube-apiserver`, `kubelet`,
    `etcd`, and so on.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的趋势和Docker的兴起使得Kubernetes成为DevOps部署、扩展和管理容器化应用程序的事实标准平台。Kubernetes将存储和计算资源抽象为Kubernetes对象，由`kube-apiserver`、`kubelet`、`etcd`等组件管理。
- en: Kubernetes can be created in a private data center or on the cloud or hybrid.
    This allows DevOps to work with multiple cloud providers and not get locked down
    to any one of them. Although Kubernetes is in GA as of 2018, it is still young
    and evolving very fast. As Kubernetes gets more and more attention, the attacks
    targeted at Kubernetes also become more notable.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes可以在私有数据中心或云上或混合环境中创建。这使得DevOps可以与多个云提供商合作，而不会被锁定在任何一个云提供商上。尽管Kubernetes在2018年已经成熟，但它仍然年轻，并且发展非常迅速。随着Kubernetes受到越来越多的关注，针对Kubernetes的攻击也变得更加显著。
- en: In the next chapter, we are going to cover the Kubernetes network model and
    understand how microservices communicate with each other in Kubernetes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Kubernetes网络模型，并了解微服务在Kubernetes中如何相互通信。
- en: Questions
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the major problems of monolith architecture?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单体架构的主要问题是什么？
- en: What are Kubernetes' master components?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes的主要组件是什么？
- en: What is deployment?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署是什么？
- en: What are some variations of Kubernetes?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes的一些变体是什么？
- en: Why do we care about Kubernetes' security?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为什么关心Kubernetes的安全性？
- en: Further reading
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following links contain more detailed information about Kubernetes, `kops`,
    and the OpenShift platform. You will find them useful when starting to build a
    Kubernetes cluster:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接包含有关Kubernetes、`kops`和OpenShift平台的更详细信息。在开始构建Kubernetes集群时，您会发现它们很有用：
- en: '[https://kubernetes.io/docs/concepts/](https://kubernetes.io/docs/concepts/)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/concepts/](https://kubernetes.io/docs/concepts/)'
- en: '[https://kubernetes.io/docs/tutorials/](https://kubernetes.io/docs/tutorials/)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/tutorials/](https://kubernetes.io/docs/tutorials/)'
- en: '[https://github.com/kubernetes/kops](https://github.com/kubernetes/kops)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/kubernetes/kops](https://github.com/kubernetes/kops)'
- en: '[https://docs.openshift.com/container-platform/4.2](https://docs.openshift.com/container-platform/4.2)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.openshift.com/container-platform/4.2](https://docs.openshift.com/container-platform/4.2)'
- en: '[https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview](https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview](https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview)'
