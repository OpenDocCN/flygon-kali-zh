["```\n# If Java has not yet been installed, install it now\nsudo apt install openjdk-8-jre-headless\n\n# Install Jenkins on an Ubuntu system\nwget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -\nsudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\nsudo apt-get update\nsudo apt-get install jenkins\n```", "```\n// Our hello world pipeline script, named \"hello-test\"\nnode {\n  stage('Say Hello') {\n      echo 'Hello Docker Quick Start Guide Readers!'\n   }\n}\n```", "```\n// Our Docker hello world pipeline script, named \"hello-docker-test\"\nnode {\n   stage('Hello via Alpine') {\n      docker.image('alpine:latest').inside {\n         sh 'echo Hello DQS Readers - from inside an alpine container!'\n      }\n   }\n}\n```", "```\n# Add the jenkins user to the docker group\nsudo usermod -aG docker jenkins\n# Then restart the jenkins service\nsudo service jenkins restart\n```", "```\n# Setup volume location to store Jenkins configuration\nmkdir $HOME/jenkins_home\nchown 1000 $HOME/jenkins_home\n```", "```\n# Deploy a Jenkins server that is configured to build Docker images\ndocker container run -d -p 8080:8080 -p 50000:50000 \\\n-v $HOME/jenkins_home:/var/jenkins_home \\\n--name jenkins --rm jenkins/jenkins:lts\n```", "```\n# Setup volume location to store Jenkins configuration\nmkdir $HOME/jenkins_home\nchown 1000 $HOME/jenkins_home\n```", "```\n# Deploy a Jenkins server that is configured to build Docker images\ndocker container run -d -p 8080:8080 -p 50000:50000 \\\n-v $HOME/jenkins_home:/var/jenkins_home \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n--name jenkins --rm h1kkan/jenkins-docker:lts\n\n# Start the Docker service in the Jenkins docker container\ndocker container exec -it -u root jenkins service docker start\n```", "```\n# Setup volume location to store Jenkins configuration\nmkdir $HOME/jenkins_home\nchown 1000 $HOME/jenkins_home\n```", "```\n# jenkins-stack.yml\nversion: \"3\"\nservices:\n  jenkins:\n    image: h1kkan/jenkins-docker:lts\n    ports:\n       - 8080:8080\n       - 50000:50000\n    volumes:\n       - $HOME/jenkins_home:/var/jenkins_home\n       - /var/run/docker.sock:/var/run/docker.sock\n    deploy:\n       replicas: 1\n       restart_policy:\n         condition: on-failure\n    placement:\n      constraints: [node.role == manager]\n\n  registry:\n    image: registry\n    ports:\n       - 5000:5000\n deploy:\n    replicas: 1\n    restart_policy:\n      condition: on-failure\n```", "```\n# Deploy our Jenkins application via a Docker stack\ndocker stack deploy -c jenkins-stack.yml jenkins\n```", "```\n# Make a new folder to use for the build context of your new Docker image, and cd into it\nmkdir jenkins-agent\ncd jenkins-agent\n```", "```\n# jenkins-agent Dockerfile\nFROM h1kkan/jenkins-docker:lts-alpine\nUSER root\nARG user=jenkins\n\nENV HOME /home/${user}\nARG VERSION=3.26\nARG AGENT_WORKDIR=/home/${user}/agent\n\nRUN apk add --update --no-cache curl bash git openssh-client openssl procps \\\n && curl --create-dirs -sSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar \\\n && chmod 755 /usr/share/jenkins \\\n && chmod 644 /usr/share/jenkins/slave.jar \\\n && apk del curl\n\nENV AGENT_WORKDIR=${AGENT_WORKDIR}\nRUN mkdir -p /home/${user}/.jenkins && mkdir -p ${AGENT_WORKDIR}\nUSER ${user}\n\nVOLUME /home/${user}/.jenkins\nVOLUME ${AGENT_WORKDIR}\nWORKDIR /home/${user}\n```", "```\n# Build our new Jenkins agent image\ndocker image build -t jenkins-agent:latest .\n```", "```\n# Tag the image with our swarm service registry\ndocker image tag jenkins-agent:latest ubuntu-node01:5000/jenkins-agent:latest\n```", "```\n# Push the Jenkins agent image to the registry\ndocker image push ubuntu-node01:5000/jenkins-agent:latest\n```", "```\nFROM node:10-alpine\nCOPY . .\nRUN npm install\nEXPOSE 8000\nCMD npm start\n```", "```\nnode {\n   def app\n   stage('Clone repository') {\n      /* Clone the repository to our workspace */\n      checkout scm\n   }\n   stage('Build image') {\n      /* Builds the image; synonymous to docker image build on the command line */\n      /* Use a registry name if pushing into docker hub or your company registry, like this */\n      /* app = docker.build(\"earlwaud/jenkins-example-app\") */\n      app = docker.build(\"jenkins-example-app\")\n   }\n   stage('Test image') {\n      /* Execute the defined tests */\n      app.inside {\n         sh 'npm test'\n      }\n   }\n   stage('Push image') {\n      /* Now, push the image into the registry */\n      /* This would probably be docker hub or your company registry, like this */\n      /* docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') */\n\n      /* For this example, We are using our jenkins-stack service registry */\n      docker.withRegistry('https://ubuntu-node01:5000') {\n         app.push(\"latest\")\n      }\n   }\n}\n```", "```\n// load the http module\nvar http = require('http');\n\n// configure our HTTP server\nvar server = http.createServer(function (request, response) {\n   response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n   response.end(\"Hello Docker Quick Start\\n\");\n});\n\n// listen on localhost:8000\nserver.listen(8000);\nconsole.log(\"Server listening at http://127.0.0.1:8000/\");\n```", "```\n{\n   \"name\": \"dqs-example-app\",\n   \"version\": \"1.0.0\",\n   \"description\": \"A Docker Quick Start Example HTTP server\",\n   \"main\": \"main.js\",\n   \"scripts\": {\n      \"test\": \"node test.js\",\n      \"start\": \"node main.js\"\n   },\n   \"repository\": {\n      \"type\": \"git\",\n      \"url\": \"https://github.com/earlwaud/dqs-example-app/\"\n   },\n   \"keywords\": [\n      \"node\",\n      \"docker\",\n      \"dockerfile\",\n      \"jenkinsfile\"\n   ],\n   \"author\": \"earlwaud@hotmail.com\",\n   \"license\": \"ISC\",\n   \"devDependencies\": { \"test\": \">=0.6.0\" }\n}\n```", "```\nvar assert = require('assert')\n\nfunction test() {\n   assert.equal(1 + 1, 2);\n}\n\nif (module == require.main) require('test').run(test);\n```", "```\n# Initial commit of our application files to the new repo\ngit add Dockerfile Jenkinsfile main.js package.json test.js\ngit commit -m \"Initial commit\"\ngit push origin master\n```", "```\nStarted by an SCM change\nStarted by user Earl Waud\nObtained Jenkinsfile from git https://github.com/EarlWaud/dqs-example-app.git\n[Pipeline] node\nRunning on agent-00042y2g983xq on docker in /home/jenkins/agent/workspace/dqs-example-app\n[Pipeline] { (Clone repository)\nCloning repository https://github.com/EarlWaud/dqs-example-app.git\n> git init /home/jenkins/agent/workspace/dqs-example-app # timeout=10\n[Pipeline] { (Build image)\n+ docker build -t jenkins-example-app .\nSuccessfully built b228cd7c0013\nSuccessfully tagged jenkins-example-app:latest\n[Pipeline] { (Test image)\n+ docker inspect -f . jenkins-example-app\n+ npm test\n> node test.js\nPassed:1 Failed:0 Errors:0\n[Pipeline] { (Push image)\n+ docker tag jenkins-example-app ubuntu-node01:5000/jenkins-example-app:latest\n+ docker push ubuntu-node01:5000/jenkins-example-app:latest\nFinished: SUCCESS\n```"]