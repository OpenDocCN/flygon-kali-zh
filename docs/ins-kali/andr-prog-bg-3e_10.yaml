- en: '*Chapter 10*: Object-Oriented Programming'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：面向对象编程'
- en: In this chapter, we will discover that in Java, classes are fundamental to just
    about everything. We will also begin to understand why the software engineers
    at Sun Microsystems back in the early 1990s made Java the way they did.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将发现在Java中，类对几乎所有事情都是基础的。我们还将开始理解为什么Sun Microsystems的软件工程师在20世纪90年代初让Java成为现在这个样子。
- en: We have already talked about reusing other people's code, specifically the Android
    API, but in this chapter, we will really get to grips with how this works and
    learn about object-oriented programming and how to use it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈论了重用其他人的代码，特别是Android API，但在本章中，我们将真正掌握这是如何工作的，并学习面向对象编程以及如何使用它。
- en: 'In summary, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们将涵盖以下主题：
- en: What object-oriented programming is, including **encapsulation**, **inheritance**,
    and **polymorphism**
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程是什么，包括**封装**、**继承**和**多态**
- en: Writing and using our first class in an app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序中编写和使用我们的第一个类
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2010](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2010).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章的代码文件，网址为[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2010](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2010)。
- en: Important memory management warning
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的内存管理警告
- en: I'm referring to our brains' memories for a change. If you tried to memorize
    this chapter (or the next), you would have to make a lot of room in your brain
    and you would probably forget something really important – like going to work
    or thanking the author for telling you not to try and memorize this stuff.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在提到我们大脑的记忆。如果你试图记住本章（或下一章），你将不得不在你的大脑中腾出很多空间，你可能会忘记一些非常重要的事情——比如去工作或感谢作者告诉你不要试图记住这些东西。
- en: A good goal will be to try and *just-about get it*. This way, your understanding
    will become more rounded. You can then refer to this chapter (or the next) for
    a refresher when needed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的目标将是尽量*接近理解*。这样，你的理解将变得更全面。然后在需要时，你可以参考本章（或下一章）进行复习。
- en: Tip
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: It doesn't matter if you don't completely understand everything in this chapter
    straight away! Keep on reading and make sure to complete all the apps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对本章的内容不完全理解也没关系！继续阅读并确保完成所有的应用程序。
- en: Object-oriented programming
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: In [*Chapter 1*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*, Beginning Android
    and Java*, we mentioned that Java was an object-oriented language. An object-oriented
    language requires us to use **object-oriented** **programming (OOP**). It isn't
    an optional extra like a racing spoiler on a car or pulsating LEDs in a gaming
    PC. It's part of Java and therefore Android as well.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*，开始Android和Java*中，我们提到Java是一种面向对象的语言。面向对象的语言要求我们使用**面向对象**
    **编程（OOP**）。这不像汽车上的赛车扰流板或游戏PC上的跳动LED那样是可选的额外部分。它是Java的一部分，因此也是Android的一部分。
- en: Let's find out a little bit more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们多了解一点。
- en: What is OOP exactly?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OOP究竟是什么？
- en: OOP is a way of programming that involves breaking our requirements down into
    chunks that are more manageable than the whole.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程是一种将我们的需求分解为比整体更易管理的块的编程方式。
- en: Each chunk is self-contained yet potentially reusable by other programs, while
    working together as a whole with the other chunks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个块都是自包含的，但也可能被其他程序重复使用，同时与其他块一起工作。
- en: These chunks are what we refer to as objects. When we plan/code an object, we
    do so with a class. A class can be thought of as the blueprint of an object.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些块是我们所说的对象。当我们计划/编写一个对象时，我们使用一个类。一个类可以被看作是一个对象的蓝图。
- en: We implement an object *of* a class. This is called an **instance** of a class.
    Think about a house blueprint. You can't live in it, but you can build a house
    from it; you build an instance of it. Often when we design classes for our apps,
    we write them to represent real-world *things*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现一个类的对象。这被称为类的一个实例。想象一下房屋蓝图。你不能住在里面，但你可以从中建造一座房子；你建造它的一个实例。通常当我们为我们的应用设计类时，我们写它们来代表现实世界的事物。
- en: However, OOP is more than this. It is also a *way* of doing things – a methodology
    that defines best practices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，面向对象编程不仅仅是这样。它也是一种做事情的*方式*——一种定义最佳实践的方法。
- en: The three core principles of OOP are **encapsulation**, **polymorphism**, and
    **inheritance**. This might sound complex but, when taken a step at a time, is
    reasonably straightforward.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的三个核心原则是**封装**、**多态**和**继承**。这听起来可能很复杂，但一步一步来，是相当简单的。
- en: Encapsulation
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 封装
- en: '**Encapsulation** means keeping the internal workings of your code safe from
    interference from the code that uses it, by allowing only the variables and methods
    you choose to be accessed.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 封装意味着保持代码的内部工作不受使用它的代码的干扰，只允许访问你选择的变量和方法。
- en: This means your code can always be updated, extended, or improved without affecting
    the programs that use it, as long as the exposed parts are still accessed in the
    same way.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的代码总是可以更新、扩展或改进，而不会影响使用它的程序，只要暴露的部分仍然以相同的方式访问。
- en: Remember this line of code from [*Chapter 1*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*,
    Beginning Android and Java*?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得[*第1章*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*，开始Android和Java*中的这行代码吗？
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With proper encapsulation, it doesn't matter if the satellite company or the
    Android API team needs to update the way their code works. Provided the `getLastKnownLocation`
    method signature remains the same, we don't have to worry about what goes on inside.
    Our code written before the update will still work after the update.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过适当的封装，卫星公司或Android API团队需要更新他们的代码工作方式都无关紧要。只要`getLastKnownLocation`方法签名保持不变，我们就不必担心内部发生了什么。我们在更新之前编写的代码在更新后仍将正常工作。
- en: If the manufacturer of a car gets rid of the wheels and makes it an electrically
    powered hovercar, as long as it still has a steering wheel, accelerator, and brake
    pedal, driving it should not be too challenging.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果汽车制造商去掉车轮，将其改为电动悬浮汽车，只要它仍然有方向盘、油门和刹车踏板，驾驶它应该不会太具有挑战性。
- en: Important Note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When we use the classes of the Android API, we are doing so in the way the Android
    developers designed their classes to allow us to.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Android API的类时，我们是按照Android开发人员设计他们的类的方式来使用的。
- en: Polymorphism
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多态性
- en: '**Polymorphism** allows us to write code that is less dependent on the *types*
    we are trying to manipulate, making our code clearer and more efficient. Polymorphism
    means *different forms*. If the objects that we code can be more than one type
    of thing, then we can take advantage of this. Some examples in the next chapter
    will make this clear, and the analogy coming next will give you a real-world perspective.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**多态性**允许我们编写的代码对我们试图操作的*类型*不那么依赖，使我们的代码更清晰、更高效。多态性意味着*不同的形式*。如果我们编写的对象可以是多种类型的东西，那么我们就可以利用这一点。下一章中的一些例子将说明这一点，接下来的类比将让您从现实世界的角度看清楚。'
- en: If we have a car factory that can make vans and small trucks just by changing
    the instructions given to the robots and the parts that go onto the production
    line, then the factory is using polymorphism.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个汽车工厂，只需改变给机器人的指令和放在生产线上的零件，就可以制造货车和小型卡车，那么这个工厂就是在使用多态性。
- en: Wouldn't it be useful if we could write code that could handle different types
    of data without starting again? We will see some examples of this in [*Chapter
    11*](B16773_11_ePub_RK.xhtml#_idTextAnchor201)*, More Object-Oriented Programming.*
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够编写能够处理不同类型数据的代码而不必重新开始，那不是很有用吗？我们将在《第11章》[*更多面向对象编程*]中看到一些例子。
- en: Inheritance
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继承
- en: 'Just like it sounds, `extends` keyword:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 就像听起来的那样，`extends`关键字：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `AppCompatActivity` class itself inherits from `Activity`. So, we inherited
    from `Activity` every time we created a new Android project. We can go further
    than this and see how it is useful.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppCompatActivity`类本身继承自`Activity`。因此，每次我们创建一个新的Android项目时，我们都是从`Activity`继承的。我们可以进一步了解它的有用之处。'
- en: Imagine if the strongest man in the world gets together with the smartest woman
    in the world. There is a good chance that their children will have serious benefits
    from gene inheritance. Inheritance in Java lets us do the same thing with another
    person's code and our own, creating a class more specific to our needs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果世界上最强壮的男人和最聪明的女人在一起。他们的孩子很可能会从基因继承中获得重大好处。在Java中，继承让我们可以用另一个人的代码和我们自己的代码做同样的事情，创建一个更符合我们需求的类。
- en: Why do it like this?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要这样做？
- en: When written properly, all this OOP allows you to add new features without worrying
    as much about how they interact with existing features. When you do have to change
    a class, its self-contained (encapsulated) nature means fewer or perhaps even
    zero consequences for other parts of the program. This is the encapsulation part.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当正确编写时，所有这些面向对象编程允许您添加新功能，而不必过多担心它们如何与现有功能交互。当您确实需要更改一个类时，它的自包含（封装）性质意味着对程序的其他部分的影响会更少，甚至可能为零。这就是封装的部分。
- en: 'You can use other people''s code (such as the Android API) without knowing
    or perhaps even caring how it works: think about the Android lifecycle, `Toast`,
    `Log`, all the UI widgets, listening to satellites, and so on. For example, the
    `Button` class has nearly 50 methods – do we really want to write all that ourselves,
    just for a button? Much better to use someone else''s `Button` class.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用其他人的代码（例如Android API），而不必知道或甚至关心它是如何工作的：想想一下Android生命周期、`Toast`、`Log`、所有UI小部件、监听卫星等等。例如，`Button`类有近50个方法-我们真的想要为一个按钮自己编写所有这些吗？最好使用别人的`Button`类。
- en: OOP allows you to write apps for highly complex situations without breaking
    a sweat.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程允许您轻松编写高度复杂的应用程序。
- en: You can create multiple similar-yet-different versions of a class without starting
    the class from scratch, by using inheritance; and you can still use the methods
    intended for the original type of object with your new object because of polymorphism.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过继承，您可以创建多个类似但不同的类的版本，而无需从头开始编写类；并且您仍然可以使用原始类型对象的方法来处理新对象，这是由于多态性。
- en: It makes sense really. And Java was designed from the start with all of this
    in mind, so we are forced into using all this OOP; however, this is a good thing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很有道理。Java从一开始就考虑到了所有这些，所以我们被迫使用所有这些面向对象编程；然而，这是一件好事。
- en: Let's have a quick class recap.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下类。
- en: Class recap
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类回顾
- en: A class is a collection of lines of code that can contain methods, variables,
    loops, and all the other Java syntax we have learned about. A class is part of
    a Java package and most packages will normally have multiple classes. Usually,
    although not always, each new class will be defined in its own `.java` code file
    with the same name as the class – as with all of our Activity classes so far.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 类是一组代码行，可以包含方法、变量、循环和我们学过的所有其他Java语法。类是Java包的一部分，大多数包通常会有多个类。通常情况下，每个新类都将在其自己的`.java`代码文件中定义，文件名与类名相同-就像我们迄今为止所有的Activity类一样。
- en: Once we have written a class, we can use it to make as many objects from it
    as we want. Remember, the class is the blueprint and we make objects based on
    the blueprint. The house isn't the blueprint just as the object isn't the class;
    it is an object made from the class. An object is a reference variable, as is
    a `String` variable, and later we will discover exactly what being a reference
    variable means. For now, let's look at some actual code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们编写了一个类，我们可以使用它来制作任意数量的对象。记住，类是蓝图，我们根据蓝图制作对象。房子不是蓝图，就像对象不是类一样；它是从类制作的对象。对象是一个引用变量，就像`String`变量一样，稍后我们将确切了解引用变量的含义。现在，让我们看一些实际的代码。
- en: Looking at the code for a class
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看类的代码
- en: Let's say we are making an app for the military. It is for use by senior officers
    to micro-manage their troops in battle. Among others, we would probably need a
    class to represent a soldier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在为军方制作一个应用程序。这是供高级军官在战斗中微观管理他们的部队使用的。除其他外，我们可能需要一个代表士兵的类。
- en: Class implementation
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类的实现
- en: 'Here is the real code for our hypothetical class. We call it a class `Soldier`,
    if we implement this for real, we would do so in a file called `Soldier.java`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们假想类的真实代码。我们称之为一个类“Soldier”，如果我们真的实现了这个，我们会在一个名为“Soldier.java”的文件中这样做：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding is a class implementation for a class called `Soldier`. There
    are two `int` variable called `health`, and a `String` variable called `soldierType`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是一个名为“Soldier”的类实现。有两个名为“health”的int变量，以及一个名为“soldierType”的String变量。
- en: There is also a method called `shootEnemy`. The method has no parameters and
    a `void` return type, but class methods can be of any shape or size that we discussed
    in [*Chapter 9*](B16773_09_ePub_RK.xhtml#_idTextAnchor169)*, Learning Java Methods.*
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个名为“shootEnemy”的方法。该方法没有参数，返回类型为“void”，但类方法可以是我们在[*第9章*](B16773_09_ePub_RK.xhtml#_idTextAnchor169)*中讨论的任何形状或大小的方法。
- en: To be precise about member variables and fields, when the class is instantiated
    into a real object, the fields become variables of the object itself and we call
    them **instance** or **member** variables.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要准确地了解成员变量和字段，当类被实例化为一个真实对象时，字段将成为对象本身的变量，我们称它们为**实例**或**成员**变量。
- en: They are just variables of the class, whatever fancy name they are referred
    to by. However, the difference between fields and variables declared in methods
    (called **local** variables) does become more important as we progress.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它们只是类的变量，无论它们被引用的名称有多么花哨。然而，字段和方法中声明的变量（称为**局部**变量）之间的区别随着我们的进展变得更加重要。
- en: We briefly discussed variable scope at the end of [*Chapter 9*](B16773_09_ePub_RK.xhtml#_idTextAnchor169)*,
    Learning Java Methods* We will look at all types of variables again later in the
    next chapter. Let's concentrate on coding and using a class.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第9章*](B16773_09_ePub_RK.xhtml#_idTextAnchor169)*结尾简要讨论了变量作用域，学习Java方法*我们将在下一章再次看到所有类型的变量。让我们集中精力编写和使用一个类。
- en: Declaring, initializing, and using an object of the class
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明、初始化和使用类的对象
- en: 'Remember that `Soldier` is just a class, not an actual usable object. It is
    a blueprint for a soldier, not an actual soldier object, just as `int`, `String`,
    and `boolean` are not variables; they are just types we can make variables of.
    This is how we make an object of type `Soldier` from our `Soldier` class:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，“Soldier”只是一个类，不是一个实际可用的对象。它是一个士兵的蓝图，而不是一个实际的士兵对象，就像“int”、“String”和“boolean”不是变量一样；它们只是我们可以制作变量的类型。这是我们如何从我们的“Soldier”类中制作一个类型为“Soldier”的对象：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the first part of the code, `Soldier mySoldier` declares a new variable of
    type `Soldier` called `mySoldier`. The last part of the code, `new Soldier()`,
    calls a special method called a **constructor** that is automatically made for
    all classes by the compiler.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第一部分中，“Soldier mySoldier”声明了一个名为“mySoldier”的类型为“Soldier”的新变量。代码的最后一部分“new
    Soldier()”调用了一个特殊的方法，称为**构造方法**，这个方法由编译器为所有类自动生成。
- en: It is this constructor method that creates an actual `Soldier` object. As you
    can see, the constructor method has the same name as the class. We will look at
    constructors in more depth later in this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这个构造方法创建了一个实际的“Soldier”对象。正如你所看到的，构造方法的名称与类的名称相同。我们将在本章后面更深入地研究构造函数。
- en: 'And of course, the assignment operator `=` in the middle of the two parts assigns
    the result of the second part to that of the first. The next figure summarizes
    all this information:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，两部分中间的赋值运算符“=”将第二部分的结果分配给第一部分的结果。下一张图总结了所有这些信息：
- en: '![Figure 10.1 – Declaring, initializing, and using an object of the class'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 - 声明、初始化和使用类的对象'
- en: '](img/Figure_10.1_B16773.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.1_B16773.jpg)'
- en: Figure 10.1 – Declaring, initializing, and using an object of the class
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 - 声明、初始化和使用类的对象
- en: This is not far from how we deal with a regular variable except for the constructor/method
    call instead of a value on the end of the line of code. To create and use a very
    basic class, we have done enough.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们处理常规变量的方式并不相距太远，只是构造函数/方法调用而不是代码行末的值。要创建和使用一个非常基本的类，我们已经做得足够多了。
- en: Important Note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: As we will see when we explore further, we can write our own constructors rather
    than relying on the auto-generated constructor. This gives us lots of power and
    flexibility, but we will just continue to explore the simplest case for now.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在进一步探讨时看到的，我们可以编写自己的构造函数，而不是依赖于自动生成的构造函数。这给了我们很多力量和灵活性，但现在我们将继续探讨最简单的情况。
- en: Just like regular variables, we could also have done it in two parts like this.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像普通变量一样，我们也可以像这样分两部分完成。
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is how we might assign to and use the variables of our hypothetical class:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可能分配和使用假想类的变量的方式：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, the dot operator `.` is used to access the variables of the class. And
    this is how we would call the method – again, by using the object name, not the
    class name, followed by the dot operator:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，点运算符“.”用于访问类的变量。这就是我们调用方法的方式 - 再次，通过使用对象名称，而不是类名称，后跟点运算符：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can summarize the use of the dot operator with a diagram:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用图表总结点运算符的使用：
- en: '![Figure 10.2 – dot operator'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.2 - 点运算符'
- en: '](img/Figure_10.2_B16773.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.2_B16773.jpg)'
- en: Figure 10.2 – dot operator
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 - 点运算符
- en: Tip
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: We can think of a class' method as what it can *do* and its instance/member
    variables as what it *knows* about itself.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将类的方法视为它可以*做*的事情，将其实例/成员变量视为它*了解*自身的事情。
- en: 'We can also go ahead and make another `Soldier` object and access its methods
    and variables:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以继续制作另一个“Soldier”对象并访问它的方法和变量：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is important to realize that `mySoldier2` is a totally separate object with
    completely distinct instance variables to `mySoldier`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要意识到“mySoldier2”是一个完全独立的对象，具有完全不同的实例变量，与“mySoldier”不同：
- en: '![Figure 10.3 – Soldier object'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.3 - 士兵对象'
- en: '](img/Figure_10.3_B16773.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.3_B16773.jpg)'
- en: Figure 10.3 – Soldier object
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 - 士兵对象
- en: What is also key here is that this preceding code would not be written within
    the class itself. For example, we could create the `Soldier` class in an external
    file called `Soldier.java` and then use the code that we have just seen, perhaps
    in the `MainActivity` class.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个关键点，即前面的代码不会在类本身内部编写。例如，我们可以在名为`Soldier.java`的外部文件中创建`Soldier`类，然后使用我们刚刚看到的代码，可能在`MainActivity`类中。
- en: This will become clearer when we write our first class in an actual project
    in a minute.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在一分钟内在实际项目中编写我们的第一个类时，这将变得更加清晰。
- en: Also notice that everything is done *on* the object itself. We must create objects
    of classes to make them useful.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，所有操作都是在对象本身上进行的。我们必须创建类的对象才能使它们有用。
- en: Important Note
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As always, there are exceptions to this rule. But they are in the minority,
    and we will look at the exceptions in the next chapter. In fact, we have already
    seen two exceptions in the book so far. The exceptions we have seen are the `Toast`
    and `Log` classes. Exactly what is going on with them will be explained soon.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，这个规则也有例外。但它们是少数，我们将在下一章中看到这些例外。实际上，到目前为止，我们已经看到了两个例外。我们已经看到的例外是`Toast`和`Log`类。它们的具体情况将很快得到解释。
- en: Let's explore basic classes a little more deeply by writing one for real.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编写一个真正的基本类来更深入地探索基本类。
- en: Basic classes app
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类应用
- en: The generals who will be using our app will need more than one `Soldier` object.
    In the app that we are about to build, we will instantiate and use multiple objects.
    We will also demonstrate using the dot operator on variables and methods to show
    that different objects have their very own instance variables.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用我们的应用程序的将军需要不止一个`Soldier`对象。在我们即将构建的应用程序中，我们将实例化和使用多个对象。我们还将演示使用变量和方法上的点运算符，以表明不同的对象具有自己的实例变量。
- en: You can get the completed code for this example in the code download. It is
    in the [*Chapter 10*](B16773_10_ePub_RK.xhtml#_idTextAnchor187)`/Basic Classes`
    folder. But it is most useful to read on to create your own working example.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在代码下载中获取此示例的完整代码。它在[*第10章*](B16773_10_ePub_RK.xhtml#_idTextAnchor187)`/Basic
    Classes`文件夹中。但是，继续阅读以创建您自己的工作示例会更有用。
- en: 'Create a project with the `Basic` `Classes`. Now we will create a new class
    called `Soldier`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Basic` `Classes`创建一个项目。现在我们将创建一个名为`Soldier`的新类：
- en: Right-click the `com.yourdomain.basicclasses` (or whatever your package name
    is) folder in the project explorer window.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目资源管理器窗口中的`com.yourdomain.basicclasses`（或者您的包名称）文件夹。
- en: Select **New | Java Class**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**New | Java Class**。
- en: In the `Soldier` and press the *Enter* key.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Soldier`中按下*Enter*键。
- en: The new class is created for us with a code template ready to put our implementation
    within, just as the next code shows.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们创建了一个新的类，其中包含一个代码模板，准备将我们的实现放入其中，就像下一个代码所示的那样。
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that Android Studio has put the class in the same package/folder as the
    rest of our app's Java files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Android Studio将类放在与我们应用程序的其他Java文件相同的包/文件夹中。
- en: And now we can write its implementation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写它的实现。
- en: 'Write the following class implementation code within the opening and closing
    curly braces of the `Soldier` class as shown. The new code to type is highlighted:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按照所示，在`Soldier`类的开放和闭合大括号内编写以下类实现代码。要输入的新代码已经高亮显示：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we have a class, a blueprint for our future objects of type `Soldier`,
    we can start to build our army. In the editor window, left-click the `onCreate`
    method just after the call to the `setContentView` method. Type this code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个类，即将来的`Soldier`类型对象的蓝图，我们可以开始建立我们的军队。在编辑窗口中，单击`setContentView`方法调用后的`onCreate`方法。输入以下代码：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we have our extremely varied and unlikely army, we can use it and verify
    the identity of each object.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了极其多样化和不太可能的军队，我们可以使用它并验证每个对象的身份。
- en: 'Type this code below the code in the previous step:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一步中的代码下面输入以下代码：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we can run our app. All the output will be in the logcat window.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行我们的应用程序。所有输出将显示在logcat窗口中。
- en: This is how it works. First, we created our new `Soldier` class. Then we implemented
    our class including declaring two fields (member variables), an `int` variable
    and a `String` variable called `health` and `soldierType`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的工作原理。首先，我们创建了我们的新`Soldier`类。然后我们实现了我们的类，包括声明两个字段（成员变量），一个`int`变量和一个名为`health`和`soldierType`的`String`变量。
- en: 'We also have a method in our class called `shootEnemy`. Let''s look at it again
    and examine what is going on:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类中还有一个名为`shootEnemy`的方法。让我们再次看一下，并检查发生了什么：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the body of the method, we print to the logcat window: first `soldierType`
    and then the text `" is shooting"`. What''s neat here is that the string `soldierType`
    will be different depending on which object we call the `shootEnemy` method on.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法的主体中，我们打印到logcat窗口：首先是`soldierType`，然后是文本`" is shooting"`。这里很棒的是，字符串`soldierType`会根据我们在`shootEnemy`方法上调用的对象不同而不同。
- en: Next, we declared and created three new objects of type `Soldier`. They were
    `rambo`, `vassily`, and `wellington`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明并创建了三个`Soldier`类型的新对象。它们是`rambo`，`vassily`和`wellington`。
- en: Finally, we initialized each with a different value for `health` as well as
    `soldierType`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为`health`和`soldierType`的每个值初始化了不同的值。
- en: 'Here is the output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice that each time we access the `health` variable of each `Soldier` object,
    it prints the value we assigned it, proving that although the three objects are
    of the same type, they are completely separate, individual instances/objects.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每次访问每个`Soldier`对象的`health`变量时，它都会打印我们分配的值，证明尽管这三个对象是相同类型的，但它们是完全独立的个体实例/对象。
- en: Perhaps more interesting is the three calls to `shootEnemy`. One by one, each
    of our `Soldier` object's `shootEnemy` methods is called and we print the `soldierType`
    variable to the logcat window. The method has the proper value for each individual
    object, further proving that we have three distinct objects (instances of the
    class), albeit created from the same `Soldier` class.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 也许更有趣的是对`shootEnemy`的三次调用。逐个地，我们的`Soldier`对象的`shootEnemy`方法被调用，并且我们将`soldierType`变量打印到logcat窗口。该方法对每个单独的对象都有适当的值，进一步证明我们有三个不同的对象（类的实例），尽管它们是从同一个`Soldier`类创建的。
- en: We saw how each object is completely independent of the other objects. However,
    if we imagine whole armies of `Soldier` objects in our app, then we realize that
    we are going to need to learn new ways of handling large numbers of objects (and
    regular variables too).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到每个对象都是完全独立的。然而，如果我们想象我们的应用中有整个军队的`Soldier`对象，那么我们意识到我们需要学习处理大量对象（以及常规变量）的新方法。
- en: Think about managing just 100 separate `Soldier` objects. What about when we
    have thousands of objects? In addition, this isn't very dynamic. The way we are
    writing the code now relies on us (the developers) knowing the exact details of
    the soldiers that the generals (the user) will be commanding. We will see the
    solution for this in [*Chapter 15*](B16773_15_ePub_RK.xhtml#_idTextAnchor267)*,
    Arrays, Maps, and Random Numbers.*
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 想想管理100个独立的`Soldier`对象。当我们有成千上万的对象时呢？此外，这并不是很动态。我们现在编写代码的方式依赖于我们（开发人员）知道将由将军（用户）指挥的士兵的确切细节。我们将在[*第15章*](B16773_15_ePub_RK.xhtml#_idTextAnchor267)*，数组、映射和随机数*中看到解决方案。
- en: More things we can do with our first class
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个类还可以做更多的事情
- en: 'We can treat a class much as we can other variables. We can use a class as
    a parameter in a method signature, as here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像处理其他变量一样处理类。我们可以在方法签名中使用类作为参数，就像这样：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And when we call the method we must of course pass an object of that type.
    Here is a hypothetical call to the `healSoldier` method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用方法时，当然必须传递该类型的对象。以下是对`healSoldier`方法的假设调用：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Of course, the preceding example might raise questions, such as, should the
    `healSoldier` method be a method of a class?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，前面的例子可能会引发问题，比如，`healSoldier`方法应该是一个类的方法吗？
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It could be or it could not. It would depend on what the best solution for the
    situation was. We will look at more OOP, and then the best solutions for lots
    of similar conundrums should present themselves more easily.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是，也可能不是。这将取决于情况的最佳解决方案是什么。我们将看到更多的面向对象编程，然后对许多类似的难题的最佳解决方案应该更容易呈现出来。
- en: 'And, as you might guess, we can also use an object as the return value of a
    method. Here is what the updated hypothetical `healSoldier` signature and implementation
    might look like now:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，你可能会猜到，我们也可以将对象用作方法的返回值。以下是更新后的假设`healSoldier`签名和实现可能看起来像的样子：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In fact, we have already seen classes being used as parameters. For example,
    here is our `topClick` method from [*Chapter 2*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*,
    First Contact: Java, XML, and the UI Designer*. It receives an object called `v`
    of type `View`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们已经看到类被用作参数。例如，这是我们来自[*第2章*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*，初次接触：Java、XML和UI设计师*的`topClick`方法。它接收了一个名为`v`的`View`类型的对象：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: However, in the case of the `topClick` method we didn't do anything with the
    passed-in object of type `View`. Partly, this was because we didn't need to, and
    partly it was because we don't know what we can do with an object of type `View`
    – yet.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`topClick`方法的情况下，我们没有对传入的`View`类型的对象做任何操作。部分原因是因为我们不需要，部分原因是因为我们不知道可以对`View`类型的对象做什么
    - 至少目前还不知道。
- en: As I mentioned at the start of the chapter, you don't need to understand or
    remember everything in this chapter. The only way to get good at OOP is to keep
    using it. Like learning a spoken language – studying it and poring over grammatical
    rules will help but nowhere near as much as having a conversation verbally (or
    in writing). If you just about get it, move on with the next chapter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在本章开头提到的，你不需要理解或记住本章的所有内容。掌握面向对象编程的唯一方法就是不断地使用它。就像学习口语一样 - 学习和研究语法规则会有所帮助，但远不及口头交流（或书面交流）来得有用。如果你差不多懂了，就继续下一章吧。
- en: Frequently asked questions
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: I just can't wait any longer. What is a reference already!?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我真的等不及了。引用到底是什么！？
- en: It literally is the same thing as a reference in normal (non-programming) language.
    It is a value that identifies/points to data rather than the actual data itself.
    One way of thinking about it is that a reference is a memory location/address.
    It identifies and gives access to the actual data at that location/address in
    memory.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上就是在普通（非编程）语言中的引用。它是一个标识/指向数据的值，而不是实际的数据本身。一个思考它的方式是，引用是一个内存位置/地址。它标识并提供对内存中该位置/地址上的实际数据的访问。
- en: If it is not the actual object but just a reference, how come we can do things
    like call methods on it, such as `mySoldier.shootEnemy()`?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它不是实际的对象，而只是一个引用，那么我们怎么能调用它的方法，比如`mySoldier.shootEnemy()`呢？
- en: Java works out the exact details under the hood, but you can think of a reference
    as being the controller of an object, and anything you want to do to the object
    you must do through the controller, because the actual object/memory itself cannot
    be directly accessed. More on this in[*Chapter 12*](B16773_12_ePub_RK.xhtml#_idTextAnchor218)*,
    The Stack, the Heap, and the Garbage Collector.*
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Java在幕后处理了确切的细节，但你可以把引用看作是对象的控制器，你想对对象做的任何事情都必须通过控制器来做，因为实际的对象/内存本身不能直接访问。关于这一点，[*第12章*](B16773_12_ePub_RK.xhtml#_idTextAnchor218)*，栈、堆和垃圾收集器*中有更多内容。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have at last written our first class. We have seen that we can implement
    a class in a Java file of the same name as the class. The class itself doesn't
    do anything until we instantiate an object/instance of the class. Once we have
    an instance of the class, we can use its variables and methods. As we proved in
    the basic classes app, each and every instance of a class has its own distinct
    variables, just as when you buy a car made in a factory, you get your very own
    steering wheel, satnav, and go-faster stripes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于编写了我们的第一个类。我们已经看到我们可以在与类同名的Java文件中实现一个类。类本身在我们实例化一个类的对象/实例之前并不起作用。一旦我们有了一个类的实例，我们就可以使用它的变量和方法。正如我们在基本类应用程序中证明的那样，每个类的实例都有自己独特的变量，就像当你买一辆工厂生产的汽车时，你会得到自己独特的方向盘、卫星导航和加速条纹。
- en: All this information will raise more questions. OOP is like that. So, let's
    try and consolidate all this class stuff by taking another look at variables and
    encapsulation, polymorphism, and inheritance in action in the next chapter. We
    can then go further with classes and explore topics such as static classes (such
    as Log and Toast) as well as the more advanced concepts of abstract classes and
    interfaces.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些信息都会引发更多的问题。面向对象编程就是这样。因此，让我们尝试通过再次查看变量和封装、多态性以及继承来巩固所有这些类的内容，下一章将展示它们的实际应用。然后我们可以进一步学习类，并探讨静态类（例如Log和Toast）以及抽象类和接口等更高级的概念。
