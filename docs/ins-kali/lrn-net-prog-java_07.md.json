["```java\npublic class SimpleMultiTheadedServer implements Runnable {\n    private static ConcurrentHashMap<String, Float> map;\n    private Socket clientSocket;\n\n    static {\n        map = new ConcurrentHashMap<>();\n        map.put(\"Axle\", 238.50f);\n        map.put(\"Gear\", 45.55f);\n        map.put(\"Wheel\", 86.30f);\n        map.put(\"Rotor\", 8.50f);\n    }\n\n    SimpleMultiTheadedServer(Socket socket) {\n        this.clientSocket = socket;\n    }\n\n    public static void main(String args[]) {\n        ...\n    }\n\n    public void run() {\n        ...\n    }\n}\n```", "```java\n    public static void main(String args[]) {\n        System.out.println(\"Multi-Threaded Server Started\");\n        try {\n            ServerSocket serverSocket = new ServerSocket(5000);\n            while (true) {\n                System.out.println(\n                    \"Listening for a client connection\");\n                Socket socket = serverSocket.accept();\n                System.out.println(\"Connected to a Client\");\n                new Thread(new \n                    SimpleMultiTheadedServer(socket)).start();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        System.out.println(\"Multi-Threaded Server Terminated\");\n    }\n```", "```java\n    public void run() {\n        System.out.println(\"Client Thread Started\");\n        try (BufferedReader bis = new BufferedReader(\n                new InputStreamReader(\n                    clientSocket.getInputStream()));\n             PrintStream out = new PrintStream(\n                clientSocket.getOutputStream())) {\n\n            String partName = bis.readLine();\n            float price = map.get(partName);\n            out.println(price);\n            NumberFormat nf = NumberFormat.getCurrencyInstance();\n            System.out.println(\"Request for \" + partName\n                    + \" and returned a price of \"\n                    + nf.format(price));\n\n            clientSocket.close();\n            System.out.println(\"Client Connection Terminated\");\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        System.out.println(\"Client Thread Terminated\");\n    }\n```", "```java\npublic class SimpleClient {\n\n    public static void main(String args[]) {\n        System.out.println(\"Client Started\");\n        try {\n            Socket socket = new Socket(\"127.0.0.1\", 5000);\n            System.out.println(\"Connected to a Server\");\n            PrintStream out = \n                new PrintStream(socket.getOutputStream());\n            InputStreamReader isr = \n                new InputStreamReader(socket.getInputStream());\n            BufferedReader br = new BufferedReader(isr);\n\n            String partName = \"Axle\";\n            out.println(partName);\n            System.out.println(partName + \" request sent\");\n            System.out.println(\"Response: \" + br.readLine());\n                        socket.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        System.out.println(\"Client Terminated\");\n    }\n}\n```", "```java\n            partName = \"Wheel\";\n            out.println(partName);\n            System.out.println(partName + \" request sent\");\n            System.out.println(\"Response: \" + br.readLine());\n```", "```java\n            socket = new Socket(\"127.0.0.1\", 5000);\n            System.out.println(\"Connected to a Server\");\n            out = new PrintStream(socket.getOutputStream());\n            isr = new InputStreamReader(socket.getInputStream());\n            br = new BufferedReader(isr);\n\n            partName = \"Wheel\";\n            out.println(partName);\n            System.out.println(partName + \" request sent\");\n            System.out.println(\"Response: \" + br.readLine());\n            socket.close();\n```", "```java\n            while(true) {\n                String partName = bis.readLine();\n                if(\"quit\".equalsIgnoreCase(partName)) {\n                    break;\n                }\n                float price = map.get(partName);\n                out.println(price);\n                NumberFormat nf = \n                    NumberFormat.getCurrencyInstance();\n                System.out.println(\"Request for \" + partName\n                        + \" and returned a price of \"\n                        + nf.format(price));\n            } \n```", "```java\n            String partName = \"Axle\";\n            out.println(partName);\n            System.out.println(partName + \" request sent\");\n            System.out.println(\"Response: \" + br.readLine());\n\n            partName = \"Wheel\";\n            out.println(partName);\n            System.out.println(partName + \" request sent\");\n            System.out.println(\"Response: \" + br.readLine());\n\n            partName = \"Quit\";\n            out.println(partName);\n            socket.close();\n```", "```java\npublic class ThreadPool {\n\n    public static void main(String[] args) {\n        System.out.println(\"Thread Pool Server Started\");\n        ThreadPoolExecutor executor = (ThreadPoolExecutor) \n            Executors.newCachedThreadPool();\n        ...\n        executor.shutdown();\n        System.out.println(\"Thread Pool Server Terminated\");\n    }\n}\n```", "```java\n        try {\n            ServerSocket serverSocket = new ServerSocket(5000);\n            while (true) {\n                System.out.println(\n                    \"Listening for a client connection\");\n                Socket socket = serverSocket.accept();\n                System.out.println(\"Connected to a Client\");\n                WorkerThread task = new WorkerThread(socket);\n                System.out.println(\"Task created: \" + task);\n                executor.execute(task);\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n```", "```java\npublic class WorkerThread implements Runnable {\n    private static final ConcurrentHashMap<String, Float> map;\n    private final Socket clientSocket;\n\n    static {\n        map = new ConcurrentHashMap<>();\n        map.put(\"Axle\", 238.50f);\n        map.put(\"Gear\", 45.55f);\n        map.put(\"Wheel\", 86.30f);\n        map.put(\"Rotor\", 8.50f);\n    }\n    ...\n}\n```", "```java\n    public WorkerThread(Socket clientSocket) {\n        this.clientSocket = clientSocket;\n    }\n```", "```java\n    @Override\n    public void run() {\n        System.out.println(\"Worker Thread Started\");\n        try (BufferedReader bis = new BufferedReader(\n                new InputStreamReader(\n                    clientSocket.getInputStream()));\n                PrintStream out = new PrintStream(\n                        clientSocket.getOutputStream())) {\n\n            String partName = bis.readLine();\n            float price = map.get(partName);\n            out.println(price);\n            NumberFormat nf = NumberFormat.getCurrencyInstance();\n            System.out.println(\"Request for \" + partName\n                    + \" and returned a price of \"\n                    + nf.format(price));\n            clientSocket.close();\n            System.out.println(\"Client Connection Terminated\");\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        System.out.println(\"Worker Thread Terminated\");\n    }\n```", "```java\npublic class SimpleClient {\n\n    public static void main(String args[]) {\n        System.out.println(\"Client Started\");\n        try (Socket socket = new Socket(\"127.0.0.1\", 5000)) {\n            System.out.println(\"Connected to a Server\");\n            PrintStream out = \n                new PrintStream(socket.getOutputStream());\n            InputStreamReader isr = \n                new InputStreamReader(socket.getInputStream());\n            BufferedReader br = new BufferedReader(isr);\n\n            String partName = \"Axle\";\n            out.println(partName);\n            System.out.println(partName + \" request sent\");\n            System.out.println(\"Response: \" + br.readLine());\n            socket.close();\n\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        System.out.println(\"Client Terminated\");\n    }\n}\n```", "```java\npublic class WorkerCallable implements Callable<Float> {\n\n    private static final ConcurrentHashMap<String, Float> map;\n    private String partName;\n\n    static {\n        map = new ConcurrentHashMap<>();\n        map.put(\"Axle\", 238.50f);\n        map.put(\"Gear\", 45.55f);\n        map.put(\"Wheel\", 86.30f);\n        map.put(\"Rotor\", 8.50f);\n    }\n    ...\n}\n```", "```java\n    public WorkerCallable(String partName) {\n        this.partName = partName;\n    }\n```", "```java\n    @Override\n    public Float call() throws Exception {\n        float price = map.get(this.partName);\n        System.out.println(\"WorkerCallable returned \" + price);\n        return price;\n    }\n```", "```java\n        float price = map.get(partName);\n```", "```java\n        float price = 0.0f;\n        try {\n            price = new WorkerCallable(partName).call();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n```", "```java\n        float price = 0.0f;\n        ThreadPoolExecutor executor = (ThreadPoolExecutor) \n            Executors.newCachedThreadPool();\n        Future<Float> future1 = \n                executor.submit(new Callable<Float>() {\n            @Override\n            public Float call() {\n                // Compute first part\n                return 1.0f;\n            }\n        });\n        Future<Float> future2 = \n                executor.submit(new Callable<Float>() {\n            @Override\n            public Float call() {\n                // Compute second part\n                return 2.0f;\n            }\n        });\n```", "```java\n            try {\n                Float firstPart = future1.get();\n                Float secondPart = future2.get();\n                price = firstPart + secondPart;\n            } catch (InterruptedException|ExecutionException ex) {\n                ex.printStackTrace();\n            }\n```", "```java\n        server.setExecutor(Executors.newCachedThreadPool());\n```", "```java\n        server.setExecutor(Executors.newFixedThreadPool(5));\n```", "```java\npublic class MyHTTPServer {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"MyHTTPServer Started\");\n        HttpServer server = HttpServer.create(\n            new InetSocketAddress(80), 0);\n        server.createContext(\"/index\", new OtherHandler());\n        server.setExecutor(Executors.newCachedThreadPool());\n        server.start();\n    }\n    ...\n}\n```", "```java\n    Selector selector = Selector.open();\n```", "```java\n    socketChannel.configureBlocking(false);\n```", "```java\n    socketChannel.register(selector, SelectionKey.OP_WRITE, null);\n```", "```java\n    SelectionKey key = channel.register(selector, \n        SelectionKey.OP_READ);\n```", "```java\n    int interestSet = SelectionKey.OP_READ | \n        SelectionKey.OP_WRITE;\n    SelectionKey key = channel.register(selector, interestSet);\n```", "```java\n    int interestSet = selectionKey.interestOps();\n```", "```java\npublic class ServerSocketChannelTimeServer {\n    private static Selector selector;\n\n    static class SelectorHandler implements Runnable {\n        ...\n    }\n\n    public static void main(String[] args) {\n        ...\n    }\n}\n```", "```java\n    public static void main(String[] args) {\n        System.out.println(\"Time Server started\");\n        try {\n            ServerSocketChannel serverSocketChannel = \n                ServerSocketChannel.open();\n            serverSocketChannel.socket().bind(\n                new InetSocketAddress(5000));\n            ...\n            }\n        } catch (ClosedChannelException ex) {\n            ex.printStackTrace();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n```", "```java\n            selector = Selector.open();\n            new Thread(new SelectorHandler()).start();\n```", "```java\n            while (true) {\n                SocketChannel socketChannel\n                        = serverSocketChannel.accept();\n                System.out.println(\"Socket channel accepted - \" \n                    + socketChannel);\n                ...\n            }\n```", "```java\n                if (socketChannel != null) {\n                    socketChannel.configureBlocking(false);\n                    selector.wakeup();\n                    socketChannel.register(selector, \n                        SelectionKey.OP_WRITE, null);\n                }\n```", "```java\n    static class SelectorHandler implements Runnable {\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    System.out.println(\"About to select ...\");\n                    int readyChannels = selector.select(500);\n                    ...\n                } catch (IOException | InterruptedException ex) {\n                    ex.printStackTrace();\n                }\n            }\n        }\n    }\n```", "```java\n        if (readyChannels == 0) {\n            System.out.println(\"No tasks available\");\n        } else {\n            ...\n        }\n```", "```java\n        Set<SelectionKey> keys = selector.selectedKeys();\n        Iterator<SelectionKey> keyIterator = keys.iterator();\n        while (keyIterator.hasNext()) {\n            ...\n        }\n```", "```java\n            SelectionKey key = keyIterator.next();\n            if (key.isAcceptable()) {\n                // Connection accepted\n            } else if (key.isConnectable()) {\n                // Connection established\n            } else if (key.isReadable()) {\n                // Channel ready to read\n            } else if (key.isWritable()) {\n                ...\n            }\n            Thread.sleep(1000);\n            keyIterator.remove();\n```", "```java\n            String message = \"Date: \"\n                + new Date(System.currentTimeMillis());\n\n            ByteBuffer buffer = ByteBuffer.allocate(64);\n            buffer.put(message.getBytes());\n            buffer.flip();\n            SocketChannel socketChannel = null;\n            while (buffer.hasRemaining()) {\n                socketChannel = (SocketChannel) key.channel();\n                socketChannel.write(buffer);\n            }\n            System.out.println(\"Sent: \" + message + \" to: \" \n                + socketChannel);\n```", "```java\npublic class SocketChannelTimeClient {\n\n    public static void main(String[] args) {\n        Random random = new Random();\n        SocketAddress address = \n            new InetSocketAddress(\"127.0.0.1\", 5000);\n        try (SocketChannel socketChannel = \n                SocketChannel.open(address)) {\n            while (true) {\n                ByteBuffer byteBuffer = ByteBuffer.allocate(64);\n                int bytesRead = socketChannel.read(byteBuffer);\n                while (bytesRead > 0) {\n                    byteBuffer.flip();\n                    while (byteBuffer.hasRemaining()) {\n                        System.out.print((char) byteBuffer.get());\n                    }\n                    System.out.println();\n                    bytesRead = socketChannel.read(byteBuffer);\n                }\n                Thread.sleep(random.nextInt(1000) + 1000);\n            }\n        } catch (ClosedChannelException ex) {\n            // Handle exceptions\n        }catch (IOException | InterruptedException ex) {\n            // Handle exceptions\n        } \n    }\n}\n```", "```java\n    Socket socket = new ...\n    socket.setSoTimeout(3000);\n```"]