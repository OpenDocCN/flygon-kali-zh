- en: Connecting Screen Flow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接屏幕流
- en: Hello fellow readers! We have come to an important point in our application
    development--connecting our screens. As you know, we created screens in the previous
    chapter, and, in this chapter, we will connect them by using Android's powerful
    framework. We will continue with our work, and, with Android, we will do more
    serious stuff with our UI. Prepare yourself and concentrate on every aspect of
    this chapter. It will be very interesting! We promise!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，亲爱的读者！我们已经来到了我们应用程序开发中的一个重要点——连接我们的屏幕。正如你所知，我们在上一章中创建了屏幕，在本章中，我们将使用Android强大的框架来连接它们。我们将继续我们的工作，并且，通过Android，我们将在UI方面做更严肃的事情。准备好自己，专注于本章的每个方面。这将非常有趣！我们保证！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating an application bar
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序栏
- en: Using drawer navigation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用抽屉导航
- en: Android intents
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android意图
- en: Passing information between activities and fragments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在活动和片段之间传递信息
- en: Creating an application bar
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序栏
- en: We are continuing our journey through Android Application Development. So far,
    we have created a base for our application, defined the ground for a UI, and created
    major screens; however, these screens are not connected. In this chapter, we will
    connect them and make fantastic interaction.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在继续我们的Android应用程序开发之旅。到目前为止，我们已经为我们的应用程序创建了一个基础，为UI定义了基础，并创建了主要屏幕；然而，这些屏幕并没有连接。在本章中，我们将连接它们并进行精彩的交互。
- en: Since everything starts from our `MainActivity` class, we will apply some improvements
    before we set some actions to trigger other screens. We have to *wrap* it with
    an application bar. What is an application bar? It's a piece of the UI that is
    used to access other parts of the application and provide visual structure with
    interactive elements. We already have one, but it's not the usual Android application
    bar. At this point, our application is has a modified application bar, and we
    want it to have a standard Android application bar.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一切都始于我们的`MainActivity`类，所以在我们设置一些操作来触发其他屏幕之前，我们将进行一些改进。我们必须用应用程序栏*包装*它。什么是应用程序栏？它是用于访问应用程序的其他部分并提供具有交互元素的视觉结构的UI部分。我们已经有一个，但它不是通常的Android应用程序栏。在这一点上，我们的应用程序有一个修改过的应用程序栏，我们希望它有一个标准的Android应用程序栏。
- en: Here, we will show you exactly how to create one.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将向您展示如何创建一个。
- en: 'Start by replacing a top-level activity extension to `AppCompatActivity`. We
    need to access features that are needed for an application bar. `AppCompatActivity`
    will add these additional features to standard `FragmentActivity`. Your `BaseActivity`
    definition should now look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将顶级活动扩展替换为`AppCompatActivity`。我们需要访问应用程序栏所需的功能。`AppCompatActivity`将为标准的`FragmentActivity`添加这些额外的功能。您的`BaseActivity`定义现在应该如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then update the theme application that is used, so the application bar can
    be used. Open Android Manifest and set a new theme as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后更新所使用的主题应用程序，以便可以使用应用程序栏。打开Android清单并设置一个新主题如下：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now open your `activity_main` layout. Remove the header included directive
    and add `Toolbar`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开你的`activity_main`布局。删除包含的页眉指令并添加`Toolbar`：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Apply the same change to all layouts. When you finish it, update your `BaseActivity`
    code to use the new `Toolbar`. Your `onCreate()` method should now look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有布局应用相同的更改。完成后，更新您的`BaseActivity`代码以使用新的`Toolbar`。您的`onCreate()`方法现在应该如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We assigned an application bar by calling the `setSupportActionBar()`method
    and passing the toolbar''s ID from the layout. If you run the application, it
    will look like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`setSupportActionBar()`方法并传递布局中工具栏的ID，我们分配了一个应用程序栏。如果您运行应用程序，它将看起来像这样：
- en: '![](img/89c17146-6ab6-4d9a-b96b-918002b179c1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89c17146-6ab6-4d9a-b96b-918002b179c1.png)'
- en: 'We lost the buttons we had in our header! Don''t worry, we will get them back!
    We will create a menu that will handle actions instead of buttons. In Android,
    a menu is an interface that is used to manage the items, and you can define your
    own menu resource. In the `/res` directory, create a `menu` folder. Right-click
    on the `menu` folder and choose the New | New menu resource file. Call it main.
    A new XML file opens. Update its content according to this example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们失去了我们在页眉中拥有的按钮！别担心，我们会把它们拿回来的！我们将创建一个菜单来处理操作，而不是按钮。在Android中，菜单是用于管理项目的接口，您可以定义自己的菜单资源。在`/res`目录中，创建一个`menu`文件夹。右键单击`menu`文件夹，然后选择New
    | New menu resource file。将其命名为main。一个新的XML文件将打开。根据这个示例更新它的内容：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We set common attributes, the icon, and the order. To make sure your icons
    will be visible, use the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了常见属性、图标和顺序。为了确保您的图标可见，请使用以下内容：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By doing this, items in the menu will be expanded if there is any space available;
    otherwise, they will be accessible through the context menu. Other options of
    spacing in Android that you can choose are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，如果有空间可用，菜单中的项目将被展开；否则，它们将通过上下文菜单访问。您可以选择的Android中的其他间距选项如下：
- en: '**Always**: This button is always placed in an application bar'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终**：此按钮始终放在应用程序栏中'
- en: '**Never**: This button is never placed in an application bar'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从不**：此按钮永远不会放在应用程序栏中'
- en: '**collapseAction View**: This button can be shown as a widget'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**collapseAction View**：此按钮可以显示为小部件'
- en: '**withText**: This button is displayed with text'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**withText**：此按钮显示为文本'
- en: 'To assign a menu to the application bar, add the following to `BaseActivity`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要将菜单分配给应用程序栏，请在`BaseActivity`中添加以下内容：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, connect actions to menu items and extend `MainActivity` by adding
    the following piece of code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过添加以下代码来将操作连接到菜单项并扩展`MainActivity`：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we overrode the `onOptionsItemSelected()` method and handled cases for
    menu item ID. On each selection, we added a log message. Now run your application.
    You should see these menu items:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们重写了`onOptionsItemSelected()`方法，并处理了菜单项ID的情况。在每次选择时，我们都添加了一个日志消息。现在运行你的应用程序。你应该会看到这些菜单项：
- en: '![](img/a64c25e9-44f3-42c1-af22-a949c77deb86.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a64c25e9-44f3-42c1-af22-a949c77deb86.png)'
- en: 'Click a few times on each item and observe Logcat. You should see logs similar
    to this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 点击每个项目几次并观察Logcat。你应该看到类似于这样的日志：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We successfully switched our header to the application bar. It is quite different
    to the header we had in the application wireframe. This is not important at the
    moment since we will do some significant styling in the next chapters. Our application
    bar will look different.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地将我们的标题切换到应用程序栏。这与应用程序线框中的标题非常不同。这一点目前并不重要，因为我们将在接下来的章节中进行一些重要的样式设置。我们的应用程序栏将看起来不同。
- en: In the following section, we will deal with the navigation drawer, and we will
    begin to assemble our application's navigation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将处理导航抽屉，并开始组装我们应用程序的导航。
- en: Using the navigation drawer
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用导航抽屉
- en: 'As you probably remember, in our mockup we have presented that there will be
    links to filtered data (Notes and Todos). We will filter these by using the navigation
    drawer. Every modern application uses a navigation drawer. It''s a piece of the
    UI that displays the application''s navigation options. To define the drawer,
    we have to put the `DrawerLayout` view in our layout. Open `activity_main` and
    apply the following modification:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，在我们的模型中，我们已经提出将有链接到过滤数据（笔记和待办事项）的功能。我们将使用导航抽屉来进行过滤。每个现代应用程序都使用导航抽屉。这是一个显示应用程序导航选项的UI部分。要定义抽屉，我们必须在布局中放置`DrawerLayout`视图。打开`activity_main`并应用以下修改：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The main content of the screen must be the first child of `DrawerLayout`. The
    navigation drawer uses the second child as the content of the drawer. In our case,
    it's `ListView`. To tell the navigation drawer if navigation should be positioned
    left or right, use the `layout_gravity` attribute. If we plan to use the navigation
    drawer positioned to the right, we should set the attribute value to `end`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕的主要内容必须是`DrawerLayout`的第一个子项。导航抽屉使用第二个子项作为抽屉的内容。在我们的情况下，它是`ListView`。要告诉导航抽屉导航是否应该位于左侧还是右侧，使用`layout_gravity`属性。如果我们计划使用导航抽屉位于右侧，我们应该将属性值设置为`end`。
- en: 'Now we have an empty navigation drawer, and we have to populate it with some
    buttons. Create a new layout file for each navigation item. Call it `adapter_navigation_drawer`.
    Define it as a simple linear layout with only one button inside:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个空的导航抽屉，我们必须用一些按钮填充它。为每个导航项创建一个新的布局文件。将其命名为`adapter_navigation_drawer`。将其定义为一个只有一个按钮的简单线性布局：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, create a new package called `navigation`. In this package, create a new
    Kotlin `data` class, like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`navigation`的新包。在这个包中，创建一个新的Kotlin`data`类，就像这样：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We defined a drawer item entity. Now create one more class:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个抽屉项实体。现在再创建一个类：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This class shown here extends Android's `BaseAdapter` and overrides methods
    needed for the adapter to provide view instances. All views that the adapter creates
    will be assigned to expand `ListView` in our navigation drawer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类在这里扩展了Android的`BaseAdapter`并重写了适配器提供视图实例所需的方法。适配器创建的所有视图都将分配给我们导航抽屉中的`ListView`。
- en: 'Finally, we will assign this adapter. To do that, we need to update our `MainActivity` class
    by executing the following piece of code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将分配这个适配器。为此，我们需要通过执行以下代码更新我们的`MainActivity`类：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this code example, we instantiated several `NavigationDrawerItem` instances,
    then, we assigned a title to the buttons and `Runnable` actions that we will execute.
    Each `Runnable` will jump to a specific page of our view pager. We passed all
    instances to the adapter as one single mutable list. You may have also noticed
    that we changed the line for the `drawing_menu` item. By clicking on it, we will
    expand our navigation drawer. Please follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码示例中，我们实例化了几个`NavigationDrawerItem`实例，然后，我们为按钮和我们将执行的`Runnable`操作分配了一个标题。每个`Runnable`将跳转到我们视图页面的特定页面。我们将所有实例作为一个单一的可变列表传递给适配器。您可能还注意到，我们更改了`drawing_menu`项的行。通过点击它，我们将展开我们的导航抽屉。请按照以下步骤操作：
- en: Build your application and run it.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建你的应用程序并运行它。
- en: Click on the menu button at the top-right position of the main screen or expand
    the navigation drawer by swiping from the far-left side of the screen to the right.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击主屏幕右上方的菜单按钮或通过从屏幕的最左侧向右滑动来展开导航抽屉。
- en: Click on buttons.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮。
- en: You will notice that the view pager is animating its page positions below the
    navigation drawer.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到视图页面在导航抽屉下方的页面位置正在进行动画。
- en: '![](img/ec3eed2d-ebf3-4377-90f5-f07682c6b54e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec3eed2d-ebf3-4377-90f5-f07682c6b54e.png)'
- en: Connecting activities
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接活动
- en: 'As you remember, other than `MainActivity`, we also have some more activities.
    In our application, we created activities to create/edit Notes and TODOs. Our
    plan is to connect them to the button click events, and then, when the user clicks
    on the button, the proper screen will open. We will start by defining an `enum`
    that represents an operation that we will perform in an opened activity. When
    we open it, we can view, create, or update Note or Todo. Create a new package
    called `model` and `enum` with the name `MODE`. Make sure you have the following
    `enum` values:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所记得的，除了`MainActivity`之外，我们还有一些其他活动。在我们的应用程序中，我们创建了用于创建/编辑笔记和待办事项的活动。我们的计划是将它们连接到按钮点击事件，然后，当用户点击按钮时，适当的屏幕将打开。我们将首先定义一个代表在打开的活动中执行的操作的`enum`。当我们打开它时，我们可以查看、创建或更新笔记或待办事项。创建一个名为`model`和`enum`的新包，名称为`MODE`。确保你有以下`enum`值：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We added a few additions here. In `enum`'s companion object, we defined the
    extras key definition. Soon, you will need it, and you will understand its purpose.
    We also created a method that will give us an `enum` based on its value.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里添加了一些附加内容。在`enum`的伴随对象中，我们定义了额外键的定义。很快，你会需要它，并且你会理解它的目的。我们还创建了一个方法，它将根据其值给我们一个`enum`。
- en: 'As you probably remember, both activities for working with Notes and Todos
    share the same class. Open `ItemActivity` and extend it as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，用于处理笔记和待办事项的两个活动共享相同的类。打开`ItemActivity`并按以下方式扩展它：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We introduced a field mode of the type we just defined that will tell us if
    we are viewing, creating, or editing a Note or Todo item. Then, we overrode the
    `onCreate()` method. This is important! When we click on the button and open the
    activity, we will pass some values to it. This code snippet retrieves the value
    we passed. To achieve that, we access the `Intent` instance (in the next section,
    we will explain `intents`) and the integer field called `MODE` (value of `MODE.EXTRAS_KEY`).
    The method that gives us this value is called `getIntExtra()`. There is a version
    of the method for every type. If there is no value, `MODE.VIEW.mode` is returned.
    Finally, we set mode to a value we obtained by getting the `MODE` instance from
    the integer value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了一个刚定义的类型字段，它将告诉我们是否正在查看、创建或编辑一个Note或Todo项目。然后，我们重写了`onCreate()`方法。这很重要！当我们单击按钮并打开活动时，我们将向其传递一些值。此代码片段检索我们传递的值。为了实现这一点，我们访问`Intent`实例（在下一节中，我们将解释“意图”）和称为`MODE`的整数字段（`MODE.EXTRAS_KEY`的值）。给我们这个值的方法叫做`getIntExtra()`。对于每种类型都有一个方法的版本。如果没有值，将返回`MODE.VIEW.mode`。最后，我们将模式设置为我们通过从整数值获取`MODE`实例获得的值。
- en: 'The last piece of the puzzle is triggering an activity opening. Open `ItemsFragment`
    and extend it as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 拼图的最后一块是触发活动打开。打开`ItemsFragment`并扩展如下：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We accessed the `FloatingActionButton` instance and assigned a click listener.
    On clicking, we will create a dialog with two options. Each of these options will
    trigger a proper method for activity opening. The implementation of both methods
    is very similar. As an example, we will focus on `openCreateNote()`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们访问了`FloatingActionButton`实例并分配了一个点击侦听器。单击时，我们将创建一个带有两个选项的对话框。这些选项中的每一个都将触发适当的活动打开方法。这两种方法的实现非常相似。例如，我们将专注于`openCreateNote()`。
- en: We will create a new `Intent` instance. In Android, `Intent` represents our
    intention to do something. To start an activity, we must pass the context and
    the class of the activity we want to start. We must also assign some values to
    it. Those values will be passed to an activity instance. In our case, we are passing
    the integer value for the `MODE.CREATE. startActivity()` method that will execute
    the intent and a screen will appear.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的`Intent`实例。在Android中，`Intent`表示我们要做某事的意图。要启动一个活动，我们必须传递上下文和我们想要启动的活动的类。我们还必须为其分配一些值。这些值将传递给一个活动实例。在我们的情况下，我们正在传递`MODE.CREATE`的整数值。`startActivity()`方法将执行意图，屏幕将出现。
- en: 'Run the application, click on the rounded button at the bottom-right corner
    of your screen, and choose an option from the dialog, as shown in the following
    screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，单击屏幕右下角的圆形按钮，并从对话框中选择一个选项，如下面的屏幕截图所示：
- en: '![](img/86fa1e85-d1dd-4447-a404-b8a44219ebd4.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86fa1e85-d1dd-4447-a404-b8a44219ebd4.png)'
- en: 'This will take you to this screen:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您到这个屏幕：
- en: '![](img/e57f3569-ed85-4e67-a7fe-3396fc51415a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e57f3569-ed85-4e67-a7fe-3396fc51415a.png)'
- en: 'This will take you further to add your own data with date and time:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将进一步带您添加您自己的数据与日期和时间：
- en: '![](img/35e3969d-bb6c-433e-bac1-9314a656490a.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35e3969d-bb6c-433e-bac1-9314a656490a.png)'
- en: Looking deeper into Android Intents
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Android意图
- en: The most operations you plan to perform in Android are defined through the `Intent`
    class. `Intents` can be used to start activities like we did, start services (processes
    running in background), or send broadcast messages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，您计划执行的大多数操作都是通过`Intent`类定义的。`Intent`可用于启动活动，启动服务（在后台运行的进程）或发送广播消息。
- en: '`Intent` usually accepts an action and data that we want to pass to some class.
    Action attributes we can set are, for example, `ACTION_VIEW`, `ACTION_EDIT`, `ACTION_MAIN`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Intent`通常接受我们想要传递给某个类的操作和数据。我们可以设置的操作属性包括`ACTION_VIEW`、`ACTION_EDIT`、`ACTION_MAIN`等。'
- en: Except action and data, we can set a category for the intent. The category gives
    additional information to the action we set. We can also set the type for the
    intent and the component that stands for the explicit component class name we
    will use.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了操作和数据，我们还可以为意图设置一个类别。类别为我们设置的操作提供了额外的信息。我们还可以为意图设置类型和组件，该组件代表我们将使用的显式组件类名。
- en: 'There are two types of `intents`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的“意图”：
- en: Explicit intents
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式意图
- en: Implicit intents
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐式意图
- en: Explicit intents have an explicit component set that provides an explicit class
    to be run. Implicit intents do not have an explicit component, but the system
    decides what to do with it based on the data and attributes we assigned. Intent
    resolution process is responsible for handling such `intents`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 显式意图设置了一个显式组件，提供了一个要运行的显式类。隐式意图没有显式组件，但系统根据我们分配的数据和属性决定如何处理它。意图解析过程负责处理这样的“意图”。
- en: 'Combinations of these parameters are endless. We will give some examples so
    you can better understand the purpose of `intents`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数的组合是无穷无尽的。我们将给出一些例子，这样你就可以更好地理解“意图”的目的：
- en: 'Opening a web page:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开网页：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Capturing an image from a camera:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从相机中捕获图像：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Picking an image from the gallery:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从图库中选择图像：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, `intents` are a crucial part of the Android Framework. In the
    next section, we will extend our code to make more use of `intents`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，“意图”是Android框架的一个关键部分。在下一节中，我们将扩展我们的代码，以更多地利用“意图”。
- en: Passing information between activities and fragments
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在活动和片段之间传递信息
- en: 'To pass information between our activities, we will use the Android Bundle.
    Bundle can contain multiple values of different types. We will illustrate the
    use of Bundle by extending our code. Open `ItemsFragemnt` and update it as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的活动之间传递信息，我们将使用Android Bundle。Bundle可以包含不同类型的多个值。我们将通过扩展我们的代码来说明Bundle的使用。打开`ItemsFragemnt`并更新如下：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we introduced some important changes. First of all, we started our Note
    and Todo activities as sub activities. This means that our `MainActivity` class
    depends on the result of the work of those activities. When starting the sub activity
    instead of the `startActivity()` method, we used `startActivityForResult()`. Parameters
    we passed are the intent and request number. To get a result of the execution,
    we overrode the `onActivityResult()` method. As you can see, we checked which
    activity finished and if that execution produced a successful result.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们引入了一些重要的更改。首先，我们将我们的Note和Todo活动作为子活动启动。这意味着我们的`MainActivity`类取决于这些活动的工作结果。在启动子活动时，我们使用了`startActivityForResult()`方法，而不是`startActivity()`方法。我们传递的参数是意图和请求编号。为了获得执行结果，我们重写了`onActivityResult()`方法。如您所见，我们检查了哪个活动完成了，以及该执行是否产生了成功的结果。
- en: 'We also changed the way we pass the information. We created the `Bundle` instance
    and assigned multiple values, like in case of the Todo activity. We added mode,
    date, and time. Bundle is assigned to intent using the `putExtras()` method. To
    use these extras, we updated our activities too. Open `ItemsActivity` and apply
    changes, like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还改变了传递信息的方式。我们创建了`Bundle`实例并分配了多个值，就像Todo活动的情况一样。我们添加了模式、日期和时间。使用`putExtras()`方法将Bundle分配给意图。为了使用这些额外值，我们也更新了我们的活动。打开`ItemsActivity`并应用更改，就像这样：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we introduced the field holding result of activity work. We also updated
    the way we handle the passed information. As you can see, if there are any extras
    available, we will obtain an integer value for the mode. And, finally, the `onDestroy()`
    method sets the result of the work that will be available for parent activity.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们介绍了保存活动工作结果的字段。我们还更新了处理传递信息的方式。如您所见，如果有任何额外值可用，我们将获得一个整数值作为模式。最后，`onDestroy()`方法设置了将可用于父活动的工作结果。
- en: 'Open `TodoActivity` and apply the following changes:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`TodoActivity`并应用以下更改：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We have obtained values for date and time extras and set them to date/time
    picker buttons. Run your application and open the Todo activity. Your Todo screen
    should look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经获得了日期和时间额外值，并将它们设置为日期/时间选择器按钮。运行您的应用程序并打开Todo活动。您的Todo屏幕应该是这样的：
- en: '![](img/e2659bc5-b44b-4bcd-a06e-677c78e168a5.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2659bc5-b44b-4bcd-a06e-677c78e168a5.png)'
- en: 'When you leave the Todo activity and return back to the main screen, observe
    your Logcat. There will be a log with the following content:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当您离开Todo活动并返回到主屏幕时，请观察您的Logcat。将会有一个包含以下内容的日志：
- en: W/Items fragment--we didn't create a new TODO.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: W/Items fragment--我们没有创建新的TODO。
- en: Since we have not created any Todo items yet, we passed a proper result. We
    canceled the creation process by going back to the main screen. In the later chapters,
    and the ones following, we will create Notes and Todos with success.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们尚未创建任何Todo项目，因此我们传递了适当的结果。我们通过返回到主屏幕取消了创建过程。在以后的章节和随后的章节中，我们将成功创建笔记和待办事项。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We used this chapter to connect our interface and establish a real application
    flow. We established a connection between screens by setting proper actions to
    UI elements. We passed the data from point to point. All this in a very easy way!
    We have something that is working, but it looks ugly. In the next chapter, we
    will make sure it looks pretty! We will style it and add some nice visual effects.
    Prepare yourself to meet Android's powerful UI API.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用本章来连接我们的界面并建立真正的应用程序流程。我们通过为UI元素设置适当的操作来建立屏幕之间的连接。我们将数据从一个点传递到另一个点。所有这些都非常简单！我们有一个可以工作的东西，但它看起来很丑。在下一章中，我们将确保它看起来漂亮！我们将为其添加样式和一些漂亮的视觉效果。准备好迎接Android强大的UI
    API。
