- en: Chapter 4. Message Transformers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。消息转换器
- en: 'The takeaway from the last chapter was that the message endpoints make the
    handshake transparent and seamless between two heterogeneous components. In this
    chapter, we will get into the details of one of the important concerns in integration—transformation
    of messages so that they can be consumed across a chain. We will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章的要点是消息端点使得两个异构组件之间的握手透明而无缝。在本章中，我们将深入探讨集成中的一个重要问题——消息转换，以便它们可以在整个链中被消费。我们将涵盖：
- en: Message transformers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息转换器
- en: Working with XML payload
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XML负载
- en: Enrichers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富器
- en: Claim check
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索赔支票
- en: The same set of data can be viewed by different systems in different contexts,
    for example, an employee record is used by the reporting system as well as the
    finance system. However, the usage of the object will be different. Reporting
    systems just dump the employee record—so even if it gets it as a single string,
    it's okay. On the other hand, payroll systems might need to send mail notifications,
    calculate taxes based on state and country, and to carry out other functions for
    which employee data must be presented as a POJO, with information in a separate
    field, say, name, state, country, e-mail, and so on. Similarly, there could be
    cases where additional information must be augmented in the original message,
    it might be needed to encrypt/decrypt or to be converted to some proprietary format—these
    are the scenarios where message transformers make an entry!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 同一组数据可以在不同的系统上以不同的上下文进行查看，例如，员工记录被报告系统和财务系统使用。但是，对象的使用方式会有所不同。报告系统只是转储员工记录，所以即使它以单个字符串的形式接收到，也没关系。另一方面，工资系统可能需要发送邮件通知，根据州和国家计算税收，并执行其他需要员工数据以POJO形式呈现的功能，例如姓名、州、国家、电子邮件等。同样，可能存在需要在原始消息中增加附加信息的情况，可能需要加密/解密或转换为某种专有格式——这些都是消息转换器介入的场景！
- en: Introducing message transformers
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍消息转换器
- en: Message transformers are implementations of the **Enterprise Integration Pattern**
    (**EIP)** named **Message Translator**, which deal with parity between data formats
    across endpoints. It's a neat design to decouple message producers and message
    consumers—none of them are required to know the format expected by the other.
    It is almost like the adapter pattern from the core java design principle, which
    acts as an enabler across producers and consumers. Let's take a more generic example,
    we regularly transfer files across Windows and Linux even though the format required
    on these two systems is different, the underlying application takes care of transforming
    from one format to another.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 消息转换器是**企业集成模式**（**EIP**）中名为**消息转换器**的实现，用于处理端点之间数据格式的一致性。这是一种巧妙的设计，可以解耦消息生产者和消息消费者，它们都不需要知道对方期望的格式。这几乎就像核心Java设计原则中的适配器模式，它充当了生产者和消费者之间的启用器。让我们举一个更通用的例子，我们经常在Windows和Linux之间传输文件，即使这两个系统所需的格式不同，底层应用程序也会负责从一种格式转换为另一种格式。
- en: Spring Integration provides a lot of out-of-the-box transformers without taking
    away flexibility to define and extend new transformers. It has provided extensive
    support for the most commonly used message exchange formats such as XML, JSON,
    Collections, and others. Out of these, by and large, XML is the most used language
    when it comes to cross-language and cross-platform communication. Let's take it
    up and explore Spring Integration support for XML before exploring other aspects
    of message transformation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration提供了许多开箱即用的转换器，而不会剥夺定义和扩展新转换器的灵活性。它为最常用的消息交换格式（如XML、JSON、集合等）提供了广泛的支持。在这些格式中，XML在跨语言和跨平台通信方面是最常用的语言。在探索消息转换的其他方面之前，让我们先来了解一下Spring
    Integration对XML的支持。
- en: Working with XML payload
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XML负载
- en: Two disparate systems might agree to interact via XML formats. This means that
    whenever there is an outgoing communication, the system's data structure needs
    to be converted to XML; while in the case of incoming messages, it needs to be
    converted to a data structure understood by the system. How do we do this? Spring
    provides first-class support to deal with XML via its **OXM** (**Object-to-XML**)
    framework. Marshalling and unmarshalling is done by classes—`org.springframework.oxm.Marshaller`
    and `org.springframework.oxm.Unmarshaller`, respectively. **Marshaller** converts
    an Object to an XML stream, while **unmarshaller** converts an XML stream to Object.
    Spring's Object/XML Mapping support provides several implementations supporting
    marshalling and unmarshalling using JAXB, Castor, and JiBX among others. Spring
    Integration abstracts it further and provides many out-of-the-box components,
    which help to deal with the XML payload. A few of them are *marshalling transformer*,
    *unmarshalling transformer*, and *XPath transformer*. There are many others such
    as Xslt transformer, XPath splitter, and XPath router but we will only cover the
    most used ones.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 两个不同的系统可能同意通过XML格式进行交互。这意味着每当进行出站通信时，系统的数据结构都需要转换为XML；而在接收消息的情况下，它需要转换为系统理解的数据结构。我们该如何做呢？Spring通过其**OXM**（**对象到XML**）框架提供了处理XML的一流支持。编组和解组是由类`org.springframework.oxm.Marshaller`和`org.springframework.oxm.Unmarshaller`分别完成的。**编组器**将对象转换为XML流，而**解组器**将XML流转换为对象。Spring的对象/XML映射支持提供了几种实现，支持使用JAXB、Castor和JiBX等进行编组和解组。Spring
    Integration进一步抽象化，并提供了许多开箱即用的组件，帮助处理XML负载。其中一些是*编组变压器*、*解组变压器*和*XPath变压器*。还有许多其他组件，如Xslt变压器、XPath拆分器和XPath路由器，但我们只会涵盖最常用的组件。
- en: The marshalling transformer
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编组变压器
- en: 'A marshalling transformer is used to convert an object graph into an XML format.
    An optional result type can be provided, which can be a user-defined type, or
    one of the two Spring built-in types: `javax.xml.transform.dom.DOMResult` or `org.springframework.xml.transform.StringResult`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编组转换器用于将对象图转换为XML格式。可以提供一个可选的结果类型，它可以是用户定义的类型，也可以是两种Spring内置类型之一：`javax.xml.transform.dom.DOMResult`或`org.springframework.xml.transform.StringResult`。
- en: 'Here is an example of a marshalling transformer:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个编组转换器的例子：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An explanation of different elements used here is as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的不同元素的解释如下：
- en: '`int-xml:marshalling-transformer`: This is the namespace support provided by
    Spring Integration'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int-xml:marshalling-transformer`：这是Spring Integration提供的命名空间支持'
- en: '`input-channel`: This is the channel from which messages will be read'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input-channel`：这是将读取消息的通道'
- en: '`output-channel`: This is the channel on which transformed messages will be
    dropped'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output-channel`：这是转换后的消息将被放置的通道'
- en: '`marshaller`: This is the marshaller instance to be used for marshalling'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`marshaller`：这是用于编组的编组器实例'
- en: '`result-type`: This is the type to which results should be marshalled'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result-type`：这是结果应该编组的类型'
- en: 'A valid reference of the marshaller is required, for example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个有效的编组器引用，例如：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This example uses one of the Spring built-in types, `org.springframework.xml.transform.StringResult`
    as a result type. If `result-type` is not specified, then the default, `DOMResult`,
    is used. A custom result type can also be used here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用了Spring内置类型`org.springframework.xml.transform.StringResult`作为结果类型。如果未指定`result-type`，则使用默认值`DOMResult`。这里也可以使用自定义的结果类型：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, `feedsXMLFactory` refers to a class, which implements `org.springframework.integration.xml.result.ResultFactor`
    and overrides the method `createResult`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`feedsXMLFactory`指的是一个类，它实现了`org.springframework.integration.xml.result.ResultFactor`并重写了方法`createResult`：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The unmarshalling transformer
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解组转换器
- en: Almost all elements are the same as marshaller described earlier, except the
    `unmarshaller` element, which should point to a valid unmarshaller definition
    supported by Spring.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有元素都与前面描述的编组器相同，除了`unmarshaller`元素，它应该指向Spring支持的有效解组器定义。
- en: XPath transformers
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath转换器
- en: 'Spring integration''s `xpath-transformer` component can be used to parse an
    XML using XPath expressions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration的`xpath-transformer`组件可用于使用XPath表达式解析XML：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The XPath expression to be evaluated can be given using the tag `xpath-expression`.
    When an XML payload arrives on an input channel, the transformer parses the XPATH
    value and puts the result onto the output channel.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估的XPath表达式可以使用`xpath-expression`标签给出。当XML负载到达输入通道时，转换器解析XPATH值并将结果放入输出通道。
- en: 'By default, the parsed value is converted to a message with a string payload
    but, if required, simple conversions can be done. The following implicit conversions
    are supported by Spring: `BOOLEAN`, `DOM_OBJECT_MODEL`, `NODE`, `NODESET`, `NUMBER`,
    and `STRING`. All of these are defined in `javax.xml.xpath.XPathConstants`, shown
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，解析的值转换为具有字符串负载的消息，但如果需要，可以进行简单的转换。Spring支持以下隐式转换：`BOOLEAN`、`DOM_OBJECT_MODEL`、`NODE`、`NODESET`、`NUMBER`和`STRING`。所有这些都在`javax.xml.xpath.XPathConstants`中定义，如下所示：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `evaluation-type` tag is used to introduce the desired conversion.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`evaluation-type`标签用于引入所需的转换。'
- en: Validating XML messages
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证XML消息
- en: 'While we are discussing XML transformation, it''s relevant to bring up the
    validation aspect of the XML payload. Prevalidation of XML will save the system
    from going in an erroneous condition and can act at the source. Spring Integration
    provides support for XML validation via a filter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论XML转换时，相关的是提及XML负载的验证方面。对XML进行预验证将使系统免于陷入错误状态，并可以在源头进行操作。Spring Integration通过过滤器提供了对XML验证的支持：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `schema-location` element defines the XSD that should be used for validation.
    This is optional and if it has not done so, set it to default `xml-schema`, which
    internally translates to `org.springframework.xml.validation.XmlValidatorFactory#SCHEMA_W3C_XML`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema-location`元素定义了应该用于验证的XSD。这是可选的，如果没有这样做，将其设置为默认的`xml-schema`，它在内部转换为`org.springframework.xml.validation.XmlValidatorFactory#SCHEMA_W3C_XML`。'
- en: 'We discussed a lot of inbuilt transformers, primarily dealing with XML payloads.
    Apart from these, Spring Integration provides many out-of-the-box transformers
    for the most common conversions, such as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了许多内置转换器，主要涉及XML负载。除此之外，Spring Integration还提供了许多开箱即用的转换器，用于最常见的转换，比如：
- en: '`object-to-string-transformer`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object-to-string-transformer`'
- en: '`payload-serializing-transformer`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`payload-serializing-transformer`'
- en: '`payload-deserializing-transformer`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`payload-deserializing-transformer`'
- en: '`object-to-map-transformer`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object-to-map-transformer`'
- en: '`map-to-object-transformer`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map-to-object-transformer`'
- en: '`json-to-object-transformer`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json-to-object-transformer`'
- en: '`object-to-json-transformer` and so on'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object-to-json-transformer`等等'
- en: Detailing each one is out of the scope of this book, but the concepts are the
    same as mentioned earlier.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 详细介绍每一个超出了本书的范围，但概念与前面提到的相同。
- en: Beyond default transformers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超出默认转换器
- en: 'Spring does not restrict us to use the transformer provided by the framework,
    we can define our own transformer and it''s pretty straightforward. All we need
    to do is to define a Java class, which takes a particular input type, coverts
    it to an expected format and puts it onto the output channel. Let''s take an example
    where we want to convert our feed in a format that can be written to DB; we can
    define a class, which takes a *Message* payload of type `com.sun.syndication.feed.synd.SyndEntry`
    and converts it to `com.cpandey.siexample.pojo.SoFeed`, which is a JPA entity:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Spring不限制我们使用框架提供的转换器，我们可以定义自己的转换器，而且非常简单。我们只需要定义一个Java类，它接受特定的输入类型，将其转换为预期格式，并将其放入输出通道。让我们举一个例子，我们想要将我们的feed转换为可以写入数据库的格式；我们可以定义一个类，它接受类型为`com.sun.syndication.feed.synd.SyndEntry`的*Message*负载，并将其转换为`com.cpandey.siexample.pojo.SoFeed`，这是一个JPA实体：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A transformer can be declared using the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下代码声明转换器：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s define the bean referred to by the `ref` tag:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义`ref`标签引用的bean：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As explained earlier, this class has the required method for transformation.
    This bean can be used across transformers and each method can have separate transformation
    logic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这个类有所需的转换方法。这个bean可以在转换器之间使用，每个方法可以有单独的转换逻辑。
- en: Content enrichers
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容丰富器
- en: While enabling interaction between heterogeneous systems, it might be necessary
    to augment the message with additional information so that it can be successfully
    processed by the next set of consumers. Let's take an example where in a batch
    processing environment, it might be necessary to attach priority information onto
    the incoming tasks. It is for a message that is put on a file server for external
    consumption—a timestamp indicating the max time for which the file would be kept
    should be added. There could be several such scenarios where the incoming message
    is incomplete and is to be processed by the next endpoint. Content enricher is
    a specialized form of transformer, which can attach additional information to
    the message. In the context of Spring Integration, the message consists of two
    parts—header and message payload. Spring Integration exposes a way to enrich either
    of these components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用异构系统之间的交互时，可能需要增加消息的附加信息，以便它可以被下一组消费者成功处理。让我们举个例子，在批处理环境中，可能需要将优先级信息附加到传入的任务上。对于放置在文件服务器上供外部使用的消息，应该添加一个指示文件保留的最长时间的时间戳。可能会有几种这样的情况，其中传入的消息是不完整的，并且需要由下一个端点进行处理。内容丰富器是一种特殊形式的转换器，它可以向消息附加附加信息。在Spring
    Integration的上下文中，消息由两部分组成—头部和消息负载。Spring Integration提供了一种方式来丰富这两个组件中的任何一个。
- en: Header enrichers
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 头部丰富器
- en: '**Header** in Spring Integration is an instance of the `MessageHeaders` class,
    which in turn extends `Map<String,?>`. Headers are nothing but key-value pairs
    and their purpose is to provide metadata about the message. Adding an additional
    header is straightforward. Let''s take an example, whenever feed arrives in our
    system and passes the XML validation, we will add a constant indicating that the
    feed is validated:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration中的**头部**是`MessageHeaders`类的一个实例，它又扩展了`Map<String,?>`。头部只是键值对，其目的是提供有关消息的元数据。添加额外的头部很简单。让我们举个例子，每当订阅到达我们的系统并通过XML验证时，我们将添加一个常量，表示该订阅已经验证通过：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'What if we want to add some dynamic value, let''s say a timestamp, in a specific
    format? We can leverage bean support for the header enricher and define custom
    enrichment in the bean:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要添加一些动态值，比如一个时间戳，以特定格式？我们可以利用头部丰富器的bean支持，并在bean中定义自定义丰富：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Where the bean referred to by the `ref` tag is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`ref`标签引用的bean如下：'
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The definition of the actual class is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际类的定义如下：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Apart from a standard Java Bean, we can also use a Groovy script to define
    the custom enricher:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的Java Bean，我们还可以使用Groovy脚本来定义自定义丰富器：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There are predefined header elements that can also be used; the simplest and
    most commonly used is the error-channel:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些预定义的头部元素也可以使用；最简单和最常用的是错误通道：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Payload enrichers
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载丰富器
- en: '**Header enrichers** are handy to add metadata information. What if the message
    itself is incomplete? Let''s take an example, when a feed arrives, based on the
    feed category, it might be required to fetch metadata for that category, subscribed
    users for that category, and so on. Other components such as service activators
    and gateways can be used, but for ease of use Spring Integration has exposed payload
    enrichers. **Payload enrichers** are like gateways—they put messages onto a channel
    and then expect a reply for that message. The returned message will be payload
    enriched. For example, let''s say external feeds have a lot of categories for
    Spring such as Spring-mvc, Spring-boot, Spring-roo, and Spring-data, but our system
    has a single category for all of these—Spring. Based on external categories, we
    can enrich the payload to use a single category:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**头部丰富器**很方便地添加元数据信息。如果消息本身是不完整的呢？让我们举个例子，当一个订阅到达时，根据订阅类别，可能需要获取该类别的元数据，订阅该类别的用户等等。其他组件如服务激活器和网关也可以使用，但为了方便使用，Spring
    Integration已经暴露了负载丰富器。**负载丰富器**就像网关一样——它们将消息放到通道上，然后期望得到该消息的回复。返回的消息将被负载丰富。例如，假设外部提供了很多Spring的类别，比如Spring-mvc，Spring-boot，Spring-roo和Spring-data，但我们的系统对所有这些只有一个类别—Spring。根据外部类别，我们可以丰富负载以使用单一类别：'
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, the configuration elements mean the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，配置元素的含义如下：
- en: '`int:enricher`: This is used as Spring Integration namespace support for the
    enricher.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:enricher`：这是用作Spring Integration命名空间支持的丰富器。'
- en: '`input-channel`: This is the channel from which data will be read for enrichment.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input-channel`：这是要读取数据进行丰富的通道。'
- en: '`request-channel`: This is the channel to which data will be sent for enriching
    it.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request-channel`：这是要发送数据进行丰富的通道。'
- en: '`int:property`: This is a convenient way to set the values on the target payload.
    The property mentioned must be "settable" on the target instance. It can be an
    **SpEL** (**Spring Expression Language**) expression, which is indicated by `expression`
    or it can be a value indicated by a value.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:property`：这是在目标负载上设置值的便捷方式。提到的属性必须在目标实例上是“可设置的”。它可以是**SpEL**（**Spring表达式语言**）表达式，用`expression`表示，也可以是一个值，用值表示。'
- en: Claim check
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索赔检查
- en: 'We discussed the usage of header and content enrichers—they add additional
    information. However, in some circumstances, it might be a valid use case to hide
    the data—the simplest one can be a heavy payload. It''s not a good idea to move
    the whole message around while most of the channels might be using just a subset
    or even just a pass-through! Enter a *claim check pattern*, which suggests storing
    data in accessible storage and then passing only the pointers around. Components
    that need the data to process can retrieve it using the pointer. Spring integration
    provides two components to accomplish this: *Incoming claim check transformer*
    and *Outgoing claim check transformer*. The incoming claim check transformer can
    be used to store the data while the outgoing one can be used to retrieve it.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了头部和内容丰富器的用法——它们添加了额外的信息。然而，在某些情况下，隐藏数据可能是一个有效的用例——最简单的情况可能是一个大负载。在大多数通道可能只使用子集甚至只是一个透传的情况下，将整个消息传递是不明智的！这时就需要使用*索赔检查模式*，它建议将数据存储在可访问的存储中，然后只传递指针。需要处理数据的组件可以使用指针检索数据。Spring
    Integration提供了两个组件来实现这一点：*传入索赔检查变换器*和*传出索赔检查变换器*。传入索赔检查变换器可用于存储数据，而传出索赔检查变换器可用于检索数据。
- en: Incoming claim check transformer
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传入索赔检查变换器
- en: 'Incoming **claim check transformer** stores a message in the **message store**
    identified by its message-store tag, and transforms the payload to a pointer to
    the actual message, as can be seen in the following code snippet:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 传入索赔检查变换器将消息存储在消息存储中，由其消息存储标签标识，并将有效载荷转换为指向实际消息的指针，如下面的代码片段所示：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once the message is stored in the message store, it is indexed with a generated
    ID, which becomes a claim check for that message. The transformed message is the
    claim check, which is the new payload, and will be sent to the output channel.
    To retrieve this message, an outgoing claim check transformer is required.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦消息存储在消息存储中，就会使用生成的ID对其进行索引，这成为该消息的索赔检查。转换后的消息就是索赔检查，它是新的有效载荷，并将被发送到输出通道。要检索此消息，需要一个传出索赔检查变换器。
- en: Outgoing claim check transformer
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传出索赔检查变换器
- en: 'Based on the claim check, this transformer converts the pointer back to the
    original payload and puts it back onto the output channel. What if we want to
    restrict the claim to once only? We can introduce a Boolean value for `remove-message`,
    setting its value to true will delete the message from the message store as soon
    as it has been claimed. The default value is false. The updated code is shown
    in the following code snippet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 基于索赔检查，此变换器将指针转换回原始有效载荷，并将其放回输出通道。如果我们只想限制索赔一次怎么办？我们可以引入一个布尔值`remove-message`，将其值设置为true将在索赔后立即从消息存储中删除消息。默认值为false。更新后的代码如下所示：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We covered the ways in which a message can be enriched and transformed so that
    heterogeneous systems are decoupled from data formats of each other. We also covered
    the claim check concept, which is a special case of transformation and can be
    used for performance, security, and other nonfunctional aspects.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了消息如何被丰富和转换，以使异构系统与彼此的数据格式解耦。我们还讨论了索赔检查的概念，这是转换的特殊情况，可以用于性能、安全和其他非功能方面。
- en: In the next chapter, we will move on to explore more out-of-the-box components
    provided by Spring Integration, which help with message flow.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续探索Spring Integration提供的更多开箱即用的组件，这些组件有助于消息流程。
