- en: Setting Up a Working Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工作环境
- en: In the last chapter, we learned what Docker containers are and why they're important.
    We learned what kinds of problems containers solve in a modern software supply
    chain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了Docker容器是什么，以及它们为什么重要。我们了解了容器在现代软件供应链中解决了哪些问题。
- en: In this chapter, we are going to prepare our personal or working environment
    to work efficiently and effectively with Docker. We will discuss in detail how
    to set up an ideal environment for developers, DevOps, and operators that can
    be used when working with Docker containers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将准备我们的个人或工作环境，以便与Docker高效有效地工作。我们将详细讨论如何为开发人员、DevOps和运维人员设置一个理想的环境，用于使用Docker容器时的工作。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: The Linux command shell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux命令shell
- en: PowerShell for Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows的PowerShell
- en: Installing and using a package manager
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用软件包管理器
- en: Installing Git and cloning the code repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Git并克隆代码存储库
- en: Choosing and installing a code editor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择并安装代码编辑器
- en: Installing Docker for Desktop on macOS or Windows
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS或Windows上安装Docker桌面版
- en: Installing Docker Toolbox
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Docker工具箱
- en: Installing Minikube
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Minikube
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need a laptop or a workstation with either macOS
    or Windows, preferably Windows 10 Professional, installed. You should also have
    free internet access to download applications and permission to install those
    applications on your laptop.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您将需要一台装有macOS或Windows的笔记本电脑或工作站，最好是安装了Windows 10专业版。您还应该有免费的互联网访问权限来下载应用程序，并且有权限在您的笔记本电脑上安装这些应用程序。
- en: It is also possible to follow along with this book if you have a Linux distribution
    as your operating system, such as Ubuntu 18.04 or newer. I will try to indicate
    where commands and samples differ significantly from the ones on macOS or Windows.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的操作系统是Linux发行版，如Ubuntu 18.04或更新版本，也可以按照本书进行。我会尽量指出命令和示例与macOS或Windows上的命令有明显不同的地方。
- en: The Linux command shell
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux命令shell
- en: Docker containers were first developed on Linux for Linux. It is hence natural
    that the primary command-line tool used to work with Docker, also called a shell,
    is a Unix shell; remember, Linux derives from Unix. Most developers use the Bash
    shell. On some lightweight Linux distributions, such as Alpine, Bash is not installed
    and consequently one has to use the simpler Bourne shell, just called *sh*. Whenever we are
    working in a Linux environment, such as inside a container or on a Linux VM, we
    will use either `/bin/bash` or `/bin/sh`, depending on their availability.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器最初是在Linux上为Linux开发的。因此，用于与Docker一起工作的主要命令行工具，也称为shell，是Unix shell；请记住，Linux源自Unix。大多数开发人员使用Bash
    shell。在一些轻量级的Linux发行版中，如Alpine，Bash未安装，因此必须使用更简单的Bourne shell，简称为*sh*。每当我们在Linux环境中工作，比如在容器内或Linux虚拟机上，我们将使用`/bin/bash`或`/bin/sh`，具体取决于它们的可用性。
- en: Although Apple's macOS X is not a Linux OS, Linux and macOS X are both flavors
    of Unix and hence support the same set of tools. Among those tools are the shells.
    So, when working on macOS, you will probably be using the Bash shell.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然苹果的macOS X不是Linux操作系统，但Linux和macOS X都是Unix的变种，因此支持相同的工具集。其中包括shell。因此，在macOS上工作时，您可能会使用Bash
    shell。
- en: 'In this book, we expect from you a familiarity with the most basic scripting
    commands in Bash and PowerShell, if you are working on Windows. If you are an
    absolute beginner, then we strongly recommend that you familiarize yourself with
    the following cheat sheets:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们期望您熟悉Bash和PowerShell中最基本的脚本命令。如果您是一个绝对的初学者，我们强烈建议您熟悉以下备忘单：
- en: '*Linux Command Line Cheat Sheet* by Dave Child at [http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Linux命令行速查表*，作者是Dave Child，网址是[http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)'
- en: '*PowerShell Basic Cheat Sheet* at [http://bit.ly/2EPHxze](http://bit.ly/2EPHxze)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*PowerShell基础速查表*，网址是[http://bit.ly/2EPHxze](http://bit.ly/2EPHxze)'
- en: PowerShell for Windows
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows的PowerShell
- en: On a Windows computer, laptop, or server, we have multiple command-line tools
    available. The most familiar is the command shell. It has been available on any
    Windows computer for decades. It is a very simple shell. For more advanced scripting,
    Microsoft has developed PowerShell. PowerShell is very powerful and very popular
    among engineers working on Windows. On Windows 10, finally, we have the so-called* Windows
    Subsystem for Linux*, which allows us to use any Linux tool, such as the Bash
    or Bourne shells. Apart from this, there are also other tools that install a Bash
    shell on Windows, for example, the Git Bash shell. In this book, all commands
    will use Bash syntax. Most of the commands also run in PowerShell.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows计算机、笔记本电脑或服务器上，我们有多个命令行工具可用。最熟悉的是命令行。几十年来，它一直可用于任何Windows计算机。它是一个非常简单的shell。对于更高级的脚本编写，微软开发了PowerShell。PowerShell非常强大，在Windows上的工程师中非常受欢迎。最后，在Windows
    10上，我们有所谓的*Windows子系统用于Linux*，它允许我们使用任何Linux工具，比如Bash或Bourne shell。除此之外，还有其他工具可以在Windows上安装Bash
    shell，例如Git Bash shell。在本书中，所有命令都将使用Bash语法。大多数命令也可以在PowerShell中运行。
- en: Our recommendation for you is hence to either use PowerShell or any other Bash
    tool to work with Docker on Windows.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们建议您使用PowerShell或任何其他Bash工具来在Windows上使用Docker。
- en: Using a package manager
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用软件包管理器
- en: The easiest way to install software on a macOS or Windows laptop is to use a good package
    manager. On macOS, most people use Homebrew, and on Windows, Chocolatey is a good
    choice. If you're using a Debian-based Linux distribution such as Ubuntu, then
    the package manager of choice for most is `apt`, which is installed by default.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS或Windows笔记本上安装软件的最简单方法是使用一个好的软件包管理器。在macOS上，大多数人使用Homebrew，在Windows上，Chocolatey是一个不错的选择。如果你使用的是像Ubuntu这样的基于Debian的Linux发行版，那么大多数人选择的软件包管理器是默认安装的`apt`。
- en: Installing Homebrew on macOS
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装Homebrew
- en: 'Homebrew is the most popular package manager on macOS, and it is easy to use
    and very versatile. Installing Homebrew on macOS is simple; just follow the instructions
    at [https://brew.sh/](https://brew.sh/):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew是macOS上最流行的软件包管理器，易于使用且非常多功能。在macOS上安装Homebrew很简单；只需按照[https://brew.sh/](https://brew.sh/)上的说明操作即可：
- en: 'In a nutshell, open a new Terminal window and execute the following command
    to install Homebrew:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，打开一个新的终端窗口并执行以下命令来安装Homebrew：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the installation is finished, test whether Homebrew is working by entering `brew
    --version` in the Terminal. You should see something like this:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，通过在终端中输入`brew --version`来测试Homebrew是否正常工作。你应该会看到类似这样的内容：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we are ready to use Homebrew to install tools and utilities. If we, for
    example, want to install the Vi text editor, we can do so like this:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备使用Homebrew来安装工具和实用程序。例如，如果我们想要安装Vi文本编辑器，可以这样做：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will then download and install the editor for you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您下载并安装编辑器。
- en: Installing Chocolatey on Windows
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Chocolatey
- en: 'Chocolatey is a popular package manager for Windows, built on PowerShell. To
    install the Chocolatey package manager, please follow the instructions at [https://chocolatey.org/](https://chocolatey.org/) or
    open a new PowerShell window in admin mode and execute the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey是Windows上基于PowerShell的流行软件包管理器。要安装Chocolatey软件包管理器，请按照[https://chocolatey.org/](https://chocolatey.org/)上的说明操作，或者以管理员模式打开一个新的PowerShell窗口并执行以下命令：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is important to run the preceding command as an administrator, otherwise,
    the installation will not succeed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要以管理员身份运行上述命令，否则安装将不会成功。
- en: 'Once Chocolatey is installed, test it with the `choco --version` command. You
    should see output similar to the following:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了Chocolatey，请使用`choco --version`命令进行测试。你应该看到类似以下的输出：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To install an application such as the Vi editor, use the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装一个应用程序，比如Vi编辑器，使用以下命令：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-y` parameter makes sure that the installation happens without asking for
    reconfirmation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`-y`参数确保安装过程不需要再次确认。'
- en: Please note that once Chocolatey has installed an application, you need to open
    a new PowerShell window to use that application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一旦Chocolatey安装了一个应用程序，你需要打开一个新的PowerShell窗口来使用该应用程序。
- en: Installing Git
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Git
- en: 'We are using Git to clone the sample code accompanying this book from its GitHub
    repository. If you already have Git installed on your computer, you can skip this
    section:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用Git从其GitHub存储库中克隆伴随本书的示例代码。如果你的计算机上已经安装了Git，你可以跳过这一部分：
- en: 'To install Git on your macOS, use the following command in a Terminal window:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在macOS上安装Git，请在终端窗口中使用以下命令：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To install Git on Windows, open a PowerShell window and use Chocolatey to install
    it:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Windows上安装Git，请打开PowerShell窗口并使用Chocolatey进行安装：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, on your Debian or Ubuntu machine, open a Bash console and execute
    the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在你的Debian或Ubuntu机器上，打开一个Bash控制台并执行以下命令：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once Git is installed, verify that it is working. On all platforms, use the
    following:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完Git后，验证它是否正常工作。在所有平台上，使用以下命令：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should output something along the lines of the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该输出类似以下内容的东西：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that Git is working, we can clone the source code accompanying this book
    from GitHub. Execute the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在Git正常工作了，我们可以从GitHub上克隆伴随本书的源代码。执行以下命令：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will clone the content of the master branch into your local folder, `~/fod-solution`.
    This folder will now contain all of the sample solutions for the labs we are going
    to do together in this book. Refer to these sample solutions if you get stuck.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把主分支的内容克隆到你的本地文件夹`~/fod-solution`中。现在这个文件夹将包含我们在本书中一起做的所有实验的示例解决方案。如果遇到困难，请参考这些示例解决方案。
- en: Now that we have installed the basics, let's continue with the code editor.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了基础知识，让我们继续使用代码编辑器。
- en: Choosing a code editor
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个代码编辑器
- en: Using a good code editor is essential to working productively with Docker. Of
    course, which editor is the best is highly controversial and depends on your personal
    preference. A lot of people use Vim, or others such as Emacs, Atom, Sublime, or **Visual
    Studio Code** (**VS Code**), to just name a few. VS Code is a completely free
    and lightweight editor, yet it is very powerful and is available for macOS, Windows,
    and Linux. According to Stack Overflow, it is currently by far the most popular
    code editor. If you are not yet sold on another editor, I highly recommend that
    you give VS Code a try.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个好的代码编辑器对于高效地使用Docker是至关重要的。当然，哪个编辑器是最好的是非常有争议的，取决于个人偏好。很多人使用Vim，或者其他一些编辑器，比如Emacs，Atom，Sublime，或者Visual
    Studio Code（VS Code），只是举几个例子。VS Code是一个完全免费且轻量级的编辑器，但它非常强大，并且适用于macOS，Windows和Linux。根据Stack
    Overflow的数据，它目前是迄今为止最受欢迎的代码编辑器。如果你还没有决定使用其他编辑器，我强烈建议你试试VS Code。
- en: But if you already have a favorite code editor, then please continue using it.
    As long as you can edit text files, you're good to go. If your editor supports
    syntax highlighting for Dockerfiles and JSON and YAML files, then even better.
    The only exception will be [Chapter 6](b6647803-2c5c-4b9d-9a4a-a836ac356329.xhtml),
    *Debugging Code Running in a Container*. The examples presented in that chapter
    will be heavily tailored toward VS Code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您已经有一个喜欢的代码编辑器，请继续使用它。只要您可以编辑文本文件，就可以继续前进。如果您的编辑器支持Dockerfiles和JSON和YAML文件的语法高亮显示，那就更好了。唯一的例外将是[第6章]（b6647803-2c5c-4b9d-9a4a-a836ac356329.xhtml），*在容器中运行的代码调试*。该章节中呈现的示例将大量定制为VS
    Code。
- en: Installing VS Code on macOS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装VS Code
- en: 'Follow these steps for installation:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new Terminal window and execute the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并执行以下命令：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once VS Code has been installed successfully, navigate to your home directory
    (`~`) and create a folder, `fundamentals-of-docker`; then navigate into this new
    folder:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦VS Code安装成功，转到您的主目录（`~`）并创建一个名为`fundamentals-of-docker`的文件夹；然后进入这个新文件夹：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now open VS Code from within this folder:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从这个文件夹中打开VS Code：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~/fundamentals-of-docker`) as the working folder.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记前面命令中的句号（.）。VS将启动并打开当前文件夹（`~/fundamentals-of-docker`）作为工作文件夹。
- en: Installing VS Code on Windows
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装VS Code
- en: 'Follow these steps for installation:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new PowerShell window in admin mode and execute the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员模式打开一个新的PowerShell窗口并执行以下命令：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Close your PowerShell window and open a new one, to make sure VS Code is in
    your path.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭您的PowerShell窗口并打开一个新窗口，以确保VS Code在您的路径中。
- en: 'Now navigate to your home directory and create a folder, `fundamentals-of-docker`;
    then navigate into this new folder:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到您的主目录并创建一个名为`fundamentals-of-docker`的文件夹；然后进入这个新文件夹：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally open Visual Studio Code from within this folder:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从这个文件夹中打开Visual Studio Code：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~\fundamentals-of-docker`) as the working folder.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记前面命令中的句号（.）。VS将启动并打开当前文件夹（`~\fundamentals-of-docker`）作为工作文件夹。
- en: Installing VS Code on Linux
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上安装VS Code
- en: 'Follow these steps for installation:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'On your Debian or Ubuntu-based Linux machine, open a Bash Terminal and execute
    the following statement to install VS Code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Debian或基于Ubuntu的Linux机器上，打开Bash终端并执行以下语句以安装VS Code：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you're using a Linux distribution that's not based on Debian or Ubuntu, then
    please follow the following link for more details: [https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是不基于Debian或Ubuntu的Linux发行版，请按照以下链接获取更多详细信息：[https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)
- en: 'Once VS Code has been installed successfully, navigate to your home directory
    (`~`) and create a folder, `fundamentals-of-docker`; then navigate into this new
    folder:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦VS Code安装成功，转到您的主目录（`~`）并创建一个名为`fundamentals-of-docker`的文件夹；然后进入这个新文件夹：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now open Visual Studio Code from within this folder:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从这个文件夹中打开Visual Studio Code：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~/fundamentals-of-docker`) as the working folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记前面命令中的句号（.）。VS将启动并打开当前文件夹（`~/fundamentals-of-docker`）作为工作文件夹。
- en: Installing VS Code extensions
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装VS Code扩展
- en: 'Extensions are what make VS Code such a versatile editor. On all three platforms,
    macOS, Windows, and Linux, you can install VS Code extensions the same way:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是使VS Code成为如此多才多艺的编辑器的原因。在macOS、Windows和Linux三个平台上，您可以以相同的方式安装VS Code扩展：
- en: 'Open a Bash console (or PowerShell in Windows) and execute the following group
    of commands to install the most essential extensions we are going to use in the
    upcoming examples in this book:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Bash控制台（或Windows中的PowerShell），并执行以下一组命令，以安装我们将在本书中的示例中使用的最基本的扩展：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We are installing extensions that enable us to work with Java, C#, .NET, and
    Python much more productively. We're also installing an extension built to enhance
    our experience with Docker.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在安装一些扩展，使我们能够更加高效地使用Java、C#、.NET和Python。我们还安装了一个扩展，用于增强我们与Docker的体验。
- en: After the preceding extensions have been installed successfully, restart VS
    Code to activate the extensions. You can now click the extensions icon in the
    activity pane on the left-hand side of VS Code to see all of the installed extensions.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功安装了上述扩展之后，重新启动VS Code以激活这些扩展。现在您可以点击VS Code左侧活动面板上的扩展图标，查看所有已安装的扩展。
- en: Next, let's install Docker for Desktop.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们安装Docker桌面版。
- en: Installing Docker for Desktop
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker桌面版
- en: If you are using macOS or have Windows 10 Professional installed on your laptop,
    then we strongly recommend that you install Docker for Desktop. This platform
    gives you the best experience when working with containers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是macOS，或者在笔记本电脑上安装了Windows 10专业版，则我们强烈建议您安装Docker桌面版。这个平台在使用容器时会给您最好的体验。
- en: 'Docker for Desktop is not supported on Linux at this time. Please refer to
    the *Installing Docker CE on Linux* section for more details.Note that older versions
    of Windows or Windows 10 Home edition cannot run Docker for Windows. Docker for
    Windows uses Hyper-V to run containers transparently in a VM but Hyper-V is not
    available on older versions of Windows; nor is it available in the Home edition
    of Windows 10\. In this case, we recommend that you use Docker Toolbox instead,
    which we will describe in the next section. Follow these steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Docker桌面版不支持Linux。有关更多详细信息，请参阅*在Linux上安装Docker CE*部分。请注意，旧版本的Windows或Windows
    10家庭版无法运行Docker for Windows。Docker for Windows使用Hyper-V在虚拟机中透明地运行容器，但是Hyper-V在旧版本的Windows上不可用；在Windows
    10家庭版中也不可用。在这种情况下，我们建议您使用Docker Toolbox，我们将在下一节中描述。按照以下步骤进行操作：
- en: No matter what OS you're using, navigate to the Docker start page at [https://www.docker.com/get-started](https://www.docker.com/get-started).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论您使用什么操作系统，都可以导航到Docker的起始页面[https://www.docker.com/get-started](https://www.docker.com/get-started)。
- en: On the right-hand side of the loaded page, you'll find a big blue button saying
    Download Desktop and Take a Tutorial. Click this button and follow the instructions.
    You will be redirected to Docker Hub. If you don't have an account on Docker Hub
    yet, then create one. It is absolutely free, but you need an account to download
    the software. Otherwise, just log in.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在加载的页面右侧，您会找到一个大大的蓝色按钮，上面写着Download Desktop and Take a Tutorial。点击这个按钮并按照说明进行操作。您将被重定向到Docker
    Hub。如果您还没有Docker Hub账户，请创建一个。这是完全免费的，但您需要一个账户来下载软件。否则，只需登录即可。
- en: 'Once you''re logged in, look out for this on the page:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您登录，注意页面上的以下内容：
- en: '![](assets/e00d0017-d436-41eb-b4f0-f7b35a4e5c8a.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e00d0017-d436-41eb-b4f0-f7b35a4e5c8a.png)'
- en: Download Docker Desktop on Docker Hub
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Hub上下载Docker桌面版
- en: 'Click the blue Download Docker Desktop button. You should then see a screen
    like the following:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的Download Docker Desktop按钮。然后您应该会看到以下屏幕：
- en: '![](assets/c9a4cfdc-fdbb-44dd-bbaf-7999541220a6.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9a4cfdc-fdbb-44dd-bbaf-7999541220a6.png)'
- en: Download screen for Docker for Desktop for macOSNote that if you're on a Windows
    PC, the blue button will say Download Docker Desktop for Windows instead.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上下载Docker桌面版的屏幕提示请注意，如果您使用的是Windows PC，蓝色按钮将会显示为Download Docker Desktop
    for Windows。
- en: Installing Docker for Desktop on macOS
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装Docker桌面版
- en: 'Follow these steps for installation:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Once you have successfully installed Docker for Desktop for macOS, please open
    a Terminal window and execute the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装成功Docker桌面版后，请打开终端窗口并执行以下命令：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see something like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于这样的东西：
- en: '![](assets/c44f8efb-03f9-4991-8911-1baf60e21c35.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c44f8efb-03f9-4991-8911-1baf60e21c35.png)'
- en: Docker version on Docker for Desktop
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Docker桌面版的Docker版本
- en: 'To see whether you can run containers, enter the following command into the
    terminal window and hit *Enter*:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看是否可以运行容器，请在终端窗口中输入以下命令并按Enter键：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If all goes well, your output should look something like the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您的输出应该看起来类似于以下内容：
- en: '![](assets/1601a10a-3104-4c94-bdf7-9f5fbd3df2aa.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1601a10a-3104-4c94-bdf7-9f5fbd3df2aa.png)'
- en: Running Hello-World on Docker for Desktop for macOS
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上的Docker桌面版上运行Hello-World
- en: Next, we will install Docker on Windows.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在Windows上安装Docker。
- en: Installing Docker for Desktop on Windows
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Docker桌面版
- en: 'Follow these steps for installation:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Once you have successfully installed Docker for Desktop for Windows, please
    open a PowerShell window and execute the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装成功Docker桌面版后，请打开PowerShell窗口并执行以下命令：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To see whether you can run containers, enter the following command into the
    PowerShell window and hit *Enter*:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看是否可以运行容器，请在PowerShell窗口中输入以下命令并按Enter键：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If all goes well, your output should look similar to the preceding figure.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您的输出应该与前面的图像类似。
- en: Installing Docker CE on Linux
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上安装Docker CE
- en: As mentioned earlier, Docker for Desktop is only available for macOS and Windows
    10 Pro. If you're using a Linux machine, then you can use the Docker **Community**
    **Edition** (**CE**), which consists of Docker Engine, plus a few additional tools,
    such as the Docker **Command Line Interface** (**CLI**) and `docker-compose`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker桌面版仅适用于macOS和Windows 10专业版。如果您使用的是Linux机器，则可以使用Docker社区版（CE），其中包括Docker引擎以及一些附加工具，如Docker命令行界面（CLI）和docker-compose。
- en: Please follow the instructions at the following link to install Docker CE for
    your particular Linux distribution—in this case, Ubuntu: [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下链接中的说明安装特定Linux发行版（在本例中为Ubuntu）的Docker CE：[https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/)。
- en: Installing Docker Toolbox
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker Toolbox
- en: Docker Toolbox has been available for developers for a few years. It precedes
    newer tools such as Docker for Desktop. The Toolbox allows a user to work very
    elegantly with containers on any macOS or Windows computer. Containers must run
    on a Linux host. Neither Windows nor macOS can run containers natively. Hence,
    we need to run a Linux VM on our laptop, where we can then run our containers.
    Docker Toolbox installs VirtualBox on our laptop, which is used to run the Linux
    VMs we need.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox已经为开发人员提供了几年。它是Docker桌面版等新工具的前身。Toolbox允许用户在任何macOS或Windows计算机上非常优雅地使用容器。容器必须在Linux主机上运行。Windows和macOS都无法本地运行容器。因此，我们需要在笔记本电脑上运行Linux虚拟机，然后在其中运行容器。Docker
    Toolbox在笔记本电脑上安装VirtualBox，用于运行我们需要的Linux虚拟机。
- en: As a Windows user, you might already be aware that there are so-called Windows
    containers that run natively on Windows, and you are right. Microsoft has ported
    Docker Engine to Windows and it is possible to run Windows containers directly
    on Windows Server 2016 or newer, without the need for a VM. So, now we have two
    flavors of containers, Linux containers and Windows containers. The former only
    runs on a Linux host and the latter only runs on a Windows server. In this book,
    we are exclusively discussing Linux containers, but most of the things we'll learn
    also apply to Windows containers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Windows用户，您可能已经意识到有所谓的Windows容器可以在Windows上本地运行，这一点您是正确的。微软已经将Docker Engine移植到了Windows，并且可以在Windows
    Server 2016或更新版本上直接运行Windows容器，无需虚拟机。所以，现在我们有两种容器，Linux容器和Windows容器。前者只能在Linux主机上运行，后者只能在Windows服务器上运行。在本书中，我们专门讨论Linux容器，但我们学到的大部分东西也适用于Windows容器。
- en: If you are interested in Windows containers, we strongly recommend the book *Docker
    on Windows, Second Edition*: [https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Windows容器感兴趣，我们强烈推荐阅读《Docker on Windows, Second Edition》这本书：[https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition)。
- en: Let's start by installing the Docker Toolbox on a macOS.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在macOS上安装Docker Toolbox开始。
- en: Installing Docker Toolbox on macOS
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装Docker Toolbox
- en: 'Follow these steps for installation:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new Terminal window and use Homebrew to install the toolbox:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口，并使用Homebrew安装工具箱：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see something like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似于这样的东西：
- en: '![](assets/f323a67a-9f10-4c81-935d-45dcc77c5e19.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f323a67a-9f10-4c81-935d-45dcc77c5e19.png)'
- en: Installing Docker Toolbox on macOS
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上安装Docker Toolbox
- en: 'To verify that Docker Toolbox has been installed successfully, try to access
    `docker-machine` and `docker-compose`, two tools that are part of the installation:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证Docker Toolbox是否已成功安装，请尝试访问`docker-machine`和`docker-compose`，这两个工具是安装的一部分：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Next, we will install Docker Toolbox on Windows.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在Windows上安装Docker Toolbox。
- en: Installing Docker Toolbox on Windows
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Docker Toolbox
- en: 'Open a new Powershell window in admin mode and use Chocolatey to install Docker
    Toolbox:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理员模式下打开一个新的Powershell窗口，并使用Chocolatey安装Docker Toolbox：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output should look similar to this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于这样：
- en: '![](assets/c3d8eb48-3017-4bd2-a27b-c89e7aad66f4.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3d8eb48-3017-4bd2-a27b-c89e7aad66f4.png)'
- en: Installing Docker Toolbox on Windows 10
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10上安装Docker Toolbox
- en: We will now be setting up Docker Toolbox.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将设置Docker Toolbox。
- en: Setting up Docker Toolbox
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Docker Toolbox
- en: 'Follow these steps for setup:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行设置：
- en: 'Let''s use `docker-machine` to set up our environment. First, we list all Docker-ready
    VMs we have currently defined on our system. If you have just installed Docker
    Toolbox, you should see the following output:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`docker-machine`来设置我们的环境。首先，我们列出当前在系统上定义的所有Docker-ready VM。如果您刚刚安装了Docker
    Toolbox，您应该会看到以下输出：
- en: '![](assets/ca24a687-1929-473d-9ba7-7e68294fea9f.png)List of all Docker-ready
    VMs'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ca24a687-1929-473d-9ba7-7e68294fea9f.png)所有Docker-ready VM的列表'
- en: 'OK, we can see that there is a single VM called `default` installed, but it
    is currently in the `STATE` of `stopped`. Let''s use `docker-machine` to start
    this VM so we can work with it:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，我们可以看到已经安装了一个名为`default`的单个VM，但它目前处于`stopped`的状态。让我们使用`docker-machine`来启动这个VM，这样我们就可以使用它了：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This produces the following output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](assets/4eb6cf4e-c51b-4946-8e4f-d140f2fafd9a.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4eb6cf4e-c51b-4946-8e4f-d140f2fafd9a.png)'
- en: Starting the default VM in Docker Toolbox
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Docker Toolbox中的默认VM
- en: 'If we now list the VMs again, we should see this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在再次列出VM，我们应该会看到这个：
- en: '![](assets/0adc5a3b-7c37-4ccc-a004-5b2cc76aabdb.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0adc5a3b-7c37-4ccc-a004-5b2cc76aabdb.png)'
- en: Listing the running VMs in Docker Toolbox
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 列出Docker Toolbox中正在运行的VM
- en: The IP address used might be different in your case, but it will definitely be in
    the `192.168.0.0/24` range. We can also see that the VM has Docker version `18.06.1-ce` installed.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的情况下使用的IP地址可能不同，但肯定会在`192.168.0.0/24`范围内。我们还可以看到VM安装了Docker版本`18.06.1-ce`。
- en: 'If, for some reason, you don''t have a default VM or you have accidentally
    deleted it, you can create it using the following command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果由于某种原因您没有默认的VM，或者意外删除了它，可以使用以下命令创建它：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will generate the following output:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '![](assets/0ab00ba7-5fd8-432f-a234-8ccd5ef4de10.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0ab00ba7-5fd8-432f-a234-8ccd5ef4de10.png)'
- en: Creating a new default VM in Docker Toolbox
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Toolbox中创建一个新的默认VM
- en: If you carefully analyze the preceding output, you will see that `docker-machine`
    automatically downloaded the newest ISO file for the VM from Docker. It realized
    that my current version was outdated and replaced it with version `v18.09.6`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仔细分析前面的输出，您会发现`docker-machine`自动从Docker下载了最新的VM ISO文件。它意识到我的当前版本已过时，并用版本`v18.09.6`替换了它。
- en: 'To see how to connect your Docker client to the Docker Engine running on this
    virtual machine, run the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看如何将Docker客户端连接到在此虚拟机上运行的Docker引擎，请运行以下命令：
- en: '[PRE31]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This outputs the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can execute the command listed on the last line in the preceding code snippet
    to configure our Docker CLI to use Docker running on the `default` VM:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以执行前面代码片段中最后一行中列出的命令，来配置我们的Docker CLI以使用在`default` VM上运行的Docker：
- en: '[PRE33]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And now we can execute the first Docker command:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以执行第一个Docker命令：
- en: '[PRE34]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This should result in the following output:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该产生以下输出：
- en: '![](assets/8072de88-4665-4b5a-b5a5-f3994515624b.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8072de88-4665-4b5a-b5a5-f3994515624b.png)'
- en: Output of docker version
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: docker version的输出
- en: We have two parts here, the client and the server part. The client is the CLI
    running directly on your macOS or Windows laptop, while the server part is running
    on the `default` VM in VirtualBox.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个部分，客户端和服务器部分。客户端是直接在您的macOS或Windows笔记本电脑上运行的CLI，而服务器部分在VirtualBox中的`default`
    VM上运行。
- en: 'Now, let''s try to run a container:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试运行一个容器：
- en: '[PRE35]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will produce the following output:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](assets/ba44f8ff-7ebe-4840-9466-a7a136e67152.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba44f8ff-7ebe-4840-9466-a7a136e67152.png)'
- en: The preceding output confirms that Docker Toolbox is working as expected and
    can run containers.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出证实了Docker Toolbox正在按预期工作并且可以运行容器。
- en: Docker Toolbox is a great addition even when you normally use Docker for Desktop
    for your development with Docker. Docker Toolbox allows you to create multiple
    Docker hosts (or VMs) in VirtualBox and connect them to a cluster, on top of which
    you can run Docker Swarm or Kubernetes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox是一个很好的补充，即使您通常使用Docker Desktop进行Docker开发。 Docker Toolbox允许您在VirtualBox中创建多个Docker主机（或VM），并将它们连接到集群，然后在其上运行Docker
    Swarm或Kubernetes。
- en: Installing Minikube
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Minikube
- en: If you cannot use Docker for Desktop or, for some reason, you only have access
    to an older version of the tool that does not yet support Kubernetes, then it
    is a good idea to install Minikube. Minikube provisions a single-node Kubernetes
    cluster on your workstation and is accessible through `kubectl`, which is the
    command-line tool used to work with Kubernetes.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法使用Docker Desktop，或者由于某种原因，您只能访问尚不支持Kubernetes的旧版本工具，则安装Minikube是一个好主意。
    Minikube在您的工作站上为单节点Kubernetes集群提供了支持，并且可以通过`kubectl`访问，这是用于处理Kubernetes的命令行工具。
- en: Installing Minikube on macOS and Windows
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS和Windows上安装Minikube
- en: To install Minikube for macOS or Windows, navigate to the following link: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装macOS或Windows的Minikube，请转到以下链接：[https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)。
- en: Follow the instructions carefully. If you have Docker Toolbox installed, then
    you already have a hypervisor on your system since the Docker Toolbox installer
    also installed VirtualBox. Otherwise, I recommend that you install VirtualBox
    first.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细遵循说明。如果您已安装Docker Toolbox，则系统上已经有一个hypervisor，因为Docker Toolbox安装程序还安装了VirtualBox。否则，我建议您先安装VirtualBox。
- en: If you have Docker for macOS or Windows installed, then you already have `kubectl` installed
    with it, so you can skip that step too. Otherwise, follow the instructions on
    the site.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装了macOS或Windows的Docker，则`kubectl`也已经安装了，因此您也可以跳过这一步。否则，请按照网站上的说明操作。
- en: Testing Minikube and kubectl
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Minikube和kubectl
- en: 'Once Minikube is successfully installed on your workstation, open a Terminal
    and test the installation. First, we need to start Minikube. Enter `minikube start` at
    the command line. This command may take a few minutes or so to complete. The output
    should look similar to the following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Minikube成功安装在您的工作站上，打开终端并测试安装。首先，我们需要启动Minikube。在命令行输入`minikube start`。这个命令可能需要几分钟来完成。输出应该类似于以下内容：
- en: '![](assets/918657bb-5dc5-4eca-8220-4139caa69112.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/918657bb-5dc5-4eca-8220-4139caa69112.png)'
- en: Starting MinikubeNote, your output may look slightly different. In my case, I
    am running Minikube on a Windows 10 Pro computer. On a Mac notifications are quite
    different, but this doesn't matter here.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Minikube注意，您的输出可能略有不同。在我的情况下，我正在Windows 10专业版计算机上运行Minikube。在Mac上，通知会有所不同，但这里并不重要。
- en: 'Now, enter `kubectl version` and hit *En**ter* to see something like the following
    screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入`kubectl version`并按*Enter*，看到类似以下截图的内容：
- en: '![](assets/b695efb9-10b2-4ee8-9877-020e89021230.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b695efb9-10b2-4ee8-9877-020e89021230.png)'
- en: Determining the version of the Kubernetes client and server
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 确定Kubernetes客户端和服务器的版本
- en: 'If the preceding command fails, for example, by timing out, then it could be
    that your `kubectl` is not configured for the right context. `kubectl` can be
    used to work with many different Kubernetes clusters. Each cluster is called a
    context. To find out which context `kubectl` is currently configured for, use
    the following command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的命令失败，例如超时，那么可能是因为您的`kubectl`没有配置正确的上下文。`kubectl`可以用来处理许多不同的Kubernetes集群。每个集群称为一个上下文。要找出`kubectl`当前配置的上下文，使用以下命令：
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The answer should be `minikube`, as shown in the preceding output. If this
    is not the case, use `kubectl config get-contexts` to list all contexts that are
    defined on your system and then set the current context to `minikube`, as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 答案应该是`minikube`，如前面的输出所示。如果不是这种情况，请使用`kubectl config get-contexts`列出系统上定义的所有上下文，然后将当前上下文设置为`minikube`，如下所示：
- en: '[PRE37]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The configuration for `kubectl`, where it stores the contexts, is normally found
    in `~/.kube/config`, but this can be overridden by defining an environment variable
    called `KUBECONFIG`. You might need to unset this variable if it is set on your
    computer.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`的配置，它存储上下文，通常可以在`~/.kube/config`中找到，但这可以通过定义一个名为`KUBECONFIG`的环境变量来覆盖。如果您的计算机上设置了这个变量，您可能需要取消设置。'
- en: For more in-depth information about how to configure and use Kubernetes contexts,
    consult the link at [https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何配置和使用Kubernetes上下文的更深入信息，请参考以下链接：[https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)。
- en: 'Assuming Minikube and `kubectl` work as expected, we can now use `kubectl` to
    get information about the Kubernetes cluster. Enter the following command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Minikube和`kubectl`按预期工作，我们现在可以使用`kubectl`获取有关Kubernetes集群的信息。输入以下命令：
- en: '[PRE38]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Evidently, we have a cluster of one node, which in my case has Kubernetes` v1.17.3`
    installed on it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们有一个节点的集群，在我的情况下，上面安装了`Kubernetes v1.17.3`。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we set up and configured our personal or working environment
    so that we can productively work with Docker containers. This equally applies
    for developers, DevOps, and operations engineers. In that context, we make sure
    that we use a good editor, have Docker for macOS or Docker for Windows installed,
    and can use `docker-machine` to create VMs in VirtualBox or Hyper-V, which we
    can then use to run and test containers.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设置和配置了我们的个人或工作环境，以便我们可以有效地使用Docker容器进行工作。这同样适用于开发人员、DevOps和运维工程师。在这种情况下，我们确保使用一个好的编辑器，安装了macOS的Docker或Windows的Docker，并且可以使用`docker-machine`在VirtualBox或Hyper-V中创建虚拟机，然后我们可以使用它来运行和测试容器。
- en: In the next chapter, we're going to learn all of the important facts about containers.
    For example, we will explore how we can run, stop, list, and delete containers,
    but more than that, we will also dive deep into the anatomy of containers.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关容器的所有重要知识。例如，我们将探讨如何运行、停止、列出和删除容器，但更重要的是，我们还将深入探讨容器的结构。
- en: Questions
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Based on your reading of this chapter, please answer the following questions:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您对本章的阅读，请回答以下问题：
- en: What is `docker-machine` used for? Name three to four scenarios.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker-machine`用于什么？列举三到四个场景。'
- en: With Docker for Windows, you can develop and run Linux containers.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Docker for Windows，您可以开发和运行Linux容器。
- en: A. True
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: A. True
- en: B. False
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: B. False
- en: Why are good scripting skills (such as Bash or PowerShell) essential for the
    productive use of containers?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么良好的脚本技能（如Bash或PowerShell）对于有效使用容器至关重要？
- en: Name three to four Linux distributions on which Docker is certified to run.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出三到四个Docker认证可在其上运行的Linux发行版。
- en: Name all of the Windows versions on which you can run Windows containers.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有可以运行Windows容器的Windows版本。
- en: Further reading
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Consider the following links for further reading:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下链接以获取更多阅读材料：
- en: '*Chocolatey - The Package Manager for Windows* at[https://chocolatey.org/](https://chocolatey.org/)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Chocolatey - Windows的软件包管理器*网址为[https://chocolatey.org/](https://chocolatey.org/)'
- en: '*Install Docker Toolbox on Windows:* [https://dockr.ly/2nuZUkU](https://dockr.ly/2nuZUkU)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Windows上安装Docker Toolbox:* [https://dockr.ly/2nuZUkU](https://dockr.ly/2nuZUkU)'
- en: '*Run Docker on Hyper-V with Docker Machine* at [http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Hyper-V上使用Docker Machine运行Docker，网址为[http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)
- en: '*Developing inside a Container* at [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在容器内开发*网址为[https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
