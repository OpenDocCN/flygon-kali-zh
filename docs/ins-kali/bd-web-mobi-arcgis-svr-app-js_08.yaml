- en: Chapter 8. Turning Addresses into Points and Points into Addresses
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。将地址转换为点和将点转换为地址
- en: Plotting addresses or points of interest on a map is one of the most commonly
    used functions in web mapping applications. To plot an address as a point on a
    map, you'll first need to get the latitude and longitude coordinates. Geocoding
    is the process of converting physical addresses into geographic coordinates. In
    order for your addresses to be added to the map, they must go through a geocoding
    process that assigns coordinates to the address. Geocoding is accomplished in
    ArcGIS Server through the use of a Locator service and is executed through the
    ArcGIS Server JavaScript API with the `Locator` class, which accesses these services
    to provide address-matching capabilities as well as reverse geocoding. As with
    the other tasks provided by ArcGIS Server, geocoding requires various input parameters,
    including an `Address` object to match addresses or a `Point` object in the case
    of reverse geocoding. This information is then submitted to the geocoding service
    and an `AddressCandidate` object containing the address matches is returned and
    can then be plotted on the map.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web地图应用程序中，绘制地址或感兴趣点在地图上是最常用的功能之一。要在地图上将地址绘制为一个点，首先需要获取纬度和经度坐标。地理编码是将物理地址转换为地理坐标的过程。为了将您的地址添加到地图上，它们必须经过一个将坐标分配给地址的地理编码过程。在ArcGIS
    Server中，地理编码是通过使用定位器服务来实现的，并通过ArcGIS Server JavaScript API中的`Locator`类来执行，该类访问这些服务以提供地址匹配功能以及反向地理编码。与ArcGIS
    Server提供的其他任务一样，地理编码需要各种输入参数，包括一个`Address`对象来匹配地址，或者在反向地理编码的情况下是一个`Point`对象。然后，这些信息被提交到地理编码服务，并返回一个包含地址匹配的`AddressCandidate`对象，然后可以在地图上绘制。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing geocoding
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍地理编码
- en: Geocoding with a Locator service in the ArcGIS API for JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ArcGIS API for JavaScript中使用定位器服务进行地理编码
- en: The geocoding process
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理编码过程
- en: The reverse geocoding process
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向地理编码过程
- en: Time to practice with the Locator service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习定位器服务的时间
- en: Introducing geocoding
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍地理编码
- en: 'We''ll first take a look at a geocoding example to give you a better feel of
    the process. If you have an address located at 150 Main St, you must first geocode
    the address before it can be plotted as a point on a map. If 150 Main St lies
    on a street segment with an address range of 100 to 200 Main St, the geocoding
    process would interpolate the location of 150 Main St. to be exactly halfway along
    this street segment. The geocoding software would then assign 150 Main St. to
    the geographic location that corresponds to the halfway point between 100 and
    200 Main St. Now that you have the coordinates for the address, you can plot it
    on the map. This process is described in the following diagram:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先来看一个地理编码的例子，以便让您更好地了解这个过程。如果您有一个位于Main St 150号的地址，您必须先对该地址进行地理编码，然后才能将其绘制为地图上的一个点。如果150
    Main St位于一个地址范围为100到200 Main St的街道段上，地理编码过程将会插值150 Main St的位置，使其正好位于这个街道段的中间。然后，地理编码软件将150
    Main St分配给对应于100和200 Main St之间中点的地理位置。现在您已经有了该地址的坐标，可以在地图上绘制它。这个过程在下图中描述：
- en: '![Introducing geocoding](graphics/7965_08_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍地理编码](graphics/7965_08_01.jpg)'
- en: The most common geocoding level is the street segment geocode, which assigns
    latitude/longitude coordinates based on known geocodes at the intersection of
    the block or street segment containing an address. This method of geocoding uses
    an interpolation process as described earlier. This method is the most accurate
    in urban areas with regularly spaced addresses. However, it does have problems
    accurately geocoding irregularly spaced addresses and addresses located in a cul
    de sac. The coordinates of rural areas are also notoriously less complete and
    this results in lower geocoding rates in those areas.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的地理编码级别是街道段地理编码，它根据已知的地理编码在包含地址的街区或街道段的交叉口上分配纬度/经度坐标。这种地理编码方法使用了前面描述的插值过程。这种方法在地址间隔规则的城市地区中最准确。然而，它在准确地地理编码间隔不规则的地址和位于死胡同中的地址时存在问题。农村地区的坐标也因为不完整而臭名昭著，这导致这些地区的地理编码率较低。
- en: Geocoding with a Locator service in the ArcGIS API for JavaScript
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在ArcGIS API for JavaScript中使用定位器服务进行地理编码
- en: An ArcGIS Server `Locator` service can perform geocoding and reverse geocoding.
    Using the ArcGIS Server API for JavaScript, you can submit an address to the `Locator`
    service and retrieve geographic coordinates for the address, which can then be
    plotted on the map. The following figure illustrates this process. An address,
    defined by a JSON object in JavaScript, is an input to a `Locator` object, which
    geocodes the address and returns the results in an `AddressCandidate` object,
    which can then be displayed as a point on your map. This pattern is the same as
    the other tasks we saw in previous chapters, where an input object (the `Address`
    object) provides input parameters to the task (`Locator`), which submits the job
    to ArcGIS Server. A result object (`AddressCandidate`) is then returned to a callback
    function, which processes the returned data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server的`Locator`服务可以执行地理编码和反向地理编码。使用ArcGIS Server API for JavaScript，您可以将地址提交给`Locator`服务，并检索地址的地理坐标，然后可以在地图上绘制。以下图示了这个过程。一个由JavaScript中的JSON对象定义的地址是`Locator`对象的输入，它对地址进行地理编码，并将结果返回到一个`AddressCandidate`对象中，然后可以在地图上显示为一个点。这种模式与我们在前几章中看到的其他任务相同，其中一个输入对象（`Address`对象）为任务（`Locator`）提供输入参数，该任务将作业提交给ArcGIS
    Server。然后，结果对象（`AddressCandidate`）被返回到一个回调函数中，该函数处理返回的数据。
- en: '![Geocoding with a Locator service in the ArcGIS API for JavaScript](graphics/7965_08_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![在ArcGIS API for JavaScript中使用定位器服务进行地理编码](graphics/7965_08_02.jpg)'
- en: Input parameter objects
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入参数对象
- en: The input parameter object for the `Locator` task will take the form of either
    a JSON address object for geocoding or a `Point` object for reverse geocoding.
    From a programmatic standpoint, the creation of these objects differs. We'll discuss
    each of the objects in the next section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locator`任务的输入参数对象将采用地理编码的JSON地址对象或反向地理编码的`Point`对象的形式。从编程的角度来看，这些对象的创建方式不同。我们将在下一节讨论每个对象。'
- en: Input JSON address object
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入JSON地址对象
- en: A `Locator` service can accept either a `Point` (for reverse geocoding) or a
    `JSON` object that represents an address. The JSON object defines an address that
    is formatted in the form of an object, as seen in the following code example.
    The address is defined as a series of name/value pairs defined within brackets,
    which are defined within your JavaScript code. Individual name/value pairs are
    defined for the street, city, state, and zip code in this case, but the name/value
    pairs will vary depending upon the type of geocoding service you've defined in
    your locator.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locator`服务可以接受`Point`（用于反向地理编码）或代表地址的`JSON`对象。JSON对象定义了一个以对象形式格式化的地址，如下面的代码示例所示。该地址被定义为一系列在括号内定义的名称/值对，在这种情况下，名称/值对为街道、城市、州和邮政编码，但名称/值对将根据您在定位器中定义的地理编码服务的类型而变化。'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Input Point object
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入Point对象
- en: For reverse geocoding, the input to a `Locator` service takes the form of a
    `esri/geometry/Point` object, which is often defined through a user click on the
    map or perhaps through application logic. The `Point` object is returned through
    a `Map.click` event, which can be retrieved and used as the input object to the
    `Locator` service.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于反向地理编码，`Locator`服务的输入采用`esri/geometry/Point`对象的形式，通常是通过用户在地图上的点击或应用程序逻辑来定义。`Point`对象通过`Map.click`事件返回，可以被检索并用作`Locator`服务的输入对象。
- en: The Locator object
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位器对象
- en: 'The `Locator` class contains methods and events that can be used to execute
    a geocode or reverse geocode operation using the input `Point` or `Address` object.
    `Locator` needs a URL pointer to your geocoding service, as defined within ArcGIS
    Server. A code example showing how to create a new instance of a `Locator` object
    is presented as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locator`类包含可用于使用输入`Point`或`Address`对象执行地理编码或反向地理编码操作的方法和事件。`Locator`需要一个指向您在ArcGIS
    Server中定义的地理编码服务的URL指针。下面是一个代码示例，展示了如何创建`Locator`对象的新实例：'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once a new instance of a `Locator` class has been created, you can call the
    `addressToLocations()` method to geocode an address or the `locationToAddress()`
    method to perform a reverse geocode. These methods result in an event that is
    fired at the completion of the operation. In the case of an address geocode, the
    `address-to-locations-complete()` event fires, and the `on-location-to-address-complete()`
    event fires on the completion of a reverse geocode operation. In either case,
    an `AddressCandidate` object is then returned to the event.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了`Locator`类的新实例，就可以调用`addressToLocations()`方法对地址进行地理编码，或者调用`locationToAddress()`方法执行反向地理编码。这些方法会在操作完成时触发一个事件。在地址地理编码的情况下，会触发`address-to-locations-complete()`事件，在反向地理编码操作完成时会触发`on-location-to-address-complete()`事件。在任何情况下，然后会将`AddressCandidate`对象返回给事件。
- en: The AddressCandidate object
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AddressCandidate对象
- en: An `AddressCandidate` object is returned as a result of a `Locator` operation.
    Various properties are stored in this object, including the address, attributes,
    location, and score. The attributes property contains name/value pairs of field
    names and values. The location is, as the name would suggest, the x and y coordinate
    of the candidate address. The score property is a numeric value between 0 and
    100 that indicates the quality of the address returned with a higher score, representing
    a better match. Multiple addresses can be stored in this object as an array of
    candidates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddressCandidate`对象是`Locator`操作的结果。该对象中存储了各种属性，包括地址、属性、位置和分数。属性属性包含字段名称和值的名称/值对。位置是候选地址的x和y坐标。分数属性是一个介于0和100之间的数值，表示地址的质量，得分越高，表示匹配度越好。多个地址可以存储在该对象中作为候选对象数组。'
- en: Now, we're going to take a closer look at the Locator methods used to submit
    addresses and points. The `Locator.addressToLocations()` method sends a request
    to geocode a single address. An input address object is created and used as a
    parameter in the `addressToLocations()` method found on a `Locator` object. The
    results of the geocoding operation are returned in an `AddressCandidate` object.
    The address can then be plotted on the map as a graphic.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更仔细地查看用于提交地址和点的定位器方法。`Locator.addressToLocations()`方法发送一个请求来对单个地址进行地理编码。创建一个输入地址对象，并将其用作`Locator`对象上找到的`addressToLocations()`方法的参数。地理编码操作的结果以`AddressCandidate`对象的形式返回。然后可以将地址作为图形绘制在地图上。
- en: Reverse geocoding can also be performed by a `Locator` object through the `locationToAddress()`
    method. A `Point` object, created either by an end user click on the map or through
    application logic, is created and passed as a parameter into the `locationToAddress()`
    method. A second parameter is also passed into the method, indicating a distance
    in meters from the point where a matching address should be found. As with the
    `addressToLocations()` method, an `AddressCandidate` object is returned from the
    locator and contains an address, if one was found.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 反向地理编码也可以通过`Locator`对象的`locationToAddress()`方法执行。通过地图上的用户点击或应用程序逻辑创建的`Point`对象被创建并作为参数传递到`locationToAddress()`方法中。还会传递第二个参数到该方法中，指示应从距离点多少米的地方找到匹配的地址。与`addressToLocations()`方法一样，`Locator`返回一个`AddressCandidate`对象，并包含一个地址（如果找到的话）。
- en: The geocoding process
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理编码过程
- en: 'We can summarize the geocoding process with the ArcGIS API for JavaScript.
    A `Locator` object is created through a reference to a geocoding service on an
    ArcGIS Server instance. An input address in the form of a JSON object is then
    created and submitted to the `Locator` object using the `addressToLocations()`
    method. This returns one or more `AddressCandidate` objects, which can then be
    plotted on the map. Take a look at the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用ArcGIS API for JavaScript总结地理编码过程。通过引用ArcGIS Server实例上的地理编码服务，创建了一个`Locator`对象。然后，以JSON对象形式创建的输入地址通过`addressToLocations()`方法提交给`Locator`对象。这将返回一个或多个`AddressCandidate`对象，然后可以在地图上绘制。看一下下面的图表：
- en: '![The geocoding process](graphics/7965_08_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![地理编码过程](graphics/7965_08_03.jpg)'
- en: The reverse geocoding process
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反向地理编码过程
- en: Let's review the reverse geocoding process as well. This process also uses a
    `Locator` object, which references a URL to a geocoding service. A `Point` geometry
    object is created as a result of either a location that has been clicked on the
    map or some other application-generated event. This `Point` object is then submitted
    to `Locator` through the `locationToAddress()` method, along with a distance value.
    The `distance` property, supplied in meters, determines the radius in which `Locator`
    will attempt to find an address.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也来回顾一下反向地理编码过程。这个过程也使用了一个`Locator`对象，它引用了一个地理编码服务的URL。`Point`几何对象是通过在地图上点击位置或其他应用程序生成的事件而创建的。然后，通过`locationToAddress()`方法将这个`Point`对象与一个距离值一起提交给`Locator`。以米为单位提供的`distance`属性确定了`Locator`将尝试在其中找到地址的半径。
- en: 'If an address is found within the radius, an `AddressCandidate` object is created
    and can be decoded as an address. Take a look at the following diagram:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在半径范围内找到地址，则会创建一个`AddressCandidate`对象，并且可以将其解码为地址。看一下下面的图表：
- en: '![The reverse geocoding process](graphics/7965_08_04.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![反向地理编码过程](graphics/7965_08_04.jpg)'
- en: Time to practice with the Locator service
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习使用Locator服务的时间
- en: 'In this exercise, you will learn how to use the `Locator` class to geocode
    addresses and overlay the results on top of a basemap provided by ArcGIS Online.
    Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)
    and perform the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将学习如何使用`Locator`类对地址进行地理编码，并将结果叠加在ArcGIS Online提供的底图上。打开JavaScript沙箱，网址为[http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)，然后执行以下步骤：
- en: In your `ArcGISJavaScriptAPI` folder, open the file called `geocode_begin.html`
    in a text editor. I use Notepad++, but you can use whatever text editor you are
    most comfortable with. Some of the code for this exercise has already been written
    for you so that you can focus on the geocoding functionality.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`ArcGISJavaScriptAPI`文件夹中，用文本编辑器打开名为`geocode_begin.html`的文件。我使用的是Notepad++，但您可以使用您最熟悉的任何文本编辑器。本练习的一些代码已经为您编写，这样您就可以专注于地理编码功能。
- en: Copy and paste the code in the file so that it completely replaces the code
    currently in Sandbox.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴文件中的代码，以完全替换沙箱中当前的代码。
- en: 'Add the following references for the objects that we''ll use in this exercise:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下引用，用于本练习中将要使用的对象：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now inside the `require()` function, we are going to initialize the `locator`
    variable and then register it to `Locator`.`address-to-locations-complete`. Add
    the following two lines of code just after the code block used to create the `Map`
    object:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`require()`函数中，我们将初始化`locator`变量，然后将其注册到`Locator`.`address-to-locations-complete`。在用于创建`Map`对象的代码块之后，添加以下两行代码：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The constructor for `Locator` must be a valid URL pointer to a locator service.
    In this case, we are using the World Geocoding Service. We've also registered
    the `Locator.address-to-locations-complete` event for the `Locator` object. This
    event fires when the geocoding has been completed and in this case, will call
    the `showResults()` function specified as a parameter to `on()`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locator`的构造函数必须是一个有效的URL指针，指向一个定位器服务。在这种情况下，我们使用的是World Geocoding Service。我们还为`Locator`对象注册了`Locator.address-to-locations-complete`事件。当地理编码完成时，此事件将触发，并在这种情况下调用作为`on()`参数指定的`showResults()`函数。'
- en: 'Let''s also register the `click` event for the button that will trigger the
    geocoding by adding the following line of code just after the two lines that you
    just created. This will trigger the execution of a JavaScript function called
    `locate()`, which we''ll create in the next step:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们还为将触发地理编码的按钮注册`click`事件，只需在刚刚创建的两行代码之后添加以下代码。这将触发一个名为`locate()`的JavaScript函数的执行，我们将在下一步中创建：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this step, you''re going to create a `locate()` function, which will perform
    several tasks, including clearing any existing graphics, creating an `Address`
    JSON object from the input textbox on the web page, defining several options,
    and calling the `Locator.addressToLocations()` method. Add the code block just
    after the last line of code you entered, shown as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，您将创建一个`locate()`函数，该函数将执行多项任务，包括清除任何现有图形，从网页上的输入文本框创建一个`Address` JSON对象，定义几个选项，并调用`Locator.addressToLocations()`方法。在您输入的最后一行代码之后，添加以下代码块，如下所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first line of code in this function clears any existing graphics for the
    map. This is needed when the user is entering more than one address in a session.
    Next, we will create a variable called `address`, which is a JSON object that
    contains the address entered by the user. We then set the output spatial reference
    and create an `options` variable that contains the address and output fields as
    a JSON object. Finally, we call the `Locator.addressToLocations()` method and
    pass in the `options` variable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数中的第一行代码清除了地图上的任何现有图形。当用户在一个会话中输入多个地址时，这是必需的。接下来，我们将创建一个名为`address`的变量，它是一个包含用户输入地址的JSON对象。然后，我们设置输出空间参考，并创建一个包含地址和输出字段的`options`变量，作为JSON对象。最后，我们调用`Locator.addressToLocations()`方法，并传入`options`变量。
- en: 'The `showResults()` function will take the results returned by the `Locator`
    service and plot them on the map. In this case, we''re going to display only an
    address with a score of greater than 80 on a scale of 0 to 100\. Part of the `showResults()`
    function has already been written for you. Create a new variable to hold the `AddressCandidate`
    object by adding the highlighted line of code as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`showResults()`函数将接收`Locator`服务返回的结果，并在地图上绘制它们。在这种情况下，我们将仅显示得分在0到100之间的地址大于80的地址。`showResults()`函数的一部分已经为您编写了。通过添加以下突出显示的代码行来创建一个新变量来保存`AddressCandidate`对象：'
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just after the line of code that creates the `geom` variable, start a loop
    that will loop through each of the addresses that are returned from `Locator`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`geom`变量的代码行后，开始一个循环，该循环将遍历从`Locator`返回的每个地址：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Start an `if` statement that checks the `AddressCandidate.score` property for
    a value greater than 80\. We only want to display addresses with a high match
    value:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个`if`语句，检查`AddressCandidate.score`属性是否大于80的值。我们只想显示匹配值高的地址：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside the `if` block, create a JSON variable with new attributes, which contain
    the address, score, and field values from the `AddressCandidate` object. In addition
    to this, the `location` property will be saved to the `geom` variable:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if`块内，创建一个包含地址、得分和`AddressCandidate`对象的字段值的新属性的JSON变量。除此之外，`location`属性将保存到`geom`变量中：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a new `Graphic` object using the `geometry`, `symbol`, `attributes`,
    and `infoTemplate` variables that you either created earlier or were created for
    you and add them to the `GraphicsLayer`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您之前创建的或为您创建的`geometry`、`symbol`、`attributes`和`infoTemplate`变量创建一个新的`Graphic`对象，并将它们添加到`GraphicsLayer`：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add a text symbol for the location(s):'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为位置添加文本符号：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Break out of the loop after one address with a score of greater than 80 has
    been found. Many addresses will have more than one match, which can be confusing.
    Take a look at the following code snippet:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在找到一个得分大于80的地址后跳出循环。许多地址将有多个匹配项，这可能会令人困惑。看一下以下代码片段：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You may want to double check your code by examining the solution file `geocode_end.html`
    located in `your ArcGISJavaScriptAPI/solution` folder.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能需要通过检查位于`your ArcGISJavaScriptAPI/solution`文件夹中的解决方案文件`geocode_end.html`来仔细检查您的代码。
- en: When you click on the **Run** button, you should see the following map. If not,
    you may need to recheck your code for accuracy.![Time to practice with the Locator
    service](graphics/7965_08_05.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您单击**运行**按钮时，您应该看到以下地图。如果没有，请检查您的代码是否准确。![Time to practice with the Locator
    service](graphics/7965_08_05.jpg)
- en: Enter an address or accept the default and click on **Locate**, as shown in
    the following screenshot:![Time to practice with the Locator service](graphics/7965_08_06.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个地址或接受默认值，然后单击**定位**，如下面的屏幕截图所示：![Time to practice with the Locator service](graphics/7965_08_06.jpg)
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: An ArcGIS Server `Locator` service can perform geocoding and reverse geocoding.
    Using the ArcGIS API for JavaScript, you can submit an address to the `Locator`
    service and retrieve geographic coordinates for the address, which can then be
    plotted on a map. An address, defined by a JSON object in JavaScript, is an input
    to a `Locator` object, which geocodes the address and returns the results in an
    `AddressCandidate` object that can then be displayed as a point on your map. This
    pattern is the same as the other tasks we've seen in previous chapters, where
    an input object (the `Address` object) provides input parameters to the task (`Locator`),
    which submits the job to ArcGIS Server. A result object (`AddressCandidate`) is
    then returned to a callback function, which processes the returned data. In the
    next chapter, you will learn how to use various Network Analyst tasks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server的`Locator`服务可以执行地理编码和反向地理编码。使用ArcGIS API for JavaScript，您可以将地址提交给`Locator`服务，并检索地址的地理坐标，然后可以在地图上绘制出来。地址由JavaScript中的JSON对象定义，是`Locator`对象的输入，`Locator`对象对地址进行地理编码，并将结果返回为`AddressCandidate`对象，然后可以将其显示为地图上的点。这种模式与我们在前几章中看到的其他任务相同，其中输入对象（`Address`对象）为任务（`Locator`）提供输入参数，任务将作业提交给ArcGIS
    Server。然后将结果对象（`AddressCandidate`）返回给回调函数，该函数处理返回的数据。在下一章中，您将学习如何使用各种网络分析任务。
