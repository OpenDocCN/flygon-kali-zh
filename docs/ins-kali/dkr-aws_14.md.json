["```\nDjango==2.0\ndjango-cors-headers==2.1.0\ndjangorestframework==3.7.3\nmysql-connector-python==8.0.11\npytz==2017.3\nuwsgi==2.0.17\naws-xray-sdk\n```", "```\nfrom .settings import *\n...\n...\nSTATIC_ROOT = os.environ.get('STATIC_ROOT', '/public/static')\nMEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/public/media')\n\nMIDDLEWARE.insert(0,'aws_xray_sdk.ext.django.middleware.XRayMiddleware')\n```", "```\n\"\"\"\nWSGI config for todobackend project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.0/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"todobackend.settings\")\n\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.core import patch_all\n\n# Required to avoid SegmentNameMissingException errors\nxray_recorder.configure(service=\"todobackend\")\n\npatch_all()\n\napplication = get_wsgi_application()\n```", "```\nFROM amazonlinux\nRUN yum install -y unzip\nRUN curl -o daemon.zip https://s3.dualstack.us-east-2.amazonaws.com/aws-xray-assets.us-east-2/xray-daemon/aws-xray-daemon-linux-2.x.zip\nRUN unzip daemon.zip && cp xray /usr/bin/xray\n\nENTRYPOINT [\"/usr/bin/xray\", \"-b\", \"0.0.0.0:2000\"]\nEXPOSE 2000/udp\n```", "```\n> docker build -t xray -f Dockerfile.xray .\nSending build context to Docker daemon 474.1kB\nStep 1/6 : FROM amazonlinux\n ---> 81bb3e78db3d\nStep 2/6 : RUN yum install -y unzip\n ---> Running in 35aca63a625e\nLoaded plugins: ovl, priorities\nResolving Dependencies\n...\n...\nStep 6/6 : EXPOSE 2000/udp\n ---> Running in 042542d22644\nRemoving intermediate container 042542d22644\n ---> 63b422e40099\nSuccessfully built 63b422e40099\nSuccessfully tagged xray:latest\n```", "```\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: ECR Resources\n\nResources:\n  XrayRepository:\n Type: AWS::ECR::Repository\n Properties:\n RepositoryName: docker-in-aws/xray\n  CodebuildRepository:\n    Type: AWS::ECR::Repository\n  ...\n  ...\n```", "```\n> export AWS_PROFILE=docker-in-aws\n> aws cloudformation deploy --template-file ecr.yml --stack-name ecr-repositories\nEnter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - ecr-repositories\n  ...\n  ...\n```", "```\n> eval $(aws ecr get-login --no-include-email)\nLogin Succeeded\n> docker tag xray 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray\n> docker push 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray\nThe push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray]\nc44926e8470e: Pushed\n1c9da599a308: Pushed\n9d486dac1b0b: Pushed\n0c1715974ca1: Pushed\nlatest: digest: sha256:01d9b6982ce3443009c7f07babb89b134c9d32ea6f1fc380cb89ce5639c33938 size: 1163\n```", "```\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: X-Ray Daemon\n\nResources:\n  ApplicationServiceDiscoveryNamespace:\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\n    Properties:\n      Name: services.dockerinaws.org.\n      Description: services.dockerinaws.org namespace\n      Vpc: vpc-f8233a80\n```", "```\n> aws cloudformation deploy --template-file xray.yml --stack-name xray-daemon\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - xray-daemon\n> aws servicediscovery list-namespaces\n{\n    \"Namespaces\": [\n        {\n            \"Id\": \"ns-lgd774j6s2cmxwq3\",\n            \"Arn\": \"arn:aws:servicediscovery:us-east-1:385605022855:namespace/ns-lgd774j6s2cmxwq3\",\n            \"Name\": \"services.dockerinaws.org\",\n            \"Type\": \"DNS_PRIVATE\"\n        }\n    ]\n}\n> aws route53 list-hosted-zones --query HostedZones[].Name --output table\n-------------------------------\n| ListHostedZones             |\n+-----------------------------+\n| services.dockerinaws.org.   |\n+-----------------------------+\n```", "```\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: X-Ray Daemon\n\nResources:\n  ApplicationServiceDiscoveryService:\n Type: AWS::ServiceDiscovery::Service\n Properties:\n Name: xray\n Description: xray service \n DnsConfig: \n NamespaceId: !Ref ApplicationServiceDiscoveryNamespace\n DnsRecords:\n - Type: A\n TTL: 60\n HealthCheckCustomConfig:\n FailureThreshold: 1\n  ApplicationServiceDiscoveryNamespace:\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\n    Properties:\n      Name: services.dockerinaws.org.\n      Description: services.dockerinaws.org namespace\n      Vpc: vpc-f8233a80\n```", "```\n> aws cloudformation deploy --template-file xray.yml --stack-name xray-daemon\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - xray-daemon\n> aws servicediscovery list-services\n{\n    \"Services\": [\n        {\n            \"Id\": \"srv-wkdxwh4pzo7ea7w3\",\n            \"Arn\": \"arn:aws:servicediscovery:us-east-1:385605022855:service/srv-wkdxwh4pzo7ea7w3\",\n            \"Name\": \"xray\",\n            \"Description\": \"xray service\"\n        }\n    ]\n}\n```", "```\n...\n...\nResources:\n  ApplicationTaskDefinition:\n Type: AWS::ECS::TaskDefinition\n Properties:\n Family: !Sub ${AWS::StackName}-task-definition\n NetworkMode: awsvpc\n ExecutionRoleArn: !Sub ${ApplicationTaskExecutionRole.Arn}\n TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}\n Cpu: 256\n Memory: 512\n RequiresCompatibilities:\n - FARGATE\n ContainerDefinitions:\n - Name: xray\n Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/xray\n Command:\n - -o\n LogConfiguration:\n LogDriver: awslogs\n Options:\n awslogs-group: !Sub /${AWS::StackName}/ecs/xray\n awslogs-region: !Ref AWS::Region\n awslogs-stream-prefix: docker\n PortMappings:\n - ContainerPort: 2000\n Protocol: udp\n Environment:\n - Name: AWS_REGION\n Value: !Ref AWS::Region\n  ApplicationLogGroup:\n Type: AWS::Logs::LogGroup\n DeletionPolicy: Delete\n Properties:\n LogGroupName: !Sub /${AWS::StackName}/ecs/xray\n RetentionInDays: 7\n  ApplicationServiceDiscoveryService:\n    Type: AWS::ServiceDiscovery::Service\n  ...\n  ...\n```", "```\n...\n...\nResources:\n  ApplicationTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ecs-tasks.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Policies:\n        - PolicyName: EcsTaskExecutionRole\n          PolicyDocument:\n            Statement:\n              - Sid: EcrPermissions\n                Effect: Allow\n                Action:\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:BatchGetImage\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:GetAuthorizationToken\n                Resource: \"*\"\n              - Sid: CloudwatchLogsPermissions\n                Effect: Allow\n                Action:\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Resource: !Sub ${ApplicationLogGroup.Arn}\n  ApplicationTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n  ...\n  ...\n```", "```\nResources:\n ApplicationTaskRole:\n Type: AWS::IAM::Role\n Properties:\n AssumeRolePolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Effect: Allow\n Principal:\n Service:\n - ecs-tasks.amazonaws.com\n Action:\n - sts:AssumeRole\n Policies:\n - PolicyName: EcsTaskRole\n PolicyDocument:\n Statement:\n - Effect: Allow\n Action:\n - xray:PutTraceSegments\n - xray:PutTelemetryRecords\n Resource: \"*\"    ApplicationTaskExecutionRole:\n    Type: AWS::IAM::Role\n  ...\n  ...\n```", "```\n...\n...\nResources:\n ApplicationCluster:\n Type: AWS::ECS::Cluster\n Properties:\n ClusterName: !Sub ${AWS::StackName}-cluster\n ApplicationService:\n Type: AWS::ECS::Service\n DependsOn:\n - ApplicationLogGroup\n Properties:\n ServiceName: !Sub ${AWS::StackName}-application-service\n Cluster: !Ref ApplicationCluster\n TaskDefinition: !Ref ApplicationTaskDefinition\n DesiredCount: 2\n LaunchType: FARGATE\n NetworkConfiguration:\n AwsvpcConfiguration:\n AssignPublicIp: ENABLED\n SecurityGroups:\n - !Ref ApplicationSecurityGroup\n Subnets:\n - subnet-a5d3ecee\n - subnet-324e246f\n DeploymentConfiguration:\n MinimumHealthyPercent: 100\n MaximumPercent: 200\n ServiceRegistries:\n - RegistryArn: !Sub ${ApplicationServiceDiscoveryService.Arn}\n  ApplicationTaskRole:\n    Type: AWS::IAM::Role\n  ...\n  ...\n```", "```\n...\n...\nResources:\n  ApplicationSecurityGroup:\n Type: AWS::EC2::SecurityGroup\n Properties:\n VpcId: vpc-f8233a80\n GroupDescription: !Sub ${AWS::StackName} Application Security Group\n SecurityGroupIngress:\n - IpProtocol: udp\n FromPort: 2000\n ToPort: 2000\n CidrIp: 172.31.0.0/16\n SecurityGroupEgress:\n - IpProtocol: tcp\n FromPort: 80\n ToPort: 80\n CidrIp: 0.0.0.0/0\n - IpProtocol: tcp\n FromPort: 443\n ToPort: 443\n CidrIp: 0.0.0.0/0\n - IpProtocol: udp\n FromPort: 53\n ToPort: 53\n CidrIp: 0.0.0.0/0\n Tags:\n - Key: Name\n Value: !Sub ${AWS::StackName}-ApplicationSecurityGroup\n  ApplicationCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${AWS::StackName}-cluster\n  ApplicationService:\n    Type: AWS::ECS::Service\n  ...\n  ...\n```", "```\n> aws cloudformation deploy --template-file xray.yml --stack-name xray-daemon \\\n --capabilities CAPABILITY_NAMED_IAM\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - xray-daemon\n```", "```\n...\n...\nResources:\n  ...\n  ...\n  ApplicationAutoscalingSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: !Sub ${AWS::StackName} Application Autoscaling Security Group\n      VpcId: !Ref VpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n      SecurityGroupEgress:\n - IpProtocol: udp\n FromPort: 2000\n ToPort: 2000\n CidrIp: 172.31.0.0/16\n        - IpProtocol: udp\n          FromPort: 53\n          ToPort: 53\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: 0.0.0.0/0\n...\n...\n```", "```\n...\n...\nResources:\n  ...\n  ...\n  ApplicationAutoscalingSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n    ...\n    ...\n      ContainerDefinitions:\n        - Name: todobackend\n          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}\n          MemoryReservation: 395\n          Cpu: 245\n          MountPoints:\n            - SourceVolume: public\n              ContainerPath: /public\n          Environment:\n            - Name: DJANGO_SETTINGS_MODULE\n              Value: todobackend.settings_release\n            - Name: MYSQL_HOST\n              Value: !Sub ${ApplicationDatabase.Endpoint.Address}\n            - Name: MYSQL_USER\n              Value: todobackend\n            - Name: MYSQL_DATABASE\n              Value: todobackend\n            - Name: SECRETS\n              Value: todobackend/credentials\n            - Name: AWS_DEFAULT_REGION\n              Value: !Ref AWS::Region\n            - Name: AWS_XRAY_DAEMON_ADDRESS\n Value: xray.services.dockerinaws.org:2000\n...\n...\n```"]