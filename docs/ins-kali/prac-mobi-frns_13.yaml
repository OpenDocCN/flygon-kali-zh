- en: Android App Analysis, Malware, and Reverse Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android应用程序分析、恶意软件和逆向工程
- en: Third-party applications are commonly used by smartphone users. Android users
    download and install several apps from app stores such as Google Play. During
    forensic investigations, it is often helpful to perform an analysis of these apps
    to retrieve valuable data and to detect any malware. For instance, a photo vault
    app might lock sensitive images present on a device. Hence, it would be of great
    significance to have the knowledge to identify the passcode for the photo vault
    app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机用户通常使用第三方应用程序。Android用户从Google Play等应用商店下载并安装了多个应用程序。在取证调查中，对这些应用程序进行分析以检索有价值的数据并检测恶意软件通常是有帮助的。例如，照片保险库应用程序可能锁定设备上存在的敏感图像。因此，了解如何识别照片保险库应用程序的密码非常重要。
- en: Also, apps such as Facebook, WhatsApp, Skype, and so on are widely used these
    days, and they are often the source of valuable data that aids in cracking a case.
    Hence, it is important to know what kind of data these apps store and the location
    of this data. While the data extraction and data recovery techniques we discussed
    in earlier chapters provide access to valuable data, app analysis helps us gain
    information about the specifics of an application, such as preferences and permissions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如今广泛使用的应用程序，如Facebook、WhatsApp、Skype等，通常是有价值数据的来源。因此，了解这些应用程序存储的数据类型和数据的位置非常重要。虽然我们在之前的章节中讨论的数据提取和数据恢复技术提供了对有价值数据的访问，但应用程序分析帮助我们获取有关应用程序具体信息的信息，如偏好和权限。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Analyzing widely used Android apps to retrieve valuable data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析广泛使用的Android应用程序以检索有价值的数据
- en: Techniques to reverse engineer an Android application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆向工程Android应用程序的技术
- en: Android malware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android恶意软件
- en: Analyzing widely used Android apps to retrieve valuable data
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析广泛使用的Android应用程序以检索有价值的数据
- en: On Android, everything the user interacts with is an application. While some
    apps are preinstalled by the device manufacturer, others are downloaded and installed
    by the user. For example, even routine functions, such as contacts, calls, SMS,
    and so on, are performed through their respective apps. Thus, Android app analysis
    is crucial during the course of an investigation. Several third-party apps, such
    as WhatsApp, Facebook, Skype, Chrome browser, and so on, are used widely, and
    they handle a lot of valuable information. Depending on the type of application,
    most of these apps store sensitive information on the device's internal memory
    or SD card. Analyzing them may provide information about the location details
    of the user, their communication with others, and more. Using the forensic techniques
    we described earlier, it is possible to get access to the data stored by these
    applications. However, you, as a forensic examiner, need to develop the necessary
    skills to convert the available data into useful data. This is achieved when you
    have a comprehensive understanding of how the application handles data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，用户与之交互的一切都是应用程序。虽然一些应用是由设备制造商预装的，但其他应用是由用户下载和安装的。例如，即使是常规功能，如联系人、通话、短信等，也是通过各自的应用程序执行的。因此，在调查过程中进行Android应用程序分析至关重要。一些第三方应用程序，如WhatsApp、Facebook、Skype、Chrome浏览器等，被广泛使用，并处理大量有价值的信息。根据应用程序的类型，这些应用程序中的大多数存储敏感信息在设备的内部存储器或SD卡上。分析它们可能提供有关用户位置细节、与他人的通信等信息。使用我们之前描述的取证技术，可以访问这些应用程序存储的数据。然而，作为取证人员，您需要发展必要的技能，将可用数据转换为有用的数据。当您全面了解应用程序如何处理数据时，就可以实现这一点。
- en: As we discussed in previous chapters, all applications store their data in the
    `/data/data` folder by default. Apps also store certain other data on the SD card,
    if they want to, by asking permission at the time of installation. Information
    about applications present on the device can be gathered by inspecting the contents
    of the `/data/data` folder, but this is not straightforward as it requires analyzing
    each individual app folder under this path. As an alternative, you can inspect
    the `packages.list` file present under `/data/system`. This file contains information
    about all the apps, along with their package names and data paths.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中讨论的那样，所有应用程序默认将其数据存储在`/data/data`文件夹中。应用程序还可以在SD卡上存储某些其他数据，如果它们在安装时请求权限的话。可以通过检查`/data/data`文件夹的内容来收集设备上存在的应用程序的信息，但这并不直接，因为它需要分析该路径下的每个单独的应用程序文件夹。作为替代方案，您可以检查`/data/system`下的`packages.list`文件。该文件包含有关所有应用程序的信息，以及它们的包名称和数据路径。
- en: 'This can be performed using the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令执行此操作：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the output of the preceding command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '![](img/07bd4eb4-20af-4cfc-9003-e3219e2aa2b2.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07bd4eb4-20af-4cfc-9003-e3219e2aa2b2.png)'
- en: Content of the packages.list file
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: packages.list文件的内容
- en: Now, let's look specifically at some third-party apps that are widely used and
    handle valuable data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们具体看一些广泛使用并处理有价值数据的第三方应用程序。
- en: The following apps are only being covered to make you familiar with the kind
    of data that can be extracted and the possible locations where the data can be
    obtained. You will need to take appropriate permissions and should abide by the
    legal rules before performing these tasks on a device. As we explained in [Chapter
    8](b1621e6e-80a3-495e-a288-c8db601149f8.xhtml), *Android Forensic Setup and Pre-Data
    Extraction Techniques*, the following techniques only work after the device has
    been rooted.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序仅被覆盖，以使您熟悉可以提取的数据类型以及可能获取数据的位置。在对设备执行这些任务之前，您需要获得适当的权限，并应遵守法律规定。正如我们在[第8章](b1621e6e-80a3-495e-a288-c8db601149f8.xhtml)中所解释的那样，*Android取证设置和数据提取前技术*，以下技术仅在设备被root后才能使用。
- en: Facebook Android app analysis
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facebook Android应用程序分析
- en: 'The Facebook Android app is one of the most widely used social networking applications.
    It stores its information in the `/data/data` folder, within the `com.facebook.katana`
    package. The following details provide an overview of the kind of information
    that can be gathered across various files:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook安卓应用是最广泛使用的社交网络应用之一。它将信息存储在`/data/data`文件夹中，位于`com.facebook.katana`包内。以下细节提供了可以从各种文件中收集的信息类型的概述：
- en: '**Facebook contacts**: Information about the user''s Facebook contacts can
    be retrieved by analyzing the `contacts_db2` database, which is present under
    the following path:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook联系人**：可以通过分析`contacts_db2`数据库检索用户的Facebook联系人信息，该数据库位于以下路径下：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/contacts_db2`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/databases/contacts_db2`。'
- en: The `contacts_db2` database (SQLite file) contains a table named contacts, which
    contains most of the user's information, such as their first name, last name,
    display name, and URL for display picture.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contacts_db2`数据库（SQLite文件）包含一个名为contacts的表，其中包含大部分用户信息，如他们的名字、姓氏、显示名称和显示图片的URL。'
- en: '**Facebook notifications**: Information about a user''s notifications can be
    gathered by analyzing the `notification_db` database, which is present under the
    following path:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook通知**：可以通过分析`notification_db`数据库收集有关用户通知的信息，该数据库位于以下路径下：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/notifications_db`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/databases/notifications_db`。'
- en: The `gql_notifications` table present under the preceding path holds the user's
    information. The `seen_state` column confirms whether a notification has been
    seen or not. The `updated` column points to the time when the notification was
    updated. The `gql_payload` column contains the notification and the sender information.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上述路径下的`gql_notifications`表保存了用户的信息。`seen_state`列确认了通知是否已被查看。`updated`列指向通知更新的时间。`gql_payload`列包含通知和发送者信息。
- en: '**Facebook messages**: A Facebook message conversation may be of crucial importance
    in several cases and can be viewed by analyzing the `threads_db2` database:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook消息**：分析`threads_db2`数据库可以查看Facebook消息对话在一些情况下可能非常重要：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/threads_db2`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/databases/threads_db2`'
- en: '**Videos from newsfeed**: The `/video-cache` folder contains videos that have
    been downloaded from the user''s newsfeed. Note that these are not the videos
    posted by the user, but rather they are the videos that appeared on their newsfeed:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态消息中的视频**：`/video-cache`文件夹包含从用户的动态消息中下载的视频。请注意，这些不是用户发布的视频，而是出现在他们的动态消息中的视频：'
- en: '**Path**: `/data/data/com.facebook.katana/files/video-cache`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/files/video-cache`'
- en: '**Images from newsfeed**: The `/images` folder contains various images that
    appear on the user''s profile, such as the ones from their newsfeed and contact
    profile pictures. Several directories are present within this folder and images
    may be stored in formats other than `.jpg`, such as `.cnt`:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态消息中的图片**：`/images`文件夹包含出现在用户个人资料中的各种图片，例如来自他们的动态消息和联系人个人资料图片的图片。此文件夹中存在多个目录，图片可能以`.jpg`以外的格式存储，如`.cnt`：'
- en: '**Path**: `/data/data/com.facebook.katana/cache/images`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/cache/images`'
- en: '**Newsfeed data**: The `newfeed_db` database contains data shown to the user
    on their newsfeed. As shown in the following screenshot, analyzing this database
    would provide valuable information, such as when a particular story was loaded
    by the device (the `fetched_at` column), if a particular story was seen by the
    user (the `seen_state` column), and where the corresponding files of a story are
    stored on the device (the `cache_file_path` column):'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态消息数据**：`newfeed_db`数据库包含用户在其动态消息中看到的数据。如下截图所示，分析此数据库将提供有价值的信息，比如设备何时加载了特定的故事（`fetched_at`列），用户是否看到了特定的故事（`seen_state`列），以及故事的相应文件在设备上的存储位置（`cache_file_path`列）：'
- en: '**Path**: `/data/data/com.facebook.katana/databases/newsfeed_db`:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.facebook.katana/databases/newsfeed_db`：'
- en: '![](img/49a0d2c5-1d9b-482f-afdc-45327787d546.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/49a0d2c5-1d9b-482f-afdc-45327787d546.png)
- en: The Facebook newsfeed.db file analyzed in SQLite browser
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLite浏览器中分析的Facebook newsfeed.db文件
- en: 'In the preceding screenshot, `fetched_at` specifies the date and time when
    this information is fetched. Notice that the app uses Linux epoch time, also known
    as Unix time or Posix time, to store this information. This format is often used
    by multiple apps and, hence, is worth taking a look at. Linux epoch time is stored
    as the number of seconds (or milliseconds) since midnight on January 1, 1970\.
    There are several online sites, such as [https://www.epochconverter.com/](https://www.epochconverter.com/),
    that can readily convert the Linux epoch time into a normal format. For example,
    the following screenshot shows Linux epoch time 1,577,881,839 converted into a
    normal format:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，`fetched_at`指定了获取此信息的日期和时间。请注意，该应用程序使用Linux纪元时间，也称为Unix时间或Posix时间，来存储此信息。这种格式通常被多个应用程序使用，因此值得一看。Linux纪元时间存储为自1970年1月1日午夜以来的秒数（或毫秒数）。有几个在线网站，如[https://www.epochconverter.com/](https://www.epochconverter.com/)，可以方便地将Linux纪元时间转换为普通格式。例如，以下截图显示了Linux纪元时间1,577,881,839转换为普通格式：
- en: '![](img/7072a6d0-d3ec-4498-a617-cd9faa509832.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/7072a6d0-d3ec-4498-a617-cd9faa509832.png)
- en: Example of time format
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 时间格式示例
- en: Now that we have performed an analysis of the Facebook app, let's perform a
    similar analysis with our next application, which is WhatsApp.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对Facebook应用进行了分析，让我们对我们的下一个应用WhatsApp进行类似的分析。
- en: WhatsApp Android app analysis
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WhatsApp安卓应用分析
- en: 'WhatsApp is the most popular chat (audio and video) messaging service and is
    used by more than a billion people across the globe. It stores its information
    under the `/data/data` folder, with the package name, `com.whatsapp`. The following
    is an overview of the important files that are of interest from a forensic perspective:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: WhatsApp是最受欢迎的聊天（音频和视频）消息服务，全球有超过十亿人使用。它将其信息存储在`/data/data`文件夹下，包名为`com.whatsapp`。以下是从法医角度感兴趣的重要文件的概述：
- en: '**User''s profile pic**: The user''s profile picture is saved with the`me.jpg` filename
    and is present under the following path:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户个人资料图片**：用户的个人资料图片以`me.jpg`文件名保存，并位于以下路径下：'
- en: '**Path**: `/data/data/com.whatsapp/me.jpg`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.whatsapp/me.jpg`'
- en: '**User''s phone number (associated with WhatsApp)**: The `me` file that''s
    present under the main folder contains the phone number that is associated with
    the user''s WhatsApp account. Note that this may or may not be the phone number
    that is associated with the SIM:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户的电话号码（与WhatsApp关联）**：主文件夹下的`me`文件包含与用户WhatsApp帐户关联的电话号码。请注意，这可能与与SIM卡关联的电话号码相同，也可能不同：'
- en: '**Path**: `/data/data/com.whatsapp/me`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.whatsapp/me`'
- en: '**Contacts profile pic**: The `/avatars` directory contains thumbnails of the
    profile pictures of the user''s contacts (who use WhatsApp):'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**联系人个人资料图片**：`/avatars`目录包含用户联系人（使用WhatsApp的）的个人资料图片的缩略图：'
- en: '**Path**: `/data/data/com.whatsapp/files/Avatars`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.whatsapp/files/Avatars`'
- en: '**Chat messages**: All message-related information, including chats and sender
    details, is present in the `msgstore.db` file, which is present at the following
    location:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天消息**：所有与消息相关的信息，包括聊天和发件人详细信息，都存储在`msgstore.db`文件中，该文件位于以下位置：'
- en: '**Path**: `/data/data/com.whatsapp/databases/msgstore.db`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.whatsapp/databases/msgstore.db`'
- en: '**WhatsApp files**: Most of the files shared with WhatsApp, such as images,
    videos, and audio messages, are stored on the SD card in the following location:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WhatsApp文件**：大多数与WhatsApp共享的文件，如图像、视频和音频消息，都存储在SD卡的以下位置：'
- en: '**Path**: `/sdcard/WhatsApp/Media`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/sdcard/WhatsApp/Media`'
- en: Both sent and received files are stored separately here in their respective
    folder names.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 发送和接收的文件分别存储在各自的文件夹中。
- en: 'Next, we will look at another application that is used for telecommunication
    and specializes in providing video chat and voice calls: Skype.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下另一个用于电信的应用程序，专门提供视频聊天和语音通话：Skype。
- en: Skype Android app analysis
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Skype Android应用程序分析
- en: 'Skype is an app that offers video chat and voice call services. The application''s
    data is stored under the `/data/data` folder, with the package name `com.skype.raider`.
    The following are some important artifacts that can be extracted by analyzing
    the Skype app:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Skype是一款提供视频聊天和语音通话服务的应用程序。该应用程序的数据存储在`/data/data`文件夹下，包名为`com.skype.raider`。以下是通过分析Skype应用程序可以提取的一些重要物件：
- en: '**Username and IP address**: The `shared.xml` file present under the following
    path contains information about the username and the last IP address that connected
    to Skype:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名和IP地址**：位于以下路径下的`shared.xml`文件包含有关用户名和上次连接到Skype的IP地址的信息：'
- en: '**Path**: `/data/data/com.skype.raider/files/shared.xml`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/shared.xml`'
- en: '**Profile picture**: The user''s profile picture is present in the `/thumbnails`
    directory, whose path is as follows:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人资料图片**：用户的个人资料图片位于`/thumbnails`目录中，路径如下：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/thumbnails/`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/thumbnails/`'
- en: '**Call logs**: Information about call logs made from Skype is available in
    the `main.db` file. Analyzing this file gives us a lot of information:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通话记录**：有关从Skype拨出的通话记录的信息存储在`main.db`文件中。分析此文件可以为我们提供大量信息：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`。'
- en: For example, the `duration` table provides information about call duration,
    the `start_timestamp` field gives the start time of a call, and the `creation_timestamp`
    field indicates when the call is initiated (this includes unanswered calls). The
    `type` column indicates whether the call was incoming (value= `1`) or outgoing
    (value= `2`).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，`duration`表提供了通话持续时间的信息，`start_timestamp`字段给出了通话的开始时间，`creation_timestamp`字段指示通话何时被发起（这包括未接听的电话）。`type`列指示通话是呼入的（值=`1`）还是呼出的（值=`2`）。
- en: '**Chat messages**: The `messages` table present in the `main.db` file contains
    all the chat messages. The `author` and `from_dispname` columns provide information
    about who wrote the message. The `timestamp` column shows the date/time of the
    message. The `body_xml` column contains the content of the message:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天消息**：`main.db`文件中的`messages`表包含所有聊天消息。`author`和`from_dispname`列提供了写消息的人的信息。`timestamp`列显示消息的日期/时间。`body_xml`列包含消息的内容：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`'
- en: '**Files transferred**: The `Transfers` table contains information about transferred
    files, such as the filename, the size of the file, and their location on the device:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输的文件**：`Transfers`表包含有关传输文件的信息，如文件名、文件大小和它们在设备上的位置：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`。'
- en: The actual images or files that are received will be stored on an SD card. If
    a file is downloaded, it will be in the `Downloads` folder in the root of the
    SD.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际接收到的图像或文件将存储在SD卡上。如果文件被下载，它将位于SD卡根目录下的`Downloads`文件夹中。
- en: '**Group chats**: The `ChatMembers` table shows a list of users who are present
    in a particular chat. The `adder` column shows the user who initiated the conversation:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**群聊**：`ChatMembers`表显示特定聊天中存在的用户列表。`adder`列显示启动对话的用户：'
- en: '**Path**: `/data/data/com.skype.raider/files/<username>/main.db/`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.skype.raider/files/<username>/main.db/`'
- en: Now, we will perform an analysis on the Gmail application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对Gmail应用程序进行分析。
- en: Gmail Android app analysis
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gmail Android应用程序分析
- en: 'Gmail is a widely used email service offered by Google. The application data
    is saved under the `/data/data` folder, with the package name `com.google.android.gm`.
    The following are the important artifacts that can be extracted by analyzing the
    Gmail app:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail是谷歌提供的广泛使用的电子邮件服务。 应用程序数据保存在`/data/data`文件夹下，包名称为`com.google.android.gm`。
    以下是通过分析Gmail应用程序可以提取的重要工件：
- en: '**Account details**: The XML files present under `/shared_prefs` confirm the
    email account details. Details of other accounts, which are linked to the current
    email, can be identified from the `Gmail.xml` file:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帐户详细信息**：`/shared_prefs`下的XML文件确认了电子邮件帐户的详细信息。 可以从`Gmail.xml`文件中识别出与当前电子邮件相关联的其他帐户的详细信息：'
- en: '**Path**: `/data/data/com.google.android.gm/cache/<username>@gmail.com`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/cache/<username>@gmail.com`'
- en: '**Attachments**: Attachments that are recently used in both sending and receiving
    emails are saved to the `/cache` directory. This is valuable because it gives
    us access to items that have been deleted from the email service too. Each row
    also contains a `messages_conversation` value. This value can be compared with
    the `conversations` table of the email attachment. The `filename` column identifies
    the path on the device where the file is located. The following is the exact path
    for this folder:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附件**：最近在发送和接收电子邮件中使用的附件保存在`/cache`目录中。 这很有价值，因为它使我们能够访问已从电子邮件服务中删除的项目。 每行还包含一个`messages_conversation`值。
    此值可以与电子邮件附件的`conversations`表进行比较。 `filename`列标识了文件在设备上的路径。 以下是此文件夹的确切路径：'
- en: '**Path**: `/data/data/com.google.android.gm/cache/<username>@gmail.com`:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/cache/<username>@gmail.com`：'
- en: '![](img/66d5e627-1946-46c8-a729-16cad9ba6c46.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66d5e627-1946-46c8-a729-16cad9ba6c46.png)'
- en: List of attachments present under Gmail's cache directory
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail缓存目录下的附件列表
- en: '**Email subject**: The subject of this email can be recovered by analyzing
    the `conversations` table present in the `mailstore.<username>@gmail.com.db` file:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件主题**：通过分析`mailstore.<username>@gmail.com.db`文件中的`conversations`表可以恢复此电子邮件的主题：'
- en: '**Path**: `/data/data/com.google.android.gm/databases/mailstore.<username>@gmail.com.db`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/databases/mailstore.<username>@gmail.com.db`'
- en: '**Search history**: Any text searches that were made within the app are stored
    in the `suggestions.db` file, which is present at the following location:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索历史**：在应用程序中进行的任何文本搜索都存储在`/data/data/com.android.chrome/app_chrome/Default/History`位置下的`suggestions.db`文件中。'
- en: '**Path**: `/data/data/com.google.android.gm/databases/suggestions.db`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.google.android.gm/databases/suggestions.db`'
- en: Let's wrap up this section by performing a final analysis on the Google Chrome
    application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过对谷歌Chrome应用程序进行最终分析来结束本节。
- en: Google Chrome Android app analysis
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌Chrome Android应用程序分析
- en: 'Google Chrome is the default web browser on Google Pixel and many other devices,
    and it is used widely to browse the internet. The application data is present
    under the `/data/data` folder, with the package name, `com.android.chrome`. The
    following are the important artifacts that can be extracted by analyzing the Gmail
    app:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌Chrome是谷歌Pixel和许多其他设备上的默认网络浏览器，并且被广泛用于浏览互联网。 应用程序数据位于`/data/data`文件夹下，包名称为`com.android.chrome`。
    以下是通过分析Gmail应用程序可以提取的重要工件：
- en: '**Profile picture**: The profile picture of the user is stored with the `Google
    Profile Picture.png` filename in the following location:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人资料图片**：用户的个人资料图片存储在以下位置的`Google Profile Picture.png`文件中：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/ Google Profile
    Picture.png`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/ Google Profile Picture.png`'
- en: '**Bookmarks**: The `Bookmarks` file contains information about all the bookmarks
    synced with the account. Details such as the site name, URL, and the time when
    it was bookmarked can be gathered by analyzing this file:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**书签**：`Bookmarks`文件包含与帐户同步的所有书签的信息。 通过分析此文件可以收集诸如站点名称、URL以及收藏时间等详细信息：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Bookmarks`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Bookmarks`'
- en: '**Browsing history**: The `History.db` file contains the user''s web history
    stored in various tables. For example, as shown in the following screenshot, the
    `keyword_search_terms` table contains information about the searches that were
    made using the Chrome browser:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览历史**：`History.db`文件包含用户的网络历史记录，存储在各种表中。 例如，如下截图所示，`keyword_search_terms`表包含了使用Chrome浏览器进行的搜索的信息：'
- en: '![](img/6a6bb125-9825-4ca7-bfd8-aef1fa43939f.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a6bb125-9825-4ca7-bfd8-aef1fa43939f.png)'
- en: Google Chrome browsing history
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌Chrome浏览历史
- en: The `segments` table contains a list of sites visited by the user (but not all
    of the sites). It's interesting to note that Chrome stores the data belonging
    to not just the device, but the account in general. In other words, information
    about sites that have been visited from other devices using the same account is
    also stored on the device; for example, the `URLs` table contains the browsing
    history for a Google account across several devices.
  id: totrans-92
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segments`表包含用户访问的站点列表（但不是所有站点）。 有趣的是，Chrome存储的数据不仅属于设备，而且一般属于帐户。 换句话说，使用相同帐户从其他设备访问的站点的信息也存储在设备上；
    例如，`URLs`表包含了跨多个设备的Google帐户的浏览历史。'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/History`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/History`。'
- en: '**Login Data**: The `Login Data` database contains the login information of
    different sites saved in the browser. The site URL, along with the username and
    password, is stored in the respective tables:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录数据**：`Login Data`数据库包含了浏览器中保存的不同站点的登录信息。 站点URL以及用户名和密码存储在相应的表中：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Login Data`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Login Data`'
- en: '**Frequently visited sites**: The `Top Sites` database contains a list of frequently
    visited sites:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经常访问的站点**：`Top Sites`数据库包含经常访问的站点列表：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Top Sites`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Top Sites`'
- en: '**Other data**: Other information, such as the phone numbers or email addresses
    entered by the user during form fills across different sites, is stored in the
    `Web Data` database. Any tables that are present within this database contain
    autofill data:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他数据**：用户在不同网站的表单填写中输入的电话号码或电子邮件地址等其他信息存储在`Web Data`数据库中。此数据库中存在的任何表都包含自动填充数据：'
- en: '**Path**: `/data/data/com.android.chrome/app_chrome/Default/Web Data`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`/data/data/com.android.chrome/app_chrome/Default/Web Data`'
- en: Now that we have analyzed the different third-party apps, we will look at the
    techniques we can use to reverse engineer Android apps.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经分析了不同的第三方应用程序，我们将看看我们可以使用哪些技术来逆向工程Android应用程序。
- en: Techniques to reverse engineer an Android application
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆向工程Android应用程序的技术
- en: You may need to deal with applications that stand as a barrier to accessing
    the required information. For instance, take the case of the gallery on a phone
    that is locked by an *AppLock* application. In this case, in order to access the
    pictures and videos stored in the gallery, you first need to enter the passcode
    to the *AppLock*. Hence, it would be interesting to know how the *AppLock* app
    stores the password on the device. You might look into the SQLite database files.
    However, if they are encrypted, then it's hard to even tell that it's a password.
    Reverse engineering applications would be helpful in such cases where you want
    to better understand the application and how the application stores the data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要处理阻止访问所需信息的应用程序。例如，手机上的相册被*AppLock*应用程序锁定。在这种情况下，为了访问相册中存储的照片和视频，您首先需要输入*AppLock*的密码。因此，了解*AppLock*应用程序如何在设备上存储密码将是有趣的。您可以查看SQLite数据库文件。但是，如果它们被加密，那么甚至很难确定它是密码。在这种情况下，逆向工程应用程序将是有帮助的，因为您想更好地了解应用程序以及应用程序如何存储数据。
- en: 'To state it in simple terms, reverse engineering is the process of retrieving
    source code from an executable. Reverse engineering an Android app is done in
    order to understand the functionality of the app, the data storage, the security
    mechanisms in place, and more. Before we proceed to learn how to reverse engineer
    an Android app, here is a quick recap of the Android apps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，逆向工程是从可执行文件中检索源代码的过程。逆向工程Android应用程序是为了了解应用程序的功能、数据存储、安全机制等。在我们继续学习如何逆向工程Android应用程序之前，让我们快速回顾一下Android应用程序：
- en: All the applications that are installed on the Android device are written in
    the Java programming language.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装在Android设备上的所有应用程序都是用Java编程语言编写的。
- en: When a Java program is compiled, we get bytecode. This is sent to a dex compiler,
    which converts it into Dalvik bytecode.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当Java程序编译时，我们得到字节码。这将发送给dex编译器，将其转换为Dalvik字节码。
- en: Thus, the class files are converted into dex files using a dx tool. Android
    uses something called **Dalvik virtual machine** (**DVM**) to run its applications.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，使用dx工具将类文件转换为dex文件。Android使用称为**Dalvik虚拟机**（**DVM**）来运行其应用程序。
- en: JVM's bytecode consists of one or more class files, depending on the number
    of Java files that are present in an application. Regardless, a Dalvik bytecode
    is composed of only one dex file.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM的字节码由一个或多个类文件组成，取决于应用程序中存在的Java文件数量。无论如何，Dalvik字节码由一个dex文件组成。
- en: Thus, the dex files, XML files, and other resources that are required to run
    an application are packaged into an Android package file (an APK file). These
    APK files are simply collections of items within ZIP files. Therefore, if you
    rename an APK extension file to a `.zip` file, then you will be able to see the
    contents of the file. However, before you can do this, you need to get access
    to the APK file of the application that is installed on the phone. Here is how
    the APK file corresponding to an application can be accessed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，dex文件、XML文件和运行应用程序所需的其他资源被打包到一个Android包文件（APK文件）中。这些APK文件只是ZIP文件中的项目集合。因此，如果您将APK扩展文件重命名为`.zip`文件，那么您将能够看到文件的内容。但是，在您这样做之前，您需要访问手机上安装的应用程序的APK文件。以下是如何访问与应用程序对应的APK文件。
- en: Extracting an APK file from an Android device
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Android设备中提取APK文件
- en: 'Apps that come preinstalled with the phone are stored in the `/system/app`
    directory. Third-party applications that are downloaded by the user are stored
    in the `/data/app` folder. The following method helps you gain access to the APK
    files on the device; it works on both rooted and non-rooted devices:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 预装在手机上的应用程序存储在`/system/app`目录中。用户下载的第三方应用程序存储在`/data/app`文件夹中。以下方法可以帮助您访问设备上的APK文件；它适用于已root和未root的设备：
- en: Identify the package name of the app by issuing the `# adb.exe shell pm list
    packages` command.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发出`# adb.exe shell pm list packages`命令来识别应用程序的包名称。
- en: 'The following is the output of the preceding command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面命令的输出：
- en: '![](img/845bd1f9-74f7-4b82-96ec-9abb26ac9bd4.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/845bd1f9-74f7-4b82-96ec-9abb26ac9bd4.png)'
- en: List of package names present on the device
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 设备上存在的包名称列表
- en: 'As shown in the preceding command-line output, the list of package names is
    displayed. Try to find a match between the app in question and the package name.
    Usually, the package names are very much related to the app names. Alternatively,
    you can use the Android Market or Google Play to identify the package name easily.
    The URL for an app in Google Play contains the package name, as shown in the following
    screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的命令行输出所示，显示了包名称列表。尝试在问题中找到应用程序和包名称之间的匹配。通常，包名称与应用程序名称密切相关。或者，您可以使用Android市场或Google
    Play轻松识别包名称。Google Play中应用程序的URL包含包名称，如下面的屏幕截图所示：
- en: '![](img/5d24586a-85b6-47b0-a70f-58aa01a2ddf1.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d24586a-85b6-47b0-a70f-58aa01a2ddf1.png)'
- en: Facebook App in the Google Play Store
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play商店中的Facebook应用程序
- en: 'Identify the full pathname of the APK file for the desired package by issuing
    the `adb shell pm path` command, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发出`adb shell pm path`命令来识别所需包的APK文件的完整路径，如下所示：
- en: '![](img/7de67300-77f9-4d01-8d4e-a4856a021b23.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7de67300-77f9-4d01-8d4e-a4856a021b23.png)'
- en: Identifying full pathname of APK
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 识别APK的完整路径名
- en: 'Pull the APK file from the Android device to the forensic workstation using
    the `adb pull` command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`adb pull`命令将APK文件从Android设备拉到取证工作站：
- en: '![](img/62c3987d-21df-4837-a593-eccc2d453207.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62c3987d-21df-4837-a593-eccc2d453207.png)'
- en: adp pull command
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: adp pull命令
- en: 'Now, let''s analyze the contents of an APK file. An Android package is a container
    for an Android app''s resources and executables. It''s a zipped file that contains
    the following files:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们分析APK文件的内容。Android包是Android应用程序资源和可执行文件的容器。它是一个压缩文件，包含以下文件：
- en: '`AndroidManifest.xml`: This contains information about the permissions and
    more.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`：这包含有关权限等的信息。'
- en: '`classes.dex`: This is the class file that''s been converted into a dex file
    by the dex compiler.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classes.dex`：这是通过dex编译器转换为dex文件的类文件。'
- en: '`Res`: The application''s resources, such as the image files, sound files,
    and more, are present in this directory.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Res`：应用程序的资源，如图像文件、声音文件等，都在这个目录中。'
- en: '`Lib`: This contains native libraries that the application may use.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lib`：这包含应用程序可能使用的本地库。'
- en: '`META-INF`: This contains information about the application''s signature and
    signed checksums for all the other files in the package.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`META-INF`：这包含应用程序签名的信息以及包中所有其他文件的签名校验和。'
- en: Once the APK file has been obtained, you can proceed to reverse engineer the
    Android application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得APK文件，就可以开始反向工程Android应用程序。
- en: Steps to reverse engineer Android apps
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向工程Android应用的步骤
- en: 'APK files can be reverse-engineered in different ways to get the original code.
    The following is one method that uses the `dex2jar` and JD-GUI tools to gain access
    to the application code. For our example, we will examine the `com.twitter.android-1.apk`
    file. The following are the steps to successfully reverse engineer the APK file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过不同的方式对APK文件进行反向工程，以获取原始代码。以下是一种使用`dex2jar`和JD-GUI工具访问应用程序代码的方法。在我们的示例中，我们将检查`com.twitter.android-1.apk`文件。以下是成功反向工程APK文件的步骤：
- en: 'Rename the APK extension to ZIP to see the contents of the file. Rename the
    `com.twitter.android-1.apk` file to `twitter.android-1.zip` and extract the contents
    of this file using any file archiver application. The following screenshot shows
    the files that were extracted from the original file, `twitter.android-1.zip`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将APK扩展名重命名为ZIP以查看文件内容。将`com.twitter.android-1.apk`文件重命名为`twitter.android-1.zip`，并使用任何文件解压应用程序提取此文件的内容。以下截图显示了从原始文件`twitter.android-1.zip`中提取的文件。
- en: '![](img/d6a4ff00-b5ed-41df-902e-4c9c3984a9b9.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6a4ff00-b5ed-41df-902e-4c9c3984a9b9.png)'
- en: Extracted files of an APK file
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: APK文件的提取文件
- en: The `classes.dex` file that we discussed previously can be accessed after extracting
    the contents of the APK file. This dex file needs to be converted into a class
    file in Java. This can be done using the `dex2jar` tool.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们之前讨论过的`classes.dex`文件可以在提取APK文件内容后访问。这个dex文件需要使用`dex2jar`工具转换为Java类文件。
- en: 'Download the `dex2jar` tool from [https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar),
    drop the `classes.dex` file into the `dex2jar` tools directory, and issue the
    following command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar)下载`dex2jar`工具，将`classes.dex`文件放入`dex2jar`工具目录，并发出以下命令：
- en: '[PRE1]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the preceding command is successfully run, it creates a new `classes -dex2jar.jar`
    file in the same directory, as shown in the following screenshot:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当上述命令成功运行时，它会在同一目录下创建一个新的`classes-dex2jar.jar`文件，如下截图所示：
- en: '![](img/306e7996-4fdd-40e4-b5c3-91e85a53d654.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/306e7996-4fdd-40e4-b5c3-91e85a53d654.png)'
- en: The classes-dex2jar.jar file created by the dex2jar tool
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由dex2jar工具创建的classes-dex2jar.jar文件
- en: 'To view the contents of this JAR file, you can use a tool such as JD-GUI. As
    shown in the following screenshot, the files present in an Android application
    and the corresponding code can be seen:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看此JAR文件的内容，可以使用JD-GUI等工具。如下截图所示，可以看到Android应用程序中的文件和相应的代码：
- en: '![](img/5c1a2e05-7b7f-49d4-b819-626efaf2a5e1.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c1a2e05-7b7f-49d4-b819-626efaf2a5e1.png)'
- en: The JD-GUI tool
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: JD-GUI工具
- en: Once we get access to the code, it is easy to analyze how the application stores
    the values, permissions, and more information that may be helpful to bypass certain
    restrictions. When malware is found on a device, this method to decompile and
    analyze the application may prove useful, as it will show what is being accessed
    by the malware and provide clues to where the data is being sent. The following
    sections focus on Android malware in detail.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得代码访问权限，就可以轻松分析应用程序存储值、权限和其他可能有助于绕过某些限制的信息。当在设备上发现恶意软件时，这种反编译和分析应用程序的方法可能会很有用，因为它将显示恶意软件正在访问的内容，并提供数据发送的线索。以下各节将详细介绍Android恶意软件。
- en: Android malware
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android恶意软件
- en: As Android's market share continues to increase, so do attacks or malware targeted
    at Android users. Mobile malware is a broad term that refers to a piece of software
    that performs unintended actions and includes Trojans, spyware, adware, ransomware,
    and others. According to pandasecurity, Android devices are 50 times more infected
    with malware compared to iOS devices ([https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/](https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/)).
    In 2019, the famous Agent Smith malware alone infected almost 25 million Android
    devices, as per a Cybersecurity Hub news report ([https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones](https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 随着安卓市场份额的不断增加，针对安卓用户的攻击或恶意软件也在增加。移动恶意软件是一个广义术语，指执行意外操作的软件，包括木马、间谍软件、广告软件、勒索软件等。根据pandasecurity的数据，与iOS设备相比，安卓设备感染恶意软件的几率要高50倍（[https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/](https://www.pandasecurity.com/mediacenter/mobile-security/android-more-infected-than-ios/)）。2019年，仅Agent
    Smith恶意软件就感染了近2500万台安卓设备，根据Cybersecurity Hub的一篇新闻报道（[https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones](https://www.cshub.com/malware/articles/incident-of-the-week-malware-infects-25m-android-phones)）。
- en: One of the primary reasons for this situation is that, unlike Apple's App Store,
    which is tightly controlled by the company, Google's Play Store is an open ecosystem
    without any detailed upfront security reviews. Malware developers can easily move
    their apps to the Play Store and thereby distribute their apps. Google now has
    a malware-detecting software named Google Bouncer, which will automatically scan
    an uploaded app for malware, but attackers have figured out several ways to remain
    undetected. Moreover, Android officially allows us to load apps that have been
    downloaded over the internet (side-loading), unlike iOS, which does not allow
    unsigned apps.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况的一个主要原因是，与苹果的App Store严格受公司控制不同，谷歌的Play Store是一个没有详细的前期安全审查的开放生态系统。恶意软件开发者可以轻松地将他们的应用移至Play
    Store，并通过此方式分发他们的应用。谷歌现在有一个名为Google Bouncer的恶意软件检测软件，它将自动扫描上传的应用程序以查找恶意软件，但攻击者已经找到了几种保持不被发现的方法。此外，安卓正式允许我们加载从互联网下载的应用程序（侧载），而iOS不允许未签名的应用程序。
- en: 'For example, as shown in the following screenshot, when the Unknown sources
    option is selected on an Android device, it allows the user to install apps that
    have been downloaded from any site over the internet:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如下截图所示，当在安卓设备上选择未知来源选项时，允许用户安装从互联网上任何网站下载的应用程序：
- en: '![](img/a0adb506-9287-4311-9910-5cc3ef4bb143.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0adb506-9287-4311-9910-5cc3ef4bb143.png)'
- en: Side-loading option in Android
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓中的侧载选项
- en: 'The third-party app stores that host Android apps are known to be hubs of malware.
    This prompted Google to roll out the *Verify Apps* feature starting from Android
    4.2, which scans apps locally on Android devices to look for malicious activities,
    such as SMS abuse. As shown in the following screenshot, the Verify apps feature
    may warn the user, or in some cases may even block the installation. However,
    this is an opt-in service, so users can disable this feature if they wish to:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 托管安卓应用程序的第三方应用商店被认为是恶意软件的聚集地。这促使谷歌从安卓4.2开始推出了*验证应用程序*功能，该功能在安卓设备上本地扫描应用程序，以查找恶意活动，如短信滥用。如下截图所示，验证应用程序功能可能会警告用户，或在某些情况下甚至可能阻止安装。然而，这是一个选择性服务，因此用户可以在希望的情况下禁用此功能：
- en: '![](img/c7b30de6-5536-4636-9e17-8c16bff545e3.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7b30de6-5536-4636-9e17-8c16bff545e3.png)'
- en: Verify apps feature in Android
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓中的验证应用程序功能
- en: 'Starting with Android Oreo, Google has rolled out a new feature called Play
    Protect, which is a better version of the verifying apps feature. The primary
    job of Play Protect is to block or warn the users of malicious or harmful apps
    that have been installed on the Android device. For example, as shown in the following
    screenshot, the Play Protect feature may show a warning message during the app''s
    installation:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从安卓奥利奥开始，谷歌推出了一个名为Play Protect的新功能，这是验证应用程序功能的更好版本。Play Protect的主要工作是阻止或警告已安装在安卓设备上的恶意或有害应用程序。例如，如下截图所示，Play
    Protect功能可能在应用程序安装过程中显示警告消息：
- en: '![](img/17406d6b-4d5c-42a7-87a4-8c35c6f35eff.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17406d6b-4d5c-42a7-87a4-8c35c6f35eff.png)'
- en: Play Protect feature
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Play Protect功能
- en: Next, let's have a look at the types of malware.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看恶意软件的类型。
- en: Types of Android malware
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓恶意软件类型
- en: 'There are different kinds of malware types that can infect an Android device.
    The following are some of the most common ones:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的恶意软件可以感染安卓设备。以下是一些最常见的类型：
- en: '**Banking malware**: It can be distributed as fake banking applications to
    steal banking credentials typed by the users, or steal any other sensitive personal
    information from the user''s account. Banking Trojans can intercept or modify
    banking transactions and perform dangerous actions such as sending, deleting,
    and intercepting SMS messages, as well as keylogging.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**银行恶意软件**：它可以伪装成银行应用程序，窃取用户输入的银行凭据，或者从用户账户中窃取任何其他敏感个人信息。银行木马可以拦截或修改银行交易，并执行危险操作，如发送、删除和拦截短信，以及记录按键。'
- en: '**Spyware**: Spyware monitors, logs, and sends important information from the
    target device to the attacker''s server. This information might comprise SMS messages,
    recorded phone calls, screenshots, keylogs, emails, or any other application data
    that may be of interest to the attacker. BusyGasper, a spyware identified by Kaspersky
    Lab experts in early 2018, not only possesses common spyware capabilities, such
    as collecting information from popular messаging applications, such as WhatsApp,
    Viber, and Facebook, but it also has device sensor listeners, including motion
    detectors.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间谍软件**：间谍软件监视、记录并将重要信息从目标设备发送到攻击者的服务器。这些信息可能包括短信、录音电话、截屏、按键记录、电子邮件或其他可能对攻击者感兴趣的应用程序数据。BusyGasper是卡巴斯基实验室专家在2018年初发现的一种间谍软件，它不仅具有收集来自WhatsApp、Viber和Facebook等流行消息应用程序的信息的常见间谍软件功能，还具有设备传感器监听器，包括运动检测器。'
- en: '**Adware**: Adware is another popular malicious or unwanted application type
    that is very common on Android devices. It is relatively easy to detect, as the
    victim will receive continuous popups and ads on their device''s screen. Such
    unwanted programs are not always harmless, since popups may result in downloading
    another piece of malware, including the types already mentioned – spyware and
    banking Trojans.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广告软件**：广告软件是另一种在安卓设备上非常常见的恶意或不需要的应用程序类型。它相对容易检测，因为受害者会在设备屏幕上不断收到弹出窗口和广告。这些不需要的程序并不总是无害的，因为弹出窗口可能导致下载另一种恶意软件，包括已经提到的间谍软件和银行木马。'
- en: '**Ransomware**: The main targets of ransomware are Windows-based desktop computers
    and servers, but it also exists on mobile platforms, and on Android in particular.
    Usually, it only locks the device screen with a ransom note, but sometimes it
    encrypts users'' data as well.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**勒索软件**：勒索软件的主要目标是基于Windows的台式电脑和服务器，但它也存在于移动平台上，尤其是在安卓上。通常，它只会用勒索通知锁定设备屏幕，但有时也会加密用户的数据。'
- en: '**Crypto-mining malware**: Cryptocurrencies are extremely popular nowadays,
    so this type of malicious program is available even for mobile platforms, such
    as Android. The goal of such applications is to mine cryptocurrency, using a victim''s
    device computation capacity. Occasionally, this type of malware can even put smartphone
    hardware at risk.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密货币挖矿恶意软件**：加密货币现在非常流行，因此这种类型的恶意程序甚至适用于安卓等移动平台。这类应用程序的目标是利用受害者的设备计算能力来挖掘加密货币。偶尔，这种类型的恶意软件甚至可能使智能手机硬件处于风险之中。'
- en: Advanced malware is also capable of rooting the device and installing new apps.
    For example, the Android Mazar malware, which was discovered in Feb 2016, spreads
    via text messages and is capable of gaining administrator rights on phones, allowing
    it to wipe handsets, make calls, or read texts.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 高级恶意软件还能够对设备进行root并安装新应用程序。例如，安卓Mazar恶意软件于2016年2月被发现，通过短信传播，并能够在手机上获得管理员权限，从而可以擦除手机、打电话或阅读短信。
- en: A full list of Android malware families and their capabilities is available
    at [https://forensics.spreitzenbarth.de/android-malware/](https://forensics.spreitzenbarth.de/android-malware/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可在[https://forensics.spreitzenbarth.de/android-malware/](https://forensics.spreitzenbarth.de/android-malware/)找到安卓恶意软件家族及其功能的完整列表。
- en: 'Once malware gets into a device, it can perform dangerous actions, some of
    which are as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦恶意软件进入设备，它可以执行危险的操作，其中一些如下：
- en: Send and read your text messages
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送和阅读您的短信
- en: Steal sensitive data, such as pictures, videos, and credit card numbers
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窃取敏感数据，如图片、视频和信用卡号码
- en: Manipulate files or data present on the device
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵设备上的文件或数据
- en: Send SMS to a premium-rated number
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向高费率号码发送短信
- en: Infect your browser and steal any data typed into its Change device settings
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感染您的浏览器并窃取键入的任何数据更改设备设置
- en: Wipe all data present on the device
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 擦除设备上的所有数据
- en: Lock the device until a ransom is paid
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定设备直到支付赎金
- en: Display advertisements continuously
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不断显示广告
- en: Now that we have understood the different types of malware, we will see how
    the malware spreads in your device.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了不同类型的恶意软件，我们将看看恶意软件如何在您的设备中传播。
- en: How does Android malware spread?
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓恶意软件是如何传播的？
- en: 'An Android device can be infected with malware in several different ways. The
    following are some of the possible ways:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备可能以几种不同的方式感染恶意软件。以下是一些可能的方式：
- en: '**Repackaging legitimate application**: This is the most common method used
    by attackers. First, the attacker downloads a legitimate application and disassembles
    it. Then, they add their malicious code and reassemble the application. The new
    malicious application now functions exactly as the legitimate application does,
    but it also performs malicious activity in the background. This kind of application
    is commonly found in third-party Android app stores and is downloaded by many
    people.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新打包合法应用程序**：这是攻击者使用的最常见方法。首先，攻击者下载一个合法的应用程序并对其进行反汇编。然后，他们添加恶意代码并重新组装应用程序。新的恶意应用程序现在的功能与合法应用程序完全相同，但它也在后台执行恶意活动。这种应用程序通常在第三方安卓应用商店中找到，并被许多人下载。'
- en: '**Exploiting Android vulnerabilities**: In this scenario, an attacker exploits
    the bugs or the vulnerabilities that are discovered in the Android platform to
    install their malicious application or to perform any unwanted actions. For example,
    installer hijacking, which was identified in 2015, has been exploited by attackers
    to replace an Android application with malware during installation.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用安卓漏洞**：在这种情况下，攻击者利用在安卓平台上发现的漏洞或漏洞来安装他们的恶意应用程序或执行任何不需要的操作。例如，安装程序劫持在2015年被发现，攻击者利用它来在安装过程中用恶意软件替换安卓应用程序。'
- en: '**Bluetooth and MMS propagation**: Malware is also spread via Bluetooth and
    MMS. The victim receives the malware when the device is in discoverable mode,
    for example, when it can be seen by other Bluetooth-enabled devices. In the case
    of MMS, the malware is attached to the message, just like how computer viruses
    are sent through email attachments. However, in both these methods, the user has
    to agree, at least once, to run the file.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝牙和MMS传播**：恶意软件也通过蓝牙和MMS传播。当设备处于可发现模式时，受害者会在设备上收到恶意软件，例如，当它可以被其他蓝牙设备看到时。在MMS的情况下，恶意软件附加在消息中，就像计算机病毒通过电子邮件附件发送一样。然而，在这两种方法中，用户至少必须同意运行文件一次。'
- en: '**App downloading a malicious update**: In this case, the app that was originally
    installed does not contain any malicious code, but a function present within the
    code will download malicious commands at runtime. This can be done via a stealthy
    update or user update. For example, the Plankton malware uses stealthy updates
    that directly download a JAR file from a remote server and do not need any user
    permission. In the case of user updates, the user has to allow the app to download
    the new version of the app.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序下载恶意更新**：在这种情况下，最初安装的应用程序不包含任何恶意代码，但代码中存在的一个功能将在运行时下载恶意命令。这可以通过隐秘更新或用户更新来完成。例如，Plankton恶意软件使用隐秘更新直接从远程服务器下载JAR文件，不需要任何用户权限。在用户更新的情况下，用户必须允许应用程序下载应用的新版本。'
- en: '**Remote install**: The attacker may compromise the credentials of the user''s
    account on the device and thereby remotely install apps on the device. This generally
    happens in targeted scenarios and is less frequent compared to the previous two
    methods we just described.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程安装**：攻击者可能会破坏用户设备上的账户凭据，从而远程安装应用程序。这通常发生在有针对性的场景中，与我们刚刚描述的前两种方法相比，发生频率较低。'
- en: Now that we've looked at the possible ways in which the Android malware can
    spread, let's try to identify the presence of malware in your device.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过Android恶意软件可能传播的方式，让我们试着识别您的设备中是否存在恶意软件。
- en: Identifying Android malware
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别Android恶意软件
- en: 'From a forensic perspective, it''s important to identify the presence of any
    malware on the device prior to performing any analysis. This is because malware
    can alter the state of the device or contents on the device, thereby making the
    analysis or the results inconsistent. There are tools available on the market
    that can analyze the physical extraction to identify malware. For example, Cellebrite
    UFED Physical Analyzer has BitDefender''s anti-malware technology, which scans
    for malware. As shown in the following screenshot, once the physical image has
    been loaded into the tool, the file can be scanned for malware:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从取证的角度来看，重要的是在进行任何分析之前识别设备上是否存在恶意软件。这是因为恶意软件可能会改变设备的状态或设备上的内容，从而使分析或结果不一致。市场上有一些工具可以分析物理提取以识别恶意软件。例如，Cellebrite
    UFED物理分析仪具有BitDefender的反恶意软件技术，可以扫描恶意软件。如下面的截图所示，一旦物理镜像被加载到工具中，文件就可以被扫描以查找恶意软件：
- en: '![](img/64f84e23-3bfc-40eb-bd46-20a7f256645f.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64f84e23-3bfc-40eb-bd46-20a7f256645f.png)'
- en: Scanning for malware in UFED Physical Analyzer
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在UFED物理分析仪中扫描恶意软件
- en: 'Once the scan starts, the BitDefender software tries to unpack the `.apk` files
    and looks for infected or malicious files. This process is automatic and the tool
    points to the malicious apps, as shown in the following screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦扫描开始，BitDefender软件会尝试解压`.apk`文件并查找感染或恶意文件。这个过程是自动的，工具会指出恶意应用程序，如下面的截图所示：
- en: '![](img/9b4514e2-3949-4b28-b3b1-abc4cb275bc7.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b4514e2-3949-4b28-b3b1-abc4cb275bc7.png)'
- en: Malware scanner results in UFED Physical Analyzer
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: UFED物理分析仪中的恶意软件扫描结果
- en: 'The tool simply points out that something malicious is present on the device.
    The forensic investigator has to then manually confirm whether this is a valid
    issue by analyzing the respective application. This is where the reverse engineering
    skills that we discussed in the previous sections need to be leveraged. Once the
    application has been reverse-engineered and the code has been obtained, it is
    recommended that you take a look at the `AndroidManifest.xml` file to find out
    the app permissions. This will be helpful for understanding where the app stores
    the data, what resources it is trying to access, and more. For example, a Flashlight
    application does not need read/write access to your SD card data, or to make a
    phone call:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具只是指出设备上存在恶意内容。然后，取证调查员必须通过分析相应的应用程序手动确认这是否是一个有效的问题。这就是我们在前面部分讨论的逆向工程技能需要发挥作用的地方。一旦应用程序被逆向工程并且代码被获取，建议您查看`AndroidManifest.xml`文件以了解应用程序权限。这对于了解应用程序存储数据的位置、它试图访问的资源等是有帮助的。例如，手电筒应用程序不需要读/写访问您的SD卡数据，也不需要打电话：
- en: '![](img/516bfec6-8b29-482e-b80e-3e834b262e12.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/516bfec6-8b29-482e-b80e-3e834b262e12.png)'
- en: Permissions in the AndroidManifest.xml file
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: AndroidManifest.xml文件中的权限
- en: Alternatively, you can also upload the `.apk` file to VirusTotal, a free service
    that can be used to analyze suspicious files for malware. VirusTotal will scan
    your file against 55 antivirus engines. It's also important to note that the tool
    may not identify a valid case if the details are obfuscated in the `.apk` file.
    Hence, as a forensic investigator, it's important to develop the necessary skills
    to reverse engineer any suspicious apps and analyze the code to identify malicious
    behavior.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以将`.apk`文件上传到VirusTotal，这是一个可以用来分析可疑文件中是否有恶意软件的免费服务。VirusTotal将使用55个杀毒引擎扫描您的文件。重要的是要注意，如果`.apk`文件中的细节被混淆，该工具可能无法识别有效的情况。因此，作为取证调查员，重要的是要发展必要的技能来逆向工程任何可疑的应用程序并分析代码以识别恶意行为。
- en: In some investigations, the nature of the malware that is present on a device
    may also result in arriving at certain crucial conclusions, which may affect the
    outcome of the case. For example, consider an internal investigation in a corporation
    that involves sending abusive messages to other employees. Identifying malware
    on the device that sends the messages would help solve the case.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些调查中，设备上存在的恶意软件的性质也可能导致得出某些关键的结论，这可能会影响案件的结果。例如，考虑一个涉及向其他员工发送滥用信息的公司内部调查。识别发送信息的设备上的恶意软件将有助于解决案件。
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Android app analysis helps a forensic investigator look for valuable data in
    relevant locations on a device. Reverse engineering Android apps is the process
    of retrieving source code from an APK file. Using certain tools, such as `dex2jar`,
    Android apps can be reverse-engineered in order to understand their functionality
    and data storage, identify malware, and more. In this chapter, we performed analysis
    on different android applications and we are now able to retrieve data from them.
    We also learned about different types of Android malware and how to identify them.
    Tools such as UFED Physical Analyzer come with BitDefender software, which can
    automatically scan for malware.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序分析有助于法证调查人员在设备的相关位置寻找有价值的数据。反向工程Android应用程序是从APK文件中检索源代码的过程。使用某些工具，如`dex2jar`，可以对Android应用程序进行反向工程，以了解其功能和数据存储，识别恶意软件等。在本章中，我们对不同的Android应用程序进行了分析，现在能够从中检索数据。我们还学习了不同类型的Android恶意软件以及如何识别它们。诸如UFED
    Physical Analyzer之类的工具配备了BitDefender软件，可以自动扫描恶意软件。
- en: The next chapter covers performing forensics on Windows Phone devices.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍在Windows Phone设备上进行取证。
