- en: Chapter 6. Artificial Intelligence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。人工智能
- en: The CryENGINE AI system allows the creation of non-player controlled actors
    that roam the game world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE AI系统允许创建在游戏世界中漫游的非玩家控制角色。
- en: 'In this chapter we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将：
- en: Learn how the AI system integrates with Lua scripts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解AI系统如何与Lua脚本集成
- en: Discover what goal pipes are, and how to create them
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解目标管道是什么，以及如何创建它们
- en: Use AI signals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AI信号
- en: Register a custom AI `Actor` class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册自定义AI`Actor`类
- en: Learn how to use behavior selection trees
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用行为选择树
- en: Create our own AI behavior
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们自己的AI行为
- en: The Artificial Intelligence (AI) system
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工智能（AI）系统
- en: The CryENGINE AI system was designed to allow easy creation of custom AI actors
    flexible enough to handle a larger set of complex and different worlds.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE AI系统的设计是为了方便创建灵活到足以处理更大量的复杂和不同世界的自定义AI角色。
- en: 'Before we start looking into the native implementation of the AI system, we
    have to mention one very important fact: AI is not the same as an actor, and should
    never be confused as such.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始研究AI系统的本地实现之前，我们必须提到一个非常重要的事实：AI不同于角色，不应该混淆。
- en: In CryENGINE, AI still relies on an underlying actor implementation, commonly
    the exact same one as used by players. However, the implementation of the AI itself
    is done separately via the AI system, which in turn sends movemAent input, and
    so on to the actor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在CryENGINE中，AI仍然依赖于底层的角色实现，通常与玩家使用的完全相同。然而，AI本身的实现是通过AI系统单独完成的，该系统将移动输入等发送给角色。
- en: Scripting
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本
- en: The main idea of CryENGINE's AI system is based on lots and lots of scripting.
    Instead of forcing programmers into modifying the complex CryAISystem module,
    it's possible to create new AI behaviors using Lua scripts contained in the `Scripts/AI`
    and `Scripts/Entities/AI` directories.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE的AI系统的主要思想是基于大量的脚本编写。可以使用`Scripts/AI`和`Scripts/Entities/AI`目录中包含的Lua脚本来创建新的AI行为，而不是强迫程序员修改复杂的CryAISystem模块。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The AI system is currently largely hardcoded to usage of the `.lua` scripts,
    therefore we will not be able to use C# and C++ to any larger extent for AI development.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: AI系统目前主要是硬编码为使用`.lua`脚本，因此我们将无法在AI开发中更大程度地使用C#和C++。
- en: AI actors
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI角色
- en: As we mentioned previously, actors are separate from the AI itself. Essentially
    what this means is that we'll need to create an `IActor` implementation, and then
    specify which AI behavior the actor should use.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，角色与AI本身是分开的。基本上这意味着我们需要创建一个`IActor`实现，然后指定角色应该使用哪种AI行为。
- en: If your AI actors should behave roughly the same as your player, you should
    reuse the actor implementation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的AI角色应该与您的玩家行为大致相同，您应该重用角色实现。
- en: 'As covered in the previous chapter, registering an actor can be done with the
    `REGISTER_FACTORY` macro. The only difference for AI actors is that the last parameters
    should be set to true instead of false:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，注册一个角色可以通过`REGISTER_FACTORY`宏来完成。AI角色的唯一区别是最后一个参数应该设置为true而不是false：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once registered, the AI system will search for a Lua script named after your
    entity in `Scripts/Entities/AI`. In the case of the previous snippet, the system
    would attempt to load `Scripts/Entities/AI/MyAIActor.lua`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦注册，AI系统将在`Scripts/Entities/AI`中搜索以您的实体命名的Lua脚本。在前面的片段中，系统将尝试加载`Scripts/Entities/AI/MyAIActor.lua`。
- en: This script should contain a table of the same name, and functions the same
    as other Lua entities. For example, to add Editor properties, simply add variables
    inside a Properties subtable.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本应该包含一个同名的表，并且与其他Lua实体的功能相同。例如，要添加编辑器属性，只需在Properties子表中添加变量。
- en: Goal pipes
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标管道
- en: Goal pipes define a collection of goal operations, allowing a set of goals to
    be triggered at runtime. For example, a goal pipe could entail the AI, increasing
    its movement speed while simultaneously beginning the search of player-controlled
    units.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 目标管道定义了一组目标操作，允许在运行时触发一组目标。例如，一个目标管道可以包括AI，增加其移动速度，同时开始搜索玩家控制的单位。
- en: Goal operations, such as LookAt, Locate, and Hide are created in `CryAISystem.dll`
    and cannot be modified without access to its source.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目标操作，如LookAt，Locate和Hide是在`CryAISystem.dll`中创建的，不能在没有访问其源代码的情况下进行修改。
- en: Creating custom pipes
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义管道
- en: 'Pipes are initially registered inside the `PipeManager:CreateGoalPipes` function
    in `Scripts/AI/GoalPipes/PipeManager.lua`, using the `AI.LoadGoalPipes` function:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 管道最初是在`PipeManager:CreateGoalPipes`函数中在`Scripts/AI/GoalPipes/PipeManager.lua`中注册的，使用`AI.LoadGoalPipes`函数：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This snippet will load `Scripts/AI/GoalPipes/MyGoalPipes.xml`, which could
    contain the following goal pipe definition:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将加载`Scripts/AI/GoalPipes/MyGoalPipes.xml`，其中可能包含以下目标管道定义：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When this pipe is selected, the assigned AI will start locating the player,
    switch to the `Run` movement speed state, and call the `AnalyzeSituation` function
    contained in the currently selected behavior script.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择了这个管道时，分配的AI将开始定位玩家，切换到`Run`移动速度状态，并调用当前选定的行为脚本中包含的`AnalyzeSituation`函数。
- en: Goal pipes can be very effective for pushing a set of goals easily, as an example
    based on the previous script, we could simply select the `myGoalPipes_findPlayer`
    pipe in order to have the AI run looking for the player.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目标管道可以非常有效地推动一组目标，例如基于前面的脚本，我们可以简单地选择`myGoalPipes_findPlayer`管道，以便AI寻找玩家。
- en: Selecting pipes
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择管道
- en: 'Goal pipes are typically triggered using the entity function `SelectPipe` in
    Lua:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目标管道通常使用Lua中的实体函数`SelectPipe`来触发：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Or can otherwise be triggered via C++, using the `IPipeUser::SelectPipe` function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或者也可以通过C++触发，使用`IPipeUser::SelectPipe`函数。
- en: Signals
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信号
- en: In order to provide AI entities with an intuitive way of communicating with
    each other, we can use the signal system. Signals are events that can be sent
    to a specific AI unit from either another AI entity, or from another place in
    C++ or Lua code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为AI实体提供直观的相互通信方式，我们可以使用信号系统。信号是可以从另一个AI实体或从C++或Lua代码的其他地方发送到特定AI单元的事件。
- en: Signals can be sent using the `AI.Signal` function in Lua, or `IAISystem::SendSignal`
    in C++.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 信号可以使用Lua中的`AI.Signal`函数或C++中的`IAISystem::SendSignal`发送。
- en: AI behaviors
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI行为
- en: Behaviors need to be assigned to each actor, and they define the decision making
    capabilities of the unit. By selecting behaviors at runtime using **behavior selection
    trees**, actors can give the impression of dynamically adjusting to their surroundings.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个角色都需要分配行为，并且它们定义了单位的决策能力。通过在运行时使用**行为选择树**选择行为，角色可以给人一种动态调整到周围环境的印象。
- en: Behavior selection trees are created using XML files placed in `Scripts/AI/SelectionTrees`.
    Each tree manages a set of **behavior leaves** , each leaf representing a type
    of AI behavior that can be enabled based on conditions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用放置在`Scripts/AI/SelectionTrees`中的XML文件创建行为选择树。每个树管理一组**行为叶子**，每个叶子代表一种可以根据条件启用的AI行为类型。
- en: '![AI behaviors](img/5909_06_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![AI行为](img/5909_06_01.jpg)'
- en: Sample
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样本
- en: 'For example, see a very basic form of a selection tree XML definition as shown:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如下所示，查看选择树XML定义的非常基本形式：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To allow for a better understanding of the sample, we''ll break it down a bit:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解示例，我们将对其进行一些分解：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This first snippet simply defines the name of the selection tree, and will
    be parsed by the AI system during AI initialization. If you want to rename your
    tree, simply change the `name` attribute:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个片段只是定义了选择树的名称，并且在AI初始化期间将被AI系统解析。如果要重命名树，只需更改`name`属性：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each selection tree can define a set of variables that can be set either based
    on signals (see the next snippet), or inside each behavior script.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选择树可以定义一组变量，这些变量可以根据信号（请参见下一个片段）或在每个行为脚本内部进行设置。
- en: 'Variables are simply Boolean conditions that can be queried in order to determine
    which leaf or behavior to select next:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 变量只是可以查询的布尔条件，以确定下一个叶子或行为选择：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each behavior tree can also listen to signals such as `OnEnemySeen`, in order
    to set the value of variables easily. For example, in the snippet that we just
    saw, the `IsEnemyClose` variable will always be set to true when the enemy has
    been spotted, and then set to false when the target is lost.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个行为树还可以监听诸如`OnEnemySeen`之类的信号，以便轻松设置变量的值。例如，在我们刚刚看到的片段中，当发现敌人时，`IsEnemyClose`变量将始终设置为true，然后在目标丢失时设置为false。
- en: 'We can then use the variable when querying for new leaves (see the following
    code snippet), allowing the AI to switch to different behavior scripts based on
    simple signal events:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在查询新叶子时使用变量（请参见下面的代码片段），允许AI根据简单的信号事件切换到不同的行为脚本：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By specifying leaves inside the `Priority` elements, we can enable behaviors
    (leaves) at runtime based on simple conditions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在“Priority”元素内指定叶子，我们可以根据简单的条件在运行时启用行为（叶子）。
- en: As an example, the previous snippet will enable the `BehaviorSampleCombat` behavior
    script when an enemy is close, otherwise it will fall back to the `BehaviorSampleIdle`
    behavior.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，前面的片段将在敌人接近时启用`BehaviorSampleCombat`行为脚本，否则将退回到`BehaviorSampleIdle`行为。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The behavior selection tree system will query leaves in order, and fall back
    to the last remaining leaf. In this case, it will query `BehaviorSampleCombat`
    first, and then fall back to `BehaviorSampleIdle` if the `IsEnemyClose` variable
    is set to false.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 行为选择树系统将按顺序查询叶子，并退回到最后剩下的叶子。在这种情况下，它将首先查询`BehaviorSampleCombat`，然后在`IsEnemyClose`变量设置为false时退回到`BehaviorSampleIdle`。
- en: IAIObject
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IAIObject
- en: Entities that have been registered with the AI system can call `IEntity::GetAI`
    to obtain their `IAIObject` pointer.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 已向AI系统注册的实体可以调用`IEntity::GetAI`来获取它们的`IAIObject`指针。
- en: 'By accessing the pointer to an entity''s AI object, we can manipulate the AI
    at runtime, for example, to set custom signals that we later intercept in our
    AI behavior scripts:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问实体的AI对象指针，我们可以在运行时操纵AI，例如设置自定义信号，然后在我们的AI行为脚本中拦截：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating custom AI
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义AI
- en: The process of creating custom AI is relatively straightforward, especially
    if you're comfortable with the actor system introduced in the previous chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义AI的过程相对简单，特别是如果您对上一章介绍的角色系统感到满意。
- en: There are two parts of each actor; its `IActor` implementation and the AI entity
    definition.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每个角色都有两个部分；它的`IActor`实现和AI实体定义。
- en: Registering an AI actor implementation
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册AI角色实现
- en: AI actors typically use the same `IActor` implementation as the player, or at
    least a shared derivation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: AI角色通常使用与玩家相同的`IActor`实现，或者至少是共享的派生。
- en: In C#
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在C#中
- en: Registering an AI actor in C# is very similar to how we did it in [Chapter 5](ch05.html
    "Chapter 5. Creating Custom Actors"), *Creating Custom Actors*. Essentially, all
    we have to do is derive from `CryEngine.AIActor` instead of `CryEngine.Actor`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中注册AI角色与我们在[第5章](ch05.html "第5章 创建自定义角色")中所做的非常相似，*创建自定义角色*。基本上，我们只需要从`CryEngine.AIActor`派生，而不是`CryEngine.Actor`。
- en: The `AIActor` class derives directly from `Actor`, and therefore does not sacrifice
    any of its callbacks and members. However, it has to be explicitly implemented
    in order to make CryENGINE treat this actor as if it is controlled by AI.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`AIActor`类直接从`Actor`派生，因此不会牺牲任何回调和成员。但是，必须明确实现它，以使CryENGINE将此角色视为由AI控制。'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should now be able to place your entity from the **AI** category in the
    **Entity** browser, within Sandbox:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够在Sandbox中的**Entity**浏览器中的**AI**类别中放置您的实体：
- en: '![In C#](img/5909_06_02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![在C#中](img/5909_06_02.jpg)'
- en: In C++
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在C++中
- en: 'As with the C# actor that we just saw, registering an actor with the AI system
    is not much work. Simply derive from the actor implementation we created in the
    previous chapter:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们刚刚看到的C#角色一样，注册一个角色到AI系统并不需要太多工作。只需从我们在上一章创建的角色实现派生即可：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then open your GameDLL''s `GameFactory.cpp` file and use the same setup for
    registering the actor, except the last parameter should be true to tell CryENGINE
    that this actor type will be controlled by AI:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后打开你的GameDLL的`GameFactory.cpp`文件，并使用相同的设置来注册角色，只是最后一个参数应该是true，告诉CryENGINE这种角色类型将由AI控制：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Your actor should now be present in the **AI** entity category in the **Entity**
    browser, following a recompilation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新编译后，你的角色现在应该出现在**实体**浏览器中的**AI**实体类别中。
- en: Creating the AI entity definition
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建AI实体定义
- en: When our AI actor is spawned, the AI system will search for an AI entity definition.
    The definitions exist to set default properties of an actor, for example, its
    Editor properties.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的AI角色生成时，AI系统将搜索AI实体定义。这些定义用于设置角色的默认属性，例如其编辑器属性。
- en: The first thing we need to do is open `Scripts/Entities/AI` and create a new
    `.lua` file with the same name as our `Actor` class. In our case, this will be
    `MyAIActor.lua` for the C++ implementation that we just created, and `MyCSharpAIActor.lua`
    for the C# actor.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是打开`Scripts/Entities/AI`并创建一个与我们的`Actor`类同名的新的`.lua`文件。在我们的情况下，这将是为了刚刚创建的C++实现的`MyAIActor.lua`，以及为了C#角色的`MyCSharpAIActor.lua`。
- en: The script is kept at a bare minimum of code, as we only need to load the base
    AI. The base AI is loaded using the `Script.ReloadScript` function.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本保持了最少量的代码，因为我们只需要加载基本AI。基本AI是使用`Script.ReloadScript`函数加载的。
- en: 'By default, CryENGINE uses `Scripts/Entities/AI/Shared/BasicAI.lua` as the
    base AI definition. We will use a custom implementation, `Scripts/Entities/AI/AISample_x.lua`
    in order to cut down on unnecessary code that is irrelevant to this chapter:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CryENGINE使用`Scripts/Entities/AI/Shared/BasicAI.lua`作为基本AI定义。我们将使用自定义实现，`Scripts/Entities/AI/AISample_x.lua`，以减少与本章节无关的不必要代码：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That's it! Your AI is now properly registered, and should now be placeable via
    the Editor.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你的AI现在已经正确注册，现在应该可以通过编辑器放置。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the base AI definition, see the *AI base definition
    breakdown* section later on in this chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关基本AI定义的更多信息，请参见本章后面的*AI基本定义分解*部分。
- en: AI behaviors and characters
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI行为和角色
- en: 'As we spawn our custom AI actor, four entity properties should appear by default.
    These determine which systems the AI should use for decision making:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们生成自定义AI角色时，默认情况下应该出现四个实体属性。这些属性确定AI应该使用哪些系统进行决策：
- en: '![AI behaviors and characters](img/5909_06_03.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![AI行为和角色](img/5909_06_03.jpg)'
- en: Understanding and using behavior selection trees
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解和使用行为选择树
- en: The behavior selection tree is the most important entity property for our AI
    actor, as it determines which behavior selection tree to use for the actor. If
    our project contains multiple behavior selection trees, we can easily spawn multiple
    AI actors that behave very differently due to the separate selection trees. The
    selection tree system exists in order to provide a way to query and select behavior
    scripts at runtime.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 行为选择树是我们的AI角色最重要的实体属性，因为它确定了角色使用哪个行为选择树。如果我们的项目包含多个行为选择树，我们可以轻松生成行为非常不同的多个AI角色，因为它们使用了不同的选择树。选择树系统存在是为了提供一种在运行时查询和选择行为脚本的方法。
- en: 'To see which trees are currently available, or to create your own, navigate
    to `Scripts/AI/SelectionTrees`. For our sample, we''ll be using the `FogOfWar`
    selection tree present in `Scripts/AI/SelectionTrees/FogOfWar.xml`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前可用的树，或创建自己的树，请导航至`Scripts/AI/SelectionTrees`。对于我们的示例，我们将使用`Scripts/AI/SelectionTrees/FogOfWar.xml`中的`FogOfWar`选择树：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Variables
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变量
- en: Each selection tree exposes a set of variables that can be set at runtime. The
    variables will be queried by leaves in order to determine which behavior to activate.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选择树都公开一组可以在运行时设置的变量。叶子将查询这些变量，以确定激活哪种行为。
- en: Signal variables
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 信号变量
- en: Signal variables provide a simple way to set variables when signals are received.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 信号变量提供了一种在接收到信号时设置变量的简单方法。
- en: For example, in the previous tree, we can see that `AwareOfPlayer` is dynamically
    set when the `OnEnemySeen` signal is received. The variables are then set to false
    when the AI loses track of the player.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在前面的树中，我们可以看到当接收到`OnEnemySeen`信号时，`AwareOfPlayer`会动态设置。然后当AI失去对玩家的追踪时，这些变量将被设置为false。
- en: Leaves / behavior queries
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 叶子/行为查询
- en: The leaves determine which behavior to play, based on a variable condition.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 叶子确定根据变量条件播放哪种行为。
- en: In the previous tree, we can see that the `FogOfWarIdleST` behavior is activated
    by default when all other conditions are set to false. However, say that the `IsFar`
    variable is set to true, the system will automatically switch to the `FogOfWarSeekST`
    behavior.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的树中，我们可以看到当所有其他条件都设置为false时，默认情况下会激活`FogOfWarIdleST`行为。但是，假设`IsFar`变量设置为true，系统将自动切换到`FogOfWarSeekST`行为。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Behaviors are loaded from the `Scripts/AI/Behaviors/Personalities/` directory,
    in our case, it'll find reference behaviors inside `Scripts/AI/Behaviors/Personalities/FogOfWarST/`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 行为从`Scripts/AI/Behaviors/Personalities/`目录中加载，在我们的情况下，它将在`Scripts/AI/Behaviors/Personalities/FogOfWarST/`中找到参考行为。
- en: Character
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色
- en: The `Character` property is used to set the AI character for our actor.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Character`属性用于设置角色的AI角色。'
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In our sample, the `Character` property will default to an empty string, as
    the system is considered deprecated since the introduction of behavior selection
    trees (Have a look at the *Understanding and using behavior selection trees* section).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`Character`属性将默认为空字符串，因为自从引入行为选择树以来，该系统被视为已弃用（请查看*理解和使用行为选择树*部分）。
- en: AI characters are contained in `Scripts/AI/Characters/Personalities` as the
    `.lua` scripts. For example, we could open and modify `Scripts/AI/Characters/Personalities/FogOfWar.lua`
    in order to modify our default personality.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: AI角色包含在“Scripts/AI/Characters/Personalities”中，以“.lua”脚本的形式。例如，我们可以打开并修改“Scripts/AI/Characters/Personalities/FogOfWar.lua”以修改我们的默认个性。
- en: You can also create new personalities simply by adding a new file in the `Personalities`
    directory, using `FogOfWar` as a baseline.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在“Personalities”目录中添加新文件，以“FogOfWar”作为基线，来创建新的个性。
- en: The `Character` property defines all applicable behaviors, in our case `FogOfWarAttack`,
    `FogOfWarSeek`, `FogOfWarEscape`, and `FogOfWarIdle`. The actor will be able to
    switch between these behaviors at runtime, based on internal and external conditions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: “Character”属性定义了所有适用的行为，在我们的例子中是“FogOfWarAttack”、“FogOfWarSeek”、“FogOfWarEscape”和“FogOfWarIdle”。角色将能够在运行时根据内部和外部条件在这些行为之间切换。
- en: NavigationType
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航类型
- en: The `NavigationType` property determines which type of AI navigation to use.
    This allows the system to dynamically determine which paths are viable for the
    type of AI.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “NavigationType”属性确定要使用哪种类型的AI导航。这允许系统动态确定哪些路径适用于该类型的AI。
- en: This defaults to MediumSizedCharacter in our sample, and can be set to any navigation
    definition contained in `Scripts/AI/Navigation.xml`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，默认为MediumSizedCharacter，并且可以设置为包含在“Scripts/AI/Navigation.xml”中的任何导航定义。
- en: Creating custom behaviors
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义行为
- en: We're almost done! The only step that remains is understanding how to create
    and modify AI behaviors, activated using the behavior selection tree we described
    previously.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快要完成了！唯一剩下的步骤是理解如何创建和修改AI行为，使用我们之前描述的行为选择树来激活。
- en: To start, open `Scripts/AI/Behaviors/Personalities/FogOfWarST/FogOfWarIdleST.lua`
    with the text editor of your choice. Due to the behavior tree setup described
    earlier, this is the behavior that will be activated when all other variables
    are set to false.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用您选择的文本编辑器打开“Scripts/AI/Behaviors/Personalities/FogOfWarST/FogOfWarIdleST.lua”。由于之前描述的行为树设置，这是在所有其他变量都设置为false时将被激活的行为。
- en: Behaviors are created by calling the `CreateAIBehavior` function, with the first
    parameter set to the name of the new behavior, and the second containing the behavior
    itself in a table.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用“CreateAIBehavior”函数来创建行为，第一个参数设置为新行为的名称，第二个包含行为本身的表。
- en: 'Therefore, the bare minimum for a behavior would be:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，行为的最低要求是：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This code snippet would set `Alertness` of the AI to 0 at all times, and does
    absolutely nothing when the behavior starts (`Constructor`) and ends (`Destructor`).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段会始终将AI的“Alertness”设置为0，并且在行为开始（“Constructor”）和结束（“Destructor”）时什么也不做。
- en: 'By looking at the `FogOfWarIdleST` behavior definition, we can see what it
    does:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看“FogOfWarIdleST”行为定义，我们可以看到它的作用：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the behavior is activated, we should see `Idling…` in the console, assuming
    that the log verbosity is set high enough (set using `log_verbosity CVar`).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当激活行为时，我们应该在控制台中看到“Idling…”，假设日志详细程度足够高（使用“log_verbosity CVar”设置）。
- en: After logging, the behavior will reset the `AwareOfPlayer` variable to false
    via the `AI.SetBehaviorVariable` function. We can use the function at any time
    to change the value of variables, effectively telling the behavior selection tree
    that another behavior should be queried.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录之后，该行为将通过“AI.SetBehaviorVariable”函数将“AwareOfPlayer”变量重置为false。我们可以随时使用该函数来改变变量的值，有效地告诉行为选择树应该查询另一个行为。
- en: After setting the variable to false, the constructor selects the `fow_idle_st`
    goal pipe.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量设置为false后，构造函数会选择“fow_idle_st”目标管道。
- en: Listening to signals
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监听信号
- en: 'To listen to signals in behaviors, simply create a new function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要在行为中监听信号，只需创建一个新函数：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will then be called when the `OnMySignal` signal is sent, along with the
    associated entity and behavior table.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当发送“OnMySignal”信号时，将调用此函数，并附带相关的实体和行为表。
- en: AI base definition breakdown
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AI基本定义分解
- en: Previously in the chapter, we created our own AI definition that relied on the
    `Scripts/Entities/AI/AISample_x.lua` base definition. This section will describe
    what the base definition does, in order to allow for a better understanding of
    the definition setup.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们之前创建了依赖于“Scripts/Entities/AI/AISample_x.lua”基本定义的自定义AI定义。本节将描述基本定义的作用，以便更好地理解定义设置。
- en: To start, open the definition with the text editor of your choice, for example,
    Notepad++.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用您选择的文本编辑器（例如Notepad++）打开定义。
- en: The AISample_x table
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AISample_x表
- en: The first lines of code we'll see when opening `AISample_x.lua` are its table
    definition, which defines each characters' default properties.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开“AISample_x.lua”时，我们将看到的第一行代码是其表定义，它定义了每个角色的默认属性。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Each AI definition can override properties set in the base definition.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每个AI定义都可以覆盖基本定义中设置的属性。
- en: The Properties table
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性表
- en: The Properties table works as it does with the standard Lua entities, to define
    properties that appear when the entity is selected in the Editor.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 属性表的工作方式与标准Lua实体相同，用于定义在编辑器中选择实体时出现的属性。
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default properties in our base AI definition are read from `CryAISystem.dll`.
    Removal of these properties is not supported, and will result in AI initialization
    failure.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本AI定义中的默认属性是从“CryAISystem.dll”中读取的。不支持删除这些属性，否则会导致AI初始化失败。
- en: The AIMovementAbility table
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AIMovementAbility表
- en: The `AIMovementAbility` subtable defines the movement capabilities of our actor,
    for example, walk and run speed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: “AIMovementAbility”子表定义了我们角色的移动能力，例如行走和奔跑速度。
- en: The CreateAI function
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CreateAI函数
- en: The `CreateAI` function merges the base AI table with that of the specified
    child. This means that any table present in the AI base definition will be present
    in any AI definition that derives from it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: “CreateAI”函数将基本AI表与指定子表合并。这意味着在AI基本定义中存在的任何表都将存在于从中派生的任何AI定义中。
- en: The `CreateAI` function also makes the entity spawnable, and exposes it to the
    network by calling the AI's `Expose()` function.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreateAI`函数还使实体可生成，并通过调用AI的`Expose()`函数将其暴露给网络。'
- en: The RegisterAI function
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RegisterAI函数
- en: The `RegisterAI` function is called when the actor should be registered with
    the AI system. This is called automatically on entity spawn and on editor property
    change.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`RegisterAI`函数在应该将角色注册到AI系统时调用。这在实体生成时和编辑器属性更改时会自动调用。'
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about the core idea and implementation of the
    AI system and have created a custom AI actor implementation.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了AI系统的核心思想和实现，并创建了自定义的AI角色实现。
- en: Having created our own AI entity definition, and behavior selection trees, you
    should be aware of how AI actors are created in the CryENGINE.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建我们自己的AI实体定义和行为选择树，您应该了解到在CryENGINE中如何创建AI角色。
- en: You should now have a good understanding of how to use the AI system to your
    advantage, allowing you to create AI-controlled units that patrol your game world.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该对如何利用AI系统有了很好的理解，从而可以创建巡逻游戏世界的AI控制单位。
- en: If you're not quite done with AI, why not try and use your newly gained knowledge
    to create something a bit more complex of your own choice?
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对AI还没有完全掌握，为什么不尝试利用您新获得的知识来创建自己选择的更复杂的东西呢？
- en: In the next chapter, we'll be covering the process of creating custom user interfaces
    allowing the creation of main menus and **Heads-up Display** (**HUD**).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍创建自定义用户界面的过程，允许创建主菜单和**抬头显示**（**HUD**）。
