- en: Chapter 18. Localization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章 本地化
- en: This chapter is quick and simple, but what we will learn to do can make your
    app accessible to millions of potential users. We will see how to add additional
    languages and we will see why adding text the correct way via String resources
    benefits us when it comes to adding multiple languages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容简单明了，但我们将学会的内容可以使您的应用程序面向数百万潜在用户。我们将看到如何添加额外的语言，以及为什么通过字符串资源正确添加文本在添加多种语言时对我们有益。
- en: 'In this chapter, we will do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将执行以下操作：
- en: Make the Note to self app multilingual by adding the Spanish and German languages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过添加西班牙语和德语语言使Note to self应用程序支持多语言
- en: Learn how to better use **String resources**
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何更好地使用**字符串资源**
- en: Let's get started.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Making the Note to self app Spanish, English, and German
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使Note to self应用程序支持西班牙语、英语和德语
- en: First, we need to add some folders to our project – one for each new language.
    The text is classed as a **resource**, and, consequently, needs to go in the `res`
    folder. Follow these steps to add Spanish support to the project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的项目添加一些文件夹 - 每种新语言一个文件夹。文本被归类为**资源**，因此需要放在`res`文件夹中。按照以下步骤为项目添加西班牙语支持。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While the source files for this project are provided in the `Chapter18` folder,
    they are just for reference. You need to go through the processes described next
    to achieve multilingual functionality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然该项目的源文件存储在`Chapter18`文件夹中，但它们仅供参考。您需要按照下面描述的流程来实现多语言功能。
- en: Adding Spanish support
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加西班牙语支持
- en: 'Follow the next steps to add the Spanish language:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加西班牙语：
- en: Right-click on the `res` folder, then select **New** | **Android resource directory**.
    In the **Directory name** field, type `values-es`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`res`文件夹，然后选择**新建** | **Android 资源目录**。在**目录名称**字段中输入`values-es`。
- en: Now we need to add a file in which we can place all our Spanish translations.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加一个文件，我们可以在其中放置所有我们的西班牙翻译。
- en: Right-click on `res`, then select **New** | **Android resource file** and type
    `strings.xml` in the **File name** field. Type `values-es` in the **Directory
    name** field.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`res`，然后选择**新建** | **Android 资源文件**，在**文件名**字段中输入`strings.xml`。在**目录名称**字段中输入`values-es`。
- en: We now have a `strings.xml` file that any device set to use the Spanish language
    will refer to. To be clear, we now have two distinct `strings.xml` files.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个`strings.xml`文件，任何设置为使用西班牙语的设备都将引用它。明确地说，我们现在有两个不同的`strings.xml`文件。
- en: Adding German support
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加德语支持
- en: Follow these steps to add German language support.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加德语语言支持。
- en: Right-click on the `res` folder then select **New** | **Android resource directory**.
    In the **Directory name** field, type `values-de`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`res`文件夹，然后选择**新建** | **Android 资源目录**。在**目录名称**字段中输入`values-de`。
- en: Now we need to add a file in which we can place all our German translations.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加一个文件，我们可以在其中放置所有我们的德语翻译。
- en: Right-click on `res`, then select **New** | **Android resource file** and type
    `strings.xml` in the **File name** field. Type `values-de` in the **Directory
    name** field.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`res`，然后选择**新建** | **Android 资源文件**，在**文件名**字段中输入`strings.xml`。在**目录名称**字段中输入`values-de`。
- en: The following screenshot shows what the `strings.xml` folder looks like. You
    are probably wondering where the `strings.xml` folder came from, as it doesn't
    correspond to the structure we seemed to be creating in the previous steps.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了`strings.xml`文件夹的外观。您可能想知道`strings.xml`文件夹是从哪里来的，因为它与我们似乎在之前的步骤中创建的结构不对应。
- en: 'Android Studio is helping us to organize our files and folders as it is required
    by the Android operating system in the APK format. You can, however, clearly see
    the Spanish and German files indicated by their flags as well as their **(de)**
    and **(es)** postfixes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio正在帮助我们组织我们的文件和文件夹，因为这是Android操作系统在APK格式中所需的。但是，您可以清楚地看到西班牙语和德语文件，它们通过它们的国旗以及它们的**(de)**和**(es)**后缀来表示：
- en: '![Adding German support](img/B12806_C18_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![添加德语支持](img/B12806_C18_01.jpg)'
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Depending on your Android Studio settings, you might not see the country flag
    icons. Provided that you can see three `strings.xml` files, one without a postfix,
    one with **(de)**, and one with **(es)**, then you are ready to continue.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的Android Studio设置，您可能看不到国旗图标。只要您能看到三个`strings.xml`文件，一个没有后缀，一个带有**(de)**，一个带有**(es)**，那么您就可以继续了。
- en: Now we can add the translations to the files we just created.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将翻译添加到刚刚创建的文件中。
- en: Adding the String resources
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加字符串资源
- en: As we know, the `strings.xml` file contains the words that the app will display,
    words such as important, to-do, and idea. By having a `strings.xml` file for each
    language we want to support, we can then leave Android to choose the appropriate
    text depending upon the language settings of the user.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，`strings.xml`文件包含应用程序将显示的单词，例如important，to-do和idea。通过为每种我们想要支持的语言创建一个`strings.xml`文件，我们可以让Android根据用户的语言设置选择适当的文本。
- en: As you go through the following, notice that, although we place the translation
    of whatever word we are translating as the value, the `name` attribute remains
    the same. If you think about it, this is logical, because it is the `name` attribute
    that we refer to in our layout files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，请注意，尽管我们将要翻译的单词的翻译放在值中，但`name`属性保持不变。如果你仔细想想，这是合乎逻辑的，因为我们在布局文件中引用的是`name`属性。
- en: Let's provide the translations, see what we have achieved, and then come back
    and discuss what we will do about text in our Kotlin code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提供翻译，看看我们取得了什么成就，然后回来讨论我们将如何处理Kotlin代码中的文本。
- en: 'The simplest way to achieve this code is to copy and paste the code from the
    original `strings.xml` file and then edit the values of each of the `name` attributes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此代码的最简单方法是从原始的`strings.xml`文件中复制并粘贴代码，然后编辑每个`name`属性的值：
- en: 'Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the Spanish flag or **(es)** postfix. Edit the file to look like this:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过双击打开`strings.xml`文件。确保选择靠近西班牙国旗或**(es)**后缀的文件。编辑文件使其如下所示：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the German flag or **(de)** postfix. Edit the file to look like this:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过双击打开`strings.xml`文件。确保选择靠近德国国旗或**(de)**后缀的文件。编辑文件使其看起来像这样：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you don't provide all the string resources in the extra (Spanish and German)
    `strings.xml` files, then the missing resources will be taken from the default
    file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在额外的（西班牙语和德语）`strings.xml`文件中提供所有的字符串资源，那么缺失的资源将从默认文件中获取。
- en: What we have done is provided two translations. Android knows which translation
    is for which language because of the folders they are placed in. Furthermore,
    we have used a **String identifier** (the `name` attribute) to refer to the translations.
    Look back at the previous code and you will see that the same identifier is used
    for both translations as well as in the original `strings.xml` file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是提供了两种翻译。Android知道哪种翻译是哪种语言，因为它们放置在不同的文件夹中。此外，我们使用了**字符串标识符**（`name`属性）来引用这些翻译。回顾一下之前的代码，你会发现相同的标识符被用于两种翻译，以及原始的`strings.xml`文件中。
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can even localize to different versions of a language, such as US or United
    Kingdom English. The complete list of codes can be found at [http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android](http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android).
    You can even localize resources such as images and sound. Find out more about
    this at [http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以将本地化到不同版本的语言，比如美国或英国英语。完整的代码列表可以在[http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android](http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android)找到。你甚至可以本地化资源，比如图像和声音。在[http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html)了解更多信息。
- en: The translations were copy and pasted from Google translate, so it is very likely
    that some of the translations are far from correct. Doing translation on the cheap
    like this can be an effective way to get an app with a basic set of String resources
    onto devices of users who speak different languages to yourself. Once you start
    having any depth of translation needed, perhaps for the lines of a story-driven
    game or social media app, you will certainly benefit from having the translation
    done by a human professional.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些翻译是从谷歌翻译中复制并粘贴而来的，因此很可能有些翻译与正确的相去甚远。像这样廉价地进行翻译可能是将具有基本字符串资源集的应用程序放到使用不同语言的用户的设备上的有效方式。一旦你开始需要任何深度的翻译，也许是为了叙事驱动的游戏或社交媒体应用程序的文本，你肯定会受益于由人类专业人员进行的翻译。
- en: The purpose of this exercise is to show how Android works, not how to translate.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的目的是展示Android的工作原理，而不是如何翻译。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: My sincere apologies to any Spanish or German speakers who are likely to be
    able to see the limitations of the translations provided here.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可能能够看到这里提供的翻译的局限性的西班牙或德国人，我表示诚挚的歉意。
- en: Now that we have the translations, we can see them in action – up to a point.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了翻译，我们可以看到它们的作用-到一定程度。
- en: Running Note to self in German or Spanish
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在德语或西班牙语中运行Note to self
- en: 'Run the app to see whether it is working as expected. Now, we can change the
    localization settings to see it in Spanish. Different devices vary slightly in
    how to do this, but the Pixel 2 XL emulator can be changed by clicking on the
    **Custom Locale** app:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，看看它是否按预期工作。现在，我们可以更改本地化设置，以便在西班牙语中查看。不同的设备在如何做到这一点上略有不同，但Pixel 2 XL模拟器可以通过点击**Custom
    Locale**应用程序进行更改：
- en: '![Running Note to self in German or Spanish](img/B12806_C18_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![在德语或西班牙语中运行Note to self](img/B12806_C18_02.jpg)'
- en: 'Next, select **es-ES** and then click the **SELECT ''ES''** button in the bottom-left
    of the screen, as shown in the next screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择**es-ES**，然后点击屏幕左下角的**SELECT 'ES'**按钮，如下一张截图所示：
- en: '![Running Note to self in German or Spanish](img/B12806_C18_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![在德语或西班牙语中运行Note to self](img/B12806_C18_03.jpg)'
- en: 'Now you can run the app in the usual way. Here is a screenshot showing the
    app running in Spanish. I have photoshopped a few images side by side to show
    a few different screens of the Note to self app:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以以通常的方式运行应用程序。这里有一张截图显示了应用程序在西班牙语中的运行情况。我用Photoshop将一些图像并排放在一起，展示了Note to
    self应用程序的一些不同屏幕：
- en: '![Running Note to self in German or Spanish](img/B12806_C18_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![在德语或西班牙语中运行Note to self](img/B12806_C18_04.jpg)'
- en: You can clearly see that our app is mainly translated to Spanish. Obviously,
    the text that the user enters will be in whatever language they speak – that is
    not a flaw of our app. However, look at the images closely and you will notice
    that I have pointed out a couple of places where the text is still in English.
    We still have some untranslated text in each of our dialog windows.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以清楚地看到我们的应用主要是翻译成了西班牙语。显然，用户输入的文本将是他们所说的任何语言-这不是我们应用程序的缺陷。然而，仔细看图片，你会注意到我指出了一些地方，文本仍然是英文的。我们在每个对话窗口中仍然有一些未翻译的文本。
- en: This is because the text is contained directly within our Kotlin code. As we
    have seen, it is easy to use String resources in multiple languages and then refer
    to them in our layouts, but how do we refer to String resources from our Kotlin
    code?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为文本直接包含在我们的Kotlin代码中。正如我们所见，使用多种语言的字符串资源并在布局中引用它们是很容易的，但是我们如何从我们的Kotlin代码中引用字符串资源呢？
- en: Making the translations work in Kotlin code
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使翻译在Kotlin代码中起作用
- en: The first thing to do is create the resources in each of the three `strings.xml`
    files. Here are the two resources that need adding to the three different files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是在三个`strings.xml`文件中创建资源。这是需要添加到三个不同文件中的两个资源。
- en: 'In `strings.xml` (without any flag or postfix), add these two resources within
    the `<resources></resources>` tags:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`strings.xml`（没有任何标志或后缀），在`<resources></resources>`标签中添加这两个资源：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `strings.xml` file with the Spanish flag and/or the **(es)** postfix,
    add these two resources within the `<resources></resources>` tags:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有西班牙国旗和/或**(es)**后缀的`strings.xml`文件中，在`<resources></resources>`标签内添加以下两个资源：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `strings.xml` file with the German flag and/or the **(de)** postfix,
    add these two resources within the `<resources></resources>` tags:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有德国国旗和/或**(de)**后缀的`strings.xml`文件中，在`<resources></resources>`标签内添加以下两个资源：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we need to edit some Kotlin code to refer to a resource instead of a hard-coded
    String.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要编辑一些Kotlin代码，以引用资源而不是硬编码的字符串。
- en: 'Open the `DialogNewNote.kt` file and find this line of code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`DialogNewNote.kt`文件，找到以下代码行：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Edit it to use the String resource we just added instead of the hard-coded
    text as shown next:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑它，使用我们刚刚添加的字符串资源，而不是硬编码的文本，如下所示：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The new code uses the chained `setView`, `setMessage`, and `resources.getString`
    functions to replace the previously hard-coded `"Add a new note"` text. Look closely,
    and you will see that the argument sent to `getString` is the String `R.string.add_new_note`
    identifier.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码使用了链式的`setView`、`setMessage`和`resources.getString`函数来替换先前硬编码的`"Add a new
    note"`文本。仔细看，你会发现传递给`getString`的参数是字符串`R.string.add_new_note`标识符。
- en: The `R.string` code refers to the String resources in the `res` folder, and
    `add_new_note` is our identifier. Android will then be able to decide which version
    (default, Spanish, or German) is appropriate based upon the locale of the device
    on which the app is running.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.string`代码指的是`res`文件夹中的字符串资源，`add_new_note`是我们的标识符。然后，Android将能够根据应用程序运行的设备的语言环境决定哪个版本（默认、西班牙语或德语）是合适的。'
- en: We have one more hard-coded String resource to change.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个硬编码的字符串资源要更改。
- en: 'Open the `DialogShowNote.kt` file and find this line of code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`DialogShowNote.kt`文件，找到以下代码行：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit it to use the String resource we just added instead of the hard-coded
    text as shown next:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑它，使用我们刚刚添加的字符串资源，而不是硬编码的文本，如下所示：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The new code again uses the chained `setView`, `setMessage`, and `resources.getString`
    functions to replace the previously hard-coded `"Your note"` text. And, again,
    the argument sent to `getString` is the String identifier, in this case `R.string.your_note`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码再次使用了链式的`setView`、`setMessage`和`resources.getString`函数来替换先前硬编码的`"Your note"`文本。而且，再次，传递给`getString`的参数是字符串标识符，在这种情况下是`R.string.your_note`。
- en: 'Android can now decide which version (default, Spanish, or German) is appropriate
    based upon the locale of the device on which the app is running. The next screenshot
    shows that the new note screen now has the opening text in the appropriate language:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Android可以根据应用程序运行的设备的语言环境决定哪个版本（默认、西班牙语或德语）是合适的。下一个屏幕截图显示，新的笔记屏幕现在以适当的语言显示开头文本：
- en: '![Making the translations work in Kotlin code](img/B12806_C18_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![使Kotlin代码中的翻译工作](img/B12806_C18_05.jpg)'
- en: You can add as many String resources as you like. As a reminder from [Chapter
    3](ch03.html "Chapter 3. Exploring Android Studio and the Project Structure"),
    *Exploring Android Studio and the Project Structure*, note that using String resources
    is the recommended way to add all text to all projects. The tutorials in this
    book (apart from Note to Self) will tend to hard-code them to make a more compact
    tutorial.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加任意多个字符串资源。作为[第3章](ch03.html "第3章。探索Android Studio和项目结构")的提醒，*探索Android
    Studio和项目结构*，请注意，使用字符串资源是向所有项目添加所有文本的推荐方式。本书中的教程（除了Note to Self之外）将倾向于硬编码它们，以使教程更紧凑。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We can now go global with our apps, as well as add the more flexible String
    resources instead of hard-coding all the text.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以全球化我们的应用，以及添加更灵活的字符串资源，而不是硬编码所有文本。
- en: In the next chapter, we will see how we can add cool animations to our layouts
    using animations and interpolators.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用动画和插值器为我们的布局添加酷炫的动画效果。
