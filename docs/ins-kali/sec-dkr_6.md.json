["```\n**docker-machine inspect default**\n\n**{**\n **\"ConfigVersion\": 3,**\n **\"Driver\": {**\n **\"IPAddress\": \"192.168.99.100\",**\n **\"MachineName\": \"default\",**\n **\"SSHUser\": \"docker\",**\n **\"SSHPort\": 50858,**\n **\"SSHKeyPath\": \"/Users/scottgallagher/.docker/machine/machines/default/id_rsa\",**\n **\"StorePath\": \"/Users/scottgallagher/.docker/machine\",**\n **\"SwarmMaster\": false,**\n **\"SwarmHost\": \"tcp://0.0.0.0:3376\",**\n **\"SwarmDiscovery\": \"\",**\n **\"VBoxManager\": {},**\n **\"CPU\": 1,**\n **\"Memory\": 2048,**\n **\"DiskSize\": 204800,**\n **\"Boot2DockerURL\": \"\",**\n **\"Boot2DockerImportVM\": \"\",**\n **\"HostDNSResolver\": false,**\n **\"HostOnlyCIDR\": \"192.168.99.1/24\",**\n **\"HostOnlyNicType\": \"82540EM\",**\n **\"HostOnlyPromiscMode\": \"deny\",**\n **\"NoShare\": false,**\n **\"DNSProxy\": false,**\n **\"NoVTXCheck\": false**\n **},**\n **\"DriverName\": \"virtualbox\",**\n **\"HostOptions\": {**\n **\"Driver\": \"\",**\n **\"Memory\": 0,**\n **\"Disk\": 0,**\n **\"EngineOptions\": {**\n **\"ArbitraryFlags\": [],**\n **\"Dns\": null,**\n **\"GraphDir\": \"\",**\n **\"Env\": [],**\n **\"Ipv6\": false,**\n **\"InsecureRegistry\": [],**\n **\"Labels\": [],**\n **\"LogLevel\": \"\",**\n **\"StorageDriver\": \"\",**\n **\"SelinuxEnabled\": false,**\n **\"TlsVerify\": true,**\n **\"RegistryMirror\": [],**\n **\"InstallURL\": \"https://get.docker.com\"**\n **},**\n **\"SwarmOptions\": {**\n **\"IsSwarm\": false,**\n **\"Address\": \"\",**\n **\"Discovery\": \"\",**\n **\"Master\": false,**\n **\"Host\": \"tcp://0.0.0.0:3376\",**\n **\"Image\": \"swarm:latest\",**\n **\"Strategy\": \"spread\",**\n **\"Heartbeat\": 0,**\n **\"Overcommit\": 0,**\n **\"ArbitraryFlags\": [],**\n **\"Env\": null**\n **},**\n **\"AuthOptions\": {**\n **\"CertDir\": \"/Users/scottgallagher/.docker/machine/certs\",**\n **\"CaCertPath\": \"/Users/scottgallagher/.docker/machine/certs/ca.pem\",**\n **\"CaPrivateKeyPath\": \"/Users/scottgallagher/.docker/machine/certs/ca-key.pem\",**\n **\"CaCertRemotePath\": \"\",**\n **\"ServerCertPath\": \"/Users/scottgallagher/.docker/machine/machines/default/server.pem\",**\n **\"ServerKeyPath\": \"/Users/scottgallagher/.docker/machine/machines/default/server-key.pem\",**\n **\"ClientKeyPath\": \"/Users/scottgallagher/.docker/machine/certs/key.pem\",**\n **\"ServerCertRemotePath\": \"\",**\n **\"ServerKeyRemotePath\": \"\",**\n **\"ClientCertPath\": \"/Users/scottgallagher/.docker/machine/certs/cert.pem\",**\n **\"ServerCertSANs\": [],**\n **\"StorePath\": \"/Users/scottgallagher/.docker/machine/machines/default\"**\n **}**\n **},**\n **\"Name\": \"default\"**\n**}**\n\n```", "```\n **\"SwarmHost\": \"tcp://0.0.0.0:3376\",**\n\n```", "```\n **\"AuthOptions\": {**\n **\"CertDir\": \"/Users/scottgallagher/.docker/machine/certs\",**\n **\"CaCertPath\": \"/Users/scottgallagher/.docker/machine/certs/ca.pem\",**\n **\"CaPrivateKeyPath\": \"/Users/scottgallagher/.docker/machine/certs/ca-key.pem\",**\n **\"CaCertRemotePath\": \"\",**\n **\"ServerCertPath\": \"/Users/scottgallagher/.docker/machine/machines/default/server.pem\",**\n **\"ServerKeyPath\": \"/Users/scottgallagher/.docker/machine/machines/default/server-key.pem\",**\n **\"ClientKeyPath\": \"/Users/scottgallagher/.docker/machine/certs/key.pem\",**\n **\"ServerCertRemotePath\": \"\",**\n **\"ServerKeyRemotePath\": \"\",**\n **\"ClientCertPath\": \"/Users/scottgallagher/.docker/machine/certs/cert.pem\",**\n **\"ServerCertSANs\": [],**\n **\"StorePath\": \"/Users/scottgallagher/.docker/machine/machines/default\"**\n **}**\n\n```", "```\n**docker-machine ls**\n**NAME      ACTIVE   URL          STATE     URL SWARM   DOCKER   ERRORS**\n**default   *        virtualbox   Running   tcp://192.168.99.100:2376  v1.9.1** \n\n```", "```\n**$ docker run --name mysql --read-only -v /var/lib/mysql v /tmp --e MYSQL_ROOT_PASSWORD=password -d mysql**\n\n```", "```\n**$ docker exec mysql touch /opt/filename**\n\n```", "```\n**$ docker run -d -v /opt/uploads:/opt/uploads:/opt/uploads:ro nginx**\n\n```", "```\n**$ docker run --device=/dev/sdb:/dev/sdc2 -it ubuntu:latest /bin/bash**\n\n```", "```\n**$ docker run --device=/dev/sdb:/dev/sdc2:r -it ubuntu:latest /bin/bash**\n\n```", "```\n**$ docker run --help** \n\n**Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]**\n\n**Run a command in a new container**\n\n **-a, --attach=[]                 Attach to STDIN, STDOUT or STDERR**\n **--add-host=[]                   Add a custom host-to-IP mapping (host:ip)**\n **--blkio-weight=0                Block IO (relative weight), between 10 and 1000**\n **--cpu-shares=0                  CPU shares (relative weight)**\n **--cap-add=[]                    Add Linux capabilities**\n **--cap-drop=[]                   Drop Linux capabilities**\n **--cgroup-parent=                Optional parent cgroup for the container**\n **--cidfile=                      Write the container ID to the file**\n **--cpu-period=0                  Limit CPU CFS (Completely Fair Scheduler) period**\n **--cpu-quota=0                   Limit CPU CFS (Completely Fair Scheduler) quota**\n **--cpuset-cpus=                  CPUs in which to allow execution (0-3, 0,1)**\n **--cpuset-mems=                  MEMs in which to allow execution (0-3, 0,1)**\n **-d, --detach=false              Run container in background and print container ID**\n **--device=[]                     Add a host device to the container**\n **--disable-content-trust=true    Skip image verification**\n **--dns=[]                        Set custom DNS servers**\n **--dns-opt=[]                    Set DNS options**\n **--dns-search=[]                 Set custom DNS search domains**\n **-e, --env=[]                    Set environment variables**\n **--entrypoint=                   Overwrite the default ENTRYPOINT of the image**\n **--env-file=[]                   Read in a file of environment variables**\n **--expose=[]                     Expose a port or a range of ports**\n **--group-add=[]                  Add additional groups to join**\n **-h, --hostname=                 Container host name**\n **--help=false                    Print usage**\n **-i, --interactive=false         Keep STDIN open even if not attached**\n **--ipc=                          IPC namespace to use**\n **--kernel-memory=                Kernel memory limit**\n **-l, --label=[]                  Set meta data on a container**\n **--label-file=[]                 Read in a line delimited file of labels**\n **--link=[]                       Add link to another container**\n **--log-driver=                   Logging driver for container**\n **--log-opt=[]                    Log driver options**\n **--lxc-conf=[]                   Add custom lxc options**\n **-m, --memory=                   Memory limit**\n **--mac-address=                  Container MAC address (e.g. 92:d0:c6:0a:29:33)**\n **--memory-reservation=           Memory soft limit**\n **--memory-swap=                  Total memory (memory + swap), '-1' to disable swap**\n **--memory-swappiness=-1          Tuning container memory swappiness (0 to 100)**\n **--name=                         Assign a name to the container**\n **--net=default                   Set the Network for the container**\n **--oom-kill-disable=false        Disable OOM Killer**\n **-P, --publish-all=false         Publish all exposed ports to random ports**\n **-p, --publish=[]                Publish a container's port(s) to the host**\n **--pid=                          PID namespace to use**\n **--privileged=false              Give extended privileges to this container**\n **--read-only=false               Mount the container's root filesystem as read only**\n **--restart=no                    Restart policy to apply when a container exits**\n **--rm=false                      Automatically remove the container when it exits**\n **--security-opt=[]               Security Options**\n **--sig-proxy=true                Proxy received signals to the process**\n **--stop-signal=SIGTERM           Signal to stop a container, SIGTERM by default**\n **-t, --tty=false                 Allocate a pseudo-TTY**\n **-u, --user=                     Username or UID (format: <name|uid>[:<group|gid>])**\n **--ulimit=[]                     Ulimit options**\n **--uts=                          UTS namespace to use**\n **-v, --volume=[]                 Bind mount a volume**\n **--volume-driver=                Optional volume driver for the container**\n **--volumes-from=[]               Mount volumes from the specified container(s)**\n **-w, --workdir=                  Working directory inside the container**\n\n```"]