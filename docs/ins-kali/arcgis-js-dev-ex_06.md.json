["```js\nvar windDataURL = \"http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/NOAA_METAR_current_wind_speed_direction/MapServer\";\n\nvar activeHurricaneURL = \"http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer\";\n\nvar layerDict = [\n          {\n            title: \"Forecast Error Cone\",\n            URL: activeHurricaneURL + \"/4\"\n          },\n          {\n            title: \"Forecast Tracks\",\n            URL: activeHurricaneURL + \"/2\"\n          },\n          {\n            title: \"Observed Track\",\n            URL: activeHurricaneURL + \"/3\"\n          },\n          {\n            title: \"Watches and Warnings\",\n            URL: activeHurricaneURL + \"/5\"\n          },\n          {\n            title: \"Forecast Positions\",\n            URL: activeHurricaneURL + \"/0\"\n          },\n          {\n            title: \"Past Positions\",\n            URL: activeHurricaneURL + \"/1\"\n          },\n          {\n            title: \"Wind Data\",\n            URL: windDataURL + \"/0\"\n          }\n        ];\n```", "```js\nvar layerDict = array.map(layerDict, function (item) {\n          var featLayer = new FeatureLayer(item.URL, {\n            mode: FeatureLayer.MODE_ONDEMAND,\n            outFields: [\"*\"]\n              //infoTemplate: infoTemplate\n          });\n          map.addLayer(featLayer);\n          item.layer = featLayer;\n          return item;\n        });\n```", "```js\nvar foreCastErrorConeFeatureLayer = array.filter(layerDict, function (item) \n{\n  return item.title == \"Forecast Error Cone\";\n})[0].layer;\n```", "```js\nvar pastPositionLayer = array.filter(layerDict, function (item) {\n    return item.title == \"Past Positions\";\n})[0].layer;\n\nvar pastPositionSymbol = new PictureMarkerSymbol({\n  \"angle\": 0,\n  \"type\": \"esriPMS\",\n  \"url\": http://static.arcgis.com/images/Symbols/Basic/RedFlag.png\",\n  \"contentType\": \"image/png\",\n  \"width\": 18,\n  \"height\": 18\n});\n\nvar pastPositionRenderer = new SimpleRenderer(pastPositionSymbol);\npastPositionLayer.setRenderer(pastPositionRenderer);\n```", "```js\n    **//Get the Forecast Error Cone feature layer**\n    var foreCastErrorConeFeatureLayer = array.filter(layerDict, function (item) {\n      return item.title == \"Forecast Error Cone\";\n    })[0].layer;\n\n    **//Create a Null SimpleFillSymbol**\n    var defaultSymbol = new SimpleFillSymbol().setStyle(SimpleFillSymbol.STYLE_NULL);\n\n    **//With a null Line Symbol as its outline**\n    defaultSymbol.outline.setStyle(SimpleLineSymbol.STYLE_NULL);\n\n    var renderer = new UniqueValueRenderer(defaultSymbol, \"FCSTPRD\");\n\n    **//add symbol for each possible value**\n    renderer.addValue('72', new SimpleFillSymbol().setColor(new Color([255, 0, 0, 0.5])));\n    renderer.addValue('120', new SimpleFillSymbol().setColor(new Color([255, 255, 0, 0.5])));\n\n    **//Set Renderer**\n    foreCastErrorConeFeatureLayer.setRenderer(renderer);\n    ```", "```js\nvar lineSymbol = new CartographicLineSymbol(\n  CartographicLineSymbol.STYLE_DASHDOT,\n  new Color([255, 255, 0]), 5,\n  CartographicLineSymbol.CAP_ROUND,\n  CartographicLineSymbol.JOIN_MITER, 5\n);\nvar CartoLineRenderer = new SimpleRenderer(lineSymbol);\n\nforecastTrackLayer.setRenderer(CartoLineRenderer);\n```", "```js\nvar activeHurricaneURL = \"http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer\";\n```", "```js\nvar windFeatureLayer = array.filter(layerDict, function (item) {\n          return item.title == \"Wind Data\";\n        })[0].layer;\n```", "```js\nvar windGaugeParams = {\n          caption: \"Wind Speed Meter\",\n          dataFormat: \"value\",\n          dataField: 'WIND_SPEED',\n          dataLabelField: \"STATION_NAME\",\n          layer: windFeatureLayer,\n          color: \"#F00\",\n          maxDataValue: 80,\n          title: 'Station Name',\n          unitLabel: \" mph\"\n        };\nvar windGauge = new Gauge(windGaugeParams, \"gauge\");\nwindGauge.startup();\n```", "```js\nquery.returnDistinctValues = true;\n```", "```js\nquery.outFields = [\"STORMNAME\"];\n```", "```js\n\"random_number = random_number\".\n```", "```js\nvar _bust_cache_query_string: function () {\n  var num = Math.random();\n  return num + \"=\" + num;\n}\n```", "```js\nquery.where = this._bust_cache_query_string();\n```", "```js\nevents: function () {\n  //initialize query task\n  var queryTask = new QueryTask(\"http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer/1\");\n\n  //initialize query\n  var query = new Query();\n  query.returnGeometry = false;\n  query.where = \"1=1 AND \" + this._bust_cache_query_string();\n  query.outFields = [\"STORMNAME\"];\n  query.returnDistinctValues = true;\n  var that = this;\n\n  queryTask.execute(query, function (result) {\n    console.log(result);\n\n    var i;\n    //Remove all existing items\n\n    for (i = that.cbxactiveHurricane.options.length - 1; i >= 0; i--) {\n      that.cbxactiveHurricane.remove(i);\n    }\n    //Fill n the new values\n    array.forEach(result.features, function (feature) {\n      console.debug(feature.attributes.STORMNAME);\n      that.cbxactiveHurricane.options[that.cbxactiveHurricane.options.length] = new Option(feature.attributes.STORMNAME, feature.attributes.STORMNAME);\n    });\n    that._update_hutticane_details();\n  });\n\nthis.updateTimmer = setInterval(lang.hitch(this, this._update_hutticane_details), 30000);\n}\n```", "```js\nquery.orderByFields = [\"DTG DESC\"];\n```", "```js\n_update_hutticane_details: function () {\n  var selected_hurricane = this.cbxactiveHurricane.value;\n\n  var queryTask = new QueryTask(\"http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer/1\");\n  var query = new Query();\n  query.returnGeometry = true;\n  query.where = \"STORMNAME='\"+ selected_hurricane +\"' AND \" + this._bust_cache_query_string();\n  query.outFields = [\"*\"];\n  **query.orderByFields = [\"DTG DESC\"];**\n  var that = this;\n  queryTask.execute(query, function (result) {\n    console.log(result);\n    if (result.features.length>0){\n      that._mslp.innerHTML = result.features[0].attributes.MSLP;\n      that._basin.innerHTML = result.features[0].attributes.BASIN;\n      that._stormnum.innerHTML = result.features[0].attributes.STORMNUM;\n      that._stormtype.innerHTML = result.features[0].attributes.STORMTYPE;\n      that._intensity.innerHTML = result.features[0].attributes.INTENSITY;\n      that._ss.innerHTML = result.features[0].attributes.SS;\n    }\n  });\n}\n```", "```js\nquery.where = \"STORMNAME='\"+ selected_hurricane +\"' AND \" + this._bust_cache_query_string();\n```", "```js\nfeatureLayer. refreshInterval = 5; // in minutes\n```", "```js\nvar url = \"http://api.openweathermap.org/data/2.5/weathers\";\n```", "```js\nvar request = esriRequest({\n  // Location of the data\n  url: this.url + '?lat=' + this.lat + '&lon=' + this.lon + '&appid=' + this.apikey,\n\n  handleAs: \"json\"\n});\n```", "```js\ngetLocation: function () {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(lang.hitch(this, this.showPosition));\n  } else {\n    console.log(\"Geolocation is not supported by this browser.\");\n  }\n}\n```", "```js\nshowPosition: function (position) {\n  console.log(position);\n  this.accuracy = position.coords.accuracy;\n  this.lat = position.coords.latitude;\n  this.lon = position.coords.longitude;\n\n  //error circle\n  var location_geom = new Point(this.lon, this.lat, new SpatialReference({ wkid: 4326 }));\n  var loc_geom_proj = webMercatorUtils.geographicToWebMercator(location_geom);\n  var location_buffer = geometryEngine.geodesicBuffer(loc_geom_proj, this.accuracy, \"meters\", false);\n\n  console.log(location_buffer);\n  var symbol = new SimpleFillSymbol().setColor(new Color([255, 0, 0, 0.5]));\n  this.map.graphics.add(new Graphic(location_buffer, symbol));\n  //this.map.setExtent(location_buffer.getExtent());\n  this.getWeatherData();\n}\n```", "```js\nrequest.then(function (data) {\n  console.log(\"Data: \", data);\n  that.weather.innerHTML = Math.round(data.main.temp - 270) + \" deg C \" +\n  data.weather[0].main + ' (' + data.weather[0].description + ')';\n  var imagePath = \"http://openweathermap.org/img/w/\" + data.weather[0].icon + \".png\";\n  // Set the image 'src' attribute\n  domAttr.set(that.weatherIcon, \"src\", imagePath);\n  that.windSpeed.innerHTML = data.wind.speed + ' kmph';\n  that.cloudiness.innerHTML = data.clouds.all + ' %';\n  that.pressure.innerHTML = data.main.pressure;\n  that.humidity.innerHTML = data.main.humidity + ' %';\n  that.pressure.innerHTML = data.main.pressure + ' Pa'\n  that.sunrise.innerHTML = that._processDate(data.sys.sunrise);\n  that.sunset.innerHTML = that._processDate(data.sys.sunset);\n  that.coords.innerHTML = data.coord.lon + ', ' + data.coord.lat;\n}\n```", "```js\n_processDate: function (dateStr) {\n  if (dateStr == null) {\n    return \"\";\n  }\n  var a = new Date(dateStr * 1000);\n  return dateLocale.format(a, {\n    selector: \"date\",\n    datePattern: \"yyyy-MM-dd HH.mm v\"\n  });\n}\n```", "```js\n<div>\n  <form role=\"form\">\n    <div class=\"form-group\">\n      <label dojoAttachPoint=\"weather\"></label>\n      <img dojoAttachPoint=\"weatherIcon\"/>\n    </div>\n  </form>\n  <table class=\"table table-striped\">\n    <tbody>\n      <tr>\n        <td>Wind</td>\n        <td dojoAttachPoint=\"windSpeed\"></td>\n      </tr>\n      <tr>\n        <td>Cloudiness</td>\n        <td dojoAttachPoint=\"cloudiness\"></td>\n      </tr>\n      <tr>\n        <td>Pressure</td>\n        <td dojoAttachPoint=\"pressure\"></td>\n      </tr>\n      <tr>\n        <td>Humidity</td>\n        <td dojoAttachPoint=\"humidity\"></td>\n      </tr>\n      <tr>\n        <td>Sunrise</td>\n        <td dojoAttachPoint=\"sunrise\"></td>\n      </tr>\n      <tr>\n        <td>Sunset</td>\n        <td dojoAttachPoint=\"sunset\"></td>\n      </tr>\n      <tr>\n        <td>Geo coords</td>\n        <td dojoAttachPoint=\"coords\"></td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n```"]