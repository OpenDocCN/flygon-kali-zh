- en: 5\. Composing Environments with Docker Compose
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 使用Docker Compose组合环境
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter covers the creation and management of multi-container applications
    using Docker Compose. You will learn how to create Docker Compose files to define
    complex containerized applications and how to run the Docker Compose CLI to manage
    the life cycle of multi-container applications. This chapter will enable you to
    configure Docker Compose applications with different methods and design applications
    with dependencies on other applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了使用Docker Compose创建和管理多容器应用程序。您将学习如何创建Docker Compose文件来定义复杂的容器化应用程序，以及如何运行Docker
    Compose CLI来管理多容器应用程序的生命周期。本章将使您能够使用不同的方法配置Docker Compose应用程序，并设计依赖于其他应用程序的应用程序。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapters, we discussed how to use Docker containers and `Dockerfiles`
    to create containerized applications. As apps get more complicated, the management
    of the containers and their configurations becomes more involved.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了如何使用Docker容器和`Dockerfiles`来创建容器化应用程序。随着应用程序变得更加复杂，容器及其配置的管理变得更加复杂。
- en: For example, imagine you are developing an online shop with frontend, backend,
    payment, and ordering microservices. Each microservice is implemented with the
    most appropriate programming language before being built, packaged, and configured.
    Thus, complex applications are designed to run in separate containers in the Docker
    ecosystem. Different containers require multiple `Dockerfiles` to define Docker
    images.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一下，您正在开发一个具有前端、后端、支付和订购微服务的在线商店。每个微服务在构建、打包和配置之前都是用最合适的编程语言实现的。因此，在Docker生态系统中，复杂应用程序被设计为在单独的容器中运行。不同的容器需要多个`Dockerfiles`来定义Docker镜像。
- en: They also need complex commands to configure, run, and troubleshoot applications.
    All this can be achieved using **Docker Compose**, a tool for defining and managing
    applications in multiple containers. Complex applications such as YAML files can
    be configured and run with a single command in Docker Compose. It is suitable
    for various environments, including development, testing, **Continuous Integration**
    (**CI**) pipelines, and production.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还需要复杂的命令来配置、运行和排除应用程序故障。所有这些都可以通过**Docker Compose**来实现，这是一个用于定义和管理多个容器中的应用程序的工具。诸如YAML文件之类的复杂应用程序可以在Docker
    Compose中用单个命令进行配置和运行。它适用于各种环境，包括开发、测试、**持续集成**（**CI**）流水线和生产环境。
- en: 'The essential features of Docker Compose can be grouped into three categories:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose的基本特性可以分为三类：
- en: '**Isolation**: Docker Compose allows you to run multiple instances of your
    complex application in complete isolation. Although it seems like a trivial feature,
    it makes it possible to run multiple copies of the same application stack on developer
    machines, CI servers, or shared hosts. Therefore, sharing resources increases
    utilization while decreasing operational complexity.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离**：Docker Compose允许您在完全隔离的环境中运行多个复杂应用程序实例。虽然这似乎是一个微不足道的功能，但它使得在开发人员机器、CI服务器或共享主机上运行多个相同应用程序堆栈的副本成为可能。因此，资源共享增加了利用率，同时减少了操作复杂性。'
- en: '**Stateful data management**: Docker Compose manages the volumes of your containers
    so that they do not lose their data from previous runs. This feature makes it
    easier to create and operate applications that store their state on disks, such
    as databases.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有状态数据管理**：Docker Compose管理容器的卷，以便它们不会丢失之前运行的数据。这个特性使得更容易创建和操作那些在磁盘上存储状态的应用程序，比如数据库。'
- en: '**Iterative design**: Docker Compose works with an explicitly defined configuration
    that consists of multiple containers. The containers in the configuration can
    be extended with new containers. For instance, imagine you have two containers
    in your application. If you add a third container and run Docker Compose commands,
    the first two containers will not be restarted or recreated. Docker Compose will
    only create and join the newly added third container.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迭代设计**：Docker Compose与明确定义的配置一起工作，该配置由多个容器组成。配置中的容器可以通过新容器进行扩展。例如，想象一下你的应用程序中有两个容器。如果添加第三个容器并运行Docker
    Compose命令，前两个容器将不会被重新启动或重新创建。Docker Compose只会创建并加入新添加的第三个容器。'
- en: These features make Compose an essential tool for creating and managing applications
    as multiple containers in various platforms. In this chapter, you will see how
    Docker Compose helps you to manage the complete life cycle of complicated applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性使得Compose成为在各种平台上创建和管理多个容器应用程序的重要工具。在本章中，您将看到Docker Compose如何帮助您管理复杂应用程序的完整生命周期。
- en: You will start by diving deep into Compose CLI and file anatomy. Following this,
    you will learn how to configure applications with multiple techniques and how
    to define service dependencies. Since Docker Compose is an essential tool for
    the Docker environment, both technical and hands-on experience are vital to have
    in your toolbox.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先深入了解Compose CLI和文件解剖。之后，您将学习如何使用多种技术配置应用程序以及如何定义服务依赖关系。由于Docker Compose是Docker环境中的重要工具，因此技术和实践经验对您的工具箱至关重要。
- en: Docker Compose CLI
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Compose CLI
- en: Docker Compose works with **Docker Engine** to create and manage multi-container
    applications. To interact with Docker Engine, Compose uses a CLI tool named `docker-compose`.
    On Mac and Windows systems, `docker-compose` is already a part of Docker Desktop.
    However, on Linux systems, you need to install the `docker-compose` CLI tool after
    installing Docker Engine. It is packaged into a single executable, and you can
    install it with the following commands on Linux systems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose与**Docker Engine**一起工作，用于创建和管理多容器应用程序。为了与Docker Engine交互，Compose使用名为`docker-compose`的CLI工具。在Mac和Windows系统上，`docker-compose`已经是Docker
    Desktop的一部分。然而，在Linux系统上，您需要在安装Docker Engine后安装`docker-compose` CLI工具。它被打包成一个单独的可执行文件，您可以使用以下命令在Linux系统上安装它。
- en: Installing Docker Compose CLI in Linux
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux中安装Docker Compose CLI
- en: 'Download the binary to `/usr/local/bin` with the following command in your Terminal:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将二进制文件下载到`/usr/local/bin`中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Make the downloaded binary executable with the following command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令使下载的二进制文件可执行：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Test the CLI and installation with the following command in the Terminal on
    all operating systems:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有操作系统的终端上使用以下命令测试CLI和安装：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If it is installed correctly, you will see the versions of the CLI and its
    dependencies as follows. For instance, in the following output, the `docker-compose`
    CLI has version `1.25.1-rc1` and its dependencies, `docker-py`, `CPython`, and
    `OpenSSL`, are also listed with their versions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装正确，您将看到CLI及其依赖项的版本如下。例如，在以下输出中，`docker-compose` CLI的版本为`1.25.1-rc1`，其依赖项`docker-py`、`CPython`和`OpenSSL`也列出了它们的版本：
- en: '![Figure 5.1: docker-compose version output'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1：docker-compose版本输出'
- en: '](image/B15021_05_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_01.jpg)'
- en: 'Figure 5.1: docker-compose version output'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：docker-compose版本输出
- en: Up until now, we have learned how to install the Docker Compose CLI in Linux.
    Now we will look into the commands and subcommands that manage the complete life
    cycle of multi-container applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何在Linux中安装Docker Compose CLI。现在我们将研究管理多容器应用程序的完整生命周期的命令和子命令。
- en: Docker Compose CLI Commands
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Compose CLI命令
- en: 'The `docker-compose` command is capable of managing the complete life cycle
    of multi-containers applications. With the subcommands, it is possible to start,
    stop, and recreate services. Also, it is possible to check the status of the running
    stacks and get the logs. You will get hands-on experience with the essential commands
    throughout this chapter. Likewise, a preview of all capabilities can be listed
    with the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose`命令能够管理多容器应用程序的完整生命周期。通过子命令，可以启动、停止和重新创建服务。此外，还可以检查正在运行的堆栈的状态并获取日志。在本章中，您将通过实践掌握这些基本命令。同样，可以使用以下命令列出所有功能的预览：'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the command should look like the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出应该如下所示：
- en: '![Figure 5.2: docker-compose commands'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2：docker-compose命令'
- en: '](image/B15021_05_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_02.jpg)'
- en: 'Figure 5.2: docker-compose commands'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：docker-compose命令
- en: 'There are three essential `docker-compose` commands that are used to manage
    the life cycle of applications. The life cycle and commands can be illustrated
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个基本的`docker-compose`命令用于管理应用程序的生命周期。生命周期和命令可以如下所示：
- en: '![Figure 5.3: docker-compose life cycle'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3：docker-compose生命周期'
- en: '](image/B15021_05_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_03.jpg)'
- en: 'Figure 5.3: docker-compose life cycle'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：docker-compose生命周期
- en: '`docker-compose up`: This command creates and starts the containers defined
    in the configuration. It is possible to build container images or use pre-built
    images from the registry. In addition, it is possible to run the containers in
    the background in `detached` mode with the `-d` or `--detach` flags. It is convenient
    to use `detached` mode for long-running containers, such as web servers, that
    we do not expect to stop in the short term. Additional options and flags can be
    checked with the `docker-compose up --help` command.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose up`：此命令创建并启动配置中定义的容器。可以构建容器镜像或使用来自注册表的预构建镜像。此外，可以使用`-d`或`--detach`标志在`detached`模式下在后台运行容器。对于长时间运行的容器（例如Web服务器），使用`detached`模式非常方便，我们不希望在短期内停止它们。可以使用`docker-compose
    up --help`命令检查其他选项和标志。'
- en: '`docker-compose ps`: This command lists the containers and their status information.
    It is helpful for troubleshooting and container health checks. For instance, if
    you create a two-container application with a backend and a frontend, you can
    check the status of each container with the `docker-compose ps` command. It helps
    to find out whether your backend or frontend is down, is not responding to their
    health checks, or has failed to start due to misconfiguration.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose ps`：此命令列出容器及其状态信息。对于故障排除和容器健康检查非常有帮助。例如，如果创建了一个具有后端和前端的双容器应用程序，可以使用`docker-compose
    ps`命令检查每个容器的状态。这有助于找出您的后端或前端是停机、不响应其健康检查，还是由于错误配置而无法启动。'
- en: '`docker-compose down`: This command stops and removes all the resources, including
    containers, networks, images, and volumes.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose down`：此命令停止并删除所有资源，包括容器、网络、镜像和卷。'
- en: Docker Compose File
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Compose文件
- en: Multi-container applications are run and defined using the `docker-compose`
    CLI. By convention, the default name of these files is `docker-compose.yaml`.
    Docker Compose is a powerful tool; however, its power depends on the configuration.
    Therefore, knowing how to create `docker-compose.yaml` files is essential and
    requires great attention.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 多容器应用程序是使用`docker-compose` CLI运行和定义的。按照惯例，这些文件的默认名称是`docker-compose.yaml`。Docker
    Compose是一个强大的工具；然而，它的强大取决于配置。因此，知道如何创建`docker-compose.yaml`文件是必不可少的，并且需要特别注意。
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Docker Compose works with the `docker-compose.yaml` and `docker-compose.yml`
    file extensions by default.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose默认使用`docker-compose.yaml`和`docker-compose.yml`文件扩展名。
- en: '`docker-compose.yaml` files consist of four main sections, as illustrated in
    *Figure 5.4*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose.yaml` 文件由四个主要部分组成，如 *图5.4* 所示：'
- en: '![Figure 5.4: The docker-compose file structure'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4：docker-compose 文件结构'
- en: '](image/B15021_05_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_04.jpg)'
- en: 'Figure 5.4: The docker-compose file structure'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：docker-compose 文件结构
- en: '`version`: This section defines the syntax version for the `docker-compose`
    file, and currently, the latest syntax version is `3`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：此部分定义了 `docker-compose` 文件的语法版本，目前最新的语法版本是 `3`。'
- en: '`services`: This section describes the Docker containers that will be built
    if needed and will be started by `docker-compose`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services`：此部分描述了将在需要时构建并由 `docker-compose` 启动的 Docker 容器。'
- en: '`networks`: This section describes the networks that will be used by the services.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`networks`：此部分描述了服务将使用的网络。'
- en: '`volumes`: This section describes the data volumes that will be mounted to
    the containers in services.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volumes`：此部分描述了将挂载到服务中的数据卷。'
- en: For the `services` section, there are two essential options to create containers.
    The first option is to build the container, and the second is to use Docker images
    from the registry. When you are creating and testing containers locally, it is
    advisable to build the images. On the other hand, it is faster and easier to use
    Docker images from the registry for production and CI/CD systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `services` 部分，有两个关键选项可以创建容器。第一个选项是构建容器，第二个选项是使用来自注册表的 Docker 镜像。当您在本地创建和测试容器时，建议构建镜像。另一方面，对于生产和
    CI/CD 系统，使用来自注册表的 Docker 镜像更快速、更简便。
- en: 'Imagine you want to build your server container by using a `Dockerfile` named
    `Dockerfile-server`. Then, you need to put the file in the `server` folder with
    the following folder structure:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要使用名为 `Dockerfile-server` 的 `Dockerfile` 构建服务器容器。然后，您需要将文件放在具有以下文件夹结构的 `server`
    文件夹中：
- en: '![Figure 5.5: Folder structure'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5：文件夹结构'
- en: '](image/B15021_05_05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_05.jpg)'
- en: 'Figure 5.5: Folder structure'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：文件夹结构
- en: The output of the `tree` command shows that there is a `server` folder containing
    `Dockerfile-server`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`tree` 命令的输出显示了一个包含 `Dockerfile-server` 的 `server` 文件夹。'
- en: 'When the following content is defined in the `docker-compose.yaml` file in
    the root directory, the `server` container will be built before running the service:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当在根目录的 `docker-compose.yaml` 文件中定义了以下内容时，`server` 容器将在运行服务之前构建：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Similarly, if you want to use an image from the Docker registry, you can define
    a service with only the `image` field:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您想要使用来自 Docker 注册表的镜像，可以仅定义一个带有 `image` 字段的服务：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Docker Compose creates a single network by default, and each container connects
    to this network. In addition, containers can connect to other containers using
    hostnames. For instance, let''s assume you have the following `docker-compose.yaml`
    file in the `webapp` folder:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 默认创建一个网络，每个容器都连接到此网络。此外，容器可以使用主机名连接到其他容器。例如，假设您在 `webapp` 文件夹中有以下
    `docker-compose.yaml` 文件：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you start `docker-compose` with this configuration, it first creates the
    network with the name `webapp_default`. Following that, `docker-compose` creates
    the `server` and `db` containers and joins the `webapp_default` network with the
    names `server` and `db`, respectively.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用此配置启动 `docker-compose` 时，它首先创建了名为 `webapp_default` 的网络。随后，`docker-compose`
    创建了 `server` 和 `db` 容器，并分别以 `server` 和 `db` 的名称加入了 `webapp_default` 网络。
- en: 'In addition, the `server` container can connect to the database using its `container`
    port and hostname as follows: `postgres://db:5432`. Similarly, the database is
    reachable from the host machine by host port `8032` as follows: `postgres://localhost:8032`.
    The network structure is presented in the following diagram:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`server`容器可以使用其`container`端口和主机名连接到数据库，如下所示：`postgres://db:5432`。同样，数据库可以通过主机端口`8032`从主机机器访问，如下所示：`postgres://localhost:8032`。网络结构如下图所示：
- en: '![Figure 5.6: Networking structure'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6：网络结构'
- en: '](image/B15021_05_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_06.jpg)'
- en: 'Figure 5.6: Networking structure'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：网络结构
- en: Within the `docker-compose.yaml` file, you can define custom networks instead
    of using the default network. The `network` configuration enables you to create
    sophisticated network technologies based on your custom network drivers. Networking
    for Docker containers is comprehensively covered in *Chapter 6*, *Introduction
    to Docker Networking*. Extending Docker Engine with custom network drivers will
    be covered in the following chapters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docker-compose.yaml`文件中，您可以定义自定义网络，而不是使用默认网络。`network`配置使您能够基于自定义网络驱动程序创建复杂的网络技术。Docker容器的网络技术在*第6章*，*Docker网络简介*中有全面介绍。在接下来的章节中将介绍如何使用自定义网络驱动程序扩展Docker引擎。
- en: Docker Compose also creates and manages volumes as a part of the `docker-compose.yaml`
    file. Volumes provide persistency among containers and are managed by Docker Engine.
    All service containers can reuse volumes. In other words, data can be shared between
    the containers for synchronization, data preparation, and backup operations. In
    *Chapter 7*, *Docker Storage*, volumes for Docker will be presented in full detail.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose还作为`docker-compose.yaml`文件的一部分创建和管理卷。卷在容器之间提供持久性，并由Docker引擎管理。所有服务容器都可以重用卷。换句话说，数据可以在容器之间共享，用于同步、数据准备和备份操作。在*第7章*，*Docker存储*中，将详细介绍Docker的卷。
- en: 'With the following `docker-compose.yaml` file, `docker-compose` will create
    a volume named `data` using the default volume plugin in Docker Engine. This volume
    will be mounted to the `/database` path of the `database` container and the `/backup`
    path of the `backup` container. This YAML file and its content create a service
    stack that runs a database and continuously backs up without downtime:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下`docker-compose.yaml`文件，`docker-compose`将使用Docker引擎中的默认卷插件创建名为`data`的卷。此卷将被挂载到`database`容器的`/database`路径和`backup`容器的`/backup`路径。此YAML文件及其内容创建了一个服务堆栈，运行数据库并在没有停机时间的情况下持续备份：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The official reference documentation for Docker Compose files is available at
    [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose文件的官方参考文档可在[https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)找到。
- en: In the following exercise, a multi-container application with networking and
    volume usage will be created with Docker Compose.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，将使用Docker Compose创建一个具有网络和卷使用的多容器应用程序。
- en: Note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`touch`命令创建文件，并使用`vim`命令在文件上使用vim编辑器。
- en: 'Exercise 5.01: Getting Started with Docker Compose'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.01：使用Docker Compose入门
- en: Web servers in containers require operational tasks before starting, such as
    configuration, file downloads, or dependency installations. With `docker-compose`,
    it is possible to define those operations as multi-container applications and
    run them with a single command. In this exercise, you will create a preparation
    container to generate static files, such as `index.html` files. Then, the server
    container will serve the static files, and it will be reachable from the host
    machine by the network configuration. You will also manage the life cycle of the
    application using various `docker-compose` commands.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 容器中的Web服务器在启动之前需要进行操作任务，例如配置、文件下载或依赖项安装。使用`docker-compose`，可以将这些操作定义为多容器应用程序，并使用单个命令运行它们。在这个练习中，您将创建一个准备容器来生成静态文件，例如`index.html`文件。然后，服务器容器将提供静态文件，并且可以通过网络配置从主机机器访问。您还将使用各种`docker-compose`命令来管理应用程序的生命周期。
- en: 'To complete the exercise, execute the following steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成练习，请执行以下步骤：
- en: 'Create a folder named `server-with-compose` and navigate into it using the
    `cd` command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server-with-compose`的文件夹，并使用`cd`命令进入其中：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a folder with the name `init` and navigate into it using the `cd` command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`init`的文件夹，并使用`cd`命令进入其中：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a Bash script file with the following content and save it as `prepare.sh`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的Bash脚本文件，并将其保存为`prepare.sh`：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This script generates a sample HTML page with the `echo` commands.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本使用`echo`命令生成一个示例HTML页面。
- en: 'Create a `Dockerfile` with the name `Dockerfile` and the following content:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Dockerfile`的文件，并包含以下内容：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This `Dockerfile` is based on `busybox`, which is a tiny operating system for
    space-efficient containers, and it adds the `prepare.sh` script into the filesystem.
    In addition, it makes the file executable and set it as the `ENTRYPOINT` command.
    The `ENTRYPOINT` command, in our case, the `prepare.sh` script is initialized
    with the start of the Docker container.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Dockerfile`基于`busybox`，这是一个用于节省空间的容器的微型操作系统，并将`prepare.sh`脚本添加到文件系统中。此外，它使文件可执行，并将其设置为`ENTRYPOINT`命令。`ENTRYPOINT`命令，在我们的情况下，`prepare.sh`脚本在Docker容器启动时被初始化。
- en: 'Change the directory to the parent folder with the `cd ..` command and create
    a `docker-compose.yaml` file with the following content:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd ..`命令将目录更改为父文件夹，并创建一个名为`docker-compose.yaml`的文件，包含以下内容：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This `docker-compose` file creates one volume named `static`, and two services
    with the names `init` and `server`. The volume is mounted to both containers.
    In addition, the server has published port `8080`, connecting to container port
    `80`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此`docker-compose`文件创建一个名为`static`的卷，以及两个名为`init`和`server`的服务。该卷被挂载到两个容器上。此外，服务器已发布端口`8080`，连接到容器端口`80`。
- en: 'Start the application with the following command in `detach` mode to continue
    using the Terminal:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令以`detach`模式启动应用程序，以继续使用终端：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following image shows what happens when the preceding command is executed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了执行上述命令时发生的情况：
- en: '![Figure 5.7: Starting the application'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7：启动应用程序'
- en: '](image/B15021_05_07.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_07.jpg)'
- en: 'Figure 5.7: Starting the application'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：启动应用程序
- en: The preceding command creates and starts the containers in `detached` mode.
    It starts by creating the `server-with-compose_default` network and the `server-with-compose_static`
    volume. Then, it builds the `init` container using the `Dockerfile` from *step
    4*, downloads the `nginx` Docker image for the server, and starts the containers.
    Finally, it prints the names of the containers and makes them run in the background.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令以`分离`模式创建并启动容器。它首先创建`server-with-compose_default`网络和`server-with-compose_static`卷。然后，使用*步骤4*中的`Dockerfile`构建`init`容器，为服务器下载`nginx`
    Docker镜像，并启动容器。最后，它打印容器的名称并使它们在后台运行。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can disregard the warning about Swarm mode since we want to deploy all containers
    to the same node.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以忽略关于Swarm模式的警告，因为我们希望将所有容器部署到同一节点。
- en: 'Check the status of the application with the `docker-compose ps` command:![Figure
    5.8: Application status'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose ps`命令检查应用程序的状态:![图5.8：应用程序状态
- en: '](image/B15021_05_08.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_08.jpg)'
- en: 'Figure 5.8: Application status'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：应用程序状态
- en: This output lists two containers. The `init` container exited successfully with
    code `0`, while the `server` container is `Up` and its port is available. This
    is the expected output since the `init` container is designed to prepare the `index.html`
    file and complete its operations, whereas the `server` container should always
    be up and running.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出列出了两个容器。`init`容器成功退出，代码为`0`，而`server`容器处于`运行中`状态，其端口可用。这是预期的输出，因为`init`容器旨在准备`index.html`文件并完成其操作，而`server`容器应始终处于运行状态。
- en: 'Open `http://localhost:8080` in the browser. The following figure shows the
    output:![Figure 5.9: Server output'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:8080`。以下图显示了输出:![图5.9：服务器输出
- en: '](image/B15021_05_09.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_09.jpg)'
- en: 'Figure 5.9: Server output'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9：服务器输出
- en: '*Figure 5.9* shows the `index.html` page created by the `init` container. In
    other words, it shows that `docker-compose` created the volume, mounted it to
    the containers, and started them successfully.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.9*显示了由`init`容器创建的`index.html`页面。换句话说，它显示了`docker-compose`创建了卷，将其挂载到容器，并成功启动了它们。'
- en: 'Stop and remove all the resources with the following command if you do not
    need the application up and running:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果不需要应用程序运行，使用以下命令停止并移除所有资源:'
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The command will return output like the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '该命令将返回以下输出:'
- en: '![Figure 5.10: Stopping the application'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10：停止应用程序'
- en: '](image/B15021_05_10.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_10.jpg)'
- en: 'Figure 5.10: Stopping the application'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10：停止应用程序
- en: In this exercise, a multi-container application was created and configured by
    `docker-compose`. Networking and volume options were stored in the `docker-compose.yaml`
    file. In addition, CLI commands were shown in action for creating applications,
    checking the status, and removing the applications.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，使用`docker-compose`创建和配置了一个多容器应用程序。网络和卷选项存储在`docker-compose.yaml`文件中。此外，还展示了用于创建应用程序、检查状态和移除应用程序的CLI命令。
- en: In the following section, configuration options for applications in the Docker
    Compose environment will be presented.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，将介绍Docker Compose环境中应用程序的配置选项。
- en: Configuration of Services
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务配置
- en: Cloud-native applications are expected to store their configuration in environment
    variables. Environment variables are easy to change between different platforms
    without source code changes. Environment variables are dynamic values that are
    stored in Linux-based systems and used by applications. In other words, the variables
    can be used to configure applications by changing their values.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用程序应该将它们的配置存储在环境变量中。环境变量易于在不更改源代码的情况下在不同平台之间更改。环境变量是存储在基于Linux的系统中并被应用程序使用的动态值。换句话说，这些变量可以通过更改它们的值来配置应用程序。
- en: For instance, assume your application uses a `LOG_LEVEL` environment variable
    to configure what is logged. If you change the `LOG_LEVEL` environment variable
    from `INFO` to `DEBUG` and restart your application, you would see more logs and
    be able to troubleshoot problems more easily. In addition, you can deploy the
    same application with different sets of environment variables to staging, testing,
    and production. Likewise, the method of configuring services in Docker Compose
    is to set environment variables for the containers.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您的应用程序使用`LOG_LEVEL`环境变量来配置日志记录内容。如果您将`LOG_LEVEL`环境变量从`INFO`更改为`DEBUG`并重新启动应用程序，您将看到更多日志并能更轻松地解决问题。此外，您可以使用不同的环境变量集部署相同的应用程序到暂存、测试和生产环境。同样，在Docker
    Compose中配置服务的方法是为容器设置环境变量。
- en: 'There are three methods of defining environment variables in Docker Compose,
    with the following priority:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Compose中定义环境变量有三种方法，优先级如下：
- en: Using the Compose file
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Compose文件
- en: Using shell environment variables
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用shell环境变量
- en: Using the environment file
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用环境文件
- en: If the environment variables do not change very often but are required by the
    containers, it is better to store them in `docker-compose.yaml` files. If there
    are sensitive environment variables, such as passwords, it is recommended to pass
    them via shell environment variables before calling the `docker-compose` CLI.
    However, if the number of the variables is high and varies between the testing,
    staging, or production systems, it is easier to collect them in `.env` files and
    pass them into `docker-compose.yaml` files.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果环境变量不经常更改但容器需要使用它们，最好将它们存储在`docker-compose.yaml`文件中。如果有敏感的环境变量，比如密码，建议在调用`docker-compose`
    CLI之前通过shell环境变量传递它们。但是，如果变量的数量很大并且在测试、暂存或生产系统之间变化很大，最好将它们收集在`.env`文件中，并将它们传递到`docker-compose.yaml`文件中。
- en: 'In the `services` part of the `docker-compose.yaml` file, environment variables
    can be defined for each service. For example, the `LOG_LEVEL` and `METRICS_PORT`
    environment variables are set in the Docker Compose file as follows for the `server` service:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docker-compose.yaml`文件的`services`部分，可以为每个服务定义环境变量。例如，以下是在Docker Compose文件中为`server`服务设置的`LOG_LEVEL`和`METRICS_PORT`环境变量：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the values are not set for the environment variables in the `docker-compose.yaml`
    file, it is possible to get the values from the shell by running a `docker-compose`
    command. For instance, the `HOSTNAME` environment variable for the `server` service
    will be set straight from the shell:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`docker-compose.yaml`文件中未为环境变量设置值时，可以通过运行`docker-compose`命令从shell中获取值。例如，`server`服务的`HOSTNAME`环境变量将直接从shell中设置：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the shell running the `docker-compose` command has no value for the `HOSTNAME`
    environment variable, the container will start with an empty environment variable.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`docker-compose`命令的shell没有`HOSTNAME`环境变量的值时，容器将以空环境变量启动。
- en: 'In addition, it is possible to store the environment variables in `.env` files
    and configure them in `docker-compose.yaml` files. An example `database.env` file
    can be structured with key-value lists as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以将环境变量存储在`.env`文件中，并在`docker-compose.yaml`文件中进行配置。一个名为`database.env`的示例文件可以按键值列表的方式进行结构化，如下所示：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `docker-compose.yaml` file, the environment variable file field is configured
    under the corresponding service as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docker-compose.yaml`文件中，环境变量文件字段配置在相应的服务下，如下所示：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When Docker Compose creates the `server` service, it will set all the environment
    variables listed in the `database.env` file to the container.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当Docker Compose创建`server`服务时，它将把`database.env`文件中列出的所有环境变量设置到容器中。
- en: In the following exercise, you will configure an application using all three
    configuration methods in Docker Compose.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将使用Docker Compose中的所有三种配置方法来配置一个应用程序。
- en: 'Exercise 5.02: Configuring Services with Docker Compose'
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.02：使用Docker Compose配置服务
- en: Services in Docker Compose are configured by environment variables. In this
    exercise, you will create a Docker Compose application that is configured by different
    methods of setting variables. In a file called `print.env`, you will define two
    environment variables. In addition, you will create and configure one environment
    variable in the `docker-compose.yaml` file and pass one environment variable from
    the Terminal on the fly. You will see how four environment variables from different
    sources come together in your container.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose中的服务是通过环境变量进行配置的。在这个练习中，您将创建一个由不同设置变量方法配置的Docker Compose应用程序。在一个名为`print.env`的文件中，您将定义两个环境变量。此外，您将在`docker-compose.yaml`文件中创建和配置一个环境变量，并在终端上即时传递一个环境变量。您将看到来自不同来源的四个环境变量如何汇聚在您的容器中。
- en: 'To complete the exercise, execute the following steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成练习，请执行以下步骤：
- en: 'Create a folder named `server-with-configuration` and navigate into it using
    the `cd` command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server-with-configuration`的文件夹，并使用`cd`命令进入其中：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create an `.env` file with the name `print.env` and the following content:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`print.env`的`.env`文件，并包含以下内容：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this file, two environment variables, `ENV_FROM_ENV_FILE_1` and `ENV_FROM_ENV_FILE_2`,
    are defined with their values.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，使用它们的值定义了两个环境变量`ENV_FROM_ENV_FILE_1`和`ENV_FROM_ENV_FILE_2`。
- en: 'Create a file with the name `docker-compose.yaml` and the following content:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`docker-compose.yaml`的文件，并包含以下内容：
- en: '[PRE21]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this file, a single-container application is defined, and the container runs
    the `env` command to print the environment variables. It also uses the environment
    file named `print.env`, and two additional environment variables, `ENV_FROM_COMPOSE_FILE`
    and `ENV_FROM_SHELL`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，定义了一个单容器应用程序，容器运行`env`命令来打印环境变量。它还使用名为`print.env`的环境文件，以及两个额外的环境变量`ENV_FROM_COMPOSE_FILE`和`ENV_FROM_SHELL`。
- en: 'Export `ENV_FROM_SHELL` to the shell with the following command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将`ENV_FROM_SHELL`导出到shell中：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start the application with the `docker-compose up` command. The output should
    look like the following:![Figure 5.11: Starting the application'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose up`命令启动应用程序。输出应该如下所示：![图5.11：启动应用程序
- en: '](image/B15021_05_11.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_11.jpg)'
- en: 'Figure 5.11: Starting the application'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11：启动应用程序
- en: The output is the result of the `print` container defined in the `docker-compose`
    file. The container has one command to run, `env`, and it prints the available
    environment variables. As expected, there are two environment variables, `ENV_FROM_ENV_FILE_1`
    and `ENV_FROM_ENV_FILE_2`, with the corresponding values of `HELLO` and `WORLD`.
    In addition, the environment variable defined in the `docker-compose.yaml` file
    in *step 3* is available with the name `ENV_FROM_COMPOSE_FILE` and the value `HELLO`.
    Finally, the environment variable exported in *step 4* is available with the name
    `ENV_FROM_SHELL` and the value `WORLD`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是在`docker-compose`文件中定义的`print`容器的结果。该容器有一个要运行的命令`env`，它会打印出可用的环境变量。如预期的那样，有两个环境变量`ENV_FROM_ENV_FILE_1`和`ENV_FROM_ENV_FILE_2`，对应的值分别为`HELLO`和`WORLD`。此外，在*步骤3*中在`docker-compose.yaml`文件中定义的环境变量以`ENV_FROM_COMPOSE_FILE`的名称和值`HELLO`可用。最后，在*步骤4*中导出的环境变量以`ENV_FROM_SHELL`的名称和值`WORLD`可用。
- en: In this exercise, a Docker Compose application was created and configured with
    different methods. Using Docker Compose files, environment definition files and
    exported values can be used to deploy the same application to different platforms.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，创建了一个Docker Compose应用程序，并使用不同的方法进行配置。使用Docker Compose文件、环境定义文件和导出的值可以将相同的应用程序部署到不同的平台上。
- en: Since Docker Compose manages multi-container applications, there is a need to
    define the interdependencies between them. The interdependencies of the containers
    in the Docker Compose applications will be presented in the following section.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker Compose管理多容器应用程序，因此需要定义它们之间的相互依赖关系。Docker Compose应用程序中容器的相互依赖关系将在以下部分中介绍。
- en: Service Dependency
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务依赖
- en: Docker Compose runs and manages multi-container applications defined in `docker-compose.yaml`
    files. Although the containers are designed as independent microservices, creating
    services that depend on each other is highly expected. For instance, let's assume
    you have a two-tier application with database and backend components, such as
    a PostgreSQL database and a Java backend. The Java backend component requires
    PostgreSQL to be up and running since it should connect to the database to run
    the business logic. Therefore, you could need to define the dependency between
    the services of the multi-container applications. With Docker Compose, it is possible
    to control the order of the startup and shutdown of the services.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose运行和管理在`docker-compose.yaml`文件中定义的多容器应用程序。尽管容器被设计为独立的微服务，但创建相互依赖的服务是非常常见的。例如，假设您有一个包含数据库和后端组件的两层应用程序，比如一个PostgreSQL数据库和一个Java后端。Java后端组件需要PostgreSQL处于运行状态，因为它需要连接到数据库来运行业务逻辑。因此，您可能需要定义多容器应用程序的服务之间的依赖关系。通过Docker
    Compose，可以控制服务的启动和关闭的顺序。
- en: 'Say you have a three-container application with the following `docker-compose.yaml`
    file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个包含三个容器的应用程序，其`docker-compose.yaml`文件如下：
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this file, the `main` container depends on the `pre` container, whereas
    the `pre` container depends on the `init` container. Docker Compose starts the
    containers in the order of `init`, `pre`, and `main`, as illustrated in *Figure
    5.12*. In addition, the containers will be stopped in reverse order: `main`, `pre`,
    and then `init`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，`main`容器依赖于`pre`容器，而`pre`容器依赖于`init`容器。Docker Compose按照`init`、`pre`和`main`的顺序启动容器，如*图5.12*所示。此外，容器将按相反的顺序停止：`main`、`pre`，然后是`init`。
- en: '![Figure 5.12: Service startup order'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12：服务启动顺序'
- en: '](image/B15021_05_12.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_12.jpg)'
- en: 'Figure 5.12: Service startup order'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12：服务启动顺序
- en: In the following exercise, the order of containers will be used to fill the
    contents of a file and then serve it with a web server.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，容器的顺序将用于填充文件的内容，然后使用Web服务器提供它。
- en: 'Exercise 5.03: Service Dependency with Docker Compose'
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.03：使用Docker Compose进行服务依赖
- en: Services in Docker Compose can be configured to depend on other services. In
    this exercise, you will create an application with four containers. The first
    three containers will run consecutively to create a static file that will be served
    by the fourth container.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Compose中，服务可以配置为依赖于其他服务。在这个练习中，您将创建一个包含四个容器的应用程序。前三个容器将依次运行，以创建一个静态文件，由第四个容器提供服务。
- en: 'To complete the exercise, execute the following steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个练习，执行以下步骤：
- en: 'Create a folder named `server-with-dependency` and navigate into it using the
    `cd` command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server-with-dependency`的文件夹，并使用`cd`命令进入其中：
- en: '[PRE24]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file with the name `docker-compose.yaml` and the following content:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`docker-compose.yaml`的文件，并包含以下内容：
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This file consists of four services and one volume. The volume is named `static`,
    and it is mounted to all services. The first three services take individual actions
    on the static volume. The `clean` container removes the `index.html` file, and
    then the `init` container starts filling `index.html`. Following that, the `pre`
    container writes an additional line to the `index.html` file. Finally, the `server`
    container serves the content in the `static` folder.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件包括四个服务和一个卷。卷的名称是`static`，它被挂载到所有服务上。前三个服务对静态卷采取单独的操作。`clean`容器删除`index.html`文件，然后`init`容器开始填充`index.html`。随后，`pre`容器向`index.html`文件写入额外的一行。最后，`server`容器提供`static`文件夹中的内容。
- en: 'Start the application with the `docker-compose up` command. The output should
    look like the following:![ Figure 5.13: Starting the application'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose up`命令启动应用程序。输出应该如下所示：![图5.13：启动应用程序
- en: '](image/B15021_05_13.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_13.jpg)'
- en: 'Figure 5.13: Starting the application'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13：启动应用程序
- en: The output shows that Docker Compose creates the containers in the order of
    `clean`, `init`, and then `pre`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，Docker Compose按照`clean`，`init`，然后`pre`的顺序创建容器。
- en: 'Open `http://localhost:8080` in the browser:![Figure 5.14: Server output'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:8080`：![图5.14：服务器输出
- en: '](image/B15021_05_14.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_14.jpg)'
- en: 'Figure 5.14: Server output'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14：服务器输出
- en: The output from the server shows that the `clean`, `init`, and `pre` containers
    work in the expected order.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的输出显示，`clean`，`init`和`pre`容器按照预期的顺序工作。
- en: 'Return to the Terminal in *step 3* and use *Ctrl* + *C* to close the application
    gracefully. You will see some HTTP request logs and, in the end, the `Stopping
    server-with-dependency_server_1` line:![Figure 5.15: Stopping the application'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到*步骤3*中的终端，并使用*Ctrl* + *C*优雅地关闭应用程序。您将看到一些HTTP请求日志，最后是`Stopping server-with-dependency_server_1`行：![图5.15：停止应用程序
- en: '](image/B15021_05_15.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_15.jpg)'
- en: 'Figure 5.15: Stopping the application'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15：停止应用程序
- en: In this exercise, a Docker Compose application was created with interdependent
    services. How Docker Compose starts and manages containers in a defined order
    was shown. This is an essential feature of Docker Compose with which you can create
    complex multi-container applications.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，使用Docker Compose创建了一个具有相互依赖服务的应用程序。展示了Docker Compose如何按照定义的顺序启动和管理容器。这是Docker
    Compose的一个重要特性，您可以使用它来创建复杂的多容器应用程序。
- en: Now, let's test the knowledge we have gained so far in this chapter by implementing
    the following activity. In the next activity, you will learn how to install WordPress
    using Docker Compose.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过实施以下活动来测试我们在本章中迄今为止所学到的知识。在下一个活动中，您将学习如何使用Docker Compose安装WordPress。
- en: 'Activity 5.01: Installing WordPress Using Docker Compose'
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动5.01：使用Docker Compose安装WordPress
- en: You are assigned to design and deploy a blog with its database as microservices
    in Docker. You will be using **WordPress** since it is the most popular **Content
    Management System** (**CMS**), used by more than one-third of all the websites
    on the internet. Also, the development and testing teams require the installation
    of both WordPress and the database multiple times on different platforms with
    isolation. Therefore, you are required to design it as a Docker Compose application
    and manage it with the `docker-compose` CLI.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您被指派设计并部署一个博客及其数据库作为Docker中的微服务。您将使用**WordPress**，因为它是最流行的**内容管理系统**（**CMS**），被超过三分之一的互联网上的所有网站使用。此外，开发和测试团队需要在不同平台上多次安装WordPress和数据库，并进行隔离。因此，您需要将其设计为Docker
    Compose应用程序，并使用`docker-compose` CLI进行管理。
- en: 'Perform the following steps to complete this activity:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此活动：
- en: Start by creating a directory for your `docker-compose.yaml` file.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个用于您的`docker-compose.yaml`文件的目录。
- en: Create a service for the database using MySQL and a volume defined in the `docker-compose.yaml`
    file. Ensure that the `MYSQL_ROOT_PASSWORD`, `MYSQL_DATABASE`, `MYSQL_USER`, and
    `MYSQL_PASSWORD` environment variables are set.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用MySQL在`docker-compose.yaml`文件中创建一个数据库服务和一个卷。确保设置`MYSQL_ROOT_PASSWORD`、`MYSQL_DATABASE`、`MYSQL_USER`和`MYSQL_PASSWORD`环境变量。
- en: Create a service for WordPress defined in the `docker-compose.yaml` file. Ensure
    that the WordPress containers start after the database. For the configuration
    of WordPress, do not forget to set the `WORDPRESS_DB_HOST`, `WORDPRESS_DB_USER`,
    `WORDPRESS_DB_PASSWORD`, and `WORDPRESS_DB_NAME` environment variables in accordance
    with *step 2*. In addition, you need to publish its port to be able to reach it
    from the browser.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`docker-compose.yaml`文件中创建一个WordPress的服务。确保WordPress容器在数据库之后启动。对于WordPress的配置，不要忘记根据*步骤2*设置`WORDPRESS_DB_HOST`、`WORDPRESS_DB_USER`、`WORDPRESS_DB_PASSWORD`和`WORDPRESS_DB_NAME`环境变量。此外，您需要发布其端口以便能够从浏览器访问它。
- en: 'Start the Docker Compose application in `detached` mode. Upon successful deployment,
    you will have two containers running:![Figure 5.16: WordPress and database containers'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`detached`模式启动Docker Compose应用程序。成功部署后，您将有两个运行的容器：![图5.16：WordPress和数据库容器
- en: '](image/B15021_05_16.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_16.jpg)'
- en: 'Figure 5.16: WordPress and database containers'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16：WordPress和数据库容器
- en: 'You will then be able to reach the setup screen of WordPress in the browser:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将能够在浏览器中访问WordPress的设置屏幕：
- en: '![Figure 5.17: WordPress setup screen'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.17：WordPress设置屏幕'
- en: '](image/B15021_05_17.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_17.jpg)'
- en: 'Figure 5.17: WordPress setup screen'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17：WordPress设置屏幕
- en: Note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor328).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor328)找到。
- en: In the next activity, you will get hands-on experience installing the Panoramic
    Trekking App using Docker Compose by creating a three-container Docker application
    and managing it with the `docker-compose` CLI.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个活动中，您将通过创建一个包含三个容器的Docker应用程序，并使用`docker-compose` CLI进行管理，获得安装全景徒步应用的实际经验。
- en: 'Activity 5.02: Installing the Panoramic Trekking App Using Docker Compose'
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动5.02：使用Docker Compose安装全景徒步应用
- en: You are tasked with creating a deployment of the Panoramic Trekking App using
    Docker Compose. You will take advantage of the three-tier architecture of the
    Panoramic Trekking App and create a three-container Docker application, with containers
    for the database, the web backend, and `nginx`. Therefore, you will design it
    as a Docker Compose application and manage it with the `docker-compose` CLI.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您的任务是使用Docker Compose创建Panoramic Trekking App的部署。您将利用Panoramic Trekking App的三层架构，并创建一个包含数据库、Web后端和`nginx`容器的三个容器Docker应用程序。因此，您将将其设计为Docker
    Compose应用程序，并使用`docker-compose` CLI进行管理。
- en: 'Perform the following steps to complete this activity:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此活动：
- en: Create a directory for your `docker-compose.yaml` file.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的`docker-compose.yaml`文件创建一个目录。
- en: Create a service for the database using PostgreSQL and a volume defined in the
    `docker-compose.yaml` file. Ensure that the `POSTGRES_PASSWORD` environment variable
    is set to `docker`. In addition, you need to create a `db_data` volume in `docker-compose.yaml`
    and mount it to the `/var/lib/postgresql/data/` to store the database files.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用PostgreSQL为数据库创建一个服务，并在`docker-compose.yaml`文件中定义一个卷。确保将`POSTGRES_PASSWORD`环境变量设置为`docker`。此外，您需要在`docker-compose.yaml`中创建一个`db_data`卷，并将其挂载到`/var/lib/postgresql/data/`以存储数据库文件。
- en: Create a service for the Panoramic Trekking App defined in the `docker-compose.yaml`
    file. Ensure that you are using the `packtworkshops/the-docker-workshop:chapter5-pta-web`
    Docker image, which is prebuilt and ready to use from the registry. In addition,
    since the application is dependent on the database, you should configure the container
    to start after the database. To store the static files, create a `static_data`
    volume in `docker-compose.yaml` and mount it to `/service/static/`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`docker-compose.yaml`文件中为Panoramic Trekking App创建一个服务。确保您使用的是`packtworkshops/the-docker-workshop:chapter5-pta-web`
    Docker镜像，该镜像已经预先构建并准备好从注册表中使用。此外，由于应用程序依赖于数据库，您应该配置容器在数据库之后启动。为了存储静态文件，在`docker-compose.yaml`中创建一个`static_data`卷，并将其挂载到`/service/static/`。
- en: Finally, create a service for `nginx` and ensure that you are using the `packtworkshops/the-docker-workshop:chapter5-pta-nginx`
    Docker image from the registry. Ensure that the `nginx` container starts after
    the Panoramic Trekking App container. You also need to mount the same `static_data`
    volume to the `/service/static/` location. Do not forget to publish `nginx` port
    `80` to `8000` to reach from the browser.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为`nginx`创建一个服务，并确保您正在使用注册表中的`packtworkshops/the-docker-workshop:chapter5-pta-nginx`
    Docker镜像。确保`nginx`容器在Panoramic Trekking App容器之后启动。您还需要将相同的`static_data`卷挂载到`/service/static/`位置。不要忘记将`nginx`端口`80`发布到`8000`，以便从浏览器访问。
- en: 'Start the Docker Compose application in `detached` mode. Upon successful deployment,
    you will have three containers running:![Figure 5.18: The application, database,
    and nginx containers'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以“分离”模式启动Docker Compose应用程序。成功部署后，将有三个容器在运行：![图5.18：应用程序、数据库和nginx容器
- en: '](image/B15021_05_18.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_18.jpg)'
- en: 'Figure 5.18: The application, database, and nginx containers'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18：应用程序、数据库和nginx容器
- en: 'Go to the administration section of the Panoramic Trekking App in the browser
    with the address `http://0.0.0.0:8000/admin`:![Figure 5.19: Admin setup logon'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中转到Panoramic Trekking App的管理部分，地址为`http://0.0.0.0:8000/admin`：![图5.19：管理员设置登录
- en: '](image/B15021_05_19.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_19.jpg)'
- en: 'Figure 5.19: Admin setup logon'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19：管理员设置登录
- en: 'You can log in with the username `admin` and password `changeme` and add new
    photos and countries:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用用户名`admin`和密码`changeme`登录，并添加新的照片和国家：
- en: '![Figure 5.20: Admin setup view'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.20：管理员设置视图'
- en: '](image/B15021_05_20.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_20.jpg)'
- en: 'Figure 5.20: Admin setup view'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20：管理员设置视图
- en: 'Access the Panoramic Trekking App at the address `http://0.0.0.0:8000/photo_viewer`
    in the browser:![Figure 5.21: Application view'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问全景徒步应用程序的地址`http://0.0.0.0:8000/photo_viewer`：![图5.21：应用程序视图
- en: '](image/B15021_05_21.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_21.jpg)'
- en: 'Figure 5.21: Application view'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21：应用程序视图
- en: Note
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor329).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor329)找到。
- en: Summary
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on using Docker Compose to design, create, and manage multi-container
    applications. The complexity of containerized applications has increased with
    the rise of the microservice architecture. Thus, it has become difficult to create,
    manage, and troubleshoot multi-container applications without the appropriate
    tooling. Docker Compose is the official tool in the Docker toolbox for this purpose.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了使用Docker Compose设计、创建和管理多容器应用程序。随着微服务架构的兴起，容器化应用程序的复杂性也增加。因此，如果没有适当的工具，创建、管理和排除多容器应用程序将变得困难。Docker
    Compose是Docker工具箱中的官方工具，用于此目的。
- en: In this chapter, the main focus was to learn `docker-compose` comprehensively.
    With this aim, the chapter started with the capabilities of the `docker-compose`
    CLI with its commands and flags. Then, the anatomy of `docker-compose.yaml` files
    was presented. The power of Docker Compose actually comes from the configuration
    capabilities defined in the `docker-compose.yaml` files. Therefore, it is essential
    to learn how to use these files to manage multi-container applications.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，主要重点是全面学习`docker-compose`。为此，本章从`docker-compose` CLI的功能及其命令和标志开始。然后介绍了`docker-compose.yaml`文件的结构。Docker
    Compose的强大之处实际上来自于`docker-compose.yaml`文件中定义的配置能力。因此，学习如何使用这些文件来管理多容器应用是至关重要的。
- en: Following that, the configuration of services in Docker Compose was illustrated.
    You have learned how to configure services for different environments and adapt
    to changes in the future. We then moved on to service dependencies to learn how
    to create more complex containerized applications.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，演示了Docker Compose中服务的配置。您已经学会了如何为不同环境配置服务并适应未来的变化。然后我们转向了服务依赖关系，以学习如何创建更复杂的容器化应用程序。
- en: Every exercise in this chapter aimed to show the capabilities of Docker, including
    different CLI commands and YAML file sections. It is essential to get hands-on
    experience of the CLI and the files needed to create multi-container applications
    for use in testing and production environments.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的每个练习都旨在展示Docker的能力，包括不同的CLI命令和YAML文件部分。必须亲自体验CLI和创建用于测试和生产环境中的多容器应用所需的文件。
- en: In the next chapter, you will learn about networking in Docker. Networking in
    containerized and scalable applications is one of the critical parts of the infrastructure,
    as it glues together the distributed parts. That's why networking in Docker consists
    of pluggable drivers and options to enhance the containerized application development
    and management experience.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习Docker中的网络。容器化和可扩展应用程序中的网络是基础设施的关键部分之一，因为它将分布式部分粘合在一起。这就是为什么Docker中的网络由可插拔驱动程序和选项组成，以增强容器化应用程序的开发和管理体验。
