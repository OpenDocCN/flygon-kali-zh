- en: Chapter 6. Making Containers Work
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使容器工作
- en: In this chapter, we will explore various options of creating Docker containers
    with added modes, such as privileged mode and super privileged mode containers.
    We will also be exploring various troubleshooting issues for these modes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索使用特权模式和超级特权模式容器创建Docker容器的各种选项。我们还将探索这些模式的各种故障排除问题。
- en: We will take a deep dive into various deployment management tools, such as **Chef**,
    **Puppet**, and **Ansible**, which provide integration with Docker in order to
    ease the pain of deploying thousands of containers for a production environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入研究各种部署管理工具，如**Chef**、**Puppet**和**Ansible**，它们与Docker集成，以便为生产环境部署数千个容器减轻痛苦。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Privileged containers and super privileged containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特权容器和超级特权容器
- en: Troubleshooting issues of working with different sets of options available for
    creating containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决使用不同设置选项创建容器时遇到的问题
- en: Making Docker containers work with Puppet, Ansible, and Chef
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使Docker容器与Puppet、Ansible和Chef配合工作
- en: Using Puppet to create Docker containers and deploy applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Puppet创建Docker容器并部署应用程序
- en: Managing Docker containers with Ansible
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible管理Docker容器
- en: Building Docker and Ansible together
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Docker和Ansible一起构建
- en: Chef for Docker
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Docker的Chef
- en: 'Automating the Docker container''s deployment with the help of the preceding
    management tools has the following advantages:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 利用前述管理工具自动化Docker容器的部署具有以下优势：
- en: '**Flexibility**: They provide you with the flexibility to reproduce the Docker-based
    application, as well as the environment required for the Docker application on
    the cloud instance or bare metal of your choice. This helps in managing and testing,
    as well as providing dev environment spin up as and when required.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：它们为您提供了在云实例或您选择的裸机上复制基于Docker的应用程序以及Docker应用程序所需的环境的灵活性。这有助于管理和测试，以及根据需要提供开发环境。'
- en: '**Auditability**: These tools also provide auditability, as they provide isolation
    and help track any potential vulnerabilities and who deployed what type of container
    in which environment.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可审计性**：这些工具还提供了审计功能，因为它们提供了隔离，并帮助跟踪任何潜在的漏洞以及在哪个环境中部署了什么类型的容器。'
- en: '**Ubiquity**: They help you manage the full environment around containers,
    that is, manage container as well as non-container environments such as storage,
    database, and networking models around the container application.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普遍性**：它们帮助您管理容器周围的整个环境，即管理容器以及非容器环境，如存储、数据库和容器应用程序周围的网络模型。'
- en: Privileged containers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特权容器
- en: 'By default, containers run in unprivileged mode, that is, we cannot run Docker
    daemon inside a Docker container. However, the privileged Docker container is
    given access to all the devices. Docker privileged mode allows access to all the
    devices on the host and sets system configuration in **App Armor** and **SELinux**
    to allow containers the same access as the process running on the host:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，容器以非特权模式运行，也就是说，我们不能在Docker容器内运行Docker守护程序。但是，特权Docker容器被赋予对所有设备的访问权限。Docker特权模式允许访问主机上的所有设备，并在**App
    Armor**和**SELinux**中设置系统配置，以允许容器与主机上运行的进程具有相同的访问权限：
- en: '![Privileged containers](graphics/image_06_001-1.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![特权容器](graphics/image_06_001-1.jpg)'
- en: Privileged container highlighted in red
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的特权容器
- en: 'The privileged containers can be started with the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 特权容器可以使用以下命令启动：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As we can see, after starting the container in privileged mode, we can list
    all the devices connected to the host machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，启动特权模式容器后，我们可以列出连接到主机机器的所有设备。
- en: Troubleshooting tips
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除提示
- en: Docker allows you to use the non-default profile by supporting the addition,
    as well as the removal of, capabilities. It is better to remove the capabilities
    that are not specifically required for the container process as this will make
    it secure.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Docker允许您通过支持添加和删除功能来使用非默认配置文件。最好删除容器进程不需要的功能，这样可以使其更安全。
- en: If you are facing security threats on your host system running containers, it
    is usually advised to check if any of the containers are running with privileged
    mode, which might be affecting the security of the host system by running a security-threat
    application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的主机系统上运行的容器面临安全威胁，通常建议检查是否有任何容器以特权模式运行，这可能会通过运行安全威胁应用程序来影响主机系统的安全。
- en: 'As seen in the following example, when we run the container without privileged
    mode, we are unable to change the kernel parameters, but when we run the container
    in privileged mode using the `--privileged` flag it is able to change the kernel
    parameters easily, which can cause a security vulnerability on the host system:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如下例所示，当我们以非特权模式运行容器时，无法更改内核参数，但当我们使用`--privileged`标志以特权模式运行容器时，它可以轻松更改内核参数，这可能会在主机系统上造成安全漏洞：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So, while auditing, you should ensure that all the containers running on the
    host system do not have privileged mode set to `true` unless required for some
    specific application running in the Docker container:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在审核时，您应确保主机系统上运行的所有容器的特权模式未设置为`true`，除非某些特定应用程序在Docker容器中运行时需要：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Super-privileged container
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级特权容器
- en: This concept is introduced in one of the Project Atomic blogs, by Redhat. It
    provides the capability to use a special/privileged container as an agent to control
    the underlying host. If we ship only the application code, we risk turning the
    container into a black box. There are many benefits to the host of packaging up
    an agent as a Docker container with the right access. We can bind in devices via
    `-v /dev:/dev`, which will help to mount devices inside the container without
    needing super-privileged access.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念是在Redhat的Project Atomic博客中介绍的。它提供了使用特殊/特权容器作为代理来控制底层主机的能力。如果我们只发布应用程序代码，我们就有将容器变成黑匣子的风险。将代理打包为具有正确访问权限的Docker容器对主机有许多好处。我们可以通过`-v
    /dev:/dev`绑定设备，这将帮助在容器内部挂载设备而无需超级特权访问。
- en: Using `nsenter` trick, allows you to run commands in another namespace, that
    is, if Docker has its own private mount namespace, with `nsenter` and the right
    mode we can reach out to the host and mount things in its namespace.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`nsenter`技巧，允许您在另一个命名空间中运行命令，也就是说，如果Docker有自己的私有挂载命名空间，通过`nsenter`和正确的模式，我们可以到达主机并在其命名空间中挂载东西。
- en: 'We can run in privileged mode to mount the whole host system on some path (`/media/host`):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以特权模式运行，将整个主机系统挂载到某个路径（`/media/host`）上：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can then use `nsenter` inside the container; `--mount` tells `nsenter` to
    look into `/media/host` and then select the mount namespace for proc number 1\.
    Then, run the regular mount command linking the device to the mount point. As
    seen previously, this functionality allows us to mount host sockets and devices
    such as a file, and thus all can be bind mounted into a container for use:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在容器内部使用`nsenter`；`--mount`告诉`nsenter`查看`/media/host`，然后选择proc编号1的挂载命名空间。然后，运行常规挂载命令将设备链接到挂载点。如前所述，此功能允许我们挂载主机套接字和设备，例如文件，因此所有这些都可以绑定到容器中供使用：
- en: '![Super-privileged container](graphics/image_06_002-2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![超级特权容器](graphics/image_06_002-2.jpg)'
- en: nsenter running as a super-privileged container monitoring the host
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为超级特权容器运行的nsenter监视主机
- en: Basically, super-privileged containers thus not only provide security separation,
    resource, and process isolation, but also a mechanism for shipping containers.
    Allowing software to be shipped as a container image also allows us to manage
    the host operating system and manage other container processes as explained previously.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，超级特权容器不仅提供安全隔离、资源和进程隔离，还提供了一种容器的运输机制。允许软件以容器镜像的形式进行运输，也允许我们管理主机操作系统和管理其他容器进程，就像之前解释的那样。
- en: 'Let us consider an example where, currently, we are loading the required kernel
    modules as RPM packages needed by the application that are not included in the
    host OS, and running them when the application starts. This module can be shipped
    with the help of super-privileged containers, and the benefit will be that this
    custom kernel module can work very well with the current kernel in comparison
    to shipping kernel modules as part of a privileged container. In this approach,
    it is not required to run the application as a privileged container; they can
    run separately and kernel modules can be loaded as part of a different image as
    shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子，目前，我们正在加载应用程序所需的内核模块，这些模块是主机操作系统中不包括的RPM软件包，并在应用程序启动时运行它们。这个模块可以通过超级特权容器的帮助进行运输，好处是这个自定义内核模块可以与当前内核非常好地配合，而不是将内核模块作为特权容器的一部分进行运输。在这种方法中，不需要将应用程序作为特权容器运行；它们可以分开运行，内核模块可以作为不同镜像的一部分加载，如下所示：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Troubleshooting - Docker containers at scale
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除 - 大规模的Docker容器
- en: 'Working in a production environment means continuous deployments. When the
    infrastructure is decentralized and cloud-based, we are frequently managing the
    deployment of identical services across identical systems. Automating the entire
    process of configuration and management of this system will be a boon. Deployment
    management tools are designed for this purpose. They provide recipes, playbooks,
    and templates to simplify orchestration and automation, to provide a standard and
    consistent deployment. In the following sections, we will be exploring three common
    configuration-automation tools: Chef, Puppet, and Ansible, and the ease they provide
    for deploying Docker containers at scale.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中工作意味着持续部署。当基础设施是分散的和基于云的时，我们经常在相同的系统上管理相同服务的部署。自动化整个配置和管理这个系统的过程将是一个福音。部署管理工具就是为此目的而设计的。它们提供配方、剧本和模板，简化编排和自动化，提供标准和一致的部署。在接下来的章节中，我们将探讨三种常见的配置自动化工具：Chef、Puppet和Ansible，以及它们在大规模部署Docker容器时提供的便利。
- en: Puppet
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 木偶
- en: Puppet is an automated engine that performs automated administrative tasks such
    as updating configurations, adding users, and installing packages based on user
    specifications. Puppet is a well known open source configuration management tool,
    which runs on various systems, such as Microsoft Windows, Unix, and Linux. The
    user describes the configuration using either Puppet's declarative language or
    a domain-specific language (Ruby). Puppet is model-driven and requires limited
    programming knowledge to use. Puppet provides a module for managing Docker containers.
    Puppet and Docker integration can help to achieve complex use cases with ease.
    Puppet manages files, packages, and services, while Docker encapsulates binaries
    and configuration inside a container, for deployment as an application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet是一个自动化引擎，执行自动化的管理任务，如更新配置、添加用户和根据用户规范安装软件包。 Puppet是一个众所周知的开源配置管理工具，可在各种系统上运行，如Microsoft
    Windows、Unix和Linux。用户可以使用Puppet的声明性语言或特定领域语言（Ruby）描述配置。 Puppet是模型驱动的，使用时需要有限的编程知识。
    Puppet提供了一个用于管理Docker容器的模块。 Puppet和Docker集成可以帮助轻松实现复杂的用例。 Puppet管理文件、软件包和服务，而Docker将二进制文件和配置封装在容器中，以便部署为应用程序。
- en: 'One of the potential use cases of Puppet is that it can be used to provision
    the Docker containers required for a Jenkins build, and this can be done at scale
    as per the need of developers, that is, when the build gets triggered. After the
    build process is complete, binaries can be delivered to the respective owners
    and containers can be destroyed after each build. Puppet plays a very important
    role in this use case as the code has to be written once using the Puppet template,
    and it can be triggered as and when required:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet的一个潜在用例是，它可以用于为Jenkins构建所需的Docker容器进行配置，并且可以根据开发人员的需求进行规模化，即在触发构建时。构建过程完成后，二进制文件可以交付给各自的所有者，并且每次构建后都可以销毁容器。在这种用例中，Puppet扮演着非常重要的角色，因为代码只需使用Puppet模板编写一次，然后可以根据需要触发：
- en: '![Puppet](graphics/image_06_003-1.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet](graphics/image_06_003-1.jpg)'
- en: Integration of Puppet and Jenkins to deploy build docker containers
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将Puppet和Jenkins集成以部署构建Docker容器
- en: 'The Puppet module for managing Docker can be installed as per the `garethr-docker`
    GitHub project. The module just requires a single class to be included:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据`garethr-docker` GitHub项目安装用于管理Docker的Puppet模块。该模块只需要包含一个类：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It sets up a Docker hosted repository and installs Docker packages and any
    required kernel extensions. The Docker daemon will bind to `unix socket /var/run/docker.sock`;
    this configuration can be changed as per the requirement:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它设置了一个Docker托管的存储库，并安装了Docker软件包和任何所需的内核扩展。 Docker守护程序将绑定到`unix socket /var/run/docker.sock`；根据需求，可以更改此配置：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As shown in the preceding code, the default configuration the Docker can be
    changed as per the configurations provided by this module.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，Docker的默认配置可以根据此模块提供的配置进行更改。
- en: Images
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像
- en: The Docker image can be pulled with the help of the configurations syntax elaborated
    here.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用此处详细说明的配置语法来拉取Docker镜像。
- en: 'The alternative to the `ubuntu:trusty docker` command will be as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`ubuntu:trusty docker`命令的替代方法如下：'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Even the configuration allows the link to Dockerfile in order to build the
    image. A rebuild of the image can also be triggered by subscribing to external
    events such as changes in the Dockerfile. We subscribe to changes in the folder
    `vkohli/Dockerfile`, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至配置允许链接到Dockerfile以构建镜像。也可以通过订阅外部事件（如Dockerfile中的更改）来触发镜像的重建。我们订阅`vkohli/Dockerfile`文件夹中的更改，如下所示：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Containers
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: 'After the image has been created, containers can be launched with a number
    of optional parameters. We get a similar functionality with the basic `docker
    run` command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建图像后，可以使用多个可选参数启动容器。我们可以使用基本的`docker run`命令获得类似的功能：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As shown here, we are also able to pass some more parameters, such as the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，我们还可以传递一些更多的参数，例如以下内容：
- en: '`pull_on_start`: Before the image is started it will be freshly pulled each
    time'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull_on_start`：在启动图像之前，每次都会重新拉取它'
- en: '`before_stop`: The command mentioned will get executed before stopping the
    container'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`before_stop`：在停止容器之前将执行所述命令'
- en: '`extra_parameters`: Additional array parameters required to pass to the `docker
    run` command, such as `--restart=always`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_parameters`：传递给`docker run`命令所需的附加数组参数，例如`--restart=always`'
- en: '`after`: This option allows expressing containers that are required to be started
    first'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`after`：此选项允许表达需要首先启动的容器'
- en: Other parameters which can be set are `ports`, `expose`, `env_files`, and `volumes`.
    A single value or an array of values can be passed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以设置的其他参数包括`ports`、`expose`、`env_files`和`volumes`。可以传递单个值或值数组。
- en: Networking
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: 'The latest Docker versions have official support for networks: the module now
    exposes a type, Docker network, which can be used to manage them:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的Docker版本已经官方支持网络：该模块现在公开了一种类型，Docker网络，可以用来管理它们：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As the preceding code shows, a new overlay network, `sample-net`, can be created,
    and the Docker daemon can be configured to use it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的代码所示，可以创建一个新的覆盖网络`sample-net`，并配置Docker守护程序以使用它。
- en: Docker compose
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker compose
- en: Compose is a tool for running multiple Docker container applications. Using
    the compose file, we can configure an application's services and start them as
    well. The `docker_compose` module type is provided, which allows Puppet to run
    the compose application with ease.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Compose是一个用于运行多个Docker容器应用程序的工具。使用compose文件，我们可以配置应用程序的服务并启动它们。提供了`docker_compose`模块类型，允许Puppet轻松运行compose应用程序。
- en: 'A compose file can be added as well, such as scaling rules of running four
    containers, as shown in the following code snippet. We can also provide additional
    parameters required for networking and other configurations:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以添加一个compose文件，例如运行四个容器的缩放规则，如下面的代码片段所示。我们还可以提供网络和其他配置所需的附加参数：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the Puppet program is not installed on your machine it can be done in the
    following way:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Puppet程序未安装在您的计算机上，可以按以下方式进行安装：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After the Puppet module installation, the `garethr-docker` module can be installed
    as shown:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装Puppet模块之后，可以按照所示安装`garethr-docker`模块：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will be creating one sample hello world app, which will be deployed using
    Puppet:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个示例hello world应用程序，将使用Puppet进行部署：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After creating the file, we apply (run) it:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件后，我们应用（运行）它：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can attach it to the container and see the output:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将其附加到容器并查看输出：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we have shown earlier, containers can be deployed across multiple hosts and
    the entire cluster can be created with help of single Puppet configuration file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，容器可以部署在多个主机上，并且整个集群可以通过单个Puppet配置文件创建。
- en: Troubleshooting tips
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除提示
- en: If you are not able to list the Docker image even after the Puppet `apply` command
    has run successfully, check the syntax and whether the correct image name is put
    up in the sample file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果即使Puppet `apply`命令成功运行后，仍无法列出Docker镜像，请检查语法和是否在示例文件中放置了正确的镜像名称。
- en: Ansible
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible
- en: 'Ansible is a workflow orchestration tool that provides configuration management,
    provisioning, and application deployment with the help of one easy-to-use platform.
    Some of the powerful features of Ansible are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一个工作流编排工具，通过一个易于使用的平台提供配置管理、供应和应用程序部署的帮助。Ansible的一些强大功能如下：
- en: '**Provisioning**: The apps are developed and deployed in different environments.
    It can be on bare metal servers, VMs, or Docker containers, locally or on the
    cloud. Ansible can help to streamline the provisioning steps with the help of
    Ansible tower and playbooks.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**供应**：应用程序在不同的环境中开发和部署。可以是裸金属服务器、虚拟机或Docker容器，在本地或云上。Ansible可以通过Ansible tower和playbooks来简化供应步骤。'
- en: '**Configuration Management**: Keeping a common configuration file is one of
    the primary use cases of Ansible, and helps manage and deploy in the required
    environment.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理**：保持一个通用的配置文件是Ansible的主要用例之一，有助于在所需的环境中进行管理和部署。'
- en: '**Application Deployment**: Ansible helps to manage the complete lifecycle
    of an application, from deployment to production.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序部署**：Ansible有助于管理应用程序的整个生命周期，从部署到生产。'
- en: '**Continuous Delivery**: Managing a continuous delivery pipeline requires resources
    from various teams. It cannot be achieved with the help of simple platform, hence,
    Ansible playbooks play a vital role in deploying and managing the applications
    throughout their lifecycle.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**：管理持续交付流水线需要来自各个团队的资源。这不能仅靠简单的平台实现，因此，Ansible playbooks在部署和管理应用程序的整个生命周期中发挥着重要作用。'
- en: '**Security and Compliance**: Security can be an integral part from the deployment
    stage, by integrating various security policies as part of the automated process,
    rather than as an afterthought process or merging it later.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和合规性**：安全性可以作为部署阶段的一个组成部分，通过将各种安全策略作为自动化流程的一部分，而不是作为事后的思考过程或稍后合并。'
- en: '**Orchestration**: As explained previously, Ansible can define the way to manage
    multiple configurations, interact with them, and manage the individual pieces
    of the deployment script.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编排**：如前所述，Ansible可以定义管理多个配置的方式，与它们交互，并管理部署脚本的各个部分。'
- en: Automating Docker with Ansible
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Ansible自动化Docker
- en: 'Ansible also provides a way to automate Docker containers; it enables us to
    channelise and operationalise the Docker container build and automate a process
    that is mostly handled manually as of now. Ansible offers the following module
    for orchestrating Docker containers:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible还提供了一种自动化Docker容器的方式；它使我们能够将Docker容器构建和自动化流程进行通道化和操作化，这个过程目前大多数情况下是手动处理的。Ansible为编排Docker容器提供了以下模块：
- en: '**Docker_service**: The existing Docker compose files can be used to orchestrate
    containers on a single Docker daemon or swarm with the help of the Docker service
    part of Ansible. The Docker compose file has the same syntax as the Ansible playbook,
    as both of them are **Yaml** files and the syntax is almost the same. Ansible
    is also written in Python, and the Docker module uses the exact docker-py API
    client that docker compose uses internally.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker_service**：现有的Docker compose文件可以用于通过Ansible的Docker服务部分在单个Docker守护程序或集群上编排容器。Docker
    compose文件与Ansible playbook具有相同的语法，因为它们都是**Yaml**文件，语法几乎相同。Ansible也是用Python编写的，Docker模块使用的是docker
    compose在内部使用的确切docker-py API客户端。'
- en: 'Here''s a simple Docker compose file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的Docker compose文件：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The Ansible playbook for the preceding Docker compose file looks similar:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的Docker compose文件的Ansible playbook看起来很相似：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**docker_container**: This manages the lifecycle of the Docker container by
    providing the ability to start, stop, create, and destroy a Docker container.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**docker_container**：通过提供启动、停止、创建和销毁Docker容器的能力，来管理Docker容器的生命周期。'
- en: '**docker_image**: This provides help to manage images of the Docker container
    with commands such as build, push, tag, and remove a Docker image.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**docker_image**：这提供了帮助来管理 Docker 容器的镜像，包括构建、推送、标记和删除 Docker 镜像的命令。'
- en: '**docker_login**: This authenticates with the Docker hub or any Docker registry
    and provides pushing as well as pulling Docker images from the registry.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**docker_login**：这将与 Docker hub 或任何 Docker 注册表进行身份验证，并提供从注册表推送和拉取 Docker 镜像的功能。'
- en: Ansible Container
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible Container
- en: 'Ansible Container is a tool used to orchestrate and build Docker images using
    Ansible playbooks only. Ansible Container can be installed in the following way
    by creating `virtualenv` using pip installation:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Container 是一个工具，仅使用 Ansible playbooks 来编排和构建 Docker 镜像。可以通过创建 `virtualenv`
    并使用 pip 安装的方式来安装 Ansible Container：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Troubleshooting tips
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除提示
- en: 'If you have issues installing Ansible Container as shown above, the installation
    can be done by downloading the source code from GitHub:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在安装 Ansible Container 方面遇到问题，可以通过从 GitHub 下载源代码来进行安装：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The Ansible Container has the following commands to get started:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Container 有以下命令可供开始使用：
- en: '**ansible_container init**: This command creates a directory for Ansible files
    to get started:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ansible_container init**：此命令创建一个用于开始的 Ansible 文件目录。'
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**ansible-container build**: This creates images from the Ansible playbooks
    in the Ansible directory'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ansible-container build**：这将从 Ansible 目录中的 playbooks 创建镜像'
- en: '**ansible-container run**: This launches the containers defined in the `container.yml`
    file'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ansible-container run**：这将启动 `container.yml` 文件中定义的容器'
- en: '**ansible-container push**: This pushes the project''s image to the private
    or public repository, as per the user''s choice'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ansible-container push**：这将根据用户选择将项目的镜像推送到私有或公共仓库'
- en: '**ansible-container shipit**: This will export the necessary playbooks and
    roles to deploy containers to a supported cloud provider'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ansible-container shipit**：这将导出必要的 playbooks 和角色以部署容器到支持的云提供商'
- en: 'As shown in the example at GitHub, the Django service can be defined in the
    `container.yml` file in the following way:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 GitHub 上的示例中所示，可以在 `container.yml` 文件中以以下方式定义 Django 服务：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Chef
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chef
- en: Chef has some important components, such as cookbook and recipes. A cookbook
    defines a scenario and contains everything; the first of them is recipes which
    is a fundamental configuration element within an organisation and it is written
    in Ruby language. It is mostly collection of resource-defined using patterns.
    Cookbooks also contain attribute values, file distribution, and templates. Chef
    allows the Docker container to be managed in a versionable, testable, and repeatable
    way. It provides you with the power to build an efficient workflow for container-based
    development and to manage the release pipeline. Chef delivery allows you to automate
    and use the scalable workflow to test, develop, and release the Docker container.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 有一些重要的组件，如 cookbook 和 recipes。Cookbook 定义了一个场景并包含了一切；其中第一个是 recipes，它是组织中的一个基本配置元素，使用
    Ruby 语言编写。它主要是使用模式定义的资源集合。Cookbook 还包含属性值、文件分发和模板。Chef 允许以可版本控制、可测试和可重复的方式管理 Docker
    容器。它为基于容器的开发提供了构建高效工作流和管理发布流水线的能力。Chef delivery 允许您自动化并使用可扩展的工作流来测试、开发和发布 Docker
    容器。
- en: 'The Docker cookbook is available on GitHub ([https://github.com/chef-cookbooks/docker](https://github.com/chef-cookbooks/docker))
    and provides custom resources to be used in the recipes. It provides various options,
    such as the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Docker cookbook 可在 GitHub 上找到（[https://github.com/chef-cookbooks/docker](https://github.com/chef-cookbooks/docker)），并提供自定义资源以在配方中使用。它提供了各种选项，例如以下内容：
- en: '`docker_service`: These are the composite resources used for `docker_installation`
    and `docker_service` manager'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_service`：这些是用于 `docker_installation` 和 `docker_service` 管理器的复合资源'
- en: '`docker_image`: This deals with pulling Docker images from a repository'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_image`: 这个用于从仓库中拉取 Docker 镜像'
- en: '`docker_container`: This handles all the Docker container operations'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_container`: 这个处理所有 Docker 容器操作'
- en: '`docker_registry`: This handles all the Docker registry operations'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_registry`: 这个处理所有 Docker 注册操作'
- en: '`docker_volume`: This manages all the volume related operations for Docker
    containers'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_volume`: 这个管理 Docker 容器所有卷相关的操作'
- en: 'The following is a sample Chef Docker recipe, which can be used for reference
    to deploy the containers using Chef recipes:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个样本 Chef Docker 配方，可用作参考以使用 Chef 配方部署容器：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we initially did a deep dive into privileged containers, which
    can get access to all the host devices as well as super-privileged containers,
    it shows the capability of the containers to manage to run a background service
    which can be used to run services in Docker containers to manage the underlying
    host. Then, we looked into Puppet, a key orchestration tool, and how it handles
    container management with help of the `garethr-docker` GitHub project. We also
    looked into Ansible and Chef, which provide similar capabilities to Puppet to
    manage Docker containers at scale. In the next chapter, we will be exploring the
    Docker networking stack.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先深入研究了特权容器，它可以访问所有主机设备以及超级特权容器，展示了容器管理在后台运行服务的能力，这可以用于在 Docker 容器中运行服务以管理底层主机。然后，我们研究了
    Puppet，一个重要的编排工具，以及它如何借助 `garethr-docker` GitHub 项目来处理容器管理。我们还研究了 Ansible 和 Chef，它们提供了类似的能力，可以规模化地管理
    Docker 容器。在下一章中，我们将探索 Docker 网络堆栈。
