["```java\n@Test\npublic void givenStreamWhenSumThenEquals6() {\n\u00a0\u00a0// Arrange\n\u00a0\u00a0Stream<Integer> theStream = Stream.of(1, 2, 3);\n\u00a0\u00a0// Act\n\u00a0\u00a0int sum = theStream.mapToInt(i -> i).sum();\n\u00a0\u00a0// Assert\n\u00a0\u00a0assertEquals(6, sum);\n}\n```", "```java\n@Test\npublic void givenStreamWhenGetThenException() {\n\u00a0\u00a0Stream<Integer> theStream = Stream.of();\n\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0theStream.findAny().get();\n\u00a0\u00a0\u00a0\u00a0fail(\"Expected a NoSuchElementException to be thrown\");\n\u00a0\u00a0} catch (NoSuchElementException ex) {\n\u00a0\u00a0\u00a0\u00a0assertThat(ex.getMessage(), is(\"No value present\"));\n\u00a0\u00a0}\n}\n```", "```java\n@Test(expected = NoSuchElementException.class)\npublic void givenStreamWhenGetThenException() {\n\u00a0\u00a0Stream<Integer> theStream = Stream.of();\n\u00a0\u00a0theStream.findAny().get();\n}\n```", "```java\n@Rule\npublic ExpectedException thrown = ExpectedException.none();\n@Test\npublic void givenStreamWhenGetThenException() \n\u00a0\u00a0\u00a0\u00a0throws NoSuchElementException {\n\u00a0\u00a0Stream<Integer> theStream = Stream.of();\n\u00a0\u00a0thrown.expect(NoSuchElementException.class);\n\u00a0\u00a0thrown.expectMessage(\"No value present\");\n\u00a0\u00a0theStream.findAny().get();\n}\n```", "```java\n@Test\npublic void givenStreamWhenGetThenException() {\n\u00a0\u00a0assertThrows(NoSuchElementException.class, () -> {\n\u00a0\u00a0\u00a0\u00a0Stream<Integer> theStream = Stream.of();\n\u00a0\u00a0\u00a0\u00a0theStream.findAny().get();\n\u00a0\u00a0});\n}\n```", "```java\n@Test\npublic void givenStreamWhenGetThenException() {\n\u00a0\u00a0Throwable ex = assertThrows(\n\u00a0\u00a0\u00a0\u00a0NoSuchElementException.class, () -> {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Stream<Integer> theStream = Stream.of();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0theStream.findAny().get();\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0assertEquals(ex.getMessage(), \"No value present\");\n}\n```", "```java\n@RunWith(Suite.class)\n@Suite.SuiteClasses({\n\u00a0\u00a0TestConnect.class,\n\u00a0\u00a0TestHeartbeat.class,\n\u00a0\u00a0TestDisconnect.class\n})\npublic class TestSuite {\n\u00a0\u00a0\u00a0\u00a0// this class was intentionally left empty\n}\n```", "```java\n@RunWith(JUnitPlatform.class)\n@SuiteDisplayName(\"TEST LOGIN AND CONNECTION\")\n@SelectPackages({\n\u00a0\u00a0\"coding.challenge.connection.test\",\n\u00a0\u00a0\"coding.challenge.login.test\"\n})\npublic class TestLoginSuite {\n\u00a0\u00a0// this class was intentionally left empty\n}\n```", "```java\n@RunWith(JUnitPlatform.class)\n@SuiteDisplayName(\"TEST CONNECTION\")\n@SelectClasses({\n\u00a0\u00a0TestConnect.class, \n\u00a0\u00a0TestHeartbeat.class, \n\u00a0\u00a0TestDisconnect.class\n})\npublic class TestConnectionSuite {\n\u00a0\u00a0// this class was intentionally left empty\n}\n```", "```java\n@Test\npublic void givenFolderWhenGetAbsolutePathThenSuccess() {\n\u00a0\u00a0assumeThat(File.separatorChar, is('/'));\n\u00a0\u00a0assertThat(new File(\".\").getAbsolutePath(),\n\u00a0\u00a0\u00a0\u00a0is(\"C:/SBPBP/GitHub/Chapter18/junit4\"));\n}\n```", "```java\n@Test\npublic void givenFolderWhenGetAbsolutePathThenSuccess() {\n\u00a0\u00a0assumingThat(File.separatorChar == '/',\n\u00a0\u00a0\u00a0() -> {\n\u00a0\u00a0\u00a0\u00a0\u00a0assertThat(new File(\".\").getAbsolutePath(), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is(\"C:/SBPBP/GitHub/Chapter18/junit5\"));\n\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0// run these assertions always, just like normal test\n\u00a0\u00a0\u00a0assertTrue(true);\n}\n```", "```java\n1: @TestFactory\n2: Stream<DynamicTest> dynamicTestsExample() {\n3:\n4:\u00a0\u00a0\u00a0List<Integer> items = Arrays.asList(1, 2, 3, 4, 5);\n5:\n6:\u00a0\u00a0\u00a0List<DynamicTest> dynamicTests = new ArrayList<>();\n7:\n8:\u00a0\u00a0\u00a0for (int item : items) {\n9:\u00a0\u00a0\u00a0\u00a0\u00a0DynamicTest dynamicTest = dynamicTest(\n10:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"pow(\" + item + \", 2):\", () -> {\n11:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(item * item, Math.pow(item, 2));\n12:\u00a0\u00a0\u00a0\u00a0});\n13:\u00a0\u00a0\u00a0\u00a0dynamicTests.add(dynamicTest);\n14:\u00a0\u00a0}\n15:\n16:\u00a0\u00a0return dynamicTests.stream();\n17: }\n```", "```java\n@RunWith(JUnitPlatform.class)\npublic class NestedTest {\n\u00a0\u00a0private static final Logger log \n\u00a0\u00a0\u00a0\u00a0= Logger.getLogger(NestedTest.class.getName());\n\u00a0\u00a0@DisplayName(\"Test 1 - not nested\")\n\u00a0\u00a0@Test\n\u00a0\u00a0void test1() {\n\u00a0\u00a0\u00a0\u00a0log.info(\"Execute test1() ...\");\n\u00a0\u00a0}\n\u00a0\u00a0@Nested\n\u00a0\u00a0@DisplayName(\"Running tests nested in class A\")\n\u00a0\u00a0class A {\n\u00a0\u00a0\u00a0\u00a0@BeforeEach\n\u00a0\u00a0\u00a0\u00a0void beforeEach() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"Before each test \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0method of the A class\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0@AfterEach\n\u00a0\u00a0\u00a0\u00a0void afterEach() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"After each test \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0method of the A class\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0@Test\n\u00a0\u00a0\u00a0\u00a0@DisplayName(\"Test2 - nested in class A\")\n\u00a0\u00a0\u00a0\u00a0void test2() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.info(\"Execute test2() ...\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```"]