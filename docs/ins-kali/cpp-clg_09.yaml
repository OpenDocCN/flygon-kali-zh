- en: Data Serialization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据序列化
- en: Problems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 73\. Serializing and deserializing data to/from XML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 73. 将数据序列化和反序列化到/从XML
- en: 'Write a program that can serialize a list of movies to an XML file, and deserialize
    an XML file with a list of movies. Each movie has a numerical identifier, title,
    release year, length in minutes, a list of directors, a list of writers, and a
    list of casting roles with actor name and character name. Such an XML may look
    like the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以将电影列表序列化为XML文件，并反序列化具有电影列表的XML文件。每部电影都有一个数字标识符，标题，发行年份，分钟长度，导演列表，编剧列表和包含演员姓名和角色姓名的角色列表。这样的XML可能如下所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 74\. Selecting data from XML using XPath
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 74. 使用XPath从XML中选择数据
- en: 'Consider an XML file with a list of movies as described for the previous problem.
    Write a program that can select and print the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个XML文件，其中包含如前一个问题所述的电影列表。编写一个程序，可以选择并打印以下内容：
- en: The title of all the movies released after a given year
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定年份后发行的所有电影的标题
- en: The name of the last actor in the casting list for each movie in the file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件中每部电影的演员列表中的最后一个演员的名称
- en: 75\. Serializing data to JSON
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 75. 将数据序列化为JSON
- en: 'Write a program that can serialize a list of movies, as defined for the previous
    problems, to a JSON file. Each movie has a numerical identifier, title, release
    year, length in minutes, a list of directors, a list of writers, and a list of
    casting roles with actor name and character name. The following is an example
    of the expected JSON format:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以将电影列表（如前面问题中定义的）序列化为JSON文件。每部电影都有一个数字标识符，标题，发行年份，分钟长度，导演列表，编剧列表和包含演员姓名和角色姓名的角色列表。以下是预期的JSON格式的示例：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 76\. Deserializing data from JSON
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 76. 从JSON中反序列化数据
- en: Consider a JSON file with a list of movies as shown in the previous problem.
    Write a program that can deserialize its content.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个JSON文件，其中包含如前一个问题所示的电影列表。编写一个程序，可以反序列化其内容。
- en: 77\. Printing a list of movies to a PDF
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 77. 将电影列表打印到PDF
- en: 'Write a program that can print to a PDF file a list of movies in a tabular
    form, with the following requirements:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以以表格形式打印电影列表到PDF文件中，具有以下要求：
- en: There must be a heading to the list with the content *List of movies*. This
    must appear only on the first page of the document.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表的标题内容为*电影列表*。这只能出现在文档的第一页上。
- en: For each movie, it should display the title, the release year, and the length.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每部电影，它应该显示标题，发行年份和长度。
- en: The title, followed by the release year in parentheses, must be left-aligned.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题，后跟括号中的发行年份，必须左对齐。
- en: The length, in hours and minutes (for example, 2:12), must be right-aligned.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度，以小时和分钟表示（例如，2:12），必须右对齐。
- en: There must be a line above and below the movie listing on each page.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每页上方和下方必须有一行电影列表。
- en: 'Here is an example of such a PDF output:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这样一个PDF输出的示例：
- en: '![](img/6def28ce-9395-44d5-b5b3-c7a46fe3ad37.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6def28ce-9395-44d5-b5b3-c7a46fe3ad37.png)'
- en: 78\. Creating a PDF from a collection of images
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 78. 从图像集合创建PDF
- en: Write a program that can create a PDF document that contains images from a user-specified
    directory. The images must be displayed one after another. If an image does not
    fit on the remainder of a page, it must be placed on the next page.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以创建一个PDF文档，其中包含来自用户指定目录的图像。图像必须依次显示。如果图像不适合页面的剩余部分，则必须放置在下一页上。
- en: 'The following is an example of such a PDF file, created from several images
    of Albert Einstein (these pictures are featured along with the source code accompanying
    the book):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这样一个PDF文件的示例，它是从几张阿尔伯特·爱因斯坦的图片创建的（这些图片与附带书籍的源代码一起展示）：
- en: '![](img/9f6d3dea-1a46-46b2-b101-17bf5e55aa1c.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f6d3dea-1a46-46b2-b101-17bf5e55aa1c.jpg)'
- en: Solutions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 73\. Serializing and deserializing data to/from XML
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 73. 将数据序列化和反序列化到/从XML
- en: The C++ standard library does not have any support for XML, but there are multiple
    open source, cross-platform libraries that you can use. Some libraries are lightweight,
    supporting a set of basic XML features, while others are more complex and rich
    in functionality. It is up to you to decide which is most suitable for a particular
    project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: C++标准库不支持XML，但有多个开源的跨平台库可供使用。一些库是轻量级的，支持一组基本的XML功能，而其他库则更复杂，功能更丰富。由您决定哪个最适合特定项目。
- en: The list of libraries you may want to consider should include *Xerces-C++*,
    *libxml++*, *tinyxml* or *tinyxml2*, *pugixml*, *gSOAP*, and *RapidXml*. For solving
    this particular task I will choose *pugixml*. This is a cross-platform, lightweight
    library, with a fast, although non-validating, XML parser. It has a DOM-like interface
    with rich traversal/modification capabilities, with support for Unicode and XPath
    1.0\. On the limitations of the library, it should be mentioned that it lacks
    support for schema validation. The pugixml library is available at [https://pugixml.org/](https://pugixml.org/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能要考虑的库列表应包括*Xerces-C++*，*libxml++*，*tinyxml*或*tinyxml2*，*pugixml*，*gSOAP*和*RapidXml*。为了解决这个特定的任务，我将选择*pugixml*。这是一个跨平台的轻量级库，具有快速的，尽管不是验证的XML解析器。它具有类似DOM的接口，具有丰富的遍历/修改功能，支持Unicode和XPath
    1.0。关于该库的限制，应该提到它缺乏模式验证的支持。pugixml库可在[https://pugixml.org/](https://pugixml.org/)上获得。
- en: 'To represent the movies, as described in the problem, we shall use the following
    structures:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示问题中描述的电影，我们将使用以下结构：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To create an XML document you must use the `pugi::xml_document` class. After
    constructing the DOM tree you can save it to a file by calling `save_file()`.
    Nodes can be added by calling `append_child()`, and attributes with `append_attribute()`.
    The following method serializes a list of movies in the requested format:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建XML文档，必须使用`pugi::xml_document`类。构造DOM树后，可以通过调用`save_file()`将其保存到文件中。可以通过调用`append_child()`添加节点，并使用`append_attribute()`添加属性。以下方法以请求的格式序列化电影列表：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For the opposite operation, you can load the content of the XML file into a `pugi::xml_document`
    by calling its `load_file()` method. You can access nodes by calling methods such
    as `child()` and `next_sibling()`, and attributes by calling `attribute()`. The
    `deserialize()` method, shown as follows, reads the DOM tree and constructs a
    list of movies:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相反的操作，您可以通过调用其`load_file()`方法将XML文件的内容加载到`pugi::xml_document`中。您可以通过调用`child()`和`next_sibling()`等方法访问节点，并通过调用`attribute()`访问属性。如下所示的`deserialize()`方法读取DOM树并构造电影列表：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An example of how these functions can be used is shown in the following listing:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下清单显示了如何使用这些函数的示例：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 74\. Selecting data from XML using XPath
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 74. 使用XPath从XML中选择数据
- en: 'Navigation through the elements and attributes of an XML file can be done with
    *XPath*. XPath uses XPath expressions for that purpose and there is a long list
    of built-in functions for that. *pugixml* supports XPath expressions and you can
    use the `select_nodes()` method from the `xml_document` class for that purpose.
    Note that, if an error occurs during the XPath selection, an `xpath_exception`
    is thrown. The following XPath expressions can be used for selecting the nodes
    according to the problem requirements:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用*XPath*在XML文件的元素和属性之间导航。XPath使用XPath表达式进行此目的，并且有一个长列表的内置函数可供使用。*pugixml*支持XPath表达式，您可以使用`xml_document`类的`select_nodes()`方法进行此目的。请注意，如果在XPath选择期间发生错误，则会抛出`xpath_exception`。以下XPath表达式可用于根据问题要求选择节点：
- en: 'For all movies released after a given year (in this example that year is 1995):
    `/movies/movie[@year>1995]`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于在特定年份（在此示例中为1995年）之后发布的所有电影：`/movies/movie[@year>1995]`
- en: 'For the last casting role of each movie: `/movies/movie/cast/role[last()]`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每部电影的最后一个角色：`/movies/movie/cast/role[last()]`
- en: 'The following program loads an XML document from a string buffer and then performs
    node selection using the XPath expressions listed earlier. The XML document is
    defined as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序从字符串缓冲区加载XML文档，然后使用之前列出的XPath表达式进行节点选择。XML文档定义如下：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The selection of the requested data can be done in the following manner:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式选择所请求的数据：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 75\. Serializing data to JSON
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 75. 将数据序列化为JSON
- en: As with XML, no standard support for JSON exists. However, there are a large
    number of cross-platform libraries for this purpose. At the time of writing, the
    *nativejson-benchmark* project, available at [https://github.com/miloyip/nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark), lists
    more than 40 libraries. This project is a benchmark that evaluates the conformance
    and performance (speed, memory, and code size) of open source C/C++ libraries
    with JSON parsing/generation capabilities. This makes it perhaps a bit hard to
    choose the right library, although top contenders may include `RapidJSON`, `NLohmann`,
    `taocpp/json`, `Configuru`, `json_spirit`, `jsoncpp`. For solving this task we
    will use here the `nlohmann/json` library. It is a cross-platform, header only
    library for C++11, with an intuitive syntax and good documentation. This library
    is available at [https://github.com/nlohmann/json](https://github.com/nlohmann/json).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与XML一样，JSON没有标准支持。但是，有大量跨平台库可用于此目的。在撰写本文时，*nativejson-benchmark*项目，位于[https://github.com/miloyip/nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark)，列出了40多个库。该项目是一个基准测试，评估具有JSON解析/生成功能的开源C/C++库的符合性和性能（速度、内存和代码大小）。这可能使选择正确的库有点困难，尽管顶级竞争者可能包括`RapidJSON`、`NLohmann`、`taocpp/json`、`Configuru`、`json_spirit`、`jsoncpp`。为了解决这个问题，我们将在这里使用`nlohmann/json`库。这是一个用于C++11的跨平台、仅头文件库，具有直观的语法和良好的文档。该库可在[https://github.com/nlohmann/json](https://github.com/nlohmann/json)找到。
- en: We will use the same data structures to represent movies that we used for the
    problem *Serializing and deserializing data to/from XML*. The `nlohmann` library
    uses `nlohmann::json` as its main data type for representing JSON objects. Although
    you can create JSON values with a more explicit syntax, there are also implicit
    conversions to and from scalar types and standard containers. In addition, you
    can also enable this implicit conversion to and from your custom types by providing
    a `to_json()` and `from_json()` method in the namespace of the type to be converted.
    There are some requirements for these functions that you can read about in the
    documentation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与问题*将数据序列化和反序列化到/从XML*中使用的相同数据结构来表示电影。`nlohmann`库使用`nlohmann::json`作为表示JSON对象的主要数据类型。尽管您可以使用更明确的语法创建JSON值，但也可以通过标量类型和标准容器进行隐式转换。此外，您还可以通过在要转换的类型的命名空间中提供`to_json()`和`from_json()`方法来启用对自定义类型的隐式转换。这些函数有一些要求，您可以在文档中了解相关信息。
- en: 'In the following code, this is the chosen approach. Since the `movie` and `casting_role` types
    were defined in the global namespace, the `to_json()` overloads that serialize
    these types are also defined in the global namespace. On the other hand, the type
    `movie_list` is actually a type alias for `std::vector<movie>` and can be serialized
    and deserialized directly because, as mentioned earlier, the library supports
    implicit conversion to and from standard containers:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，这是所选择的方法。由于`movie`和`casting_role`类型是在全局命名空间中定义的，因此序列化这些类型的`to_json()`重载也在全局命名空间中定义。另一方面，类型`movie_list`实际上是`std::vector<movie>`的类型别名，因此可以直接进行序列化和反序列化，因为正如前面提到的，该库支持与标准容器的隐式转换：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The function `serialize()` can be used as shown in the following example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`serialize()`函数可以按照以下示例使用：'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 76\. Deserializing data from JSON
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 76. 从JSON反序列化数据
- en: For solving this task we will use the `nlohmann/json` library again. Instead
    of writing `from_json()` functions, as was mentioned in the solution to the previous
    problem, we will take a more explicit approach. The content of a JSON file can
    be loaded into an `nlohmann::json` object using the overloaded `operator>>`. To
    access the object values, you should use the `at()` method rather than `operator[]`,
    because the former throws an exception if the key does not exist (an exception
    that you can handle), while the latter exhibits undefined behavior. To retrieve
    an object value as a particular `T` object, use the `get<T>()` method. However,
    this requires the type `T` to be default constructible.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个任务，我们将再次使用`nlohmann/json`库。与在解决上一个问题中提到的`from_json()`函数不同，我们将采取更明确的方法。可以使用重载的`operator>>`将JSON文件的内容加载到`nlohmann::json`对象中。要访问对象值，应该使用`at()`方法而不是`operator[]`，因为前者如果键不存在会抛出异常（可以处理的异常），而后者会表现出未定义的行为。要将对象值作为特定的`T`对象检索出来，使用`get<T>()`方法。但是，这需要类型`T`是默认可构造的。
- en: 'The `deserialize()` function shown here returns an `std::vector<movie>` constructed
    from the content of a specified JSON file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`deserialize()`函数在这里返回一个从指定JSON文件内容构造的`std::vector<movie>`：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This deserialization function can be used as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个反序列化函数可以如下使用：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 77\. Printing a list of movies to a PDF
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 77. 将电影列表打印到PDF
- en: There are various C++ libraries for working with PDF files. *HaHu*, *PoDoFo*,
    *JagPDF*, and *PDF-Writer* (also known as *Hummus*) are some of the open source
    and cross-platform libraries that you could use for this purpose. In this book,
    I will use *PDF-Writer*, available at [https://github.com/galkahana/PDF-Writer](https://github.com/galkahana/PDF-Writer).
    This is a free, fast, and extensible library with a basic feature set that includes
    support for text, images, and shapes with both PDF operators and higher-level
    functions (which I will use for the solution to this problem).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种用于处理PDF文件的C++库。*HaHu*、*PoDoFo*、*JagPDF*和*PDF-Writer*（也称为*Hummus*）是一些开源的跨平台库，您可以用于此目的。在本书中，我将使用*PDF-Writer*，网址为[https://github.com/galkahana/PDF-Writer](https://github.com/galkahana/PDF-Writer)。这是一个免费、快速、可扩展的库，具有基本的功能集，包括支持文本、图像和形状，具有PDF操作符和更高级功能（我将用于解决这个问题）。
- en: 'The function `print_pdf()`, shown as follows, implements the following algorithm:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示的`print_pdf()`函数实现了以下算法：
- en: Start a new PDF document with `PDFWriter::StartPDF()`.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`PDFWriter::StartPDF()`开始一个新的PDF文档。
- en: Print at most 25 movies on each page. Each page is represented by a `PDFPage()`
    object and has a `PageContentContext` object, which is created with `PDFPage::StartPageContentContext()` and
    used to draw items on the page.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个页面上最多打印25部电影。每个页面由一个`PDFPage()`对象表示，并且有一个`PageContentContext`对象，它是使用`PDFPage::StartPageContentContext()`创建的，并用于在页面上绘制项目。
- en: On the first page, put a heading with the content *List of movies*. Text is
    written on the page using `PageContentContext::WriteText()`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一页上，使用`PageContentContext::WriteText()`写入页面文本。
- en: Movie information is written using different fonts.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电影信息使用不同的字体书写。
- en: Lines are drawn on the top and bottom of the movie list on each page using `PageContentContext::DrawPath()`.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个页面上的电影列表的顶部和底部使用`PageContentContext::DrawPath()`绘制线条。
- en: '`PDFWriter::EndPageContentContext()` and `PDFWriter::WritePageAndRelease()`
    must be called after finishing writing content to a page.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在完成对页面内容的写入后，必须调用`PDFWriter::EndPageContentContext()`和`PDFWriter::WritePageAndRelease()`
- en: '`PDFWriter::EndPDF()` must be called when finishing writing the PDF document:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成PDF文档写入时必须调用`PDFWriter::EndPDF()`：
- en: For information about the types and methods used in the following code, as well
    as more information about creating PDF documents and working with text, shapes,
    and images, see the project documentation available at [https://github.com/galkahana/PDF-Writer/wiki](https://github.com/galkahana/PDF-Writer/wiki).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关以下代码中使用的类型和方法的信息，以及有关创建PDF文档、处理文本、形状和图像的更多信息，请参阅项目文档，网址为[https://github.com/galkahana/PDF-Writer/wiki](https://github.com/galkahana/PDF-Writer/wiki)。
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `print_pdf()` function can be used as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_pdf()`函数可以如下使用：'
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 78\. Creating a PDF from a collection of images
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 78. 从图像集合创建PDF
- en: To solve this problem we will use the same *PDF-Writer* library we used for
    the previous problem. I recommend that you look at and implement the previous
    problem first, if you have not done that already, before continuing with this
    one.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将使用与上一个问题相同的*PDF-Writer*库。如果您还没有完成上一个问题，请先查看并实现上一个问题，然后再继续这个问题。
- en: 'The following `get_images()` function returns a vector of strings that represent
    the path of all JPG images from a specified directory:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`get_images()`函数返回一个字符串向量，表示指定目录中所有JPG图像的路径：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `print_pdf()` function creates a PDF document with all the JPG images from
    a specified directory. It implements the following algorithm:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_pdf()`函数创建一个包含指定目录中所有JPG图像的PDF文档。它实现了以下算法：'
- en: Create a new PDF document with `PDFWriter::StartPDF()`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`PDFWriter::StartPDF()`创建一个新的PDF文档
- en: Create a page and its content and put as many images as can fit on the page,
    arranged vertically one after the other
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个页面及其内容，并放置尽可能多的图像，垂直排列在页面上
- en: When a new image does not fit in the current page, close the page with `PDFWriter::EndPageContentContext()`
    and `PDFWriter::SavePageAndRelease()` and start a new page
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新图像无法适应当前页面时，使用`PDFWriter::EndPageContentContext()`和`PDFWriter::SavePageAndRelease()`关闭页面，并开始新页面
- en: Write images on the page content using `PageContentContext::DrawImage()`
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`PageContentContext::DrawImage()`在页面内容上绘制图像
- en: End the document by calling `PDFWriter::EndPDF()`
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过调用`PDFWriter::EndPDF()`结束文档
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `print_pdf()` can be used as in the following example, where `sample.pdf`
    is the name of the output, and `res` is the name of the folder that contains the
    images:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_pdf()`可以如下使用，其中`sample.pdf`是输出的名称，`res`是包含图像的文件夹的名称：'
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
