- en: Chapter 12. How It All Fits Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。一切如何契合
- en: Google Maps was a big hit when it came out, and it remains quite important,
    but the new functionality it introduced was pretty much nothing. The contribution
    Google made with its maps site was taking things previously only available with
    a steep learning cliff and giving them its easy trademark simplicity. And that
    was quite a lot.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌地图在推出时非常受欢迎，它仍然非常重要，但它引入的新功能几乎没有什么。谷歌在地图网站上的贡献是将以前只能通过陡峭的学习曲线获得的东西变得简单易用。这已经是相当了不起的了。
- en: Similar things might be said about ReactJS. No one at Facebook invented functional
    reactive programming. No one at Facebook appears to have significantly expanded
    functional reactive programming. But ReactJS markedly lowered the bar to entry.
    Previously, with respect to functional reactive programming, there were repeated
    remarks among seasoned C++ programmers; they said, "I guess I'm just stupid, or
    at least, I don't have a PhD in computational mathematics." And it might be suggested
    that proficiency in C++ is no mean feat; getting something to work in Python is
    less of a feat than getting the same thing to work in C++, just as scaling the
    local park's winter sledding hill is less of an achievement than scaling Mount
    Everest. Also, ReactJS introduces enough of changes so that competent C++ programmers
    who do not have any kind of degree in math, computational or otherwise, stand
    a fair chance of using ReactJS and being productive in it. Perhaps they may be
    less effective than pure JavaScript programmers who are particularly interested
    in functional programming. But learning to effectively program C++ is a *real*
    achievement, and most good C++ programmers have a fair chance of usefully implementing
    functional reactive programming with ReactJS. However, the same cannot be said
    for following the computer math papers on Wikipedia and implementing something
    in the academic authors' generally preferred language of Haskell.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于ReactJS也可以说类似的事情。Facebook没有发明函数式响应式编程。Facebook似乎也没有显著扩展函数式响应式编程。但是ReactJS显著降低了门槛。以前，对于函数式响应式编程，经验丰富的C++程序员经常会说：“我想我可能只是愚蠢，或者至少，我没有计算数学博士学位。”也许可以说精通C++并不是一件小事；在Python中让某些东西工作比在C++中让相同的东西工作要容易得多，就像在当地公园的冬季滑雪山坡上滑雪比攀登珠穆朗玛峰要容易得多一样。此外，ReactJS引入了足够的变化，以至于没有任何数学、计算或其他方面的学位的合格C++程序员有很大机会使用ReactJS并且在其中高效工作。也许他们可能没有纯JavaScript程序员对函数式编程特别感兴趣的那么有效。但是学会有效地编程C++是一个*真正*的成就，大多数优秀的C++程序员有很大机会有用地实现ReactJS中的函数式响应式编程。然而，对于阅读维基百科上的计算机数学论文并在学术作者通常偏爱的Haskell语言中实现某些东西，就不能说同样的话了。
- en: 'In this conclusion, we will explore the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个结论中，我们将探讨本章中的以下主题：
- en: A retrospective of the terrain covered
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾所涵盖的领域
- en: Immunity to the problems that gave rise to *The Mythical Man-Month*
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免疫于引发《人月神话》的问题。
- en: ReactJS as just a view—but what a view!
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS只是一个视图，但是是一个很棒的视图！
- en: The joy of programing ReactJS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程ReactJS的乐趣
- en: 'Whole new vistas opening for ReactJS beyond the web. The ReactJS work introduced
    here is not the *end* of ReactJS''s possibilities: it is only the *beginning*.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS开启了全新的视野，超越了网络。这里介绍的ReactJS工作并不是ReactJS可能性的*终点*：它只是*开始*。
- en: A review of the terrain covered
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾所涵盖的领域
- en: We've covered a lot in this book, both theoretically and practically. We covered
    the basics of functional programming, reactive programming, and functional reactive
    programming. We also covered a technology, Facebook's ReactJS. It makes some of
    the strengths of functional reactive programming available to frontend developers
    who are not necessarily steeped in computational mathematics (this is, unfortunately,
    something of a distinctive feature to this text). The text here is meant to follow
    the lead of ReactJS and is specifically intended to make sense to programmers
    without a special math background. Along the way, we met interesting technologies,
    such as Om, Brython, and Jest, and took a look at what future frontend web development
    might be like. We may be able to do web development in the language of our choice,
    rather than necessarily be limited to JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们在理论和实践上都涵盖了很多内容。我们涵盖了函数式编程、响应式编程和函数式响应式编程的基础知识。我们还介绍了Facebook的ReactJS技术。它使一些函数式响应式编程的优势可以用于前端开发人员，而这些开发人员不一定精通计算数学（不幸的是，这在本文中是一个显著的特点）。这里的文本旨在跟随ReactJS的步伐，特别是为了让没有特殊数学背景的程序员能够理解。在这个过程中，我们遇到了一些有趣的技术，比如Om、Brython和Jest，并且看了一下未来前端Web开发可能会是什么样子。我们可能可以使用我们选择的语言进行Web开发，而不一定局限于JavaScript。
- en: 'We also built two systems, one smaller and one larger, and tried to demonstrate
    slight variations in how a problem is solved: with or without JSX, with controlled
    values for form elements, and by classic form Hijaxing. The point is not exactly
    that one is better than the other, as that needs will call for different solutions,
    and we want to increase the chances that at least one of the approaches covered
    here is helpful in a particular situation.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还构建了两个系统，一个较小，一个较大，并尝试演示解决问题的轻微变化：使用或不使用JSX，对表单元素使用受控值，以及通过经典的表单Hijaxing。重点不完全在于哪一个比另一个更好，因为需求会需要不同的解决方案，我们希望至少覆盖的方法中的一种在特定情况下是有帮助的。
- en: Along the way, there were reasons to say, as has been said about Python, "Programming
    is fun again!" Every system has its quirks, but somehow, there seem to be fewer
    speed bumps along the road when traveling with ReactJS. This title's brief treatment
    of CKeditor necessarily included a workaround for a speed bump that will frustrate
    a first-time CKeditor user. There have been precious few necessary warnings about
    workarounds for problems that persist in ReactJS code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，有理由说，就像有人说关于Python一样，“编程再次变得有趣！”每个系统都有其怪癖，但不知何故，使用ReactJS时似乎在道路上遇到的障碍要少一些。本书对CKeditor的简要介绍必然包括了一个解决方案，以解决首次使用CKeditor的用户可能遇到的障碍。关于ReactJS代码中持续存在的问题的解决方案几乎没有必要的警告。
- en: Could the Mythical Man-Month have been avoided?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神话般的程序员月份是否可以避免？
- en: 'Fred Brooks'' 1975 book *The Mythical Man-Month* (40 plus years old by the
    time you read this book) is the most heavily cited work in all of software engineering
    literature. Tanenbaum''s classic textbook *Operating Systems: Design and Implementation*
    makes a (brief) mention of Brooks'' title:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 弗雷德·布鲁克斯于1975年出版的《神话般的程序员月份》（在您阅读本书时已经超过40年）是软件工程文献中引用最多的作品。塔南鲍姆的经典教科书《操作系统：设计与实现》提到了布鲁克斯的书名：
- en: '*"One of the designers of OS/360, Fred Brooks, wrote a witty and incisive book
    (Brooks, 1975) describing his experiences with OS/360\. While it would be impossible
    to summarize the book here, suffice it to say that the cover shows a herd of prehistoric
    beasts stuck in a tar pit..."*'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “OS/360的设计者之一弗雷德·布鲁克斯写了一本风趣而深刻的书（布鲁克斯，1975年），描述了他在OS/360项目中的经历。虽然在这里总结这本书是不可能的，但可以说封面上显示了一群史前动物陷入了沥青坑……”
- en: Here, there is a direct relevance. To explain why, let's make a variant of the
    Big-Coffee notation as introduced by Steve Luscher. While perhaps no one outside
    Luscher's head knows what inspired him to make his point as he did, Luscher is
    clearly familiar with the classical big-O notation for runtime complexity, and
    presumably with the fact that it is also used to assess the complexity in other
    kinds of resource usage, such as memory. But I might suggest that a possible additional
    inspiration might be helpful as explained by Big Organization complexity. If Big-Coffee
    complexity can be nightmarish and quadratic at ![Could the Mythical Man-Month
    have been avoided?](img/B04108_12_06.jpg)—or as Luscher writes, ![Could the Mythical
    Man-Month have been avoided?](img/B04108_12_07.jpg)—something eerily familiar
    manifests in the communication complexity within a monolithic project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，有直接的相关性。为了解释这一点，让我们制作史蒂夫·卢施尔引入的Big-Coffee符号的变体。也许除了卢施尔本人之外，没有人知道是什么启发他以他的方式表达观点，但卢施尔显然熟悉运行时复杂性的经典大O符号，可能也知道它也用于评估其他资源使用方面的复杂性，比如内存。但我可能会建议，组织沟通复杂性可能需要额外的启发，就像Big
    Organization复杂性所解释的那样。如果Big-Coffee复杂性可能是夜梦般的二次方，或者正如卢施尔所写的那样，那么在单片项目内部的沟通复杂性中会出现一些令人不安的熟悉现象。
- en: If there is one programmer on a monolithic project, the complexity is zero,
    as there is no need to avoid stepping on other programmers' feet. If there are
    two programmers, the complexity in communication is exactly one connection. If
    there are three programmers, there are three connections; and if we scale up to
    10 programmers, the paperwork scales up to 45 connections. IBM's approach to the
    OS/360 project was the so-called Big Blue Solution, and it said, "Since there's
    lots and lots of work we want done, let's hire lots and lots and lots of programmers!"
    IBM had well over 10 programmers, and therefore had vastly more than 45 connections.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个单片项目上有一个程序员，那么复杂性为零，因为不需要避免踩到其他程序员的脚。如果有两个程序员，那么沟通的复杂性就是一个连接。如果有三个程序员，就有三个连接；如果扩展到10个程序员，文件工作量就会扩大到45个连接。IBM对OS/360项目的方法是所谓的大蓝色解决方案，它说：“因为我们想要完成很多工作，所以让我们雇用很多很多程序员！”IBM拥有超过10名程序员，因此连接数量远远超过45个。
- en: 'One character that might be appropriate to indicate the complexity of organizational
    communication is the interconnected HTML dingbat, encodable as `&#9784;` or `&#x2638;`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能适合表示组织沟通复杂性的字符是互连的HTML dingbat，可编码为`&#9784;`或`&#x2638;`：
- en: '![Could the Mythical Man-Month have been avoided?](img/B04108_12_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![神话般的程序员月份是否可以避免？](img/B04108_12_02.jpg)'
- en: If we are able to retrofit a "Big Organization" complexity of how much communication
    is needed to prevent programmers from breaking others' work, perhaps no dingbat
    or emojicon is perfect. But we can speak of monolithic software projects having
    a quadratic communication complexity—of ![Could the Mythical Man-Month have been
    avoided?](img/B04108_12_03.jpg), or if you prefer, ![Could the Mythical Man-Month
    have been avoided?](img/B04108_12_04.jpg)—for developers to keep up with other
    changes and partially avoid collisions with other developers' work. On the scale
    of the OS/360 project, this resulted in developers spending over half their day
    only keeping track of memos, to keep abreast of what other programmers have done.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够将“大组织”复杂性的沟通需求量化，以防止程序员破坏其他人的工作，也许没有任何特殊符号是完美的。但我们可以说，单片软件项目具有二次沟通复杂性——![神话般的程序员月份是否可以避免？](img/B04108_12_03.jpg)，或者如果您愿意的话，![神话般的程序员月份是否可以避免？](img/B04108_12_04.jpg)——开发人员需要跟上其他变化，并部分避免与其他开发人员的工作发生冲突。在OS/360项目的规模上，这导致开发人员花费超过一半的时间只是为了跟上备忘录，以了解其他程序员所做的工作。
- en: There is reason to believe that if the OS/360 project had been done with an
    approach like what Facebook uses for ReactJS plus Flux, there might have been
    no need to write *The Mythical Man-Month*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有理由相信，如果OS/360项目采用了Facebook用于ReactJS加Flux的方法，可能就不需要写《神话般的程序员月份》了。
- en: The combination of ReactJS and Flux is explicitly written so that you don't
    need to put your hands in every other component's pockets. In fact, it is written
    so that if everybody is observing the approach, you can't put your hands in other
    components' pockets unless you find a way to breach the security. The communication
    complexity is not quadratic (as it was in the OS/360 project) at ![Could the Mythical
    Man-Month have been avoided?](img/B04108_12_03.jpg) or ![Could the Mythical Man-Month
    have been avoided?](img/B04108_12_04.jpg); the number of directions of communication
    if you have at most one developer per component is vastly smaller, and may possibly
    be barely above linear at ![Could the Mythical Man-Month have been avoided?](img/B04108_12_05.jpg).
    The difference is enormous in its implications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS和Flux的组合明确写成，这样你就不需要在每个组件的口袋里动手脚。事实上，它是这样写的，如果每个人都遵循这种方法，你就不能在其他组件的口袋里动手脚，除非你找到一种突破安全的方法。通信复杂度不是二次的（就像OS/360项目中那样），如果每个组件最多只有一个开发人员，通信方向的数量要小得多，可能仅略高于线性。这种差异在其影响方面是巨大的。
- en: While it is not clear that Facebook is being insistently purist enough to achieve
    the best theoretically possible results, it does seem evident that Facebook—which
    is one of the largest organizations on the Internet, and may have a frontend development
    staff comparable to (or greater than) the OS/360 project in size—has communications
    that scale much better than the monolithic OS/360 endeavor. Perhaps Facebook is
    one of the many organizations that are quicker to advertise their strengths than
    their weaknesses. But nothing that I've been able to find in any resource on the
    Web suggests that the volume of communication between Facebook developers is out
    of hand, as it was in the OS/360 project, or that the necessary volume of internal
    communications is onerous enough to be an issue that makes developers' lives genuinely
    more difficult.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Facebook是否坚持纯粹主义以实现理论上可能的最佳结果尚不清楚，但似乎显而易见的是，Facebook——这是互联网上最大的组织之一，可能拥有与OS/360项目规模相当或更大的前端开发人员——其通信比单一的OS/360努力要好得多。也许Facebook是众多更愿意宣传自己的优势而不是弱点的组织之一。但我在网上找到的任何资源都没有表明Facebook开发人员之间的沟通量超出了控制，就像OS/360项目中那样，或者必要的内部沟通量足够多到足以成为使开发人员的生活变得真正困难的问题。
- en: ReactJS is just a view, but what a view!
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReactJS只是一个视图，但是多么美丽的视图！
- en: Charles Cézanne famously said, "Monet is just an eye, but what an eye!" Monet
    didn't try to show off his knowledge of structure and anatomy, but just copy what
    his eye saw. The consensus judgment of his work holds on to both "just an eye,"
    and "what an eye!" And indeed, the details may be indistinct in Monet, who rebelled
    against artistry that tried to impress with deep knowledge of anatomy and knowledge
    of structure that is far beyond what jumps out to the eye.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 塞尚曾经说过：“莫奈只是一只眼睛，但是多么美丽的眼睛！”莫奈并没有试图炫耀他对结构和解剖学的知识，而是只是复制他的眼睛所看到的。对他的作品的共识判断坚持着“只是一只眼睛”和“多么美丽的眼睛！”事实上，在莫奈的作品中，细节可能不太清晰，他反对试图用深奥的解剖学知识和远远超出眼睛所看到的结构的知识来给人留下深刻印象的艺术。
- en: ReactJS is a framework rather than a library, which means that you are supposed
    to build a solution within the structure provided by ReactJS instead of plugging
    ReactJS into a solution that you structure yourself. The canonical example of
    a library is jQuery, where you build a solution your way, and call on jQuery as
    it fits into a structure that you design.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS是一个框架，而不是一个库，这意味着你应该在ReactJS提供的结构内构建解决方案，而不是将ReactJS插入你自己设计的解决方案中。库的典型例子是jQuery，你可以按照自己的方式构建解决方案，并在需要时调用jQuery。
- en: However, ReactJS is specialized as a view. It's not that this is necessarily
    good or bad, but ReactJS is not a complete web development framework, and does
    not have even the intension of being the only tool you will ever need. It focuses
    on being a view, and in Facebook's offering, this does not include any form of
    AJAX call. This is not a monumental oversight in developing ReactJS; the expectation
    is that you use ReactJS as a View to provide the user interface functionality,
    and other tools to meet other needs as appropriate. This text hasn't covered using
    ReactJS together with your favorite tools, but do combine your favorite tools
    with ReactJS if they are not going to step on each other's feet. ReactJS may or
    may not collide with other Views, but it is meant to work with non-View technologies.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，ReactJS专门用作视图。这并不一定是好事或坏事，但ReactJS并不是一个完整的Web开发框架，也没有成为你永远需要的唯一工具的意图。它专注于成为一个视图，在Facebook的提供中，这并不包括任何形式的AJAX调用。这并不是在开发ReactJS时犯下的重大疏忽；预期是你使用ReactJS作为视图来提供用户界面功能，并使用其他工具来满足其他需要。本文没有涵盖使用ReactJS与你喜欢的工具一起使用，但如果它们不会互相冲突，就将你喜欢的工具与ReactJS结合使用。ReactJS可能会与其他视图发生冲突，但它的目的是与非视图技术一起工作。
- en: Programming is fun again!
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程又变得有趣起来了！
- en: When the Web first appeared, I had my first "Programming is fun again!" experience.
    I had gotten my bearings in programming in Unix and C, and when I was informed
    that it was possible to include an image in a web page, I anticipated the amount
    of work that it would take in a C-like environment from scratch to tell how to
    display an image. I implicitly thought, "Too much work for me." But I was positively
    astonished to find that an image could be included in a web page with nothing
    more than `<IMG SRC=Portrait.GIF>`, and that an image itself didn't need to be
    embedded in a web page; it could equally gracefully be made available as `<A HREF=Portrait.GIF>Click
    here!</A>`. Thus began my first exposure to a language that was declarative rather
    than imperative. Perhaps it was not strictly programming; certainly, before JavaScript,
    it was not a Turing approximant. However, it let me easily do things with computers
    that I hadn't dreamed of.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当互联网首次出现时，我有了第一次“编程又变得有趣了！”的体验。我在Unix和C编程中找到了我的方向，当我得知在网页中包含图像是可能的时，我预计在类似C的环境中从头开始告诉如何显示图像需要多少工作。我内心认为，“对我来说太多工作了。”
    但我惊讶地发现，一个图像可以在网页中包含，只需要`<IMG SRC=Portrait.GIF>`，图像本身不需要嵌入在网页中；它同样可以优雅地作为`<A HREF=Portrait.GIF>点击这里！</A>`提供。这是我第一次接触到一种声明性而不是命令式的语言。也许它严格来说不是编程；当然，在JavaScript出现之前，它不是图灵近似。然而，它让我轻松地做了一些我以前无法想象的电脑工作。
- en: Some years later, I had my second "Programming is fun again!" experience after
    a friend suggested that I try Python. By the time that occurred, I was a sort
    of a language collector; the only languages I wanted to know but didn't were Icon,
    C++, and some assembler. A common reality for language collectors is that their
    first project in a new language is slower, more difficult, and more frustrating
    than any further work. It gets better after that, but for the first project, "It
    always takes longer than you think, even when you take into account the fact that
    it always takes longer than you think." However, with Python, my surprise was,
    "What? *Is it working already*?" and this was just the tip of an iceberg.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，我第二次体验到“编程又变得有趣了！”是在一个朋友建议我尝试Python之后。那时，我已经成为了一名语言收藏家；我想要了解的唯一语言是Icon、C++和一些汇编语言。语言收藏家的一个普遍现实是，他们在新语言中的第一个项目比任何后续工作都要慢、更困难、更令人沮丧。之后会好一些，但对于第一个项目来说，“它总是比你想象的时间长，即使你考虑到了它总是比你想象的时间长这个事实。”然而，用Python时，我惊讶地发现，“什么？*它已经在运行了*？”这只是冰山一角。
- en: My story of being a language collector, finding Python, and then stopping the
    effort to learn new languages is not an especially unusual story among Pythoneers.
    Eric Raymond certainly picked up some deeper notes in his article Why Python?
    at [http://www.linuxjournal.com/article/3882](http://www.linuxjournal.com/article/3882).
    Python is an enchanted kingdom where the streets are paved with glue, and it's
    not just masters who can benefit.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我作为一名语言收藏家，发现Python，然后停止学习新语言的经历并不是Pythoneers中特别不寻常的故事。埃里克·雷蒙德在他的文章《为什么选择Python？》中提到了一些更深层次的东西，网址是[http://www.linuxjournal.com/article/3882](http://www.linuxjournal.com/article/3882)。Python是一个充满魔力的王国，街道都是用胶水铺成的，不仅仅是大师们才能受益。
- en: 'What was not mentioned earlier is that if you leave your mouse hovering over
    the cartoon image at [http://xkcd.com/353/](http://xkcd.com/353/), this message
    appears: **I wrote 20 short programs in Python yesterday. It was wonderful. Perl,
    I''m leaving you...** Now Perl is also a good language and, for a time, my favorite,
    but there''s still something about Python.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之前没有提到的是，如果你将鼠标悬停在[http://xkcd.com/353/](http://xkcd.com/353/)的卡通图片上，会出现这样的消息：**昨天我用Python写了20个简短的程序。太棒了。Perl，我要离开你了……**
    现在Perl也是一种很好的语言，曾经是我的最爱，但Python仍然有着独特的魅力。
- en: Finally, my last and greatest "Programming is fun again!" moment came when I
    began appreciating ReactJS. ReactJS delivers something that XHTML and HTML5 don't,
    in terms of creating useful components that can be used like tags.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我最后一次也是最伟大的“编程又变得有趣了！”时刻是当我开始欣赏ReactJS时。在创建可以像标签一样使用的有用组件方面，ReactJS提供了XHTML和HTML5所没有的东西。
- en: Whatever the "X" in XHTML stands for, it does not mean, "In mainstream use,
    people will build and deploy lots of interesting new tags." HTML5 offers a number
    of new components, such as `<input type="date" />`, but they are not universally
    supported, and this is not another case of IE having to be the life of a party.
    The mainstream and current non-Microsoft browsers have very inconsistent coverage
    of features that were announced loudly and clearly when HTML5 was in the limelight.
    There are polyfills available, and integrating one of the many JavaScript date
    pickers that existed before HTML5 may make just as much sense today as it did
    when they were new. But while a site like [http://html5please.com/](http://html5please.com/)
    is praiseworthy and worth using, it is also a symptom of a major problem.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无论XHTML中的“X”代表什么，它并不意味着“在主流使用中，人们会构建和部署大量有趣的新标签”。HTML5提供了许多新组件，比如`<input type="date"
    />`，但它们并不被普遍支持，这并不是IE必须成为派对的灵魂的另一个案例。主流和当前的非微软浏览器对HTML5在聚光灯下宣布的功能的覆盖范围非常不一致。有一些polyfills可用，并且整合在HTML5之前存在的许多JavaScript日期选择器可能在今天和它们刚出现时一样有意义。但是，像[http://html5please.com/](http://html5please.com/)这样的网站值得赞扬和使用，但它也是一个主要问题的症状。
- en: ReactJS and JSX succeed where these fail. This text has not covered how to make
    a `<DatePicker />` function, but once this has been made, you can include it in
    your JSX almost as easily as a native HTML tag. If someone nostalgic for fractals
    draws on an HTML5 canvas and makes scrollable and zoomable `<LogisticMap />`,
    `<VonKochSnowflake />`, `<MandelbrotSet />`, and `<SierpinskiGasket />`, these
    can be as easily included in JSX as the plain old simple `<img />` tags. Components
    defined in ReactJS differ in an important sense from manually configuring and
    wiring a JavaScript date picker to work with your form. They are like subroutines
    in classic structured programming, in the sense that they can be readily reused
    wherever reusing makes sense, and combined to make bigger building blocks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS和JSX成功地解决了这些问题。本文没有涵盖如何制作`<DatePicker />`函数，但一旦制作完成，你可以将它几乎像原生HTML标签一样包含在你的JSX中。如果有人对分形感到怀旧，绘制在HTML5画布上并制作可滚动和可缩放的`<LogisticMap
    />`、`<VonKochSnowflake />`、`<MandelbrotSet />`和`<SierpinskiGasket />`，这些可以像普通的简单的`<img
    />`标签一样容易地包含在JSX中。在ReactJS中定义的组件在一个重要的意义上不同于手动配置和连接JavaScript日期选择器以使其与你的表单一起工作。它们就像经典结构化编程中的子程序，可以在有意义的地方方便地重复使用，并组合成更大的构建块。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It might be suggested that there is money to be made in producing libraries
    of useful components that can be used to almost extend the basic set of useful
    tags open to other web developers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有人建议，制作一些有用组件的库，这些组件可以用来扩展其他网页开发人员可以使用的基本有用标签集。
- en: Moreover, if I may borrow from Robin Martin's "What Killed Smalltalk Could Kill
    Ruby" and use slightly more polite language, the key metric in a code review (among
    other things) is the number of times the reviewer has to ask, "What were they
    thinking?" For the "What were they thinking?" metric, an acceptable score for
    the code being reviewed is 0\. Anything higher than this is unacceptable. Also,
    this metric is relevant well outside of code reviews.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我可以借用Robin Martin的“什么杀死了Smalltalk可能会杀死Ruby”并使用更礼貌的语言，代码审查中的关键指标（以及其他指标）是审查人员不得不问“他们在想什么？”的次数。对于正在审查的代码来说，“他们在想什么？”的指标，得分为0是可以接受的。任何高于此分数的都是不可接受的。此外，这个指标在代码审查之外也是相关的。
- en: 'In Python, such moments are rare: they do exist, as a search for "Python mutable
    default argument" will show, but they are significant because they are rare. This
    is different from "What were they thinking?" arguments in JavaScript, such as
    "You can use variables without declaring them (but if you do, they''ll be global)"
    and "You can write pseudo-classical constructors (but if you forget to use the
    new keyword when calling them, they''ll clobber things in the global namespace.)"
    The environment in JavaScript is such that a key language advocate, such as Douglas
    Crockford, sharply warns people to steer clear of large chunks of the basic language,
    and appears to be getting pickier over time.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，这样的时刻是罕见的：它们确实存在，搜索“Python可变默认参数”将显示出来，但它们之所以重要是因为它们罕见。这与JavaScript中的“他们在想什么？”的争论不同，比如“你可以使用未声明的变量（但如果你这样做，它们将是全局的）”和“你可以编写伪经典构造函数（但如果你在调用它们时忘记使用new关键字，它们将在全局命名空间中破坏东西）”。JavaScript的环境是这样的，以至于像Douglas
    Crockford这样的关键语言倡导者，严厉警告人们远离基本语言的大部分内容，并且似乎随着时间的推移变得更加挑剔。
- en: 'Ultimately, it seems that ReactJS and Python have the same heart. Both are,
    at heart, small and simple. Perhaps both have flaws, but flaws where the "What
    were they thinking?" moment is the exception and not the norm. Both have, as a
    sarcastic tweet said when ReactJS was announced, "Facebook: Rethink established
    best practices." ESR mentioned quite a hang-up about Python''s strange choice
    of significant white spaces.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，ReactJS和Python似乎有着相同的核心。两者都是本质上小而简单的。也许两者都有缺陷，但缺陷是“他们在想什么？”的时刻是个例外而不是常态。正如在ReactJS宣布时所说的那样，有一条讽刺的推文说：“Facebook：重新思考已经确立的最佳实践。”ESR对Python奇怪的选择使用显著的空格表示有些困扰。
- en: '*"And like most hackers, upon realizing this fact, I recoiled in reflexive
    disgust.*'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“就像大多数黑客一样，当意识到这一事实时，我本能地感到厌恶。”*'
- en: '>'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*I was barely old enough to have programmed in batch Fortran for a few months
    back in the 1970s. These days, most hackers aren''t, but somehow our culture seems
    to have retained a pretty accurate folk memory of how nasty those old-style fixed-field
    languages were. Indeed, the term "free format" used back then to describe the
    newer style of token-oriented syntax in Pascal and C has almost been forgotten.
    All languages have been designed that way for decades now, or almost all; anyway.
    On seeing this Python feature, it''s hard to blame anyone for initially reacting
    as if they had unexpectedly stepped in a steaming pile of dinosaur dung."*'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我当时还不够老，只是在20世纪70年代的几个月里编写了一些批处理Fortran程序。如今，大多数黑客都不是，但不知何故，我们的文化似乎保留了对那些旧式固定字段语言有多么讨厌的相当准确的民间记忆。事实上，当时用来描述Pascal和C中较新的基于标记的语法的术语“自由格式”几乎已经被遗忘。所有语言现在都已经设计成这样了，或者几乎都是；无论如何。看到这个Python特性，很难责怪任何人最初的反应好像他们意外地踩到了一堆恐龙粪便。”* '
- en: ReactJS also has the courage to say that those people who create CSS can create
    very simple JavaScript, instead of only working in deliberately underpowered templating
    languages. Now, JavaScript was chosen as a Domain-specific Language to deliberately
    leave as much power as is needed. However, it is not necessary for designers to
    summon the full power of JavaScript. They can create the 99 percent of the simple
    JavaScript that would have been done in an underpowered templating language, and
    JavaScript developers can create the remaining 1 percent of powerful JavaScript,
    because this would be problematic to address in an underpowered templating language.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS也有勇气说，那些创建CSS的人可以创建非常简单的JavaScript，而不仅仅是在故意设计不足的模板语言中工作。现在，JavaScript被选择为一种特定领域的语言，以故意留下尽可能多的功能。但设计师并不需要召唤JavaScript的全部功能。他们可以创建99%的简单JavaScript，这在故意设计不足的模板语言中已经完成了，而JavaScript开发人员可以创建剩下的1%的强大JavaScript，因为在故意设计不足的模板语言中解决这个问题会很棘手。
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at a slightly higher level than the nitty-gritty.
    Other chapters had detailed a couple of projects, but here we looked at some of
    the major wins that ReactJS represents, and to some of the most famous problems
    in computing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们看了一些比较高层次的东西。其他章节详细介绍了一些项目，但在这里，我们看了一些ReactJS代表的主要优势，以及一些计算机领域中最著名的问题。
- en: This book is intended to cover both the theory and practice of functional reactive
    programming with Facebook's ReactJS. It is hardly the first title covering functional
    programming, reactive programming, or functional reactive programming, but it
    may be an early title among treatments of functional reactive programming that
    do not assume PhD-level mathematical prowess. Part of this was accomplished by
    making the text somewhat philosophical. In some sense, this is the price paid
    to be merely challenging for some veteran programmers to understand, but not impossible
    for most veteran programmers to understand. The best functional reactive programming
    in JavaScript and ReactJS is based on functional programming proficiency, and
    the best functional reactive programming in Haskell is also based on functional
    programming proficiency; there is no real difference there. There is, however,
    a difference in the fact that a typical veteran C++ programmer has a fighting
    chance of achieving a useful proficiency with ReactJS. And Facebook has done quite
    an impressive job of putting things in easier reach.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书旨在涵盖Facebook的ReactJS的功能性响应式编程的理论和实践。这并不是第一本涵盖功能性编程、响应式编程或功能性响应式编程的书，但它可能是功能性响应式编程的早期著作之一，不假设博士级别的数学能力。其中一部分是通过使文本有些哲学性来实现的。在某种意义上，这是为了让一些资深程序员更容易理解，但对大多数资深程序员来说并不是不可能理解的。JavaScript和ReactJS中最好的功能性响应式编程基于功能性编程的熟练度，而Haskell中最好的功能性响应式编程也是基于功能性编程的熟练度；在这方面没有真正的区别。然而，一个典型的资深C++程序员有很大机会在ReactJS中获得有用的熟练度。Facebook在让事情更容易接触方面做得相当出色。
- en: JavaScript is a versatile language, and you can get a significant amount of
    productivity if you are approaching it while thinking in a Scheme way (of course!)
    or a Python way, or C#, Erlang, Perl, Ruby, Java, Haskell, PHP, Lisp, or Visual
    Basic. Perhaps no other programming language's way of thinking will reach the
    upper echelons of pure, functionally driven JavaScript thinking, but there's a
    lot that you can say in JavaScript, without needing to be a native speaker sporting
    a flawless JavaScript accent!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种多才多艺的语言，如果你以Scheme方式（当然！）或Python方式、C＃、Erlang、Perl、Ruby、Java、Haskell、PHP、Lisp或Visual
    Basic的方式来思考，你可以获得相当大的生产力。也许没有其他编程语言的思维方式会达到纯粹、功能驱动的JavaScript思维的最高层次，但在JavaScript中你可以表达很多东西，而不需要成为一个母语为JavaScript的人，拥有完美的JavaScript口音！
- en: And nothing of this is lost in ReactJS. Perhaps the last ounce of power cannot
    be squeezed out of functional reactive programming unless you have a very high
    proficiency in some very specific areas of math, but ReactJS has markedly lowered
    the barrier to entry for the benefits of functional reactive programming. Functional
    reactive programming used to have an unwritten sign over its door saying, "Math
    Programming Jocks Only." Now it doesn't. It may be purely an advantage to grok
    functional reactive programming to work with ReactJS, but all the other specialties
    mentioned can get a lot out of ReactJS without needing to know much math beyond
    the significant proficiency that is normally embedded in computer science and
    information technology.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在ReactJS中没有失去任何东西。也许在功能性响应式编程中，除非你在某些非常特定的数学领域有很高的熟练度，否则最后一丝力量无法被挤出来，但ReactJS显著降低了功能性响应式编程的门槛。功能性响应式编程过去在门口上有一个无声的标志，上面写着“只有数学编程高手才能进入”。现在没有了。掌握功能性响应式编程可能纯粹是为了在ReactJS中工作有优势，但所有其他提到的专业领域都可以在ReactJS中获得很多好处，而不需要了解太多数学，只需要了解通常嵌入在计算机科学和信息技术中的重要熟练度。
- en: Some people have said that developers very rarely pay for *books*; they pay
    for *chapters*. This book has been intended to work as a whole, with different
    parts illustrating complementary approaches to others so that each part adds to
    the whole. But it is also seriously intended to provide chapters that work perfectly
    well as standalone assets for people who want to orient themselves to something.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有人说开发人员很少为*书籍*付费；他们为*章节*付费。这本书旨在作为一个整体运作，不同的部分展示了互补的方法，以便每个部分都为整体增添内容。但它也严肃地旨在提供可以作为独立资产完美运作的章节，以便那些想要对某些东西进行定位的人使用。
- en: The next steps from here
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从这里开始的下一步
- en: There are countless directions that you can explore. You can dig deeper and
    explore the core of ReactJS. You can also explore the integration of ReactJS into
    projects that use other technologies to address other concerns.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以探索无数的方向。你可以深入挖掘并探索ReactJS的核心。你也可以探索将ReactJS集成到使用其他技术解决其他问题的项目中。
- en: Then, you can program ReactJS from Lisp or Python. (It's not merely true that
    you can program with ReactJS in JavaScript only if you come from a "Lispy" or
    "Pythonic" background. You can create animated web pages using ReactJS without
    leaving Lisp or Python to author a single line of JavaScript code.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以用Lisp或Python来编写ReactJS。（不仅仅是真实的，如果你来自“Lispy”或“Pythonic”的背景，你才能用JavaScript编写ReactJS。你可以使用Lisp或Python创建动画网页，而不需要离开Lisp或Python来编写一行JavaScript代码。）
- en: You can create a much richer set of components than any version of HTML5 can
    offer, and use them as easily as components that HTML 1.0 offered.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建比HTML5的任何版本都更丰富的组件，并且可以像HTML 1.0提供的组件一样轻松地使用它们。
- en: Perhaps the most exciting possibility of all is that ReactJS is no longer only
    for HTML/Web. It now offers a killer application for "learn once, write anywhere."
    Now your stellar JavaScript skills and hard work with learning functional programming
    unlock a good deal more than the Web. It's about as easy to write for iOS, for
    instance. Now see the home page at [https://facebook.github.io/react-native/](https://facebook.github.io/react-native/).
    This book has placed you in a position to not only use ReactJS on the Web but
    also learn ReactJS Native quickly and well, and this is profoundly significant.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最令人兴奋的可能性是，ReactJS不再仅适用于HTML/Web。它现在为“一次学习，随处编写”提供了一个杀手级应用程序。现在你出色的JavaScript技能和学习函数式编程的努力不仅可以在Web上使用，而且可以轻松地为iOS编写。现在请查看[https://facebook.github.io/react-native/](https://facebook.github.io/react-native/)的主页。这本书让你不仅可以在Web上使用ReactJS，还可以快速而且很好地学习ReactJS
    Native，这是非常重要的。
- en: '*You''ve climbed to the top of the diving board. Now it''s time to jump in
    and make the biggest splash that''s available.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*你已经爬到了跳板的顶端。现在是时候跳下去，制造最大的水花了。*'
- en: 'Perhaps the best thing to be said about the best way to work with functional
    reactive programming and ReactJS is not to *work* with ReactJS at all. It is to
    *play* with ReactJS, as you play with fresh snow. What has been said of the Glasgow
    Haskell Compiler applies in entirety to ReactJS: forget that it''s something you
    use for work. Play with it as if you were given a huge Lego set as a young child.
    See what you can build, and what you can''t.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 也许关于如何使用函数式响应式编程和ReactJS的最好方法是根本不要*使用*ReactJS。而是*玩*ReactJS，就像你玩新鲜的雪一样。关于格拉斯哥哈斯克尔编译器所说的话完全适用于ReactJS：忘记它是你用来工作的东西。像一个年幼的孩子一样玩它。看看你能建造什么，以及你不能建造什么。
- en: Programming is new again; there's pixie dust. Just like programmers once gained
    the ability to use programmer-contributed subroutines on par with built-in functions,
    now frontend web developers have gained the ability to use developer-made components
    as easily and with as little fuss as including an `IMG` tag in their JSX. Gone
    are the days when we needed to go to [http://html5please.com/](http://html5please.com/)
    and learn that `<input type="date">` has an amber alert for a "Caution [even]
    with polyfill" warning label. Gone are also the days when you needed to—even worse
    manually—wire up a JavaScript date picker with your form on each page, and you
    might use 58 lines of repetitive-stress-injury-inducing code to get a date picker
    on one single page. Once someone has made a proper ReactJS `<DatePicker />` function,
    the problem is solved to the point that it is less than one line of code to include,
    and you can include it zero, one, or many times on a page. "Even. When. Deploying.
    With. A Shim. to Internet Exploder 8" was deliberate use of punctuation, as also
    used by Terry Pratchett in the speech of trolls, and is emphatic. As regarding
    the term "Internet Exploder", that title has been around for a long time and developers,
    or me at any rate, had two problems in implementing a solution that would work
    with any normal browser, and then again get things working, this time for the
    browser that was the, um, life of the party.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 编程又是新的；有了魔法。就像程序员曾经获得了使用与内置函数同等的程序员贡献的子程序的能力一样，现在前端Web开发人员已经获得了使用开发人员制作的组件的能力，就像在他们的JSX中包含`IMG`标签一样容易且没有麻烦。过去我们需要去[http://html5please.com/](http://html5please.com/)学习`<input
    type="date">`有一个“警告[甚至]使用polyfill时要小心”的琥珀警告标签。过去你甚至需要手动在每个页面上连接JavaScript日期选择器，并且你可能需要使用58行重复性压力诱发代码来在一个页面上获取日期选择器。一旦有人制作了一个合适的ReactJS
    `<DatePicker />`函数，问题就解决了，只需要不到一行的代码就可以包含它，你可以在页面上包含零次、一次或多次。"即使。在。使用。Shim。到Internet
    Exploder 8"是有意使用标点符号，正如特里·普拉切特在巨魔的讲话中所用的那样，并且是强调的。至于“Internet Exploder”这个称号已经存在很长时间，开发人员，或者至少是我，在实现一个可以在任何正常浏览器上工作的解决方案时遇到了两个问题，然后再次让事情运行起来，这次是为了那个，呃，派对的生活。
- en: 'Wikipedia aims for a neutral "POV" (point of view), and unflinchingly writes
    of an earlier version:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科的目标是中立的“POV”（观点），并毫不畏缩地写道早期版本：
- en: This version of Internet Explorer has been widely criticized for its security
    issues and lack of support for modern web standards, making frequent appearances
    in "worst tech products of all time" lists, with PC World labeling it "the least
    secure software on the planet."[2] And this isn't even beginning to mention all
    of the pixie dust that means that you don't have to manage ![The next steps from
    here](img/B04108_12_06.jpg) transitions, because you conceptually blow everything
    up and rebuild things as they should be at a particular point in time.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的Internet Explorer因其安全问题和对现代Web标准的支持不足而受到广泛批评，在“有史以来最糟糕的技术产品”列表中频繁出现，PC
    World将其标记为“地球上最不安全的软件”[2]。甚至还没有提到所有的魔法，这意味着你不必管理![从这里开始的下一步](img/B04108_12_06.jpg)转换，因为你在概念上会将一切都毁掉，并在特定时间点重建事物。
- en: 'There is a world of possibilities to explore, and there is perhaps one thing
    to be said:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多可能性可以探索，也许有一件事要说：
- en: '*When this book began, the author''s home was Python. When this book ended,
    the author''s home was ReactJS.*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当这本书开始时，作者的家是Python。当这本书结束时，作者的家是ReactJS。
