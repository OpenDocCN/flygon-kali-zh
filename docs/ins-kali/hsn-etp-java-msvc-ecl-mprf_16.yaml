- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: 'An enterprise Java microservice has the following features:'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 企业级Java微服务具有以下特点：
- en: It is written using the Java language.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是用Java语言编写的。
- en: It can use any Java framework.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以使用任何Java框架。
- en: It can use any Java APIs.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以使用任何Java API。
- en: 'It must be enterprise-grade: reliable, available, scalable, secure, robust,
    and performant.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须是企业级的：可靠、可用、可扩展、安全、健壮和高性能。
- en: 'It must fulfill the characteristics of microservice architectures as listed
    at [https://martinfowler.com/microservices/](https://martinfowler.com/microservices/),
    which are as follows:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须满足[https://martinfowler.com/microservices/](https://martinfowler.com/microservices/)中列出的微服务架构的特征，即：
- en: Componentization via services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过服务组件化
- en: Organized around business capabilities
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕业务能力组织
- en: Products not projects
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品而不是项目
- en: Smart endpoints and dumb pipes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能端点和愚蠢的管道
- en: Decentralized governance
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散式治理
- en: Decentralized data management
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散式数据管理
- en: Infrastructure automation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施自动化
- en: Design for failure
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败设计
- en: Evolutionary design
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进化设计
- en: The terms digital economy and digital transformation describe the convergence
    of four different forces ...
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数字经济和数字转型这两个术语描述了四种不同力量的融合...
- en: Chapter 2
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章
- en: The main means of communication for the MicroProfile community is their Google
    Group, called *Eclipse MicroProfile*. You can post a message to it by sending
    an email to `microprofile@googlegroups.com`. Another great way to get your voice
    heard is by attending the bi-weekly MicroProfile Hangout call. Please check the
    MicroProfile Google Calendar to find out the exact date, time, and meeting information
    to join.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroProfile社区的主要交流方式是他们的Google Group，名为*Eclipse MicroProfile*。您可以通过发送电子邮件到`microprofile@googlegroups.com`来向其发布消息。另一个让您的声音被听到的好方法是参加每两周一次的MicroProfile
    Hangout通话。请查看MicroProfile Google日历，以了解确切的日期、时间和会议信息。
- en: The MicroProfile Hangout call serves as a forum where topics brought up by attendees
    are discussed and decisions are made, from sub-project statuses and release contents
    to release dates and sub-project creation approvals.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroProfile Hangout通话作为一个论坛，与会者提出的话题进行讨论和决策，从子项目状态和发布内容到发布日期和子项目创建批准。
- en: A sub-project (MicroProfile specification) lead or a group of leads are usually
    subject-matter experts in the topic at hand and are designated to serve as its
    facilitators. One important aspect to note is that the lead or leads of a working
    group (or sub-project for that matter) do not single-handedly shape or determine
    the evolution of a specification or what capabilities are included or not. They
    do not have veto power or a final say in the decisions made with respect to their
    specification. By sharing of ideas, expertise, past experiences, analysis of existing
    technologies, and best practices, the working group will come up with their best
    proposal possible.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个子项目（MicroProfile规范）的领导人或一组领导人通常是该主题的专家，并被指定为其协调人。一个重要的方面要注意的是，工作组的领导人（或者说子项目的领导人）并不是单方面塑造或决定规范的演变或包含哪些功能。他们没有否决权或对其规范所做决定的最终决定权。通过分享想法、专业知识、过去的经验、对现有技术的分析和最佳实践，工作组将提出他们可能的最佳提案。
- en: After the community discusses a new idea at length in the MicroProfile Google
    Group and/or the MicroProfile Hangout call, and it's been determined that it is
    worth furthering the debate, the community decides to create a working group for
    this new idea, and a lead or a group of leads, who are usually subject-matter
    experts in the topic at hand, are designated to serve as its facilitators. The
    working group will establish a recurring weekly or bi-weekly meeting, which is
    entered in the MicroProfile Google Calendar. Anybody can attend these meetings,
    but there's usually a core number of people that serve as the subject-matter experts
    that participate in these calls. After a few meetings, the working group decides
    whether or not the new functionality should be brought up to the MicroProfile
    Hangout call to discuss its proposal to become a MicroProfile sub-project. At
    the MicroProfile Hangout call, a sub-project proposal may be rejected or accepted. The
    acceptance of a sub-project means that it effectively addresses a need that enriches
    the specification towards its goal of optimizing enterprise Java for a microservices
    architecture. It is at this moment, that a sub-project becomes an official MicroProfile
    API. Once the sub-project becomes a MicroProfile API, then a determination is
    made whether it should be a standalone sub-project outside the umbrella or a sub-project
    included in the umbrella of MicroProfile releases.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 社区在MicroProfile Google Group和/或MicroProfile Hangout通话中对新想法进行了深入讨论，并确定其值得进一步辩论后，社区决定为这个新想法创建一个工作组，并指定一名或一组通常是该主题的专家的领导人来担任其协调人。工作组将建立一个定期每周或每两周的会议，并将其记录在MicroProfile
    Google日历中。任何人都可以参加这些会议，但通常有一些核心人员作为主题专家参与这些通话。经过几次会议后，工作组决定新功能是否应该被提升到MicroProfile
    Hangout通话中，以讨论其成为MicroProfile子项目的提案。在MicroProfile Hangout通话中，子项目提案可能会被拒绝或接受。子项目的接受意味着它有效地满足了丰富规范以优化企业Java用于微服务架构的目标的需求。在这一刻，子项目成为官方的MicroProfile
    API。一旦子项目成为MicroProfile API，就会确定它是否应该成为独立的子项目，还是包含在MicroProfile发布的伞下的子项目。
- en: Eclipse MicroProfile follows a time-boxed rapid incremental release schedule,
    which is public and listed on the Eclipse Foundation MicroProfile Project page.
    Major Eclipse MicroProfile releases, for example, from 1.x to 2.x, include major
    updates to MicroProfile APIs that may introduce breaking changes. Minor releases,
    that is, point releases, include small API updates or new APIs that make the predetermined
    release date. Currently, the MicroProfile community release windows are in February,
    June, and November of every year for minor and/or major releases.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile遵循时间框架的快速增量发布计划，该计划公开列在Eclipse Foundation MicroProfile项目页面上。主要的Eclipse
    MicroProfile发布，例如从1.x到2.x，包括对MicroProfile API的重大更新，可能引入破坏性更改。次要发布，即点发布，包括在预定的发布日期进行的小型API更新或新API。目前，MicroProfile社区的发布窗口为每年的二月、六月和十一月，用于次要和/或主要发布。
- en: The sandbox repository, which is a GitHub repository, is for incubating ideas
    and code examples that will eventually turn into a separate repository, contributing
    to a new specification. Anybody can open pull requests and use the sandbox for
    experimentation of new ideas and to share code and documentation, which can be
    used as part of the discussion in the community Google Group, the MicroProfile
    Hangout calls, or working group meetings.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 沙盒存储库是一个GitHub存储库，用于孵化想法和代码示例，最终将成为一个单独的存储库，为新规范的贡献。任何人都可以发起拉取请求并使用沙盒来实验新想法并共享代码和文档，这可以作为社区Google
    Group、MicroProfile Hangout calls或工作组会议讨论的一部分。
- en: The reason for releasing a sub-project outside the MicroProfile umbrella/platform
    release is that it gives the community and end users an opportunity to utilize
    and test the new technology, hence proving it in real applications before it can
    be considered for inclusion to the umbrella. The MicroProfile project encourages
    that a new sub-project specification at least release one version outside the
    umbrella before its inclusion in the umbrella/platform release can be considered.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MicroProfile伞/平台发布之外发布子项目的原因是，这给了社区和最终用户在将其纳入伞/平台之前有机会利用和测试新技术，从而在真实应用中证明它的价值。MicroProfile项目鼓励新的子项目规范至少在伞/平台发布之外发布一个版本，然后才能考虑将其纳入伞/平台发布。
- en: The MicroProfile Starter is a samples source code generator, whose goal is to
    aid developers to quickly get started using and exploiting the capabilities of
    the community-driven open source specification for enterprise Java microservices,
    Eclipse MicroProfile, by generating working sample code in a Maven project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroProfile Starter是一个样本源代码生成器，旨在帮助开发人员快速开始使用和利用社区驱动的企业Java微服务的开源规范Eclipse
    MicroProfile，通过在Maven项目中生成可工作的示例代码。
- en: Chapter 3
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章
- en: The default sources of configuration properties are environment variables, Java
    system properties, and the `META-INF`/`microprofile-config.properties` file.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置属性的默认来源是环境变量、Java系统属性和`META-INF`/`microprofile-config.properties`文件。
- en: You can provide a custom ConfigSource implementation that maps property names
    to values in the custom source.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以提供自定义的ConfigSource实现，将属性名称映射到自定义源中的值。
- en: Strings are not the only supported types, as MP-Config supports type conversion
    via a pluggable SPI, and provides several default conversions by default.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串并非唯一支持的类型，因为MP-Config支持通过可插拔SPI进行类型转换，并默认提供了几种默认转换。
- en: You do not need to provide a value for an injected property if you have given
    a `defaultValue`, or have injected the property as an `Optional<?>` value.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经给定了`defaultValue`，或者将属性注入为`Optional<?>`值，则无需为注入的属性提供值。
- en: Complex property types can be handled using a custom `Converter<?>` implementation
    that takes a string and returns the complex type.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用自定义的`Converter<?>`实现来处理复杂的属性类型，该实现接受一个字符串并返回复杂类型。
- en: When an annotation is specified at the class ...
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在类中指定注释时...
- en: Chapter 4
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章
- en: The wire format is not usable in environments that only look at the HTTP status
    code to determine the HC status.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线格式在只查看HTTP状态代码以确定HC状态的环境中无法使用。
- en: An MP-HC response can include arbitrary properties using the `HealthCheckResponse#withData()`
    methods.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MP-HC响应可以使用`HealthCheckResponse#withData()`方法包含任意属性。
- en: You can create a HealthCheck implementation for each service, and the MP-HC
    feature will logically combine them to produce an overall status response.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以为每个服务创建一个HealthCheck实现，MP-HC功能将逻辑地将它们组合在一起，以生成整体状态响应。
- en: A JWT is a JSON Web Token, a JSON-formatted object that has a header, payload,
    and signature component.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JWT是JSON Web Token的缩写，是一个JSON格式的对象，包含头部、负载和签名组件。
- en: A claim is a single named value from the JWT payload.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明是JWT负载中的单个命名值。
- en: Anything that can be represented in JSON can be used in a JWT.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何可以用JSON表示的内容都可以用在JWT中。
- en: The single main step in authenticating a JWT is validating that it is signed
    via the RS256 algorithm based on a configured public key.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证JWT的单个主要步骤是验证它是否通过RS256算法基于配置的公钥进行签名。
- en: One could look at claims other that the groups claim to make checks to add application
    specific authorization decisions.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了组声明之外，还可以查看JWT负载中的其他声明，以进行应用程序特定的授权决策。
- en: Chapter 5
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章
- en: Distributed tracing provides a micro-view of what happened with a request from
    end to end, whereas metrics expose scalar numerical values from a single component.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分布式跟踪提供了从端到端请求发生的微观视图，而指标则公开了单个组件的标量数值。
- en: Distributed tracing systems usually provide features such as the root cause
    and critical path analysis, contextualized logging, distributed context propagation,
    and service dependency diagrams.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分布式跟踪系统通常提供诸如根本原因和关键路径分析、上下文化日志记录、分布式上下文传播和服务依赖图等功能。
- en: Automatically traced are JAX-RS server endpoints and MicroProfile Rest clients.
    Some vendors can also automatically trace JAX-RS clients.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JAX-RS服务器端点和MicroProfile Rest客户端会自动跟踪。一些供应商还可以自动跟踪JAX-RS客户端。
- en: These tags are added for every REST request `http.method`, `http.status_code`,
    `http.url`, `component`, `span.kind` and `error` if an exception is thrown.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些标签是为每个REST请求添加的`http.method`、`http.status_code`、`http.url`、`component`、`span.kind`和`error`，如果抛出异常。
- en: Explicit instrumentation can be added by using `@Traced` annotation or injecting
    the tracer and creating ...
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过使用`@Traced`注解或注入跟踪器并创建...来添加显式的仪器。
- en: Chapter 6
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: 'No: by default, any REST endpoint will have OpenAPI generated for it even if
    none of the MP OpenAPI annotations are used.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不：默认情况下，任何REST端点都将为其生成OpenAPI，即使没有使用MP OpenAPI注解。
- en: 'Yes: you can choose to use as many or as few of the MP OpenAPI annotations
    as you wish, to represent the REST endpoints in your microservice.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的：您可以选择使用尽可能多或尽可能少的MP OpenAPI注解来表示您的微服务中的REST端点。
- en: The notion is that you predefine the expected contracts of your endpoints and
    encapsulate these in OpenAPI documents that can be bundled with your microservice.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个概念是您预定义端点的预期合同，并将其封装在可以与您的微服务捆绑在一起的OpenAPI文档中。
- en: 'No: you just need to know what the formats of the request and response are,
    and then you can create your own type-safe interface.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不：您只需要知道请求和响应的格式，然后可以创建自己的类型安全接口。
- en: By using the `.../mp-rest/url` MP Config setting, where `...` is either the
    interface name of the type-safe interface or the configKey passed to the `RegisterRestClient`
    annotation.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`.../mp-rest/url` MP Config设置，其中`...`是类型安全接口的接口名称或传递给`RegisterRestClient`注解的configKey。
- en: One way is to register a `ClientHeadersFactory` implementation. Another is to
    list the headers in the `org.eclipse.microprofile.rest.client.propagateHeaders`
    MP-Config property.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种方法是注册一个`ClientHeadersFactory`实现。另一种方法是在`org.eclipse.microprofile.rest.client.propagateHeaders`
    MP-Config属性中列出标头。
- en: Chapter 7
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章
- en: At the time of writing, there are eight implementations of Eclipse MicroProfile,
    all of which are open source. They are Thorntail, Open Liberty, Apache TomEE,
    Payara Micro, Hammock, KumuluzEE, Launcher, and Helidon. There is also Quarkus
    as the latest entrant.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在撰写本文时，Eclipse MicroProfile有八个实现，所有这些实现都是开源的。它们是Thorntail、Open Liberty、Apache
    TomEE、Payara Micro、Hammock、KumuluzEE、Launcher和Helidon。最新的参与者还有Quarkus。
- en: An application server is a container for Java EE applications. An application
    assembler only includes the functionality that the application needs, instead
    of requiring an application server to be up and running, and commonly generates
    an executable JAR. An application assembler can generate an uberjar, a self-contained
    runnable JAR file, or an application jar with its runtime dependencies located
    in a sub-directory, for example, an accompanying `lib` or `libs` sub-directory.
    ...
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用服务器是Java EE应用程序的容器。应用程序装配器只包括应用程序需要的功能，而不需要应用服务器运行，并且通常生成可执行的JAR。应用程序装配器可以生成一个uberjar，一个独立的可运行的JAR文件，或者一个带有其运行时依赖项的应用程序JAR，例如一个附带的`lib`或`libs`子目录。
- en: Chapter 8
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: We have seen many examples throughout the book and this chapter that MP-Config
    settings affect both application and MP features.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在整本书和本章中看到了许多例子，即MP-Config设置影响应用程序和MP功能。
- en: As long as the path you supplied exists, you should be able to see a successful
    heath check with information about that path.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只要您提供的路径存在，您应该能够看到有关该路径的成功健康检查信息。
- en: It shows information about the KeyCloak server. If KeyCloak is stopped, it shows
    an error.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它显示了关于KeyCloak服务器的信息。如果KeyCloak停止，它会显示错误。
- en: It will not be found because the metric is generated lazily on first request.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它不会被找到，因为度量是在第一次请求时懒惰生成的。
- en: TBD.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 待定。
- en: For unsecured methods the behavior should be similar. For secured methods, the
    Swagger-UI invocations fail.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于未安全的方法，行为应该是类似的。对于受保护的方法，Swagger-UI调用会失败。
- en: You will see error responses.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到错误响应。
- en: 'That is the encoded MP-JWT. You can use that in a curl command as the *Authorization:
    Bearer ...* header value where you would replace the ... with the string found
    in the Access Base64 Token field.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '这是编码的MP-JWT。您可以在curl命令中使用它作为*Authorization: Bearer ...*标头值，其中您可以用在Access Base64
    Token字段中找到的字符串替换...。'
- en: Chapter 9
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: MicroProfile Reactive Messaging is a great option for handling message sources
    via connectors, especially in situations where the source is generating messages
    at a high frequency and an asynchronous approach to processing them makes the
    most sense.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroProfile Reactive Messaging是处理消息源的一个很好的选择，特别是在源以高频率生成消息并且异步处理它们是最合理的情况下。
- en: MicroProfile Context Propagation best supports MicroProfile Reactive Streams
    Operators and MicroProfile Reactive Messaging in that it allows the propagation
    of context that was traditionally associated with the current thread across various
    types of units of work.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroProfile Context Propagation最好支持MicroProfile Reactive Streams Operators和MicroProfile
    Reactive Messaging，因为它允许传播传统上与当前线程相关联的上下文到各种工作单元中。
- en: The current specifications that support reactive programming are MicroProfile
    Reactive Streams Operators, MicroProfile Reactive Messaging, and MicroProfile
    Context Propagation.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持响应式编程的当前规范是MicroProfile Reactive Streams Operators、MicroProfile Reactive Messaging和MicroProfile
    Context Propagation。
- en: At the time of writing, the projects that sit ...
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在撰写本文时，坐落在...的项目...
- en: Chapter 10
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: Eclipse MicroProfile provide one of the best approaches to develop microservices
    using enterprise Java. In turn, microservices developed using containers as their
    unit of deployment provide one of the best approaches to develop highly distributed
    systems in the cloud and on-premises, that is, cloud-native applications. Hence,
    MicroProfile-based microservices facilitate the development of cloud-native applications.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile提供了使用企业Java开发微服务的最佳方法之一。反过来，使用容器作为部署单元开发的微服务提供了在云端和本地开发高度分布式系统的最佳方法，也就是云原生应用。因此，基于MicroProfile的微服务有助于开发云原生应用。
- en: 'There are two complementary aspects or components to cloud-native application
    development: application services and infrastructure services. Application services
    speed up the development of business logic of a cloud-native application, and
    infrastructure services speed up its delivery and deployment. These two aspects
    are complementary and integral to cloud-native application development.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生应用开发有两个互补的方面或组件：应用服务和基础设施服务。应用服务加速云原生应用的业务逻辑开发，基础设施服务加速其交付和部署。这两个方面是互补的，对云原生应用开发至关重要。
- en: 'Cloud-native application development is an approach to building and running
    applications that takes full advantage of the cloud computing model based upon
    four key tenets: a) A service-based architecture (miniservices, microservices,
    SOA services, and so on); b) An API-driven approach for inter-service communication;
    c) An underlying infrastructure that’s based on containers; and d) DevOps processes.
    The architecture and communication aspects are related to the development concerns
    of cloud-native applications, and the infrastructure and the process aspects are
    related to their delivery/deployment. Eclipse MicroProfile relates to these tenets
    in that it supports the implementation of microservices that can be part of an
    architecture that uses containers as its underlying infrastructure, where microservices
    communicate with each other using their APIs, and are developed using DevOps processes.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生应用开发是一种构建和运行应用程序的方法，充分利用基于四个关键原则的云计算模型：a）基于服务的架构（微服务、微服务、SOA服务等）；b）基于API的服务间通信方法；c）基于容器的基础设施；和d）DevOps流程。架构和通信方面涉及云原生应用的开发问题，基础设施和流程方面涉及它们的交付/部署。Eclipse
    MicroProfile与这些原则相关，因为它支持微服务的实现，可以成为使用容器作为基础设施的架构的一部分，其中微服务使用其API相互通信，并使用DevOps流程进行开发。
- en: 'This is how Eclipse MicroProfile contributes to each of the eight steps to
    guide your journey to cloud-native applications:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是Eclipse MicroProfile对指导您迈向云原生应用的八个步骤的贡献：
- en: 'Evolve a DevOps culture and practices: "Take advantage of new technology, faster
    approaches, and tighter collaboration by embracing the principles and cultural
    values of DevOps and organizing your organization around those values." Although
    this is an organizational and process-related step, Eclipse MicroProfile, as a
    specification for microservices, can be a good fit for this adaptation of culture
    and process because microservices, due to its characteristics, closely support
    DevOps processes.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发展DevOps文化和实践：“通过拥抱DevOps的原则和文化价值观，并围绕这些价值观组织您的组织，利用新技术、更快的方法和更紧密的协作。”尽管这是一个组织和流程相关的步骤，但作为微服务规范的Eclipse
    MicroProfile可以很好地适应这种文化和流程的调整，因为微服务由于其特性，密切支持DevOps流程。
- en: 'Speed up existing applications using fast monoliths: "Accelerate existing applications
    by migrating to a modern, container-based platform—and break up monolithic applications
    into microservices or miniservices for additional efficiency gains." Eclipse MicroProfile
    can be of great help when breaking up your monolith into microservices. As you
    identify bounded contexts in your monolith, consider using Eclipse MicroProfile
    to implement each of the microservices that implement the logic of each bounded
    context.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用快速单体应用加速现有应用程序：“通过迁移到现代化的基于容器的平台加速现有应用程序，并将单体应用程序分解为微服务或迷你服务，以获得额外的效率提升。”当将您的单体应用程序分解为微服务时，Eclipse
    MicroProfile可以提供很大的帮助。当您在单体应用程序中识别出有界上下文时，考虑使用Eclipse MicroProfile来实现每个有界上下文的逻辑的微服务。
- en: 'Use application services to speed up development: "Speed software development
    with reusability. Cloud-native application services are ready-to-use developer
    tools. However, these reusable components must be optimized and integrated into
    the underlying cloud-native infrastructure to maximize benefits." An In-Memory-Data-Grid
    (IMDG) and a messaging broker are application services that help speed up the
    development of business logic. A microservice, developed using Eclipse MicroProfile,
    can leverage these application services by invoking them from within its method
    bodies. Eclipse MicroProfile does not impose any kind of restriction when integrating
    to application services, such as an IMDG or a messaging broker.'
  id: totrans-80
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用应用服务加速开发：“通过可重用性加速软件开发。云原生应用服务是现成的开发人员工具。然而，这些可重用组件必须优化并集成到底层云原生基础设施中，以最大化收益。”内存数据网格（IMDG）和消息代理是加速业务逻辑开发的应用服务。使用Eclipse
    MicroProfile开发的微服务可以通过在其方法体内调用它们来利用这些应用服务。Eclipse MicroProfile在集成到应用服务（如IMDG或消息代理）时不会施加任何限制。
- en: 'Choose the right tool for the right task: "Use a container-based application
    platform that supports the right mix of frameworks, languages, and architectures—and
    can be tailored to your specific business application need."  Eclipse MicroProfile
    is one of these tools that a developer can use when choosing the right tool for
    the right task. For example, Red Hat Application Runtimes is a collection of runtimes
    and tools, which includes Eclipse MicroProfile, Node.js, Spring Boot, and Vert.x.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择正确的工具来完成正确的任务：“使用支持正确框架、语言和架构混合的基于容器的应用平台，并可以根据您特定的业务应用需求进行定制。”Eclipse MicroProfile是开发人员在选择正确的工具来完成正确的任务时可以使用的工具之一。例如，Red
    Hat Application Runtimes是一组运行时和工具，其中包括Eclipse MicroProfile、Node.js、Spring Boot和Vert.x。
- en: 'Provide developers with self-service on-demand infrastructure: "Use containers
    and container orchestration technology to simplify access to underlying infrastructure,
    give control and visibility to IT operations teams, and provide robust application
    life-cycle management across various infrastructure environments, such as datacenters,
    private clouds, and public clouds."  The microservices you develop with Eclipse
    MicroProfile can be deployed to one or more containers. By easily managing these
    containers and your microservices architecture running on them, you can accelerate
    your development cycles to deliver value to the business faster.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为开发人员提供自助按需基础设施：“使用容器和容器编排技术简化对基础设施的访问，赋予IT运营团队控制和可见性，并在各种基础设施环境（如数据中心、私有云和公共云）中提供强大的应用程序生命周期管理。”您使用Eclipse
    MicroProfile开发的微服务可以部署到一个或多个容器中。通过轻松管理这些容器和在其上运行的微服务架构，您可以加快开发周期，更快地为业务提供价值。
- en: 'Automate IT to accelerate application delivery: "Create automation sandboxes
    for learning the automation language and process, establish collaborative dialog
    across organizations for defining service requirements, create self-service catalogs
    that empower users and speed delivery, and use metering, monitoring, and chargeback
    policies and processes." Eclipse MicroProfile provides capabilities for metrics,
    fault tolerance, and health checks, all of which can be used as input to the IT
    automation processes.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加快应用交付的IT自动化：“创建自动化沙盒以学习自动化语言和流程，跨组织建立协作对话以定义服务需求，创建赋予用户权力并加快交付速度的自助服务目录，并使用计量、监控和计费政策和流程。”Eclipse
    MicroProfile提供了度量、容错和健康检查的功能，所有这些都可以作为IT自动化流程的输入。
- en: 'Implement continuous delivery and advanced deployment techniques: "Accelerate
    the delivery of your cloud-native applications with automated delivery, continuous
    integration/continuous delivery (CI/CD) pipelines, rolling blue/green and canary
    deployments, and A/B testing." The use of microservices in combination with CI/CD
    can facilitate advanced deployment techniques. For example, you can introduce
    a MicroProfile-based microservice with new functionality as part of a blue/green
    or canary deployment intro production, and switch all of the traffic to it once
    you have proven that the new functionality works as expected.'
  id: totrans-84
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施持续交付和高级部署技术：“通过自动交付、持续集成/持续交付（CI/CD）流水线、滚动蓝/绿和金丝雀部署以加速交付云原生应用程序，并进行A/B测试。”微服务与CI/CD的结合可以促进高级部署技术。例如，您可以将基于MicroProfile的微服务与新功能作为蓝/绿或金丝雀部署的一部分引入生产环境，并在证明新功能符合预期后将所有流量切换到它。
- en: 'Evolve a more modular architecture: "Choose a modular design that makes sense
    for your specific needs, using microservices, a monolith-first approach, or miniservices—or
    a combination." For this step, you can use Eclipse MicroProfile to develop microservices
    for new applications or as you break specific bounded contexts of your monolith
    into microservices.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 演变更模块化的架构：“选择一个对你的特定需求有意义的模块化设计，使用微服务、先单体应用方法或迷你服务，或者二者结合。”在这一步中，您可以使用Eclipse
    MicroProfile为新应用程序开发微服务，或者在将单体应用程序的特定边界上下文拆分为微服务时使用。
- en: Twelve-factor app is a methodology that a developer can follow while designing
    and implementing microservices and applications, independent of the programming
    language or framework being used to implement them. The framework that a developer
    can use to implement microservices using twelve-factor app is Eclipse MicroProfile.
    Twelve-factor app and Eclipse MicroProfile are not mutually exclusive, but are
    complementary to each other.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 十二要素应用是开发人员在设计和实现微服务和应用程序时可以遵循的方法，与用于实现它们的编程语言或框架无关。开发人员可以使用Eclipse MicroProfile来实现微服务的框架。十二要素应用和Eclipse
    MicroProfile并不是互斥的，而是互补的。
- en: Most, if not all, market FaaS offerings support Java. As such, developers can
    write the function bodies in one of the many implementations of Eclipse MicroProfile,
    which are all in Java. The ease of use and rich functionality of Eclipse MicroProfile
    combined with the simplicity of a FaaS platform can greatly improve the ability
    of developers to deliver value to the business faster. In addition, a technology
    such as Quarkus, which implements Eclipse MicroProfile, uses low amounts of memory
    and has fast startup times, is an ideal runtime for a FaaS.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大多数市场上的FaaS产品都支持Java。因此，开发人员可以在Eclipse MicroProfile的许多实现中的一个中编写函数体，这些实现都是用Java编写的。Eclipse
    MicroProfile的易用性和丰富功能与FaaS平台的简单性结合起来，可以极大地提高开发人员更快地为业务提供价值的能力。此外，像实现了Eclipse MicroProfile的Quarkus这样的技术使用低内存量和快速启动时间，是FaaS的理想运行时。
- en: 'When using Eclipse MicroProfile in a deployment across clouds, here are the
    things you need to consider:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在跨云部署中使用Eclipse MicroProfile时，以下是您需要考虑的事项：
- en: Configuration of communication routes between the cloud environment and the
    on-premise environment needs to be done using whatever DNS support the cloud environment
    provides.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云环境提供的DNS支持配置云环境与本地环境之间的通信路由。
- en: Configuration of MicroProfile OpenTracing to enable capture of tracing across
    the cloud environments.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置MicroProfile OpenTracing以启用在云环境中跟踪的捕获。
- en: Monitoring of the split MicroProfile Metrics information across the cloud environments
  id: totrans-91
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控在云环境中分割的MicroProfile度量信息
- en: Setting up the CI tasks to target the appropriate cloud environment to maintain
    the correct microservices.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置CI任务以针对适当的云环境，以维护正确的微服务。
- en: Distributed tracing in a multi-cloud environment can be challenging. We want
    to fulfill the same objective as with a single cloud environment to visualize
    the single end-to-end trace associated with a request as it passes through services
    within and across each cloud, but may face complications when dealing with different
    context propagation formats and storage of the tracing data in different formats
    per cloud. The first challenge is to ensure that a trace continues across different
    cloud environments. This is a problem because, at the time of writing, there is
    not widely adopted or standardized trace context format. Usually, each tracing
    system uses different headers and formats to propagate the tracing context. The
    second challenge, even in a homogenous tracing environment, is to visualize tracing
    data from multi-cloud environments. This can be problematic because tracing data
    in each cloud might be stored in different databases or in different formats.
    This can be overcome by replicating the data to a single unified storage or sending
    missing tracing data between systems on-demand with the appropriate data format
    adjustments.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在多云环境中进行分布式跟踪可能具有挑战性。我们希望实现与单一云环境相同的目标，即可视化请求通过每个云内部和跨越每个云的服务时产生的端到端跟踪，但在处理不同的上下文传播格式和不同云中跟踪数据的存储格式时可能会遇到复杂情况。第一个挑战是确保跟踪在不同的云环境中持续进行。这是一个问题，因为在撰写本文时，尚未广泛采用或标准化跟踪上下文格式。通常，每个跟踪系统使用不同的标头和格式来传播跟踪上下文。即使在同质化的跟踪环境中，第二个挑战是从多云环境中可视化跟踪数据。这可能会有问题，因为每个云中的跟踪数据可能存储在不同的数据库中或以不同的格式存储。这可以通过将数据复制到单一统一存储或以适当的数据格式调整发送丢失的跟踪数据来克服。
- en: Service Meshes such as Istio or LinkerD offer services at the platform level
    on top of Kubernetes in the areas of discovery, routing, and fault tolerance.
    Some of those services can also be found in MicroProfile. When you deploy a MicroProfile
    application into such a Service Mesh, you need to consider if you want to use
    the version from MicroProfile or the one from the Mesh. The MicroProfile feature
    that is most likely affected here is Fault Tolerance, and especially the retry
    logic.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务网格（如Istio或LinkerD）在Kubernetes的平台级别上提供了发现、路由和容错等领域的服务。一些这些服务也可以在MicroProfile中找到。当您将MicroProfile应用部署到这样的服务网格中时，您需要考虑是否要使用MicroProfile的版本还是网格的版本。在这里最有可能受到影响的MicroProfile特性是容错，特别是重试逻辑。
