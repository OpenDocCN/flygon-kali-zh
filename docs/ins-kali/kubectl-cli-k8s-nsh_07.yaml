- en: '*Chapter 4*: Creating and Deploying Applications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：创建和部署应用程序'
- en: In the previous chapters, we have learned about Kubernetes nodes. Let's finally
    deploy an application using a Kubernetes deployment, scale the application up,
    and create a service for it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经了解了Kubernetes节点。让我们最终使用Kubernetes部署一个应用程序，扩展该应用程序，并为其创建一个服务。
- en: A Kubernetes deployment is one way to deploy applications from Docker images,
    and we are going to use it for our example applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes部署是从Docker镜像部署应用程序的一种方式，我们将在示例应用程序中使用它。
- en: 'Kubernetes supports a few container runtimes, all of which can run Docker images:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes支持几种容器运行时，所有这些容器运行时都可以运行Docker镜像：
- en: Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: CRI-O
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRI-O
- en: Containerd
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Containerd
- en: 'In this chapter, we''re going to cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to pods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod的介绍
- en: Creating a deployment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建部署
- en: Creating a service
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务
- en: Scaling up an application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展应用程序
- en: Introduction to pods
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pod的介绍
- en: A pod is a collocated group of application containers with shared volumes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pod是一组共享卷的应用程序容器的共同组。
- en: The applications in a pod all use the same network namespace, IP address, and
    port space. They can find and communicate with each other using localhost. Each
    pod has an IP address in a flat shared networking namespace that has full communication
    with other physical computers and containers across the network.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Pod中的应用程序都使用相同的网络命名空间、IP地址和端口空间。它们可以使用localhost找到彼此并进行通信。每个Pod在一个扁平的共享网络命名空间中都有一个IP地址，可以与网络中的其他物理计算机和容器进行完全通信。
- en: Pods are the smallest deployable units that can be created, scheduled, and managed
    with Kubernetes. Pods also can be created individually. As pods do not have a
    managed life cycle, if they die, they will not be recreated. For that reason,
    it is recommended that you use a deployment even if you are creating a single
    pod.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Pod是可以使用Kubernetes创建、调度和管理的最小部署单元。Pod也可以单独创建。由于Pod没有受管生命周期，如果它们死亡，它们将不会被重新创建。因此，建议即使创建单个Pod，也使用部署。
- en: 'Pods are also used in DaemonSets, StatefulSets, Jobs, and CronJobs:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Pod也用于DaemonSets、StatefulSets、Jobs和CronJobs：
- en: '![Figure 4.1 – Pod with two containers'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 - 具有两个容器的Pod'
- en: '](image/B16411_04_001.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_04_001.jpg)'
- en: Figure 4.1 – Pod with two containers
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 - 具有两个容器的Pod
- en: 'The preceding diagram shows a pod with two containers. Containers in a pod
    share the same Linux network namespace as well as the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了一个具有两个容器的Pod。Pod中的容器共享相同的Linux网络命名空间以及以下内容：
- en: IP address
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP地址
- en: Localhost
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地主机
- en: '**IPC** (**inter-process communication**)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IPC**（**进程间通信**）'
- en: Let's move on to deployments, which are more suited to real-world application
    deployments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行部署，这更适合于真实世界的应用程序部署。
- en: Creating a deployment
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建部署
- en: 'The Kubernetes deployment provides updates for ReplicaSets, which ensures that
    a specified amount of pods (replicas) are running all the time:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes部署提供了ReplicaSets的更新，确保指定数量的Pod（副本）始终运行：
- en: '![Figure 4.2 – Deployment with three pods'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 - 具有三个Pod的部署'
- en: '](image/B16411_04_002.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_04_002.jpg)'
- en: Figure 4.2 – Deployment with three pods
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 - 三个Pod的部署
- en: The preceding diagram shows a deployment with three pods; the ReplicaSet will
    try to keep three pods running all the time. Of course, if there are no free resources
    in the Kubernetes cluster, the running pod replicas might not match the required
    replica count.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了一个具有三个Pod的部署；ReplicaSet将尝试始终保持三个Pod运行。当然，如果Kubernetes集群中没有空闲资源，运行的Pod副本可能无法匹配所需的副本计数。
- en: There are a few ways to create a Kubernetes deployment – let's explore them.
    The easiest way is using `$ kubectl create deployment`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以创建Kubernetes部署 - 让我们来探索一下。最简单的方法是使用`$ kubectl create deployment`。
- en: 'Let''s create an `nginx` deployment:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`nginx`部署：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s check the created `nginx` deployment:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查创建的`nginx`部署：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s check the created `nginx` pod:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查创建的`nginx` pod：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding command created an `nginx` deployment with one `nginx-86c57db685-c9s49`
    pod.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了一个带有一个`nginx-86c57db685-c9s49` pod的`nginx`部署。
- en: 'It looks almost too easy, right? One command and boom: your deployment is running.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来几乎太容易了，对吧？一个命令，嘭：你的部署正在运行。
- en: Important note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `kubectl create deployment` command is only recommended for testing images,
    as there you do not specify the deployment template and you do not have much control
    over any additional settings you might want to set for the deployment.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl create deployment`命令仅建议用于测试图像，因为在那里您不指定部署模板，并且对于您可能想要设置的任何其他设置，您没有太多控制。'
- en: 'Let''s deploy from the file using the `$ kubectl apply` command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`$ kubectl apply`命令从文件部署：
- en: 'We have a file called `deployment.yaml` with the following contents:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个名为`deployment.yaml`的文件，内容如下：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When using the preceding file with `kubectl`, it will deploy the same `nginx`
    deployment as we did using the `$ kubectl create deployment` command, but in this
    case, later on, we can update the file according to our needs and upgrade the
    deployment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用前面的文件与`kubectl`时，它将部署与我们使用`$ kubectl create deployment`命令相同的`nginx`部署，但在这种情况下，稍后我们可以根据需要更新文件并升级部署。
- en: 'Let''s delete the previously installed deployment:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们删除之前安装的部署：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s redeploy using the `deployment.yaml` file this time:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次让我们使用`deployment.yaml`文件重新部署：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see from the preceding commands, we have the deployment with one
    pod (replica) installed, but this time we used the template from the file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述命令中可以看出，我们部署了一个安装了一个pod（副本），但这次我们使用了文件中的模板。
- en: 'The following diagram shows a deployment with three pods; the ReplicaSet will
    try to keep three pods uprunning at all times Again, if there are no free resources
    in the Kubernetes cluster, the running pod replicas might not match the required
    replica count:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个带有三个pod的部署；ReplicaSet将尝试始终保持三个pod运行。同样，如果Kubernetes集群中没有空闲资源，运行的pod副本可能不会与所需的副本计数匹配：
- en: '![Figure 4.3 – Kubernetes node'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3 – Kubernetes节点'
- en: '](image/B16411_04_003.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_04_003.jpg)'
- en: Figure 4.3 – Kubernetes node
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – Kubernetes节点
- en: Let's take a look at how to create a service.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个服务。
- en: Creating a service
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个服务
- en: Kubernetes services provide a single stable name and address for a set of pods.
    They act as basic in-cluster load balancers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes服务为一组pod提供单一稳定的名称和地址。它们充当基本的集群内负载均衡器。
- en: Most pods are designed to be long-running, but when a single process dies, the
    pod dies with it. If it dies, the Deployment replaces it with a new pod. Every
    pod gets its own dedicated IP address, which allows containers to have the same
    port (the exception is when NodePort is used), even if they're sharing the same
    host. But when a pod is started by the Deployment, the pod gets a new IP address.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数pod都设计为长时间运行，但当一个单独的进程死掉时，pod也会死掉。如果它死掉，部署会用一个新的pod来替换它。每个pod都有自己专用的IP地址，这允许容器使用相同的端口（例外情况是使用NodePort），即使它们共享同一个主机。但当部署启动一个pod时，该pod会获得一个新的IP地址。
- en: This is where services really help. A service is attached to the deployment.
    Each service gets assigned a virtual IP address that remains constant until the
    service dies. As long as we know the service IP address, the service itself will
    keep track of the pods created by the deployment and will distribute requests
    to the deployment pods.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是服务真正有用的地方。服务附加到部署上。每个服务都被分配一个虚拟IP地址，直到服务死掉都保持不变。只要我们知道服务的IP地址，服务本身将跟踪部署创建的pod，并将请求分发给部署的pod。
- en: 'By setting the service, we get an internal Kubernetes DNS name. Also, the service
    acts as an in-cluster load balancer when you have more than one ReplicaSet. With
    a service, you can also expose your application to the internet when the service
    type is set to LoadBalancer:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置服务，我们可以获得一个内部的Kubernetes DNS名称。此外，当有多个ReplicaSet时，服务还可以充当集群内的负载均衡器。有了服务，您还可以将应用程序暴露到互联网，当服务类型设置为LoadBalancer时：
- en: '![Figure 4.4 – Kubernetes node'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.4 - Kubernetes节点'
- en: '](image/B16411_04_004.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_04_004.jpg)'
- en: Figure 4.4 – Kubernetes node
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 - Kubernetes节点
- en: The preceding diagram explains how a service works.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图解释了服务的工作原理。
- en: 'As we have our application up and running, let''s create a Kubernetes service
    for it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序已经运行起来了，让我们为其创建一个Kubernetes服务：
- en: 'Let''s start by running the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从运行以下命令开始：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We used port `80`, and on that port, the `nginx` service was exposed to other
    Kubernetes applications; `target-port=80` is our `nginx` container port. We are
    using the `port=80` container because the official `nginx` Docker image ([https://hub.docker.com/_/nginx](https://hub.docker.com/_/nginx))
    we deployed in [*Chapter 3*](B16411_03_Final_VK_ePub.xhtml#_idTextAnchor039),
    *Working with Nodes*, uses port `80`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了端口“80”，并且在该端口上，“nginx”服务被暴露给其他Kubernetes应用程序；“target-port=80”是我们的“nginx”容器端口。我们使用端口为“80”的容器，因为我们在[*第3章*](B16411_03_Final_VK_ePub.xhtml#_idTextAnchor039)中部署的官方“nginx”Docker镜像（[https://hub.docker.com/_/nginx](https://hub.docker.com/_/nginx)）使用端口“80”。
- en: 'Let''s check the created `nginx` service:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查创建的“nginx”服务：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding `kubectl get service` command shows the services list and `kubectl
    describe service nginx` describes the service.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述“kubectl get service”命令显示了服务列表，“kubectl describe service nginx”描述了服务。
- en: 'We can see a few things there:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一些东西：
- en: The service got the same name, `nginx`, as the deployment we exposed.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务的名称与我们暴露的部署相同，都是“nginx”。
- en: '`Selector: app=nginx` is the same as `matchLabels` in the `nginx` deployment;
    this is how the service knows how to connect to the right deployment.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“Selector: app=nginx”与“nginx”部署中的“matchLabels”是相同的；这就是服务如何知道如何连接到正确的部署。'
- en: '`Type: ClusterIP` is the default service type when no `–type` flag is provided.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '当没有提供“-type”标志时，“Type: ClusterIP”是默认的服务类型。'
- en: Important note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Using the `kubectl expose` command looks like an easy way to set up a service
    for the application. But again, we cannot put that command under Git control,
    nor can we change the service settings. For testing purposes, this is fine, but
    not for running a real-world application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“kubectl expose”命令看起来是为应用程序设置服务的一种简单方法。但是，我们无法将该命令纳入Git控制，也无法更改服务设置。对于测试目的，这是可以的，但对于运行真实应用程序来说就不行了。
- en: Let's deploy from the file using the `$ kubectl apply` command.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用“$ kubectl apply”命令从文件部署。
- en: 'We have a file called `service.yaml` that we are going to use to update the
    service:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个名为“service.yaml”的文件，我们将使用它来更新服务：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This time, let's keep the service we created with `kubectl expose` and see whether
    we can apply changes from the `service.yaml` file to the service we have created.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，让我们保留使用“kubectl expose”创建的服务，并看看我们是否可以将“service.yaml”文件中的更改应用到我们创建的服务上。
- en: 'To deploy the service, we run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署服务，我们运行以下命令：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We got a warning (as first we used the `kubectl expose` command, and then we
    tried to update the service from the file), but our changes were applied to the
    service successfully, and from now on we can use `service.yaml` to make changes
    to the `nginx` service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到了一个警告（首先我们使用了“kubectl expose”命令，然后我们尝试从文件更新服务），但我们的更改成功应用到了服务上，从现在开始我们可以使用“service.yaml”来对“nginx”服务进行更改。
- en: Tip
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: When you create a service with `kubectl expose`, you can export its template
    to the YAML file with the `kubectl get service nginx -o yaml > service.yaml` command
    and reuse the file for future changes that you might need to make.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`kubectl expose`创建服务时，可以使用`kubectl get service nginx -o yaml > service.yaml`命令将其模板导出到YAML文件，并将该文件用于可能需要进行的将来更改。
- en: 'To export the `nginx` service, run the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要导出`nginx`服务，请运行以下命令：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output for the preceding command is as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的输出如下所示：
- en: '![Figure 4.5 – Exporting the nginx service'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.5 - 导出nginx服务'
- en: '](image/B16411_04_005.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_04_005.jpg)'
- en: Figure 4.5 – Exporting the nginx service
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 - 导出nginx服务
- en: 'Copy its contents to a file, and there you should remove the following parts,
    which were generated by `kubectl` and aren''t needed there:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将其内容复制到一个文件中，然后您应该删除以下部分，这些部分是由`kubectl`生成的，不需要在那里：
- en: '`annotations`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`annotations`'
- en: '`creationTimestamp`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creationTimestamp`'
- en: '`resourceVersion:`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resourceVersion:`'
- en: '`selfLink`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selfLink`'
- en: '`uid`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uid`'
- en: '`Status`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`状态`'
- en: Important note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can also export a deployment's template to a YAML file using the `kubectl
    get deployment nginx -o yaml > deployment.yaml` command.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`kubectl get deployment nginx -o yaml > deployment.yaml`命令将部署的模板导出到YAML文件。
- en: Scaling up an application
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展应用程序
- en: In the previous section, we deployed an application with one replica; let's
    scale its deployment to two replicas.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们部署了一个副本的应用程序；让我们将其部署扩展到两个副本。
- en: 'The use case of running multiple replicas is to enable high availability for
    an application. To scale our deployment, run the following commands:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来扩展我们的部署：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: From the preceding output, we see can that the `$ kubectl get deployment nginx`
    command shows that the `nginx` deployment has two replicas. With `$ kubectl get
    pods`, we see two pods; one is just less than a minute old.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从前述输出中，我们可以看到`$ kubectl get deployment nginx`命令显示`nginx`部署有两个副本。通过`$ kubectl
    get pods`，我们看到两个pod；其中一个刚刚不到一分钟。
- en: That's a neat command to scale deployments and is handy for testing purposes.
    Let's try to scale the deployment using the `deployment.yaml` file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的命令来扩展部署，对于测试目的很方便。让我们尝试使用`deployment.yaml`文件来扩展部署。
- en: 'This time, let''s scale to three replicas but using the `deployment.yaml` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，让我们使用`deployment.yaml`文件来扩展到三个副本：
- en: 'Update `deployment.yaml` with three replicas:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用三个副本更新`deployment.yaml`：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the same command as before:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行与之前相同的命令：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Nice: we have updated the `nginx` deployment with three replicas from the `deployment.yaml`
    file.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 很好：我们已经从`deployment.yaml`文件中将`nginx`部署更新为三个副本。
- en: The service will distribute all incoming requests between the three pods in
    a round-robin manner.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务将以循环方式在三个pod之间分发所有传入的请求。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to create, deploy, and scale up applications
    with `kubectl`. The new skills we have learned in this chapter can now be used
    to deploy real-world applications.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学会了如何使用`kubectl`创建、部署和扩展应用程序。本章中学到的新技能现在可以用于部署真实世界的应用程序。
- en: In the next chapter, we going to learn how to do more advanced updates to deployed
    applications.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何对部署的应用程序进行更高级的更新。
