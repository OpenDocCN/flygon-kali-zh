["```java\n/*\n  Chapter 7 example\n  Project  - Blood-Meter\n\n  This sketch is written to accompany Project in the\n  JavaFX 8 essentials book\n\n  Parts required:\n  1 TMP36 temperature sensor\n  3 red LEDs\n  3 220 ohm resistors\n\n  Created 5 April 2015\n  by Mohamed Mahmoud Taman\n  */\n\n// named constant for the pin the sensor is connected to\nconst int sensorPin = A0;\n// Room temperature in Celsius\nconst float baselineTemp = 25.0;\n\nvoid setup() {\n  // open a serial connection to display values\n  Serial.begin(9600);\n  // set the LED pins as outputs\n  // the for() loop saves some extra coding\n  for (int pinNumber = 2; pinNumber < 5; pinNumber++) {\n    pinMode(pinNumber, OUTPUT);\n    digitalWrite(pinNumber, LOW);\n  }\n}\n\nvoid loop() {\n  // read the value on AnalogIn pin 0\n  // and store it in a variable\n  int sensorVal = analogRead(sensorPin);\n\n  // send the 10-bit sensor value out the serial port\n  Serial.print(\"Sensor Value: \");\n  Serial.print(sensorVal);\n\n  // convert the ADC reading to voltage\n  float voltage = (sensorVal / 1024.0) * 5.0;\n\n  // Send the voltage level out the Serial port\n  Serial.print(\", Volts: \");\n  Serial.print(voltage);\n\n  // convert the voltage to temperature in degrees C\n  // the sensor changes 10 mV per degree\n  // the datasheet says there's a 500 mV offset\n  // ((voltage - 500mV) times 100)\n  Serial.print(\", degrees C: \");\n  float temperature = (voltage - .5) * 100;\n  Serial.println(temperature);\n\n  // if the current temperature is lower than the baseline\n  // turn off all LEDs\n  if (temperature < baselineTemp) {\n    digitalWrite(2, LOW);\n    digitalWrite(3, LOW);\n    digitalWrite(4, LOW);\n  } // if the temperature rises 2-4 degrees, turn an LED on\n  else if (temperature >= baselineTemp + 2 && temperature < baselineTemp + 4) {\n    digitalWrite(2, HIGH);\n    digitalWrite(3, LOW);\n    digitalWrite(4, LOW);\n  } // if the temperature rises 4-6 degrees, turn a second LED on\n  else if (temperature >= baselineTemp + 4 && temperature < baselineTemp + 6) {\n    digitalWrite(2, HIGH);\n    digitalWrite(3, HIGH);\n    digitalWrite(4, LOW);\n  } // if the temperature rises more than 6 degrees, turn all LEDs on\n  else if (temperature >= baselineTemp + 6) {\n    digitalWrite(2, HIGH);\n    digitalWrite(3, HIGH);\n    digitalWrite(4, HIGH);\n  }\n  delay(100);\n}\n```", "```java\nvoltage = (sensorVal / 1024.0) * 5.0\n```", "```java\ntemperature = (voltage - .5) * 100\n```", "```java\nSensor Value: 158, Volts: 0.77, degrees C: 27.15\n```", "```java\nimport jssc.SerialPort;\nimport static jssc.SerialPort.*;\nimport jssc.SerialPortException;\nimport jssc.SerialPortList;\n```", "```java\nprivate static final List<String> USUAL_PORTS = Arrays.asList(\n  \"/dev/tty.usbmodem\", \"/dev/tty.usbserial\", //Mac OS X\n  \"/dev/usbdev\", \"/dev/ttyUSB\", \"/dev/ttyACM\", \"/dev/serial\", //Linux\n  \"COM3\", \"COM4\", \"COM5\", \"COM6\" //Windows\n);\n\nprivate final String ardPort;\n\npublic Serial() {\n      ardPort = \"\";\n}\n\npublic Serial(String port) {\n      ardPort = port;\n}\n```", "```java\npublic boolean connect() {\n  out.println(\"Serial port is openning now...\");\n  Arrays.asList(SerialPortList.getPortNames()).stream()\n  .filter(name -> ((!ardPort.isEmpty() && name.equals(ardPort))|| (ardPort.isEmpty() && USUAL_PORTS.stream()\n  .anyMatch(p -> name.startsWith(p)))))\n  .findFirst()\n  .ifPresent(name -> {\n  try {\n    serPort = new SerialPort(name);\n      out.println(\"Connecting to \" + serPort.getPortName());\n      if (serPort.openPort()) {\n        serPort.setParams(BAUDRATE_9600,\n        DATABITS_8,\n        STOPBITS_1,\n        PARITY_NONE);\n        serPort.setEventsMask(MASK_RXCHAR);\n        serPort.addEventListener(event -> {\n         if (event.isRXCHAR()) {\n           try {\n             sb.append(serPort.readString(event.getEventValue()));\n             String ch = sb.toString();\n             if (ch.endsWith(\"\\r\\n\")) {\n               line.set(ch.substring(0, ch.indexOf(\"\\r\\n\")));\n               sb = new StringBuilder();\n             }\n           } catch (SerialPortException e) {\n             out.println(\"SerialEvent error:\" + e.toString());\n           }\n         }\n       });\n     }\n  } catch (SerialPortException ex) {\n    out.println(\"ERROR: Port '\" + name + \"': \" + ex.toString());\n  }});\n  return serPort != null;\n}\n```", "```java\npublic void disconnect() {\n  if (serPort != null) {\n    try {\n      serPort.removeEventListener();\n      if (serPort.isOpened()) {\n        serPort.closePort();\n      }\n      } catch (SerialPortException ex) {\n      out.println(\"ERROR closing port exception: \" + ex.toString());\n    }\n    out.println(\"Disconnecting: comm port closed.\");\n  }\n}\n```", "```java\nprivate final Serial serial = new Serial();\nprivate ChangeListener<String> listener;\nprivate final BooleanProperty connection = new SimpleBooleanProperty(false);\nprivate final FloatProperty bloodTemp = new SimpleFloatProperty(0);\nprivate final FloatProperty volts = new SimpleFloatProperty(0);\nprivate final FloatProperty sensorVal = new SimpleFloatProperty(0);\n```", "```java\nprivate LineChart<Number, Number> createBloodChart() {\n  final NumberAxis xAxis = new NumberAxis();\n  xAxis.setLabel(\"Temperature Time\");\n  xAxis.setAutoRanging(true);\n  xAxis.setForceZeroInRange(false);\n  xAxis.setTickLabelFormatter(new StringConverter<Number>() {\n    @Override\n    public String toString(Number t) {\n      return new SimpleDateFormat(\"HH:mm:ss\").format(new Date(t.longValue()));\n    }\n    @Override\n    public Number fromString(String string) {\n      throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n  });\n  final NumberAxis yAxis = new NumberAxis(\"Temperature value\", baselineTemp - 10, 40.0, 10);\n  final LineChart<Number, Number> bc = new LineChart<>(xAxis, yAxis);\n  bc.setTitle(\"Blood temperature vs time\");\n  bc.setLegendVisible(false);\n\n  Series series = new Series();\n  series.getData().add(new Data(currentTimeMillis(), baselineTemp));\n  bc.getData().add(series);\n\n  listener = (ov, t, t1) -> {\n    runLater(() -> {\n      String[] values = t1.split(\",\");\n      if (values.length == 3) {\n        sensorVal.set(parseFloat(values[0].split(\":\")[1].trim()));\n        volts.set(parseFloat(values[1].split(\":\")[1].trim()));\n        bloodTemp.set(parseFloat(values[2].split(\":\")[1].trim()));\n        series.getData().add(new Data(currentTimeMillis(),\n        bloodTemp.getValue()));\n\n        if (series.getData().size() > 40) {\n          series.getData().remove(0);\n        }\n      }\n\n    });\n  };\n  serial.getLine().addListener(listener);\n\n  return bc;\n}\n```", "```java\nCircle IndicatorLevel1 = new Circle(26.0, Color.BLACK);\nbloodTemp.addListener((ol, ov, nv) -> {\n  tempLbl.setText(\"Degrees C: \".concat(nv.toString()));\n\n  // if the current temperature is lower than the baseline turn off all LEDs\n  if (nv.floatValue() < baselineTemp +2) {\n    IndictorLevel1.setFill(Paint.valueOf(\"Black\"));\n    IndictorLevel2.setFill(Paint.valueOf(\"Black\"));\n    IndictorLevel3.setFill(Paint.valueOf(\"Black\"));\n  } // if the temperature rises 1-3 degrees, turn an LED on\n  else if (nv.floatValue() >= baselineTemp + 1 && nv.floatValue()< baselineTemp + 3) {\n      IndictorLevel1.setFill(Paint.valueOf(\"RED\"));\n      IndictorLevel2.setFill(Paint.valueOf(\"Black\"));\n      IndictorLevel3.setFill(Paint.valueOf(\"Black\"));\n    } // if the temperature rises 3-5 degrees, turn a second LED on\n    else if (nv.floatValue() >= baselineTemp + 4 && nv.floatValue() < baselineTemp + 6) {\n      IndictorLevel1.setFill(Paint.valueOf(\"RED\"));\n      IndictorLevel2.setFill(Paint.valueOf(\"RED\"));\n      IndictorLevel3.setFill(Paint.valueOf(\"Black\"));\n    }//if the temperature rises more than 6 degrees, turn all LEDs on\n    else if (nv.floatValue() >= baselineTemp + 6 {\n    IndictorLevel1.setFill(Paint.valueOf(\"RED\"));\n    IndictorLevel2.setFill(Paint.valueOf(\"RED\"));\n    IndictorLevel3.setFill(Paint.valueOf(\"RED\"));\n  }\n});\n```", "```java\nScene scene = new Scene(loadMainUI(), 660, 510);\nstage.setTitle(\"Blood Meter v1.0\");\nstage.setScene(scene);\nstage.show();\n//Connect to Arduino port and start listening\nconnectArduino();\n```", "```java\n@Override\npublic void stop() {\n  System.out.println(\"Serial port is closing now...\");\n  serial.getLine().removeListener(listener);\n  if (connection.get()) {\n  serial.disconnect();\n  connection.set(false);\n}}\n```"]