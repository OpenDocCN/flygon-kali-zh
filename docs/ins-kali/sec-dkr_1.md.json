["```\n**$ docker run -d --cap-drop SETGID --cap-drop SETUID nginx**\n\n```", "```\n    **$ openssl genrsa -aes256 -out ca-key.pem 4096**\n    **Generating RSA private key, 4096 bit long modulus**\n    **......................................................................................................................................................................................................................++**\n    **....................................................................++**\n    **e is 65537 (0x10001)**\n    **Enter pass phrase for ca-key.pem:**\n    **Verifying - Enter pass phrase for ca-key.pem:**\n\n    ```", "```\n    **$ openssl req -new -x509 -days <number_of_days> -key ca-key.pem -sha256 -out ca.pem**\n    **Enter pass phrase for ca-key.pem:**\n    **You are about to be asked to enter information that will be incorporated**\n    **into your certificate request.**\n    **What you are about to enter is what is called a Distinguished Name or a DN.**\n    **There are quite a few fields but you can leave some blank**\n    **For some fields there will be a default value,**\n    **If you enter '.', the field will be left blank.**\n    **-----**\n    **Country Name (2 letter code) [AU]:US**\n    **State or Province Name (full name) [Some-State]:Pennsylvania**\n    **Locality Name (eg, city) []:**\n    **Organization Name (eg, company) [Internet Widgits Pty Ltd]:**\n    **Organizational Unit Name (eg, section) []:**\n    **Common Name (e.g. server FQDN or YOUR name) []:**\n    **Email Address []:**\n\n    ```", "```\n    **$ openssl genrsa -out key.pem 4096**\n    **$ openssl req -subj '/CN=<client_DNS_name>' -new -key key.pem -out client.csr**\n\n    ```", "```\n    **$ openssl x509 -req -days <number_of_days> -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.em**\n\n    ```", "```\n    **$ chmod -v 0400 ca-key.pem key.pem server-key.em**\n    **$ chmod -v 0444 ca.pem server-cert.pem cert.em**\n    ```", "```\n**$ docker daemon --tlsverify --tlscacert=ca.pem --tlscert=server-certificate.pem --tlskey=server-key.pem -H=0.0.0.0:2376**\n```", "```\n**$ docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=<$DOCKER_HOST>:2376 version**\n\n```", "```\n**$ curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine && \\**\n**$ chmod +x /usr/local/bin/docker-machine**\n\n```", "```\n**$ docker-machine create --driver virtualbox host1**\n\n**Running pre-create checks...**\n**Creating machine...**\n**Waiting for machine to be running, this may take a few minutes...**\n**Machine is running, waiting for SSH to be available...**\n**Detecting operating system of created instance...**\n**Provisioning created instance...**\n**Copying certs to the local machine directory...**\n**Copying certs to the remote machine...**\n\n**Setting Docker configuration on the remote daemon...**\n\n```", "```\n**$ docker-machine env host1**\n\n**export DOCKER_TLS_VERIFY=\"1\"**\n**export DOCKER_HOST=\"tcp://192.168.99.100:2376\"**\n**export DOCKER_CERT_PATH=\"/Users/scottpgallagher/.docker/machine/machines/host1\"**\n**export DOCKER_MACHINE_NAME=\"host1\"**\n**# Run this command to configure your shell:**\n**# eval \"$(docker-machine env host1)\"**\n\n```", "```\n **eval \"$(docker-machine env host1)\"**\n\n```", "```\n**export DOCKER_TLS_VERIFY=\"1\"**\n\n```", "```\n**export DOCKER_HOST=\"tcp://192.168.99.100:2376\"**\n\n```", "```\n**$ docker-machine ls**\n**NAME      ACTIVE   DRIVER       STATE     URL                         SWARM** \n**host1              *        virtualbox     Running   tcp://192.168.99.100:2376** \n\n```", "```\n**$ docker-machine --help**\n\n**Options:**\n **--debug, -D      Enable debug mode**\n **-s, --storage-path \"/Users/scottpgallagher/.docker/machine\"\nConfigures storage path [$MACHINE_STORAGE_PATH]**\n **--tls-ca-cert      CA to verify remotes against [$MACHINE_TLS_CA_CERT]**\n **--tls-ca-key      Private key to generate certificates [$MACHINE_TLS_CA_KEY]**\n **--tls-client-cert     Client cert to use for TLS [$MACHINE_TLS_CLIENT_CERT]**\n **--tls-client-key       Private key used in client TLS auth [$MACHINE_TLS_CLIENT_KEY]**\n **--github-api-token     Token to use for requests to the Github API [$MACHINE_GITHUB_API_TOKEN]**\n **--native-ssh      Use the native (Go-based) SSH implementation. [$MACHINE_NATIVE_SSH]**\n **--help, -h      show help**\n **--version, -v      print the version**\n\n```", "```\n**$ docker-machine regenerate-certs host1** \n\n**Regenerate TLS machine certs?  Warning: this is irreversible. (y/n): y**\n**Regenerating TLS certificates**\n**Copying certs to the local machine directory...**\n**Copying certs to the remote machine...**\n**Setting Docker configuration on the remote daemon...**\n\n```"]