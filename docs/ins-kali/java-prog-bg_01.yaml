- en: Getting Started with Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Java
- en: Whether this is your first foray into high-level object-oriented programming
    languages, such as Java, or if you've been programming for some time and you're
    just looking to add Java to your repertoire, or even if you've never touched a
    line of code in your life, this book is designed to accommodate you. We're going
    to move quickly, and we're not going to shy away from heavy subjects; however,
    we're going to begin this book from the very ground up and learn about the concepts
    behind object-oriented programming as we go.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无论这是你第一次涉足高级面向对象的编程语言，比如Java，还是你已经编程了一段时间，只是想要把Java加入你的技能库，甚至你一生中从未接触过一行代码，这本书都是为你设计的。我们将快速前进，不会回避繁重的主题；然而，我们将从最基础的知识开始，随着学习面向对象编程的概念。
- en: In this chapter, we'll understand what Java is and also look at its features.
    We'll then follow a step-by-step process to set up a development environment to
    enable us to write and execute Java programs. Once we accomplish this, we'll write
    our very first Java program and run it. Lastly, we'll look at what to do when
    we get an error.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解Java是什么，以及它的特性。然后，我们将按步骤设置开发环境，使我们能够编写和执行Java程序。一旦我们完成这一步，我们将编写我们的第一个Java程序并运行它。最后，我们将看看当我们遇到错误时该怎么办。
- en: 'Specifically, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将涵盖以下主题：
- en: What is Java
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Java
- en: Features and applications of Java
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java的特性和应用
- en: Installing JDK
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装JDK
- en: Installing the NetBeans IDE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装NetBeans IDE
- en: Writing `HelloWorld.java`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写`HelloWorld.java`
- en: NetBeans' error detection capabilities
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBeans的错误检测能力
- en: What is Java?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Java？
- en: Java was developed by Sun Microsystems in 1995, but it has stood the test of
    time and remains highly relevant and widely used to this day. So what exactly
    is Java? Java is a high-level, general-purpose object-oriented programming language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java是由Sun Microsystems于1995年开发的，但它经受住了时间的考验，至今仍然非常相关和广泛使用。那么Java究竟是什么？Java是一种高级的、通用的面向对象的编程语言。
- en: Features of Java
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java的特性
- en: 'The following are Java''s main features:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Java的主要特性：
- en: '**High level and general purpose**: Rather than being created to accomplish
    one very specific task, Java allows us to write computer-readable instructions
    in an open-ended environment. Because it''s not really feasible, or even desirable,
    for every computer system to have its own specialized programming language, the
    vast majority of the code is written in high-level, general-purpose languages
    such as Java.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级和通用**：Java不是为了完成一个非常特定的任务而创建的，而是允许我们在一个开放的环境中编写计算机可读的指令。因为每台计算机系统都有自己专门的编程语言并不现实，甚至不可取，所以绝大多数代码都是用高级通用语言编写的，比如Java。'
- en: '**Object-oriented**: Java is also what we call an object-oriented language.
    While we won''t get into the specifics of objects and classes until a bit later
    in this book, know for now that objects allow us to define modular entities within
    our program that make them much more human-readable and much more manageable to
    create large-scale software projects. A firm grasp of object-oriented concepts
    is absolutely essential for any modern software developer.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象**：Java也是我们所说的面向对象的语言。虽然我们在本书的后面才会深入讨论对象和类的具体内容，但现在知道对象允许我们在程序中定义模块化实体，使它们更易于阅读和更易于创建大规模的软件项目。对面向对象概念的牢固掌握对于任何现代软件开发人员来说绝对是必不可少的。'
- en: '**Platform-independent**: Lastly, Java was designed with the intention that
    it be a write once, run anywhere language. This means if you and I both have systems
    with Java installed and even if our systems are not normally identical--for example,
    I''m on a Windows machine and you''re on a Mac--a Java program on my machine that
    I give to you will still run essentially the same on your machine without the
    need for it to be recompiled.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台无关**：最后，Java的设计初衷是成为一种一次编写，随处运行的语言。这意味着如果你和我都有安装了Java的系统，即使我们的系统通常不相同--例如，我用的是Windows系统，你用的是Mac--我在我的机器上运行的Java程序，我给你，也会在你的机器上基本上相同地运行，而无需重新编译。'
- en: '![](img/4da86a3a-9c84-462b-9f69-54ba5f0be5d6.png)**Compiling** a programming
    language such as Java is the act of taking the human-readable code that we''ve
    written and converting it into an interpreted machine-friendly code. Unfortunately,
    it''s usually not very friendly for humans to read or write. To do this, we use
    a program called the compiler that takes in our code as text and converts it into
    machine code.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/4da86a3a-9c84-462b-9f69-54ba5f0be5d6.png)**编译**Java等编程语言是将我们编写的人类可读代码转换为解释的机器友好代码的行为。不幸的是，这通常对人类来说并不友好。为了做到这一点，我们使用一个称为编译器的程序，它接收我们的代码作为文本，并将其转换为机器代码。'
- en: Traditionally, we would have to recompile a program for every system that it
    was going to run on because all systems have a different idea of what their machine
    code should look like. Java circumvents this issue by compiling all Java programs
    to the same type of interpreted code called bytecode.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，我们必须为每个要运行的系统重新编译程序，因为所有系统对其机器代码的理解都不同。Java通过将所有Java程序编译为一种称为字节码的相同类型的解释代码来避免这个问题。
- en: A compiled Java program in bytecode can be run by any system in which Java is
    installed. This is because when we install Java on your system, we also install
    a Java virtual machine with it that's specific to that system. It is this machine's
    responsibility to convert the bytecode into the final instructions that head to
    the processor in that system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 字节码中的编译Java程序可以在安装了Java的任何系统上运行。这是因为当我们在您的系统上安装Java时，我们还会安装一个特定于该系统的Java虚拟机。这台机器的责任是将字节码转换为最终发送到该系统处理器的指令。
- en: By making it the system's responsibility to do this final conversion, Java has
    created a write once, run anywhere language where I can hand you a Java program
    and you can run it on your machine while being fairly certain that it's going
    to run in the same manner that it did on mine. This impressive level of cross-platform
    support on a language as powerful as Java has made it one of the software developing
    world's go-to tools for quite some time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使系统负责进行最终转换，Java创造了一种一次编写，随处运行的语言，我可以把一个Java程序交给你，你可以在你的计算机上运行它，而且相当肯定它会以与我的计算机上相同的方式运行。这种强大的跨平台支持水平使得Java成为软件开发世界的主要工具之一。
- en: Java applications
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java应用程序
- en: In today's modern times, Java is used to develop desktop applications, web servers,
    and client-side web applications. It's the native language of the Android operating
    system, which operates on Android phones and tablets.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的现代时代，Java被用于开发桌面应用程序、Web服务器和客户端Web应用程序。它是Android操作系统的本地语言，可以在Android手机和平板电脑上运行。
- en: Java has been used to write video games and is sometimes even ported to smaller
    devices without a traditional operating system. It remains a huge player in today's
    technical world, and I'm looking forward to learning it with you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Java已被用于编写视频游戏，有时甚至被移植到没有传统操作系统的较小设备上。它仍然是当今技术世界中的一个重要角色，我期待与您一起学习它。
- en: Setting up your development environment
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: In this section, we're going to write our first Java program, but before we
    start coding away, we need to set up an environment that is Java-development friendly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写我们的第一个Java程序，但在我们开始编码之前，我们需要设置一个友好的Java开发环境。
- en: Installing JDK
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装JDK
- en: To start off this process, let's download a **Java Development Kit** (**JDK**)
    or a Java SDK. This kit contains libraries and executables that allow us to do
    lots of different things with Java code. Most importantly, with our SDK installed,
    we'll be able to compile Java code and then run completed Java programs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个过程，让我们下载一个**Java开发工具包**（**JDK**）或Java SDK。这个工具包包含允许我们用Java代码做很多不同事情的库和可执行文件。最重要的是，安装了我们的SDK后，我们将能够编译Java代码，然后运行已完成的Java程序。
- en: You may already have Java installed on your machine; however, unless you've
    done this explicitly, you probably haven't installed a Java SDK. The version of
    Java an average user has installed on their machine is called the **Java Runtime
    Environment** (**JRE**). This allows the execution of Java programs, and Java
    programs won't run on environments without the JRE installed. But the JRE doesn't
    contain any real development tools, which we're going to need. The good news is
    that a Java JRE and a Java SDK can exist harmoniously. A Java JRE is really just
    a subset of the SDK, so if we only have the Java Development Kit installed, which
    we're about to download, we're going to be fine.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经在您的计算机上安装了Java；但是，除非您明确地这样做，您可能还没有安装Java SDK。普通用户在其计算机上安装的Java版本称为**Java运行环境**（**JRE**）。这允许执行Java程序，并且没有安装JRE的环境中无法运行Java程序。但是JRE不包含任何真正的开发工具，而这是我们需要的。好消息是Java
    JRE和Java SDK可以和谐共存。Java JRE实际上只是SDK的一个子集，因此如果我们只安装了即将下载的Java开发工具包，我们就没问题了。
- en: 'If you have downloaded the Java Development Kit in the past, when you actually
    go to install this kit, Java will let you know that it''s already installed and
    you can skip that portion of the section. For everyone else, check out how to
    download a development kit:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前已经下载了Java开发工具包，当您实际安装这个工具包时，Java会让您知道它已经安装了，您可以跳过本节的这部分。对于其他人，请查看如何下载开发工具包：
- en: To begin with, navigate to [www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html) through
    your browser.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过浏览器导航到[www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)。
- en: 'We''re going to be using the Java SE, or Standard Edition, Development Kit
    maintained by Oracle. To acquire this kit, simply go to the Downloads tab, and
    express that we would like the JDK by selecting that option:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用由Oracle维护的Java SE或标准版开发工具包。要获取此工具包，只需转到“下载”选项卡，并选择我们想要JDK：
- en: '![](img/72641905-2850-4214-8f5c-c067985f5cad.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72641905-2850-4214-8f5c-c067985f5cad.jpg)'
- en: 'Scroll down, check out the license agreement, accept the license agreement,
    and then download the version of the SDK that''s appropriate for your operating
    system. For me, that''s `jdk-8u144-windows-x64.exe`, listed at the end:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动，查看许可协议，接受许可协议，然后下载适合您操作系统的SDK版本。对我来说，这是`jdk-8u144-windows-x64.exe`，列在最后。
- en: '![](img/4b7ef3dc-c4d3-40e9-8d33-e9c2fe8f5f9f.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b7ef3dc-c4d3-40e9-8d33-e9c2fe8f5f9f.jpg)'
- en: Once your download is complete, install it as we would any other program. Choose
    the default options when appropriate and make sure to take note of the directory
    to which we will install our development kit.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的下载完成，安装它就像我们安装其他程序一样。在适当的时候选择默认选项，并确保记下我们将安装开发工具包的目录。
- en: Installing the NetBeans IDE
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装NetBeans IDE
- en: With our Java Development Kit installed, we technically have all the tools we
    need to start writing Java programs. However, we'd have to compile them through
    a command line, which can look a little different on different operating systems.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了我们的Java开发工具包，我们从技术上讲已经拥有了开始编写Java程序所需的所有工具。但是，我们必须通过命令行来编译它们，这在不同的操作系统上可能看起来有些不同。
- en: So to keep everything simple, let's start learning Java by writing our Java
    code in an **Integrated Development Environment** (**IDE**). This is a software
    program of its own that helps us write, compile, and run Java programs. We're
    going to use the NetBeans IDE, which is awesome because it is free, open source,
    and it's going to operate just about the same on Windows, Mac, and Linux environments.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一切简单，让我们通过在**集成开发环境**（**IDE**）中编写Java代码来开始学习Java。这是一个独立的软件程序，可以帮助我们编写、编译和运行Java程序。我们将使用NetBeans
    IDE，这很棒，因为它是免费的、开源的，并且在Windows、Mac和Linux环境中运行几乎相同。
- en: To acquire this IDE, head to [netbeans.org/downloads/](http://netbeans.org/downloads/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取这个IDE，前往[netbeans.org/downloads/](http://netbeans.org/downloads/)。
- en: 'You''ll see the following page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下页面：
- en: '![](img/1810e6d5-c115-480a-8191-325b52efb867.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1810e6d5-c115-480a-8191-325b52efb867.jpg)'
- en: 'Because we''ve downloaded the Java Standard Edition Development Kit, Java SE
    is the version of NetBeans that we''re going to download here. Choose the Download
    button below the Java SE column. NetBeans should start our download automatically,
    but if it doesn''t, click on the link shown in the following image:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经下载了Java标准版开发工具包，所以这里我们要下载的是NetBeans的Java SE版本。选择“Java SE”列下面的下载按钮。NetBeans应该会自动开始下载，但如果没有，点击以下图片中显示的链接：
- en: '![](img/2d7ea03e-84fe-4f11-8b41-986c231e2cbd.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d7ea03e-84fe-4f11-8b41-986c231e2cbd.jpg)'
- en: Once again, we're going to install NetBeans as we would any other program, choosing
    the default options when appropriate. Most likely, NetBeans will locate the Java
    Development Kit on our machine. If it doesn't, it will prompt us for the directory
    in which we installed the Java Development Kit.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将像安装任何其他程序一样安装NetBeans，在适当的时候选择默认选项。很可能，NetBeans会在我们的计算机上找到Java开发工具包。如果没有，它会提示我们安装Java开发工具包的目录。
- en: Writing our first Java program
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的第一个Java程序
- en: Hopefully, you have gotten NetBeans installed and have booted it up without
    any hassle. NetBeans will manage the file structure of our programs, but first,
    we need to tell NetBeans that we're ready to begin a new project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您已经安装了NetBeans，并且没有遇到任何麻烦就启动了它。NetBeans会管理我们程序的文件结构，但首先，我们需要告诉NetBeans我们准备开始一个新项目。
- en: Creating a new project
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: 'To create a new project, click on File, then New Project, and choose Java Application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新项目，点击“文件”，然后“新建项目”，选择Java应用程序：
- en: '![](img/39f2a966-b160-4b48-9cd9-6d2d2672f297.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39f2a966-b160-4b48-9cd9-6d2d2672f297.jpg)'
- en: 'We''re going to need to give our project a distinctive name; let''s call this
    one `HelloWorld`. Then, we can choose a location to put the file. Because this
    is our very first Java program, we should probably start from as close to scratch
    as possible. So let''s uncheck the Create Main Class option so that NetBeans would
    give us pretty much a blank project. Then, click on Finish:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要给我们的项目一个独特的名称；让我们称这个为`HelloWorld`。然后，我们可以选择一个放置文件的位置。因为这是我们的第一个Java程序，我们可能应该尽可能地从零开始。所以让我们取消选中“创建主类”选项，这样NetBeans会给我们一个几乎是空白的项目。然后，点击“完成”：
- en: '![](img/9f5fb921-1f16-4012-8079-519cd2cdc128.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f5fb921-1f16-4012-8079-519cd2cdc128.jpg)'
- en: 'NetBeans will set up a filesystem for us. We can navigate this filesystem just
    like we were in a standard filesystem explorer:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans会为我们设置一个文件系统。我们可以像在标准文件系统资源管理器中一样浏览这个文件系统：
- en: '![](img/f73dd9ca-ed52-47db-8947-e074a386c7b9.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f73dd9ca-ed52-47db-8947-e074a386c7b9.jpg)'
- en: 'The `Source Packages` file is where we''ll be writing our code. You''ll notice
    under the `Libraries` file that the JDK is linked, allowing us to access all of
    its many library resources:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Source Packages`文件是我们将编写代码的地方。您会注意到在`Libraries`文件下，JDK是链接的，允许我们访问其许多库资源：'
- en: '![](img/99635cb8-9ab8-4159-a9ec-52005733d693.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99635cb8-9ab8-4159-a9ec-52005733d693.jpg)'
- en: Creating a Java class
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Java类
- en: 'Once we have created a new project, we should see the Projects, Files, and
    Services tabs like I have in the following image. Let''s look at the Files tab.
    Whereas the Projects tab is a bit of an abstraction, the Files tab shows us what''s
    actually contained within the filesystem where our `HelloWorld` project lives:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新项目后，我们应该看到我在下面的图片中看到的项目、文件和服务选项卡。让我们看看文件选项卡。虽然项目选项卡有点抽象，但文件选项卡显示了我们的`HelloWorld`项目所在的文件系统中实际包含的内容：
- en: '![](img/68a454d5-2af1-4a14-a35b-6e267abb65d9.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68a454d5-2af1-4a14-a35b-6e267abb65d9.jpg)'
- en: 'Most importantly, you''ll see that the `src` file here has no files in it.
    That''s because there''s no source code associated with our project, so right
    now it won''t do anything. To remedy this, right-click on `src`, choose New, and
    then Java Class...:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，这里的`src`文件没有任何文件。这是因为我们的项目没有与之关联的源代码，所以现在它不会做任何事情。为了解决这个问题，右键单击`src`，选择“新建”，然后选择“Java类...”：
- en: '![](img/67f5a9bf-42b3-4967-b24d-67c2bf2305cc.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67f5a9bf-42b3-4967-b24d-67c2bf2305cc.jpg)'
- en: 'We''re going to name our Java Class `HelloWorld`, just like the name of the
    project because it is our main class where the program should be entered and start
    from. Everything else is going to work just fine here for now, so click on Finish
    and NetBeans will create `HelloWorld.java` for us. A `.java` file is essentially
    a text file, but it should only contain Java code and comments:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的Java类命名为`HelloWorld`，就像项目的名称一样，因为这是我们的主类，程序应该从这里输入和开始。其他的东西现在都应该正常工作，所以点击“完成”，NetBeans会为我们创建`HelloWorld.java`。一个`.java`文件本质上是一个文本文件，但它应该只包含Java代码和注释：
- en: '![](img/3f9dbcfe-e415-461c-a52c-40f2a7b49f74.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f9dbcfe-e415-461c-a52c-40f2a7b49f74.jpg)'
- en: Writing the code
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写代码
- en: 'When we told NetBeans to make the `HelloWorld.java` file, it took some liberties
    and added some code for us already as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们告诉NetBeans创建`HelloWorld.java`文件时，它已经为我们添加了一些代码，如下面的截图所示：
- en: '![](img/ac8bbad7-0e17-4d8f-b7d2-83c63b7b8da6.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac8bbad7-0e17-4d8f-b7d2-83c63b7b8da6.jpg)'
- en: Java comments
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java注释
- en: You'll notice that some of the contents of this document are completely human-readable;
    these are what we call comments. Any text that appears in a Java file between
    the `/*` and `*/` symbols will be completely ignored by the compiler. We can write
    whatever we would like in here and it will not affect how our program would operate.
    For now, let's just delete these comments so that we can deal purely with our
    Java code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这个文档的一些内容是完全可读的；这些就是我们所谓的注释。在Java文件中出现在`/*`和`*/`符号之间的任何文本都将被编译器完全忽略。我们可以在这里写任何我们想要的东西，它不会影响我们的程序如何运行。现在，让我们删除这些注释，这样我们就可以纯粹地处理我们的Java代码。
- en: The main() function
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: main()函数
- en: 'Java code, like the English language, is read top down and left to right. Even
    if our project contains many files and many classes, we still need to start reading
    and executing our code at a specific point. We named this file and class `HelloWorld`,
    the same name as our project, because we would like it to be special and contain
    the `public static void main(String[] args)` method where the execution of our
    code will begin. That''s quite a mouthful of jargon. For now, just type it out
    and know that this is the area of our code from where our Java program will begin
    reading and executing. Once again, this will become much clearer as we begin to
    learn Java; just know this is the starting point of our Java program. The `main()`
    function''s code is enclosed in curly brackets:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Java代码，就像英语一样，是从上到下，从左到右阅读的。即使我们的项目包含许多文件和许多类，我们仍然需要从特定点开始阅读和执行我们的代码。我们将这个文件和类命名为`HelloWorld`，与我们的项目同名，因为我们希望它是特殊的，并包含`public
    static void main(String[] args)`方法，我们的代码执行将从这里开始。这是一个很啰嗦的行话。现在，只需将其输入并知道这是我们的Java程序开始阅读和执行的地方。`main()`函数的代码用大括号括起来：
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One of the great things about working in an IDE is that it will highlight which
    brackets correspond to each other. The brackets allow us to place code within
    other areas of code. For example, our `main()` method is contained within the
    `HelloWorld` class, and the Java code which we're about to write and execute is
    going to be contained in our `main()` method. Line 4, which currently contains
    nothing, is where our program will look to start reading and executing the Java
    code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDE中工作的一个很棒的地方是它会突出显示哪些括号相互对应。括号允许我们将代码放在其他代码区域中。例如，我们的`main()`方法包含在`HelloWorld`类中，我们即将编写和执行的Java代码将包含在我们的`main()`方法中。目前什么都没有的第4行是我们的程序将开始阅读和执行Java代码的地方。
- en: Printing a string
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印字符串
- en: Our goal with this `HelloWorld` program is pretty modest. When it runs, we'd
    like it to print some text to this output box at the bottom of our screen.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`HelloWorld`程序的目标相当温和。当它运行时，我们希望它将一些文本打印到屏幕底部的输出框中。
- en: 'When we downloaded the Java SDK, we acquired a library of useful functions,
    one of which will do just this. This is the `println()`, or print line, function.
    When our Java code executes over this function, which it will do right away because
    it''s the first function in our `main()` method''s entry point, the Java code
    will print some words to our output box. Function names are followed by open and
    close parentheses. Inside these parentheses, we put information that the functions
    need to complete their task. The `println()` method, of course, needs to know
    what we would like it to print. In Java, a line of text is contained by two double
    quotation marks and we call it a **string**. Let''s have our program print `"Hello
    World!"`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们下载了Java SDK时，我们获得了一个有用函数库，其中一个函数将做到这一点。这就是`println()`，或者打印行，函数。当我们的Java代码执行这个函数时，它会立即执行，因为它是我们`main()`方法入口点中的第一个函数，Java代码将向我们的输出框打印一些文字。函数名后面跟着开括号和闭括号。在这些括号内，我们放置函数完成任务所需的信息。`println()`方法当然需要知道我们想要它打印什么。在Java中，一行文本由两个双引号括起来，我们称之为**字符串**。让我们让我们的程序打印`"Hello
    World!"`：
- en: '![](img/589ef021-05ae-461e-b617-32e2b7195fd3.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/589ef021-05ae-461e-b617-32e2b7195fd3.jpg)'
- en: Java syntax
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java语法
- en: You might have noticed that NetBeans has been yelling at us for a little bit.
    There's a light bulb and a red dot on the left and some red jittering under our
    text, a lot like if we had made a spelling error in some text editors. And that's
    really what we've done. We've made a syntax mistake. There's something clearly
    wrong with our Java code and NetBeans knows it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到NetBeans一直在对我们大声呼喊。左边有一个灯泡和一个红点，文本下面有一些红色的抖动，很像在一些文本编辑器中出现拼写错误。这确实是我们所做的。我们犯了一个语法错误。我们的Java代码显然有问题，NetBeans知道这一点。
- en: 'There are two things wrong here. The first is that our code doesn''t end with
    a semicolon. Java doesn''t do a good job of reading spaces and carriage returns,
    so we need to put semicolons at the end of every functional line of code for the
    same reason that a Morse code operator would send the message "stop" at the end
    of every line. Let''s add a semicolon at the end of our `println()` statement:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个问题。首先是我们的代码没有以分号结束。Java不能很好地读取空格和换行，所以我们需要在每行功能代码的末尾加上分号，原因与摩尔斯电码操作员在每行末尾发送消息“停止”是一样的。让我们在我们的`println()`语句的末尾添加一个分号：
- en: '![](img/da46f0cd-a6e7-464f-9435-7e91e687b862.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da46f0cd-a6e7-464f-9435-7e91e687b862.jpg)'
- en: NetBeans has become a little more satisfied; the jittering has decreased, but
    there's still something wrong as shown in the preceding screenshot.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans变得更加满意了；抖动减少了，但如前面的截图所示，仍然有些问题。
- en: The issue is that functions in a programming language, just like files on a
    computer, have a location where they exist. NetBeans isn't sure where to find
    the `println()` function that we've attempted to use. So we simply need to tell
    NetBeans where this function exists. The full path to the `println()` function
    starts from the `System` package, which includes the `out` class, which has the
    definition of the `println()` function. We write that in Java as `System.out.println("Hello
    World!");` as shown in the following code block.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于编程语言中的函数，就像计算机上的文件一样，有一个存在的位置。NetBeans不确定在哪里找到我们尝试使用的`println()`函数。所以我们只需要告诉NetBeans这个函数存在的位置。`println()`函数的完整路径始于`System`包，其中包括`out`类，该类定义了`println()`函数。我们在Java中写成`System.out.println("Hello
    World!");`，如下面的代码块所示。
- en: 'Let''s get rid of the extra spaces I created at lines 5, 6, and 7, not because
    they would affect the way our program runs, but because it doesn''t make it look
    quite as nice. Now we''ve written our `HelloWorld` program:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去掉我在第5、6和7行创建的额外空格，不是因为它们会影响我们程序的运行方式，而是因为这样看起来不够好看。现在我们已经写好了我们的“HelloWorld”程序：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Executing our program
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行我们的程序
- en: 'So what do we do with this? Well, as we know, our computer can''t read this
    Java code directly. It must convert it into a computer-readable language. So executing
    this code becomes a two-step process:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们该怎么办呢？正如我们所知，我们的计算机无法直接阅读这段Java代码。它必须将其转换为计算机可读的语言。因此，执行这段代码变成了一个两步过程：
- en: '**Compiling our program**: First, we''re going to ask NetBeans to build our
    project. This means that all of the code within our project will be compiled and
    converted into computer-readable code in a, essentially, computer-readable project:![](img/6929328e-d378-484b-9a23-cbdc8ac4acdd.jpg)'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编译我们的程序**：首先，我们要求NetBeans构建我们的项目。这意味着项目中的所有代码将被编译并转换为计算机可读的代码，基本上是一个计算机可读的项目！[](img/6929328e-d378-484b-9a23-cbdc8ac4acdd.jpg)'
- en: 'When we press the Build Project button, we''ll see a bunch of text in our output
    box at the bottom of the screen--hopefully the nice `BUILD SUCCESSFUL` message,
    followed by the time it took to build the project:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按下“构建项目”按钮时，屏幕底部的输出框中会显示一大堆文本--希望是友好的“构建成功”消息，然后是构建项目所花费的时间：
- en: '![](img/75e076ab-f22a-4773-b8bc-041ac99bb5d5.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75e076ab-f22a-4773-b8bc-041ac99bb5d5.jpg)'
- en: '**Running our program**: Once we''ve built our project, we can press the Run Project
    button to execute our code and our `println` statement:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行我们的程序**：一旦我们构建了我们的项目，我们可以按下“运行项目”按钮来执行我们的代码和我们的`println`语句：'
- en: '![](img/f8283a03-07e0-458e-ae8a-bcd5237204a0.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8283a03-07e0-458e-ae8a-bcd5237204a0.jpg)'
- en: 'NetBeans will then give us the following pop-up box:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后NetBeans会给我们以下弹出框：
- en: '![](img/1af1eb0b-246e-4bf6-8af2-ee056cea0708.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1af1eb0b-246e-4bf6-8af2-ee056cea0708.jpg)'
- en: 'When we execute a program outside of an IDE, we execute it by launching one
    of its executable files. Because we''re in an integrated development environment
    right now, NetBeans wants to be sure which of our files we would like to be the
    entry point of our program. We only have one option here because we''ve only written
    one Java class. So let''s confirm to NetBeans that `HelloWorld` is our main class
    and the `main()` function in the `HelloWorld` program will, therefore, be where
    we start executing our Java program. Then, when we hit OK, our output box will
    tell us the program has begun to run and our program then prints `"Hello World!"`
    to the output box as we intended:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在IDE之外执行程序时，我们通过启动其中一个可执行文件来执行它。因为我们现在处于集成开发环境中，NetBeans想要确定我们希望将我们的哪个文件作为程序的入口点。我们只有一个选择，因为我们只写了一个Java类。所以让我们向NetBeans确认`HelloWorld`是我们的主类，因此`HelloWorld`程序中的`main()`函数将是我们开始执行Java程序的地方。然后，当我们点击“确定”时，输出框将告诉我们程序已经开始运行，然后我们的程序会像我们预期的那样在输出框中打印“Hello
    World!”：
- en: '![](img/ca119785-2546-49c2-b977-285243c36e64.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca119785-2546-49c2-b977-285243c36e64.jpg)'
- en: There we have it! Now we're Java programmers. Of course, there's more than a
    little bit left to learn. In fact, `HelloWorld` in Java is probably the simplest
    program you'll ever write. Java is extremely powerful, and the reality is we simply
    can't hope to appreciate all of its intricacies while writing our first program.
    The really good news is that from this point on, we need to take far fewer leaps
    of faith and we can begin to build a very solid understanding of Java by taking
    a step-by-step approach.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在我们是Java程序员了。当然，还有很多要学习的。事实上，Java中的`HelloWorld`可能是你写过的最简单的程序。Java非常强大，事实上我们在写第一个程序时根本无法希望理解它的所有复杂性。真正的好消息是，从这一点开始，我们需要更少的信仰飞跃，我们可以开始逐步建立对Java的非常扎实的理解。
- en: How to interpret errors detected by NetBeans?
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何解释NetBeans检测到的错误？
- en: As we write more and more complicated Java programs, we're inevitably going
    to make some mistakes. Some of these mistakes will be significant logic errors
    or misunderstandings on our part that we might have to further educate ourselves
    before we can solve them. But, especially while we're starting our programming,
    we're going to make a lot of small silly errors that are really easy to fix as
    long as we know where to look.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们编写越来越复杂的Java程序，我们不可避免地会犯一些错误。其中一些错误将是重大的逻辑错误或者是我们的误解，我们可能需要进一步教育自己才能解决。但是，特别是在开始编程时，我们会犯很多小错误，只要我们知道在哪里找，这些错误就非常容易修复。
- en: 'Fortunately, Java compilers are designed to point errors out to us when they
    come across them. To see this in action, let''s simply make our `HelloWorld` program
    incorrect by removing the semicolon from the end of the `println` statement:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Java编译器设计成在遇到错误时向我们指出错误。为了看到这一点，让我们简单地使我们的`HelloWorld`程序不正确，方法是删除`println`语句末尾的分号：
- en: '![](img/210c5d27-c106-4e69-8461-037b5c2e75bf.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/210c5d27-c106-4e69-8461-037b5c2e75bf.jpg)'
- en: 'Now NetBeans red-jitters the line to let us know that it''s pretty sure something''s
    wrong, but we can ask our compiler to take a shot at it anyway. If we attempt
    to build this project, we don''t get the `COMPILATION SUCCESSFUL` message we otherwise
    would; instead, we get an error message:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在NetBeans会在错误的行上显示红色波浪线，以让我们知道它相当确定有些地方出错了，但是我们仍然可以让编译器试一试。如果我们尝试构建这个项目，我们将不会得到通常的`编译成功`消息；相反，我们会得到一个错误消息：
- en: '![](img/1e72afb6-0747-4961-98aa-e65fa60a5331.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e72afb6-0747-4961-98aa-e65fa60a5331.jpg)'
- en: 'This error is `'';'' expected`, which is a pretty handy and self-explanatory
    error message. Of equal importance is the number after the colon in this message,
    which is `4`. This lets us know on what line the compiler came across this error.
    In NetBeans, if we click on an error message, the IDE will highlight that line
    of code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误是“需要';'”，这是一个非常方便和自解释的错误消息。同样重要的是这条消息后面的数字，是`4`。这让我们知道编译器在哪一行遇到了这个错误。在NetBeans中，如果我们点击错误消息，IDE将会突出显示该行代码：
- en: '![](img/5a8fc862-a551-4847-983a-90a65d88b83c.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a8fc862-a551-4847-983a-90a65d88b83c.jpg)'
- en: 'If we add in our semicolon, then our program builds successfully as shown in
    the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们加入分号，那么我们的程序将成功构建，如下面的屏幕截图所示：
- en: '![](img/89567df5-38cb-4314-8211-1e6a39f3f43d.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89567df5-38cb-4314-8211-1e6a39f3f43d.jpg)'
- en: That's all there is to it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部内容。
- en: 'Of course, not all error messages are quite that self-explanatory. For the
    sake of argument, let''s create a slightly more complicated error. What would
    have happened if we had forgotten to insert one of our parentheses in this program?
    This is illustrated in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，并非所有的错误消息都是那么自解释的。举例来说，让我们创建一个稍微复杂一点的错误。如果在这个程序中我们忘记插入一个括号会发生什么？这在下面的代码中有所说明：
- en: '![](img/a3bd9e05-c334-4845-afa8-8438493525f9.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3bd9e05-c334-4845-afa8-8438493525f9.jpg)'
- en: 'When we press Build Project, we get not one but two errors, even though we
    really only made one mistake:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按下构建项目时，我们得到了两个错误，尽管我们只犯了一个错误：
- en: '![](img/c037519d-e9ed-40c4-a4a3-c3e6b4ba7974.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c037519d-e9ed-40c4-a4a3-c3e6b4ba7974.jpg)'
- en: Our first error is `not a statement`, then it lets us know the line that it
    doesn't understand. If we look at the first error for a little bit, we'll probably
    notice that we're missing a pair of parentheses, so we will be able to fix this
    error; however, what about the second error? We got `';' expected` again even
    though in this case we really do have a semicolon.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个错误是`not a statement`，然后它告诉我们它不理解的那一行。如果我们仔细看一下第一个错误，我们可能会注意到我们缺少一对括号，所以我们将能够修复这个错误；但是，第二个错误呢？我们再次得到了`';'
    expected`，尽管在这种情况下我们确实有一个分号。
- en: Well, once one error has occurred in the program, the compiler's ability to
    understand the lines of the code gets shattered very quickly. When we're debugging
    our code, the general rule of thumb is to address only the top error on our list;
    that's the first error that the compiler came across in our code. We might be
    able to glean some helpful information from errors further down, but more often
    than not, they're simply going to be errors generated by the first syntax mistake
    we made. Nothing too mind-blowing here, but I wanted to point this out to you
    because being able to track compiler errors can save us a lot of headaches while
    we're learning to program.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，一旦程序中发生了一个错误，编译器理解代码行的能力就会很快破裂。当我们调试我们的代码时，一个基本的经验法则是只处理列表中的顶部错误；那是编译器在我们的代码中遇到的第一个错误。我们可能能够从下面更多的错误中获得一些有用的信息，但更多的情况是，它们只是由我们第一个语法错误生成的错误。这里没有什么太惊人的，但我想向你指出这一点，因为能够追踪编译器错误可以在我们学习编程时节省我们很多麻烦。
- en: The code completion feature
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码补全功能
- en: 'While we''re talking about NetBeans, let''s quickly go over one other IDE feature.
    Let''s say I wanted to write a new line of code and I''m going to use something
    from the `System` library:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论NetBeans时，让我们快速了解另一个IDE功能。假设我想写一行新代码，我要使用`System`库中的某个东西：
- en: '![](img/881707e3-08df-4582-92f4-1b115d9e3a36.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/881707e3-08df-4582-92f4-1b115d9e3a36.jpg)'
- en: 'Once I''ve typed `System.`, NetBeans can suggest valid responses for me. Only
    one of these, of course, is going to be what I''m looking for. The NetBeans compiler
    has a lot of helpful features such as these. If you''re the kind of person who
    thinks code completion is awesome, go ahead and leave these tools on. We can do
    this by going to Tools | Options | Code Completion and checking the features that
    we''d like:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我输入`System.`，NetBeans就可以为我建议有效的响应。当然，其中只有一个是我要找的。NetBeans编译器有很多这样的有用功能。如果你是那种认为代码补全很棒的人，可以继续使用这些工具。我们可以通过转到工具
    | 选项 | 代码补全，并勾选我们想要的功能来实现这一点：
- en: '![](img/036e89b8-1c27-42f2-bd51-35a92310b995.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/036e89b8-1c27-42f2-bd51-35a92310b995.jpg)'
- en: If you'd rather NetBeans behave a little more like a text editor, go ahead and
    uncheck all the features.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更希望NetBeans的行为更像文本编辑器，可以取消所有功能的勾选。
- en: There we go, lots of housecleaning in this section, but hopefully quick and
    not too painful.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始吧，在这一节中有很多清理工作，但希望会很快，也不会太痛苦。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned what Java is and saw its features. We saw the expanse
    of Java's application by looking at the various fields it is used in.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Java是什么，以及它的特点。我们通过查看它在各个领域的应用来看到了Java的广泛应用。
- en: We walked through the steps to install a Java Development Kit. We then set up
    a development environment called **NetBeans** for writing Java programs and executing
    them. We saw how to use NetBeans and wrote our first Java program in it. Next,
    we saw how to use NetBeans' ability to detect errors for rectifying them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们走过了安装Java开发工具包的步骤。然后设置了一个名为**NetBeans**的开发环境，用于编写和执行Java程序。我们看到了如何使用NetBeans并在其中编写了我们的第一个Java程序。接下来，我们看到了如何使用NetBeans的错误检测功能来纠正错误。
- en: In the next chapter, we'll look at the various Java data types and how to work
    with variables.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下各种Java数据类型以及如何使用变量。
