- en: Chapter 6. Using Docker's Built-in Security Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 使用Docker内置安全功能
- en: 'In this chapter, we will take a look at working with Docker tools that can
    be used to secure your environment. We will be taking a look at both command-line
    tools as well as GUI tools that you can utilize to your advantage. We will cover
    the following items in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍可以用来保护您的环境的Docker工具。我们将介绍命令行工具和GUI工具，您可以利用这些工具来帮助您。本章将涵盖以下内容：
- en: Docker tools
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker工具
- en: Using TLS in your environments to help ensure that pieces are communicating
    securely
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的环境中使用TLS，以确保各个部分之间的安全通信
- en: Using read-only containers to help protect the data in a container from being
    manipulated in some form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用只读容器来帮助保护容器中的数据免受某种形式的操纵
- en: Docker security fundamentals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker安全基础知识
- en: Kernel namespaces
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核命名空间
- en: Control groups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制组
- en: Linux kernel capabilities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux内核功能
- en: Docker tools
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker工具
- en: In this section, we will cover the tools that can help you secure your Docker
    environment. These are options that are built into the Docker software, which
    you are already using. It's time to learn how to enable or utilize these such
    features to help give you the peace of mind in order to be sure that the communication
    is secure; this is where we will cover enabling TLS, which is a protocol that
    ensures privacy between applications. It ensures that nobody is listening in on
    the communication. Think of it as when you are watching a movie and people on
    the phone say, *is this line secure?* It's the same kind of idea when it comes
    to network communication. Then, we will look at how you can utilize the read-only
    containers to ensure that the data you are serving up can't be manipulated by
    anyone.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍可以帮助您保护Docker环境的工具。这些是内置在您已经使用的Docker软件中的选项。现在是时候学习如何启用或利用这些功能，以确保通信安全；在这里，我们将介绍启用TLS，这是一种确保应用程序之间隐私的协议。它确保没有人在监听通信。可以将其视为观看电影时人们在电话中说“这条线路安全吗？”的情景。当涉及网络通信时，这是同样的想法。然后，我们将看看如何利用只读容器来确保您提供的数据不会被任何人操纵。
- en: Using TLS
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用TLS
- en: It is highly recommended to use the Docker Machine to create and manage your
    Docker hosts. It will automatically set up the communication to use TLS. Here's
    how you can verify that the *default* host that was created by `docker-machine`
    indeed uses TLS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议使用Docker Machine来创建和管理Docker主机。它将自动设置通信以使用TLS。以下是您可以验证由`docker-machine`创建的*默认*主机是否确实使用TLS的方法。
- en: 'One of the important factors is knowing if you are using TLS or not and then
    adjusting to use TLS if you are, in fact, not using TLS. The important thing to
    remember is that, nowadays, almost all the Docker tools ship with the TLS enabled,
    or if they don''t, they appear to be working towards this goal. One of the commands
    that you can use to check in order to see if your Docker host is utilizing the
    TLS is with the Docker Machine `inspect` command. In the following, we will take
    a look at a host and see if it is running with the TLS enabled:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要因素是知道您是否在使用TLS，然后根据实际情况调整使用TLS。重要的是要记住，如今几乎所有的Docker工具都启用了TLS，或者如果它们没有启用，它们似乎正在朝着这个目标努力。您可以使用Docker
    Machine `inspect`命令来检查您的Docker主机是否使用了TLS。接下来，我们将查看一个主机，并查看它是否启用了TLS：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From the preceding output, we can focus on the following line:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以关注以下行：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This shows us that if we were running **Swarm**, this host would be utilizing
    the secure `3376` port. Now, if you aren't using Docker Swarm, then you can disregard
    this line. However, if you are using Docker Swarm, then this line is important.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这向我们表明，如果我们正在运行**Swarm**，这个主机将利用安全的`3376`端口。现在，如果你没有使用Docker Swarm，那么你可以忽略这一行。但是，如果你正在使用Docker
    Swarm，那么这一行就很重要。
- en: 'Just to take a step back, let''s identify what Docker Swarm is. Docker Swarm
    is native clustering within Docker. It helps in turning multiple Docker hosts
    into an easy-to-manage single virtual host:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 回过头来，让我们先确定一下Docker Swarm是什么。Docker Swarm是Docker内部的原生集群。它有助于将多个Docker主机转变为易于管理的单个虚拟主机：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This shows us that this host is, in fact, using the certificates so we know
    that it is using TLS, but how do we know from just that? In the following section,
    we will take a look at how to tell that it is, in fact, using TLS for sure.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这向我们表明这个主机实际上正在使用证书，所以我们知道它正在使用TLS，但仅凭此如何知道呢？在接下来的部分，我们将看看如何确切地知道它是否正在使用TLS。
- en: Docker Machine also has the option to run everything over TLS. This is the most
    secure way of using Docker Machine in order to manage your Docker hosts. This
    setup can be tricky if you start using your own certificates. By default, Docker
    Machine stores your certificates that it uses in `/Users/<user_id>/.docker/machine/certs/`.
    You can see the location on your machine where the certificates are stored at
    from the preceding output.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Machine还有一个选项，可以通过TLS运行所有内容。这是使用Docker Machine管理Docker主机的最安全方式。如果你开始使用自己的证书，这种设置可能会有些棘手。默认情况下，Docker
    Machine会将它使用的证书存储在`/Users/<user_id>/.docker/machine/certs/`目录下。你可以从前面的输出中看到证书存储在你的机器上的位置。
- en: 'Let''s take a look at how we can achieve the goal of viewing if our Docker
    host is utilize TLS:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何实现查看我们的Docker主机是否使用TLS的目标：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is where we can tell that it is using TLS. The insecure port of Docker
    Machine hosts is the `2375` port and this host is using `2376`, which is the secure
    TLS port for Docker Machine. Therefore, this host is, in fact, using TLS to communicate,
    which gives you the peace of mind in knowing that the communication is secure.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们可以知道它正在使用TLS的地方。Docker Machine主机的不安全端口是`2375`端口，而这个主机使用的是`2376`，这是Docker
    Machine的安全TLS端口。因此，这个主机实际上正在使用TLS进行通信，这让你放心知道通信是安全的。
- en: Read-only containers
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只读容器
- en: 'With respect to the `docker run` command, we will mainly focus on the option
    that allows us to set everything inside the container as read-only. Let''s take
    a look at an example and break down what it exactly does:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`docker run`命令，我们主要关注的是允许我们将容器内的所有内容设置为只读的选项。让我们看一个例子，并分解它到底是做什么的：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we are running a `mysql` container and setting the entire container as
    read-only, except for the `/var/lib/mysql` directory. What this means is that
    the only location the data can be written inside the container is the `/var/lib/mysql`
    directory. Any other location inside the container won''t allow you to write anything
    in it. If you try to run the following, it would fail:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在运行一个`mysql`容器，并将整个容器设置为只读，除了`/var/lib/mysql`目录。这意味着容器内唯一可以写入数据的位置是`/var/lib/mysql`目录。容器内的任何其他位置都不允许你在其中写入任何内容。如果你尝试运行以下命令，它会失败：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This can be extremely helpful if you want to control where the containers can
    write to or not write to. Make sure to use this wisely. Test thoroughly, as it
    can have consequences when the applications can't write to certain locations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想控制容器可以写入或不写入的位置，这将非常有帮助。一定要明智地使用它。进行彻底测试，因为当应用程序无法写入某些位置时可能会产生后果。
- en: 'Remember the Docker volumes we looked at in the previous chapters, where we
    were able to set the volumes to be read-only. Similar to the previous command
    with `docker run`, where we set everything to read-only, except for a specified
    volume, we can now do the opposite and set a single volume (or more, if you use
    more `-v` switches) to read-only. The thing to remember about volumes is that
    when you use a volume and mount it in a container, it will mount as an empty volume
    over the top of that directory inside the container, unless you use the `--volumes-from`
    switch or add data to the container in some other way after the fact:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在之前章节中看到的Docker卷吗？我们能够将卷设置为只读。类似于之前的`docker run`命令，我们将所有内容设置为只读，除了指定的卷，现在我们可以做相反的操作，将单个卷（或者如果你使用更多的`-v`开关，可以是多个卷）设置为只读。关于卷需要记住的一点是，当你使用一个卷并将其挂载到容器中时，它将作为空卷挂载到容器内的目录顶部，除非你使用`--volumes-from`开关或在事后以其他方式向容器添加数据：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will mount a volume in `/opt/uploads` and set it to read-only. This can
    be useful if you don't want a running container to write to a volume in order
    to keep the data or configuration files intact.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`/opt/uploads`中挂载一个卷，并将其设置为只读。如果你不希望运行的容器写入卷以保持数据或配置文件的完整性，这可能会很有用。
- en: 'The last option that we want to look at, with regards to the `docker run` command
    is the `--device=` switch. This switch allows us to mount a device from the Docker
    host into a specified location inside the container. For doing so, there are some
    security risks that we need to be aware of. By default, when you do this, the
    container will get full the access: read, write, and the `mknod` access to the
    device''s location. Now, you can control these permissions by manipulating `rwm`
    at the end of the switch command.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`docker run`命令，我们要看的最后一个选项是`--device=`开关。这个开关允许我们将Docker主机上的设备挂载到容器内的指定位置。在这样做时，我们需要意识到一些安全风险。默认情况下，当你这样做时，容器将获得对设备位置的完全访问权限：读、写和`mknod`访问。现在，你可以通过在开关命令的末尾操纵`rwm`来控制这些权限。
- en: 'Let''s take a look at some of these and see how they work:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看其中一些，并了解它们是如何工作的：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous command will run the latest Ubuntu image and mount the `/dev/sdb`
    device inside the container at the `/dev/sdc2` location:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将运行最新的Ubuntu镜像，并将`/dev/sdb`设备挂载到容器内的`/dev/sdc2`位置：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command will run the latest Ubuntu image and mount the `/dev/sdb1` device
    inside the container at the `/dev/sdc2` location. However, this one has the `:r`
    tag at the end of it that specifies that it's read-only and can't be written.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将运行最新的Ubuntu镜像，并将`/dev/sdb1`设备挂载到容器内的`/dev/sdc2`位置。然而，这个命令的末尾有一个`:r`标签，指定它是只读的，不能被写入。
- en: Docker security fundamentals
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker安全基础知识
- en: In the previous sections, we looked into some Docker tools that you can use,
    such as TLS for communication, and using read-only containers to help ensure data
    isn't changed or manipulated. In this section, we will focus on some more options
    that are available from within the Docker ecosystem that can be used to help secure
    up your environments to another level. We will take a look at the kernel namespaces
    that provide another layer of abstraction by providing the running process to
    its own resources that appear only to the process itself and not to other processes
    that might be running. We will cover more about kernel namespaces in this section.
    We will then take a look at the control groups. Control groups, more commonly
    known as cgroups, give you the ability to limit the resources that a particular
    process has. We will then cover the Linux kernel capabilities. By that, we will
    look at the restrictions that are placed on containers, by default, when they
    are run using Docker. Lastly, we will take a look at the Docker daemon attack
    surface, risks that exist with the Docker daemon that you need to be aware of,
    and mitigation of these risks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们研究了一些你可以使用的Docker工具，比如用于通信的TLS，以及使用只读容器来确保数据不被更改或操纵。在本节中，我们将重点介绍Docker生态系统中提供的一些更多选项，可以用来帮助加强你的环境安全性。我们将看一下内核命名空间，它提供了另一层抽象，通过为运行的进程提供自己的资源，这些资源只对进程本身可见，而对其他可能正在运行的进程不可见。我们将在本节中更多地了解内核命名空间。然后我们将看一下控制组。控制组，更常被称为cgroups，让你能够限制特定进程所拥有的资源。然后我们将介绍Linux内核功能。通过这个，我们将看一下在使用Docker运行时，默认情况下对容器施加的限制。最后，我们将看一下Docker守护程序的攻击面，需要注意的Docker守护程序存在的风险，以及如何减轻这些风险。
- en: Kernel namespaces
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内核命名空间
- en: Kernel namespaces provide a form of isolation for containers. Think of them
    as a container wrapped inside another container. Processes that are running in
    one container can't disrupt the processes running inside another container or
    let alone run on the Docker host that the container is operating on. The way this
    works is that each container gets its own network stacks to operate with. However,
    there are ways to link these containers together in order to be able to interact
    with each other; however, by default, they are isolated from each other. Kernel
    namespaces have been around for quite a while too, so they are a tried and true
    method of isolation protection. They were introduced in 2008 and at the time of
    writing this book, it's 2016\. You can see that they will be eight years old,
    come this July. Therefore, when you issue the `docker run` command, you are benefiting
    from a lot of heavy lifting that is going on behind the scenes. This heavy lifting
    is creating its own network stack to operate on. This is also shielding off the
    container from other containers being able to manipulate the container's running
    processes or data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 内核命名空间为容器提供了一种隔离形式。可以把它们看作是一个容器包裹在另一个容器中。在一个容器中运行的进程不能干扰另一个容器内运行的进程，更不用说在容器所在的Docker主机上运行了。它的工作方式是，每个容器都有自己的网络堆栈来操作。然而，有办法将这些容器链接在一起，以便能够相互交互；然而，默认情况下，它们是相互隔离的。内核命名空间已经存在了相当长的时间，所以它们是一种经过验证的隔离保护方法。它们在2008年被引入，而在撰写本书时，已经是2016年了。你可以看到，到了今年7月，它们将满八岁。因此，当你发出`docker
    run`命令时，你正在受益于后台进行的大量工作。这些工作正在创建自己的网络堆栈来操作。这也使得容器免受其他容器能够操纵容器的运行进程或数据的影响。
- en: Control groups
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制组
- en: Control groups, or more commonly referred to as cgroups, are a Linux kernel
    feature that allows you to limit the resources that a container can use. While
    they limit the resources, they also ensure that each container gets the resources
    it needs as well as that no single container can take down the entire Docker host.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 控制组，或更常见的称为cgroups，是Linux内核的一个功能，允许您限制容器可以使用的资源。虽然它们限制资源，但它们也确保每个容器获得它所需的资源，以及没有单个容器可以使整个Docker主机崩溃。
- en: 'With control groups, you can limit the amount of CPU, memory, or disk I/O that
    a particular container gets. If we look at the `docker run` command''s help, let''s
    highlight the items that we can control. We will just be highlighting a few items
    that are particularly useful for the majority of users, but please review them
    to see if any others fit your environment, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制组，您可以限制特定容器获得的CPU、内存或磁盘I/O的数量。如果我们查看`docker run`命令的帮助，让我们突出显示我们可以控制的项目。我们只会突出显示一些对大多数用户特别有用的项目，但请查看它们，看看是否有其他项目适合您的环境，如下所示：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see from the preceding highlighted portions, these are just a few
    items that you can control on a per-container basis.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以从前面突出显示的部分看到的，这些只是您可以在每个容器基础上控制的一些项目。
- en: Linux kernel capabilities
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux内核功能
- en: Docker uses the kernel capabilities to place the restrictions that Docker places
    on the containers when they are launched or started. Limiting the root access
    is the ultimate agenda with these kernel capabilities. There are a few services
    that typically run as root, but can now be run without these permissions. Some
    of these include `SSH`, `cron`, and `syslogd`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Docker使用内核功能来放置Docker在启动或启动容器时放置的限制。限制根访问是这些内核功能的最终目标。有一些通常以root身份运行的服务，但现在可以在没有这些权限的情况下运行。其中一些包括`SSH`、`cron`和`syslogd`。
- en: Overall, what this means is that you don't need root in the server sense you
    typically think of. You can run with a reduced capacity set. This means that your
    root user doesn't need the privilege it typically needs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这意味着您不需要像通常想的那样在服务器上拥有root权限。您可以以降低的容量集运行。这意味着您的root用户不需要通常需要的特权。
- en: 'Some of the things that you might not need to enable anymore are shown in the
    following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不再需要启用的一些项目如下所示：
- en: Performing mount operations
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行挂载操作
- en: Using raw sockets, which will help to prevent spoofing of packets
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原始套接字，这将有助于防止数据包欺骗
- en: Creating new devices
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新设备
- en: Changing the owner of files
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改文件的所有者
- en: Altering attributes
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改属性
- en: This helps due to the fact that if someone does compromise a container, then
    they can't escalate any more than what you are providing them. It will be much
    harder, if not impossible, to escalate their privileges from a running container
    to running Docker host. Due to such complexity, the attackers will probably look
    elsewhere than your Docker environments to try to attack. Docker also supports
    the addition and removal of capabilities, therefore, it's recommend to remove
    all the capabilities, except the ones that you intend to use. An example would
    be to use the `–cap-add net_bind_service` switch on your `docker run` command.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于防止如果有人破坏了一个容器，那么他们无法提升到您提供的更高权限。要从运行的容器提升到运行的Docker主机，将会更加困难，甚至不可能。由于这种复杂性，攻击者可能会选择其他地方而不是您的Docker环境来尝试攻击。Docker还支持添加和删除功能，因此建议删除所有功能，除了您打算使用的功能。例如，可以在`docker
    run`命令上使用`-cap-add net_bind_service`开关。
- en: Containers versus virtual machines
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器与虚拟机
- en: Hopefully, you trust your organization and all those who have access to these
    systems. You will most likely be setting up virtual machines from scratch. It
    is probably impossible to get the virtual machine from someone else due to its
    sheer size. Therefore, you will be aware of what is inside the virtual machine
    and what isn't. This being said, with the Docker containers, you will not be aware
    of what is there inside the image that you may be using for your container(s).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您信任您的组织和所有可以访问这些系统的人。您很可能会从头开始设置虚拟机。由于其庞大的体积，很可能无法从他人那里获取虚拟机。因此，您将了解虚拟机内部的情况。也就是说，对于Docker容器，您可能不知道您可能在容器中使用的镜像中有什么。
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at deploying TLS to all the pieces of our Docker
    environment so that we can ensure that everything is communicating securely and
    the traffic can't be intercepted and then interpreted. We also understood how
    to utilize the read-only containers to our advantage in order to ensure the data
    that is being served up can't be manipulated. We then took a look at how to provide
    processes with their own abstraction of items, such as networks, mounts, users,
    and more. We then dove into control groups, or cgroups as their more commonly
    referred to as, as a way to limit the resources that a process or container has.
    We also took a look at the Linux kernel capabilities, that is, the restrictions
    that are placed on a container when it is started or launched. Lastly, we dove
    into mitigating risks against the Docker daemon attack surface.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了将TLS部署到我们Docker环境的所有部分，以便确保所有通信都是安全的，流量不能被拦截和解释。我们还了解了如何利用只读容器来确保提供的数据不能被篡改。然后，我们看了如何为进程提供它们自己的抽象，比如网络、挂载、用户等。接着，我们深入了解了控制组，或者更常见的称为cgroups，作为限制进程或容器资源的一种方式。我们还研究了Linux内核的功能，即在启动或启动容器时施加的限制。最后，我们深入了解了如何减轻针对Docker守护程序攻击面的风险。
- en: In the next chapter, we will look at securing Docker with third-party tools
    and learn which third-party tools, beyond those offered by Docker, are out there
    to help secure your environments to help keep your application(s) secure when
    running on Docker.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究使用第三方工具保护Docker，并了解除Docker提供的工具之外，还有哪些第三方工具可以帮助您保护环境，以确保在Docker上运行时保持应用程序的安全。
