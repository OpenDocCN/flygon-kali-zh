- en: The Enemies of Clean Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清洁代码的敌人
- en: 'By now, we should have a pretty clear picture of what we mean when we say *clean
    code*. In the previous chapter, we explored the tenets of reliability, efficiency,
    maintainability, and usability. Together, these guide us toward cleaner code,
    but if we aren''t careful, we can still get caught out. In this chapter, we''ll
    explore the *enemies* of clean code: things that may prevent us from writing code
    that is reliable, efficient, maintainable, or usable.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该已经对我们所说的*清洁代码*有了一个相当清晰的认识。在上一章中，我们探讨了可靠性、效率、可维护性和可用性的原则。这些原则共同引导我们朝着更清洁的代码方向前进，但是如果我们不小心，仍然可能会遇到问题。在本章中，我们将探讨清洁代码的*敌人*：可能阻止我们编写可靠、高效、可维护或可用的代码的因素。
- en: None of these enemies should be considered *your* enemies; instead, they should
    be thought of as agitators of clean code. We need to take a holistic view of these
    potentially harmful factors and keep an eye out for them in our code bases, teams,
    and workplaces.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些敌人都不应被视为*您*的敌人；相反，它们应被视为清洁代码的煽动者。我们需要全面看待这些潜在有害因素，并在我们的代码库、团队和工作场所中留意它们。
- en: 'Specifically, the enemies we''ll be covering in this chapter include the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，本章我们将涵盖以下敌人：
- en: 'Enemy #1 – JavaScript'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人＃1 - JavaScript
- en: 'Enemy #2 – Management'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人＃2 - 管理
- en: 'Enemy #3 – Self'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人＃3 - Self
- en: 'Enemy #4 – The cargo cult'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人＃4 - 货物崇拜
- en: 'Enemy #1 – JavaScript'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敌人＃1 - JavaScript
- en: The worst JavaScript feature is also arguably its best. It is a remarkably ubiquitous
    language that has had to grow and adapt at a very fast rate. The language itself
    and its position within browser have precipitated this ubiquity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最糟糕的JavaScript特性也可以说是它最好的特性。它是一种非常普遍的语言，不得不以非常快的速度增长和适应。语言本身及其在浏览器中的位置促成了这种普及性。
- en: 'JavaScript is an incredibly expressive and diverse language, with functional
    inspiration from Lisp and Scheme, prototypical inheritance from Self, and a C-like
    syntax that mirrors Java. It is a language of many paradigms. Whether you want
    to program in a classically object-oriented way, a prototypical way, or an entirely
    functional way, JavaScript has you covered. JavaScript''s flexibility and its
    position in the broader web stack also make it incredibly accommodating to beginners.
    You can be immediately productive with it, and this was very much Brendan Eich''s
    original intention. It was intended to be easy to pick up by designers and programmers
    alike, providing them with the power to script what was once a single-purpose
    platform: the browser. The once humble browser, however, has since grown into
    an incredibly broad and complex set of complementary abstractions.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种非常富有表现力和多样化的语言，从Lisp和Scheme中获得了功能上的灵感，从Self中获得了原型继承，并且具有类似于Java的C样式的语法。它是一种具有多种范式的语言。无论您想以经典的面向对象方式、原型方式还是完全功能方式进行编程，JavaScript都可以胜任。JavaScript的灵活性以及其在更广泛的Web堆栈中的位置也使其非常适合初学者。您可以立即开始使用它，并且这正是Brendan
    Eich最初的意图。它旨在让设计师和程序员都能轻松上手，为他们提供编写曾经是单一用途平台的浏览器脚本的能力。然而，曾经不起眼的浏览器现在已经发展成一个非常广泛和复杂的互补抽象集合。
- en: The growth of JavaScript itself and its broad set of applications on both the
    client and server-side (and beyond!) has meant that the language has been pushed
    and pulled in a thousand different directions. An overwhelming number of frameworks,
    libraries, spin-off languages (for example, CoffeeScript), language extensions
    (for example, JSX), compilers, build tools, and other abstractions have erupted
    and have sought to leverage JavaScript in new and unique ways. Together, these
    tools form the JavaScript landscape, and it is an incredibly rich and diverse
    one. There are countless ways to do the same thing and, as a result, we can barely
    hope to do anything correctly. That is why I say that JavaScript's ubiquity is
    both its own worst enemy and its own greatest asset.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript本身的增长以及其在客户端和服务器端（以及其他领域）的广泛应用意味着该语言已经被推向和拉向了成千上万个不同的方向。大量的框架、库、分支语言（例如CoffeeScript）、语言扩展（例如JSX）、编译器、构建工具和其他抽象已经涌现并试图以新的独特方式利用JavaScript。这些工具共同构成了JavaScript的景观，这是一个非常丰富和多样化的景观。有无数种方法来做同样的事情，因此我们几乎无法希望做任何事情都正确。这就是为什么我说JavaScript的普及性既是它自己的最大敌人，也是它自己的最大优势。
- en: In this book, we'll explore foundational concepts that'll teach us to think
    critically about the nature of clean code and will allow us to write clean code
    within a language and landscape that don't always cater well code cleanness. JavaScript,
    if wielded well, will surprise you with its efficacy and expressiveness, and given
    time and effort, it can be the equal of any other language in terms of its reliability
    and maintainability.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将探讨基础概念，这些概念将教会我们对清洁代码的本质进行批判性思考，并允许我们在不总是很好地满足代码清洁度的语言和环境中编写清洁代码。如果使用得当，JavaScript将以其高效性和表现力让您感到惊讶，并且经过时间和努力，它可以在可靠性和可维护性方面与任何其他语言相媲美。
- en: 'Enemy #2 – management'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敌人＃2 - 管理
- en: Clean code is as much about the processes and principles that foster it as it
    is about syntax. No matter how perfect and beautiful our code is in isolation,
    it is usually written as part of a project, alongside a team, and managed by fallible
    people and fallible processes. And only by seeing and understanding these fallibilities
    can we hope to prevent or avoid them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁代码与培养它的过程和原则一样重要。无论我们的代码在孤立环境中有多完美和美丽，它通常是作为项目的一部分编写的，与团队一起，并由可犯错误的人和可犯错误的流程管理。只有通过看到和理解这些缺陷，我们才能希望预防或避免它们。
- en: We are all taking on more challenging work nowadays. The days of JavaScript
    being limited to humble brochure websites with snazzy navigation rollovers are
    long gone. The creators of the web have been tasked with building ever more ambitious
    projects. As the technological tower of abstraction grows to new heights, the
    complexity of these projects will only increase. Due to this, if we are to truly
    write clean code, we must think broadly about this complexity. We must go beyond
    our code bases and consider the context of the team and the organization that
    we work in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们都在承担更具挑战性的工作。JavaScript仅限于普通的宣传手册网站已经成为历史。Web的创造者们被要求构建更加雄心勃勃的项目。随着技术抽象塔不断增长，这些项目的复杂性只会增加。因此，如果我们真的要写出干净的代码，我们必须广泛考虑这种复杂性。我们必须超越我们的代码库，考虑我们所在团队和组织的背景。
- en: Casting management as an enemy may appear to suggest that managers themselves
    are blameworthy, but this is not the case. What we'll discover in this section
    is that it is individual cultural practices that make it challenging to ship clean
    code. Among these is the pressure to ship, bad metrics, and a lack of ownership.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将管理视为敌人可能会暗示经理们本身有过错，但事实并非如此。我们将在本节中发现，是个人文化实践使得发布干净代码变得困难。其中包括发布压力、糟糕的度量标准和缺乏所有权。
- en: Pressure to ship
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布压力
- en: The pressure to ship code, usually because of a deadline or other managerial
    dictates, is an ever-present and nasty force in the world of software. To the
    outside stakeholder or manager, a deadline is a great thing; it seems to provide
    certainty and accountability, but to the people working on the project, it might
    only be seen as enforcing unwelcome compromises. Sometimes, the first compromise
    that's made is that of code quality. This does not happen intentionally but is
    just a natural result of prioritizing completion over quality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，由于截止日期或其他管理规定的压力，发布代码的压力是软件世界中一个经常存在且不好的力量。对外部利益相关者或经理来说，截止日期是一件好事；它似乎提供了确定性和问责制，但对于项目中工作的人来说，它可能只会被视为强加的不受欢迎的妥协。有时，做出的第一个妥协就是代码质量的妥协。这并不是故意发生的，而是将完成优先于质量的自然结果。
- en: A **stakeholder**, in this context, is any individual or organization that relies
    on the output of your work. Usual stakeholders include project managers, other
    teams within the same organization, outside clients, and users.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，**利益相关者**是指依赖于您工作成果的任何个人或组织。通常的利益相关者包括项目经理、同一组织内的其他团队、外部客户和用户。
- en: 'When there are pressures to ship, there are a few ways in which code quality
    can slowly atrophy. These include the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当有发布压力时，代码质量可能会慢慢下降。其中包括以下几点：
- en: '**Documentation**: Developers, when rushed, will not be able to take the necessary
    time to ensure their code and its APIs are correctly documented. Existing documentation
    will atrophy.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：当开发人员赶时间时，他们将无法花足够的时间来确保他们的代码及其API被正确记录。现有的文档将逐渐荒废。'
- en: '**Architecture**: Developers will begin to focus on the most necessary changes
    they need to make, ignoring the larger architectural structure of the code and
    how it all inter-relates. Dependencies will become confused and architectures
    will splinter over time, eventually creating spaghetti code.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构**：开发人员将开始专注于他们需要进行的最必要的更改，忽视代码的更大架构结构以及它们之间的相互关系。依赖关系将变得混乱，架构将随着时间的推移而分裂，最终形成混乱的代码。'
- en: '**Consistency**: Both architecturally and in terms of syntax, consistency will
    begin to suffer. Multiple different developers, possibly siloed away from each
    other, are rushed to build things in the fastest possible way. Without intending
    to, they may neglect communication and the establishment of standards, leading
    to less consistency.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：无论是在架构上还是在语法上，一致性都将开始受到影响。多个不同的开发人员，可能被隔离在一起，被迫以最快的方式构建东西。无意中，他们可能忽视了沟通和建立标准，导致一致性减少。'
- en: '**Testing**: Writing tests often takes time, as does refactoring tests to suit
    new requirements. Existing tests are liable to be disabled or deleted. New tests
    won''t be written because there simply isn''t time.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：编写测试通常需要时间，调整测试以适应新需求也需要时间。现有的测试可能会被禁用或删除。新的测试不会被编写，因为根本没有时间。'
- en: '**Best practices**: When their time is stretched, developers will begin to
    take shortcuts in their code, not taking the care and attention that''s required
    to make sure their software is suited for its purpose. They''ll skirt best practices
    and instead opt for speedy and hacked-together solutions. On the web, this can
    often result in a less accessible and usable UI.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最佳实践**：当时间紧张时，开发人员将开始在他们的代码中采取捷径，而不是花费必要的时间和精力来确保他们的软件适合其目的。他们会绕过最佳实践，而选择快速和拼凑在一起的解决方案。在Web上，这往往会导致UI的可访问性和可用性降低。'
- en: 'The preceding items are the first to go when deadlines begin to loom. If we''re
    not careful, we can end up with the following second-order effects:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当截止日期开始逼近时，上述项目通常会首先被搁置。如果我们不小心，我们可能会遇到以下二阶效应：
- en: '**Bugginess**: With testing and documentation absent, and the code''s architectural
    foundations under threat, flaky and buggy code will begin to become the norm.
    Many of these bugs may be caught in the Q&A process, but many others will surface
    to users. The fragility of the code and its APIs and UIs will increase, putting
    an increased burden on users.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bugginess**：在缺乏测试和文档的情况下，代码的架构基础受到威胁，不稳定和有缺陷的代码将开始成为常态。许多这些错误可能会在质量保证过程中被捕捉到，但还有许多其他错误会出现在用户面前。代码及其API和UI的脆弱性将增加，给用户带来更大的负担。'
- en: '**Unhappy users**: Due to the increase in the number of bugs that surface to
    users and the software''s decreased level of usability, their level of productivity
    and happiness will decrease. They may begin to avoid or abandon the platform in
    search of a higher-quality alternative.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不满意的用户**：由于出现在用户面前的错误数量增加，软件的可用性降低，他们的生产力和幸福感也会降低。他们可能会开始避开或放弃该平台，寻找更高质量的替代品。'
- en: '**Burned-out developers**: Tired developers, having had to forgo their best
    principles continually, will begin to become burned out. They may become depressed
    at the prospect of continuing their work on the team. With their mental health
    and general fulfillment under threat, they will start to leave.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**疲惫的开发者**：疲惫的开发者，不得不不断放弃他们最好的原则，会开始感到疲惫。他们可能会对继续在团队中工作感到沮丧。面临心理健康和一般满足感受到威胁，他们会开始离开。'
- en: All of these effects, when they last long enough, can coalesce and result in
    the failure of a project. Therefore, it is of vital importance to address the
    underlying pressure that is forcing such recklessly high speed. The pressure to
    ship code quickly is a pressure that's usually instigated by forces that do not
    have a strong working knowledge of the slow degeneration that can occur in software
    projects. This lack of knowledge may, in part, be due to them being insulated
    from the long-term effects of their decisions. They may assume that, when something
    is shipped and meets the stakeholders' approval, that's the end of it. But as
    we know, just because quickly shipped code meets immediate demands doesn't mean
    it abides by good levels of quality. Bad-quality code can have many adverse knock-on
    effects that are only realized in full many weeks or months after implementation.
    Months later, stakeholders may find themselves annoyed at the slowdown and degradation
    in quality, not realizing that it was the pressure they originally applied that
    led to it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些影响如果持续时间足够长，就会汇聚在一起，导致项目失败。因此，解决这种鲁莽高速的根本压力是至关重要的。迅速交付代码的压力通常是由那些对软件项目长期退化缺乏深刻了解的力量所发起的。这种缺乏了解可能部分是因为他们与自己决策的长期影响隔离开来。他们可能会认为，一旦交付并得到利益相关者的批准，问题就解决了。但正如我们所知，快速交付的代码满足了即时需求，并不意味着它符合良好的质量水平。低质量的代码可能会产生许多负面的连锁效应，这些效应只有在实施后的几周或几个月后才会完全意识到。几个月后，利益相关者可能会发现自己对减速和质量下降感到恼火，却没有意识到最初施加压力的是他们导致了这一切。
- en: The solution to this mess lies in a crucial compromise between t*ime to ship* and
    t*echnical debt*. Technical debt accrues over time. It describes deficits that
    need to be addressed to keep the code base healthy and in good working order.
    This may include fixing bugs, writing tests, refactoring old modules, or integrating
    tools to improve code quality. Fundamentally, technical debt is all work that,
    ideally, would be part of the natural development cycle but, because of time constraints,
    it is pushed aside until later. There are other factors that dictate the proliferation
    of technical debt, but time is the biggest one. Not paying off our technical debt
    is a sure way to ensure code atrophy and eventual failure of the project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这一混乱局面的关键妥协在于*交付时间*和*技术债务*之间。技术债务会随着时间的推移而积累。它描述了需要解决以保持代码库健康和良好运行状态的赤字。这可能包括修复bug、编写测试、重构旧模块，或者集成工具以提高代码质量。从根本上说，技术债务是所有工作，理想情况下应该是自然开发周期的一部分，但由于时间限制，被推迟到以后。还有其他因素决定了技术债务的增加，但时间是最重要的因素。不偿还我们的技术债务是确保代码衰退和项目最终失败的一种方法。
- en: 'There are countless pieces of advice and processes that you can utilize when
    it comes to project management. I won''t be going into them here, but I will share
    some heuristics that you can use to ensure a healthy code base:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目管理方面，有无数的建议和流程可以利用。我不会在这里详细介绍它们，但我会分享一些启发式方法，以确保代码库的健康：
- en: '**Do not ship a feature or fix without tests**. Without tests, a regression
    could occur at any time. Tests are a defensive technique to ensure the correctness
    of our code on a continued basis.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要在没有测试的情况下发布功能或修复bug**。没有测试，可能随时会发生回归。测试是一种防御技术，可以确保我们的代码持续正确。'
- en: '**Pay off technical debt** frequently. Possibly once a week, or twice a month,
    try to have everyone work on technical debt, that is, any work that''s believed
    to increase the health of the code base.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常**偿还技术债务**。可能每周一次，或者每两周一次，尝试让每个人都处理技术债务，即任何被认为能增加代码健康的工作。
- en: '**Communicate regularly** with stakeholders to express constraints and costs
    related to code and project health. Do not over-promise shipment or under-sell
    problems.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期与利益相关者沟通**，表达与代码和项目健康相关的限制和成本。不要过度承诺交付，也不要低估问题。'
- en: We, as developers, are not always in control of the way that projects are managed.
    Nonetheless, we should always feel comfortable broaching concerns and advocating
    for processes that foster clean code. [Chapter 18](6b197059-b00f-48fb-bc6b-c46ad73fa2b8.xhtml),
    *Communication and Advocacy*, goes into more detail on how we can go about this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们并不总是能控制项目管理的方式。尽管如此，我们应该始终感到自如地提出关注并倡导促进代码整洁的流程。[第18章](6b197059-b00f-48fb-bc6b-c46ad73fa2b8.xhtml)，*沟通和倡导*，详细介绍了我们如何做到这一点。
- en: Bad metrics
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 糟糕的指标
- en: 'There are seemingly no industries in the world that can escape metrics. The
    crazed obsession with measuring things is as much a cult-like obsession as it
    is a genuine need that produces necessary introspection and change. In the world
    of software engineering, we are not strangers to this need. As programmers, we
    are very interested in metrics that provide us with insights into our code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上似乎没有哪个行业能逃脱指标的束缚。对于衡量事物的狂热迷恋既是一种像邪教一样的迷恋，也是一种产生必要的反省和改变的真正需求。在软件工程领域，我们对这种需求并不陌生。作为程序员，我们对能够为我们提供对代码洞察的指标非常感兴趣：
- en: How many bugs are there?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少bug？
- en: How long does this code take to run?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这段代码运行需要多长时间？
- en: How much test coverage do I have?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的测试覆盖率有多高？
- en: 'Managers and other stakeholders, however, will usually harbor their own interests
    and metrics. The more infamous among these are the metrics that attempt to measure
    a developer''s output or productivity:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，经理和其他利益相关者通常会怀有自己的利益和指标。其中最臭名昭著的是试图衡量开发者产出或生产力的指标：
- en: How many lines of code or commits are there?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少行代码或提交？
- en: How many features did we ship?
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们发布了多少功能？
- en: How many lines of documentation did we write?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们写了多少行文档？
- en: These are good questions if they're asked for the right reasons. For example,
    lines of code can be a useful metric if we're using them as a proxy for complexity
    when discussing whether to refactor specific classes/utilities. But many metrics
    are entirely divorced from the thing they are attempting to measure.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于正确的原因提出这些问题，那么这些都是很好的问题。例如，代码行数可以作为一个有用的度量，如果我们将其用作讨论是否重构特定类/实用程序的复杂性的代理。但许多度量完全脱离了它们试图衡量的事物。
- en: A non-technical manager or stakeholder may assume that writing a certain amount
    of code should always take the same amount of time. They may be confused when
    a developer who once wrote 200 lines of code in a single day has recently taken
    10 days to commit only 10 lines of code. Their confusion, of course, demonstrates
    a gross misunderstanding of the programming process and its chaotic complexity.
    But these misunderstandings are rife, so we need to be wary of them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 非技术经理或利益相关者可能会认为编写一定数量的代码应该总是需要相同的时间。当曾经一天写200行代码的开发人员最近花了10天才提交了10行代码时，他们可能会感到困惑。当然，他们的困惑表明他们对编程过程及其混乱复杂性的理解存在严重误解。但这些误解很普遍，所以我们需要对它们保持警惕。
- en: 'The clear solution to bad metrics is to push for and create better metrics.
    And to create good metrics, it is essential to know what underlying question we''re
    trying to answer and then brainstorm ways of answering that question. Let''s take
    a look at an example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 解决糟糕度量的明确方法是推动并创建更好的度量。要创建好的度量，了解我们试图回答的基本问题是至关重要的，然后集思广益地想出回答这个问题的方法。让我们看一个例子：
- en: '| **The question** | **The bad metric** | **Example of why it''s bad** | **A
    better metric or approach** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|**问题**|**糟糕的度量**|**为什么糟糕**|**更好的度量或方法**|'
- en: '| Are we being productive? | Lines of code/commits | A programmer could reasonably
    take many days to solve a crucial bug that only requires a one-line change. |
    Ask developers and explore what is dragging their productivity down; have team
    retrospectives to discover areas of improvement. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '|我们是否在高效工作？|代码行数/提交|一个程序员可能需要很多天来解决一个只需要一行更改的关键错误。|询问开发人员并探索是什么拖慢了他们的工作效率；进行团队回顾，发现改进的领域。'
- en: '| Are we delivering value to users? | Number of features shipped | Users may
    receive more benefit from fewer features that are of high quality.  | Build metrics
    or A/B experiments to judge which features are being used and enjoyed. Focus on
    the quality of each feature. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '|我们是否为用户提供了价值？|已发布功能数量|用户可能会从更少但质量更高的功能中获得更多好处。|建立度量或A/B实验来判断哪些功能被使用和受欢迎。专注于每个功能的质量。'
- en: '| Are we writing useful documentation? | Lines of documentation | Developers
    may only end up documenting the things they know well, not the areas of the code
    base that are most in need of documentation. | Create a metric that tracks the
    usage of documentation. Discern what areas of code are under-documented by asking
    developers. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|我们是否在编写有用的文档？|文档行数|开发人员可能最终只会记录他们熟悉的事物，而不是最需要记录的代码区域。|创建一个跟踪文档使用情况的指标。通过询问开发人员来确定哪些代码区域的文档不足。'
- en: '| Do we have a well-tested code base? | Test coverage | If it only measures
    whether certain lines of code are called, then it could be fooled with only a
    handful of very broad integration tests. | Use traditional test coverage in combination
    with other metrics. Keep track of areas of regression where bugs often occur. 
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|我们是否有一个经过良好测试的代码库？|测试覆盖率|如果它只衡量某些代码行是否被调用，那么它可能会被一些非常广泛的集成测试所欺骗。|结合传统的测试覆盖率和其他度量。跟踪经常出现bug的回归区域。'
- en: '| Do we have a buggy code base? | Number of bugs | A code base may have many
    bugs in an area of the app that is virtually unused. Bugs in certain areas may
    be unreported. | Don''t count bugs; instead, focus on and measure user happiness
    and developer happiness. Prioritize bugs based on how they are affecting your
    users. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|我们的代码库是否有bug？|bug数量|一个代码库可能在一个几乎没有使用的应用程序区域中有很多bug。某些区域的bug可能没有被报告。|不要计算bug数量；而是专注于并衡量用户和开发人员的满意度。根据bug对用户的影响来优先处理bug。'
- en: Fixation on bad metrics within an organization or team can lead to the wrong
    things being optimized. Developers who are more concerned with writing more lines
    of code will be less interested in the underlying quality of their code. Developers
    who are pushed to release more features will compromise on best practices and
    clean code, optimizing for speed and shipment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 组织或团队内对糟糕的度量的执着可能导致优化了错误的事物。更关心写更多代码行数的开发人员可能对其代码的基本质量不太感兴趣。被迫发布更多功能的开发人员可能会妥协最佳实践和清晰的代码，优化速度和交付。
- en: 'It''s important to ensure that any metrics we track are tempered by reality
    and that we do not judge success based purely on those metrics. Be especially
    wary when you see metrics running in opposition to our principles of clean code.
    Over time, as well, if a metric is chased too ambitiously, it may end up corrupting
    the very thing it was trying to measure. This is done via an effect known as **Goodhart''s
    law**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们跟踪的任何度量都受到现实的制约，并且我们不仅仅根据这些度量来判断成功是非常重要的。特别是当你看到度量与我们的清晰代码原则相对立时要特别小心。随着时间的推移，如果一个度量被过于雄心勃勃地追求，它最终可能会破坏它试图衡量的事物。这是通过一种被称为**古德哈特定律**的效应来实现的：
- en: '"When a measure becomes a target, it ceases to be a good measure."'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “当一个度量成为目标时，它就不再是一个好的度量。”
- en: – Marilyn Strathern
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '- Marilyn Strathern'
- en: Lack of ownership
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺乏所有权
- en: Ownership is a key tenet of a healthy code base and relies on individuals having
    a stake in the health of their code. Ownership here doesn't mean that a piece
    of code belongs to an individual and nobody else can work on it. Instead, it means
    that a piece of code is fostered by an individual or a group of people, with its
    ongoing health and reliability a key priority.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所有权是健康代码库的关键原则，它依赖于个人对其代码健康状况的利益。这里的所有权并不意味着一段代码属于一个人，其他人不能在其上工作。相反，它意味着一段代码是由一个人或一组人培育的，其持续的健康和可靠性是一个关键的优先事项。
- en: 'A lack of ownership can lead to the key tenets of clean code suffering in the
    following ways:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏所有权可能会导致以下方式中的清洁代码的关键原则受损：
- en: '**Reliability**: The code''s correctness and stability can atrophy over time
    as new changes are made that unknowingly create fragility. The code''s ongoing
    stability is not monitored or cared for.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠性：随着不知不觉地引入脆弱性的新变化，代码的正确性和稳定性可能会随着时间的推移而衰退。代码的持续稳定性没有得到监控或关注。
- en: '**Efficiency**: The code is not measured or observed directly by anyone, with
    an underlying assumption that it just works. Over time, its efficiency may wane.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 效率：没有人直接测量或观察代码，基本假设是它只是有效的。随着时间的推移，其效率可能会下降。
- en: '**Maintainability**: Having many non-owners making swift and ill-considered
    changes can result in a non-cohesive architecture that makes ongoing maintenance
    more difficult in the long run.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可维护性：许多非所有者进行迅速和轻率的更改可能导致非连贯的架构，从而使长期维护变得更加困难。
- en: '**Usability**: The documentation and general usability of the code will not
    be thought about or monitored by anyone, leading to its atrophy and, eventually,
    a piece of software that is complicated and burdensome to use.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性：没有人会考虑或监控代码的文档和一般可用性，导致其衰退，最终导致软件变得复杂和使用起来繁琐。
- en: 'Properly applied ownership can fundamentally change the otherwise burgeoning
    atrophy of the preceding tenets:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正确应用的所有权可以从根本上改变前述原则的衰退：
- en: '**Reliability**: The code''s correctness and ongoing stability will be cared
    for and monitored'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠性：代码的正确性和持续稳定性将得到关注和监控
- en: '**Efficiency**: The code will be measured and assessed for efficiency on an
    ongoing basis'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 效率：代码将被持续地测量和评估效率
- en: '**Maintainability**: The code will retain a singular vision for its architecture
    and syntax'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可维护性：代码将保持其架构和语法的独特视角
- en: '**Usability**: Documentation will be constantly updated and the code''s usability
    will be an ongoing concern'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性：文档将不断更新，代码的可用性将是一个持续关注的问题
- en: Fundamentally, ownership is about an individual or a team that has a level of
    **ongo****ing** **concern** for the code. For this to occur, a level of ego or
    pride is necessary. An individual or team must have some kind of stake in the
    ongoing health of the code. It is often the organizational or managerial culture
    that leads to a healthy or unhealthy level of ownership, and so, again, it is
    vital to properly communicate and advocate processes and dynamics that will allow
    us, the programmers, to ensure our code's cleanliness and health.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，所有权是关于个人或团队对代码的持续关注。为了实现这一点，需要一定程度的自我或自豪感。个人或团队必须对代码的持续健康有一定的利益。通常是组织或管理文化导致了健康或不健康的所有权水平，因此，再次，正确沟通和倡导过程和动态对我们程序员来说是至关重要的，这将使我们能够确保我们的代码的整洁和健康。
- en: There are also more severe and unimagined results of a lack of ownership. Due
    to the lack of pride and feeling of guardianship over our work, burnout becomes
    more likely as programmers aren't able to actualize their need to feel a sense
    of pride and self-worth regarding their work. Due to no ownership, team members
    may not be able to foster a high level of understanding in any one area, meaning
    that the general knowledge of the team or organization suffers, with everyone
    only understanding the code base in a very shallow or cursory way.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏所有权也会导致更严重和意想不到的后果。由于对工作缺乏自豪感和监护责任感，程序员更容易出现疲劳，因为他们无法实现对工作的自豪感和自我价值感。由于没有所有权，团队成员可能无法在任何一个领域培养高水平的理解，这意味着团队或组织的整体知识会受到影响，每个人只能以一种非常肤浅或粗略的方式理解代码库。
- en: '**Beware of too much ego in ownership**! Ego is a delicate trait. There is
    always the risk of *too much ownership*, which can result in a stubborn and defensive
    culture where *insiders* don''t let *outsiders* make changes, and where strong
    and self-centered opinions run rife. Beware of this. Remember the key tenets of
    usability and maintainability. These will guide you toward kindness and openness
    toward those who would wish to use your code or make changes to it.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 小心所有权中的自我过多！自我是一种脆弱的特质。总是存在“过度所有权”的风险，这可能导致顽固和防御性文化，使“内部人”不允许“外部人”进行更改，并且强烈的以自我为中心的观点泛滥。要小心。记住可用性和可维护性的关键原则。这将引导您对那些希望使用您的代码或对其进行更改的人表现出善良和开放的态度。
- en: 'Enemy #3 – Self'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敌人＃3 - 自我
- en: Programmers, as creators, are forever impressing their version of how something
    should be upon the world, so it's almost impossible to not, at times, feel a sense
    of pride over our work. If not kept in check, this can easily spiral into a place
    where we are writing code to impress people, and to boost feelings of our own
    superiority, without considering whether the code we're writing is maintainable
    or usable. But if our natural ego is not allowed to flourish, then we will have
    no pride in our work and no inclination to foster excellence in what we do. As
    such, in programming, as in other areas of life, the key is a balance of ego where
    we retain its good parts without letting its bad parts affect things too much.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员作为创作者，永远在向世界展示他们对事物应该是什么样的版本，因此几乎不可能不时地对我们的工作感到自豪。如果不加以控制，这很容易演变成我们编写代码来给人留下深刻印象，提升自己的优越感，而不考虑我们正在编写的代码是否可维护或可用。但是，如果我们的自然自我不能得到发展，那么我们就不会对自己的工作感到自豪，也不会倾向于在我们所做的事情上培养卓越。因此，在编程中，就像生活的其他领域一样，关键是保持自我平衡，保留其好的部分，而不让其坏的部分影响太多。
- en: '**Ego**, in this context, is our selfhood; the ways in which we identify with
    ourselves and how we express ourselves in the world. All programmers have an ego
    and its effects on the code they write are numerous.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，“自我”是指我们的自我；我们如何认同自己以及我们如何在世界上表达自己。所有程序员都有自我，它对他们编写的代码产生了许多影响。
- en: Showing off with syntax
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 炫耀语法
- en: As a younger programmer, I found my ego getting the better of me quite often.
    I don't presume to say this is a general truth. This is only my experience. Whenever
    I discovered a new JavaScript idiosyncrasy, I would try to exploit and make use
    of it in my next piece of code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个年轻的程序员，我经常发现我的自我占了上风。我不敢说这是一个普遍的真理。这只是我的经验。每当我发现一个新的JavaScript特异功能时，我会尝试在我的下一段代码中加以利用。
- en: 'One example of this is the use of bitwise operators for their flooring effects.
    Traditionally, to floor numbers—to round a number down to its nearest whole number—you''d
    use the native method provided by the language:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个例子是使用位运算符来实现向下取整的效果。传统上，要对数字进行向下取整，即将数字四舍五入到最接近的整数，你会使用语言提供的原生方法：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, at the time, I preferred using bitwise operators to achieve the same
    result:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当时，我更喜欢使用位运算符来实现相同的结果：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What is happening here? Bitwise operators (including `~`, `&`, `|`, and so on)
    are used to mutate bits on operands, but as a side-effect, they will first convert
    their operands into 32-bit integers. This means they'll throw away the decimal
    fraction. To harness this implicit conversion into an integer without changing
    the value of the integer, we can perform, for example, a double bitwise inversion
    using the double tilde (`~~`). This essentially inverts all the bits of the operand
    and then inverts them again. We could also perform a bitwise OR with a zero (`0|...`),
    which will always return the bits of the non-zero operand, thus producing the
    same effect by harnessing the side-effect (the integer conversion) without changing
    the underlying value.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？位运算符（包括`~`、`&`、`|`等）用于改变操作数的位，但作为副作用，它们首先会将它们的操作数转换为32位整数。这意味着它们会丢弃小数部分。为了利用这种隐式转换为整数而不改变整数值，我们可以执行双重位反转，例如使用双波浪号（`~~`）。这实质上是反转操作数的所有位，然后再次反转。我们也可以执行与零的位或运算（`0|...`），这将始终返回非零操作数的位，从而通过利用副作用（整数转换）而不改变基础值来产生相同的效果。
- en: 'Crucially, it''s important to note that this side-effect does not functionally
    match the flooring behavior of `Math.floor` for negative numbers. Note how the
    following two expressions differ:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 至关重要的是要注意，这种副作用在负数的情况下并不与`Math.floor`的向下取整行为功能匹配。请注意以下两个表达式的区别：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It''s easy to see what''s alluring about these cryptic techniques. Their usage
    seems to suggest a high level of language understanding, and that very much appeals
    to the ego. It''s similar to using needlessly long or complex words to convey
    simple ideas: fun to say but alienating to the listener.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些神秘技术的吸引力很容易理解。它们的使用似乎表明了对语言的高水平理解，这非常吸引人的自我。这类似于使用不必要的长或复杂的词来表达简单的想法：说起来很有趣，但对听众来说很难理解。
- en: Techniques like this usually result in code that is less maintainable. The maintainers
    of our code should not be expected to understand the inner workings of rarely
    used operators and should be able to trust that we would not be recklessly employing
    side-effects of language internals to achieve results that can clearly be achieved
    via more familiar and obvious approaches.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的技术通常会导致代码的可维护性降低。我们的代码的维护者不应该被期望理解很少使用的运算符的内部工作原理，并且应该能够相信我们不会轻率地利用语言内部的副作用来实现可以通过更熟悉和明显的方法清晰地实现的结果。
- en: 'Complex or rare syntax is often a vehicle for egotistic code. Another example
    of this lies in the misuse of logical operators to specify control flow:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂或罕见的语法通常是自我代码的载体。另一个例子是错误使用逻辑运算符来指定控制流：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code can be more conventionally, and clearly, expressed as an
    *IF* statement:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码可以更常规、更清晰地表达为一个*IF*语句：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is far clearer, more familiar, and more readable to a larger group of people.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这样更清晰，更熟悉，更易读，适合更多的人群。
- en: Some people argue that we should be able to freely use the entire language to
    its full capability, harnessing all its idiosyncrasies and side-effects to write
    code that is terser and more efficient. This is a fine attitude to take if our
    only goal is to write code that works. But writing *clean *code is about taking
    a considered approach, using techniques that allow us to provide more readability
    and avoiding techniques that do the opposite.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有人认为我们应该能够自由地利用整个语言的全部功能，利用其所有的特异功能和副作用来编写更简洁、更高效的代码。如果我们的唯一目标是编写能够工作的代码，这是一个很好的态度。但编写*干净*的代码是关于采取审慎的方法，使用能够提供更多可读性的技术，并避免那些相反的技术。
- en: It also helps to remember that, fundamentally, code is about communicating intent.
    Communication is as much about the listener as it is about the speaker. Egotistic
    code tends to fall short in this way; it limits the familiarity of your code to
    an elite few who have been blessed with the same knowledge that you have. This
    is not ideal. We should always try to take into account the diverse knowledge
    and capabilities of the people who will have to read, use, and maintain our code.
    This concern should take precedence over our ego.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，从根本上说，代码是关于传达意图的。沟通既关乎听众也关乎说话者。自我代码往往在这方面表现不佳；它将你的代码熟悉度限制在少数精通相同知识的精英之中。这并非理想。我们应该始终考虑到将不得不阅读、使用和维护我们代码的人们的多样知识和能力。这种关注应该优先于我们的自我。
- en: Stubborn opinions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固执的观点
- en: Code is rarely written in isolation; we often work with people to bring projects
    to life. Clean code, therefore, depends on both your approach and the approach
    of the entire team. A team that owns a code base continuously decides the tools,
    conventions, and abstractions that they'll use to achieve their goals. As such,
    members of the team must be able to communicate well and share perspectives, molding
    these perspectives into a clear outcome. Sometimes, compromise is necessary. And
    compromise can often hit the ego.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 代码很少是孤立编写的；我们经常与他人合作将项目变为现实。因此，清晰的代码取决于你的方法和整个团队的方法。持续拥有代码库的团队不断决定他们将用来实现目标的工具、约定和抽象。因此，团队成员必须能够良好沟通并分享观点，将这些观点塑造成明确的结果。有时，妥协是必要的。而妥协往往会伤及自尊。
- en: JavaScript and its tools are susceptible to strong opinions. Over time, we each
    gain experience in working with different approaches and, often through toil and
    pain, end up having a set of beliefs about which approaches we think are best.
    These beliefs may not always match those of our colleagues, though. When there
    is disagreement, the path to resolution is unclear. Without resolution, the team
    and the code base can splinter, causing more damage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript及其工具容易受到强烈意见的影响。随着时间的推移，我们每个人都会在不同的方法中获得经验，并且通常通过辛勤劳动和痛苦，最终形成一套我们认为最好的方法的信念。然而，这些信念可能并不总是与我们的同事相匹配。当存在分歧时，解决的路径是不清晰的。没有解决，团队和代码库可能会分裂，造成更多的损害。
- en: 'Imagine the following scenario between Adam and Susan:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下亚当和苏珊之间的以下情景：
- en: 'Adam: We should use the Foo testing framework; it''s more reliable and simply
    better.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 亚当：我们应该使用Foo测试框架；它更可靠，而且更好。
- en: 'Susan: No, we should definitely use Baz; it''s far superior and has a proven
    track record.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 苏珊：不，我们一定要使用Baz；它更优秀，而且有着成熟的记录。
- en: There are likely many different ways this disagreement could be resolved. We
    could suggest, for example, that both individuals build their case and continue
    to debate the various merits of each testing framework. That may resolve the issue.
    But equally, it may not. The argument may persist, drawing a wedge between the
    individuals and leaving the code base in a state of flux without a firmly chosen
    testing framework. The paths to resolution are not always clear in cases like
    this, but what is clear is that resolution is less likely if uncompromising egos
    are involved. If both Adam and Susan can start to see each other's perspectives,
    broadening their view and un-entrenching themselves from their own opinions, then
    the path to resolution becomes much clearer.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分歧可能有很多不同的解决方法。例如，我们可以建议两个人都提出自己的观点，并继续辩论各种测试框架的优点。这可能会解决问题。但同样，也可能不会。争论可能会持续下去，造成两个人之间的裂痕，并使代码库处于一种没有明确选择测试框架的状态。在这种情况下，解决的路径并不总是清晰的，但清楚的是，如果牵涉到不妥协的自尊心，解决的可能性就会降低。如果亚当和苏珊都能开始看到彼此的观点，拓宽自己的视野，摆脱自己的观点，那么解决的路径就会变得更清晰。
- en: Imposter syndrome
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冒名顶替综合症
- en: Ego, as a delicate trait, is also responsible for our level of faith and belief
    in our own capabilities and opinions. It is no wonder that having a level of belief
    in ourselves is vital to the act of creation and problem-solving in programming.
    In the technology industry especially, **imposter syndrome** seems to be a widespread
    occurrence. Imposter syndrome is characterized by a feeling of being an *imposter—*that
    you are somehow not suitable or sufficiently capable for the role you have, while
    you feel as though others around you are far more capable.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 自尊心作为一种脆弱的特质，也影响着我们对自己能力和观点的信仰。毫无疑问，对自己的信仰是编程中创造和解决问题的关键。尤其在技术行业，**冒名顶替综合症**似乎是一种普遍现象。冒名顶替综合症的特征是一种感觉，即自己是一个*冒名顶替者*——你在某种程度上不适合或不够胜任你所担任的角色，而你觉得周围的其他人要能力更强。
- en: It can be argued that its prevalence in the software industry is due to the
    inherent complexity and wealth of specialties. We can, at best, hope for a high
    level of proficiency in a relatively narrow area but will never be expertly knowledgeable
    in all areas. We are, as we move about in our day-to-day work, ever aware of all
    the things we don't know, and this can understandably create a level of anxiety
    and lack of confidence in our own humble abilities. Such a feeling can sometimes
    cause stress, alienation, and a lack of confidence in our own abilities.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，软件行业中冒名顶替综合症的普遍存在是由于固有的复杂性和专业知识的丰富性。我们最多只能希望在相对狭窄的领域拥有高水平的熟练程度，但永远不会在所有领域都有专业知识。在日常工作中，我们时刻意识到自己不知道的所有事情，这可以理解地造成一种焦虑和对自己谦卑能力的不信任。这种感觉有时会导致压力、疏远和对自己能力的不信任。
- en: 'This may yield the following negative outcomes:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会产生以下负面结果：
- en: '**Lack of decisiveness**: A lack of belief in our own capabilities can result
    in low levels of confidence when making a decision about our code''s architecture;
    not knowing which route to take can often mean the default route is taken, which
    is especially liable to the cargo cults.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏果断**: 对自己能力的信念不足可能导致在决定代码架构时信心水平较低；不知道该选择哪条路线往往意味着采取默认路线，这特别容易形成迷信。'
- en: '**Lack of boldness**: A lack of assertiveness may result in less risk-taking
    and fewer bold decisions being made, but sometimes such decisions need to be made
    to move a project or code base forward. For example, picking a more reliable UI
    or testing framework can be a large and bold risk given the cost of refactoring,
    but can lead to overall improvements in code health.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏大胆**: 缺乏果断可能导致更少的冒险和更少的大胆决策，但有时需要做出这样的决定来推动项目或代码库的进展。例如，选择更可靠的UI或测试框架可能是一个巨大而大胆的风险，考虑到重构的成本，但可以导致代码健康的整体改善。'
- en: '**Lack of communication**: Lacking confidence in our own opinions and skills
    can result in less vital communication occurring, for example, between a programmer
    and the stakeholders of a project. Communication here does not mean being outgoing
    or talkative, but rather identifying key concerns and being sufficiently confident
    in them to advocate change.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏沟通**：对自己的观点和技能缺乏信心可能导致较少重要的沟通发生，例如程序员与项目利益相关者之间的沟通。这里的沟通并不意味着外向或健谈，而是识别关键问题并对其有足够的信心以提倡变革。'
- en: 'The act of programming is an act of communicating our intent, that is, of impressing
    upon the world, maybe in a small way, the way we believe a thing should work.
    It is itself a bold action and a skill that we should not take for granted. If
    you are reading this and are concerned that you may lack specific traits or capabilities,
    I offer the following advice: nobody on the planet is fully capable. Everyone
    has their strengths and weaknesses. It is the diversity of everyone and their
    varying capabilities that will define the success of a project and code base.
    Even if you feel a sense of imposter syndrome, acknowledge that it is natural
    to feel this way and that, in spite of it, you offer more than you might think.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是一种传达意图的行为，也就是说，以某种方式向世界表达我们认为事物应该运作的方式。这本身就是一种大胆的行动和一种我们不应该视为理所当然的技能。如果你正在阅读这篇文章，并担心自己可能缺乏特定的特质或能力，我提供以下建议：地球上没有人是完全有能力的。每个人都有自己的优点和缺点。正是每个人的多样性和他们不同的能力将决定项目和代码库的成功。即使你感到自己是个骗子，也要承认这种感觉是自然的，而且尽管如此，你所能提供的远远超出你的想象。
- en: 'Enemy #4 – The cargo cult'
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敌人＃4 - 模仿行为
- en: In the early 20^(th) century, it was observed that some Melanesian cultures
    would carry out rituals that would emulate Western technologies and behaviors,
    such as building runways and control towers out of wood and clay. They were doing
    this in the hope that material wealth, such as food, would be delivered to them.
    These odd rituals arose because they had previously observed cargo being delivered
    via Western planes and falsely concluded that it was the runway itself that summoned
    the cargo.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪初，人们观察到一些美拉尼西亚文化会进行模仿西方技术和行为的仪式，比如用木头和黏土建造跑道和控制塔。他们这样做是希望物质财富，比如食物，会被送到他们那里。这些奇怪的仪式出现是因为他们之前观察到货物是通过西方飞机送来的，错误地得出结论认为是跑道本身召唤了货物。
- en: Nowadays, within programming, we use the terms *cargo cult* or *cargo culting* to
    broadly describe copying patterns and behaviors without fully understanding their
    true purpose and functionality. When programmers search for a solution online
    and copy and paste the first piece of code they find without consideration as
    to its reliability or safety, they are partaking in act of cargo culting, seeking
    to accomplish some task by utilizing code that appears to be responsible for it
    in some other context.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在编程中，我们使用术语“模仿行为”或“模仿”来广泛描述复制模式和行为，而不完全理解它们真正的目的和功能。当程序员在网上搜索解决方案，并复制并粘贴他们找到的第一段代码，而不考虑其可靠性或安全性时，他们正在进行模仿行为，试图通过使用在其他上下文中似乎负责这个任务的代码来完成某个任务。
- en: 'Cargo culting typically entails the following process:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿行为通常包括以下过程：
- en: The person is embedded in a slightly unfamiliar technical context
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 人处于一个略微陌生的技术环境中
- en: The person sees the effect they wish to emulate
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '- 人看到他们希望模仿的效果'
- en: The person copies code that appears to produce the desired effect
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '- 人复制似乎产生所需效果的代码'
- en: This act can occur both organizationally and technically. Programmers, sometimes
    tasked with tying together disparate technical dependencies that they have little
    expertise in, will often be left with no other option than to cargo cult. And
    organizations, often without time to consider all the fundamentals, will often
    end up cargo culting popular behaviors and processes from other organizations.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为在组织和技术上都可能发生。程序员有时被要求将他们很少了解的不同技术依赖关系联系在一起，通常会别无选择，只能进行模仿。而组织通常没有时间考虑所有的基本原则，往往最终会从其他组织中模仿流行的行为和流程。
- en: Cargo culting code
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '- 模仿代码'
- en: 'To illustrate the act of cargo culting, let''s imagine that a programmer is
    tasked with adding a new HTTP GET route to their Node.js server. They need to
    add the `/about_us` route. They open up the `routes.js` file and, among its many
    lines, find the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明模仿行为，让我们想象一个程序员的任务是向他们的Node.js服务器添加一个新的HTTP GET路由。他们需要添加“/about_us”路由。他们打开“routes.js”文件，在其中的众多行中找到以下代码：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code happens to be using a Node.js framework:  **Express**. Unfortunately,
    however, the programmer is not well versed in the Express API. They see the preceding
    code and seek to emulate it for their own ends:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码碰巧使用了一个Node.js框架：**Express**。不幸的是，程序员对Express API并不很熟悉。他们看到前面的代码，并试图为自己的目的模仿它：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Unfortunately, as you may be able to tell, this programmer has committed the
    act of cargo culting. They've copied code that's used to route traffic toward
    the admin section and have assumed that they should use similar code to route
    traffic toward the about page.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，正如你可能已经注意到的，这位程序员已经犯了模仿的行为。他们复制了用于将流量引导到管理员部分的代码，并假设他们应该使用类似的代码来将流量引导到关于页面。
- en: 'There are a couple of things they''ve missed in doing so:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在这样做时错过了一些事情：
- en: The admin route is, in fact, middleware, which is used to block unauthorized
    users from accessing `/admin`
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员路由实际上是中间件，用于阻止未经授权的用户访问“/admin”。
- en: The `app.use()` method should only be used for middleware, not for a direct
    GET route
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.use()`方法应该只用于中间件，而不是用于直接的GET路由。'
- en: Calling `next()` is something only middleware should be interested in doing
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`next()`只有中间件才会感兴趣
- en: 'If the programmer had taken the time to read the Express documentation, they
    would have discovered that the correct way is more akin to the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序员花时间阅读Express文档，他们会发现正确的方法更接近以下内容：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is a very brief example. Often, the act of cargo culting is more complex.
    It may not involve the direct copying of code, but maybe only the subtle copying
    of patterns or syntax. We may shake our head at the preceding example, sure of
    the knowledge that we would never do such a thing, but we likely already do, in
    less obvious ways.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个非常简短的例子。货物崇拜的行为通常更加复杂。它可能不涉及直接复制代码，而可能只涉及模式或语法的微妙复制。我们可能会对前面的例子摇头，确信自己永远不会做这样的事情，但我们很可能已经以不那么明显的方式做了。
- en: Programmers that are engaged in a project will often rightfully inherit the
    naming, syntax, and whitespace conventions from the existing code base. They may
    do this without thought, naturally reflecting and conforming to the existing paradigms
    without applying their critical skills at every step. This isn't necessarily negative: it
    is the sensible upholding of conventions and presentational consistency. These
    are important qualities. But equally, the mindless copying of such things can
    often result in the pointless proliferation of redundant code, or worse, negative
    effects due to misunderstood code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 参与项目的程序员通常会合理地继承现有代码库的命名、语法和空白符约定。他们可能会在不经意间这样做，自然地反映和符合现有范例，而不是在每一步都应用他们的批判性技能。这并不一定是负面的：这是对约定和表现一致性的明智维护。这些都是重要的品质。但同样地，盲目地复制这些东西往往会导致冗余代码的无谓增加，或者更糟糕的是，由于对代码的误解而产生负面影响。
- en: 'Imagine you''re a first-time programmer and you wanted to add a `hobby` field
    to the following slightly bizarre object:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你是一名初学者程序员，你想要在以下略微奇怪的对象中添加一个`hobby`字段：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It''s easy to imagine that you might be inclined to copy the existing syntax
    when you add your new field:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易想象，当您添加新字段时，您可能倾向于复制现有的语法：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is an entirely reasonable thing for a first-timer to have done. They were
    embedded in an unfamiliar context, saw an effect they wished to emulate, and so
    they adopted the pattern that produced the effect. It is even an understandable
    act by someone experienced, who wants to make the minimal necessary changes to
    the code surgically and without disturbing its surroundings.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于第一次尝试者来说是完全合理的事情。他们处于一个陌生的环境中，看到了他们希望模仿的效果，于是采用了产生这种效果的模式。即使是有经验的人也可以理解这种行为，他们希望对代码进行最小必要的改动，而不影响其周围环境。
- en: 'There is nothing egregiously wrong in this code. It''s functional. However,
    if we are to write code that is maximally maintainable and efficient, then we
    should adopt conventions and syntax that are more widely accepted and conventional.
    So, in this light, there are two specific problems with the preceding code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码并没有明显的错误。它是可用的。然而，如果我们要编写最大程度上可维护和高效的代码，那么我们应该采用更广泛接受和常规的约定和语法。因此，在这种情况下，前述代码存在两个具体问题：
- en: Wrapping every key name in double quotes (unnecessary!)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个键名都用双引号括起来（不必要！）
- en: Wrapping every value in parentheses (unnecessary!)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个值都用括号括起来（不必要！）
- en: 'The non-cargo culted version of the file might look like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 没有进行货物崇拜的文件版本可能如下所示：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However, this file and object will likely live on for months and maybe years
    to come. Nobody will ever question or challenge its syntax as they'll assume it
    must be like that for a reason. There is comfort and ease in conforming to an
    established way of doing something. It is often easier not to challenge it. This
    form of cargo culting is the more insidious type and introduces a lot of inertia
    to projects and teams. We mindlessly adopt practices without questioning their
    continuing validity and suitability.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个文件和对象可能会继续存在数月甚至数年。没有人会质疑或挑战它的语法，因为他们会认为它一定有它的原因。遵循已建立的做事方式会带来舒适和便利。挑战它通常更容易。这种形式的货物崇拜是更隐匿的类型，它给项目和团队引入了很多惯性。我们盲目地采用做法，而不质疑它们的持续有效性和适用性。
- en: Cargo culting tools and libraries
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模仿工具和库
- en: Just as code can be mindlessly copied, so can tools. As JavaScript programmers,
    we are exposed to a quickly shifting landscape of tools and libraries. Every month,
    a new utility or tool seems to be released. The excitement and hyperbole that
    surrounds some of these tools creates fertile ground for cargo cults to erupt.
    Programmers may start to use these new tools, convinced of their merit, without
    building a full understanding of them or properly considering their suitability
    for the project at hand. Tools may be prescribed by companies or managers, with
    non-programmers and programmers alike weighing in based purely on a tool's popularity
    or novelty, without considering how it actually works or how it differs from the
    current approach.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 就像代码可以被盲目地复制一样，工具也可以。作为JavaScript程序员，我们接触到一个快速变化的工具和库的景观。每个月都会发布一个新的实用程序或工具。围绕一些工具产生的兴奋和夸大其词为货物崇拜的爆发创造了肥沃的土壤。程序员可能开始使用这些新工具，相信它们的价值，而没有充分了解它们或正确考虑它们是否适合手头的项目。工具可能被公司或经理指定，非程序员和程序员可能会根据工具的流行度或新颖性发表意见，而不考虑它实际上是如何工作的，或者它与当前方法有何不同。
- en: 'The *cult* in cargo cults tends to be a very persuasive force, telling us that
    if we just use this approach or tool, all our problems will be solved. Naturally,
    this rarely comes to pass. We may only end up exchanging our current set of problems
    for a new set of problems. So, when deciding upon a tool, whether it is a framework,
    library, or any third-party abstraction or service, we should always use a considered
    approach where we ask ourselves the following key questions:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 货物崇拜中的“崇拜”往往是一种非常有说服力的力量，告诉我们，如果我们只是使用这种方法或工具，所有问题都将得到解决。自然地，这很少发生。我们可能最终只是用新问题交换了我们当前的问题。因此，在决定使用工具时，无论是框架、库还是任何第三方抽象或服务，我们都应该始终采用深思熟虑的方法，问自己以下关键问题：
- en: '**Suitability**: Is it the most suitable tool for the problem at hand?'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适用性**：它是否是解决手头问题的最合适的工具？'
- en: '**Reliability**: Does it work reliably and will it continue to do so?'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：它是否可靠地工作，而且将继续如此？'
- en: '**Usability**: Is it simple to use and is it well documented?'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：它是否简单易用并且有良好的文档？'
- en: '**Compatibility**: Does it integrate well with the existing codebase?'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**：它是否与现有的代码库很好地集成？'
- en: '**Adaptability**: Is it adaptable to our changing needs?'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适应性**：它是否适应我们不断变化的需求？'
- en: To avoid cargo culting, we should try to abstain from anecdotes and hearsay,
    instead preferring detailed comparative analyses in which we compare and contrast
    various possibilities to find the most suitable.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免装运崇拜，我们应该尽量避免轶事和道听途说，而更倾向于详细的比较分析，通过比较和对比各种可能性来找到最合适的方案。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we gained an appreciation of some of the most prevalent *enemies* of
    clean code. We discussed how JavaScript itself is a language that, when wielded
    incorrectly, can invite unclean code. We also explored the pitfalls of both teams
    and the individual. We learned that clean code is not merely a characteristic
    of code but a culture that must be fostered both throughout an organization and
    within our own minds.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对一些最普遍的对清晰代码的“敌人”有了一定的了解。我们讨论了JavaScript本身是一种语言，当被错误使用时，会导致不清晰的代码。我们还探讨了团队和个人的陷阱。我们了解到，清晰的代码不仅仅是代码的特征，而是一种必须在整个组织和我们自己的思想中培养的文化。
- en: In the next chapter, we will explore some well-known and some less well-known
    principles of clean code and integrate what we've learned so far into some concrete
    JavaScript abstractions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一些众所周知和一些不太为人知的清晰代码原则，并将我们迄今所学的内容整合到一些具体的JavaScript抽象中。
