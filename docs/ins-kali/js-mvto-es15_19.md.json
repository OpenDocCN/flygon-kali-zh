["```js\nsetTimeout(function(){alert(\"Hello from the past\")}, 5 * 1000);\n```", "```js\nlet xmlhttp = new XMLHttpRequest()\nxmlhttp.onreadystatechange = function()\nif (xmlhttp.readyState==4 && xmlhttp.status==200){\n  //process returned data\n}\n};\nxmlhttp.open(\"GET\", http://some.external.resource, true);\nxmlhttp.send();\n```", "```js\nlet xmlhttp;\nfunction requestData(){\n  xmlhttp = new XMLHttpRequest()\n  xmlhttp.onreadystatechange=processData;\n  xmlhttp.open(\"GET\", http://some.external.resource, true);\n  xmlhttp.send();\n}\n\nfunction processData(){\n  if (xmlhttp.readyState==4 &&xmlhttp.status==200){\n    //process returned data\n  }\n}\n```", "```js\n$.getJSON('http://some.external.resource', function(json){\n  //process returned data\n});\n```", "```js\n$.ajax('http://some.external.resource',\n  { success: function(json){\n      //process returned data\n    },\n    error: function(){\n      //process failure\n    },\n    dataType: \"json\"\n});\n```", "```js\nexport class HamiltonianTourOptions{\n  onTourStart: Function;\n  onEntryToAttraction: Function;\n  onExitFromAttraction: Function;\n  onTourCompletion: Function;\n}\n```", "```js\nclass HamiltonianTour {\n  constructor(options) {\n    this.options = options;\n  }\n  StartTour() {\n    if (this.options.onTourStart && typeof (this.options.onTourStart) === \"function\")\n      this.options.onTourStart();\n      this.VisitAttraction(\"King's Landing\");\n      this.VisitAttraction(\"Winterfell\");\n      this.VisitAttraction(\"Mountains of Dorne\");\n      this.VisitAttraction(\"Eyrie\");\n    if (this.options.onTourCompletion && typeof (this.options.onTourCompletion) === \"function\")\n      this.options.onTourCompletion();\n  }\n  VisitAttraction(AttractionName) {\n    if (this.options.onEntryToAttraction && typeof (this.options.onEntryToAttraction) === \"function\")\n      this.options.onEntryToAttraction(AttractionName);\n      //do whatever one does in a Attraction\n    if (this.options.onExitFromAttraction && typeof (this.options.onExitFromAttraction) === \"function\")\n      this.options.onExitFromAttraction(AttractionName);\n  }\n}\n```", "```js\nvar tour = new HamiltonianTour({\n  onEntryToAttraction: function(cityname){console.log(\"I'm delighted to be in \" + cityname)}});\n      tour.StartTour();\n```", "```js\nI'm delighted to be in King's Landing\nI'm delighted to be in Winterfell\nI'm delighted to be in Mountains of Dorne\nI'm delighted to be in Eyrie\n```", "```js\nls|sort|grep \"^[gb].*f$\"\n```", "```js\nstimms@ubuntu1:/etc$ ls|sort|grep \"^[gb].*f$\"\nblkid.conf\nbogofilter.cf\nbrltty.conf\ngai.conf\ngconf\ngroff\ngssapi_mech.conf\n```", "```js\n[1..10] |>List.filter (fun n -> n% 2 = 0);;\n```", "```js\n10.5 |> float |>Math.Sqrt |>Math.Round\n```", "```js\nMath.Round(Math.Sqrt((float)10.5))\n```", "```js\nArray.prototype.where = function (inclusionTest) {\n  let results = [];\n  for (let i = 0; i<this.length; i++) {\n    if (inclusionTest(this[i]))\n      results.push(this[i]);\n  }\n  return results;\n};\n```", "```js\nvar items = [1,2,3,4,5,6,7,8,9,10];\nitems.where(function(thing){ return thing % 2 ==0;});\n```", "```js\nitems.where(function(thing){ return thing % 2 ==0;})\n  .where(function(thing){ return thing % 3 == 0;});\n```", "```js\nArray.prototype.select=function(projection){\n  let results = [];\n  for(let i = 0; i<this.length;i++){\n    results.push(projection(this[i]));\n  }\n  return results;\n};\n```", "```js\nlet children = [{ id: 1, Name: \"Rob\" },\n{ id: 2, Name: \"Sansa\" },\n{ id: 3, Name: \"Arya\" },\n{ id: 4, Name: \"Brandon\" },\n{ id: 5, Name: \"Rickon\" }];\nlet filteredChildren = children.where(function (x) {\n  return x.id % 2 == 0;\n}).select(function (x) {\n  return x.Name;\n});\n```", "```js\nlet children = [{ id: 1, Name: \"Rob\" },\n{ id: 2, Name: \"Sansa\" },\n{ id: 3, Name: \"Arya\" },\n{ id: 4, Name: \"Brandon\" },\n{ id: 5, Name: \"Rickon\" }];\nlet evenIds = [];\nfor(let i=0; i<children.length;i++)\n{\n  if(children[i].id%2==0)\n    evenIds.push(children[i]);\n}\nlet names = [];\nfor(let i=0; i< evenIds.length;i++)\n{\n  names.push(evenIds[i].name);\n}\n```", "```js\nlet result = \"\";\nlet multiArray = [[1,2,3], [\"a\", \"b\", \"c\"]];\nfor(vari=0; i<multiArray.length; i++)\n  for(var j=0; i<multiArray[i].length; j++)\n    result += multiArray[i][j];\n```", "```js\nlet result = \"\";\nlet multiArray = [[1,2,3], [\"a\", \"b\", \"c\"]];\nfor(let i=0; i<multiArray.length; i++)\n  for(let j=0; j<multiArray[i].length; j++)\n    result +=multiArray[i][j];\n```", "```js\nlet peasants = [\n  {name: \"Jory Cassel\", taxesOwed: 11, bankBalance: 50},\n  {name: \"VardisEgen\", taxesOwed: 15, bankBalance: 20}];\n```", "```js\nTaxCollector.prototype.collect = function (items, value, projection) {\n  if (items.length> 1)\n    return projection(items[0]) + this.collect(items.slice(1), value, projection);\n  return projection(items[0]);\n};\n```", "```js\nfunction (item) {\n  return Math.min(item.moneyOwed, item.bankBalance);\n}\n```", "```js\nlet Fibonacci = (function () {\n  function Fibonacci() {\n  }\n  Fibonacci.prototype.NaieveFib = function (n) {\n    if (n == 0)\n      return 0;\n    if (n <= 2)\n      return 1;\n    return this.NaieveFib(n - 1) + this.NaieveFib(n - 2);\n  };\n  return Fibonacci;\n})();\n```", "```js\nlet Fibonacci = (function () {\n  function Fibonacci() {\n    this.memoizedValues = [];\n  }\n\n  Fibonacci.prototype.MemetoFib = function (n) {\n    if (n == 0)\n      return 0;\n    if (n <= 2)\n      return 1;\n    if (!this. memoizedValues[n])\n      this. memoizedValues[n] = this.MemetoFib(n - 1) + this.MemetoFib(n - 2);\n    return this. memoizedValues[n];\n  };\n  return Fibonacci;\n})();\n```", "```js\nlet numberOfQueens = 1;\nconst numberOfKings = 1;\nnumberOfQueens++;\nnumberOfKings++;\nconsole.log(numberOfQueens);\nconsole.log(numberOfKings);\n```", "```js\n2\n1\n```", "```js\nlet consts = Object.freeze({ pi : 3.141});\nconsts.pi = 7;\nconsole.log(consts.pi);//outputs 3.141\n```", "```js\n\"use strict\";\nvar consts = Object.freeze({ pi : 3.141});\nconsts.pi = 7;\n```", "```js\nconsts.pi = 7;\n          ^\nTypeError: Cannot assign to read only property 'pi' of #<Object>\n```", "```js\nvar t = Object.create(Object.prototype,\n{ value: { writable: false,\n  value: 10}\n});\nt.value = 7;\nconsole.log(t.value);//prints 10\n```", "```js\nclass Bakery {\n  constructor() {\n    this.requiredBreads = [];\n  }\n  orderBreadType(breadType) {\n    this.requiredBreads.push(breadType);\n  }\n}\n```", "```js\nvar Bakery = (function () {\n  function Bakery() {\n    this.requiredBreads = [];\n  }\n  Bakery.prototype.orderBreadType = function (breadType) {\n    this.requiredBreads.push(breadType);\n  };\n```", "```js\npickUpBread(breadType) {\n  console.log(\"Picup of bread \" + breadType + \" requested\");\n  if (!this.breads) {\n    this.createBreads();\n  }\n  for (var i = 0; i < this.breads.length; i++) {\n    if (this.breads[i].breadType == breadType)\n      return this.breads[i];\n  }\n}\ncreateBreads() {\n  this.breads = [];\n  for (var i = 0; i < this.requiredBreads.length; i++) {\n    this.breads.push(new Bread(this.requiredBreads[i]));\n  }\n}\n```", "```js\nlet bakery = new Westeros.FoodSuppliers.Bakery();\nbakery.orderBreadType(\"Brioche\");\nbakery.orderBreadType(\"Anadama bread\");\nbakery.orderBreadType(\"Chapati\");\nbakery.orderBreadType(\"Focaccia\");\n\nconsole.log(bakery.pickUpBread(\"Brioche\").breadType + \"picked up\");\n```", "```js\nPickup of bread Brioche requested.\nBread Brioche created.\nBread Anadama bread created.\nBread Chapati created.\nBread Focaccia created.\nBrioche picked up\n```"]