["```py\n    def datestr2num(s):\n       return datetime.datetime.strptime(s, \"%d-%m-%Y\").toordinal()\n    dates, closes=np.loadtxt('AAPL.csv', delimiter=',', usecols=(1, 6), converters={1:datestr2num}, unpack=True)\n    ```", "```py\n    indices = np.lexsort((dates, closes))\n    print(\"Indices\", indices)\n    print([\"%s %s\" % (datetime.date.fromordinal(dates[i]),\n      closes[i]) for i in indices])\n    ```", "```py\n    Indices [ 0 16  1 17 18  4  3  2  5 28 19 21 15  6 29 22 27 20  9  7 25 26 10  8 14 11 23 12 24 13]\n    ['2011-01-28 336.1', '2011-02-22 338.61', '2011-01-31 339.32', '2011-02-23 342.62', '2011-02-24 342.88', '2011-02-03 343.44', '2011-02-02 344.32', '2011-02-01 345.03', '2011-02-04 346.5', '2011-03-10 346.67', '2011-02-25 348.16', '2011-03-01 349.31', '2011-02-18 350.56', '2011-02-07 351.88', '2011-03-11 351.99', '2011-03-02 352.12', '2011-03-09 352.47', '2011-02-28 353.21', '2011-02-10 354.54', '2011-02-08 355.2', '2011-03-07 355.36', '2011-03-08 355.76', '2011-02-11 356.85', '2011-02-09 358.16', '2011-02-17 358.3', '2011-02-14 359.18', '2011-03-03 359.56', '2011-02-15 359.9', '2011-03-04 360.0', '2011-02-16 363.13']\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport datetime\n\ndef datestr2num(s):\n   return datetime.datetime.strptime(s, \"%d-%m-%Y\").toordinal()\n\ndates, closes=np.loadtxt('AAPL.csv', delimiter=',', usecols=(1, 6), converters={1:datestr2num}, unpack=True)\nindices = np.lexsort((dates, closes))\n\nprint(\"Indices\", indices)\nprint([\"%s %s\" % (datetime.date.fromordinal(int(dates[i])),  closes[i]) for i in indices])\n```", "```py\n$ ipython\nIn [1]: import numpy as np\n\n```", "```py\nIn [2]: np.random.seed(20)\n\nIn [3]: a = np.random.random_integers(0, 9, 9)\n\nIn [4]: a\nOut[4]: array([3, 9, 4, 6, 7, 2, 0, 6, 8])\n\n```", "```py\nIn [5]: np.partition(a, 4)\nOut[5]: array([0, 2, 3, 4, 6, 6, 7, 9, 8])\n\n```", "```py\n    np.random.seed(42)\n    complex_numbers = np.random.random(5) + 1j * \n    np.random.random(5)\n    print(\"Complex numbers\\n\", complex_numbers)\n    ```", "```py\n    print(\"Sorted\\n\", np.sort_complex(complex_numbers))\n    ```", "```py\n    Sorted\n    [ 0.39342751+0.34955771j  0.40597665+0.77477433j  0.41516850+0.26221878j\n     0.86631422+0.74612422j  0.92293095+0.81335691j]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nnp.random.seed(42)\ncomplex_numbers = np.random.random(5) + 1j * np.random.random(5)\nprint(\"Complex numbers\\n\", complex_numbers)\n\nprint(\"Sorted\\n\", np.sort_complex(complex_numbers))\n```", "```py\n    >>> a = np.array([2, 4, 8])\n    >>> np.argmax(a)\n    2\n\n    ```", "```py\n    >>> b = np.array([np.nan, 2, 4])\n    >>> np.nanargmax(b)\n    2\n\n    ```", "```py\n    >>> a = np.array([2, 4, 8])\n    >>> np.argwhere(a <= 4)\n    array([[0],\n     [1]])\n\n    ```", "```py\n    a = np.arange(5)\n    ```", "```py\n    indices = np.searchsorted(a, [-2, 7])\n    print(\"Indices\", indices)\n    ```", "```py\n    Indices [0 5]\n\n    ```", "```py\n    print(\"The full array\", np.insert(a, indices, [-2, 7]))\n    ```", "```py\n    The full array [-2  0  1  2  3  4  7]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\na = np.arange(5)\nindices = np.searchsorted(a, [-2, 7])\nprint(\"Indices\", indices)\n\nprint(\"The full array\", np.insert(a, indices, [-2, 7]))\n```", "```py\n    a = np.arange(7)\n    ```", "```py\n    condition = (a % 2) == 0\n    ```", "```py\n    print(\"Even numbers\", np.extract(condition, a))\n    ```", "```py\n    Even numbers [0 2 4 6]\n\n    ```", "```py\n    print(\"Non zero\", np.nonzero(a))\n    ```", "```py\n    Non zero (array([1, 2, 3, 4, 5, 6]),)\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\na = np.arange(7)\ncondition = (a % 2) == 0\nprint(\"Even numbers\", np.extract(condition, a))\nprint(\"Non zero\", np.nonzero(a))\n```", "```py\nprint(\"Future value\", np.fv(0.03/4, 5 * 4, -10, -1000))\n```", "```py\nFuture value 1376.09633204\n\n```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(\"Future value\", np.fv(0.03/4, 5 * 4, -10, -1000))\n\nfvals = []\n\nfor i in xrange(1, 10):\n   fvals.append(np.fv(.03/4, i * 4, -10, -1000))\n\nplt.plot(range(1, 10), fvals, 'bo')\nplt.title('Future value, 3 % interest,\\n Quarterly payment of 10')\nplt.xlabel('Saving periods in years')\nplt.ylabel('Future value')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\nprint(\"Present value\", np.pv(0.03/4, 5 * 4, -10, 1376.09633204))\n```", "```py\nPresent value -999.999999999\n\n```", "```py\n    cashflows = np.random.randint(100, size=5)\n    cashflows = np.insert(cashflows, 0, -100)\n    print(\"Cashflows\", cashflows)\n    ```", "```py\n    Cashflows [-100   38   48   90   17   36]\n\n    ```", "```py\n    print(\"Net present value\", np.npv(0.03, cashflows))\n    ```", "```py\n    Net present value 107.435682443\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\ncashflows = np.random.randint(100, size=5)\ncashflows = np.insert(cashflows, 0, -100)\nprint(\"Cashflows\", cashflows)\n\nprint(\"Net present value\", np.npv(0.03, cashflows))\n```", "```py\nprint(\"Internal rate of return\", np.irr([-100, 38, 48, 90, 17, 36]))\n```", "```py\nInternal rate of return 0.373420226888\n\n```", "```py\nprint(\"Payment\", np.pmt(0.01/12, 12 * 30, 10000000))\n```", "```py\nPayment -32163.9520447\n\n```", "```py\nprint(\"Number of payments\", np.nper(0.10/12, -100, 9000))\n```", "```py\nNumber of payments 167.047511801\n\n```", "```py\nprint(\"Interest rate\", 12 * np.rate(167, -100, 9000, 0))\n```", "```py\nInterest rate 0.0999756420664\n\n```", "```py\n    window = np.bartlett(42)\n    ```", "```py\n    plt.plot(window)\n    plt.show()\n    ```", "```py\n    closes=np.loadtxt('AAPL.csv', delimiter=',', usecols=(6,), converters={1:datestr2num}, unpack=True)\n    N = 5\n    window = np.blackman(N)\n    smoothed = np.convolve(window/window.sum(),\n      closes, mode='same')\n    ```", "```py\n    plt.plot(smoothed[N:-N], lw=2, label=\"smoothed\")\n    plt.plot(closes[N:-N], label=\"closes\")\n    plt.legend(loc='best')\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import datestr2num\n\ncloses=np.loadtxt('AAPL.csv', delimiter=',', usecols=(6,), converters={1:datestr2num}, unpack=True)\nN = 5\nwindow = np.blackman(N)\nsmoothed = np.convolve(window/window.sum(), closes, mode='same')\nplt.plot(smoothed[N:-N], lw=2, label=\"smoothed\")\nplt.plot(closes[N:-N], '--', label=\"closes\")\nplt.title('Blackman window')\nplt.xlabel('Days')\nplt.ylabel('Price ($)')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    window = np.hamming(42)\n    ```", "```py\n    plt.plot(window)\n    plt.show()\n    ```", "```py\n    window = np.kaiser(42, 14)\n    ```", "```py\n    plt.plot(window)\n    plt.show()\n    ```", "```py\n    x = np.linspace(0, 4, 100)\n    ```", "```py\n    vals = np.i0(x)\n    ```", "```py\n    plt.plot(x, vals)\n    plt.show()\n    ```", "```py\n    x = np.linspace(0, 4, 100)\n    ```", "```py\n    vals = np.sinc(x)\n    ```", "```py\n    plt.plot(x, vals)\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 4, 100)\nvals = np.sinc(x)\n\nplt.plot(x, vals)\nplt.title('Sinc function')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 4, 100)\nxx = np.outer(x, x)\nvals = np.sinc(xx)\n\nplt.imshow(vals)\nplt.title('Sinc 2D')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.show()\n```"]