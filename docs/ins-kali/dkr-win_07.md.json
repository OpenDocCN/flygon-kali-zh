["```\n{\n  \"Homepage\": {\n    \"Url\": \"http://nerd-dinner-hompage\"\n  },\n  \"ConnectionStrings\": {\n    \"UsersContext\": \"Data Source=nerd-dinner-db...\",\n    \"NerdDinnerContext\": \"Data Source=nerd-dinner-db...\"\n  },\n  \"Apis\": {    \n    \"IpInfoDb\": {\n      \"Key\": \"\"\n    },\n    \"BingMaps\": {\n      \"Key\": \"\"\n    }      \n  }\n}\n```", "```\nApis:BingMaps:Key=[your-key-here]\nApis:IpInfoDb:Key=[your-key-here]\n```", "```\ndocker container run -d -P `\n --name nerd-dinner-web `\n --env-file api-keys.env `\n dockeronwindows/ch05-nerd-dinner-web:2e\n```", "```\n[Required(ErrorMessage = \"Description is required\")]\n[StringLength(256, ErrorMessage = \"Description may not be longer than 256 characters\")]\n[DataType(DataType.MultilineText)]\npublic string Description { get; set; }\n```", "```\nif (ModelState.IsValid)\n{\n  dinner.HostedBy = User.Identity.Name;\n  var eventMessage = new DinnerCreatedEvent\n  {\n    Dinner = Mapper.Map<entities.Dinner>(dinner),\n    CreatedAt = DateTime.UtcNow\n  };\n  MessageQueue.Publish(eventMessage);\n  return RedirectToAction(\"Index\");\n}\n```", "```\nvar dinner = Mapper.Map<models.Dinner>(eventMessage.Dinner);\nusing (var db = new NerdDinnerContext())\n{\n  dinner.RSVPs = new List<RSVP>\n  {\n    new RSVP\n    {\n      AttendeeName = dinner.HostedBy\n    }\n  };\n  db.Dinners.Add(dinner);\n  db.SaveChanges();\n}\n```", "```\n# escape=` FROM mcr.microsoft.com/windows/servercore:ltsc2019 CMD [\"NerdDinner.MessageHandlers.SaveDinner.exe\"]\n\nWORKDIR C:\\save-handler\nCOPY --from=dockeronwindows/ch05-nerd-dinner-builder:2e `\n     C:\\src\\NerdDinner.MessageHandlers.SaveDinner\\obj\\Release\\ . \n```", "```\nclass Program\n{\n  private static ManualResetEvent _ResetEvent = new ManualResetEvent(false);\n\n  static void Main(string[] args)\n  {\n    // set up message listener\n    _ResetEvent.WaitOne();\n  }\n}\n```", "```\ndocker container run --detach `\n --name message-queue `\n dockeronwindows/ch05-nats:2e\n```", "```\n> docker container logs message-queue\n[7996] 2019/02/09 15:40:05.857320 [INF] Starting nats-server version 1.4.1\n[7996] 2019/02/09 15:40:05.858318 [INF] Git commit [3e64f0b]\n[7996] 2019/02/09 15:40:05.859317 [INF] Starting http monitor on 0.0.0.0:8222\n[7996] 2019/02/09 15:40:05.859317 [INF] Listening for client connections on 0.0.0.0:4222\n[7996] 2019/02/09 15:40:05.859317 [INF] Server is ready\n[7996] 2019/02/09 15:40:05.948151 [INF] Listening for route connections on 0.0.0.0:6222\n```", "```\ndocker container run -d `\n  --name message-queue `\n dockeronwindows/ch05-nats:2e;\n\ndocker container run -d -p 1433  `\n  --name nerd-dinner-db `\n  -v C:\\databases\\nd:C:\\data  `\n dockeronwindows/ch03-nerd-dinner-db:2e; docker container run -d `\n  --name nerd-dinner-save-handler  `\n dockeronwindows/ch05-nerd-dinner-save-handler:2e; docker container run -d `\n  --name nerd-dinner-homepage `\n dockeronwindows/ch03-nerd-dinner-homepage:2e; docker container run -d -p 80  `\n  --name nerd-dinner-web `\n  --env-file api-keys.env `\n dockeronwindows/ch05-nerd-dinner-web:2e;\n```", "```\n> docker container logs nerd-dinner-save-handler\n\nConnecting to message queue url: nats://message-queue:4222\nListening on subject: events.dinner.created, queue: save-dinner-handler\nReceived message, subject: events.dinner.created\nSaving new dinner, created at: 2/10/2019 8:22:16 PM; event ID: a6340c95-3629-4c0c-9a11-8a0bce8e6d91\nDinner saved. Dinner ID: 1; event ID: a6340c95-3629-4c0c-9a11-8a0bce8e6d91\n```", "```\nprotected  override  string  GetAllSqlQuery  =>  \"SELECT *, Location.Lat as Latitude... FROM Dinners\"; public  override  IEnumerable<Dinner> GetAll()\n{ _logger.LogDebug(\"GetAll - executing SQL query: '{0}'\", GetAllSqlQuery); using (IDbConnection  dbConnection  =  Connection)\n  { dbConnection.Open(); return  dbConnection.Query<Dinner, Coordinates, Dinner>( GetAllSqlQuery, \n      (dinner,coordinates) => { dinner.Coordinates  =  coordinates; return  dinner;\n      }, splitOn: \"LocationId\");\n   }\n}\n```", "```\nif (bool.Parse(Config.Current[\"DinnerApi:Enabled\"]))\n{\n  var  client  =  new  RestClient(Config.Current[\"DinnerApi:Url\"]);\n  var  request  =  new  RestRequest(\"dinners\");\n  var  response  =  client.Execute<List<Dinner>>(request);\n  var  dinners  =  response.Data.Where(d  =>  d.EventDate  >=  DateTime.Now).OrderBy(d  =>  d.EventDate);\n  return  View(dinners.ToPagedList(pageIndex, PageSize)); } else {\n  var  dinners  =  db.Dinners.Where(d  =>  d.EventDate  >=  DateTime.Now).OrderBy(d  =>  d.EventDate);\n  return  View(dinners.ToPagedList(pageIndex, PageSize)); }\n```", "```\ndocker container run -d -P  `\n  --volume \\\\.\\pipe\\docker_engine:\\\\.\\pipe\\docker_engine `\n sixeyed/traefik:v1.7.8-windowsservercore-ltsc2019 `\n  --docker --docker.endpoint=npipe:////./pipe/docker_engine\n```", "```\ndocker container run -d `\n  --name nerd-dinner-api `\n  -l \"traefik.frontend.rule=Host:api.nerddinner.local\"  `  dockeronwindows/ch05-nerd-dinner-api:2e;\n```", "```\ndocker container rm -f nerd-dinner-homepage docker container rm -f nerd-dinner-web\n```", "```\ndocker container run -d -p 80:80  `\n  -v \\\\.\\pipe\\docker_engine:\\\\.\\pipe\\docker_engine `\n sixeyed/traefik:v1.7.8-windowsservercore-ltsc2019 `\n  --api --docker --docker.endpoint=npipe:////./pipe/docker_engine  docker container run -d `\n  --name nerd-dinner-homepage ` -l \"traefik.frontend.rule=Path:/,/css/site.css\"  `   -l \"traefik.frontend.priority=10\"  `\n dockeronwindows/ch03-nerd-dinner-homepage:2e;\n\ndocker container run -d `\n  --name nerd-dinner-web `\n  --env-file api-keys.env `\n  -l \"traefik.frontend.rule=PathPrefix:/\"  `\n  -l \"traefik.frontend.priority=1\"  `   -e \"DinnerApi:Enabled=true\"  `\n dockeronwindows/ch05-nerd-dinner-web:2e; docker container run -d `\n  --name nerd-dinner-api ` -l \"traefik.frontend.rule=PathPrefix:/api\"  `\n  -l \"traefik.frontend.priority=5\"  `\n dockeronwindows/ch05-nerd-dinner-api:2e;\n```", "```\n127.0.0.1  nerddinner.local\n127.0.0.1  api.nerddinner.local\n```", "```\n docker container run -d -p 9200 `\n --name elasticsearch ` --env ES_JAVA_OPTS='-Xms512m -Xmx512m' `\n sixeyed/elasticsearch:5.6.11-windowsservercore-ltsc2019\n```", "```\nvar eventMessage = MessageHelper.FromData<DinnerCreatedEvent>(e.Message.Data);\nvar dinner = Mapper.Map<documents.Dinner>(eventMessage.Dinner);\nvar  node  =  new  Uri(Config.Current[\"Elasticsearch:Url\"]);\nvar client = new ElasticClient(node);\nclient.Index(dinner, idx => idx.Index(\"dinners\"));\n```", "```\n# escape=` FROM microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019 AS builder WORKDIR C:\\src COPY src . RUN nuget restore\n```", "```\nRUN msbuild ...\\NerdDinner.csproj /p:OutputPath=c:\\nerd-dinner-web; ` msbuild ...\\NerdDinner.MessageHandlers.SaveDinner.csproj /p:OutputPath=c:\\save-handler; `\n    dotnet publish -o C:\\index-handler ...\\NerdDinner.MessageHandlers.IndexDinner.csproj; `\n    dotnet publish -o C:\\dinner-api ...\\NerdDinner.DinnerApi.csproj\n```", "```\ndocker image build `\n --tag dockeronwindows/ch05-nerd-dinner-builder `\n --file ch05-nerd-dinner-builder\\Dockerfile .\n```", "```\n# escape=` FROM microsoft/dotnet:2.1-aspnetcore-runtime-nanoserver-1809 EXPOSE 80 WORKDIR /dinner-api ENTRYPOINT [\"dotnet\", \"NerdDinner.DinnerApi.dll\"] COPY --from=dockeronwindows/ch05-nerd-dinner-builder:2e C:\\dinner-api .\n```", "```\n# escape=` FROM microsoft/dotnet:2.1-runtime-nanoserver-1809 CMD [\"dotnet\", \"NerdDinner.MessageHandlers.IndexDinner.dll\"] WORKDIR /index-handler COPY --from=dockeronwindows/ch05-nerd-dinner-builder:2e C:\\index-handler .\n```", "```\n docker container run -d `\n  --name elasticsearch `\n  --env ES_JAVA_OPTS='-Xms512m -Xmx512m'  `\n sixeyed/elasticsearch:5.6.11-windowsservercore-ltsc2019; docker container run -d `\n  --name kibana `\n  -l \"traefik.frontend.rule=Host:kibana.nerddinner.local\"  `\n sixeyed/kibana:5.6.11-windowsservercore-ltsc2019; docker container run -d `\n  --name nerd-dinner-index-handler `\n dockeronwindows/ch05-nerd-dinner-index-handler:2e; \n```", "```\n> docker container logs nerd-dinner-save-handler\nConnecting to message queue url: nats://message-queue:4222\nListening on subject: events.dinner.created, queue: save-dinner-handler\nReceived message, subject: events.dinner.created\nSaving new dinner, created at: 2/11/2019 10:18:32 PM; event ID: 9919cd1e-2b0b-41c7-8019-b2243e81a412\nDinner saved. Dinner ID: 2; event ID: 9919cd1e-2b0b-41c7-8019-b2243e81a412\n\n> docker container logs nerd-dinner-index-handler\nConnecting to message queue url: nats://message-queue:4222\nListening on subject: events.dinner.created, queue: index-dinner-handler\nReceived message, subject: events.dinner.created\nIndexing new dinner, created at: 2/11/2019 10:18:32 PM; event ID: 9919cd1e-2b0b-41c7-8019-b2243e81a412\n```"]