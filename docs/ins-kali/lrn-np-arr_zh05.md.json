["```py\nmins = signal.argrelmin(data)[0]\nmaxs = signal.argrelmax(data)[0]\n```", "```py\nimport numpy as np\nimport sys\nimport matplotlib.pyplot as plt\nfrom scipy import signal\n\ndata = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1,), unpack=True, skiprows=1) \n##reverse order\ndata = data[::-1]\n\nmins = signal.argrelmin(data)[0]\nmaxs = signal.argrelmax(data)[0]\nextrema = np.concatenate((mins, maxs))\n\nyear_range = np.arange(1700, 1700 + len(data))\n\nplt.plot(1700 + extrema, data[extrema], 'go')\nplt.plot(year_range, data)\nplt.show()\n```", "```py\nspl_min = interpolate.interp1d(mins, data[mins], kind='cubic')\nmin_rng = np.arange(mins.min(), mins.max())\nl_env = spl_min(min_rng)\n```", "```py\nimport numpy as np\nimport sys\nimport matplotlib.pyplot as plt\nfrom scipy import signal\nfrom scipy import interpolate\n\ndata = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1,), unpack=True, skiprows=1) \n##reverse order\ndata = data[::-1]\n\nmins = signal.argrelmin(data)[0]\nmaxs = signal.argrelmax(data)[0]\nextrema = np.concatenate((mins, maxs))\n\nyear_range = np.arange(1700, 1700 + len(data))\nspl_min = interpolate.interp1d(mins, data[mins], kind='cubic')\nmin_rng = np.arange(mins.min(), mins.max())\nl_env = spl_min(min_rng)\n\nspl_max = interpolate.interp1d(maxs, data[maxs], kind='cubic')\nmax_rng = np.arange(maxs.min(), maxs.max())\nu_env = spl_max(max_rng)\n\ninclusive_rng = np.arange(max(min_rng[0], max_rng[0]), min(min_rng[-1], max_rng[-1]))\nmid = (spl_max(inclusive_rng) + spl_min(inclusive_rng))/2\n\nplt.plot(year_range, data)\nplt.plot(1700 + min_rng, l_env, '-x')\nplt.plot(1700 + max_rng, u_env, '-x')\nplt.plot(1700 + inclusive_rng, mid, '--')\nplt.show()\n```", "```py\nweights = np.exp(np.linspace(-1., 0., N))\nweights /= weights.sum()\n```", "```py\ndef sma(arr, n):\n   weights = np.ones(n) / n\n\n   return np.convolve(weights, arr)[n-1:-n+1]\n```", "```py\nimport numpy as np\nimport sys\nimport matplotlib.pyplot as plt\n\ndata = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1,),        \nunpack=True, skiprows=1) \n##reverse order\ndata = data[::-1]\n\nyear_range = np.arange(1700, 1700 + len(data))\n\ndef sma(arr, n):\n   weights = np.ones(n) / n\n\n   return np.convolve(weights, arr)[n-1:-n+1]\n\nsma11 = sma(data, 11)\nsma22 = sma(data, 22)\n\nplt.plot(year_range, data, label='Data')\nplt.plot(year_range[10:], sma11, '-x', label='SMA 11')\nplt.plot(year_range[21:], sma22, '--', label='SMA 22')\nplt.legend()\nplt.show()\n```", "```py\nimport numpy as np\nimport sys\nimport matplotlib.pyplot as plt\n\ndef smooth(weights, arr):\n   return np.convolve(weights/weights.sum(), arr)\n\ndata = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1,), unpack=True, skiprows=1) \n##reverse order\ndata = data[::-1]\n\n##Select last 50 years\ndata = data[-50:]\nyear_range = np.arange(1963, 2013)\nprint len(data), len(year_range)\n\nplt.plot(year_range, data, label=\"Data\")\nplt.plot(year_range, smooth(np.hanning(22), data)[21:], 'x', label='Hanning 22')\nplt.plot(year_range, smooth(np.bartlett(22), data)[21:], 'o', label='Bartlett 22')\nplt.plot(year_range, smooth(np.blackman(22), data)[21:], '--', label='Blackman 22')\nplt.plot(year_range, smooth(np.hamming(22), data)[21:], '^', label='Hamming 22')\nplt.plot(year_range, smooth(np.kaiser(22, 14), data)[21:], ':', label='Kaiser 22')\nplt.legend()\nplt.show()\n```", "```py\n    df = sm.datasets.sunspots.load_pandas().data\n\n    df.index = pandas.Index(sm.tsa.datetools.dates_from_range('1700', '2008'))\n    del df[\"YEAR\"]\n    ```", "```py\n    model = sm.tsa.ARMA(df, (2,1)).fit()\n    ```", "```py\n    prediction = model.predict('1984', str(year_today), dynamic=True)\n    ```", "```py\nimport numpy as np\nfrom scipy import stats\nimport pandas\n\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport datetime\n\ndf = sm.datasets.sunspots.load_pandas().data\n\ndf.index = pandas.Index(sm.tsa.datetools.dates_from_range('1700', '2008'))\ndel df[\"YEAR\"]\n\nmodel = sm.tsa.ARMA(df, (2,1)).fit()\n\nyear_today = datetime.date.today().year\n\n##Big Brother is watching you!\nprediction = model.predict('1984', str(year_today), dynamic=True)\n\ndf.plot()\nprediction.plot(style='--', label='Prediction');\nplt.legend();\nplt.show()\n```", "```py\nb,a = scipy.signal.iirdesign(wp=0.2, ws=0.1, gstop=60, gpass=1, ftype='but ter')\n```", "```py\nfiltered = scipy.signal.lfilter(b, a, data)\n```", "```py\n    def calc_adf(x, y):\n        result = stat.OLS(x, y).fit()    \n        return ts.adfuller(result.resid)\n    ```", "```py\n    N = 501\n    t = np.linspace(-2 * np.pi, 2 * np.pi, N)\n    sine = np.sin(np.sin(t))\n    print \"Self ADF\", calc_adf(sine, sine)\n    ```", "```py\n    Self ADF (2.9830728873654705e-17, 0.95853208606005602, 0, 500, {'5%': -2.8673378563200003, '1%': -3.4434963794639999, '10%': -2.5698580359999998}, -35895.784416878145)\n\n    ```", "```py\n    noise = np.random.normal(0, .01, N)\n    print \"ADF sine with noise\", calc_adf(sine, sine + noise)\n    ```", "```py\n    ADF sine with noise (-23.84029624339999, 0.0, 0, 500, {'5%': -2.8673378563200003, '1%': -3.4434963794639999, '10%': -2.5698580359999998}, -3147.9631889288148)\n\n    ```", "```py\n    cosine = 100 * np.cos(t) + 10\n    print \"ADF sine vs cosine with noise\", calc_adf(sine, cosine + noise)\n    ```", "```py\n    ADF sine vs cosine with noise (-4.7019725364090377, 8.3437700445205561e-05, 18, 482, {'5%': -2.8675550551408353, '1%': -3.4439899743408136, '10%': -2.5699737921179042}, -18152.922572321968)\n\n    ```", "```py\n    #http://www.quandl.com/BUNDESBANK/BBK01_WT5511-Gold-Price-USD\n    gold = np.loadtxt(sys.argv[1] + '/BBK01_WT5511.csv', delimiter=',', usecols=(1,), unpack=True, skiprows=1) \n\n    #http://www.quandl.com/YAHOO/INDEX_GSPC-S-P-500-Index\n    sp500 = np.loadtxt(sys.argv[1] + '/INDEX_GSPC.csv', delimiter=',', usecols=(6,), unpack=True, skiprows=1)\n    ```", "```py\n    sp500 = sp500[-len(gold):]\n    gold = gold[::-1]\n    sp500 = sp500[::-1]\n    print \"Gold v S & P 500\", calc_adf(gold, sp500)\n    ```", "```py\n    Gold v S & P 500 (-1.8835008669539355, 0.3398621844965054, 31, 11545, {'5%': -2.861790382593266, '1%': -3.4309165443532876, '10%': -2.566903273565075}, 83668.547346270294)\n\n    ```", "```py\nimport numpy as np\nimport statsmodels.api as stat\nimport statsmodels.tsa.stattools as ts\nimport sys\n\ndef calc_adf(x, y):\n    result = stat.OLS(x, y).fit()    \n    return ts.adfuller(result.resid)\n\nN = 501\nt = np.linspace(-2 * np.pi, 2 * np.pi, N)\nsine = np.sin(np.sin(t))\nprint \"Self ADF\", calc_adf(sine, sine)\n\nnoise = np.random.normal(0, .01, N)\nprint \"ADF sine with noise\", calc_adf(sine, sine + noise)\n\ncosine = 100 * np.cos(t) + 10\nprint \"ADF sine vs cosine with noise\", calc_adf(sine, cosine + noise)\n\n##http://www.quandl.com/BUNDESBANK/BBK01_WT5511-Gold-Price-USD\ngold = np.loadtxt(sys.argv[1] + '/BBK01_WT5511.csv', delimiter=',', usecols=(1,), unpack=True, skiprows=1) \n\n##http://www.quandl.com/YAHOO/INDEX_GSPC-S-P-500-Index\nsp500 = np.loadtxt(sys.argv[1] + '/INDEX_GSPC.csv', delimiter=',', usecols=(6,), unpack=True, skiprows=1) \nsp500 = sp500[-len(gold):]\ngold = gold[::-1]\nsp500 = sp500[::-1]\nprint \"Gold v S & P 500\", calc_adf(gold, sp500)\n```"]