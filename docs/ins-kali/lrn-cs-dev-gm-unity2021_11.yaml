- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Introducing Stacks, Queues, and HashSets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍堆栈、队列和HashSet
- en: In the last chapter, we revisited variables, types, and classes to see what
    they had to offer beyond the basic features introduced at the beginning of the
    book. In this chapter, we'll take a closer look at new collection types and learn
    about their intermediate-level capabilities. Remember, being a good programmer
    isn't about memorizing code, it's about choosing the right tool for the right
    job.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们重新访问了变量、类型和类，看看它们在书的开头介绍的基本功能之外还提供了什么。在本章中，我们将更仔细地研究新的集合类型，并了解它们的中级能力。请记住，成为一个好的程序员并不是关于记忆代码，而是选择合适的工具来完成合适的工作。
- en: Each of the new collection types in this chapter has a specific purpose. For
    most scenarios where you need a collection of data, a list or array works just
    fine. However, when you need temporary storage or control over the order of collection
    elements, or more specifically, the order they are accessed, look to stacks and
    queues. When you need to perform operations that depend on every element in a
    collection to be unique, meaning not duplicated, look to HashSets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的每种新集合类型都有特定的目的。在大多数需要数据集合的情况下，列表或数组都可以很好地工作。然而，当您需要临时存储或控制集合元素的顺序，或更具体地说，它们被访问的顺序时，可以使用堆栈和队列。当您需要执行依赖于集合中每个元素都是唯一的操作时，可以使用HashSet。
- en: 'Before you start on the code in the following section, let''s lay out the topics
    you''ll be learning about:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始下一节中的代码之前，让我们列出您将要学习的主题：
- en: Introducing stacks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍堆栈
- en: Peeking and popping elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看和弹出元素
- en: Working with queues
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用队列
- en: Adding, removing, and peeking elements
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加、移除和查看元素
- en: Using HashSets
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HashSet
- en: Performing operations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行操作
- en: Introducing stacks
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍堆栈
- en: At its most basic level, a stack is a collection of elements of the same specified
    type. The length of a stack is variable, meaning it can change depending on how
    many elements it's holding. The important difference between a stack and a list
    or array is how the elements are stored. While lists or arrays store elements
    by index, stacks follow the **last-in-first-out** (**LIFO**) model, meaning the
    last element in the stack is the first accessible element. This is useful when
    you want to access elements in reverse order. You should note that they can store
    `null` and duplicate values. A helpful analogy is a stack of plates—the last plate
    you put on the stack is the first one you can easily get to. Once it's removed,
    the next-to-last plate you stacked is accessible, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最基本的层面上，堆栈是相同指定类型的元素集合。堆栈的长度是可变的，这意味着它可以根据它所持有的元素数量而改变。堆栈与列表或数组之间的重要区别在于元素的存储方式。而列表或数组按索引存储元素，堆栈遵循**后进先出**（**LIFO**）模型，这意味着堆栈中的最后一个元素是第一个可访问的元素。这在您想要以相反顺序访问元素时非常有用。您应该注意它们可以存储`null`和重复值。一个有用的类比是一叠盘子——您放在堆栈上的最后一个盘子是您可以轻松拿到的第一个盘子。一旦它被移除，您堆叠的倒数第二个盘子就可以访问，依此类推。
- en: 'All the collection types in this chapter are a part of the `System.Collections.Generic`
    namespace, meaning you need to add the following code to the top of any file that
    you want to use them in:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有集合类型都是`System.Collections.Generic`命名空间的一部分，这意味着您需要在要在其中使用它们的任何文件的顶部添加以下代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that you know what you're about to work with, let's take a look at the basic
    syntax for declaring stacks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道您将要处理的内容，让我们来看一下声明堆栈的基本语法。
- en: 'A stack variable declaration needs to meet the following requirements:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈变量声明需要满足以下要求：
- en: The `Stack` keyword, its element type between left and right arrow characters,
    and a unique name
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stack`关键字，其元素类型在左右箭头字符之间，以及一个唯一名称'
- en: The `new` keyword to initialize the stack in memory, followed by the `Stack`
    keyword and element type between arrow characters
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new`关键字用于在内存中初始化堆栈，后跟`Stack`关键字和箭头字符之间的元素类型'
- en: A pair of parentheses capped off by a semicolon
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由分号结束的一对括号
- en: 'In blueprint form, it looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝图形式中，它看起来像这样：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unlike the other collection types you've worked with, stacks can't be initialized
    with elements when they're created. Instead, all elements have to be added after
    the stack is created.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与您之前使用过的其他集合类型不同，堆栈在创建时不能用元素初始化。相反，所有元素都必须在创建堆栈后添加。
- en: 'C# supports a non-generic version of the stack type that doesn''t require you
    to define the type of element in the stack:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: C#支持不需要定义堆栈中元素类型的非通用版本：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However, this is less safe and more costly than using the preceding generic
    version, so the generic version above is recommended. You can read more about
    Microsoft's recommendation at [https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这比使用前面的通用版本更不安全且更昂贵，因此建议使用上面的通用版本。您可以在[https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md)上阅读有关Microsoft的建议的更多信息。
- en: Your next task is to create a stack of your own and get hands-on experience
    with working with its class methods.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您的下一个任务是创建自己的堆栈，并亲自体验使用其类方法。
- en: 'To test this out, you''re going to modify the existing item collection logic
    in *Hero Born* by using a stack to store possible loot that can be collected.
    A stack works nicely here because we won''t have to worry about supplying indexes
    to get loot items, we can just get the last one added every time:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这一点，您将使用堆栈修改*英雄诞生*中的现有物品收集逻辑，以存储可以收集的可能战利品。堆栈在这里很有效，因为我们不必担心提供索引来获取战利品，我们可以每次都获取最后添加的战利品：
- en: 'Open `GameBehavior.cs` and add in a new stack variable named `LootStack`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GameBehavior.cs`并添加一个名为`LootStack`的新堆栈变量：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Update the `Initialize` method with the following code to add new items to
    the stack:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`Initialize`方法以向堆栈添加新项：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a new method to the bottom of the script to print out the stack information:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本底部添加一个新方法来打印堆栈信息：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `ItemBehavior.cs` and call `PrintLootReport` from the `GameManager` instance:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ItemBehavior.cs`，并从`GameManager`实例中调用`PrintLootReport`：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Breaking this down, it does the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将其分解，它执行以下操作：
- en: Creates an empty stack with elements of type string to hold the loot items we'll
    add in next
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空堆栈，其中包含字符串类型的元素，用于保存我们接下来要添加的战利品
- en: Uses the `Push` method to add string elements to the stack (which are loot item
    names), increasing its size each time
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Push`方法向堆栈中添加字符串元素（即战利品名称），每次增加其大小
- en: Prints out the stack count whenever the `PrintLootReport` method is called
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当调用`PrintLootReport`方法时，都会打印出堆栈计数
- en: Calls `PrintLootReport` inside `OnCollisionEnter` every time an item is collected
    by the player, which we set up in earlier chapters with Collider components
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnCollisionEnter`中调用`PrintLootReport`，每当玩家收集一个物品时都会调用，我们在之前的章节中使用Collider组件进行了设置。
- en: Hit play in Unity, collect an item Prefab, and take a look at the new loot report
    that's printed out.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中点击播放，收集一个物品预制件，并查看打印出来的新战利品报告。
- en: '![](img/B17573_11_01.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17573_11_01.png)'
- en: 'Figure 11.1: Output from using stacks'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：使用堆栈的输出
- en: Now that you have a working stack holding all the game loot, you're ready to
    experiment with how items are accessed using the stack class's `Pop` and `Peek`
    methods.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有一个可以保存所有游戏战利品的工作堆栈，您可以开始尝试使用堆栈类的`Pop`和`Peek`方法访问物品。
- en: Popping and peeking
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出和窥视
- en: 'We''ve already talked about how stacks store elements using the LIFO method.
    Now, we need to look at how elements are accessed in a familiar but different
    collection type—by peeking and popping:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过堆栈如何使用LIFO方法存储元素。现在，我们需要看一下如何访问熟悉但不同的集合类型中的元素——通过窥视和弹出：
- en: The `Peek` method returns the next item on the stack without removing it, letting
    you "peek" at it without changing anything
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Peek`方法返回堆栈中的下一个物品，而不移除它，让您可以在不改变任何内容的情况下“窥视”它'
- en: The `Pop` method returns and removes the next item on the stack, essentially
    "popping" it off and handing it to you
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pop`方法返回并移除堆栈中的下一个物品，实质上是“弹出”它并交给您'
- en: Both of these methods can be used by themselves or together depending on what
    you need. You'll get hands-on experience with both methods in the following section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法可以根据您的需要单独或一起使用。在接下来的部分中，您将亲身体验这两种方法。
- en: 'Your next task is to grab the last item added to `LootStack`. In our example,
    the last element is determined programmatically in the `Initialize` method, but
    you could always programmatically randomize the order the loot items were added
    to the stack in `Initialize`. Either way, update `PrintLootReport()` in `GameBehavior`
    with the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您的下一个任务是抓取添加到`LootStack`中的最后一个物品。在我们的示例中，最后一个元素是在`Initialize`方法中以编程方式确定的，但您也可以在`Initialize`中以编程方式随机排列添加到堆栈中的战利品的顺序。无论哪种方式，都要在`GameBehavior`中更新`PrintLootReport()`，使用以下代码：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s what''s going on:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是正在发生的事情：
- en: Calls `Pop` on `LootStack`, removes the next item on the stack, and stores it.
    Remember, stack elements are ordered by the LIFO model.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LootStack`上调用`Pop`，移除堆栈中的下一个物品，并存储它。请记住，堆栈元素是按照LIFO模型排序的。
- en: Calls `Peek` on `LootStack` and stores the next item on the stack without removing
    it.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LootStack`上调用`Peek`，并存储堆栈中的下一个物品，而不移除它。
- en: Adds a new debug log to print out the item that was popped off and the next
    item on the stack.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的调试日志，打印出弹出的物品和堆栈中的下一个物品。
- en: 'You can see from the console that a **Mythril Bracer**, the last item added
    to the stack, was popped off first, followed by a **Pair of Winged Boots**, which
    was peeked at but not removed. You can also see that `LootStack` has four remaining
    elements that can be accessed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从控制台看到，**秘银护腕**是最后添加到堆栈中的物品，被最先弹出，接着是**一双翅膀靴**，它被窥视但没有被移除。您还可以看到`LootStack`还有四个剩余的可以访问的元素：
- en: '![](img/B17573_11_02.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17573_11_02.png)'
- en: 'Figure 11.2: Output from popping and peeking on a stack'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：从堆栈中弹出和窥视的输出
- en: Our player can now pick up loot items in the reverse order that they were added
    to the stack. For instance, the first item picked up will always be a **Mythril
    Bracer**, followed by a **Pair of Winged Boots**, then a **Golden Key**, and so
    on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的玩家现在可以按照堆栈中添加的相反顺序拾取战利品。例如，首先拾取的物品将始终是**秘银护腕**，然后是**一双翅膀靴**，然后是**金色钥匙**，依此类推。
- en: Now that you know how to create, add, and query elements from a stack, we can
    move on to some common methods that you have access to through the stack class.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何创建、添加和查询堆栈中的元素，我们可以继续学习通过堆栈类可以访问的一些常见方法。
- en: Common methods
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见方法
- en: Each of the methods in this section are for example purposes only, they are
    not included in our game as we don't need the functionality.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的每个方法仅用于示例目的，它们不包括在我们的游戏中，因为我们不需要这些功能。
- en: 'First, you can use the `Clear` method to empty out or delete the entire contents
    of a stack:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以使用`Clear`方法清空或删除堆栈的全部内容：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you want to know whether an element exists in your stack, use the `Contains`
    method and specify the element you''re looking for:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道您的堆栈中是否存在某个元素，请使用`Contains`方法并指定您要查找的元素：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you need to copy the elements of a stack to an array, the `CopyTo` method
    will let you specify the destination and the starting index for the copy operation.
    This feature is helpful when you need to insert stack elements at a specific place
    in an array. Note that the array you want to copy the stack elements to must already
    exist:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要将堆栈的元素复制到数组中，`CopyTo`方法将允许您指定目标和复制操作的起始索引。当您需要在数组的特定位置插入堆栈元素时，这个功能非常有用。请注意，您要将堆栈元素复制到的数组必须已经存在：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you need to convert a stack into an array, simply use the `ToArray()` method.
    This conversion creates a new array out of your stack, which is different than
    the `CopyTo()` method, which copies the stack elements to an existing array:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要将堆栈转换为数组，只需使用`ToArray()`方法。这种转换会从您的堆栈中创建一个新数组，这与`CopyTo()`方法不同，后者将堆栈元素复制到现有数组中：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can find the entire list of stack methods in the C# documentation at [https://docs.microsoft.com/dotnet/api/system.collections.generic.stack-1?view=netcore-3.1](https://docs.microsoft.com/dotnet/api/system.collections.generic.stack-1?view=netcore-3.1).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在C#文档中找到完整的堆栈方法列表[https://docs.microsoft.com/dotnet/api/system.collections.generic.stack-1?view=netcore-3.1](https://docs.microsoft.com/dotnet/api/system.collections.generic.stack-1?view=netcore-3.1)。
- en: That wraps up our introduction to stacks, but we're going to talk about its
    cousin, the queue, in the following section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对堆栈的介绍，但是我们将在下一节中讨论它的堂兄，队列。
- en: Working with queues
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用队列
- en: Like stacks, queues are collections of elements or objects of the same type.
    The length of any queue is variable just like a stack, meaning its size changes
    as elements are added or removed. However, queues follow the **first-in-first-out**
    (**FIFO**) model, meaning the first element in the queue is the first accessible
    element. You should note that queues can store `null` and duplicate values but
    can't be initialized with elements when they're created. The code in this section
    is for example purposes only, and is not included in our game.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与堆栈一样，队列是相同类型的元素或对象的集合。任何队列的长度都是可变的，就像堆栈一样，这意味着随着元素的添加或移除，其大小会发生变化。但是，队列遵循**先进先出**（**FIFO**）模型，这意味着队列中的第一个元素是第一个可访问的元素。您应该注意，队列可以存储`null`和重复的值，但在创建时不能用元素初始化。本节中的代码仅用于示例目的，不包括在我们的游戏中。
- en: 'A queue variable declaration needs to have the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 队列变量声明需要具备以下内容：
- en: The `Queue` keyword, its element type between left and right arrow characters,
    and a unique name
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Queue`关键字，其元素类型在左右箭头字符之间，以及一个唯一名称'
- en: The `new` keyword to initialize the queue in memory, followed by the `Queue`
    keyword and element type between arrow characters
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`new`关键字在内存中初始化队列，然后是`Queue`关键字和箭头字符之间的元素类型
- en: A pair of parentheses capped off by a semicolon
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一对括号，以分号结束
- en: 'In blueprint form, a queue looks as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以蓝图形式，队列如下所示：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'C# supports a non-generic version of the queue type that doesn''t require you
    to define the type of element it stores:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: C#支持队列类型的非泛型版本，无需定义存储的元素类型：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, this is less safe and more costly than using the preceding generic
    version. You can read more about Microsoft's recommendation at [https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这比使用前面的泛型版本更不安全且更昂贵。您可以在[https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md)上阅读有关Microsoft建议的更多信息。
- en: An empty queue all by itself isn't all that useful; you want to be able to add,
    remove, and peek at its elements whenever you need, which is the topic of the
    following section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一个空的队列本身并不那么有用；您希望能够在需要时添加、移除和查看其元素，这是下一节的主题。
- en: Adding, removing, and peeking
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加、移除和查看
- en: Since the `LootStack` variable in the previous sections could easily be a queue,
    we'll keep the following code out of our game scripts for efficiency. However,
    feel free to explore the differences, or similarities, of these classes in your
    own code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于前几节中的`LootStack`变量很容易成为队列，我们将保持以下代码不包含在游戏脚本中以提高效率。但是，您可以自由地探索这些类在您自己的代码中的差异或相似之处。
- en: 'To create a queue of string elements, use the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个字符串元素的队列，请使用以下方法：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To add elements to the queue, call the `Enqueue` method with the element you
    want to add:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要向队列添加元素，请使用`Enqueue`方法并提供要添加的元素：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To see the first element in the queue without removing it, use the `Peek` method:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看队列中的第一个元素而不移除它，请使用`Peek`方法：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To return and remove the first element in the queue, use the `Dequeue` method:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回并移除队列中的第一个元素，请使用`Dequeue`方法：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that you know how to work with the basic features of a queue, feel free
    to explore the more intermediate and advanced methods that the queue class offers.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何使用队列的基本特性，请随意探索队列类提供的更中级和高级方法。
- en: Common methods
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见方法
- en: Queues and stacks share almost the exact same features, so we won't go over
    them a second time. You can find a complete list of methods and properties in
    the C# documentation at [https://docs.microsoft.com/dotnet/api/system.collections.generic.queue-1?view=netcore-3.1](https://docs.microsoft.com/dotnet/api/system.collections.generic.queue-1?view=netcore-3.1).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 队列和堆栈几乎具有完全相同的特性，因此我们不会再次介绍它们。您可以在C#文档中找到完整的方法和属性列表[https://docs.microsoft.com/dotnet/api/system.collections.generic.queue-1?view=netcore-3.1](https://docs.microsoft.com/dotnet/api/system.collections.generic.queue-1?view=netcore-3.1)。
- en: Before closing out the chapter, let's take a look at the HashSet collection
    type and the mathematical operations it's uniquely suited for.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章之前，让我们来看看HashSet集合类型及其独特适用的数学运算。
- en: Using HashSets
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HashSets
- en: 'The last collection type we''ll get our hands on in this chapter is the HashSet.
    This collection is very different from any other collection type that we''ve come
    across: it cannot store duplicate values and is not sorted, meaning its elements
    are not ordered in any way. Think of HashSets as dictionaries with just keys,
    instead of key-value pairs.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将接触的最后一个集合类型是HashSet。这个集合与我们遇到的任何其他集合类型都非常不同：它不能存储重复的值，也不是排序的，这意味着它的元素没有以任何方式排序。将HashSets视为只有键而不是键值对的字典。
- en: They can perform set operations and element lookups extremely fast, which we'll
    explore at the end of this section, and are best suited to situations where the
    element order and uniqueness are a top priority.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以执行集合操作和元素查找非常快，我们将在本节末尾进行探讨，并且最适合元素顺序和唯一性是首要考虑的情况。
- en: 'A HashSet variable declaration needs to meet the following requirements:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: HashSet变量声明需要满足以下要求：
- en: The `HashSet` keyword, its element type between left and right arrow characters,
    and a unique name
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HashSet`关键字，其元素类型在左右箭头字符之间，以及一个唯一名称'
- en: The `new` keyword to initialize the HashSet in memory, followed by the `HashSet`
    keyword and element type between arrow characters
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`new`关键字在内存中初始化HashSet，然后是`HashSet`关键字和箭头字符之间的元素类型
- en: A pair of parentheses capped off by a semicolon
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由分号结束的一对括号
- en: 'In blueprint form, it looks as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝图形式中，它看起来如下：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Unlike stacks and queues, you can initialize a HashSet with default values
    when declaring the variable:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与栈和队列不同，你可以在声明变量时使用默认值初始化HashSet：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To add elements, use the `Add` method and specify the new element:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 添加元素时，使用`Add`方法并指定新元素：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To remove an element, call `Remove` and specify the element you want to delete
    from the HashSet:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个元素，调用`Remove`并指定你想要从HashSet中删除的元素：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That's it for the easy stuff, and this should start to feel pretty familiar
    at this point in your programming journey. Set operations are where the HashSet
    collection really shines, which is the topic of the following section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是简单的内容了，在你的编程之旅中，这一点应该开始感觉相当熟悉了。集合操作是HashSet集合真正发光的地方，这是接下来章节的主题。
- en: Performing operations
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行操作
- en: 'Set operations need two things: a calling collection object and a passed-in
    collection object.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 集合操作需要两样东西：一个调用集合对象和一个传入的集合对象。
- en: The calling collection object is the HashSet you want to modify based on which
    operation is used, while the passed-in collection object is used for comparison
    by the set operation. We'll get into this in more detail in the following code,
    but first, let's go over the three main set operations that crop up in programming
    scenarios the most often.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 调用集合对象是你想要根据使用的操作修改的HashSet，而传入的集合对象是由集合操作进行比较使用的。我们将在接下来的代码中详细介绍这一点，但首先，让我们先了解一下在编程场景中最常见的三种主要集合操作。
- en: 'In the following definitions, `currentSet` refers to the HashSet calling an
    operation method and `specifiedSet` refers to the passed-in HashSet method parameter.
    The modified HashSet is always the current set:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下定义中，`currentSet`指的是调用操作方法的HashSet，而`specifiedSet`指的是传入的HashSet方法参数。修改后的HashSet始终是当前集合：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There are three main operations that we''ll be working with in the rest of
    this section:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的这一部分，我们将使用三种主要操作：
- en: '`UnionWith` adds the elements of the current and specified sets together'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UnionWith`将当前集合和指定集合的元素添加在一起。'
- en: '`IntersectWith` stores only the elements that are in both the current and specified
    sets'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntersectWith`仅存储当前集合和指定集合中都存在的元素'
- en: '`ExceptWith` subtracts the elements of the specified set from the current set'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExceptWith`从当前集合中减去指定集合的元素'
- en: There are two more groups of set operations that deal with subset and superset
    computations, but these are targeted at specific use cases that are beyond the
    scope of this chapter. You can find all the relevant information for these methods
    at [https://docs.microsoft.com/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1](https://docs.microsoft.com/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两组处理子集和超集计算的集合操作，但这些针对特定用例，超出了本章的范围。你可以在[https://docs.microsoft.com/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1](https://docs.microsoft.com/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1)找到所有这些方法的相关信息。
- en: 'Let''s say we have two sets of player names—one for active players and one
    for inactive players:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两组玩家名称的集合——一个是活跃玩家的集合，另一个是非活跃玩家的集合：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We would use the `UnionWith()` operation to modify a set to include all the
    elements in both sets:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`UnionWith()`操作来修改一个集合，以包括两个集合中的所有元素：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, let''s say we have two different sets—one for active players and one for
    premium players:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有两个不同的集合——一个是活跃玩家的集合，另一个是高级玩家的集合：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We would use the `IntersectWith()` operation to find any active players that
    are also premium members:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`IntersectWith()`操作来查找任何既是活跃玩家又是高级会员的玩家：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'What if we wanted to find all active players that are not premium members?
    We would do the opposite of what we did with the `IntersectWith()` operation by
    calling `ExceptWith`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想找到所有活跃玩家中不是高级会员的玩家怎么办？我们将通过调用`ExceptWith`来执行与`IntersectWith()`操作相反的操作：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Notice that I'm using brand-new instances of the two example sets for each operation
    because the current set is modified after each operation is executed. If you keep
    using the same sets throughout, you will get different results.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在每个操作中使用了两个示例集合的全新实例，因为当前集合在执行每个操作后都会被修改。如果你一直使用相同的集合，你会得到不同的结果。
- en: Now that you've learned how to perform fast mathematical operations with HashSets,
    it's time to close our chapter and drive home what we've learned.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用HashSets执行快速数学运算，是时候结束我们的章节，总结我们所学到的知识了。
- en: Intermediate collections roundup
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中间集合总结
- en: Before you move on to the summary and the next chapter, let's drive home some
    key points from what we've just learned. Topics that don't always have a 1-to-1
    relationship with the actual game prototype we're building need a little extra
    love sometimes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在你继续阅读总结和下一章之前，让我们再次强调一些我们刚刚学到的关键点。有时，与我们正在构建的实际游戏原型不总是一对一关系的主题需要额外的关注。
- en: 'The one question I''m sure you''re asking yourself at this point is: why use
    any of these other collection types when I could just use lists for everything?
    And that''s a perfectly valid question. The easy answer is that stacks, queues,
    and HashSets offer better performance than lists when applied in the correct circumstances.
    For example, when you need to store items in a specific order, and access them
    in a specific order, a stack would be more efficient than a list.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我确定你会问自己一个问题：为什么在任何情况下都要使用这些其他集合类型，而不是只使用列表呢？这是一个完全合理的问题。简单的答案是，当在正确的情况下应用时，栈、队列和HashSets比列表提供更好的性能。例如，当你需要按特定顺序存储项目并按特定顺序访问它们时，栈比列表更有效。
- en: The more complicated answer is that using different collection types enforces
    how your code is allowed to interact with them and their elements. This is a mark
    of good code design, as it removes any ambiguity on how you're planning to use
    a collection. With lists everywhere, things get confusing when you don't remember
    what functions you're asking them to perform.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的答案是，使用不同的集合类型会强制规定您的代码如何与它们及其元素进行交互。这是良好代码设计的标志，因为它消除了您计划如何使用集合的任何歧义。到处都是列表，当您不记得要求它们执行什么功能时，事情就会变得混乱。
- en: As with everything we've learned in this book, it's always best to use the right
    tool for the job at hand. More importantly, you need to have different tools available
    for that to be an option.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中学到的一切一样，最好始终使用合适的工具来完成手头的工作。更重要的是，您需要有不同的工具可供选择。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations, you're almost at the finish line! In this chapter, you learned
    about three new collection types, and how they can be used in different situations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您几乎到达终点了！在本章中，您了解了三种新的集合类型，以及它们在不同情况下的用法。
- en: Stacks are great if you want to access your collection elements in the reverse
    order that they were added, queues are your ticket if you want to access your
    elements in sequential order, and both are ideal for temporary storage. The important
    difference between these collection types and lists or arrays is how they can
    be accessed with popping and peeking operations. Lastly, you learned about the
    almighty HashSet and its performance-based mathematical set operations. In situations
    where you need to work with unique values and perform additions, comparisons,
    or subtractions on large collections, these are key.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想以添加顺序的相反顺序访问集合元素，则堆栈非常适合，如果您想以顺序顺序访问元素，则队列是您的选择，两者都非常适合临时存储。这些集合类型与列表或数组之间的重要区别在于它们如何通过弹出和查看操作进行访问。最后，您了解了强大的HashSet及其基于性能的数学集合操作。在需要处理唯一值并对大型集合执行添加、比较或减法操作的情况下，这些是关键。
- en: In the next chapter, you'll be taken a little deeper into the intermediate world
    of C# with delegates, generics, and more as you approach the end of this book.
    Even after all you've learned, the last page is still just the beginning of another
    journey.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将深入了解C#的中级世界，包括委托、泛型等，因为您接近本书的结尾。即使您已经学到了所有知识，最后一页仍然只是另一段旅程的开始。
- en: Pop quiz – intermediate collections
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中级集合小测验
- en: Which collection type stores its elements using the LIFO model?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种集合类型使用LIFO模型存储其元素？
- en: Which method lets you query the next element in a stack without removing it?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种方法让您查询堆栈中的下一个元素而不移除它？
- en: Can stacks and queues store `null` values?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆栈和队列能存储`null`值吗？
- en: How would you subtract one HashSet from another?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从一个HashSet中减去另一个HashSet？
- en: JOIN us on Discord!
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord！
- en: Read this book alongside other users, Unity/C# experts, and Harrison Ferrone.
    Ask questions, provide solutions to other readers, chat with the author via *Ask
    Me Anything sessions* and much more.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、Unity/C#专家和Harrison Ferrone一起阅读本书。提出问题，为其他读者提供解决方案，通过*问我任何事*会话与作者交流等等。
- en: Join Now!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 立即加入！
- en: '[https://packt.link/csharpunity2021](https://packt.link/csharpunity2021)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/csharpunity2021](https://packt.link/csharpunity2021)'
- en: '![](img/QR_Code_9781801813945.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code_9781801813945.png)'
