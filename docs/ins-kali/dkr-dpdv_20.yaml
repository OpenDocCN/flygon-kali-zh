- en: 'Appendix A: Securing client and daemon communication'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录A：保护客户端和守护程序通信
- en: This was originally going to be a section in the “Installing Docker” chapter,
    or the “Security in Docker” chapter. But it got too long, so I’ve added it here
    as an appendix.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这最初是要成为“安装Docker”章节或“Docker安全性”章节的一部分。但它变得太长了，所以我把它添加到这里作为附录。
- en: Docker implements a client-server model. The client implements the CLI, and
    the server (daemon) implements the functionality, including the public-facing
    REST API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Docker实现了客户端-服务器模型。客户端实现了CLI，服务器（守护程序）实现了功能，包括面向公众的REST API。
- en: 'The client is called `docker` (`docker.exe` on Windows) and the daemon is called
    `dockerd` (`dockerd.exe` on Windows). A default installation puts them on the
    same host and configures them to communicate over a secure local PIC socket:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端称为`docker`（在Windows上为`docker.exe`），守护程序称为`dockerd`（在Windows上为`dockerd.exe`）。默认安装将它们放在同一主机上，并配置它们通过安全的本地PIC套接字进行通信：
- en: '`/var/run/docker.sock` on Linux'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上为`/var/run/docker.sock`
- en: '`//./pipe/docker_engine` on Windows'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上为`//./pipe/docker_engine`
- en: However, it’s possible to configure them to communicate over the network. But
    the default daemon network configuration uses an unsecured HTTP socket on port
    2375/tcp.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，也可以配置它们通过网络进行通信。但默认的守护程序网络配置使用了在2375/tcp端口上的未加密HTTP套接字。
- en: '![Figure A1.1](images/figurea1-1.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图A1.1](images/figurea1-1.png)'
- en: Figure A1.1
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图A1.1
- en: '**Note:** It’s convention to use `2375` for unencrypted communication between
    the client and daemon, and `2376` for encrypted traffic.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：**惯例是在客户端和守护程序之间使用`2375`进行未加密通信，使用`2376`进行加密流量。'
- en: This might be fine for labs, but it’s unacceptable for production.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这对实验室可能没问题，但对于生产环境是不可接受的。
- en: TLS to the rescue!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TLS来拯救！
- en: Docker let’s you configure the client and daemon to only accept network connections
    that are secured with TLS. This is recommended for production environments, even
    if you’re using trusted internal networks!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker允许您配置客户端和守护程序只接受通过TLS保护的网络连接。即使在使用受信任的内部网络时，这在生产环境中也是推荐的！
- en: 'Docker offers two modes for securing client-daemon traffic with TLS:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Docker提供了两种模式来保护客户端和守护程序之间的TLS通信：
- en: '**Daemon mode:** The Docker daemon will only accept connections from authenticated
    clients.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**守护程序模式：** Docker守护程序只接受来自经过身份验证的客户端的连接。'
- en: '**Client mode:** The Docker client will only connect to Docker daemons that
    have certificates signed by a trusted CA.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端模式：** Docker客户端只会连接由受信任CA签名的Docker守护程序。'
- en: A combination of the two provides the highest security.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 两者的结合提供了最高的安全性。
- en: We’ll use a simple lab environment to walk through the process of configuring
    Docker for **daemon mode** and **client mode** TLS.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的实验室环境来演示配置Docker的**守护程序模式**和**客户端模式**的过程。
- en: Lab setup
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验室设置
- en: We’ll use a simple lab setup for the remainder of the chapter. It’s a three-node
    Linux lab with a CA, Docker client, and Docker daemon. It’s vital that all hosts
    can resolve each other by name.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将使用一个简单的实验室设置。这是一个具有CA、Docker客户端和Docker守护程序的三节点Linux实验室。所有主机都必须能够通过名称解析彼此。
- en: We’ll configure `node1` to be the secure Docker client, and `node3` to be the
    secure Docker daemon. `node2` will be the CA.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置`node1`作为安全的Docker客户端，`node3`作为安全的Docker守护程序。`node2`将作为CA。
- en: You can follow along in your own environment, but all of the examples shown
    will use the names and IPs from the lab diagram in Figure A1.2.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在自己的环境中跟随操作，但所有示例都将使用图A1.2中实验室图表中的名称和IP。
- en: '![Figure A1.2 Sample lab setup](images/figurea1-2.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图A1.2 示例实验室设置](images/figurea1-2.png)'
- en: Figure A1.2 Sample lab setup
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图A1.2 示例实验室设置
- en: 'The high-level process will be as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 高级流程将如下：
- en: '**Configure a CA and certificates**'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置CA和证书**'
- en: Create a CA (self-signed certs)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建CA（自签名证书）
- en: Create and sign keys for the Daemon
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为守护程序创建并签署密钥
- en: Create and sign keys for the Client
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为客户端创建并签署密钥
- en: Distribute keys
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分发密钥
- en: '**Configure Docker to use TLS**'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置Docker使用TLS**'
- en: Configure daemon mode
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置守护程序模式
- en: Configure client mode
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置客户端模式
- en: Create a CA (self-signed certs)
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建CA（自签名证书）
- en: You only need to complete this step if you are following along in a lab and
    need to build a CA to sign certificates. Also, we’re building a simple CA to help
    demonstrate how to configure Docker, we’re **not** attempting to build a production-grade
    PKI.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在您在实验室中跟随并需要构建CA来签署证书时，您才需要完成此步骤。此外，我们正在构建一个简单的CA来帮助演示如何配置Docker，我们**不**试图构建一个生产级PKI。
- en: Run the following commands from the `CA` node in the lab.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在实验室中从`CA`节点运行以下命令。
- en: Create a new private key for the CA.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为CA创建一个新的私钥。
- en: You will set a passphrase as part of the operation. Don’t forget it!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在操作中设置一个密码。不要忘记它！
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`You will have a new file in your current directory called `ca-key.pem`. This
    is the CA’s private key.`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在在当前目录中有一个名为`ca-key.pem`的新文件。这是CA的私钥。
- en: '`*   Use the CA’s private key to generate a public key (certificate).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用CA的私钥生成公钥（证书）。'
- en: You will need to enter the passphrase from the previous step. Hopefully you
    haven’t forgotten it already :-D
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要输入上一步的密码。希望您还没有忘记它:-D
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`This has added a second file to your working directory called `ca.pem`. This
    is the CA’s public key, a.k.a. “certificate”.``'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经在您的工作目录中添加了第二个文件，名为`ca.pem`。这是CA的公钥，也称为“证书”。
- en: '``You now have two files in your current directory: `ca-key.pem` and `ca.pem`.
    These are the CA’s private and public keys, and form the *identity* of the CA.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在在当前目录中有两个文件：`ca-key.pem`和`ca.pem`。这些是CA的私钥和公钥，并形成了CA的*身份*。
- en: Create a key pair for the daemon
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为守护程序创建密钥对
- en: 'In this step, we’ll generate a new key-pair for `node3`. This is the node that
    will run the secure Docker daemon. It’s a four-step process:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将为`node3`生成一个新的密钥对。这是将运行安全Docker守护程序的节点。这是一个四步过程：
- en: Create the private key
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建私钥
- en: Create the signing request
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建签名请求
- en: Add IP addresses and make it valid for *server authorization*
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加IP地址并使其有效用于*服务器授权*
- en: Generate the certificate
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成证书
- en: Let’s do it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Run all commands from the CA node (node2).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从CA节点（node2）运行所有命令。
- en: Create the private key for the daemon.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为守护程序创建私钥。
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`This has created new file in your working directory called `daemon-key.pem`.
    This is the private key for the daemon node.`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这已在您的工作目录中创建了一个名为`daemon-key.pem`的新文件。这是守护节点的私钥。
- en: '`*   Create a certificate signing request (CSR) for the CA to create and sign
    a certificate for the daemon. Be sure to use the correct DNS name of the node
    that you intend to run your secure Docker daemon on. The example uses `node3`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*为CA创建证书签名请求（CSR），以创建并签署守护程序的证书。确保使用您打算在其上运行安全Docker守护程序的节点的正确DNS名称。示例使用`node3`。'
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`You now have a fourth file in your working directory. This one is the CSR
    and it is called `daemon.csr`.` `*   Add required attributes to the certificate.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在在工作目录中有第四个文件。这个文件是CSR，名为`daemon.csr`。*向证书添加所需属性。
- en: We need to create a file that will add a couple of extended attributes to the
    daemon’s certificate when it gets signed by the CA. These attributes will add
    the daemon’s DNS name and IP address, as well as configure the certificate to
    be used for *server authentication*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个文件，当它被CA签名时，将向守护程序的证书添加一些扩展属性。这些属性将添加守护程序的DNS名称和IP地址，并配置证书用于*服务器认证*。
- en: Create a new file called `extfile.cnf` with the following values. The example
    uses the DNS name and IP of the daemon node in the lab from Figure A1.2\. The
    values in your environment might be different.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`extfile.cnf`的新文件，并填入以下值。示例中使用了实验室中守护节点的DNS名称和IP。您的环境中的值可能不同。
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`*   Generate the certificate.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*生成证书。'
- en: This step uses the CSR file, CA keys, and the `extfile.cnf` file to sign and
    configure the daemon’s certificate. It will output the daemon’s public key (certificate)
    as a new file called `daemon-cert.pem`
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤使用CSR文件、CA密钥和`extfile.cnf`文件来签署和配置守护程序的证书。它将输出守护程序的公钥（证书）作为一个名为`daemon-cert.pem`的新文件。
- en: '[PRE5][PRE6]At this point, you have a working CA, as well as a key-pair for
    `node3` which will run the secure Docker daemon.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您已经拥有一个可用的CA，以及将运行安全Docker守护程序的`node3`的密钥对。
- en: Delete the CSR and `extfile.cnf` before moving on.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，删除CSR和`extfile.cnf`。
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`#### Create a key pair for the client'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 为客户端创建密钥对'
- en: In this section, we’ll repeat what we just did for the `node3`, but this time
    we’ll do it for `node1` which will run our Docker client.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将重复刚才为`node3`所做的操作，但这次我们将为将运行我们的Docker客户端的`node1`做同样的操作。
- en: Run all commands from the CA (`node2`).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从CA（`node2`）运行所有命令。
- en: Create a private key for `node1`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`node1`创建一个私钥。
- en: This will generate a new file in your working directory called `client-key.pem`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的工作目录中生成一个名为`client-key.pem`的新文件。
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`*   Create a CSR. Be sure to use the correct DNS name of the node that will
    be your secure Docker client. The example uses `node1`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*创建一个CSR。确保使用将成为您安全Docker客户端的节点的正确DNS名称。示例中使用了`node1`。'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`This will create a new file in your current directory called `client.csr`.`
    `*   Create a file called `extfile.cnf` and populate it with the following value.
    This will make the certificate valid for client authentication.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录中创建一个名为`client.csr`的新文件。*创建一个名为`extfile.cnf`的文件，并填入以下值。这将使证书对客户端身份验证有效。
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`*   Create the certificate for `node1` using the CSR, CA’s public and private
    keys, and the `extfile.cnf` file. This will create the client’s signed public
    key as a new file in your current directory called `client-cert.pem`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用CSR、CA的公钥和私钥以及`extfile.cnf`文件为`node1`创建证书。这将在当前目录中创建一个名为`client-cert.pem`的新文件，其中包含客户端的签名公钥。'
- en: '[PRE11][PRE12]Delete the CSR and `extfile.cnf` files, as these are no longer
    needed.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 删除CSR和`extfile.cnf`文件，因为它们不再需要。
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`At this point you should have the following 7 files in your working directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的工作目录中应该有以下7个文件：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Before moving on, you should remove write permission from the keys, and make
    them only readable to you and other accounts that are members of your group.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您应该从密钥中删除写权限，并将它们设置为只有您和其他属于您组的账户可以读取。
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`#### Distribute keys'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 分发密钥'
- en: 'Now that you’ve got all of the keys and certificates, it’s time to distribute
    them to the client and daemon nodes. We’ll be copying the following files:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经拥有所有的密钥和证书，是时候将它们分发给客户端和守护节点了。我们将复制以下文件：
- en: '`ca.pem`, `daemon-cert.pem`, and `daemon-key.pem` from the CA to the `node3`
    (the daemon node).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CA的`ca.pem`、`daemon-cert.pem`和`daemon-key.pem`复制到`node3`（守护节点）。
- en: '`ca.pem`, `client-cert.pem`, and `client-key.pem` from the CA to `node1` (the
    client node).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CA的`ca.pem`、`client-cert.pem`和`client-key.pem`复制到`node1`（客户端节点）。
- en: We’ll show you how to do it using `scp`, but feel free to use a different tool.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示如何使用`scp`进行操作，但请随意使用其他工具。
- en: Run the following commands from the directory containing the keys on `node2`
    (the CA node).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从包含`node2`（CA节点）上的密钥的目录中运行以下命令。
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`A few things to note about the commands:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些命令有几点需要注意：
- en: The 2nd, 3rd, 5th, and 6th commands are renaming the files as part of the copy
    operation. This is important, as Docker expects the files to have these names.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第2、3、5和6个命令是作为复制操作的一部分重命名文件。这很重要，因为Docker希望文件具有这些名称。
- en: These commands will work on Ubuntu Linux, and they assume you are using the
    `ubuntu` user account.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些命令适用于Ubuntu Linux，并且假定您正在使用`ubuntu`用户帐户。
- en: You may have to pre-create the `/home/ubuntu/.docker` hidden directory on the
    daemon and client nodes before executing the commands. You may also have to change
    permissions on the `.docker` directory to enable the copy — `chmod 777 .docker`
    will work, but is not secure. **Remember, we’re building a quick CA and certificates
    so you can follow along. We’re not trying to build a secure PKI**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行命令之前，您可能需要在守护程序和客户端节点上预先创建`/home/ubuntu/.docker`隐藏目录。您可能还需要更改`.docker`目录的权限以启用复制——`chmod
    777 .docker`将起作用，但不安全。**记住，我们正在构建一个快速的CA和证书，以便您可以跟着做。我们并不打算构建一个安全的PKI**。
- en: 'If you’re working in something like AWS, you’ll need to specify the instance’s
    private key with the `-i <key>` flag for each copy command. For example:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在类似AWS的环境中工作，您需要为每个复制命令使用`-i <key>`标志指定实例的私钥。例如：
- en: '`The lab now looks like Figure A1.3'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 实验现在看起来像A1.3图
- en: '![Figure A1.3 Updated lab with keys](images/figurea1-3.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图A1.3 更新的实验与密钥](images/figurea1-3.png)'
- en: Figure A1.3 Updated lab with keys
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图A1.3 更新的实验与密钥
- en: The presence of the CA’s public key (`ca.pem`) on `node1` and `node3` is what
    will tell them to trust the CA and all certificates signed by it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`node1`和`node3`上存在CA的公钥（`ca.pem`）将告诉它们信任CA和由其签署的所有证书。
- en: With the certificates in place, it’s **finally time to configure Docker so that
    the client and daemon use TLS!**
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有了证书，**最终可以配置Docker，以便客户端和守护程序使用TLS！**
- en: Configure Docker for TLS
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为TLS配置Docker
- en: 'As we mentioned previously, Docker has two TLS modes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Docker有两种TLS模式：
- en: '**daemon mode**'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**守护模式**'
- en: '**client mode**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端模式**'
- en: Daemon mode tells the daemon process to only allow connections from clients
    with a valid certificate. Client mode tells the client only to connect to daemons
    that have a valid certificate.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 守护模式告诉守护进程只允许来自具有有效证书的客户端的连接。客户端模式告诉客户端只连接到具有有效证书的守护进程。
- en: We’ll configure the daemon process on `node1` for *daemon mode*, and test it.
    After that, we’ll configure the client process on `node2` for *client mode*, and
    test that.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`node1`上的守护进程配置*守护模式*，并进行测试。之后，我们将为`node2`上的客户端进程配置*客户端模式*，并进行测试。
- en: Configuring the Docker daemon for TLS
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为TLS配置Docker守护程序
- en: 'Securing the daemon is as simple as setting a few daemon flags in the `daemon.json`
    configuration file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`daemon.json`配置文件中设置一些守护标志来保护守护程序就可以了。
- en: '`tlsverify` enables TLS verification'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tlsverify`启用TLS验证'
- en: '`tlscacert` tells the daemon which CA to trust'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tlscacert`告诉守护程序信任哪个CA'
- en: '`tlscert` tells Docker where the daemon’s certificate is'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tlscert`告诉Docker守护程序的证书在哪里'
- en: '`tlskey` tells Docker where the daemon’s private key is'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tlskey`告诉Docker守护程序的私钥在哪里'
- en: '`hosts` tells Docker which sockets to bind the daemon on'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hosts`告诉Docker在哪些套接字上绑定守护程序'
- en: We’ll configure these in the platform-independent `daemon.json` configuration
    file. This is found in `/etc/docker/` on Linux, and `C:\ProgramData\Docker\config\`
    on Windows.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在平台无关的`daemon.json`配置文件中配置这些。在Linux上，它位于`/etc/docker/`，在Windows上位于`C:\ProgramData\Docker\config\`。
- en: Perform all of the following operations on the node that will run your secure
    Docker daemon (`node3` in the example lab).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在将运行安全Docker守护程序的节点（例如实验中的`node3`）上执行所有以下操作。
- en: Edit the `daemon.json` file and add the following lines.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`daemon.json`文件并添加以下行。
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`**Warning!** Linux systems running `systemd` do not allow you to use the “hosts”
    option in `daemon.json`. Instead, you have specify it in a systemd override file.
    The simplest way to do this is with the `sudo systemctl edit docker` command.
    This will open a new file called `/etc/systemd/system/docker.service.d/override.conf`
    in an editor. Add the following three lines and save the file.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**运行`systemd`的Linux系统不允许您在`daemon.json`中使用“hosts”选项。相反，您必须在systemd覆盖文件中指定它。最简单的方法是使用`sudo
    systemctl edit docker`命令。这将在编辑器中打开一个名为`/etc/systemd/system/docker.service.d/override.conf`的新文件。添加以下三行并保存文件。'
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`Now that the TLS and host options are set, it’s time to restart Docker.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在TLS和主机选项已设置，是时候重新启动Docker了。
- en: Once Docker has restarted, you can check that the new `hosts` value is in effect
    by inspecting the output of a `ps` command.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Docker重新启动，您可以通过检查`ps`命令的输出来验证新的`hosts`值是否生效。
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`The presence of “`-H tcp://node3:2376`” in the command output is evidence
    that the daemon is listening on the network. Port `2376` is the standard port
    for Docker using TLS. `2375` is the default unsecured port.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出中的“`-H tcp://node3:2376`”的存在证明了守护程序正在监听网络。端口`2376`是使用TLS的Docker的标准端口。`2375`是默认的不安全端口。
- en: If you run a normal command, such as `docker version`, it will not work. This
    is because we’ve just configured the **daemon** to listen on the network, but
    the **Docker client** is still trying use the local IPC socket. Try the command
    again, but this time specifying the `-H tcp://node3:2376` flag.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行普通命令，例如`docker version`，它将无法工作。这是因为我们刚刚配置了**守护程序**在网络上监听，但**Docker客户端**仍然尝试使用本地IPC套接字。再次尝试命令，但这次指定`-H
    tcp://node3:2376`标志。
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`The command looks better, but it’s still not working. This is because the
    daemon is rejecting all connections from unauthenticated clients.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 命令看起来更好了，但仍然无法工作。这是因为守护程序正在拒绝来自未经身份验证的客户端的所有连接。
- en: Congratulations. The Docker daemon is configured to listen on the network, and
    is rejecting connections from unauthenticated clients.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜。 Docker守护程序已配置为在网络上监听，并拒绝来自未经身份验证的客户端的连接。
- en: Let’s configure the Docker client on `node1` to use TLS.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`node1`上配置Docker客户端以使用TLS。
- en: Configuring the Docker client for TLS
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为TLS配置Docker客户端
- en: 'In this section, we’ll configure the Docker client on `node1` for two things:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在`node1`上为Docker客户端配置两件事：
- en: To connect to a remote daemon over the network
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到网络上的远程守护程序
- en: To sign all `docker` commands
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对所有`docker`命令进行签名
- en: Perform all of the following from the node that will run your secure Docker
    client (`node1` in the example lab).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从将运行您的安全Docker客户端的节点（例如实验中的`node1`）执行以下所有操作。
- en: Export the following environment variable to configure the client to connect
    to the remote daemon over the network.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 导出以下环境变量以配置客户端通过网络连接到远程守护程序。
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`Try the following command.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下命令。
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`The Docker client is now sending commands to the remote daemon across the
    network, but the remote daemon will only accept authenticated connections.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Docker客户端现在正在通过网络向远程守护程序发送命令，但远程守护程序将仅接受经过身份验证的连接。
- en: Export one more environment variable to tell the Docker client to sign all commands
    with its certificate.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 导出另一个环境变量，告诉Docker客户端使用其证书对所有命令进行签名。
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`Run the `docker version` command again.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`docker version`命令。
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`Congratulations. The client is successfully talking to the remote daemon over
    a secure connection. The final configuration of the lab is shown in Figure A1.4.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜。客户端已成功通过安全连接与远程守护程序通信。实验的最终配置如图A1.4所示。
- en: '![Figure A1.4](images/figurea1-4.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图A1.4](images/figurea1-4.png)'
- en: Figure A1.4
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图A1.4
- en: A couple of final points before we do a quick recap.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行快速回顾之前，还有几点要注意。
- en: This last example works because we copied the clients TLS keys to the folder
    that Docker expects them to be in. This is a hidden folder in your user’s home
    directory called `.docker`. We also gave the keys the default filenames that Docker
    expects (`ca.pem`, `cert.pem`, and `key.pem`). You can specify a different folder
    by exporting `DOCKER_CERT_PATH`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个最后的例子有效是因为我们将客户端的TLS密钥复制到了Docker期望它们在的文件夹中。这是一个隐藏文件夹，位于用户的主目录中，名为`.docker`。我们还给了密钥默认的文件名，Docker期望的是(`ca.pem`,
    `cert.pem`, and `key.pem`)。您可以通过导出`DOCKER_CERT_PATH`来指定不同的文件夹。
- en: You will probably want to make the environment variables (`DOCKER_HOST` and
    `DOCKER_TLS_VERIFY`) more permanent fixtures of your environment.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能希望将环境变量（`DOCKER_HOST`和`DOCKER_TLS_VERIFY`）变成您环境中更加永久的设置。
- en: Docker TLS Recap
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker TLS总结
- en: 'Docker supports two TLS modes:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Docker支持两种TLS模式：
- en: '`daemon mode`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`守护进程模式`'
- en: '`client mode`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`客户端模式`'
- en: Daemon mode will refuse connections from clients that do not sign commands with
    a valid certificate. Client mode will not connect to remote daemons that do not
    possess a valid certificate.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 守护进程模式将拒绝来自未使用有效证书签署命令的客户端的连接。客户端模式将不会连接到没有有效证书的远程守护进程。
- en: Configuring a daemon for TLS is done through the Docker daemon configuration
    file. The file is called `daemon.json` and it’s platform agnostic.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Docker守护进程配置文件来配置TLS。该文件名为`daemon.json`，它是平台无关的。
- en: 'The following `daemon.json` should work on most systems:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`daemon.json`应该适用于大多数系统：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`*   `hosts` tells Docker which socket to bind the daemon on. The example binds
    it to a network socket on port 2376\. You can use any free port, but it’s convention
    to use `2376` for secured Docker connections. Linux systems running `systemd`
    cannot use this flag and require the use of a `systemd` override file.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`*   `hosts`告诉Docker在哪个套接字上绑定守护进程。该示例将其绑定到端口`2376`上的网络套接字。您可以使用任何空闲端口，但惯例是在安全的Docker连接中使用`2376`。运行`systemd`的Linux系统无法使用此标志，需要使用`systemd`覆盖文件。'
- en: '`tls` and `tlsverify` force the daemon to only use encrypted and authenticated
    connections.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tls`和`tlsverify`强制守护进程只使用加密和认证的连接。'
- en: '`tlscacert` tells Docker which CA to trust. This causes Docker to trust all
    certificates signed by that CA.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tlscacert`告诉Docker信任哪个CA。这会导致Docker信任该CA签发的所有证书。'
- en: '`tlscert` tells Docker where the daemon’s certificate is located.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tlscert`告诉Docker守护进程的证书位于哪里。'
- en: '`tlskey` tells Docker where the daemon’s private key is located.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tlskey`告诉Docker守护进程的私钥位于哪里。'
- en: Making any changes to these values requires a Docker restart for them to take
    effect.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些值进行任何更改都需要重新启动Docker才能生效。
- en: 'Configuring the **Docker client** for TLS is as simple as setting two environment
    variables:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为TLS配置**Docker客户端**就是设置两个环境变量：
- en: '`DOCKER_HOST`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOCKER_HOST`'
- en: '`DOCKER_TLS_VERIFY`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOCKER_TLS_VERIFY`'
- en: '`DOCKER_HOST` tells the client where to find the daemon. `export DOCKER_HOST=tcp://node3:2376`
    will tell the Docker client to connect to the daemon on a remote host called `node3`
    on port `2376`.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`DOCKER_HOST`告诉客户端在哪里找到守护进程。`export DOCKER_HOST=tcp://node3:2376`将告诉Docker客户端连接到远程主机`node3`上的端口`2376`上的守护进程。'
- en: '`export DOCKER_TLS_VERIFY=1` will tell the Docker client to sign all of the
    commands it issues.[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`export DOCKER_TLS_VERIFY=1`将告诉Docker客户端签署其发出的所有命令。[PRE26]'
