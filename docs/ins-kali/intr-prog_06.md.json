["```java\npublic class SimpleMath {\n  /*\n    This method just multiplies any integer by 2\n    and returns the result\n  */\n  public int multiplyByTwo(int i){        \n    //Should we check if i is bigger than 1/2 of Integer.MAX_VALUE ?\n    return i * 2; // The magic happens here\n  }\n}\n```", "```java\nint x;  //declartion of variable x\nx = 1;  //initialization of variable x\nx = 2;  //assignment of variable x \n```", "```java\nint x;\nint result = x * 2;  //generates compilation error\n\n```", "```java\nint $ = 1;\nint _1 = 1;\nint i3 = 1;\nint \u03b1\u03c1\u03b5\u03c4\u03b7 = 1;\nint String = 1;\nint MAX_VALUE = 1;\nint isLetterOrDigit = 1;\n\n```", "```java\nString $ = \"abc\";\nString _1 = \"abc\";\nString i3 = \"abc\";\nString \u03b1\u03c1\u03b5\u03c4\u03b7 = \"abc\";\nString String = \"abc\";\nString MAX_VALUE = \"abc\";\nString isLetterOrDigit = \"abc\";\n```", "```java\nvoid someMethod(){\n  final int x = 1;\n  x = 2; //generates compilation error\n  //some other code\n}\n```", "```java\nvoid someMethod(){\n  final int x;\n  //Any code that does not use variable x can be added here\n  x = 2;\n  //some other code \n}\n```", "```java\nstatic final String FEBRUARY = \"February\";\nstatic final int DAYS_IN_DECEMBER = 31;\n```", "```java\nMonth.FEBRUARY;\nTimeUnit.DAYS;\nDayOfWeek.FRIDAY;\n\n```", "```java\nint _ = 3; //Error, underscore is a reserved keyword\nint __ = 3; //More than 1 underscore as an identifier is OK\nint _1 = 3;\nint y_ = 3;\nint goto_x = 3;\nint const1 = 3;\n```", "```java\nint to = 1;\nint open = 1;\nint uses = 1;\nint with = 1;\nint opens =1;\nint module = 1;\nint exports =1;\nint provides = 1;\nint requires = 1;\nint transitive = 1;\n\n```", "```java\n;  { }  ( )  [ ]  ,  .  ...  ::  @\n```", "```java\nint i;  //declaration statement\ni = 2;  //assignment statement\nif(i == 3){    //flow control statement called if-statement\n  //do something\n}\nfor(int i = 0; i < 10; i++){  \n  //do something with each value of i\n}\n```", "```java\nclass SomeClass {\n  //class body with code\n}\n```", "```java\nvoid someMethod(int i){\n  //...\n  if(i == 2){\n    //block of code\n  } else {\n    //another block of code\n  }\n  ...\n}\n```", "```java\nvoid someMethod(int i){\n  //...\n  if(i == 2){\n    //block of code\n  } else {\n    //another block of code\n  }\n  ...\n}\n```", "```java\nint[] myArray = {2,3,5};\n\n```", "```java\nvoid someMethod(int i) {\n  //...\n  String s = anotherMethod();\n  //...\n}\n```", "```java\nif(i == 2){\n  //...\n}\n```", "```java\nlong v = 23;\nint i = (int)v;\n```", "```java\nx = (y + z) * (a + b).\n```", "```java\nint[] a = new int[23];\n```", "```java\nvoid someMethod(int i, String s, int j) {\n  //...\n  String s = anotherMethod(5, 6.1, \"another param\");\n  //...\n}\n```", "```java\nint i, j = 2; k;\n```", "```java\nfor (int i = 0; i < 10; i++){\n   //...\n} \n```", "```java\nint result = simpleMath.multiplyByTwo(i);\n```", "```java\nint someMethod(int i, String s, int... k){\n  //k is an array with elements k[0], k[1], ...\n}\n```", "```java\nsomeMethod(42, \"abc\");          //array k = null\nsomeMethod(42, \"abc\", 42, 43);  //k[0] = 42, k[1] = 43\nint[] k = new int[2];\nk[0] = 42;\nk[1] = 43;\nsomeMethod(42, \"abc\", k);       //k[0] = 42, k[1] = 43\n```", "```java\nList<String> list = List.of(\"1\", \"32\", \"765\");\nlist.stream().mapToInt(Integer::valueOf).sum();\n\n```", "```java\n@Override\nint someMethod(String s){\n  //...\n}\n```", "```java\nboolean b = true;\n\n```", "```java\n int x = 1, y = 1;\n boolean b = 2 == ( x + y );\n```", "```java\nchar a = '3';\nSystem.out.println(a);         //  3\nchar b = '$';\nSystem.out.println(b);         //  $\nSystem.out.println(a + b);     //  87\nSystem.out.println(a + 2);     //  53\na = 36;    \nSystem.out.println(a);         //  $ \n```", "```java\nbyte b = Byte.MIN_VALUE;\nSystem.out.println(b);     //  -127\nb = Byte.MAX_VALUE;\nSystem.out.println(b);     //   128\n\nshort s = Short.MIN_VALUE;\nSystem.out.println(s);      // -32768 \ns = Short.MAX_VALUE;\nSystem.out.println(s);      //  32767\n\nint i = Integer.MIN_VALUE;\nSystem.out.println(i);      // -2147483648\ni = Integer.MAX_VALUE;\nSystem.out.println(i);      //  2147483647\n\nlong l = Long.MIN_VALUE;\nSystem.out.println(l);      // -9223372036854775808\nl = Long.MAX_VALUE;\nSystem.out.println(l);      //  9223372036854775807 \n\nchar c = Character.MIN_VALUE;\nSystem.out.println((int)c); // 0\nc = Character.MAX_VALUE;\nSystem.out.println((int)c); // 65535\n\n```", "```java\nfloat r = 23.4;\n\n```", "```java\nfloat r = 23.4f;\nor\nfloat r = 23.4F;\n```", "```java\nSystem.out.println(Float.MIN_VALUE);  //1.4E-45\nSystem.out.println(Float.MAX_VALUE);  //3.4028235E38\nSystem.out.println(Double.MIN_VALUE); //4.9E-324 \nSystem.out.println(Double.MAX_VALUE); //1.7976931348623157E308\n```", "```java\nint x;\nint y = 0;\nx = 1;\n```", "```java\npublic class LiteralsDemo {\n  public static void main(String[] args){\n    System.out.println(\"boolean literal true: \" + true);\n    System.out.println(\"boolean literal false: \" + false);\n  }\n}\n```", "```java\nSystem.out.println(\"char literal 'a': \" + 'a');\nSystem.out.println(\"char literal '%': \" + '%');\nSystem.out.println(\"char literal '\\u03a9': \" + '\\u03a9'); //Omega\nSystem.out.println(\"char literal '\u2122': \" + '\u2122'); //Trade mark sign\n```", "```java\nSystem.out.println(\"The line breaks \\nhere\");\nSystem.out.println(\"The tab is\\there\");\nSystem.out.println(\"\\\"\");\nSystem.out.println('\\'');\nSystem.out.println('\\\\');\n```", "```java\nSystem.out.println(\"\\nfloat literal 123.456f: \" + 123.456f);\nSystem.out.println(\"double literal 123.456d: \" + 123.456d);\n\n```", "```java\nSystem.out.println(\"\\nfloat literal 1.234560e+02f: \" + 1.234560e+02f);\nSystem.out.println(\"double literal 1.234560e+02d: \" + 1.234560e+02d);\n```", "```java\nbyte b = 10;\nshort s = 10;\nint i = 10;\nlong l = 10;\n\n```", "```java\nbyte b = 128;\nshort s = 32768;\nint i = 2147483648;\nlong l = 2147483648;\n\n```", "```java\nlong l = 2147483648L;\n```", "```java\nSystem.out.println(\"\\nPrint literal 12:\");\nSystem.out.println(\"- bin 0b1100: \"+ 0b1100);\nSystem.out.println(\"- oct    014: \"+ 014);\nSystem.out.println(\"- dec     12: \"+ 12);\nSystem.out.println(\"- hex    0xc: \"+ 0xc);\n\n```", "```java\nSystem.out.println(\"\\nPrint literal -12:\");\nSystem.out.println(\"- bin 0b1100: \"+ -0b1100);\nSystem.out.println(\"- oct    014: \"+ -014);\nSystem.out.println(\"- dec     12: \"+ -12);\nSystem.out.println(\"- hex    0xc: \"+ -0xc);\n\n```", "```java\nint speedOfLightMilesSec = 299_792_458; \nfloat meanRadiusOfEarthMiles = 3_958.8f;\nlong creditCardNumber = 1234_5678_9012_3456L;\n```", "```java\nlong anotherCreditCardNumber = 9876____5678_____9012____1234L;\nSystem.out.println(\"\\n\" + anotherCreditCardNumber);\n\n```", "```java\n<Class name> variableName;\n```", "```java\nSomeBaseClass someBaseClass = new SomeBaseClass();\nsomeBaseClass = new SomeClass();\n```", "```java\nObject someBaseClass = new SomeBaseClass();\nsomeBaseClass = new SomeClass();\n\n```", "```java\n<Interface name> variableName;\n```", "```java\ninterface SomeInterface{\n  void someMethod();\n}\ninterface SomeOtherInterface{\n  void someOtherMethod();\n}\nclass SomeClass implements SomeInterface {\n  void someMethod(){\n    ...\n  }\n} \nclass SomeOtherClass implements SomeOtherInterface{\n  void someOtherMethod(){\n    ...\n  }\n}\nSomeInterface someInterface = new SomeClass();\nsomeInterface = new SomeOtherClass(); //not possible, error\nsomeInterface.someMethod();         //works just fine\nsomeInterface.someOtherMethod();   //not possible, error\n```", "```java\nbyte[] bs;\nlong[][] ls;\nObject[][] os;\nSomeClass[][][] scs; \n```", "```java\n        byte[] bs = new byte[100];\n        long[][] ls = new long [2][3];\n        Object[][] os = new Object[3][2];\n        SomeClass[][][] scs = new SomeClass[3][2][1]; \n```", "```java\n        int[][] is = { { 1, 2, 3 }, { 10, 20 }, { 3, 4, 5, 6 } };\n        float[][] fs = { { 1.1f, 2.2f, 3 }, { 10, 20.f, 30.f } };\n        Object[] oss = { new Object(), new SomeClass(), null, \"abc\" };\n        SomeInterface[] sis = { new SomeClass(), null, new SomeClass() };\n```", "```java\nint[][] is = new int[2][3];\nSystem.out.println(\"\\nis.length=\" + is.length);\nSystem.out.println(\"is[0].length=\" + is[0].length);\nSystem.out.println(\"is[0][0].length=\" + is[0][0]);\nSystem.out.println(\"is[0][1].length=\" + is[0][1]);\nSystem.out.println(\"is[0][2].length=\" + is[0][2]);\nSystem.out.println(\"is[1].length=\" + is[0].length);\nSystem.out.println(\"is[1][0].length=\" + is[1][0]);\nSystem.out.println(\"is[1][1].length=\" + is[1][1]);\nSystem.out.println(\"is[1][2].length=\" + is[1][2]);\n\n```", "```java\nint[][] is = new int[2][];\nSystem.out.println(\"\\nis.length=\" + is.length);\nSystem.out.println(\"is[0]=\" + is[0]);\nSystem.out.println(\"is[1]=\" + is[1]);\n\n```", "```java\nint[][] is = new int[2][];\nis[0] = new int[3];\nis[1] = new int[3];\n\n```", "```java\nSomeClass someClass = new SomeClass();\nsomeClass.someMethod();\nsomeClass = null;\nsomeClass.someMethod(); // throws NullPointerException\n```", "```java\nSystem.out.println(\"\\nFirst line.\\nSecond line.\");\nSystem.out.println(\"Tab space\\tin the line\");\nSystem.out.println(\"It is called a \\\"String literal\\\".\");\nSystem.out.println(\"Latin Capital Letter Y with diaeresis: \\u0178\");\n\n```", "```java\nSystem.out.println(\"s1\" + \"s2\");\nString s1 = \"s1\";\nSystem.out.println(s1 + \"s2\");\nString s2 = \"s1\";\nSystem.out.println(s1 + s2);\n\n```", "```java\n        System.out.println(\"s1\" == \"s1\");\n        System.out.println(\"s1\" == \"s2\");\n        String s1 = \"s1\";\n        System.out.println(s1 == \"s1\");\n        System.out.println(s1 == \"s2\");\n        String s2 = \"s1\";\n        System.out.println(s1 == s2);\n\n```", "```java\n        String s1 = \"\\nthe original string\";\n        String s2 = s1.concat(\" has been changed\"); \n        System.out.println(s2);\n        System.out.println(s1);\n```", "```java\nString s3 = new String(\"s\");\nString s4 = new String(\"s\");\nSystem.out.println(s3 == s4);\n\n```", "```java\nSystem.out.println(\"s5\".equals(\"s5\"));  //true\nSystem.out.println(\"s5\".equals(\"s6\"));  //false\nString s5 = \"s5\";\nSystem.out.println(s5.equals(\"s5\"));   //true\nSystem.out.println(s5.equals(\"s6\"));   //false\nString s6 = \"s6\";\nSystem.out.println(s5.equals(s5));     //true\nSystem.out.println(s5.equals(s6));     //false\nString s7 = \"s6\";\nSystem.out.println(s7.equals(s6));     //true\nString s8 = new String(\"s6\");\nSystem.out.println(s8.equals(s7));     //true\nString s9 = new String(\"s9\");\nSystem.out.println(s8.equals(s9));     //false\n\n```", "```java\npublic boolean equals(Object anObject) {\n  if (this == anObject) {\n    return true;\n  }\n  if (anObject instanceof String) {\n    String aString = (String)anObject;\n    if (coder() == aString.coder()) {\n      return isLatin1() ? \n             StringLatin1.equals(value, aString.value)\n            : StringUTF16.equals(value, aString.value);\n    }\n  }\n  return false;\n}\n```", "```java\npublic class TheBlows {\n  private String name, relation, hobby = \"biking\";\n  private int age;\n  public TheBlows(String name, String relation, int age) {\n    this.name = name;\n    this.relation = relation;\n    this.age = age;\n  }\n  public String getName() { return name; } \n  public String getRelation() { return relation; }\n  public int getAge() { return age; }\n  public String getHobby() { return hobby; }\n  public void setHobby(String hobby) { this.hobby = hobby; }\n}\n```", "```java\npublic class TheBlows {\n  public static TheBlows BILL = new TheBlows(\"Bill\", \"father\", 42);\n  public static TheBlows BECKY = new TheBlows(\"BECKY\", \"mother\", 37);\n  public static TheBlows BEE = new TheBlows(\"Bee\", \"daughter\", 5);\n  public static TheBlows BOB = new TheBlows(\"Bob\", \"son\", 3);\n  private String name, relation, hobby = \"biking\";\n  private int age;\n  private TheBlows(String name, String relation, int age) {\n    this.name = name;\n    this.relation = relation;\n    this.age = age;\n  }\n  public String getName() { return name; }\n  public String getRelation() { return relation; }\n  public int getAge() { return age; }\n  public String getHobby() { return hobby; }\n  public void setHobby(String hobby) { this.hobby = hobby; }\n}\n```", "```java\nSystem.out.println(TheBlows.BILL.getName());\nSystem.out.println(TheBlows.BILL.getHobby());\nTheBlows.BILL.setHobby(\"fishing\");\nSystem.out.println(TheBlows.BILL.getHobby());\n\n```", "```java\npublic class TheJohns {\n  public static TheJohns JOE = new TheJohns(\"Joe\", \"father\", 42);\n  public static TheJohns JOAN = new TheJohns(\"Joan\", \"mother\", 37);\n  public static TheJohns JILL = new TheJohns(\"Jill\", \"daughter\", 5);\n  private String name, relation, hobby = \"joggling\";\n  private int age;\n  private TheJohns(String name, String relation, int age) {\n    this.name = name;\n    this.relation = relation;\n    this.age = age;\n  }\n  public String getName() { return name; }\n  public String getRelation() { return relation; }\n  public int getAge() { return age; }\n  public String getHobby() { return hobby; }\n  public void setHobby(String hobby) { this.hobby = hobby; }\n}\n```", "```java\npublic class Family {\n  private String name, relation, hobby;\n  private int age;\n  protected Family(String name, String relation, int age, String hobby) {\n    this.name = name;\n    this.relation = relation;\n    this.age = age;\n    this.hobby = hobby;\n  }\n  public String getName() { return name; }\n  public String getRelation() { return relation; }\n  public int getAge() { return age; }\n  public String getHobby() { return hobby; }\n  public void setHobby(String hobby) { this.hobby = hobby; }\n}\n```", "```java\npublic class TheBlows extends Family {\n  public static TheBlows BILL = new TheBlows(\"Bill\", \"father\", 42);\n  public static TheBlows BECKY = new TheBlows(\"Becky\", \"mother\", 37);\n  public static TheBlows BEE = new TheBlows(\"Bee\", \"daughter\", 5);\n  public static TheBlows BOB = new TheBlows(\"Bob\", \"son\", 3);\n  private TheBlows(String name, String relation, int age) {\n    super(name, relation, age, \"biking\");\n  }\n}\n```", "```java\nenum Season { SPRING, SUMMER, AUTUMN, WINTER }\n```", "```java\nenum Season { Spring, Summer, Autumn, Winter }\n```", "```java\nvoid enumDemo(Season season){\n  if(season == Season.WINTER){\n    System.out.println(\"Dress up warmer\");\n  } else {\n    System.out.println(\"You can drees up lighter now\");\n  }\n}\n```", "```java\nenumDemo(Season.WINTER);\nenumDemo(Season.SUMMER);\n```", "```java\nSeason season = Season.WINTER;\nSystem.out.println(Season.WINTER == season);\nSystem.out.println(Season.WINTER.equals(season));\n\n```", "```java\npublic final boolean equals(Object other) {\n  return this == other;\n}\n```", "```java\nenum Season {\n  SPRING, SUMMER, AUTUMN, WINTER;\n}\n```", "```java\nSystem.out.println(Season.SPRING.name());\nSystem.out.println(Season.SUMMER.ordinal());\nSystem.out.println(Enum.valueOf(Season.class, \"AUTUMN\"));\nSystem.out.println(Season.WINTER.name());\n\n```", "```java\nenum Season {\n  SPRING, SUMMER, AUTUMN, WINTER;\n  public String toString() {\n    return \"The best season\";\n  }\n}\n```", "```java\nenum Season2 {\n  SPRING,\n  SUMMER,\n  AUTUMN,\n  WINTER { public String toString() { return \"Winter\"; } };\n  public String toString() {\n    return \"The best season\";\n  }\n}\n```", "```java\nenum Season {\n  SPRING(\"Spring\", \"warmer than winter\", 60),\n  SUMMER(\"Summer\", \"the hottest season\", 100),\n  AUTUMN(\"Autumn\", \"colder than summer\", 70),\n  WINTER(\"Winter\", \"the coldest season\", 40);\n\n  private String feel, toString;\n  private int averageTemperature;\n  Season(String toString, String feel, int t) {\n    this.feel = feel;\n    this.toString = toString;\n    this.averageTemperature = t;\n  }\n  public String getFeel(){ return this.feel; }\n  public int getAverageTemperature(){\n    return this.averageTemperature;\n  }\n  public String toString() { return this.toString; }\n}\n```", "```java\nvoid enumDemo(Season season){\n  System.out.println(season + \" is \" + season.getFeel());\n  System.out.println(season + \" has average temperature around \" \n                               + season.getAverageTemperature());\n}\n```", "```java\nenumDemo2(Season3.SPRING);\nenumDemo2(Season3.SUMMER);\nenumDemo2(Season3.AUTUMN);\nenumDemo2(Season3.WINTER);\n\n```", "```java\n@DisplayName(\"Enum Season tests\")\npublic class EnumSeasonTest {\n  @Test\n  @DisplayName(\"Test Spring getters\")\n  void multiplyByTwo(){\n    assertEquals(\"Spring\", Season.SPRING.toString());\n    assertEquals(\"warmer than winter\", Season.SPRING.getFeel());\n    assertEquals(60, Season.SPRING.getAverageTemperature());\n  }\n}\n```", "```java\nMonth.FEBRUARY;\nTimeUnit.DAYS;\nTimeUnit.MINUTES;\nDayOfWeek.FRIDAY;\nColor.GREEN;\nColor.green;\n\n```", "```java\nclass SomeClass{\n  private int count;\n  public int getCount() {\n    return count;\n  }\n  public void setCount(int count) {\n      this.count = count;\n    }\n}\n```", "```java\npublic class ReferenceTypeDemo {\n  public static void main(String[] args) {\n    float f = 1.0f;\n    SomeClass someClass = new SomeClass();\n    System.out.println(\"\\nBefore demoMethod(): f = \" + f + \n                             \", count = \" + someClass.getCount());\n    demoMethod(f, someClass);\n    System.out.println(\"After demoMethod(): f = \" + f \n                           + \", count = \" + someClass.getCount());\n  }\n  private static void demoMethod(float f, SomeClass someClass){\n    //... some code can be here\n    f = 42.0f;\n    someClass.setCount(42);\n    someClass = new SomeClass();\n    someClass.setCount(1001);\n  }\n}\n```", "```java\npublic class ReferenceTypeDemo {\n  public static void main(String[] args) {\n    int[] someArray = {1, 2, 3};\n    System.out.println(\"\\nBefore demoMethod(): someArray[0] = \" \n                                               + someArray[0]);\n    demoMethod(someArray);\n    System.out.println(\"After demoMethod(): someArray[0] = \" \n                                                + someArray[0]);\n  }\n  private static void demoMethod(int[] someArray){\n    someArray[0] = 42;\n    someArray = new int[3];\n    someArray[0] = 43;\n  }\n}\n```", "```java\npublic class ReferenceTypeDemo {\n  public static void main(String[] args) {\n    String someString = \"Some string\";\n    System.out.println(\"\\nBefore demoMethod(): string = \" \n                                              + someString);\n    demoMethod(someString);\n    System.out.println(\"After demoMethod(): string = \" \n                                              + someString);\n  }\n  private static void demoMethod(String someString){\n    someString = \"Some other string\";\n  }\n}\n```"]