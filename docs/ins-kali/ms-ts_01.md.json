["```ts\nvar test = \"this is a string\";\ntest = 1;\ntest = function(a, b) {\n    return a + b;\n}\n```", "```ts\nvar test: string = \"this is a string\";\ntest = 1;\ntest = function(a, b) { return a + b; }\n```", "```ts\nerror TS2011: Build: Cannot convert 'number' to 'string'.\nerror TS2011: Build: Cannot convert '(a: any, b: any) => any' to 'string'.\n\n```", "```ts\nvar describe = function(description, specDefinitions) {\n  return jasmine.getEnv().describe(description, specDefinitions);\n};\n```", "```ts\ndescribe(\"A suite\", function () {\n    it(\"contains spec with an expectation\", function () {\n        expect(true).toBe(true);\n    });\n});\n```", "```ts\ndeclare function describe(\n    description: string, specDefinitions: () => void\n): void;\n```", "```ts\ndescribe(() => { /* function body */}, \"description\");\n```", "```ts\nerror TS2082: Build: Supplied parameters do not match any signature of call target: Could not apply type \"string\" to argument 1 which is of type () => void\n\n```", "```ts\nclass MyClass {\n    add(x, y) {\n        return x + y;\n    }\n}\n\nvar classInstance = new MyClass();\nconsole.log(classInstance.add(1, 2));\n```", "```ts\nvar MyClass = (function () {\n    // the self-invoking function is the \n    // environment that will be remembered\n    // by the closure\n    function MyClass() {\n        // MyClass is the inner function,\n        // the closure\n    MyClass.prototype.add = function (x, y) {\n        return x + y;\n    };\n    return MyClass;\n})();\nvar classInstance = new MyClass();\nconsole.log(\"result : \" + classInstance.add(1, 2));\n```", "```ts\nvar MyClass = (function() {\n    function MyClass() {\n        this._count = 0;\n    }\n    MyClass.prototype.countUp = function() {\n        this._count ++;\n    }\n    MyClass.prototype.getCountUp = function() {\n        return this._count;\n    }\n    return MyClass;\n}());\n\nvar test = new MyClass();\ntest._count = 17;\nconsole.log(\"countUp : \" + test.getCountUp());\n```", "```ts\nclass MyClass {\n    private _count: number;\n    constructor() {\n        this._count = 0;\n    }\n    countUp() {\n        this._count++;\n    }\n    getCount() {\n        return this._count;\n    }\n}\n\nvar classInstance = new MyClass();\nconsole.log(classInstance._count);\n```", "```ts\nerror TS2107: Build: 'MyClass._count' is inaccessible.\n\n```", "```ts\n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <title>TypeScript HTML App</title>\n    <link rel=\"stylesheet\" href=\"app.css\" type=\"text/css\" />\n    <script src=\"img/app.js\"></script>\n</head>\n<body>\n    <h1>TypeScript HTML App</h1>\n\n    <div id=\"content\"></div>\n</body>\n</html>\n```", "```ts\nclass MyClass {\n    public render(divId: string, text: string) {\n        var el: HTMLElement = document.getElementById(divId);\n        el.innerText = text;\n    }\n}\n\nwindow.onload = () => {\n    var myClass = new MyClass();\n    myClass.render(\"content\", \"Hello World\");\n}\n```", "```ts\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <script src=\"img/app.js\" type=\"application/javascript\"></script>\n</head>\n<body>\n    <h2>Index.html</h2>\n    <div id=\"content\"></div>\n</body>\n</html>\n```", "```ts\nhtml>head+body>h3{index.html}+div#content\n```", "```ts\n<html>\n<head></head>\n<body>\n    <h3>index.html</h3>\n    <div id=\"content\"></div>\n</body>\n</html>\n```", "```ts\nscript:src\n```", "```ts\n<html>\n<head>\n    <script src=\"img/app.js\"></script>\n</head>\n<body>\n    <h3>index.html</h3>\n    <div id=\"content\"></div>\n</body>\n</html>\n```", "```ts\nul>li.item$*5\n```", "```ts\nclass MyClass {\n    render( elementId: string, text: string) {\n        var el: HTMLElement = document.getElementById(elementId);\n        el.innerHTML = text;\n    }\n}\nwindow.onload = () => {\n    var myClass = new MyClass();\n    myClass.render(\"content\", \"Hello world!\");\n}\n```", "```ts\n**tsc app.ts** \n```", "```ts\n**npm init** \n```", "```ts\n**npm install grunt \u2013save-dev** \n```", "```ts\n**Npm install grunt-typescript \u2013save-dev**\n**Npm install grunt-contrib-watch \u2013save-dev.** \n```", "```ts\nmodule.exports = function (grunt) {\n    grunt.loadNpmTasks('grunt-typescript');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        typescript: {\n            base: {\n                src: ['**/*.ts'],\n                options: {\n                    module: 'commonjs',\n                    target: 'es5',\n                    sourceMap: true\n                }\n            }\n        },\n        watch: {\n            files: '**/*.ts',\n            tasks: ['typescript']\n        }\n    });\n\n   //grunt.registerTask('default', ['typescript']);\n    grunt.registerTask('default', ['watch']);\n}\n```", "```ts\n**Grunt** \n```", "```ts\n**>> File \"app.ts\" changed.**\n**Running \"typescript:base\" (typescript) task**\n**2 files created. js: 1 file, map: 1 file, declaration: 0 files (861ms)**\n**Done, without errors.**\n**Completed in 1.665s at Fri Oct 10 2014 11:24:47 GMT+0800 (W. Australia Standard Time) - Waiting...** \n```"]