- en: Docker Compose
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Compose
- en: In the previous chapter, we learned a lot about how container networking works
    on a single Docker host. We introduced the **Container Network Model** (**CNM**),
    which forms the basis of all networking between Docker containers, and then we
    dove deep into different implementations of the CNM, specifically the bridge network. Finally,
    we introduced Traefik, a reverse proxy, to enable sophisticated HTTP application-level
    routing between containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学到了关于容器网络在单个Docker主机上是如何工作的。我们介绍了**容器网络模型**（**CNM**），它构成了Docker容器之间所有网络的基础，然后我们深入研究了CNM的不同实现，特别是桥接网络。最后，我们介绍了Traefik，一个反向代理，以实现容器之间复杂的HTTP应用级路由。
- en: This chapter introduces the concept of an application consisting of multiple
    services, each running in a container, and how Docker Compose allows us to easily
    build, run, and scale such an application using a declarative approach.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一个应用程序由多个服务组成的概念，每个服务在一个容器中运行，以及Docker Compose如何允许我们使用声明式方法轻松构建、运行和扩展这样的应用程序。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Demystifying declarative versus imperative
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭秘声明式与命令式
- en: Running a multi-service application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行多服务应用程序
- en: Scaling a service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展服务
- en: Building and pushing an application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和推送应用程序
- en: Using Docker Compose overrides
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Compose覆盖
- en: 'After completing this chapter, the reader will be able to do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，读者将能够做到以下事情：
- en: Explain in a few short sentences the main differences between an imperative
    and declarative approach for defining and running an application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用几句简短的话解释命令式和声明式方法在定义和运行应用程序方面的主要区别
- en: Describe in their own words the difference between a container and a Docker
    Compose service
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用自己的话描述容器和Docker Compose服务之间的区别
- en: Author a Docker Compose YAML file for a simple multi-service application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为简单的多服务应用程序编写Docker Compose YAML文件
- en: Build, push, deploy, and tear down a simple multi-service application using
    Docker Compose
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Compose构建、推送、部署和拆除简单的多服务应用程序
- en: Use Docker Compose to scale an application service up and down
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Compose扩展和缩减应用服务
- en: Define environment-specific Docker Compose files using overrides
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用覆盖定义特定于环境的Docker Compose文件
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code accompanying this chapter can be found at [https://github.com/PacktPublishing/Learn-Docker---Fundamentals-of-Docker-19.x-Second-Edition/tree/master/ch11](https://github.com/PacktPublishing/Learn-Docker---Fundamentals-of-Docker-19.x-Second-Edition/tree/master/ch11).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章附带的代码可以在以下位置找到：[https://github.com/PacktPublishing/Learn-Docker---Fundamentals-of-Docker-19.x-Second-Edition/tree/master/ch11](https://github.com/PacktPublishing/Learn-Docker---Fundamentals-of-Docker-19.x-Second-Edition/tree/master/ch11)。
- en: You need to have `docker-compose` installed on your system. This is automatically
    the case if you have installed Docker for Desktop or Docker Toolbox on your Windows
    or macOS computer. Otherwise, you can find detailed installation instructions
    here: [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在系统上安装`docker-compose`。如果您在Windows或macOS计算机上安装了Docker for Desktop或Docker
    Toolbox，则这是自动的。否则，您可以在这里找到详细的安装说明：[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)
- en: Demystifying declarative versus imperative
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭秘声明式与命令式
- en: Docker Compose is a tool provided by Docker that is mainly used where you need
    to run and orchestrate containers running on a single Docker host. This includes,
    but is not limited to, development, **continuous integration** (**CI**), automated
    testing, manual QA, or demos.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose是Docker提供的一个工具，主要用于在单个Docker主机上运行和编排容器。这包括但不限于开发、**持续集成**（**CI**）、自动化测试、手动QA或演示。
- en: Docker Compose uses files formatted in YAML as input. By default, Docker Compose
    expects these files to be called `docker-compose.yml`, but other names are possible.
    The content of a `docker-compose.yml` is said to be a *declarative* way of describing
    and running a containerized application potentially consisting of more than a
    single container.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose使用YAML格式的文件作为输入。默认情况下，Docker Compose期望这些文件被称为`docker-compose.yml`，但也可以使用其他名称。`docker-compose.yml`的内容被称为描述和运行一个可能由多个容器组成的容器化应用程序的*声明性*方式。
- en: So, *what is the meaning of declarative?*
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，*声明性的意思是什么呢？*
- en: 'First of all, *declarative* is the antonym of *imperative*. Well, that doesn''t
    help much. Now that I have introduced another definition, I need to explain both
    of them:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，*声明性*是*命令式*的反义词。好吧，这并没有太大帮助。既然我介绍了另一个定义，我需要解释这两个定义：
- en: '**Imperative: **This is a way in which we can solve problems by specifying
    the exact procedure that has to be followed by the system.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令式：**这是一种通过指定系统必须遵循的确切过程来解决问题的方式。'
- en: If I tell a system such as the Docker daemon imperatively how to run an application,
    then that means that I have to describe step by step what the system has to do
    and how it has to react if some unexpected situation occurs. I have to be very
    explicit and precise in my instructions. I need to cover all edge cases and how
    they need to be treated.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我命令式地告诉Docker守护程序如何运行一个应用程序，那意味着我必须逐步描述系统必须做什么，以及如果发生意外情况时系统必须如何反应。我必须非常明确和精确地说明我的指示。我需要涵盖所有边缘情况以及它们需要如何处理。
- en: '**Declarative:** This is a way in which we can solve problems without requiring
    the programmer to specify an exact procedure to be followed.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明式：**这是一种解决问题的方式，不需要程序员指定要遵循的确切过程。'
- en: A declarative approach means that I tell the Docker engine what my desired state
    for an application is and it has to figure out on its own how to achieve this
    desired state and how to reconcile it if the system deviates from it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性方法意味着我告诉Docker引擎我的应用程序的期望状态是什么，它必须自行解决如何实现这个期望状态，以及如果系统偏离了这个状态，如何调和它。
- en: Docker clearly recommends the declarative approach when dealing with containerized
    applications. Consequently, the Docker Compose tool uses this approach.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Docker在处理容器化应用程序时明确推荐使用声明性方法。因此，Docker Compose工具使用了这种方法。
- en: Running a multi-service app
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行多服务应用程序
- en: In most cases, applications do not consist of only one monolithic block, but rather
    of several application services that work together. When using Docker containers,
    each application service runs in its own container. When we want to run such a
    multi-service application, we can, of course, start all the participating containers
    with the well-known `docker container run` command, and we have done this in previous
    chapters. But this is inefficient at best. With the Docker Compose tool, we are
    given a way to define the application in a declarative way in a file that uses
    the YAML format.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，应用程序不仅由一个单块组成，而是由几个应用程序服务共同工作。使用Docker容器时，每个应用程序服务都在自己的容器中运行。当我们想要运行这样一个多服务应用程序时，当然可以使用众所周知的`docker
    container run`命令启动所有参与的容器，我们在之前的章节中已经这样做了。但这充其量是低效的。使用Docker Compose工具，我们可以以声明性的方式在使用YAML格式的文件中定义应用程序。
- en: 'Let''s have a look at the content of a simple `docker-compose.yml` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的`docker-compose.yml`文件的内容：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The lines in the file are explained as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的行解释如下：
- en: '`version`: In this line, we specify the version of the Docker Compose format
    we want to use. At the time of writing, this is version 2.4.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：在这一行中，我们指定要使用的Docker Compose格式的版本。在撰写本文时，这是2.4版本。'
- en: '`services`: In this section, we specify the services that make up our application
    in the `services` block. In our sample, we have two application services and we
    call them `web` and `db`:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`服务`：在这一部分，我们在`services`块中指定了构成我们应用程序的服务。在我们的示例中，我们有两个应用程序服务，我们称它们为`web`和`db`：'
- en: '`web`: The `web` service is using an image called `fundamentalsofdocker/ch11-web:2.0`, which,
    if not already in the image cache, is built from the `Dockerfile` found in the `web`
    folder . The service is also publishing container port `3000` to the host port `80`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web`：`web`服务使用一个名为`fundamentalsofdocker/ch11-web:2.0`的镜像，如果镜像不在镜像缓存中，它将从`web`文件夹中的`Dockerfile`构建。该服务还将容器端口`3000`发布到主机端口`80`。'
- en: '`db`: The `db` service, on the other hand, is using the image name `fundamentalsofdocker/ch11-db:2.0`,
    which is a customized PostgreSQL database. Once again, if the image is not already
    in the cache, it is built from the `Dockerfile` found in the `db` folder . We
    are mounting a volume called `pets-data` into the container of the `db` service.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`：另一方面，`db`服务使用的是镜像名称`fundamentalsofdocker/ch11-db:2.0`，这是一个定制的PostgreSQL数据库。同样，如果镜像不在缓存中，它将从`db`文件夹中的`Dockerfile`构建。我们将一个名为`pets-data`的卷挂载到`db`服务的容器中。'
- en: '`volumes`: The volumes used by any of the services have to be declared in this
    section. In our sample, this is the last section of the file. The first time the
    application is run, a volume called `pets-data` will be created by Docker and
    then, in subsequent runs, if the volume is still there, it will be reused. This
    could be important when the application, for some reason, crashes and has to be
    restarted. Then, the previous data is still around and ready to be used by the
    restarted database service.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`卷`：任何服务使用的卷都必须在此部分声明。在我们的示例中，这是文件的最后一部分。第一次运行应用程序时，Docker将创建一个名为`pets-data`的卷，然后在后续运行中，如果卷仍然存在，它将被重用。当应用程序由于某种原因崩溃并需要重新启动时，这可能很重要。然后，先前的数据仍然存在并准备好供重新启动的数据库服务使用。'
- en: Note that we are using version 2.x of the Docker Compose file syntax. This is
    the one targeted toward deployments on a single Docker host. There exists also
    a version 3.x of the Docker Compose file syntax. This version is used when you
    want to define an application that is targeted either at Docker Swarm or Kubernetes.
    We will discuss this in more detail starting with [Chapter 12](27c0d9ce-fab6-4ce9-9034-4f2fb62931e8.xhtml), *Orchestrators*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用的是Docker Compose文件语法的2.x版本。这是针对单个Docker主机部署的版本。Docker Compose文件语法还存在3.x版本。当您想要定义一个针对Docker
    Swarm或Kubernetes的应用程序时，可以使用此版本。我们将从[第12章](27c0d9ce-fab6-4ce9-9034-4f2fb62931e8.xhtml)开始更详细地讨论这个问题，*编排器*。
- en: Building images with Docker Compose
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Compose构建镜像
- en: 'Navigate to the `ch11` subfolder of the `fods` folder and then build the images:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`fods`文件夹的`ch11`子文件夹，然后构建镜像：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we enter the preceding command, then the tool will assume that there must
    be a file in the current directory called `docker-compose.yml` and it will use
    that one to run. In our case, this is indeed the case and the tool will build
    the images.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入上述命令，那么工具将假定当前目录中必须有一个名为`docker-compose.yml`的文件，并将使用该文件来运行。在我们的情况下，确实如此，工具将构建镜像。
- en: 'In your Terminal window, you should see an output similar to this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端窗口中，您应该看到类似于这样的输出：
- en: '![](assets/9c627297-4997-47b2-804b-19cc63213e24.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/9c627297-4997-47b2-804b-19cc63213e24.png)
- en: Building the Docker image for the web service
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为web服务构建Docker镜像
- en: 'In the preceding screenshot, you can see that `docker-compose` first downloads
    the base image `node:12.12-alpine`, for the web image we''re building from Docker
    Hub. Subsequently, it uses the `Dockerfile` found in the `web` folder to build
    the image and names it `fundamentalsofdocker/ch11-web:2.0`. But this is only the
    first part; the second part of the output should look similar to this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述屏幕截图中，您可以看到`docker-compose`首先从Docker Hub下载了基本图像`node:12.12-alpine`，用于我们正在构建的Web图像。
    随后，它使用`web`文件夹中找到的`Dockerfile`构建图像，并将其命名为`fundamentalsofdocker/ch11-web:2.0`。
    但这只是第一部分； 输出的第二部分应该类似于这样：
- en: '![](assets/3fe4b4e5-ab79-4dbe-ae7a-46388ff69cd4.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: 浏览器中的示例应用程序
- en: Building the Docker image for the db service
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了两个服务，`ch11_web_1`和`ch11_db_1`，并将它们附加到网络
- en: Here, once again, `docker-compose` pulls the base image, `postgres:12.0-alpine`,
    from Docker Hub and then uses the `Dockerfile` found in the `db` folder to build
    the image we call `fundamentalsofdocker/ch11-db:2.0`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`docker-compose`再次从Docker Hub拉取基本图像`postgres:12.0-alpine`，然后使用`db`文件夹中找到的`Dockerfile`构建我们称为`fundamentalsofdocker/ch11-db:2.0`的图像。
- en: Running an application with Docker Compose
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Compose运行应用程序
- en: 'Once we have built our images, we can start the application using Docker Compose:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 构建了db服务的Docker镜像
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will show us the application starting. We should see the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将向我们展示应用程序的启动。 我们应该看到以下内容：
- en: '![](assets/ac776f44-7157-4362-afa0-9cc470ee5b4b.png)Running the sample application,
    part 1'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ac776f44-7157-4362-afa0-9cc470ee5b4b.png)运行示例应用程序，第1部分'
- en: 'In this first part of the output, we see how Docker Compose does the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出的第一部分中，我们看到Docker Compose执行以下操作：
- en: Creates a bridge network called `ch11_default`
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在让我们看一下输出的第二部分：
- en: Creates a volume called `ch11_pets-data`
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建名为`ch11_pets-data`的卷
- en: Creates the two services, `ch11_web_1` and `ch11_db_1`, and attaches them to
    the network
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们可以打开一个浏览器标签，并导航到`localhost/animal`。 我们应该会看到我在肯尼亚马赛马拉国家公园拍摄的一张野生动物的照片：
- en: Docker Compose then also shows log output generated by the database (blue) and
    by the web service (yellow) that are both stating up. The third last line in the
    output shows us that the web service is ready and listens at port `3000`. Remember
    though that this is the container port and not the host port. We have mapped container
    port `3000` to host port `80`, and that is the port we will be accessing later
    on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose还显示了数据库（蓝色）和Web服务（黄色）生成的日志输出。 倒数第三行的输出向我们展示了Web服务已准备就绪，并在端口`3000`上监听。
    请记住，这是容器端口，而不是主机端口。 我们已将容器端口`3000`映射到主机端口`80`，这是我们稍后将访问的端口。
- en: 'Now let''s look at the second part of the output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3fe4b4e5-ab79-4dbe-ae7a-46388ff69cd4.png)'
- en: '![](assets/c7d558d6-4970-4696-a92c-6bd8fc46128e.png)Running the sample application,
    part 2'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c7d558d6-4970-4696-a92c-6bd8fc46128e.png)运行示例应用程序，第2部分'
- en: We have shortened the second part of the output a bit. It shows us how the database
    finalizes its initialization. We can specifically see how our initialization script, `init-db.sql`,
    is applied, which defines a database and seeds it with some data.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经缩短了输出的第二部分。 它向我们展示了数据库如何完成初始化。 我们可以具体看到我们的初始化脚本`init-db.sql`的应用，该脚本定义了一个数据库并用一些数据填充它。
- en: 'We can now open a browser tab and navigate to `localhost/animal`. We should
    be greeted by a wild animal whose picture I took at the Masai Mara national park
    in Kenya:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/fa80d99d-40f4-45af-99d6-ec013f32cdba.png)'
- en: '![](assets/fa80d99d-40f4-45af-99d6-ec013f32cdba.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: 创建名为`ch11_default`的桥接网络
- en: The sample application in the browser
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们构建了图像，就可以使用Docker Compose启动应用程序：
- en: Refresh the browser a few times to see other cat images. The application selects
    the current image randomly from a set of 12 images whose URLs are stored in the
    database.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新浏览器几次以查看其他猫的图片。 应用程序从数据库中存储的12个图像的URL中随机选择当前图像。
- en: 'As the application is running in interactive mode and, thus, the Terminal where
    we ran Docker Compose is blocked, we can cancel the application by pressing *Ctrl *+ *C*.
    If we do so, we will see the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序正在交互模式下运行，因此我们运行Docker Compose的终端被阻塞，我们可以通过按*Ctrl*+*C*来取消应用程序。如果我们这样做，我们会看到以下内容：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will notice that the database and the web services stop immediately. Sometimes,
    though, some services will take about 10 seconds to do so. The reason for this
    is that the database and the web service listen to, and react to, the `SIGTERM` signal
    sent by Docker while other services might not, and so Docker kills them after
    a predefined timeout interval of 10 seconds.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会注意到数据库和web服务会立即停止。不过有时，一些服务可能需要大约10秒钟才能停止。原因是数据库和web服务监听并对Docker发送的`SIGTERM`信号做出反应，而其他服务可能不会，因此Docker在预定义的10秒超时间隔后将它们杀死。
- en: 'If we run the application again with `docker-compose up`, the output will be
    much shorter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次使用`docker-compose up`运行应用程序，输出将会更短：
- en: '![](assets/24c4d502-363e-4c41-a0c7-f441ac0e6cee.png)Output of docker-compose
    up'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/24c4d502-363e-4c41-a0c7-f441ac0e6cee.png)docker-compose up的输出'
- en: This time, we didn't have to download the images and the database didn't have
    to initialize from scratch, but it was just reusing the data that was already
    present in the `pets-data` volume from the previous run.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们不需要下载镜像，数据库也不需要从头开始初始化，而是只是重用了上一次运行中已经存在的`pets-data`卷中的数据。
- en: 'We can also run the application in the background. All containers will run
    as daemons. For this, we just need to use the `-d` parameter, as shown in the
    following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在后台运行应用程序。所有容器将作为守护进程运行。为此，我们只需要使用`-d`参数，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Docker Compose offers us many more commands than just `up`. We can use the
    tool to list all services that are part of the application:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose为我们提供了许多比`up`更多的命令。我们可以使用这个工具来列出应用程序中的所有服务：
- en: '![](assets/4de77740-ac1d-4bb2-9f8f-0c0b203897d4.png)Output of docker-compose
    ps'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4de77740-ac1d-4bb2-9f8f-0c0b203897d4.png)docker-compose ps的输出'
- en: This command is similar to `docker container ls`, with the only difference being
    that `docker-compose` only lists containers or services that are part of the application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令类似于`docker container ls`，唯一的区别是`docker-compose`只列出应用程序中的容器或服务。
- en: 'To stop and clean up the application, we use the `docker-compose down` command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止和清理应用程序，我们使用`docker-compose down`命令：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we also want to remove the volume for the database, then we can use the
    following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还想删除数据库的卷，那么我们可以使用以下命令：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, instead of using the two commands, `docker-compose down` and
    `docker volume rm <volume name>`, we can combine them into a single command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将`docker-compose down`和`docker volume rm <volume name>`两个命令合并成一个单一的命令：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, the argument `-v` (or `--volumes`) removes named volumes declared in the
    `volumes` section of the `compose` file and anonymous volumes attached to containers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，参数`-v`（或`--volumes`）会移除在`compose`文件的`volumes`部分声明的命名卷和附加到容器的匿名卷。
- en: 'Why is there a `ch11` prefix in the name of the volume? In the `docker-compose.yml` file,
    we have called the volume to use `pets-data`. But, as we have already mentioned,
    Docker Compose prefixes all names with the name of the parent folder of the `docker-compose.yml` file
    plus an underscore. In this case, the parent folder is called `ch11`. If you don''t
    like this approach, you can define a project name explicitly, for example, as
    follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么卷的名称中有一个`ch11`前缀？在`docker-compose.yml`文件中，我们已经调用了要使用的卷为`pets-data`。但是，正如我们已经提到的，Docker
    Compose会用父文件夹的名称加上下划线作为所有名称的前缀。在这种情况下，父文件夹的名称叫做`ch11`。如果你不喜欢这种方法，你可以显式地定义一个项目名称，例如：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: which uses a project name my-app for the application to run under.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用了一个名为my-app的项目名称来运行应用程序。
- en: Scaling a service
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展服务
- en: Now, let's, for a moment, assume that our sample application has been live on
    the web and become very successful. Loads of people want to see our cute animal
    images. So now we're facing a problem, since our application has started to slow
    down. To counteract this problem, we want to run multiple instances of the web
    service. With Docker Compose, this is readily done.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们的示例应用程序已经在网络上运行并且变得非常成功。很多人想要看我们可爱的动物图片。所以现在我们面临一个问题，因为我们的应用程序开始变慢了。为了解决这个问题，我们想要运行多个web服务的实例。使用Docker
    Compose，这很容易实现。
- en: 'Running more instances is also called scaling up. We can use this tool to scale
    our `web` service up to, say, three instances:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行更多实例也被称为扩展。我们可以使用这个工具将我们的`web`服务扩展到，比如说，三个实例：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we do this, we are in for a surprise. The output will look similar to the
    following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们这样做，我们会有一个惊喜。输出将类似于以下的截图：
- en: '![](assets/6c367f83-aae2-4c84-b5bb-6547f80846ae.png)Output of docker-compose
    --scale'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6c367f83-aae2-4c84-b5bb-6547f80846ae.png)docker-compose --scale的输出'
- en: 'The second and third instances of the web service fail to start. The error
    message tells us why: we cannot use the same host port `80` more than once. When
    instances 2 and 3 try to start, Docker realizes that port `80` is already taken
    by the first instance. *What can we do?* Well, we can just let Docker decide which
    host port to use for each instance.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: web服务的第二个和第三个实例无法启动。错误消息告诉我们原因：我们不能多次使用相同的主机端口`80`。当第2和第3个实例尝试启动时，Docker意识到端口`80`已经被第一个实例占用。*我们能做什么？*嗯，我们可以让Docker决定为每个实例使用哪个主机端口。
- en: 'If, in the `ports` section of the `compose` file, we only specify the container
    port and leave out the host port, then Docker automatically selects an ephemeral
    port. Let''s do exactly this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`compose`文件的`ports`部分中，我们只指定容器端口，而不指定主机端口，那么Docker会自动选择一个临时端口。让我们就这样做：
- en: 'First, let''s tear down the application:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们拆除应用程序：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we modify the `docker-compose.yml` file to look as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们修改`docker-compose.yml`文件如下所示：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we can start the application again and scale it up immediately after that:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以再次启动应用程序，并立即扩展它：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we now do `docker-compose ps`, we should see the following screenshot:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在执行`docker-compose ps`，我们应该会看到以下的截图：
- en: '![](assets/608fb23b-b615-4b34-b389-37d014004c77.png)Output of docker-compose
    ps'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/608fb23b-b615-4b34-b389-37d014004c77.png)docker-compose ps的输出'
- en: 'As we can see, each service has been associated to a different host port. We
    can try to see whether they work, for example, using `curl`. Let''s test the third
    instance, `ch11_web_3`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所看到的，每个服务都关联到了不同的主机端口。我们可以尝试看看它们是否工作，比如使用`curl`。让我们测试第三个实例，`ch11_web_3`：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The answer, `Pets Demo Application`, tells us that, indeed, our application
    is still working as expected. Try it out for the other two instances to be sure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 答案`Pets Demo Application`告诉我们，我们的应用程序确实仍然按预期工作。为了确保，尝试对其他两个实例进行测试。
- en: Building and pushing an application
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和推送应用程序
- en: 'We have seen earlier that we can also use the `docker-compose build` command to just
    build the images of an application defined in the underlying `docker-compose` file.
    But to make this work, we''ll have to add the build information to the `docker-compose` file.
    In the folder, we have a file, `docker-compose.dev.yml`, which has those instructions
    already added. It is basically a copy of the `docker-compose.yml` file we have
    used so far:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看到，我们也可以使用`docker-compose build`命令来构建`docker-compose`文件中定义的应用程序的镜像。但是为了使其工作，我们必须将构建信息添加到`docker-compose`文件中。在文件夹中，我们有一个名为`docker-compose.dev.yml`的文件，其中已经添加了这些指令。它基本上是我们迄今为止使用的`docker-compose.yml`文件的副本。
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Please note the `build` key for each service. The value of that key indicates
    the context or folder where Docker is expecting to find the `Dockerfile` to build
    the corresponding image. If we wanted to use a `Dockerfile` that is named differently,
    say `Dockerfile-dev`, for the `web` service, then the `build` block in the `docker-compose`
    file would look like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意每个服务的`build`键。该键的值表示Docker期望找到`Dockerfile`以构建相应映像的上下文或文件夹。如果我们想要为`web`服务使用命名不同的`Dockerfile`，比如`Dockerfile-dev`，那么`docker-compose`文件中的`build`块将如下所示：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s use that alternative `docker-compose-dev.yml` file now:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用另一个`docker-compose-dev.yml`文件：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `-f` parameter will tell the Docker Compose application which `compose`
    file to use.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`-f`参数将告诉Docker Compose应用程序使用哪个`compose`文件。'
- en: 'To push all images to Docker Hub, we can use `docker-compose push`. We need
    to be logged in to Docker Hub so that this succeeds, otherwise we get an authentication
    error while pushing. Thus, in my case, I do the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要将所有映像推送到Docker Hub，我们可以使用`docker-compose push`。我们需要登录到Docker Hub，以便成功，否则在推送时会出现身份验证错误。因此，在我的情况下，我执行以下操作：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Assuming the login succeeds, I can then push the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 假设登录成功，然后我可以推送以下代码：
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This may take a while, depending on the bandwidth of your internet connection.
    While pushing, your screen may look similar to this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一段时间，具体取决于您的互联网连接带宽。在推送时，您的屏幕可能看起来类似于这样：
- en: '![](assets/3add68f8-5a90-4edb-96a4-68743bff811b.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3add68f8-5a90-4edb-96a4-68743bff811b.png)'
- en: Pushing images with docker-compose to Docker Hub
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用docker-compose将映像推送到Docker Hub
- en: The preceding command pushes the two images to the `fundamentalsofdocker` account on
    Docker Hub. You can find these two images at the following URL: [https://hub.docker.com/u/fundamentalsofdocker/](https://hub.docker.com/u/fundamentalsofdocker/)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将两个映像推送到Docker Hub上的`fundamentalsofdocker`帐户。您可以在以下网址找到这两个映像：[https://hub.docker.com/u/fundamentalsofdocker/](https://hub.docker.com/u/fundamentalsofdocker/)
- en: Using Docker Compose overrides
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Compose覆盖
- en: Sometimes, we want to run our applications in different environments that need
    specific configuration settings. Docker Compose provides a handy capability to
    address exactly this issue.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望在需要特定配置设置的不同环境中运行我们的应用程序。Docker Compose提供了一个方便的功能来解决这个问题。
- en: 'Let''s make a specific sample. We can define a base Docker Compose file and
    then define environment-specific overrides. Let''s assume we have a file called
    `docker-compose.base.yml` with the following content:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个具体的例子。我们可以定义一个基本的Docker Compose文件，然后定义特定于环境的覆盖。假设我们有一个名为`docker-compose.base.yml`的文件，内容如下：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This only defines the part that should be the same in all environments. All
    specific settings have been taken out.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这只定义了在所有环境中应该相同的部分。所有特定的设置都已被移除。
- en: 'Let''s assume for a moment that we want to run our sample application on a
    CI system, but there we want to use different settings for the database. The `Dockerfile`
    we used to create the database image looked like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要在CI系统上运行我们的示例应用程序，但是我们想要为数据库使用不同的设置。我们用来创建数据库映像的`Dockerfile`如下所示：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Notice the three environment variables we define on lines 3 through 5\. The
    `Dockerfile` of the `web` service has similar definitions. Let''s say that on
    the CI system, we want to do the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们在第3到5行定义的三个环境变量。`web`服务的`Dockerfile`具有类似的定义。假设在CI系统上，我们想要执行以下操作：
- en: Build the images from code
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从代码构建映像
- en: Define `POSTGRES_PASSWORD` as `ci-pass`
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`POSTGRES_PASSWORD`定义为`ci-pass`
- en: Map container port `3000` of the web service to host port `5000`
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将web服务的容器端口`3000`映射到主机端口`5000`
- en: 'Then, the corresponding override file would look like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，相应的覆盖文件将如下所示：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And we can run this application with the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令运行此应用程序：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that with the first `-f` parameter, we provide the base Docker Compose
    file, and with the second one, we provide the override. The `--build` parameter
    is used to force `docker-compose` to rebuild the images.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个`-f`参数提供基本的Docker Compose文件，第二个参数提供覆盖文件。`--build`参数用于强制`docker-compose`重新构建镜像。
- en: 'When using environment variables, note the following precedence:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用环境变量时，请注意以下优先级：
- en: Declaring them in the Docker file defines a default value
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker文件中声明它们会定义默认值
- en: Declaring the same variable in the Docker Compose file overrides the value from
    the Dockerfile
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker Compose文件中声明相同的变量会覆盖Dockerfile中的值
- en: Had we followed the standard naming convention and called the base file just
    `docker-compose.yml` and the override file `docker-compose.override.yml` instead,
    then we could have started the application with `docker-compose up -d` without
    explicitly naming the compose files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遵循标准命名约定，将基本文件命名为`docker-compose.yml`，覆盖文件命名为`docker-compose.override.yml`，那么我们可以使用`docker-compose
    up -d`来启动应用程序，而无需显式命名compose文件。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the `docker-compose` tool. This tool is mostly
    used to run and scale multi-service applications on a single Docker host. Typically,
    developers and CI servers work with single hosts and those two are the main users
    of Docker Compose. The tool is using YAML files as input that contain the description
    of the application in a declarative way.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了`docker-compose`工具。该工具主要用于在单个Docker主机上运行和扩展多服务应用程序。通常，开发人员和CI服务器使用单个主机，这两者是Docker
    Compose的主要用户。该工具使用YAML文件作为输入，其中包含以声明方式描述应用程序的描述。
- en: The tool can also be used to build and push images, among many other helpful
    tasks. The code accompanying this chapter can be found in `fod/ch11`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具还可用于构建和推送镜像，以及许多其他有用的任务。本章附带的代码可以在`fod/ch11`中找到。
- en: In the next chapter, we are going to introduce **orchestrators**. An orchestrator is
    an infrastructure software that is used to run and manage containerized applications
    in a cluster while making sure that these applications are in their desired state
    at all times.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍**编排器**。编排器是一种基础设施软件，用于在集群中运行和管理容器化应用程序，同时确保这些应用程序始终处于所需的状态。
- en: Questions
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To assess your learning progress, please answer the following questions:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估您的学习进度，请回答以下问题：
- en: How will you use `docker-compose` to run an application in daemon mode?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将如何使用`docker-compose`以守护进程模式运行应用程序？
- en: How will you use `docker-compose` to display the details of the running service?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将如何使用`docker-compose`来显示运行服务的详细信息？
- en: How will you scale up a particular web service to, say, three instances?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将如何将特定的web服务扩展到比如说三个实例？
- en: Further reading
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following links provide additional information on the topics discussed
    in this chapter:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接提供了本章讨论的主题的额外信息：
- en: The official YAML website: [http://www.yaml.org/](http://www.yaml.org/)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方YAML网站：[http://www.yaml.org/](http://www.yaml.org/)
- en: Docker Compose documentation: [http://dockr.ly/1FL2VQ6](http://dockr.ly/1FL2VQ6)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose文档：[http://dockr.ly/1FL2VQ6](http://dockr.ly/1FL2VQ6)
- en: Compose file version 2 reference: [http://dohttps://docs.docker.com/compose/compose-file/compose-file-v2/](https://docs.docker.com/compose/compose-file/compose-file-v2/)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Compose文件版本2参考：[http://dohttps://docs.docker.com/compose/compose-file/compose-file-v2/](https://docs.docker.com/compose/compose-file/compose-file-v2/)
- en: Share Compose configurations between files and projects: [https://docs.docker.com/compose/extends/](https://docs.docker.com/compose/extends/)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件和项目之间共享Compose配置：[https://docs.docker.com/compose/extends/](https://docs.docker.com/compose/extends/)
