["```java\napply plugin: 'java' \n\nversion = '1.0' \n\nrepositories { \n  mavenCentral()\n} \n\ndependencies { \n  testCompile group: 'junit', name: 'junit', version: '4.11' \n} \n```", "```java\npublic class FooTest {\n  @Rule\n  public ExpectedException exception = ExpectedException.none();\n  @Test\n  public void whenDoFooThenThrowRuntimeException() {\n    Foo foo = new Foo();\n    exception.expect(RuntimeException.class);\n    foo.doFoo();\n  }\n} \n```", "```java\nprivate Foo foo; \n\n@Before \npublic final void before() { \n  foo = new Foo(); \n} \n```", "```java\n@Test \npublic void whenSomethingThenResultIsSomethingElse() { \n  // This is a test method \n} \n```", "```java\n    $ gradle test\n```", "```java\npackage com.packtpublishing.tddjava.ch03tictactoe;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\npublic class TicTacToeSpec {\n  @Rule\n  public ExpectedException exception = ExpectedException.none();\n  private TicTacToe ticTacToe;\n\n  @Before\n  public final void before() {\n    ticTacToe = new TicTacToe();\n  }\n  @Test\n  public void whenXOutsideBoardThenRuntimeException() {\n    exception.expect(RuntimeException.class);\n    ticTacToe.play(5, 2);\n  }\n} \n```", "```java\npackage com.packtpublishing.tddjava.ch03tictactoe;\n\npublic class TicTacToe {\n  public void play(int x, int y) {\n    if (x < 1 || x > 3) {\n      throw new RuntimeException(\"X is outside board\");\n    }\n  }\n}\n```", "```java\n@Test\npublic void whenYOutsideBoardThenRuntimeException() {\n  exception.expect(RuntimeException.class);\n  ticTacToe.play(2, 5);\n}\n```", "```java\npublic void play(int x, int y) {\n  if (x < 1 || x > 3) {\n    throw new RuntimeException(\"X is outside board\");\n  } else if (y < 1 || y > 3) {\n    throw new RuntimeException(\"Y is outside board\");\n  }\n}\n```", "```java\n@Test \npublic void whenOccupiedThenRuntimeException() { \n  ticTacToe.play(2, 1); \n  exception.expect(RuntimeException.class); \n  ticTacToe.play(2, 1); \n} \n```", "```java\nprivate Character[][] board = {\n  {'\\0', '\\0', '\\0'},\n  {'\\0', '\\0', '\\0'},\n  {'\\0', '\\0', '\\0'}\n};\n\npublic void play(int x, int y) {\n  if (x < 1 || x > 3) {\n    throw new RuntimeException(\"X is outside board\");\n  } else if (y < 1 || y > 3) {\n    throw new RuntimeException(\"Y is outside board\");\n  }\n  if (board[x - 1][y - 1] != '\\0') {\n    throw new RuntimeException(\"Box is occupied\");\n  } else {\n    board[x - 1][y - 1] = 'X';\n  }\n}\n```", "```java\npublic void play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  setBox(x, y);\n}\n\nprivate void checkAxis(int axis) {\n  if (axis < 1 || axis > 3) {\n    throw new RuntimeException(\"X is outside board\");\n  }\n}\n\nprivate void setBox(int x, int y) {\n  if (board[x - 1][y - 1] != '\\0') {\n    throw new RuntimeException(\"Box is occupied\");\n  } else {\n    board[x - 1][y - 1] = 'X';\n  }\n}\n```", "```java\nimport static org.junit.Assert.*;\n```", "```java\n@Test\npublic void givenFirstTurnWhenNextPlayerThenX() {\n  assertEquals('X', ticTacToe.nextPlayer());\n}\n```", "```java\npublic char nextPlayer() {\n  return 'X';\n}\n```", "```java\n@Test\npublic void givenLastTurnWasXWhenNextPlayerThenO() {\n  ticTacToe.play(1, 1);\n  assertEquals('O', ticTacToe.nextPlayer());\n}\n```", "```java\nprivate char lastPlayer = '\\0';\n\npublic void play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  setBox(x, y);\n  lastPlayer = nextPlayer();\n}\n\npublic char nextPlayer() {\n  if (lastPlayer == 'X') {\n    return 'O';\n  }\n  return 'X';\n}\n```", "```java\n@Test\npublic void whenPlayThenNoWinner() {\n  String actual = ticTacToe.play(1,1);\n  assertEquals(\"No winner\", actual);\n}\n```", "```java\npublic String play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  setBox(x, y);\n  lastPlayer = nextPlayer();\n  return \"No winner\";\n}\n```", "```java\n@Test\npublic void whenPlayAndWholeHorizontalLineThenWinner() {\n  ticTacToe.play(1, 1); // X\n  ticTacToe.play(1, 2); // O\n  ticTacToe.play(2, 1); // X\n  ticTacToe.play(2, 2); // O\n  String actual = ticTacToe.play(3, 1); // X\n  assertEquals(\"X is the winner\", actual);\n}\n```", "```java\npublic String play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  lastPlayer = nextPlayer();\n  setBox(x, y, lastPlayer);\n  for (int index = 0; index < 3; index++) {\n    if (board[0][index] == lastPlayer\n        && board[1][index] == lastPlayer\n        && board[2][index] == lastPlayer) {\n      return lastPlayer + \" is the winner\";\n    }\n  }\n  return \"No winner\";\n}\nprivate void setBox(int x, int y, char lastPlayer) {\n  if (board[x - 1][y - 1] != '\\0') {\n    throw new RuntimeException(\"Box is occupied\");\n  } else {\n    board[x - 1][y - 1] = lastPlayer;\n  }\n}\n```", "```java\nprivate static final int SIZE = 3;\n\npublic String play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  lastPlayer = nextPlayer();\n  setBox(x, y, lastPlayer);\n  if (isWin()) {\n    return lastPlayer + \" is the winner\";\n  }\n  return \"No winner\";\n}\n\nprivate boolean isWin() {\n  for (int i = 0; i < SIZE; i++) {\n    if (board[0][i] + board[1][i] + board[2][i] == (lastPlayer * SIZE)) {\n      return true;\n    }\n  }\n  return false;\n}\n```", "```java\n@Test\npublic void whenPlayAndWholeVerticalLineThenWinner() {\n  ticTacToe.play(2, 1); // X\n  ticTacToe.play(1, 1); // O\n  ticTacToe.play(3, 1); // X\n  ticTacToe.play(1, 2); // O\n  ticTacToe.play(2, 2); // X\n  String actual = ticTacToe.play(1, 3); // O\n  assertEquals(\"O is the winner\", actual);\n}\n```", "```java\nprivate boolean isWin() {\n  int playerTotal = lastPlayer * 3;\n  for (int i = 0; i < SIZE; i++) {\n    if (board[0][i] + board[1][i] + board[2][i] == playerTotal) {\n      return true;\n    } else if (board[i][0] + board[i][1] + board[i][2] == playerTotal) {\n      return true;\n    }\n  }\n  return false;\n}\n```", "```java\n@Test \npublic void whenPlayAndTopBottomDiagonalLineThenWinner() {\n  ticTacToe.play(1, 1); // X\n  ticTacToe.play(1, 2); // O\n  ticTacToe.play(2, 2); // X\n  ticTacToe.play(1, 3); // O\n  String actual = ticTacToe.play(3, 3); // X\n  assertEquals(\"X is the winner\", actual);\n}\n```", "```java\nprivate boolean isWin() {\n  int playerTotal = lastPlayer * 3;\n  for (int i = 0; i < SIZE; i++) {\n    if (board[0][i] + board[1][i] + board[2][i] == playerTotal) {\n      return true;\n    } else if (board[i][0] + board[i][1] + board[i][2] == playerTotal) {\n      return true;\n    } \n  } \n  if (board[0][0] + board[1][1] + board[2][2] == playerTotal) { \n    return true; \n  }   \n  return false; \n} \n```", "```java\napply plugin: 'jacoco'\n```", "```java\n$ gradle clean test jacocoTestReport\n```", "```java\n@Test\npublic void whenPlayAndBottomTopDiagonalLineThenWinner() {\n  ticTacToe.play(1, 3); // X\n  ticTacToe.play(1, 1); // O\n  ticTacToe.play(2, 2); // X\n  ticTacToe.play(1, 2); // O\n  String actual = ticTacToe.play(3, 1); // X\n  assertEquals(\"X is the winner\", actual);\n}\n```", "```java\nprivate boolean isWin() {\n  int playerTotal = lastPlayer * 3;\n  for (int i = 0; i < SIZE; i++) {\n    if (board[0][i] + board[1][i] + board[2][i] == playerTotal) {\n      return true;\n    } else if (board[i][0] + board[i][1] + board[i][2] == playerTotal) {\n      return true;\n    }\n  }\n  if (board[0][0] + board[1][1] + board[2][2] == playerTotal) {\n    return true;\n  } else if (board[0][2] + board[1][1] + board[2][0] == playerTotal) {\n    return true;\n  }\n  return false;\n}\n```", "```java\nprivate boolean isWin() {\n  int playerTotal = lastPlayer * 3;\n  char diagonal1 = '\\0';\n  char diagonal2 = '\\0';\n  for (int i = 0; i < SIZE; i++) {\n    diagonal1 += board[i][i];\n    diagonal2 += board[i][SIZE - i - 1];\n    if (board[0][i] + board[1][i] + board[2][i]) == playerTotal) {\n      return true;\n    } else if (board[i][0] + board[i][1] + board[i][2] == playerTotal) {\n      return true;\n    }\n  }\n  if (diagonal1 == playerTotal || diagonal2 == playerTotal) {\n    return true;\n  }\n  return false;\n}\n```", "```java\n@Test\npublic void whenAllBoxesAreFilledThenDraw() {\n  ticTacToe.play(1, 1);\n  ticTacToe.play(1, 2);\n  ticTacToe.play(1, 3);\n  ticTacToe.play(2, 1);\n  ticTacToe.play(2, 3);\n  ticTacToe.play(2, 2);\n  ticTacToe.play(3, 1);\n  ticTacToe.play(3, 3);\n  String actual = ticTacToe.play(3, 2);\n  assertEquals(\"The result is draw\", actual);\n}\n```", "```java\npublic String play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  lastPlayer = nextPlayer();\n  setBox(x, y, lastPlayer);\n  if (isWin()) {\n    return lastPlayer + \" is the winner\";\n  } else if (isDraw()) {\n    return \"The result is draw\";\n  } else {\n    return \"No winner\";\n  }\n}\n\nprivate boolean isDraw() {\n  for (int x = 0; x < SIZE; x++) {\n    for (int y = 0; y < SIZE; y++) {\n      if (board[x][y] == '\\0') {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n```", "```java\nprivate boolean isWin(int x, int y) {\n  int playerTotal = lastPlayer * 3;\n  char horizontal, vertical, diagonal1, diagonal2;\n  horizontal = vertical = diagonal1 = diagonal2 = '\\0';\n  for (int i = 0; i < SIZE; i++) {\n    horizontal += board[i][y - 1];\n    vertical += board[x - 1][i];\n    diagonal1 += board[i][i];\n    diagonal2 += board[i][SIZE - i - 1];\n  }\n  if (horizontal == playerTotal\n      || vertical == playerTotal\n      || diagonal1 == playerTotal\n      || diagonal2 == playerTotal) {\n    return true;\n  }\n  return false;\n} \n```"]