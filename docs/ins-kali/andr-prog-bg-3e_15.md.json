["```kt\nRandom randGenerator = new Random();\n```", "```kt\nint ourRandomNumber = randGenerator.nextInt(10);\n```", "```kt\nourRandomNumber ++;\n```", "```kt\nNote note1;\nNote note2;\nNote note3;\n// 96 more lines like the above\nNote note100;\n```", "```kt\nint topScore1;\nint topScore2;\nint topScore3;\n// 96 more lines like the above\nint topScore100;\n```", "```kt\ntopScore100 = topScore99;\ntopScore99 = topScore98;\ntopScore98 = topScore97;\n// 96 more lines like the above\ntopScore1 = score;\n```", "```kt\nint [] intArray;\n```", "```kt\nString [] classNames;\nboolean [] bankOfSwitches;\nfloat [] closingBalancesInMarch;\nNote [] notes;\n```", "```kt\nintArray = new int [100];\n```", "```kt\nintArray[0] = 5;\nintArray[1] = 6;\nintArray[2] = 7;\n```", "```kt\nintArray[3]= \"John Carmack\"; // Won't compile String not int\n```", "```kt\nintArray [3] = 123;\n```", "```kt\nintArray[10] = intArray[9] - intArray[4];\n```", "```kt\nint myNamedInt = intArray [3];\n```", "```kt\nint lengthOfSomeArray = someArray.length;\n```", "```kt\nString[][] countriesAndCities;\n```", "```kt\nsomeArray[someLocation];\n```", "```kt\n// Declaring an array\nint[] ourArray;\n// Allocate memory for a maximum size of 5 elements\nourArray = new int[5];\n// Initialize ourArray with values\n// The values are arbitrary, but they must be int\n// The indexes are not arbitrary. 0 through 4 or crash!\nourArray[0] = 25;\nourArray[1] = 50;\nourArray[2] = 125;\nourArray[3] = 68;\nourArray[4] = 47;\n//Output all the stored values\nLog.i(\"info\", \"Here is ourArray:\");\nLog.i(\"info\", \"[0] = \"+ourArray[0]);\nLog.i(\"info\", \"[1] = \"+ourArray[1]);\nLog.i(\"info\", \"[2] = \"+ourArray[2]);\nLog.i(\"info\", \"[3] = \"+ourArray[3]);\nLog.i(\"info\", \"[4] = \"+ourArray[4]);\n```", "```kt\n/*\n\u00a0\u00a0\u00a0We can do any calculation with an array element\n\u00a0\u00a0\u00a0provided it is appropriate to the contained type\n\u00a0\u00a0\u00a0Like this:\n*/\nint answer = ourArray[0] +\nourArray[1] +\nourArray[2] +\nourArray[3] +\nourArray[4];\nLog.i(\"info\", \"Answer = \"+ answer);\n```", "```kt\ninfo\ufe55 Here is ourArray:\ninfo\ufe55 [0] = 25\ninfo\ufe55 [1] = 50\ninfo\ufe55 [2] = 125\ninfo\ufe55 [3] = 68\ninfo\ufe55 [4] = 47\ninfo\ufe55 Answer = 315 \n```", "```kt\n// Declaring and allocating in one step\nint[] ourArray = new int[1000];\n// Let's initialize ourArray using a for loop\n// Because more than a few variables is allot of typing!\nfor(int i = 0; i < 1000; i++){\n\u00a0\u00a0\u00a0// Put the value of our value into ourArray\n\u00a0\u00a0\u00a0// At the position decided by i.\n\u00a0\u00a0\u00a0ourArray[i] = i*5;\n\u00a0\u00a0\u00a0//Output what is going on\n\u00a0\u00a0\u00a0Log.i(\"info\", \"i = \" + i);\n\u00a0\u00a0\u00a0Log.i(\"info\", \"ourArray[i] = \" + ourArray[i]);\n}\n```", "```kt\ninfo\ufe55 i = 0\ninfo\ufe55 ourArray[i] = 0\ninfo\ufe55 i = 1\ninfo\ufe55 ourArray[i] = 5\ninfo\ufe55 i = 2\ninfo\ufe55 ourArray[i] = 10\n... 994 iterations of the loop removed for brevity.\ninfo\ufe55 ourArray[i] = 4985\ninfo\ufe55 i = 998\ninfo\ufe55 ourArray[i] = 4990\ninfo\ufe55 i = 999\ninfo\ufe55 ourArray[i] = 4995\n```", "```kt\nint[] ourArray = new int[1000];\n```", "```kt\n(int i = 0; i < 1000; i++){\n```", "```kt\nourArray[i] = i*5;\n```", "```kt\nLog.i(\"info\", \"i = \" + i);\nLog.i(\"info\", \"ourArray[i] = \" + ourArray[i]);\n```", "```kt\n// Random object for generating question numbers\nRandom randInt = new Random();\n// a variable to hold the random value generated\nint questionNumber;\n// declare and allocate in separate stages for clarity\n// but we don't have to\nString[][] countriesAndCities;\n// Now we have a 2 dimensional array\ncountriesAndCities = new String[5][2];\n// 5 arrays with 2 elements each\n// Perfect for 5 \"What's the capital city\" questions\n// Now we load the questions and answers into our arrays\n// You could do this with less questions to save typing\n// But don't do more or you will get an exception\ncountriesAndCities [0][0] = \"United Kingdom\";\ncountriesAndCities [0][1] = \"London\";\ncountriesAndCities [1][0] = \"USA\";\ncountriesAndCities [1][1] = \"Washington\";\ncountriesAndCities [2][0] = \"India\";\ncountriesAndCities [2][1] = \"New Delhi\";\ncountriesAndCities [3][0] = \"Brazil\";\ncountriesAndCities [3][1] = \"Brasilia\";\ncountriesAndCities [4][0] = \"Kenya\";\ncountriesAndCities [4][1] = \"Nairobi\";\n```", "```kt\n/*\n\u00a0\u00a0\u00a0\u00a0\u00a0Now we know that the country is stored at element 0\n\u00a0\u00a0\u00a0\u00a0\u00a0The matching capital at element 1\n\u00a0\u00a0\u00a0\u00a0\u00a0Here are two variables that reflect this\n*/\nint country = 0;\nint capital = 1;\n// A quick for loop to ask 3 questions\nfor(int i = 0; i < 3; i++){\n\u00a0\u00a0\u00a0// get a random question number between 0 and 4\n\u00a0\u00a0\u00a0questionNumber = randInt.nextInt(5);\n\u00a0\u00a0\u00a0// and ask the question and in this case just\n\u00a0\u00a0\u00a0// give the answer for the sake of brevity\n\u00a0\u00a0\u00a0Log.i(\"info\", \"The capital of \"\n\u00a0\u00a0\u00a0+countriesAndCities[questionNumber][country]);\n\n\u00a0\u00a0\u00a0Log.i(\"info\", \"is \"\n\u00a0\u00a0\u00a0+countriesAndCities[questionNumber][capital]);\n} // end of for loop\n```", "```kt\ninfo\ufe55 The capital of USA\ninfo\ufe55 is Washington\ninfo\ufe55 The capital of India\ninfo\ufe55 is New Delhi\ninfo\ufe55 The capital of United Kingdom\ninfo\ufe55 is London\n```", "```kt\nRandom randInt = new Random();\n\n```", "```kt\nint questionNumber;\n```", "```kt\nString[][] countriesAndCities;\n\n```", "```kt\ncountriesAndCities = new String[5][2];\n```", "```kt\ncountriesAndCities [0][0] = \"United Kingdom\";\ncountriesAndCities [0][1] = \"London\";\ncountriesAndCities [1][0] = \"USA\";\ncountriesAndCities [1][1] = \"Washington\";\ncountriesAndCities [2][0] = \"India\";\ncountriesAndCities [2][1] = \"New Delhi\";\ncountriesAndCities [3][0] = \"Brazil\";\ncountriesAndCities [3][1] = \"Brasilia\";\ncountriesAndCities [4][0] = \"Kenya\";\ncountriesAndCities [4][1] = \"Nairobi\";\n```", "```kt\nint country = 0;\nint capital = 1;\n```", "```kt\nfor(int i = 0; i < 3; i++){\n```", "```kt\nquestionNumber = randInt.nextInt(5);\n```", "```kt\n\u00a0\u00a0\u00a0Log.i(\"info\", \"The capital of \"\n\u00a0\u00a0\u00a0+countriesAndCities[questionNumber][country]);\n\u00a0\u00a0\u00a0Log.i(\"info\", \"is \"\n\u00a0\u00a0\u00a0+countriesAndCities[questionNumber][capital]);\n}//end of for loop\n```", "```kt\nint[] ourArray = new int[1000];\nint someValue = 1; // Arbitrary value\nourArray[1000] = someValue;\n// Won't compile as compiler knows this won't work.\n// Only locations 0 through 999 are valid\n```", "```kt\nint[] ourArray = new int[1000];\nint someValue = 1;// Arbitrary value\nint x = 999;\nif(userDoesSomething){\n\u00a0\u00a0\u00a0x++; // x now equals 1000\n}\nourArray[x] = someValue;\n// Array out of bounds exception if userDoesSomething \n// evaluates to true! This is because we end up referencing\n// position 1000 when the array only has positions 0 \n// through 999\n// Compiler can't spot it. App will crash!\n```", "```kt\n// Declare a new ArrayList called myList to hold int variables\nArrayList<int> myList;\n\n// Initialize the myList ready for use\nmyList = new ArrayList<int>();\n```", "```kt\nArrayList<int> myList = new ArrayList<int>();\n```", "```kt\n// declare and initialize a new ArrayList\nArrayList<String> myList = new ArrayList<String>();\n// Add a new String to myList in the next available location\nmyList.add(\"Donald Knuth\");\n// And another\nmyList.add(\"Rasmus Lerdorf\");\n// And another\nmyList.add(\"Richard Stallman\");\n// We can also choose 'where' to add an entry\nmyList.add(1, \"James Gosling\");\n// Is there anything in our ArrayList?\nif(myList.isEmpty()){\n\u00a0\u00a0\u00a0// Nothing to see here\n}else{\n\u00a0\u00a0\u00a0// Do something with the data\n}\n// How many items in our ArrayList?\nint numItems = myList.size();\n// Now where did I put James Gosling?\nint position = myList.indexOf(\"James Gosling\");\n```", "```kt\nfor (String s : myList)\n```", "```kt\nfor (String s : myList){\n\u00a0\u00a0\u00a0Log.i(\"Programmer: \",\"\" + s);\n}\n```", "```kt\nint [] anArray = new int [];\n// We can initialize arrays quickly like this\nanArray {0, 1, 2, 3, 4, 5}\nfor (int s : anArray){\n\u00a0\u00a0\u00a0Log.i(\"Contents = \",\"\" + s);\n}\n```", "```kt\n// This code assumes we have an Animal class\n// And we have a Cat and Dog class that extends Animal\nAnimal myAnimal =\u00a0\u00a0new Animal();\nDog myDog = new Dog();\nCat myCat = new Cat();\nAnimal [] myAnimals = new Animal[10];\nmyAnimals[0] = myAnimal; // As expected\nmyAnimals[1] = myDog; // This is OK too\nmyAnimals[2] = myCat; // And this is fine as well\n```", "```kt\n// 6 months later we need elephants\n// with its own unique aspects\n// If it extends Animal we can still do this\nElephant myElephant = new Elephant();\nmyAnimals[3] = myElephant; // And this is fine as well\n```", "```kt\nCat newCat = (Cat) myAnimals[2];\n```", "```kt\nMap<String, Character> characterMap;\n```", "```kt\ncharacterMap = new HashMap();\n```", "```kt\ncharacterMap.put(\"Geralt\", new Character());\n```", "```kt\ncharacterMap.put(\"Ciri\", new Character());\n```", "```kt\ncharacterMap.put(\"Triss\", new Character());\n```", "```kt\nCharacter ciri = characterMap.get(\"Ciri\");\n```", "```kt\ncharacterMap.get(\"Geralt\").drawSilverSword();\n// Or maybe call some other hypothetical method\ncharacterMap.get(\"Triss\").openFastTravelPortal(\"Kaer Morhen\");\n```"]