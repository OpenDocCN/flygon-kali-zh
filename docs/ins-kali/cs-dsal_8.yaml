- en: Classification of data structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构的分类
- en: As you have seen while reading the book, there are many data structures with
    many configuration variants. Thus, choosing a proper data structure is not an
    easy task, which could have a significant impact on the performance of the developed
    solution. Even the topics mentioned in this book form quite a long list of described
    data structures. For this reason, it is a good idea to classify them in some way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在阅读本书时所看到的，有许多数据结构及其许多配置变体。因此，选择合适的数据结构并不是一件容易的事情，这可能会对开发解决方案的性能产生重大影响。即使本书中提到的主题形成了相当长的数据结构描述列表。因此，最好以某种方式对它们进行分类。
- en: Within this chapter, the described data structures are grouped into linear and
    non-linear categories. Each element in a linear data structure can be logically
    adjacent to the following or the previous element. In the case of a nonlinear
    data structure, a single element can be logically adjacent to numerous others,
    not necessarily only one or two. They can be freely distributed throughout the
    memory.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，描述的数据结构被分为线性和非线性类别。线性数据结构中的每个元素可以在逻辑上与其后一个或前一个元素相邻。在非线性数据结构的情况下，单个元素可以在逻辑上与许多其他元素相邻，不一定只有一个或两个。它们可以自由分布在内存中。
- en: 'Let''s take a look at the following diagram, which shows the classification
    of data structures according to the mentioned criteria:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看下面的图表，根据所提到的标准对数据结构进行分类：
- en: '![](img/eaaed9fa-1216-4071-a635-d462e5e24db1.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaaed9fa-1216-4071-a635-d462e5e24db1.png)'
- en: As you can see, the group of linear data structures contains arrays, lists,
    stacks, and queues. Of course, you should also take care of various subtypes of
    the mentioned data structures, such as three variants of a linked list, which
    is a subtype of a list.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，线性数据结构组包括数组、列表、栈和队列。当然，你还应该关注所提到的数据结构的各种子类型，比如链表的三种变体，它是列表的一个子类型。
- en: In the case of non-linear data structures, a graph performs the most important
    role, because it also includes a tree subtype. Moreover, trees include binary
    trees and heaps, while a binary search tree is a subtype of a binary tree. In
    the same way, you can describe the relationships of other data structures presented
    and explained in this book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在非线性数据结构的情况下，图表起着最重要的作用，因为它还包括树的子类型。此外，树包括二叉树和堆，而二叉搜索树是二叉树的一个子类型。同样，你可以描述本书中介绍和解释的其他数据结构的关系。
- en: Diversity of applications
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用的多样性
- en: Do you remember all of the data structures shown in the book? Due to the high
    number of described topics, it is a good idea to take a look at the following
    data structures once more, together with their associated algorithms, just in
    the form of a brief summary with information about some real-world applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得书中展示的所有数据结构吗？由于描述的主题数量众多，最好再次查看以下数据结构，以及它们相关的算法，只是以简要摘要的形式，包括一些真实世界应用的信息。
- en: Arrays
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: Let's start with arrays, which is one of the two main topics in the first chapter.
    You can use this data structure to store many variables of the same type, such
    as `int`, `string`, or a user-defined class. The important assumption is that
    the number of elements in an array cannot be changed after initialization. Moreover,
    arrays belong to random access data structures, which means that you can use indices
    to get access to the first, the middle, the *n*-th, or the last element from the
    array. You can benefit from a few variants of arrays, namely single-dimensional,
    multi-dimensional, and jagged arrays, also referred to as an array of arrays.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从数组开始，这是第一章的两个主要主题之一。你可以使用这种数据结构来存储许多相同类型的变量，比如`int`、`string`或用户定义的类。重要的假设是数组中的元素数量在初始化后不能改变。此外，数组属于随机访问数据结构，这意味着你可以使用索引来访问数组的第一个、中间、第n个或最后一个元素。你可以从几种数组变体中受益，即单维、多维和不规则数组，也称为数组的数组。
- en: 'All of these variants are shown in the following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些变体都显示在下图中：
- en: '![](img/39074937-888a-45ff-96cc-6176c90d0b0a.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39074937-888a-45ff-96cc-6176c90d0b0a.png)'
- en: There are a lot of applications of arrays and, as a developer, you have probably
    used this data structure many times. In this book, you have seen how you can use
    it to store various data, such as the names of months, the multiplication table,
    or even a map of a game. In the last case, you created a two-dimensional array
    with the same size as a map, where each element specifies a certain type of terrain,
    for example, grass or a wall.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数组有许多应用，作为开发人员，你可能多次使用了这种数据结构。在本书中，你已经看到了如何使用它来存储各种数据，比如月份的名称、乘法表，甚至是游戏地图。在最后一种情况下，你创建了一个与地图大小相同的二维数组，其中每个元素指定了某种地形，例如草地或墙壁。
- en: There are many algorithms that perform various operations on arrays. However,
    one of the most common tasks is sorting an array to arrange its elements in the
    correct order, either ascending or descending. This book focuses on four algorithms,
    namely selection sort, insertion sort, bubble sort, as well as quick sort.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多算法可以对数组执行各种操作。然而，其中最常见的任务之一是对数组进行排序，以便将其元素按正确的顺序排列，无论是升序还是降序。本书重点介绍了四种算法，即选择排序、插入排序、冒泡排序以及快速排序。
- en: Lists
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: 'The next group of data structures, described in the first chapter, is related
    to lists. They are similar to arrays, but make it possible to dynamically increase
    the size of the collection if necessary. In the following diagram, you can see
    a few variants of a list, namely single-linked, double-linked, and circular-linked,
    respectively:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章描述的下一组数据结构与列表相关。它们类似于数组，但可以在必要时动态增加集合的大小。在下图中，你可以看到列表的几种变体，即单链表、双链表和循环链表：
- en: '![](img/498191b3-418b-4cb8-bd06-edc301235c9e.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/498191b3-418b-4cb8-bd06-edc301235c9e.png)'
- en: It is worth mentioning that the built-in implementation is available for the
    array list (`ArrayList`), as well as its generic (`List`) and sorted (`SortedList`)
    variants. The latter can be understood as a collection of key-value pairs, always
    sorted by keys.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，数组列表（`ArrayList`）以及其泛型（`List`）和排序（`SortedList`）变体都有内置的实现。后者可以被理解为一组键值对，始终按键排序。
- en: A short comment may be beneficial for a single-linked, double-linked, and circular-linked
    list. The first data structure makes it possible to easily navigate from one element
    to the next using the `Next` property. However, it can be further expanded by
    adding the `Previous` property to allow navigating in forward and backward directions,
    forming the double-linked list. In the circular-linked list, the `Previous` property
    of the first node navigates to the last one, while the `Next` property links the
    last node to the first. It is worth noting that there is a built-in implementation
    of the double-linked list (`LinkedList`), and you can quite easily extend the
    double-linked list to behave as the circular-linked list.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 短评对于单链表、双链表和循环链表可能是有益的。第一个数据结构使得可以通过`Next`属性轻松地从一个元素导航到下一个元素。然而，通过添加`Previous`属性可以进一步扩展，允许在前后方向导航，形成双链表。在循环链表中，第一个节点的`Previous`属性导航到最后一个节点，而`Next`属性将最后一个节点链接到第一个节点。值得注意的是，双链表有一个内置的实现（`LinkedList`），你可以很容易地扩展双链表以使其行为像循环链表。
- en: There are a lot of applications for the lists to solve diverse problems in various
    kinds of applications. In this book, you have seen how to utilize the list for
    storing some floating point values and calculating the average value, how to use
    this data structure to create a simple database of people, and how to develop
    an automatically sorted address book. Moreover, you have prepared a simple application
    that allows a user to read the book by changing the pages, as well as the game,
    in which the user spins the wheel with random power. The wheel rotates slower
    and slower until it stops. Then, the user can spin it again, from the previous
    stop position, which illustrates the circular-linked list.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 列表有很多应用，可以解决各种类型应用程序中的不同问题。在本书中，你已经看到如何利用列表来存储一些浮点值并计算平均值，如何使用这种数据结构来创建一个简单的人员数据库，以及如何开发一个自动排序的地址簿。此外，你还准备了一个简单的应用程序，允许用户通过改变页面来阅读书籍，以及一个游戏，用户可以旋转具有随机动力的轮子。轮子旋转得越来越慢，直到停止。然后，用户可以再次旋转它，从上一次停止的位置开始，这说明了循环链表。
- en: Stacks
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 栈
- en: The third chapter of this book focuses on stacks and queues. In this section,
    let's take a look at a stack, which is a representative of limited access data
    structures. This name means that you cannot access every element from the structure,
    and the way of getting elements is strictly specified. In the case of a stack,
    you can only add a new element at the top (the push operation) and get an element
    by removing it from the top (the pop operation). For this reason, a stack is consistent
    with the LIFO principle, which means Last-In First-Out.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第三章专注于栈和队列。在本节中，让我们来看看栈，它是有限访问数据结构的代表。这个名字意味着你不能从结构中访问每个元素，获取元素的方式是严格指定的。在栈的情况下，你只能在顶部添加一个新元素（推入操作），并通过从顶部移除元素来获取元素（弹出操作）。因此，栈符合LIFO原则，即后进先出。
- en: 'The diagram of a stack is shown as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 栈的图示如下所示：
- en: '![](img/474d2469-2ac1-47f0-9c22-7d3d5436f783.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/474d2469-2ac1-47f0-9c22-7d3d5436f783.png)'
- en: Of course, a stack has many real-world applications. One of the mentioned examples
    is related to a pile of many plates, each placed on top of the other. You can
    only add a new plate at the top of the pile, and you can only get a plate from
    the top of the pile. You cannot remove the seventh plate without taking the previous
    six from the top, and you cannot add a plate to the middle of the pile. You have
    also seen how to use a stack to reverse a word and how to apply it for solving
    the mathematical game Tower of Hanoi.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，栈有许多现实世界的应用。其中一个例子是与许多盘子堆叠在一起的一堆盘子有关。你只能在堆叠的顶部添加一个新的盘子，只能从堆叠的顶部获取一个盘子。你不能移除第七个盘子而不先从顶部取出前六个盘子，也不能在堆叠的中间添加一个盘子。你还看到了如何使用栈来颠倒一个单词，以及如何应用它来解决数学游戏汉诺塔。
- en: Queues
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列
- en: Another leading subject of the third chapter is a queue. While using this data
    structure, you can only add new elements at the end of the queue (the enqueue
    operation) and only remove the element from the queue from the beginning of the
    queue (the dequeue operation). For this reason, this data structure is consistent
    with the FIFO principle, which stands for First-In First-Out.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书第三章的另一个主题是队列。使用这种数据结构时，只能在队列的末尾添加新元素（入队操作），并且只能从队列的开头移除元素（出队操作）。因此，这种数据结构符合FIFO原则，即先进先出。
- en: 'The diagram of a queue is shown as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 队列的图示如下所示：
- en: '![](img/6250fe7d-3cb5-4ecf-b654-d944151ec9d1.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6250fe7d-3cb5-4ecf-b654-d944151ec9d1.png)'
- en: It is also possible to use a priority queue, which extends the concept of a
    queue by setting the priority for each element. Thus, the `Dequeue` operation
    returns the element with the highest priority, which has been added earliest to
    the queue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用优先队列，它通过为每个元素设置优先级来扩展队列的概念。因此，`Dequeue`操作返回最早添加到队列中的优先级最高的元素。
- en: There are many real-world applications of a queue. For example, a queue can
    be used to represent a line of people waiting in a shop at a checkout. New people
    stand at the end of the line, and the next person is taken to the checkout from
    the beginning of the line. You are not allowed to choose a person from the middle
    and serve them. Moreover, you have seen a few examples of the solution of a call
    center, where there are many callers (with different client identifiers) and one
    consultant, many callers and many consultants, as well as many callers (with different
    plans, either standard or priority support) and only one consultant, who answers
    the waiting calls.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是示例BST的图示：
- en: Dictionaries
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章的主题与字典和集合有关。首先，让我们看一下字典，它允许将键映射到值并进行快速查找。字典使用哈希函数，可以理解为一组成对的集合，每对由键和值组成。字典有两个内置版本，即非泛型（`Hashtable`）和泛型（`Dictionary`）。还有排序的字典（`SortedDictionary`）可用。
- en: The topic of the fourth chapter is related to dictionaries and sets. First,
    let's take a look at a dictionary, which allows mapping keys to values and performing
    fast lookups. A dictionary uses a hash function and can be understood as a collection
    of pairs, each consisting of a key and a value. There are two built-in versions
    of a dictionary, namely non-generic (`Hashtable`) and generic (`Dictionary`).
    The sorted variant of a dictionary (`SortedDictionary`) is available, as well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 字典
- en: 'The mechanism of the hash table is presented in the following diagram:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表的机制如下图所示：
- en: '![](img/73a7e5c3-bc69-45cf-a947-d5684220a97e.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73a7e5c3-bc69-45cf-a947-d5684220a97e.png)'
- en: Due to the great performance of the hash table, such a data structure is frequently
    used in many real-world applications, such as for associative arrays, database
    indices, or cache systems. Within this book, you have seen how to create the phone
    book to store entries where a person's name is a key and a phone number is a value.
    Among other examples, you have developed an application that helps employees of
    shops to find the location of where a product should be placed, and you have applied
    the sorted dictionary to create the simple encyclopedia, where a user can add
    entries and show its full content.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于哈希表的出色性能，这种数据结构经常在许多现实世界的应用中使用，例如用于关联数组、数据库索引或缓存系统。在本书中，你已经看到如何创建电话簿来存储条目，其中一个人的名字是键，电话号码是值。在其他示例中，你已经开发了一个帮助商店员工找到产品放置位置的应用，并且应用了排序字典来创建简单的百科全书，用户可以添加条目并显示其全部内容。
- en: Sets
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: Another data structure is a set, which is a collection of distinct objects without
    duplicated elements and without any particular order. Therefore, you can only
    get to know whether a given element is in the set or not. The sets are strictly
    connected with mathematical models and operations, such as union, intersection,
    subtraction, and symmetric difference.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个数据结构是集合，它是一个不重复元素的集合，没有特定顺序。因此，你只能知道给定元素是否在集合中。集合与数学模型和操作严格相关，如并集、交集、差集和对称差。
- en: 'The exemplary sets, storing data of various types, are shown as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是存储各种类型数据的示例集：
- en: '![](img/f426b497-d916-4491-9fb3-3a4d1c6fceeb.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f426b497-d916-4491-9fb3-3a4d1c6fceeb.png)'
- en: While developing applications in the C# language, you can benefit from high-performance,
    set-related operations provided by the `HashSet` class. As an example, you have
    seen how to create a system that handles one-time promotional coupons and allows
    you to check whether the scanned one has been already used. Another example is
    the reporting service for the system of a SPA center with four swimming pools.
    By using sets, you have calculated statistics, such as the number of visitors
    to a pool, the most popular pool, and the number of people who visited at least
    one pool.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#语言中开发应用程序时，你可以从`HashSet`类提供的高性能集合相关操作中受益。例如，你已经看到如何创建一个处理一次性促销券的系统，并允许你检查扫描的促销券是否已经被使用。另一个例子是SPA中心系统的报告服务，有四个游泳池。通过使用集合，你已经计算了统计数据，例如游泳池的访客人数，最受欢迎的游泳池以及至少访问过一个游泳池的人数。
- en: Trees
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列有许多现实世界的应用。例如，队列可以用来表示在商店结账处等待的人群。新人站在队伍的末尾，下一个人从队伍的开头被带到结账处。你不能选择队伍中间的人来服务。此外，你已经看到了呼叫中心解决方案的几个示例，其中有许多呼叫者（具有不同的客户标识符）和一个顾问，许多呼叫者和许多顾问，以及许多呼叫者（具有不同的计划，标准或优先支持）和只有一个顾问，回答等待的呼叫。
- en: The next topic is about trees, which are data structures that consist of nodes
    with one root. The root contains no parent node, while all other nodes do. Moreover,
    each node can have any number of child nodes. The child nodes of the same node
    can be called siblings, while a node without children is called a leaf.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 树
- en: Generally speaking, each node in a tree can contain any number of children.
    However, in the case of binary trees, a node cannot contain more than two children,
    that is, it can contain no child nodes, or only one or two, but there are no rules
    about relations between the nodes. If you want to use a binary search tree (BST),
    the next rule is introduced. It states that, for any node, values of all nodes
    in its left subtree must be smaller than its value, and that the values of all
    nodes in its right subtree must be greater than its value.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，树中的每个节点可以包含任意数量的子节点。但是，在二叉树的情况下，一个节点不能包含超过两个子节点，即它可以不包含子节点，或者只包含一个或两个，但是没有关于节点之间关系的规则。如果要使用二叉搜索树（BST），则引入下一个规则。它规定，对于任何节点，其左子树中所有节点的值必须小于其值，并且其右子树中所有节点的值必须大于其值。
- en: 'The exemplary BSTs are shown in the following diagram:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个主题是关于树，它是由具有一个根节点的数据结构组成。根节点不包含父节点，而所有其他节点都包含。此外，每个节点可以有任意数量的子节点。同一节点的子节点可以称为兄弟节点，而没有子节点的节点称为叶子节点。
- en: '![](img/633e03bc-cdd7-42a5-b25c-ca8b34be1fa8.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/633e03bc-cdd7-42a5-b25c-ca8b34be1fa8.png)'
- en: Another group of trees is called the self-balancing trees, which keeps a tree
    balanced all the time while adding and removing nodes. Their application is very
    important, because it allows you to form the correctly arranged tree, which has
    a positive impact on performance. There are various variants of the self-balancing
    trees, but AVL and Red-Black Trees (RBTs) are ones of the most popular. Both have
    been briefly described in this book.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组树称为自平衡树，它在添加和删除节点时始终保持树的平衡。它们的应用非常重要，因为它允许您形成正确排列的树，对性能有积极影响。自平衡树有各种变体，但AVL和红黑树（RBTs）是最受欢迎的。这两种树在本书中都有简要描述。
- en: While talking about trees, it is also beneficial to present a few approaches
    on how you can traverse a tree. In this book, you have learned pre-order, in-order,
    and post-order variants.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论树时，也有必要介绍一些遍历树的方法。在本书中，您已经学习了先序、中序和后序遍历的变体。
- en: A tree is a data structure that is perfect for the representation of various
    data, such as the structure of a company, divided into a few departments, where
    each has its own structure. You have also seen an example where a tree is used
    to arrange a simple quiz consisting of a few questions and answers, which are
    shown depending on the previously taken decisions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 树是一种非常适合表示各种数据的数据结构，例如公司的结构，分为几个部门，每个部门都有自己的结构。您还看到了一个树的例子，用于安排由几个问题和答案组成的简单测验，这些问题和答案根据先前的决定显示。
- en: Heaps
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆
- en: A heap is another variant of a tree, which exists in two versions, namely min-heap
    and max-heap. For each of them, the additional property must be satisfied. For
    the min-heap, the value of each node must be greater than or equal to the value
    of its parent node. For the max-heap, the value of each node must be less than
    or equal to the value of its parent node. The mentioned rule performs the crucial
    role of ensuring that the root node always contains the smallest (in the min-heap)
    or the largest (in the max-heap) value. For this reason, it is a very convenient
    data structure for implementing a priority queue.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 堆是树的另一种变体，有两个版本，即最小堆和最大堆。对于每一个，必须满足额外的属性。对于最小堆，每个节点的值必须大于或等于其父节点的值。对于最大堆，每个节点的值必须小于或等于其父节点的值。所述规则起着关键作用，确保根节点始终包含最小值（在最小堆中）或最大值（在最大堆中）。因此，它是一个非常方便的数据结构，用于实现优先队列。
- en: The heaps exist in many variants, including binary heaps, which must also maintain
    the complete binary tree rule, that is, each node cannot contain more than two
    children, and that all levels of a tree must be fully filled, except the last
    one, which can be filled from left to right with some empty space on the right.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 堆存在许多变体，包括二叉堆，它还必须遵守完全二叉树规则，即每个节点不能包含两个以上的子节点，并且树的所有级别必须完全填满，除了最后一个级别，它可以从左到右填满，右边留有一些空间。
- en: 'The exemplary heaps are shown as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 示例堆如下所示：
- en: '![](img/8be416c2-bb1a-4ee9-b294-578a15d11647.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8be416c2-bb1a-4ee9-b294-578a15d11647.png)'
- en: Of course, a binary heap is not the only one that is available. Among others,
    binomial heaps and Fibonacci heaps exist. All three variants have been described
    in this book.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，二叉堆不是唯一可用的堆。除了二叉堆，还有二项堆和斐波那契堆。这三种变体都在本书中有所描述。
- en: One of the interesting applications of a heap is the sorting algorithm, named
    heap sort.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 堆的一个有趣应用是排序算法，名为堆排序。
- en: Graphs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图
- en: The previous chapter is related to graphs, as a very popular data structure
    with a broad range of real-world applications. As a reminder, a graph is a data
    structure that consists of nodes and edges. Each edge connects two nodes. Moreover,
    there are a few variants of edges in a graph, such as undirected and directed,
    as well as unweighted and weighted. A graph can be represented either as an adjacency
    list or as an adjacency matrix.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章与图相关，作为一种广泛应用于现实世界的非常流行的数据结构。提醒一下，图是一个由节点和边组成的数据结构。每条边连接两个节点。此外，图中有几种边的变体，如无向和有向，以及无权重和有权重。图可以表示为邻接表或邻接矩阵。
- en: All of these topics have been described in this book, together with the problem
    of graph traversal, finding the minimum spanning tree, node coloring, and finding
    the shortest path in a graph.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些主题都在本书中有所描述，包括图的遍历问题、寻找最小生成树、节点着色以及在图中寻找最短路径的问题。
- en: 'The exemplary graphs are shown in the following diagram:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了示例图：
- en: '![](img/ba397110-c2a0-493f-9cc2-be665e23e4da.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba397110-c2a0-493f-9cc2-be665e23e4da.png)'
- en: A graph data structure is commonly used in various applications, and it is a
    great way to represent diverse data, such as the structure of friends available
    on a social media site. Here, the nodes can represent contacts, while edges represent
    relations between people. Thus, you can easily check whether two contacts know
    each other or how many people should be involved to arrange a meeting between
    two particular people.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据结构通常用于各种应用程序，并且是表示各种数据的绝佳方式，例如社交媒体网站上可用的朋友结构。在这里，节点可以表示联系人，而边表示人与人之间的关系。因此，您可以轻松地检查两个联系人是否互相认识，或者需要多少人参与安排两个特定人之间的会面。
- en: Another common application of graphs involves the problem of finding a path.
    As an example, you can use a graph to find a path between two points in the city,
    taking into account distance or time necessary for driving. You can use a graph
    to represent a map of a city, where nodes are intersections and edges represent
    roads. Of course, you should assign weights to edges to indicate the necessary
    distance or time for driving a given road.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图的另一个常见应用涉及寻找路径的问题。例如，您可以使用图来找到城市中两点之间的路径，考虑到驾驶所需的距离或时间。您可以使用图来表示城市的地图，其中节点是交叉路口，边表示道路。当然，您应该为边分配权重，以指示驾驶给定道路所需的距离或时间。
- en: There are many other applications related to graphs. For instance, the minimum
    spanning tree can be used to create a plan of connections between buildings to
    supply all of them with a telecommunication cable with the smallest cost, as explained
    in the previous chapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图还有许多其他相关的应用。例如，最小生成树可以用来创建建筑物之间的连接计划，以最小的成本为它们提供电信电缆，就像前一章中所解释的那样。
- en: The node coloring problem has been used for coloring voivodeships on a map of
    Poland according to the rule that two voivodeships that have common borders cannot
    have the same color. Of course, the number of colors should be limited.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 节点着色问题已经被用来根据这样一个规则对波兰地图上的省进行着色，即有共同边界的两个省份不能有相同的颜色。当然，颜色的数量应该是有限的。
- en: Another example shown in this book involves Dijkstra's algorithm for finding
    the shortest path in a game map. The task is to find the shortest path between
    two places on a board, taking into account various obstacles.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中另一个例子涉及到Dijkstra算法，用于在游戏地图中寻找最短路径。任务是在棋盘上找到两个地方之间的最短路径，考虑到各种障碍。
- en: The last word
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话
- en: You have just reached the end of the last chapter of the book. First, the classification
    of data structures has been presented, taking into account linear and non-linear
    data structures. In the first group, you can find arrays, lists, stacks, and queues,
    while the second group involves graphs, trees, heaps, as well as their variants.
    In the following part of this chapter, the diversity of applications of various
    data structures has been taken into account. You have seen a short summary of
    each described data structure, as well as information about some problems which
    can be solved with the use of a particular data structure, such as a queue or
    a graph. To make the content easier to understand, as well as to remind you of
    the various topics from the previous chapters, the summary has been equipped with
    illustrations of data structures.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚到达了这本书的最后一章的结尾。首先，介绍了数据结构的分类，考虑了线性和非线性数据结构。在第一组中，你可以找到数组、列表、栈和队列，而第二组涉及到图、树、堆，以及它们的变体。在本章的后续部分中，考虑了各种数据结构的多样化应用。你已经看到了对每种描述的数据结构的简要总结，以及关于可以用特定数据结构解决的一些问题的信息，比如队列或图。为了使内容更容易理解，并提醒你之前章节中的各种主题，总结中配有数据结构的插图。
- en: In the introduction to this book, I invited you to start your adventure with
    data structures and algorithms. While reading the following chapters, writing
    hundreds of lines of code and debugging, you had a chance to familiarize yourself
    with various data structures, starting with arrays and lists, through stacks,
    queues, dictionaries, and hash sets, ending with trees, heaps, and graphs. I hope
    that this book is only the first step into your long, challenging, and successful
    adventure with data structures and algorithms.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的介绍中，我邀请您开始您的数据结构和算法之旅。在阅读以下章节、编写数百行代码和调试的过程中，您有机会熟悉各种数据结构，从数组和列表开始，经过栈、队列、字典和哈希集，最后到树、堆和图。我希望这本书只是您与数据结构和算法长期、充满挑战和成功的冒险的第一步。
- en: I would like to thank you for reading this book. If you have any questions or
    problems regarding the described content, please do not hesitate to contact me
    directly using the contact information shown at [http://jamro.biz](http://jamro.biz).
    I would like to wish you all the best in your career as a software developer,
    and I hope that you have many successful projects!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读这本书。如果您对所描述的内容有任何问题或困惑，请不要犹豫直接联系我，联系信息显示在[http://jamro.biz](http://jamro.biz)。我希望您在作为软件开发人员的职业生涯中一切顺利，并且希望您有许多成功的项目！
