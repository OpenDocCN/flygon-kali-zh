- en: Inserting Records into Tables Using Stored Procedures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用存储过程将记录插入表中
- en: In this chapter, you will learn how to insert records directly into a table
    using a *Stored procedure* that is stored in the `Programmability` folder in SQL
    Server. We'll do it through textboxes in the HTML page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用存储在SQL Server的`Programmability`文件夹中的*存储过程*直接将记录插入表中。我们将通过HTML页面中的文本框进行操作。
- en: Adding text boxes and a button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加文本框和按钮
- en: 'Crank up a project. First, let''s put a couple of boxes in the <html> page.
    For this, enter the following under the line that begins with `<form id= ....`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个项目。首先，在<html>页面中放入一对框。为此，请在以`<form id= ....`开头的行下输入以下内容：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For the `Name` field, it is just a text box. So, for text, in other words, we'll
    use a string. Go to Toolbox, grab a `TextBox` control, and drag it in there. For
    the date, we will try to parse to a date time from the box.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Name`字段，它只是一个文本框。因此，对于文本，换句话说，我们将使用一个字符串。转到工具箱，获取一个`TextBox`控件，并将其拖放到那里。对于日期，我们将尝试从框中解析为日期时间。
- en: 'Your `Default.aspx` screen should now look like the one shown in *Figure 18.3.1*:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`Default.aspx`屏幕现在应该看起来像*图18.3.1*中显示的屏幕。
- en: '![](img/55a9de57-b40b-475f-9e05-57d11e34f264.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55a9de57-b40b-475f-9e05-57d11e34f264.png)'
- en: 'Figure 18.3.1: The Default.aspx screen for this chapter'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.1：本章的Default.aspx屏幕中的屏幕
- en: Remember, we have two boxes, we input values, and save them into the table.
    That's the objective here.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们有两个框，我们输入值，并将它们保存到表中。这是这里的目标。
- en: Next, let's also put a button in there. So again, go to Toolbox, grab a button,
    and drag and drop it just below these lines. Change the text on the button so
    that it's more helpful, for example, to say `Insert And Show`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们也在那里放一个按钮。因此，再次转到工具箱，获取一个按钮，并将其拖放到这些行的正下方。更改按钮上的文本，以使其更有帮助，例如，说`插入并显示`。
- en: So, when you click on the button, you will insert the new records and you will
    also show the records to confirm that it's saved together with the existing ones.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当您单击按钮时，您将插入新记录，并且还将显示记录以确认它与现有记录一起保存。
- en: Reviewing what you created already in SQL Server
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾在SQL Server中已经创建的内容
- en: Next, open the SQL Server Object Explorer screen. Now, remember that you made
    a database called `People` and then within it you have a table also called `People`.
    Further, within that you have a column called `Id`. This is the primary key. Remember,
    that it's auto-incremented so that you don't have to specify the ID. That is,
    it's done for you automatically.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开SQL Server对象资源管理器屏幕。现在，请记住，您创建了一个名为`People`的数据库，然后在其中还有一个名为`People`的表。此外，在其中，您有一个名为`Id`的列。这是主键。请记住，它是自动递增的，因此您不必指定ID。也就是说，它会自动为您完成。
- en: 'Next, there are two fields: one is `NAME`, and the other one is `DATEADDED`;
    `NAME` is `varchar(100)` and `DATEADDED` is of type `date`. Both values have to
    be supplied, and that''s why it says `not null`. The SQL Server Object Explorer
    screen up to this point is shown in *Figure 18.3.2*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，有两个字段：一个是`NAME`，另一个是`DATEADDED`；`NAME`是`varchar(100)`，`DATEADDED`的类型是`date`。两个值都必须提供，这就是为什么它说`not
    null`。到目前为止，SQL Server对象资源管理器屏幕显示在*图18.3.2*中：
- en: '![](img/4ee0c020-7681-4189-a9ac-1ae180f4278a.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ee0c020-7681-4189-a9ac-1ae180f4278a.png)'
- en: 'Figure 18.3.2: The SQL Server Object Explorer screen for the database People'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.2：数据库People的SQL Server对象资源管理器屏幕
- en: Creating a new stored procedure
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的存储过程
- en: 'Now, expand the Programmability folder. There''s a folder called *Stored Procedures*.
    Right-click on that, and select Add New Stored Procedure... . This is the basic
    stored procedure code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，展开`Programmability`文件夹。有一个名为*存储过程*的文件夹。右键单击它，然后选择添加新存储过程...。这是基本的存储过程代码：
- en: '![](img/ff5e3c24-dae2-4eab-9d32-9646e5dcf9f9.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff5e3c24-dae2-4eab-9d32-9646e5dcf9f9.png)'
- en: 'Figure 18.3.3: The default Stored Procedure screen'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.3：默认存储过程屏幕
- en: 'To make use of the Stored Procedure, you need to rename it first. For this,
    change `[Procedure]` in the top line to say `[AddName]`, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用存储过程，您首先需要将其重命名。为此，请将顶行中的`[Procedure]`更改为`[AddName]`，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, it's just some code that resides in SQL Server. Then you can,
    for example, execute that code to perform some action in the database table.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，它只是驻留在SQL Server中的一些代码。然后，您可以，例如，执行该代码以在数据库表中执行某些操作。
- en: 'In our case, we will use this procedure to insert records into the table. We
    need parameters because we will enter two values. So, edit the next two lines
    of the Stored Procedure, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将使用此过程将记录插入表中。我们需要参数，因为我们将输入两个值。因此，按照以下方式编辑存储过程的下两行：
- en: First, change `param1` to `Name`, and change the default value of `int = 0`
    and assign the datatype as `varchar(100)`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将`param1`更改为`Name`，将默认值更改为`int = 0`，并将数据类型分配为`varchar(100)`。
- en: 'For the next line, change `param2` to `DateAdded` and it''s of the `date` type.
    So, these are the two parameters:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行，将`param2`更改为`DateAdded`，类型为`date`。因此，这是两个参数：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, because you will not select records, rather, you will *insert* records,
    so, we''ll enter an `insert` statement and then type the following in place of
    the `SELECT` line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，因为您不会选择记录，而是会*插入*记录，所以，我们将输入一个`insert`语句，然后在`SELECT`行的位置键入以下内容：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, you `insert into` the `People` database and then you make the list of
    the fields that should receive the new information, that is `NAME` and `DATEADDED`.
    Then, you enter `values` and then the list of parameters—`@Name` and `@DateAdded`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您`insert into` `People`数据库，然后列出应接收新信息的字段，即`NAME`和`DATEADDED`。然后，您输入`values`，然后是参数列表—`@Name`和`@DateAdded`。
- en: Remember, the parameters in this line function similarly to the functions that
    you've created before. Through them, values are passed into functions when you
    write them in C#. The same principle applies here. Through the parameters, values
    are passed into the body of the stored procedure, which in this particular case,
    inserts to the fields, the field values directly into the table. Here, the `@Name`
    and `@DateAdded` values are passed into `NAME` and `DATEADDED`. That's the objective
    here.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这行中的参数类似于之前创建的函数。通过它们，在你在C#中编写函数时，将值传递给函数。同样的原理也适用于这里。通过参数，值被传递到存储过程的主体中，在这种特殊情况下，直接将字段值插入到表中。在这里，`@Name`和`@DateAdded`的值被传递到`NAME`和`DATEADDED`中。这就是目标。
- en: 'The complete stored procedure is shown in *Figure 18.3.4*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的存储过程显示在*图18.3.4*中：
- en: '![](img/eb0e9a1d-ec7b-448c-bee4-2668ffb19b5e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb0e9a1d-ec7b-448c-bee4-2668ffb19b5e.png)'
- en: 'Figure 18.3.4: The stored procedure, dbo.AddName'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.4：存储过程，dbo.AddName
- en: Updating the database structure
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新数据库结构
- en: Now, let's update the structure of things; so, click on the Update button and
    on Update Database in the dialog box that appears as shown in the *Figure 18.3.5*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新一下结构；所以，单击“更新”按钮，然后在弹出的对话框中单击“更新数据库”，如*图18.3.5*所示。
- en: '![](img/8d2530af-54b3-4c51-963d-c21f03a2e735.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d2530af-54b3-4c51-963d-c21f03a2e735.png)'
- en: 'Figure 18.3.5: Preview database update dialog box'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.5：预览数据库更新对话框
- en: Once it's updated, expand the Programmability folder and then the Stored Procedures
    folder. There, you see `dbo.AddName`. Now, if you expand `dbo.AddName`, there's
    a list of parameters:`@Name` and `@DateAdded`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，展开“可编程性”文件夹，然后展开“存储过程”文件夹。在那里，你会看到`dbo.AddName`。现在，如果你展开`dbo.AddName`，会看到一系列参数：`@Name`和`@DateAdded`。
- en: 'Now, let''s make use of what we''ve made so far. Click on the `Default.aspx`
    tab, and then go into the Design view, and double-click on the Insert And Show
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` stub. We''ll
    start with the code shown in *Figure 18.3.6* for this project:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们利用到目前为止所做的事情。单击“Default.aspx”选项卡，然后进入设计视图，双击“插入并显示”按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`存根。我们将从*图18.3.6*中显示的代码开始这个项目：
- en: '![](img/5e409707-812a-48de-bac2-3d2d21c8713c.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e409707-812a-48de-bac2-3d2d21c8713c.png)'
- en: 'Figure 18.3.6: The starting code for this project'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.6：这个项目的起始代码
- en: Adding a namespace
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个命名空间
- en: 'Again, to make this work with SQL Server, you have to add a namespace. So,
    go to the top of the file, and under `using System`, enter the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，要使这个与SQL Server一起工作，你必须添加一个命名空间。所以，转到文件顶部，在`using System`下输入以下内容：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This, of course will be used for things, such as commands and connections,
    which you fill in as a comment. We''ll do one more of these right under this line,
    so enter the following next:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这将用于诸如命令和连接之类的东西，你可以将其填写为注释。我们将在这一行下面再做一个，所以输入以下内容：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This line will also serve our purpose. There will be quite a lot of code, but
    it's highly sequential—it goes pretty naturally from top to bottom, and it will
    do the job for you.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这行也将为我们服务。会有相当多的代码，但它是高度顺序的——它从上到下自然而然地进行，它会为你完成工作。
- en: 'Now, every time you click on the button, you want to clear the label so that
    the output doesn''t continue to accumulate; so, between a set of curly braces
    under the line that begins with `protected void Button1_Click...`, enter the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次单击按钮时，你都希望清除标签，以便输出不会继续累积；所以，在以`protected void Button1_Click...`开头的行下的一对大括号之间，输入以下内容：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Building the connection string
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建连接字符串
- en: 'In the next stage, you want to get the connection string; so, on the following
    line you start by entering `string connString =`, followed by the `@` symbol to
    make it a verbatim string, and then you put in the `""` symbols. Now, to get the
    connection string, do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，你想要获取连接字符串；所以，在下一行开始时输入`string connString =`，然后跟上`@`符号使其成为逐字字符串，然后放入`""`符号。现在，要获取连接字符串，做以下操作：
- en: Click on View in the menu bar, and select SQL Server Object Explorer.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击菜单栏中的“查看”，然后选择“SQL Server对象资源管理器”。
- en: Right-click on the `People` database, and select Properties.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“People”数据库，然后选择“属性”。
- en: In the Properties pane, double-click on Connection string to select it with
    its long description.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性窗格中，双击连接字符串以选择它及其长描述。
- en: Then, right-click on the long description and copy it.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，右键单击长描述并复制它。
- en: Paste the description between the set of `""` symbols.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一对`""`符号之间粘贴描述。
- en: 'The connection string line should then look like the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串行应该看起来像下面这样：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can now close the SQL Server Object Explorer and Properties panes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以关闭SQL Server对象资源管理器和属性窗格。
- en: Initializing the connection
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化连接
- en: 'In the next stage, because we are accessing the hard drive to read and save
    records, enter the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，因为我们正在访问硬盘来读取和保存记录，输入以下内容：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is how you initialize a connection. If you right-click on `SqlConnection`
    and select Go to Definition, it says that it's of the `DbConnection` type and
    it inherits from `SqlConnection`. Now, if you right-click on `DbConnection` and
    select Go To Definition, it says that it implements `IDisposable`. Then, if you
    right-click on `IDisposable` and select Go To Definition, it says, Performs application-defined
    tasks associated with freeing, releasing, or resetting unmanaged resources. So,
    for example, for low-level channels that are opened to get information from the
    hard drive, you've got to make sure that they are properly cleaned up. You can
    now close this window.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何初始化连接。如果右键单击`SqlConnection`并选择“转到定义”，它会说它是`DbConnection`类型，并且继承自`SqlConnection`。现在，如果你右键单击`DbConnection`并选择“转到定义”，它会说它实现了`IDisposable`。然后，如果你右键单击`IDisposable`并选择“转到定义”，它会说，执行与释放、释放或重置非托管资源相关的应用程序定义的任务。因此，例如，对于从硬盘获取信息的低级通道，你必须确保它们被正确清理。现在可以关闭这个窗口。
- en: Catching exceptions
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获异常
- en: 'Next, because all kinds of issues can arise when you work with databases, you
    need to `try` it and then `catch` any exception. For this, below the open curly
    brace under the preceding line, enter the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，因为在与数据库一起工作时可能会出现各种问题，您需要先`try`，然后捕获任何异常。为此，在前一行下的开放大括号下面，输入以下内容：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, I''m really putting in `catch (Exception ex)` more for the sake of being
    able to display some diagnostic information. Next, between a set of curly braces
    below this, enter the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我真的只是为了能够显示一些诊断信息而添加了`catch (Exception ex)`。接下来，在此下面的一对大括号之间，输入以下内容：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We use this line just to display the diagnostic information.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这行只是为了显示诊断信息。
- en: Trying out commands
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试命令
- en: 'Now, let''s go into the `try` part. This is where everything can happen. First,
    let''s make a command. Enter the following between the set of curly braces under
    `try`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入`try`部分。这是一切都可能发生的地方。首先，让我们创建一个命令。在`try`下面的大括号之间输入以下内容：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, you''ll set the type of commands, so enter the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将设置命令的类型，因此请输入以下内容：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This line speaks for itself.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这行说明了它自己。
- en: 'Now, to actually get the text to choose the specific stored procedure to be
    called, you need to enter the following next:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了实际获取文本以选择要调用的特定存储过程，您需要输入以下内容：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Remember, `AddName` is what we called the procedure in the SQL Server.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`AddName`是我们在SQL Server中称之为的存储过程。
- en: Adding the parameters
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加参数
- en: 'Now, for the next stage, we will add what are known as *parameters*. In other
    words, you have to make sure that the values are actually passed into the stored
    procedure so that you can save them inside the table. So, enter the following
    next:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于下一个阶段，我们将添加所谓的*参数*。换句话说，您必须确保实际传递值到存储过程中，以便您可以将它们保存在表中。因此，请接下来输入以下内容：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we start with the name of the parameter: `@Name`, and then the value
    of it will come from the first box: `TextBox1.Text`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从参数的名称开始：`@Name`，然后它的值将来自第一个框：`TextBox1.Text`。
- en: 'Next, you will repeat this logic, so enter the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将重复此逻辑，因此请输入以下内容：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, `@DateAdded` is the name of the parameter, and this next stage comes
    from the second box: `TextBox2.Text`. This line will convert the value in the
    box, assuming that it is convertible to a `DateTime` object so that it matches
    the `@DateAdded` type inside the database. That is why we are taking this step.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`@DateAdded`是参数的名称，下一个阶段来自第二个框：`TextBox2.Text`。这行将转换框中的值，假设它可以转换为`DateTime`对象，以便它与数据库中的`@DateAdded`类型匹配。这就是为什么我们要采取这一步骤。
- en: Of course, in a more realistic situation, you might want to try `DateTime.TryParse`.
    To avoid excessive complexity, however, we'll just go with `DateTime.Parse`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在更现实的情况下，您可能想尝试`DateTime.TryParse`。为了避免过多的复杂性，我们将只使用`DateTime.Parse`。
- en: 'Enter the following next:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来输入以下内容：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You have to set the `conn` property. We created this near the top of the file
    in the line that begins with `using(SqlConnection conn...`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须设置`conn`属性。我们在文件顶部创建了这个属性，以`using(SqlConnection conn...`开头的行。
- en: 'For the next line, enter the following to open the connection:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一行，请输入以下内容以打开连接：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Saving the information for later retrieval
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存信息以便以后检索
- en: 'In the next stage, we will execute `NonQuery`. For this, enter the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个阶段，我们将执行`NonQuery`。为此，请输入以下内容：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This line will save the information. Now, from there forward, when you want
    to retrieve the information, make sure that it''s working as expected. We''ll
    just switch the type of command to `CommandType` of the `Text` type, so enter
    the following next:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这行将保存信息。现在，从那里开始，当您想要检索信息时，请确保它按预期工作。我们只需将命令类型切换为`Text`类型的`CommandType`，因此请接下来输入以下内容：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we will specify the text, so enter the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将指定文本，因此请输入以下内容：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, `select *` means select everything from the `People` database.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`select *`表示从`People`数据库中选择所有内容。
- en: 'After that, enter the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，输入以下内容：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Recognizing the role of indexers
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认识索引器的作用
- en: Now, I'll show you something that I didn't show you previously. Hover your mouse
    over `ExecuteReader`. This returns a `SqlDataReader` class. Now, right-click on
    `SqlDataReader` in the preceding line and select Go To Definition. Do you remember
    when we learned about indexers earlier? Look at where it says public override
    object this[string name]. If you expand that, it says that it Gets the value of
    the specified column and its native format given the column name. If you go back,
    the next definition reads public override object this[int i]. If you expand this
    one, it says, Gets the value of the specified column in its native format given
    the column ordinal, here, the number of the column. So, the `public override object...`
    line refers to the current `SqlDataReader` object. This is basically an indexer
    here. Now you can see that indexers really do play a role. You can close this
    now.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将向您展示一些以前没有向您展示的东西。将鼠标悬停在`ExecuteReader`上。这将返回一个`SqlDataReader`类。现在，在前一行中右键单击`SqlDataReader`，然后选择“转到定义”。您还记得我们之前学到的索引器吗？看看它说的public
    override object this[string name]。如果您展开它，它说它获取指定列的值及其本机格式，给定列名。如果您返回，下一个定义是public
    override object this[int i]。如果您展开这个，它说，获取指定列的值及其本机格式，给定列的顺序，这里是列的编号。因此，`public
    override object...`行是指当前的`SqlDataReader`对象。这基本上是一个索引器。现在您可以看到索引器确实发挥了作用。现在您可以关闭这个。
- en: 'To make use of this information, enter the following next between a set of
    curly braces under the previous `using` line:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这些信息，请在前面`using`行下的一对大括号之间输入以下内容：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, between a set of curly braces below this line, enter the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在这行下面的一对大括号之间，输入以下内容：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, after `sampLabel.Text...`, you specify `reader[0]`, `{reader[1]}`, and
    `{reader[2]`, which are the three columns, accessed by the index.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在`sampLabel.Text...`之后，您指定`reader[0]`，`{reader[1]}`和`{reader[2}`，这是通过索引访问的三列。
- en: You've now input the heart of the program.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经输入了程序的核心。
- en: Running the program
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now, let''s take a look at the results. Crank this up in your browser. First,
    enter some values: `Berry Gibbs` for `Name`, a date, and then, click on the Insert
    And Show button. The results are shown in *Figure 18.3.7*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看结果。在浏览器中打开这个。首先，输入一些值：`Berry Gibbs`作为`Name`，一个日期，然后点击“插入并显示”按钮。结果显示在*图18.3.7*中：
- en: '![](img/0eff2168-9368-460c-84b7-e40cb1fad685.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0eff2168-9368-460c-84b7-e40cb1fad685.png)'
- en: 'Figure 18.3.7: The initial results of running our program'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.7：运行我们的程序后的初始结果
- en: 'So, there it is—it''s working as expected. Now, let''s try another one. Enter
    `Mark Owens` for `Name`, add a date, and then, click on the Insert And Show button
    again. As you can see in *Figure 18.3.8*, it has been added automatically. This
    confirms that it has been saved to the table, and then further, we can retrieve
    it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就是这样——它按预期工作。现在，让我们再试一个。输入`Mark Owens`作为`Name`，添加一个日期，然后再次点击“插入并显示”按钮。正如您在*图18.3.8*中所看到的，它已经被自动添加了。这证实它已保存到表中，然后我们可以检索它：
- en: '![](img/6d2a3648-ea0e-46fa-baca-722a9855cb9a.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d2a3648-ea0e-46fa-baca-722a9855cb9a.png)'
- en: 'Figure 18.3.8: The modified results of running the program'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.8：运行程序后修改的结果
- en: So, these are the fundamentals of getting a connection.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这些是建立连接的基础知识。
- en: 'Now consider this. Imagine, in the preceding line, I put `cmd.CommandText =
    "AddNames"` instead of `AddName`. In other words, I misspelled the name of the
    stored procedure. If I then crank this up in my browser, as seen in *Figure 18.3.9*,
    it says, String was not recognized as a valid DateTime. That''s useful, right?
    I didn''t fill `Name` or `Date`. So, it can''t be converted to a `DateTime`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑这一点。想象一下，在前一行中，我写成了`cmd.CommandText = "AddNames"`而不是`AddName`。换句话说，我拼错了存储过程的名称。如果我在浏览器中打开这个，就像*图18.3.9*中所看到的那样，它会显示“字符串无法识别为有效的日期时间”。这很有用，对吧？我没有填写`Name`或`Date`。所以，它无法转换为`DateTime`：
- en: '![](img/95d4a8f4-92d7-40c6-9a79-51d2cf3c5133.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95d4a8f4-92d7-40c6-9a79-51d2cf3c5133.png)'
- en: 'Figure 18.3.9: The results of running the program with no values entered'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.9：未输入值运行程序的结果
- en: 'Now, even if I do enter values for `Name` and `Date`, it says, Could not find
    stored procedure ''AddNames'', as shown in *Figure 18.3.10*, because I misspelled
    the name of the stored procedure:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使我为`Name`和`Date`输入值，它也会显示“找不到存储过程'AddNames'”，如*图18.3.10*所示，因为我拼错了存储过程的名称：
- en: '![](img/b8bd52fc-68df-44ae-bbd6-b45269a57f62.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8bd52fc-68df-44ae-bbd6-b45269a57f62.png)'
- en: 'Figure 18.3.10: The results of running the program with the misspelled the
    name of the stored procedure'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3.10：拼错存储过程名称后运行程序的结果
- en: So, with the `try` line, because all of the commands after that could generate
    some kind of error, at least you can catch it and display the error message and
    you will be able to know what's going on. So, it's very useful.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，使用`try`行，因为之后的所有命令都可能产生某种错误，至少您可以捕获它并显示错误消息，这样您就能知道发生了什么。所以，这非常有用。
- en: Chapter review
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾，包括注释的本章`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to insert records directly into a table using
    Stored procedures, and stored in the Programmability folder in the SQL Server.
    You created a new stored procedure, updated the database structure, built the
    connection string, initialized the connection, tried out commands and caught exceptions,
    added parameters, saved the information for later retrieval, and recognized the
    role of indexers.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用存储过程直接将记录插入到表中，并存储在SQL Server的可编程文件夹中。您创建了一个新的存储过程，更新了数据库结构，构建了连接字符串，初始化了连接，尝试了命令并捕获了异常，添加了参数，保存了信息以供以后检索，并认识到了索引器的作用。
- en: In the next chapter, you will learn how to use the `nullable` keyword to ensure
    that records that have missing values can still be brought, for example, into
    an application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用`nullable`关键字来确保具有缺失值的记录仍然可以被引入应用程序中。
