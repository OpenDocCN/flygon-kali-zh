["```cs\npublic static IEnumerable<TResult> MapReduce<TSource, TMapped, TKey, TResult>(\nthis IEnumerable<TSource> source,\nFunc<TSource, IEnumerable<TMapped>> map,\nFunc<TMapped, TKey> keySelector,\nFunc<IGrouping<TKey, TMapped>, IEnumerable<TResult>> reduce)\n{\nreturn source.SelectMany(map) .GroupBy(keySelector) .SelectMany(reduce); }\n```", "```cs\npublic static ParallelQuery<TResult> MapReduce<TSource, TMapped, TKey, TResult>(\nthis ParallelQuery<TSource> source,\nFunc<TSource, IEnumerable<TMapped>> map,\nFunc<TMapped, TKey> keySelector,\nFunc<IGrouping<TKey, TMapped>, IEnumerable<TResult>> reduce)\n{\nreturn source.SelectMany(map)\n.GroupBy(keySelector)\n.SelectMany(reduce);\n}\n```", "```cs\nprivate static void MapReduceTest()\n{\n    //Maps only positive number from list\n    Func<int, IEnumerable<int>> mapPositiveNumbers = number =>\n    {\n        IList<int> positiveNumbers = new List<int>();\n        if (number > 0)\n            positiveNumbers.Add( number);\n            return positiveNumbers;\n    };\n    // Group results together\n    Func<int, int> groupNumbers = value => value;\n    //Reduce function that counts the occurrence of each number\n    Func<IGrouping<int, int>,IEnumerable<KeyValuePair<int, int>>> \n     reduceNumbers =  grouping => new[] {                                 \n        new KeyValuePair<int, int>( grouping.Key, grouping.Count()) \n    };\n    // Generate a list of random numbers between -10 and 10\n    IList<int> sourceData = new List<int>();\n    var rand = new Random();\n    for (int i = 0; i < 1000; i++)\n    {\n        sourceData.Add(rand.Next(-10, 10));\n    }\n    // Use MapReduce function\n    var result = sourceData.AsParallel().MapReduce(mapPositiveNumbers,\n                                                    groupNumbers,\n                                                    reduceNumbers);\n    // process the results\n    foreach (var item in result)\n    {\n       Console.WriteLine($\"{item.Key} came {item.Value} times\" );\n    }\n}\n```", "```cs\nvar output = new List<int>();\nvar input = Enumerable.Range(1, 50);\nFunc<int,int> action = (i) => i * i;\nforeach (var item in input)\n{\n    var result = action(item);\n    output.Add(result);\n}\n```", "```cs\nvar output = new List<int>();\nvar input = Enumerable.Range(1, 50);\nFunc<int, int> action = (i) => i * i;\nParallel.ForEach(input, item =>\n{\n    var result = action(item);\n    lock (output) \n        output.Add(result);\n});\n```", "```cs\nvar input = Enumerable.Range(1, 50);\nFunc<int, int> action = (i) => i * i;\nvar output = new ConcurrentBag<int>();\nParallel.ForEach(input, item =>\n{\n    var result = action(item);\n    output.Add(result);\n});\n```", "```cs\nvar input = Enumerable.Range(1, 50);\nFunc<int, int> action = (i) => i * i;\nvar output = input.AsParallel()\n             .Select(item => action(item))\n             .ToList();\n```", "```cs\npublic static T SpeculativeInvoke<T>(params Func<T>[] functions)\n{\n    return SpeculativeForEach(functions, function => function());\n}\n```", "```cs\npublic static TResult SpeculativeForEach<TSource, TResult>(\n                        IEnumerable<TSource> source,\n                        Func<TSource, TResult> body)\n{\n    object result = null;\n    Parallel.ForEach(source, (item, loopState) =>\n    {\n        result = body(item);\n        loopState.Stop();\n    });\n    return (TResult)result;\n}\n```", "```cs\nFunc<string> Square = () => {\n                Console.WriteLine(\"Square Called\");\n                return $\"Result From Square is {5 * 5}\";\n                };\nFunc<string> Square2 = () =>\n             {\n                 Console.WriteLine(\"Square2 Called\");\n                 var square = 0;\n                 for (int j = 0; j < 5; j++)\n                 {\n                     square += 5;\n                 }\n                 return $\"Result From Square2 is {square}\";\n             };\nstring result = SpeculativeInvoke(Square, Square2);\nConsole.WriteLine(result);\n```", "```cs\npublic class LazySingleton<T> where T : class\n    {\n        static object _syncObj = new object();\n        static T _value;\n        private LazySingleton()\n        {\n        }\n        public static T Value\n        {\n            get\n            {\n                if (_value == null)\n                {\n                    lock (_syncObj)\n                    {\n                        if (_value == null)\n                            _value = SomeHeavyCompute();\n                    }\n                }\n                return _value;\n            }\n        }\n        private static T SomeHeavyCompute() { return default(T); }\n    }\n```", "```cs\npublic class MyLazySingleton<T>\n{\n    //Declare a Lazy<T> instance with initialization \n    //function (SomeHeavyCompute) \n    static Lazy<T> _value = new Lazy<T>();\n    //Value property to return value of Lazy instance when \n    //actually required by code\n    public T Value { get { return _value.Value; } }\n    //Initialization function\n    private static T SomeHeavyCompute() \n    { \n        return default(T); \n    }\n}\n```", "```cs\nvar data = new Lazy<Task<T>>(() => Task<T>.Factory.StartNew(SomeHeavyCompute));\n```", "```cs\npublic static string GetDataFromService()\n{\n    Console.WriteLine(\"Service called\");\n    return \"Some Dummy Data\";\n}\n```", "```cs\npublic static void SaveToText(string data)\n{\n    Console.WriteLine(\"Save to Text called\");\n    //Save to Text\n}\npublic static void SaveToCsv(string data)\n{\n    Console.WriteLine(\"Save to CSV called\");\n    //Save to CSV\n}\n```", "```cs\n //\n Lazy<Task<string>> lazy = new Lazy<Task<string>>(\n  Task.Factory.StartNew(GetDataFromService));\n  lazy.Value.ContinueWith((s)=> SaveToText(s.Result));\n  lazy.Value.ContinueWith((s) => SaveToCsv(s.Result));\n```"]