- en: Chapter 7. Building and Distributing NumPy Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：构建和分发 NumPy 代码
- en: 'In a real-world scenario, you will be writing an application with the intentions
    of distributing it to the World or reusing it on various other computers. For
    this purpose, you would like your application to be packed in a standard way so
    that everyone in the community understands and follows. As you will have noticed
    by now, Python users mainly use a package manager called `pip` to automate the
    installation of modules created by other programmers. Python has a packaging platform
    called  **PyPI** ( **Python Package Index** ), which is an official central repository
    for more than 50,000 Python packages. Once the package is registered in PyPi aka 
    *Cheese Shop* , other users across the world can install it after configuring
    it with package management systems such as `pip` . Python comes with a number
    of solutions to help you to build your code ready for distribution to the  *Cheese
    Shop* and, in this chapter, we will focus on two such tools, `setuptools` and `Distutils`
    . Apart from these two tools, we will be looking into a specific module provided
    by NumPy called `numpy.distutils` . This module makes the process of building
    and distributing NumPy-specific code easier for the programmers. This module also
    provides added functionalities such as methods for compiling Fortran code, calling `f2py,`
    and more. In this chapter, we will be going through the following steps to learn
    the packaging workflow:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，您将编写一个应用，以将其分发到世界上或在其他各种计算机上重用。 为此，您希望应用以标准方式打包，以便社区中的每个人都能理解和遵循。 正如您现在已经注意到的那样，Python
    用户主要使用名为`pip`的包管理器来自动安装其他程序员创建的模块。 Python 具有一个称为 **PyPI**（**Python 包索引**）的打包平台，该平台是
    50,000 多个 Python 包的官方中央仓库。 一旦在 PyPi（又名 *Cheese Shop*）中注册了包，世界各地的其他用户都可以在使用`pip`等包管理系统对其进行配置后进行安装。
    Python 随附了许多解决方案，可帮助您构建代码以准备分发给 *Cheese Shop* ，并且在本章中，我们将重点介绍两个此类工具，`setuptools`
    和`Distutils` 除了这两个工具之外，我们还将研究 NumPy 提供的称为`numpy.distutils`的特定模块。 该模块使程序员更容易构建和分发特定于
    NumPy 的代码。 该模块还提供了其他函数，例如用于编译 Fortran 代码，调用`f2py`等方法。 在本章中，我们将通过以下步骤来学习包装工作流程：
- en: We will build a small but working setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将建立一个小的但可行的设置
- en: We will explain the steps to integrate NumPy modules into your setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将说明将 NumPy 模块集成到您的设置中的步骤
- en: We will explain how to register and distribute your application over the Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将说明如何在互联网上注册和分发您的应用
- en: Introducing Distutils and setuptools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Distutils 和 Setuptools 简介
- en: Before we begin, first let us understand what these tools are and why we prefer
    one over another. `Distutils` is a framework that comes by default with Python,
    and `setuptools` builds over the standard `Distutils` to provide enhanced functionalities
    and features. In a real-world scenario, you will never use `Distutils` . The only
    case where you might want to use `Distutils` alone is where `setuptools`  is unavailable.
    (A good setup script should check for the availability of `setuptools` before
    proceeding.) In most cases, users will be better off installing `setuptools` as
    most packages nowadays are built over them. We will be using `setuptools` for
    building Cython code in the following chapters; hence, for our purpose, we will
    be installing `setuptools` now and using it extensively from now on.
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，首先让我们了解这些工具是什么以及为什么我们偏爱另一个工具。 `Distutils`是 Python 默认提供的框架，`setuptools`建立在标准`Distutils`的基础上，以提供增强的功能和特性。
    在现实世界中，您将永远不会使用`Distutils`。 您可能想单独使用`Distutils`的唯一情况是`setuptools`不可用。 （良好的设置脚本应在继续之前检查`setuptools`的可用性。）在大多数情况下，用户最好安装`setuptools`，因为当今大多数包都是基于它们构建的。
    在接下来的章节中，我们将使用`setuptools`来构建 Cython 代码; 因此，出于我们的目的，我们现在将安装`setuptools`并从现在开始广泛使用它。
- en: Next let us start by installing the required tools to build our first dummy
    (but working) installer. After we have got our installer working, we will dive
    into more functionalities covering NumPy in a real-world script for the pandas
    module. We will study the checks made in the scripts to make it more robust and
    how we provide more information in the event of failures.
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们从安装必需的工具开始，以构建我们的第一个虚拟（但有效）安装程序。 安装程序正常运行后，我们将在 Pandas 脚本模块的真实脚本中深入介绍
    NumPy 的更多功能。 我们将研究脚本中进行的检查，以使其更强大，以及在发生故障时如何提供更多信息。
- en: Preparing the tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工具
- en: 'To install `setuptools` on your system, you need to first download `ez_setup.py`
    on your system from [https://pypi.python.org/pypi/setuptools](https://pypi.python.org/pypi/setuptools)
    and then execute this from your command prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的系统上安装`setuptools`，您需要先从[`pypi.python.org/pypi/setuptools`](https://pypi.python.org/pypi/setuptools)下载系统中的`ez_setup.py`，然后从命令提示符处执行以下操作
    ：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To test the installation of `setuptools` , open the Python shell and type the
    following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试`setuptools`的安装，请打开 Python 外壳并键入以下内容：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the preceding import does not give any error, then we have successfully installed
    `setuptools` .
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的导入没有给出任何错误，则说明我们已成功安装`setuptools`。
- en: Building the first working distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立第一个有效的发行版
- en: 'All of the tools we mentioned previously (`setuptools` , `Distutils` and `numpy.distutils`
    ) are centered around the function setup. To get an understanding of most packaging
    requirements, we will look into a simple setup function and then study a full-fledged
    installer. To create a basic installer, we need to call the setup function with
    metadata about the package. Let''s call our first package `py_hello` , which has
    just one function `greeter` , and just prints a message when called. The package
    can be downloaded from the Bitbucket repository at [https://bitbucket.org/tdatta/books/src/af376df081ef/python/simple_setup/?at=master](https://bitbucket.org/tdatta/books/src/af376df081ef/python/simple_setup/?at=master)
     The project directory structure for the project looks like the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们前面提到的所有工具（`setuptools`，`Distutils`和`numpy.distutils`）都围绕`setup`函数。 为了了解大多数包装要求，我们将研究一个简单的`setup`函数，然后研究一个成熟的安装程序。
    要创建基本的安装程序，我们需要使用有关包的元数据调用`setup`函数。 让我们叫第一个包`py_hello`，它只有一个函数`greeter`，并且在调用时只打印一条消息。
    可从 Bitbucket 仓库下载该包，位于[`bitbucket.org/tdatta/books/src/af376df081ef/python/simple_setup/?at=master`](https://bitbucket.org/tdatta/books/src/af376df081ef/python/simple_setup/?at=master)。该项目的目录结构如下：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s look at some standard files here:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里看一些标准文件：
- en: '`README` -This file is used to store information about your project. This file
    is not required by the system and you will still get your installer build without
    it, but it is a good practice to keep it here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README` - 此文件用于存储有关您的项目的信息。 该文件不是系统所需的文件，如果没有该文件，您仍将获得安装程序的构建，但是将其保留在此处是一种很好的做法。'
- en: '`MANIFEST.in` -This is a text file that is used by `Distutils` to collect all
    the files in your project. It is very important, and only the files listed here
    go into the final installer `tar` archive. In addition to specifying files that
    should go in the final installer, `manifest` can be used to exclude certain files
    from the project directory. The `manifest` file is mandatory; if it is not present,
    you will get an error while using `setup.py` . If you have an `svn` setup, then
    you can use the `sdist` command to automatically include files by parsing your `.svn`
    file and building the `manifest.in` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MANIFEST.in` - 这是一个文本文件，`Distutils`使用该文本文件来收集项目中的所有文件。 这非常重要，只有此处列出的文件才会进入最终安装程序`tar`存档。
    除了指定最终安装程序中应包含的文件之外，`manifest`还可以用于从项目目录中排除某些文件。 `manifest`文件是必需的； 如果不存在，则在使用`setup.py`时会出现错误。
    如果您具有`svn`设置，则可以使用`sdist`命令通过解析`.svn`文件并构建`manifest.in`文件来自动包含文件。'
- en: '`__init__.py` -This file is important for Python to recognize the directory
    as a module. You may leave it empty after creating it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py` - 该文件对于 Python 将该目录识别为模块很重要。 创建后可以将其留空。'
- en: 'To create an installer for this setup, we have `setup.py` in root, which uses
    the `setup` function from `setuptools` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 要为此安装程序创建安装程序，我们在根目录中有`setup.py`，它使用`setuptools`中的`setup`函数：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following are the options used in the setup:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是安装程序中使用的选项：
- en: '`name` -This is the name of the installation TAR archive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 这是安装 TAR 归档文件的名称。'
- en: '`packages` -This is a list naming the packages you want to include.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packages` - 这是一个列出要包含的包的列表。'
- en: '`scripts` -This is a list of script(s) to be installed into standard locations
    such as `/usr/bin.` In this particular case, there is just an echo script. The
    intention for this is to just show readers how you can ship scripts with your
    package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts` - 这是要安装到`/usr/bin.`等标准位置的脚本的列表。在此特定情况下，仅存在一个回显脚本。 这样做的目的是向读者展示如何将包附带脚本。'
- en: '`package_data` -This is a dictionary with the key (package) associated to the
    list of files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package_data` - 这是字典，具有与文件列表相关联的键（包）。'
- en: '`version` : -This is the version of your project. This gets appended to the
    end of your installer''s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version` - 这是您的项目的版本。 这将附加到安装程序名称的末尾。'
- en: '`long_description` -This will be turned into HTML when displayed at the PyPI
    website. It should contain information about what your project is intending to
    provide. You can directly write it in the script; however, the best practice is
    to maintain the `README` file and read the description from there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long_description` - 在 PyPI 网站上显示时，它将转换为 HTML。 它应该包含有关您的项目打算提供的信息。 您可以直接在脚本中编写它；
    但是，最佳实践是维护`README`文件并从此处读取说明。'
- en: '`install_required` -This is a list that is used to add dependencies for your
    installation. You will add the name and version of third-party modules used within
    your code. Note the convention followed to specify the version here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install_required` - 这是用于添加安装依赖项的列表。 您将添加代码中使用的第三方模块的名称和版本。 请注意遵循约定以在此处指定版本。'
- en: '`classifiers` -This will be checked when you upload the package on the PyPI
    website. One should choose from the options given at the following website:  [https://pypi.python.org/pypi?:action=list_classifiers](https://pypi.python.org/pypi?:action=list_classifiers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classifiers` - 当您在 PyPI 网站上上传包时，将选中此选项。 您应该从以下网站提供的选项中进行选择：[`pypi.python.org/pypi?:action=list_classifiers`](https://pypi.python.org/pypi?:action=list_classifiers)。'
- en: Running `setup.py` with the  **build** option now should give you no error and
    produce a folder with the `.egg-info` suffix. At this point, you can run `setup.py`
    with the  **sdist** option and create a package that is ready to be shared with
    the World.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`build`选项运行`setup.py`应该不会给您任何错误，并生成带有`.egg-info`后缀的文件夹。 此时，您可以使用`sdist`选项运行`setup.py`，并创建一个可以与世界共享的包。
- en: 'You should see the final message as  **Creating tar archive**  as shown below:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到最终消息为**创建 TAR 归档文件**，如下所示：
- en: '![Building the first working distribution](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![建立第一个有效的发行版](img/00032.jpeg)'
- en: 'To test the package, you can install it on your local machine as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试该包，可以按照以下步骤将其安装在本地计算机上：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And check it as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 并按以下所示检查它：
- en: '![Building the first working distribution](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![建立第一个有效的发行版](img/00033.jpeg)'
- en: At this moment, write `greeter` on your `cmd/bash` prompt and you will see a
    message saying `does nothing` . This echo message is coming from `greeter.bat`
    ,which we have placed in the `scripts` key in the setup file.
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，在`cmd/bash`提示符下写`greeter`，您将看到一条消息`does nothing`。 该回显消息来自`greeter.bat`，我们将其放置在安装文件的`scripts`键中。
- en: The next section can be added to this skeleton `setup.py` to include `NumPy`
    -specific features.
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分可以添加到此框架`setup.py`以包括`NumPy`特定的功能。
- en: Adding NumPy and non-Python source code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 NumPy 和非 Python 源代码
- en: 'Next we will study some NumPy-specific code and understand how to improve the
    error-handling capabilities of the setup; in general, we will explore some good
    programming practices. We will also show how to add non-Python source (`c,fortran`
    or `f2py` ) into your installer. The following analysis shows part of the full
    code that you can find on the accompanying code files or at [https://bitbucket.org/tdatta/books/](https://bitbucket.org/tdatta/books/)
    :'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将研究一些特定于 NumPy 的代码，并了解如何提高设置的错误处理能力； 通常，我们将探索一些良好的编程习惯。 我们还将展示如何将非 Python
    源（`c,fortran`或`f2py`）添加到安装程序中。 以下分析显示了完整代码的一部分，您可以在随附的代码文件中或在[`bitbucket.org/tdatta/books`](https://bitbucket.org/tdatta/books/)中找到这些代码：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding script is stripped from a full working setup to focus on some
    aspects that you will find in almost all the setup scripts. These tasks ensure
    that you have done enough error handling and your script does not fail without
    explaining/hinting what to do next:'
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的脚本从完整的工作设置中删除，着重于几乎所有设置脚本中都可以找到的某些方面。 这些任务确保您已完成足够的错误处理，并且脚本在不解释/提示下一步操作的情况下不会失败：
- en: Check if NumPy is installed. The pattern followed here to ensure that NumPy
    is installed is a standard pattern that you can use for all the modules that you
    are planning to use and are required for your setup. To perform this task, we
    first build a function `is_numpy_installed` that tries to import `numpy` and returns
    a Boolean value. You will likely create similar functions for all the external
    packages that your setup file may be using. Advanced users may explore Python
    decorators to handle this in a more elegant way. If this function returns a false
    value, the installer should output a warning/info in case it can't finish without
    this package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否已安装 NumPy。 此处用来确保已安装 NumPy 的模式是一种标准模式，您可以将其用于计划使用的所有模块，并且是安装程序所必需的。 为了执行此任务，我们首先构建一个函数`is_numpy_installed`尝试导入`numpy`并返回一个布尔值。
    您可能会为安装文件可能使用的所有外部包创建类似的函数。 高级用户可以使用 Python 装饰器来以更优雅的方式进行处理。 如果此函数返回错误值，则安装程序应输出警告/信息，以防没有此包无法完成安装。
- en: Add `Extensions` to the setup file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Extensions`添加到设置文件中。
- en: The `Extension` class is the object that enables us to add non-Python code to
    our installer. The `sources` argument may contain a list of Fortran source files.
    However, the list sources may contain at the most one `f2py` signature file, and
    then the name of an Extension module must match with the `<module>` used in the
    signature file. The `f2py` signature file must contain exactly one Python module
    block, otherwise your installer will fail to build. You may decide not to add
    the signature files in the `sources` argument. In that case, `f2py` will scan
    for Fortran source files for routine signatures to construct the wrappers to Fortran
    codes. Additional options for the `f2py` process can be given using the `Extension`
    class argument `f2py_options` . These options are not in the scope of this book,
    and most readers will not be using them. For more details, users may refer to
    the extension class in the `api` document for `numpy.distutils` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Extension`类是使我们能够向安装程序中添加非 Python 代码的对象。 `sources`参数可能包含 Fortran 源文件列表。 但是，列表源可能最多包含一个`f2py`签名文件，然后扩展模块的名称必须与签名文件中使用的`<module>`匹配。
    `f2py`签名文件必须恰好包含一个 Python 模块块，否则安装程序将无法构建。 您可以决定不在`sources`参数中添加签名文件。 在这种情况下，`f2py`将扫描
    Fortran 源文件以获取常规签名，以构造 Fortran 代码的包装器。 可以使用`Extension`类参数`f2py_options`来指定`f2py`进程的其他选项。
    这些选项不在本书的讨论范围内，大多数读者不会使用它们。 有关更多详细信息，用户可以参考`api`文档中的`numpy.distutils`扩展类。'
- en: 'The setup file can be tested as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式测试安装文件：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `build_src` argument here is used to construct Fortran wrapper extension
    modules. It is assumed here that the user has compilers for C/C++ and Fortran
    installed on his machine.
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`build_src`参数用于构造 Fortran 包装器扩展模块。 这里假定用户在其计算机上安装了 C/C++ 和 Fortran 编译器。
- en: Testing your package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试您的包
- en: 'It is very important that the package you are building should work/install
    without any problem on a user''s computer. Hence, you should spend time testing
    the package. The general idea behind testing installation is to create a virtualenv
    and try to install the package or use another system altogether. Any error encountered
    at this stage should be removed and the author should try to make sure that the
    exceptions are easier to follow. Exceptions should also try to provide the solution.
    Common mistakes at this stage would be:'
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是，所构建的包可以在用户的​​计算机上正常运行/安装。 因此，您应该花时间测试包。 测试安装背后的总体思路是创建一个 VirtualEnv
    并尝试安装该包或完全使用另一个系统。 在此阶段遇到的任何错误都应删除，并且作者应尝试确保更容易遵循这些异常。 异常也应尝试提供解决方案。 此阶段的常见错误是：
- en: Assumptions about preinstalled modules and libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于预装模块和库的假设。
- en: Developers may forget to include dependencies in the setup file. This mistake
    will be caught if you use a new virtualenv to test the installer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员可能会忘记在安装文件中包含依赖项。 如果使用新的 VirtualEnv 来测试安装程序，则会捕获此错误。
- en: Permissions and elevated rights requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限和提升权限的要求。
- en: Some users may have read-only access to the computer. This could be easily overlooked
    as most developers do not have this case in their own machines. This problem should
    not occur if the provider of the package is following the right approach toward
    selecting the directories for writing. It is generally a good practice to check
    for this scenario by testing your scripts using a user without admin access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些用户可能对计算机具有只读访问权限。 这很容易被忽略，因为大多数开发人员在自己的机器上都没有这种情况。 如果包的提供者遵循正确的方法来选择要写入的目录，则应该不会出现此问题。
    通常，通过使用没有管理员访问权限的用户测试脚本来检查这种情况是一种很好的做法。
- en: Distributing your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分发您的应用
- en: 'Once all the development for your module/application is complete and you are
    ready with your complete working application and setup file, the next task will
    be to share your hardwork with the World to benefit others. The steps to release
    it to the world by using PyPI are quite straightforward. The first thing you need
    to do as an author of a package is to register yourself. You can do it directly
    from the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 完成模块/应用的所有开发并准备好完整的正常工作的应用和设置文件后，下一个任务就是与世界分享您的辛勤工作，使他人受益。 使用 PyPI 将其发布到全世界的步骤非常简单。
    作为包作者，您需要做的第一件事就是注册自己。 您可以直接从命令行执行以下操作：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: This process will fail if you do not have proper metadata information of any
    file missing in your `setup.py` . Make sure you have `setup.py` working first.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`setup.py`中缺少任何文件的正确元数据信息，则此过程将失败。 确保首先工作`setup.py`。
- en: 'Finally, you can upload your distribution on PyPI by doing the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过执行以下操作在 PyPI 上上传您的发行版：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Hopefully, if you typed everything correctly, your application will be packaged
    and available on PyPI for the World to use.
  prefs: []
  type: TYPE_NORMAL
  zh: 希望，如果您正确键入了所有内容，您的应用将被打包并在 PyPI 上供世界使用。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the tools used for packaging and distributing
    applications. We first looked at a simpler `setup.py` file. You looked into the
    attributes of the function setup and how these arguments link up to the final
    installer. Next we added-NumPy related code and added some exception handling
    code. Finally, we built the installer and learnt how to upload it on the  *Cheese
    Shop* (the PyPI website). In the next chapter, you will be looking at ways to
    further speed up your Python code by converting parts of it into Cython.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了用于打包和分发应用的工具。 我们首先看了一个更简单的`setup.py`文件。 您研究了`setup`函数的属性以及这些参数如何链接到最终安装程序。
    接下来，我们添加了与 NumPy 相关的代码，并添加了一些异常处理代码。 最后，我们构建了安装程序并学习了如何在 *Cheese Shop*（PyPI 网站）上上传它。
    在下一章中，您将研究通过将 Python 代码的一部分转换为 Cython 来进一步加速 Python 代码的方法。
