["```js\n<head>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0\u00a0<script src=\"img/bundle.min.js\"></script>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n</head>\n```", "```js\n//NPM\nnpm install danfojs-node\n// Yarn\nyarn add danfojs-node\n```", "```js\n//Common js style\nconst dfd = require(\"danfojs-node\")\n// ES6 style\nimport * as dfd from 'danfojs-node'\n```", "```js\n *\u00a0\u00a0table() and print() method:let sdata= new dfd.Series([1,3,5,7,9,11])\ntable( sdata) // Displays the table in Dnotebook\n```", "```js\n sdata.print() // will give us same output as table( sdata)\n```", "```js\n    console.log(sdata.index) // [0,1,2,3,4,5]\n    ```", "```js\n    let sdata = new dfd.Series([1,2,3, \"two:\",\"three\"])\n    console.log(sdata.dtype)\n    // string\n    ```", "```js\n    sdata.astype('int32')\n    ```", "```js\n    sdata.tensor.exp(2).arraySync()\n    // [3,7,20,55,148]\n    ```", "```js\n    series = new dfd.Series([1,2,3,4,5], {index: [\"one\",\"two\", \"three\", \"four\", \"five\"]})\n    table(series)\n    ```", "```js\nsdata = new dfd.Series([\"Humans\",\"Life\",\"Meaning\",\"Fact\",\"Truth\"])\nnew_series = sdata.set_index({ \"index\": [\"H\", \"L\", \"M\",\"F\",\"T\"] })\ntable(new_series)\n```", "```js\nsdata.set_index({ index: [\"H\", \"L\", \"M\",\"F\",\"T\"] , inplace: true })\n```", "```js\n    sdata = new dfd.Series([\"Humans\",\"Life\",\"Meaning\",\"Fact\",\"Truth\"])\n    series_new = sdata.apply((x) => {\n     return x.toLocaleUpperCase()\n    })\n    table(series_new)\n    ```", "```js\nsf = new dfd.Series([1, 2, 3, 4, 5, 6, 7, 8])\nsf_new = sf.apply(Math.log)\ntable(sf_new)\n```", "```js\nsf = new dfd.Series([1,2,3,4])\nmap = { 1: \"ok\", 2: \"okie\", 3: \"frit\", 4: \"gop\" }\nsf_new = sf.map(map)\ntable(sf_new)\n```", "```js\n    sf_nan = new dfd.Series([1,2, NaN, 20, undefined, 100])\n    table(sf_nan)\n    ```", "```js\ntable(sf_nan.isna())\n```", "```js\n    sf1\u00a0\u00a0= new dfd.Series([2,20,23,10,40,5])\n    sf2\u00a0\u00a0= new dfd.Series([30,20,40,10,2,3])\n    sf_add = sf1.add(sf2)\n    table(sf_add)\n    ```", "```js\ntable(sf1.add(10))\n```", "```js\ndata = {\n\u00a0\u00a0artist: ['Drake','Rihanna','Gambino', 'Bellion', 'Paasenger'],\n\u00a0\u00a0rating: [5, 4.5, 4.0, 5, 5],\n\u00a0\u00a0dolar: [ '$1m', '$2m','$0.1m', '$2.5m','$3m']\n}\ndf = new dfd. DataFrame (data)\ntable(df) \n// print out the\u00a0\u00a0DataFrame \n```", "```js\n    table(df.head(2))\n    ```", "```js\ntable(df.tail(2))\n```", "```js\ntable(df.artist)\n```", "```js\ntable(df['dollar'])\n```", "```js\ndf['dollar'] = ['$20m','$10m', '$40m', '$35m', '$10m']\n```", "```js\nrating = new dfd.Series([4.9,5.0, 7.0, 3.0,2.0])\ndf['rating'] = rating\ntable(df['rating'])\n```", "```js\ndate = [ \"06-30-02019\", \"07-29-2019\", \"08-28-2019\", \"09-12-2019\",\"12-03-2019\" ]\ndf.addColumn({column: \"date\", value: date})\n```", "```js\ndate_series = df['date']\ndf['date'] = date_series.dt.month_name()\n```", "```js\n    df.values\n    //output\n    [[Drake,4.9,$20m,Jun],[Rihanna,5,$10m,Jul],[Gambino,7,$40m,Aug],[Bellion,3,$35m,Sep],[Passenger,2,$10m,Dec]]\n    ```", "```js\n    df.tensor\n    //output\n    {\"kept\":false,\"isDisposedInternal\":false,\"shape\":[5,4],\"dtype\":\"string\",\"size\":20,\"strides\":[4],\"dataId\":{},\"id\":28,\"rankType\":\"2\"}\n    ```", "```js\n    df.transpose()\n    ```", "```js\ndf2 = df.transpose()\nconsole.log(df2.index) \n// [artist,rating,dollar,date]\n```", "```js\n    df3 = df.set_index({key:[\"a\",\"b\",\"c\",\"d\",\"e\"]})\n    ```", "```js\ndf4 = df.set_index({key:\"artist\"})\n```", "```js\ndf_index = df4.loc({rows:['Bellion','Rihanna','Drake']})\n```", "```js\ndf_index = df4.loc({rows:[\"Rihanna:Bellion\"]})\n```", "```js\ndf_index = df4.loc({rows:[\"Rihanna:Bellion\"], columns:[\"rating\"]})\n```", "```js\ndf_loc= df4.loc({rows:[\"Rihanna:Bellion\"], columns:[\"rating:date\"]})\n```", "```js\nt_df = df.iloc({rows:['2:4']})\ntable(t_df)\n```", "```js\ncolumn_df = df.iloc({columns:['1:']})\ntable(column_df)\n```", "```js\ndata = {\"A\": [-20, 30, 47.3],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [ -4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [ 2, 3, 30]}\ndf = new dfd. DataFrame (data)\ntable(df)\n```", "```js\ndf.sort_values({by: \"C\", inplace: true, ascending: false})\ntable(df)\n```", "```js\nsort_df = df.sort_values({by: \"C\", inplace:false, ascending: false})\ntable(sort_df)\n```", "```js\nindex_df = sort_df.sort_index({ascending:true})\ntable(index_df)\n```", "```js\ndata1 = [20, 30, 1, 2, 4, 57, 89, 0, 4]\nseries = new dfd.Series(data1)\nsort_series = series.sort_values()\ntable(sort_series)\n```", "```js\nsort_df = df.sort_values({by: \"artist\", inplace:false, ascending: false})\ntable(sort_df)\n```", "```js\ndata = {\"A\": [30, 1, 2, 3],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [34, 4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [20, 20, 30, 40]}\n\ndf = new dfd. DataFrame (data)\n```", "```js\nquery_df = df.query({ column: \"B\", is: \">\", to: 5 })\ntable(query_df)\n```", "```js\nquery_df = df.query({ column: \"C\", is: \"==\", to: 20})\ntable(query_df)\n```", "```js\ndata = {\"Col1\": [10, 45, 56, 10], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Col2\": [23, 20, 10, 24]}\nar_df = new dfd. DataFrame (data)\n//add a scalar variable\nadd_df = ar_df.add(20)\ntable(add_df)\n```", "```js\nadd_series = new dfd.Series([20,30])\nadd_df = ar_df.add(add_series, axis=1)\ntable(add_df)\n```", "```js\ndata = {\"Col1\": [1, 4, 5, 0], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Col2\": [2, 0, 1, 4]}\n\ndata2 = {\"new_col1\": [1, 5, 20, 10],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"new_Col2\": [20, 2, 1, 2]}\ndf = new dfd.DataFrame(data)\ndf2 = new dfd.DataFrame(data2)\n\ndf_new = df.add(df2)\n```", "```js\ndata = [[11, 20, 3], [1, 15, 6], [2, 30, 40], [2, 89, 78]]\ncols = [\"A\", \"B\", \"C\"]\ndf = new dfd. DataFrame (data, { columns: cols })\nnew_df = df.cumsum({ axis: 0 })\n```", "```js\nnew_df = df.cumsum({ axis: 1 })\n```", "```js\nseries = new dfd.Series([2,3,4,5,6,7,8,9])\nc_series = series.cumsum()\ntable(c_series)\n```", "```js\ndata = {\"Col1\": [10, 45, 56, 10],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Col2\": [23, 20, 10, 24]}\ndf = new dfd. DataFrame (data)\ndf_rep = df.lt(20)\ntable(df_rep)\n```", "```js\nseries = new dfd.Series([45,10])\ndf_rep = df.lt(series, axis=1)\ntable(df_rep)\n```", "```js\ndata = {\"Col1\": [10, 45, 56, 10],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Col2\": [23, 20, 10, 24]}\ndata2 = {\"new_col1\": [10, 45, 200, 10],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"new_Col2\": [230, 200, 110, 24]}\n\ndf = new dfd.DataFrame (data)\ndf2 = new dfd.DataFrame (data2)\n\ndf_rep = df.lt(df2)\ntable(df_rep)\n```", "```js\nconst dfd = require(\"Danfo.Js-node\")\ndfd.read_csv('titanic.csv').then(df => {\n\u00a0\u00a0df.head().print()\n})\n```", "```js\ncsvUrl =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv\";\ndfd.read_csv(csvUrl).then((df) => {\n\u00a0\u00a0df.print()\n});\n```", "```js\nconst dfd = require(\"Danfo.Js-node\")\n\ndfd.read_excel('SampleData.xlsx', {header_index: 7}).then(df => {\n\u00a0\u00a0df.head().print()\n})\n```", "```js\nconst dfd = require(\"Danfo.Js-node\")\ndfd.read_json('book.json').then(df => {\n\u00a0\u00a0df.head().print()\n})\n```", "```js\nconst dfd = require(\"Danfo.Js-node\")\n// for reading csv\ndfd.read('titanic.csv').then(df => {\n\u00a0\u00a0df.head().print()\n})\n```", "```js\ndf.to_csv(\"/home/link/to/path.csv\").then((csv) => {\n\u00a0\u00a0\u00a0\u00a0console.log(csv);\n}).catch((err) => {\n\u00a0\u00a0\u00a0\u00a0console.log(err);\n})\n```"]