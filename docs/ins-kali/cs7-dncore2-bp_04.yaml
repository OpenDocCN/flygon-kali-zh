- en: Task Bug Logging ASP .NET Core MVC App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务错误日志ASP .NET Core MVC应用程序
- en: In this chapter, we will take a look at using MongoDB with ASP.NET Core MVC
    by creating a task/bug logging application. A personal task manager is useful,
    and logging bugs is especially handy when you can't attend to them immediately.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将通过创建一个任务/错误日志应用程序来看看如何在ASP.NET Core MVC中使用MongoDB。个人任务管理器很有用，当你无法立即处理错误时，记录错误尤其方便。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up MongoDB on your local machine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上设置MongoDB
- en: A first look at using MongoDB Compass
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首次使用MongoDB Compass
- en: Creating an ASP.NET Core MVC application and integrating MongoDB
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个ASP.NET Core MVC应用程序并集成MongoDB
- en: You might be wondering why we would choose MongoDB. The question you need to
    ask is, how much effort do you want to go through to create a simple application?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么我们会选择MongoDB。你需要问的问题是，你想要花多少精力来创建一个简单的应用程序？
- en: What are the benefits of using MongoDB?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB的好处是什么？
- en: To answer this question, let's have a look at the benefits of using MongoDB.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这个问题，让我们来看看使用MongoDB的好处。
- en: Faster development with MongoDB
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB可以加快开发速度
- en: 'This might become clearer during your development process, but let''s just
    say that one part of the development process I dislike is having to create data
    tables for the various forms and fields. Have you ever had to create a table to
    store address field information? That''s right, you need to add something similar
    to the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能在你的开发过程中变得更清晰，但让我们说一下，我不喜欢开发过程中的一部分是不得不为各种表单和字段创建数据表。你有没有不得不创建一个表来存储地址字段信息？没错，你需要添加类似以下的内容：
- en: Address1
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址1
- en: Address2
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址2
- en: Address3
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址3
- en: Address4
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址4
- en: City
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 城市
- en: State
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态
- en: Zip
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邮编
- en: Country
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家
- en: This table can obviously get very large. It depends on what exactly you need
    to store. With MongoDB, you only need to pass it the address array. MongoDB takes
    care of the rest. No more mucking around with creating table statements.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表显然可以变得非常庞大。这取决于你需要存储什么。使用MongoDB，你只需要传递地址数组。MongoDB会处理剩下的事情。不再需要费力地创建表语句。
- en: Career–enhancing skillset
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升职业技能
- en: More and more career sites are listing MongoDB as a sought-after skillset. It
    is more frequently used in companies, and new developers are expected to have
    some experience with MongoDB. A quick search on LinkedIn's jobs portal for the
    MongoDB keyword returned 7,800 jobs in the US alone. Having MongoDB experience
    is a great career booster, especially if you are used to using SQL Server.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的职业网站将MongoDB列为一个受欢迎的技能。它在公司中被更频繁地使用，新开发人员被期望具有一些MongoDB的经验。在LinkedIn的职位门户上快速搜索MongoDB关键词，仅在美国就返回了7800个工作。拥有MongoDB经验是一个很好的职业助推器，特别是如果你习惯使用SQL
    Server。
- en: MongoDB is ranked well in the industry
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB在行业中排名很高
- en: To further prove my point, MongoDB is ranked fifth overall on the website DB-Engines
    ([https://db-engines.com/en/ranking](https://db-engines.com/en/ranking)) and ranked
    first under the category of Document Stores ([https://db-engines.com/en/ranking/document+store](https://db-engines.com/en/ranking/document+store)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步证明我的观点，MongoDB在DB-Engines网站上排名第五（[https://db-engines.com/en/ranking](https://db-engines.com/en/ranking)），在文档存储类别下排名第一（[https://db-engines.com/en/ranking/document+store](https://db-engines.com/en/ranking/document+store)）。
- en: These stats were correct at the time of writing. In fact, MongoDB is showing
    an increase in rankings consistently year on year.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些统计数据在撰写时是正确的。事实上，MongoDB的排名一直在稳步增长。
- en: It is clear that MongoDB is here to stay, and more importantly, that the community
    loves MongoDB. This is very important, because it creates a healthy community
    of developers that share knowledge and articles on MongoDB. Broad adoption of
    MongoDB furthers the   development of the technology.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，MongoDB会一直存在，更重要的是，社区喜爱MongoDB。这非常重要，因为它创造了一个健康的开发者社区，分享关于MongoDB的知识和文章。MongoDB的广泛采用推动了技术的发展。
- en: Setting up MongoDB on your local machine
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地机器上设置MongoDB
- en: Head on over to [https://www.mongodb.com/download-center#community](https://www.mongodb.com/download-center#community)
    and download the latest version of MongoDB Community Server for Windows. The installer
    then gives you the option to install MongoDB Compass.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://www.mongodb.com/download-center#community](https://www.mongodb.com/download-center#community)并下载Windows的最新版本的MongoDB
    Community Server。安装程序然后给你安装MongoDB Compass的选项。
- en: 'You can also download Compass as a separate installer from the preceding link
    or by navigating directly to:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从上述链接或直接导航到[https://www.mongodb.com/download-center?jmp=nav#compass](https://www.mongodb.com/download-center?jmp=nav#compass)下载Compass作为单独的安装程序。
- en: '[https://www.mongodb.com/download-center?jmp=nav#compass](https://www.mongodb.com/download-center?jmp=nav#compass).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.mongodb.com/download-center?jmp=nav#compass](https://www.mongodb.com/download-center?jmp=nav#compass)。'
- en: '![](img/f2058a67-525c-4618-8692-0858423adc51.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2058a67-525c-4618-8692-0858423adc51.png)'
- en: 'Looking at the web page for MongoDB Compass, at [https://docs.mongodb.com/compass/master/](https://docs.mongodb.com/compass/master/),
    the description of MongoDB Compass is quite clear:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 查看MongoDB Compass的网页，[https://docs.mongodb.com/compass/master/](https://docs.mongodb.com/compass/master/)，MongoDB
    Compass的描述非常清晰：
- en: '"MongoDB Compass is designed to allow users to easily analyze and understand
    the contents of their data collections within MongoDB and perform queries, without
    requiring knowledge of MongoDB query syntax.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '"MongoDB Compass旨在允许用户轻松分析和理解MongoDB中数据集合的内容，并执行查询，而无需了解MongoDB查询语法。'
- en: MongoDB Compass provides users with a graphical view of their MongoDB schema
    by randomly sampling a subset of documents from the collection. Sampling documents
    minimizes performance impact on the database and can produce results quickly."
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB Compass通过随机抽样数据集合中的一部分文档，为用户提供了MongoDB模式的图形视图。抽样文档可以最小化对数据库的性能影响，并可以快速产生结果。"
- en: If this is your first time working with MongoDB, I suggest that you install
    MongoDB Compass and play around with it a bit.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你第一次使用MongoDB，我建议你安装MongoDB Compass并试着玩一下。
- en: After installing MongoDB, you will find it under `C:\ProgramFiles\MongoDB`.
    What I now like to do is keep the full installation path on an environmental variable.
    This makes it easier to access from PowerShell or the Command Prompt. The full
    installation path to the `bin` folder is `C:\Program\FilesMongoDBServer3.6bin`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装MongoDB后，您将在`C:\ProgramFiles\MongoDB`下找到它。我现在想做的是将完整的安装路径保存在一个环境变量中。这样可以更容易地从PowerShell或命令提示符中访问。`bin`文件夹的完整安装路径是`C:\Program\FilesMongoDBServer3.6bin`。
- en: 'To set it up, we perform the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置它，我们执行以下步骤：
- en: Open up the System Properties screen and click on the Environment Variables
    button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开系统属性屏幕，然后单击“环境变量”按钮。
- en: Under the System variables group, select the Path variable and click on the
    Edit button. Add the full installation path to the Path system variables.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“系统变量”组下，选择“Path”变量，然后单击“编辑”按钮。将完整的安装路径添加到“Path”系统变量中。
- en: 'We now need to go and create a folder on the hard drive to store the MongoDB
    database. You can create this folder anywhere, but wherever you do create it,
    you need to use it in the next step. I created my MongoDB database folder at the
    following path: `D:\MongoTask`.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要去创建一个文件夹来存储MongoDB数据库。您可以在任何地方创建此文件夹，但无论您在哪里创建它，都需要在下一步中使用它。我在以下路径创建了我的MongoDB数据库文件夹：`D:\MongoTask`。
- en: 'In order to work with MongoDB, you must start the MongoDB server first. It
    doesn''t matter if this is on a remote machine or on your local machine. Open
    PowerShell and run the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用MongoDB，您必须首先启动MongoDB服务器。无论这是在远程机器上还是在本地机器上都无所谓。打开PowerShell并运行以下命令：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On running the preceding command, press Enter. You have now started the MongoDB
    server. Next, start MongoDB Compass.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行上述命令后，按Enter键。您现在已经启动了MongoDB服务器。接下来，启动MongoDB Compass。
- en: 'You will see that you don''t have any databases yet. Click on the CREATE DATABASE
    button, as shown in the following screenshot:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会发现您还没有任何数据库。单击“创建数据库”按钮，如下图所示：
- en: '![](img/c6e9c5b2-40fc-492a-bb6b-c2fbdb7dfe49.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6e9c5b2-40fc-492a-bb6b-c2fbdb7dfe49.png)'
- en: The Create Database window opens up where you can specify a database name under Database
    Name and a collection name under Collection Name.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“创建数据库”窗口，在“数据库名称”下指定数据库名称，在“集合名称”下指定集合名称。
- en: 'To finish, click on the CEATE DATABASE button at the bottom of the screen,
    as shown in the following screenshot:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击屏幕底部的“创建数据库”按钮，如下图所示：
- en: '![](img/fa9a7a71-3c48-455b-a3c1-d82bf147e79c.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa9a7a71-3c48-455b-a3c1-d82bf147e79c.png)'
- en: 'You will see that a new database called `TaskLogger` has been created and if
    you expand the `TaskLogger` database node, you will see the TaskItem document
    listed, as shown in the following screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会看到一个名为`TaskLogger`的新数据库已经创建，如果展开`TaskLogger`数据库节点，您将看到列出的TaskItem文档，如下图所示：
- en: '![](img/c1151c45-1839-4ab0-8384-061d3e43158b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1151c45-1839-4ab0-8384-061d3e43158b.png)'
- en: We will not be focusing too much on MongoDB Compass in this chapter. For now,
    I wanted to show you that there is a way to visually manage MongoDB databases
    by using MongoDB Compass. You can go ahead and delete the TaskItem document that
    you just created. You will see, how the application created a document for you
    automatically when you insert data into your MongoDB database for the first time later
    on.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会过多关注MongoDB Compass。目前，我想向您展示使用MongoDB Compass可以以可视化的方式管理MongoDB数据库。您可以继续并删除刚刚创建的TaskItem文档。稍后，您将看到，当您第一次向MongoDB数据库中插入数据时，应用程序会自动为您创建一个文档。
- en: Connecting your ASP.NET Core MVC application to MongoDB
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的ASP.NET Core MVC应用程序连接到MongoDB
- en: 'When talking about using MongoDB in your application, one wonders how easy
    it will be to add this functionality to a new ASP.NET Core MVC application. The
    process is really easy. To start off, create a new ASP.NET Core Web application
    and name it `BugTracker`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到在应用程序中使用MongoDB时，人们想知道将这个功能添加到新的ASP.NET Core MVC应用程序有多容易。这个过程真的很简单。首先，创建一个新的ASP.NET
    Core Web应用程序，并将其命名为`BugTracker`：
- en: On the New ASP.NET Core Web Application - BugTracker screen, make sure that
    you have selected ASP.NET Core 2.0 from the drop-down list.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新ASP.NET Core Web应用程序-BugTracker”屏幕上，确保您已从下拉列表中选择了ASP.NET Core 2.0。
- en: Select Web Application (Model-View-Controller).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Web应用程序（模型-视图-控制器）。
- en: Uncheck the Enable Docker Support option. Finally, click on the OK button.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中启用Docker支持选项。最后，单击“确定”按钮。
- en: 'Your new ASP.NET Core MVC application will be created with the basics, as shown
    in the following screenshot:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的新ASP.NET Core MVC应用程序将以基本形式创建，如下图所示：
- en: '![](img/a5f8fef9-5bac-4bba-bfff-0e7836698341.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5f8fef9-5bac-4bba-bfff-0e7836698341.png)'
- en: Enabling Docker support for your application can easily be done at creation
    time. You can also enable Docker support for existing applications.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建时可以轻松地为应用程序启用Docker支持。您还可以为现有应用程序启用Docker支持。
- en: I will take a look at Docker in a later chapter and how to make your application
    work with Docker. For now, our application does not need Docker support. Leave
    it unchecked and create your application as you would normally.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在后面的章节中介绍Docker以及如何使您的应用程序与Docker配合使用。目前，我们的应用程序不需要Docker支持。将其取消选中，并按照通常的方式创建您的应用程序。
- en: Adding the NuGet package
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加NuGet包
- en: 'Seeing as this chapter is all about MongoDB, we need to add this to our project.
    The best way to do this, is by adding the NuGet package. We can do this as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章主要讨论MongoDB，我们需要将其添加到我们的项目中。最佳方法是通过添加NuGet包来实现。我们可以按照以下步骤进行：
- en: 'Right-click on your project and select Manage NuGet Packages... from the context
    menu, as shown in the following screenshot:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击您的项目，然后从上下文菜单中选择“管理NuGet包...”，如下图所示：
- en: '![](img/0afe2b1b-7b07-46fc-85b6-dfad02aab8aa.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0afe2b1b-7b07-46fc-85b6-dfad02aab8aa.png)'
- en: On the NuGet screen, you will select the Browse tab and enter `Mongodb.Driver`
    as the search term.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在NuGet屏幕上，您将选择“浏览”选项卡，并输入“Mongodb.Driver”作为搜索词。
- en: Select the MongoDB.Driver by MongoDB option.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择MongoDB.Driver by MongoDB选项。
- en: 'Click on the Install button to add the latest stable package to your project.
    This is depicted in the following screenshot:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“安装”按钮将最新的稳定包添加到您的项目中。如下面的屏幕截图所示：
- en: '![](img/42c747f8-e3a4-47fe-83b2-cf6706877531.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42c747f8-e3a4-47fe-83b2-cf6706877531.png)'
- en: You can view the progress in the Output window of Visual Studio.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在Visual Studio的输出窗口中查看进度。
- en: 'After MongoDB has been added to your project, you will see that MongoDB.Driver
    (2.5.0) is added under the NuGet dependencies of your project, as shown in the
    following screenshot:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将MongoDB添加到项目后，您将看到MongoDB.Driver（2.5.0）添加到项目的NuGet依赖项下，如下面的屏幕截图所示：
- en: '![](img/373bfb37-72fc-4375-9935-fea10482b517.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/373bfb37-72fc-4375-9935-fea10482b517.png)'
- en: 'Expand the `Controllers` folder. You will see that by default, Visual Studio
    has created a `HomeController.cs` file. The code in that file should be something
    like the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`Controllers`文件夹。您会看到，默认情况下，Visual Studio已经创建了一个`HomeController.cs`文件。该文件中的代码应该类似于以下内容：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We want to be able to connect to MongoDB from here, so let's create some code
    to connect to the Mongo client.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够从这里连接到MongoDB，因此让我们创建一些代码来连接到Mongo客户端。
- en: 'You will need to add a `using` statement to your class as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要向您的类添加一个`using`语句，如下所示：
- en: '`using MongoDB.Driver;`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`using MongoDB.Driver;`'
- en: 'The steps to connect to MongoDB are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到MongoDB的步骤如下：
- en: 'Create a constructor by typing the snippet short code `ctor` and tabbing twice,
    or by typing in the code explicitly. Your constructor needs to create a new instance
    of `MongoClient`. When you have done this, your code should look as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过键入片段短代码`ctor`并按两次制表键，或者通过明确键入代码来创建构造函数。您的构造函数需要创建`MongoClient`的新实例。完成后，您的代码应如下所示：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For `MongoClient` to work, we need to give it a connection string to the MongoDB
    instance we created. Open the `appsettings.json` file in the Solution ''Bug Tracker''
    pane, as shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使`MongoClient`工作，我们需要为其提供一个连接字符串，以连接到我们创建的MongoDB实例。在“Bug Tracker”窗格的解决方案中打开`appsettings.json`文件，如下面的屏幕截图所示：
- en: '![](img/04e1852e-af64-4842-b6a5-cc23b490dca1.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04e1852e-af64-4842-b6a5-cc23b490dca1.png)'
- en: 'When you open your `appsettings.json` file, it should look as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的`appsettings.json`文件，它应该如下所示：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Modify the file and add the MongoDB connection details, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件并添加MongoDB连接详细信息，如下所示：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We now want to create a `Settings.cs` file in the `Models` folder, as shown
    in the following screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们要在`Models`文件夹中创建一个`Settings.cs`文件，如下面的屏幕截图所示：
- en: '![](img/89ad457a-5767-4615-83c8-723e5e77eabc.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89ad457a-5767-4615-83c8-723e5e77eabc.png)'
- en: 'Open the `Settings.cs` file and add the following code to it:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Settings.cs`文件并将以下代码添加到其中：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We now need to open the `Startup.cs` file and modify the `ConfigureServices`
    method as follows to register the service:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要打开`Startup.cs`文件并修改`ConfigureServices`方法，如下所示以注册服务：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Go back to the `HomeController.cs` file and modify the constructor to pass
    the connection string to `MongoClient`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`HomeController.cs`文件并修改构造函数以将连接字符串传递给`MongoClient`：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this point, I want to test my code to see that it is actually accessing
    my MongoDB instance. To do this, modify your code to return the cluster description:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我想测试我的代码，以确保它实际访问我的MongoDB实例。为此，修改您的代码以返回集群描述：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run your ASP.NET Core MVC application and see the information output in the
    browser, as shown in the following screenshot:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的ASP.NET Core MVC应用程序，并在浏览器中查看输出的信息，如下面的屏幕截图所示：
- en: '![](img/8e9435f8-0664-4f2f-afbc-49856662cf2d.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e9435f8-0664-4f2f-afbc-49856662cf2d.png)'
- en: This is all well and good, but let's look at how to separate the logic of adding
    the database connection into a class of its own.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很好，但让我们看看如何将添加数据库连接的逻辑分离到自己的类中。
- en: Creating the MongoDbRepository class
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MongoDbRepository类
- en: 'To create a `MongoDbRepository` class, we need to perform the following steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`MongoDbRepository`类，我们需要执行以下步骤：
- en: 'Create a new folder called `Data` in your solution. Inside that folder, create
    a new class called `MongoDBRepository`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的解决方案中创建一个名为`Data`的新文件夹。在该文件夹中，创建一个名为`MongoDBRepository`的新类：
- en: '![](img/9b98d23d-ef88-47ce-8300-b4a97979aaf0.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b98d23d-ef88-47ce-8300-b4a97979aaf0.png)'
- en: 'Inside this class, add the following code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类中，添加以下代码：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the code looks familiar, it's because it's the same code that we wrote in
    the `HomeController.cs` class, only this time, it has a bit of error handling
    and it's in its own class. This means that we also need to modify the `HomeController`
    class.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码看起来很熟悉，那是因为它与我们在`HomeController.cs`类中编写的相同代码，只是这次有一些错误处理，并且它在自己的类中。这意味着我们还需要修改`HomeController`类。
- en: 'Change the code in the constructor of the `HomeController` as well as in the
    `Index` action. Your code needs to look as follows:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`HomeController`的构造函数中的代码以及`Index`操作。您的代码需要如下所示：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Running your application again, you will see the same information displayed
    earlier in the browser, so output to the browser window again.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行您的应用程序，您将在浏览器中看到先前显示的相同信息，因此再次输出到浏览器窗口。
- en: The only difference is that the code is now separated properly and makes it
    easy to reuse. Therefore, if any changes happen further on down the line, it only
    gets updated here.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是现在代码已经适当分离并且易于重用。因此，如果以后发生任何更改，只需在此处更新即可。
- en: Reading and writing data to MongoDB
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和写入数据到MongoDB
- en: 'In this section, we will have a look at how to read a list of work items from
    the MongoDB database and also how to insert a new work item into the database.
    I call them work items, because a work item can be a task or a bug. This can be
    done by performing the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下如何从MongoDB数据库中读取工作项列表，以及如何将新的工作项插入到数据库中。我称它们为工作项，因为工作项可以是任务或错误。可以通过执行以下步骤来完成：
- en: 'In the Models folder, create a new class called `WorkItem`, as shown in the
    following screenshot:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Models文件夹中，创建一个名为`WorkItem`的新类，如下面的屏幕截图所示：
- en: '![](img/e40dd635-6092-48ce-bbe6-1ebdd4aecfb5.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e40dd635-6092-48ce-bbe6-1ebdd4aecfb5.png)'
- en: Add the following code to the `WorkItem` class. You will notice that `Id` is
    of type `ObjectId`. This represents the unique identifier in the MondoDB document
    that gets created.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`WorkItem`类中。您会注意到`Id`的类型是`ObjectId`。这代表了在MondoDB文档中创建的唯一标识符。
- en: You need to ensure that you add the following `using` statement to your `WorkItem`
    class `using MongoDB.Bson;`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保将以下`using`语句添加到您的`WorkItem`类`using MongoDB.Bson;`。
- en: 'Take a look the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下代码：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, open up the `MongoDBRepository` class and add the following property
    to the class:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`MongoDBRepository`类并将以下属性添加到类中：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since we are using C# 6 at least, we can further simplify the `WorkItem` property
    by changing it to an **Expression Bodied Property**. To do this, change the code
    to look as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们至少使用C# 6，我们可以通过将`WorkItem`属性更改为**表达式主体属性**来进一步简化代码。为此，将代码更改为如下所示：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If this looks a bit confusing, have a look at the following screenshot:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这看起来有点混乱，请查看以下屏幕截图：
- en: '![](img/e5ea5b8d-a7ab-4ba7-b8d3-4b659c5d3e88.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5ea5b8d-a7ab-4ba7-b8d3-4b659c5d3e88.png)'
- en: The curly braces, `get`, and `return` statements are replaced by the `=>` lambda
    operator. The object being returned (in this case, the collection of `WorkItem`
    objects) goes after the lambda operator. This results in the **Expression Bodied
    Property**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号、`get`和`return`语句被`=>`lambda运算符替换。被返回的对象（在这种情况下是`WorkItem`对象的集合）放在lambda运算符之后。这导致了**表达式主体属性**。
- en: Creating the interfaces and Work ItemService
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建接口和Work ItemService
- en: 'Next, we need to create an interface. To do this, we need to perform the following
    steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个接口。为此，我们需要执行以下步骤：
- en: 'Create a new folder in your solution called Interfaces and add an interface
    called `IWorkItemService` to the Interfaces folder, as shown in the following
    screenshot:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案中创建一个名为Interfaces的新文件夹，并在Interfaces文件夹中添加一个名为`IWorkItemService`的接口，如下面的屏幕截图所示：
- en: '![](img/cf94d147-351b-4b07-b4e5-7f07278d10be.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf94d147-351b-4b07-b4e5-7f07278d10be.png)'
- en: 'Add the following code to the `IWorkItemService` interface:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`IWorkItemService`接口中：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In your `Data` folder, add another class called `WorkItemService` and make it
    implement the `IWorkItemService` interface.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`Data`文件夹中，添加另一个名为`WorkItemService`的类，并使其实现`IWorkItemService`接口。
- en: Be sure to add the `using` statement to reference your interface. In my example,
    this is the `using BugTracker.Interfaces;` statement.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 确保添加`using`语句以引用您的接口。在我的示例中，这是`using BugTracker.Interfaces;`语句。
- en: 'You will notice that Visual Studio prompts you to implement the interface.
    To do this, click on the lightbulb tip and click on Implement interface from the
    context menu, as shown in the following screenshot:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到Visual Studio提示您实现接口。要做到这一点，单击灯泡提示，然后单击上下文菜单中的Implement interface，如下面的屏幕截图所示：
- en: '![](img/213bdf35-7625-4317-9da5-d869f222271e.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/213bdf35-7625-4317-9da5-d869f222271e.png)'
- en: 'After you have done this, your `WorkItemService` class will look as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，您的`WorkItemService`类将如下所示：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, add a constructor and complete the `GetAllWorkItems` method so that your
    class looks as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个构造函数并完成`GetAllWorkItems`方法，使您的类如下所示：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You now need to open up your `Startup.cs` file and edit the `ConfigureServices`
    method to add the following line of code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要打开`Startup.cs`文件并编辑`ConfigureServices`方法以添加以下代码行：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Your `ConfigureServices` method will now look as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的`ConfigureServices`方法现在将如下所示：
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'What you have done is registered the `IWorkItemService` interface into the
    Dependency Injection framework. For more on dependency injection, see the following
    article at:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您所做的是将`IWorkItemService`接口注册到依赖注入框架中。有关依赖注入的更多信息，请参阅以下文章：
- en: '[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)。'
- en: Creating the view
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'When we start our application, we want to see a list of work items. Therefore,
    we need to create a view for `HomeController` to display a list of work items
    by performing the following steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动应用程序时，我们希望看到一个工作项列表。因此，我们需要为`HomeController`创建一个视图，以执行以下步骤显示工作项列表：
- en: In the Views folder, expand the Home subfolder and delete the `Index.cshtml`
    file if there is one.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Views文件夹中，展开Home子文件夹，如果有`Index.cshtml`文件，则删除它。
- en: Then, right-click the Home folder and navigate to Add | View from the context
    menu. The Add MVC View window will be displayed.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，右键单击Home文件夹，导航到上下文菜单中的Add | View。将显示Add MVC View窗口。
- en: Name the view as `Index` and select List as the Template. From the dropdown
    for Model class, select WorkItem (BugTracker.Models).
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视图命名为`Index`，并选择List作为模板。从Model类的下拉列表中，选择WorkItem（BugTracker.Models）。
- en: 'Leave the rest of the settings as they are and click on the Add button:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其余设置保持不变，然后单击添加按钮：
- en: '![](img/7266ff9d-5940-404f-a7c1-d6e211246be2.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7266ff9d-5940-404f-a7c1-d6e211246be2.png)'
- en: 'After the view has been added, your Solution Explorer will look as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 添加视图后，您的Solution Explorer将如下所示：
- en: '![](img/7ca01f37-10d1-4b96-90d3-662e151187ee.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ca01f37-10d1-4b96-90d3-662e151187ee.png)'
- en: 'Taking a closer look at the view, you will notice that it uses `IEnumerable<BugTracker.Models.WorkItem>`
    as the model:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细观察视图，您会注意到它使用`IEnumerable<BugTracker.Models.WorkItem>`作为模型：
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This allows us to iterate the collection of the `WorkItem` objects returned
    and output them in the list. Also note that `ViewData["Title"]` has been updated
    from `Index` to `Work Item Listings`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们迭代返回的`WorkItem`对象集合并在列表中输出它们。还请注意，`ViewData["Title"]`已从`Index`更新为`Work
    Item Listings`。
- en: Modifying the HomeController
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改HomeController
- en: 'The last thing we need to do before we can run our application is to modify
    the `HomeController` class to work with the `IWorkItemService`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行应用程序之前，我们需要做的最后一件事是修改`HomeController`类以与`IWorkItemService`一起使用：
- en: 'Modify the constructor and the `Index` action as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改构造函数和`Index`操作如下：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We are getting all the work items in the MongoDB database and passing them to
    the view for the model to work with.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在从MongoDB数据库中获取所有工作项，并将它们传递给视图以供模型使用。
- en: Make sure that you have started the MongoDB server by using the `mongod -dbpath
    <path>` command format, as explained earlier in the chapter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经通过`mongod -dbpath <path>`命令格式启动了MongoDB服务器，就像本章前面解释的那样。
- en: 'When you are done, run your application, as shown in the following screenshot:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，运行您的应用程序，如下面的屏幕截图所示：
- en: '![](img/3d21b20a-0bdc-4111-8591-b0b5738ef98d.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d21b20a-0bdc-4111-8591-b0b5738ef98d.png)'
- en: At this point, there are no work items in the database, so we see this empty
    list in the browser. Next, we will add the code to insert work items into our
    MongoDB database.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，数据库中没有工作项，所以我们在浏览器中看到了这个空列表。接下来，我们将添加代码将工作项插入到我们的MongoDB数据库中。
- en: Adding work items
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加工作项
- en: 'Let''s add work items by performing the following steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤添加工作项：
- en: 'To add work items, let''s start off by adding a class to our Models folder
    called `AddWorkItem`, as shown in the following screenshot:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加工作项，让我们首先在我们的Models文件夹中添加一个名为`AddWorkItem`的类，如下面的屏幕截图所示：
- en: '![](img/8ffb9df0-c730-4d32-9669-db8f462acfa1.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ffb9df0-c730-4d32-9669-db8f462acfa1.png)'
- en: 'Modify the code in the class to essentially look like the `WorkItem` class:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改类中的代码，使其基本上看起来像`WorkItem`类：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next, create a new folder under the Views folder called `AddWorkItem`. Right-click
    the `AddWorkItem` folder and select Add and then click on View in the context
    menu.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在Views文件夹下创建一个名为`AddWorkItem`的新文件夹。右键单击`AddWorkItem`文件夹，然后选择添加，然后在上下文菜单中单击“View”。
- en: The Add MVC View window will be displayed. Call the view `AddItem` and select
    Create for Template.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示“添加MVC视图”窗口。将视图命名为`AddItem`，并选择“模板”中的“创建”。
- en: From the dropdown for Model class, select AddWorkItem (BugTracker.Models).
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Model类的下拉菜单中，选择AddWorkItem（BugTracker.Models）。
- en: 'Leave the rest of the settings as is and click on the Add button, as shown
    in the following screenshot:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其余设置保持不变，然后点击“添加”按钮，如下面的屏幕截图所示：
- en: '![](img/af962b1f-a9e3-47ae-9aba-20d27290b348.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af962b1f-a9e3-47ae-9aba-20d27290b348.png)'
- en: 'Open the `AddItem.cshtml` file and have a look at the form action. Ensure that
    it is set to `CreateWorkItem`. The following code snippet shows what the code
    should look like:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AddItem.cshtml`文件，查看表单操作。确保它设置为`CreateWorkItem`。以下代码片段显示了代码应该是什么样子的：
- en: '[PRE22]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Your `Views` folder should now look as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`Views`文件夹现在应如下所示：
- en: '![](img/1281dbd3-9bd8-4ece-a456-46445fd8acd7.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1281dbd3-9bd8-4ece-a456-46445fd8acd7.png)'
- en: 'Now, we need to make a small change to our `IWorkItemService` interface. Modify
    the code in the interface to look as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要对我们的`IWorkItemService`接口进行一些小修改。修改接口中的代码如下所示：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We have just specified that the classes that implement the `IWorkItemService`
    interface must have a method called `InsertWorkItem` that takes a parameter of
    the `WorkItem` type. This means that we need to swing by  `WorkItemService` and
    add a method called `InsertWorkItem`. Our code in the `WorkItemService` imterface
    will look as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚指定实现`IWorkItemService`接口的类必须具有一个名为`InsertWorkItem`的方法，该方法接受`WorkItem`类型的参数。这意味着我们需要转到`WorkItemService`并添加一个名为`InsertWorkItem`的方法。我们的`WorkItemService`接口中的代码将如下所示：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Change the `InsertWorkItem` method to add a single object of the `WorkItem`
    type to our MongoDB database. Change the code to look as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`InsertWorkItem`方法以将`WorkItem`类型的单个对象添加到我们的MongoDB数据库中。更改代码如下所示：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we need to modify our `WorkItem` class slightly. Add two constructors
    to the class, one that takes an `AddWorkItem` object as parameter and another
    that takes no parameters at all:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要稍微修改我们的`WorkItem`类。向类中添加两个构造函数，一个带有`AddWorkItem`对象作为参数，另一个不带任何参数：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The reason we have added a second constructor that takes no parameters is so
    that MongoDB can deserialize `WorkItem`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加第二个不带参数的构造函数的原因是为了让MongoDB反序列化`WorkItem`。
- en: If you want to read up more regarding the reason we add a parameterless constructor
    for deserialization, take a look at the following URL: [https://stackoverflow.com/questions/267724/why-xml-serializable-class-need-a-parameterless-constructor](https://stackoverflow.com/questions/267724/why-xml-serializable-class-need-a-parameterless-constructor).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进一步了解为什么为反序列化添加一个无参数构造函数，请查看以下网址：[https://stackoverflow.com/questions/267724/why-xml-serializable-class-need-a-parameterless-constructor](https://stackoverflow.com/questions/267724/why-xml-serializable-class-need-a-parameterless-constructor)。
- en: 'We now need to add another controller to our project. Right-click the Controllers
    folder, and add a new controller called `AddWorkItemController`. Feel free to
    add this as an empty controller. We will add the code in next ourselves:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要向我们的项目添加另一个控制器。右键单击Controllers文件夹，然后添加一个名为`AddWorkItemController`的新控制器。随意将其添加为空控制器。我们将在下面自己添加代码：
- en: '![](img/d48a7da2-27c7-42bd-ac09-012a3f22f18a.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d48a7da2-27c7-42bd-ac09-012a3f22f18a.png)'
- en: 'In the AddWorkItemController controller, add the following code:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AddWorkItemController控制器中，添加以下代码：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You will notice that the `HttpPost` action is called `CreateWorkItem`. This
    is the reason that the `AddItem.cshtml` file had a form action called `CreateWorkItem`.
    It tells the view what action to call on the controller when the Create button
    is clicked.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到`HttpPost`操作被称为`CreateWorkItem`。这就是`AddItem.cshtml`文件中的表单操作称为`CreateWorkItem`的原因。它告诉视图在单击创建按钮时要调用控制器上的哪个操作。
- en: Redirecting to the list of work items
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向到工作项列表
- en: 'Another interesting thing to note is that after we call the `InsertWorkItem`
    method on the `WorkItemService`, we redirect the view to the `Index` action on
    the `HomeController`. As we already know, this we know will take us to the list
    of work items:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的事情要注意的是，在我们调用`WorkItemService`上的`InsertWorkItem`方法之后，我们将视图重定向到`HomeController`上的`Index`操作。正如我们已经知道的，这将带我们到工作项列表：
- en: 'Speaking of `HomeController`, modify the code there to add another action called
    `AddWorkItem` that calls the `AddItem` action on the `AddWorkItemController` class:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 说到`HomeController`，修改那里的代码以添加另一个名为`AddWorkItem`的操作，该操作调用`AddWorkItemController`类上的`AddItem`操作：
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, let's modify the `Index.cshtml` view slightly. To make the list on the
    Index view more intuitive, modify the `Index.cshtml` file.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们稍微修改“Index.cshtml”视图。为了使“Index”视图上的列表更直观，修改“Index.cshtml”文件。
- en: Add an `if` statement to allow for the addition of new work items from the list
    if the list is empty.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个“if”语句，以允许在列表为空时添加新的工作项。
- en: 'Add an `ActionLink` to call the `AddWorkItem` action on the `HomeController`
    when clicked:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`ActionLink`，在单击时调用`HomeController`上的`AddWorkItem`操作：
- en: '[PRE29]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For now, wrap the Create New `asp-action` in the following `if` statement:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将“Create New `asp-action`”包装在以下“if”语句中：
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We will be looking at this later on.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会看到这个。
- en: To take a look at the logic of the application at this point, we will see that
    the `HomeController``Index `action lists the work items. When we click on the
    Add your first Work item link, we call the `AddWorkItem` action on the `HomeController`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将看到应用程序的逻辑，`HomeController``Index`操作列出了工作项。当我们单击“添加您的第一个工作项”链接时，我们调用了`HomeController`上的`AddWorkItem`操作。
- en: The `AddWorkItem` action on the `HomeController` in turn calls the `AddItem`
    action on the `AddWorkItemController`. This simply returns the `AddItem` view
    where we enter the work item details and click on the Create button.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`HomeController`上的`AddWorkItem`操作反过来调用`AddWorkItemController`上的`AddItem`操作。这只是返回`AddItem`视图，我们在其中输入工作项详细信息，然后单击“创建”按钮。'
- en: The Create button in turn does an `HttpPost`, and because the form action on
    the `AddItem` view points to the `CreateWorkItem` action on the `AddWorkItemController`
    class, we insert the work item into our MongoDB database and redirect back to
    the list of work items by performing a `RedirectToAction` call to the `Index`
    action on the `HomeController`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: “创建”按钮反过来执行“HttpPost”，因为`AddItem`视图上的表单操作指向`AddWorkItemController`类上的`CreateWorkItem`操作，我们将工作项插入到我们的MongoDB数据库中，并通过执行`RedirectToAction`调用到`HomeController`上的`Index`操作重定向到工作项列表。
- en: Now at this point, if you are thinking that it this a long-winded way to redirect
    back to the `HomeController` just to redirect to the `AddItem` action on the `AddWorkItemController`,
    then you're 100% correct. I will show you a quick way to redirect directly to
    the `AddItem` action on the `AddWorkItemController` when the user clicks on the
    link to create a new work item. For now, just stick with me. I'm trying to show
    you how we can interact with controllers and actions.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这一点上，如果您认为这是一个冗长的方式，将重定向回`HomeController`，然后重定向到`AddWorkItemController`上的`AddItem`操作，那么您是100%正确的。我将向您展示一种快速的方法，当用户单击链接创建新工作项时，直接重定向到`AddWorkItemController`上的`AddItem`操作。现在，只需跟着我。我试图向您展示如何与控制器和操作进行交互。
- en: Now, run your application again.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次运行您的应用程序。
- en: '![](img/b8ea9353-3b96-4109-a95a-835ffcb90cae.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8ea9353-3b96-4109-a95a-835ffcb90cae.png)'
- en: You will see that a link in the list allows you to add your first work item.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到列表中的一个链接允许您添加您的第一个工作项。
- en: 'This is the link that redirects back to the `AddWorkItem` action on the `HomeController`.
    To run it, do the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将重定向回`HomeController`上的`AddWorkItem`操作的链接。要运行它，请执行以下操作：
- en: 'Click on the link and you will see the output, as shown in the following screenshot:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击链接，您将看到输出，如下截图所示：
- en: '![](img/20e97ab4-49a6-4a65-b97a-93566fee6be8.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20e97ab4-49a6-4a65-b97a-93566fee6be8.png)'
- en: This will take you to the view to add a new work item. Enter in some information
    into the fields and click on the Create button.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您到添加新工作项的视图。在字段中输入一些信息，然后单击“创建”按钮。
- en: '![](img/c0c002c6-dc56-4a86-a511-3cc163e337c0.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0c002c6-dc56-4a86-a511-3cc163e337c0.png)'
- en: The Create button calls the `CreateWorkItem` action on the `AddWorkItemController`
    and redirects back to the work item list on the `Index` action of the `HomeController`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “创建”按钮调用`AddWorkItemController`上的`CreateWorkItem`操作，并在`HomeController`的`Index`操作上重定向回工作项列表。
- en: '![](img/dd47eb65-9e94-497e-829a-e3c566be2891.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd47eb65-9e94-497e-829a-e3c566be2891.png)'
- en: 'You can see that the Create New link is now displayed at the top of the list.
    Let''s modify the Index.cshtml view to make that link redirect directly to the
    `AddItem` action on the `AddWorkItemController` class. Change the Razor as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到“创建新”链接现在显示在列表顶部。让我们修改“Index.cshtml”视图，使该链接直接重定向到`AddWorkItemController`类上的`AddItem`操作。更改Razor如下：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can see that we can specify the route that the application must take to
    get to the correct action. In this instance, we are saying that we must call the
    `AddItem` action on the `AddWorkItemController` class when the Create New link
    is clicked.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们可以指定应用程序必须采取的路由以到达正确的操作。在这种情况下，我们说当单击“创建新”链接时，我们必须调用`AddWorkItemController`类上的`AddItem`操作。
- en: Run your application again and click on the Create New link. You will see that
    you are redirected to the input form that we added the work item to earlier.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行您的应用程序，然后单击“创建新链接”。您会看到被重定向到我们之前添加工作项的输入表单。
- en: The default styling of the views doesn't look too shabby, but they are definitely
    not the most beautiful designs out there. This, at least, gives you as a developer
    the ability to go back and style the screens with CSS, to "prettify" them according
    to your needs. For now, the dull screens are 100% functional and good enough for
    our purposes.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 视图的默认样式看起来不错，但肯定不是最美丽的设计。至少，这使您作为开发人员有能力返回并使用CSS样式屏幕，根据您的需求“美化”它们。目前，这些沉闷的屏幕完全功能，并且足够满足我们的需求。
- en: Open MongoDB Compass and you will see that there is a workitem document in there.
    View that document and you will see the information that we just added from our
    ASP.NET Core MVC application.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 打开MongoDB Compass，您会看到那里有一个工作项文档。查看该文档，您将看到我们刚刚从ASP.NET Core MVC应用程序中添加的信息。
- en: '![](img/1a35ffc6-26e6-444f-8c91-5f0190f7a1fc.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a35ffc6-26e6-444f-8c91-5f0190f7a1fc.png)'
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we had a look at:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下：
- en: Setting up MongoDB on your local machine
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上设置MongoDB
- en: Using MongoDB Compass
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MongoDB Compass
- en: Creating an ASP.NET Core MVC application connected to MongoDB
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建连接到MongoDB的ASP.NET Core MVC应用程序
- en: We saw that MongoDB Compass gives developers a nice graphical view of their
    MongoDB data. Developers therefore don't need to know any MongoDB query syntax.
    If, however, you would like to take a look at the query syntax, head on over to, `https://docs.mongodb.com/manual/tutorial/query-documents/`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到MongoDB Compass为开发人员提供了MongoDB数据的良好图形视图。因此，开发人员不需要了解任何MongoDB查询语法。但是，如果你想查看查询语法，请访问`https://docs.mongodb.com/manual/tutorial/query-documents/`。
- en: There is still so much that you can learn when it comes to MongoDB and ASP.NET
    Core MVC. A single chapter is hardly enough to cover it all. What is certain though
    is that MongoDB is very powerful while remaining extremely simple to use in your
    applications. MongoDB is well-documented and there is a thriving community out
    there that can assist and guide you along the way.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及MongoDB和ASP.NET Core MVC时，仍然有很多东西可以学习。单独一章几乎不足以涵盖所有内容。但可以肯定的是，MongoDB非常强大，同时在应用程序中使用起来非常简单。MongoDB有很好的文档，并且有一个蓬勃发展的社区可以在你的学习过程中提供帮助和指导。
- en: In the next chapter, we will take a look at SignalR and how to create a real-time
    chat application.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下SignalR以及如何创建实时聊天应用程序。
