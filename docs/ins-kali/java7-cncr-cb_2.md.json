["```java\n    public class Account {\n          private double balance;\n    ```", "```java\n      public double getBalance() {\n        return balance;\n      }\n\n      public void setBalance(double balance) {\n        this.balance = balance;\n      }\n    ```", "```java\n      public synchronized void addAmount(double amount) {\n        double tmp=balance;\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        tmp+=amount;\n        balance=tmp;\n      }\n    ```", "```java\n      public synchronized void subtractAmount(double amount) {\n        double tmp=balance;\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        tmp-=amount;\n        balance=tmp;\n      }\n    ```", "```java\n    public class Bank implements Runnable {\n    ```", "```java\n      private Account account;\n\n      public Bank(Account account) {\n        this.account=account;\n      }\n    ```", "```java\n      @Override\n       public void run() {\n        for (int i=0; i<100; i++){\n          account.sustractAmount(1000);\n        }\n      }\n    ```", "```java\n    public class Company implements Runnable {\n    ```", "```java\n      private Account account;\n\n      public Company(Account account) {\n        this.account=account;\n      }\n    ```", "```java\n      @Override\n       public void run() {\n        for (int i=0; i<100; i++){\n          account.addAmount(1000);\n        }\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        Account  account=new Account();\n        account.setBalance(1000);\n    ```", "```java\n        Company  company=new Company(account);\n        Thread companyThread=new Thread(company);  \n    ```", "```java\n        Bank bank=new Bank(account);\n        Thread bankThread=new Thread(bank);\n    ```", "```java\n        System.out.printf(\"Account : Initial Balance: %f\\n\",account.getBalance());\n    Start the threads.\n        companyThread.start();\n        bankThread.start();\n    ```", "```java\n        try {\n          companyThread.join();\n          bankThread.join();\n          System.out.printf(\"Account : Final Balance: %f\\n\",account.getBalance());\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n    synchronized (this) {\n      // Java code\n    }\n```", "```java\n    public class Cinema {\n\n      private long vacanciesCinema1;\n      private long vacanciesCinema2;\n    ```", "```java\n      private final Object controlCinema1, controlCinema2;\n    ```", "```java\n      public Cinema(){\n        controlCinema1=new Object();\n        controlCinema2=new Object();\n        vacanciesCinema1=20;\n        vacanciesCinema2=20;\n      }\n    ```", "```java\n      public boolean sellTickets1 (int number) {\n        synchronized (controlCinema1) {\n          if (number<vacanciesCinema1) {\n            vacanciesCinema1-=number;\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    ```", "```java\n      public boolean sellTickets2 (int number){\n        synchronized (controlCinema2) {\n          if (number<vacanciesCinema2) {\n            vacanciesCinema2-=number;\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    ```", "```java\n      public boolean returnTickets1 (int number) {\n        synchronized (controlCinema1) {\n          vacanciesCinema1+=number;\n          return true;\n        }\n      }\n    ```", "```java\n      public boolean returnTickets2 (int number) {\n        synchronized (controlCinema2) {\n          vacanciesCinema2+=number;\n          return true;\n        }\n      }\n    ```", "```java\n      public long getVacanciesCinema1() {\n        return vacanciesCinema1;\n      }\n\n      public long getVacanciesCinema2() {\n        return vacanciesCinema2;\n      }\n    ```", "```java\n    public class TicketOffice1 implements Runnable {\n    ```", "```java\n      private Cinema cinema;\n\n      public TicketOffice1 (Cinema cinema) {\n        this.cinema=cinema;\n      }\n    ```", "```java\n      @Override\n       public void run() {\n        cinema.sellTickets1(3);\n        cinema.sellTickets1(2);\n        cinema.sellTickets2(2);\n        cinema.returnTickets1(3);\n        cinema.sellTickets1(5);\n        cinema.sellTickets2(2);\n        cinema.sellTickets2(2);\n        cinema.sellTickets2(2);\n      }\n    ```", "```java\n    public class TicketOffice2 implements Runnable {\n    ```", "```java\n      private Cinema cinema;\n\n      public TicketOffice2(Cinema cinema){\n        this.cinema=cinema;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        cinema.sellTickets2(2);\n        cinema.sellTickets2(4);\n        cinema.sellTickets1(2);\n        cinema.sellTickets1(1);\n        cinema.returnTickets2(2);\n        cinema.sellTickets1(3);\n        cinema.sellTickets2(2);\n        cinema.sellTickets1(2);\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        Cinema cinema=new Cinema();\n    ```", "```java\n        TicketOffice1 ticketOffice1=new TicketOffice1(cinema);\n        Thread thread1=new Thread(ticketOffice1,\"TicketOffice1\");\n    ```", "```java\n        TicketOffice2 ticketOffice2=new TicketOffice2(cinema);\n        Thread thread2=new Thread(ticketOffice2,\"TicketOffice2\");\n    ```", "```java\n        thread1.start();\n        thread2.start();\n    ```", "```java\n        try {\n          thread1.join();\n          thread2.join();\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Room 1 Vacancies: %d\\n\",cinema.getVacanciesCinema1());\n        System.out.printf(\"Room 2 Vacancies: %d\\n\",cinema.getVacanciesCinema2());\n    ```", "```java\n    public class EventStorage {\n\n      private int maxSize;\n      private List<Date> storage;\n    ```", "```java\n      public EventStorage(){\n        maxSize=10;\n        storage=new LinkedList<>();\n      }\n    ```", "```java\n      public synchronized void set(){\n          while (storage.size()==maxSize){\n            try {\n              wait();\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n          storage.offer(new Date());\n          System.out.printf(\"Set: %d\",storage.size());\n          notifyAll();\n      }\n    ```", "```java\n      public synchronized void get(){\n          while (storage.size()==0){\n            try {\n              wait();\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n           System.out.printf(\"Get: %d: %s\",storage.size(),((LinkedList<?>)storage).poll());\n          notifyAll();\n      }\n    ```", "```java\n    public class Producer implements Runnable {\n    ```", "```java\n      private EventStorage storage;\n\n      public Producer(EventStorage storage){\n        this.storage=storage;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        for (int i=0; i<100; i++){\n          storage.set();\n        }\n      }\n    ```", "```java\n    public class Consumer implements Runnable {\n    ```", "```java\n      private EventStorage storage;\n\n      public Consumer(EventStorage storage){\n        this.storage=storage;\n      }\n    ```", "```java\n      @Override\n       public void run() {\n        for (int i=0; i<100; i++){\n          storage.get();\n        }\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        EventStorage storage=new EventStorage();\n    ```", "```java\n        Producer producer=new Producer(storage);\n        Thread thread1=new Thread(producer);\n    ```", "```java\n        Consumer consumer=new Consumer(storage);\n        Thread thread2=new Thread(consumer);\n    ```", "```java\n        thread2.start();\n        thread1.start();\n    ```", "```java\n    public class PrintQueue {\n    ```", "```java\n      private final Lock queueLock=new ReentrantLock();\n    ```", "```java\n      public void printJob(Object document){\n    ```", "```java\n        queueLock.lock();\n    ```", "```java\n        try {\n          Long duration=(long)(Math.random()*10000);\n          System.out.println(Thread.currentThread().getName()+ \": PrintQueue: Printing a Job during \"+(duration/1000)+ \n    \" seconds\");\n          Thread.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n    finally {\n          queueLock.unlock();\n        }    \n    ```", "```java\n    public class Job implements Runnable {\n    ```", "```java\n      private PrintQueue printQueue;\n\n      public Job(PrintQueue printQueue){\n        this.printQueue=printQueue;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        System.out.printf(\"%s: Going to print a document\\n\", Thread.currentThread().getName());\n        printQueue.printJob(new Object());\n        System.out.printf(\"%s: The document has been printed\\n\", Thread.currentThread().getName());    \n      }\n    ```", "```java\n    public class Main {\n\n      public static void main (String args[]){\n    ```", "```java\n        PrintQueue printQueue=new PrintQueue();\n    ```", "```java\n        Thread thread[]=new Thread[10];\n        for (int i=0; i<10; i++){\n          thread[i]=new Thread(new Job(printQueue),\"Thread \"+ i);\n        }\n    ```", "```java\n        for (int i=0; i<10; i++){\n          thread[i].start();\n        }\n    ```", "```java\n    public class PricesInfo {\n    ```", "```java\n      private double price1;\n      private double price2;\n    ```", "```java\n      private ReadWriteLock lock;\n    ```", "```java\n      public PricesInfo(){\n        price1=1.0;\n        price2=2.0;\n        lock=new ReentrantReadWriteLock();\n      }\n    ```", "```java\n      public double getPrice1() {\n        lock.readLock().lock();\n        double value=price1;\n        lock.readLock().unlock();\n        return value;\n      }\n    ```", "```java\n      public double getPrice2() {\n        lock.readLock().lock();\n        double value=price2;\n        lock.readLock().unlock();\n        return value;\n      }\n    ```", "```java\n      public void setPrices(double price1, double price2) {\n        lock.writeLock().lock();\n        this.price1=price1;\n        this.price2=price2;\n        lock.writeLock().unlock();\n      }\n    ```", "```java\n    public class Reader implements Runnable {\n    ```", "```java\n      private PricesInfo pricesInfo;\n\n      public Reader (PricesInfo pricesInfo){\n        this.pricesInfo=pricesInfo;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        for (int i=0; i<10; i++){\n          System.out.printf(\"%s: Price 1: %f\\n\", Thread.currentThread().getName(),pricesInfo.getPrice1());\n          System.out.printf(\"%s: Price 2: %f\\n\", Thread.currentThread().getName(),pricesInfo.getPrice2());\n        }\n      }\n    ```", "```java\n    public class Writer implements Runnable {\n    ```", "```java\n      private PricesInfo pricesInfo;\n\n      public Writer(PricesInfo pricesInfo){\n        this.pricesInfo=pricesInfo;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        for (int i=0; i<3; i++) {\n          System.out.printf(\"Writer: Attempt to modify the prices.\\n\");\n          pricesInfo.setPrices(Math.random()*10, Math.random()*8);\n          System.out.printf(\"Writer: Prices have been modified.\\n\");\n          try {\n            Thread.sleep(2);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n      }  \n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        PricesInfo pricesInfo=new PricesInfo();\n    ```", "```java\n        Reader readers[]=new Reader[5];\n        Thread threadsReader[]=new Thread[5];\n\n        for (int i=0; i<5; i++){\n          readers[i]=new Reader(pricesInfo);\n          threadsReader[i]=new Thread(readers[i]);\n        }\n    ```", "```java\n        Writer writer=new Writer(pricesInfo);\n          Thread  threadWriter=new Thread(writer);\n    ```", "```java\n        for (int i=0; i<5; i++){\n          threadsReader[i].start();\n        }\n        threadWriter.start();\n    ```", "```java\n      private Lock queueLock=new ReentrantLock(true);\n    ```", "```java\n      public void printJob(Object document){\n        queueLock.lock();\n        try {\n          Long duration=(long)(Math.random()*10000);\n          System.out.println(Thread.currentThread().getName()+\": PrintQueue: Printing a Job during \"+(duration/1000)+\" seconds\");\n          Thread.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n           queueLock.unlock();\n        }\n        queueLock.lock();\n        try {\n          Long duration=(long)(Math.random()*10000);\n          System.out.println(Thread.currentThread().getName()+\": PrintQueue: Printing a Job during \"+(duration/1000)+\" seconds\");\n          Thread.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n              queueLock.unlock();\n           } \n      }\n    ```", "```java\n        for (int i=0; i<10; i++){\n          thread[i].start();\n          try {\n            Thread.sleep(100);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n    public class FileMock {\n\n      private String content[];\n      private int index;\n    ```", "```java\n      public FileMock(int size, int length){\n        content=new String[size];\n        for (int i=0; i<size; i++){\n          StringBuilder buffer=new StringBuilder(length);\n          for (int j=0; j<length; j++){\n            int indice=(int)Math.random()*255;\n            buffer.append((char)indice);\n          }\n          content[i]=buffer.toString();\n        }\n        index=0;\n      }\n    ```", "```java\n      public boolean hasMoreLines(){\n        return index<content.length;\n      }\n    ```", "```java\n      public String getLine(){\n        if (this.hasMoreLines()) {\n          System.out.println(\"Mock: \"+(content.length-index));\n          return content[index++];\n        } \n        return null;\n      }\n    ```", "```java\n    public class Buffer {\n    ```", "```java\n          private LinkedList<String> buffer;\n\n          private int maxSize;\n\n          private ReentrantLock lock;\n\n          private Condition lines;\n          private Condition space;\n\n          private boolean pendingLines;\n        ```", "```java\n      public Buffer(int maxSize) {\n        this.maxSize=maxSize;\n        buffer=new LinkedList<>();\n        lock=new ReentrantLock();\n        lines=lock.newCondition();\n        space=lock.newCondition();\n        pendingLines=true;\n      }\n    ```", "```java\n      public void insert(String line) {\n        lock.lock();\n        try {\n          while (buffer.size() == maxSize) {\n            space.await();\n          }\n          buffer.offer(line);\n          System.out.printf(\"%s: Inserted Line: %d\\n\", Thread.currentThread().getName(),buffer.size());\n          lines.signalAll();\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n          lock.unlock();\n        }\n      }\n    ```", "```java\n      public String get() {\n        String line=null;\n        lock.lock();    \n        try {\n          while ((buffer.size() == 0) &&(hasPendingLines())) {\n            lines.await();\n          }\n\n          if (hasPendingLines()) {\n            line = buffer.poll();\n            System.out.printf(\"%s: Line Readed: %d\\n\",Thread.currentThread().getName(),buffer.size());\n            space.signalAll();\n          }\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n          lock.unlock();\n        }\n        return line;\n      }\n    ```", "```java\n      public void setPendingLines(boolean pendingLines) {\n        this.pendingLines=pendingLines;\n      }\n    ```", "```java\n      public boolean hasPendingLines() {\n        return pendingLines || buffer.size()>0;\n      }\n    ```", "```java\n    public class Producer implements Runnable {\n    ```", "```java\n      private FileMock mock;\n\n      private Buffer buffer;\n    ```", "```java\n      public Producer (FileMock mock, Buffer buffer){\n        this.mock=mock;\n        this.buffer=buffer;  \n      }\n    ```", "```java\n       @Override\n      public void run() {\n        buffer.setPendingLines(true);\n        while (mock.hasMoreLines()){\n          String line=mock.getLine();\n          buffer.insert(line);\n        }\n        buffer.setPendingLines(false);\n      }\n    ```", "```java\n    public class Consumer implements Runnable {\n    ```", "```java\n      private Buffer buffer;\n\n      public Consumer (Buffer buffer) {\n        this.buffer=buffer;\n      }\n    ```", "```java\n       @Override  \n      public void run() {\n        while (buffer.hasPendingLines()) {\n          String line=buffer.get();\n          processLine(line);\n        }\n      }\n    ```", "```java\n      private void processLine(String line) {\n        try {\n          Random random=new Random();\n          Thread.sleep(random.nextInt(100));\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }    \n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        FileMock mock=new FileMock(100, 10);\n    ```", "```java\n        Buffer buffer=new Buffer(20);\n    ```", "```java\n        Producer producer=new Producer(mock, buffer);\n        Thread threadProducer=new Thread(producer,\"Producer\");\n    ```", "```java\n        Consumer consumers[]=new Consumer[3];\n        Thread threadConsumers[]=new Thread[3];\n\n        for (int i=0; i<3; i++){\n          consumers[i]=new Consumer(buffer); \n          threadConsumers[i]=new Thread(consumers[i],\"Consumer \"+i);\n        }\n    ```", "```java\n        threadProducer.start();\n        for (int i=0; i<3; i++){\n          threadConsumers[i].start();\n        }\n    ```"]