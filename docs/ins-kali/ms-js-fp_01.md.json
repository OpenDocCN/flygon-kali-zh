["```js\n$.get(\"some/url\", someData, function(result, status) {\n // *check status, and do something*\n // *with the result*\n});\n```", "```js\nvar doSomething = function(result, status) {\n // *check status, and do something*\n // *with the result*\n};\n$.get(\"some/url\", someData, doSomething);\n```", "```js\nfunction fact(n) {\n if (n === 0) {\n return 1;\n } else {\n return n * fact(n - 1);\n }\n}\nconsole.log(fact(5)); // *120*\n```", "```js\nfunction newCounter() {\n    let count = 0;\n return function() {\n count++;\n        return count;\n };\n}\nconst nc = newCounter();\nconsole.log(nc()); // *1*\nconsole.log(nc()); // *2*\nconsole.log(nc()); // *3*\n```", "```js\n$.get(\"some/url\", data, (result, status) => {\n // *check status, and do something*\n // *with the result*\n});\n```", "```js\nconst fact2 = n => {\n if (n === 0) {\n return 1;\n } else {\n return n * fact2(n - 1);\n }\n};\nconsole.log(fact2(5)); // *also 120*\n```", "```js\nconst fact3 = n => (n === 0 ? 1 : n * fact3(n - 1));\nconsole.log(fact3(5)); // again 120\n```", "```js\nconst x = [1, 2, 3];\nfunction sum3(a, b, c) {\n return a + b + c;\n}\nconst y = sum3(...x); // equivalent to sum3(1,2,3)\nconsole.log(y); // 6\n```", "```js\nconst f = [1, 2, 3];\nconst g = [4, ...f, 5]; // [4,1,2,3,5]\nconst h = [...f, ...g]; // [1,2,3,4,1,2,3,5]\n```", "```js\nconst p = { some: 3, data: 5 };\nconst q = { more: 8, ...p }; // { more:8, some:3, data:5 }\n```", "```js\nconst numbers = [2, 2, 9, 6, 0, 1, 2, 4, 5, 6];\nconst minA = Math.min(...numbers); // *0*\n\nconst maxArray = arr => Math.max(...arr);\nconst maxA = maxArray(numbers); // *9*\n```", "```js\nsomeFn.apply(thisArg, someArray) === someFn.call(thisArg, ...someArray);\n```", "```js\n const makeSaluteClass = term =>\n class {\n constructor(x) {\n this.x = x;\n }\n\n salute(y) {\n console.log(`${this.x} says \"${term}\" to ${y}`);\n }\n };\n\n const Spanish = makeSaluteClass(\"HOLA\");\n new Spanish(\"ALFA\").salute(\"BETA\");\n // *ALFA says \"HOLA\" to BETA*\n\n new (makeSaluteClass(\"HELLO\"))(\"GAMMA\").salute(\"DELTA\");\n // *GAMMA says \"HELLO\" to DELTA*\n\n const fullSalute = (c, x, y) => new c(x).salute(y);\n const French = makeSaluteClass(\"BON JOUR\");\n fullSalute(French, \"EPSILON\", \"ZETA\");\n // *EPSILON says \"BON JOUR\" to ZETA*\n```"]