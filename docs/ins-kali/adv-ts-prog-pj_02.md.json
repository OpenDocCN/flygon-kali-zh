["```ts\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2015\", \n    \"module\": \"commonjs\", \n    \"sourceMap\": true, \n    \"outDir\": \"./script\", \n    \"strict\": true, \n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"esModuleInterop\": true, \n    \"experimentalDecorators\": true,\n  }\n}\n```", "```ts\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-lg-6\">\n    </div>\n    <div class=\"col-lg-6\">\n    </div>\n  </div>\n</div>\n```", "```ts\n<style>\n  html, body { \n    height: 100%;\n  }\n</style>\n```", "```ts\n<div class=\"container-fluid h-100\">\n  <div class=\"row h-100\">\n    <div class=\"col-lg-6\">\n      <textarea class=\"form-control h-100\" id=\"markdown\"></textarea>\n    </div>\n    <div class=\"col-lg-6 h-100\">\n      <label class=\"h-100\" id=\"markdown-output\"></label>\n    </div>\n  </div>\n</div>\n```", "```ts\nclass HtmlHandler {\n    public TextChangeHandler(id : string, output : string) : void {\n        let markdown = <HTMLTextAreaElement>document.getElementById(id);\n        let markdownOutput = <HTMLLabelElement>document.getElementById(output);\n        if (markdown !== null) {\n            markdown.onkeyup = (e) => {\n                if (markdown.value) {\n                    markdownOutput.innerHTML = markdown.value;\n                }\n                else \n                   markdownOutput.innerHTML = \"<p></p>\";\n            }\n        }\n    }\n}\n```", "```ts\n<script src=\"script/MarkdownParser.js\">\n</script>\n<script>\n  new HtmlHandler().TextChangeHandler(\"markdown\", \"markdown-output\");\n</script>\n```", "```ts\n<!doctype html>\n<html lang=\"en\">\n <head>\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\n <style>\n html, body { \n height: 100%; \n }\n </style>\n <title>Advanced TypeScript - Chapter 2</title>\n </head>\n <body>\n <div class=\"container-fluid h-100\">\n <div class=\"row h-100\">\n <div class=\"col-lg-6\">\n <textarea class=\"form-control h-100\" id=\"markdown\"></textarea>\n </div>\n <div class=\"col-lg-6 h-100\">\n <label class=\"h-100\" id=\"markdown-output\"></label>\n </div>\n </div>\n </div>\n <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\n <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"></script>\n <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"></script>\n\n <script src=\"script/MarkdownParser.js\">\n </script>\n <script>\n new HtmlHandler().TextChangeHandler(\"markdown\", \"markdown-output\");\n </script>\n </body>\n</html>\n```", "```ts\nenum TagType {\n    Paragraph,\n    Header1,\n    Header2,\n    Header3,\n    HorizontalRule\n}\n```", "```ts\nclass TagTypeToHtml {\n    private readonly tagType : Map<TagType, string> = new Map<TagType, string>();\n    constructor() {\n        this.tagType.set(TagType.Header1, \"h1\");\n        this.tagType.set(TagType.Header2, \"h2\");\n        this.tagType.set(TagType.Header3, \"h3\");\n        this.tagType.set(TagType.Paragraph, \"p\");\n        this.tagType.set(TagType.HorizontalRule, \"hr\")\n    }\n}\n```", "```ts\npublic OpeningTag(tagType : TagType) : string {\n    let tag = this.tagType.get(tagType);\n    if (tag !== null) {\n        return `<${tag}>`;\n    }\n    return `<p>`;\n}\n```", "```ts\npublic ClosingTag(tagType : TagType) : string {\n    let tag = this.tagType.get(tagType);\n    if (tag !== null) {\n        return `</${tag}>`;\n    }\n    return `</p>`;\n}\n```", "```ts\nprivate GetTag(tagType : TagType, openingTagPattern : string) : string {\n    let tag = this.tagType.get(tagType);\n    if (tag !== null) {\n        return `${openingTagPattern}${tag}>`;\n    }\n    return `${openingTagPattern}p>`;\n}\n```", "```ts\npublic OpeningTag(tagType : TagType) : string {\n    return this.GetTag(tagType, `<`);\n}\n\npublic ClosingTag(tagType : TagType) : string {\n    return this.GetTag(tagType, `</`);\n}\n```", "```ts\nclass TagTypeToHtml {\n    private readonly tagType : Map<TagType, string> = new Map<TagType, string>();\n    constructor() {\n        this.tagType.set(TagType.Header1, \"h1\");\n        this.tagType.set(TagType.Header2, \"h2\");\n        this.tagType.set(TagType.Header3, \"h3\");\n        this.tagType.set(TagType.Paragraph, \"p\");\n        this.tagType.set(TagType.HorizontalRule, \"hr\")\n    }\n\n    public OpeningTag(tagType : TagType) : string {\n        return this.GetTag(tagType, `<`);\n    }\n\n    public ClosingTag(tagType : TagType) : string {\n        return this.GetTag(tagType, `</`);\n    }\n\n    private GetTag(tagType : TagType, openingTagPattern : string) : string {\n        let tag = this.tagType.get(tagType);\n        if (tag !== null) {\n            return `${openingTagPattern}${tag}>`;\n        }\n        return `${openingTagPattern}p>`;\n    }\n}\n```", "```ts\ninterface IMarkdownDocument {\n    Add(...content : string[]) : void;\n    Get() : string;\n}\n```", "```ts\nclass MarkdownDocument implements IMarkdownDocument {\n    private content : string = \"\";\n    Add(...content: string[]): void {\n        content.forEach(element => {\n            this.content += element;\n        });\n    } \n    Get(): string {\n        return this.content;\n    }\n}\n```", "```ts\nclass ParseElement {\n    CurrentLine : string = \"\";\n}\n```", "```ts\ninterface IVisitor {\n    Visit(......);\n}\ninterface IVisitable {\n    Accept(IVisitor, .....);\n}\n```", "```ts\ninterface IVisitor {\n    Visit(token : ParseElement, markdownDocument : IMarkdownDocument) : void;\n}\ninterface IVisitable {\n    Accept(visitor : IVisitor, token : ParseElement, markdownDocument : IMarkdownDocument) : void;\n}\n```", "```ts\nabstract class VisitorBase implements IVisitor {\n    constructor (private readonly tagType : TagType, private readonly TagTypeToHtml : TagTypeToHtml) {}\n    Visit(token: ParseElement, markdownDocument: IMarkdownDocument): void {\n        markdownDocument.Add(this.TagTypeToHtml.OpeningTag(this.tagType), token.CurrentLine, \n            this.TagTypeToHtml.ClosingTag(this.tagType));\n    }\n}\n```", "```ts\nclass Header1Visitor extends VisitorBase {\n    constructor() {\n        super(TagType.Header1, new TagTypeToHtml());\n    }\n}\nclass Header2Visitor extends VisitorBase {\n    constructor() {\n        super(TagType.Header2, new TagTypeToHtml());\n    }\n}\nclass Header3Visitor extends VisitorBase {\n    constructor() {\n        super(TagType.Header3, new TagTypeToHtml());\n    }\n}\nclass ParagraphVisitor extends VisitorBase {\n    constructor() {\n        super(TagType.Paragraph, new TagTypeToHtml());\n    }\n}\nclass HorizontalRuleVisitor extends VisitorBase {\n    constructor() {\n        super(TagType.HorizontalRule, new TagTypeToHtml());\n    }\n}\n```", "```ts\nclass Visitable implements IVisitable {\n    Accept(visitor: IVisitor, token: ParseElement, markdownDocument: IMarkdownDocument): void {\n        visitor.Visit(token, markdownDocument);\n    }\n}\n```", "```ts\nabstract class Handler<T> {\n    protected next : Handler<T> | null = null;\n    public SetNext(next : Handler<T>) : void {\n        this.next = next;\n    }\n    public HandleRequest(request : T) : void {\n        if (!this.CanHandle(request)) {\n            if (this.next !== null) {\n                this.next.HandleRequest(request);\n            }\n            return;\n        }\n    }\n    protected abstract CanHandle(request : T) : boolean;\n}\n```", "```ts\nclass ParseChainHandler extends Handler<ParseElement> {\n    private readonly visitable : IVisitable = new Visitable();\n    constructor(private readonly document : IMarkdownDocument, \n        private readonly tagType : string, \n        private readonly visitor : IVisitor) {\n        super();\n    }\n}\n```", "```ts\nclass LineParser {\n    public Parse(value : string, tag : string) : [boolean, string] {\n        let output : [boolean, string] = [false, \"\"];\n        output[1] = value;\n        if (value === \"\") {\n            return output;\n        }\n        let split = value.startsWith(`${tag}`);\n        if (split) {\n            output[0] = true;\n            output[1] = value.substr(tag.length);\n        }\n        return output;\n    }\n}\n```", "```ts\nprotected CanHandle(request: ParseElement): boolean {\n    let split = new LineParser().Parse(request.CurrentLine, this.tagType);\n    if (split[0]){\n        request.CurrentLine = split[1];\n        this.visitable.Accept(this.visitor, request, this.document);\n    }\n    return split[0];\n}\n```", "```ts\nclass ParseChainHandler extends Handler<ParseElement> {\n    private readonly visitable : IVisitable = new Visitable();\n    protected CanHandle(request: ParseElement): boolean {\n        let split = new LineParser().Parse(request.CurrentLine, this.tagType);\n        if (split[0]){\n            request.CurrentLine = split[1];\n            this.visitable.Accept(this.visitor, request, this.document);\n        }\n        return split[0];\n    }\n    constructor(private readonly document : IMarkdownDocument, \n        private readonly tagType : string, \n        private readonly visitor : IVisitor) {\n        super();\n    }\n}\n```", "```ts\nclass ParagraphHandler extends Handler<ParseElement> {\n    private readonly visitable : IVisitable = new Visitable();\n    private readonly visitor : IVisitor = new ParagraphVisitor()\n    protected CanHandle(request: ParseElement): boolean {\n        this.visitable.Accept(this.visitor, request, this.document);\n        return true;\n    }\n    constructor(private readonly document : IMarkdownDocument) {\n        super();\n    }\n}\n```", "```ts\nclass Header1ChainHandler extends ParseChainHandler {\n    constructor(document : IMarkdownDocument) {\n        super(document, \"# \", new Header1Visitor());\n    }\n}\n\nclass Header2ChainHandler extends ParseChainHandler {\n    constructor(document : IMarkdownDocument) {\n        super(document, \"## \", new Header2Visitor());\n    }\n}\n\nclass Header3ChainHandler extends ParseChainHandler {\n    constructor(document : IMarkdownDocument) {\n        super(document, \"### \", new Header3Visitor());\n    }\n}\n\nclass HorizontalRuleHandler extends ParseChainHandler {\n    constructor(document : IMarkdownDocument) {\n        super(document, \"---\", new HorizontalRuleVisitor());\n    }\n}\n```", "```ts\nclass ChainOfResponsibilityFactory {\n    Build(document : IMarkdownDocument) : ParseChainHandler {\n        let header1 : Header1ChainHandler = new Header1ChainHandler(document);\n        let header2 : Header2ChainHandler = new Header2ChainHandler(document);\n        let header3 : Header3ChainHandler = new Header3ChainHandler(document);\n        let horizontalRule : HorizontalRuleHandler = new HorizontalRuleHandler(document);\n        let paragraph : ParagraphHandler = new ParagraphHandler(document);\n\n        header1.SetNext(header2);\n        header2.SetNext(header3);\n        header3.SetNext(horizontalRule);\n        horizontalRule.SetNext(paragraph);\n\n        return header1;\n    }\n}\n```", "```ts\nclass Markdown {\n    public ToHtml(text : string) : string {\n        let document : IMarkdownDocument = new MarkdownDocument();\n        let header1 : Header1ChainHandler = new ChainOfResponsibilityFactory().Build(document);\n        let lines : string[] = text.split(`\\n`);\n        for (let index = 0; index < lines.length; index++) {\n            let parseElement : ParseElement = new ParseElement();\n            parseElement.CurrentLine = lines[index];\n            header1.HandleRequest(parseElement);\n        }\n        return document.Get();\n    }\n}\n```", "```ts\nclass HtmlHandler {\n private markdownChange : Markdown = new Markdown;\n    public TextChangeHandler(id : string, output : string) : void {\n        let markdown = <HTMLTextAreaElement>document.getElementById(id);\n        let markdownOutput = <HTMLLabelElement>document.getElementById(output);\n\n        if (markdown !== null) {\n            markdown.onkeyup = (e) => {\n                this.RenderHtmlContent(markdown, markdownOutput);\n            }\n            window.onload = (e) => {\n                this.RenderHtmlContent(markdown, markdownOutput);\n            }\n        }\n    }\n\n    private RenderHtmlContent(markdown: HTMLTextAreaElement, markdownOutput: HTMLLabelElement) {\n        if (markdown.value) {\n            markdownOutput.innerHTML = this.markdownChange.ToHtml(markdown.value);\n        }\n        else\n            markdownOutput.innerHTML = \"<p></p>\";\n    }\n}\n```"]