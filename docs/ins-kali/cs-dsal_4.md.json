["```cs\nstring value = (string)hashtable[\"key\"]; \n```", "```cs\nhashtable[\"key\"] = \"value\"; \n```", "```cs\nforeach (DictionaryEntry entry in hashtable) \n{ \n    Console.WriteLine($\"{entry.Key} - {entry.Value}\"); \n} \n```", "```cs\nHashtable phoneBook = new Hashtable() \n{ \n    { \"Marcin Jamro\", \"000-000-000\" }, \n    { \"John Smith\", \"111-111-111\" } \n}; \nphoneBook[\"Lily Smith\"] = \"333-333-333\"; \n```", "```cs\ntry \n{ \n    phoneBook.Add(\"Mary Fox\", \"222-222-222\"); \n} \ncatch (ArgumentException) \n{ \n    Console.WriteLine(\"The entry already exists.\"); \n} \n```", "```cs\nConsole.WriteLine(\"Phone numbers:\"); \nif (phoneBook.Count == 0) \n{ \n    Console.WriteLine(\"Empty\"); \n} \nelse \n{ \n    foreach (DictionaryEntry entry in phoneBook) \n    { \n        Console.WriteLine($\" - {entry.Key}: {entry.Value}\"); \n    } \n} \n```", "```cs\nConsole.WriteLine(); \nConsole.Write(\"Search by name: \"); \nstring name = Console.ReadLine(); \nif (phoneBook.Contains(name)) \n{ \n    string number = (string)phoneBook[name]; \n    Console.WriteLine($\"Found phone number: {number}\"); \n} \nelse \n{ \n    Console.WriteLine(\"The entry does not exist.\"); \n} \n```", "```cs\n    Phone numbers:\n     - John Smith: 111-111-111\n     - Mary Fox: 222-222-222\n     - Lily Smith: 333-333-333\n     - Marcin Jamro: 000-000-000\n\n    Search by name: Mary Fox\n    Found phone number: 222-222-222\n\n```", "```cs\nDictionary<string, string> dictionary = \n    new Dictionary<string, string> \n{ \n    { \"Key 1\", \"Value 1\" }, \n    { \"Key 2\", \"Value 2\" } \n}; \n```", "```cs\nstring value = dictionary[\"key\"]; \n```", "```cs\ndictionary[\"key\"] = \"value\"; \n```", "```cs\nforeach (KeyValuePair<string, string> pair in dictionary) \n{ \n    Console.WriteLine($\"{pair.Key} - {pair.Value}\"); \n} \n```", "```cs\nDictionary<string, string> products = \n    new Dictionary<string, string> \n{ \n    { \"5900000000000\", \"A1\" }, \n    { \"5901111111111\", \"B5\" }, \n    { \"5902222222222\", \"C9\" } \n}; \nproducts[\"5903333333333\"] = \"D7\"; \n```", "```cs\ntry \n{ \n    products.Add(\"5904444444444\", \"A3\"); \n} \ncatch (ArgumentException) \n{ \n    Console.WriteLine(\"The entry already exists.\"); \n} \n```", "```cs\nConsole.WriteLine(\"All products:\"); \nif (products.Count == 0) \n{ \n    Console.WriteLine(\"Empty\"); \n} \nelse \n{ \n    foreach (KeyValuePair<string, string> product in products) \n    { \n        Console.WriteLine($\" - {product.Key}: {product.Value}\"); \n    } \n}\n```", "```cs\nConsole.WriteLine(); \nConsole.Write(\"Search by barcode: \"); \nstring barcode = Console.ReadLine(); \nif (products.TryGetValue(barcode, out string location)) \n{ \n    Console.WriteLine($\"The product is in the area {location}.\"); \n} \nelse \n{ \n    Console.WriteLine(\"The product does not exist.\"); \n} \n```", "```cs\n    All products:\n     - 5900000000000: A1\n     - 5901111111111: B5\n     - 5902222222222: C9\n     - 5903333333333: D7\n     - 5904444444444: A3\n\n    Search by barcode: 5902222222222\n    The product is in the area C9.\n```", "```cs\npublic class Employee \n{ \n    public string FirstName { get; set; } \n    public string LastName { get; set; } \n    public string PhoneNumber { get; set; } \n} \n```", "```cs\nDictionary<int, Employee> employees =  \n    new Dictionary<int, Employee>(); \nemployees.Add(100, new Employee() { FirstName = \"Marcin\",  \n    LastName = \"Jamro\", PhoneNumber = \"000-000-000\" }); \nemployees.Add(210, new Employee() { FirstName = \"Mary\",  \n    LastName = \"Fox\", PhoneNumber = \"111-111-111\" }); \nemployees.Add(303, new Employee() { FirstName = \"John\",  \n    LastName = \"Smith\", PhoneNumber = \"222-222-222\" }); \n```", "```cs\nbool isCorrect = true; \ndo \n{ \n    Console.Write(\"Enter the employee identifier: \"); \n    string idString = Console.ReadLine(); \n    isCorrect = int.TryParse(idString, out int id); \n    if (isCorrect) \n    { \n        Console.ForegroundColor = ConsoleColor.White; \n        if (employees.TryGetValue(id, out Employee employee)) \n        { \n            Console.WriteLine(\"First name: {1}{0}Last name:  \n                {2}{0}Phone number: {3}\", \n                Environment.NewLine, \n                employee.FirstName, \n                employee.LastName, \n                employee.PhoneNumber); \n        } \n        else \n        { \n            Console.WriteLine(\"The employee with the given  \n                identifier does not exist.\"); \n        } \n        Console.ForegroundColor = ConsoleColor.Gray; \n    } \n} \nwhile (isCorrect); \n```", "```cs\n    Enter the employee identifier: 100\n    First name: Marcin\n    Last name: Jamro\n    Phone number: 000-000-000\n    Enter the employee identifier: 500\n    The employee with the given identifier does not exist.\n```", "```cs\nstring value = dictionary[\"key\"]; \n```", "```cs\ndictionary[\"key\"] = \"value\"; \n```", "```cs\nSortedDictionary<string, string> definitions =  \n    new SortedDictionary<string, string>(); \ndo \n{ \n    Console.Write(\"Choose an option ([a] - add, [l] - list): \"); \n    ConsoleKeyInfo keyInfo = Console.ReadKey(); \n    Console.WriteLine(); \n    if (keyInfo.Key == ConsoleKey.A) \n    { \n        Console.ForegroundColor = ConsoleColor.White; \n        Console.Write(\"Enter the name: \"); \n        string name = Console.ReadLine(); \n        Console.Write(\"Enter the explanation: \"); \n        string explanation = Console.ReadLine(); \n        definitions[name] = explanation; \n        Console.ForegroundColor = ConsoleColor.Gray; \n    } \n    else if (keyInfo.Key == ConsoleKey.L) \n    { \n        Console.ForegroundColor = ConsoleColor.White; \n        foreach (KeyValuePair<string, string> definition  \n            in definitions) \n        { \n            Console.WriteLine($\"{definition.Key}:  \n                {definition.Value}\"); \n        } \n        Console.ForegroundColor = ConsoleColor.Gray; \n    } \n    else \n    { \n        Console.ForegroundColor = ConsoleColor.White; \n        Console.WriteLine(\"Do you want to exit the program?  \n            Press [y] (yes) or [n] (no).\"); \n        Console.ForegroundColor = ConsoleColor.Gray; \n        if (Console.ReadKey().Key == ConsoleKey.Y) \n        { \n            break; \n        } \n    } \n} \nwhile (true); \n```", "```cs\n    Choose an option ([a] - add, [l] - list): a\n    Enter the name: Zakopane\n    Enter the explanation: a city located in Tatra mountains in Poland\n    Choose an option ([a] - add, [l] - list): a\n    Enter the name: Rzeszow\n    Enter the explanation: a capital of the Subcarpathian voivodeship \n    in Poland\n    Choose an option ([a] - add, [l] - list): a\n    Enter the name: Warszawa\n    Enter the explanation: a capital city of Poland\n    Choose an option ([a] - add, [l] - list): a\n    Enter the name: Lancut\n    Enter the explanation: a city located near Rzeszow with \n    a beautiful castle\n    Choose an option ([a] - add, [l] - list): l\n    Lancut: a city located near Rzeszow with a beautiful castle\n    Rzeszow: a capital of the Subcarpathian voivodeship in Poland\n    Warszawa: a capital city of Poland\n    Zakopane: a city located in Tatra mountains in Poland\n    Choose an option ([a] - add, [l] - list): q\n    Do you want to exit the program? Press [y] (yes) or [n] (no).\n    yPress any key to continue . . .\n\n```", "```cs\nHashSet<int> usedCoupons = new HashSet<int>(); \ndo \n{ \n    Console.Write(\"Enter the coupon number: \"); \n    string couponString = Console.ReadLine(); \n    if (int.TryParse(couponString, out int coupon)) \n    { \n        if (usedCoupons.Contains(coupon)) \n        { \n            Console.ForegroundColor = ConsoleColor.Red; \n            Console.WriteLine(\"It has been already used :-(\"); \n            Console.ForegroundColor = ConsoleColor.Gray; \n        } \n        else \n        { \n            usedCoupons.Add(coupon); \n            Console.ForegroundColor = ConsoleColor.Green; \n            Console.WriteLine(\"Thank you! :-)\"); \n            Console.ForegroundColor = ConsoleColor.Gray; \n        } \n    } \n    else \n    { \n        break; \n    } \n} \nwhile (true); \n```", "```cs\nConsole.WriteLine(); \nConsole.WriteLine(\"A list of used coupons:\"); \nforeach (int coupon in usedCoupons) \n{ \n    Console.WriteLine(coupon); \n} \n```", "```cs\n    Enter the coupon number: 100\n    Thank you! :-)\n    Enter the coupon number: 101\n    Thank you! :-)\n    Enter the coupon number: 500\n    Thank you! :-)\n    Enter the coupon number: 345\n    Thank you! :-)\n    Enter the coupon number: 101\n    It has been already used :-(\n    Enter the coupon number: l\n\n    A list of used coupons:\n    100\n    101\n    500\n    345\n\n```", "```cs\npublic enum PoolTypeEnum \n{ \n    RECREATION, \n    COMPETITION, \n    THERMAL, \n    KIDS \n}; \n```", "```cs\nprivate static Random random = new Random(); \n```", "```cs\nprivate static bool GetRandomBoolean() \n{ \n    return random.Next(2) == 1; \n} \n```", "```cs\nDictionary<PoolTypeEnum, HashSet<int>> tickets =  \n    new Dictionary<PoolTypeEnum, HashSet<int>>() \n{ \n    { PoolTypeEnum.RECREATION, new HashSet<int>() }, \n    { PoolTypeEnum.COMPETITION, new HashSet<int>() }, \n    { PoolTypeEnum.THERMAL, new HashSet<int>() }, \n    { PoolTypeEnum.KIDS, new HashSet<int>() } \n}; \n```", "```cs\nfor (int i = 1; i < 100; i++) \n{ \n    foreach (KeyValuePair<PoolTypeEnum, HashSet<int>> type  \n        in tickets) \n    { \n        if (GetRandomBoolean()) \n        { \n            type.Value.Add(i); \n        } \n    } \n}\n```", "```cs\nConsole.WriteLine(\"Number of visitors by a pool type:\"); \nforeach (KeyValuePair<PoolTypeEnum, HashSet<int>> type in tickets) \n{ \n    Console.WriteLine($\" - {type.Key.ToString().ToLower()}:  \n        {type.Value.Count}\"); \n} \n```", "```cs\nPoolTypeEnum maxVisitors = tickets \n    .OrderByDescending(t => t.Value.Count) \n    .Select(t => t.Key) \n    .FirstOrDefault(); \nConsole.WriteLine($\"Pool '{maxVisitors.ToString().ToLower()}'  \n    was the most popular.\");\n```", "```cs\nHashSet<int> any =  \n    new HashSet<int>(tickets[PoolTypeEnum.RECREATION]); \nany.UnionWith(tickets[PoolTypeEnum.COMPETITION]); \nany.UnionWith(tickets[PoolTypeEnum.THERMAL]); \nany.UnionWith(tickets[PoolTypeEnum.KIDS]); \nConsole.WriteLine($\"{any.Count} people visited at least  \n    one pool.\"); \n```", "```cs\nHashSet<int> all =  \n    new HashSet<int>(tickets[PoolTypeEnum.RECREATION]); \nall.IntersectWith(tickets[PoolTypeEnum.COMPETITION]); \nall.IntersectWith(tickets[PoolTypeEnum.THERMAL]); \nall.IntersectWith(tickets[PoolTypeEnum.KIDS]); \nConsole.WriteLine($\"{all.Count} people visited all pools.\"); \n```", "```cs\n Number of visitors by a pool type:\n     - recreation: 54\n     - competition: 44\n     - thermal: 48\n     - kids: 51\n\n Pool 'recreation' was the most popular.\n 93 people visited at least one pool.\n 5 people visited all pools.\n```", "```cs\nList<string> names = new List<string>() \n{ \n    \"Marcin\", \n    \"Mary\", \n    \"James\", \n    \"Albert\", \n    \"Lily\", \n    \"Emily\", \n    \"marcin\", \n    \"James\", \n    \"Jane\" \n}; \nSortedSet<string> sorted = new SortedSet<string>( \n    names, \n    Comparer<string>.Create((a, b) =>  \n        a.ToLower().CompareTo(b.ToLower()))); \nforeach (string name in sorted) \n{ \n    Console.WriteLine(name); \n} \n```", "```cs\n    Albert\n    Emily\n    James\n    Jane\n    Lily\n    Marcin\n    Mary\n\n```"]