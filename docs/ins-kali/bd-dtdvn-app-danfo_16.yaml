- en: '*Chapter 13*: Appendix: Essential JavaScript Concepts'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第13章*：附录：基本的JavaScript概念'
- en: Welcome to the final chapter of this book. We have placed this chapter at the
    end of this book so as not to bore the experienced JavaScript developers with
    introductory concepts. This chapter should be read by developers who want a refresher
    on the basics of JavaScript before attempting to use `Danfo.js`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的最后一章。我们将这一章放在书的最后，以免让有经验的JavaScript开发人员对基础概念感到无聊。这一章应该由那些在尝试使用`Danfo.js`之前想要复习JavaScript基础知识的开发人员阅读。
- en: By the end of this chapter, you'll understand basic concepts of JavaScript that
    are essential to building applications in the language. You'll learn about data
    types, conditional branching and looping constructs, and JavaScript functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将了解JavaScript的基本概念，这些概念对于使用该语言构建应用程序至关重要。您将学习有关数据类型、条件分支和循环结构以及JavaScript函数的知识。
- en: 'Specifically, we''ll cover the following concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将涵盖以下概念：
- en: Quick overview of JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript的快速概述
- en: Understanding the fundamentals of JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解JavaScript的基本原理
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will be using the developer console for all code examples in this chapter.
    To run any code snippet in your default browser, you need to open the developer
    console. The commands for opening the console provided for various browsers are
    shown in the following list:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的所有代码示例中使用开发者控制台。要在默认浏览器中运行任何代码片段，您需要打开开发者控制台。各种浏览器打开控制台的命令如下所示：
- en: '**Google Chrome**: To open the developer console in Google Chrome, open the
    **Chrome** menu from the upper-right-hand corner of the browser window and select
    **More Tools** | **Developer Tools**. You can also use the *Option* + *Command*
    + *J* shortcut on macOS, or *Shift* + *Ctrl* + *J* on Windows/Linux.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Chrome**：要在Google Chrome中打开开发者控制台，请从浏览器窗口右上角打开**Chrome**菜单，然后选择**更多工具**
    | **开发者工具**。您还可以在macOS上使用*Option* + *Command* + *J*快捷键，或在Windows/Linux上使用*Shift*
    + *Ctrl* + *J*。'
- en: '**Microsoft Edge**: In Microsoft Edge, open the **Edge** menu in the upper-right-hand
    corner of the browser window and select **F12 Developer Tools**, or you can just
    press *F12* to open it.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Edge**：在Microsoft Edge中，打开浏览器窗口右上角的**Edge**菜单，然后选择**F12开发者工具**，或者您也可以直接按*F12*打开它。'
- en: '**Mozilla Firefox**: In Mozilla Firefox, click on the **Firefox** menu in the
    upper-right-hand corner of the browser and select **Web Developer** | **Browser****Console**.
    You can also use the *Shift* + *⌘* + *J* shortcut on macOS or *Shift* + *Ctrl*
    + *J* on Windows/Linux.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mozilla Firefox**：在Mozilla Firefox中，点击浏览器右上角的**Firefox**菜单，然后选择**Web开发者**
    | **浏览器控制台**。您还可以在macOS上使用*Shift* + *⌘* + *J*快捷键，或在Windows/Linux上使用*Shift* + *Ctrl*
    + *J*。'
- en: '**Apple Safari**: In Safari, you''ll first need to enable the **Developer**
    menu in your browser settings. To do that, open Safari''s preferences (*Safari
    Menu* | **Preferences**), select the **Advanced** tab, and then enable the **Developer**
    menu. Once that menu is enabled, you will find the developer console by clicking
    on **Develop** | **Show JavaScript Console**. You can also use the *Option* +
    *⌘* + *C* shortcut.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apple Safari**：在Safari中，您首先需要在浏览器设置中启用**开发者**菜单。要做到这一点，打开Safari的偏好设置（*Safari菜单*
    | **偏好设置**），选择**高级**选项卡，然后启用**开发者**菜单。一旦该菜单被启用，您可以通过点击**开发** | **显示JavaScript控制台**来找到开发者控制台。您还可以使用*Option*
    + *⌘* + *C*快捷键。'
- en: 'Once your developer console is open, depending on your browser, you will see
    a console similar to the one shown here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的开发者控制台打开，根据您的浏览器，您将看到一个类似于这里显示的控制台：
- en: '![Figure 13.1 – Chrome browser developer console'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.1 – Chrome浏览器开发者控制台'
- en: '](img/B17076_13_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_13_01.jpg)'
- en: Figure 13.1 – Chrome browser developer console
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 – Chrome浏览器开发者控制台
- en: With your console open, you're ready to start writing and testing JavaScript
    code. In the next section, we'll quickly go over some important concepts of the
    JavaScript language.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 打开控制台后，您就可以开始编写和测试JavaScript代码了。在下一节中，我们将快速介绍JavaScript语言的一些重要概念。
- en: Quick overview of JavaScript
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript的快速概述
- en: 'According to the *Stack Overflow 2020 Developer Survey* ([https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/](https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/)),
    **JavaScript** (also referred to as **JS**) is the most common programming language
    in the world, with approximately 70% of developers using it for one task or another.
    This statistic is not surprising as JavaScript had been the most popular language
    for a good number of years before the survey was carried out. There are many reasons
    why this is so, and we will list some of them here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*Stack Overflow 2020开发者调查*（[https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/](https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/)），**JavaScript**（也称为**JS**）是世界上最常见的编程语言，大约有70%的开发人员在某种任务中使用它。这一统计数据并不令人意外，因为在调查进行之前的许多年里，JavaScript一直是最受欢迎的语言。为什么会这样有很多原因，我们将在这里列出其中一些：
- en: It runs in the most common and readily available platform—the browser.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在最常见和最常用的平台上运行——浏览器。
- en: Numerous useful frameworks such as Node.js, React, and Angular are built around
    it.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多有用的框架如Node.js、React和Angular都是围绕它构建的。
- en: It is versatile—that is, it can be used for both frontend and backend applications.
    For example, you can use JavaScript libraries such as React, Vue, and Angular
    to build great **user interfaces** (**UIs**), while you can use server-side packages
    such as Node.jS and Deno to build efficient backend/server-side applications.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是多才多艺的——即它可以用于前端和后端应用。例如，您可以使用JavaScript库如React、Vue和Angular来构建出色的**用户界面**（**UI**），而您可以使用服务器端包如Node.jS和Deno来构建高效的后端/服务器端应用。
- en: It can be used for **Internet of Things** (**IoT**) and cross-platform mobile
    applications.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以用于**物联网**（**IoT**）和跨平台移动应用。
- en: JavaScript was initially created to be a browser-only language but has quickly
    evolved to be used almost everywhere, from frontend applications to backend applications
    with Node.js, to IoT applications, and—more recently—in the data science/**machine
    learning** (**ML**) field.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript最初被创建为仅限浏览器的语言，但很快发展成几乎可以在任何地方使用，从前端应用到具有Node.js的后端应用，再到物联网应用，以及最近的数据科学/**机器学习**（**ML**）领域。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Do not confuse JavaScript with the Java programming language ([https://en.wikipedia.org/wiki/Java_(programming_language)](https://en.wikipedia.org/wiki/Java_(programming_language))).
    Although the names may be similar, they are very much different in terms of use,
    syntax, and even semantics.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将JavaScript与Java编程语言混淆（[https://en.wikipedia.org/wiki/Java_(programming_language)](https://en.wikipedia.org/wiki/Java_(programming_language))）。尽管名称可能相似，但它们在用途、语法甚至语义上都有很大的不同。
- en: JavaScript is dynamic and event-driven and thus is the subject of numerous concerns,
    especially for programmers coming from other languages. This has led to the creation
    of languages that can be directly transpiled to JavaScript. Some of these languages
    are **TypeScript** (a language with strict data typing developed by Microsoft),
    **Dart** (a standalone language developed by Google), **CoffeeScript**, and so
    on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种动态和事件驱动的语言，因此是许多关注的焦点，特别是对于来自其他语言的程序员。这导致了创建可以直接转译为JavaScript的语言。其中一些语言是**TypeScript**（由微软开发的具有严格数据类型的语言）、**Dart**（由谷歌开发的独立语言）、**CoffeeScript**等等。
- en: Understanding the fundamentals of JavaScript
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解JavaScript的基本原理
- en: In this section, as a memory refresher, we'll quickly go over the basic concepts
    of modern JavaScript. If you are familiar with JavaScript, then you can skip this
    section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，作为记忆提醒，我们将快速介绍现代JavaScript的基本概念。如果您熟悉JavaScript，那么您可以跳过本节。
- en: As we have repeatedly mentioned, JavaScript can be used for both frontend and
    server-side scripting, so there is syntax or features that are particular to each
    environment— for instance, browser-side JavaScript does not have access to filesystems
    such as Node.js because of security reasons. So, in this section, we'll introduce
    concepts that can work in both environments/any environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们反复提到的，JavaScript可以用于前端和服务器端脚本编写，因此每个环境都有特定的语法或特性，例如，浏览器端JavaScript由于安全原因无法访问Node.js等文件系统。因此，在本节中，我们将介绍可以在两个环境/任何环境中工作的概念。
- en: Declaring variables
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明变量
- en: '`const` and `let`, although in older scripts, you''ll find the `var` keyword
    used for declaring variables. Using `var` for variable declaration is generally
    discouraged and should only be used rarely. In a later section, we will discuss
    some reasons why it is encouraged to use `let` instead of `var` in modern JavaScript.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`和`let`，尽管在旧脚本中，您会发现用于声明变量的`var`关键字。通常不鼓励使用`var`来声明变量，应该很少使用。在后面的部分中，我们将讨论为什么在现代JavaScript中鼓励使用`let`而不是`var`的一些原因。'
- en: 'The following statement declares a variable using the `let` keyword:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句使用`let`关键字声明变量：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next keyword, `const`, can be used to declare a constant variable—that is,
    a variable whose reference cannot be changed during the runtime of an application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的关键字`const`可以用于声明常量变量，即在应用程序运行时其引用不能被更改的变量。
- en: 'Some examples of `const` declarations are shown in the following code snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了一些`const`声明的示例：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Using uppercase variable names when declaring constants is a common and widely
    encouraged practice, not just in JavaScript but in many programming languages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明常量时使用大写变量名是一种常见且被广泛鼓励的做法，不仅在JavaScript中，在许多编程语言中也是如此。
- en: Data types
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型
- en: JavaScript supports eight basic types of data. Data types of declared variables
    are automatically inferred at runtime by the JavaScript compiler because JavaScript
    is a dynamically typed language. The eight supported data types are **number**,
    **string**, **Boolean**, **object**, **BigInt**, **undefined**, **null**, and
    **symbol**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持八种基本数据类型。声明变量的数据类型会在JavaScript编译器在运行时自动推断，因为JavaScript是一种动态类型语言。支持的八种数据类型是**number**、**string**、**Boolean**、**object**、**BigInt**、**undefined**、**null**和**symbol**。
- en: Number
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字
- en: 'The `number` type can represent `integers`, `floating-point numbers`, `infinity`,
    `-infinity`, and `number`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`number`类型可以表示`整数`、`浮点数`、`infinity`、`-infinity`和`number`：'
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Important note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`infinity` and `-infinity` represent mathematical positive and negative infinity
    (∞). These values are bigger than any number. You can see an example here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`infinity`和`-infinity`代表数学上的正无穷和负无穷（∞）。这些值大于任何数字。您可以在这里看到一个示例：'
- en: '`console.log(1 / 0); // Infinity`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(1 / 0); // Infinity`'
- en: 'The `NaN` sub-types represent an error in a mathematical operation with numbers—for
    instance, trying to divide a string with a number, as illustrated here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`子类型表示数字的数学运算中的错误，例如，尝试用数字除以字符串，如下所示：'
- en: '`console.log("girl" / 2); // NaN`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log("girl" / 2); // NaN`'
- en: String
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: 'Strings in JavaScript represent texts and must be surrounded with single (`''
    ''`), double (`" "`), or backtick (`'' ''`) quotes. You can see some examples
    of strings in the following code snippet:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的字符串代表文本，必须用单引号（`' '`）、双引号（`" "`）或反引号（`' '`)引号括起来。您可以在以下代码片段中看到一些字符串的示例：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The choice of double or single quotes is based on preference as they both perform
    the same function. Backticks, on the other hand, have more functionalities than
    basic quotes. They allow you to embed variables and expressions into strings easily,
    using the `${...}` template literal syntax. For example, in the following code
    snippet, we show how to easily embed `name`, `address`, and `dog_counts` variables
    in a new variable message:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 双引号或单引号的选择基于个人偏好，因为它们都具有相同的功能。另一方面，反引号比基本引号具有更多的功能。它们允许您轻松地将变量和表达式嵌入字符串中，使用`${...}`模板文字语法。例如，在以下代码片段中，我们展示了如何轻松地将`name`、`address`和`dog_counts`变量嵌入到一个新变量消息中：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: A string data type has many built-in functions for manipulating it. You can
    find many of these functions on the **Mozilla Developer Network** (**MDN**) documentation
    page ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串数据类型有许多内置函数用于操作它。您可以在**Mozilla开发者网络**（**MDN**）文档页面上找到许多这些函数（[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)）。
- en: Boolean
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔
- en: 'The Boolean data type is a logical type. It has only two values: `true` and
    `false`. Boolean values are mostly used in comparison operations and for storing
    *yes*/*no* values. Let''s look at the following example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔数据类型是一种逻辑类型。它只有两个值：`true`和`false`。布尔值主要用于比较操作和存储*是*/*否*值。让我们看下面的例子：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, let's talk about the object type.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们谈谈对象类型。
- en: Object
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象
- en: The object in JavaScript is a very special type. It is perhaps the most important
    type in JavaScript and is used in almost every aspect of the language. The object
    data type is the only non-primitive type in JavaScript. It can store keyed collections
    of different types of data, including itself.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的对象是一种非常特殊的类型。它可能是JavaScript中最重要的类型，几乎在语言的各个方面都有所应用。对象数据类型是JavaScript中唯一的非原始类型。它可以存储不同类型的数据的键控集合，包括它自己。
- en: Tip
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Primitive types in programming languages are the most basic types and generally
    store a single kind of value. Non-primitive types, on the other hand, can store
    more than one type of value and can also be extended to perform other functions.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言中的原始类型是最基本的类型，通常只存储一种类型的值。另一方面，非原始类型可以存储多种类型的值，并且还可以扩展以执行其他功能。
- en: 'There are two ways for creating objects, outlined here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种创建对象的方式，如下所述：
- en: 'The first and most common way is to use curly brackets with an optional list
    of key-value properties, as illustrated here:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种最常见的方法是使用花括号和可选的键-值属性列表，如下所示：
- en: '`let page = {}`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`let page = {}`'
- en: 'And a not so common way is by using object constructor syntax, as follows:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一种不太常见的方法是使用对象构造函数语法，如下所示：
- en: '`let page = new Object()`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`let page = new Object()`'
- en: 'Objects can be created and initialized in the same step, as shown in the following
    code snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对象可以在同一步骤中创建和初始化，如下代码片段所示：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that an object page can store numerous types of data, even other objects
    (as the owner). This shows that objects can be nested to contain more and more
    objects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对象页面可以存储多种类型的数据，甚至其他对象（作为所有者）。这表明对象可以嵌套以包含更多对象。
- en: 'To access object values, you can use square brackets, like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问对象值，可以使用方括号，如下所示：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Alternatively, you can use dot `page.rank` notation, like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用点`page.rank`表示法，如下所示：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This gives the following output:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In [*Chapter 1*](B17076_01_ePub_RK.xhtml#_idTextAnchor014), *Overview of Modern
    JavaScript*, you learned about some important properties of objects that make
    them very powerful.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B17076_01_ePub_RK.xhtml#_idTextAnchor014)中，*现代JavaScript概述*，您了解了使对象非常强大的一些重要属性。
- en: Conditional branching and loops
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件分支和循环
- en: Conditional branching and loops are important aspects of any programming language,
    and JavaScript provides them as well. To perform different actions based on some
    conditions, you can use `if`, `if..else`, conditional/ternary operators, and `switch`
    syntax. Besides conditional branching, you may want to perform repeated actions
    a specific number of times. This is where looping comes into play. JavaScript
    provides looping constructs such as `while`, `do...while`, `for..of`, `for..in`,
    and traditional `for` loops. We'll briefly cover each of these statements in the
    following section.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 条件分支和循环是任何编程语言的重要方面，JavaScript也提供了它们。为了根据某些条件执行不同的操作，您可以使用`if`、`if..else`、条件/三元运算符和`switch`语法。除了条件分支，您可能希望根据特定次数执行重复操作。这就是循环发挥作用的地方。JavaScript提供了诸如`while`、`do...while`、`for..of`、`for..in`和传统`for`循环等循环结构。我们将在下一节简要介绍这些语句。
- en: if statement
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if语句
- en: 'An `if` statement evaluates an expression, a condition, or a piece of code
    in the parentheses and will only execute the statement if it is `true`. This is
    a one-way conditional that only runs when it is true. You can see an example of
    this in the following code snippet:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句评估括号中的表达式、条件或代码片段，只有在为`true`时才执行该语句。这是一个单向条件，只有在为真时才运行。您可以在以下代码片段中看到这个例子：'
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: if...else statement
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if...else语句
- en: 'An `if...else` statement provides an extra block that runs when the initial
    condition becomes `false`. Here is an example of this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`if...else`语句在初始条件变为`false`时提供一个额外的块运行。以下是一个例子：'
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Conditional/ternary operator
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件/三元运算符
- en: 'A ternary operator is a shorter and more concise way to write an `if..else`
    statement. It is mostly used in assigning variables based on two conditions. The
    syntax for ternary operators is illustrated here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 三元运算符是一种更短、更简洁的写法，用于根据两个条件分配变量。三元运算符的语法如下所示：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the condition is true, then `val1` gets executed and assigned to `result`,
    else `val2` becomes assigned. An example of using this is shown in the following
    code snippet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件为真，则执行`val1`并将其分配给`result`，否则将分配`val2`。以下代码片段显示了使用此功能的示例：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: switch statement
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: switch语句
- en: 'A `switch` statement can be used to replace multiple `if...else` statements
    in a more concise and readable way. The syntax is shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`语句可以以更简洁和可读的方式替代多个`if...else`语句。语法如下所示：'
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The variable or expression in the `switch` parentheses is checked against each
    `case` statement, and the corresponding code is executed if the condition is true.
    The default statement gets executed when every other condition fails. The following
    code snippet shows an example of using a `switch` statement:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`括号中的变量或表达式将与每个`case`语句进行比较，如果条件为真，则执行相应的代码。当其他条件都失败时，将执行默认语句。以下代码片段显示了使用`switch`语句的示例：'
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A `break` statement after each case is important in order to stop the execution
    of succeeding cases. If you neglect the `break` statement, then the succeeding
    cases will also be executed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个case之后使用`break`语句很重要，以停止执行后续的case。如果忽略`break`语句，那么后续的case也将被执行。
- en: while loop
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while循环
- en: 'A `while` loop will execute a block of code repeatedly as long as the condition
    is true. The syntax is shown in the following code snippet:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环将重复执行一段代码，只要条件为真。语法如下所示：'
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s look at the following example of using a `while` loop:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个使用`while`循环的例子：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code will continually print out the year as long as it is less
    than or equal to `2020`. Note the `year++` part. This is important in order to
    break the `while` loop at some point.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将不断打印年份，只要它小于或等于`2020`。注意`year++`部分。这是为了在某个时刻打破`while`循环的重要部分。
- en: do…while loop
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: do...while循环
- en: 'A `do...while` loop is very similar to a `while` loop, with just one little
    difference— the body is executed at least once before the condition is tested.
    The syntax is shown here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`do...while`循环与`while`循环非常相似，只有一个小差别——在测试条件之前至少执行一次循环体。语法如下所示：'
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s look at the following example of a `do...while` loop in action:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个`do...while`循环的例子：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A `do...while` loop is important if you need to execute a piece of code at least
    once before a conditional check is carried out.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要在进行条件检查之前至少执行一次代码，则`do...while`循环很重要。
- en: Important note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Always remember to set a condition that breaks a loop at some point, else your
    loops will execute forever—theoretically, though, the browser and server side
    will stop such loops after a certain time.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 始终记得设置一个在某个时刻打破循环的条件，否则你的循环将永远执行——理论上，不过浏览器和服务器端会在一定时间后停止这样的循环。
- en: for loop
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for循环
- en: 'A `for` loop is the most popular looping construct in JavaScript. The syntax
    is shown here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环是JavaScript中最流行的循环结构。语法如下所示：'
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The syntax has three important parts, outlined as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 语法有三个重要部分，如下所示：
- en: '`let i = 0`).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let i = 0`）。'
- en: '**The condition part**: This code is checked before each loop interaction.
    If this is false, then the loop is stopped.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件部分**：在每次循环交互之前检查此代码。如果为假，则停止循环。'
- en: '**The step part**: The step is important because it will generally increase
    a counter or variable that will be tested.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤部分**：步骤很重要，因为它通常会增加一个将被测试的计数器或变量。'
- en: 'An example of using a `for` loop is given here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出了使用`for`循环的例子：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that we used a post-incremental operator (`i++)` in the step part of
    the `for` loop? This is pretty standard, and this is just shorthand for `i = i
    + 1`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在`for`循环的步骤部分使用了后增量运算符（`i++`）？这是非常标准的，这只是`i = i + 1`的简写。
- en: for...of and for...in loops
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for...of和for...in循环
- en: '`for...of` and `for...in` loops are variants of a `for` loop for iterating
    over iterables. **Iterables** are special data types such as objects, arrays,
    maps, and strings that have an iterable property—in other words, the properties
    or values can be looped through.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...of`和`for...in`循环是用于遍历可迭代对象的`for`循环的变体。**可迭代对象**是特殊的数据类型，如对象、数组、映射和字符串，具有可迭代属性——换句话说，可以循环遍历属性或值。'
- en: 'A `for...of` loop is mostly used for iterating over objects such as arrays
    and strings. The syntax is shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...of`循环主要用于遍历数组和字符串等对象。语法如下所示：'
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s look at the following example of using a `for...of` loop:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个使用`for...of`循环的例子：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A `for...in` loop is used to loop over objects. The syntax is very similar
    to a `for...of` loop, as shown in the following code snippet:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...in`循环用于遍历对象。语法与`for...of`循环非常相似，如下面的代码片段所示：'
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: A `for...in` loop should be used only with enumerables such as objects and not
    with iterables such as arrays.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...in`循环应该只用于枚举对象，而不是用于可迭代对象如数组。'
- en: 'An example of using a `for...in` loop is shown here:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`for...in`循环的例子：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Further reading
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '`for...in` and `for...of` are looping constructs that are used to iterate over
    data structures. The main difference between them is the data structure they iterate
    over. `for...in` iterates over all enumerable property keys of an object, while
    `for...of` iterates over the values of an iterable object.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...in`和`for...of`是用于遍历数据结构的循环结构。它们之间的主要区别是它们遍历的数据结构。`for...in`遍历对象的所有可枚举属性键，而`for...of`遍历可迭代对象的值。'
- en: JavaScript functions
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript函数
- en: In this section, we will learn about JavaScript functions. `console.log` built-in
    function whenever we need to print text to the console. This shows how important
    functions can be, as a single function, once defined, can be called in any way
    and any number of times to perform the same action.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习JavaScript函数。每当我们需要向控制台打印文本时，就会使用`console.log`内置函数。这显示了函数可以有多重要，因为一旦定义，单个函数可以以任何方式和任何次数调用以执行相同的操作。
- en: 'A function in JavaScript typically looks like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的函数通常如下所示：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'A function can also take a list of comma-separated parameters inside parentheses,
    which can be used to perform computation. For instance, a function with some parameters
    will typically look like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 函数还可以在括号内接受一系列逗号分隔的参数，用于执行计算。例如，具有一些参数的函数通常看起来像这样：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Some important things to note about functions are listed here:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于函数的一些重要事项：
- en: 'Variables declared inside a function are local to that function and can only
    be accessed inside the function. Here''s an example of this:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数内声明的变量只在该函数内部有效，只能在函数内部访问。以下是一个例子：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A function can access global variables. Global variables are variables declared
    outside the function scope and are available to every code block. You can see
    an example of this here:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可以访问全局变量。全局变量是在函数范围之外声明的变量，并且可以在每个代码块中使用。你可以在这里看到一个例子：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Functions can return values. This is important when a function performs some
    computation and the result needs to be used elsewhere. The functions we have been
    working with up till now mostly return nothing/undefined and they are referred
    to as void functions. Let''s look at the following example of a function returning
    a value:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可以返回值。当函数执行某些计算并且需要在其他地方使用结果时，这一点非常重要。到目前为止，我们一直在使用的函数大多返回空/未定义，并且被称为无效函数。让我们看下面的一个函数返回值的例子：
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tip
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `return` statement in a function can only return a single value at a time.
    In order to return more than one value, you can return the result as a JavaScript
    object. You can see an example of this here:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 函数中的`return`语句一次只能返回一个值。为了返回多个值，可以将结果作为JavaScript对象返回。您可以在这里看到一个示例：
- en: '`function add(num1, num2) {`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`function add(num1, num2) {`'
- en: '`let sum = num1 + num2`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`let sum = num1 + num2`'
- en: '`return {sum: sum, funcName: "add"}}`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`return {sum: sum, funcName: "add"}}`'
- en: '`let result = add(25, 30)`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`let result = add(25, 30)`'
- en: '`console.log(result)`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(result)`'
- en: '`//output`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`//输出`'
- en: '`Object { funcName: "add", sum: 55}`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object { funcName: "add", sum: 55}`'
- en: Callback functions
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回调函数
- en: 'Callbacks are very important in JavaScript. A callback is a function passed
    into another function as an argument. This argument is called to perform some
    action based on some conditions in the outer function. Let''s look at the following
    example to better understand callbacks:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 回调在JavaScript中非常重要。回调是作为参数传递给另一个函数的函数。根据外部函数中的一些条件，调用此参数来执行某些操作。让我们看下面的例子来更好地理解回调：
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the preceding code example, we created two callback functions, `showValue`
    and `error`. You can see these in use in the following code snippet:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码示例中，我们创建了两个回调函数，`showValue`和`error`。您可以在下面的代码片段中看到它们的使用：
- en: '[PRE32]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `showValue` callback function prints the argument passed to it to the console,
    while the `error` callback function prints an error message. The callback functions
    can now be used, as shown in the following code snippet:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`showValue`回调函数将传递给它的参数打印到控制台，而`error`回调函数则打印错误消息。可以像下面的代码片段中所示那样使用回调函数。'
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `printValues` function first tests if the value is greater than `0`, and
    then either calls the `showValue` or the `error` callback function.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`printValues`函数首先测试值是否大于`0`，然后调用`showValue`或`error`回调函数。'
- en: Callbacks don't just take in named functions. They can also take in anonymous
    functions; with this, it is possible to create *nested callbacks*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 回调不仅接受命名函数。它们还可以接受匿名函数；通过这种方式，可以创建*嵌套回调*。
- en: 'Let''s assume we have a `doSomething` function that does a particular task,
    and we would like to perform different operations before the task is completed.
    That means we can pass a callback function to another callback function, thereby
    creating nested callbacks, as shown in the following block of code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个`doSomething`函数执行特定任务，并且我们希望在任务完成之前执行不同的操作。这意味着我们可以将回调函数传递给另一个回调函数，从而创建嵌套回调，如下面的代码块所示：
- en: '[PRE34]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding code is what we call a *callback hell*. This approach has lots
    of issues and becomes difficult to manage. In [*Chapter 1*](B17076_01_ePub_RK.xhtml#_idTextAnchor014),
    An *Overview of Modern JavaScript*, we introduced a modern and more efficient
    way to work with callbacks by using a **application programming interface** (**API**).
    This is much cleaner and will eliminate many of the problems associated with callback
    hell.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码是我们所谓的*回调地狱*。这种方法有很多问题，变得难以管理。在[*第1章*](B17076_01_ePub_RK.xhtml#_idTextAnchor014)中，我们介绍了一种现代和更有效的方法来使用**应用程序编程接口**（**API**）来处理回调。这样做更清晰，可以消除与回调地狱相关的许多问题。
- en: Important note
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: JavaScript is asynchronous by default, thus long executing functions are queued
    and may never get executed before you need them. Callbacks are mostly used to
    continue code execution and ensure that the right result is returned.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript默认是异步的，因此长时间执行的函数会被排队，可能在你需要它们之前永远不会被执行。回调主要用于继续代码执行并确保返回正确的结果。
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced essential aspects of the JavaScript programming
    language. We started with some basic background that explained why JavaScript
    is the most popular language in the world today, as well as the various uses of
    JavaScript. Next, we looked at the fundamental concepts of the language, where
    we talked about declaring variables and also the eight data types available in
    JavaScript. Following that, we talked about branching and looping constructs in
    JavaScript and showed some examples of using them, and finally, we briefly discussed
    functions and classes in JavaScript.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了JavaScript编程语言的基本方面。我们从一些基本背景开始，解释了为什么JavaScript是当今世界上最流行的语言，以及JavaScript的各种用途。接下来，我们讨论了语言的基本概念，讨论了声明变量以及JavaScript中可用的八种数据类型。之后，我们讨论了JavaScript中的分支和循环结构，并展示了一些使用它们的示例，最后，我们简要讨论了JavaScript中的函数和类。
