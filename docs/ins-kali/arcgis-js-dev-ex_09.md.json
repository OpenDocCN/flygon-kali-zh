["```js\n        require([\"esri/TimeExtent\", ... ], \n        function(TimeExtent, ... ){\n          var timeExtent = new TimeExtent();\n          timeExtent.startTime = new Date(\"1/15/1989 UTC\");\n          map.setTimeExtent(timeExtent);\n        });\n        ```", "```js\non(droughtcMapServiceLayer, \"load\", function (evt) {\nvar layerTimeExtent = evt.layer.timeInfo.timeExtent;\n  _createEsriTimeSlider(layerTimeExtent);\n});\n```", "```js\n//Pass the time extent to the function\n\nfunction _createEsriTimeSlider(layerTimeExtent) {\n\n/*Time Slider*/\n  var timeSlider = new TimeSlider({\n    style: \"width: 100%;\"\n  }, dom.byId(\"timeSliderDiv\"));\n  map.setTimeSlider(timeSlider);\n\n/* We just need one thumb for our time aware data */\n\n  timeSlider.setThumbCount(1);\n\n//Though a weekly data is available, let us Create Time stops\n//for Yearly intervals\n//\n\ntimeSlider.createTimeStopsByTimeInterval(layerTimeExtent, 1, \"esriTimeUnitsYears\");\n\n//Waits at each stop for 2 seconds\n\n  timeSlider.setThumbMovingRate(2000);\n\n//Start the time slider animation\n\n  timeSlider.startup();\n\n  //add labels for every other time stop\n\n  var labels = array.map(timeSlider.timeStops, function (timeStop, i) {\n    if (i % 2 === 0) {\n      return timeStop.getUTCFullYear();\n    } else {\n      return \"\";\n    }\n  });\n\n  timeSlider.setLabels(labels);\n\n//Wait for the map service to load at each stop\n\n  timeSlider.on(\"time-extent-change\", function (evt) {\n    //update the text\n\n    var currentValString = evt.endTime.getUTCFullYear();\n    dom.byId(\"daterange\").innerHTML = \"<i>\" + currentValString + \"<\\/i>\";\n  });\n\n  on(droughtcMapServiceLayer, \"update-start\", function (evt) {\n\n  //When updating layer, pause the time slider animation\n\n    timeSlider.pause();\n  });\n\n  on(droughtcMapServiceLayer, \"update-end\", function (evt) {\n\n//When update is done, play the time slider animation\n\n    timeSlider.play()\n  });\n}\n```", "```js\nhttp://localhost:9095/proxy/proxy.ashx?\nhttp://earthobs1.arcgis.com/arcgis/rest/services/US_Drought/MapServer/export?\ndpi=96\n&transparent=true\n&format=png8\n&time=946944000000%2C1262563200000\n&bbox=-17599814.30461256%2C1159119.7738912208%2C-4234952.783009615%2C6765317.176437697\n&bboxSR=102100\n&imageSR=102100\n&size=1366%2C573\n&f=image\n```", "```js\n// parameters\n    var margin = {\n        top: 10,\n        right: 50,\n        bottom: 50,\n        left: 50\n      },\n      width = 800 - margin.left - margin.right,\n      height = 150 - margin.bottom - margin.top;\n\n// scale function\n    var timeScale = d3.time.scale()\n      .domain([startDate, endDate])\n      .range([0, width])\n      .clamp(true);\n```", "```js\nvar formatDate = d3.time.format(\"%Y-%m-%d\");\n```", "```js\n    // defines brush\n    var brush = d3.svg.brush()\n      .x(timeScale)    \n      .extent([startingValue, startingValue])\n      .on(\"brush\", brushed);\n```", "```js\nsvg.on(\"mousedown\", function (data) {\n      var value = brush.extent()[0];\n\n      if (d3.event.sourceEvent) { // not a programmatic event\n        value = timeScale.invert(d3.mouse(this)[0]);\n        brush.extent([value, value]);\n      }\n      console.log(formatDate(value));\n    });\n```", "```js\nfunction brushed() {\n  var value = brush.extent()[0];\n\n  if (d3.event.sourceEvent) { // not a programmatic event\n    value = timeScale.invert(d3.mouse(this)[0]);\n    brush.extent([value, value]);\n  }\n\n  handle.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n  handle.select('text').text(formatDate(value));\n  var reqValue = formatDate(value);\n\n  if (timer) {\n    clearTimeout(timer);\n  }\n  timer = setTimeout(function () {\n    //alert(reqValue);\n    topic.publish(\"application/d3slider/timeChanged\", value);\n  }, 500);\n\n}\n```", "```js\ntopic.subscribe(\"application/d3slider/timeChanged\", function () {\n  console.log(\"received:\", arguments);\n  var startDate = arguments[0];\n  if (startDate) {\n    var timeExtent = new TimeExtent();\n    timeExtent.startTime = startDate;\n    map.setTimeExtent(timeExtent);\n  }\n});\n```", "```js\ndefine([\n  \"dojo/_base/declare\",\n  \"d3\",\n  \"dojo/topic\",\n  \"dojo/_base/array\",\n  \"dojo/domReady!\"\n], function (\n    declare,  \n    d3,  \n    topic,\n    array) {\n    //http://bl.ocks.org/zanarmstrong/ddff7cd0b1220bc68a58\n\n    var isInitilaized = false;\n\n    topic.subscribe(\"application/d3slider/initialize\", function () {\n        if (!isInitilaized) {\n            console.log(\"received:\", arguments);\n            var startDate = arguments[0];\n            var endDate = arguments[1];\n\n            var formatDate = d3.time.format(\"%Y-%m-%d\");\n            var timer;\n            // parameters\n            var margin = {\n                    top: 10,\n                    right: 50,\n                    bottom: 50,\n                    left: 50\n                },\n                width = 800 - margin.left - margin.right,\n                height = 150 - margin.bottom - margin.top;\n\n            // scale function\n            var timeScale = d3.time.scale()\n                .domain([startDate, endDate])\n                .range([0, width])\n                .clamp(true);\n\n            // initial value\n            var startValue = timeScale(new Date('2012-03-20'));\n            startingValue = new Date('2012-03-20');\n\n            //////////\n\n            // defines brush\n            var brush = d3.svg.brush()\n                .x(timeScale)\n                .extent([startingValue, startingValue])\n                .on(\"brush\", brushed);\n\n            var svg = d3.select(\"#d3timeSliderDiv\").append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .append(\"g\")\n                // classic transform to position g\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n            svg.on(\"mousedown\", function (data) {\n                var value = brush.extent()[0];\n\n                if (d3.event.sourceEvent) { // not a programmatic event\n                    value = timeScale.invert(d3.mouse(this)[0]);\n                    brush.extent([value, value]);\n                }\n                console.log(formatDate(value));\n            });\n\n            svg.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                // put in middle of screen\n                .attr(\"transform\", \"translate(0,\" + height / 2 + \")\")\n                // inroduce axis\n                .call(d3.svg.axis()\n                    .scale(timeScale)\n                    .orient(\"bottom\")\n                    .tickFormat(function (d) {\n                        return formatDate(d);\n                    })\n                    .tickSize(0)\n                    .tickPadding(12)\n                    .tickValues([timeScale.domain()[0], timeScale.domain()[1]]))\n                .select(\".domain\")\n                .select(function () {\n                    console.log(this);\n                    return this.parentNode.appendChild(this.cloneNode(true));\n                })\n                .attr(\"class\", \"halo\");\n\n            var slider = svg.append(\"g\")\n                .attr(\"class\", \"slider\")\n                .call(brush);\n\n            slider.selectAll(\".extent,.resize\")\n                .remove();\n\n            slider.select(\".background\")\n                .attr(\"height\", height);\n\n            var handle = slider.append(\"g\")\n                .attr(\"class\", \"handle\");\n\n            handle.append(\"path\")\n                .attr(\"transform\", \"translate(0,\" + height / 2 + \")\")\n                .attr(\"d\", \"M 0 -20 V 20\");\n\n            handle.append('text')\n                .text(startingValue)\n                .attr(\"transform\", \"translate(\" + (-45) + \" ,\" + (height / 2 - 25) + \")\");\n\n            slider.call(brush.event);\n\n            function brushed() {\n                var value = brush.extent()[0];\n\n                if (d3.event.sourceEvent) { // not a programmatic event\n                    value = timeScale.invert(d3.mouse(this)[0]);\n                    brush.extent([value, value]);\n                }\n\n                handle.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                handle.select('text').text(formatDate(value));\n                var reqValue = formatDate(value);\n\n                if (timer) {\n                    clearTimeout(timer);\n                }\n                timer = setTimeout(function () {\n                    //alert(reqValue);\n                    topic.publish(\"application/d3slider/timeChanged\", value);\n                }, 500);\n\n            }\n            isInitilaized = true;\n        }\n    });\n});\n```", "```js\n  function initIdentify () {\n            map.on(\"click\", doIdentify);\n\n            identifyTask = new IdentifyTask(\"http://server.arcgisonline.com/arcgis/rest/services/Demographics/USA_1990-2000_Population_Change/MapServer\");\n\n            identifyParams = new IdentifyParameters();\n            identifyParams.tolerance = 1;\n            identifyParams.layerIds = [3];\n            identifyParams.returnGeometry = true;\n            identifyParams.layerOption = IdentifyParameters.LAYER_OPTION_ALL;\n            identifyParams.width = map.width;\n            identifyParams.height = map.height;\n    }\n```", "```js\nfunction doIdentify (event) {\n      map.graphics.clear();\n\n//Use the map click point for the identify task\n\n      identifyParams.geometry = event.mapPoint;\n      identifyParams.mapExtent = map.extent;\n      identifyTask.execute(identifyParams, function (results) {\n      console.log(results[0].feature.attributes);\n\n//Initiate a Query Task\n\n      var queryTask = new QueryTask(\"http://earthobs1.arcgis.com/arcgis/rest/services/US_Drought_by_County/FeatureServer/0\");\n      var query = new Query();\n      query.returnGeometry = true;\n      query.outFields = [\"*\"];\n\n//Query based on the feature id returned by the identify task\n\n      query.where = \"countycategories_admin_fips = '\"+results[0].feature.attributes.ID+\"'\";\n      query.orderByFields = [\"countycategories_date\"];\n      queryTask.execute(query).then(function(qresult){\n      console.log(qresult);\n\n//Send the query result to the topic \"some/topic\"\n\n      topic.publish(\"some/topic\", qresult);\n    });\n  });\n}\n```", "```js\ntopic.subscribe(\"some/topic\", function () {\n            var data = arguments[0];\n            var chart = new Cedar({\n                \"type\": \"time\"\n            });\n            var dataset = {\n                \"data\": data,\n                \"mappings\": {\n                    \"time\": {\n                        \"field\": \"countycategories_date\",\n                        \"label\": \"Date\"\n                    },\n                    \"value\": {\n                        \"field\": \"countycategories_d0\",\n                        \"label\": \"Countycategories D0\"\n                    },\n                    \"sort\": \"countycategories_date\"\n                }\n            };\n\n//tool tip field\n            chart.tooltip = {\n                \"title\": \"Countycategories D0\",\n                \"content\": \"{countycategories_d0}\"\n            };\n\n        chart.dataset = dataset;\n\n//show the chart\n\nchart.show({\n            elementId: \"#droughtHistoryMap\",\n            autolabels: true,\n            height:150,\n            width:800\n        });\n        chart.on('click', function(event,data){\n            console.log(event,data);\n            topic.publish(\"application/d3slider/timeChanged\", new Date(data.countycategories_date));\n        });\n    });\n```"]