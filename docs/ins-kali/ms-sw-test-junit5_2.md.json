["```java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\n@RunWith(Parameterized.class)\npublic class MyParameterizedTest {\n\n   @Test\n   public void myFirstTest() {\n      // my test code\n   }\n\n}\n```", "```java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class MySpringTest {\n\n   @Test\n   public void yetAnotherTest() {\n      // my test code\n   }\n\n}\n```", "```java\nimport org.junit.ClassRule;\nimport org.junit.Test;\nimport org.junit.rules.TemporaryFolder;\n\npublic class MyRuleTest {\n\n   @ClassRule\n   public static TemporaryFolder temporaryFolder = new TemporaryFolder();\n\n   @Test\n   public void anotherTest() {\n      // my test code\n   }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.platform.engine.EngineDiscoveryRequest;\nimport org.junit.platform.engine.ExecutionRequest;\nimport org.junit.platform.engine.TestDescriptor;\nimport org.junit.platform.engine.TestEngine;\nimport org.junit.platform.engine.UniqueId;\nimport org.junit.platform.engine.support.descriptor.EngineDescriptor;\n\npublic class MyCustomEngine implements TestEngine {\n\n    public static final String *ENGINE_ID* = \"my-custom-engine\";\n\n    @Override\n    public String getId() {\n        return *ENGINE_ID*;\n    }\n\n    @Override\n    public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest,\n            UniqueId uniqueId) {\n        // Discover test(s) and return a TestDescriptor object\n        TestDescriptor testDescriptor = new EngineDescriptor(uniqueId,\n                \"My test\");\n        return testDescriptor;\n    }\n\n    @Override\n    public void execute(ExecutionRequest request) {\n        // Use ExecutionRequest to execute TestDescriptor\n        TestDescriptor rootTestDescriptor =             \n                request.getRootTestDescriptor();\n        request.getEngineExecutionListener()\n                .executionStarted(rootTestDescriptor);\n    }\n\n}\n```", "```java\nimport static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectPackage;\n\nimport org.junit.platform.launcher.Launcher;\nimport org.junit.platform.launcher.LauncherDiscoveryRequest;\nimport org.junit.platform.launcher.TestPlan;\nimport org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\nimport org.junit.platform.launcher.core.LauncherFactory;\n\n// Discover and filter tests\nLauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder\n     .*request*()\n     .*selectors*(*selectPackage*(\"io.github.bonigarcia\"),     \n      selectClass(MyTest.class))\n     .*filters*(i*ncludeClassNamePatterns*(\".*Test\")).build();\nLauncher launcher = LauncherFactory.create();\nTestPlan plan = launcher.discover(request);\n```", "```java\nimport org.junit.platform.launcher.TestExecutionListener;\nimport org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n\n// Executing tests\nTestExecutionListener listener = new SummaryGeneratingListener();\nlauncher.registerTestExecutionListeners(listener);\nlauncher.execute(request);\n```", "```java\n<dependencies>\n   <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-api</artifactId>\n      <version>${junit.jupiter.version}</version>\n      <scope>test</scope>\n   </dependency>\n</dependencies>\n```", "```java\n<build>\n   <plugins>\n      <plugin>\n         <artifactId>maven-surefire-plugin</artifactId>\n         <version>${maven-surefire-plugin.version}</version>\n         <dependencies>\n             <dependency>\n                <groupId>org.junit.platform</groupId>\n                <artifactId>junit-platform-surefire-provider</artifactId>\n                <version>${junit.platform.version}</version>\n            </dependency>\n            <dependency>\n               <groupId>org.junit.jupiter</groupId>\n               <artifactId>junit-jupiter-engine</artifactId>\n               <version>${junit.jupiter.version}</version>\n            </dependency>\n         </dependencies>\n      </plugin>\n   </plugins>\n </build>\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass MyFirstJUnit5Test {\n\n   @Test\n   void myFirstTest() {\n       String message = \"1+1 should be equal to 2\";\n       System.*out*.println(message);\n       *assertEquals*(2, 1 + 1, message);\n   }\n\n}\n```", "```java\nbuildscript {\n   repositories {\n      mavenCentral()\n   }\n   dependencies {\n      classpath(\"org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}\")\n   }\n}\nrepositories {\n   mavenCentral()\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'org.junit.platform.gradle.plugin'\n\ncompileTestJava {\n   sourceCompatibility = 1.8\n   targetCompatibility = 1.8\n   options.compilerArgs += '-parameters'\n}\n\ndependencies {\n   testCompile(\"org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}\")\n   testRuntime(\"org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}\")\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class LegacyJUnit4Test {\n\n   @Test\n   public void myFirstTest() {\n      String message = \"1+1 should be equal to 2\";\n      System.*out*.println(message);\n      *assertEquals*(message, 2, 1 + 1);\n   }\n\n}\n```", "```java\n<dependencies>\n   <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n   </dependency>\n</dependencies>\n```", "```java\n<build>\n   <plugins>\n      <plugin>\n         <artifactId>maven-surefire-plugin</artifactId>\n         <version>${maven-surefire-plugin.version}</version>\n         <dependencies>\n            <dependency>\n               <groupId>org.junit.platform</groupId>\n               <artifactId>junit-platform-surefire-provider</artifactId>\n               <version>${junit.platform.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.junit.vintage</groupId>\n                <artifactId>junit-vintage-engine</artifactId>\n                <version>${junit.vintage.version}</version>\n            </dependency>\n         </dependencies>\n      </plugin>\n   </plugins>\n</build>\n```", "```java\nbuildscript {\n   repositories {\n      mavenCentral()\n   }\n   dependencies {\n      classpath(\"org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}\")\n   }\n}\n\nrepositories {\n   mavenCentral()\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'org.junit.platform.gradle.plugin'\n\ncompileTestJava {\n   sourceCompatibility = 1.8\n   targetCompatibility = 1.8\n   options.compilerArgs += '-parameters'\n}\n\ndependencies {\n   testCompile(\"junit:junit:${junitLegacy}\")\n   testRuntime(\"org.junit.vintage:junit-vintage-engine:${junitVintageVersion}\")\n}\n```", "```java\njava -jar junit-platform-console-standalone-version.jar <Options>\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.runner.JUnitPlatform;\nimport org.junit.runner.RunWith;\n\n@RunWith(JUnitPlatform.class)\npublic class JUnit5CompatibleTest {\n\n   @Test \n   void myTest() {\n      String message = \"1+1 should be equal to 2\";\n      System.*out*.println(message);\n *assertEquals*(2, 1 + 1, message);\n   }\n\n}\n```", "```java\n<dependencies>\n   <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-api</artifactId>\n      <version>${junit.jupiter.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter-engine</artifactId>\n       <version>${junit.jupiter.version}</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n        <groupId>org.junit.platform</groupId>\n        <artifactId>junit-platform-runner</artifactId>\n        <version>${junit.platform.version}</version>\n        <scope>test</scope>\n     </dependency>\n </dependencies>\n```", "```java\nbuildscript {\n   repositories {\n      mavenCentral()\n   }\n   dependencies {\n      classpath(\"org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}\")\n   }\n}\n\nrepositories {\n   mavenCentral()\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'org.junit.platform.gradle.plugin'\n\ncompileTestJava {\n   sourceCompatibility = 1.8\n   targetCompatibility = 1.8\n   options.compilerArgs += '-parameters'\n}\n\ndependencies {\n   testCompile(\"org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}\")\n   testRuntime(\"org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}\")\n   testCompile(\"org.junit.platform:junit-platform-runner:${junitPlatformVersion}\")\n}\n```", "```java\npackage org.junit.jupiter.api.extension;\n\nimport static org.apiguardian.api.API.Status.STABLE;\n\nimport org.apiguardian.api.API;\n\n/**\n * Marker interface for all extensions.\n *\n * @since 5.0\n */\n@API(status = STABLE, since = \"5.0\")\npublic interface Extension {\n}\n```", "```java\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\npublic class MyTest {\n\n   @ExtendWith(MyExtension.class)\n   @Test\n   public void test() {\n     // My test logic\n   }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.io.IOException;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n\npublic class IgnoreIOExceptionExtension\n   implements TestExecutionExceptionHandler {\n\n   @Override\n   public void handleTestExecutionException(ExtensionContext context,\n          Throwable throwable) throws Throwable {\n      if (throwable instanceof IOException) {\n         return;\n      }\n      throw throwable;\n   }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\npublic class ExceptionTest {\n\n   @ExtendWith(IgnoreIOExceptionExtension.class)\n   @Test\n   public void firstTest() throws IOException {\n      throw new IOException(\"IO Exception\");\n   }\n\n   @Test\n   public void secondTest() throws IOException {\n      throw new IOException(\"My IO Exception\");\n   }\n\n}\n```", "```java\npackage org.junit.jupiter.api.extension;\n\nimport static org.apiguardian.api.API.Status.STABLE;\n\nimport org.apiguardian.api.API;\n\n@FunctionalInterface\n@API(status = STABLE, since = \"5.0\")\npublic interface ExecutionCondition extends Extension {\n   ConditionEvaluationResult evaluateExecutionCondition         \n     ExtensionContext context);\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolutionException;\nimport org.junit.jupiter.api.extension.ParameterResolver;\n\npublic class MyParameterResolver implements ParameterResolver {\n\n    @Override\n    public boolean supportsParameter(ParameterContext parameterContext,\n            ExtensionContext extensionContext)\n            throws ParameterResolutionException {\n        return true;\n    }\n\n    @Override\n    public Object resolveParameter(ParameterContext parameterContext,\n            ExtensionContext extensionContext)\n            throws ParameterResolutionException {\n        return \"my parameter\";\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\npublic class DependencyInjectionTest {\n\n   @ExtendWith(MyParameterResolver.class)\n   @Test\n   public void test(Object parameter) {\n      System.*out*.println(\"My parameter \" + parameter);\n   }\n}\n```", "```java\nSpringExtension:\n```", "```java\npackage org.springframework.test.context.junit.jupiter;\n\nimport org.junit.jupiter.api.extension.*;\n\npublic class SpringExtension implements BeforeAllCallback,     \n   AfterAllCallback,\n   TestInstancePostProcessor, BeforeEachCallback, AfterEachCallback,\n   BeforeTestExecutionCallback, AfterTestExecutionCallback,\n   ParameterResolver {\n\n   @Override\n   public void afterTestExecution(TestExtensionContext context) \n    throws Exception {\n      // implementation\n   }\n\n   // Rest of methods\n}\n```"]