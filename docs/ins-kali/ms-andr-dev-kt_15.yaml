- en: Migration to Kotlin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移到Kotlin
- en: If you have a legacy project or an existing Java module that you want to migrate
    to Kotlin, migration should be easy. People who made it, thought about this. As
    you remember, Kotlin is interoperable. Because of that, some modules don't need
    full migration; instead, they can be included into a Kotlin project. It's up to
    you to decide. So, let's prepare our migration!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个遗留项目或要迁移到Kotlin的现有Java模块，迁移应该很容易。做到这一点的人已经考虑到了这一点。正如您记得的，Kotlin是可互操作的。因此，一些模块不需要完全迁移；相反，它们可以包含在Kotlin项目中。这取决于您的决定。因此，让我们准备好进行迁移！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Preparing the migration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备迁移
- en: Converting classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换类
- en: Refactoring and cleanup
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构和清理
- en: Preparing the migration
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备迁移
- en: As we said, we need to make a decision whether we will completely rewrite our
    modules into Kotlin or continue writing our code in Kotlin but keep its legacy
    in pure Java. What will we do? In this chapter, we will demonstrate a little bit
    of each.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，我们需要决定是否完全将我们的模块重写为Kotlin，还是继续用Kotlin编写代码，但保留其在纯Java中的遗留。我们会怎么做？在本章中，我们将展示一点点。
- en: 'Our current project, at this point, doesn''t have anything to migrate. So,
    we will create some code. If you don''t have the Java sources directory with the
    packages structure, create it. Now, add the following packages:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们的当前项目没有任何需要迁移的内容。因此，我们将创建一些代码。如果您没有具有包结构的Java源目录，请创建它。现在，添加以下包：
- en: '`activity`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activity`'
- en: '`model`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`'
- en: 'These packages are equivalent to the packages we already have in our Kotlin
    source code. In the `activity` package, add the following classes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包等同于我们已经在Kotlin源代码中拥有的包。在`activity`包中，添加以下类：
- en: 'The `MigrationActivity.java` code is as follows:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MigrationActivity.java`代码如下：'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`MigrationActivity2.java`: Make sure it has exactly the same implementation
    as `MigrationActivity.java`. We just need some code base to present and migrate.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MigrationActivity2.java`：确保其实现与`MigrationActivity.java`完全相同。我们只需要一些代码基础来展示和迁移。'
- en: 'Register both activities in the Android `manifest` file as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android `manifest`文件中注册两个活动，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, the Java code stands together with the Kotlin code without
    any issue. Your Android project can use both! Now, think, do you really need to
    do any conversion at all or are you fine to keep the existing Java stuff? Let''s
    add classes in the `model` package:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Java代码与Kotlin代码一起使用没有任何问题。您的Android项目可以同时使用两者！现在，请考虑一下，您是否真的需要进行任何转换，还是您愿意保留现有的Java内容？让我们在`model`包中添加类：
- en: 'The `Dummy.java` code is as follows:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dummy.java`代码如下：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `Dummy2.java` code is as follows:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dummy2.java`代码如下：'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s check again if the Kotlin part of the project sees these classes. Create
    a new `.kt` file in the root of your Kotlin sources directory. Let''s call it
    `kotlin_calls_java.kt`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次检查项目的Kotlin部分是否看到了这些类。在您的Kotlin源目录的根目录中创建一个新的`.kt`文件。让我们称之为`kotlin_calls_java.kt`：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, Kotlin doesn't have any problems using the Java code. So, if
    you still want to proceed with the migration, you can do it. No problem. We will
    do so in the following sections.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Kotlin在使用Java代码时没有任何问题。因此，如果您仍然希望进行迁移，您可以这样做。没问题。我们将在接下来的章节中这样做。
- en: Danger signs
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 危险信号
- en: Converting huge and complex Java classes into Kotlin is still an option to do.
    Anyway, provide proper unit or instrumentation tests so the functionality of these
    classes is retested after conversion. If any of your tests fails, double-check
    the causes of that failure.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将庞大和复杂的Java类转换为Kotlin仍然是一个可选项。无论如何，提供适当的单元测试或仪器测试，以便在转换后重新测试这些类的功能。如果您的任何测试失败，请仔细检查失败的原因。
- en: 'The classes you want to migrate can migrate in the following two ways:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要迁移的类可以通过以下两种方式进行迁移：
- en: Automatic conversion
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动转换
- en: Rewriting by hand
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动重写
- en: In case of huge and complex classes, both approaches can give us certain drawbacks.
    Fully automatic conversion can sometimes give you the code that is not the prettiest
    code to look at. So, after you do it, you should recheck and reformat something.
    The second option can take you a lot of time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理庞大和复杂的类时，这两种方法都可能会带来一些缺点。完全自动转换有时会给您带来不太美观的代码。因此，在完成后，您应该重新检查和重新格式化一些内容。第二个选项可能会花费您很多时间。
- en: Conclusion--you can always use the original Java code. From the moment you switch
    to Kotlin as your primary language, you can write all new stuff in Kotlin.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结论-您始终可以使用原始的Java代码。从您将Kotlin作为主要语言开始，您可以用Kotlin编写所有新的东西。
- en: Updating dependencies
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新依赖关系
- en: If you switch 100% pure Java code of the Android project into Kotlin, you have
    to start from the bottom up. This means that your first migration effort will
    be to update your dependencies. You must change your `build.gradle` configuration
    so Kotlin is recognized and source code paths are available. We already explained
    how to do this in [Chapter 1](009df95a-c7b0-4537-adf0-f6c448eb2ade.xhtml), *Starting
    with Android*, in theSetting up Gradle section; so, if your project does not have
    Kotlin-related configuration in it, you have to provide it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将Android项目的100%纯Java代码切换到Kotlin，您必须从头开始。这意味着您的第一个迁移工作将是更新您的依赖关系。您必须更改`build.gradle`配置，以便识别Kotlin并使源代码路径可用。我们已经在[第1章](009df95a-c7b0-4537-adf0-f6c448eb2ade.xhtml)中解释了如何在*开始Android*中设置Gradle部分;
    因此，如果您的项目中没有与Kotlin相关的配置，您必须提供它。
- en: 'Let''s recapitulate our Gradle configuration:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的Gradle配置：
- en: 'The `build.gradle` root project represents the main `build.gradle` file, as
    shown here:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.gradle`根项目代表了主`build.gradle`文件，如下所示：'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The main application `build.gradle` resolves all the dependencies of the application,
    as shown here:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主应用程序`build.gradle`解决了应用程序的所有依赖关系，如下所示：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These are all the Kotlin-related dependencies you should fulfil. One of them
    is Kotson, providing Kotlin bindings for the `Gson` library.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是您应该满足的与Kotlin相关的依赖关系。其中之一是Kotson，为`Gson`库提供Kotlin绑定。
- en: Converting classes
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换类
- en: 'Finally, we will migrate our classes. We have two automatic options available.
    We will use both. Locate `MigrationActivity.java` and open it. Choose the Code
    | Convert Java file to the `Kotlin` file. It takes a couple of seconds to convert.
    Now, drag and drop the file from the `Java` package into the `Kotlin` sources
    package. Observe the following source code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将迁移我们的类。我们有两种自动选项可用。我们将两种都使用。找到`MigrationActivity.java`并打开它。选择代码 | 将Java文件转换为`Kotlin`文件。转换需要几秒钟。现在，将文件从`Java`包拖放到`Kotlin`源包中。观察以下源代码：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we have mentioned, fully automatic conversion doesn't give the perfect code.
    In the next section, we will do a refactoring and clean up. The second way to
    do the same thing is by copying and pasting Java code into a `Kotlin` file. Copy
    all source code from `MigrationActivity2`. Create a new Kotlin class with the
    same name and paste the code. If asked, confirm that you wish to perform automatic
    conversion. After the code appears, remove the Java version of the class. Observe
    that the source code is the same as it is for the migrated `MigrationActivity`
    class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所提到的，完全自动转换并不能得到完美的代码。在下一节中，我们将进行重构和清理。完成相同操作的第二种方法是将Java代码复制粘贴到`Kotlin`文件中。从`MigrationActivity2`中复制所有源代码。创建一个同名的新Kotlin类并粘贴代码。如果被询问，确认你希望执行自动转换。代码出现后，删除该类的Java版本。观察到源代码与迁移后的`MigrationActivity`类相同。
- en: 'Repeat both approaches for `Dummy` and `Dummy2` classes. The classes you get
    will look like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Dummy`和`Dummy2`类重复这两种方法。你得到的类将看起来像这样：
- en: '`Dummy`, first `Dummy` class example:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dummy`，第一个`Dummy`类示例：'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Dummy2`, the second `Dummy` class example:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dummy2`，第二个`Dummy`类示例：'
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Dummy2` class has issues with conversion. In this situation, you must
    fix it by yourself. Fix the source code. The problem happened in the following
    line:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dummy2`类在转换时出现了问题。在这种情况下，你必须自己修复它。修复源代码。问题发生在以下行：'
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Fix it by switching type from `Array<Dummy2> int Array<Dummy2?>` as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将类型从`Array<Dummy2> int Array<Dummy2?>`进行切换来修复它，如下所示：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Simple!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 简单！
- en: This is exactly the challenge you may face when doing the migration! It's noticeable
    that in both `Dummy` and `Dummy2` classes, we significantly reduced the code base
    by switching to Kotlin. Since there are no Java implementations anymore, we can
    do refactoring and cleanup.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是你在进行迁移时可能会面临的挑战！显而易见的是，在`Dummy`和`Dummy2`类中，我们通过切换到Kotlin显著减少了代码库。由于不再有Java实现，我们可以进行重构和清理。
- en: Refactoring and cleanup
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构和清理
- en: To have the best possible code after conversion, we must perform refactoring
    and cleanup. We will adapt our code base to conform Kotlin standards and idioms.
    For that purpose, you must read it whole. Only when this is done, we can consider
    our migration done!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在转换后获得最佳可能的代码，我们必须进行重构和清理。我们将调整我们的代码库以符合Kotlin的标准和习惯用法。为此，你必须全面阅读它。只有在这样做之后，我们才能认为我们的迁移完成了！
- en: 'Open your classes and read the code. There is a lot of space for improvements!
    After you do some work, you should get something like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的类并阅读代码。有很多改进的空间！在你做一些工作之后，你应该得到类似这样的结果：
- en: 'The `MigrationActivity` code is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`MigrationActivity`的代码如下：'
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, there is not too much work for `MigrationActivity` (and `MigrationActivity2`).
    Both classes are really small. A bigger effort is expected for classes such as
    `Dummy` and `Dummy2`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，对于`MigrationActivity`（和`MigrationActivity2`）来说，并没有太多的工作。这两个类都非常小。对于`Dummy`和`Dummy2`这样的类，预计需要更大的努力：
- en: 'The `Dummy` class code is as follows:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dummy`类的代码如下：'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `Dummy2` class code is as follows:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dummy2`类的代码如下：'
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These two class versions are now drastically improved after refactoring compared
    to their first Kotlin versions after the conversion. Try to compare the current
    versions with the original Java code we had. What do you think?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个类版本在重构后与它们最初的Kotlin版本相比，现在得到了极大的改进。试着将当前版本与我们最初的Java代码进行比较。你觉得呢？
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered the secrets of migration to the Kotlin programming
    language. We demonstrated techniques and gave advice on how to do the migration
    and when. Luckily, for us, it appears that this is not something difficult after
    all! The next chapter will be our last, so, as you already know, it's time to
    publish our application to the world!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了迁移到Kotlin编程语言的秘密。我们演示了技术并提供了如何进行迁移以及何时进行迁移的建议。幸运的是，对我们来说，这似乎并不难！下一章将是我们的最后一章，所以，正如你已经知道的，是时候将我们的应用发布到世界上了！
