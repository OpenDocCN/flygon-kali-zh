["```js\n{\n\"integrationFolder\": \"cypress/tests\"\n}\n```", "```js\n // Module declarations\nimport {module} from 'module-package';\n // test body\ndescribe('Test Body', () => {\n\u00a0\u00a0\u00a0it('runs sample test', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(2).to.eq(2);\n\u00a0\u00a0\u00a0})\n})\n```", "```js\ndescribe('Our Sample Test', () => {\n\u00a0\u00a0it('returns true', () => {\n\u00a0\u00a0\u00a0\u00a0expect(true).to.equal(true);\n\u00a0\u00a0});\n});\n```", "```js\ndescribe('Our Passing Test', () => {\n\u00a0\u00a0it('returns true', () => {\n\u00a0\u00a0\u00a0\u00a0expect(true).to.equal(true);\n\u00a0\u00a0});\n});\n```", "```js\nnpm run cypress:open \n```", "```js\ndescribe('Our Failing Test', () => {\n\u00a0\u00a0it('returns false, () => {\n\u00a0\u00a0\u00a0\u00a0expect(true).to.equal(false);\n\u00a0\u00a0});\n});\n```", "```js\nnpm run cypress:open\n```", "```js\ndescribe.skip('Our Skipped Tests', () => {\n\u00a0\u00a0\u00a0\u00a0it('does not execute', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(true).to.equal(true);\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0it.skip('is skipped', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(true).to.equal(false);\n\u00a0\u00a0\u00a0\u00a0});\n});\n```", "```js\ndescribe('Todo Application tests', () => {\n\u00a0\u00a0it('Visits the Todo application', () => {\n\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0})\n})\n```", "```js\nit('Contains todo input element', () => {\n\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0cy.get('.new-todo')\n});\n```", "```js\nit('Adds a New Todo', () => {\n\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0cy.get('.new-todo').type('New Todo {enter}')\n});\n```", "```js\nit('asserts change in application state', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('.new-todo').type('New Todo {enter}')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('.new-todo').type(Another Todo {enter}')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".todo-list\").find('li').should('have.length', 2)\n\u00a0\u00a0\u00a0});\n```", "```js\n\u00a0\u00a0it('asserts inserted todo items are present', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\n\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('.new-todo').type('New Todo {enter}')\n\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('.new-todo').type('Another Todo {enter}')\n\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".todo-list\").find('li').should('have.length', 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('li:nth-child(1)>div>label').should(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'have.text', 'New Todo')\n\u00a0\u00a0\u00a0\u00a0\u00a0cy.get('li:nth-child(2)>div>label').should(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'have.text', 'Another Todo')\n\u00a0\u00a0\u00a0\u00a0});\n```", "```js\n{\n \"watchForFileChanges\": \"false\"\n}\n```", "```js\ncypress open --config watchForFileChanges=false\n```", "```js\ndescribe('Cypress Assertions', () => {\n\u00a0\u00a0\u00a0\u00a0it('Using Implicit subjects - should', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Check if todo input element has expected \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// placeholder value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").should('have.attr', 'placeholder',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'What needs to be done?')\n\u00a0\u00a0\u00a0\u00a0});\n});\n```", "```js\nit('Using Implicit subjects - and()', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Check if todo input element has expected\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// placeholder value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.should('have.attr', 'placeholder',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'What needs to be done?')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.and('have.class', 'new-todo')\n\u00a0\u00a0\u00a0\u00a0});\n```", "```js\nit('Using Explicit subjects', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").should( ($elem) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect($elem).to.have.class('new-todo')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect($elem).to.have.attr('placeholder','What needs \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to be done?')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0});\n```", "```js\nit('can assert explicit subjects', () => {\n\u00a0\u00a0const eqString = 'foo';\u00a0\u00a0\n\u00a0\u00a0expect(eqString).to.eq('foo');\n\u00a0\u00a0expect(eqString).to.have.lengthOF(3);\n\u00a0\u00a0expect(eqString).to.be.a('string');\n})\n```", "```js\nit('Using Should with Explicit subjects', () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.visit('http://todomvc.com/examples/react/#/')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cy.get(\".new-todo\").should( ($elem) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect($elem).to.have.class('new-todo')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n });\n```"]