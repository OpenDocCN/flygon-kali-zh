["```kt\n    val intentFilter = IntentFilter(Intent.ACTION_BATTERY_CHANGED) \n    val batteryStatus = registerReceiver(null, intentFilter) \n\n    val status = batteryStatus.getIntExtra(BatteryManager.\n      EXTRA_STATUS, -1) \n\n    val isCharging = \n                status == BatteryManager.BATTERY_STATUS_CHARGING || \n                status == BatteryManager.BATTERY_STATUS_FULL \n\n    val chargePlug =    batteryStatus.getIntExtra(BatteryManager.\n      EXTRA_PLUGGED, -1) \n    val usbCharge = chargePlug == BatteryManager.\n      BATTERY_PLUGGED_USB \n    val acCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_AC\n```", "```kt\n    val receiver = object : BroadcastReceiver() { \n      override fun onReceive(p0: Context?, batteryStatus: Intent?) { \n      val status = batteryStatus?.getIntExtra\n      (BatteryManager.EXTRA_STATUS, -1) \n                 val isCharging = \n                        status == \n                        BatteryManager.BATTERY_STATUS_CHARGING || \n                        status == BatteryManager.BATTERY_STATUS_FULL \n                        val chargePlug = batteryStatus?.getIntExtra\n                       (BatteryManager.EXTRA_PLUGGED, -1) \n                        val usbCharge = chargePlug ==\n                       BatteryManager.BATTERY_PLUGGED_USB \n                       val acCharge = chargePlug == \n                       BatteryManager.BATTERY_PLUGGED_AC \n        } \n    } \n\n    val intentFilter = IntentFilter(Intent.ACTION_BATTERY_CHANGED) \n    registerReceiver(receiver, intentFilter)\n```", "```kt\n    <receiver android:name=\".OurPowerReceiver\"> \n      <intent-filter> \n        <action android:name=\"android.intent.action.\n        ACTION_POWER_CONNECTED\"/> \n        <action android:name=\"android.intent.action.\n        ACTION_POWER_DISCONNECTED\"/> \n      </intent-filter> \n    </receiver>\n```", "```kt\n        <receiver android:name=\".OurBootReceiver\"\n          android:exported=\"true\"> \n          <intent-filter> \n            <action android:name=\n            \"android.intent.action.BOOT_COMPLETED\"/> \n            ... \n            <action android:name=\"...\"/> \n            <action android:name=\"...\"/> \n            <action android:name=\"...\"/> \n\n         </intent-filter> \n\n       </receiver> \n```", "```kt\n     val receiver = object : BroadcastReceiver() { \n        override fun onReceive(ctx: Context?, intent: Intent?) { \n            // Handle your received code. \n\n        } \n    }\n```", "```kt\n    val myReceiver = object : BroadcastReceiver(){ \n\n      ... \n\n     }We need intent filter prepared: \n     val filter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\n     registerReceiver(myReceiver, filter)\n```", "```kt\n    LocalBroadcastManager \n      .getInstance(applicationContext) \n      .registerReceiver(myReceiver, intentFilter)\n```", "```kt\n    LocalBroadcastManager \n      .getInstance(applicationContext) \n      .unregisterReceiver(myReceiver)\n```", "```kt\n     class AsyncReceiver : BroadcastReceiver() { \n       override fun onReceive(p0: Context?, p1: Intent?) { \n         val pending = goAsync() \n         val async = object : AsyncTask<Unit, Unit, Unit>() { \n           override fun doInBackground(vararg p0: Unit?) { \n             // Do some intensive work here... \n             pending.finish() \n           } \n       } \n       async.execute() \n      }\n    } \n```", "```kt\n    val intent = Intent() \n    intent.action = \"com.journaler.broadcast.TODO_CREATED\" \n    intent.putExtra(\"title\", \"Go, buy some lunch.\") \n    intent.putExtra(\"message\", \"For lunch we have chicken.\")\n    sendBroadcast(intent)\n```", "```kt\n    com.journaler.broadcast.TODO_CREATED\n```", "```kt\n    val ctx = ... \n    val broadcastManager = LocalBroadcastManager.getInstance(ctx) \n    val intent = Intent() \n    intent.action = \"com.journaler.broadcast.TODO_CREATED\" \n    intent.putExtra(\"title\", \"Go, buy some lunch.\") \n    intent.putExtra(\"message\", \"For lunch we have chicken.\") \n    broadcastManager.sendBroadcast(intent)\n```", "```kt\n     class NoteActivity : ItemActivity() { \n       ... \n       private val locationListener = object : LocationListener { \n         override fun onLocationChanged(p0: Location?) { \n           p0?.let { \n                LocationProvider.unsubscribe(this) \n                location = p0 \n                val title = getNoteTitle() \n                val content = getNoteContent() \n                note = Note(title, content, p0) \n\n                // Switching to intent service. \n                val dbIntent = Intent(this@NoteActivity,\n                DatabaseService::class.java) \n                dbIntent.putExtra(DatabaseService.EXTRA_ENTRY, note) \n                dbIntent.putExtra(DatabaseService.EXTRA_OPERATION,\n                MODE.CREATE.mode) \n                startService(dbIntent) \n                sendMessage(true) \n            } \n        } \n\n        override fun onStatusChanged(p0: String?, p1: Int, p2: Bundle?)\n        {} \n        override fun onProviderEnabled(p0: String?) {} \n        override fun onProviderDisabled(p0: String?) {} \n      } \n      ... \n      private fun updateNote() { \n        if (note == null) { \n            if (!TextUtils.isEmpty(getNoteTitle()) &&\n             !TextUtils.isEmpty(getNoteContent())) { \n               LocationProvider.subscribe(locationListener) \n            } \n        } else { \n            note?.title = getNoteTitle() \n            note?.message = getNoteContent() \n\n            // Switching to intent service. \n            val dbIntent = Intent(this@NoteActivity,\n            DatabaseService::class.java) \n            dbIntent.putExtra(DatabaseService.EXTRA_ENTRY, note) \n            dbIntent.putExtra(DatabaseService.EXTRA_OPERATION,\n            MODE.EDIT.mode) \n            startService(dbIntent) \n            sendMessage(true) \n        } \n      } \n      ... \n    }\n```", "```kt\n    interface Crud<T> { \n      companion object { \n        val BROADCAST_ACTION = \"com.journaler.broadcast.crud\" \n        val BROADCAST_EXTRAS_KEY_CRUD_OPERATION_RESULT = \"crud_result\" \n      } \n       ... \n    }\n```", "```kt\n     class DatabaseService : IntentService(\"DatabaseService\") { \n       ... \n       override fun onHandleIntent(p0: Intent?) { \n          p0?.let { \n            val note = p0.getParcelableExtra<Note>(EXTRA_ENTRY) \n            note?.let { \n                val operation = p0.getIntExtra(EXTRA_OPERATION, -1) \n                when (operation) { \n                    MODE.CREATE.mode -> { \n                        val result = Db.insert(note) \n                        if (result) { \n                            Log.i(tag, \"Note inserted.\") \n                        } else { \n                            Log.e(tag, \"Note not inserted.\") \n                        } \n                        broadcastResult(result) \n                    } \n                    MODE.EDIT.mode -> { \n                        val result = Db.update(note) \n                        if (result) { \n                            Log.i(tag, \"Note updated.\") \n                        } else { \n                            Log.e(tag, \"Note not updated.\") \n                        } \n                        broadcastResult(result) \n                    } \n                    else -> { \n                        Log.w(tag, \"Unknown mode [ $operation ]\") \n                    } \n                 } \n             } \n           } \n        } \n        ... \n        private fun broadcastResult(result: Boolean) { \n          val intent = Intent() \n          intent.putExtra( \n                Crud.BROADCAST_EXTRAS_KEY_CRUD_OPERATION_RESULT, \n                if (result) { \n                    1 \n                } else { \n                    0 \n                } \n          ) \n        } }\n```", "```kt\n   class NoteActivity : ItemActivity() { \n     ... \n     private val crudOperationListener = object : BroadcastReceiver() { \n        override fun onReceive(ctx: Context?, intent: Intent?) { \n            intent?.let { \n                val crudResultValue =\n                intent.getIntExtra(MODE.EXTRAS_KEY, 0) \n                sendMessage(crudResultValue == 1) \n            } \n        } \n      } \n      ... \n      override fun onCreate(savedInstanceState: Bundle?) { \n        .... \n        registerReceiver(crudOperationListener, intentFiler) \n      } \n\n      override fun onDestroy() { \n        unregisterReceiver(crudOperationListener) \n        super.onDestroy() \n      } \n      ... \n      private fun sendMessage(result: Boolean) { \n         Log.v(tag, \"Crud operation result [ $result ]\") \n         val msg = handler?.obtainMessage() \n         if (result) { \n            msg?.arg1 = 1 \n         } else { \n            msg?.arg1 = 0 \n         } \n         handler?.sendMessage(msg) \n     } }\n```", "```kt\n    <manifest  \n     ... \n    > \n    ... \n    <receiver \n        android:name=\".receiver.BootReceiver\" \n        android:enabled=\"true\" \n        android:exported=\"false\"> \n        <intent-filter> \n          <action android:name=\n           \"android.intent.action.BOOT_COMPLETED\" /> \n        </intent-filter> \n\n        <intent-filter> \n          <action android:name=\n          \"android.intent.action.PACKAGE_REPLACED\" /> \n          data android:scheme=\"package\" /> \n        </intent-filter> \n\n        <intent-filter> \n          <action android:name=\n          \"android.intent.action.PACKAGE_ADDED\" /> \n          <data android:scheme=\"package\" /> \n        </intent-filter> \n     </receiver> \n\n    <receiver android:name=\".receiver.ShutdownReceiver\"> \n\n      <intent-filter> \n        <action android:name=\n        \"android.intent.action.ACTION_SHUTDOWN\" /> \n        <action android:name=\n        \"android.intent.action.QUICKBOOT_POWEROFF\" /> \n      </intent-filter> \n    </receiver> \n     ...\n    </manifest> \n```", "```kt\n     package com.journaler.receiver \n\n     import android.content.BroadcastReceiver \n     import android.content.Context \n     import android.content.Intent \n     import android.util.Log \n\n     class BootReceiver : BroadcastReceiver() { \n\n       val tag = \"Boot receiver\" \n\n       override fun onReceive(p0: Context?, p1: Intent?) { \n         Log.i(tag, \"Boot completed.\") \n         // Perform your on boot stuff here. \n       } \n\n     } \n```", "```kt\n    package com.journaler.receiver \n\n    import android.content.BroadcastReceiver \n    import android.content.Context \n    import android.content.Intent \n    import android.util.Log \n\n    class ShutdownReceiver : BroadcastReceiver() { \n\n      val tag = \"Shutdown receiver\" \n\n      override fun onReceive(p0: Context?, p1: Intent?) { \n        Log.i(tag, \"Shutting down.\") \n        // Perform your on cleanup stuff here.   \n      } }\n```", "```kt\n    class Journaler : Application() { \n      ... \n      override fun onCreate() { // We removed start service method\n        execution. \n        super.onCreate() \n        ctx = applicationContext \n        Log.v(tag, \"[ ON CREATE ]\") \n     } \n     // We removed startService() method implementation. \n     ... \n    }\n```", "```kt\n    class MainActivity : BaseActivity() { \n      ... \n      override fun onCreate(savedInstanceState: Bundle?) { \n        ... \n        val serviceIntent = Intent(this, MainService::class.java) \n        startService(serviceIntent) \n     } \n    ... } }\n```", "```kt\n... I/Shutdown receiver: Shutting down. \n... I/Boot receiver: Boot completed.\n```", "```kt\n    class NetworkReceiver : BroadcastReceiver() {\n      private val tag = \"Network receiver\"\n      private var service: MainService? = null\n\n      private val serviceConnection = object : ServiceConnection { \n        override fun onServiceDisconnected(p0: ComponentName?) { \n          service = null \n        } \n\n        override fun onServiceConnected(p0: ComponentName?, binder:\n        IBinder?) { \n            if (binder is MainService.MainServiceBinder) { \n                service = binder.getService() \n                service?.synchronize() \n            } \n        } \n       } \n\n       override fun onReceive(context: Context?, p1: Intent?) { \n       context?.let { \n\n            val cm = context.getSystemService\n           (Context.CONNECTIVITY_SERVICE) as ConnectivityManager \n\n            val activeNetwork = cm.activeNetworkInfo \n            val isConnected = activeNetwork != null &&\n            activeNetwork.isConnectedOrConnecting \n            if (isConnected) { \n                Log.v(tag, \"Connectivity [ AVAILABLE ]\") \n                if (service == null) { \n                    val intent = Intent(context,\n                    MainService::class.java) \n                    context.bindService( \n                        intent, serviceConnection,\n                        android.content.Context.BIND_AUTO_CREATE \n                    ) \n                } else { \n                    service?.synchronize() \n                } \n            } else { \n                Log.w(tag, \"Connectivity [ UNAVAILABLE ]\") \n                context.unbindService(serviceConnection) \n            } \n          } \n        } \n    }\n```", "```kt\n     class Journaler : Application() { \n       ... \n       override fun onCreate() { \n          super.onCreate() \n          ctx = applicationContext \n          Log.v(tag, \"[ ON CREATE ]\") \n          val filter =  \n          IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION) \n          registerReceiver(networkReceiver, filter) \n      } \n      ... \n    } \n```", "```kt\n... V/Network receiver: Connectivity [ AVAILABLE ] \n... V/Network receiver: Connectivity [ AVAILABLE ] \n... V/Network receiver: Connectivity [ AVAILABLE ] \n... W/Network receiver: Connectivity [ UNAVAILABLE ] \n... V/Network receiver: Connectivity [ AVAILABLE ] \n... V/Network receiver: Connectivity [ AVAILABLE ] \n... V/Network receiver: Connectivity [ AVAILABLE ] \n```"]