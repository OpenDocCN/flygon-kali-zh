- en: Chapter 8. Monitoring and Controlling Your Devices from a Smart Phone
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。从智能手机监控和控制您的设备
- en: In previous chapters, we have seen projects that are being controlled from web
    interfaces. Now in this chapter, we will see how to control your Arduino and Raspberry
    Pi from a native application in Android, using platforms in order to create apps
    to control and monitor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经看到了从Web界面控制的项目。现在在本章中，我们将看到如何从Android的本机应用程序中控制您的Arduino和树莓派，使用平台来创建应用程序以进行控制和监视。
- en: 'In this chapter, we will see different projects and applications using Android
    tools, the topics that will be covered are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到使用Android工具的不同项目和应用程序，将涵盖的主题如下：
- en: Controlling a relay from a smart phone using APP Inventor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用APP Inventor从智能手机控制继电器
- en: Reading JSON response in Android Studio using Ethernet shield
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android Studio中读取JSON响应使用以太网盾
- en: Controlling a DC motor from an Android application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Android应用程序控制直流电机
- en: Controlling outputs from Android using your Raspberry Pi Zero
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用您的树莓派Zero从Android控制输出
- en: Controlling outputs with Raspberry Pi via Bluetooth
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过蓝牙使用树莓派控制输出
- en: Controlling a relay from a smart phone using APP Inventor
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用APP Inventor从智能手机控制继电器
- en: In this section, we will see how to create an Android application using **APP
    Inventor** to control a relay connected to the Arduino board.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用**APP Inventor**创建一个Android应用程序来控制连接到Arduino板的继电器。
- en: Hardware requirements
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件要求
- en: 'Hardware required for the project are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 项目所需的硬件如下：
- en: Relay module
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继电器模块
- en: Arduino UNO board
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino UNO板
- en: Ethernet shield
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网盾
- en: Some cables
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些电缆
- en: Software requirements
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件要求
- en: 'Software required for the project are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 项目所需的软件如下：
- en: Software Arduino IDE
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件Arduino IDE
- en: You need a Gmail account activated
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要激活Gmail帐户
- en: Creating our first application
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个应用程序
- en: App Inventor for Android is an open source web application originally provided
    by Google, and now maintained by the Massachusetts Institute of Technology (MIT).
    It allows newcomers to computer programming to create software applications for
    the Android operating system (OS). It uses a graphical interface, very similar
    to Scratch and the StarLogo TNG user interface, which allows users to drag-and-drop
    visual objects to create an application that can run on Android devices. In creating
    App Inventor, Google drew upon significant prior research in educational computing,
    as well as work done within Google on online development environments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: App Inventor for Android是由Google最初提供的开源网络应用程序，现在由麻省理工学院（MIT）维护。它允许初学者为Android操作系统（OS）创建软件应用程序。它使用图形界面，非常类似于Scratch和StarLogo
    TNG用户界面，允许用户拖放可视对象以创建可以在Android设备上运行的应用程序。在创建App Inventor时，Google利用了在教育计算领域的重要先前研究，以及Google在在线开发环境方面的工作。
- en: You don’t need to install any software for APP inventor to execute in your computer;
    you just need your Gmail account to access the APP inventor interface.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需在计算机上安装任何软件来执行APP Inventor；您只需要您的Gmail帐户来访问APP Inventor界面。
- en: 'To enter APP Inventor you just need to go to: [http://appinventor.mit.edu/explore/](http://appinventor.mit.edu/explore/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入APP Inventor，只需访问：[http://appinventor.mit.edu/explore/](http://appinventor.mit.edu/explore/)。
- en: Go to create apps to start designing the app.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 转到创建应用程序开始设计应用程序。
- en: 'First we need to have an account with Gmail; we need to create the file like
    we see in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个Gmail帐户；我们需要创建如下图所示的文件：
- en: '![Creating our first application](graphics/B05170_08_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个应用程序](graphics/B05170_08_01.jpg)'
- en: 'Go to menu **Projects** and **Start New Project**:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 转到菜单**项目**和**开始新项目**：
- en: '![Creating our first application](graphics/B05170_08_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个应用程序](graphics/B05170_08_02.jpg)'
- en: 'Write the name of the project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 写下项目的名称：
- en: '![Creating our first application](graphics/B05170_08_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个应用程序](graphics/B05170_08_03.jpg)'
- en: 'In the following screenshot, we write the name of our project as **aREST**:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们将项目的名称写为**aREST**：
- en: '![Creating our first application](graphics/B05170_08_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个应用程序](graphics/B05170_08_04.jpg)'
- en: 'On pressing **OK**, we will see the project created:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**确定**，我们将看到项目已创建：
- en: '![Creating our first application](graphics/B05170_08_05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个应用程序](graphics/B05170_08_05.jpg)'
- en: Designing the interface
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计界面
- en: 'Now it''s time to see how to create the interface of the application, after
    we create the project we click on the name of the project, and we will then see
    the following screen:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看如何创建应用程序的界面了，创建项目后，我们点击项目名称，然后会看到以下屏幕：
- en: '![Designing the interface](graphics/B05170_08_06.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![设计界面](graphics/B05170_08_06.jpg)'
- en: 'In the user interface that we have on the left-hand side (you can see all the
    objects), to move an object to the main screen you just drag **Web Viewer** and
    **Button**, as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧的用户界面中（您可以看到所有对象），要将对象移动到主屏幕，只需拖动**Web Viewer**和**Button**，如下图所示：
- en: '![Designing the interface](graphics/B05170_08_07.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设计界面](graphics/B05170_08_07.jpg)'
- en: In the previous screenshot, we can see the interface of the app that we will
    use to control our Arduino board.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张屏幕截图中，我们可以看到我们将用来控制Arduino板的应用程序界面。
- en: Communicating APP Inventor with Arduino ethernet shield
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用APP Inventor与Arduino以太网盾通信
- en: Now we will see how to communicate the application with Arduino via Ethernet
    networking.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何通过以太网网络与Arduino通信应用程序。
- en: 'In the properties of the **Web Viewer** control, we will see the home URL:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Web Viewer**控件的属性中，我们将看到主页URL：
- en: '![Communicating APP Inventor with Arduino ethernet shield](graphics/B05170_08_08a.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用APP Inventor与Arduino以太网盾通信](graphics/B05170_08_08a.jpg)'
- en: 'In both controls we have the URL of our Arduino Ethernet shield, we will make
    a request using the `RESTful` services, and we will send the following requests
    from the application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个控件中，我们有我们的Arduino以太网盾的URL，我们将使用`RESTful`服务发出请求，并将从应用程序发送以下请求：
- en: '`http://192.168.1.110/digital/7/1`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://192.168.1.110/digital/7/1`'
- en: '`http://192.168.1.110/digital/7/0`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://192.168.1.110/digital/7/0`'
- en: Code for APP Inventor
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APP Inventor的代码
- en: The blocks editor in the original version ran in a separate Java process, using
    the `Open Blocks Java` library for creating visual blocks programming languages
    and programming.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 原始版本的块编辑器在单独的Java进程中运行，使用`Open Blocks Java`库创建可视块编程语言和编程。
- en: 'We have the code for APP inventor, when we click the buttons we call the web
    service, to do that you just need to do the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击按钮时，我们有APP发明者的代码，为了做到这一点，你只需要做以下事情：
- en: Go to the screen interface that says **Blocks**
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到显示**块**的屏幕界面
- en: Drag the `When...Do` block one per button
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个按钮拖动`当...执行`模块
- en: Inside the block that you just dragged before, put the `Call...WebViewer.GoToUrl`
    block
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在刚刚拖动的模块内部，放置`Call...WebViewer.GoToUrl`模块
- en: In the URL of the block, put the `WebViewer.HomeUrl` block
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模块的URL中，放置`WebViewer.HomeUrl`模块
- en: 'To close the application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭应用程序：
- en: Drag the `When...Button.Click Do` block
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖动`当...按钮点击时执行`模块
- en: And inside the block put the close application block
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并在模块内部放置关闭应用程序模块
- en: '![Code for APP Inventor](graphics/B05170_08_09.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![APP Inventor的代码](graphics/B05170_08_09.jpg)'
- en: 'We will have the following results when we open a web browser:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开Web浏览器时，我们将得到以下结果：
- en: '![Code for APP Inventor](graphics/B05170_08_10.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![APP Inventor的代码](graphics/B05170_08_10.jpg)'
- en: 'The following screenshot shows the application running on a mobile phone:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了应用程序在手机上运行的情况：
- en: '![Code for APP Inventor](graphics/B05170_08_11.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![APP Inventor的代码](graphics/B05170_08_11.jpg)'
- en: 'The following image shows the final results with the connections:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了连接的最终结果：
- en: '![Code for APP Inventor](graphics/B05170_08_12.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![APP Inventor的代码](graphics/B05170_08_12.jpg)'
- en: Reading JSON response in Android Studio using ethernet shield
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用以太网盾在Android Studio中读取JSON响应
- en: In this section, we will see how to read responses reading from the Arduino
    board and reading in Android Studio.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何从Arduino板读取响应并在Android Studio中读取。
- en: 'Before we continue with the next part, we need to do the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续下一部分之前，我们需要做以下事情：
- en: 'Instal the IDE of Android Studio,which can be obtained from: [https://developer.android.com/studio/index.html?hl=es-419](https://developer.android.com/studio/index.html?hl=es-419)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Android Studio的IDE，可以从以下网址获取：[https://developer.android.com/studio/index.html?hl=es-419](https://developer.android.com/studio/index.html?hl=es-419)
- en: Get the latest SDK for Android Studio
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取Android Studio的最新SDK
- en: 'Then we will create a project in Android Studio, as shown in the following
    screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在Android Studio中创建一个项目，如下截图所示：
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_13.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![使用以太网盾在Android Studio中读取JSON响应](graphics/B05170_08_13.jpg)'
- en: 'We then select the version of the API that we want to use and click the **Next**
    button:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后选择我们想要使用的API版本并单击**下一步**按钮：
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_14.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![使用以太网盾在Android Studio中读取JSON响应](graphics/B05170_08_14.jpg)'
- en: 'Then select a **Blank Activity** and click on the **Next** button:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后选择**空白活动**并单击**下一步**按钮：
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_15.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![使用以太网盾在Android Studio中读取JSON响应](graphics/B05170_08_15.jpg)'
- en: 'Type the name of your Activity and the Layout, and then click the **Finish**
    button:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的Activity和Layout的名称，然后单击**完成**按钮：
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_16.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![使用以太网盾在Android Studio中读取JSON响应](graphics/B05170_08_16.jpg)'
- en: Android application
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android应用程序
- en: In this section, we will see the android application. In your folder, open the
    file of the project about Android Studio.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到Android应用程序。在您的文件夹中，打开关于Android Studio的项目文件。
- en: 'We have here the XML code generated in the code of the interface:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是界面代码生成的XML代码：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Java class
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java类
- en: 'When we create the project, some class are generated automatically, as we will
    see in the following lines:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建项目时，一些类会自动生成，我们将在以下行中看到：
- en: 'Name of the class:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类的名称：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Main class:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主类：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this part of the code from the android application, we request for the value:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android应用程序的这一部分中，我们请求值：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We define the objects that will be included in the main activity, in this case
    it is the `mWebView` control, it is defined in the main activity of the application:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义将包含在主活动中的对象，在这种情况下是`mWebView`控件，它在应用程序的主活动中定义：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Permission of the application
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序的权限
- en: 'In order to give permission to the application to execute networking permissions,
    it''s necessary that we add the following line in the Android Manifest file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给予应用程序执行网络权限的权限，我们需要在Android清单文件中添加以下行：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the application is debugged and installed on the device, we will see the
    following results on our screen, displaying the value of the `temperature`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序在设备上调试和安装后，我们将在屏幕上看到以下结果，显示`温度`的值：
- en: '![Permission of the application](graphics/B05170_08_17.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序的权限](graphics/B05170_08_17.jpg)'
- en: 'The value of the `humidity`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`湿度`的值：'
- en: '![Permission of the application](graphics/B05170_08_18.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序的权限](graphics/B05170_08_18.jpg)'
- en: Controlling a DC motor using  an Android Application
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android应用程序控制直流电机
- en: 'In this section, we will have an application to link our smart phone with the
    Bluetooth of the phone, it''s called **Amarino** and you can get it from: [http://www.amarino-toolkit.net/index.php/home.html](http://www.amarino-toolkit.net/index.php/home.html).
    We will also see how to control a DC motor from an Android application, let''s
    dive into it!'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将有一个应用程序来将我们的智能手机与手机的蓝牙连接起来，它被称为**Amarino**，你可以从以下网址获取：[http://www.amarino-toolkit.net/index.php/home.html](http://www.amarino-toolkit.net/index.php/home.html)。我们还将看到如何从Android应用程序控制直流电机，让我们深入研究一下！
- en: Hardware requirements
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件要求
- en: 'In the following diagram, we see the following circuit (L293D) is used to control
    the speed and the turning of the motor:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们看到以下电路（L293D）用于控制电机的速度和转向：
- en: '![Hardware requirements](graphics/B05170_08_19.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![硬件要求](graphics/B05170_08_19.jpg)'
- en: 'In the following figure, we have the final connections of the circuit to the
    Arduino board:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们有电路连接到Arduino板的最终连接：
- en: '![Hardware requirements](graphics/B05170_08_20.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![硬件要求](graphics/B05170_08_20.jpg)'
- en: 'The final interface is shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最终界面显示在以下截图中：
- en: '![Hardware requirements](graphics/B05170_08_21.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![硬件要求](graphics/B05170_08_21.jpg)'
- en: 'The final results are shown in the following image with the connections:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果显示在以下图像中，带有连接：
- en: '![Hardware requirements](graphics/B05170_08_22.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![硬件要求](graphics/B05170_08_22.jpg)'
- en: Controlling outputs from android using your Raspberry Pi Zero
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi Zero从Android控制输出
- en: In this section, we will see how to control our outputs connected to the Raspberry
    Pi, using the  `control.js` script running in the `Node.js` server.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用在`Node.js`服务器中运行的`control.js`脚本来控制连接到Raspberry Pi的输出。
- en: 'The request that we need to control over the LED output using the android application
    are as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Android应用程序控制LED输出的请求如下：
- en: '`http://192.168.1.111:8099/ledon`'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http://192.168.1.111:8099/ledon`'
- en: '`http://192.168.1.111:8099/ledoff`![Controlling outputs from android using
    your Raspberry Pi Zero](graphics/B05170_08_23.jpg)'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http://192.168.1.111:8099/ledoff`![使用Raspberry Pi Zero从Android控制输出](graphics/B05170_08_23.jpg)'
- en: 'The interface created in APP Inventor will be similar to the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在APP Inventor中创建的界面将类似于以下截图：
- en: '![Controlling outputs from android using your Raspberry Pi Zero](graphics/B05170_08_24.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![使用Raspberry Pi Zero从Android控制输出](graphics/B05170_08_24.jpg)'
- en: 'The final circuit connections would look like the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最终电路连接将如以下截图所示：
- en: '![Controlling outputs from android using your Raspberry Pi Zero](graphics/B05170_08_25.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![使用Raspberry Pi Zero从Android控制输出](graphics/B05170_08_25.jpg)'
- en: Controlling outputs with Raspberry Pi via Bluetooth
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过蓝牙使用Raspberry Pi控制输出
- en: Things go a different route as soon as you’re trying to communicate with other
    electronic gadgets that uses Bluetooth modules connected to the serial port of
    the Raspberry Pi.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您尝试与使用蓝牙模块连接到Raspberry Pi的串行端口的其他电子设备进行通信，情况就会有所不同。
- en: These modules are very cheap to buy, the actual module is the green board that
    sits on the breakout board in my model. The pure HC-05 will only work on *3.3V*
    levels, not with *5V-TTL*-levels. So one would need level shifters (again).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块非常便宜，实际模块是坐落在我的模型的插板上的绿色板。纯HC-05只能在*3.3V*电平上工作，而不能在*5V-TTL*电平上工作。因此，人们需要电平转换器（再次）。
- en: In this section, we will communicate the Raspberry Pi Zero to the Bluetooth
    module, and connect the pins **TX** and **RX** of the Raspberry Pi.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将Raspberry Pi Zero与蓝牙模块进行通信，并连接Raspberry Pi的**TX**和**RX**引脚。
- en: 'First, we need to configure the file of the system to make some changes in
    order to activate the communication of the Raspberry Pi Zero TX and RX:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要配置系统文件，进行一些更改以激活Raspberry Pi Zero TX和RX的通信：
- en: '![Controlling outputs with Raspberry Pi via Bluetooth](graphics/B05170_08_26.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![通过蓝牙使用Raspberry Pi控制输出](graphics/B05170_08_26.jpg)'
- en: Controlling lights from an Android Application
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Android应用程序控制灯光
- en: 'We need to download the Bluetooth Terminal, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要下载蓝牙终端，如下截图所示：
- en: '![Controlling lights from an Android Application](graphics/B05170_08_27.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![从Android应用程序控制灯光](graphics/B05170_08_27.jpg)'
- en: 'The following screenshot shows the results of sending the numbers 1, 2, 3,
    4, 5, and 6:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了发送数字1、2、3、4、5和6的结果：
- en: '![Controlling lights from an Android Application](graphics/B05170_08_28.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![从Android应用程序控制灯光](graphics/B05170_08_28.jpg)'
- en: 'The following image shows the final part of the project and the connections
    with the HC05 module and the Raspberry Pi Zero:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了项目的最终部分以及与HC05模块和Raspberry Pi Zero的连接：
- en: '![Controlling lights from an Android Application](graphics/B05170_08_29.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![从Android应用程序控制灯光](graphics/B05170_08_29.jpg)'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to control your Arduino and Raspberry Pi Zero
    from a smartphone using Android Studio and APP inventor, via Bluetooth and Ethernet
    communication. We also looked at several projects such as controlling a motor,
    controlling a relay module, and reading humidity and temperature. For future projects
    you can now control and monitor anything you want in any area of the application
    you want.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用Android Studio和APP inventor通过蓝牙和以太网通信从智能手机控制Arduino和Raspberry Pi
    Zero。我们还研究了几个项目，如控制电机、控制继电器模块以及读取湿度和温度。对于未来的项目，您现在可以在应用程序的任何区域控制和监视任何您想要的东西。
- en: In the next chapter, we will integrate everything from the previous chapters
    and put it all together to integrate all the knowledge applying all the things.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将整合前几章的所有内容，并将所有知识应用到一起。
