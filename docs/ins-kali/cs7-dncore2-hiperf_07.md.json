["```cs\nInstall-Package Polly\n```", "```cs\n[Route(\"api/[controller]\")] \npublic class UserController : Controller \n{ \n\n  HttpClient _client; \n  public UserController(HttpClient client) \n  { \n    _client = client; \n  } \n\n  // POST api/values \n  [HttpPost] \n  public void Post([FromBody]User user) \n  { \n\n    //Email service URL \n    string emailService = \"http://localhost:80/api/Email\"; \n\n    //Serialize user object into JSON string \n    HttpContent content = new StringContent(JsonConvert.SerializeObject(user)); \n\n    //Setting Content-Type to application/json \n    _client.DefaultRequestHeaders \n    .Accept \n    .Add(new MediaTypeWithQualityHeaderValue(\"application/json\")); \n\n    int maxRetries = 3; \n\n    //Define Retry policy and set max retries limit and duration between each retry to 3 seconds \n    var retryPolicy = Policy.Handle<HttpRequestException>().WaitAndRetryAsync(\n    maxRetries, sleepDuration=> TimeSpan.FromSeconds(3)); \n\n    //Call service and wrap HttpClient PostAsync into retry policy \n    retryPolicy.ExecuteAsync(async () => { \n      var response =  _client.PostAsync(emailService, content).Result; \n      response.EnsureSuccessStatusCode(); \n    }); \n\n  }    \n}\n```", "```cs\npublic class User \n{ \n  public string FirstName { get; set; } \n  public string LastName { get; set; } \n  public string EmailAddress { get; set; }  \n  public string UserName { get; set; } \n  public string Password { get; set; } \n}  \n```", "```cs\nvar circuitBreakerPolicy = Policy.HandleResult<HttpResponseMessage>(result => !result.IsSuccessStatusCode) \n  .CircuitBreakerAsync(3, TimeSpan.FromSeconds(10), OnBreak, OnReset, OnHalfOpen); \n```", "```cs\nprivate void OnBreak(DelegateResult<HttpResponseMessage> responseMessage, TimeSpan timeSpan) \n{ \n  //Log to file system \n} \nprivate void OnReset() \n{ \n  //log to file system \n} \nprivate void OnHalfOpen() \n{ \n  // log to file system \n}\n```", "```cs\nservices.AddSingleton<HttpClient>(); \n  services.AddSingleton<CircuitBreakerPolicy<HttpResponseMessage>>(circuitBreakerPolgicy);\n```", "```cs\npublic class UserController : Controller \n{ \n  HttpClient _client; \n  CircuitBreakerPolicy<HttpResponseMessage> _circuitBreakerPolicy; \n  public UserController(HttpClient client, \n  CircuitBreakerPolicy<HttpResponseMessage> circuitBreakerPolicy) \n  { \n    _client = client; \n    _circuitBreakerPolicy = circuitBreakerPolicy; \n  } \n} \n```", "```cs\n// POST api/values \n[HttpPost] \npublic async Task<IActionResult> Post([FromBody]User user) \n{ \n\n  //Email service URL \n  string emailService = \"http://localhost:80/api/Email\"; \n\n  //Serialize user object into JSON string \n  HttpContent content = new StringContent(JsonConvert.SerializeObject(user)); \n\n  //Setting Content-Type to application/json \n  _client.DefaultRequestHeaders \n  .Accept \n  .Add(new MediaTypeWithQualityHeaderValue(\"application/json\")); \n\n  //Execute operation using circuit breaker \n  HttpResponseMessage response = await _circuitBreakerPolicy.ExecuteAsync(() => \n  _client.PostAsync(emailService, content)); \n\n  //Check if response status code is success \n  if (response.IsSuccessStatusCode) \n  { \n    var result = response.Content.ReadAsStringAsync(); \n    return Ok(result); \n  } \n\n  //If the response status is not success, it returns the actual state \n  //followed with the response content \n  return StatusCode((int)response.StatusCode, response.Content.ReadAsStringAsync()); \n} \n```", "```cs\npublic void ConfigureServices(IServiceCollection services) \n{ \n\n  var circuitBreakerPolicy = Policy.HandleResult<HttpResponseMessage>(\n  result => !result.IsSuccessStatusCode) \n  .AdvancedCircuitBreaker(0.1, TimeSpan.FromSeconds(60),5, TimeSpan.FromSeconds(10), \n  OnBreak, OnReset, OnHalfOpen); \n  services.AddSingleton<HttpClient>(); \n  services.AddSingleton<CircuitBreakerPolicy<HttpResponseMessage>>(circuitBreakerPolicy); \n}\n```", "```cs\npublic interface IResilientHttpClient \n{ \n  HttpResponseMessage Get(string uri); \n\n  HttpResponseMessage Post<T>(string uri, T item); \n\n  HttpResponseMessage Delete(string uri); \n\n  HttpResponseMessage Put<T>(string uri, T item); \n} \n```", "```cs\npublic class ResilientHttpClient : IResilientHttpClient \n{ \n\n  static CircuitBreakerPolicy<HttpResponseMessage> _circuitBreakerPolicy; \n  static Policy<HttpResponseMessage> _retryPolicy; \n  HttpClient _client; \n\n  public ResilientHttpClient(HttpClient client, \n  CircuitBreakerPolicy<HttpResponseMessage> circuitBreakerPolicy) \n  { \n    _client = client; \n    _client.DefaultRequestHeaders.Accept.Clear(); \n    _client.DefaultRequestHeaders.Accept.Add(\n    new MediaTypeWithQualityHeaderValue(\"application/json\")); \n\n    //circuit breaker policy injected as defined in the Startup class \n    _circuitBreakerPolicy = circuitBreakerPolicy; \n\n    //Defining retry policy \n    _retryPolicy = Policy.HandleResult<HttpResponseMessage>(x => \n    { \n      var result = !x.IsSuccessStatusCode; \n      return result; \n    })\n    //Retry 3 times and for each retry wait for 3 seconds \n    .WaitAndRetry(3, sleepDuration => TimeSpan.FromSeconds(3)); \n\n  } \n} \n```", "```cs\nExecuteWithRetryandCircuitBreaker method:\n```", "```cs\n//Wrap function body in Retry and Circuit breaker policies \npublic HttpResponseMessage ExecuteWithRetryandCircuitBreaker(string uri, Func<HttpResponseMessage> func) \n{ \n\n  var res = _retryPolicy.Wrap(_circuitBreakerPolicy).Execute(() => func()); \n  return res; \n} \n```", "```cs\npublic HttpResponseMessage Get(string uri) \n{ \n  //Invoke ExecuteWithRetryandCircuitBreaker method that wraps the code \n  //with retry and circuit breaker policies \n  return ExecuteWithRetryandCircuitBreaker(uri, () => \n  { \n    try \n    { \n      var requestMessage = new HttpRequestMessage(HttpMethod.Get, uri); \n      var response = _client.SendAsync(requestMessage).Result; \n      return response; \n    }\n    catch(Exception ex) \n    { \n      //Handle exception and return InternalServerError as response code \n      HttpResponseMessage res = new HttpResponseMessage(); \n      res.StatusCode = HttpStatusCode.InternalServerError;   \n      return res; \n    } \n  }); \n} \n\n//To do HTTP POST request \npublic HttpResponseMessage Post<T>(string uri, T item) \n{ \n  //Invoke ExecuteWithRetryandCircuitBreaker method that wraps the code \n  //with retry and circuit breaker policies \n  return ExecuteWithRetryandCircuitBreaker(uri, () => \n  { \n    try \n    { \n      var requestMessage = new HttpRequestMessage(HttpMethod.Post, uri); \n\n      requestMessage.Content = new StringContent(JsonConvert.SerializeObject(item), \n      System.Text.Encoding.UTF8, \"application/json\"); \n\n      var response = _client.SendAsync(requestMessage).Result; \n\n      return response; \n\n    }catch (Exception ex) \n    { \n      //Handle exception and return InternalServerError as response code \n      HttpResponseMessage res = new HttpResponseMessage(); \n      res.StatusCode = HttpStatusCode.InternalServerError; \n      return res; \n    } \n  }); \n} \n\n//To do HTTP PUT request \npublic HttpResponseMessage Put<T>(string uri, T item) \n{ \n  //Invoke ExecuteWithRetryandCircuitBreaker method that wraps \n  //the code with retry and circuit breaker policies \n  return ExecuteWithRetryandCircuitBreaker(uri, () => \n  { \n    try \n    { \n      var requestMessage = new HttpRequestMessage(HttpMethod.Put, uri); \n\n      requestMessage.Content = new StringContent(JsonConvert.SerializeObject(item), \n      System.Text.Encoding.UTF8, \"application/json\"); \n\n      var response = _client.SendAsync(requestMessage).Result; \n\n      return response; \n    } \n    catch (Exception ex) \n    { \n    //Handle exception and return InternalServerError as response code \n    HttpResponseMessage res = new HttpResponseMessage(); \n    res.StatusCode = HttpStatusCode.InternalServerError; \n    return res; \n    } \n\n  }); \n} \n\n//To do HTTP DELETE request \npublic HttpResponseMessage Delete(string uri) \n{ \n  //Invoke ExecuteWithRetryandCircuitBreaker method that wraps the code \n  //with retry and circuit breaker policies \n  return ExecuteWithRetryandCircuitBreaker(uri, () => \n  { \n    try \n    { \n      var requestMessage = new HttpRequestMessage(HttpMethod.Delete, uri); \n\n      var response = _client.SendAsync(requestMessage).Result; \n\n      return response; \n\n    } \n    catch (Exception ex) \n    { \n      //Handle exception and return InternalServerError as response code \n      HttpResponseMessage res = new HttpResponseMessage(); \n      res.StatusCode = HttpStatusCode.InternalServerError; \n      return res; \n    } \n  }); \n\n} \n```", "```cs\npublic void ConfigureServices(IServiceCollection services) \n{ \n\n  var circuitBreakerPolicy = Policy.HandleResult<HttpResponseMessage>(x=> { \n    var result = !x.IsSuccessStatusCode; \n    return result; \n  }) \n  .CircuitBreaker(3, TimeSpan.FromSeconds(60), OnBreak, OnReset, OnHalfOpen); \n\n   services.AddSingleton<HttpClient>(); \n   services.AddSingleton<CircuitBreakerPolicy<HttpResponseMessage>>(circuitBreakerPolicy); \n\n   services.AddSingleton<IResilientHttpClient, ResilientHttpClient>(); \n   services.AddMvc(); \n   services.AddSwaggerGen(c => \n   { \n     c.SwaggerDoc(\"v1\", new Info { Title = \"User Service\", Version = \"v1\" }); \n   }); \n } \n```", "```cs\n[Route(\"api/[controller]\")] \npublic class UserController : Controller \n{ \n\n  IResilientHttpClient _resilientClient; \n\n  HttpClient _client; \n  CircuitBreakerPolicy<HttpResponseMessage> _circuitBreakerPolicy; \n  public UserController(HttpClient client, IResilientHttpClient resilientClient) \n  { \n    _client = client; \n    _resilientClient = resilientClient; \n\n  } \n\n  // POST api/values \n  [HttpPost] \n  public async Task<IActionResult> Post([FromBody]User user) \n  { \n\n    //Email service URL \n    string emailService = \"http://localhost:80/api/Email\"; \n\n    var response = _resilientClient.Post(emailService, user); \n    if (response.IsSuccessStatusCode) \n    { \n      var result = response.Content.ReadAsStringAsync(); \n      return Ok(result); \n    } \n\n    return StatusCode((int)response.StatusCode, response.Content.ReadAsStringAsync()); \n\n  } \n} \n```", "```cs\nstatic FallbackPolicy<HttpResponseMessage> _fallbackPolicy; \nstatic FallbackPolicy<HttpResponseMessage> _fallbackCircuitBreakerPolicy; \n```", "```cs\n_fallbackCircuitBreakerPolicy = Policy<HttpResponseMessage> \n.Handle<BrokenCircuitException>() \n.Fallback(new HttpResponseMessage(HttpStatusCode.OK) \n  { \n    Content = new StringContent(\"Please try again later[Circuit breaker is Open]\") \n  } \n);\n```", "```cs\n_fallbackPolicy = Policy.HandleResult<HttpResponseMessage>(r => r.StatusCode == HttpStatusCode.InternalServerError) \n.Fallback(new HttpResponseMessage(HttpStatusCode.OK) { \n  Content = new StringContent(\"Some error occured\") \n}); \n\n```", "```cs\npublic HttpResponseMessage ExecuteWithRetryandCircuitBreaker(string uri, Func<HttpResponseMessage> func) \n{ \n\n  PolicyWrap<HttpResponseMessage> resiliencePolicyWrap = \n  Policy.Wrap(_retryPolicy, _circuitBreakerPolicy); \n\n  PolicyWrap<HttpResponseMessage> fallbackPolicyWrap = \n  _fallbackPolicy.Wrap(_fallbackCircuitBreakerPolicy.Wrap(resiliencePolicyWrap)); \n\n  var res = fallbackPolicyWrap.Execute(() => func()); \n  return res; \n}\n```", "```cs\nstatic TimeoutPolicy<HttpResponseMessage> _timeoutPolicy; \n```", "```cs\n_timeoutPolicy = Policy.Timeout<HttpResponseMessage>(1); \n```", "```cs\npublic HttpResponseMessage ExecuteWithRetryandCircuitBreaker(string uri, Func<HttpResponseMessage> func) \n{ \n\n  PolicyWrap<HttpResponseMessage> resiliencePolicyWrap = \n  Policy.Wrap(_timeoutPolicy, _retryPolicy, _circuitBreakerPolicy); \n\n  PolicyWrap<HttpResponseMessage> fallbackPolicyWrap = \n  _fallbackPolicy.Wrap(_fallbackCircuitBreakerPolicy.Wrap(resiliencePolicyWrap)); \n\n  var res = fallbackPolicyWrap.Execute(() => func()); \n  return res; \n} \n```", "```cs\nprivate IPolicyRegistry<string> _registry; \n```", "```cs\n_registry = new PolicyRegistry();\nservices.AddSingleton(_registry);\n```", "```cs\nPolly.Caching.MemoryCache.MemoryCacheProvider memoryCacheProvider = new MemoryCacheProvider(memoryCache); \n\nCachePolicy<HttpResponseMessage> cachePolicy = Policy.Cache<HttpResponseMessage>(memoryCacheProvider, TimeSpan.FromMinutes(10)); \n```", "```cs\n_registry.Add(\"cache\", cachePolicy); \n```", "```cs\nCachePolicy<HttpResponseMessage> _cachePolicy;\n```", "```cs\npublic UserController(HttpClient client, IResilientHttpClient resilientClient, IPolicyRegistry<string> registry) \n{ \n  _client = client; \n  // _circuitBreakerPolicy = circuitBreakerPolicy; \n  _resilientClient = resilientClient; \n\n  _cachePolicy = registry.Get<CachePolicy<HttpResponseMessage>>(\"cache\"); \n} \n```", "```cs\n[HttpGet] \npublic async Task<IActionResult> Get() \n{ \n  //Specify the name of the Response. If the method is taking    \n  //parameter, we can append the actual parameter to cache unique \n  //responses separately \n  Context policyExecutionContext = new Context($\"GetUsers\"); \n\n  var response = _cachePolicy.Execute(()=>   \n  _resilientClient.Get(\"http://localhost:7637/api/users\"), policyExecutionContext); \n  if (response.IsSuccessStatusCode) \n  { \n    var result = response.Content.ReadAsStringAsync(); \n    return Ok(result); \n  } \n\n  return StatusCode((int)response.StatusCode, response.Content.ReadAsStringAsync()); \n}\n```", "```cs\nMicrosoft.AspNetCore.HealthChecks\n```", "```cs\nservices.AddHealthChecks(checks => \n{ \n  checks.AddUrlCheck(Configuration[\"UserServiceURL\"]); \n  checks.AddUrlCheck(Configuration[\"EmailServiceURL\"]); \n}); \n```", "```cs\nservices.AddHealthChecks(checks => \n{ \n  checks.AddValueTaskCheck(\"HTTP Endpoint\", () => new \n  ValueTask<IHealthCheckResult>(HealthCheckResult.Healthy(\"Ok\"))); \n});\n```", "```cs\npublic static IWebHost BuildWebHost(string[] args) => \nWebHost.CreateDefaultBuilder(args) \n.UseHealthChecks(\"/hc\") \n.UseStartup<Startup>() \n.Build(); \n```", "```cs\nWindows: %APPDATA%microsoftUserSecrets{userSecretsId}secrets.json\nLinux: ~/.microsoft/usersecrets/{userSecretsId}/secrets.json\nMac: ~/.microsoft/usersecrets/{userSecretsId}/secrets.json\n```", "```cs\n{ \n  \"Logging\": { \n    \"IncludeScopes\": false, \n    \"Debug\": { \n      \"LogLevel\": { \n        \"Default\": \"Warning\" \n      } \n    }, \n    \"Console\": { \n      \"LogLevel\": { \n        \"Default\": \"Warning\" \n      } \n    } \n  }, \n  \"EmailServiceURL\": \"http://localhost:6670/api/values\", \n  \"UserServiceURL\": \"http://localhost:6546/api/user\", \n  \"ConnectionString\": \"Server=OVAISPC\\sqlexpress;Database=FraymsVendorDB;\n  User Id=sa;Password=P@ssw0rd;\" \n} \n\n```", "```cs\nusing Microsoft.Extensions.Configuration;\n```", "```cs\npublic Startup(IConfiguration configuration) \n{ \n  Configuration = configuration; \n} \npublic IConfiguration Configuration { get; } \n```", "```cs\nvar UserServicesURL = Configuration[\"UserServiceURL\"] \nservices.AddEntityFrameworkSqlServer() \n.AddDbContext<VendorDBContext>(options => \n{ \n  options.UseSqlServer(Configuration[\"ConnectionString\"], \n  sqlServerOptionsAction: sqlOptions => \n  { \n    sqlOptions.MigrationsAssembly(typeof(Startup)\n    .GetTypeInfo().Assembly.GetName().Name); \n    sqlOptions.EnableRetryOnFailure(maxRetryCount: 10, \n    maxRetryDelay: TimeSpan.FromSeconds(30), errorNumbersToAdd: null); \n  }); \n}, ServiceLifetime.Scoped \n); \n} \n```", "```cs\nservices.AddMvc(options => \n{ \n  options.Filters.Add(new RequireHttpsAttribute()) \n}); \nlaunchSettings.json file to use the HTTPS port and enable SSL for our project. One way to do this is to enable SSL from the Debug tab in the Visual Studio project properties window, which is shown as follows:\n```", "```cs\n{ \n  \"iisSettings\": { \n    \"windowsAuthentication\": false, \n    \"anonymousAuthentication\": true, \n    \"iisExpress\": { \n      \"applicationUrl\": \"http://localhost:3743/\", \n      \"sslPort\": 44326 \n    } \n  }, \n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\nservices.AddMvc(options => { options.Filters.Add(new ValidateAntiForgeryTokenAttribute()); });\n }\n```", "```cs\n[HttpPost]\n\n[ValidateAntiForgeryToken]\npublic async Task<IActionResult> Submit()\n{\n  return View();\n}\nCORS (Cross Origin Security)\n```", "```cs\nngrok http -host-header localhost 7204\n```", "```cs\napp.UseHsts(options => options.MaxAge(days:365).IncludeSubdomains());\n```", "```cs\napp.UseXContentTypeOptions();\n```", "```cs\napp.UseXfo(options => options.SameOrigin());\n```", "```cs\napp.UseXXssProtection(options => options.EnabledWithBlockMode());\n```", "```cs\napp.UseCsp(options => options\n.DefaultSources(s => s.Self())\n.ScriptSources(s => s.Self()));\n```", "```cs\napp.UseCsp(options => options\n  .DefaultSources(s => s.Self()).ScriptSources(s => s.Self().CustomSources(\"https://ajax.googleapis.com\")));\n```", "```cs\napp.UseReferrerPolicy(opts => opts.NoReferrer());\n```", "```cs\nservices.AddCors(); \n```", "```cs\napp.UseCors(config => { \n  config.AllowAnyHeader(); \n  config.AllowAnyMethod(); \n  config.AllowAnyOrigin(); \n  config.AllowCredentials(); \n});\n```", "```cs\nservices.AddCors(config => \n{ \n  //Allow only HTTP GET Requests \n  config.AddPolicy(\"AllowOnlyGet\", builder => \n  { \n    builder.AllowAnyHeader(); \n    builder.WithMethods(\"GET\"); \n    builder.AllowAnyOrigin(); \n  }); \n\n  //Allow only those requests coming from techframeworx.com \n  config.AddPolicy(\"Techframeworx\", builder => { \n    builder.AllowAnyHeader(); \n    builder.AllowAnyMethod(); \n    builder.WithOrigins(\"http://techframeworx.com\"); \n  }); \n});\n```", "```cs\n[EnableCors(\"AllowOnlyGet\")] \npublic class SampleController : Controller \n{ \n\n } \n```", "```cs\npublic void ConfigureServices(IServiceCollection services) \n{ \n  services.AddDbContext<ApplicationDbContext>(options => \n  options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"))); \n\n  services.AddIdentity<ApplicationUser, IdentityRole>() \n  .AddEntityFrameworkStores<ApplicationDbContext>() \n  .AddDefaultTokenProviders(); \n\n  services.AddMvc() \n  .AddRazorPagesOptions(options => \n  { \n    options.Conventions.AuthorizeFolder(\"/Account/Manage\"); \n    options.Conventions.AuthorizePage(\"/Account/Logout\"); \n  }); \n\n  services.AddSingleton<IEmailSender, EmailSender>(); \n} \n```", "```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env) \n{ \n  if (env.IsDevelopment()) \n  { \n    app.UseBrowserLink(); \n    app.UseDeveloperExceptionPage(); \n    app.UseDatabaseErrorPage(); \n  } \n  else \n  { \n    app.UseExceptionHandler(\"/Error\"); \n  } \n\n  app.UseStaticFiles(); \n\n  app.UseAuthentication(); \n\n  app.UseMvc(); \n} \n```", "```cs\npublic class ApplicationUser : IdentityUser \n{ \n  public string FirstName { get; set; } \n  public string LastName { get; set; } \n  public string MobileNumber { get; set; } \n} \n```"]