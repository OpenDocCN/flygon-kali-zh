- en: Portainer - A GUI for Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Portainer - Docker的图形用户界面
- en: 'In this chapter, we will take a look at Portainer. **Portainer** is a tool
    that allows you to manage Docker resources from a web interface. The topics that
    will be covered are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Portainer。Portainer是一个允许您从Web界面管理Docker资源的工具。将涵盖的主题如下：
- en: The road to Portainer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通往Portainer的道路
- en: Getting Portainer up and running
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动和运行Portainer
- en: Using Portainer and Docker Swarm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Portainer和Docker Swarm
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As in previous chapters, we will continue to use our local Docker installations.
    Also, the screenshots in this chapter will be from my preferred operating system,
    macOS. Towards the end of the chapter, we will use Docker Machine and VirtualBox
    to launch a local Docker Swarm cluster.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的章节一样，我们将继续使用本地的Docker安装。此外，本章中的截图将来自我首选的操作系统macOS。在本章的最后，我们将使用Docker Machine和VirtualBox启动本地Docker
    Swarm集群。
- en: As before, the Docker commands we will be running will work on all three of
    the operating systems have installed Docker on so far—however some of the supporting
    commands, which will be few and far between, may only apply to macOS and Linux
    based operating system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们将运行的Docker命令将适用于迄今为止安装了Docker的三种操作系统，但是一些支持命令可能只适用于基于macOS和Linux的操作系统。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2yWAdQV](http://bit.ly/2yWAdQV)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2yWAdQV](http://bit.ly/2yWAdQV)'
- en: The road to Portainer
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通往Portainer的道路
- en: Before we roll up our sleeves and dive into installing and using Portainer,
    we should discuss the background of the project. The first edition of this book
    covered Docker UI. Docker UI was written by Michael Crosby, who handed the project
    over to Kevan Ahlquist after about a year of development. It was at this stage,
    due to trademark concerns, that the project was renamed UI for Docker.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装和使用Portainer之前，我们应该讨论一下项目的背景。本书的第一版涵盖了Docker UI。Docker UI是由Michael Crosby编写的，大约一年后，他将项目移交给了Kevan
    Ahlquist。正是在这个阶段，由于商标问题，该项目被重命名为UI for Docker。
- en: Development of UI for Docker continued up until the point Docker started to
    accelerate the introduction of features such as Swarm mode into the core Docker
    Engine. It was around this time that the UI for Docker project was forked into
    the project that would become Portainer, which had its first major release in
    June 2016.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的UI开发一直持续到Docker开始加速引入Swarm模式等功能到核心Docker引擎。大约在这个时候，UI for Docker项目被分叉成了将成为Portainer的项目，Portainer在2016年6月发布了第一个重要版本。
- en: Since their first public release, the team behind Portainer estimate the majority
    of the code has already been updated or rewritten, and by mid-2017, new features
    were added, such as role-based controls and Docker Compose support.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自从首次公开发布以来，Portainer团队估计大部分代码已经更新或重写，并且到2017年中期，已经添加了新功能，例如基于角色的控制和Docker Compose支持。
- en: In December 2016, a notice was committed to the UI for Docker GitHub repository
    stating that the project is now deprecated and that Portainer should be used.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年12月，UI for Docker GitHub存储库提交了一份通知，说明该项目现在已被弃用，应该使用Portainer。
- en: Getting Portainer up and running
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和运行Portainer
- en: 'We are first going to be looking at using Portainer to manage a single Docker
    instance running locally. I am running Docker for Mac so I will be using that,
    but these instructions should also work with other Docker installations:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将看看如何使用Portainer来管理本地运行的单个Docker实例。我正在使用Docker for Mac，所以我将使用它，但这些说明也适用于其他Docker安装：
- en: 'First of all, to grab the container image from the Docker Hub we just need
    to run the following commands:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，要从Docker Hub获取容器镜像，我们只需要运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see when we ran the `docker image ls` command, the Portainer image
    is only 58.7MB. To launch Portainer, we simply have to run the following command
    if you are running macOS or Linux:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您在运行`docker image ls`命令时所见，Portainer镜像只有58.7MB。要启动Portainer，如果您正在运行macOS或Linux，只需运行以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Windows users will have to run the following:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows用户需要运行以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see from the command we have just run, we are mounting the socket
    file for the Docker Engine on our Docker Host machine. Doing this will allow Portainer
    full unrestricted access to the Docker Engine on our host machine. It needs this
    so it can manage Docker on the host; however, it does mean that your Portainer
    container has full access to your host machine, so be careful in how you give
    access to it and also when publicly exposing Portainer on remote hosts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如您刚刚运行的命令所示，我们正在挂载Docker引擎的套接字文件到我们的Docker主机机器上。这样做将允许Portainer完全无限制地访问主机上的Docker引擎。它需要这样做才能管理主机上的Docker；但是，这也意味着您的Portainer容器可以完全访问您的主机机器，因此在如何授予其访问权限以及在远程主机上公开Portainer时要小心。
- en: 'The screenshot below shows this being executed on macOS:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了在macOS上执行此操作：
- en: '![](Images/f63b2904-5c6a-44d2-a8ab-b8c16cbc2d7d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f63b2904-5c6a-44d2-a8ab-b8c16cbc2d7d.png)'
- en: For the most basic type of installation, that is all we need to run. There are
    a few more steps to complete the installation; they are all performed in the browser.
    To complete them, go to [http://localhost:9000/](http://localhost:9000/).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最基本的安装类型，这就是我们需要运行的全部内容。完成安装还需要进行一些步骤；所有这些步骤都是在浏览器中完成的。要完成这些步骤，请转到[http://localhost:9000/](http://localhost:9000/)。
- en: The first screen you will be greeted by asks you to set a password for the admin
    user.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先看到的屏幕要求您为管理员用户设置密码。
- en: 'Once you have set the password, you will be taken to a login page: enter the
    username `admin` and the password you just configured. Once logged in, you will
    be asked about the Docker instance you wish to manage. There are two options:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置密码后，您将被带到登录页面：输入用户名`admin`和刚刚配置的密码。登录后，您将被询问您希望管理的Docker实例。有两个选项：
- en: Manage the Docker instance where Portainer is running
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Portainer正在运行的Docker实例
- en: Manage a remote Docker instance
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理远程Docker实例
- en: 'For the moment, we want to manage the instance where Portainer is running,
    which is the Local option, rather than the default Remote one:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们想要管理Portainer正在运行的实例，即本地选项，而不是默认的远程选项：
- en: '![](Images/033eadfb-a669-42ea-adb8-ee1b7dd00bdf.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/033eadfb-a669-42ea-adb8-ee1b7dd00bdf.png)'
- en: As we have already taken mounting the Docker socket file into account when launching
    our Portainer container, we can click on **Connect** to complete our installation.
    This will take us straight into Portainer itself, showing us the dashboard.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在启动Portainer容器时已经考虑了挂载Docker套接字文件，我们可以点击**连接**来完成我们的安装。这将直接带我们进入Portainer本身，显示仪表板。
- en: Using Portainer
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Portainer
- en: Now that we have Portainer running and configured to communicate with our Docker
    installation, we can start to work through the features listed in the left-hand
    side menu, starting at the top with the Dashboard, which is also the default landing
    page of your Portainer installation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行并配置了Portainer与我们的Docker安装进行通信，我们可以开始逐个使用左侧菜单中列出的功能，从仪表板开始，这也是您的Portainer安装的默认登录页面。
- en: The Dashboard
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板
- en: 'As you can see from the following screenshot, the **Dashboard** gives us an
    overview of the current state of the Docker instance that Portainer is configured
    to communicate with:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从下面的截图中可以看到，**仪表板**为我们提供了与Portainer配置通信的Docker实例的当前状态概览：
- en: '![](Images/1dd6011f-fe9c-43e5-aad4-3d00627cf26e.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1dd6011f-fe9c-43e5-aad4-3d00627cf26e.png)'
- en: In my case, this shows how many **Containers** I have running, which at the
    moment is just the already running Portainer container, as well as the number
    of images I have downloaded. We can also see the number of **Volumes** and **Networks**
    available on the Docker instance, also it will show the number of running **Stacks**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，这显示了我正在运行的**容器**数量，目前只有已经运行的Portainer容器，以及我已经下载的**镜像**数量。我们还可以看到Docker实例上可用的**卷**和**网络**的数量，还会显示正在运行的**堆栈**的数量。
- en: It also shows basic information on the Docker instance itself; as you can see,
    the Docker instance is running Moby Linux, has two CPUs and 2 GB of RAM. This
    is the default configuration for Docker for Mac.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它还显示了Docker实例本身的基本信息；如您所见，Docker实例正在运行Moby Linux，有两个CPU和2GB的RAM。这是Docker for
    Mac的默认配置。
- en: The **Dashboard** will adapt to the environment you have Portainer running in,
    so we will revisit it when we look at attaching Portainer to a Docker Swarm cluster.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**仪表板**将适应您运行Portainer的环境，因此当我们查看如何将Portainer附加到Docker Swarm集群时，我们将重新访问它。'
- en: Application templates
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序模板
- en: 'Next up, we have **App Templates**. This section is probably the only feature
    not to be a direct feature available in the core Docker Engine; it is instead
    a way of launching common applications using containers downloaded from the Docker
    Hub:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有**应用程序模板**。这部分可能是核心Docker引擎中唯一不直接可用的功能；相反，它是使用从Docker Hub下载的容器启动常见应用程序的一种方式：
- en: '![](Images/81d8277b-9f6f-41da-8882-0a5a4061dab4.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/81d8277b-9f6f-41da-8882-0a5a4061dab4.png)'
- en: 'There are around 25 templates that ship with Portainer by default. The templates
    are defined in JSON format. For example, the nginx template looks like the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Portainer默认提供了大约25个模板。这些模板以JSON格式定义。例如，nginx模板如下所示：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are more options you can add, for example the MariaDB template:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多选项可以添加，例如MariaDB模板：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, the templates look similar to a Docker Compose file; however,
    this format is only used by Portainer. For the most part, the options are pretty
    self-explanatory, but we should touch upon the **Name** and **Label** options.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，模板看起来类似于Docker Compose文件；但是，这种格式仅由Portainer使用。在大多数情况下，选项都相当直观，但我们应该提及**名称**和**标签**选项。
- en: 'For containers that typically require options defined by passing custom values
    via environment variables, the **Name** and **Label** options allow you present
    the user with custom form fields that need to be completed before the container
    is launched, as demonstrated by the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于通常需要通过环境变量传递自定义值来定义选项的容器，**名称**和**标签**选项允许您向用户呈现自定义表单字段，在启动容器之前需要完成，如下面的截图所示：
- en: '![](Images/81479591-d561-413e-9abe-d744fe3e71af.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/81479591-d561-413e-9abe-d744fe3e71af.png)'
- en: 'As you can see, we have a field where we can enter the root password we would
    like to use for our MariaDB container. Filling this in will take that value and
    pass it as an environment variable, building the following command to launch the
    container:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个字段，我们可以在其中输入我们想要用于MariaDB容器的根密码。填写这个字段将获取该值并将其作为环境变量传递，构建以下命令来启动容器：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For more information on app templates, I recommend reviewing the documentation,
    a link to this can be found in the further reading section of this chapter.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有关应用程序模板的更多信息，我建议查阅文档，本章的进一步阅读部分中可以找到链接。
- en: Containers
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: The next thing we are going to look at in the left-hand menu is **Containers**.
    This is where you launch and interact with the containers running on your Docker
    instance. Clicking on the **Containers** menu entry will bring up a list of all
    of the containers, both running and stopped, on your Docker instance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要查看左侧菜单中的**容器**。这是您启动和与在您的Docker实例上运行的容器进行交互的地方。点击**容器**菜单项将显示您的Docker实例上所有容器的列表，包括运行和停止的。
- en: '![](Images/28f3d88f-f07c-4c7a-8b83-c97cc5a739b5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/28f3d88f-f07c-4c7a-8b83-c97cc5a739b5.png)'
- en: As you can see, I currently have only a single container running, and that just
    happens to be the Portainer one. Rather than interacting with that, let's press
    the **+ Add container** button to launch a container running the cluster application
    we used in previous chapters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我目前只运行了一个容器，那恰好是Portainer。与其与之交互，不如点击**+添加容器**按钮来启动一个运行我们在前几章中使用的集群应用程序的容器。
- en: 'There are several options on the **Create container** page; these should be
    filled in as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建容器**页面上有几个选项；应该填写如下：'
- en: '**Name**: `cluster`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`cluster`'
- en: '**Image**: `russmckendrick/cluster`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像**：`russmckendrick/cluster`'
- en: '**Always pull the image**: On'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终拉取镜像**：打开'
- en: '**Publish all exposed ports**: On'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布所有暴露的端口**：打开'
- en: 'Finally, add a port mapping from port `8080` on the host to port `80` on the
    container by clicking on **+ map additional port**. Your completed form should
    look something like the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过点击**+映射其他端口**，从主机的端口`8080`到容器的端口`80`添加端口映射。您完成的表格应该看起来像以下的屏幕截图：
- en: '![](Images/994969a3-833f-4080-902b-aa4b924c5ea9.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/994969a3-833f-4080-902b-aa4b924c5ea9.png)'
- en: 'Once that''s done, click on **Deploy the container**, and after a few seconds,
    you will be returned the list of running containers, where you should see your
    newly launched container:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，点击**部署容器**，几秒钟后，您将返回正在运行的容器列表，您应该会看到您新启动的容器：
- en: '![](Images/df751dbc-16d2-4f8b-8dc6-1abba5022868.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/df751dbc-16d2-4f8b-8dc6-1abba5022868.png)'
- en: 'Using the tick box on the left of each container in the list will enable the
    buttons at the top, where you can control the status of your containers - make
    sure not to **Kill** or **Remove** the Portainer container. Clicking on the name
    of the container, in our case **cluster**, will bring up more information on the
    container itself:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中每个容器左侧的复选框将启用顶部的按钮，您可以控制容器的状态 - 确保不要**终止**或**删除**Portainer容器。点击容器的名称，在我们的情况下是**cluster**，将会显示有关容器本身的更多信息：
- en: '![](Images/cd68e95c-2580-4dfa-ac5e-41af1c5dcf3b.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cd68e95c-2580-4dfa-ac5e-41af1c5dcf3b.png)'
- en: 'As you can see, the information about the container is the same information
    you would get if you were to run this command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有关容器的信息与您运行此命令时获得的信息相同：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see the full output of this command by click on **Inspect**. You will
    also notice that there are buttons for **Stats**, **Logs**, and **Console**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击**检查**来查看此命令的完整输出。您还会注意到有**统计**、**日志**和**控制台**的按钮。
- en: Stats
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计
- en: 'The **Stats** page shows the CPU, memory, and network utilization, as well
    as a list of the processes for the container you are inspecting:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**统计**页面显示了容器的CPU、内存和网络利用率，以及您正在检查的容器的进程列表：'
- en: '![](Images/9e874f94-8dfd-4f46-82d4-b06e9f9ce701.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9e874f94-8dfd-4f46-82d4-b06e9f9ce701.png)'
- en: 'The graphs will automatically refresh if you leave the page open, and refreshing
    the page will zero the graphs and start afresh. This is because Portainer is receiving
    this information from the Docker API using the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您让页面保持打开状态，图表将自动刷新，刷新页面将清零图表并重新开始。这是因为Portainer正在使用以下命令从Docker API接收此信息：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each time the page is refreshed, the command is started from scratch as Portainer
    currently does not poll Docker in the background to keep a record of statistics
    for each of the running containers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每次刷新页面时，该命令都会从头开始，因为Portainer目前不会在后台轮询Docker以记录每个运行容器的统计信息。
- en: Logs
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志
- en: 'Next up, we have the **Logs** page. This shows you the results of running the
    following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有**日志**页面。这向您显示运行以下命令的结果：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It displays both the `STDOUT` and `STDERR` logs:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示`STDOUT`和`STDERR`日志：
- en: '![](Images/85131733-5b8c-45a0-a519-70b57c460ec1.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/85131733-5b8c-45a0-a519-70b57c460ec1.png)'
- en: 'You also have the option of adding timestamps to the output; this is the equivalent
    of running the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择将时间戳添加到输出中；这相当于运行以下命令：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Console
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制台
- en: 'Finally, we have **Console**. This will open an HTML5 terminal and allow you
    to log in to your running container. Before you connect to your container, you
    need to choose a shell. You have the option of three shells to use: `/bin/bash`
    , `/bin/sh `or `/bin/ash` and also which user to connect as, root is the default.
    While the cluster image has both shells installed, I choose to use `/bin/bash`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有**控制台**。这将打开一个HTML5终端，允许您登录到正在运行的容器中。在连接到容器之前，您需要选择一个shell。您可以选择三种shell来使用：`/bin/bash`，`/bin/sh`或`/bin/ash`，还可以选择要连接的用户，root是默认值。虽然集群镜像都安装了这些shell，我选择使用`/bin/bash`：
- en: '![](Images/a1a2535d-fb95-4cca-badd-1c84c17f5c45.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a1a2535d-fb95-4cca-badd-1c84c17f5c45.png)'
- en: 'This is the equivalent of running the following command to gain access to your
    container:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于运行以下命令以访问您的容器：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see from the screenshot, the `bash` process has a PID of `15`. This
    process was created by the `docker container exec` command, and that will be the
    only process which is terminated once you disconnect from your shell session.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从屏幕截图中可以看出，`bash`进程的PID为`15`。这个进程是由`docker container exec`命令创建的，一旦您从shell会话中断开，这将是唯一终止的进程。
- en: Images
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像
- en: 'Next up in the left-hand menu is **Images**. From here, you can manage, download,
    and upload images:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧菜单中的下一个是**图像**。从这里，您可以管理、下载和上传图像：
- en: '![](Images/e2b3db1c-dcb7-4b2d-949b-84a7d2bdd4c1.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e2b3db1c-dcb7-4b2d-949b-84a7d2bdd4c1.png)'
- en: 'At the top of the page, you have the option of pulling an image. For example,
    simply entering `amazonlinux` into the box and then clicking on **Pull** will
    download a copy of the Amazon Linux container image from Docker Hub. The command
    executed by Portainer would be this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面顶部，您可以选择拉取图像。例如，只需在框中输入`amazonlinux`，然后点击**拉取**，将从Docker Hub下载Amazon Linux容器镜像的副本。Portainer执行的命令将是这样的：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can find more information about each image by clicking on the image ID;
    this will take you to a page that nicely renders the output of running this command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击图像ID查找有关每个图像的更多信息；这将带您到一个页面，该页面很好地呈现了运行此命令的输出：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Look at the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下屏幕截图：
- en: '![](Images/0e6e4323-5fae-4de1-8c74-47c357492212.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0e6e4323-5fae-4de1-8c74-47c357492212.png)'
- en: Not only do you get all of the information about the image, but you also get
    options to push a copy of the image to your chosen registry or, by default, the
    Docker Hub.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅可以获取有关图像的所有信息，还可以选择将图像的副本推送到您选择的注册表，或者默认情况下推送到Docker Hub。
- en: You also get a complete break down of each of the layers contained within the
    image, showing the command which was executed during the build and size of each
    layer.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以完整地分解图像中包含的每个层，显示在构建过程中执行的命令和每个层的大小。
- en: Networks and volumes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和卷
- en: The next two items in the menu allow you to manage networks and volumes; I am
    not going to go into too much detail here as there is not much to them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单中的下两个项目允许您管理网络和卷；我不会在这里详细介绍，因为它们没有太多内容。
- en: Networks
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: Here, you can quickly add a network using the default bridge driver. Clicking
    on **Advanced settings** will take you to a page with more options. These include
    using other drivers, defining the subnets, adding labels, and restricting external
    access to the network. As with other sections, you can also remove networks and
    inspect existing networks.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以快速使用默认的桥接驱动程序添加网络。单击**高级设置**将带您到一个具有更多选项的页面。这些选项包括使用其他驱动程序，定义子网，添加标签以及限制对网络的外部访问。与其他部分一样，您还可以删除网络和检查现有网络。
- en: Volumes
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷
- en: There are not many options here other than adding or removing a volume. When
    adding a volume, you get a choice of drivers as well as being able to fill in
    options to pass to the driver, which allows the use of third-party driver plugins.
    Other than that, there is not much to see here, not even an inspect option.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里除了添加或删除卷之外，没有太多选项。添加卷时，您可以选择驱动程序，并且可以填写要传递给驱动程序的选项，这允许使用第三方驱动程序插件。除此之外，这里没有太多可看的，甚至没有检查选项。
- en: Events
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'The events page shows you all of the events from the last 24 hours; you also
    have an option of filtering the results, meaning you can quickly find the information
    you are after:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 事件页面显示了过去24小时内的所有事件；您还可以选择过滤结果，这意味着您可以快速找到您需要的信息：
- en: '![](Images/1f6b826a-dd7c-437a-bd0b-4e03e23c0e74.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1f6b826a-dd7c-437a-bd0b-4e03e23c0e74.png)'
- en: 'This is the equivalent of running the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于运行以下命令：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Engine
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引擎
- en: 'The final entry simply shows you the output of the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个条目只是简单地显示以下输出：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following shows the output of the command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了命令的输出：
- en: '![](Images/7322577c-78c1-4836-b290-5f95e5b3e4bd.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7322577c-78c1-4836-b290-5f95e5b3e4bd.png)'
- en: This can be useful if you are targeting multiple Docker instance endpoints and
    need information on the environment the endpoint is running on.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在针对多个Docker实例端点进行操作，并且需要有关端点正在运行的环境的信息，这可能很有用。
- en: 'At this point we are move onto looking at Portainer running on Docker Swarm
    so now would be a good time to remove the running containers and also the volume
    which was created when we first launched Portainer, you can remove the volume
    using:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将转而查看在Docker Swarm上运行的Portainer，现在是一个很好的时机来删除正在运行的容器，以及在我们首次启动Portainer时创建的卷，您可以使用以下命令删除卷：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Portainer and Docker Swarm
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Portainer和Docker Swarm
- en: In the previous section, we looked at how to use Portainer on a standalone Docker
    instance. Portainer also supports Docker Swarm clusters, and the options in the
    interface adapt to the clustered environment. We should look at spinning up a
    Swarm and then launching Portainer as a service and see what changes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看了如何在独立的Docker实例上使用Portainer。Portainer还支持Docker Swarm集群，并且界面中的选项会适应集群环境。我们应该尝试启动一个Swarm，然后将Portainer作为服务启动，看看有什么变化。
- en: Creating the Swarm
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Swarm
- en: 'As in the Docker Swarm chapter, we are going to be creating the Swarm locally
    using Docker Machine; to do this, run the following commands:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Docker Swarm章节中一样，我们将使用Docker Machine在本地创建Swarm；要做到这一点，请运行以下命令：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once the three instances have launched, run the following command to initialize
    the Swarm:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦三个实例启动，运行以下命令初始化Swarm：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then run the following commands, inserting your own token, to add the worker
    nodes:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令，插入您自己的令牌，以添加工作节点：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have our cluster formed, run the following to point your local
    Docker client to the manager node:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经形成了我们的集群，运行以下命令将本地Docker客户端指向管理节点：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, check the status of the Swarm using the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令检查Swarm的状态：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Portainer service
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Portainer服务
- en: 'Now what we have a Docker Swarm cluster and our local client is configured
    to communicate with the manager node, we can launch the Portainer service by simply
    running:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个Docker Swarm集群，并且我们的本地客户端已配置为与管理节点通信，我们可以通过简单运行以下命令来启动Portainer服务：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see, this will launch Portainer as a service on the manager node
    and make the service mount the manager nodes socket file so that it has visibility
    of the rest of the Swarm. You can check that the service has launched without
    any errors using the following commands:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这将在管理节点上启动Portainer作为服务，并使服务挂载管理节点的套接字文件，以便它能够看到Swarm的其余部分。您可以使用以下命令检查服务是否已启动而没有任何错误：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following shows the output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了输出：
- en: '![](Images/53d7a673-1fe4-482c-9525-50f925aaf3c4.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/53d7a673-1fe4-482c-9525-50f925aaf3c4.png)'
- en: 'Now that the service has launched, you can access Portainer on port `9000`
    on any of the IP addresses of the nodes in your cluster, or run the following
    command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务已启动，您可以在集群中任何节点的IP地址上的端口`9000`上访问Portainer，或者运行以下命令：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When the page opens, you will be once again be asked to set a password for the
    admin user; once set, you will be greeted with a login prompt. Once you have been
    logged in, you will be taken straight to the Dashboard. The reason for this is
    that when we launched Portainer this time, we passed it the argument `-H unix:///var/run/docker.sock`,
    which told Portainer to select the option we manually chose when we launched Portainer
    on our single host.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '当页面打开时，您将再次被要求为管理员用户设置密码；设置后，您将看到登录提示。登录后，您将直接进入仪表板。这是因为这次我们启动Portainer时，传递了参数`-H
    unix:///var/run/docker.sock`，这告诉Portainer选择我们在单主机上启动Portainer时手动选择的选项。 '
- en: Swarm differences
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swarm差异
- en: As already mentioned, there are a few changes to the Portainer interface when
    it is connected to a Docker Swarm cluster. In this section, we will cover them.
    If a part of the interface is not mentioned, then there is no difference between
    running Portainer in single-host mode.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当连接到Docker Swarm集群时，Portainer界面会有一些变化。在本节中，我们将对它们进行介绍。如果界面的某个部分没有提到，则在单主机模式下运行Portainer时没有区别。
- en: Endpoints
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点
- en: 'The first thing you will have to do when you log in is select an endpoints, as
    you can see from the following screen, there is a single one called **primary**:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当您登录时，首先要做的是选择一个端点，如下屏幕所示，有一个称为**primary**的端点：
- en: '![](Images/f73d75d1-6f79-4794-a20e-6bebdce83c3b.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f73d75d1-6f79-4794-a20e-6bebdce83c3b.png)'
- en: Clicking on the endpoint will take you the **Dashboard**, we will look at **Endpoints**
    again at the end of the section.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 点击端点将带您到**仪表板**，我们将在本节末再次查看**端点**。
- en: Dashboard and Swarm
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板和Swarm
- en: 'One of the first changes you will notice is that the Dashboard now displays
    information on the Swarm cluster, for example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到的第一个变化是仪表板现在显示有关Swarm集群的信息，例如：
- en: '![](Images/fd4d1e74-0ad4-4dbf-a2c3-5a34b91ee1bf.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fd4d1e74-0ad4-4dbf-a2c3-5a34b91ee1bf.png)'
- en: Notice how the CPU says 3 and the total RAM is 3.1 GB, each node within the
    cluster has 1 GB of RAM and 1 CPU, so these values are the cluster totals.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，CPU显示为3，总RAM为3.1 GB，集群中的每个节点都有1 GB的RAM和1个CPU，因此这些值是集群的总计。
- en: 'Clicking on **Go to cluster vizualizer** will take you to the Swam page, this
    gives you a visual overview of the cluster, where the only running service is
    currently Portainer:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**转到集群可视化器**将带您到Swam页面，这给您提供了集群的视觉概述，目前唯一运行的服务是Portainer：
- en: '![](Images/a13868d7-88bf-40ae-9c9c-b01ba405b27d.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a13868d7-88bf-40ae-9c9c-b01ba405b27d.png)'
- en: Stacks
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆栈
- en: 'The one item we didn''t cover in the left-hand menu is **Stacks**, from here
    you can launch stacks as we did when we looked at Docker Swarm. In-fact, let''s
    take the Docker Compose file we used, which looks like the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在左侧菜单中没有涵盖的一项是**堆栈**，从这里，您可以像我们在查看Docker Swarm时那样启动堆栈。实际上，让我们使用我们之前使用的Docker
    Compose文件，它看起来像下面这样：
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Click on the **+ Add stack** button and then paste the contents above into the
    web-editor, enter a name of `MobyCounter`, do not add any spaces or special characters
    to the name as this is used by Docker for and then click on **Deploy the stack**.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**+添加堆栈**按钮，然后将上面的内容粘贴到Web编辑器中，输入名称为`MobyCounter`，名称中不要添加任何空格或特殊字符，因为Docker会使用该名称，然后单击**部署堆栈**。
- en: 'Once deployed you will be able to click on **MobyCounter** and manage the stack:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，您将能够单击**MobyCounter**并管理堆栈：
- en: '![](Images/f6b6017d-3a92-44d3-8c19-2720e6115860.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f6b6017d-3a92-44d3-8c19-2720e6115860.png)'
- en: Stacks are a collection of services, so let's take a look at them next.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈是服务的集合，让我们接着看看它们。
- en: Services
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: 'This page is where you can create and manage services; it should already be
    showing several services including Portainer. So that we don''t cause any problems
    with the running Portainer container, we are going to create a new service. To
    do this, click on the **+ Add Service** button. On the page that loads, enter
    the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面是您可以创建和管理服务的地方；它应该已经显示了包括Portainer在内的几个服务。为了不与正在运行的Portainer容器造成任何问题，我们将创建一个新的服务。要做到这一点，单击**+添加服务**按钮。在加载的页面上，输入以下内容：
- en: '**Name**: `cluster`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`cluster`'
- en: '**Image**: `russmckendrick/cluster`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像：`russmckendrick/cluster`
- en: '**Scheduling mode**: **Replicated**'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度模式**：**复制**'
- en: '**Replicas** : **1**'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**副本**：**1**'
- en: 'This time we need to add a port mapping for port `8000` on the host to map
    to port `80` to the container, this is because the stack we launched in the last
    section is already using port `8080` on the host:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们需要为主机上的端口`8000`添加端口映射，映射到容器上的端口`80`，这是因为我们在上一节中启动的堆栈已经在主机上使用端口`8080`：
- en: '![](Images/098c7993-08e7-4248-94de-46effda21158.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/098c7993-08e7-4248-94de-46effda21158.png)'
- en: Once you have entered the information, click on the **Create the service** button.
    You will be taken back to the list of services, which should now contain the cluster
    service we just added. You may have noticed that in the scheduling mode column,
    there is an option to scale. Click on it and increase the number of replicas to
    **6** for our **cluster** service.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 输入信息后，单击**创建服务**按钮。您将被带回服务列表，其中现在应该包含我们刚刚添加的cluster服务。您可能已经注意到，在调度模式列中，有一个选项可以进行扩展。单击它，并将**cluster**服务的副本数增加到**6**。
- en: 'Clicking on **cluster** in the **Name** column takes us to an overview of the
    service. As you can see, there is a lot of information on the service:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**名称**列中的**cluster**将带我们到服务的概述。正如您所看到的，服务上有很多信息：
- en: '![](Images/a9e27419-518a-475d-ba8b-0e4204160578.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a9e27419-518a-475d-ba8b-0e4204160578.png)'
- en: 'You can make a lot of changes to the **Service** on the fly, including placement
    constraints, the restart policy, adding service labels, and more. Right at the
    bottom of the page is a list of the tasks associated with the service:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**服务**上进行许多实时更改，包括放置约束、重启策略、添加服务标签等。页面底部是与服务相关的任务列表：
- en: '![](Images/e5341775-3d05-45d8-8f58-9cf92908c2fc.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e5341775-3d05-45d8-8f58-9cf92908c2fc.png)'
- en: 'As you can see, we have six running tasks, two on each of our three nodes.
    Clicking on **Containers** in the left-hand menu may show something different
    than you expect:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有六个正在运行的任务，每个节点上有两个。单击左侧菜单中的**容器**可能会显示与您预期不同的内容：
- en: '![](Images/d60f20dd-8806-4bfd-bc7a-fa44f6973644.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d60f20dd-8806-4bfd-bc7a-fa44f6973644.png)'
- en: There are only three containers listed, and one of them is for the Portainer
    service. Why is that?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 只列出了三个容器，其中一个是Portainer服务。为什么会这样？
- en: Well, if you remember in the Docker Swarm chapter, we learned that `docker container`
    commands only really apply to the node you are running them against, and as Portainer
    is only talking to our manager node, that is the only node which the Docker container
    commands are executed against. Remember that Portainer is only a web interface
    for the Docker API, so it mirrors the same results as you get running `docker
    container ls` on the command line.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，如果您还记得Docker Swarm章节中，我们学到`docker container`命令只适用于您针对其运行的节点，并且由于Portainer只与我们的管理节点通信，因此Docker容器命令只针对该节点执行。请记住，Portainer只是Docker
    API的Web界面，因此它反映了在命令行上运行`docker container ls`时获得的相同结果。
- en: Adding endpoints
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加终端
- en: However, we can add our two remaining cluster nodes to Portainer. To do this,
    click on the **Endpoint** entry in the left-hand menu.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以将我们的另外两个集群节点添加到Portainer中。要做到这一点，请点击左侧菜单中的**终端**条目。
- en: 'To add the endpoint, we will need to know the endpoint URL and have access
    to the certificates so that Portainer can authenticate itself against the Docker
    daemon running on the node. Luckily, as we launched the hosts using Docker Machine,
    this is a simple task. To get the endpoint URLs, run the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '要添加终端，我们需要知道终端URL并访问证书，以便Portainer可以对其自身进行身份验证，以针对节点上运行的Docker守护程序。幸运的是，由于我们使用Docker
    Machine启动了主机，这是一项简单的任务。要获取终端URL，请运行以下命令： '
- en: '[PRE25]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For me, the two endpoint URLs were `192.168.99.101:2376` and `192.168.99.102:2376`;
    yours may be different. The certificates we need to upload can be found in the
    `~/.docker/machine/certs/` folder on your machine. I recommend running the following
    commands to open the folder in your finder:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，两个终端URL分别是`192.168.99.101:2376`和`192.168.99.102:2376`；您的可能不同。我们需要上传的证书可以在您的机器上的`~/.docker/machine/certs/`文件夹中找到。我建议运行以下命令来在您的查找器中打开文件夹：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Once you have added the node, you will be able to change to it using the **+
    Add Endpoint** button in the **Settings / Endpoints** page.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 添加节点后，您将能够使用**设置/终端**页面中的**+添加终端**按钮切换到该节点。
- en: 'From here enter the following information:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里输入以下信息：
- en: '**Name**: `swarm-worker01`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`swarm-worker01`'
- en: '**Endpoint URL**: `192.168.99.101:2376`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终端URL**：`192.168.99.101:2376`'
- en: '**Public IP:** `192.168.99.101`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共IP：** `192.168.99.101`'
- en: '**TLS**: On'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TLS**：打开'
- en: '**TLS with server and client verification**: Ticked'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带服务器和客户端验证的TLS**：已选中'
- en: Upload the certs from `~/.docker/machine/certs/`
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`~/.docker/machine/certs/`上传证书
- en: 'Then click on the **+ Add endpoint** button, clicking on **Home** will take
    you to the Endpoint overview screen we first saw at the start of this section
    of the chapter. As you can see from the following screenshot, we can see that
    the workers are running three containers each and that they are marked as standalone
    rather than Swarm:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击**+添加终端**按钮，点击**主页**将带您到我们在本章节开始时首次看到的终端概述屏幕。
- en: '![](Images/e367b2ca-bca4-4833-82c5-22682805ecce.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e367b2ca-bca4-4833-82c5-22682805ecce.png)'
- en: You will also notice that other than the Swarm being mention in the Endpoint,
    there's no mention of Swarm services. Again, this is because Portainer only knows
    as much as your Docker nodes, and Swarm mode only allows nodes with the role of
    manager to launch services and tasks and interact with the other nodes in your
    cluster.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到除了在终端中提到Swarm之外，没有提到Swarm服务。同样，这是因为Portainer只知道与您的Docker节点一样多，Swarm模式只允许具有管理器角色的节点启动服务和任务，并与集群中的其他节点进行交互。
- en: 'Don''t forget to remove your local Docker Swarm cluster by running:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记通过运行以下命令来删除您的本地Docker Swarm集群：
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That concludes our deep dive with Portainer. As you can see, Portainer is very
    powerful, yet simple to use, and will only continue to grow and integrate more
    of the Docker ecosystem as features are released. With Portainer, you can do a
    lot of manipulation with not only your hosts but also the containers and services
    running on single or cluster hosts.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的深入探讨到此结束。正如你所看到的，Portainer非常强大，但使用起来简单，随着功能的发布，它将继续增长并集成更多的Docker生态系统。使用Portainer，你不仅可以对主机进行大量操作，还可以对单个或集群主机上运行的容器和服务进行操作。
- en: In the next chapter we are going to take a look at how to secure your Docker
    host as well as how to run scans against your container images.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何保护您的Docker主机以及如何对容器映像运行扫描。
- en: Questions
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: On a macOS or Linux machine, what is the path to mount the Docker socket file?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在macOS或Linux机器上，挂载Docker套接字文件的路径是什么？
- en: What is the default port Portainer runs on?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Portainer运行的默认端口是多少？
- en: 'True or false: You can use Docker Compose files as application templates?'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：您可以使用Docker Compose文件作为应用程序模板？
- en: 'True or false: The stats shown in Portainer are only real time, you can’t view
    historical data?'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：Portainer中显示的统计数据只是实时的，无法查看历史数据？
- en: Further reading
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more information on Portainer at here:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到更多关于Portainer的信息：
- en: Main website: [https://portainer.io/](https://portainer.io/)
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要网站: [https://portainer.io/](https://portainer.io/)
- en: Portainter on GitHub: [https://github.com/portainer/](https://github.com/portainer/)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Portainter on GitHub: [https://github.com/portainer/](https://github.com/portainer/)
- en: Latest documentation: [https://portainer.readthedocs.io/en/latest/index.html](https://portainer.readthedocs.io/en/latest/index.html)
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新文档: [https://portainer.readthedocs.io/en/latest/index.html](https://portainer.readthedocs.io/en/latest/index.html)
- en: Template documentation: [http://portainer.readthedocs.io/en/latest/templates.html](https://portainer.readthedocs.io/en/latest/templates.html)
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板文档: [http://portainer.readthedocs.io/en/latest/templates.html](https://portainer.readthedocs.io/en/latest/templates.html)
