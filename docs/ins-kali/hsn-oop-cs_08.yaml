- en: Modeling and Designing Software
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件建模和设计
- en: 'As civil engineering emerged and large structures were created, the practice
    of modeling and designing became really important. The same happened with software
    development. Nowadays, software is everywhere: in your computer, mobile phone,
    TV, car, and so on. As the uses of software expanded, software development became
    increasingly complex and expensive, requiring both time and money.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着土木工程的出现和大型结构的创建，建模和设计实践变得非常重要。软件开发也是如此。如今，软件无处不在：在你的电脑、手机、电视、汽车等等。随着软件的使用范围扩大，软件开发变得越来越复杂和昂贵，需要时间和金钱。
- en: Software modeling and design are important parts of the software development
    life cycle. If you have an idea and you are planning to start a software project,
    the first thing you should do is design and model the software, not just jump
    into writing the code. This will give you a high-level view of the software and
    the opportunity to architect it in such a way that it will be easy to extend and
    modify. If you don't carry out modeling beforehand, you might end up in a situation
    where you have to restructure your software architecture, which could be very
    expensive.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件建模和设计是软件开发生命周期的重要部分。如果你有一个想法，计划开始一个软件项目，你应该做的第一件事是设计和建模软件，而不是直接开始编写代码。这将为你提供软件的高层视图，并有机会以便于扩展和修改的方式设计架构。如果你不事先进行建模，可能会陷入需要重构软件架构的情况，这可能非常昂贵。
- en: 'The topics that we will cover in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题如下：
- en: The importance of design diagrams
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计图的重要性
- en: Different **Unified Modeling Language** (**UML**) diagrams
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的**统一建模语言**（**UML**）图
- en: Class diagrams
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类图
- en: Use case diagrams
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例图
- en: Sequence diagrams
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列图
- en: The importance of design diagrams
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计图的重要性
- en: The UML is a design language that is the standard language that is used for
    software modeling and design. It was first developed by Grady Booch, Ivar Jacobson,
    and James Rumbaugh at Rational Software between 1994–1995\. In 1997, the **Object
    Management Group** (**OMG**) adopted it as the standard language for modeling.
    Later, in 2005, the **International Organization for Standardization** (**ISO**)
    approved UML as an ISO standard, and since then, it has been adopted by every
    software community.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: UML是一种设计语言，是用于软件建模和设计的标准语言。它最初由Grady Booch，Ivar Jacobson和James Rumbaugh于1994-1995年在Rational
    Software开发。1997年，**对象管理组**（**OMG**）将其采纳为建模的标准语言。后来，2005年，**国际标准化组织**（**ISO**）批准UML作为ISO标准，自那时起，它已被每个软件社区采用。
- en: UML diagrams allow developers to convey software design to other people. It
    is a language that has a set of rules that encourages easy communication. If you
    learn to read UML, you can understand any software model that is written in UML.
    Explaining a software model in plain English would be very difficult.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: UML图允许开发人员向其他人传达软件设计。这是一种具有一套规则的语言，鼓励简单的交流。如果你学会了阅读UML，你就能理解任何用UML编写的软件模型。用普通英语解释软件模型将会非常困难。
- en: Different UML diagrams
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的UML图
- en: 'There are many types of UML diagrams, but we will only discuss the most important
    ones in this chapter. UML diagrams fall into the following two major categories:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多类型的UML图，但在本章中我们只讨论最重要的几种。UML图分为以下两个主要类别：
- en: Structural diagrams
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构图
- en: Behavioral diagrams
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为图
- en: 'The following list shows the diagrams that come under the category of structural
    diagrams:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表显示了属于结构图类别的图表：
- en: Class diagrams
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类图
- en: Component diagrams
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件图
- en: Composite structure diagrams
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合结构图
- en: Deployment diagrams
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署图
- en: Object diagrams
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象图
- en: Package diagrams
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包图
- en: Profile diagrams
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件图
- en: 'Behavioral diagrams include the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 行为图包括以下内容：
- en: Activity diagrams
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动图
- en: Communication diagrams
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信图
- en: Interaction overview diagrams
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互概述图
- en: Sequence diagrams
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列图
- en: State diagrams
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态图
- en: Timing diagrams
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时序图
- en: Use case diagrams
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例图
- en: Class diagrams
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类图
- en: A class diagram is a structural diagram that is mainly used to provide the design
    of a piece of object-oriented software. This diagram demonstrates the structure
    of a software, the attributes and methods of a class, and the relationship between
    classes in the system. It can be used for development as well as for documentation;
    software developers frequently use this diagram to get a quick idea of the code
    and to help fellow developers understand the system. It is also occasionally used
    by employees involved in the business side of a company.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 类图是一种结构图，主要用于提供面向对象软件的设计。该图表演示了软件的结构，类的属性和方法，以及系统中类之间的关系。它可用于开发和文档编写；软件开发人员经常使用该图表快速了解代码，并帮助其他开发人员理解系统。它也偶尔被公司业务方面的员工使用。
- en: 'The following are the three main parts of a class diagram:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是类图的三个主要部分：
- en: The class name
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名
- en: The attribute section
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性部分
- en: The method section
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法部分
- en: A class diagram consists of different classes that are represented as boxes
    or rectangles. A rectangle is normally divided into the aforementioned sections.
    The first part holds the name of the class, the second portion holds the attributes,
    and the third section contains the methods.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 类图由不同的类组成，表示为方框或矩形。矩形通常分为上述部分。第一部分包含类的名称，第二部分包含属性，第三部分包含方法。
- en: 'Let''s take a look at an example of a class diagram:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个类图的例子：
- en: '![](img/ef5d873d-d509-4bac-9c81-2c9cbd5ab909.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef5d873d-d509-4bac-9c81-2c9cbd5ab909.jpg)'
- en: Here, we can see that we have a class called `Car`, as indicated by the top
    box. Below that, we have the attributes of that class. We can see that `color` is
    the name of an attribute, which has a `+` sign in front of it, indicating that
    it is a public variable. We can also see that there is a `:` (colon) next to the
    variable name, which is a separator. Whatever is given after the colon represents
    the type of the variable. In this case, we can see that the `color` variable is
    of the `string` type. The next attribute is `company`, which is also a variable
    of the `string` type. This has a `-` sign in front of it, which means that it
    is a private variable. The third attribute is `fuel`, and we can see that this
    is a private variable of the `integer` type.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到一个名为`Car`的类，如顶部框所示。在下面，我们有该类的属性。我们可以看到`color`是一个属性的名称，前面有一个`+`号，表示它是一个公共变量。我们还可以看到变量名称旁边有一个`:`（冒号），这是一个分隔符。冒号后面给出的内容表示变量的类型。在这种情况下，我们可以看到`color`变量是`string`类型。下一个属性是`company`，也是`string`类型的变量。它前面有一个`-`号，表示它是一个私有变量。第三个属性是`fuel`，我们可以看到这是一个`integer`类型的私有变量。
- en: 'If we look below the attributes, we will see the methods of the `Car` class.
    We can see that it has three methods: `move(direction: string)`, `IsFuelEmpty()`,
    and `RefilFuel(litre: int)`. Like the attributes, we can see that the methods
    have a `:` (colon). In this case, the type that is given after the colon is the
    return type of the method. The first method, `move`, doesn''t return anything,
    so the type is void. In the `IsFuelEmpty()` method, the return type is Boolean,
    and this is also the case for the third method. Another thing to note here is
    the parameters of the methods, which are placed in parentheses after the method
    name. For example, the `move` method has a parameter called `direction`, which
    is a `string` type. The `RefilFuel(litre: int)` method has an `int` type parameter,
    which is `litre`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们查看属性下面，我们会看到`Car`类的方法。我们可以看到它有三个方法：`move(direction: string)`，`IsFuelEmpty()`和`RefilFuel(litre:
    int)`。与属性一样，我们可以看到方法后面有一个`:`（冒号）。在这种情况下，冒号后面给出的类型是方法的返回类型。第一个方法`move`不返回任何东西，所以类型是void。在`IsFuelEmpty()`方法中，返回类型是布尔值，第三个方法也是如此。这里要注意的另一件事是方法的参数，它们放在方法名后的括号中。例如，`move`方法有一个名为`direction`的`string`类型参数。`RefilFuel(litre:
    int)`方法有一个`int`类型参数，即`litre`。'
- en: In the preceding example, we saw how a class is represented in a class diagram.
    Normally, a system has multiple classes that are related to each other in some
    way. A class diagram demonstrates the relationships of the classes as well, which
    gives the viewer a full picture of the system's object relationships. In [Chapter
    4](eabd28cc-8e8c-49dc-9b63-8f86d0356ad5.xhtml), *Object Collaboration*, we learned
    about the different relationships between classes and objects in object-oriented
    software. Let's now take a look at how we can represent these different object
    relationships using class diagrams.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们看到了类在类图中的表示。通常，一个系统有多个相互关联的类。类图也展示了类之间的关系，这给观察者提供了系统对象关系的完整图景。在[第4章](eabd28cc-8e8c-49dc-9b63-8f86d0356ad5.xhtml)中，*对象协作*，我们学习了面向对象软件中类和对象之间的不同关系。现在让我们看看如何使用类图表示这些不同的对象关系。
- en: Inheritance
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: '**Inheritance** is a relationship in which one class is like another class,
    in the same way that a BMW i8 Roadster is a kind of car. This type of relationship
    is shown using a line and a hollow arrow. The arrow points from the class to the
    super class, as shown in the following diagram:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**继承**是一种类似于另一个类的关系，就像BMW i8 Roadster是一种汽车一样。这种关系使用一条线和一个空心箭头表示。箭头从类指向超类，如下图所示：'
- en: '![](img/6d761b9e-3e8e-4ac7-928b-22d8608d8bbd.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d761b9e-3e8e-4ac7-928b-22d8608d8bbd.png)'
- en: Association
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关联
- en: 'An association relationship is the most basic relationship between objects.
    When one object has some kind of logic or physical relationship with another object
    it is called **association relationship**. It is represented by a line and an
    arrow. If there is an arrow on both sides, this represents a bidirectional relationship.
    An example of an association could be the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关联关系是对象之间最基本的关系。当一个对象与另一个对象有某种逻辑或物理关系时，称为**关联关系**。它由一条线和一个箭头表示。如果两侧都有箭头，表示双向关系。关联的一个例子可能是以下内容：
- en: '![](img/b837ef58-3cb9-42eb-ae29-7f9946b74e7a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b837ef58-3cb9-42eb-ae29-7f9946b74e7a.png)'
- en: Aggregation
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合
- en: 'An **aggregation** **relationship** is a special type of association relationship.
    This relationship is usually known as a **has-a** **relationship**. When one class
    has another class/object in it, this is an aggregation relationship. This is represented using
    a line and a hollow diamond. For example, a car has a tire. A tire and a car have
    an aggregation relationship, as shown in the following diagram:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**聚合** **关系**是一种特殊类型的关联关系。这种关系通常被称为**拥有** **关系**。当一个类包含另一个类/对象时，这是一种聚合关系。这是用一条线和一个空心菱形表示的。例如，一辆车有一个轮胎。轮胎和车有一个聚合关系，如下图所示：'
- en: '![](img/99938797-f7b0-452b-931f-267d243a720d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99938797-f7b0-452b-931f-267d243a720d.png)'
- en: Composition
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合
- en: 'When one class has another class in it and the dependent class can''t exist
    without the super class, this is a **composition relationship**. For example,
    a bank account can''t exist without a bank, as shown in the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个类包含另一个类，并且依赖类不能没有超类而存在时，这是一种**组合关系**。例如，银行账户不能没有银行而存在，如下图所示：
- en: '![](img/5383a622-97ff-488d-8ae1-4a4f5f3e561e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5383a622-97ff-488d-8ae1-4a4f5f3e561e.png)'
- en: Dependency
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖
- en: When a class has a dependent class, but the class itself is not dependent on
    its own dependent class, the relationship between those classes is called a **dependency**
    **relationship**. In a dependency relationship, any change in the dependent class
    doesn't have any effect on the class it is dependent on. But the dependent class
    will be affected if the class that it is dependent on changes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个类有一个依赖类，但是这个类本身不依赖于它自己的依赖类时，这些类之间的关系被称为**依赖关系**。在依赖关系中，依赖类的任何改变对其所依赖的类没有任何影响。但是如果它所依赖的类发生变化，依赖类将会受到影响。
- en: 'This relationship is represented by a dashed line with an arrow at the end.
    For example, let''s imagine that we have a theme on our mobile phone. If we change
    the theme, the phone''s icons will change, so the icons have a dependency on the
    theme. This relationship is shown in the following diagram:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种关系用虚线表示，末端有一个箭头。例如，让我们想象一下我们手机上有一个主题。如果我们改变主题，手机的图标会改变，所以图标对主题有依赖。这种关系在下面的图中显示：
- en: '![](img/73fabc73-d7d4-44ae-9f17-4af0a2b5a0b4.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73fabc73-d7d4-44ae-9f17-4af0a2b5a0b4.png)'
- en: An example of a class diagram
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类图的一个例子
- en: 'Let''s take a look at an example of a class diagram of a project. Here, we
    have some grade management software that is used by the teachers and students
    of a school. The software allows teachers to update the grades of particular students
    for different subjects. It also allows the students to view their grade. For this
    software, we have the following classes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个项目的类图的例子。在这里，我们有一些成绩管理软件，被学校的老师和学生使用。这个软件允许老师更新特定学生在不同学科的成绩。它也允许学生查看他们的成绩。对于这个软件，我们有以下的类：
- en: '`Person`:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Person`:'
- en: '![](img/7f2d8fd2-4b2a-450e-ae7b-4d32f334715c.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f2d8fd2-4b2a-450e-ae7b-4d32f334715c.png)'
- en: Person class diagram
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 人员类图
- en: '`Teacher`:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 老师：
- en: '![](img/f38bc1d5-dbe2-471f-b2f3-a82ee2b8f65b.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f38bc1d5-dbe2-471f-b2f3-a82ee2b8f65b.png)'
- en: Teacher class diagram
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 老师类图
- en: '`Student`:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Student`:'
- en: '![](img/4488335c-873e-4021-b3a9-064096d3331f.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4488335c-873e-4021-b3a9-064096d3331f.png)'
- en: Student class diagram
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 学生类图
- en: '`Subject`:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Subject`:'
- en: '![](img/479eb717-fadd-421e-b87c-8efd0e87dbd3.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/479eb717-fadd-421e-b87c-8efd0e87dbd3.png)'
- en: Subject class diagram
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 学科类图
- en: Here, we have used Visual Studio to generate our class diagram, so the arrows
    might not match the arrows that are given in the previous sections. If you are
    drawing your class diagrams using other drawing software, or if you are drawing
    by hand, then use the arrows specified in the previous sections.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用Visual Studio生成我们的类图，所以箭头可能不匹配前面部分给出的箭头。如果你使用其他绘图软件绘制你的类图，或者你手绘，那么请使用前面部分指定的箭头。
- en: 'Let''s take a look at the following complete class diagram:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下面的完整类图：
- en: '![](img/ec3d0186-abb9-4525-ab2e-8d22d3571048.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec3d0186-abb9-4525-ab2e-8d22d3571048.png)'
- en: Here, we can see that we have a `Person` class that has two attributes, a `FirstName`
    and a `LastName`. The `Student` and `Teacher` classes inherit the `Person` class,
    so we can see that the arrow is hollow. The `Student` class has two attributes,
    `email` and `studentId`. It also has a method called `GetExamGrade` (string subject),
    which takes the name of the subject and returns the grade in `char` type. We can
    see that another class, `Subject`, has a composition relationship with `Student`.
    `Student` has a list of subjects and the `Subject` class has three attributes, `grade`,
    `name`, and `subjectId`. The `Teacher` class has an `email`, `phoneNumber`, and
    `teacherId`, which are `string`, `string`, and `int` types respectively. The `Teacher`
    class has an association relationship with the `Student` class, as a teacher has
    a group of students under them. The `Teacher` class also has a method called `GiveExamGrade`,
    which takes three parameters, `studentId`, `subject`, and `grade`. This method
    will set the grades on the students' subjects.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们有一个`Person`类，有两个属性，`FirstName`和`LastName`。`Student`和`Teacher`类继承了`Person`类，所以我们可以看到箭头是空心的。`Student`类有两个属性，`email`和`studentId`。它还有一个名为`GetExamGrade`的方法（string
    subject），它接受学科的名称并返回`char`类型的成绩。我们可以看到另一个类`Subject`与`Student`有合成关系。`Student`有一个学科列表，而`Subject`类有三个属性，`grade`，`name`和`subjectId`。`Teacher`类有一个`email`，`phoneNumber`和`teacherId`，它们分别是`string`，`string`和`int`类型。`Teacher`类与`Student`类有一个关联关系，因为老师有一组学生在他们下面。`Teacher`类还有一个名为`GiveExamGrade`的方法，它接受三个参数，`studentId`，`subject`和`grade`。这个方法将设置学生学科的成绩。
- en: Just by looking at the class diagram, we get a clear idea of the system. We
    know how the subject is related to the student and how students are related to
    teachers. We also know that a subject's object can't exist without a student object,
    as they have a composition relationship. This is the beauty of the class diagram.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅通过查看类图，我们就可以清楚地了解系统。我们知道学科与学生的关系，以及学生与老师的关系。我们还知道一个学科对象不能没有学生对象存在，因为它们有合成关系。这就是类图的美妙之处。
- en: Use case diagrams
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例图
- en: A **use case diagram** is a behavioral diagram that is very commonly used in
    software development. The main purpose of this diagram is to illustrate the functional
    usage of a piece of software. It holds the use cases of a system and can be used
    to provide a high-level view of the functionality or even a very specific low-level
    module of a software. Normally for a system, there are multiple use case diagrams
    that focus on the different levels of the system. Use case diagrams shouldn't
    be used to display the implementation details of a system; they were developed
    to show only the functional requirements of a system. Use case diagrams are very
    good diagrams for business people to convey what they need from a system.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例图**是在软件开发中非常常用的行为图。这个图的主要目的是说明软件的功能使用。它包含了系统的用例，并且可以用来提供功能的高层视图，甚至是软件的非常具体的低级模块。通常对于一个系统，会有多个用例图，专注于系统的不同层次。用例图不应该用来显示系统的实现细节；它们被开发出来只是为了显示系统的功能需求。用例图对于业务人员来传达他们从系统中需要什么非常有用。'
- en: 'There are four main parts of a use case diagram, as shown in the following
    list:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 用例图的四个主要部分如下列表所示：
- en: The actor
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色
- en: The use case
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例
- en: The communication link
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信链接
- en: The system boundaries
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统边界
- en: The actor
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角色
- en: 'The actor in a use case diagram is not necessarily a person—it is rather the
    user of the system. It could be a person, another system, or even another module
    of the system. A visual representation of an actor is given in the following diagram:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 用例图中的角色不一定是一个人，而是系统的用户。它可以是一个人，另一个系统，甚至是系统的另一个模块。角色的可视表示如下图所示：
- en: '![](img/0e846aec-8451-4299-a724-68d343e6b723.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e846aec-8451-4299-a724-68d343e6b723.png)'
- en: An actor is responsible for providing an input. It gives instructions to the
    system and the system works accordingly. Every action an actor does has a purpose.
    A use case diagram shows us what an actor can do and what the expectations of
    the actor are.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 角色负责提供输入。它向系统提供指令，系统会相应地工作。角色所做的每一个动作都有一个目的。用例图向我们展示了一个角色可以做什么，以及角色的期望是什么。
- en: The use case
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例
- en: 'The visual part or representation of a use case diagram is known as the **use
    case**. This represents the functionality of the system. An actor will execute
    a use case to achieve a goal. A use case is represented by an oval with the name
    of the functionality. For example, in a restaurant app, *placing an order* could
    be a use case. We can represent this as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 用例图的视觉部分或表示被称为**用例**。这代表了系统的功能。角色将执行一个用例来实现一个目标。用例由一个带有功能名称的椭圆表示。例如，在餐厅应用程序中，*下订单*可能是一个用例。我们可以表示如下：
- en: '![](img/23f866bf-55e6-476f-b4f4-63a353931cd9.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23f866bf-55e6-476f-b4f4-63a353931cd9.png)'
- en: The communication link
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信链接
- en: 'A **communication link** is a simple line from an actor to a use case. This
    link is used to show that an actor has a relationship with a particular use case.
    An actor won''t have access to all use cases, so communication links are very
    important when displaying which use cases are accessible by which actor. Let''s
    take a look at an example of a communication link, as shown in the following diagram:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**通信链接**是从角色到用例的简单线条。这个链接用于显示角色与特定用例的关系。角色无法访问所有用例，因此在显示哪些用例可以被哪个角色访问时，通信链接非常重要。让我们看一个通信链接的例子，如下图所示：'
- en: '![](img/37f21476-f699-4702-bc50-b4c79ff2f693.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37f21476-f699-4702-bc50-b4c79ff2f693.png)'
- en: The system boundaries
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统边界
- en: '**System boundaries** are mainly used to show the scope of a system. It is
    important to be able to identify which use cases fall in our system and which
    don''t. In a use case diagram, we only focus on the use cases in our system. In
    large systems, each module of the system is sometimes treated as a boundary if
    those modules are independent enough to function without each other. This is normally
    shown with a rectangular box that holds the use cases. An actor is not a part
    of the system, so the actor will be outside of the system boundary, as shown in
    the following diagram:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统边界**主要用于显示系统的范围。能够确定哪些用例属于我们的系统，哪些不属于是很重要的。在用例图中，我们只关注我们系统中的用例。在大型系统中，如果这些模块足够独立，可以独立运行，那么系统的每个模块有时会被视为一个边界。这通常用一个包含用例的矩形框来表示。角色不是系统的一部分，因此角色将在系统边界之外，如下图所示：'
- en: '![](img/2849c139-5649-4c82-85ca-af90ca198e15.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2849c139-5649-4c82-85ca-af90ca198e15.png)'
- en: An example of a use case diagram
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例图的一个例子
- en: 'Let''s now imagine that we have a restaurant system in which a customer can
    order food. The chef prepares the food and the manager keeps track of the sales,
    as shown in the following diagram:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在想象一下，我们有一个餐厅系统，顾客可以点餐。厨师准备食物，经理跟踪销售情况，如下图所示：
- en: '![](img/60d6aaf7-dcfb-47d0-b532-0e16b2895a3c.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60d6aaf7-dcfb-47d0-b532-0e16b2895a3c.png)'
- en: From the preceding diagram, we can see that we have three actors (the Customer,
    the Chef, and the Manager). We also have different use cases—Check Menu, Order
    Food, Cook Food, Serve Food, Pay, and Sales Report, which are connected to one
    or more actors. The **Customer** actor is involved in the Check Menu, Order Food, and
    Pay use cases. The Chef has to access Order Food in order to find out about the
    orders. The Chef is also involved in the Cook Food and Serve Food use cases. Unlike
    the Chef and the Customer, the Manager is able to see the Sales Report of the
    restaurant.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图可以看出，我们有三个角色（顾客、厨师和经理）。我们还有不同的用例——查看菜单、点餐、烹饪食物、上菜、支付和销售报告，这些用例与一个或多个角色相连。**顾客**参与了查看菜单、点餐和支付用例。厨师必须访问点餐以了解订单情况。厨师还参与了烹饪食物和上菜用例。与厨师和顾客不同，经理能够查看餐厅的销售报告。
- en: By looking at this use case diagram, we are able to identify the functionalities
    of the system. It doesn't give you any implementation details, but we can easily
    see an overview of the system.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看这个用例图，我们能够确定系统的功能。它不会给出任何实现细节，但我们可以很容易地看到系统的概述。
- en: A sequence diagram
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列图
- en: A sequence diagram is an interaction diagram that falls under the category of
    behavioral diagrams. As the name suggests, it shows the sequence of the activities
    of a system. By looking at a sequence diagram, you can identify which activities
    happen during a particular time frame and which activities come next. It allows
    us to understand the flow of a system. The activities it represents might be an
    interaction between a user and a system, between two systems, or between a system
    and a subsystem.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 序列图是行为图中的一种交互图。顾名思义，它显示了系统活动的顺序。通过查看序列图，您可以确定在特定时间段内发生了哪些活动，以及接下来发生了哪些活动。它使我们能够理解系统的流程。它表示的活动可能是用户与系统之间的交互，两个系统之间的交互，或者系统与子系统之间的交互。
- en: The horizontal axis of a sequence diagram shows time passing from left to right,
    while the vertical axis shows the flow of activity. Different activities are placed
    in the diagram in a sequential manner. A sequence diagram doesn't necessarily
    show the duration of time passing but rather the steps from one activity to another.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 序列图的水平轴显示时间从左到右流逝，而垂直轴显示活动的流程。不同的活动以顺序的方式放置在图中。序列图不一定显示时间流逝的持续时间，而是显示从一个活动到另一个活动的步骤。
- en: In the following sections, we'll take a look at the notations that are used
    in a sequence diagram.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看一下序列图中使用的符号。
- en: An actor
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个参与者
- en: 'An actor in a sequence diagram is very similar to an actor in a use case diagram.
    It could be a user, another system, or even a user group. An actor is not part
    of the system and executes commands externally. Different operations are executed
    upon receiving commands from users. The actor is denoted with a stick figure,
    as shown in the following diagram:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 序列图中的参与者与用例图中的参与者非常相似。它可以是用户、另一个系统，甚至是用户组。参与者不是系统的一部分，而是在外部执行命令。不同的操作是在接收用户命令时执行的。参与者用一个棒状图表示，如下图所示：
- en: '![](img/0c3a3caf-1da0-424c-a660-ccc90aaaf83f.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c3a3caf-1da0-424c-a660-ccc90aaaf83f.png)'
- en: A lifeline
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个生命线
- en: A lifeline in sequence diagram is an entity or element of a system. Every lifeline
    has its own logic and tasks to do. Normally, a system has multiple lifelines,
    and commands are passed from one lifeline to another.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 序列图中的生命线是系统的一个实体或元素。每个生命线都有自己的逻辑和任务要完成。通常，一个系统有多个生命线，并且命令是从一个生命线传递到另一个生命线的。
- en: 'A lifeline is denoted by a box with a vertical line issuing from the bottom,
    as shown in the following diagram:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个生命线由一个从底部发出的带有垂直线的框表示，如下图所示：
- en: '![](img/8de10e9a-0fe9-4c81-9cb4-cb91fa71807d.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8de10e9a-0fe9-4c81-9cb4-cb91fa71807d.png)'
- en: An activation
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个激活
- en: An activation is a small rectangular box on a lifeline. This activation box
    represents the point when an activity was active. The top of the box represents
    the start of the activity and the end of the box represents the end of the activity.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 激活是生命线上的一个小矩形框。这个激活框代表了一个活动处于活动状态的时刻。框的顶部代表活动的开始，框的底部代表活动的结束。
- en: 'Let''s see how it looks in a diagram:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在图中是什么样子的：
- en: '![](img/106cb923-d43a-4443-b318-47964cdeb963.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/106cb923-d43a-4443-b318-47964cdeb963.png)'
- en: A call message
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个呼叫消息
- en: 'A call message indicates an interaction between lifelines. It flows from left
    to right and is denoted by an arrow at the end of a line, as shown in the following
    diagram. A message call represents some kind of information or a trigger to the
    next lifeline:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一个呼叫消息表示生命线之间的交互。它从左到右流动，并且以一条箭头表示在线的末端，如下图所示。一个消息呼叫代表了一些信息或触发下一个生命线的触发器：
- en: '![](img/8b2892f6-8979-431c-a7d8-e21a6ab4ea85.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b2892f6-8979-431c-a7d8-e21a6ab4ea85.png)'
- en: A return message
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个返回消息
- en: 'The normal message flow in a sequence diagram is from left to right, as this
    represents the action commands; however, sometimes messages are returned to the
    caller. A return message flows from right to left and is denoted by a dotted line
    with an arrow head at the end, as shown in the following diagram:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 序列图中的正常消息流是从左到右的，因为这代表了动作命令；然而，有时消息会返回给调用者。一个返回消息从右到左流动，并且以一个带箭头头的虚线表示，如下图所示：
- en: '![](img/d2e819bf-6312-4869-937c-197f934da53f.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2e819bf-6312-4869-937c-197f934da53f.png)'
- en: A self message
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个自消息
- en: 'Sometimes, messages are passed from a lifeline to itself, such as an internal
    communication. It will be denoted in a similar way to a message call, but instead
    of pointing to another activity of another lifeline, it returns to the same activity
    of the same lifeline, as shown in the following diagram:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，消息是从一个生命线传递到它自己，比如内部通信。它将以与消息呼叫类似的方式表示，但是它不是指向另一个活动或另一个生命线，而是返回到相同生命线的相同活动，如下图所示：
- en: '![](img/650a7243-f3f6-4234-9079-8478e204619b.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/650a7243-f3f6-4234-9079-8478e204619b.png)'
- en: A recursive message
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个递归消息
- en: 'When a self message is sent for recursive purposes, it is called a recursive
    message. Another small activity on the same timeline is drawn for this purpose,
    as shown in the following diagram:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当发送一个自消息用于递归目的时，它被称为递归消息。在同一时间线上为此目的绘制另一个小活动，如下图所示：
- en: '![](img/08ca0a1f-f656-4487-9a85-fe267efadec5.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08ca0a1f-f656-4487-9a85-fe267efadec5.png)'
- en: A create message
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个创建消息
- en: 'This type of message is not a normal message, such as a call message. A create
    message is used when a lifeline is created by another lifeline, as shown in the
    following diagram:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的消息不是普通的消息，比如一个呼叫消息。当一个生命线由另一个生命线创建时，会使用一个创建消息，如下图所示：
- en: '![](img/a01993e4-ef74-4d0f-95b2-1a0b6048300f.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a01993e4-ef74-4d0f-95b2-1a0b6048300f.png)'
- en: A destroy message
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个销毁消息
- en: 'When a destroy message is sent from an activity to a lifeline, it means that
    the following lifeline is not going to be executed and the flow will be stopped,
    as shown in the following diagram. It is called a destroy message because it destroys
    the activity flow:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当从一个活动发送一个销毁消息到一个生命线时，意味着接下来的生命线不会被执行，流程将停止，如下图所示。它被称为销毁消息，因为它销毁了活动流程：
- en: '![](img/b2684c59-cf70-4fa6-a275-e4187b4cd873.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2684c59-cf70-4fa6-a275-e4187b4cd873.png)'
- en: A duration message
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个持续消息
- en: 'We use a duration message to show when there is a time duration between when
    an activity passes a message to the next activity and when the next activity receives
    it. It is similar to a call message, but is angled down, as shown in the following
    diagram:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个持续消息来显示当一个活动将消息传递给下一个活动时有一个时间持续。它类似于一个呼叫消息，但是是向下倾斜的，如下图所示：
- en: '![](img/63b79c11-31e7-40da-8cc0-bfa999315e34.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63b79c11-31e7-40da-8cc0-bfa999315e34.png)'
- en: A note
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个注释
- en: 'A note is used to include any necessary remarks to do with an element or an
    action. It has no particular rules. It can be placed anywhere that is suitable
    to represent the event clearly. Any type of information can be written in a note. A
    note is represented as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 备注用于包含与元素或操作相关的任何必要备注。它没有特定的规则。可以将其放置在适合清楚表示事件的任何位置。任何类型的信息都可以写在备注中。备注表示如下：
- en: '![](img/26eabc06-08ee-442a-809e-1de6752d45d9.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26eabc06-08ee-442a-809e-1de6752d45d9.png)'
- en: An example of a sequence diagram
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列图示例
- en: 'The best way to learn anything is by looking at an example of it. Let''s take
    a look at the following sequence diagram of a simple restaurant system:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 学习任何东西的最佳方法是通过查看其示例。让我们来看一个简单餐厅系统的序列图示例：
- en: '![](img/ab1d8615-8507-4288-a0ec-873e7b6bdc13.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab1d8615-8507-4288-a0ec-873e7b6bdc13.png)'
- en: Here, we can see that a customer first asks for the menu from the UI. The UI
    passes the request to the Controller and then the Controller passes the request
    to the Manager. The Manager gets the menu and responds to the Controller. The
    Controller responds to the UI and the UI displays the menu in the display.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到客户首先从UI请求菜单。UI将请求传递给控制器，然后控制器将请求传递给经理。经理获取菜单并回应控制器。控制器回应UI，UI在显示器上显示菜单。
- en: After the Customer chooses an item, the order goes step by step to the Manager.
    The Manager calls another method to prepare the food and sends a response to the
    Customer notifying them that the order has been received. When the food is ready,
    it is served to the Customer. Upon receiving the food, the Customer pays the bill
    and collects a Payment Receipt.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 客户选择商品后，订单逐步传递给经理。经理调用另一个方法来准备食物，并向客户发送响应，通知他们订单已收到。食物准备好后，将其送到客户那里。客户收到食物后，支付账单并领取付款收据。
- en: By looking at the sequence diagram, we can see the different activities involved
    in the process. It's pretty clear how the system is working step by step. This
    kind of diagram is very useful in showing the flow of a system, and is very popular.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看序列图，我们可以看到流程中涉及的不同活动。系统是如何一步一步地工作的非常清楚。这种类型的图表在展示系统流程方面非常有用，非常受欢迎。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned the basics of how to model and design your software
    using UML diagrams. This is very important for every software developer, because
    we need to be able to communicate with businesses and vice versa. You will also
    find that these diagrams are useful when discussing systems with other developers
    or software architects. We haven't covered all the different diagrams that are
    available for modeling and designing software in this chapter, because this is
    beyond the scope of this book. We covered class diagrams, use case diagrams, and
    sequence diagrams in this chapter. We saw an example of each of these diagrams
    and looked at how to draw them.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用UML图表对软件进行建模和设计的基础知识。这对每个软件开发人员来说都非常重要，因为我们需要能够与企业进行沟通，反之亦然。您还会发现，当与其他开发人员或软件架构师讨论系统时，这些图表也很有用。在本章中，我们没有涵盖所有可用于建模和设计软件的不同图表，因为这超出了本书的范围。在本章中，我们涵盖了类图、用例图和序列图。我们看到了每个图表的一个示例，并了解了如何绘制它们。
- en: In the next chapter, we will look at how to work with Visual Studio. We will
    see some tips and tricks that will help you increase your productivity while working
    with Visual Studio.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Visual Studio。我们将看到一些技巧和窍门，这些将帮助您在使用Visual Studio时提高生产力。
