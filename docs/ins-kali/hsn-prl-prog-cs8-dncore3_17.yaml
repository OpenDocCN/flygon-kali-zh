- en: IIS and Kestrel in ASP.NET Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core中的IIS和Kestrel
- en: 'In the previous chapter, we discussed writing unit test cases for parallel
    and asynchronous code. We also discussed three unit testing frameworks that are
    available in Visual Studio: MSUnit, NUnit, and xUnit.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了为并行和异步代码编写单元测试用例。我们还讨论了在Visual Studio中可用的三个单元测试框架：MSUnit、NUnit和xUnit。
- en: In this chapter, we will introduce how the threading model works with **Internet
    Information Services** (**IIS**) and Kestrel. We will also look at various tweaks
    we can make to take maximum advantage of resources on a server. We will introduce
    the working model of Kestrel and how we can take advantage of parallel programming
    techniques while creating microservices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍线程模型如何与**Internet Information Services**（**IIS**）和Kestrel一起工作。我们还将看看我们可以做出哪些各种调整，以充分利用服务器上的资源。我们将介绍Kestrel的工作模型，以及在创建微服务时如何利用并行编程技术。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The IIS threading model and internals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IIS线程模型和内部结构
- en: The Kestrel threading model and internals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kestrel线程模型和内部结构
- en: Introduction to best practices of threading in microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在微服务中线程的最佳实践介绍
- en: Introduction to async in ASP.NET MVC Core
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ASP.NET MVC Core中介绍异步
- en: Async streams (new in .NET Core 3.0)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步流（在.NET Core 3.0中新增）
- en: Let's get started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A good understanding of how servers work is required so that you can understand
    this chapter. You should also learn about threading models before you start this
    chapter. The source code for this chapter is available on GitHub at [https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter12](https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter12).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 需要对服务器工作原理有很好的理解，这样你才能理解本章。在开始本章之前，你还应该了解线程模型。本章的源代码可在GitHub上找到：[https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter12](https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter12)。
- en: IIS threading model and internals
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IIS线程模型和内部结构
- en: As the name suggests, these are services that are utilized on the Windows system
    to connect your web applications from other systems via the internet over a set
    of protocols such as HTTP, TCP, web sockets, and more.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，这些是在Windows系统上使用的服务，用于通过互联网连接您的Web应用程序与其他系统，使用HTTP、TCP、Web套接字等一系列协议。
- en: In this section, we will discuss how the **IIS threading model** works. At the
    core of IIS lies the **CLR thread pool**. It's very important to understand how
    the CLR thread pool adds and removes threads in order to understand how IIS works
    to serve user requests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论**IIS线程模型**的工作原理。IIS的核心是**CLR线程池**。要理解IIS如何服务用户请求，了解CLR线程池如何添加和删除线程是非常重要的。
- en: 'Every application that gets deployed to IIS is assigned a unique worker process.
    Each worker process has two thread pools: the **worker thread pool** and the **IOCP**
    (short for **I/O completion port**) thread pool:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到IIS的每个应用程序都被分配一个唯一的工作进程。每个工作进程都有两个线程池：**工作线程池**和**IOCP**（即**I/O完成端口**）线程池：
- en: Whenever we create a new thread pool thread using either legacy `ThreadPool.QueueUserWorkItem`
    or **TPL**, the ASP.NET runtime makes use of worker threads for processing.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当我们使用传统的`ThreadPool.QueueUserWorkItem`或**TPL**创建新的线程池线程时，ASP.NET运行时都会利用工作线程进行处理。
- en: Whenever we perform any I/O operations, that is, database calls, file read/write,
    or network calls to another web service, the ASP.NET runtime makes use of IOCP
    threads.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当进行任何I/O操作，即数据库调用、文件读写或对另一个Web服务的网络调用时，ASP.NET运行时都会利用IOCP线程。
- en: By default, there is one worker thread and one IOCP thread per processor. So,
    a dual-core CPU will have two workers and two IOCP threads by default. `ThreadPool`
    keeps adding and removing threads, depending on load and demand. IIS assigns a
    thread to each request that it receives. This allows every request to have a different
    context from other requests hitting the server at the same time. It's the responsibility
    of the thread to cater to requests, as well as generating and sending a response
    back to a client.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个处理器都有一个工作线程和一个IOCP线程。因此，双核CPU默认情况下会有两个工作线程和两个IOCP线程。`ThreadPool`会根据负载和需求不断添加和删除线程。IIS为每个接收到的请求分配一个线程。这使得每个请求在与服务器同时到达的其他请求的情况下都有不同的上下文。线程的责任是满足请求，并生成并将响应发送回客户端。
- en: If the number of available thread pool threads is less than the number of requests
    that are received by a server at any time, the requests will start to be queued.
    Later, the thread pool generates threads using one of two important algorithms,
    known as *Hill Climbing* and *Starvation Avoidance*. The creation of threads is
    not instant and it usually takes up to 500 ms from the time `ThreadPool` comes
    to know that there is a shortage of threads. Let's try to understand both algorithms
    that are used by `ThreadPool` to generate threads.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可用的线程池线程数量少于服务器在任何时间接收到的请求数，那么这些请求将开始排队。稍后，线程池将使用两种重要的算法之一生成线程，这两种算法分别称为*爬坡*和*避免饥饿*。线程的创建不是瞬间完成的，通常需要从`ThreadPool`知道线程短缺开始到500毫秒。让我们试着理解`ThreadPool`用来生成线程的这两种算法。
- en: Starvation Avoidance
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免饥饿
- en: In this algorithm, `ThreadPool` keeps monitoring the queue, and if it doesn't
    progress, then it keeps pumping new threads into the queue.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个算法中，`ThreadPool`不断监视队列，如果没有进展，它就会不断地将新线程加入队列。
- en: Hill Climbing
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 爬坡
- en: In this algorithm, `ThreadPool` tries to maximize the throughput using as few
    threads as possible.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个算法中，`ThreadPool`试图最大限度地利用尽可能少的线程来实现吞吐量。
- en: 'Running IIS with the default settings will have a significant impact on performance
    since, by default, only one worker thread is available per processor. We can increase
    this setting by modifying the configuration element in the `machine.config` file,
    as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认设置运行IIS将对性能产生重大影响，因为默认情况下，每个处理器只有一个工作线程可用。我们可以通过修改`machine.config`文件中的配置元素来增加此设置。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we increased the minimum worker threads and IOCP threads to
    25\. As more requests come in, additional threads will be created. An important
    thing to note here is that since every request is assigned one unique thread,
    we should avoid writing blocking code. With blocking code, there will not be free
    threads. Once a thread pool is exhausted, the requests will start to queue. IIS
    can only queue up to 1,000 requests per application pool. We can modify this by
    changing the `requestQueueLimit` application settings in the `machine.config`
    file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们将最小工作线程和IOCP线程增加到了25。随着更多请求的到来，将创建额外的线程。这里需要注意的一点是，由于每个请求都分配了一个唯一的线程，我们应该避免编写阻塞代码。有了阻塞代码，就不会有空闲线程。一旦线程池耗尽，请求将开始排队。IIS每个应用程序池只能排队最多1,000个请求。我们可以通过更改`machine.config`文件中的`requestQueueLimit`应用程序设置来修改这一点。
- en: 'To modify the settings for all the application pools, we need to add the `applicationPool`
    element with the required values:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改所有应用程序池的设置，我们需要添加`applicationPool`元素并设置所需的值：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To modify the settings for a single application pool, we need to navigate to
    the Advanced Settings of a specific application pool in IIS. As shown in the following
    screenshot, we can change the Queue Length property to modify a number of requests
    that can be queued per application pool:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改单个应用程序池的设置，我们需要在IIS中导航到特定应用程序池的高级设置。如下截图所示，我们可以更改队列长度属性以修改每个应用程序池可以排队的请求数量：
- en: '![](img/804457ce-c889-4d44-a876-1cfc35f55cc6.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/804457ce-c889-4d44-a876-1cfc35f55cc6.png)'
- en: As a good coding practice for developers to reduce contention issues and thus
    avoid queues on the server, we should try to use the `async`/`await` keywords
    for any blocking I/O code. This will reduce contention issues on a server as threads
    will not be blocked and return to the thread pool to serve other requests.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员的良好编码实践，为了减少争用问题并避免服务器上的队列，我们应该尝试对任何阻塞I/O代码使用`async`/`await`关键字。这将减少服务器上的争用问题，因为线程不会被阻塞，并返回到线程池以服务其他请求。
- en: Kestrel threading model and internals
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kestrel线程模型和内部
- en: IIS has been the most popular server for hosting .NET applications, but it's
    tied to the Windows OS. With more and more cloud providers coming and non-Windows
    cloud hosting options becoming a lot cheaper, there was a need for a cross-platform
    hosting server. Microsoft introduced Kestrel as a cross-platform web server for
    hosting ASP.NET Core applications. If we create and run ASP.NET Core applications,
    Kestrel is the default web server that runs them. Kestrel is open source and uses
    an event-driven, asynchronous I/O-based server. Kestrel is not a full-fledged
    web server and is recommended to be used behind full-featured web servers such
    as IIS and Nginx.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: IIS一直是托管.NET应用程序的最流行服务器，但它与Windows操作系统绑定在一起。随着越来越多的云提供商出现和非Windows云托管选项变得更加便宜，需要一个跨平台托管服务器。微软推出了Kestrel作为托管ASP.NET
    Core应用程序的跨平台Web服务器。如果我们创建和运行ASP.NET Core应用程序，Kestrel是默认的Web服务器。Kestrel是开源的，使用基于事件驱动的异步I/O服务器。Kestrel不是一个完整的Web服务器，建议在IIS和Nginx等功能齐全的Web服务器后面使用。
- en: When it was initially launched, Kestrel was based on the `libuv` library, which
    is also open source. The use of `libuv` in .NET is not new and dates back to ASP.NET
    5\. `libuv` has been specifically built for asynchronous I/O operations and uses
    a single-threaded event looping model. The library also supports cross-platform
    asynchronous sockets on Windows, macOS, and Linux. You can check its progress
    and download the source code for `libuv` for custom implementation from GitHub
    at [https://github.com/libuv/libuv](https://github.com/libuv/libuv).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当Kestrel最初推出时，它是基于`libuv`库的，这个库也是开源的。在.NET中使用`libuv`并不是什么新鲜事，可以追溯到ASP.NET 5。`libuv`专门为异步I/O操作构建，并使用单线程事件循环模型。该库还支持在Windows、macOS和Linux上进行跨平台异步套接字操作。您可以在GitHub上查看其进展并下载`libuv`的源代码以进行自定义实现。
- en: '`libuv` has been used in Kestrel to only support async I/O. Apart from I/O
    operations, all the other work that''s done in Kestrel is still done by .NET worker
    threads using managed code. The core idea behind creating Kestrel is improving
    the performance of servers. The stack is very robust and extensible. `libuv` in
    Kestrel is used as a transport layer only and, due to excellent abstraction, it
    can be replaced by other network implementations as well. Kestrel also supports
    running multiple event loops, thereby making it a more robust choice than Node.js.
    The number of event loops that are used depends on the number of logical processors
    on the machine and on there being one thread running one event loop. We can configure
    this number via code as well while creating the host.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`libuv`在Kestrel中仅用于支持异步I/O。除I/O操作外，Kestrel中进行的所有其他工作仍然由.NET工作线程使用托管代码完成。创建Kestrel的核心思想是提高服务器的性能。该堆栈非常强大且可扩展。Kestrel中的`libuv`仅用作传输层，并且由于出色的抽象，它也可以被其他网络实现替换。Kestrel还支持运行多个事件循环，因此比Node.js更可靠。使用的事件循环数量取决于计算机上的逻辑处理器数量，以及一个线程运行一个事件循环。我们还可以在创建主机时通过代码配置此数字。'
- en: 'The following is an excerpt from the `Program.cs` file, which is present in
    all ASP.NET Core projects:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Program.cs`文件的摘录，该文件存在于所有ASP.NET Core项目中：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you will see, the Kestrel server is based on the builder pattern, and functionality
    can be added using the appropriate packages and extension methods. In the following
    sections, we will learn how to modify the settings of Kestrel for different versions
    of .NET Core.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将看到的，Kestrel服务器基于构建器模式，并且可以使用适当的包和扩展方法添加功能。在接下来的部分中，我们将学习如何修改不同版本的.NET Core的Kestrel设置。
- en: ASP.NET Core 1.x
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.x
- en: 'We can use an extension method called `UseLibuv` to set the thread count. We
    can do this by setting the `ThreadCount` property, as shown in the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用名为`UseLibuv`的扩展方法来设置线程计数。我们可以通过设置`ThreadCount`属性来实现，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`WebHost` has been replaced by a generic host in .NET Core 3.0\. The following
    is a code snippet for ASP.NET Core 3.0:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebHost`已在.NET Core 3.0中被通用主机所取代。以下是ASP.NET Core 3.0的代码片段：'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ASP.NET Core 2.x
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.x
- en: Starting from ASP.NET 2.1, Kestrel has replaced the default transport from `libuv` for
    managed sockets. So, if you are upgrading your project from ASP.NET Core to ASP.NET
    2.x or 3.x and still want to use `libuv`, you need to add the `Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv`
    NuGet package to make the code work.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从ASP.NET 2.1开始，Kestrel已经替换了`libuv`的默认传输方式，改为了托管套接字。因此，如果您将项目从ASP.NET Core升级到ASP.NET
    2.x或3.x，并且仍然想使用`libuv`，则需要添加`Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv`
    NuGet包以使代码正常工作。
- en: 'Kestrel currently supports the following scenarios:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Kestrel目前支持以下场景：
- en: HTTPS
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTPS
- en: Opaque upgrades, which are used to enable web sockets ([https://github.com/aspnet/websockets](https://github.com/aspnet/websockets))
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不透明升级，用于启用Web套接字（[https://github.com/aspnet/websockets](https://github.com/aspnet/websockets)）
- en: Unix sockets behind Nginx for high performance
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nginx后面的Unix套接字用于高性能
- en: HTTP/2 (not currently supported on macOS)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP/2（目前在macOS上不受支持）
- en: 'Since Kestrel is built on sockets, you can configure the connection limits
    of them by using the `ConfigureLimits` method on `Host`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kestrel是基于套接字构建的，您可以使用`Host`上的`ConfigureLimits`方法来配置它们的连接限制：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The default connection limit is unlimited if we set `MaxConcurrentConnections`
    to null.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`MaxConcurrentConnections`设置为null，则默认连接限制是无限的。
- en: Introducing the best practices of threading in microservices
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入微服务中线程的最佳实践
- en: Microservices are the most popular software design patterns for making very
    performant and scalable backend services. Rather than building one service for
    an entire application, multiple loosely coupled services are created, with each
    being responsible for a single feature. Depending on the load on features, each
    service can be scaled up or down individually. Consequently, while designing microservices,
    the choice of the threading model you use becomes very important.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是用于创建非常高性能和可扩展的后端服务的最流行的软件设计模式。与为整个应用程序构建一个服务不同，创建了多个松散耦合的服务，每个服务负责一个功能。根据功能的负载，可以单独扩展或缩减每个服务。因此，在设计微服务时，您使用的线程模型的选择变得非常重要。
- en: Microservices can be stateless or stateful. The choice between stateless and
    stateful does have an impact on performance. With stateless services, the requests
    can be served in any order without regard to what happened before or after the
    current request, whereas with stateful services, all the requests should be processed
    in a particular order, like a queue. This can have an impact on performance. Since
    microservices are asynchronous, we need to write some logic to make sure the request
    is processed in the correct order and state after each request is communicated
    to the next message. Microservices can be single-threaded or multithreaded as
    well, and this choice coupled with the state can really improve or degrade performance
    and should be well thought out while planning services.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务可以是无状态的或有状态的。无状态和有状态之间的选择对性能有影响。对于无状态服务，请求可以以任何顺序进行处理，而不考虑当前请求之前或之后发生了什么，而对于有状态服务，所有请求都应按特定顺序进行处理，如队列。这可能会对性能产生影响。由于微服务是异步的，我们需要编写一些逻辑来确保请求按正确的顺序和状态进行处理，并且在每个请求之后与下一个消息进行通信。微服务也可以是单线程或多线程的，这种选择与状态结合起来可以真正改善或降低性能，并且在规划服务时应该经过深思熟虑。
- en: 'The microservice design approaches can be categorized as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务设计方法可以分为以下几类：
- en: Single thread-single process microservices
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单线程-单进程微服务
- en: Single thread-multiple processes microservices
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单线程-多进程微服务
- en: Multiple threads-single process microservices
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多线程-单进程微服务
- en: We'll look at these design approaches in more detail in the following sections.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分中更详细地了解这些设计方法。
- en: Single thread-single process microservices
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单线程-单进程微服务
- en: This is the most basic design for microservices. The microservice runs on a
    single thread in a single CPU core. With every new request from a client, a new
    thread is created, which spawns a new process. This takes away the connection
    pooling caching benefits. While working with a database, every new process will
    create a new connection pool. Also, since only one process can be created at a
    time, only one client can be served.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是微服务的最基本设计。微服务在单个CPU核心的单个线程上运行。对于来自客户端的每个新请求，都会创建一个新线程，从而生成一个新进程。这会带走连接池缓存的好处。在与数据库一起工作时，每个新进程都会创建一个新的连接池。此外，由于一次只能创建一个进程，因此只能为一个客户端提供服务。
- en: The cons of single thread-single process microservices include the fact that
    it is a waste of resources and that the throughput of the service doesn't increase
    when the load is increased**. **
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 单线程-单进程微服务的缺点包括资源浪费以及在负载增加时服务的吞吐量不会增加。
- en: Single thread-multiple process microservices
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单线程-多进程微服务
- en: The microservice runs on a single thread but can spawn multiple processes, thereby
    improving their throughput. Since a new process is created for each client, we
    cannot take advantage of connection pooling while connecting to databases. There
    are some third-party environments, such as Zend, OpCache, and APC, that provide
    cross-process opcode caches.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务在单个线程上运行，但可以生成多个进程，从而提高它们的吞吐量。由于为每个客户端创建了一个新进程，我们无法在连接到数据库时利用连接池。有一些第三方环境，如Zend、OpCache和APC，提供跨进程的操作码缓存。
- en: The pros of the single thread-multiple processes microservices approach is that
    it improves throughput on load, but note that we cannot take advantage of connection
    pooling.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 单线程-多进程微服务方法的优点是在负载上提高了吞吐量，但请注意我们无法利用连接池。
- en: Multiple threads-single process
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多线程-单进程
- en: Microservice runs on multiple threads and there is a single long-lived process.
    With the same database, we can take advantage of connection pooling and also limit
    the number of connections as and when needed. The problem with the single process
    is that all the threads will use a shared resource and can have resource contention
    issues.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务在多个线程上运行，有一个长期运行的单个进程。使用相同的数据库，我们可以利用连接池，并在需要时限制连接的数量。单进程的问题在于所有线程将使用共享资源，并可能出现资源争用问题。
- en: The pro of the multiple threads-single process approach is that it improves
    the performance of stateless services, whereas its con is that there can be synchronization
    issues when sharing a resource.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程-单进程方法的优点是提高了无状态服务的性能，而缺点是在共享资源时可能会出现同步问题。
- en: Asynchronous services
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步服务
- en: We can avoid performance issues during integration with various application
    components by decoupling communication between microservices. Microservices must
    be created asynchronously by design to achieve this decoupling.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解耦微服务之间的通信，我们可以避免与各种应用组件集成时的性能问题。必须通过设计异步创建微服务才能实现这种解耦。
- en: Dedicated thread pools
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专用线程池
- en: 'If the application flow requires us to connect to various microservices, then
    it makes more sense to create a dedicated thread pool for such tasks. With a single
    thread pool, if a service starts having issues, then all the threads from the
    pool can become exhausted. This can impact the performance of a microservice.
    This pattern is also known as the **Bulkheads** pattern. The following diagram
    shows two microservices with a shared pool. As you can see, both microservices
    use a shared connection pool:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序流程要求我们连接到各种微服务，那么为这些任务创建专用线程池更有意义。使用单个线程池，如果一个服务开始出现问题，那么池中的所有线程都可能耗尽。这可能会影响微服务的性能。这种模式也被称为**Bulkheads**模式。下图显示了两个使用共享连接池的微服务。如您所见，两个微服务都使用了共享连接池：
- en: '![](img/7775bc70-bd55-45fd-adc5-a2549b9067b5.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7775bc70-bd55-45fd-adc5-a2549b9067b5.png)'
- en: 'The following diagram shows two microservices with dedicated thread pools:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了两个使用专用线程池的微服务：
- en: '![](img/4e7cde3f-7af7-493f-97a4-4f1028f7eb21.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e7cde3f-7af7-493f-97a4-4f1028f7eb21.png)'
- en: In the next section, we will introduce how async can be used in ASP.NET MVC
    core.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍如何在ASP.NET MVC核心中使用异步。
- en: Introducing async in ASP.NET MVC core
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在ASP.NET MVC核心中引入异步
- en: '`async` and `await` are code markers that help us write asynchronous code using
    TPL. They help maintain the structure of code and make it look synchronous while
    processing code asynchronously in the background.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`和`await`是代码标记，帮助我们使用TPL编写异步代码。它们有助于保持代码结构，并使其在后台异步处理代码的同时看起来同步。'
- en: We introduced `async` and `await` in [Chapter 9](1b0d3653-dd80-486b-96fc-b17000f9439d.xhtml),
    *Async, Await, and Task-Based Asynchronous Programming Basics*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第9章](1b0d3653-dd80-486b-96fc-b17000f9439d.xhtml)中介绍了`async`和`await`，*异步、等待和基于任务的异步编程基础*。
- en: 'Now, let''s create an asynchronous web API with ASP.NET Core 3.0 and VS 2019
    preview. The API will read a file from the server:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用ASP.NET Core 3.0和VS 2019预览创建一个异步Web API。该API将从服务器读取文件：
- en: 'Open Visual Studio 2019 to be presented with the following screen. Create a
    new ASP.NET Core Web Application project in VS 2019, as shown in the following
    screenshot:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2019，将呈现以下屏幕。在VS 2019中创建一个新的ASP.NET Core Web应用程序项目，如下图所示：
- en: '![](img/6af4da68-75e4-42f2-b4cb-2ed6c9f106dc.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6af4da68-75e4-42f2-b4cb-2ed6c9f106dc.png)'
- en: 'Give the project a name and the location where you want it to be created:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目取一个名字，并指定想要创建的位置：
- en: '![](img/2b29b76f-9f1c-42ad-836c-cb80ee916aee.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b29b76f-9f1c-42ad-836c-cb80ee916aee.png)'
- en: 'Select the project''s type, which in our case is API, and click Create:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目类型，在我们的情况下是API，然后点击创建：
- en: '![](img/5bbfee2e-3a88-4f7a-9a0c-9a02bd5c088d.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bbfee2e-3a88-4f7a-9a0c-9a02bd5c088d.png)'
- en: 'Now, create a new folder in our project called `Files` and add a file named
    `data.txt` that contains the following content:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们的项目中创建一个名为`Files`的新文件夹，并添加一个名为`data.txt`的文件，其中包含以下内容：
- en: '![](img/3baa8323-ae99-45b4-9e78-c32b367b58aa.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3baa8323-ae99-45b4-9e78-c32b367b58aa.png)'
- en: 'Next, we will modify the `Get` method in `ValuesController.cs`, as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改`ValuesController.cs`中的`Get`方法，如下所示：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is a simple method that reads a file from the server and returns the content
    as a string to the user. The problem with this code is that, when `File.ReadAllText`
    is called, the calling thread will be blocked until the file is read completely.
    As we now know, our server''s response will be to make the call asynchronous,
    as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个从服务器读取文件并将内容作为字符串返回给用户的简单方法。这段代码的问题在于，当调用`File.ReadAllText`时，调用线程将被阻塞，直到文件完全读取。现在我们知道，我们的服务器响应将是进行异步调用，如下所示：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The ASP.NET Core web API supports all the new features of parallel programming,
    including async, as we have seen from the preceding code example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Web API支持并行编程的所有新特性，包括异步，正如我们从前面的代码示例中看到的。
- en: Async streams
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步流
- en: .NET Core 3.0 also introduced asynchronous streams support. `IAsyncEnumerable<T>`
    is the asynchronous version of `IEnumerable<T>`. This new feature allows developers
    to await `foreach` loops over `IAsyncEnumerable<T>` to consume elements from the
    stream and use `yield` to return a stream to produce elements.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.0还引入了异步流支持。`IAsyncEnumerable<T>`是`IEnumerable<T>`的异步版本。这一新功能允许开发人员在`IAsyncEnumerable<T>`上等待`foreach`循环以消耗流中的元素，并使用`yield`返回流以产生元素。
- en: This is very important in scenarios where we want to iterate over elements asynchronously
    and perform some compute operations on iterated elements. With more emphasis being
    on big data nowadays (which is available as streamed output), it makes more sense
    to go for *async* streams, which support high volumes of data while making servers
    responsive by efficiently utilizing threads at the same time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这在我们想要异步迭代元素并对迭代的元素执行一些计算操作的场景中非常重要。随着现在更加注重大数据（作为流式输出可用），选择支持高数据量的*异步*流更有意义，同时通过有效地利用线程使服务器响应。
- en: Two new interfaces have been added to support async streams**:**
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加了两个新接口来支持异步流**：**
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see from the definition of `IAsyncEnumerator`, `MoveNext` has been
    made asynchronous. This has two benefits:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从`IAsyncEnumerator`的定义中可以看出，`MoveNext`已经变成了异步的。这有两个好处：
- en: It's easy to cache `Task<bool>` over `Task<T>` so that there will be fewer memory
    allocations
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很容易在`Task<bool>`上缓存`Task<T>`，这样就会减少内存分配
- en: Existing collections just need to add one extra method to support asynchronous
    behaviors
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的集合只需要添加一个额外的方法来支持异步行为
- en: Let's try to understand this using some sample code that enumerates numbers
    at odd indexes asynchronously.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用一些示例代码来异步枚举奇数索引的数字，以便理解这一点。
- en: 'Here is a custom enumerator:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个自定义的枚举器：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see from the `MoveNextAsync()` method we defined in the preceding
    code, this method starts with an odd index (that is, index 1) and keeps reading
    items at odd indexes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们在前面的代码中定义的`MoveNextAsync()`方法中可以看出，这个方法从奇数索引（即索引1）开始，并持续读取奇数索引的项目。
- en: 'The following is our collection, which makes use of the custom enumeration
    logic we created previously and implements the `GetAsyncEnumerator()` method of
    the `IAsyncEnumerable<T>` interface to return the `OddIndexEnumerator` enumerator
    we created:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的集合，它使用我们之前创建的自定义枚举逻辑，并实现了`IAsyncEnumerable<T>`接口的`GetAsyncEnumerator()`方法，以返回我们创建的`OddIndexEnumerator`枚举器：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is our magic extension method, which will convert our custom collection into
    an `AsyncEnumerable`. As you can see, it works on any collection that implements `IEnumerable<int>`
    and wraps the underlying collection with `CustomAsyncIntegerCollection`, which,
    in turn, implements `IAsyncEnumerable<T>`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的魔术扩展方法，它将我们的自定义集合转换为`AsyncEnumerable`。正如你所看到的，它适用于任何实现`IEnumerable<int>`的集合，并使用`CustomAsyncIntegerCollection`包装底层集合，而`CustomAsyncIntegerCollection`又实现了`IAsyncEnumerable<T>`：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once all the pieces are in place, we can create a method that returns an asynchronous
    stream. We can see how items are generated by using the `yield` keyword:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有部分就位，我们就可以创建一个返回异步流的方法。我们可以通过使用`yield`关键字来查看项目是如何生成的：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following code calls the stream. Here, we call the `GetBigResultsAsync()`
    method, which returns `IAsyncEnumerable<int>` inside a `foreach` loop and then
    iterates over it asynchronously:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码调用了流。在这里，我们调用了`GetBigResultsAsync()`方法，该方法在`foreach`循环内返回`IAsyncEnumerable<int>`，然后异步迭代它：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The following is the output of the preceding code. As you can see, it generated
    numbers at the odd indexes in the collection**:**
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出。如你所见，它在集合中生成了奇数索引的数字**：**
- en: '![](img/a4c7c02d-65c0-4032-95d3-5e245be1555f.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4c7c02d-65c0-4032-95d3-5e245be1555f.png)'
- en: In this section, we introduced async streams, which make it very efficient for
    us to iterate over a collection in parallel without blocking the caller thread,
    which is something that's been missing since TPL was introduced.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了异步流，这使得我们能够在不阻塞调用线程的情况下并行迭代集合，这是自TPL引入以来一直缺少的功能。
- en: Now, let's take a look at what we covered in this chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看本章涵盖了什么。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed IIS threading models and making changes to .NET
    Core implementations of a server by going from using `libuv` to .NET Core 2.0
    in order to manage sockets from .NET Core 2.1 onward. We also discussed ways to
    improve the performance of IIS, Kestrel, and some thread pool algorithms such
    as Starvation Avoidance and Hill Climbing. We introduced the concepts of microservices
    and various threading patterns that are used in microservices, such as single
    thread-single process microservices, single thread-multiple process microservices,
    and multiple threads-single process microservices.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了IIS线程模型，并通过从.NET Core 2.0使用`libuv`到.NET Core 2.1开始管理套接字来对.NET Core服务器的实现进行更改。我们还讨论了改进IIS、Kestrel以及一些线程池算法（如饥饿避免和爬坡）的方法。我们介绍了微服务的概念以及在微服务中使用的各种线程模式，如单线程-单进程微服务、单线程-多进程微服务和多线程-单进程微服务。
- en: We also discussed the process of using async in ASP.NET MVC Core 3.0 and introduced
    the new concept of async streams in .NET Core 3.0, as well as its usage. Async
    streams can be very handy in big data scenarios in which the load on servers can
    be huge due to a rapid influx of data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了在ASP.NET MVC Core 3.0中使用异步的过程，并介绍了.NET Core 3.0中异步流的新概念及其用法。异步流在大数据场景中非常方便，因为由于数据的快速涌入，服务器的负载可能会很大。
- en: In the next chapter, we will learn about some patterns that are commonly used
    in parallel and asynchronous programming. These patterns will enhance our understanding
    of parallel programming.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习一些常用的并行和异步编程模式。这些模式将增强我们对并行编程的理解。
- en: Questions
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of these is used to host web applications?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪一个用于托管Web应用程序？
- en: '`IWebHostBuilder`'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IWebHostBuilder`'
- en: '`IHostBuilder`'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IHostBuilder`'
- en: Which of the following `ThreadPool` algorithms tries to maximize the throughput
    using as few threads as possible?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种`ThreadPool`算法试图最大化吞吐量，同时尽量使用较少的线程？
- en: Hill Climbing
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 爬山
- en: Starvation Avoidance
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 饥饿避免
- en: Which is not a valid microservice design approach?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种不是有效的微服务设计方法？
- en: Single thread-single process
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单线程-单进程
- en: Single thread-multiple processes
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单线程-多进程
- en: Multiple threads-single process
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多线程-单进程
- en: Multiple threads-multiple processes
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多线程-多进程
- en: We can await `foreach` loops in new versions of .NET Core.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新版本的.NET Core中，我们可以等待`foreach`循环。
- en: 'True'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假
