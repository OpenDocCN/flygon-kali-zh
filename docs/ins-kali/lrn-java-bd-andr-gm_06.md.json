["```java\npublic class Soldier {\n  int health;\n  String soldierType;\n\n  void shootEnemy(){\n    //bang bang\n  }\n\n}\n```", "```java\nSoldier. There are two variables, an int variable called health and a string variable called soldierType.\n```", "```java\nSoldier mySoldier = new Soldier();\n```", "```java\nSoldier mySoldier;\nmySoldier = new Soldier();\n```", "```java\nmySoldier.health = 100;\nmySoldier.soldierType = \"sniper\";\n//Notice that we use the object name mySoldier.\n//Not the class name Soldier.\n//We didn't do this:\n// Soldier.health = 100; ERROR!\n```", "```java\n., is used to access the variables of the class, and this is how we would call the method. Again, we use the object name and not the class name, followed by the dot operator:\n```", "```java\nmySoldier.shootEnemy();\n```", "```java\nSoldier mySoldier2 = new Soldier();\nmySoldier2.health = 150;\nmySoldier2.soldierType = \"special forces\";\nmySoldier2.shootEnemy();\n```", "```java\n    public class Soldier {\n        int health;\n        String soldierType;\n\n        void shootEnemy(){\n            //lets print which type of soldier is shooting\n            Log.i(soldierType, \" is shooting\");\n        }\n    }\n    ```", "```java\n    //first we make an object of type soldier\n       Soldier rambo = new Soldier();\n       rambo.soldierType = \"Green Beret\";\n       rambo.health = 150;// It takes a lot to kill Rambo\n\n       //Now we make another Soldier object\n       Soldier vassily = new Soldier();\n       vassily.soldierType = \"Sniper\";\n       vassily.health = 50;//Snipers have less armor\n\n       //And one more Soldier object\n       Soldier wellington = new Soldier();\n       wellington.soldierType = \"Sailor\";\n       wellington.health = 100;//He's tough but no green beret\n    ```", "```java\n    Log.i(\"Rambo's health = \", \"\" + rambo.health);\n    Log.i(\"Vassily's health = \", \"\" + vassily.health);\n    Log.i(\"Wellington's health = \", \"\" + wellington.health);\n\n    rambo.shootEnemy();\n    vassily.shootEnemy();\n    wellington.shootEnemy();\n    ```", "```java\nvoid shootEnemy(){\n        //lets print which type of soldier is shooting\n        Log.i(soldierType, \" is shooting\");\n    }\n```", "```java\nRambo's health =\ufe55 150\nVassily's health =\ufe55 50\nWellington's health =\ufe55 100\nGreen Beret\ufe55 is shooting\nSniper\ufe55 is shooting\nSailor\ufe55 is shooting\n\n```", "```java\n//Declare an array called myArmy to hold 10 Soldier objects\nSoldier [] myArmy = new Soldier[10];\n\n//Then we can add the Soldier objects\n//We use the familiar array notation on the left\n//And the newly learnt new Soldier() syntax on the right\nmyArmy[0] = new Soldier();\nmyArmy[1] = new Soldier();\nmyArmy[2] = new Soldier();\nmyArmy[3] = new Soldier();\n//Initialize more here\n//..\n```", "```java\nmyArmy[0].health = 125;\nmyArmy[0].soldierType = \"Pilot\";\nmyArmy[0].shootEnemy();\n// Pilot\ufe55 is shooting\n```", "```java\nhealSoldier(rambo);\n//Perhaps healSoldier could add to the health instance variable\n```", "```java\nsomeHospitalObjectPerhaps.healSoldier(rambo);\n```", "```java\nSoldier healSoldier(Soldier soldierToBeHealed){\n  soldierToBeHealed.health++;\n\n  return soldierToBeHealed;\n}\n```", "```java\nrambo.soldierType = \"ballerina\";\n```", "```java\nweighlifter.legstrength = 100;\nweighlifter.armstrength = -100;\nweightlifter.liftHeavyWeight();\n//one typo and weightlifter rips own arms off\n```", "```java\npublic class Soldier{\n  //Implementation goes here\n}\n```", "```java\nprivate int myInt;\n```", "```java\npublic Soldier mySoldier = new Soldier(); \n```", "```java\npublic useMeEverybody(){\n  //do something everyone needs to do here\n}\n```", "```java\nprivate secretInternalTask(){\n  //do something that helps the class function internally\n  //Perhaps, if it is part of the same class,\n  //useMeEverybody could use this method...\n  //On behalf of the classes outside of this class.\n  //Neat!\n}\n```", "```java\nfairlySecretTask(){\n  //allow just the classes in the package\n  //Not for external use\n}\n```", "```java\nprotected familyTask(){\n  //allow just the classes in the package\n  //And you can use me if you extend me too\n}\n```", "```java\nclass Hospital{\n  private void healSoldier(Soldier soldierToHeal){\n    int health = soldierToHeal.getHealth();\n    health = health + 10;\n    soldierToHeal.setHealth(health);\n  }\n}\n```", "```java\npublic class Soldier{\n  private int health;\n  public int getHealth(){\n    return health;\n  }\n\n  public void setHealth(int newHealth){\n    health = newHealth;\n  }\n}\n```", "```java\nSoldier mySoldier = new Soldier();\n//mySoldier.health = 100;//Doesn't work private\n//we can use the public setter setHealth()\nmySoldier.setHealth(100);//That's better\n\nHospital militaryHospital = new Hospital();\n\n//Oh no mySoldier has been wounded\nmySoldier.setHealth(10);\n\n//Take him to the hospital\n//But my health variable is private\n//And Hospital won't be able to access it\n//I'm doomed - tell Laura I love her\n\n//No wait- what about my public getters and setters?\n//We can use the public getters and setters from another class\n\nmilitaryHospital.healSoldier(mySoldier);\n\n//mySoldiers private variable health has been increased by 10\n//I'm feeling much better thanks!\n```", "```java\nmySoldier.name\nmysoldier.type\nmySoldier.weapon\nmySoldier.regiment\n...\n```", "```java\nSoldier mySoldier = new Soldier();\n```", "```java\n...Soldier();\n```", "```java\npublic Soldier(){\n  health = 200;\n  //more setup here\n}\n```", "```java\n    public class AlienShip {\n    private static int numShips;\n    private int shieldStrength;\n    public String shipName;\n    ```", "```java\n    public AlienShip(){\n      numShips++;\n\n      //Can call private methods from here because I am part\n      //of the class\n      //If didn't have \"this\" then this call might be less clear\n      //But this \"this\" isn't strictly necessary\n      this.setShieldStrength(100);\n      //Because of \"this\" I am sure I am setting \n      //the correct shieldStrength\n    }\n    ```", "```java\n        public static int getNumShips(){\n            return numShips;\n\n        }\n    ```", "```java\n    private void setShieldStrength(int shieldStrength){\n        //\"this\" distinguishes between the \n        //member variable shieldStrength\n        //And the local variable/parameter of the same name\n        this.shieldStrength = shieldStrength;\n\n    }\n    ```", "```java\n    public int getShieldStrength(){\n        return this.shieldStrength;\n    }\n    ```", "```java\n    public void hitDetected(){\n\n        shieldStrength -=25;\n        Log.i(\"Incomiming: \",\"Bam!!\");\n        if (shieldStrength == 0){\n            destroyShip();\n        }\n\n    }\n    ```", "```java\n    private void destroyShip(){\n        numShips--;\n        Log.i(\"Explosion: \", \"\"+this.shipName + \" destroyed\");\n        }\n    }\n    ```", "```java\n    //every time we do this the constructor runs\n    AlienShip girlShip = new AlienShip();\n    AlienShip boyShip = new AlienShip();\n    ```", "```java\n    //Look no objects but using the static method\n    Log.i(\"numShips: \", \"\" + AlienShip.getNumShips());\n    ```", "```java\n    //This works because shipName is public\n    girlShip.shipName = \"Corrine Yu\";\n    boyShip.shipName = \"Andre LaMothe\";\n    ```", "```java\n    //This won't work because shieldStrength is private\n    //girlship.shieldStrength = 999;\n\n    //But we have a public getter\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n\n    //And we can't do this because it's private\n    //boyship.setShieldStrength(1000000);\n    ```", "```java\n    //let's shoot some ships\n    girlShip.hitDetected();\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n\n    boyShip.hitDetected();\n    boyShip.hitDetected();\n    boyShip.hitDetected();\n\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n\n    boyShip.hitDetected();//ahhh\n\n    Log.i(\"girlShip shieldStrngth: \", \"\" + girlShip.getShieldStrength());\n\n    Log.i(\"boyShip shieldStrngth: \", \"\" + boyShip.getShieldStrength());\n    ```", "```java\n\n    Log.i(\"numShips: \", \"\" + AlienShip.getNumShips());\n    ```", "```java\nnumShips:\ufe55 2\ngirlShip shieldStrngth:\ufe55 100\nboyShip shieldStrngth:\ufe55 100\nIncomiming:\ufe55 Bam!!\ngirlShip shieldStrngth:\ufe55 75\nboyShip shieldStrngth:\ufe55 100\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\ngirlShip shieldStrngth:\ufe55 75\nboyShip shieldStrngth:\ufe55 25\nIncomiming:\ufe55 Bam!!\nExplosion:\ufe55 Andre LaMothe destroyed\ngirlShip shieldStrngth:\ufe55 75\nboyShip shieldStrngth:\ufe55 0\nnumShips:\ufe55 1\nboyShip shieldStrngth:\ufe55 0\nnumShips:\ufe55 1\n\n```", "```java\npublic class MainActivity extends Activity ...\n```", "```java\nsuper.onCreate(... \n```", "```java\n    public abstract class AlienShip {\n        private static int numShips;\n        private int shieldStrength;\n        public String shipName;\n\n        public AlienShip(int shieldStrength){\n            Log.i(\"Location: \", \"AlienShip constructor\");\n            numShips++;\n            setShieldStrength(shieldStrength);\n        }\n\n        public abstract void fireWeapon();//Ahh my body\n\n        public static int getNumShips(){\n            return numShips;\n        }\n\n        private void setShieldStrength(int shieldStrength){\n            this.shieldStrength = shieldStrength;\n        }\n\n        public int getShieldStrength(){\n            return this.shieldStrength;\n        }\n\n        public void hitDetected(){\n            shieldStrength -=25;\n            Log.i(\"Incomiming: \", \"Bam!!\");\n            if (shieldStrength == 0){\n                destroyShip();\n            }\n\n        }\n\n        private void destroyShip(){\n            numShips--;\n            Log.i(\"Explosion: \", \"\" + this.shipName + \" destroyed\");\n        }\n\n    }\n    ```", "```java\n    public class Bomber extends AlienShip {\n\n        public Bomber(){\n            super(100);\n            //Weak shields for a bomber\n            Log.i(\"Location: \", \"Bomber constructor\");\n        }\n\n        public void fireWeapon(){\n            Log.i(\"Firing weapon: \", \"bombs away\");\n        }\n    }\n    ```", "```java\n    public class Fighter extends AlienShip{\n\n        public Fighter(){\n            super(400);\n            //Strong shields for a fighter\n            Log.i(\"Location: \", \"Fighter constructor\");\n        }\n\n        public void fireWeapon(){\n            Log.i(\"Firing weapon: \", \"lasers firing\");\n        }\n\n    }\n    ```", "```java\n    Fighter aFighter = new Fighter();\n    Bomber aBomber = new Bomber();\n\n    //Can't do this AlienShip is abstract -\n    //Literally speaking as well as in code\n    //AlienShip alienShip = new AlienShip(500);\n\n    //But our objects of the subclasses can still do\n    //everything the AlienShip is meant to do\n    aBomber.shipName = \"Newell Bomber\";\n    aFighter.shipName = \"Meier Fighter\";\n\n    //And because of the overridden constructor\n    //That still calls the super constructor\n    //They have unique properties\n    Log.i(\"aFighter Shield:\", \"\"+ aFighter.getShieldStrength());\n    Log.i(\"aBomber Shield:\", \"\"+ aBomber.getShieldStrength());\n\n        //As well as certain things in certain ways\n        //That are unique to the subclass\n        aBomber.fireWeapon();\n        aFighter.fireWeapon();\n\n        //Take down those alien ships\n        //Focus on the bomber it has a weaker shield\n        aBomber.hitDetected();\n        aBomber.hitDetected();\n        aBomber.hitDetected();\n        aBomber.hitDetected();\n    ```", "```java\nLocation:\ufe55 AlienShip constructor\nLocation:\ufe55 Fighter constructor\nLocation:\ufe55 AlienShip constructor\nLocation:\ufe55 Bomber constructor\naFighter Shield:\ufe55 400\naBomber Shield:\ufe55 100\nFiring weapon:\ufe55 bombs away\nFiring weapon:\ufe55 lasers firing\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\nExplosion:\ufe55 Newell Bomber destroyed\n\n```", "```java\n//This code assumes we have an Animal class\n//And we have a Cat and Dog class that extends Animal\nAnimal myAnimal = new Animal();\nDog myDog = new Dog();\nCat myCat = new Cat();\nAnimal [] myAnimals = new Animal[10];\nmyAnimals[0] = myAnimal;//As expected\nmyAnimals[1] = myDog;//This is OK too\nmyAnimals[2] = myCat;//And this is fine as well\n```", "```java\n//6 months later we need elephants\n//with its own unique aspects\n//As long as it extends Animal we can still do this\nElephant myElephant = new Elephant();\nmyAnimals[3] = myElephant;//And this is fine as well\n```", "```java\nAnimal feedAnimal(Animal animalToFeed){\n  //Feed any animal here\n  return animalToFeed;\n}\n```", "```java\npublic abstract class AlienShip{...\n```", "```java\nabstract class someClass{\n  //All methods and variables here as usual\n  //Just don't try and make an object out of me!\n}\n```", "```java\npublic interface myInterface{\n  void someAbstractMethod();//omg I've got no body\n  int anotherAbstractMethod();//Ahh! Me too\n\n//Interface methods are always abstract and public implicitly \n//but we could make it explicit if we prefer\n\n  public abstract explicitlyAbstractAndPublicMethod();//still no body though\n\n}\n```", "```java\npublic class someClass implements someInterface{\n\n//class stuff here\n\n//better implement the methods of the interface or the red error lines will not go away\n  public void someAbstractMethod(){\n    //code here if you like but just an empty implementation will do\n  }\n\n  public int anotherAbstractMethod(){\n    //code here if you like but just an empty implementation will do\n\n    //Must have a return type though as that is part of the contract\n    return 1;}\n}\n```", "```java\n  private class someClass{\n    //class implementation goes here\n  }\n```"]