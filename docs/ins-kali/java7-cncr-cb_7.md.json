["```java\n    public class MyExecutor extends ThreadPoolExecutor {\n    ```", "```java\n      private ConcurrentHashMap<String, Date> startTimes;\n    ```", "```java\n      public MyExecutor(int corePoolSize, int maximumPoolSize,\n          long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n        startTimes=new ConcurrentHashMap<>();\n      }\n    ```", "```java\n      @Override\n      public void shutdown() {\n        System.out.printf(\"MyExecutor: Going to shutdown.\\n\");\n        System.out.printf(\"MyExecutor: Executed tasks: %d\\n\",getCompletedTaskCount());\n        System.out.printf(\"MyExecutor: Running tasks: %d\\n\",getActiveCount());\n        System.out.printf(\"MyExecutor: Pending tasks: %d\\n\",getQueue().size());\n        super.shutdown();\n      }\n    ```", "```java\n      @Override\n      public List<Runnable> shutdownNow() {\n        System.out.printf(\"MyExecutor: Going to immediately shutdown.\\n\");\n        System.out.printf(\"MyExecutor: Executed tasks: %d\\n\",getCompletedTaskCount());\n        System.out.printf(\"MyExecutor: Running tasks: %d\\n\",getActiveCount());\n        System.out.printf(\"MyExecutor: Pending tasks: %d\\n\",getQueue().size());\n        return super.shutdownNow();\n      }\n    ```", "```java\n      @Override\n      protected void beforeExecute(Thread t, Runnable r) {\n        System.out.printf(\"MyExecutor: A task is beginning: %s : %s\\n\",t.getName(),r.hashCode());\n        startTimes.put(String.valueOf(r.hashCode()), new Date());\n      }\n    ```", "```java\n      @Override\n      protected void afterExecute(Runnable r, Throwable t) {\n        Future<?> result=(Future<?>)r;\n        try {\n          System.out.printf(\"*********************************\\n\");\n          System.out.printf(\"MyExecutor: A task is finishing.\\n\");\n          System.out.printf(\"MyExecutor: Result: %s\\n\",result.get());\n          Date startDate=startTimes.remove(String.valueOf(r.hashCode()));\n          Date finishDate=new Date();\n          long diff=finishDate.getTime()-startDate.getTime();\n          System.out.printf(\"MyExecutor: Duration: %d\\n\",diff);\n          System.out.printf(\"*********************************\\n\");\n        } catch (InterruptedException  | ExecutionException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n    ```", "```java\n    public class SleepTwoSecondsTask implements Callable<String> {\n\n      public String call() throws Exception {\n        TimeUnit.SECONDS.sleep(2);\n        return new Date().toString();\n      }\n\n    }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        MyExecutor myExecutor=new MyExecutor(2, 4, 1000, TimeUnit.MILLISECONDS, new LinkedBlockingDeque<Runnable>());\n    ```", "```java\n        List<Future<String>> results=new ArrayList<>();\u00a1;\n    ```", "```java\n        for (int i=0; i<10; i++) {\n          SleepTwoSecondsTask task=new SleepTwoSecondsTask();\n          Future<String> result=myExecutor.submit(task);\n          results.add(result);\n        }\n    ```", "```java\n        for (int i=0; i<5; i++){\n          try {\n            String result=results.get(i).get();\n            System.out.printf(\"Main: Result for Task %d : %s\\n\",i,result);\n          } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        myExecutor.shutdown();\n    ```", "```java\n        for (int i=5; i<10; i++){\n          try {\n            String result=results.get(i).get();\n            System.out.printf(\"Main: Result for Task %d : %s\\n\",i,result);\n          } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        try {\n          myExecutor.awaitTermination(1, TimeUnit.DAYS);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Main: End of the program.\\n\");\n    ```", "```java\n    public class MyPriorityTask implements Runnable, Comparable<MyPriorityTask> {\n    ```", "```java\n      private int priority;  \n    ```", "```java\n      private String name;\n    ```", "```java\n      public MyPriorityTask(String name, int priority) {\n        this.name=name;\n        this.priority=priority;\n      }\n    ```", "```java\n      public int getPriority(){\n        return priority;\n      }\n    ```", "```java\n      @Override\n      public int compareTo(MyPriorityTask o) {\n        if (this.getPriority() < o.getPriority()) {\n          return 1;\n        }\n        if (this.getPriority() > o.getPriority()) {\n          return -1;\n        }\n        return 0;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        System.out.printf(\"MyPriorityTask: %s Priority : %d\\n\",name,priority);\n        try {\n          TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }  \n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ThreadPoolExecutor executor=new ThreadPoolExecutor(2,2,1,TimeUnit.SECONDS,new PriorityBlockingQueue<Runnable>());\n    ```", "```java\n        for (int i=0; i<4; i++){\n          MyPriorityTask task=new MyPriorityTask (\"Task \"+i,i);\n          executor.execute(task);\n        }\n    ```", "```java\n        try {\n          TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        for (int i=4; i<8; i++) {\n          MyPriorityTask task=new MyPriorityTask (\"Task \"+i,i);\n          executor.execute(task);      \n        }\n    ```", "```java\n        executor.shutdown();\n    ```", "```java\n        try {\n          executor.awaitTermination(1, TimeUnit.DAYS);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.printf(\"Main: End of the program.\\n\");\n    ```", "```java\n    public class MyThread extends Thread {\n    ```", "```java\n      private Date creationDate;\n      private Date startDate;\n      private Date finishDate;\n    ```", "```java\n      public MyThread(Runnable target, String name ){\n        super(target,name);\n        setCreationDate();\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        setStartDate();\n        super.run();\n        setFinishDate();\n      }\n    ```", "```java\n      public void setCreationDate() {\n        creationDate=new Date();\n      }\n    ```", "```java\n      public void setStartDate() {\n        startDate=new Date();\n      }\n    ```", "```java\n      public void setFinishDate() {\n        finishDate=new Date();\n      }\n    ```", "```java\n      public long getExecutionTime() {\n        return finishDate.getTime()-startDate.getTime();\n      }\n    ```", "```java\n      @Override\n      public String toString(){\n        StringBuilder buffer=new StringBuilder();\n        buffer.append(getName());\n        buffer.append(\": \");\n        buffer.append(\" Creation Date: \");\n        buffer.append(creationDate);\n        buffer.append(\" : Running time: \");\n        buffer.append(getExecutionTime());\n        buffer.append(\" Milliseconds.\");\n        return buffer.toString();\n      }\n    ```", "```java\n    public class MyThreadFactory implements ThreadFactory {\n    ```", "```java\n      private int counter;\n    ```", "```java\n      private String prefix;\n    ```", "```java\n      public MyThreadFactory (String prefix) {\n        this.prefix=prefix;\n        counter=1;\n      }\n    ```", "```java\n      @Override\n      public Thread newThread(Runnable r) {\n        MyThread myThread=new MyThread(r,prefix+\"-\"+counter);\n        counter++;\n        return myThread;\n      }\n    ```", "```java\n    public class MyTask implements Runnable {\n      @Override\n      public void run() {\n        try {\n          TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        MyThreadFactory myFactory=new MyThreadFactory(\"MyThreadFactory\");\n    ```", "```java\n        MyTask task=new MyTask();\n    ```", "```java\n        Thread thread=myFactory.newThread(task);\n    ```", "```java\n        thread.start();\n        thread.join();\n    ```", "```java\n        System.out.printf(\"Main: Thread information.\\n\");\n        System.out.printf(\"%s\\n\",thread);\n        System.out.printf(\"Main: End of the example.\\n\");\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        MyThreadFactory threadFactory=new MyThreadFactory(\"MyThreadFactory\");\n    ```", "```java\n        ExecutorService executor=Executors.newCachedThreadPool(threadFactory);\n    ```", "```java\n        MyTask task=new MyTask();\n        executor.submit(task);\n    ```", "```java\n        executor.shutdown();\n    ```", "```java\n        executor.awaitTermination(1, TimeUnit.DAYS);\n    ```", "```java\n        System.out.printf(\"Main: End of the program.\\n\");\n    ```", "```java\n    public class MyScheduledTask<V> extends FutureTask<V> implements RunnableScheduledFuture<V> {\n    ```", "```java\n      private RunnableScheduledFuture<V> task;\n    ```", "```java\n      private ScheduledThreadPoolExecutor executor;\n    ```", "```java\n      private long period;\n    ```", "```java\n      private long startDate;\n    ```", "```java\n      public MyScheduledTask(Runnable runnable, V result, RunnableScheduledFuture<V> task, ScheduledThreadPoolExecutor executor) {\n        super(runnable, result);\n        this.task=task;\n        this.executor=executor;\n      }\n    ```", "```java\n      @Override\n      public long getDelay(TimeUnit unit) {\n        if (!isPeriodic()) {\n          return task.getDelay(unit);\n        } else {\n          if (startDate==0){\n            return task.getDelay(unit);\n          } else {\n            Date now=new Date();\n            long delay=startDate-now.getTime();\n            return unit.convert(delay, TimeUnit.MILLISECONDS);\n          }\n        }\n      }\n    ```", "```java\n      @Override\n      public int compareTo(Delayed o) {\n        return task.compareTo(o);\n      }\n    ```", "```java\n      @Override\n      public boolean isPeriodic() {\n        return task.isPeriodic();\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        if (isPeriodic() && (!executor.isShutdown())) {\n          Date now=new Date();\n          startDate=now.getTime()+period;\n          executor.getQueue().add(this);\n        }\n    ```", "```java\n        System.out.printf(\"Pre-MyScheduledTask: %s\\n\",new Date());\n        System.out.printf(\"MyScheduledTask: Is Periodic: %s\\n\",isPeriodic());\n        super.runAndReset();\n        System.out.printf(\"Post-MyScheduledTask: %s\\n\",new Date());\n      }\n    ```", "```java\n      public void setPeriod(long period) {\n        this.period=period;\n      }\n    ```", "```java\n    public class MyScheduledThreadPoolExecutor extends ScheduledThreadPoolExecutor {\n    ```", "```java\n      public MyScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize);\n      }\n    ```", "```java\n      @Override\n      protected <V> RunnableScheduledFuture<V> decorateTask(Runnable runnable,\n          RunnableScheduledFuture<V> task) {\n        MyScheduledTask<V> myTask=new MyScheduledTask<V>(runnable, null, task,this);  \n        return myTask;\n      }\n    ```", "```java\n      @Override\n      public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {\n       ScheduledFuture<?> task= super.scheduleAtFixedRate(command, initialDelay, period, unit);\n       MyScheduledTask<?> myTask=(MyScheduledTask<?>)task;\n     myTask.setPeriod(TimeUnit.MILLISECONDS.convert(period,unit));\n       return task;\n     }\n    ```", "```java\n    public class Task implements Runnable {\n    ```", "```java\n      @Override\n      public void run() {\n        System.out.printf(\"Task: Begin.\\n\");\n        try {\n          TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        System.out.printf(\"Task: End.\\n\");\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) throws Exception{\n    ```", "```java\n        MyScheduledThreadPoolExecutor executor=new MyScheduledThreadPoolExecutor(2);\n    ```", "```java\n        Task task=new Task();\n        System.out.printf(\"Main: %s\\n\",new Date());\n    ```", "```java\n        executor.schedule(task, 1, TimeUnit.SECONDS);\n    ```", "```java\n        TimeUnit.SECONDS.sleep(3);\n    ```", "```java\n    task=new Task();\n        System.out.printf(\"Main: %s\\n\",new Date());\n    ```", "```java\n        executor.scheduleAtFixedRate(task, 1, 3, TimeUnit.SECONDS);\n    ```", "```java\n        TimeUnit.SECONDS.sleep(10);\n    ```", "```java\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.DAYS);\n    ```", "```java\n        System.out.printf(\"Main: End of the program.\\n\");\n    ```", "```java\n    public class MyWorkerThread extends ForkJoinWorkerThread {\n    ```", "```java\n      private static ThreadLocal<Integer> taskCounter=new ThreadLocal<Integer>();\n    ```", "```java\n      protected MyWorkerThread(ForkJoinPool pool) {\n        super(pool);\n      }\n    ```", "```java\n      @Override\n      protected void onStart() {\n        super.onStart();\n        System.out.printf(\"MyWorkerThread %d: Initializing task counter.\\n\",getId());\n        taskCounter.set(0);\n      }\n    ```", "```java\n      @Override\n      protected void onTermination(Throwable exception) {\n        System.out.printf(\"MyWorkerThread %d: %d\\n\",getId(),taskCounter.get());\n        super.onTermination(exception);\n      }\n    ```", "```java\n      public void addTask(){\n        int counter=taskCounter.get().intValue();\n        counter++;\n        taskCounter.set(counter);\n      }\n    ```", "```java\n    public class MyWorkerThreadFactory implements ForkJoinWorkerThreadFactory {\n\n      @Override\n      public ForkJoinWorkerThread newThread(ForkJoinPool pool) {\n        return new MyWorkerThread(pool);\n      }\n\n    }\n    ```", "```java\n    public class MyRecursiveTask extends RecursiveTask<Integer> {\n    ```", "```java\n      private int array[];\n    ```", "```java\n      private int start, end;\n    ```", "```java\n      public Task(int array[],int start, int end) {\n        this.array=array;\n        this.start=start;\n        this.end=end;\n      }\n    ```", "```java\n      @Override\n      protected Integer compute() {\n        Integer ret;\n        MyWorkerThread thread=(MyWorkerThread)Thread.currentThread();\n        thread.addTask();\n      }\n    ```", "```java\n      private Integer addResults(Task task1, Task task2) {\n        int value;\n        try {\n          value = task1.get().intValue()+task2.get().intValue();\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          value=0;\n        } catch (ExecutionException e) {\n          e.printStackTrace();\n          value=0;\n        }\n    ```", "```java\n        try {\n          TimeUnit.MILLISECONDS.sleep(10);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        return value;\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        MyWorkerThreadFactory factory=new MyWorkerThreadFactory();\n    ```", "```java\n        ForkJoinPool pool=new ForkJoinPool(4, factory, null, false);\n    ```", "```java\n        int array[]=new int[100000];\n\n        for (int i=0; i<array.length; i++){\n          array[i]=1;\n        }\n    ```", "```java\n        MyRecursiveTask task=new MyRecursiveTask(array,0,array.length);\n    ```", "```java\n        pool.execute(task);\n    ```", "```java\n        task.join();\n    ```", "```java\n        pool.shutdown();\n    ```", "```java\n        pool.awaitTermination(1, TimeUnit.DAYS);\n    ```", "```java\n          System.out.printf(\"Main: Result: %d\\n\",task.get());    \n    ```", "```java\n        System.out.printf(\"Main: End of the program\\n\");\n    ```", "```java\n    public abstract class MyWorkerTask extends ForkJoinTask<Void> {\n    ```", "```java\n      private String name;\n    ```", "```java\n      public MyWorkerTask(String name) {\n        this.name=name;\n      }\n    ```", "```java\n      @Override\n      public Void getRawResult() {\n        return null;\n      }\n    ```", "```java\n      @Override\n      protected void setRawResult(Void value) {\n\n      }\n    ```", "```java\n      @Override\n      protected boolean exec() {\n        Date startDate=new Date();\n        compute();\n        Date finishDate=new Date();\n        long diff=finishDate.getTime()-startDate.getTime();\n        System.out.printf(\"MyWorkerTask: %s : %d Milliseconds to complete.\\n\",name,diff);\n        return true;\n      }\n    ```", "```java\n      public String getName(){\n        return name;\n      }\n    ```", "```java\n      protected abstract void compute();\n    ```", "```java\n    public class Task extends MyWorkerTask {\n    ```", "```java\n      private int array[];\n    ```", "```java\n      public Task(String name, int array[], int start, int end){\n        super(name);\n        this.array=array;\n        this.start=start;\n        this.end=end;\n      }\n    ```", "```java\n      protected void compute() {\n        if (end-start>100){\n          int mid=(end+start)/2;\n          Task task1=new Task(this.getName()+\"1\",array,start,mid);\n          Task task2=new Task(this.getName()+\"2\",array,mid,end);\n          invokeAll(task1,task2);\n    ```", "```java\n        } else {\n          for (int i=start; i<end; i++) {\n            array[i]++;\n          }\n    ```", "```java\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        int array[]=new int[10000];\n    ```", "```java\n        ForkJoinPool pool=new ForkJoinPool();\n    ```", "```java\n        Task task=new Task(\"Task\",array,0,array.length);\n    ```", "```java\n        pool.invoke(task);\n    ```", "```java\n        pool.shutdown();\n    ```", "```java\n        System.out.printf(\"Main: End of the program.\\n\");\n    ```", "```java\n    public class MyAbstractQueuedSynchronizer extends AbstractQueuedSynchronizer {\n    ```", "```java\n      private AtomicInteger state;\n    ```", "```java\n      public MyAbstractQueuedSynchronizer() {\n        state=new AtomicInteger(0);\n      }\n    ```", "```java\n      @Override\n      protected boolean tryAcquire(int arg) {\n        return state.compareAndSet(0, 1);\n      }\n    ```", "```java\n      @Override\n      protected boolean tryRelease(int arg) {\n        return state.compareAndSet(1, 0);\n      }\n    ```", "```java\n    public class MyLock implements Lock{\n    ```", "```java\n      private AbstractQueuedSynchronizer sync;\n    ```", "```java\n      public MyLock() {\n        sync=new MyAbstractQueuedSynchronizer();\n      }\n    ```", "```java\n      @Override\n      public void lock() {\n        sync.acquire(1);\n      }\n    ```", "```java\n      @Override\n      public void lockInterruptibly() throws InterruptedException {\n        sync.acquireInterruptibly(1);\n      }\n    ```", "```java\n      @Override\n      public boolean tryLock() {\n        try {\n          return sync.tryAcquireNanos(1, 1000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          return false;\n        }\n      }\n    ```", "```java\n      @Override\n      public boolean tryLock(long time, TimeUnit unit)\n          throws InterruptedException {\n        return sync.tryAcquireNanos(1, TimeUnit.NANOSECONDS.convert(time, unit));\n      }\n    ```", "```java\n      @Override\n      public void unlock() {\n        sync.release(1);\n      }\n    ```", "```java\n      @Override\n      public Condition newCondition() {\n        return sync.new ConditionObject();\n      }\n    ```", "```java\n    public class Task implements Runnable {\n    ```", "```java\n      private MyLock lock;\n    ```", "```java\n      private String name;\n    ```", "```java\n      public Task(String name, MyLock lock){\n        this.lock=lock;\n        this.name=name;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        lock.lock();\n        System.out.printf(\"Task: %s: Take the lock\\n\",name);\n        try {\n          TimeUnit.SECONDS.sleep(2);\n          System.out.printf(\"Task: %s: Free the lock\\n\",name);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n          lock.unlock();\n        }\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        MyLock lock=new MyLock();\n    ```", "```java\n        for (int i=0; i<10; i++){\n          Task task=new Task(\"Task-\"+i,lock);\n          Thread thread=new Thread(task);\n          thread.start();\n        }\n    ```", "```java\n        boolean value;\n        do {\n          try {\n            value=lock.tryLock(1,TimeUnit.SECONDS);\n            if (!value) {\n              System.out.printf(\"Main: Trying to get the Lock\\n\");\n            }\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n            value=false;\n          }\n        } while (!value);\n    ```", "```java\n        System.out.printf(\"Main: Got the lock\\n\");\n        lock.unlock();\n    ```", "```java\n        System.out.printf(\"Main: End of the program\\n\");\n    ```", "```java\n    public class MyPriorityTransferQueue<E> extends PriorityBlockingQueue<E> implements\n        TransferQueue<E> {\n    ```", "```java\n      private AtomicInteger counter;\n    ```", "```java\n      private LinkedBlockingQueue<E> transfered;\n    ```", "```java\n      private ReentrantLock lock;\n    ```", "```java\n      public MyPriorityTransferQueue() {\n        counter=new AtomicInteger(0);\n        lock=new ReentrantLock();\n        transfered=new LinkedBlockingQueue<E>();\n      }\n    ```", "```java\n      @Override\n      public boolean tryTransfer(E e) {\n        lock.lock();\n        boolean value;\n        if (counter.get()==0) {\n          value=false;\n        } else {\n          put(e);\n          value=true;\n        }\n        lock.unlock();\n        return value;\n      }\n    ```", "```java\n      @Override\n      public void transfer(E e) throws InterruptedException {\n        lock.lock();\n        if (counter.get()!=0) {\n          put(e);\n          lock.unlock();\n        } else {\n          transfered.add(e);\n          lock.unlock();\n          synchronized (e) {\n            e.wait();\n          }\n        }\n      }\n    ```", "```java\n      @Override\n      public boolean tryTransfer(E e, long timeout, TimeUnit unit)\n          throws InterruptedException {\n        lock.lock();\n        if (counter.get()!=0) {\n          put(e);\n          lock.unlock();\n          return true;\n        } else {\n          transfered.add(e);\n          long newTimeout= TimeUnit.MILLISECONDS.convert(timeout, unit);\n          lock.unlock();\n          e.wait(newTimeout);\n          lock.lock();\n          if (transfered.contains(e)) {\n            transfered.remove(e);\n            lock.unlock();\n            return false;\n          } else {\n            lock.unlock();\n            return true;\n          }\n        }\n      }\n    ```", "```java\n      @Override\n      public boolean hasWaitingConsumer() {\n        return (counter.get()!=0);\n      }\n    ```", "```java\n      @Override\n      public int getWaitingConsumerCount() {\n        return counter.get();\n      }\n    ```", "```java\n      @Override\n      public E take() throws InterruptedException {\n        lock.lock();\n        counter.incrementAndGet();\n    ```", "```java\n        E value=transfered.poll();\n        if (value==null) {\n          lock.unlock();\n          value=super.take();\n          lock.lock();\n    ```", "```java\n        } else {\n          synchronized (value) {\n            value.notify();\n          }\n        }\n    ```", "```java\n        counter.decrementAndGet();\n        lock.unlock();\n        return value;\n      }\n    ```", "```java\n    public class Event implements Comparable<Event> {\n    ```", "```java\n      private String thread;\n    ```", "```java\n      private int priority;\n    ```", "```java\n      public Event(String thread, int priority){\n        this.thread=thread;\n        this.priority=priority;\n      }\n    ```", "```java\n      public String getThread() {\n        return thread;\n      }\n    ```", "```java\n      public int getPriority() {\n        return priority;\n      }\n    ```", "```java\n      public int compareTo(Event e) {\n        if (this.priority>e.getPriority()) {\n          return -1;\n        } else if (this.priority<e.getPriority()) {\n          return 1; \n        } else {\n          return 0;\n        }\n      }\n    ```", "```java\n    public class Producer implements Runnable {\n    ```", "```java\n      private MyPriorityTransferQueue<Event> buffer;\n    ```", "```java\n      public Producer(MyPriorityTransferQueue<Event> buffer) {\n        this.buffer=buffer;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        for (int i=0; i<100; i++) {\n          Event event=new Event(Thread.currentThread().getName(),i);\n          buffer.put(event);\n        }\n      }\n    ```", "```java\n    public class Consumer implements Runnable {\n    ```", "```java\n      private MyPriorityTransferQueue<Event> buffer;\n    ```", "```java\n      public Consumer(MyPriorityTransferQueue<Event> buffer) {\n        this.buffer=buffer;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        for (int i=0; i<1002; i++) {\n          try {\n            Event value=buffer.take();\n            System.out.printf(\"Consumer: %s: %d\\n\",value.getThread(),value.getPriority());\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        MyPriorityTransferQueue<Event> buffer=new MyPriorityTransferQueue<Event>();\n    ```", "```java\n        Producer producer=new Producer(buffer);\n\n        Thread producerThreads[]=new Thread[10];\n        for (int i=0; i<producerThreads.length; i++) {\n          producerThreads[i]=new Thread(producer);\n          producerThreads[i].start();\n        }\n    ```", "```java\n        Consumer consumer=new Consumer(buffer);\n        Thread consumerThread=new Thread(consumer);\n        consumerThread.start();\n    ```", "```java\n        System.out.printf(\"Main: Buffer: Consumer count: %d\\n\",buffer.getWaitingConsumerCount());\n    ```", "```java\n        Event myEvent=new Event(\"Core Event\",0);\n        buffer.transfer(myEvent);\n        System.out.printf(\"Main: My Event has ben transfered.\\n\");\n    ```", "```java\n        for (int i=0; i<producerThreads.length; i++) {\n          try {\n            producerThreads[i].join();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n          TimeUnit.SECONDS.sleep(1);  \n    ```", "```java\n        System.out.printf(\"Main: Buffer: Consumer count: %d\\n\",buffer.getWaitingConsumerCount());\n    ```", "```java\n        myEvent=new Event(\"Core Event 2\",0);\n          buffer.transfer(myEvent);  \n    ```", "```java\n          consumerThread.join();\n    ```", "```java\n        System.out.printf(\"Main: End of the program\\n\");\n    ```", "```java\n    public class ParkingCounter extends AtomicInteger {\n    ```", "```java\n      private int maxNumber;\n    ```", "```java\n      public ParkingCounter(int maxNumber){\n        set(0);\n        this.maxNumber=maxNumber;\n      }\n    ```", "```java\n      public boolean carIn() {\n        for (;;) {\n          int value=get();\n    ```", "```java\n          if (value==maxNumber) {\n            System.out.printf(\"ParkingCounter: The parking lot is full.\\n\");\n            return false;\n    ```", "```java\n          } else {\n            int newValue=value+1;\n            boolean changed=compareAndSet(value,newValue);\n            if (changed) {\n              System.out.printf(\"ParkingCounter: A car has entered.\\n\");\n              return true;\n            }\n          }\n        }\n      }\n    ```", "```java\n      public boolean carOut() {\n        for (;;) {\n          int value=get();\n          if (value==0) {\n            System.out.printf(\"ParkingCounter: The parking lot is empty.\\n\");\n            return false;\n          } else {\n            int newValue=value-1;\n            boolean changed=compareAndSet(value,newValue);\n            if (changed) {\n            System.out.printf(\"ParkingCounter: A car has gone out.\\n\");\n              return true;\n            }\n          }\n        }\n      }\n    ```", "```java\n    public class Sensor1 implements Runnable {\n    ```", "```java\n      private ParkingCounter counter;\n    ```", "```java\n      public Sensor1(ParkingCounter counter) {\n        this.counter=counter;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        counter.carIn();\n        counter.carIn();\n        counter.carIn();\n        counter.carIn();\n        counter.carOut();\n        counter.carOut();\n        counter.carOut();\n        counter.carIn();\n        counter.carIn();\n        counter.carIn();\n      }\n    ```", "```java\n    public class Sensor2 implements Runnable {\n    ```", "```java\n      private ParkingCounter counter;\n    ```", "```java\n      public Sensor2(ParkingCounter counter) {\n        this.counter=counter;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        counter.carIn();\n        counter.carOut();\n        counter.carOut();\n        counter.carIn();\n        counter.carIn();\n        counter.carIn();\n        counter.carIn();\n        counter.carIn();\n        counter.carIn();\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        ParkingCounter counter=new ParkingCounter(5);\n    ```", "```java\n        Sensor1 sensor1=new Sensor1(counter);\n        Sensor2 sensor2=new Sensor2(counter);\n\n        Thread thread1=new Thread(sensor1);\n        Thread thread2=new Thread(sensor2);\n\n        thread1.start();\n        thread2.start();\n    ```", "```java\n        thread1.join();\n        thread2.join();\n    ```", "```java\n        System.out.printf(\"Main: Number of cars: %d\\n\",counter.get());\n    ```", "```java\n        System.out.printf(\"Main: End of the program.\\n\");\n    ```"]