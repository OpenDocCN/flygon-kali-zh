- en: Chapter 13. Advanced Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。高级模式
- en: I hesitated when naming this chapter, *Advanced Patterns*. This isn't really
    about patterns that are more complicated or sophisticated than other patterns.
    It is about patterns that you wouldn't use very frequently. Frankly, coming from
    a static programming language background, some of them seem crazy. Nonetheless
    they are completely valid patterns and are in use within big name projects everywhere.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我给这一章命名时，我犹豫了一下，“高级模式”。这并不是关于比其他模式更复杂或更复杂的模式。这是关于您不经常使用的模式。坦率地说，来自静态编程语言背景的一些模式看起来有些疯狂。尽管如此，它们是完全有效的模式，并且在各大知名项目中都在使用。
- en: 'In this chapter we''ll be looking at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Dependency injection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Live post processing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时后处理
- en: Aspect oriented programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向方面的编程
- en: Macros
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏
- en: Dependency injection
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入
- en: One of the topics we've been talking about continuously during this module is
    the importance of making your code modular. Small classes are easier to test,
    provide better reuse, and promote better collaboration for teams. Modular, loosely
    coupled code is easier to maintain, as changes can be limited. You may remember
    the example of a ripstop we used earlier.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本模块中，我们一直在讨论的一个话题是使您的代码模块化的重要性。小的类更容易测试，提供更好的重用，并促进团队更好的协作。模块化、松散耦合的代码更容易维护，因为更改可以受到限制。您可能还记得我们之前使用的一个撕裂示例。
- en: With modular code of this sort we see a lot of inversion of control. Classes
    have functionality inserted into them through passing additional classes by their
    creators. This moves the responsibility for how some portions of the child class
    work to the parent. For small projects, this is a pretty reasonable approach.
    As projects get more complicated and dependency graphs get more complicated, manually
    injecting the functionality becomes more and more difficult. We are still creating
    objects all over the code base, passing them into created objects so the coupling
    problem still exists, we've just shifted it up a level.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种模块化的代码，我们看到了很多控制反转。类通过创建者通过传递额外的类将功能插入到它们中。这将一些子类的工作责任转移到了父类。对于小型项目来说，这是一个相当合理的方法。随着项目变得更加复杂和依赖图变得更加复杂，手动注入功能变得越来越困难。我们仍然在整个代码库中创建对象，并将它们传递给创建的对象，因此耦合问题仍然存在，只是我们把它提升到了更高的层次。
- en: If we think of object creation as a service, then a solution to this problem
    presents itself. We can defer the object creation to a central location. This
    allows us to change the implementations for a given interface in one place, simply
    and easily. It also allows us to control object lifetime so that we can reuse
    objects or recreate them every time they are used. If we need to replace one implementation
    of an interface with another implementation, then we can be confident that we
    need to only change it in one location. Because the new implementation still fulfils
    the contract, that is the interface, then all the classes that make use of the
    interface can remain ignorant of the change.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把对象创建看作是一项服务，那么这个问题的解决方案就呈现出来了。我们可以把对象的创建推迟到一个中央位置。这样可以让我们在一个地方简单轻松地改变给定接口的实现。它还可以让我们控制对象的生命周期，以便我们可以重用对象或者在每次使用时重新创建它们。如果我们需要用另一个实现替换接口的一个实现，那么我们可以确信只需要在一个位置进行更改。因为新的实现仍然满足合同，也就是接口，那么使用接口的所有类都可以对更改保持无知。
- en: What's more is that by centralizing object creation it becomes easier to construct
    objects that depend on other objects. If we look at a dependency graph for a module
    such as the `UserManager` variable, it is clear that it has a number of dependencies.
    These dependencies may have additional dependencies and so forth. To build a `UserManager`
    variable, we not only need to pass in the database, but also `ConnectionStringProvider`,
    `CredentialProvider`, and `ConfigFileConnectionStringReader`. Goodness, that is
    going to be a lot of work to create instances of all of these. If we, instead,
    register implementations of each of these interfaces in a registry, then we need
    only go to the registry to look up how to make them. This can be automated and
    the dependencies automatically get injected to all dependencies without a need
    to explicitly create any of them. This method of solving dependencies is commonly
    referred to as 'solving the transitive closure'.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，通过集中对象创建，更容易构造依赖于其他对象的对象。如果我们查看一个模块的依赖图，比如`UserManager`变量，很明显它有许多依赖关系。这些依赖关系可能还有其他依赖关系，依此类推。要构建一个`UserManager`变量，我们不仅需要传递数据库，还需要`ConnectionStringProvider`、`CredentialProvider`和`ConfigFileConnectionStringReader`。天哪，要创建所有这些实例将是一项艰巨的工作。相反，如果我们在注册表中注册了每个接口的实现，那么我们只需要去注册表查找如何制作它们。这可以自动化，依赖关系会自动注入到所有依赖关系中，而无需显式创建任何一个。这种解决依赖关系的方法通常被称为“解决传递闭包”。
- en: 'A dependency injection framework handles the responsibility of constructing
    objects. On application set up the dependency injection framework is primed with
    a combination of names and objects. From this, it creates a registry or a container.
    When constructing an object through the container, the container looks at the
    signature of the constructor and attempts to satisfy the arguments on the constructor.
    Here is an illustration of a dependency graph:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入框架处理构造对象的责任。在应用程序设置时，依赖注入框架使用名称和对象的组合。从这个组合中，它创建一个注册表或容器。在通过容器构造对象时，容器查看构造函数的签名，并尝试满足构造函数的参数。这里是一个依赖图的示例：
- en: '![Dependency injection](img/00098.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![依赖注入](img/00098.jpeg)'
- en: In more statically typed languages such as C# or Java, dependency injection
    frameworks are commonplace. They usually work by using reflection, a method of
    using code to extract structural information from other code. When building the
    container, one specifies an interface and one or more concrete classes that can
    satisfy the interface. Of course using interfaces and reflection to perform dependency
    injection requires that the language support both interfaces and introspection.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如C#或Java之类的更静态类型的语言中，依赖注入框架很常见。它们通常通过使用反射来工作，反射是一种使用代码从其他代码中提取结构信息的方法。在构建容器时，人们指定一个接口和一个或多个可以满足接口的具体类。当然，使用接口和反射来执行依赖注入要求语言支持接口和内省。
- en: 'There is no way to do this in JavaScript. JavaScript has neither direct introspection
    nor a traditional object inheritance model. A common approach is to use variable
    names to solve the dependency problem. Consider a class that has a constructor
    like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中无法这样做。JavaScript既没有直接的内省，也没有传统的对象继承模型。一个常见的方法是使用变量名来解决依赖问题。考虑一个具有以下构造函数的类：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The constructor takes two arguments that are very specifically named. When we
    construct this class through the dependency injection, these two arguments are
    satisfied by looking through the names registered with the container and passing
    them into the constructor. However, without introspection how can we extract the
    names of the parameters so we know what to pass into the constructor?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数接受两个非常具体命名的参数。当我们通过依赖注入构造这个类时，这两个参数通过查看容器中注册的名称并将它们传递到构造函数中来满足。然而，没有内省，我们如何提取参数的名称，以便知道传递到构造函数中的内容呢？
- en: 'The solution is actually amazingly simple. The original text of any function
    in JavaScript is available by simply calling `toString` on it. So, for the constructor
    given in the preceding code, we can do just do this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案实际上非常简单。在JavaScript中，任何函数的原始文本都可以通过简单地调用`toString`来获得。因此，对于前面代码中给出的构造函数，我们可以这样做：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can parse the string returned to extract the names of the parameters.
    Care must be taken to parse the text correctly, but it is possible. The popular
    JavaScript framework, Angular, actually uses this method to do its dependency
    injection. The result remains relatively preformat. The parsing really only needs
    to be done once and the results cached, so no additional penalty is incurred.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以解析返回的字符串以提取参数的名称。必须小心地正确解析文本，但这是可能的。流行的JavaScript框架Angular实际上使用这种方法来进行其依赖注入。结果仍然相对预格式化。解析实际上只需要做一次，并且结果被缓存，因此不会产生额外的惩罚。
- en: I won't go through how to actually implement the dependency injection, as it
    is rather tedious. When parsing the function, you can either parse it using a
    string-matching algorithm or build a lexer and parser for the JavaScript grammar.
    The first solution seems easier but it is likely a better decision to try to build
    up a simple syntax tree for the code into which you're injecting. Fortunately,
    the entire method body can be treated as a single token, so it is vastly easier
    than building a fully-fledged parser.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细介绍如何实际实现依赖注入，因为这相当乏味。在解析函数时，可以使用字符串匹配算法进行解析，也可以为JavaScript语法构建词法分析器和解析器。第一种解决方案似乎更容易，但更好的决定可能是尝试为您要注入的代码构建一个简单的语法树。幸运的是，整个方法体可以被视为单个标记，因此比构建一个完整的解析器要容易得多。
- en: If you're willing to impose a different syntax on the user of your dependency
    injection framework then you can even go so far as to create your own syntax.
    The Angular 2.0 dependency injection framework, `di.js`, supports a custom syntax
    for denoting both places where objects should be injected and for denoting which
    objects satisfy some requirement.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意对依赖注入框架的用户施加不同的语法，甚至可以创建自己的语法。Angular 2.0依赖注入框架`di.js`支持用于表示应注入对象的位置以及表示哪些对象满足某些要求的自定义语法。
- en: 'Using it as a class into which some code needs to be injected, looks like this
    code, taken from the `di.js` examples page:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将其用作需要注入一些代码的类，看起来像这段代码，取自`di.js`示例页面：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `CoffeeMaker` instance might look like the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`CoffeeMaker`实例可能如下所示：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You might have also noticed that this example makes use of the `class` keyword.
    This is because the project is very forward looking and requires the use of `traceur.js`
    to provide for ES6 class support. We'll learn about `traceur.js` file in the next
    chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到这个示例使用了`class`关键字。这是因为该项目非常前瞻，需要使用`traceur.js`来提供ES6类支持。我们将在下一章了解`traceur.js`文件。
- en: Live post processing
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时后处理
- en: It should be apparent now that running `toString` over a function in JavaScript
    is a valid way to perform tasks. It seems odd but, really, writing code that emits
    other code is as old as Lisp or possibly older. When I first came across how dependency
    injection works in AngularJS, I was both disgusted at the hack and impressed by
    the ingenuity of the solution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该明显了，在JavaScript中运行`toString`是执行任务的有效方法。这似乎很奇怪，但实际上，编写生成其他代码的代码与Lisp一样古老，甚至可能更古老。当我第一次了解AngularJS中依赖注入的工作原理时，我对这种方法感到恶心，但对解决方案的创造力印象深刻。
- en: 'If it is possible to do dependency injection by interpreting code on the fly,
    then what more could we do with it? The answer is: quite a lot. The first thing
    that comes to mind is that you could write domain specific languages.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以通过即时解释代码来进行依赖注入，那么我们还能做更多什么呢？答案是：相当多。首先想到的是，您可以编写特定领域的语言。
- en: We talked about DSLs in [Chapter 5](part0111_split_000.html#39REE1-015e68c68a464f18a9559f448be84435
    "Chapter 5. Behavioral Patterns"), *Behavioral Patterns*, and even created a very
    simple one. With the ability to load and rewrite JavaScript, we can take advantage
    of a syntax that is close to JavaScript but not wholly compatible. When interpreting
    the DSL, our interpreter would write out additional tokens needed to convert the
    code to actual JavaScript.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](part0111_split_000.html#39REE1-015e68c68a464f18a9559f448be84435 "第5章。行为模式")中讨论了DSL，*行为模式*，甚至创建了一个非常简单的DSL。通过加载和重写JavaScript的能力，我们可以利用接近JavaScript但不完全兼容的语法。在解释DSL时，我们的解释器将写出转换代码为实际JavaScript所需的额外标记。
- en: 'One of the nice features of TypeScript that I''ve always liked is that parameters
    to the constructors that are marked as public are automatically transformed into
    properties on the object. For instance, the TypeScript code that follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直喜欢的TypeScript的一个很好的特性是，标记为public的构造函数参数会自动转换为对象的属性。例如，以下TypeScript代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compiles to the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 编译为以下代码：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We could do something similar in our DSL. Starting with the `Axe` definition
    that follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的DSL中做类似的事情。从以下`Axe`定义开始：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We've used a comment here to denote that `headHeight` should be public. Unlike
    the TypeScript version, we would like our source code to be valid JavaScript.
    Because comments are included in the `toString` function this works just fine.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用注释来表示`headHeight`应该是公共的。与TypeScript版本不同，我们希望我们的源代码是有效的JavaScript。因为注释包含在`toString`函数中，所以这样做没问题。
- en: 'The next thing to do is to actually emit new JavaScript from this. I''ve taken
    a naïve approach and used regular expressions. This approach would quickly get
    out of hand and probably only works with the well-formed JavaScript in the `Axe`
    class:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的事情是实际从中发出新的JavaScript。我采取了一种天真的方法，并使用了正则表达式。这种方法很快就会失控，可能只适用于`Axe`类中格式良好的JavaScript：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we extract the parameters to the function and check for those that have
    the `public` annotation. The result of this function can be passed back into eval
    for use in the current object or written out to a file if we're using this function
    in a pre-processor. Typically use of eval in JavaScript is discouraged.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们提取函数的参数并检查具有`public`注释的参数。此函数的结果可以传回到eval中，以在当前对象中使用，或者如果我们在预处理器中使用此函数，则可以将其写入文件。通常不鼓励在JavaScript中使用eval。
- en: There are tons of different things that can be done using this sort of processing.
    Even without string post-processing there are some interesting programming concept
    we can explore by just wrapping methods.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种处理方式可以做很多不同的事情。即使没有字符串后处理，我们也可以通过包装方法来探索一些有趣的编程概念。
- en: Aspect oriented programming
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向切面编程
- en: Modularity of software is a great feature, the majority of this module has been
    about modularity and its advantages. However, there are some features of software
    that span the entire system. Security is a great example of this.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的模块化是一个很好的特性，本模块的大部分内容都是关于模块化及其优点。然而，软件中有一些功能跨越整个系统。安全性就是一个很好的例子。
- en: 'We would like to have similar security code in all the modules of the application
    to check that people are, in fact, authorized to perform some action. So if we
    have a function of the sort:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在应用程序的所有模块中都有类似的安全代码，以检查人们是否确实被授权执行某些操作。所以如果我们有这样的一个函数：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can see that there is a fair bit of code in place to check if a user is
    authorized. This same boilerplate code is used elsewhere in the application. In
    fact, with this being a high security application, the security checks are in
    place in every public function. All is well until we need to make a change to
    the common security code. This change needs to take place in every single public
    function in the application. We can refactor our application all we want, but
    the truth remains: we need to have at least some code in each of the public methods
    to perform a security check. This is known as a cross-cutting concern.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有相当多的代码来检查用户是否被授权。这个相同的样板代码在应用程序的其他地方也被使用。事实上，由于这是一个高安全性的应用程序，安全检查在每个公共函数中都有。一切都很好，直到我们需要对常见的安全代码进行更改。这个更改需要在应用程序的每一个公共函数中进行。我们可以重构我们的应用程序，但事实仍然存在：我们需要在每个公共方法中至少有一些代码来执行安全检查。这被称为交叉关注点。
- en: There are other instances of cross-cutting concerns in most large applications.
    Logging is a great example, as is database access and performance instrumenting.
    **Aspect oriented programming** (**AOP**) presents a way to minimize the repeated
    code through a process known as **weaving**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数大型应用程序中还有其他交叉关注点的实例。日志记录是一个很好的例子，数据库访问和性能检测也是。**面向切面编程**（**AOP**）提供了一种通过**编织**过程来最小化重复代码的方式。
- en: 'An aspect is a piece of code that can intercept method calls and change them.
    On the .Net platform there is a tool called PostSharp that does aspect weaving
    and, on the Java platform, one called AspectJ. These tools hook into the build
    pipeline and modify the code after it has been transformed into instructions.
    This allows code to be injected wherever needed. The source code appears unchanged
    but the compiled output now includes calls to the aspect. Aspects solve the cross
    cutting concern by being injected into existing code. Here you can see the application
    of an aspect to a method through a weaver:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 切面是一段代码，可以拦截方法调用并对其进行更改。在.Net平台上有一个叫做PostSharp的工具，可以进行切面编织，在Java平台上有一个叫做AspectJ的工具。这些工具可以钩入构建管道，并在代码转换为指令后修改代码。这允许在需要的地方注入代码。源代码看起来没有变化，但编译输出现在包括对切面的调用。切面通过被注入到现有代码中来解决交叉关注点。在这里，你可以看到通过编织器将切面应用到方法的应用。
- en: '![Aspect oriented programming](img/00099.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![面向切面编程](img/00099.jpeg)'
- en: Of course we don't have the luxury of a design-time compile step in most JavaScript
    workflows. Fortunately, we've already seen some approaches that would allow us
    to implement cross cuts using JavaScript. The first thing we need is the wrapping
    of methods that we saw in the testing chapter. The second is the `tostring` abilities
    from earlier in this chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在大多数JavaScript工作流程中，我们没有设计时编译步骤的奢侈。幸运的是，我们已经看到了一些可以使用JavaScript实现横切的方法。我们需要的第一件事是包装我们在测试章节中看到的方法。第二个是本章前面提到的`tostring`功能。
- en: There are some AOP libraries already in existence for JavaScript that may be
    a good bet to explore. However, we can implement a simple interceptor here. First
    let's decide on the grammar for requesting injection. We'll use the same idea
    of comments from earlier to denote methods that require interception. We'll just
    make the first line in the method a comment that reads `aspect(<name of aspect>)`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 已经存在一些用于JavaScript的AOP库，可能是一个值得探索的好选择。但是，我们可以在这里实现一个简单的拦截器。首先让我们决定请求注入的语法。我们将使用与前面注释相同的想法来表示需要拦截的方法。我们将使方法中的第一行成为一个注释，内容为`aspect(<aspect的名称>)`。
- en: 'To start we''ll take a slightly modified version of our same `GoldTransfer`
    class from earlier:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将采用稍微修改过的与之前相同的`GoldTransfer`类：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We''ve stripped out all the security stuff that used to exist in it and added
    a console log so we can see that it actually works. Next we''ll need an aspect
    to weave into it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经剥离了以前存在的所有安全性内容，并添加了一个控制台日志，以便我们可以看到它实际上是有效的。接下来，我们需要一个要编织到其中的方面：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For this we use a simple class that has a `BeforeCall` and `AfterCall` method,
    one which is called before and one which is called after the original method.
    We don''t need to use eval in this case so the interceptions are safer:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用一个简单的类，其中有`BeforeCall`和`AfterCall`方法，一个在原始方法之前调用，一个在原始方法之后调用。在这种情况下，我们不需要使用eval，因此拦截更安全。
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This interceptor can easily be modified to a shortcut and return something before
    the main method body is called. It can also be changed so that the output of the
    function can be modified by simply tracking the output from the wrapped method
    and then modifying it in the `AfterCall` method.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个拦截器可以很容易地修改为一个快捷方式，并在调用主方法体之前返回一些内容。它也可以被改变，以便通过简单跟踪包装方法的输出，然后在`AfterCall`方法中修改函数的输出。
- en: This is a fairly lightweight example of AOP. There are some frameworks in existence
    for JavaScript AOP, but perhaps the best approach is to make use of a precompiler
    or macro language.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是AOP的一个相当轻量级的例子。JavaScript中已经存在一些AOP框架，但也许最好的方法是利用预编译器或宏语言。
- en: Mixins
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混入
- en: As we saw much earlier in this module, the inheritance pattern for JavaScript
    is different from the typical pattern seen in languages like C# and Java. JavaScript
    uses prototype inheritance that allows adding functions to a class quite easily
    and from multiple sources. Prototype inheritance allows for adding methods from
    multiple sources in a similar fashion to the much-maligned multiple-inheritance.
    The primary criticism of multiple inheritance is that it is difficult to understand
    which overload of a method will be called in a situation. This problem is somewhat
    alleviated in a prototype inheritance model. Thus we can feel comfortable using
    the approach of adding functionality from several sources, which is known as mixins.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本模块中早期看到的，JavaScript的继承模式与C＃和Java等语言中典型的模式不同。JavaScript使用原型继承，允许很容易地向类添加函数，并且可以从多个来源添加方法。原型继承允许以类似于多重继承的方式从多个来源添加方法。多重继承的主要批评是很难理解在某种情况下将调用哪个方法的重载。在原型继承模型中，这个问题在一定程度上得到了缓解。因此，我们可以放心地使用从多个来源添加功能的方法，这就是所谓的混入。
- en: A mixin is a chunk of code which can be added to existing classes to expand
    their functionality. They make the most sense in scenarios where the functions
    need to be shared between disparate classes where an inheritance relationship
    is too strong.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 混入是一块代码，可以添加到现有类中，以扩展其功能。它们在函数需要在不同的类之间共享，并且继承关系过于强大的情况下是最有意义的。
- en: 'Let''s imagine a scenario where this sort of functionality would be handy.
    In the land of Westeros, death is not always as permanent as in our world. However,
    those who return from the dead may not be exactly as they were when they were
    alive. While much of the functionality is shared between `Person` and `ReanimatedPerson`,
    they are not close enough to have an inheritance relationship. In this code you
    can see the `extend` function of underscore used to add mixins to our two people
    classes. It is possible to do this without `underscore` but, as mentioned earlier,
    there are some complex edge cases around `extends` which make using a library
    handy:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一种情景，这种功能可能会很方便。在维斯特洛大陆，死亡并不总是像我们的世界那样永久。然而，那些从死亡中返回的人可能并不完全与他们活着时一样。虽然`Person`和`ReanimatedPerson`之间共享了很多功能，但它们之间并没有足够的继承关系。在这段代码中，您可以看到`underscore`的`extend`函数用于向我们的两个人类添加混入。虽然可以在没有`underscore`的情况下做到这一点，但正如前面提到的，使用库会使得在`extends`周围有一些复杂的边缘情况变得方便：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Mixins provide a mechanism to share functionality between diverse objects but
    do pollute the prototype structure.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 混入提供了一种在不同对象之间共享功能的机制，但会污染原型结构。
- en: Macros
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宏
- en: Preprocessing code through macros is not a new idea. It was, and probably still
    is, very popular for C and C++. In fact, if you take a look at some of the source
    code for the Gnu utilities for Linux they are written almost entirely in macros.
    Macros are notorious for being hard to understand and debug. For a time, newly-created
    languages like Java and C# did not support macros for exactly this reason.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过宏预处理代码并不是一个新的想法。在C和C++中，这是非常流行的，现在可能仍然很受欢迎。事实上，如果您看一下Linux的Gnu实用程序的一些源代码，您会发现它们几乎完全是用宏编写的。宏因难以理解和调试而臭名昭著。有一段时间，像Java和C＃这样的新创建的语言之所以不支持宏，正是因为这个原因。
- en: That being said, even more recent languages like Rust and Julia have brought
    the idea of macros back. These languages were influenced by the macros from the
    Scheme language, a dialect of Lisp. The difference between C macros and Lisp/Scheme
    macros is that the C versions are textual while the Lisp/Scheme ones are structural.
    This means that C macros are just glorified find/replace tools while Scheme macros
    are aware of the **abstract syntax tree** (**AST**) around them, allowing them
    to be much more powerful.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，像Rust和Julia这样更近期的语言已经重新引入了宏的概念。这些语言受到了Scheme语言的宏的影响，这是Lisp的一个方言。C宏和Lisp/Scheme宏之间的区别在于，C版本是文本的，而Lisp/Scheme版本是结构化的。这意味着C宏只是被赋予了更多的查找/替换工具，而Scheme宏则意识到了它们周围的**抽象语法树**（**AST**），使它们更加强大。
- en: The AST for Scheme is a far simpler construct than that of JavaScript. Nonetheless,
    there is a very interesting project called `Sweet.js` that tries to create structural
    macros for JavaScript.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme的AST比JavaScript的要简单得多。尽管如此，有一个非常有趣的项目叫做`Sweet.js`，它试图为JavaScript创建结构化宏。
- en: '`Sweet.js` plugs into the JavaScript build pipeline and modified JavaScript
    source code using one or more macros. There are a number of fully-fledged JavaScript
    transpilers, that is compilers that emit JavaScript. These compilers are problematic
    for sharing code between multiple projects. Their code is so different that there
    is no real way to share it. `Sweet.js` supports multiple macros being expanded
    in a single step. This allows for much better code sharing. The reusable bits
    are a smaller size and more easy to run together.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sweet.js`插入到JavaScript构建流水线中，并使用一个或多个宏修改JavaScript源代码。有许多完整的JavaScript转译器，即发出JavaScript的编译器。这些编译器在多个项目之间共享代码时存在问题。它们的代码差异如此之大，以至于没有真正的共享方式。`Sweet.js`支持在单个步骤中扩展多个宏。这允许更好的代码共享。可重用的部分更小，更容易一起运行。'
- en: 'A simple example of `Sweet.js` is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sweet.js`的一个简单例子如下：'
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The macro here provides ECMAScript-2015-style deconstructors that split an array
    into tree fields. The macro matches an array assignment and also regular assignment.
    For regular assignment the macro simply returns the identity, while for assignment
    of an array it will explode the text and replace it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的宏提供了ECMAScript-2015风格的解构器，将数组分割成三个字段。该宏匹配数组赋值和常规赋值。对于常规赋值，宏只返回标识，而对于数组的赋值，它将分解文本并替换它。
- en: 'For instance, if you run it over the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您对以下内容运行它：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, the result will be the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，结果将是以下内容：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is just one example macro. The power of macros is really quite spectacular.
    Macros can create an entirely new language or change very minor things. They can
    be easily plugged in to fit any sided requirement.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个宏的例子。宏的威力确实非常壮观。宏可以创建一个全新的语言或者改变非常微小的东西。它们可以很容易地插入以满足任何需求。
- en: Tips and tricks
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示和技巧
- en: Using name-based dependency injection allows for conflicts between names. In
    order to avoid conflicts it may be worth prefacing your injected arguments with
    a special character. For instance, AngularJS uses the `$` sign to denote an injected
    term.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于名称的依赖注入允许名称之间发生冲突。为了避免冲突，值得在注入的参数前加上特殊字符。例如，AngularJS使用“$”符号来表示一个被注入的术语。
- en: Several times in this chapter I've mentioned the JavaScript build pipeline.
    It may seem odd that we have to build an interpreted language. However, there
    are certain optimizations and process improvements that may result from building
    JavaScript. There are a number of tools that can be used to help building JavaScript.
    Tools such as Grunt and Gulp are specifically designed to perform JavaScript and
    web tasks but you can also make use of traditional build tools such as Rake, Ant,
    or even Make.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我已经多次提到了JavaScript构建流水线。我们不得不构建一个解释性语言可能看起来有些奇怪。然而，构建JavaScript可能会产生某些优化和流程改进。有许多工具可以用来帮助构建JavaScript。诸如Grunt和Gulp之类的工具专门设计用于执行JavaScript和Web任务，但您也可以利用传统的构建工具，如Rake、Ant甚至Make。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we covered a number of advanced JavaScript patterns. Of these
    patterns it's my belief that dependency injection and macros are the most useful
    to us. You may not necessarily want to use them on every project. When approaching
    problems simply being aware of the possible solutions may change your approach
    to the problem.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了许多高级JavaScript模式。在这些模式中，我认为依赖注入和宏对我们最有用。您可能并不一定想在每个项目中使用它们。当解决问题时，只需意识到可能的解决方案可能会改变您对问题的处理方式。
- en: Throughout this module I have talked extensively about the next versions of
    JavaScript. However, you don't need to wait until some future time to make use
    of many of these tools. Today, there are ways to compile newer versions of JavaScript
    down to the current version of JavaScript. The final chapter will explore a number
    of these tools and techniques.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本模块中，我已经广泛地谈论了JavaScript的下一个版本。然而，您不需要等到将来的某个时间才能利用这些工具。今天，有方法可以将较新版本的JavaScript编译成当前版本的JavaScript。最后一章将探讨这些工具和技术。
