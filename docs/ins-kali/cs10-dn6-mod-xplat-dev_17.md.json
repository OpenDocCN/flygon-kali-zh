["```cs\n<div\n\n>\n@for (int\n\n i = 0\n\n; i < Maximum; i++)\n{\n  if\n\n (i < Value)\n  {\n    <span\n\n class\n\n=\"oi oi-star-filled\"\n\n />\n  }\n  else\n\n  {\n    <span\n\n class\n\n=\"oi oi-star-empty\"\n\n />\n  }\n}\n</div\n\n>\n@code {\n  [Parameter\n\n]\n  public\n\n byte\n\n Maximum { get\n\n; set\n\n; }\n  [Parameter\n\n]\n  public\n\n byte\n\n Value { get\n\n; set\n\n; }\n} \n\n```", "```cs\n <\n\nh1\n\n>\n\nReview</\n\nh1\n\n>\n\n<\n\nRating\n\nid\n\n=\n\n\"rating\"\n\nMaximum\n\n=\n\n\"5\"\n\nValue\n\n=\n\n\"3\"\n\n />\n\n<\n\ntextarea\n\nid\n\n=\n\n\"comment\"\n\n /> \n\n```", "```cs\n     builder.Services.AddRazorPages();\n\n    **builder.Services.AddServerSideBlazor();**\n\n      builder.Services.AddSingleton<WeatherForecastService>(); \n\n    ```", "```cs\n    app.UseRouting();\n\n    **app.MapBlazorHub();**\n\n    **app.MapFallbackToPage(**\n\n    **\"/_Host\"**\n\n    **);**\n\n    app.Run(); \n\n    ```", "```cs\n    @page \"/\"\n\n    @namespace  Northwind.BlazorServer.Pages \n    @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers \n    @{\n      Layout = \"_Layout\"\n\n    ;\n    }\n    <\n\n    component\n\n    type\n\n    =\n\n    \"typeof(App)\"\n\n    render-mode\n\n    =\n\n    \"ServerPrerendered\"\n\n     /> \n\n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.Web\n    @namespace Northwind.BlazorServer.Pages\n    @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers\n    <!DOCTYPE \n\n    html\n\n    >\n\n    <\n\n    html\n\n    lang\n\n    =\n\n    \"en\"\n\n    >\n\n    <\n\n    head\n\n    >\n\n      <\n\n    meta\n\n    charset\n\n    =\n\n    \"utf-8\"\n\n     />\n\n      <\n\n    meta\n\n    name\n\n    =\n\n    \"viewport\"\n\n    content\n\n    =\n\n    \"width=device-width, initial-scale=1.0\"\n\n     />\n\n      <\n\n    base\n\n    href\n\n    =\n\n    \"~/\"\n\n     />\n\n      <\n\n    link\n\n    rel\n\n    =\n\n    \"stylesheet\"\n\n    href\n\n    =\n\n    \"css/bootstrap/bootstrap.min.css\"\n\n     />\n\n      <\n\n    link\n\n    href\n\n    =\n\n    \"css/site.css\"\n\n    rel\n\n    =\n\n    \"stylesheet\"\n\n     />\n\n      <\n\n    link\n\n    href\n\n    =\n\n    \"Northwind.BlazorServer.styles.css\"\n\n    rel\n\n    =\n\n    \"stylesheet\"\n\n     />\n\n      <\n\n    component\n\n    type\n\n    =\n\n    \"typeof(HeadOutlet)\"\n\n    render-mode\n\n    =\n\n    \"ServerPrerendered\"\n\n     />\n\n    </\n\n    head\n\n    >\n\n    <\n\n    body\n\n    >\n\n      @RenderBody()\n      <\n\n    div\n\n    id\n\n    =\n\n    \"blazor-error-ui\"\n\n    >\n\n        <\n\n    environment\n\n    include\n\n    =\n\n    \"Staging,Production\"\n\n    >\n\n          An error has occurred. This application may no longer respond until reloaded.\n        </\n\n    environment\n\n    >\n\n        <\n\n    environment\n\n    include\n\n    =\n\n    \"Development\"\n\n    >\n\n          An unhandled exception has occurred. See browser dev tools for details.\n        </\n\n    environment\n\n    >\n\n        <\n\n    a\n\n    href\n\n    =\n\n    \"\"\n\n    class\n\n    =\n\n    \"reload\"\n\n    >\n\n    Reload</\n\n    a\n\n    >\n\n        <\n\n    a\n\n    class\n\n    =\n\n    \"dismiss\"\n\n    >\n\n    ![](img/Image00149.jpg)\n\n    </\n\n    a\n\n    >\n\n      </\n\n    div\n\n    >\n\n      <\n\n    script\n\n    src\n\n    =\n\n    \"_framework/blazor.server.js\"\n\n    ></\n\n    script\n\n    >\n\n    </\n\n    body\n\n    >\n\n    </\n\n    html\n\n    > \n\n    ```", "```cs\n     <\n\n    Router\n\n    AppAssembly\n\n    =\n\n    \"@typeof(App).Assembly\"\n\n    >\n\n      <\n\n    Found\n\n    Context\n\n    =\n\n    \"routeData\"\n\n    >\n\n        <\n\n    RouteView\n\n    RouteData\n\n    =\n\n    \"@routeData\"\n\n    DefaultLayout\n\n    =\n\n    \"@typeof(MainLayout)\"\n\n     />\n\n        <\n\n    FocusOnNavigate\n\n    RouteData\n\n    =\n\n    \"@routeData\"\n\n    Selector\n\n    =\n\n    \"h1\"\n\n     />\n\n      </\n\n    Found\n\n    >\n\n      <\n\n    NotFound\n\n    >\n\n        <\n\n    PageTitle\n\n    >\n\n    Not found</\n\n    PageTitle\n\n    >\n\n        <\n\n    LayoutView\n\n    Layout\n\n    =\n\n    \"@typeof(MainLayout)\"\n\n    >\n\n          <\n\n    p\n\n    >\n\n    Sorry, there's nothing at this address.</\n\n    p\n\n    >\n\n        </\n\n    LayoutView\n\n    >\n\n      </\n\n    NotFound\n\n    >\n\n    </\n\n    Router\n\n    > \n\n    ```", "```cs\n    @inherits LayoutComponentBase\n    <\n\n    PageTitle\n\n    >\n\n    Northwind.BlazorServer</\n\n    PageTitle\n\n    >\n\n    <\n\n    div\n\n    class\n\n    =\n\n    \"page\"\n\n    >\n\n      <\n\n    div\n\n    class\n\n    =\n\n    \"sidebar\"\n\n    >\n\n        <\n\n    NavMenu\n\n     />\n\n      </\n\n    div\n\n    >\n\n      <\n\n    main\n\n    >\n\n        <\n\n    div\n\n    class\n\n    =\n\n    \"top-row px-4\"\n\n    >\n\n          <\n\n    a\n\n    href\n\n    =\n\n    \"https://docs.microsoft.com/aspnet/\"\n\n    target\n\n    =\n\n    \"_blank\"\n\n    >\n\n    About</\n\n    a\n\n    >\n\n        </\n\n    div\n\n    >\n\n        <\n\n    article\n\n    class\n\n    =\n\n    \"content px-4\"\n\n    >\n\n          @Body\n        </\n\n    article\n\n    >\n\n      </\n\n    main\n\n    >\n\n    </\n\n    div\n\n    > \n\n    ```", "```cs\n     <\n\n    div\n\n    class\n\n    =\n\n    \"top-row ps-3 navbar navbar-dark\"\n\n    >\n\n      <\n\n    div\n\n    class\n\n    =\n\n    \"container-fluid\"\n\n    >\n\n        <\n\n    a\n\n    class\n\n    =\n\n    \"navbar-brand\"\n\n    href\n\n    =\n\n    \"\"\n\n    >\n\n    Northwind.BlazorServer</\n\n    a\n\n    >\n\n        <\n\n    button\n\n    title\n\n    =\n\n    \"Navigation menu\"\n\n    class\n\n    =\n\n    \"navbar-toggler\"\n\n                @\n\n    onclick\n\n    =\n\n    \"ToggleNavMenu\"\n\n    >\n\n          <\n\n    span\n\n    class\n\n    =\n\n    \"navbar-toggler-icon\"\n\n    ></\n\n    span\n\n    >\n\n        </\n\n    button\n\n    >\n\n      </\n\n    div\n\n    >\n\n    </\n\n    div\n\n    >\n\n    <\n\n    div\n\n    class\n\n    =\n\n    \"@NavMenuCssClass\"\n\n     @\n\n    onclick\n\n    =\n\n    \"ToggleNavMenu\"\n\n    >\n\n      <\n\n    nav\n\n    class\n\n    =\n\n    \"flex-column\"\n\n    >\n\n        <\n\n    div\n\n    class\n\n    =\n\n    \"nav-item px-3\"\n\n    >\n\n          <\n\n    NavLink\n\n    class\n\n    =\n\n    \"nav-link\"\n\n    href\n\n    =\n\n    \"\"\n\n    Match\n\n    =\n\n    \"NavLinkMatch.All\"\n\n    >\n\n            <\n\n    span\n\n    class\n\n    =\n\n    \"oi oi-home\"\n\n    aria-hidden\n\n    =\n\n    \"true\"\n\n    ></\n\n    span\n\n    >\n\n     Home\n          </\n\n    NavLink\n\n    >\n\n        </\n\n    div\n\n    >\n\n        <\n\n    div\n\n    class\n\n    =\n\n    \"nav-item px-3\"\n\n    >\n\n          <\n\n    NavLink\n\n    class\n\n    =\n\n    \"nav-link\"\n\n    href\n\n    =\n\n    \"counter\"\n\n    >\n\n            <\n\n    span\n\n    class\n\n    =\n\n    \"oi oi-plus\"\n\n    aria-hidden\n\n    =\n\n    \"true\"\n\n    ></\n\n    span\n\n    >\n\n     Counter\n          </\n\n    NavLink\n\n    >\n\n        </\n\n    div\n\n    >\n\n        <\n\n    div\n\n    class\n\n    =\n\n    \"nav-item px-3\"\n\n    >\n\n          <\n\n    NavLink\n\n    class\n\n    =\n\n    \"nav-link\"\n\n    href\n\n    =\n\n    \"fetchdata\"\n\n    >\n\n            <\n\n    span\n\n    class\n\n    =\n\n    \"oi oi-list-rich\"\n\n    aria-hidden\n\n    =\n\n    \"true\"\n\n    ></\n\n    span\n\n    >\n\n     Fetch data\n          </\n\n    NavLink\n\n    >\n\n        </\n\n    div\n\n    >\n\n      </\n\n    nav\n\n    >\n\n    </\n\n    div\n\n    >\n\n    @code {\n      private\n\n     bool\n\n     collapseNavMenu = true\n\n    ;\n      private\n\n     string\n\n    ? NavMenuCssClass => collapseNavMenu ? \"collapse\"\n\n     : null\n\n    ;\n      private\n\n     void\n\n     ToggleNavMenu\n\n    ()\n      {\n        collapseNavMenu = !collapseNavMenu;\n      }\n    } \n\n    ```", "```cs\n    @page \"/fetchdata\"\n    <\n\n    PageTitle\n\n    >\n\n    Weather forecast</\n\n    PageTitle\n\n    >\n\n    @using Northwind.BlazorServer.Data\n    @inject WeatherForecastService ForecastService\n    <\n\n    h1\n\n    >\n\n    Weather forecast</\n\n    h1\n\n    >\n\n    <\n\n    p\n\n    >\n\n    This component demonstrates fetching data from a service.</\n\n    p\n\n    >\n\n    @if (forecasts == null)\n    {\n      <\n\n    p\n\n    ><\n\n    em\n\n    >\n\n    Loading...</\n\n    em\n\n    ></\n\n    p\n\n    >\n\n    }\n    else\n    {\n      <\n\n    table\n\n    class\n\n    =\n\n    \"table\"\n\n    >\n\n        <\n\n    thead\n\n    >\n\n          <\n\n    tr\n\n    >\n\n            <\n\n    th\n\n    >\n\n    Date</\n\n    th\n\n    >\n\n            <\n\n    th\n\n    >\n\n    Temp. (C)</\n\n    th\n\n    >\n\n            <\n\n    th\n\n    >\n\n    Temp. (F)</\n\n    th\n\n    >\n\n            <\n\n    th\n\n    >\n\n    Summary</\n\n    th\n\n    >\n\n          </\n\n    tr\n\n    >\n\n        </\n\n    thead\n\n    >\n\n        <\n\n    tbody\n\n    >\n\n        @foreach (var forecast in forecasts)\n        {\n          <\n\n    tr\n\n    >\n\n            <\n\n    td\n\n    >\n\n    @forecast.Date.ToShortDateString()</\n\n    td\n\n    >\n\n            <\n\n    td\n\n    >\n\n    @forecast.TemperatureC</\n\n    td\n\n    >\n\n            <\n\n    td\n\n    >\n\n    @forecast.TemperatureF</\n\n    td\n\n    >\n\n            <\n\n    td\n\n    >\n\n    @forecast.Summary</\n\n    td\n\n    >\n\n           </\n\n    tr\n\n    >\n\n        }\n        </\n\n    tbody\n\n    >\n\n      </\n\n    table\n\n    >\n\n    }\n    @code {\n      private\n\n     WeatherForecast[]? forecasts;\n      protected\n\n     override\n\n     async\n\n     Task OnInitializedAsync\n\n    ()\n      {\n        forecasts = await\n\n     ForecastService.GetForecastAsync(DateTime.Now);\n      }\n    } \n\n    ```", "```cs\n     namespace\n\n     Northwind.BlazorServer.Data\n\n    {\n      public\n\n     class\n\n     WeatherForecastService\n\n      {\n        private\n\n     static\n\n     readonly\n\n     string\n\n    [] Summaries = new\n\n    []\n        {\n          \"Freezing\"\n\n    , \"Bracing\"\n\n    , \"Chilly\"\n\n    , \"Cool\"\n\n    , \"Mild\"\n\n    , \"Warm\"\n\n    ,\n          \"Balmy\"\n\n    , \"Hot\"\n\n    , \"Sweltering\"\n\n    , \"Scorching\"\n\n        };\n        public\n\n     Task<WeatherForecast[]> GetForecastAsync(DateTime startDate)\n        {\n          return\n\n     Task.FromResult(Enumerable.Range(1\n\n    , 5\n\n    )\n            .Select(index => new\n\n     WeatherForecast\n              {\n                Date = startDate.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20\n\n    , 55\n\n    ),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n              }).ToArray());\n        }\n      }\n    } \n\n    ```", "```cs\n@page \"customers\" \n\n```", "```cs\n[Route(\n\n\"customers\"\n\n)\n\n]\npublic\n\n class\n\n CustomersController\n\n{ \n\n```", "```cs\n@page \"/customers/{country}\"\n\n<div\n\n>Country parameter as the value: @Country</div\n\n>\n@code {\n  [Parameter\n\n]\n  public\n\n string\n\n Country { get\n\n; set\n\n; }\n} \n\n```", "```cs\n@page \"/customers/{country?}\"\n\n<div\n\n>Country parameter as the value: @Country</div\n\n>\n@code {\n  [Parameter\n\n]\n  public\n\n string\n\n Country { get\n\n; set\n\n; }\n  protected\n\noverride\n\nvoid\n\nOnParametersSet\n\n()\n\n  {\n    // if the automatically set property is null\n\n    // set its value to USA\n\n    Country = Country ?? \"USA\"\n\n;\n  }\n} \n\n```", "```cs\n using\n\n Microsoft.AspNetCore.Components;\npublic\n\n abstract\n\n class\n\n ComponentBase\n\n : IComponent\n\n, IHandleAfterRender\n\n, IHandleEvent\n\n{\n  // members not shown\n\n} \n\n```", "```cs\n@inherits LayoutComponentBase\n<\n\ndiv\n\n>\n\n  ...\n  @Body\n  ...\n</\n\ndiv\n\n> \n\n```", "```cs\n@page \"/customers\"\n\n@layout AlternativeLayout\n<\n\ndiv\n\n>\n\n  ...\n</\n\ndiv\n\n> \n\n```", "```cs\n<a\n\n href=\"/customers\"\n\n>Customers</a\n\n> \n\n```", "```cs\n <\n\nNavLink\n\nhref\n\n=\n\n\"/customers\"\n\n>\n\nCustomers</\n\nNavLink\n\n> \n\n```", "```cs\n/customers\n/customers/USA\n/customers/Germany/Berlin \n\n```", "```cs\n <\n\nNavLink\n\nhref\n\n=\n\n\"/customers\"\n\nMatch\n\n=\n\n\"NavLinkMatch.All\"\n\n>\n\nCustomers</\n\nNavLink\n\n> \n\n```", "```cs\n     \"profiles\"\n\n    : {\n      \"Northwind.BlazorServer\"\n\n    : {\n        \"commandName\"\n\n    : \"Project\"\n\n    ,\n        \"dotnetRunMessages\"\n\n    : true\n\n    ,\n        \"launchBrowser\"\n\n    : true\n\n    ,\n\n    **\"applicationUrl\"**\n\n    **:** \n\n    **\"https://localhost:5001;http://localhost:5000\"**\n\n    **,**\n\n        \"environmentVariables\"\n\n    : {\n          \"ASPNETCORE_ENVIRONMENT\"\n\n    : \"Development\"\n\n        }\n      }, \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\"\n\n    >\n      <PropertyGroup>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <ServiceWorkerAssetsManifest>service-worker-assets.js\n          </ServiceWorkerAssetsManifest>\n      </PropertyGroup>\n      <ItemGroup>\n        <PackageReference Include=\n          \"Microsoft.AspNetCore.Components.WebAssembly\"\n\n          Version=\"6.0.0\"\n\n     />\n        <PackageReference Include=\n          \"Microsoft.AspNetCore.Components.WebAssembly.DevServer\"\n\n          Version=\"6.0.0\"\n\n     PrivateAssets=\"all\"\n\n     />\n      </ItemGroup>\n      <ItemGroup>\n        <ProjectReference Include=\n          \"..\\Shared\\Northwind.BlazorWasm.Shared.csproj\"\n\n     />\n      </ItemGroup>\n      <ItemGroup>\n        <ServiceWorker Include=\"wwwroot\\service-worker.js\"\n\n          PublishedContent=\"wwwroot\\service-worker.published.js\"\n\n     />\n      </ItemGroup>\n    </Project> \n\n    ```", "```cs\n     using\n\n     Microsoft.AspNetCore.Components.Web;\n    using\n\n     Microsoft.AspNetCore.Components.WebAssembly.Hosting;\n    using\n\n     Northwind.BlazorWasm.Client;\n    var\n\n     builder = WebAssemblyHostBuilder.CreateDefault(args); \n    builder.RootComponents.Add<App>(\"#app\"\n\n    );\n    builder.RootComponents.Add<HeadOutlet>(\"head::after\"\n\n    );\n    builder.Services.AddScoped(sp => new\n\n     HttpClient\n      { BaseAddress = new\n\n     Uri(builder.HostEnvironment.BaseAddress) });\n    await\n\n     builder.Build().RunAsync(); \n\n    ```", "```cs\n     <!DOCTYPE \n\n    html\n\n    >\n\n    <\n\n    html\n\n    >\n\n    <\n\n    head\n\n    >\n\n      <\n\n    meta\n\n    charset\n\n    =\n\n    \"utf-8\"\n\n     />\n\n      <\n\n    meta\n\n    name\n\n    =\n\n    \"viewport\"\n\n    content\n\n    =\n\n    \"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"\n\n     />\n\n      <\n\n    title\n\n    >\n\n    Northwind.BlazorWasm</\n\n    title\n\n    >\n\n      <\n\n    base\n\n    href\n\n    =\n\n    \"/\"\n\n     />\n\n      <\n\n    link\n\n    href\n\n    =\n\n    \"css/bootstrap/bootstrap.min.css\"\n\n    rel\n\n    =\n\n    \"stylesheet\"\n\n     />\n\n      <\n\n    link\n\n    href\n\n    =\n\n    \"css/app.css\"\n\n    rel\n\n    =\n\n    \"stylesheet\"\n\n     />\n\n      <\n\n    link\n\n    href\n\n    =\n\n    \"Northwind.BlazorWasm.Client.styles.css\"\n\n    rel\n\n    =\n\n    \"stylesheet\"\n\n     />\n\n      <\n\n    link\n\n    href\n\n    =\n\n    \"manifest.json\"\n\n    rel\n\n    =\n\n    \"manifest\"\n\n     />\n\n      <\n\n    link\n\n    rel\n\n    =\n\n    \"apple-touch-icon\"\n\n    sizes\n\n    =\n\n    \"512x512\"\n\n    href\n\n    =\n\n    \"icon-512.png\"\n\n     />\n\n      <\n\n    link\n\n    rel\n\n    =\n\n    \"apple-touch-icon\"\n\n    sizes\n\n    =\n\n    \"192x192\"\n\n    href\n\n    =\n\n    \"icon-192.png\"\n\n     />\n\n    </\n\n    head\n\n    >\n\n    <\n\n    body\n\n    >\n\n      <\n\n    div\n\n    id\n\n    =\n\n    \"app\"\n\n    >\n\n    Loading...</\n\n    div\n\n    >\n\n      <\n\n    div\n\n    id\n\n    =\n\n    \"blazor-error-ui\"\n\n    >\n\n        An unhandled error has occurred.\n        <\n\n    a\n\n    href\n\n    =\n\n    \"\"\n\n    class\n\n    =\n\n    \"reload\"\n\n    >\n\n    Reload</\n\n    a\n\n    >\n\n        <\n\n    a\n\n    class\n\n    =\n\n    \"dismiss\"\n\n    >\n\n    ![](img/Image00149.jpg)\n\n    </\n\n    a\n\n    >\n\n      </\n\n    div\n\n    >\n\n      <\n\n    script\n\n    src\n\n    =\n\n    \"_framework/blazor.webassembly.js\"\n\n    ></\n\n    script\n\n    >\n\n      <\n\n    script\n\n    >\n\n    navigator.serviceWorker.register('service-worker.js'\n\n    );</\n\n    script\n\n    >\n\n    </\n\n    body\n\n    >\n\n    </\n\n    html\n\n    > \n\n    ```", "```cs\n    @page \"/fetchdata\"\n\n    @using Northwind.BlazorWasm.Shared\n\n    **@inject HttpClient Http**\n\n    <h1\n\n    >Weather forecast</h1\n\n    >\n    ...\n    @code {\n      private\n\n     WeatherForecast[]? forecasts;\n      protected\n\n    override\n\n    async\n\n     Task \n\n    OnInitializedAsync\n\n    ()\n\n      {\n\n     **forecasts =** \n\n    **await**\n\n     **Http.GetFromJsonAsync<WeatherForecast[]>(**\n\n    **\"WeatherForecast\"**\n\n    **);**\n\n      }\n    } \n\n    ```", "```cs\n    <h3\n\n    >Customers@(string\n\n    .IsNullOrWhiteSpace(Country) ? \" Worldwide\"\n\n     : \" in \"\n\n     + Country)</h3\n\n    >\n    @code {\n      [Parameter\n\n    ]\n      public\n\n     string\n\n    ? Country { get\n\n    ; set\n\n    ; }\n    } \n\n    ```", "```cs\n     <\n\n    Customers\n\n    Country\n\n    =\n\n    \"Germany\"\n\n     />\n\n    <\n\n    Customers\n\n     /> \n\n    ```", "```cs\n    @page \"/customers/{country?}\" \n\n    ```", "```cs\n     <\n\n    div\n\n    class\n\n    =\n\n    \"nav-item px-3\"\n\n    >\n\n      <\n\n    NavLink\n\n    class\n\n    =\n\n    \"nav-link\"\n\n    href\n\n    =\n\n    \"customers\"\n\n    Match\n\n    =\n\n    \"NavLinkMatch.All\"\n\n    >\n\n        <\n\n    span\n\n    class\n\n    =\n\n    \"oi oi-people\"\n\n    aria-hidden\n\n    =\n\n    \"true\"\n\n    ></\n\n    span\n\n    >\n\n        Customers Worldwide\n      </\n\n    NavLink\n\n    >\n\n    </\n\n    div\n\n    >\n\n    <\n\n    div\n\n    class\n\n    =\n\n    \"nav-item px-3\"\n\n    >\n\n      <\n\n    NavLink\n\n    class\n\n    =\n\n    \"nav-link\"\n\n    href\n\n    =\n\n    \"customers/Germany\"\n\n    >\n\n        <\n\n    span\n\n    class\n\n    =\n\n    \"oi oi-people\"\n\n    aria-hidden\n\n    =\n\n    \"true\"\n\n    ></\n\n    span\n\n    >\n\n        Customers in Germany\n      </\n\n    NavLink\n\n    >\n\n    </\n\n    div\n\n    > \n\n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\Northwind.Common.DataContext.Sqlite\n\n    \\Northwind.Common.DataContext.Sqlite.csproj\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     using\n\n     Packt.Shared; // AddNorthwindContext extension method \n\n    ```", "```cs\n    builder.Services.AddNorthwindContext(); \n\n    ```", "```cs\n    @using Packt.Shared  @* Northwind entities *@ \n\n    ```", "```cs\n    @using Microsoft.EntityFrameworkCore  @* ToListAsync extension method *@\n    @page \"/customers/{country?}\"\n\n    @inject NorthwindContext db\n    <\n\n    h3\n\n    >\n\n    Customers @(string.IsNullOrWhiteSpace(Country) \n          ? \"Worldwide\" : \"in \" + Country)</\n\n    h3\n\n    >\n\n    @if (customers == null)\n    {\n    <\n\n    p\n\n    ><\n\n    em\n\n    >\n\n    Loading...</\n\n    em\n\n    ></\n\n    p\n\n    >\n\n    }\n    else\n    {\n    <\n\n    table\n\n    class\n\n    =\n\n    \"table\"\n\n    >\n\n      <\n\n    thead\n\n    >\n\n        <\n\n    tr\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Id</\n\n    th\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Company Name</\n\n    th\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Address</\n\n    th\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Phone</\n\n    th\n\n    >\n\n          <\n\n    th\n\n    ></\n\n    th\n\n    >\n\n        </\n\n    tr\n\n    >\n\n      </\n\n    thead\n\n    >\n\n      <\n\n    tbody\n\n    >\n\n      @foreach (Customer c in customers)\n      {\n        <\n\n    tr\n\n    >\n\n          <\n\n    td\n\n    >\n\n    @c.CustomerId</\n\n    td\n\n    >\n\n          <\n\n    td\n\n    >\n\n    @c.CompanyName</\n\n    td\n\n    >\n\n          <\n\n    td\n\n    >\n\n            @c.Address<\n\n    br\n\n    />\n\n            @c.City<\n\n    br\n\n    />\n\n            @c.PostalCode<\n\n    br\n\n    />\n\n            @c.Country\n          </\n\n    td\n\n    >\n\n          <\n\n    td\n\n    >\n\n    @c.Phone</\n\n    td\n\n    >\n\n          <\n\n    td\n\n    >\n\n            <\n\n    a\n\n    class\n\n    =\n\n    \"btn btn-info\"\n\n    href\n\n    =\n\n    \"editcustomer/@c.CustomerId\"\n\n    >\n\n              <\n\n    i\n\n    class\n\n    =\n\n    \"oi oi-pencil\"\n\n    ></\n\n    i\n\n    ></\n\n    a\n\n    >\n\n            <\n\n    a\n\n    class\n\n    =\n\n    \"btn btn-danger\"\n\n    href\n\n    =\n\n    \"deletecustomer/@c.CustomerId\"\n\n    >\n\n              <\n\n    i\n\n    class\n\n    =\n\n    \"oi oi-trash\"\n\n    ></\n\n    i\n\n    ></\n\n    a\n\n    >\n\n          </\n\n    td\n\n    >\n\n        </\n\n    tr\n\n    >\n\n      }\n      </\n\n    tbody\n\n    >\n\n    </\n\n    table\n\n    >\n\n    }\n    @code {\n      [Parameter\n\n    ]\n      public\n\n     string\n\n    ? Country { get\n\n    ; set\n\n    ; }\n      private\n\n     IEnumerable<\n\n    Customer\n\n    >\n\n    ? customers;\n      protected\n\n     override\n\n     async\n\n     Task OnParametersSetAsync\n\n    ()\n      {\n        if\n\n     (string\n\n    .IsNullOrWhiteSpace(Country))\n        {\n          customers = await\n\n     db.Customers.ToListAsync();\n        }\n        else\n\n        {\n          customers = await db.Customers\n            .Where(c => c.Country == Country).ToListAsync();\n        }\n      }\n    } \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     interface\n\n     INorthwindService\n\n    {\n      Task<List<Customer>> GetCustomersAsync();\n      Task<List<Customer>> GetCustomersAsync(string\n\n     country);\n      Task<Customer?> GetCustomerAsync(string\n\n     id);\n      Task<Customer> \n\n    CreateCustomerAsync\n\n    (\n\n    Customer c\n\n    )\n\n    ;\n      Task<Customer> \n\n    UpdateCustomerAsync\n\n    (\n\n    Customer c\n\n    )\n\n    ;\n      Task \n\n    DeleteCustomerAsync\n\n    (\n\n    string\n\n     id\n\n    )\n\n    ;\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; \n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     NorthwindService\n\n     : INorthwindService\n\n    {\n      private\n\n     readonly\n\n     NorthwindContext db;\n      public\n\n    NorthwindService\n\n    (\n\n    NorthwindContext db\n\n    )\n\n      {\n        this\n\n    .db = db;\n      }\n      public\n\n     Task<List<Customer>> GetCustomersAsync()\n      {\n        return\n\n     db.Customers.ToListAsync();\n      }\n      public\n\n     Task<List<Customer>> GetCustomersAsync(string\n\n     country)\n      {\n        return\n\n     db.Customers.Where(c => c.Country == country).ToListAsync();\n      }\n      public\n\n     Task<Customer?> GetCustomerAsync(string\n\n     id)\n      {\n        return\n\n     db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id);\n      }\n      public\n\n     Task<Customer> \n\n    CreateCustomerAsync\n\n    (\n\n    Customer c\n\n    )\n\n      {\n        db.Customers.Add(c); \n        db.SaveChangesAsync();\n        return\n\n     Task.FromResult(c);\n      }\n      public\n\n     Task<Customer> \n\n    UpdateCustomerAsync\n\n    (\n\n    Customer c\n\n    )\n\n      {\n        db.Entry(c).State = EntityState.Modified;\n        db.SaveChangesAsync();\n        return\n\n     Task.FromResult(c);\n      }\n      public\n\n     Task \n\n    DeleteCustomerAsync\n\n    (\n\n    string\n\n     id\n\n    )\n\n      {\n        Customer? customer = db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id).Result;\n        if\n\n     (customer == null\n\n    )\n        {\n          return\n\n     Task.CompletedTask;\n        }\n        else\n\n        {\n          db.Customers.Remove(customer); \n          return\n\n     db.SaveChangesAsync();\n        }\n      }\n    } \n\n    ```", "```cs\n    builder.Services.AddTransient<INorthwindService, NorthwindService>(); \n\n    ```", "```cs\n    @inject INorthwindService service \n\n    ```", "```cs\n     protected\n\n    override\n\n    async\n\n     Task \n\n    OnParametersSetAsync\n\n    ()\n\n    {\n      if\n\n     (string\n\n    .IsNullOrWhiteSpace(Country))\n      {\n\n     **customers =** \n\n    **await**\n\n     **service.GetCustomersAsync();**\n\n      }\n      else\n\n      {\n\n     **customers =** \n\n    **await**\n\n     **service.GetCustomersAsync(Country);**\n\n      }\n    } \n\n    ```", "```cs\n <\n\nEditForm\n\nModel\n\n=\n\n\"@customer\"\n\nOnSubmit\n\n=\n\n\"ExtraValidation\"\n\n>\n\n  <\n\nDataAnnotationsValidator\n\n />\n\n  <\n\nValidationSummary\n\n />\n\n  <\n\nInputText\n\nid\n\n=\n\n\"name\"\n\n @\n\nbind-Value\n\n=\n\n\"customer.CompanyName\"\n\n />\n\n  <\n\nbutton\n\ntype\n\n=\n\n\"submit\"\n\n>\n\nSubmit</\n\nbutton\n\n>\n\n</\n\nEditForm\n\n>\n\n@code {\n  private\n\n Customer customer = new\n\n();\n  private\n\n void\n\n ExtraValidation()\n  {\n    // perform any extra validation\n  }\n} \n\n```", "```cs\n     <\n\n    EditForm\n\n    Model\n\n    =\n\n    \"@Customer\"\n\n    OnValidSubmit\n\n    =\n\n    \"@OnValidSubmit\"\n\n    >\n\n      <\n\n    DataAnnotationsValidator\n\n     />\n\n      <\n\n    div\n\n    class\n\n    =\n\n    \"form-group\"\n\n    >\n\n        <\n\n    div\n\n    >\n\n          <\n\n    label\n\n    >\n\n    Customer Id</\n\n    label\n\n    >\n\n          <\n\n    div\n\n    >\n\n            <\n\n    InputText\n\n     @\n\n    bind-Value\n\n    =\n\n    \"@Customer.CustomerId\"\n\n     />\n\n            <\n\n    ValidationMessage\n\n    For\n\n    =\n\n    \"@(() => Customer.CustomerId)\"\n\n     />\n\n          </\n\n    div\n\n    >\n\n        </\n\n    div\n\n    >\n\n      </\n\n    div\n\n    >\n\n      <\n\n    div\n\n    class\n\n    =\n\n    \"form-group \"\n\n    >\n\n        <\n\n    div\n\n    >\n\n          <\n\n    label\n\n    >\n\n    Company Name</\n\n    label\n\n    >\n\n          <\n\n    div\n\n    >\n\n            <\n\n    InputText\n\n     @\n\n    bind-Value\n\n    =\n\n    \"@Customer.CompanyName\"\n\n     />\n\n            <\n\n    ValidationMessage\n\n    For\n\n    =\n\n    \"@(() => Customer.CompanyName)\"\n\n     />\n\n          </\n\n    div\n\n    >\n\n        </\n\n    div\n\n    >\n\n      </\n\n    div\n\n    >\n\n      <\n\n    div\n\n    class\n\n    =\n\n    \"form-group \"\n\n    >\n\n        <\n\n    div\n\n    >\n\n          <\n\n    label\n\n    >\n\n    Address</\n\n    label\n\n    >\n\n          <\n\n    div\n\n    >\n\n            <\n\n    InputText\n\n     @\n\n    bind-Value\n\n    =\n\n    \"@Customer.Address\"\n\n     />\n\n            <\n\n    ValidationMessage\n\n    For\n\n    =\n\n    \"@(() => Customer.Address)\"\n\n     />\n\n          </\n\n    div\n\n    >\n\n        </\n\n    div\n\n    >\n\n      </\n\n    div\n\n    >\n\n      <\n\n    div\n\n    class\n\n    =\n\n    \"form-group \"\n\n    >\n\n        <\n\n    div\n\n    >\n\n          <\n\n    label\n\n    >\n\n    Country</\n\n    label\n\n    >\n\n          <\n\n    div\n\n    >\n\n            <\n\n    InputText\n\n     @\n\n    bind-Value\n\n    =\n\n    \"@Customer.Country\"\n\n     />\n\n            <\n\n    ValidationMessage\n\n    For\n\n    =\n\n    \"@(() => Customer.Country)\"\n\n     />\n\n          </\n\n    div\n\n    >\n\n        </\n\n    div\n\n    >\n\n      </\n\n    div\n\n    >\n\n      <\n\n    button\n\n    type\n\n    =\n\n    \"submit\"\n\n    class\n\n    =\n\n    \"btn btn-@ButtonStyle\"\n\n    >\n\n        @ButtonText\n      </\n\n    button\n\n    >\n\n    </\n\n    EditForm\n\n    >\n\n    @code { \n      [Parameter\n\n    ]\n      public\n\n     Customer Customer { get\n\n    ; set\n\n    ; } = null!;\n      [Parameter\n\n    ]\n      public\n\n     string\n\n     ButtonText { get\n\n    ; set\n\n    ; } = \"Save Changes\";\n      [Parameter\n\n    ]\n      public\n\n     string\n\n     ButtonStyle { get\n\n    ; set\n\n    ; } = \"info\";\n      [Parameter\n\n    ]\n      public\n\n     EventCallback OnValidSubmit { get\n\n    ; set\n\n    ; }\n    } \n\n    ```", "```cs\n    @page \"/createcustomer\"\n\n    @inject INorthwindService service \n    @inject NavigationManager navigation\n    <h3\n\n    >Create Customer</h3\n\n    >\n    <CustomerDetail\n\n     ButtonText\n\n    =\"Create Customer\"\n\n                    Customer\n\n    =\"@customer\"\n\n                    OnValidSubmit\n\n    =\"@Create\"\n\n     />\n    @code {\n      private\n\n     Customer customer = new\n\n    ();\n      private\n\n    async\n\n     Task \n\n    Create\n\n    ()\n\n      {\n        await\n\n     service.CreateCustomerAsync(customer);\n        navigation.NavigateTo(\"customers\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n     <\n\n    div\n\n    class\n\n    =\n\n    \"form-group\"\n\n    >\n\n      <\n\n    a\n\n    class\n\n    =\n\n    \"btn btn-info\"\n\n    href\n\n    =\n\n    \"createcustomer\"\n\n    >\n\n      <\n\n    i\n\n    class\n\n    =\n\n    \"oi oi-plus\"\n\n    ></\n\n    i\n\n    >\n\n     Create New</\n\n    a\n\n    >\n\n    </\n\n    div\n\n    > \n\n    ```", "```cs\n    @page \"/editcustomer/{customerid}\"\n\n    @inject INorthwindService service \n    @inject NavigationManager navigation\n    <h3\n\n    >Edit Customer</h3\n\n    >\n    <CustomerDetail\n\n     ButtonText\n\n    =\"Update\"\n\n                    Customer\n\n    =\"@customer\"\n\n                    OnValidSubmit\n\n    =\"@Update\"\n\n     />\n    @code { \n      [Parameter\n\n    ]\n      public\n\n     string\n\n     CustomerId { get\n\n    ; set\n\n    ; } \n      private\n\n     Customer? customer = new\n\n    ();\n      protected\n\n    async\n\n    override\n\n     Task \n\n    OnParametersSetAsync\n\n    ()\n\n      {\n        customer = await\n\n     service.GetCustomerAsync(CustomerId);\n      }\n      private\n\n    async\n\n     Task \n\n    Update\n\n    ()\n\n      {\n        if\n\n     (customer is\n\n     not\n\n     null\n\n    )\n        {\n          await\n\n     service.UpdateCustomerAsync(customer);\n        }\n        navigation.NavigateTo(\"customers\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n    @page \"/deletecustomer/{customerid}\"\n\n    @inject INorthwindService service \n    @inject NavigationManager navigation\n    <h3\n\n    >Delete Customer</h3\n\n    >\n    <div\n\n     class\n\n    =\"alert alert-danger\"\n\n    >\n      Warning! This action cannot be undone!\n    </div\n\n    >\n    <CustomerDetail\n\n     ButtonText\n\n    =\"Delete Customer\"\n\n                    ButtonStyle\n\n    =\"danger\"\n\n                    Customer\n\n    =\"@customer\"\n\n                    OnValidSubmit\n\n    =\"@Delete\"\n\n     />\n    @code { \n      [Parameter\n\n    ]\n      public\n\n     string\n\n     CustomerId { get\n\n    ; set\n\n    ; } \n      private\n\n     Customer? customer = new\n\n    ();\n      protected\n\n    async\n\n    override\n\n     Task \n\n    OnParametersSetAsync\n\n    ()\n\n      {\n        customer = await\n\n     service.GetCustomerAsync(CustomerId);\n      }\n      private\n\n    async\n\n     Task \n\n    Delete\n\n    ()\n\n      {\n        if\n\n     (customer is\n\n     not\n\n     null\n\n    )\n        {\n          await\n\n     service.DeleteCustomerAsync(CustomerId);\n        }\n        navigation.NavigateTo(\"customers\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if\n\n     you prefer -->\n      <ProjectReference Include=\"..\\..\\Northwind.Common.DataContext.Sqlite\n\n    \\Northwind.Common.DataContext.Sqlite.csproj\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     using\n\n     Packt.Shared; \n\n    ```", "```cs\n     // if using SQL Server\n\n    builder.Services.AddNorthwindContext();\n    // if using SQLite\n\n    builder.Services.AddNorthwindContext(\n      relativePath: Path.Combine(\"..\"\n\n    , \"..\"\n\n    )); \n\n    ```", "```cs\n     using\n\n     Microsoft.AspNetCore.Mvc; // [ApiController], [Route]\n\n    using\n\n     Microsoft.EntityFrameworkCore; // ToListAsync, FirstOrDefaultAsync\n\n    using\n\n     Packt.Shared; // NorthwindContext, Customer\n\n    namespace\n\n     Northwind.BlazorWasm.Server.Controllers\n\n    ;\n    [ApiController\n\n    ]\n    [Route(\n\n    \"api/[controller]\"\n\n    )\n\n    ]\n    public\n\n     class\n\n     CustomersController\n\n     : ControllerBase\n\n    {\n      private\n\n     readonly\n\n     NorthwindContext db;\n      public\n\n    CustomersController\n\n    (\n\n    NorthwindContext db\n\n    )\n\n      {\n        this\n\n    .db = db;\n      }\n      [HttpGet\n\n    ]\n      public\n\n     async\n\n     Task<List<Customer>> GetCustomersAsync()\n      {\n        return\n\n     await\n\n     db.Customers.ToListAsync(); \n      }\n      [HttpGet(\n\n    \"in/{country}\"\n\n    )\n\n    ] // different path to disambiguate\n\n      public\n\n     async\n\n     Task<List<Customer>> GetCustomersAsync(string\n\n     country)\n      {\n        return\n\n     await\n\n     db.Customers\n          .Where(c => c.Country == country).ToListAsync();\n      }\n      [HttpGet(\n\n    \"{id}\"\n\n    )\n\n    ]\n      public\n\n     async\n\n     Task<Customer?> GetCustomerAsync(string\n\n     id)\n      {\n        return\n\n     await\n\n     db.Customers\n          .FirstOrDefaultAsync(c => c.CustomerId == id);\n      }\n      [HttpPost\n\n    ]\n      public\n\n     async\n\n     Task<Customer?> CreateCustomerAsync\n        (Customer customerToAdd)\n      {\n        Customer? existing = await\n\n     db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == customerToAdd.CustomerId);\n        if\n\n     (existing == null\n\n    )\n        {\n          db.Customers.Add(customerToAdd);\n          int\n\n     affected = await\n\n     db.SaveChangesAsync();\n          if\n\n     (affected == 1\n\n    )\n          {\n            return\n\n     customerToAdd;\n          }\n        }\n        return\n\n     existing;\n      }\n      [HttpPut\n\n    ]\n      public\n\n     async\n\n     Task<Customer?> UpdateCustomerAsync(Customer c)\n      {\n        db.Entry(c).State = EntityState.Modified;\n        int\n\n     affected = await\n\n     db.SaveChangesAsync();\n        if\n\n     (affected == 1\n\n    )\n        {\n          return\n\n     c;\n        }\n        return\n\n     null\n\n    ;\n      }\n      [HttpDelete(\n\n    \"{id}\"\n\n    )\n\n    ]\n      public\n\n    async\n\n     Task<\n\n    int\n\n    > \n\n    DeleteCustomerAsync\n\n    (\n\n    string\n\n     id\n\n    )\n\n      {\n        Customer? c = await\n\n     db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id);\n        if\n\n     (c != null\n\n    )\n        {\n          db.Customers.Remove(c);\n          int\n\n     affected = await\n\n     db.SaveChangesAsync();\n          return\n\n     affected;\n        }\n        return\n\n     0\n\n    ;\n      }\n    } \n\n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\..\\Northwind.Common.EntityModels.Sqlite\\\n\n    Northwind.Common.EntityModels.Sqlite.csproj\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n    @using Packt.Shared \n\n    ```", "```cs\n     <\n\n    div\n\n    class\n\n    =\n\n    \"nav-item px-3\"\n\n    >\n\n      <\n\n    NavLink\n\n    class\n\n    =\n\n    \"nav-link\"\n\n    href\n\n    =\n\n    \"customers\"\n\n    Match\n\n    =\n\n    \"NavLinkMatch.All\"\n\n    >\n\n        <\n\n    span\n\n    class\n\n    =\n\n    \"oi oi-people\"\n\n    aria-hidden\n\n    =\n\n    \"true\"\n\n    ></\n\n    span\n\n    >\n\n        Customers Worldwide\n      </\n\n    NavLink\n\n    >\n\n    </\n\n    div\n\n    >\n\n    <\n\n    div\n\n    class\n\n    =\n\n    \"nav-item px-3\"\n\n    >\n\n      <\n\n    NavLink\n\n    class\n\n    =\n\n    \"nav-link\"\n\n    href\n\n    =\n\n    \"customers/France\"\n\n    >\n\n        <\n\n    span\n\n    class\n\n    =\n\n    \"oi oi-people\"\n\n    aria-hidden\n\n    =\n\n    \"true\"\n\n    ></\n\n    span\n\n    >\n\n        Customers in France\n      </\n\n    NavLink\n\n    >\n\n    </\n\n    div\n\n    > \n\n    ```", "```cs\n     using\n\n     System.Net.Http.Json; // GetFromJsonAsync, ReadFromJsonAsync\n\n    using\n\n     Packt.Shared; // Customer\n\n    namespace\n\n     Northwind.BlazorWasm.Client.Data\n\n    {\n      public\n\n     class\n\n     NorthwindService\n\n     : INorthwindService\n\n      {\n        private\n\n     readonly\n\n     HttpClient http;\n        public\n\n    NorthwindService\n\n    (\n\n    HttpClient http\n\n    )\n\n        {\n          this\n\n    .http = http;\n        }\n        public\n\n     Task<List<Customer>> GetCustomersAsync()\n        {\n          return\n\n     http.GetFromJsonAsync\n            <List<Customer>>(\"api/customers\"\n\n    );\n        }\n        public\n\n     Task<List<Customer>> GetCustomersAsync(string\n\n     country)\n        {\n          return\n\n     http.GetFromJsonAsync\n            <List<Customer>>($\"api/customers/in/\n\n    {country}\n\n    \"\n\n    );\n        }\n        public\n\n     Task<Customer> \n\n    GetCustomerAsync\n\n    (\n\n    string\n\n     id\n\n    )\n\n        {\n          return\n\n     http.GetFromJsonAsync\n            <Customer>($\"api/customers/\n\n    {id}\n\n    \"\n\n    );\n        }\n        public\n\n    async\n\n     Task<Customer>\n\n    CreateCustomerAsync\n\n     (\n\n    Customer c\n\n    )\n\n        {\n          HttpResponseMessage response = await\n\n            http.PostAsJsonAsync(\"api/customers\"\n\n    , c);\n          return\n\n     await\n\n     response.Content\n            .ReadFromJsonAsync<Customer>();\n        }\n        public\n\n    async\n\n     Task<Customer> \n\n    UpdateCustomerAsync\n\n    (\n\n    Customer c\n\n    )\n\n        {\n          HttpResponseMessage response = await\n\n            http.PutAsJsonAsync(\"api/customers\"\n\n    , c);\n          return\n\n     await\n\n     response.Content\n            .ReadFromJsonAsync<Customer>();\n        }\n        public\n\n    async\n\n     Task \n\n    DeleteCustomerAsync\n\n    (\n\n    string\n\n     id\n\n    )\n\n        {\n          HttpResponseMessage response = await\n\n            http.DeleteAsync($\"api/customers/\n\n    {id}\n\n    \"\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n    builder.Services.AddTransient<INorthwindService, NorthwindService>(); \n\n    ```", "```cs\n    dotnet workload install wasm-tools \n\n    ```", "```cs\n    ...\n    Installing pack Microsoft.NET.Runtime.MonoAOTCompiler.Task version 6.0.0...\n    Installing pack Microsoft.NETCore.App.Runtime.AOT.Cross.browser-wasm version 6.0.0...\n    Successfully installed workload(s) wasm-tools. \n\n    ```", "```cs\n    <PropertyGroup>\n      <TargetFramework>net6.0\n\n    </TargetFramework>\n      <Nullable>enable</Nullable>\n      <ImplicitUsings>enable</ImplicitUsings>\n      <ServiceWorkerAssetsManifest>service-worker-assets.js\n        </ServiceWorkerAssetsManifest>\n\n     **<RunAOTCompilation>**\n\n    **true**\n\n    **</RunAOTCompilation>**\n\n    </PropertyGroup> \n\n    ```", "```cs\n    dotnet publish -c Release \n\n    ```", "```cs\n     Northwind.BlazorWasm.Client -> C:\\Code\\PracticalApps\\Northwind.BlazorWasm\\Client\\bin\\Release\\net6.0\\Northwind.BlazorWasm.Client.dll\n      Northwind.BlazorWasm.Client (Blazor output) -> C:\\Code\\PracticalApps\\Northwind.BlazorWasm\\Client\\bin\\Release\\net6.0\\wwwroot\n      Optimizing assemblies for size, which may change the behavior of the app. Be sure to test after publishing. See: https://aka.ms/dotnet-illink\n      AOT'ing 75 assemblies\n      [1/75] Microsoft.Extensions.Caching.Abstractions.dll -> Microsoft.Extensions.Caching.Abstractions.dll.bc\n      ...\n      [75/75] Microsoft.EntityFrameworkCore.Sqlite.dll -> Microsoft.EntityFrameworkCore.Sqlite.dll.bc\n      Compiling native assets with emcc. This may take a while ...\n      ...\n      Linking with emcc. This may take a while ...\n      ...\n      Optimizing dotnet.wasm ...\n      Compressing Blazor WebAssembly publish artifacts. This may take a while... \n\n    ```", "```cs\n<ItemGroup>\n  <SupportedPlatform Include=\"browser\"\n\n />\n</ItemGroup> \n\n```", "```cs\n[UnsupportedOSPlatform(\n\n\"browser\"\n\n)\n\n]\npublic\n\nvoid\n\nDoSomethingOutsideTheBrowserSandbox\n\n()\n\n{\n  ...\n} \n\n```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Razor\"\n\n    >\n      <PropertyGroup>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <AddRazorSupportForMvc>true\n\n    </AddRazorSupportForMvc>\n      </PropertyGroup>\n      <ItemGroup>\n        <FrameworkReference Include=\"Microsoft.AspNetCore.App\"\n\n     />\n      </ItemGroup>\n      <ItemGroup>\n        <ProjectReference Include=\"..\\Northwind.Common.EntityModels.Sqlite\n\n    \\Northwind.Common.EntityModels.Sqlite.csproj\"\n\n     />\n      </ItemGroup>\n\n     **<ItemGroup>**\n\n     **<SupportedPlatform Include=**\n\n    **\"browser\"**\n\n     **/>**\n\n     **</ItemGroup>**\n\n    </Project> \n\n    ```", "```cs\n    @using Northwind.Blazor.Customers.Shared \n\n    ```", "```cs\n    @using Northwind.Blazor.Customers.Pages\n    @using Northwind.Blazor.Customers.Shared \n\n    ```", "```cs\n    <Router AppAssembly=\"@typeof(App).Assembly\"\n\n    **AdditionalAssemblies=**\n\n    **\"new[] { typeof(Customers).Assembly }\"**\n\n    > \n\n    ```", "```cs\n     function\n\n    messageBox\n\n    (\n\n    message\n\n    ) \n\n    {\n      window\n\n    .alert(message);\n    }\n    function\n\n    setColorInStorage\n\n    () \n\n    {\n      if\n\n     (typeof\n\n     (Storage) !== \"undefined\"\n\n    ) {\n        localStorage\n\n    .setItem(\"color\"\n\n    , \n          document\n\n    .getElementById(\"colorBox\"\n\n    ).value);\n      }\n    }\n    function\n\n    getColorFromStorage\n\n    () \n\n    {\n      if\n\n     (typeof\n\n     (Storage) !== \"undefined\"\n\n    ) {\n        document\n\n    .getElementById(\"colorBox\"\n\n    ).value = \n          localStorage\n\n    .getItem(\"color\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n     <\n\n    script\n\n    src\n\n    =\n\n    \"scripts/interop.js\"\n\n    ></\n\n    script\n\n    > \n\n    ```", "```cs\n    <button\n\n     type\n\n    =\"button\"\n\n     class\n\n    =\"btn btn-info\"\n\n     @onclick\n\n    =\"AlertBrowser\"\n\n    >\n      Poke the browser</button\n\n    >\n    <hr\n\n     />\n    <input\n\n     id\n\n    =\"colorBox\"\n\n     />\n    <button\n\n     type\n\n    =\"button\"\n\n     class\n\n    =\"btn btn-info\"\n\n     @onclick\n\n    =\"SetColor\"\n\n    >\n      Set Color</button\n\n    >\n    <button\n\n     type\n\n    =\"button\"\n\n     class\n\n    =\"btn btn-info\"\n\n     @onclick\n\n    =\"GetColor\"\n\n    >\n      Get Color</button\n\n    >\n    @code {\n      [Inject\n\n    ]\n      public\n\n     IJSRuntime JSRuntime { get\n\n    ; set\n\n    ; } = null\n\n    !;\n      public\n\n    async\n\n     Task \n\n    AlertBrowser\n\n    ()\n\n      {\n        await\n\n     JSRuntime.InvokeVoidAsync(\n          \"messageBox\"\n\n    , \"Blazor poking the browser\"\n\n    );\n      }\n    public\n\n    async\n\n     Task \n\n    SetColor\n\n    ()\n\n      {\n        await\n\n     JSRuntime.InvokeVoidAsync(\"setColorInStorage\"\n\n    );\n      }\n      public\n\n    async\n\n     Task \n\n    GetColor\n\n    ()\n\n      {\n        await\n\n     JSRuntime.InvokeVoidAsync(\"getColorFromStorage\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n <\n\ntimestable\n\nNumber\n\n=\n\n\"6\"\n\n /> \n\n```"]