["```py\n    a = np.arange(7)\n\n    io.savemat(\"a.mat\", {\"array\": a})\n    ```", "```py\n    octave-3.4.0:7> load a.mat\n    octave-3.4.0:8> a\n\n    octave-3.4.0:8> array\n    array =\n\n      0\n      1\n      2\n      3\n      4\n      5\n      6\n    ```", "```py\nimport numpy as np\nfrom scipy import io\n\na = np.arange(7)\n\nio.savemat(\"a.mat\", {\"array\": a})\n```", "```py\n    generated = stats.norm.rvs(size=900)\n    ```", "```py\n    print(\"Mean\", \"Std\", stats.norm.fit(generated))\n    ```", "```py\n    Mean Std (0.0071293257063200707, 0.95537708218972528)\n\n    ```", "```py\n    print(\"Skewtest\", \"pvalue\", stats.skewtest(generated))\n    ```", "```py\n    Skewtest pvalue (-0.62120640688766893, 0.5344638245033837)\n\n    ```", "```py\n    print(\"Kurtosistest\", \"pvalue\", stats.kurtosistest(generated))\n    ```", "```py\n    Kurtosistest pvalue (1.3065381019536981, 0.19136963054975586)\n\n    ```", "```py\n    print(\"Normaltest\", \"pvalue\", stats.normaltest(generated))\n    ```", "```py\n    Normaltest pvalue (2.09293921181506, 0.35117535059841687)\n\n    ```", "```py\n    print(\"95 percentile\", stats.scoreatpercentile(generated, 95))\n    ```", "```py\n    95 percentile 1.54048860252\n\n    ```", "```py\n    print(\"Percentile at 1\", stats.percentileofscore(generated, 1))\n    ```", "```py\n    Percentile at 1 85.5555555556\n\n    ```", "```py\n    plt.hist(generated)\n    ```", "```py\nfrom __future__ import print_function\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ngenerated = stats.norm.rvs(size=900)\nprint(\"Mean\", \"Std\", stats.norm.fit(generated))\nprint(\"Skewtest\", \"pvalue\", stats.skewtest(generated))\nprint(\"Kurtosistest\", \"pvalue\", stats.kurtosistest(generated))\nprint(\"Normaltest\", \"pvalue\", stats.normaltest(generated))\nprint(\"95 percentile\", stats.scoreatpercentile(generated, 95))\nprint(\"Percentile at 1\", stats.percentileofscore(generated, 1))\nplt.title('Histogram of 900 random normally distributed values')\nplt.hist(generated)\nplt.grid()\nplt.show()\n```", "```py\n$ [sudo] easy_install statsmodels\n\n```", "```py\n    def get_close(symbol):\n       today = date.today()\n       start = (today.year - 1, today.month, today.day)\n\n       quotes = quotes_historical_yahoo(symbol, start, today)\n       quotes = np.array(quotes)\n\n       return quotes.T[4]\n    ```", "```py\n    spy =  np.diff(np.log(get_close(\"SPY\")))\n    dia =  np.diff(np.log(get_close(\"DIA\")))\n    ```", "```py\n    print(\"Means comparison\", stats.ttest_ind(spy, dia))\n    ```", "```py\n    Means comparison (-0.017995865641886155, 0.98564930169871368)\n\n    ```", "```py\n    print(\"Kolmogorov smirnov test\", stats.ks_2samp(spy, dia))\n    ```", "```py\n    Kolmogorov smirnov test (0.063492063492063516, 0.67615647616238039)\n\n    ```", "```py\n    print(\"Jarque Bera test\", jarque_bera(spy \u2013 dia)[1])\n    ```", "```py\n    Jarque Bera test 0.596125711042\n\n    ```", "```py\n    plt.hist(spy, histtype=\"step\", lw=1, label=\"SPY\")\n    plt.hist(dia, histtype=\"step\", lw=2, label=\"DIA\")\n    plt.hist(spy - dia, histtype=\"step\", lw=3, label=\"Delta\")\n    plt.legend()\n    plt.show()\n    ```", "```py\nfrom __future__ import print_function\nfrom matplotlib.finance import quotes_historical_yahoo\nfrom datetime import date\nimport numpy as np\nfrom scipy import stats\nfrom statsmodels.stats.stattools import jarque_bera\nimport matplotlib.pyplot as plt\n\ndef get_close(symbol):\n   today = date.today()\n   start = (today.year - 1, today.month, today.day)\n   quotes = quotes_historical_yahoo(symbol, start, today)\n   quotes = np.array(quotes)\n   return quotes.T[4]\n\nspy =  np.diff(np.log(get_close(\"SPY\")))\ndia =  np.diff(np.log(get_close(\"DIA\")))\n\nprint(\"Means comparison\", stats.ttest_ind(spy, dia))\nprint(\"Kolmogorov smirnov test\", stats.ks_2samp(spy, dia))\n\nprint(\"Jarque Bera test\", jarque_bera(spy - dia)[1])\n\nplt.title('Log returns of SPY and DIA')\nplt.hist(spy, histtype=\"step\", lw=1, label=\"SPY\")\nplt.hist(dia, histtype=\"step\", lw=2, label=\"DIA\")\nplt.hist(spy - dia, histtype=\"step\", lw=3, label=\"Delta\")\nplt.xlabel('Log returns')\nplt.ylabel('Counts')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    today = date.today()\n    start = (today.year - 1, today.month, today.day)\n\n    quotes = quotes_historical_yahoo(\"QQQ\", start, today)\n    quotes = np.array(quotes)\n\n    dates = quotes.T[0]\n    qqq = quotes.T[4]\n    ```", "```py\n    y = signal.detrend(qqq)\n    ```", "```py\n    alldays = DayLocator()\n    months = MonthLocator()\n    ```", "```py\n    month_formatter = DateFormatter(\"%b %Y\")\n    ```", "```py\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ```", "```py\n    plt.plot(dates, qqq, 'o', dates, qqq - y, '-')\n    ```", "```py\n    ax.xaxis.set_minor_locator(alldays)\n    ax.xaxis.set_major_locator(months)\n    ax.xaxis.set_major_formatter(month_formatter)\n    ```", "```py\n    fig.autofmt_xdate()\n    plt.show()\n    ```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo\nfrom datetime import date\nimport numpy as np\nfrom scipy import signal\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nfrom matplotlib.dates import DayLocator\nfrom matplotlib.dates import MonthLocator\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nquotes = quotes_historical_yahoo(\"QQQ\", start, today)\nquotes = np.array(quotes)\n\ndates = quotes.T[0]\nqqq = quotes.T[4]\n\ny = signal.detrend(qqq)\n\nalldays = DayLocator()\nmonths = MonthLocator()\nmonth_formatter = DateFormatter(\"%b %Y\")\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nplt.title('QQQ close price with trend')\nplt.ylabel('Close price')\nplt.plot(dates, qqq, 'o', dates, qqq - y, '-')\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_locator(months)\nax.xaxis.set_major_formatter(month_formatter)\nfig.autofmt_xdate()\nplt.grid()\nplt.show()\n```", "```py\n    amps = np.abs(fftpack.fftshift(fftpack.rfft(y)))\n    ```", "```py\n    amps[amps < 0.1 * amps.max()] = 0\n    ```", "```py\n    plt.plot(dates, y, 'o', label=\"detrended\")\n    plt.plot(dates, -fftpack.irfft(fftpack.ifftshift(amps)), label=\"filtered\")\n    ```", "```py\n    fig.autofmt_xdate()\n    plt.legend(prop={'size':'x-large'})\n    ```", "```py\n    ax2 = fig.add_subplot(212)\n    N = len(qqq)\n    plt.plot(np.linspace(-N/2, N/2, N), amps, label=\"transformed\")\n    ```", "```py\n    plt.legend(prop={'size':'x-large'})\n\n    plt.show()\n    ```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo\nfrom datetime import date\nimport numpy as np\nfrom scipy import signal\nimport matplotlib.pyplot as plt\nfrom scipy import fftpack\nfrom matplotlib.dates import DateFormatter\nfrom matplotlib.dates import DayLocator\nfrom matplotlib.dates import MonthLocator\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nquotes = quotes_historical_yahoo(\"QQQ\", start, today)\nquotes = np.array(quotes)\n\ndates = quotes.T[0]\nqqq = quotes.T[4]\n\ny = signal.detrend(qqq)\n\nalldays = DayLocator()\nmonths = MonthLocator()\nmonth_formatter = DateFormatter(\"%b %Y\")\n\nfig = plt.figure()\nfig.subplots_adjust(hspace=.3)\nax = fig.add_subplot(211)\n\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_locator(months)\nax.xaxis.set_major_formatter(month_formatter)\n\n## make font size bigger\nax.tick_params(axis='both', which='major', labelsize='x-large')\n\namps = np.abs(fftpack.fftshift(fftpack.rfft(y)))\namps[amps < 0.1 * amps.max()] = 0\n\nplt.title('Detrended and filtered signal')\nplt.plot(dates, y, 'o', label=\"detrended\")\nplt.plot(dates, -fftpack.irfft(fftpack.ifftshift(amps)), label=\"filtered\")\nfig.autofmt_xdate()\nplt.legend(prop={'size':'x-large'})\nplt.grid()\n\nax2 = fig.add_subplot(212)\nplt.title('Transformed signal')\nax2.tick_params(axis='both', which='major', labelsize='x-large')\nN = len(qqq)\nplt.plot(np.linspace(-N/2, N/2, N), amps, label=\"transformed\")\n\nplt.legend(prop={'size':'x-large'})\nplt.grid()\nplt.tight_layout()\nplt.show()\n```", "```py\n    def residuals(p, y, x):\n       A,k,theta,b = p\n       err = y-A * np.sin(2* np.pi* k * x + theta) + b\n       return err\n    ```", "```py\n    filtered = -fftpack.irfft(fftpack.ifftshift(amps))\n    ```", "```py\n    N = len(qqq)\n    f = np.linspace(-N/2, N/2, N)\n    p0 = [filtered.max(), f[amps.argmax()]/(2*N), 0, 0]\n    print(\"P0\", p0)\n    ```", "```py\n    P0 [2.6679532410065212, 0.00099598469163686377, 0, 0]\n\n    ```", "```py\n    plsq = optimize.leastsq(residuals, p0, args=(filtered, dates))\n    p = plsq[0]\n    print(\"P\", p)\n    ```", "```py\n    P [  2.67678014e+00   2.73033206e-03  -8.00007036e+03  -5.01260321e-03]\n\n    ```", "```py\n    plt.plot(dates, y, 'o', label=\"detrended\")\n    plt.plot(dates, filtered, label=\"filtered\")\n    plt.plot(dates, p[0] * np.sin(2 * np.pi * dates * p[1] + p[2]) + p[3], '^', label=\"fit\")\n    fig.autofmt_xdate()\n    plt.legend(prop={'size':'x-large'})\n    ```", "```py\n    ax2 = fig.add_subplot(212)\n    plt.plot(f, amps, label=\"transformed\")\n    ```", "```py\nfrom __future__ import print_function\nfrom matplotlib.finance import quotes_historical_yahoo\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import fftpack\nfrom scipy import signal\nfrom matplotlib.dates import DateFormatter\nfrom matplotlib.dates import DayLocator\nfrom matplotlib.dates import MonthLocator\nfrom scipy import optimize\n\nstart = (2010, 7, 25)\nend = (2011, 7, 25)\n\nquotes = quotes_historical_yahoo(\"QQQ\", start, end)\nquotes = np.array(quotes)\n\ndates = quotes.T[0]\nqqq = quotes.T[4]\n\ny = signal.detrend(qqq)\n\nalldays = DayLocator()\nmonths = MonthLocator()\nmonth_formatter = DateFormatter(\"%b %Y\")\n\nfig = plt.figure()\nfig.subplots_adjust(hspace=.3)\nax = fig.add_subplot(211)\n\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_locator(months)\nax.xaxis.set_major_formatter(month_formatter)\nax.tick_params(axis='both', which='major', labelsize='x-large')\n\namps = np.abs(fftpack.fftshift(fftpack.rfft(y)))\namps[amps < amps.max()] = 0\n\ndef residuals(p, y, x):\n   A,k,theta,b = p\n   err = y-A * np.sin(2* np.pi* k * x + theta) + b\n   return err\n\nfiltered = -fftpack.irfft(fftpack.ifftshift(amps))\nN = len(qqq)\nf = np.linspace(-N/2, N/2, N)\np0 = [filtered.max(), f[amps.argmax()]/(2*N), 0, 0]\nprint(\"P0\", p0)\n\nplsq = optimize.leastsq(residuals, p0, args=(filtered, dates))\np = plsq[0]\nprint(\"P\", p)\nplt.title('Detrended and filtered signal')\nplt.plot(dates, y, 'o', label=\"detrended\")\nplt.plot(dates, filtered, label=\"filtered\")\nplt.plot(dates, p[0] * np.sin(2 * np.pi * dates * p[1] + p[2]) + p[3], '^', label=\"fit\")\nfig.autofmt_xdate()\nplt.legend(prop={'size':'x-large'})\nplt.grid()\n\nax2 = fig.add_subplot(212)\nplt.title('Tranformed signal')\nax2.tick_params(axis='both', which='major', labelsize='x-large')\nplt.plot(f, amps, label=\"transformed\")\n\nplt.legend(prop={'size':'x-large'})\nplt.grid()\nplt.tight_layout()\nplt.show()\n```", "```py\nprint(\"Gaussian integral\", np.sqrt(np.pi),integrate.quad(lambda x: np.exp(-x**2), -np.inf, np.inf))\n```", "```py\nGaussian integral 1.77245385091 (1.7724538509055159, 1.4202636780944923e-08)\n\n```", "```py\n    x = np.linspace(-18, 18, 36)\n    noise = 0.1 * np.random.random(len(x))\n    signal = np.sinc(x) + noise\n    ```", "```py\n    interpreted = interpolate.interp1d(x, signal)\n    x2 = np.linspace(-18, 18, 180)\n    y = interpreted(x2)\n    ```", "```py\n    cubic = interpolate.interp1d(x, signal, kind=\"cubic\")\n    y2 = cubic(x2)\n    ```", "```py\n    plt.plot(x, signal, 'o', label=\"data\")\n    plt.plot(x2, y, '-', label=\"linear\")\n    plt.plot(x2, y2, '-', lw=2, label=\"cubic\")\n    plt.legend()\n    plt.show()\n    ```", "```py\nimport numpy as np\nfrom scipy import interpolate\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-18, 18, 36)\nnoise = 0.1 * np.random.random(len(x))\nsignal = np.sinc(x) + noise\n\ninterpreted = interpolate.interp1d(x, signal)\nx2 = np.linspace(-18, 18, 180)\ny = interpreted(x2)\n\ncubic = interpolate.interp1d(x, signal, kind=\"cubic\")\ny2 = cubic(x2)\n\nplt.plot(x, signal, 'o', label=\"data\")\nplt.plot(x2, y, '-', label=\"linear\")\nplt.plot(x2, y2, '-', lw=2, label=\"cubic\")\n\nplt.title('Interpolated signal')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    image = misc.lena().astype(np.float32)\n    plt.subplot(221)\n    plt.title(\"Original Image\")\n    img = plt.imshow(image, cmap=plt.cm.gray)\n    ```", "```py\n    plt.subplot(222)\n    plt.title(\"Median Filter\")\n    filtered = ndimage.median_filter(image, size=(42,42))\n    plt.imshow(filtered, cmap=plt.cm.gray)\n    ```", "```py\n    plt.subplot(223)\n    plt.title(\"Rotated\")\n    rotated = ndimage.rotate(image, 90)\n    plt.imshow(rotated, cmap=plt.cm.gray)\n    ```", "```py\n    plt.subplot(224)\n    plt.title(\"Prewitt Filter\")\n    filtered = ndimage.prewitt(image)\n    plt.imshow(filtered, cmap=plt.cm.gray)\n    plt.show()\n    ```", "```py\nfrom scipy import misc\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import ndimage\n\nimage = misc.lena().astype(np.float32)\n\nplt.subplot(221)\nplt.title(\"Original Image\")\nimg = plt.imshow(image, cmap=plt.cm.gray)\nplt.axis(\"off\")\n\nplt.subplot(222)\nplt.title(\"Median Filter\")\nfiltered = ndimage.median_filter(image, size=(42,42))\nplt.imshow(filtered, cmap=plt.cm.gray)\nplt.axis(\"off\")\n\nplt.subplot(223)\nplt.title(\"Rotated\")\nrotated = ndimage.rotate(image, 90)\nplt.imshow(rotated, cmap=plt.cm.gray)\nplt.axis(\"off\")\n\nplt.subplot(224)\nplt.title(\"Prewitt Filter\")\nfiltered = ndimage.prewitt(image)\nplt.imshow(filtered, cmap=plt.cm.gray)\nplt.axis(\"off\")\nplt.show()\n```", "```py\n    sample_rate, data = wavfile.read(WAV_FILE)\n    ```", "```py\n    repeated = np.tile(data, 4)\n    ```", "```py\n    wavfile.write(\"repeated_yababy.wav\", sample_rate, repeated)\n    ```", "```py\nfrom __future__ import print_function\nfrom scipy.io import wavfile\nimport matplotlib.pyplot as plt\nimport urllib.request\nimport numpy as np\n\nresponse = urllib.request.urlopen('http://www.thesoundarchive.com/austinpowers/smashingbaby.wav')\nprint(response.info())\nWAV_FILE = 'smashingbaby.wav'\nfilehandle = open(WAV_FILE, 'wb')\nfilehandle.write(response.read())\nfilehandle.close()\nsample_rate, data = wavfile.read(WAV_FILE)\nprint(\"Data type\", data.dtype, \"Shape\", data.shape)\n\nplt.subplot(2, 1, 1)\nplt.title(\"Original audio signal\")\nplt.plot(data)\nplt.grid()\n\nplt.subplot(2, 1, 2)\n\n## Repeat the audio fragment\nrepeated = np.tile(data, 4)\n\n## Plot the audio data\nplt.title(\"Repeated 4 times\")\nplt.plot(repeated)\nwavfile.write(\"repeated_yababy.wav\",\n    sample_rate, repeated)\nplt.grid()\nplt.tight_layout()\nplt.show()\n```"]