["```py\nfrom statsmodels.graphics.api import qqplot\nimport numpy as np\nfig = qqplot(np.random.uniform(size=10000), line='s')\nfig.set_size_inches(12, 6)\n```", "```py\nfig = qqplot(np.random.exponential(size=10000), line='s')\nfig.set_size_inches(12, 6)\n```", "```py\nfig = qqplot(np.random.normal(size=10000), line='s')\nfig.set_size_inches(12, 6)\n```", "```py\nimport statsmodels.api as sm\nsm.tsa.datetools.dates_from_range('2010', length=12)\n```", "```py\n [datetime.datetime(2010, 12, 31, 0, 0),\n\u00a0\u00a0datetime.datetime(2011, 12, 31, 0, 0),\n ...\n\u00a0\u00a0datetime.datetime(2020, 12, 31, 0, 0),\n\u00a0\u00a0datetime.datetime(2021, 12, 31, 0, 0)]\n```", "```py\nsm.tsa.datetools.dates_from_range('2010m1', length=120)\n```", "```py\n [datetime.datetime(2010, 1, 31, 0, 0),\n\u00a0\u00a0datetime.datetime(2010, 2, 28, 0, 0),\n ...\n\u00a0\u00a0datetime.datetime(2019, 11, 30, 0, 0),\n\u00a0\u00a0datetime.datetime(2019, 12, 31, 0, 0)]\n```", "```py\nimport pandas as pd\nn_obs = 12 * 20\nlinear_trend = np.linspace(100, 200, num=n_obs)\ncycle = np.sin(linear_trend) * 10\nerror_noise = np.random.randn(n_obs)\ndataset = \\\npd.DataFrame(\n\u00a0\u00a0\u00a0\u00a0linear_trend + cycle + error_noise, \n\u00a0\u00a0\u00a0\u00a0index=sm.tsa.datetools.dates_from_range('2000m1', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length=n_obs), \n\u00a0\u00a0\u00a0\u00a0columns=['Price'])\ndataset\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\n2000-01-31\u00a0\u00a0\u00a0\u00a0\u00a096.392059\n2000-02-29\u00a0\u00a0\u00a0\u00a0\u00a099.659426\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-11-30\u00a0\u00a0\u00a0\u00a0190.067039\n2019-12-31\u00a0\u00a0\u00a0\u00a0190.676568\n240 rows \u00d7 1 columns\n```", "```py\nimport matplotlib.pyplot as plt\ndataset.plot(figsize=(12, 6), color='black')\n```", "```py\nhp_cycle, hp_trend = \\\nsm.tsa.filters.hpfilter(dataset['Price'], lamb=129600)\ndecomp = dataset[['Price']]\ndecomp['HP_Cycle'] = hp_cycle\ndecomp['HP_Trend'] = hp_trend\ndecomp\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\u00a0\u00a0\u00a0\u00a0\u00a0HP_Cycle\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HP_Trend\n2000-01-31\u00a0\u00a0\u00a0\u00a0\u00a096.392059\u00a0\u00a0\u00a0\u00a0-4.731153\u00a0\u00a0\u00a0\u00a0101.123212\n2000-02-29\u00a0\u00a0\u00a0\u00a0\u00a099.659426\u00a0\u00a0\u00a0\u00a0-1.839262\u00a0\u00a0\u00a0\u00a0101.498688\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-11-30\u00a0\u00a0\u00a0\u00a0190.067039\u00a0\u00a0\u00a0\u00a0-8.350371\u00a0\u00a0\u00a0\u00a0198.417410\n2019-12-31\u00a0\u00a0\u00a0\u00a0190.676568\u00a0\u00a0\u00a0\u00a0-8.107701\u00a0\u00a0\u00a0\u00a0198.784269\n240 rows \u00d7 3 columns\n```", "```py\nuc = sm.tsa.UnobservedComponents(dataset['Price'], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0level='lltrend', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cycle=True, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stochastic_cycle=True)\nres_uc = uc.fit(method='powell', disp=True)\nres_uc.summary()\n```", "```py\nOptimization terminated successfully.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Current function value: 2.014160\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Iterations: 6\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Function evaluations: 491\nUnobserved Components Results\nDep. Variable:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\u00a0No. Observations:\u00a0\u00a0\u00a0\u00a0240\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Model:\u00a0local linear trend\u00a0\u00a0Log Likelihood\u00a0\u00a0-483.399\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ stochastic cycle\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AIC\u00a0\u00a0\u00a0976.797\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Date:\u00a0\u00a0\u00a0Fri, 12 Jun 2020\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BIC\u00a0\u00a0\u00a0994.116\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Time:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a008:09:46\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HQIC\u00a0\u00a0983.779\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Sample:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a001-31-2000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 12-31-2019\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nCovariance Type:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opg\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0coef\u00a0std\u00a0err\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0z\u00a0\u00a0P>|z|\u00a0[0.025\u00a00.975]\nsigma2.irregular\u00a0\u00a00.4962\u00a0\u00a00.214\u00a0\u00a02.315\u00a0\u00a00.021\u00a0\u00a00.076\u00a0\u00a00.916\nsigma2.level\u00a0\u00a06.954e-17\u00a0\u00a00.123\u00a0\u00a05.63e-16\u00a01.000\u00a0-0.242\u00a00.242\nsigma2.trend\u00a0\u00a02.009e-22\u00a04.03e-05\u00a04.98e-18\u00a01.000\u00a0-7.91e-05\u00a0\u00a07.91e-05\nsigma2.cycle\u00a0\u00a0\u00a0\u00a0\u00a01.5485\u00a0\u00a00.503\u00a0\u00a0\u00a03.077\u00a0\u00a00.002\u00a0\u00a00.562\u00a0\u00a02.535\nfrequency.cycle\u00a0\u00a00.3491\u00a0\u00a00.013\u00a0\u00a027.768\u00a0\u00a00.000\u00a0\u00a00.324\u00a0\u00a00.374\nLjung-Box (Q):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0347.56\u00a0\u00a0\u00a0\u00a0Jarque-Bera (JB):\u00a0\u00a0\u00a0\u00a00.42\nProb(Q):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Prob(JB):\u00a0\u00a0\u00a0\u00a00.81\nHeteroskedasticity (H):\u00a0\u00a00.93\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Skew:\u00a0\u00a0\u00a0-0.09\nProb(H) (two-sided):\u00a0\u00a0\u00a0\u00a0\u00a00.73\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Kurtosis:\u00a0\u00a0\u00a0\u00a02.91\n```", "```py\ndecomp['UC_Cycle'] = res_uc.cycle.smoothed\ndecomp['UC_Trend'] = res_uc.level.smoothed\ndecomp['UC_Error'] = res_uc.resid\ndecomp\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UC_Cycle\u00a0\u00a0\u00a0\u00a0UC_Trend\u00a0\u00a0\u00a0\u00a0UC_Error\n2000-01-31\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-3.358954\u00a0\u00a0\u00a099.743814\u00a0\u00a0\u00a096.392059\n2000-02-29\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-0.389834\u00a0\u00a0100.163434\u00a0\u00a0\u00a0\u00a06.173967\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-11-30\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-9.725420\u00a0\u00a0199.613395\u00a0\u00a0\u00a0\u00a01.461497\n2019-12-31\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-9.403885\u00a0\u00a0200.033015\u00a0\u00a0\u00a0\u00a00.306881\n240 rows \u00d7 6 columns\n```", "```py\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ns_dc = seasonal_decompose(dataset['Price'], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0model='additive')\ndecomp['SDC_Cycle'] = s_dc.seasonal\ndecomp['SDC_Trend'] = s_dc.trend\ndecomp['SDC_Error'] = s_dc.resid\ndecomp[118:122]\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0SDC_Cycle\u00a0\u00a0\u00a0\u00a0\u00a0SDC_Trend\u00a0\u00a0\u00a0\u00a0SDC_Error\n2009-11-30\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a00.438633\u00a0\u00a0\u00a0\u00a0146.387392\u00a0\u00a0\u00a0\u00a0-8.620342\n2009-12-31\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a00.315642\u00a0\u00a0\u00a0\u00a0147.240112\u00a0\u00a0\u00a0\u00a0-6.298764\n2010-01-31\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a00.228229\u00a0\u00a0\u00a0\u00a0148.384061\u00a0\u00a0\u00a0\u00a0-3.538544\n2010-02-28\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a00.005062\u00a0\u00a0\u00a0\u00a0149.912202\u00a0\u00a0\u00a0\u00a0-0.902362\n```", "```py\nplt.title('Trend components')\ndecomp['Price'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-', legend='Price')\ndecomp['HP_Trend'].plot(figsize=(12, 6), color='darkgray', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='--', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='HP_Trend')\ndecomp['UC_Trend'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle=':', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='UC_Trend')\ndecomp['SDC_Trend'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-.', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='SDC_Trend')\n```", "```py\nplt.title('Cycle/Seasonal components')\ndecomp['HP_Cycle'].plot(figsize=(12, 6), color='darkgray', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='--', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='HP_Cycle')\ndecomp['UC_Cycle'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle=':', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='UC_Cycle')\ndecomp['SDC_Cycle'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-.', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='SDC_Cycle')\n```", "```py\nplt.title('Error components')\nplt.ylim((-20, 20))\ndecomp['UC_Error'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle=':', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='UC_Error')\ndecomp['SDC_Error'].plot(figsize=(12, 6), color='black',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-.', lw=2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='SDC_Error')\n```", "```py\nfrom statsmodels.tsa.stattools import adfuller\nresult = adfuller(dataset['Price'])\nprint('Test Stat: {}\\np value: {}\\nLags: {}\\nNum \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0observations: {}'.format(result[0], result[1], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result[2], result[3]))\n```", "```py\nTest Stat: 0.47882793726850786\np value: 0.9842151821849324\nLags: 14\nNum observations: 225\n```", "```py\nprice_diff = \\\n(dataset['Price'].shift(-1) - dataset['Price']).fillna(0)\nprice_diff\n```", "```py\n2000-01-31\u00a0\u00a0\u00a0\u00a04.951062\n2000-02-29\u00a0\u00a0\u00a0\u00a05.686832\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-11-30\u00a0\u00a0\u00a0\u00a03.350694\n2019-12-31\u00a0\u00a0\u00a0\u00a00.000000\nName: Price, Length: 240, dtype: float64\n```", "```py\nresult = adfuller(price_diff)\nprint('Test Stat: {}\\np value: {}\\nLags: {}\\nNum \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0observations: {}'.format(result[0], result[1], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result[2], result[3]))\n```", "```py\nTest Stat: -7.295184662866956\np value: 1.3839111942229784e-10\nLags: 15\nNum observations: 224\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfig = plot_acf(dataset['Price'], lags=100)\nfig.set_size_inches(12, 6)\n```", "```py\nfig = plot_pacf(dataset['Price'], lags=100)\nfig.set_size_inches(12, 6)\n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\narima = ARIMA(dataset['Price'], order=(36,1,2))\nres_ar = arima.fit()\nres_ar.summary()\n```", "```py\nSARIMAX Results\nDep. Variable:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\u00a0\u00a0No. Observations:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0240\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Model:\u00a0\u00a0ARIMA(36, 1, 2)\u00a0\u00a0\u00a0\u00a0Log Likelihood\u00a0\u00a0-360.195\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Date:\u00a0Sat, 13 Jun 2020\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AIC\u00a0\u00a0\u00a0798.391\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Time:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a009:18:46\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BIC\u00a0\u00a0\u00a0933.973\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Sample:\u00a0\u00a0\u00a0\u00a0\u00a001-31-2000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HQIC\u00a0\u00a0\u00a0853.027\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 12-31-2019\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nCovariance Type:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opg\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0coef\u00a0\u00a0std err\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0z\u00a0\u00a0\u00a0P>|z|\u00a0\u00a0\u00a0[0.025\u00a0\u00a0\u00a0\u00a00.975]\nar.L1\u00a0\u00a0-0.8184\u00a0\u00a0\u00a0\u00a00.821\u00a0\u00a0-0.997\u00a0\u00a00.319\u00a0\u00a0\u00a0-2.428\u00a0\u00a0\u00a0\u00a0\u00a00.791\nar.L2\u00a0\u00a0-0.6716\u00a0\u00a0\u00a0\u00a00.495\u00a0\u00a0-1.358\u00a0\u00a00.175\u00a0\u00a0\u00a0-1.641\u00a0\u00a0\u00a0\u00a0\u00a00.298\n...\nar.L35\u00a0\u00a00.3125\u00a0\u00a0\u00a0\u00a00.206\u00a0\u00a0\u00a01.514\u00a0\u00a00.130\u00a0\u00a0\u00a0-0.092\u00a0\u00a0\u00a0\u00a0\u00a00.717\nar.L36\u00a0\u00a00.1370\u00a0\u00a0\u00a0\u00a00.161\u00a0\u00a0\u00a00.851\u00a0\u00a00.395\u00a0\u00a0\u00a0-0.178\u00a0\u00a0\u00a0\u00a0\u00a00.452\nma.L1\u00a0\u00a0-0.0244\u00a0\u00a0\u00a0\u00a00.819\u00a0\u00a0-0.030\u00a0\u00a00.976\u00a0\u00a0\u00a0-1.630\u00a0\u00a0\u00a0\u00a0\u00a01.581\nma.L2\u00a0\u00a0\u00a00.1694\u00a0\u00a0\u00a0\u00a00.454\u00a0\u00a0\u00a00.373\u00a0\u00a00.709\u00a0\u00a0\u00a0-0.721\u00a0\u00a0\u00a0\u00a0\u00a01.060\nsigma2\u00a0\u00a01.0911\u00a0\u00a0\u00a0\u00a00.144\u00a0\u00a0\u00a07.586\u00a0\u00a00.000\u00a0\u00a0\u00a0\u00a00.809\u00a0\u00a0\u00a0\u00a0\u00a01.373\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ljung-Box (Q):\u00a0\u00a013.99\u00a0\u00a0Jarque-Bera (JB):\u00a0\u00a01.31\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Prob(Q):\u00a0\u00a01.00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Prob(JB):\u00a0\u00a00.52\n\u00a0\u00a0Heteroskedasticity (H):\u00a0\u00a01.15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Skew:\u00a0\u00a00.09\n\u00a0\u00a0\u00a0\u00a0\u00a0Prob(H) (two-sided):\u00a0\u00a00.54\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Kurtosis:\u00a0\u00a02.69\n```", "```py\ndataset['PredPrice'] = res_ar.predict(dataset.index[0], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataset.index[-1])\ndataset\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PredPrice\n2000-01-31\u00a0\u00a0\u00a0\u00a095.317833\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.000000\n2000-02-29\u00a0\u00a0\u00a0\u00a0100.268895\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a095.317901\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-11-30\u00a0\u00a0\u00a0\u00a0188.524009\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0188.944216\n2019-12-31\u00a0\u00a0\u00a0\u00a0191.874704\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0190.614641\n240 rows \u00d7 2 columns\n```", "```py\nplt.ylim(70, 250)\ndataset['Price'].plot(figsize=(12, 6), color='darkgray',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-', lw=4, legend='Price')\ndataset['PredPrice'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-.', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='PredPrice')\n```", "```py\nextended_dataset = pd.DataFrame(index=sm.tsa.datetools.dates_from_range('2020m1', length=48))\nextended_dataset = dataset.append(extended_dataset)\nextended_dataset\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PredPrice\n2000-01-31\u00a0\u00a0\u00a0\u00a095.317833\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.000000\n2000-02-29\u00a0\u00a0\u00a0\u00a0100.268895\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a095.317901\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2023-11-30\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NaN\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NaN\n2023-12-31\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NaN\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NaN\n288 rows \u00d7 2 columns\n```", "```py\nextended_dataset['PredPrice'] = \\\nres_ar.predict(extended_dataset.index[0], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0extended_dataset.index[-1])\nextended_dataset\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PredPrice\n2000-01-31\u00a0\u00a0\u00a0\u00a0\u00a095.317833\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.000000\n2000-02-29\u00a0\u00a0\u00a0\u00a0100.268895\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a095.317901\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2023-11-30\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NaN\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0215.441777\n2023-12-31\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NaN\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0220.337355\n288 rows \u00d7 2 columns\n```", "```py\nextended_dataset['Price'].iloc[-100:].plot(figsize=(12, 6), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color='darkgray', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lw=4, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='Price')\nextended_dataset['PredPrice'].iloc[-100:].plot(figsize=(12, 6), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-.', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='PredPrice')\n```", "```py\npip install pmdarima\n```", "```py\nimport pmdarima as pm\nmodel = pm.auto_arima(dataset['Price'], seasonal=True, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stepwise=True, m=12)\nprint(model.summary())\nextended_dataset = \\\npd.DataFrame(\n\u00a0\u00a0\u00a0\u00a0index=sm.tsa.datetools.dates_from_range('2020m1', \n\u00a0\u00a0\u00a0\u00a0length=48))\nextended_dataset['PredPrice'], conf_int = \\\nmodel.predict(48, return_conf_int=True, alpha=0.05)\nplt.plot(dataset['Price'], c='blue')\nplt.plot(extended_dataset['PredPrice'], c='green')\nplt.show()\nprint(extended_dataset)\nprint(conf_int)\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PredPrice\n2020-01-31\u00a0\u00a0194.939195\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2023-12-31\u00a0\u00a0222.660698\n[48 rows x 1 columns]\n```", "```py\n[[192.39868933 197.4797007 ]\n [196.80033117 202.32443987]\n [201.6275806\u00a0\u00a0207.60042584]\n...\n [212.45091331 225.44676173]\n [216.11548707 229.20590827]]\n```", "```py\nconda install -c conda-forge fbprophet\n```", "```py\nfrom fbprophet import Prophet\nprophet_dataset = \\\ndataset.rename(columns={'Price' : 'y'}).rename_axis('ds')\\\n.drop('PredPrice', 1).reset_index()\nprint(prophet_dataset)\nmodel = Prophet()\nmodel.fit(prophet_dataset)\ndf_forecast = model.make_future_dataframe(periods=48, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq='M')\ndf_forecast = model.predict(df_forecast)\nprint(df_forecast[['ds', 'yhat', 'yhat_lower', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'yhat_upper']].tail())\nmodel.plot(df_forecast, xlabel='Date', ylabel='Value')\nmodel.plot_components(df_forecast)\n```", "```py\nimport numpy as np\nimport pandas as pd\ndf = pd.DataFrame(index=pd.date_range('2000', '2020'))\ndf['BookPressure'] = np.random.randn(len(df)) * 2\ndf['TradePressure'] = np.random.randn(len(df)) * 100\ndf['RelativeValue'] = np.random.randn(len(df)) * 50\ndf['Microstructure'] = np.random.randn(len(df)) * 10\ntrue_coefficients = np.random.randint(low=-100, high=101,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size=4) / 10\ndf['PriceChange'] = ((df['BookPressure'] * true_coefficients[0])\n+ (df['TradePressure'] * true_coefficients[1])\n+ (df['RelativeValue'] * true_coefficients[2])\n+ (df['Microstructure'] * true_coefficients[3])\n+ (np.random.randn(len(df)) * 200))\ndf['Price'] = df['PriceChange'].cumsum(0) + 100000\n```", "```py\ntrue_coefficients\narray([10\\. ,\u00a0\u00a06.2, -0.9,\u00a0\u00a05\\. ])\n```", "```py\nDf\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BookPressure\u00a0\u00a0TradePressure\u00a0\u00a0RelativeValue\u00a0\u00a0Microstructure\u00a0\u00a0PriceChange\u00a0\u00a0Price\n2000-01-01\u00a0\u00a04.545869\u00a0\u00a0-2.335894\u00a0\u00a05.953205\u00a0\u00a0-15.025576\u00a0\u00a0-263.749500\u00a0\u00a099736.250500\n2000-01-02\u00a0\u00a0-0.302344\u00a0\u00a0-186.764283\u00a0\u00a09.150213\u00a0\u00a013.795346\u00a0\u00a0-758.298833\u00a0\u00a098977.951667\n...\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-12-31\u00a0\u00a0-1.890265\u00a0\u00a0-113.704752\u00a0\u00a060.258456\u00a0\u00a012.229772\u00a0\u00a0-295.295108\u00a0\u00a0182827.332185\n2020-01-01\u00a0\u00a01.657811\u00a0\u00a0-77.354049\u00a0\u00a0-39.090108\u00a0\u00a0-3.294086\u00a0\u00a0-204.576735\u00a0\u00a0182622.755450\n7306 rows \u00d7 6 columns\n```", "```py\ndf['Price'].plot(figsize=(12, 6), color='black',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='Price')\n```", "```py\npd.plotting.scatter_matrix(df.drop('Price', axis=1), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color='black', alpha=0.2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0grid=True, diagonal='kde', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0figsize=(10, 10))\n```", "```py\nfeatures = df[['BookPressure', 'TradePressure', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'RelativeValue', 'Microstructure']]\ntarget = df['PriceChange']\n```", "```py\nfrom sklearn.linear_model import RidgeCV\nridge = RidgeCV()\nridge.fit(features, target)\n```", "```py\nRidgeCV(alphas=array([ 0.1,\u00a0\u00a01\\. , 10\\. ]), cv=None,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fit_intercept=True, gcv_mode=None, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0normalize=False, scoring=None, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0store_cv_values=False)\n```", "```py\ntrue_coefficients, ridge.coef_\n```", "```py\n(array([10\\. ,\u00a0\u00a06.2, -0.9,\u00a0\u00a05\\. ]),\n array([11.21856334,\u00a06.20641632, -0.93444009,\u00a04.94581522]))\n```", "```py\nridge.score(features, target)\n```", "```py\n0.9076861352499385\n```", "```py\ndf['PredPrice'] = \\\nridge.predict(features).cumsum(0) + 100000; df\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PredPrice\n2000-01-01\u00a0\u00a0...\u00a0\u00a099736.250500\u00a0\u00a0\u00a0\u00a099961.011495\n2000-01-02\u00a0\u00a0...\u00a0\u00a098977.951667\u00a0\u00a0\u00a0\u00a098862.549185\n\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-12-31\u00a0\u00a0...\u00a0\u00a0182827.332185\u00a0\u00a0183059.625653\n2020-01-01\u00a0\u00a0...\u00a0\u00a0182622.755450\u00a0\u00a0182622.755450\n7306 rows \u00d7 7 columns\n```", "```py\ndf['Price'].plot(figsize=(12, 6), color='gray', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='--', legend='Price')\ndf['PredPrice'].plot(figsize=(12, 6), color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0linestyle='-.', legend='PredPrice')\n```", "```py\ndf['Price'].loc['2010-01-01':'2010-03-31']\\\n.plot(figsize=(12, 6), color='darkgray', linestyle='-', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='Price')\ndf['PredPrice'].loc['2010-01-01':'2010-03-31']\\\n.plot(figsize=(12, 6), color='black', linestyle='-.', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='PredPrice')\n```", "```py\ndf['Errors'] = df['Price'] - df['PredPrice']\ndf['Errors'].plot(figsize=(12, 6), kind='kde', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color='black', legend='Errors')\n```", "```py\ntarget_discrete = pd.cut(target, bins=5, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels = \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-2, -1, 0, 1, 2]).astype(int);\ntarget_discrete\n```", "```py\n2000-01-01\u00a0\u00a0\u00a0\u00a00\n2000-01-02\u00a0\u00a0\u00a0-1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-12-28\u00a0\u00a0\u00a0-1\n2019-12-29\u00a0\u00a0\u00a0\u00a00\n2019-12-30\u00a0\u00a0\u00a0\u00a00\n2019-12-31\u00a0\u00a0\u00a0\u00a00\n2020-01-01\u00a0\u00a0\u00a0\u00a00\nFreq: D, Name: PriceChange, Length: 7306, dtype: int64\n```", "```py\ntarget_discrete.plot(figsize=(12, 6), kind='hist', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color='black')\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_depth=5)\nrf.fit(features, target_discrete)\n```", "```py\nRandomForestClassifier(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bootstrap=True, ccp_alpha=0.0, class_weight=None,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0criterion='gini', max_depth=5, max_features='auto',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_leaf_nodes=None, max_samples=None,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0min_impurity_decrease=0.0, min_impurity_split=None,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0min_samples_leaf=1, min_samples_split=2,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0min_weight_fraction_leaf=0.0, n_estimators=100,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n_jobs=None, oob_score=False, random_state=None,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0verbose=0, warm_start=False)\n```", "```py\nrf.score(features, target_discrete)\n```", "```py\n0.835340815767862\n```", "```py\ndf['DiscretePriceChange'] = target_discrete\ndf['PredDiscretePriceChange'] = rf.predict(features)\ndf\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0DiscretePriceChange\u00a0PredDiscretePriceChange\n2000-01-01\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\n2000-01-02\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2019-12-31\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1\n2020-01-01\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1\n7306 rows \u00d7 10 columns\n```", "```py\ndf['DiscretePriceChange'].loc['2010-01-01':'2010-03-31'].plot(figsize=(12, 6), color='darkgray', linestyle='-', legend='DiscretePriceChange')\ndf['PredDiscretePriceChange'].loc['2010-01-01':'2010-03-31'].plot(figsize=(12, 6), color='black', linestyle='-.', legend='PredDiscretePriceChange')\n```", "```py\ndf['ClassificationErrors'] = \\\ndf['DiscretePriceChange'] - df['PredDiscretePriceChange']\ndf['ClassificationErrors'].plot(figsize=(12, 6), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kind='kde', color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='ClassificationErrors')\n```"]