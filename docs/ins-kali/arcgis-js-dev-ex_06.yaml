- en: Chapter 6. Working with Real-Time Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。处理实时数据
- en: 'Data that are updated constantly presents us with a significant challenge in
    retrieving and rendering them. In this chapter, we will deal with two basic methods
    to work with real-time data by developing an application that is meant to track
    hurricanes. You will learn about the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不断更新的数据给我们在检索和渲染它们方面带来了重大挑战。在本章中，我们将通过开发一个旨在跟踪飓风的应用程序来处理实时数据的两种基本方法。在本章中，您将学习以下主题：
- en: Understand about the nature of real-time data such as hurricane data
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解实时数据的性质，如飓风数据
- en: Use the in-built options given by ArcGIS to visualize the data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ArcGIS提供的内置选项来可视化数据
- en: Methods to get the latest data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取最新数据的方法
- en: Methods to set the refresh interval for a layer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置图层的刷新间隔的方法
- en: Background about the application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序背景
- en: We are going to deal with hurricane data provided by the National Hurricane
    Center (NHC). The NHC provides a map service that describes the path and forecast
    of tropical hurricane activity. The live feeds provided as a map service by the
    NHC can be found at [http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将处理由国家飓风中心（NHC）提供的飓风数据。NHC提供了描述热带飓风活动路径和预测的地图服务。NHC提供的实时数据可以在[http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Hurricane_Active/MapServer)找到。
- en: 'The map service provides data about the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 地图服务提供以下数据：
- en: '**Forecast Position**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预测位置**'
- en: '**Observed Position**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**观测位置**'
- en: '**Forecast Track**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预测路径**'
- en: '**Observed Track**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**观测路径**'
- en: '**The Cone of Uncertainty**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不确定性锥**'
- en: '**Watches and Warnings**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报和警告**'
- en: '**Tropical Storm Force**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热带风暴力**'
- en: The forecast and observed positions represent the center of the cyclone, whereas
    the track represents forecast and observed positions connected to give a sense
    of the movement of the hurricane.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 预测和观测位置代表飓风的中心，而路径代表连接的预测和观测位置，以便了解飓风的移动方向。
- en: '![Background about the application](graphics/B04959_06_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序背景](graphics/B04959_06_01.jpg)'
- en: In the **Service Catalog** heading, click **ArcGIS.com Map** to get a holistic
    perspective of the data in the map service.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在**服务目录**标题下，单击**ArcGIS.com地图**以全面了解地图服务中的数据。
- en: Visualizing map data
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化地图数据
- en: ArcGIS Online is an effective medium to visualize and play with data hosted
    on ArcGIS Server. When opening a map service in ArcGIS Online, the default symbology
    is displayed and we can get a sense of the extent of the data we would be using
    in our application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Online是可视化和使用ArcGIS Server上托管的数据的有效媒介。在ArcGIS Online中打开地图服务时，会显示默认的符号，并且我们可以了解我们在应用程序中将要使用的数据的范围。
- en: In the following screenshot, we can see the **Forecast Position** feature layer
    and its default symbology. The symbology being used is PictureMarkerSymbol and
    it gives a sense of what is the intensity of the hurricane over the past three
    days (72 hours).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到**预测位置**要素图层及其默认符号。使用的符号是PictureMarkerSymbol，它可以让我们了解过去三天（72小时）飓风的强度。
- en: '![Visualizing map data](graphics/B04959_06_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![可视化地图数据](graphics/B04959_06_02.jpg)'
- en: 'The following screenshot gives a holistic picture of the entire data in the
    map service including forecast locations and track, as well as observed locations:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图全面展示了地图服务中的所有数据，包括预测位置和路径，以及观测位置：
- en: '![Visualizing map data](graphics/B04959_06_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![可视化地图数据](graphics/B04959_06_03.jpg)'
- en: Turn off all the layers in the Table of Contents (TOC) and turn on just the
    **Observed Position** layer. The **Observed Position** layer is just rendered
    by just a simple Renderer. The symbology doesn't vary in size according to any
    field value. It just shows the locations where storm activity was measured in
    the past 72 hours.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭目录中的所有图层，只打开**观测位置**图层。**观测位置**图层只是由简单的渲染器渲染的。符号不会根据任何字段值的大小而变化。它只显示过去72小时内测得的风暴活动的位置。
- en: '![Visualizing map data](graphics/B04959_06_04.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![可视化地图数据](graphics/B04959_06_04.jpg)'
- en: 'Now ArcGIS Online gives us options to set its symbology in various ways. When
    we click the layer''s name in the TOC, the following screen opens up. It shows
    various styles based on which symbology can be changed. In the following screenshot,
    **INTENSITY** of the storm is chosen as the field of display, and the size of
    the symbol is based on the quantity of the **INTENSITY** value:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在ArcGIS Online为我们提供了各种设置其符号的选项。当我们在目录中点击图层的名称时，会打开以下屏幕。它显示了基于哪些样式可以更改符号。在以下截图中，**强度**的风暴被选择为显示的字段，并且符号的大小基于**强度**值的数量：
- en: '![Visualizing map data](graphics/B04959_06_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![可视化地图数据](graphics/B04959_06_05.jpg)'
- en: The data can be classified into groups according to various classification techniques
    such as **Equal Breaks**, **Quantile**, **Natural Breaks**, and so on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可以根据各种分类技术进行分类，例如**等间隔**、**分位数**、**自然间隔**等。
- en: '![Visualizing map data](graphics/B04959_06_06.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![可视化地图数据](graphics/B04959_06_06.jpg)'
- en: Finally, the **Observed Track** actually shows the track taken by the hurricane
    over the past 72 hours and uses a unique value renderer to render the data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**观测路径**实际上显示了过去72小时飓风所经过的路径，并使用唯一值渲染器来渲染数据。
- en: '![Visualizing map data](graphics/B04959_06_07.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![可视化地图数据](graphics/B04959_06_07.jpg)'
- en: Building a hurricane tracking app
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建飓风追踪应用程序
- en: 'Now that we have gained an understanding of our data using the ArcGIS Online
    service, we can use the map service URL to build a web mapping application of
    our own. In our application, we intend to incorporate the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过ArcGIS Online服务了解了我们的数据，我们可以使用地图服务URL构建自己的网络地图应用程序。在我们的应用程序中，我们打算包括以下内容：
- en: Add layers to the map that displays the past and present hurricane locations
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图添加显示过去和现在飓风位置的图层
- en: Add global wind data
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加全球风数据
- en: Add a gauge widget to display the wind speed
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个仪表小部件来显示风速
- en: Add a current weather widget, which displays the current weather information
    at the user's browser location
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个当前天气小部件，显示用户浏览器位置的当前天气信息
- en: Add a **Current Hurricane List** widget, which shows the updated list of current
    hurricanes and the details of each hurricane when selected
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个**当前飓风列表**小部件，显示当前飓风的更新列表以及选择时每个飓风的详细信息
- en: Symbolizing active hurricane layers
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号化活跃的飓风层
- en: 'We have more than one feature layer to deal with. Let''s try to build a layer
    dictionary. In the following code snippet, we will try to create an array of objects
    where each object has properties such as a URL and title. The URL refers to the
    URL of a feature layer and the title property refers to the title by which we
    would like to refer to the feature layer:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有多个要处理的要素层。让我们尝试构建一个图层字典。在以下代码片段中，我们将尝试创建一个对象数组，其中每个对象都具有诸如URL和标题之类的属性。URL是指要素层的URL，标题属性是指我们想要引用要素层的标题：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This helps us retrieve the feature layer using the layer name or title property.
    Let''s use the `array.map()` method provided by the `dojo/_base/array` module
    to add the corresponding feature layer for each object into the `layerDict` array.
    The `array.map()` method, if you can recollect from [Chapter 1](ch01.html "Chapter 1. Foundation
    for the API"), *Foundation for the API*, actually iterates through the elements
    in the array and will return an array. Then, each item being iterated can be modified.
    In our case we are trying to do the following for each item:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们使用图层名称或标题属性检索要素层。让我们使用`dojo/_base/array`模块提供的`array.map()`方法将每个对象的相应要素层添加到`layerDict`数组中。`array.map()`方法，如果你还记得[第1章](ch01.html
    "第1章。API的基础"), *API的基础*，实际上是遍历数组中的元素并返回一个数组。然后，可以修改正在迭代的每个项目。在我们的情况下，我们正在尝试对每个项目执行以下操作：
- en: Create a feature layer from the URL in each item.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从每个项目的URL创建一个要素层。
- en: Add the feature layer to the map.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将要素层添加到地图中。
- en: Add an additional layer property to each item object in the `layerDict` array.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layerDict`数组中的每个项目对象中添加一个额外的图层属性。
- en: 'The following code snippet explains the process:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段解释了这个过程：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now each object in the `layerDict` array will have an additional layer property,
    which holds the feature layer referred by the URL.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`layerDict`数组中的每个对象都将具有一个额外的图层属性，该属性保存了由URL引用的要素层。
- en: To retrieve a feature layer, we can use the layer name in the `array.filter()`
    method provided by the `dojo/_base/array` module. The filter `method()` iterates
    through each object item and returns a filtered array based on our predicate condition.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索要素层，我们可以使用`dojo/_base/array`模块提供的`array.filter()`方法中的图层名称。`filter`方法()遍历每个对象项，并根据我们的谓词条件返回一个过滤后的数组。
- en: 'The following line of code returns the feature layer with the title `"Forecast
    Error Cone"` and saves it in the variable named `foreCastErrorConeFeatureLayer`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行返回标题为“预测误差锥”的要素层，并将其保存在名为`foreCastErrorConeFeatureLayer`的变量中：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are trying to symbolize the features in some of the feature layers. We will
    start off with the past positions. The past positions feature a layer, which by
    default is represented by a circle with a dot in the center. We will try to use
    a red flag to symbolize it. The following approach shall be taken to symbolize
    it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在尝试对一些要素层中的要素进行符号化。我们将从过去的位置开始。过去的位置特征层默认情况下由一个带有中心点的圆表示。我们将尝试使用红旗来表示它。将采取以下方法来对其进行符号化：
- en: Import the `esri/symbols/PictureMarkerSymbol` module.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`esri/symbols/PictureMarkerSymbol`模块。
- en: Find the URL for a PNG representing a red flag and use it to create a `PictureMarkerSymbol`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找代表红旗的PNG的URL，并使用它创建一个`PictureMarkerSymbol`。
- en: Import the `esri/renderers/SimpleRenderer` module and create a `SimpleRenderer`
    assigning the symbol for the renderer with the `PictureMarkerSymbol` we just created.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`esri/renderers/SimpleRenderer`模块，并创建一个`SimpleRenderer`，为渲染器分配我们刚刚创建的`PictureMarkerSymbol`的符号。
- en: Set the renderer for the feature layer with the simple renderer we just created.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为要素层设置我们刚刚创建的简单渲染器的渲染器。
- en: 'The following lines of code explain this process clearly:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行清楚地解释了这个过程：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we can try and render the forecast error cones layer. Forecast error cones
    are polygon feature layers that represent the uncertainty in the forecast predictions.
    Two polygon features are present for each hurricane type. One of the polygon represents
    a 72-hour forecast error polygon and the other represents a 120-hour forecast
    error polygon. This information is available in the `FCSTPRD` field in the feature
    layer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试渲染预测误差锥层。预测误差锥是代表预测预测中的不确定性的多边形要素层。每种飓风类型都有两个多边形要素。一个多边形代表72小时的预测误差多边形，另一个代表120小时的预测误差多边形。这些信息在要素层的`FCSTPRD`字段中可用。
- en: 'Let''s create a unique value renderer and symbolize each of these types of
    polygon differently based on the value of the `FCSTPRD` field name. To create
    a unique value renderer, we need to take the following approach:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个唯一值渲染器，并根据`FCSTPRD`字段名称的值以不同的方式对每种类型的多边形进行符号化。要创建唯一值渲染器，我们需要采取以下方法：
- en: Import the `esri/renderers/UniqueValueRenderer`, `esri/symbols/SimpleLineSymbol`
    and `esri/symbols/SimpleFillSymbol` modules.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`esri/renderers/UniqueValueRenderer`，`esri/symbols/SimpleLineSymbol`和`esri/symbols/SimpleFillSymbol`模块。
- en: Create a default symbol for the renderer. Since we know that with all our `Forecast
    Error` polygons the `FCSTPRD` field value will be either `72` or `120`, we will
    create a `SimpleFillSymbol` with empty symbology and also set its outline as null
    line symbol.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为渲染器创建一个默认符号。由于我们知道对于所有我们的`预测误差`多边形，`FCSTPRD`字段值将是`72`或`120`，我们将创建一个具有空符号的`SimpleFillSymbol`，并将其轮廓设置为null线符号。
- en: Create a `UniqueValueRenderer` object from the `esri/renderers/UniqueValueRenderer`
    module. Assign it the default symbology we just created as well as the `FCSTPRD`
    as the fieldname upon which the rendering is based.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`esri/renderers/UniqueValueRenderer`模块创建一个`UniqueValueRenderer`对象。将其分配为我们刚刚创建的默认符号以及`FCSTPRD`作为渲染基础的字段名。
- en: Add values to the renderer using the `addValue()` method. The `addValue()` method
    accepts the unique value (`72` /`120`) and the corresponding symbol for each unique
    value.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`addValue()`方法向渲染器添加值。`addValue()`方法接受每个唯一值（`72` / `120`）及其对应的符号。
- en: Set the renderer to the `Forecast Error Cone Feature layer`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将渲染器设置为`预测误差锥体要素图层`。
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have tried symbolizing a feature layer with `PictureMarkerSymbol` and render
    it using `SimpleRenderer`. For another feature layer, we used a unique value renderer
    to render features having different values for a particular field differently.
    Now let's try a special kind of symbology known as `CartographicLineSymbol`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经尝试使用`PictureMarkerSymbol`标志化要素图层，并使用`SimpleRenderer`进行渲染。对于另一个要素图层，我们使用了唯一值渲染器，以不同的方式渲染具有特定字段不同值的要素。现在让我们尝试一种称为`CartographicLineSymbol`的特殊符号。
- en: The `CartographicLineSymbol` provides additional properties such as cap and
    join, which defines how the end cap of the lines and the edge joins are rendered.
    To know more about these two properties, visit the API page at [https://developers.arcgis.com/javascript/jsapi/cartographiclinesymbol-amd.html](https://developers.arcgis.com/javascript/jsapi/cartographiclinesymbol-amd.html).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`CartographicLineSymbol`提供了额外的属性，如端点和连接，定义了线的端点和边缘连接的呈现方式。要了解有关这两个属性的更多信息，请访问API页面[https://developers.arcgis.com/javascript/jsapi/cartographiclinesymbol-amd.html](https://developers.arcgis.com/javascript/jsapi/cartographiclinesymbol-amd.html)。'
- en: 'We would like to use the `CartographicLineSymbol` to symbolize the forecast
    track feature layer. The following shows us how to use the symbol and to render
    the particular feature layer:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要使用`CartographicLineSymbol`来标志预测轨迹要素图层。以下显示了如何使用该符号并渲染特定要素图层：
- en: Import the `esri/symbols/CartographicLineSymbol` module.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`esri/symbols/CartographicLineSymbol`模块。
- en: Use `STYLE_DASHDOT` for the style parameter, yellow for the color parameter,
    `5` as the width in pixels, `CAP_ROUND` as the cap type, and `JOIN_MITER` as the
    join type.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于样式参数，使用`STYLE_DASHDOT`，颜色参数为黄色，像素宽度为`5`，端点类型为`CAP_ROUND`，连接类型为`JOIN_MITER`。
- en: Use the symbol for a `SimpleRenderer`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`SimpleRenderer`的符号。
- en: Set the renderer to the forecast track feature layer.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将渲染器设置为预测轨迹要素图层。
- en: 'The following snippet codifies the previous approach:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段对先前的方法进行了编码：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our map looks like the following when the previous renderers are applied to
    the past positions layer, **Forecast Track**, and the **Forecast Error Cone**
    layers:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当先前的渲染器应用于过去位置图层、**预测轨迹**和**预测误差锥体**图层时，我们的地图如下所示：
- en: '![Symbolizing active hurricane layers](graphics/B04959_06_08.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![标志化活动飓风图层](graphics/B04959_06_08.jpg)'
- en: Adding a global wind data gauge
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加全球风数据仪表
- en: Global wind data is also a map service provided by the ArcGIS livefeeds, providing
    global-level wind data at various locations. Our objective is to incorporate a
    gauge widget that changes its gauge reading based on the wind location being hovered
    upon. The wind data has been appropriately symbolized by default.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 全球风数据也是ArcGIS实时数据提供的地图服务，提供各个位置的全球级风数据。我们的目标是合并一个仪表部件，根据悬停的风位置改变其仪表读数。风数据已经被适当地默认标志化。
- en: The following screenshot shows a gauge widget based on our global wind data.
    The arrows in the map are wind feature locations, the direction of the arrow represents
    the direction of the wind, and the color and size of the arrow represents the
    speed of the wind. The gauge reading in the two instances represents the feature
    being hovered upon (which is highlighted by a thick yellow circle).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了基于我们的全球风数据的仪表部件。地图中的箭头是风特征位置，箭头的方向表示风的方向，箭头的颜色和大小表示风的速度。两个示例中的仪表读数表示悬停在其上的特征（由一个粗黄色圆圈突出显示）。
- en: '![Adding a global wind data gauge](graphics/B04959_06_09.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![添加全球风数据仪表](graphics/B04959_06_09.jpg)'
- en: 'The URL for the wind data has been provided in one of our earlier snippets
    and has been added to the `layerDict` array:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 风数据的URL已在我们先前的代码片段中提供，并已添加到`layerDict`数组中：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since this URL has been added to the `layerDict` array already, we can go ahead
    and create a feature layer representing the wind data from its title `"Wind Data"`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此URL已添加到`layerDict`数组中，我们可以继续创建一个表示来自其标题“Wind Data”的风数据的要素图层：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's now add a gauge widget that can harness the data from this layer. The
    gauge is provided by an Esri `dijit` (dojo widget) named `esri/dijit/Gauge`. The
    gauge constructor is very simple. It accepts a `GaugeParameter` object and the
    container dom ID.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一个仪表部件，可以利用来自该图层的数据。该仪表由Esri的`dijit`（dojo部件）`esri/dijit/Gauge`提供。仪表构造函数非常简单。它接受一个`GaugeParameter`对象和容器dom
    ID。
- en: 'The `GaugeParameter` object needs to be constructed by us. Keep the following
    in mind before creating the `GaugeParameter` object:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`GaugeParameter`对象需要我们构建。在创建`GaugeParameter`对象之前，请记住以下几点：'
- en: The `layer` property accepts the reference to the feature layer it represents.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`layer`属性接受表示要素图层的引用。'
- en: The `dataField` property indicates which field shall be used to get the gauge
    reading.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dataField`属性指示应使用哪个字段来获取仪表读数。'
- en: The `dataFormat` property accepts two values—`value` or `percent`. When percent
    is chosen, the maximum value of the gauge is automatically calculated and the
    gauge reading is shown as a percentage of the maximum value. When the `dataFormat`
    value is chosen as `value`, the actual value of the feature being hovered upon
    is shown as the gauge reading.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dataFormat`属性接受两个值——`value`或`percent`。当选择百分比时，仪表的最大值会自动计算，并且仪表读数显示为最大值的百分比。当`dataFormat`值选择为`value`时，悬停的要素的实际值将显示为仪表读数。'
- en: The `dataLabelField` property can be used to represent the station name or any
    other ancillary property about the feature being hovered upon, which can identify
    the feature. This shall be clubbed with the `title` property, which represents
    what the `dataLabelField` property represents.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dataLabelField`属性可用于表示站点名称或关于所悬停特征的任何其他辅助属性，这些属性可以标识特征。这应该与`title`属性结合使用，它表示`dataLabelField`属性表示的内容。'
- en: The `color` property lets us set the color of the gauge reading.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`color`属性让我们设置仪表读数的颜色。'
- en: If `value` is chosen as the `dataFormat` value, we need to provide a value for
    the `maxDataValue` property as well.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`value`被选择为`dataFormat`的值，我们还需要为`maxDataValue`属性提供一个值。
- en: 'The following code is the one we used to create the wind gauge widget you saw
    in the previous screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是我们用来创建你在之前截图中看到的风速计小部件的代码：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tracking the latest active hurricanes
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪最新的活跃飓风
- en: Let's create a widget to track the latest active hurricanes. We already have
    all the layers representing the active hurricanes positions. Our objective is
    to get all the latest positions of active hurricanes and display it in a widget.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个小部件来跟踪最新的活跃飓风。我们已经有了代表活跃飓风位置的所有图层。我们的目标是获取所有活跃飓风的最新位置，并在小部件中显示出来。
- en: 'The following screenshot shows how our widget would look after development:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的小部件在开发后的样子：
- en: '![Tracking the latest active hurricanes](graphics/B04959_06_10.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![跟踪最新的活跃飓风](graphics/B04959_06_10.jpg)'
- en: The dropdown in the widget lists the names of all the prevalent active hurricanes.
    The following grid displays the details of the selected hurricane.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件中的下拉框列出了所有流行的活跃飓风的名称。以下网格显示了所选飓风的详情。
- en: 'The following thought process has been incorporated into the development of
    this widget:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下思路已经纳入到了这个小部件的开发中：
- en: Use a cache-bust query to get the unique list of storm names and fill the dropdown
    with this list.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用缓存破坏查询来获取风暴名称的唯一列表，并用这个列表填充下拉框。
- en: On selection change of the dropdown, get the latest feature for the selected
    storm.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉框的选择更改时，获取所选风暴的最新要素。
- en: Populate the details of the selected storm in the widget.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在小部件中填充所选风暴的详情。
- en: Get the updated details for every 30 seconds.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每30秒获取更新的详情。
- en: Getting a unique list of storms
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取风暴的唯一列表
- en: 'To get the unique values in our data, the Query object has a property known
    as `returnDistinctValues`, the value for which should be a Boolean `true`. The
    following snippet explains the usage of the property:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取我们数据中的唯一值，查询对象有一个名为`returnDistinctValues`的属性，其值应为布尔值`true`。以下代码片段解释了该属性的用法：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also the outfield property of the Query object should only list those fields
    for which the unique values are required. In our case, the fieldname is `STORMNAME`.
    Refer to the following snippet to understand this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，查询对象的outfield属性应该只列出那些需要唯一值的字段。在我们的情况下，字段名是`STORMNAME`。请参考以下代码片段以了解这一点：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To get updated results every time, we need to avoid cached query results. So
    instead of using a truthy expression such as `1=1`, we may need to use a pattern
    that reads something like:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了每次都能获得更新的结果，我们需要避免缓存的查询结果。所以我们可能需要使用一个类似于`1=1`的模式，而不是使用一个真值表达式。
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will help us get non-cached query results. Non-cached query results ensure
    that we are viewing the latest data within a set time period. Let''s write a function
    that can create such a query string:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助我们获得非缓存的查询结果。非缓存的查询结果确保我们在一定时间内查看到的是最新数据。让我们编写一个可以创建这样的查询字符串的函数：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now use this function every time we need to assign a value for the `where`
    property of the Query object:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在每次需要为查询对象的`where`属性分配一个值时使用这个函数：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When using the `returnDistinctValues` property in the Query object, we need
    to set the `returnGeometry` property to a Boolean `false`. The following line
    of code explains how to form the Query task and Query object, and how to use the
    result from the query to populate the drop-down box. At the end of the code we
    would call a .`_update_hutticane_details()` method. This method fetches the latest
    details about the selected `StormName`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询对象中使用`returnDistinctValues`属性时，我们需要将`returnGeometry`属性设置为布尔值`false`。以下代码解释了如何形成查询任务和查询对象，以及如何使用查询结果来填充下拉框。在代码的结尾，我们将调用一个`_update_hutticane_details()`方法。这个方法获取所选`StormName`的最新详情：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the previous lines of code, observe the last three lines. We are using a
    `timer` function that calls the `_update_hutticane_details()` every 30 seconds.
    This is the function that fetches the latest details about the hurricane.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，观察最后三行。我们使用一个`timer`函数，每30秒调用一次`_update_hutticane_details()`。这是一个获取飓风最新详情的函数。
- en: Fetching the latest data and displaying on the grid
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取最新数据并在网格上显示
- en: 'When we tried to construct the Query object in the previous snippet, we used
    the `returnDistinctValues` property to get the distinct values based on field
    names. Now we will use the `orderByFields` property of the Query object to order
    the features based on a field name. To get the latest features first, the fieldname
    should represent a time field. In our case the field name is `DTG`. To ensure
    that we get the latest time as the first feature of our query result, we can use
    the following line of code while constructing the query object. The `orderByField`
    accepts a string array, each item mentioning the field name to be ordered upon
    and whether the ordering should be ascending (`ASC`) or descending (`DESC`). The
    default order is ascending:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，当我们尝试构建查询对象时，我们使用了`returnDistinctValues`属性来根据字段名获取不同的值。现在我们将使用查询对象的`orderByFields`属性来根据字段名对要素进行排序。为了首先获取最新的要素，字段名应该代表一个时间字段。在我们的情况下，字段名是`DTG`。为了确保我们获取查询结果的最新时间作为第一个要素，我们可以在构建查询对象时使用以下代码行。`orderByField`接受一个字符串数组，每个项目都提到了要根据哪个字段名进行排序，以及排序是升序(`ASC`)还是降序(`DESC`)。默认顺序是升序：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following lines of code demonstrate how the required Query object is constructed
    and how the result is used to populate information about the latest storm in the
    widget:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行演示了如何构建所需的查询对象以及如何使用结果来填充小部件中关于最新风暴的信息：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice the `where` clause in the previous chunk of code. We are selecting only
    the details of `StormName` that we have selected from the drop-down box, as well
    as using the cache-busting function to get the latest data:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意上一段代码中的`where`子句。我们仅选择了从下拉框中选择的`StormName`的详细信息，并使用缓存破坏函数获取最新数据：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Refreshing feature layer
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刷新要素图层
- en: 'The feature layer displaying time data may need to refresh at various intervals.
    We can use feature layers to refresh an interval property to set this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 显示时间数据的要素图层可能需要在各种间隔时间刷新。我们可以使用要素图层来刷新间隔属性以设置此功能：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is in addition to the cache-busting techniques we dealt with earlier.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前处理的缓存破坏技术的补充。
- en: Creating a weather widget
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建天气小部件
- en: 'We will try to create a weather widget in our application, which displays the
    current weather conditions at the user''s location. The user''s location actually
    means the browser''s location as recognized by the Geolocation API in modern browsers.
    When the browser is unable to find the user''s location, we will try to find the
    weather data for the center of the map. Creating a weather widget presents us
    with the following opportunities as well as challenges:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试在我们的应用程序中创建一个天气小部件，该小部件显示用户所在位置的当前天气状况。用户的位置实际上是指现代浏览器中地理位置API识别的浏览器位置。当浏览器无法找到用户的位置时，我们将尝试找到地图中心的天气数据。创建天气小部件为我们提供了以下机会和挑战：
- en: Weather data is continuously updated in real time and is a spatio-temporal phenomenon,
    meaning something that changes with place and time
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天气数据在实时不断更新，并且是一个时空现象，意味着随着地点和时间的变化而变化
- en: It presents us with an opportunity to use an external weather API, which is
    a non-ArcGIS based data
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为我们提供了使用外部天气API的机会，这是一个非ArcGIS基础的数据
- en: It presents us with an opportunity to explore the client-side geometric operations
    such as buffer and converting between Geographic and Web Mercator coordinates
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为我们提供了一个探索客户端几何操作的机会，例如缓冲区和地理和Web墨卡托坐标之间的转换
- en: The open weather API
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开放天气API
- en: We need to find a data source to fetch the latest weather data. Fortunately,
    the open weather API is a simple and free option to fetch weather data in different
    formats. Paid plans provide greater usage levels. For our purposes the free version
    works splendidly.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要找到一个数据源来获取最新的天气数据。幸运的是，开放天气API是获取不同格式的天气数据的简单免费选项。付费计划提供更大的使用级别。对于我们的目的，免费版本效果很好。
- en: 'The API provides REST endpoints, which provides access to the following kinds
    of data:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该API提供REST端点，可提供以下类型的数据：
- en: Current weather data
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前天气数据
- en: 5-day/3-hour forecast
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5天/3小时预报
- en: 5-day/3-hour forecast
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5天/3小时预报
- en: Historical data
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史数据
- en: UV Index
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 紫外线指数
- en: Weather map layers
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天气地图图层
- en: Weather stations
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 气象站
- en: We will be using the current weather data endpoint to fetch the weather details
    for a given location.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用当前天气数据端点来获取给定位置的天气详情。
- en: 'To access the API you need to sign up for an API key. The following URL explains
    how to get an `appid` and use it in the REST queries: [http://openweathermap.org/appid#get](http://openweathermap.org/appid#get).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问API，您需要注册API密钥。以下URL解释了如何获取`appid`并在REST查询中使用它：[http://openweathermap.org/appid#get](http://openweathermap.org/appid#get)。
- en: 'The base URL we would be using would be this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的基本URL是这个：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will be providing the latitude and longitude values to issue the request
    to the open weather API. We have tried to make the HTTP `GET` request using the
    `esriRequest` object for which the `esri/request` module needs to be imported.
    The following snippet explains how the `esriRequest` object was constructed:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提供纬度和经度值以发出请求到开放天气API。我们尝试使用`esriRequest`对象进行HTTP `GET`请求，需要导入`esri/request`模块。以下片段解释了如何构建`esriRequest`对象：
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you observe the URL being constructed, it required three parameters, namely
    `lat`, `lon,` and `appid`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果观察正在构建的URL，它需要三个参数，即`lat`、`lon`和`appid`。
- en: 'The `appid` parameter accepts the application key that we generated earlier.
    There are two methods we are going to follow to get the latitude and longitude
    values:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`appid`参数接受我们之前生成的应用程序密钥。我们将遵循两种方法来获取纬度和经度值：'
- en: If the Geolocation API is supported by the browser, get the latitude and longitude
    values from the browser's location.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果浏览器支持地理位置API，则从浏览器位置获取纬度和经度值。
- en: If the Geolocation API is not supported by the browser, the map extent's centroid
    shall be projected to geographic coordinates and used to fetch the weather data
    for that location.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果浏览器不支持地理位置API，则将地图范围的中心点投影到地理坐标，并用于获取该位置的天气数据。
- en: Using the Geolocation API
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用地理位置API
- en: 'Using the Geolocation API is as simple as a call to the navigator object''s
    `geolocation.getCurrentPosition()` method. The method returns a callback object,
    which contains the location of the browser. The following lines of code show how
    to call the `geolocation` API to get the current position of the browser:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用地理位置API就像调用导航器对象的`geolocation.getCurrentPosition()`方法一样简单。该方法返回一个回调对象，其中包含浏览器的位置。以下代码行显示了如何调用`geolocation`API以获取浏览器的当前位置：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the previous code, the call object is a function by the name of `showPosition()`.
    The `showPosition()` function gets the position as the callback object. The coordinates
    of the position can be accessed by using the property `coords`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，调用对象是一个名为`showPosition()`的函数。`showPosition()`函数将位置作为回调对象。可以使用`coords`属性访问位置的坐标。
- en: Using geometry engine on input data
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在输入数据上使用几何引擎
- en: 'The `coords` object gives three properties, namely:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`coords`对象具有三个属性，即：'
- en: '`latitude`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`纬度`'
- en: '`longitude`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`经度`'
- en: '`accuracy`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`准确性`'
- en: 'We clearly understand what the latitude and longitude are, but what is accuracy?
    Accuracy is the numeric quantity representing a possible error in meters with
    the coordinates being provided by the API. Or, in other words, the location is
    accurate within a circle of error. When we mention that it''s a circle of error,
    wouldn''t it be nice to visualize it on our map, so that we know the approximate
    location of our browser and maybe corroborate the results. We tried it; it seems
    pretty accurate. To create a circle of error, we took the following approach:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们清楚地了解了纬度和经度，但精度是什么？精度是表示由API提供的坐标可能存在的误差的数值数量，单位为米。换句话说，位置在一个误差圆内是准确的。当我们提到它是一个误差圆时，能否在地图上将其可视化，这样我们就可以知道浏览器的大致位置，也许可以证实结果。我们尝试了一下；看起来相当准确。为了创建一个误差圆，我们采取了以下方法：
- en: Using the latitude and longitude values to create a point geometry.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用纬度和经度值创建一个点几何体。
- en: Use the `webMercatorUtils` provided by the API to convert the point from geographic
    coordinates to the Web Mercator coordinates.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用API提供的`webMercatorUtils`将点从地理坐标转换为Web墨卡托坐标。
- en: Using the `geometryEngine` module provided by the API, create a buffer around
    the projected point with the buffer radius equal to the accuracy of the location.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用API提供的`geometryEngine`模块，围绕投影点创建一个缓冲区，缓冲区半径等于位置的精度。
- en: Symbolize the buffer geometry using a `SimpleFillSymbol`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`SimpleFillSymbol`对缓冲区几何进行符号化。
- en: 'The following lines of code explain the previous process clearly:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行清楚地解释了前面的过程：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We would be using the latitude and longitude obtained from the `showPosition()`
    method to fetch the weather data for that location.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用从`showPosition()`方法获取的纬度和经度来获取该位置的天气数据。
- en: Displaying the weather data in the widget
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在小部件中显示天气数据
- en: We earlier visited how we used the `esriRequest` module to issue an HTTP GET
    request to the weather API and request for the current weather data at the latitude
    and longitude provided by the browser. The request is a promise and we will use
    a `then` method upon the promise to resolve it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论了如何使用`esriRequest`模块向天气API发出HTTP GET请求，并请求获取浏览器提供的纬度和经度的当前天气数据。该请求是一个promise，我们将使用`then`方法来解析它。
- en: 'The following chunk of code demonstrates how the `esriRequest` promise is resolved
    and how it is used to display the current weather data:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块演示了`esriRequest` promise是如何被解析以及如何用来显示当前天气数据的：
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the previous code, the temperature is always returned in kelvin. So to convert
    it to centigrade, we need to subtract it by `270`. The time conversions are being
    applied using the function named `_processDate()`. The time issued by the open
    weather API is Unix base time in UTC.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，温度总是以开尔文返回。因此，为了将其转换为摄氏度，我们需要减去`270`。时间转换是使用名为`_processDate()`的函数应用的。由open
    weather API发布的时间是基于UTC的Unix时间。
- en: 'The `_processDate()` function we wrote looks like this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的`_processDate()`函数如下所示：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `dateLocale` object used in the previous function is a dojo module (`dojo/date/locale`),
    which provides localized time versions of the `date` object being dealt with.
    The widget looks like the following screenshot shown. The red circle is the circle
    of error we were talking about. We were also able to create a small weather icon,
    which summarizes the weather condition.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的函数中使用的`dateLocale`对象是一个dojo模块（`dojo/date/locale`），它提供了处理的`date`对象的本地化时间版本。小部件如下所示。红色圆圈就是我们谈论的误差圆。我们还能够创建一个小的天气图标，总结天气状况。
- en: '![Displaying the weather data in the widget](graphics/B04959_06_11.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![在小部件中显示天气数据](graphics/B04959_06_11.jpg)'
- en: 'If you''re curious what the HTML template for the previous widget would look
    like, we have one thing to say—have we disappointed you? Here it is:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你好奇之前小部件的HTML模板会是什么样子，我们有一件事要说——我们让你失望了吗？在这里：
- en: '[PRE25]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The innocuous HTML template was all we needed to develop the weather widget,
    which we used to display the current weather data at our location.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 无害的HTML模板是我们开发天气小部件所需的全部内容，我们用它来显示我们所在位置的当前天气数据。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered in detail what constitutes real-time data and
    how to visualize and get the latest features. We will be dealing with how to deal
    with time-aware layers and how to visualize spatio-temporal layers in later chapters.
    Thus, we will be able to build effective web applications that are refreshed continuously.
    In the following chapters, we will be dealing with advanced visualization techniques
    using the statistical capabilities of the feature layer, and learning about charting
    libraries.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细介绍了实时数据的构成以及如何可视化和获取最新特性。我们将讨论如何处理时态图层以及如何在后续章节中可视化时空图层。因此，我们将能够构建持续刷新的有效网络应用程序。在接下来的章节中，我们将讨论使用要素图层的统计功能的高级可视化技术，并学习有关图表库的知识。
