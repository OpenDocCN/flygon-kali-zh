["```\n    docker run -itd -e \"POSTGRES_USER=panoramic\" -e \"POSTGRES_PASSWORD=trekking\" postgres:12\n    ```", "```\n    $ docker ps\n    ```", "```\n    CONTAINER ID  IMAGE         COMMAND                 CREATED\n    \u00a0\u00a0STATUS              PORTS               NAMES\n    29f115af8cdd  postgres:12   \"docker-entrypoint.s\u2026\"  4 seconds ago\n    \u00a0\u00a0Up 2 seconds        5432/tcp            blissful_kapitsa\n    ```", "```\n    $ docker exec -it <containerID> psql --username panoramic --password\n    ```", "```\n    psql (12.2 (Debian 12.2-2.pgdg100+1))\n    Type \"help\" for help.\n    panoramic=# \\l\n    ```", "```\n    mkdir activity-02-01\n    ```", "```\n    cd activity-02-01\n    ```", "```\n    touch welcome.php \n    ```", "```\n    vim welcome.php \n    ```", "```\n    <?php\n    $hourOfDay = date('H');\n    if($hourOfDay < 12) {\n    \u00a0\u00a0\u00a0\u00a0$message = \u00abGood Morning\u00bb;\n    } elseif($hourOfDay > 11 && $hourOfDay < 18) {\n    \u00a0\u00a0\u00a0\u00a0$message = \u00abGood Afternoon\u00bb;\n    } elseif($hourOfDay > 17){\n    \u00a0\u00a0\u00a0\u00a0$message = \u00abGood Evening\u00bb;\n    }\n    echo $message;\n    ?>\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # Start with Ubuntu base image\n    FROM ubuntu:18.04\n    # Set labels\n    LABEL maintainer=sathsara\n    LABEL version=1.0 \n    # Set environment variables\n    ENV DEBIAN_FRONTEND=noninteractive\n    # Install Apache, PHP, and other packages\n    RUN apt-get update && \\\n    \u00a0\u00a0\u00a0\u00a0apt-get -y install apache2 \\\n    \u00a0\u00a0\u00a0\u00a0php \\ \n    \u00a0\u00a0\u00a0\u00a0curl\n    # Copy all php files to the Docker image\n    COPY *.php /var/www/html\n    # Set working directory\n    WORKDIR /var/www/html\n    # Create health check\n    HEALTHCHECK --interval=5s --timeout=3s --retries=3 CMD curl -f   http://localhost || exit 1\n    # Expose Apache\n    EXPOSE 80\n    # Start Apache\n    ENTRYPOINT [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\n    ```", "```\n    $ docker image build -t activity-02-01 .\n    ```", "```\n    $ docker container run -p 80:80 --name activity-02-01-container -d activity-02-01\n    ```", "```\n    $ docker container stop activity-02-01-container\n    ```", "```\n    $ docker container rm activity-02-01-container\n    ```", "```\n    1\u00a0set -ex\n    2\n    3\u00a0REGISTRY=dev.docker.local:5000\n    4\u00a0SERVICENAME=postgresql\n    ```", "```\n    6\u00a0GIT_VERSION=`git log -1 --format=%h`\n    7\u00a0echo \"version: $GIT_VERSION \"\n    ```", "```\n    9\u00a0docker build -t $REGISTRY/$SERVICENAME:$GIT_VERSION .\n    10\n    11\u00a0docker push $REGISTRY/$SERVICENAME:$GIT_VERSION\n    ```", "```\n    1\u00a0set -ex\n    2\n    3\u00a0REGISTRY=dev.docker.local:5000\n    4\u00a0SERVICENAME= postgresql\n    5\n    6\u00a0GIT_VERSION=`git log -1 --format=%h`\n    7\u00a0echo \"version: $GIT_VERSION \"\n    8\n    9\u00a0docker build -t $REGISTRY/$SERVICENAME:$GIT_VERSION .\n    10\n    11\u00a0docker push $REGISTRY/$SERVICENAME:$GIT_VERSION\n    ```", "```\n    ./build.sh\n    ```", "```\n    ./BuildScript.sh \n    ++ REGISTRY=dev.docker.local:5000\n    ++ SERVICENAME=basic-app\n    +++ git log -1 --format=%h\n    ++ GIT_VERSION=49d3a10\n    ++ echo 'version: 49d3a10 '\n    version: 49d3a10 \n    ++ docker build -t dev.docker.local:5000/basic-app:49d3a10 .\n    Sending build context to Docker daemon  3.072kB\n    Step 1/1 : FROM postgres\n    \u00a0---> 873ed24f782e\n    Successfully built 873ed24f782e\n    Successfully tagged dev.docker.local:5000/basic-app:49d3a10\n    ++ docker push dev.docker.local:5000/basic-app:49d3a10\n    The push refers to repository [dev.docker.local:5000/basic-app]\n    ```", "```\n    mkdir /home/vincesesto/test_registry/\n    ```", "```\n    docker run -d -p 5000:5000 --restart=always --name registry -v /home/vincesesto/test_registry/registry:/var/lib/registry:rw registry\n    ```", "```\n    docker push dev.docker.local:5000/basic-app:ver1\n    ```", "```\n    ls  ~/test_registry/registry/docker/registry/v2/repositories/\n    ```", "```\n    basic-app\n    ```", "```\n    mkdir activity-04-01\n    ```", "```\n    cd activity-04-01\n    ```", "```\n    $ touch main.go\n    ```", "```\n    $ vim main.go\n    ```", "```\n    package main\n    import (\n    \u00a0\u00a0\u00a0\u00a0\"net/http\"\n    \u00a0\u00a0\u00a0\u00a0\"fmt\"\n    \u00a0\u00a0\u00a0\u00a0\"log\"\n    \u00a0\u00a0\u00a0\u00a0\"os\"\n    )\n    func main() {\n    \u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/\", defaultHandler)\n    \u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/contact\", contactHandler)\n    \u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/login\", loginHandler)\n    \u00a0\u00a0\u00a0\u00a0port := os.Getenv(\"PORT\")\n    \u00a0\u00a0\u00a0\u00a0if port == \"\" {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port = \"8080\"\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0log.Println(\"Service started on port \" + port)\n    \u00a0\u00a0\u00a0\u00a0err := http.ListenAndServe(\":\"+port, nil)\n    \u00a0\u00a0\u00a0\u00a0if err != nil {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Fatal(\"ListenAndServe: \", err)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    func defaultHandler(w http.ResponseWriter, r *http.Request) {\n    \u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"<h1>Home Page</h1>\")\n    }\n    func contactHandler(w http.ResponseWriter, r *http.Request) {\n    \u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"<h1>Contact Us</h1>\")\n    }\n    func loginHandler(w http.ResponseWriter, r *http.Request) {\n    \u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"<h1>Login Page</h1>\")\n    }\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    FROM golang:1.14.2-alpine AS builder\n    WORKDIR /myapp\n    COPY main.go .\n    RUN go build -o main .\n    FROM alpine:latest AS runtime\n    WORKDIR /myapp\n    COPY --from=builder /myapp/main .\n    ENTRYPOINT [\"./main\"]\n    EXPOSE 8080\n    ```", "```\n    docker build -t activity-04-01:v1 .\n    ```", "```\n    docker images\n    ```", "```\n    $ docker container run -p 8080:8080 --name activity-04-01-container activity-04-01:v1\n    ```", "```\n    2020/08/30 05:14:10 Service started on port 8080\n    ```", "```\n    http://127.0.0.1:8080/\n    ```", "```\n    http://127.0.0.1:8080/contact\n    ```", "```\n    http://127.0.0.1:8080/login \n    ```", "```\n    mkdir wordpress\n    cd wordpress\n    ```", "```\n    version: \"3\"\n    services:\n    \u00a0\u00a0database:\n    \u00a0\u00a0\u00a0\u00a0image: mysql:5.7\n    \u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- data:/var/lib/mysql\n    \u00a0\u00a0\u00a0\u00a0restart: always\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MYSQL_ROOT_PASSWORD: root\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MYSQL_DATABASE: db\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MYSQL_USER: user\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MYSQL_PASSWORD: password\n    \u00a0\u00a0wordpress:\n    \u00a0\u00a0\u00a0\u00a0depends_on:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- database\n    \u00a0\u00a0\u00a0\u00a0image: wordpress:latest\n    \u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"8080:80\"\n    \u00a0\u00a0\u00a0\u00a0restart: always\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WORDPRESS_DB_HOST: database:3306\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WORDPRESS_DB_USER: user\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WORDPRESS_DB_PASSWORD: password\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WORDPRESS_DB_NAME: db\n    volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0data: {} \n    ```", "```\n    mkdir pta-compose\n    cd pta-compose\n    ```", "```\n    version: \"3\"\n    services:\n    \u00a0\u00a0db:\n    \u00a0\u00a0\u00a0\u00a0image: postgres\n    \u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- db_data:/var/lib/postgresql/data/\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- POSTGRES_PASSWORD=docker\n    \u00a0\u00a0web:\n    \u00a0\u00a0\u00a0\u00a0image: packtworkshops/the-docker-workshop:chapter5-pta-web\n    \u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- static_data:/service/static\n    \u00a0\u00a0\u00a0\u00a0depends_on:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- db\n    \u00a0\u00a0nginx:\n    \u00a0\u00a0\u00a0\u00a0image: packtworkshops/the-docker-workshop:chapter5-pta-nginx\n    \u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- static_data:/service/static\n    \u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 8000:80\n    \u00a0\u00a0\u00a0\u00a0depends_on:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- web\n    volumes:\n    \u00a0\u00a0db_data:\n    \u00a0\u00a0static_data:\n    ```", "```\n    $ docker network create webservernet --subnet=192.168.1.0/24 --gateway=192.168.1.1\n    ```", "```\n    $ docker run -itd -p 8080:80 --name webserver1 --network webservernet nginx:latest\n    ```", "```\n    $ docker run -itd --name monitor --network host alpine:latest\n    ```", "```\n    $ docker inspect webserver1\n    ```", "```\n    $ docker exec -it monitor /bin/sh\n    ```", "```\n    / # apk add curl\n    ```", "```\n    fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main\n    /x86_64/APKINDEX.tar.gz\n    fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community\n    /x86_64/APKINDEX.tar.gz\n    (1/4) Installing ca-certificates (20191127-r1)\n    (2/4) Installing nghttp2-libs (1.40.0-r0)\n    (3/4) Installing libcurl (7.67.0-r0)\n    (4/4) Installing curl (7.67.0-r0)\n    Executing busybox-1.31.1-r9.trigger\n    Executing ca-certificates-20191127-r1.trigger\n    OK: 7 MiB in 18 packages\n    ```", "```\n    / # curl -v http://localhost:8080\n    ```", "```\n    / # curl -v 192.168.1.2:80\n    ```", "```\n    $ docker network create panoramic-net --subnet=10.2.0.0/16 --gateway=10.2.0.1 --driver overlay\n    ```", "```\n    $ docker service create -t --name trekking-app --replicas=1 --network panoramic-net alpine:latest\n    ```", "```\n    $ docker service create -t --name database-app --replicas=1 --network panoramic-net -e \"POSTGRES_USER=panoramic\" -e \"POSTGRES_PASSWORD=trekking\" postgres:12\n    ```", "```\n    $ docker exec -it trekking-app.1.qhpwxol00geedkfa9p6qswmyv /bin/sh\n    ```", "```\n    / # ping database-app\n    ```", "```\n    PING database-app (10.2.0.5): 56 data bytes\n    64 bytes from 10.2.0.5: seq=0 ttl=64 time=0.261 ms\n    64 bytes from 10.2.0.5: seq=1 ttl=64 time=0.352 ms\n    64 bytes from 10.2.0.5: seq=2 ttl=64 time=0.198 ms\n    ```", "```\n    $ docker container rm -fv $(docker container ls -aq)\n    $docker image rm $(docker image ls -q)\n    ```", "```\n    $docker volume ls\n    $docker volume rm <volume names separated by spaces>\n    ```", "```\n    $docker network ls\n    $docker network rm <network names separated by spaces>\n    ```", "```\n    docker events --format '{{json .}}'.\n    ```", "```\n    $docker run -d ubuntu:14.04\n    ```", "```\n    $docker volume create vol1\n    ```", "```\n    $docker network create net1\n    ```", "```\n    $docker container rm -fv <container ID>\n    ```", "```\n    $docker volume rm vol1\n    $docker network rm net1\n    ```", "```\n    {\"status\":\"create\",\"id\":\"43903b966123a7c491b50116b40827daa03\n    da5d350f8fef2a690fc4024547ce2\",\"from\":\"ubuntu:14.04\",\"Type\":\n    \"container\",\"Action\":\"create\",\"Actor\":{\"ID\":\"43903b966123a7c\n    491b50116b40827daa03da5d350f8fef2a690fc4024547ce2\",\"Attributes\":\n    {\"image\":\"ubuntu:14.04\",\"name\":\"upbeat_johnson\"}},\"scope\":\"local\",\n    \"time\":1592516703,\"timeNano\":1592516703507582404}\n    ```", "```\n    {\"Type\":\"network\",\"Action\":\"connect\",\"Actor\":{\"ID\":\"52855e1561\n    8e37b7ecc0bb26bc42847af07cae65ddd3b68a029e40006364a9bd\",\n    \"Attributes\":{\"container\":\"43903b966123a7c491b50116b40827daa03d\n    a5d350f8fef2a690fc4024547ce2\",\"name\":\"bridge\",\"type\":\"bridge\"}},\n    \"scope\":\"local\",\"time\":1592516703,\"timeNano\":1592516703911851347}\n    ```", "```\n    $docker container run --name db1 -v db:/var/lib/postgresql/data -e POSTGRES_PASSWORD=password -d postgres\n    ```", "```\n    $ docker container exec -it db1 psql -U postgres\n    ```", "```\n    CREATE TABLE events (ID serial NOT NULL PRIMARY KEY, info json NOT NULL);\n    ```", "```\n    INSERT INTO events (info) VALUES ('{\"status\":\"create\",\"id\":\"43903b966123a7c491b50116b40827daa03da 5d350f8fef2a690fc4024547ce2\",\"from\":\"ubuntu:14.04\",\"Type\":\"container\",\"Action\":\"create\",\"Actor\":{\"ID\":\"43903b966123a7c49 1b50116b40827daa03da5d350f8fef2a690fc4024547ce2\",\"Attributes\":{\"image\":\"ubuntu:14.04\",\"name\":\"upbeat_johnson\"}},\"scope\":\"local\",\"time\":1592516703,\"timeNano\":1592516703507582404}');\n    ```", "```\n    select * from events;\n    ```", "```\n    SELECT * FROM events WHERE info ->> 'status' = 'pull';\n    ```", "```\nSELECT * FROM events WHERE info ->> 'status' = 'destroy';\n```", "```\nSELECT info ->> 'id' as id FROM events WHERE info ->> 'status'=     'destroy';\n```", "```\n    $cd /var/mylogs\n    ```", "```\n    Bash: cd: /var/mylogs: No such file or directory\n    ```", "```\n    $docker container run -d -v /var/mylogs:/var/log/nginx nginx\n    ```", "```\n    $cd /var/mylogs\n    $ls\n    ```", "```\n    access.log         error.log\n    ```", "```\n    $tail -f *.log\n    ```", "```\n    ==>  access.log  <==\n    ==>  error.log   <==\n    ```", "```\n    docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube\n    ```", "```\n    4346a99b506b1bec8000e429471dabac57e3f565b154ee921284ec685497bfae\n    ```", "```\n    $ ifconfig\n    ```", "```\n    sonar.projectKey=hit_count\n    sonar.projectName=hit_count\n    sonar.projectVersion=1.0\n    sonar.sources=.\n    sonar.language=py\n    sonar.sourceEncoding=UTF-8\n    # Test Results\n    sonar.python.xunit.reportPath=nosetests.xml\n    # Coverage\n    sonar.python.coverage.reportPath=coverage.xml\n    # Linter (https://docs.sonarqube.org/display/PLUG/Pylint+Report)\n    #sonar.python.pylint=/usr/local/bin/pylint\n    #sonar.python.pylint_config=.pylintrc\n    #sonar.python.pylint.reportPath=pylint-report.txt\n    ```", "```\n    sonar.projectKey=trekking\n    sonar.projectName=trekking\n    sonar.projectVersion=1.0\n    sonar.sources=.\n    sonar.language=py\n    sonar.sourceEncoding=UTF-8\n    # Test Results\n    sonar.python.xunit.reportPath=nosetests.xml\n    # Coverage\n    sonar.python.coverage.reportPath=coverage.xml\n    # Linter (https://docs.sonarqube.org/display/PLUG/Pylint+Report)\n    #sonar.python.pylint=/usr/local/bin/pylint\n    #sonar.python.pylint_config=.pylintrc\n    #sonar.python.pylint.reportPath=pylint-report.txt\n    ```", "```\n    mkdir Activity1; cd Activity1\n    ```", "```\n    git clone https://github.com/vincesesto/trekking_app.git\n    ```", "```\n    ls -l\n    ```", "```\n    -rw-r--r--   1 vinces  staff   533 12 Mar 15:02 Dockerfile\n    -rwxr-xr-x   1 vinces  staff  1077 12 Mar 15:02 entrypoint.sh\n    -rwxr-xr-x   1 vinces  staff   642 12 Mar 15:02 manage.py\n    drwxr-xr-x   9 vinces  staff   288 12 Mar 15:02 \n    panoramic_trekking_app\n    drwxr-xr-x  12 vinces  staff   384 12 Mar 15:02 photo_viewer\n    -rw-r--r--   1 vinces  staff   105 12 Mar 15:02 requirements.txt\n    ```", "```\n    SQL_ENGINE=django.db.backends.postgresql\n    SQL_DATABASE=pta_database\n    SQL_USER=pta_user\n    SQL_PASSWORD=pta_password\n    SQL_HOST=db\n    SQL_PORT=5432\n    PGPASSWORD=docker\n    ```", "```\n    version: '3.3'\n    services:\n    \u00a0\u00a0web:\n    \u00a0\u00a0\u00a0\u00a0build: .\n    \u00a0\u00a0\u00a0\u00a0image: activity_web:latest\n    \u00a0\u00a0\u00a0\u00a0command: python manage.py runserver 0.0.0.0:8000\n    \u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- static_volume:/service/static\n    \u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 8000:8000\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- PGPASSWORD=docker\n    \u00a0\u00a0\u00a0\u00a0env_file:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- ./.env.dev\n    \u00a0\u00a0\u00a0\u00a0depends_on:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- db\n    \u00a0\u00a0db:\n    \u00a0\u00a0\u00a0\u00a0image: postgres\n    \u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- postgres_data:/var/lib/postgresql/data/\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- POSTGRES_PASSWORD=docker\n    \u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 5432:5432\n    volumes:\n    \u00a0\u00a0postgres_data:\n    \u00a0\u00a0static_volume:\n    ```", "```\n    docker build -t activity_web:latest .\n    ```", "```\n    docker stack deploy --compose-file docker-compose.yml activity_swarm\n    ```", "```\n    Creating network activity_swarm_default\n    Creating service activity_swarm_web\n    Creating service activity_swarm_db\n    ```", "```\n    docker service ls\n    ```", "```\n    ID       NAME                MODE         REPLICAS\n    \u00a0\u00a0IMAGE\n    k6kh\u2026    activity_swarm_db   replicated   1/1\n    \u00a0\u00a0postgres:latest\n    copa\u2026    activity_swarm_web  replicated   1/1\n    \u00a0\u00a0activity_web:latest  \n    ```", "```\n    docker stack deploy --compose-file docker-compose.yml activity_swarm\n    ```", "```\n    Creating network activity_swarm_default\n    Creating service activity_swarm_web\n    Creating service activity_swarm_db\n    ```", "```\n    1 {% extends \"base.html\" %}\n    2 {% load static %}\n    3 {% block page_content %}\n    4 <h1>Patch Panoramic Trekking App - Photo Viewer</h1>\n    ```", "```\n    docker build -t activity_web:patch_1 .\n    ```", "```\n    docker service update --image activity_web:patch_1 activity_swarm_web\n    ```", "```\n    \u2026\n    activity_swarm_web\n    overall progress: 1 out of 1 tasks \n    1/1: running   [=======================================>] \n    verify: Service converged\n    ```", "```\n    docker service ls\n    ```", "```\n    ID         NAME                  MODE          REPLICAS\n    \u00a0\u00a0IMAGE\n    k6kh\u2026      activity_swarm_db     replicated    1/1\n    \u00a0\u00a0postgres:latest\n    cu5p\u2026      activity_swarm_web    replicated    1/1\n    \u00a0\u00a0activity_web:patch_1\n    ```", "```\n    helm install database stable/postgresql --set postgresqlPassword=kubernetes\n    ```", "```\n    apiVersion: apps/v1\n    kind: StatefulSet\n    metadata:\n    \u00a0\u00a0name: panoramic-trekking-app\n    spec:\n    \u00a0\u00a0serviceName: panoramic-trekking-app\n    \u00a0\u00a0replicas: 1\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0matchLabels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: panoramic-trekking-app\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: panoramic-trekking-app\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: nginx\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: packtworkshops/the-docker-workshop:          chapter10-pta-nginx\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 80\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: web\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: static\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: /service/static\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: pta\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: packtworkshops/the-docker-workshop:          chapter10-pta-web\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: static\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: /service/static\n    \u00a0\u00a0volumeClaimTemplates:\n    \u00a0\u00a0- metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: static\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0accessModes: [ \"ReadWriteOnce\" ]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requests:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0storage: 1Gi\n    ```", "```\n    kubectl apply -f statefulset.yaml\n    ```", "```\n    StatefulSet.apps/panoramic-trekking-app created\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n    \u00a0\u00a0name: panoramic-trekking-app\n    \u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0app: panoramic-trekking-app\n    spec:\n    \u00a0\u00a0ports:\n    \u00a0\u00a0- port: 80\n    \u00a0\u00a0\u00a0\u00a0name: web\n    \u00a0\u00a0type: LoadBalancer\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0app: panoramic-trekking-app\n    ```", "```\n    kubectl apply -f service.yaml\n    ```", "```\n    Service/panoramic-trekking-app created\n    ```", "```\n    minikube service panoramic-trekking-app --url\n    http://192.168.64.14:32009\n    ```", "```\n    docker pull postgres\n    ```", "```\n    wget https://raw.githubusercontent.com/docker/docker/v1.12.3/profiles/seccomp/default.json - O activity1.json\n    ```", "```\n    1500\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    1501\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"name\": \"uname\",\n    1502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"action\": \"SCMP_ACT_ALLOW\",\n    1503\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"args\": []\n    1504\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\n    669\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    670\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"name\": \"mkdir\",\n    671\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"action\": \"SCMP_ACT_ALLOW\",\n    672\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"args\": []\n    673                 },\n\n    579\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    580\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"name\": \"kill\",\n    581\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"action\": \"SCMP_ACT_ALLOW\",\n    582\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"args\": []\n    583\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    ```", "```\n    docker run --rm -it --security-opt seccomp=activity1.json postgres sh\n    ```", "```\n    ~ $ mkdir test\n    ```", "```\n    mkdir: can't create directory 'test': Operation not permitted\n    ```", "```\n    ~ $ top & ps\n    ```", "```\n    PID   USER         TIME    COMMAND\n    \u00a01    20002        0:00    sh\n    \u00a08    20002        0:00    top\n    10    20002        0:00    ps\n    [1]+  Stopped  (tty output)       top\n    ```", "```\n    ~ $ kill -9 8\n    ```", "```\n    sh: can't kill pid 8: Operation not permitted\n    ```", "```\n    ~ $ uname\n    ```", "```\n    Operation not permitted\n    ```", "```\n    docker tag postgres <your repository namespace>/postgres-app:activity2 ; docker push <your repository name>/postgres-app:activity2\n    ```", "```\n    docker-compose up -d\n    ```", "```\n    anchore-cli system status\n    ```", "```\n    anchore-cli system feeds list\n    ```", "```\n    anchore-cli image add <your repository namespace>/postgres-app:activity2\n    ```", "```\n    anchore-cli image list\n    ```", "```\n    anchore-cli image vuln <your repository namespace>/postgres-app:activity2 all | wc -l\n    ```", "```\n    108\n    ```", "```\n    anchore-cli evaluate check <your repository namespace>/postgres-app:activity2\n    ```", "```\n    Image Digest: sha256:57d8817bac132c2fded9127673dd5bc7c3a97654\n    636ce35d8f7a05cad37d37b7\n    Full Tag: docker.io/vincesestodocker/postgres-app:activity2\n    Status: pass\n    Last Eval: 2019-11-23T06:15:32Z\n    Policy ID: 2c53a13c-1765-11e8-82ef-23527761d060\n    ```", "```\n    1\u00a0CREATE TABLE test_data\n    2\u00a0(\n    3\u00a0\u00a0\u00a0\u00a0\u00a0random_value NUMERIC NOT NULL,\n    4\u00a0\u00a0\u00a0\u00a0\u00a0row1         NUMERIC NOT NULL,\n    5\u00a0\u00a0\u00a0\u00a0\u00a0row2         NUMERIC NOT NULL\n    6\u00a0);\n    7\u00a0\n    8\u00a0INSERT INTO test_data\n    9\u00a0\u00a0\u00a0\u00a0\u00a0SELECT random_value.*,\n    10\u00a0\u00a0\u00a0\u00a0\u00a0gen.* ,\n    11\u00a0\u00a0\u00a0\u00a0\u00a0CEIL(RANDOM()*100)\n    12\u00a0\u00a0\u00a0\u00a0\u00a0FROM GENERATE_SERIES(1, 300) random_value,\n    13\u00a0\u00a0\u00a0\u00a0\u00a0GENERATE_SERIES(1, 900000) gen\n    14\u00a0\u00a0\u00a0\u00a0\u00a0WHERE gen <= random_value * 300;\n    ```", "```\n    docker pull postgres\n    ```", "```\n    docker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemPerc}}\\t{{.MemUsage}}\"\n    ```", "```\n    NAME         CPU %       MEM %      MEM USAGE / LIMIT\n    ```", "```\n    docker run --rm --name postgres-test -v ${PWD}/resource_test.sql:/resource_test.sql -e POSTGRES_PASSWORD=docker -d -p 5432:5432 postgres\n    ```", "```\n    NAME            CPU %    MEM %     MEM USAGE / LIMIT\n    postgres-test   0.09%    0.47%     9.273MiB / 1.943GiB\n    ```", "```\n    docker exec -it postgres-test /bin/bash\n    ```", "```\n    psql -h localhost -U postgres -d postgres -c 'create database resource_test;'\n    Password for user postgres: \n    CREATE DATABASE\n    ```", "```\n    time psql -h localhost -U postgres -d resource_test -a -f resource_test.sql\n    ```", "```\n    Password for user postgres: \n    \u2026\n    INSERT 0 13545000\n    real    0m50.446s\n    user    0m0.003s\n    sys     0m0.008s\n    ```", "```\n    NAME            CPU %      MEM %    MEM USAGE / LIMIT\n    postgres-test   100.66%    2.73%    54.36MiB / 1.943GiB\n    ```", "```\n    docker kill postgres-test\n    ```", "```\n    docker run --rm --name postgres-test -e POSTGRES_PASSWORD=docker -d -p 5432:5432 --cpus 0.5 --memory 256MB postgres\n    ```", "```\n    docker exec -it postgres-test /bin/bash\n    ```", "```\n    psql -h localhost -U postgres -d postgres -c 'create database resource_test;'\n    Password for user postgres: \n    CREATE DATABASE\n    ```", "```\n    time psql -h localhost -U postgres -d resource_test -a -f resource_test.sql\n    Password for user postgres: \n    \u2026\n    INSERT 0 13545000\n    real    1m54.484s\n    user    0m0.003s\n    sys     0m0.005s\n    ```", "```\n    NAME            CPU %     MEM %      MEM USAGE / LIMIT\n    postgres-test   48.52%    13.38%     34.25MiB / 256MiB\n    ```", "```\n    docker pull hadolint/hadolint\n    ```", "```\n    docker run --rm -i hadolint/hadolint < Dockerfile\n    ```", "```\n    /dev/stdin:1 DL3006 Always tag the version of an image explicitly\n    /dev/stdin:2 DL3008 Pin versions in apt get install. Instead of \n    'apt-get install <package>' use 'apt-get install \n    <package>=<version>'\n    /dev/stdin:2 DL3009 Delete the apt-get lists after installing \n    something\n    /dev/stdin:2 DL3015 Avoid additional packages by specifying \n    '--no-install-recommends'\n    /dev/stdin:2 DL3014 Use the '-y' switch to avoid manual input \n    'apt-get -y install <package>'\n    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD \n    and ENTRYPOINT arguments\n    ```", "```\n    1 FROM ubuntu:18.08\n    ```", "```\n    2\u00a0RUN apt-get update \\\n    3\u00a0&& apt-get install -y stress=1.0.4 --no-install-recommends \\\n    4\u00a0&& apt-get clean \\\n    5\u00a0&& rm -rf /var/lib/apt/lists/*\n    ```", "```\n    6\u00a0CMD [\"sh\", \"-c\", \"stress ${var}\"]\n    ```", "```\n    FROM ubuntu:18.04\n    RUN apt-get update \\\n    \u00a0&& apt-get install -y stress=1.0.4 --no-install-recommends \\\n    \u00a0&& apt-get clean \\\n    \u00a0&& rm -rf /var/lib/apt/lists/*\n    CMD [\"sh\", \"-c\", \"stress ${var}\"]\n    ```", "```\n    docker run --rm -i hadolint/hadolint < Dockerfile\n    ```", "```\n    sum by (name) (container_memory_usage_bytes{name!=\"\"})\n    ```", "```\n    docker kill grafana\n    ```", "```\n    cp /tmp/ContainerMonitoring-1579130313205.json provisioning/dashboards/ContainerMonitoring.json\n    ```", "```\n    docker run --rm -d --name grafana -p 3000:3000 -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/Grafana\n    ```", "```\n    docker run --rm -d --name postgres-test -e POSTGRES_PASSWORD=docker -p 5432:5432 postgres\n    ```", "```\n    docker inspect --format '{{ .NetworkSettings.IPAddress }}' <container_name>\n    ```", "```\n    172.17.0.3\n    ```", "```\n    1\u00a0databases:\n    2\u00a0\u00a0\u00a0pg:\n    3\u00a0\u00a0\u00a0\u00a0\u00a0dsn: postgresql+psycopg2://postgres:<password>@<ip|domain>/        postgres\n    4\n    ```", "```\n    5\u00a0metrics:\n    6\u00a0\u00a0\u00a0pg_process:\n    7\u00a0\u00a0\u00a0\u00a0\u00a0type: gauge\n    8\u00a0\u00a0\u00a0\u00a0\u00a0description: Number of PostgreSQL processes with their         states\n    9\u00a0\u00a0\u00a0\u00a0\u00a0labels: [state]\n    10\n    ```", "```\n    11\u00a0queries:\n    12\u00a0\u00a0\u00a0process_stats:\n    13\u00a0\u00a0\u00a0\u00a0\u00a0databases: [pg]\n    14\u00a0\u00a0\u00a0\u00a0\u00a0metrics:\n    15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- pg_process\n    16\u00a0\u00a0\u00a0\u00a0\u00a0sql: >\n    17\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SELECT\n    18\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state,\n    19\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0COUNT(*) AS pg_process\n    20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FROM pg_stat_activity\n    21\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WHERE state IS NOT NULL\n    22\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GROUP BY state\n    23\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FROM pg_stat_database\n    ```", "```\n    docker run -p 9560:9560/tcp -v --name postgres-exporter ${PWD}/psql_exporter_config.yml:/psql_exporter_config.yml --rm -itd adonato/query-exporter:latest -- /psql_exporter_config.yml\n    ```", "```\n    # HELP database_errors_total Number of database errors\n    # TYPE database_errors_total counter\n    # HELP queries_total Number of database queries\n    # TYPE queries_total counter\n    queries_total{database=\"pg\",status=\"success\"} 10.0\n    queries_total{database=\"pg\",status=\"error\"} 1.0\n    # TYPE queries_created gauge\n    queries_created{database=\"pg\",status=\"success\"} \n    1.5795789188074727e+09\n    queries_created{database=\"pg\",status=\"error\"} \n    1.57957891880902e+09\n    # HELP pg_process Number of PostgreSQL processes with their states\n    # TYPE pg_process gauge\n    pg_process{database=\"pg\",state=\"active\"} 1.0\n    ```", "```\n    45\u00a0\u00a0\u00a0- job_name: 'postgres-web'\n    46\u00a0\u00a0\u00a0\u00a0\u00a0scrape_interval: 5s\n    47\u00a0\u00a0\u00a0\u00a0\u00a0static_configs:\n    48\u00a0\u00a0\u00a0\u00a0\u00a0- targets: ['0.0.0.0:9560']\n    ```", "```\n    ./prometheus --config.file=prometheus.yml\n    ```", "```\n    1\u00a0version: '3'\n    2\n    3\u00a0volumes:\n    4\u00a0\u00a0\u00a0testsplunk:\n    5\u00a0\u00a0\u00a0testsplunkindex:\n    6\n    ```", "```\n    7\u00a0services:\n    8\u00a0\u00a0\u00a0splunk:\n    9\u00a0\u00a0\u00a0\u00a0\u00a0hostname: splunk\n    10\u00a0\u00a0\u00a0\u00a0image: splunk/splunk\n    11\u00a0\u00a0\u00a0\u00a0environment:\n    12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SPLUNK_START_ARGS: --accept-license\n    13\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SPLUNK_PASSWORD: changeme\n    ```", "```\n    14\u00a0\u00a0\u00a0\u00a0volumes:\n    15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- ./testsplunk:/opt/splunk/etc\n    16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- ./testsplunkindex:/opt/splunk/var\n    17\u00a0\u00a0\u00a0\u00a0ports:\n    18\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"8000:8000\"\n    19\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"9997:9997\"\n    20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"8088:8088\"\n    ```", "```\n    docker-compose up -d\n    ```", "```\n    Creating network \"chapter14_default\" with the default driver\n    Creating chapter14_splunk_1 ... done\n    ```", "```\n    docker run --rm -d --name postgres-test \\\n    -e POSTGRES_PASSWORD=docker -p 5432:5432 \\\n    --log-driver=splunk \\\n    --log-opt splunk-url=http://127.0.0.1:8088 \\\n    --log-opt splunk-token=5c051cdb-b1c6-482f-973f-2a8de0d92ed8 \\\n    --log-opt splunk-insecureskipverify=true \\\n    --log-opt tag=\"{{.Name}}/{{.FullID}}\" \\\n    postgres -c log_statement=all \n    ```", "```\n    docker network create  \\\n    --driver=store/weaveworks/net-plugin:2.5.2 \\\n    --attachable \\\n    wp-network\n    ```", "```\n    mk0pmhpb2gx3f6s00o57j2vd\n    ```", "```\n    docker volume create -d vieux/sshfs \\\n    --name wp-content \\\n    -o sshcmd=root@localhost:/tmp \\\n    -o password=root \\\n    -o port=2222\n    ```", "```\n    wp-content\n    ```", "```\n    docker run --name mysql -d \\\n    -e MYSQL_ROOT_PASSWORD=wordpress \\\n    -e MYSQL_DATABASE=wordpress \\\n    -e MYSQL_USER=wordpress \\\n    -e MYSQL_PASSWORD=wordpress \\\n    --network=wp-network \\\n    mysql:5.7\n    ```", "```\n    docker run --name wordpress -d \\\n    -v wp-content:/var/www/html/wp-content \\\n    -e WORDPRESS_DB_HOST=mysql:3306 \\\n    -e WORDPRESS_DB_USER=wordpress \\\n    -e WORDPRESS_DB_PASSWORD=wordpress \\\n    -e WORDPRESS_DB_NAME=wordpress \\\n    --network=wp-network \\\n    -p 8080:80 \\\n    wordpress\n    ```", "```\n    docker ps\n    ```"]