["```js\n1 // <= An expression containing the literal value 1\n```", "```js\n'hi ' + 'there'\n```", "```js\nEXPRESSION + EXPRESSION\n```", "```js\n(\n  'this is part of' +\n  ' ' +\n  ['a', 'very', 'long', 'expression'].join(' ')\n)\n```", "```js\n(class Foo {});   // Legal Expression\n(function() {});  // Legal Expression\n([1, 2, 3]);      // Legal Expression\n({ a: 1, b: 2 }); // Legal Expression\n\n(if (a) {});      // ! SyntaxError (Not an Expression!)\n(while (x) {});   // ! SyntaxError (Not an Expression!)\n```", "```js\n(function() {})\n(\n [1, 2, 3]\n).join(' ')\n```", "```js\n(function() {})([1, 2, 3]).join(' ')\n```", "```js\n(function() {});\n(\n [1, 2, 3]\n).join(' ');\n```", "```js\nfunction sum(a, b) {\n  return\n    a + b;\n}\nsum(a, b); // => undefined (odd!)\n```", "```js\nfunction sum(a, b) {\n  return;\n  a + b;\n}\n```", "```js\nfunction sum(a, b) {\n  return (\n    a + b\n  );\n}\n```", "```js\n{\n  // I am inside a block\n  let foo = 123;\n}\n```", "```js\nwhile (somethingIsTrue()) {\n  // This is a block\n  doSomething();\n}\n```", "```js\nwhile (somethingIsTrue()) doSomething();\n```", "```js\nif (true) {\n  let me = 'here';\n  me; // => \"here\"\n}\n\nme; // ! ReferenceError \n```", "```js\nvar hello = 'hi';\n\nfunction a() {\n  hello; // a() can \"see\" the hello variable\n}\n\nfunction b() {\n  hello; // b() can \"see\" the hello variable\n}\n```", "```js\nvar value = 'I exist';\n\nfunction doSomething() {\n  value; // => \"I exist\"\n}\n```", "```js\nfunction setupApp(config) {\n\n  return {\n    setupUserProfileMenu() {\n\n      if (config.isUserProfileEnabled) {\n\n        const onDoneRendering = () => {\n          console.log('Done Rendering!');\n        };\n\n        // (Do some rendering here...)\n        onDoneRendering();\n\n      }\n\n    }\n  };\n\n}\n\nsetupApp({ isUserProfileEnabled: true }).setupUserProfileMenu();\n```", "```js\nBrowser Global Environment\n\\--> Function Environment (setupApp)\n     \\--> Block Environment (if block)\n          \\--> Function Environment (onDoneRendering)\n```", "```js\nvar foo;\nvar baz = 123;\n```", "```js\nfoo; // => undefined\nvar foo = 123;\nfoo; // => 123\n```", "```js\nthing; // ! ReferenceError: Cannot access 'thing' before initialization\nlet thing = 123; \n```", "```js\nvar config = {};\n\nfunction setupUI() {\n  config; // => undefined\n  var config;\n}\n\nsetupUI();\n```", "```js\n// This:\n// (VariableDeclaration inside a Block)\nif (true) {\n  var value = 123;\n} \n\n// ... Is equivalent to:\n// (VariableDeclaration preceding a Block)\nvar value;\nif (true) {\n  value = 123\n};\n```", "```js\nlet place = 'outer';\n\nfunction foo() {\n  let place = 'function';\n\n  {\n    let place = 'block';\n    place; // => \"block\"\n  }\n\n  place; // => \"function\"\n}\n\nfoo();\nplace; // => \"outer\"\n```", "```js\nfor (let i = 0; i < 5; i++) {\n  console.log(i); // Logs: 0, 1, 2, 3, 4\n}\nconsole.log(i); // ! ReferenceError: i is not defined\n```", "```js\nconst pluto = 'a planet';\npluto = 'a dwarf planet'; // ! TypeError: Assignment to constant variable.\n```", "```js\nconst pluto = { designation: 'a planet' };\n\n// Assignment to a property:\npluto.designation = 'a dwarf planet';\n\n// It worked! (I.e. the object is mutable)\npluto.designation; // => \"a dwarf planet\"\n```", "```js\nfor (const n of [4, 5, 6]) console.log(n);\n// Logs 4, 5, 6\n```", "```js\nmyFunction(); // => \"This works!\"\nfunction myFunction() { return 'This works!' }\n```", "```js\ngiveMeTheBestNumber; // => (Varies depending on implementation!)\nif (something) {\n  function giveMeTheBestNumber() { return 76; }\n} else {\n  function giveMeTheBestNumber() { return 42; }\n}\n```", "```js\nfunction outer() {\n  let thing = 123;\n  function inner() {\n    // I can access `thing` within here!\n    thing; // => 123\n  }\n  inner();\n}\nouter();\n```", "```js\nfunction fn() {\n  let coolNumber = 1;\n  return function() {\n    console.log(`\n      I have access to ${coolNumber} \n      wherever and whenever I am called\n    `);\n  };\n}\n```", "```js\nfunction valueIncrementer() {\n  let currentValue = 0;\n  return function() {\n    return currentValue++;\n  };\n}\n\nconst increment = valueIncrementer();\nincrement(); // => 0\nincrement(); // => 1\nincrement(); // => 2\n```"]