- en: Type Checks and Null Safety
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型检查和空安全
- en: As mentioned in [Chapter 1](3223f31b-0cc1-4b69-96ed-a626f77315bf.xhtml)*, Setting
    Up for Android Development*, one of the great features that Kotlin brings to the
    table is **Null safety**. In this chapter, we will learn about what makes Kotlin
    a null-safe language and how we can take full advantage of it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](3223f31b-0cc1-4b69-96ed-a626f77315bf.xhtml)*所述，为Android开发设置*，Kotlin带来的一个伟大特性是**空安全**。在本章中，我们将学习Kotlin是如何成为一个空安全语言的，以及我们如何充分利用它。
- en: 'By the end of this chapter, we will have learned about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将学到：
- en: Non-nullable and nullable types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非空和可空类型
- en: The safe call operator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全调用操作符
- en: The Elvis operator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elvis操作符
- en: The `!!` operator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!!`操作符'
- en: The safe and unsafe cast operators
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全和不安全的类型转换操作符
- en: Null safety
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空安全
- en: One of the most common pain points developers have with Java and a number of
    other languages has to do with accessing a member of a null reference. In most
    languages, this results in a null reference exception at runtime. Most Java developers
    know this as the `NullPointerException`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Java和其他许多语言中开发者最常见的痛点之一是访问空引用的成员。在大多数语言中，这会导致运行时的空引用异常。大多数Java开发者将其称为`NullPointerException`。
- en: 'Kotlin is designed to eliminate the possibility of running into null reference,
    exceptions as much as possible. As stated in [Chapter 1](3223f31b-0cc1-4b69-96ed-a626f77315bf.xhtml), *Setting
    Up for Android Development*, there are only four possible reasons why you could
    run into a `NullPointerException` in Kotlin:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin旨在尽可能消除空引用和异常的可能性。如[第1章](3223f31b-0cc1-4b69-96ed-a626f77315bf.xhtml)中所述，*为Android开发设置*，在Kotlin中，你可能遇到`NullPointerException`的四个可能原因：
- en: An external Java code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部Java代码
- en: An explicit call to throw `NullPointerException`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式调用抛出`NullPointerException`
- en: Usage of the `!!` operator (we'll learn more about this operator later)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`!!`操作符（我们稍后会学到更多关于这个操作符的知识）
- en: Data inconsistency regarding initialization
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于初始化的数据不一致性
- en: So how does Kotlin ensure this?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Kotlin是如何确保这一点的呢？
- en: Nullable and non-nullable types
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可空和非空类型
- en: A **nullable type** is a reference that is allowed to hold a `null` value while
    a non-nullable type is a reference that cannot hold a `null` value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**可空类型**是允许保存`null`值的引用，而**非空类型**是不能保存`null`值的引用。'
- en: 'Kotlin''s type system is designed to distinguish between these two types of
    references. Nullable types are declared by appending a `?` at the end of the type. For
    example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin的类型系统设计用于区分这两种引用类型。可空类型通过在类型末尾添加`?`来声明。例如：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are a number of things to take note of in the previous code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中有一些需要注意的事项：
- en: '`name` cannot be assigned a `null` value because it is a non-nullable type'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`不能被赋予`null`值，因为它是非空类型'
- en: '`gender`, on the other hand, can be assigned a `null` value because it is declared
    as a nullable type'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，`gender`可以被赋予`null`值，因为它声明为可空类型
- en: Accessing a member method or property of `gender` cannot be done in the same
    way as accessing one of the `name` member methods or properties
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法像访问`name`的成员方法或属性一样访问`gender`的成员方法或属性
- en: 'There are a number of ways to access a method or property of a nullable type.
    You can check for `null` and access the method or property in the condition. For
    example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以访问可空类型的方法或属性。你可以在条件中检查`null`并访问方法或属性。例如：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The compiler keeps track of the results of the `null` check and therefore allows
    the call to `length` with the body of the `if` condition. This is an example of
    a **smart cast**:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器跟踪`null`检查的结果，因此允许在`if`条件的主体中调用`length`。这是一个**智能转换**的例子：
- en: Using the safe call operator (`?.`)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全调用操作符(`?.`)
- en: Using the Elvis operator (`?:`)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Elvis操作符(`?:`)
- en: Using the `!!` operator
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`!!`操作符
- en: Performing a smart cast
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行智能转换
- en: Smart cast is a smart feature in Kotlin where the compiler tracks the results
    in an `if` statement and performs casts automatically when needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 智能转换是Kotlin中的一个智能功能，编译器会跟踪`if`语句的结果，并在需要时自动执行转换。
- en: Safe call operator
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全调用操作符
- en: 'Another way of accessing a method or property of a nullable type is by using
    the safe call operator:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 访问可空类型的方法或属性的另一种方式是使用安全调用操作符：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, if the gender is not `null`, the value of `len` will
    be the result of `gender.length`. Otherwise, the value of `len` will be `null`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，如果gender不为`null`，则`len`的值将是`gender.length`的结果。否则，`len`的值将为`null`。
- en: Using the safe call operator is great if you don't need to perform any actions
    when `gender` is `null`. What if we want to assign `len` a different value when
    `gender` is `null`? We can combine the safe call operator with the **Elvis operator**
    for that.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`gender`为`null`时不需要执行任何操作，使用安全调用操作符是很好的。如果我们想在`gender`为`null`时为`len`赋予不同的值，我们可以将安全调用操作符与**Elvis操作符**结合使用。
- en: The Elvis operator
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elvis操作符
- en: 'The Elvis operator is similar to the ternary `if` operator in Java. It''s a
    way of simplifying an `if-else` statement. For example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Elvis操作符类似于Java中的三元`if`操作符。它是简化`if-else`语句的一种方式。例如：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The code can be simplified to:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以简化为：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous code, the value of `len` will be `0` if `gender?.length` evaluates to
    `null`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，如果`gender?.length`的值为`null`，则`len`的值将为`0`。
- en: The !! operator
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '!!操作符'
- en: 'What if we don''t care about running into a null pointer exception? Then we
    can make use of the `!!` operator. For example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不在乎遇到空指针异常，那么我们可以使用`!!`操作符。例如：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will result in a null pointer exception if `gender` is `null`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`gender`为`null`，则会导致空指针异常。
- en: Only use the `!!` operator if you're either certain of the value of the variable
    or you don't care about running into a null pointer exception.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在确定变量的值或者不在乎遇到空指针异常时才使用`!!`操作符。
- en: Type checks
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型检查
- en: 'Just like in Java, you can confirm the type of a variable. In Kotlin, this
    is done using the `is` operator. For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Java中一样，你可以确认变量的类型。在Kotlin中，使用`is`操作符来实现。例如：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Just as with the `null` check from earlier, the compiler keeps track of the
    results of the type check and automatically casts `gender` to a `String`, therefore
    allowing the call to `gender.length`. This is called a smart cast.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的 `null` 检查一样，编译器会跟踪类型检查的结果，并自动将 `gender` 转换为 `String`，从而允许调用 `gender.length`。这被称为智能转换。
- en: Cast operator
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换运算符
- en: 'To cast a variable to another type, you have to use the cast operator (`as`):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要将变量转换为另一种类型，您必须使用转换运算符（`as`）：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The cast operator will throw an error if the variable you''re trying to cast
    is not of the type you''re trying to cast it to. To prevent this, you can make
    use of the **safe cast operator **(`as?`):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试将变量转换为的类型不是您要转换的类型，则转换运算符将抛出错误。为了防止这种情况，您可以使用**安全转换运算符**（`as?`）：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The safe cast operator does not throw an error but returns a `null` if the cast
    is not possible.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 安全转换运算符不会抛出错误，而是在转换不可能时返回 `null`。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the different ways Kotlin helps make your
    code null safe. There are different operators used in Kotlin to achieve this and
    we covered how to use them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Kotlin 如何帮助使您的代码具有空安全性的不同方式。 Kotlin 中有不同的运算符用于实现这一点，我们讨论了如何使用它们。
- en: In the next chapter, we will complete work on our TicTacToe game while learning
    about functions and lambdas in Kotlin.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在学习 Kotlin 中的函数和 lambda 的同时完成我们的井字棋游戏。
