- en: Chapter 3. Using NumPy Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：使用 NumPy 数组
- en: The beauty of NumPy Arrays is that you can use array indexing and slicing to
    quickly access your data or perform a computation while keeping the efficiency as
    the C arrays. There are also plenty of mathematical operations that are supported.
    In this chapter, we will take an in-depth look at using NumPy Arrays. After this
    chapter, you will feel comfortable using NumPy Arrays and the bulk of their functionality.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组的优点在于您可以使用数组索引和切片来快速访问数据或执行计算，同时保持 C 数组的效率。 还支持许多数学运算。 在本章中，我们将深入研究使用
    NumPy 数组。 在本章结束之后，您将对使用 NumPy 数组及其大部分功能感到满意。
- en: 'Here is a list of topics that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章将涉及的主题列表：
- en: Basic operations and the attributes of NumPy Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 数组的基本操作和属性
- en: Universal functions (ufuncs) and helper functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用函数（UFuncs）和辅助函数
- en: Broadcasting rules and shape manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广播规则和形状操作
- en: Masking NumPy Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏蔽 NumPy 数组
- en: Vectorized operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量化运算
- en: 'All NumPy operations are vectorized, where you apply operations to the whole
    array instead of on each element individually. This is not just neat and handy
    but also improves the performance of computation compared to using loops. In this
    section, we will experience the power of NumPy vectorized operations. A key idea
    worth keeping in mind before we start exploring this subject is to always think
    of entire sets of arrays instead of each element; this will help you enjoy learning
    about NumPy Arrays and their performance. Let''s start by doing some simple calculations
    with scalars and between NumPy Arrays:'
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 NumPy 操作都是向量化的，您可以将操作应用于整个数组，而不是分别应用于每个元素。 与使用循环相比，这不仅整齐方便，而且还提高了计算性能。 在本节中，我们将体验
    NumPy 向量化操作的强大功能。 在开始探索此主题之前，一个值得牢记的关键思想是始终考虑整个数组集而不是每个元素。 这将帮助您享受有关 NumPy 数组及其性能的学习。
    让我们从标量和 NumPy 数组之间进行一些简单的计算开始：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All the elements in the array are added by `1`  simultaneously. This is very
    different from Python or most other programming languages. The elements in a NumPy
    Array all have the same `dtype` ; in the preceding example, this is `numpy.int`
    (this is either 32 or 64-bit depending on the machine); therefore, NumPy can save
    time on checking the type of each element at runtime, which, ordinarily, is done
    by Python. So, just apply these arithmetic operations:'
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的所有元素通过`1`同时添加。 这与 Python 或大多数其他编程语言有很大不同。 NumPy 数组中的元素都具有相同的`dtype`； 在前面的示例中，这是`numpy.int`（根据计算机的不同是
    32 位或 64 位）; 因此，NumPy 可以节省在运行时检查每个元素的类型的时间，这通常是由 Python 完成的。 因此，只需应用以下算术运算：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Two NumPy Arrays are multiplied element by element. In the preceding example,
    two arrays are of equal shape, so no broadcasting is applied here (we will explain
    different shapes, NumPy Array operations, and broadcasting rules in a later section.)
    The first element in array `x` is multiplied by the first element in array `y`
    and so on. One important point to note here is that the arithmetic operations
    between two NumPy Arrays are not matrix multiplications. The result still returns
    the same shape of NumPy Arrays. A matrix multiplication in NumPy will use `numpy.dot()`
    . Take a look at this example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 NumPy 数组逐个元素相乘。 在前面的示例中，两个数组的形状相同，因此此处不应用广播（我们将在后面的部分中解释不同的形状，NumPy 数组操作和广播规则。）数组`x`中的第一个元素乘以数组`y`中的第一个元素，依此类推。
    这里要注意的重要一点是，两个 NumPy 数组之间的算术运算不是矩阵乘法。 结果仍然返回相同形状的 NumPy 数组。 NumPy 中的矩阵乘法将使用`numpy.dot()`。
    看一下这个例子：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'NumPy also supports logic comparison between two arrays, and the comparison
    is vectorized as well. The result returns a Boolean, and NumPy Array indicates
    which element in both arrays is equal. If two different shapes of arrays are compared,
    the result would only return one `False` , which indicates that the two arrays
    are different, and would really compare each element:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 还支持两个数组之间的逻辑比较，并且比较也被向量化。 结果返回一个布尔值，并且 NumPy 数组指示两个数组中的哪个元素相等。 如果比较两个不同形状的数组，结果将仅返回一个`False`，这表明两个数组不同，并且实际上将比较每个元素：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'From the preceding examples, we get an insight into NumPy''s element-wise operations,
    but what''s the benefit of using them? How can we know that an optimization has
    been made through these NumPy operations? We will use the `%timeit` function in
    IPython, which was introduced in the last chapter, to show you the difference
    between NumPy operations and the Python `for` loop:'
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，我们可以深入了解 NumPy 的元素操作，但是使用它们的好处是什么？ 我们怎么知道通过这些 NumPy 操作进行了优化？ 我们将使用上一章中介绍的
    IPython 中的`%timeit`函数，向您展示 NumPy 操作和 Python `for`循环之间的区别：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Two variables, `x ` and `y` , are the same length and do the same kind of work,
    which includes adding a value to all the elements in the arrays. With the help
    of NumPy operations, the performance is way faster than an ordinary Python `for`
    loop (we use a list comprehension here for neat code, which is faster than an
    ordinary Python `for` loop, but still, NumPy has better performance when compared
    to the ordinary Python `for` loop). Knowing this huge distinction can help you
    speed up your code by replacing your loops with NumPy operations.
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`和`y`这两个变量的长度相同，并且执行相同的工作，其中包括向数组中的所有元素添加值。 在 NumPy 操作的帮助下，性能比普通的 Python
    `for`循环要快得多（我们在这里使用列表推导来编写整洁的代码，这比普通的 Python `for`循环要快，但是与普通的 Python `for`循环相比，NumPy
    的性能却更好）。 知道这个巨大的区别可以通过用 NumPy 操作替换循环来帮助您加速代码。'
- en: 'As we mentioned in the previous examples, improvement in performance is due
    to a consistent `dtype` in a NumPy Array. A tip that can help you use NumPy Arrays
    correctly is to always consider `dtype` before you apply any operation, as you
    will most likely be doing in most programming languages. The following example
    will show you a hugely different result with the same operation, but this is based
    on a different `dtype` array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的示例中提到的，性能的提高归因于 NumPy 数组中一致的`dtype`。 可以帮助您正确使用 NumPy 数组的技巧是在执行任何操作之前始终考虑`dtype`
    ，因为您很可能会在大多数编程语言中进行此操作。 下面的示例将为您展示使用相同操作的巨大不同结果，但这是基于不同的`dtype`数组：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The two variables `x` and `y` are exactly the same: both are `numpy.int32`
    Arrays, ranging from  *1* to  *8* (you might get `numpy.int64` if you use a 64-bit
    machine) and are divided by `float 10.0` . However, when `x` is divided by a float,
    a new NumPy Array is created with `dtype = numpy.float64` . This is a totally
    new array but has the same variable name,`x` , so `dtype` is changed in `x` .
    On the other hand,`y` uses the`/=` sign, which always honors the `dtype` value
    of the `y` array. So, when it is divided by `10.0` , no new array is created;
    only the value in the element of `y` is changed but `dtype ` is still `numpy.int32`
    . This is why `x` and `y` end up with two different arrays. Note that, from version
    of 1.10, NumPy will not allow you to cast the float result as an integer; therefore, `TypeError`
    will have to be raised.'
  prefs: []
  type: TYPE_NORMAL
  zh: 两个变量`x`和`y`完全相同：都是`numpy.int32`数组，范围从`1`到`8`（如果使用 64 位计算机，则可能会得到`numpy.int64`）并除以`float
    10.0`。 但是，当`x`除以浮点数时，将使用`dtype = numpy.float64`创建一个新的 NumPy 数组。 这是一个全新的数组，但是具有相同的变量名`x`，因此`x`中的`dtype`进行了更改。
    另一方面，`y`使用`/=`符号，该符号始终沿用`y`数组的`dtype`值。 因此，当它除以`10.0`时，不会创建新的数组; 仅更改`y`元素中的值，但`dtype `仍为`numpy.int32`。
    这就是`x`和`y`最终具有两个不同数组的原因。 请注意，从 1.10 版本开始，NumPy 不允许将浮点结果强制转换为整数。 因此，必须提高`TypeError`。
- en: Universal functions (ufuncs)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用函数（UFuncs）
- en: NumPy has many universal functions (so-called ufuncs), so use them to your advantage
    to eliminate as many loops as you can to optimize your code. The ufuncs have a
    pretty good coverage in math, trigonometry, summary statistics, and comparison
    operations. For detailed ufunc lists, refer to the online documentation at [http://docs.scipy.org/doc/numpy/reference/ufuncs.html](http://docs.scipy.org/doc/numpy/reference/ufuncs.html)
    .
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 具有许多通用函数（所谓的 UFuncs），因此可以利用它们来发挥自己的优势，从而尽可能地减少循环以优化代码。 通用函数在数学，三角函数，汇总统计信息和比较运算方面有很好的覆盖范围。
    有关详细的通用函数列表，请参考在线文档，位于[`docs.scipy.org/doc/numpy/reference/ufuncs.html`](http://docs.scipy.org/doc/numpy/reference/ufuncs.html)。
- en: Due to the large amount of ufuncs in NumPy, we can hardy cover all of them in
    a chapter. In this section, we only aim to understand how and why NumPy ufuncs
    should be used.
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 NumPy 中有大量的通用函数，我们很难在一章中涵盖所有这些函数。 在本节中，我们仅旨在了解如何以及为何应使用 NumPy 通用函数。
- en: Getting started with basic ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本通用函数入门
- en: 'Most ufuncs are either unary or binary, which means that they can take only
    one or two arguments and apply them, element-wise or in mathematics; this is referred
    to as a vectorized operation or a NumPy arithmetic operation, which we explained
    in previous sections. Here are some common ufuncs:'
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数通用函数都是一元或二进制的，这意味着它们只能接受一个或两个参数，然后逐元素地或在数学中应用它们。 这称为向量化运算或 NumPy 算术运算，我们已在前面的部分中进行了说明。
    以下是一些常见的通用函数：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Math operations are widely supported in ufuncs, some that are as basic as `numpy.square()`
    or `numpy.log()` , and others that are advanced trigonometric operations, such
    as `numpy.arcsin()` , `numpy.rad2deg()` , and more. Here, `np.mod()` retrieves
    the remainders of division:'
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数中广泛支持数学运算，其中一些基本与`numpy.square()`或`numpy.log()`基本相同，而另一些则是高级三角运算，例如`numpy.arcsin()`，`numpy.rad2deg()`等。
    在这里`np.mod()`检索除法的余数：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Some ufuncs have similar names, but their function and behaviors are very different.
    Check online documentation first to make sure you get the result you expect. Here
    is an example of `numpy.minimum() ` and `numpy.min()` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 一些通用函数具有相似的名称，但它们的功能和行为却大不相同。 首先查看在线文档，以确保获得期望的结果。 这是`numpy.minimum() `和`numpy.min()`的示例：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, `numpy.minimum()` compares two arrays and returns the minimum
    value for both. `1`  is the shape of the array value of which is 7, so it's broadcast
    to`[7, 7, 7, 7, 7]` . We will talk about the NumPy broadcasting rule in a later
    section. `numpy.min()` , only takes one required argument and returns the smallest
    element in the array.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`numpy.minimum()`比较两个数组并返回两个数组的最小值。 `1` 是数组值的形状，其值为 7，因此将其广播到`[7, 7, 7,
    7, 7]`。 我们将在下一节中讨论 NumPy 广播规则。 `numpy.min()`，仅接受一个必需的参数，并返回数组中最小的元素。
- en: Working with more advanced ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用更高级的函数
- en: 'Most ufuncs have an optional argument to provide more flexibility when using
    them; the following example will use `numpy.median()` . This is done with an optional `axis`
    argument on a two-dimensional array created by the `numpy.repeat()` function to
    repeat the `x` array three times and assign it to the `z` variable:'
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数通用函数具有可选参数，以在使用它们时提供更大的灵活性。 以下示例将使用`numpy.median()`。 这是在`numpy.repeat()`函数创建的二维数组上使用可选的`axis`
    参数完成的，以重复`x`数组三次并将其分配给`z`变量：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can see without applying the `axis` argument that the `numpy.median()` function
    flattens the array by default and returns a median element, so only one value
    is returned. With the `axis` argument, if it's applied to 0, the operation will
    be based on the column; therefore, we obtain a new NumPy Array with a length of 
    *3* (there are  *3* columns in total in the `z` variable). While `axis = 1` ,
    it performed the operation based on rows, so we have a new array with five elements.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以不使用`axis`参数就可以看到`numpy.median()`函数默认情况下会展平数组并返回中值元素，因此仅返回一个值。 使用`axis`自变量，如果将其应用于
    0，则该操作将基于该列； 因此，我们获得了一个新的 NumPy 数组，其长度为`3`（`z`变量中总共有`3`列）。 虽然`axis = 1`，它基于行执行操作，所以我们有了一个包含五个元素的新数组。
- en: 'ufuncs not only provide optional arguments to tune operations, but many of
    them also have some built-in methods, which provides even more flexibility. The
    following example uses `accumulate()` in `numpy.add()` to accumulate the result
    of applying `add()` to all elements:'
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数不仅提供可选参数来调整操作，而且其中许多还具有一些内置方法，从而提供了更大的灵活性。 以下示例使用`numpy.add()`中的`accumulate()`累积对所有元素应用`add()`的结果：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second example applies the matrix outer operation on `numpy.multiply()`
    to all pairs of elements from two input arrays. In this example, two arrays are
    from `x` . The final shape of the outer product from `multiply()` will be  *5*
    by  *5* :'
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例将`numpy.multiply()`上的矩阵外部运算应用于来自两个输入数组的所有元素对。 在此示例中，两个数组来自`x`。 `multiply()`的外积的最终形状为`5x5`：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you want something a little more advanced, you will want to consider building
    your own ufuncs, which might require using the Python- C API, or you may also
    use Numba modules (vectorize decorators) to implement customized ufuncs. In this
    chapter, our goal is to understand NumPy ufuncs, so we will not cover customized
    ufuncs. For further details, refer to NumPy's online documentation, called *Writing
    your own ufunc* , at [http://docs.scipy.org/doc/numpy/user/c-info.ufunc-tutorial.html](http://docs.scipy.org/doc/numpy/user/c-info.ufunc-tutorial.html)
    , or a Numba document called  *Creating Numpy Universal Functions*  at  [http://numba.pydata.org/numba-doc/dev/user/vectorize.html](http://numba.pydata.org/numba-doc/dev/user/vectorize.html)
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更高级的函数，则可以考虑构建自己的通用函数，这可能需要使用 Python-C API，或者您也可以使用 Numba 模块（向量化装饰器）来实现自定义的通用函数。
    在本章中，我们的目标是了解 NumPy 通用函数，因此我们将不介绍自定义的通用函数。 有关更多详细信息，请参阅 NumPy 的联机文档，名为“编写自己的通用函数”，位于[`docs.scipy.org/doc/numpy/user/c-info.ufunc-tutorial.html`](http://docs.scipy.org/doc/numpy/user/c-info.ufunc-tutorial.html)，或
    Numba 文档，“创建 Numpy 通用函数”，位于[`numba.pydata.org/numba-doc/dev/user/vectorize.html`](http://numba.pydata.org/numba-doc/dev/user/vectorize.html)。
- en: Broadcasting and shape manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播和形状操作
- en: NumPy operations are mostly done element-wise, which requires two arrays in
    an operation to have the same shape; however, this doesn't mean that NumPy operations
    can't take two differently shaped arrays (refer to the first example we looked
    at with scalars). NumPy provides the flexibility to broadcast a smaller-sized
    array across a larger one. But we can't broadcast the array to just about any
    shape. It needs to follow certain constrains; we will be covering them in this
    section. One key idea to keep in mind is that broadcasting involves performing
    meaningful operations over two differently shaped arrays. However, inappropriate
    broadcasting might lead to an inefficient use of memory that slows down computation.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 操作大部分是按元素进行的，这需要一个操作中的两个数组具有相同的形状。 但是，这并不意味着 NumPy 操作不能采用两个形状不同的数组（请参阅我们在标量中看到的第一个示例）。
    NumPy 提供了在较大的数组上广播较小尺寸的数组的灵活性。 但是我们不能将数组广播成几乎任何形状。 它需要遵循某些约束； 我们将在本节中介绍它们。 要记住的一个关键思想是广播涉及在两个不同形状的数组上执行有意义的操作。
    但是，不当广播可能会导致内存使用效率低下，从而减慢计算速度。
- en: Broadcasting rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广播规则
- en: 'The general rule for broadcasting is to determine whether two arrays are compatible
    with dimensioning. There are two conditions that need to be met:'
  prefs: []
  type: TYPE_NORMAL
  zh: 广播的一般规则是确定两个数组是否与尺寸兼容。 需要满足两个条件：
- en: Two arrays should be of equal dimensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个数组的大小应相等
- en: One of them is 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中之一是 1
- en: 'If the preceding conditions are not met, a `ValueError` exception will be thrown
    to indicate that the arrays have incompatible shapes. Now, we are going through
    three examples to take a look at how broadcasting rules work:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不满足上述条件，将引发`ValueError`异常，以指示数组具有不兼容的形状。 现在，我们将通过三个示例来研究广播规则的工作原理：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's make the preceding code into a graph to help us understand broadcasting.
    The `x` variable has a shape of `(3, 3)` , while `y` only has a shape of 3\. But
    in NumPy broadcasting, the shape of `y` is translated to  *3* by  *1* ; therefore,
    the second condition of the rule has been met. `y` has been broadcast to the same
    shape of `x` by repeating it. The`+` operation can apply element-wise.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前面的代码制作成图表，以帮助我们理解广播。 `x`变量的形状为`(3, 3)`，而`y`的形状仅为 3。但是在 NumPy 广播中，`y`的形状转换为`1x3`；
    因此，该规则的第二个条件已得到满足。 通过重复将`y`广播到`x`的相同形状。 `+`操作可以按元素应用。
- en: '![Broadcasting rules](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![广播规则](img/00005.jpeg)'
- en: 'Numpy broadcasting on different shapes
    of arrays, where x(3,3) + y(3)'
  prefs: []
  type: TYPE_NORMAL
  zh: 不同形状的数组上的 Numpy 广播，其中`x(3,3) + y(3)`
- en: 'Next, we are going to show you the result of broadcasting both arrays:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向您展示广播两个数组的结果：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding example shows you how both `x` and `y` are broadcast. `x` is broadcast
    by the column, while `y` is broadcast by the row since both of them have dimension
    that are equal to  *1* in terms of their shape. The second broadcasting condition
    has been met, and the new result array is a  *3* by  *3* array.
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例向您展示`x`和`y`的广播方式。 `x`按列广播，而`y`按行广播，因为它们的形状在形状上均等于`1`。 满足第二个广播条件，并且新结果数组是`3x3`。
- en: '![Broadcasting rules](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![广播规则](img/00006.jpeg)'
- en: 'Let''s take a look of our last example, which two arrays can''t meet the requirement
    of broadcasting rules:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下最后一个示例，其中两个数组不能满足广播规则的要求：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the third example, broadcasting can't be performed due to `x` and `y` as
    they have different shapes in the row dimension and none of them are equal to 
    *1* . Thus, none of the broadcasting conditions can be met. NumPy throws `ValueError`
    , telling you that the shape is incompatible.
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个示例中，由于`x`和`y`在行维度上具有不同的形状，并且它们都不等于`1`，因此无法执行广播。 因此，不能满足任何广播条件。 NumPy 抛出`ValueError`，告诉您形状不兼容。
- en: '![Broadcasting rules](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![广播规则](img/00007.jpeg)'
- en: Reshaping NumPy Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重塑 NumPy 数组
- en: 'After understanding the broadcasting rules, another important concept here
    is to reshape your NumPy Arrays, especially when you are dealing with multidimensional
    arrays. It''s common for you to create a NumPy Array in just one dimension, reshaping
    it to a multidimension later, or vice versa. A key idea here is that you can change
    the shape of your arrays, but the number of elements should not be changed; for
    example, you can''t reshape a *3* by  *3* array to a  *10* by  *1* array. The
    total number of elements (or a so-called data buffer in the ndarray internal organization)
    should be consistent before and after reshaping. Or ,you might need to resize,
    but that''s another story. Now, let''s look at some shape manipulations:'
  prefs: []
  type: TYPE_NORMAL
  zh: 了解广播规则之后，这里的另一个重要概念是重塑 NumPy 数组，尤其是在处理多维数组时。 通常只在一个维度上创建一个 NumPy 数组，然后将其重塑为多维，反之亦然。
    这里的一个关键思想是，您可以更改数组的形状，但不应更改元素的数量。 例如，您无法将`3xe`数组整形为`10x1`数组。 整形前后，元素的总数（或`ndarray`内部组织中的所谓数据缓冲区）应保持一致。
    或者，您可能需要调整大小，但这是另一回事了。 现在，让我们看一些形状操作：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The basic reshaping technique changes the `numpy.shape` attribute. In the preceding
    example, we have an array whose shape is `(24,1)` , and after altering the shape
    attribute, we obtain an array of the same size but the shape has been changed
    to  *2* by  *3* by  *4* . Note that  *-1* in a shape means the remaining shape
    size of the transferred array.
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的重塑技术会更改`numpy.shape`属性。 在前面的示例中，我们有一个形状为`(24,1)`的数组，更改了`shape`属性后，我们获得了一个相同大小的数组，但是形状已更改为`2x3x4`组成。
    注意， `-1`的形状是指转移数组的剩余形状尺寸。
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding example is to reshape a 100 by 100 by 100 array back to just one
    dimension; here, we apply two functions, `numpy.flatten()` and `numpy.ravel()`
    , to collapse the array, and at the same time, we also compare the execution time.
    We notice that the speed difference between `numpy.flatten()` and `numpy.ravel()`
    is huge, but both of them are much faster than three layers of Python looping.
    The difference in performance between the two functions is that `np.flatten()`
    creates a copy from the original array, while `np.ravel()` just changes the view
    (if you don't remember the difference between copies and views, go back a bit
    to [Chapter 2](text00021.html#page "Chapter 2. The NumPy ndarray Object") ,  *The
    NumPy ndarray Object* ).
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例是将`100 x 100 x 100`数组整形为一个尺寸; 在这里，我们应用`numpy.flatten()`和`numpy.ravel()`这两个函数来折叠数组，同时我们还比较了执行时间。
    我们注意到`numpy.flatten()`和`numpy.ravel()`之间的速度差异很大，但是它们都比三层 Python 循环快得多。 两个函数在性能上的差异是`np.flatten()`从原始数组创建副本，而`np.ravel()`只是更改视图（如果您不记得副本和视图之间的区别，请回到第二章， “NumPy `ndarray`对象”）。
- en: This example simply shows you that NumPy offers many functions and some of them
    can produce same results; pick up the function that satisfies your purpose and,
    at the same time, provides you with optimized performance.
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是向您展示了 NumPy 提供了许多功能，其中一些可以产生相同的结果。 选择满足您目的的功能，同时为您提供优化的性能。
- en: Vector stacking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向量堆叠
- en: 'Reshaping changes the shape of one array, but how do we construct a two or
    multidimensional array by equally-sized row vectors? NumPy provides a solution
    for this called vector stacking; here, we are going to go through three examples
    using three different stacking functions to achieve the combination of two arrays
    based on different dimensions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 重塑会更改一个数组的形状，但是如何通过大小相等的行向量构造二维或多维数组呢？ NumPy 为这种称为向量堆叠的解决方案提供了解决方案。 在这里，我们将通过三个示例使用三个不同的栈函数来实现基于不同维度的两个数组的组合：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`Numpy.vstack()` constructs the new array by vertically stacking two input
    arrays. The new array is two-dimensional:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`Numpy.vstack()`通过垂直堆叠两个输入数组来构造新数组。 新数组是二维的：'
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'While `numpy.hstack()` combines the two arrays horizontally, the new array
    is still one-dimensional:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.hstack()`水平合并两个数组时，新数组仍是一维的：'
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`numpy.dstack()` is a bit different: it stacks the arrays in sequence depth-wise
    along the third dimension so that the new array is three-dimensional.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.dstack()`有点不同：它沿三维方向在深度方向上按顺序堆叠数组，因此新数组是三维的。'
- en: 'In the following code, if you change the array size using `numpy.resize()`
    , you are enlarging the array, and it will repeat itself until it reaches the
    new size; otherwise, it will truncate the array to the new size. A point to note
    here is that `ndarray` also has the `resize()` operation, so you can also use
    it to change the size of your array by typing `x.resize(8)` in this example; however,
    you will notice that the enlarging part is filled with zero, not repeating the
    array itself. Also, you can''t use `ndarray.resize()` if you have assigned the
    array to another variable. `Numpy.resize()` creates a new array with specified
    shapes, which have fewer limitations than `ndarray.resize()` , and is a more preferable
    operation to use to change the size of your NumPy Array if necessary:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，如果您使用`numpy.resize()`更改数组大小，则您正在放大数组，它将重复自身直到达到新大小； 否则，它将把数组截断为新的大小。
    这里要注意的一点是`ndarray`也具有`resize()`操作，因此在此示例中，您还可以通过键入`x.resize(8)`来使用它来更改数组的大小； 但是，您会注意到放大部分填充了零，而不是重复数组本身。
    另外，如果您已将数组分配给另一个变量，则无法使用`ndarray.resize()`。 `Numpy.resize()`创建一个具有指定形状的新数组，该数组的限制比`ndarray.resize()`少，并且是在需要时用于更改
    NumPy 数组大小的更可取的操作：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A boolean mask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔掩码
- en: 'Indexing and slicing are quite handy and powerful in NumPy, but with the booling
    mask it gets even better! Let''s start by creating a boolean array first. Note
    that there is a special kind of array in NumPy named a *masked array* . Here,
    we are not talking about it but we''re also going to explain how to extend indexing
    and slicing with NumPy Arrays:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 中，索引和切片非常方便且功能强大，但是使用布尔掩码，效果会更好！ 让我们首先创建一个布尔数组。 请注意，NumPy 中有一种特殊的数组，称为*掩码数组*。
    在这里，我们不讨论它，但是我们还将解释如何使用 NumPy 数组扩展索引和切片：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can see from the preceding example that by applying the `<` logic sign that
    we applied scalars to a NumPy Array and the naming of a new array to `mask` ,
    it''s still vectorized and returns the `True` /`False ` boolean with the same
    shape of the variable `x` indicated which element in `x` meet the criteria:'
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中我们可以看到，通过应用`<`逻辑符号，我们将标量应用于 NumPy 数组，并将新数组命名为`mask`，它仍被向量化并返回与`x`形状相同的`True`/`False `布尔值，表示`x`中的哪个元素符合标准：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Using the mask, we gain the ability to access or replace any element value in
    our arrays without knowing their index. Needless to say, this can be done without
    using a `for` loop.
  prefs: []
  type: TYPE_NORMAL
  zh: 使用掩码，我们可以在不知道数组索引的情况下访问或替换数组中的任何元素值。 不用说，无需使用`for`循环即可完成此操作。
- en: 'The following example shows how to sum up the mask array, where `True` stands
    for one and `False` stands for 0\. We created 50 random values, ranging from 
    *0* to  *1* , and 20 of them are larger than  *0.5* ; however, this is quite expected
    for a random array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何对掩码数组求和，其中`True`代表 1，`False` 代表 0。我们创建了 50 个随机值，范围从`0`到`1`，其中 20 个大于`0.5`；
    但是，对于随机数组，这是非常期望的：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Helper functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 辅助函数
- en: 'Besides the `help()` and `dir()` functions in Python and other online documentation,
    NumPy also provides a helper function, `numpy.lookfor()` , to help you find the
    right function you need. The argument is a string, and it can be in the form of
    a function name or anything related to it. Let''s try to find out more about operations
    related to `resize` , which we took a look at in an earlier section:'
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Python 和其他在线文档中的`help()`和`dir()`函数之外，NumPy 还提供了一个辅助函数`numpy.lookfor()`来帮助您找到所需的正确函数。
    参数是一个字符串，可以采用函数名称或任何与之相关的形式。 让我们尝试查找与`resize`相关的操作的更多信息，我们在前面的部分中进行了介绍：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the basic operations of NumPy and its ufuncs. We
    took a look at the huge difference between NumPy operations and Python looping.
    We also took a look at how broadcasting works and what we should avoid. We tried
    to understand the concept of masking as well.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 NumPy 及其通用函数的基本操作。 我们看了 NumPy 操作和 Python 循环之间的巨大差异。 我们还研究了广播的工作原理以及应避免的情况。
    我们也试图理解掩蔽的概念。
- en: The best way to use NumPy Arrays is to eliminate loops as much as you can and
    use ufuncs in NumPy instead. Keep in mind the broadcasting rules and use them
    with care. Using slicing and indexing with masking makes your code more efficient.
    Most importantly, have fun while using it.
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy 数组的最好方法是尽可能地消除循环，并在 NumPy 中使用通用函数。 请记住广播规则，并谨慎使用它们。 将切片和索引与掩码一起使用可提高代码效率。
    最重要的是，在使用时要玩得开心。
- en: In the next few chapters, we will cover the core libs of NumPy, including date/time
    and a file I/O to help you extend your NumPy experience.
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将介绍 NumPy 的核心库，包括日期/时间和文件 I/O，以帮助您扩展 NumPy 的使用体验。
