- en: Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: We have developed an application with a significant code base. We tried it and
    we think that our application has no bugs. However, we can be wrong! Sometimes,
    even if we are sure that there are no bugs in our application, it can happen that
    a dangerous issue is waiting. How to prevent this? Simple! We will write tests
    that will check our code for us. In this chapter, we will introduce you to testing
    and give examples on how to set up, write, and run your tests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发了一个代码基础庞大的应用程序。我们尝试过它，我们认为我们的应用程序没有错误。但是，我们可能是错的！有时，即使我们确信我们的应用程序没有错误，也可能发生一个危险的问题在等待。如何预防这种情况？简单！我们将编写测试来为我们检查我们的代码。在本章中，我们将向您介绍测试，并举例说明如何设置、编写和运行您的测试。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to write your first test
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写你的第一个测试
- en: Using test suites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试套件
- en: How to test UI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试UI
- en: Running tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试
- en: Unit and instrumentation tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试和仪器测试
- en: Adding dependencies
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加依赖项
- en: 'To run tests, we must satisfy some dependencies. We will update our application
    configuration by extending `build.gradle` to support testing and to provide the
    classes we need. Open `build.gradle` and extend it as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试，我们必须满足一些依赖关系。我们将通过扩展`build.gradle`来更新我们的应用程序配置，以支持测试并提供我们需要的类。打开`build.gradle`并扩展如下：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will enable us to test content providers and use all related classes in
    our tests. If we do not enable this, we will get this error:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够测试内容提供程序并在我们的测试中使用所有相关的类。如果我们不启用此功能，我们将收到以下错误：
- en: '`Error: "Method ... not mocked"!`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “错误：“方法...未模拟”！”
- en: Updating folder structure
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新文件夹结构
- en: 'The folder structure and code in it must follow the convention about build
    variants. For our tests, we will use the following part of the structure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构和其中的代码必须遵循有关构建变体的约定。对于我们的测试，我们将使用结构的以下部分：
- en: 'For unit tests:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于单元测试：
- en: '![](img/d56a4a2f-44a1-42ee-ae48-190b8bae52f5.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d56a4a2f-44a1-42ee-ae48-190b8bae52f5.png)'
- en: 'For instrumentation tests:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于仪器测试：
- en: '![](img/48a54d74-4342-4be5-9366-c659aef0ebb0.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48a54d74-4342-4be5-9366-c659aef0ebb0.png)'
- en: Now we are ready to start writing our tests!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始编写我们的测试！
- en: Writing your first test
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你的第一个测试
- en: 'Locate the `root` package of your unit tests and create a new class called
    `NoteTest` as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 定位您的单元测试的`root`包，并创建一个名为`NoteTest`的新类，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The test is very simple. It creates a new instance of `Note`, triggers the
    CRUD operation in our content provider to store it, and verifies the ID received.
    To run the test, right-click on class from the Project pane and choose Run ''NoteTest'':'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试非常简单。它创建一个`Note`的新实例，触发我们的内容提供程序中的CRUD操作来存储它，并验证接收到的ID。要运行测试，请从项目窗格中右键单击类，然后选择“运行'NoteTest'”：
- en: '![](img/61355d1a-8c22-47c5-9985-3a5f0c6fcaf7.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61355d1a-8c22-47c5-9985-3a5f0c6fcaf7.png)'
- en: 'The unit test is executed like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是这样执行的：
- en: '![](img/21744fcd-f174-416e-9441-e658353e6f83.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21744fcd-f174-416e-9441-e658353e6f83.png)'
- en: 'As you can see, we successfully inserted our `Note` into the database. Now,
    after we created our first unit test, we will create our first instrumentation
    test. However, before we do that, let''s explain the difference between unit and
    instrumentation tests. Instrumentation tests run on a device or an emulator. They
    can be used when you need to test the code that has dependency on the Android
    Context. Let''s test our main service. Create a new class inside the instrumentation
    tests `root` package called `MainServiceTest`, as shown here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们成功地将我们的`Note`插入到数据库中。现在，在我们创建了第一个单元测试之后，我们将创建我们的第一个仪器测试。但在我们这样做之前，让我们解释一下单元测试和仪器测试之间的区别。仪器测试在设备或模拟器上运行。当您需要测试依赖于Android上下文的代码时，可以使用它们。让我们测试我们的主服务。在仪器测试的`root`包中创建一个名为`MainServiceTest`的新类，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To run it, create a new configuration as it''s illustrated in the following
    screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行它，请创建一个新的配置，如下面的截图所示：
- en: '![](img/85a20a53-90ab-485d-941d-ca0f27187f4c.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85a20a53-90ab-485d-941d-ca0f27187f4c.png)'
- en: 'Run the newly created configuration. You will be asked to choose the Android
    device or the emulator instance on which you will run the test:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行新创建的配置。您将被要求选择Android设备或模拟器实例，以在其上运行测试：
- en: '![](img/458df6df-5f0c-47a8-b2e2-bb9485cb9004.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/458df6df-5f0c-47a8-b2e2-bb9485cb9004.png)'
- en: Wait until the test is executed. Congratulations! You have successfully created
    and run the instrumentation test. Now, for your exercise, define as many tests
    as you can to cover all the code your application has. Pay attention if the test
    should be a unit or an instrumentation test.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 等待测试执行。恭喜！您已成功创建并运行了仪器测试。现在，为了练习，尽可能定义多个测试，以覆盖应用程序的所有代码。注意测试应该是单元测试还是仪器测试。
- en: Using test suites
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用测试套件
- en: 'A **test suite** is a collection of tests. We will show you how to create a
    test collection. Create a test to represent the container for collection. Let''s
    call it `MainSuite`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试套件**是一组测试。我们将向您展示如何创建测试集合。创建一个测试来代表集合的容器。让我们称之为`MainSuite`：'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Repeat the procedure we did for the instrumentation test from our example to
    run your test suite.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重复我们在示例中为仪器测试所做的步骤来运行你的测试套件。
- en: How to test UI
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何测试UI
- en: Testing the UI can help us prevent the user from discovering unexpected situations,
    crashing the application, or getting poor performance. We strongly recommend you
    to write UI tests so you are sure your UI performs as expected. For this purpose,
    we will introduce the Espresso Framework.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 测试UI可以帮助我们防止用户发现意外情况、使应用崩溃或性能不佳。我们强烈建议您编写UI测试，以确保您的UI表现如预期。为此，我们将介绍Espresso框架。
- en: 'First of all, we will add the dependency for it as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加以下依赖项：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before you write and run Espresso tests, disable animations on your testing
    device because this will affect tests, expected timings, and behaviors. We strongly
    recommend you to do that! On your device, go to Settings | Developer options |
    and turn off the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写和运行Espresso测试之前，在测试设备上禁用动画，因为这会影响测试、预期时间和行为。我们强烈建议您这样做！在您的设备上，转到设置|开发者选项|并关闭以下选项：
- en: Window animation scale
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口动画比例
- en: Transition animation scale
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡动画比例
- en: Animator duration scale
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画器持续时间比例
- en: 'Now you are ready to write Espresso tests. Learning the Espresso Framework
    can take some effort. It can be time consuming for you, but its benefit will be
    huge! Let''s take a look at the example of one Espresso test:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好编写Espresso测试了。学习Espresso框架可能需要一些努力。对您来说可能会耗费一些时间，但它的好处将是巨大的！让我们来看一个Espresso测试的示例：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We defined that we will test the `MainActivity` class. After the test triggers
    the toolbar button click, we check if the dialog is present. We do that by checking
    the label availability--`"My dialog"`. Learning the entire Espresso Framework
    is beyond this book, but at least we gave you a hint of possibilities. Invest
    some time in learning it because it will definitely help you!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定我们将测试`MainActivity`类。在测试触发工具栏按钮点击后，我们检查对话框是否存在。我们通过检查标签可用性--`"My dialog"`来做到这一点。学习整个Espresso框架超出了本书的范围，但至少我们给了您一些可能性的提示。花些时间学习它，因为它肯定会帮助您！
- en: Running tests
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试
- en: We already executed our tests through the Android Studio. However, once you
    write them all, you will want to run them all at once. You can run all the unit
    tests for all build variants, but only for a certain flavor or build type. The
    same applies for instrumentation tests. We will show you several examples to do
    so using existing build variants for the Journaler application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过Android Studio执行了我们的测试。但是，一旦您编写了所有测试，您将希望一次运行它们所有。您可以为所有构建变体运行所有单元测试，但只能为特定风格或构建类型运行。插装测试也是如此。我们将向您展示使用Journaler应用程序的现有构建变体来执行此操作的几个示例。
- en: Running unit tests
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行单元测试
- en: 'Open the terminal and navigate to the `root` package of the project. To run
    all unit tests, execute the following command line:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并导航到项目的`root`包。要运行所有单元测试，请执行以下命令行：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will run all the unit tests we wrote. The testing will fail since `NoteTest`
    uses content provider. For this, it's required to be executed with the proper
    `Runner` class. Android Studio, by default, does that. However, since this is
    a unit test, and we execute it from the terminal, testing will fail. You will
    agree that this test is actually something that has to be considered as instrumentation
    since it uses the Android Framework components. Common practice is that if your
    class relies on the Android Framework components, it has to be executed as instrumentation.
    Because of this, we will move `NoteTest` into an instrumentation tests directory.
    Now we don't have any unit test. Create at least one that does not depend on the
    Android Framework components. You can move the existing `DummyTest` for that purpose
    in the unit tests folder. Drag and drop it from your IDE and rerun the tests with
    the same command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行我们编写的所有单元测试。测试将失败，因为`NoteTest`使用内容提供程序。为此，需要使用适当的`Runner`类来执行。默认情况下，Android
    Studio会这样做。但是，由于这是一个单元测试，并且我们是从终端执行它，测试将失败。您会同意这个测试实际上是必须考虑为插装测试，因为它使用了Android框架组件。通常做法是，如果您的类依赖于Android框架组件，它必须作为插装测试来执行。因此，我们将`NoteTest`移动到插装测试目录中。现在我们没有任何单元测试。至少创建一个不依赖于Android框架组件的单元测试。您可以将现有的`DummyTest`移动到单元测试文件夹中以实现这一目的。从您的IDE中拖放它，并使用相同的命令重新运行测试。
- en: 'To run all tests for the build variant, execute the following command line:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行构建变体的所有测试，请执行以下命令行：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We execute tests for the `Complete` flavor and the `Debug` build type.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`Complete`风格和`Debug`构建类型执行测试。
- en: Running instrumentation tests
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行插装测试
- en: 'To run all instrumentation tests, use the following command line:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行所有插装测试，请使用以下命令行：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Its precondition is to have a device connected or emulator running. If you have
    more than one device or emulator present, all of them will run tests.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它的前提是已连接设备或正在运行的模拟器。如果有多台设备或模拟器存在，它们都将运行测试。
- en: 'To run the instrumentation test for the build variant, use the following command
    line:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行构建变体的插装测试，请使用以下命令行：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will trigger all instrumentation tests for the `Connected` flavor with
    the `Debug` build type.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将触发`Connected`风格的所有插装测试，使用`Debug`构建类型。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to write and run tests for our application.
    This is one more step toward production. We established a well-written and bug-free
    product. Soon, we will actually publish it. Be patient because that moment is
    coming!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何为我们的应用程序编写和运行测试。这是迈向生产的又一步。我们建立了一个书写良好且无bug的产品。很快，我们将实际发布它。请耐心等待，因为那一刻即将到来！
