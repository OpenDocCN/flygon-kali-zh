["```py\n    $ [sudo] apt-get install python\n    $ [sudo] apt-get install python-dev\n\n    ```", "```py\n    $ [sudo] port install python27\n\n    ```", "```py\n    $ python\n\n    ```", "```py\n    >>>\n\n    ```", "```py\n    >>> help()\n\n    ```", "```py\n    help>\n\n    ```", "```py\n    >>>\n\n    ```", "```py\n    >>> 2 + 2\n    4\n\n    ```", "```py\n    >>> 2 * 2\n    4\n\n    ```", "```py\n    >>> 2/2\n    1\n\n    ```", "```py\n    >>> 3/2\n    1\n\n    ```", "```py\n    >>> 2 ** 3\n    8\n\n    ```", "```py\n    >>> var = 2\n    >>> var\n    2\n\n    ```", "```py\n    >>> var = [2, 'spam', 'eggs']\n    >>> var\n    [2, 'spam', 'eggs']\n\n    ```", "```py\n    >>> var\n    ['ham', 'spam', 'eggs']\n\n    ```", "```py\n    >>> a = 1\n    >>> b = 2\n    >>> a, b = b, a\n    >>> a\n    2\n    >>> b\n    1\n\n    ```", "```py\n    >>> print 'Hello'\n    Hello\n\n    ```", "```py\n    >>> print('Hello')\n    Hello\n\n    ```", "```py\n    >>> from __future__ import print_function\n\n    ```", "```py\n    >>> print 'Hello'\n     File \"<stdin>\", line 1\n     print 'Hello'\n     ^\n    SyntaxError: invalid syntax\n\n    ```", "```py\n    >>> print()\n\n    ```", "```py\n    >>> print(2, 'ham', 'egg')\n    2 ham egg\n\n    ```", "```py\n    >>> help(print)\n\n    ```", "```py\n    >>> # Comment from hash to end of line\n\n    ```", "```py\n    >>> astring = '# This is not a comment'\n    >>> astring\n    '# This is not a comment'\n\n    ```", "```py\n    \"\"\"\n     Chapter 1 of NumPy Beginners Guide.\n     Another line of comment.\n    \"\"\"\n\n    ```", "```py\n    >>> if 42 < 0:\n    ...     print('Negative')\n    ... else:\n    ...     print('Not negative')\n    ...\n    Not negative\n\n    ```", "```py\n    >>> a = -42\n    >>> if a < 0:\n    ...     print('Negative')\n    ... elif a == 0:\n    ...     print('Zero')\n    ... else:\n    ...     print('Positive')\n    ...\n    Negative\n\n    ```", "```py\n    >>> food = ['ham', 'egg', 'spam']\n    >>> for snack in food:\n    ...     print(snack)\n    ...\n    ham\n    egg\n    spam\n\n    ```", "```py\n    >>> for i in range(1, 9, 2):\n    ...     print(i)\n    ...\n    1\n    3\n    5\n    7\n\n    ```", "```py\n    >>> for i in range(9):\n    ...     print(i)\n    ...     if i == 3:\n    ...     print('Three')\n    ...     break\n    ...\n    0\n    1\n    2\n    3\n    Three\n\n    ```", "```py\n    >>> for i in range(5):\n    ...     if i == 3:\n    ...             print('Three')\n    ...             continue\n    ...     print(i)\n    ...\n    0\n    1\n    2\n    Three\n    4\n\n    ```", "```py\n    >>> for i in range(5):\n    ...     print(i)\n    ... else:\n    ...     print(i, 'in else clause')\n    ...\n    0\n    1\n    2\n    3\n    4\n    (4, 'in else clause')\n\n    ```", "```py\n    >>> def print_hello(name):\n    ...     print('Hello ' + name)\n    ...\n\n    ```", "```py\n    >>> print_hello('Ivan')\n    Hello Ivan\n\n    ```", "```py\n    >>> def print_hello(name='Ivan'):\n    ...     print('Hello ' + name)\n    ...\n    >>> print_hello()\n    Hello Ivan\n\n    ```", "```py\n    >>> def double(number):\n    ...     return 2 * number\n    ...\n    >>> double(3)\n    6\n\n    ```", "```py\n    >>> import mymodule\n\n    ```", "```py\n    >>> import math\n    >>> dir(math)\n    ['__doc__', '__file__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\n\n    ```", "```py\n    >>> math.pow(2, 3)\n    8.0\n\n    ```", "```py\n    >>> from math import pow\n    >>> pow(2, 3)\n    8.0\n\n    ```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    $ yum install python-numpy\n\n    ```", "```py\n    $ urpmi python-numpy\n\n    ```", "```py\n    $ [sudo] emerge numpy\n\n    ```", "```py\n    $ [sudo] apt-get install python-numpy\n\n    ```", "```py\n    $ [sudo] port install py-numpy py-scipy py-matplotlib py-ipython\n\n    ```", "```py\n    $ fink install scipy-core-py27 scipy-py27 matplotlib-py27\n\n    ```", "```py\n$ git clone git://github.com/numpy/numpy.git numpy\n\n```", "```py\n$ python setup.py build\n$ [sudo] python setup.py install --prefix=/usr/local\n\n```", "```py\n    def pythonsum(n):\n       a = range(n)\n       b = range(n)\n       c = []\n\n       for i in range(len(a)):\n           a[i] = i ** 2\n           b[i] = i ** 3\n           c.append(a[i] + b[i])\n\n       return c\n    ```", "```py\n    def numpysum(n):\n      a = np.arange(n) ** 2\n      b = np.arange(n) ** 3\n      c = a + b\n\n      return c\n    ```", "```py\n##!/usr/bin/env/python\n\nfrom __future__ import print_function\nimport sys\nfrom datetime import datetime\nimport numpy as np\n\n\"\"\"\n Chapter 1 of NumPy Beginners Guide.\n This program demonstrates vector addition the Python way.\n Run from the command line as follows\n\n  python vectorsum.py n\n\n where n is an integer that specifies the size of the vectors.\n\n The first vector to be added contains the squares of 0 up to n.\n The second vector contains the cubes of 0 up to n.\n The program prints the last 2 elements of the sum and the elapsed time.\n\"\"\"\n\ndef numpysum(n):\n   a = np.arange(n) ** 2\n   b = np.arange(n) ** 3\n   c = a + b\n\n   return c\n\ndef pythonsum(n):\n   a = range(n)\n   b = range(n)\n   c = []\n\n   for i in range(len(a)):\n       a[i] = i ** 2\n       b[i] = i ** 3\n       c.append(a[i] + b[i])\n\n   return c\n\nsize = int(sys.argv[1])\n\nstart = datetime.now()\nc = pythonsum(size)\ndelta = datetime.now() - start\nprint(\"The last 2 elements of the sum\", c[-2:])\nprint(\"PythonSum elapsed time in microseconds\", delta.microseconds)\n\nstart = datetime.now()\nc = numpysum(size)\ndelta = datetime.now() - start\nprint(\"The last 2 elements of the sum\", c[-2:])\nprint(\"NumPySum elapsed time in microseconds\", delta.microseconds)\n```", "```py\n$ python vectorsum.py 1000\nThe last 2 elements of the sum [995007996, 998001000]\nPythonSum elapsed time in microseconds 707\nThe last 2 elements of the sum [995007996 998001000]\nNumPySum elapsed time in microseconds 171\n$ python vectorsum.py 2000\nThe last 2 elements of the sum [7980015996, 7992002000]\nPythonSum elapsed time in microseconds 1420\nThe last 2 elements of the sum [7980015996 7992002000]\nNumPySum elapsed time in microseconds 168\n$ python vectorsum.py 4000\nThe last 2 elements of the sum [63920031996, 63968004000]\nPythonSum elapsed time in microseconds 2829\nThe last 2 elements of the sum [63920031996 63968004000]\nNumPySum elapsed time in microseconds 274\n\n```", "```py\n$ ipython --pylab\nIPython 2.4.1 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\nUsing matplotlib backend: MacOSX\n\nIn [1]: quit()\n\n```", "```py\nIn [1]: %logstart\nActivating auto-logging. Current session state plus future input saved.\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active\n\n```", "```py\nIn [1]: ls\nREADME        vectorsum.py\nIn [2]: %run -i vectorsum.py 1000\n\n```", "```py\nIn [2]: %run -d vectorsum.py 1000\n*** Blank or comment\n*** Blank or comment\nBreakpoint 1 at: /Users/\u2026/vectorsum.py:3\n\n```", "```py\n><string>(1)<module>()\nipdb> c\n> /Users/\u2026/vectorsum.py(3)<module>()\n 2\n1---> 3 import sys\n 4 from datetime import datetime\nipdb> n\n>\n/Users/\u2026/vectorsum.py(4)<module>()\n1     3 import sys\n----> 4 from datetime import datetime\n 5 import numpy\nipdb> n\n> /Users/\u2026/vectorsum.py(5)<module>()\n 4 from datetime import datetime\n----> 5 import numpy\n 6\nipdb> quit\n\n```", "```py\nIn [4]: %run -p vectorsum.py 1000\n 1058 function calls (1054 primitive calls) in 0.002 CPU seconds\n Ordered by: internal time\nncalls tottime percall cumtime percall filename:lineno(function)\n1 0.001    0.001   0.001    0.001 vectorsum.py:28(pythonsum)\n1 0.001    0.001   0.002    0.002 {execfile}\n1000 0.000    0.0000.0000.000 {method 'append' of 'list' objects}\n1 0.000    0.000    0.002    0.002 vectorsum.py:3(<module>)\n1 0.000    0.0000.0000.000 vectorsum.py:21(numpysum)\n3    0.000    0.0000.0000.000 {range}\n1    0.000    0.0000.0000.000 arrayprint.py:175(_array2string)\n3/1    0.000    0.0000.0000.000 arrayprint.py:246(array2string)\n2    0.000    0.0000.0000.000 {method 'reduce' of 'numpy.ufunc' objects}\n4    0.000    0.0000.0000.000 {built-in method now}\n2    0.000    0.0000.0000.000 arrayprint.py:486(_formatInteger)\n2    0.000    0.0000.0000.000 {numpy.core.multiarray.arange}\n1    0.000    0.0000.0000.000 arrayprint.py:320(_formatArray)\n3/1    0.000    0.0000.0000.000 numeric.py:1390(array_str)\n1    0.000    0.0000.0000.000 numeric.py:216(asarray)\n2    0.000    0.0000.0000.000 arrayprint.py:312(_extendLine)\n1    0.000    0.0000.0000.000 fromnumeric.py:1043(ravel)\n2    0.000    0.0000.0000.000 arrayprint.py:208(<lambda>)\n1    0.000    0.000    0.002    0.002<string>:1(<module>)\n11    0.000    0.0000.0000.000 {len}\n2    0.000    0.0000.0000.000 {isinstance}\n1    0.000    0.0000.0000.000 {reduce}\n1    0.000    0.0000.0000.000 {method 'ravel' of 'numpy.ndarray' objects}\n4    0.000    0.0000.0000.000 {method 'rstrip' of 'str' objects}\n3    0.000    0.0000.0000.000 {issubclass}\n2    0.000    0.0000.0000.000 {method 'item' of 'numpy.ndarray' objects}\n1    0.000    0.0000.0000.000 {max}\n1    0.000    0.0000.0000.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n```", "```py\nIn [2]: a=2+2\nIn [3]: a\nOut[3]: 4\nIn [4]: %hist\n1: _ip.magic(\"hist \")\n2: a=2+2\n3: a\n\n```", "```py\nIn [2]: help ar<Tab>\n\n```", "```py\nIn [2]: help arange\n\n```", "```py\nIn [3]: arange?\n\n```"]