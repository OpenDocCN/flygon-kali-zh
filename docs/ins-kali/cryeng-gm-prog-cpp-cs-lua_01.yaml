- en: Chapter 1. Introduction and Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍和设置
- en: CryENGINE is known as one of the most extensible engines available due to its
    ability to portray a vast variety of impressive visuals and gameplay. This makes
    it an invaluable tool at the hand of a programmer, where the only limit is one's
    creativity.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE因其展示各种令人印象深刻的视觉效果和游戏玩法而被认为是最具可扩展性的引擎之一。这使得它成为程序员手中的无价工具，唯一的限制就是创造力。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing **Visual Studio Express 2012 for Windows Desktop**
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装**Visual Studio Express 2012 for Windows Desktop**
- en: Downloading the CryENGINE sample installation or using a custom engine install
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载CryENGINE示例安装或使用自定义引擎安装
- en: Registering an account at [http://www.crydev.net](http://www.crydev.net), the
    official CryENGINE development portal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://www.crydev.net](http://www.crydev.net)注册账户，这是官方的CryENGINE开发门户网站
- en: Compiling a stripped-down CryGame library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译精简的CryGame库
- en: Attaching and utilizing the debugger
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加和使用调试器
- en: Installing Visual Studio Express 2012
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Visual Studio Express 2012
- en: In order to compile the game code, you will need a copy of Visual Studio. For
    this demonstration, we'll be using Visual Studio Express 2012 for Windows Desktop.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编译游戏代码，您需要一份Visual Studio的副本。在本演示中，我们将使用Visual Studio Express 2012 for Windows
    Desktop。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you already have Visual Studio 2012 installed, you may skip this step.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Visual Studio 2012，则可以跳过此步骤。
- en: '![Installing Visual Studio Express 2012](img/5909_01_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![安装Visual Studio Express 2012](img/5909_01_01.jpg)'
- en: 'To install Visual Studio, follow the given steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Visual Studio，请按照以下步骤操作：
- en: Visit [http://www.microsoft.com/visualstudio/](http://www.microsoft.com/visualstudio/)
    and download Visual Studio Express 2012 for Windows Desktop.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://www.microsoft.com/visualstudio/](http://www.microsoft.com/visualstudio/)，然后下载Visual
    Studio Express 2012 for Windows Desktop。
- en: After downloading the executable, install the application and proceed to the
    next step after restarting your computer.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载可执行文件后，安装该应用程序，并在重新启动计算机后继续下一步。
- en: Choosing your CryENGINE installation type
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择CryENGINE安装类型
- en: Now that we have Visual Studio installed, we'll need to download a version of
    CryENGINE to develop on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Visual Studio，我们需要下载一个CryENGINE版本进行开发。
- en: We have created a stripped-down sample installation for the book, which is recommended
    for users who are just starting out with the engine. To download it, see the following
    *Downloading the book's CryENGINE sample installation* section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书创建了一个精简的示例安装，推荐给刚开始使用引擎的用户。要下载，请参阅*下载本书的CryENGINE示例安装*部分。
- en: If you would rather use another build of CryENGINE, such as the latest Free
    SDK release, please see the *Using a custom or newer CryENGINE installation* section
    later in this chapter. This section will cover integrating CryMono on your own.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更愿意使用CryENGINE的其他版本，比如最新的Free SDK版本，请参阅本章后面的*使用自定义或更新的CryENGINE安装*部分。本节将介绍如何自行集成CryMono。
- en: Downloading the book's CryENGINE sample installation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载本书的CryENGINE示例安装
- en: For this book, we will be using a custom CryENGINE sample as a base for learning
    the workings of the engine. Most exercises in the book depend on this sample;
    however, the working knowledge you get from this can be applied to the default
    CryENGINE Free SDK (available at [http://www.crydev.net](http://www.crydev.net)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们将使用自定义的CryENGINE示例作为学习引擎工作原理的基础。本书中的大多数练习都依赖于这个示例；然而，您从中获得的工作知识可以应用于默认的CryENGINE
    Free SDK（可在[http://www.crydev.net](http://www.crydev.net)上获得）。
- en: 'To download the sample installation, follow these steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载示例安装，请按照以下步骤操作：
- en: Visit [https://github.com/inkdev/CryENGINE-Game-Programming-Sample](https://github.com/inkdev/CryENGINE-Game-Programming-Sample)
    and click on the **Download ZIP** button in order to download a compressed archive
    containing the sample.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://github.com/inkdev/CryENGINE-Game-Programming-Sample](https://github.com/inkdev/CryENGINE-Game-Programming-Sample)，然后单击**Download
    ZIP**按钮，以下载包含示例的压缩存档。
- en: Once downloaded, extract the contents of the archive to a folder of your choice.
    For the sake of the example, we will be extracting it to `C:\Crytek\CryENGINE-Programming-Sample`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，将存档内容提取到您选择的文件夹中。为了示例，我们将其提取到`C:\Crytek\CryENGINE-Programming-Sample`。
- en: What just happened?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You should now have a copy of our sample CryENGINE installation. You can now
    run and view the sample content which we will be using for the most part of this
    book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该有我们示例CryENGINE安装的副本。您现在可以运行和查看示例内容，这将是本书大部分内容的使用内容。
- en: Using a custom or newer CryENGINE installation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义或更新的CryENGINE安装
- en: This section helps out the readers who choose to use custom or newer builds
    of the engine. If you are unsure of this process, we recommend reading the *Downloading
    the book's CryENGINE sample installation* section in this chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本节帮助选择使用自定义或更新版本的引擎的读者。如果您对此过程不确定，我们建议阅读本章中的*下载本书的CryENGINE示例安装*部分。
- en: Verifying that the build is functional
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证构建是否可用
- en: Before starting, you should verify that your version of CryENGINE is functional
    so that you can use it for running and creating code based on this book's chapters.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您应该验证您的CryENGINE版本是否可用，以便您可以在本书的章节中运行和创建基于代码。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if you are using an older or newer version of the engine, certain
    chapters may provide examples and information on changed systems. Keep this in
    mind, and refer to the sample mentioned previously for the optimal learning experience.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您使用的是旧版或新版引擎，某些章节可能提供了更改系统的示例和信息。请记住这一点，并参考前面提到的示例，以获得最佳的学习体验。
- en: A good way to check this is by starting the Editor and Launcher applications
    and checking whether the engine behaves as expected.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个检查的好方法是启动编辑器和启动器应用程序，并检查引擎是否按预期运行。
- en: Integrating CryMono (C# support)
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成CryMono（C#支持）
- en: If you're interested in using the sample code and chapter contents written with
    C# in mind, you'll need to integrate the third-party CryMono plugin into your
    CryENGINE installation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣使用以C#为主题编写的示例代码和章节内容，您需要将第三方CryMono插件集成到CryENGINE安装中。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that CryMono is integrated by default in the sample we created specifically
    for this book.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，CryMono默认集成在我们专门为本书创建的示例中。
- en: To begin integrating CryMono, open the `Code` folder present in the engine root
    folder. We'll be placing the source files here, inside a subfolder called `CryMono/`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始集成CryMono，请打开引擎根文件夹中的`Code`文件夹。我们将把源文件放在这里，放在一个名为`CryMono/`的子文件夹中。
- en: To download the source code, visit [https://github.com/inkdev/CryMono](https://github.com/inkdev/CryMono)
    and click on **Download Zip** (or **Clone in Desktop** if you prefer using your
    Git revision control client).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载源代码，请访问[https://github.com/inkdev/CryMono](https://github.com/inkdev/CryMono)并单击**Download
    Zip**（或者如果您更喜欢使用Git版本控制客户端，则单击**Clone in Desktop**）。
- en: Once downloaded, copy the contents into the `Code/CryMono` folder we mentioned
    earlier. If the folder does not exist, create it first.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，将内容复制到我们之前提到的`Code/CryMono`文件夹中。如果该文件夹不存在，请先创建它。
- en: 'When the files have been successfully moved, your folder structure should look
    similar to this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 文件成功移动后，您的文件夹结构应该类似于这样：
- en: '![Integrating CryMono (C# support)](img/5909_01_Folder_Structure.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![集成CryMono（C#支持）](img/5909_01_Folder_Structure.jpg)'
- en: Compiling the CryMono project
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译CryMono项目
- en: Now that we have the CryMono source code, we'll need to compile it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了CryMono源代码，我们需要编译它。
- en: To start, open `Code/CryMono/Solutions/CryMono.sln` using Visual Studio.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用Visual Studio打开`Code/CryMono/Solutions/CryMono.sln`。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure to use `CryMono.sln` and not `CryMono Full.sln`. The latter is only
    used when you need to rebuild the entire Mono runtime, which ships precompiled
    with the CryMono repository.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用`CryMono.sln`而不是`CryMono Full.sln`。后者仅在需要重新构建整个Mono运行时时使用，该运行时已经与CryMono存储库预编译。
- en: Before we compile, we'll need to modify the engine's `SSystemGlobalEnvironment`
    struct (this is exposed using the global `gEnv` pointer).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译之前，我们需要修改引擎的`SSystemGlobalEnvironment`结构（这是使用全局`gEnv`指针公开的）。
- en: To do so, open `ISystem.h` in the `Code/CryEngine/CryCommon/` folder. Find the
    struct's definition by searching for the struct `SSystemGlobalEnvironment`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请在`Code/CryEngine/CryCommon/`文件夹中打开`ISystem.h`。通过搜索结构`SSystemGlobalEnvironment`的定义来找到结构的定义。
- en: 'Then add the following code to the very end of the struct''s members and functions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将以下代码添加到结构的成员和函数的最后：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Modifying interfaces is not recommended if you do not have full engine source,
    as other engine modules have been compiled with the default interfaces in mind.
    However, appending to the end of this struct is mostly harmless.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议修改接口，如果您没有完整的引擎源代码，因为其他引擎模块是使用默认接口编译的。但是，在这个结构的末尾添加是相对无害的。
- en: Once done, open up the instance of Visual Studio where you opened `CryMono.sln`
    and start compiling.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，打开您打开`CryMono.sln`的Visual Studio实例并开始编译。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The automated post-build step in the project should automatically move the compiled
    files to your build's `Bin32` folder following a successful compilation pass.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中的自动化后构建步骤应在成功编译后自动将编译文件移动到构建的`Bin32`文件夹中。
- en: To verify that CryMono was compiled successfully, search for `CryMono.dll` in
    your `Bin32` folder.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证CryMono是否成功编译，请在您的`Bin32`文件夹中搜索`CryMono.dll`。
- en: Loading and initializing CryMono via the CryGame.dll library
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过CryGame.dll库加载和初始化CryMono
- en: Now that we have the CryMono binaries present in our `Bin32` folder, we'll just
    have to load it during game startup. This is done via the CryGame project, via
    the `CGameStartup` class.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在我们的`Bin32`文件夹中有了CryMono二进制文件，我们只需要在游戏启动时加载它。这是通过CryGame项目，通过`CGameStartup`类来完成的。
- en: To start, open your CryEngine or CryGame solution file (.`sln`) present in `Code/Solutions/`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开位于`Code/Solutions/`中的`Code/Solutions/`中的CryEngine或CryGame解决方案文件（.`sln`）。
- en: Including the CryMono interface folder
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 包括CryMono接口文件夹
- en: Before we modify the game startup code, we'll need to tell the compiler where
    to find the CryMono interfaces.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改游戏启动代码之前，我们需要告诉编译器在哪里找到CryMono接口。
- en: 'Start by right-clicking on the CryGame project in Visual Studio''s **Solution
    Explorer** and select **Properties**. This should bring up the following **CryGame
    Property Pages** window:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Visual Studio的**Solution Explorer**中右键单击CryGame项目，然后选择**Properties**。这将显示以下**CryGame
    Property Pages**窗口：
- en: '![Including the CryMono interface folder](img/5909_01_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![包括CryMono接口文件夹](img/5909_01_02.jpg)'
- en: 'Now, click on **C/C++** and select **General**. This will bring up a screen
    of general compiler settings, which we''ll use to add an additional include folder
    as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**C/C++**并选择**General**。这将显示一屏幕一般的编译器设置，我们将使用它来添加一个额外的包含文件夹，如下面的屏幕截图所示：
- en: '![Including the CryMono interface folder](img/5909_01_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![包括CryMono接口文件夹](img/5909_01_03.jpg)'
- en: Now all we have to do is add `..\..\CryMono\MonoDll\Headers` to the **Additional
    Include Directories** menu. This will tell the compiler to search CryMono's `Headers`
    folder when the `#include` macro is used, allowing us to find the CryMono C++
    interfaces.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要将`..\..\CryMono\MonoDll\Headers`添加到**Additional Include Directories**菜单中。这将告诉编译器在使用`#include`宏时搜索CryMono的`Headers`文件夹，从而使我们能够找到CryMono的C++接口。
- en: Initializing CryMono at start up
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在启动时初始化CryMono
- en: 'Open `GameStartup.h` in the CryGame project and add the following to the bottom
    of the class declaration:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在CryGame项目中打开`GameStartup.h`，并将以下内容添加到类声明的底部：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then open `GameStartup.cpp` and add the following before the `CGameStartup`
    constructor:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后打开`GameStartup.cpp`并在`CGameStartup`构造函数之前添加以下内容：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now navigate to the `CGameStartup` destructor and add the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在导航到`CGameStartup`析构函数并添加以下代码：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now navigate to the `CGameStartup::Init` function declaration, and add the
    following prior to the `REGISTER_COMMAND("g_loadMod", RequestLoadMod,VF_NULL,"");`
    snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在导航到`CGameStartup::Init`函数声明，并在`REGISTER_COMMAND("g_loadMod", RequestLoadMod,VF_NULL,"");`片段之前添加以下内容：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now all we have to do is compile CryGame in order to have CryMono loaded and
    initialized at startup.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需编译CryGame，就可以在启动时加载和初始化CryMono。
- en: Registering flow nodes
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注册流节点
- en: Due to a recent change in the flow system, flow nodes have to be registered
    at a certain point during game startup. To make sure that our C# nodes are registered,
    we'll need to call `IMonoScriptSysetm::RegisterFlownodes` from `IGame::RegisterGameFlowNodes`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于流系统的最近更改，流节点必须在游戏启动的某个时刻注册。为了确保我们的C#节点已注册，我们需要从`IGame::RegisterGameFlowNodes`中调用`IMonoScriptSysetm::RegisterFlownodes`。
- en: 'To do this, open `Game.cpp` and add the following inside the `CGame::RegisterGameFlowNodes`
    function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，打开`Game.cpp`并在`CGame::RegisterGameFlowNodes`函数内添加以下内容：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, after compiling, all managed flow nodes should appear in the Flowgraph
    Editor.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在编译后，所有托管流节点应该出现在Flowgraph编辑器中。
- en: Registering your CryDev account
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册您的CryDev帐户
- en: 'The CryENGINE Free SDK requires a CryDev account in order for the application''s
    to launch. This can be easily retrieved via [http://www.crydev.net](http://www.crydev.net),
    by following these steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE免费SDK需要CryDev帐户才能启动应用程序。这可以通过[http://www.crydev.net](http://www.crydev.net)轻松获取，方法如下：
- en: Visit [http://www.crydev.net](http://www.crydev.net) in the browser of your
    choice.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择的浏览器中访问[http://www.crydev.net](http://www.crydev.net)。
- en: Click on **Register** in the upper-right corner.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击右上角的**注册**。
- en: Read and accept the terms of usage.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读并接受使用条款。
- en: Select your username data.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的用户名数据。
- en: What just happened?
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You now have your own CryDev user account. While running the CryENGINE Free
    SDK applications (see *Running the sample application*), you will be prompted
    to log in with the details you have just registered.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在拥有自己的CryDev用户帐户。在运行CryENGINE免费SDK应用程序（参见*运行示例应用程序*）时，您将被提示使用刚刚注册的详细信息登录。
- en: Running the sample application
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行示例应用程序
- en: Before we get started with building the game project, we'll go through the basics
    of the default CryENGINE applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建游戏项目之前，我们将介绍默认CryENGINE应用程序的基础知识。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All executables are contained inside either the `Bin32` or `Bin64` folders,
    depending on the build architecture. However, our sample only includes a `Bin32`
    folder to keep things simple and the build repository small in size.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可执行文件都包含在`Bin32`或`Bin64`文件夹中，具体取决于构建架构。但是，我们的示例只包括一个`Bin32`文件夹，以保持简单和构建存储库的大小。
- en: Editor
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑器
- en: This is the main application that developers will use. The Editor serves as
    the direct interface to the engine, used for all kinds of developer-specific tasks
    such as level design and character setup.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是开发人员将使用的主要应用程序。编辑器作为引擎的直接接口，用于各种开发人员特定的任务，如关卡设计和角色设置。
- en: The Editor supports **WYSIWYP** (**What You See Is What You Play**) functionality,
    which allows developers to preview the game by hitting the shortcut *Ctrl* + *G*,
    or by navigating to the **Game** menu, and choosing **Switch to Game**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器支持**WYSIWYP**（**所见即所得**）功能，允许开发人员通过按下快捷键*Ctrl* + *G*或导航到**游戏**菜单，并选择**切换到游戏**来预览游戏。
- en: Starting the Editor
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动编辑器
- en: Open the main sample folder, and navigate to the `Bin32` folder. Once there,
    start `Editor.exe`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 打开主示例文件夹，并导航到`Bin32`文件夹。一旦到达那里，启动`Editor.exe`。
- en: '![Starting the Editor](img/5909_01_04.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![启动编辑器](img/5909_01_04.jpg)'
- en: When the Editor has finished loading, you will be greeted by the Sandbox interface,
    which can be used to create most visual aspects of the game (excluding models
    and textures).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器加载完成后，您将看到Sandbox界面，可用于创建游戏的大多数视觉方面（不包括模型和纹理）。
- en: To create a new level, open the **File** menu, and select the **New** option.
    This should present you with the **New Level** message box. Simply specify your
    level name and click on **OK**, and the Editor will create and load your empty
    level.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新关卡，打开**文件**菜单，并选择**新建**选项。这应该呈现给您**新建关卡**消息框。只需指定您的关卡名称，然后单击**确定**，编辑器将创建并加载您的空关卡。
- en: To load an existing level, open the **File** menu, and select the **Open** option.
    This presents you with the **Open Level** message box. Select your level and click
    on **Open** to have your level loaded.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载现有关卡，打开**文件**菜单，并选择**打开**选项。这将呈现给您**打开关卡**消息框。选择您的关卡并单击**打开**以加载您的关卡。
- en: Launcher
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动器
- en: This is the application seen by the end user. Upon startup, the Launcher displays
    the game's main menu, along with different options allowing users to load levels
    and configure the game.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终用户看到的应用程序。启动器启动时显示游戏的主菜单，以及允许用户加载关卡和配置游戏的不同选项。
- en: The Launcher's game context is commonly referred to as **Pure game mode**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 启动器的游戏上下文通常称为**纯游戏模式**。
- en: Starting the Launcher
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动启动器
- en: Open the main sample folder, and navigate into the `Bin32` folder. Once there,
    start `Launcher.exe`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 打开主示例文件夹，并进入`Bin32`文件夹。一旦到达那里，启动`Launcher.exe`。
- en: '![Starting the Launcher](img/5909_01_05.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![启动启动器](img/5909_01_05.jpg)'
- en: When you've started the application, you'll be greeted with the default main
    menu. This interface allows the user to load levels and alter game settings such
    as visuals and controls.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动应用程序时，您将看到默认的主菜单。此界面允许用户加载关卡并更改游戏设置，如视觉和控制。
- en: The Launcher is preferable over the Editor when you want to play the game as
    the end user would. Another benefit is the quick startup time.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要像最终用户一样玩游戏时，启动器比编辑器更可取。另一个好处是快速启动时间。
- en: Dedicated server
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专用服务器
- en: The dedicated server is used to start up a multiplayer server for other clients
    to connect to. The dedicated server does not initialize a renderer, and instead
    functions as a console application.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 专用服务器用于启动其他客户端连接的多人游戏服务器。专用服务器不会初始化渲染器，而是作为控制台应用程序运行。
- en: '![Dedicated server](img/5909_01_06.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![专用服务器](img/5909_01_06.jpg)'
- en: Compiling the CryGame project (C++)
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译CryGame项目（C++）
- en: The CryENGINE Free SDK ships with complete source access to the game logic library,
    `CryGame.dll`. This dynamic library is responsible for the main part of game features,
    as well as the initial game startup process.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE Free SDK提供了对游戏逻辑库`CryGame.dll`的完整源代码访问。这个动态库负责游戏功能的主要部分，以及初始游戏启动过程。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A library i*s a collection of existing classes and functions that can be integrated
    into other projects. In Windows, the most common form of library is a* **Dynamic
    Link Library** *, or* **DLL** *, which uses the* `.dll` *file extension.*
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 库是一组现有的类和函数，可以集成到其他项目中。在Windows中，库的最常见形式是**动态链接库**，或**DLL**，它使用`.dll`文件扩展名。
- en: To start off, open the main sample folder, and navigate to `Code/Solutions/`,
    in which a Visual Studio solution file named `CE Game Programming Sample.sln`
    should be present. Double-click on the file and Visual Studio should start up,
    displaying the included projects (see the following breakdown).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开主样本文件夹，并导航到`Code/Solutions/`，其中应该存在一个名为`CE Game Programming Sample.sln`的Visual
    Studio解决方案文件。双击该文件，Visual Studio应该启动，并显示包含的项目（请参阅以下分解）。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A **solution** is a structure for organizing projects in Visual Studio. The
    **solution** contains information on projects in a text-based `.sln` file, as
    well as a `.suo` file (user-specific options).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**是Visual Studio中组织项目的结构。**解决方案**包含关于项目的信息，存储在基于文本的`.sln`文件中，以及一个`.suo`文件（用户特定选项）。'
- en: To build the project, simply press *F7* or right-click on the CryGame project
    in the **Solution Explorer** and select **Build**.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建项目，只需按下*F7*或右键单击**解决方案资源管理器**中的CryGame项目，然后选择**构建**。
- en: What just happened?
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You just compiled `CryGame.dll`, which should now be present in the binary folder.
    (`Bin32` for 32-bit compilation, `Bin64` for 64-bit). Launching the sample application
    will now load the `.dll` file containing the source code you compiled.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚编译了`CryGame.dll`，现在应该在二进制文件夹中存在（32位编译为`Bin32`，64位为`Bin64`）。启动示例应用程序现在将加载包含您编译的源代码的`.dll`文件。
- en: The CE Game Programming Sample solution breakdown
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CE游戏编程示例解决方案分解
- en: The solution includes the following three projects, one of which compiles to
    a `.dll` file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案包括以下三个项目，其中一个编译为`.dll`文件。
- en: CryGame
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CryGame
- en: The CryGame project includes the underlying game logic used by the engine. This
    compiles to `CryGame.dll`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: CryGame项目包括引擎使用的基础游戏逻辑。这将编译为`CryGame.dll`。
- en: CryAction
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CryAction
- en: The CryAction project includes partial source to `CryAction.dll`, which is responsible
    for a large number of systems, such as actors, UI Graphs, and game objects. This
    project does not compile to a `.dll` file, but is instead only used for interface
    access.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: CryAction项目包括对`CryAction.dll`的部分源代码，它负责大量的系统，如演员、UI图形和游戏对象。这个项目不会编译为`.dll`文件，而是仅用于接口访问。
- en: CryCommon
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CryCommon
- en: The CryCommon project is a helper containing all shared CryENGINE interfaces.
    If there is a subsystem you want access to, look for its exposed interface in
    here.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: CryCommon项目是一个助手，包含所有共享的CryENGINE接口。如果有子系统需要访问，请在这里查找其公开的接口。
- en: The CryENGINE folder structure
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CryENGINE文件夹结构
- en: 'See the following table for an explanation of the CryENGINE folder structure:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下表格，了解CryENGINE文件夹结构的解释：
- en: '| Folder name | Description |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Bin32` | Contains all 32-bit executables and libraries used by the engine.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `Bin32` | 包含引擎使用的所有32位可执行文件和库。 |'
- en: '| `Bin64` | Contains all 64-bit executables and libraries used by the engine.
    |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `Bin64` | 包含引擎使用的所有64位可执行文件和库。 |'
- en: '| `Editor` | Editor configuration folder, contains common editor helpers, styles,
    and more. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `Editor` | 编辑器配置文件夹，包含常见的编辑器助手、样式等。 |'
- en: '| `Engine` | Used as a central folder for assets used by the engine itself,
    not any particular game.Shaders and configuration files are stored here. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `Engine` | 用作引擎本身使用的资产的中央文件夹，而不是任何特定的游戏。着色器和配置文件存储在这里。 |'
- en: '| `Game` | Each game contains a game folder, which includes all its assets,
    scripts, levels, and so on.Does not have to be named "Game", but is dependent
    on the value of the `sys_game_folder` console variable. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `Game` | 每个游戏都包含一个游戏文件夹，其中包括所有的资产、脚本、关卡等。不一定要命名为“Game”，但取决于`sys_game_folder`控制台变量的值。
    |'
- en: '| `Localization` | Contains localization assets such as localized sounds and
    text for each language. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `Localization` | 包含本地化资产，如每种语言的本地化声音和文本。 |'
- en: PAK files
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PAK文件
- en: The engine ships with the **CryPak** module, allowing for the storage of game
    content files in compressed or uncompressed archives. The archives use the `.pak`
    file extension.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎附带**CryPak**模块，允许以压缩或未压缩的存档中存储游戏内容文件。存档使用`.pak`文件扩展名。
- en: When game content is requested, the CryPak system will query through all found
    `.pak` files in order to find the file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏内容被请求时，CryPak系统将查询所有找到的`.pak`文件，以找到文件。
- en: File query priority
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件查询优先级
- en: The PAK system prioritizes the files found in the loose folder structure over
    those in PAK, except when the engine was compiled in RELEASE mode. When that is
    the case, the file stored in a PAK system is preferred over the loose one.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: PAK系统优先考虑松散文件夹结构中找到的文件，而不是PAK中的文件，除非引擎是在发布模式下编译的。在这种情况下，PAK系统中存储的文件优先于松散的文件。
- en: If the file exists in multiple `.pak` archives, the one with the most recent
    filesystem creation date is used.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件存在于多个`.pak`存档中，则使用具有最近文件系统创建日期的存档。
- en: Attaching the debugger
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加调试器
- en: Visual Studio allows you to attach the **Debugger** to your application. This
    allows you to use functionalities such as **breakpoints**; letting you stop at
    a specific line in your C++ source code, and step through the program execution.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio允许您将**调试器**附加到应用程序。这使您可以使用**断点**等功能，让您在C++源代码中的特定行停止，并逐步执行程序。
- en: To start debugging, open `CE Game Programming Sample.sln` and press *F5*, or
    click on the green play icon on the Visual Studio toolbar. If a **No debug symbols
    could be found for Editor.exe** message box appears, simply click on **OK**.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始调试，请打开`CE Game Programming Sample.sln`并按下*F5*，或者单击Visual Studio工具栏上的绿色播放图标。如果出现**找不到Editor.exe的调试符号**消息框，只需单击**确定**。
- en: What just happened?
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The CryENGINE Sandbox editor should now have started, with the Visual Studio
    Debugger attached. We can now place breakpoints in code, and watch program execution
    pause when that specific line of code is executed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE Sandbox编辑器现在应该已经启动，并且已连接了Visual Studio调试器。我们现在可以在代码中设置断点，并且当执行特定行的代码时，程序执行会暂停。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have downloaded and learned how to use a CryENGINE installation.
    You should now be aware of the process of compiling and debugging the CryGame
    project.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经下载并学习了如何使用CryENGINE安装。您现在应该了解了编译和调试CryGame项目的过程。
- en: We now have the basic knowledge needed to move on to learning the ins and outs
    of the CryENGINE programming API.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经掌握了继续学习CryENGINE编程API的基本知识。
- en: If you feel like learning more about CryENGINE itself, besides programming knowledge,
    feel free to start the Sandbox editor and play around with the level design tools.
    This will help you prepare for future chapters, where you'll be required to utilize
    the Editor Viewport and more.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于CryENGINE本身的知识，除了编程知识之外，可以随时启动Sandbox编辑器并尝试使用级别设计工具。这将帮助您为将来的章节做好准备，在那里您将需要利用编辑器视口等工具。
