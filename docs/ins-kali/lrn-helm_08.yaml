- en: '*Chapter 6*: Testing Helm Charts'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：测试Helm图表'
- en: Testing is a common task that engineers must perform during software development.
    Testing is performed to validate the functionality of a product as well as to
    prevent regressions as a product evolves over time. Well-tested software is easier
    to maintain over time and allows developers to more confidently provide new releases
    to end users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是工程师在软件开发过程中必须执行的常见任务。测试是为了验证产品的功能性，以及在产品随着时间的推移而发展时防止回归。经过充分测试的软件更容易随着时间的推移进行维护，并允许开发人员更有信心地向最终用户提供新版本。
- en: 'A Helm chart should be properly tested in order to ensure that it delivers
    its features to the level of quality expected. In this chapter, we will discuss
    the ways that robust Helm chart testing can be achieved, including the following
    topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保Helm图表能够按预期的质量水平提供其功能，应该对其进行适当的测试。在本章中，我们将讨论如何实现强大的Helm图表测试，包括以下主题：
- en: Setting up your environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的环境
- en: Verifying Helm templating
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证Helm模板
- en: Testing in a live cluster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个实时集群中进行测试
- en: Improving chart tests with the chart testing project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过图表测试项目改进图表测试
- en: Cleaning up
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will use the following technologies:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用以下技术：
- en: '`minikube`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube`'
- en: '`kubectl`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: '`helm`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: '`git`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git`'
- en: '`yamllint`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamllint`'
- en: '`yamale`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamale`'
- en: '`chart-testing` (`ct`)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chart-testing` (`ct`)'
- en: 'In addition to these tools, you can follow along with the samples in the Packt
    GitHub repository located at [https://github.com/PacktPublishing/-Learn-Helm](https://github.com/PacktPublishing/-Learn-Helm),
    which will be referenced throughout this chapter. In many of the example commands
    used throughout this chapter, we will reference the Packt repository, so you may
    find it helpful to clone this repository by running the `git clone` command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些工具，您还可以在Packt GitHub存储库中跟随示例，该存储库位于[https://github.com/PacktPublishing/-Learn-Helm](https://github.com/PacktPublishing/-Learn-Helm)，本章将引用该存储库。在本章中使用的许多示例命令中，我们将引用Packt存储库，因此您可能会发现通过运行`git
    clone`命令克隆此存储库会很有帮助：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, let's proceed with setting up your local `minikube` environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续设置您的本地`minikube`环境。
- en: Setting up your environment
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的环境
- en: 'In this chapter, we will create and run a series of tests for the `Guestbook`
    chart created in the previous chapter. Run the following steps to set up your
    `minikube` environment, where we will test the Guestbook chart:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为上一章创建的`Guestbook`图表创建并运行一系列测试。运行以下步骤来设置您的`minikube`环境，在这里我们将测试Guestbook图表：
- en: 'Start `minikube` by running the `minikube start` command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`minikube start`命令启动`minikube`：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, create a new namespace called `chapter6`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`chapter6`的新命名空间：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With your `minikube` environment ready, let's begin by discussing how Helm charts
    can be tested. We will begin the discussion by outlining the methods you can use
    to verify your Helm templates.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好您的`minikube`环境后，让我们开始讨论如何测试Helm图表。我们将首先讨论您可以使用的方法来验证您的Helm模板。
- en: Verifying Helm templating
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Helm模板
- en: In the previous chapter, we built a Helm chart from scratch. The final product
    was quite complex, containing parameterization, conditional templating, and life
    cycle hooks. Since one of the primary purposes of Helm is to create Kubernetes
    resources, you should ensure that your resource templates are generated properly
    before they are applied to a Kubernetes cluster. This can be done in a variety
    of ways, which we will discuss in the following section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们从头开始构建了一个Helm图表。最终产品非常复杂，包含参数化、条件模板和生命周期钩子。由于Helm的主要目的之一是创建Kubernetes资源，因此在将资源模板应用到Kubernetes集群之前，您应该确保这些资源模板被正确生成。这可以通过多种方式来完成，我们将在下一节中讨论。
- en: Validating template generation locally with helm template
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用helm template在本地验证模板生成
- en: The first way to validate your chart's templating is to use the `helm template`
    command, which can be used to render a chart template locally and display its
    fully rendered contents in the standard output.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 验证图表模板的第一种方法是使用`helm template`命令，该命令可用于在本地呈现图表模板并在标准输出中显示其完全呈现的内容。
- en: 'The `helm template` command has the following syntax:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm template`命令具有以下语法：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command renders a template locally, using the `NAME` argument to satisfy
    the `.Release` built-in object and the `CHART` argument for the chart that contains
    the Kubernetes templates. The `helm-charts/charts/guestbook` folder in the Packt
    repository can be used to demonstrate the functionality of the `helm template`
    command. This folder contains the chart that was developed in the previous section
    as well as additional resources that will be used later in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在本地呈现模板，使用`NAME`参数满足`.Release`内置对象，使用`CHART`参数表示包含Kubernetes模板的图表。Packt存储库中的`helm-charts/charts/guestbook`文件夹可用于演示`helm
    template`命令的功能。该文件夹包含在上一节中开发的图表，以及稍后在本章中将使用的其他资源。
- en: 'Render the `guestbook` chart locally by running the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令在本地呈现`guestbook`图表：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result of this command will display each of the Kubernetes resources that
    would be created if they were applied to the cluster, as shown:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的结果将显示每个Kubernetes资源，如果将其应用于集群，将会创建这些资源，如下所示：
- en: '![Figure 6.1 – The ConfigMap for the guestbook chart'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 - 用于guestbook图表的ConfigMap'
- en: '](image/Figure_6.1.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.1.jpg)'
- en: Figure 6.1 – "helm template" output
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - "helm template"输出
- en: The preceding screenshot displays the beginning portion of the output from the
    `helm template` command as executed against the Guestbook chart created in the
    previous chapter. As you can see, a fully rendered `ConfigMap` is shown along
    with the beginning of another `ConfigMap` that was created with the release. Rendering
    these resources locally provides you with an idea of the exact resources and specifications
    that would be created if the release was installed against a Kubernetes cluster.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了针对上一章中创建的Guestbook图表执行的`helm template`命令的输出的开始部分。正如您所看到的，显示了一个完全呈现的`ConfigMap`，以及另一个`ConfigMap`的开始，该`ConfigMap`是使用该版本创建的。在本地呈现这些资源可以让您了解如果将该版本安装到Kubernetes集群中，将会创建哪些确切的资源和规范。
- en: During chart development, you may want to use the `helm template` command regularly
    to validate that your Kubernetes resources are being generated properly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表开发过程中，您可能希望定期使用`helm template`命令来验证您的Kubernetes资源是否被正确生成。
- en: 'Some common aspects of chart development that you would want to validate include
    the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想要验证图表开发的一些常见方面，包括以下内容：
- en: That parameterized fields are successfully replaced by default or overridden
    values
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数化字段成功地被默认值或覆盖值替换
- en: That control actions such as `if`, `range`, and `with` successfully generates
    YAML files based on the provided values
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制操作，如`if`、`range`和`with`，根据提供的值成功生成YAML文件
- en: That resources contain proper spacing and indentation
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源包含适当的间距和缩进
- en: That functions and pipelines are used correctly to properly format and manipulate
    the YAML file
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数和管道被正确使用以正确格式化和操作YAML文件
- en: That functions such as `required` and `fail` properly validate values based
    on user input
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如`required`和`fail`之类的函数根据用户输入正确验证值
- en: With an understanding of how chart templates can be rendered locally, let's
    now dive into some of the specific aspects that you can test and validate by leveraging
    the `helm template` command.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 了解图表模板如何在本地呈现后，现在让我们深入一些特定方面，您可以通过利用`helm template`命令进行测试和验证。
- en: Testing template parameterization
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试模板参数化
- en: It is important to check that your template's parameters are successfully populated
    with values. This is important because your charts will likely consist of multiple
    different values. You can ensure that your charts are properly parameterized by
    making sure each value has a sensible default value or has validation that fails
    chart rendering if a value is not provided.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要检查模板的参数是否成功填充了值。这很重要，因为您的图表可能由多个不同的值组成。您可以通过确保每个值具有合理的默认值或具有验证来确保您的图表被正确参数化，如果未提供值，则验证失败图表呈现。
- en: 'Imagine the following deployment:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下部署：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Sensible defaults for the `replicas` and `port` values should be defined in
    the chart''s `values.yaml` file, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表的`values.yaml`文件中应定义`replicas`和`port`值的合理默认值，如下所示：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running the `helm template` command against this template resource renders
    the following deployment, replacing the `replicas` and `port` values with their
    defaults:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`helm template`命令针对此模板资源呈现以下部署，将`replicas`和`port`值替换为它们的默认值：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output from `helm template` allows you to verify that your parameters are
    properly replaced by their default values. You can also verify that the provided
    values are overridden successfully by passing the `--values` or `--set` arguments
    to the `helm template` command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm template`的输出允许您验证参数是否被其默认值正确替换。您还可以通过向`helm template`命令传递`--values`或`--set`参数来验证提供的值是否成功覆盖：'
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The resulting template reflects your provided values:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的模板反映了您提供的值：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: While values with the default settings defined are often simple to test with
    `helm template`, it is more important to test values that require validation as
    invalid values can prevent your chart from installing properly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然具有默认设置的值通常很容易通过`helm template`进行测试，但更重要的是测试需要验证的值，因为无效的值可能会阻止图表正确安装。
- en: You should use `helm template` to ensure that values with restrictions, such
    as those that only allow particular inputs, are successfully validated with the
    `required` and `fail` functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用`helm template`来确保具有限制的值，例如仅允许特定输入的值，通过`required`和`fail`函数成功验证。
- en: 'Imagine the following deployment template:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下部署模板：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If this deployment belongs to a chart with the same `values` file defined in
    the previous code block and you expected users to provide the `imageRegistry`
    and `imageName` values to install the chart, if you then use the `helm template`
    command without providing these values, then the result is less than desirable,
    as you can see in the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此部署属于具有相同`values`文件的图表，并且您期望用户提供`imageRegistry`和`imageName`值来安装图表，如果您然后使用`helm
    template`命令而不提供这些值，则结果不尽如人意，如下输出所示：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since there was no gating in place, the rendered result is a deployment with
    an invalid image, `/`. Because we tested this with `helm template`, we know that
    we need to handle the case where these values are not defined. This can be done
    by using the `required` function to provide validation that these values are specified:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有设置门控，呈现的结果是一个具有无效图像的部署，`/`。因为我们使用了`helm template`进行测试，所以我们知道需要处理这些值未定义的情况。可以通过使用`required`函数来提供验证，以确保这些值被指定：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When the `helm template` command is applied to a chart with the updated deployment
    template, the result displays a message that instructs the user to provide the
    first missing value that is encountered by the templating engine:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当对具有更新的部署模板的图表应用`helm template`命令时，结果会显示一条消息，指示用户提供模板引擎遇到的第一个缺失的值：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can further test this validation by providing the valid values files alongside
    the `helm template` command. For this example, we will assume the following values
    are provided in a user-managed `values` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在`helm template`命令旁边提供有效的值文件来进一步测试此验证。例如，我们假设以下值是在用户管理的`values`文件中提供的：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This file can then be provided when executing the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在执行以下命令时提供此文件：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As a general rule of thumb for parameterization, make sure you keep track of
    your values and ensure that each value is used in your chart. Set sensible defaults
    in the `values.yaml` file and use the `required` function in cases where defaults
    cannot be set. Use the `helm template` function to ensure that values are properly
    rendered and produce the desired Kubernetes resource configuration.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参数化的一般准则，请确保跟踪您的值，并确保每个值在您的图表中都有用到。在`values.yaml`文件中设置合理的默认值，并在无法设置默认值的情况下使用`required`函数。使用`helm
    template`函数确保值被正确渲染并产生期望的Kubernetes资源配置。
- en: 'As an aside, you may also want to consider including the required values in
    your `values.yaml` file as empty fields with a comment noting that they are required.
    This allows users to view your `values.yaml` file and see all the values that
    your chart supports, including the values that they are required to provide for
    themselves. Consider the following `values` file after the `imageRegistry` and
    `imageName` values are added to it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您可能还希望考虑在您的`values.yaml`文件中包含必需的值，将其作为空字段，并在注释中指出它们是必需的。这样用户就可以查看您的`values.yaml`文件，并查看您的图表支持的所有值，包括他们必须自己提供的值。在添加了`imageRegistry`和`imageName`值后，考虑以下`values`文件：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Although these values are written in your chart's `values.yaml` file, these
    values still evaluate to null when the `helm template` command runs, providing
    the same behavior as they would if they were not defined as in prior executions.
    The difference is that you can now explicitly see that these values are required,
    so you won't be taken by surprise when you attempt to install the chart for the
    first time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些值写在您的图表的`values.yaml`文件中，但当`helm template`命令运行时，这些值仍然会评估为null，提供与之前执行时相同的行为。不同之处在于现在您可以明确地看到这些值是必需的，因此当您首次尝试安装图表时，您不会感到惊讶。
- en: Next, we will discuss how generating your chart templates locally can help you
    test your chart's control actions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何在本地生成您的图表模板可以帮助您测试图表的控制操作。
- en: Testing the control actions
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试控制操作
- en: Besides basic parameterization, you should also consider using the `helm template`
    command to verify that control actions (specifically `if` and `range`) are handled
    properly to produce the desired results.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的参数化，您还应该考虑使用`helm template`命令来验证控制操作（特别是`if`和`range`）是否被正确处理以产生期望的结果。
- en: 'Consider the following deployment template:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下部署模板：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If the `env` and `enableLiveness` values are both `null`, you could test whether
    this rendering will still be successful by running the `helm template` command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`env`和`enableLiveness`的值都是`null`，您可以通过运行`helm template`命令来测试此渲染是否仍然成功：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You will notice that both the `range` and `if` actions are not generated. Null
    or empty values do not have any entries acted on them by the `range` clause and
    these values are also evaluated as `false` when provided to the `if` action. You
    can verify that you have written your template to properly generate YAML using
    these actions by providing the `env` and `enableLiveness` values to `helm template`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到`range`和`if`操作均未生成。对于`range`子句，空值或空值不会有任何条目对其进行操作，并且当提供给`if`操作时，这些值也被评估为`false`。通过向`helm
    template`提供`env`和`enableLiveness`值，您可以验证您已经正确编写了模板以使用这些操作生成YAML。
- en: 'You can add these values to a `values` file, as shown:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这些值添加到一个`values`文件中，如下所示：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With these changes made, verify the desired results of the `helm template`
    command to demonstrate that the template is written properly to consume these
    values:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这些更改后，验证`helm template`命令的期望结果，以证明模板已正确编写以使用这些值：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You should make sure you are in the habit of regularly rendering your templates
    with `helm template` when you add additional control structures to your charts
    as they can quickly make the chart development process more difficult, especially
    if control structures are numerous or complex.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该确保在向图表添加额外的控制结构时，定期使用`helm template`渲染您的模板，因为这些控制结构可能会使图表开发过程变得更加困难，特别是如果控制结构数量众多或复杂。
- en: Aside from checking that the control structures are properly generated, you
    should also check whether your functions and pipelines are working as designed,
    which we will discuss next.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检查控制结构是否正确生成外，您还应检查您的函数和流水线是否按预期工作，接下来我们将讨论这一点。
- en: Testing functions and pipelines
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试函数和流水线
- en: The `helm template` command is also useful for validating the rendering produced
    by functions and pipelines, which are often used to produce formatted YAML.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm template`命令还可以用于验证函数和流水线生成的渲染结果，这些函数和流水线通常用于生成格式化的YAML。'
- en: 'Take the following template as an example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下模板为例：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This template contains a pipeline that parameterizes and formats the `resources`
    value to specify the container's resource requirements. It would be wise to include
    a sensible default in your chart's `values.yaml` file to make sure the application
    has an appropriate limit to prevent over-utilization of cluster resources.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板包含一个流水线，该流水线对`resources`值进行参数化和格式化，以指定容器的资源需求。在您的图表的`values.yaml`文件中包含一个明智的默认值，以确保应用程序具有适当的限制，以防止集群资源的过度利用。
- en: 'An example of the `resources` value for this template is shown here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板的`resources`值示例如下：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You need to run the `helm template` command to ensure that this value is properly
    converted into a valid `YAML` format and that the output is properly indented
    to produce a valid deployment resource.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要运行`helm template`命令，以确保该值被正确转换为有效的`YAML`格式，并且输出被正确缩进以生成有效的部署资源。
- en: 'Running the `helm template` command against this template results in the following
    output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模板运行`helm template`命令的结果如下：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Next, we will discuss how server-side validation can be enabled when rendering
    your resources with `helm template.`
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何在使用`helm template`渲染资源时启用服务器端验证。
- en: Adding server-side validation to chart rendering
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 向图表渲染添加服务器端验证
- en: 'While the `helm template` command is important to the chart development process
    and should be used frequently to verify your chart rendering, it does have a key
    limitation. The main purpose of the `helm template` command is to provide client-side
    rendering, meaning it does not communicate with the Kubernetes API server to provide
    resource validation. If you would like to ensure that your resources are valid
    after they are generated, you can use the `--validate` flag to instruct `helm
    template` to communicate with the Kubernetes API server after the resources are
    generated:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`helm template`命令对图表开发过程很重要，并且应该经常用于验证图表渲染，但它确实有一个关键的限制。`helm template`命令的主要目的是提供客户端渲染，这意味着它不会与Kubernetes
    API服务器通信以提供资源验证。如果您希望在生成资源后确保资源有效，可以使用`--validate`标志指示`helm template`在生成资源后与Kubernetes
    API服务器通信：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Any generated template that does not produce a valid Kubernetes resource provides
    an error message. Imagine, for example, a deployment template was used where the
    `apiVersion` value was set to `apiVersion: v1`. In order to produce a valid deployment,
    you must set the `apiVersion` value to `apps/v1` as that is the correct name of
    the API that serves the deployment resource. Simply setting this to `v1` will
    generate what appears to be a valid resource by the client-side rendering of `helm
    template` without the `--validation` flag, but with the `--validation` flag you
    would expect to see the following error:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '任何生成的模板如果未生成有效的Kubernetes资源，则会提供错误消息。例如，假设使用了一个部署模板，其中`apiVersion`值设置为`apiVersion:
    v1`。为了生成有效的部署，必须将`apiVersion`值设置为`apps/v1`，因为这是提供部署资源的API的正确名称。仅将其设置为`v1`将通过`helm
    template`的客户端渲染生成看似有效的资源，但是使用`--validation`标志，您期望看到以下错误：'
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `--validate` flag is designed to catch errors in your generated resources.
    You should use this flag if you have access to a Kubernetes cluster and if you
    want to determine whether or not your chart is generating valid Kubernetes resources.
    Alternatively, you can use the `--dry-run` flag against the `install`, `upgrade`,
    `rollback`, and `uninstall` commands to perform validation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`--validate`标志旨在捕获生成的资源中的错误。如果您可以访问Kubernetes集群，并且想要确定您的图表是否生成有效的Kubernetes资源，则应使用此标志。或者，您可以针对`install`、`upgrade`、`rollback`和`uninstall`命令使用`--dry-run`标志来执行验证。'
- en: 'An example of using this flag with the `install` command is shown here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用此标志与`install`命令的示例：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This flag will generate the chart's templates and perform validation, similar
    to running the `helm template` command with the `--validate` flag. Using `--dry-run`
    will print each generated resource to the command line and will not create the
    resources in the Kubernetes environment. It is primarily used by end users to
    perform a sanity check before running an installation to ensure that they have
    provided the correct values and that the installation will produce the desired
    results. Chart developers can choose to use the `--dry-run` flag in this fashion
    to test chart rendering and validation, or they can choose to use `helm template`
    to generate your chart's resources locally and provide `--validate` to add additional
    server-side validation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志将生成图表的模板并执行验证，类似于使用`--validate`标志运行`helm template`命令。使用`--dry-run`将在命令行打印每个生成的资源，并且不会在Kubernetes环境中创建资源。它主要由最终用户使用，在运行安装之前执行健全性检查，以确保他们提供了正确的值，并且安装将产生期望的结果。图表开发人员可以选择以这种方式使用`--dry-run`标志来测试图表渲染和验证，或者他们可以选择使用`helm
    template`在本地生成图表的资源，并提供`--validate`以添加额外的服务器端验证。
- en: While it is necessary to verify that your templates are generated the way you
    intend, it is also necessary to ensure that your templates are generated in a
    way that follows best practices to simplify development and maintenance. Helm
    provides a command called `helm lint` that can be used for this purpose, which
    we will learn more about next.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有必要验证您的模板是否按照您的意图生成，但也有必要确保您的模板是按照最佳实践生成的，以简化开发和维护。Helm提供了一个名为`helm lint`的命令，可以用于此目的，我们将在下面更多地了解它。
- en: Linting Helm charts and templates
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linting Helm charts and templates
- en: 'Linting your charts is important to prevent errors in your chart''s formatting
    or the chart''s definition file and provide guidance on best practices when working
    with Helm charts. The `helm lint` command has the following syntax:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对您的图表进行lint是很重要的，可以防止图表格式或图表定义文件中的错误，并在使用Helm图表时提供最佳实践的指导。`helm lint`命令具有以下语法：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `helm lint` command is designed to be run against a chart directory to ensure
    that the chart is valid and properly formatted.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm lint`命令旨在针对图表目录运行，以确保图表是有效的和正确格式化的。'
- en: 'Important note:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: The `helm lint` command does not validate the rendered API schemas or perform
    linting on your YAML style, but simply checks that the chart consists of the appropriate
    files and settings that a valid Helm chart should have.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm lint`命令不验证渲染的API模式，也不对您的YAML样式进行linting，而只是检查图表是否包含应有的文件和设置，这是一个有效的Helm图表应该具有的。'
- en: 'You can run the `helm lint` command against the Guestbook chart that you created
    in [*Chapter 5*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265), *Building Your
    First Helm Chart*, or against the chart under the `helm-charts/charts/guestbook`
    folder in the Packt GitHub repository at [https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对您在[*第5章*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265)中创建的Guestbook图表，或者对Packt
    GitHub存储库中`helm-charts/charts/guestbook`文件夹下的图表运行`helm lint`命令，网址为[https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook)：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This output declares that the chart is valid, which is noted by the `1 chart(s)
    linted, 0 chart(s) failed` message. The `[INFO]` message recommends the chart
    include an `icon` field in the `Chart.yaml` file, but this is not required. Other
    types of messages include `[WARNING]`, which indicates that the chart breaks the
    chart conventions, and `[ERROR]`, which indicates that the chart will fail at
    installation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出声明了图表是有效的，这是由`1 chart(s) linted, 0 chart(s) failed`消息所指出的。`[INFO]`消息建议图表在`Chart.yaml`文件中包含一个`icon`字段，但这并非必需。其他类型的消息包括`[WARNING]`，它表示图表违反了图表约定，以及`[ERROR]`，它表示图表将在安装时失败。
- en: 'Let''s run through a few examples. Consider a chart with the following file
    structure:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些例子来运行。考虑一个具有以下文件结构的图表：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Notice that there are issues with this chart structure. This chart is missing
    the `Chart.yaml` file that defines the chart''s metadata. The linter run against
    a chart with this structure would produce the following error:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个图表结构存在问题。这个图表缺少定义图表元数据的`Chart.yaml`文件。对具有这种结构的图表运行linter会产生以下错误：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This error indicates that Helm cannot find the `Chart.yaml` file. If an empty
    `Chart.yaml` file is added to the chart to provide the correct file structure,
    an error will still ensue as the `Chart.yaml` file contains invalid contents:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误表明Helm找不到`Chart.yaml`文件。如果向图表中添加一个空的`Chart.yaml`文件以提供正确的文件结构，错误仍会发生，因为`Chart.yaml`文件包含无效的内容：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Running the linter against this chart would produce the following errors:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个图表运行linter会产生以下错误：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This output lists the required fields that are missing from the `Chart.yaml`
    file. It indicates that the file must contain the `name`, `apiVersion`, and `version`
    fields, so these fields should be added to the `Chart.yaml` file to produce a
    valid Helm chart. The linter provides additional feedback on the `apiVersion`
    and `version` settings, checking that the `apiVersion` value is set to either
    `v1` or `v2` and that the `version` setting is a proper `SemVer` version.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出列出了在`Chart.yaml`文件中缺少的必需字段。它指示该文件必须包含`name`、`apiVersion`和`version`字段，因此应将这些字段添加到`Chart.yaml`文件中以生成有效的Helm图表。检查器还对`apiVersion`和`version`设置提供了额外的反馈，检查`apiVersion`值是否设置为`v1`或`v2`，以及`version`设置是否为正确的`SemVer`版本。
- en: The linter will also check for the existence of other required or recommended
    files, such as the `values.yaml` file and the `templates` directory. It will also
    make sure that files under the `templates` directory have a `.yaml`, `.yml`, `.tpl`,
    or `.txt` file extension. The `helm lint` command is great for checking whether
    your chart contains the appropriate contents, but it does not carry out extensive
    linting on your chart's YAML style.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 该检查器还将检查其他必需或建议的文件的存在，例如`values.yaml`文件和`templates`目录。它还将确保`templates`目录下的文件具有`.yaml`、`.yml`、`.tpl`或`.txt`文件扩展名。`helm
    lint`命令非常适合检查图表是否包含适当的内容，但它不会对图表的YAML样式进行广泛的linting。
- en: 'To perform this linting, you can use another tool, called `yamllint`, which
    can be found at [https://github.com/adrienverge/yamllint](https://github.com/adrienverge/yamllint).
    This tool can be installed using the `pip` package manager, across a range of
    operating systems, using the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此linting，您可以使用另一个名为`yamllint`的工具，该工具可以在[https://github.com/adrienverge/yamllint](https://github.com/adrienverge/yamllint)找到。可以使用以下命令在一系列操作系统上使用`pip`软件包管理器安装此工具：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: It can also be installed with your operating system's package manager, as described
    in the `yamllint` quick-start instructions at [https://yamllint.readthedocs.io/en/stable/quickstart.html](https://yamllint.readthedocs.io/en/stable/quickstart.html).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以按照`yamllint`快速入门说明中描述的方式，使用操作系统的软件包管理器进行安装，该说明位于[https://yamllint.readthedocs.io/en/stable/quickstart.html](https://yamllint.readthedocs.io/en/stable/quickstart.html)。
- en: In order to use `yamllint` on your chart's YAML resources, you must use it in
    combination with the `helm template` command to remove the Go templating and generate
    your YAML resources.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在图表的YAML资源上使用`yamllint`，您必须将其与`helm template`命令结合使用，以去除Go模板化并生成您的YAML资源。
- en: 'The following is an example of running this command against the guestbook chart
    from the Packt GitHub repository:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是针对Packt GitHub存储库中的guestbook图表运行此命令的示例：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This command will generate the resources under the `templates/` folder and pipe
    the output to `yamllint`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在`templates/`文件夹下生成资源，并将输出传输到`yamllint`。
- en: 'The result is shown here:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![Figure 6.2 – An example yamllint output'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 - 一个示例yamllint输出'
- en: '](image/Figure_6.2.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.2.jpg)'
- en: Figure 6.2 – An example `yamllint` output
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 - 一个示例`yamllint`输出
- en: The line numbers provided reflect the entirety of the `helm template` output,
    which can make it difficult to determine which line from the `yamllint` output
    corresponds with which line from your YAML resources.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的行号反映了整个`helm template`输出，这可能会使确定`yamllint`输出中的哪一行对应于您的YAML资源中的哪一行变得困难。
- en: 'You can simplify this by redirecting the `helm template` output to determine
    its line numbers using the following command against the `guestbook` chart:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`helm template`输出重定向到以下命令来确定其行号，针对`guestbook`图表：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`yamllint` will lint against many different rules, including the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`yamllint`将针对许多不同的规则进行lint，包括以下内容：'
- en: Indentation
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩进
- en: Line length
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行长度
- en: Training spaces
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练空间
- en: Empty lines
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空行
- en: Comment format
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释格式
- en: 'You can override the default rules by specifying your own by creating one of
    the following files:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过创建以下文件之一来覆盖默认规则：
- en: '`.yamllint`, `.yamllint.yaml`, and `.yamllint.yml` in the current working directory'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.yamllint`、`.yamllint.yaml`和`.yamllint.yml`在当前工作目录中'
- en: '`$XDB_CONFIG_HOME/yamllint/config`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$XDB_CONFIG_HOME/yamllint/config`'
- en: '`~/.config/yamllint/config`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/.config/yamllint/config`'
- en: 'To override the indentation rule that is reported against the guestbook chart,
    you can create a `.yamllint.yaml` file in your current working directory with
    the following contents:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖针对guestbook图表报告的缩进规则，您可以在当前工作目录中创建一个`.yamllint.yaml`文件，其中包含以下内容：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This configuration overrides `yamllint` so that it doesn''t enforce one particular
    method of indentation when adding list entries. It is configured by the `indent-sequences:
    whatever` line. Creating this file and running the linter again against the guestbook
    will eliminate the indentation errors, that were seen previously seen previously:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '此配置覆盖了`yamllint`，使其在添加列表条目时不强制执行一种特定的缩进方法。它由`indent-sequences: whatever`行配置。创建此文件并再次针对guestbook运行linter将消除先前看到的缩进错误：'
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this section, we discussed how you can validate the local rendering of your
    Helm charts by using the `helm template` and `helm lint` commands. This, however,
    does not actually test your chart's functionality or the application's ability
    to function with the resources that your chart creates.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何使用`helm template`和`helm lint`命令验证Helm图表的本地渲染。然而，这实际上并没有测试您的图表功能或应用程序使用您的图表创建的资源的能力。
- en: In the next section, we will learn how to create tests in a live Kubernetes
    environment to test your Helm chart.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在实时Kubernetes环境中创建测试来测试您的Helm图表。
- en: Testing in a live cluster
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在实时集群中进行测试
- en: Creating chart tests is an important part of developing and maintaining your
    Helm charts. Chart tests help verify that your chart is functioning as intended
    and they can help prevent regressions as features and fixes to your chart are
    added.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 创建图表测试是开发和维护Helm图表的重要部分。图表测试有助于验证您的图表是否按预期运行，并且它们可以帮助防止在添加功能和修复图表时出现回归。
- en: 'Testing consists of two different steps. First, you need to create `pod` templates
    under your chart''s `templates/` directory that contain the helm.sh/hook`: test`
    annotation. These `pods` will run commands that test the functionality of your
    chart and application. Next, you need to run the `helm test` command, which initiates
    a `test` hook and creates resources with the aforementioned annotation.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '测试包括两个不同的步骤。首先，您需要在图表的`templates/`目录下创建包含`helm.sh/hook`: test`注释的`pod`模板。这些`pod`将运行测试您的图表和应用程序功能的命令。接下来，您需要运行`helm
    test`命令，该命令会启动`test`钩子并创建具有上述注释的资源。'
- en: In this section, we will learn how to test in a live cluster by adding tests
    to the Guestbook chart, continuing the development of the chart you created in
    the previous chapter. As a reference, the tests that you will create can be viewed
    in the Guestbook chart in the Packt repository, located at [https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何通过向Guestbook图表添加测试来在实时集群中进行测试，继续开发您在上一章中创建的图表。作为参考，您将创建的测试可以在Packt存储库中的Guestbook图表中查看，位于[https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook)。
- en: 'Begin by adding the `test/frontend-connection.yaml` and `test/redis-connection.yaml`
    files under the `templates/` directory of your Guestbook chart. Be aware that
    chart tests do not have to be located under a `test` subdirectory, but keeping
    them there is a good way of keeping your tests organized and separated from the
    main chart templates:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的Guestbook图表的`templates/`目录下添加`test/frontend-connection.yaml`和`test/redis-connection.yaml`文件开始。请注意，图表测试不一定要位于`test`子目录下，但将它们放在那里是一种很好的方式，可以使您的测试组织和主要图表模板分开：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this section, we will populate these files with logic to validate their associated
    application components.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将填充这些文件以验证它们关联的应用程序组件的逻辑。
- en: Let's begin writing the tests now that their placeholders have been added.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了占位符，让我们开始编写测试。
- en: Creating the chart tests
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建图表测试
- en: 'As you recall, the Guestbook chart consists of a Redis backend and a PHP frontend.
    Users enter messages in a dialog box in the frontend, and the messages are persisted
    to the backend. Let’s write a couple tests that ensure both the frontend and backend
    resources are available after an installation. We will begin with a test that
    checks the availability of the Redis backend. Add the following contents to the
    chart’s templates/test/backend-connection.yaml file (this file can also be viewed
    in the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/test/backend-connection.yaml):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，Guestbook图表由Redis后端和PHP前端组成。用户在前端的对话框中输入消息，并且这些消息将持久保存到后端。让我们编写一些测试，以确保安装后前端和后端资源都可用。我们将从检查Redis后端的可用性开始。将以下内容添加到图表的`templates/test/backend-connection.yaml`文件中（此文件也可以在Packt存储库中查看：https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/test/backend-connection.yaml）：
- en: '![Figure 6.3 – The HTTP request to the Guestbook service'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 - 对Guestbook服务的HTTP请求'
- en: '](image/Figure_6.3.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.3.jpg)'
- en: Figure 6.3 - The backend connection test for the Guestbook Helm chart
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 - Guestbook Helm图表的后端连接测试
- en: This template defines a Pod that will be created during the test lifecycle hook.
    Also defined in this template is a hook delete policy that indicates when previous
    test pods should be removed. You could also add hook weights if the tests we will
    create needed to be run in any order.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板定义了在测试生命周期钩子期间将创建的Pod。此模板中还定义了一个钩子删除策略，指示何时应删除先前的测试Pod。如果我们创建的测试需要按顺序运行，还可以添加钩子权重。
- en: The args field underneath the containers object displays the command that the
    test will be based on. It will use the redis-cli tool to connect to the Redis
    master and run the command MGET messages. The Guestbook frontend is designed to
    add messages entered by the user to a database key called messages. This simple
    test is designed to check that a connection to the Redis database can be made,
    and it will return the messages that a user has entered by querying the messages
    key.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 容器对象下的args字段显示了测试将基于的命令。它将使用redis-cli工具连接到Redis主服务器并运行命令MGET messages。Guestbook前端设计为将用户输入的消息添加到名为messages的数据库键中。这个简单的测试旨在检查是否可以连接到Redis数据库，并且它将通过查询messages键返回用户输入的消息。
- en: The PHP frontend should also be tested for availability as well, as it is the
    user-facing component of the application. Add the following contents to the templates/test/frontend-connection.yaml
    file (these contents can also be seen in the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/test/frontend-connection.yaml).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: PHP前端也应该进行可用性测试，因为它是应用程序的用户界面组件。将以下内容添加到templates/test/frontend-connection.yaml文件中（这些内容也可以在Packt存储库https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/test/frontend-connection.yaml中找到）。
- en: '![Figure 6.4 - The frontend connection test for the Guestbook Helm chart'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 - Guestbook Helm图表的前端连接测试'
- en: '](image/Figure_6.4-1.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.4-1.jpg)'
- en: Figure 6.4 - The frontend connection test for the Guestbook Helm chart
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 - Guestbook Helm图表的前端连接测试
- en: This is a very simple test that runs an HTTP request to the Guestbook Service.
    Traffic sent to the Service will load-balance between Guestbook frontend instances.
    This test will check that the load balancing is being successfully performed and
    that the frontend is available.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的测试，它会向Guestbook服务发送HTTP请求。发送到服务的流量将在Guestbook前端实例之间进行负载平衡。此测试将检查负载平衡是否成功执行以及前端是否可用。
- en: Now, we have finished the templates needed for chart tests. Be advised that
    these templates can also be rendered locally by the helm template command and
    linted using helm lint and yamllint as described in earlier sections within this
    chapter. When developing your own Helm charts, you may find this to be useful
    for more advanced test cases.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了图表测试所需的模板。请注意，这些模板也可以通过helm模板命令在本地呈现，并使用helm lint和yamllint进行检查，如本章前面部分所述。在开发自己的Helm图表时，您可能会发现这对于更高级的测试用例很有用。
- en: Now that the tests are written, we will continue by running them in the Minikube
    environment.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试已经编写完成，我们将继续在Minikube环境中运行它们。
- en: Running the chart tests
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行图表测试
- en: 'In order to run a chart''s tests, the chart must first be installed on a Kubernetes
    environment using the `helm install` command. Because the tests that are written
    are designed to run after the installation is complete, the `--wait` flag can
    be used when installing the chart so that it is easier to determine when pods
    are ready. Run the following command to install the Guestbook chart:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行图表的测试，必须首先使用`helm install`命令在Kubernetes环境中安装图表。因为编写的测试是设计在安装完成后运行的，所以可以在安装图表时使用`--wait`标志，以便更容易确定何时pod准备就绪。运行以下命令安装Guestbook图表：
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once the chart is installed, you can use the `helm test` command to execute
    the `test` life cycle hook and create the test resources. The syntax for the `helm
    test` command is shown here:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 安装图表后，可以使用`helm test`命令执行`test`生命周期钩子并创建测试资源。`helm test`命令的语法如下所示：
- en: '[PRE40]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the `helm test` command against the `my-guestbook` release:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 针对`my-guestbook`发布运行`helm test`命令：
- en: '[PRE41]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If your test is successful, you will see the following results in the output:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的测试成功，您将在输出中看到以下结果：
- en: '[PRE42]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: When running your tests, you can also use the `--logs` flag to print your logs
    to the command line from the execution of the tests.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试时，还可以使用`--logs`标志将日志打印到命令行，从而执行测试。
- en: 'Run the tests again using this flag:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此标志再次运行测试：
- en: '[PRE43]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You will see the same test summary as before, in addition to each test''s associated
    container logs. The following is the first portion of the frontend connection
    test log output:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到与之前相同的测试摘要，以及每个测试相关的容器日志。以下是前端连接测试日志输出的第一部分：
- en: '[PRE44]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following is the backend connection `test` log output:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是后端连接`test`日志输出：
- en: '[PRE45]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The logs for this test will appear empty because you haven't yet entered any
    messages in the Guestbook frontend. You can run the test again after adding a
    message from the frontend to ensure the messages persist. Instructions to determine
    the URL of the Guestbook frontend are printed when you run both the installation
    and the `test` suites.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这次测试的日志将为空，因为您尚未在Guestbook前端输入任何消息。您可以在从前端添加消息后再次运行测试，以确保消息持久。在运行安装和`test`套件时，会打印确定Guestbook前端URL的说明。
- en: 'These instructions are again displayed here:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明再次显示在这里：
- en: '[PRE46]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Add a message from the Guestbook application once you have accessed the frontend
    from a browser.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 从浏览器访问前端后，向Guestbook应用程序添加一条消息。
- en: 'An example is shown in the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例截图：
- en: '![Figure 6.4 – The Guestbook application’s frontend'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 - Guestbook应用程序的前端'
- en: '](image/Figure_6.4.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.4.jpg)'
- en: Figure 6.4-1 – The Guestbook application's frontend
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4-1 - Guestbook应用程序的前端
- en: 'Run the `test` suite again once a message is added, providing the `--logs`
    flag to display the logs from the tests. You should be able to verify that this
    message was added by observing the backend connection `test` log output:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了消息，再次运行`test`套件，使用`--logs`标志显示测试日志。您应该能够通过观察后端连接`test`日志输出来验证是否已添加此消息：
- en: '[PRE47]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The following is a snippet displaying the backend connection `test` log output.
    You can verify that the message was persisted to the Redis database:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是显示后端连接`test`日志输出的片段。您可以验证消息是否已持久到Redis数据库中：
- en: '[PRE48]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In this section, we wrote simple tests that, as a whole, performed a smoke test
    on the installation of a chart. With these tests in place, we will feel more confident
    with making changes and adding features to this chart, provided that the chart
    tests run after each modification to ensure functionality is retained.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们编写了简单的测试，作为一个整体，对图表的安装进行了烟雾测试。有了这些测试，我们将更有信心对图表进行更改和添加功能，前提是在每次修改后运行图表测试以确保功能保持不变。
- en: In the next section, we will discuss how the testing process can be improved
    by leveraging a tool called `ct`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论如何通过利用一个名为`ct`的工具来改进测试过程。
- en: Improving chart tests with the chart testing project
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图表测试项目改进图表测试
- en: The tests written in the previous section are sufficient enough to test whether
    the Guestbook application can be successfully installed. However, there are some
    key limitations that are inherent to the standard Helm testing process that need
    to be called out.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节中编写的测试已足够测试Guestbook应用程序是否可以成功安装。然而，标准Helm测试过程中存在一些关键限制，需要指出。
- en: 'The first limitation to consider is the difficulty of testing the different
    permutations that can occur within a chart''s values. Because the `helm test`
    command does not provide the ability to modify your release''s values beyond those
    set at the time of an installation or upgrade, the following workflow must be
    followed when running `helm test` against different values settings:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要考虑的第一个限制是测试图表值中可能发生的不同排列的困难。因为`helm test`命令无法修改您发布的值，除了在安装或升级时设置的值，所以在针对不同的值设置运行`helm
    test`时，必须遵循以下工作流程：
- en: Install your chart with an initial set of values.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用初始值安装您的图表。
- en: Run `helm test` against your release.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 针对您的发布运行`helm test`。
- en: Delete your release.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除您的发布。
- en: Install your chart with a different set of values.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不同的值集安装您的图表。
- en: Repeat *steps 2* through *4* until a significant amount of value possibilities
    are tested.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤2*到*4*，直到测试了大量的值可能性。
- en: 'In addition to testing different value permutations, you should also make sure
    regressions do not occur when making modifications to your charts. The best way
    to prevent regressions while also testing the newer version of your chart is to
    use the following workflow:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 除了测试不同值的排列组合外，您还应确保在修改图表时不会出现回归。防止回归并测试图表的新版本的最佳方法是使用以下工作流程：
- en: Install a previous chart version.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装先前的图表版本。
- en: Upgrade your release to the newer chart version.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的发布升级到更新的图表版本。
- en: Delete the release.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除发布。
- en: Install the newer chart version.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装更新的图表版本。
- en: This workflow should be repeated against each set of value permutations to ensure
    that there are no regressions or intended breaking changes.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对每组值的排列组合重复此工作流程，以确保没有回归或意外的破坏性更改发生。
- en: These processes sound tedious but imagine the additional strain and maintenance
    on chart developers when maintaining multiple different Helm charts where careful
    testing should take place. When maintaining multiple Helm charts, chart developers
    tend to favor a `git` monorepo design. A repository is considered monorepo when
    multiple different artifacts or modules are contained in the same repository.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这些流程听起来很繁琐，但想象一下当维护多个不同的Helm图表时，图表开发人员需要进行仔细的测试，会增加额外的压力和维护工作。在维护多个Helm图表时，图表开发人员倾向于采用`git`
    monorepo设计。当同一个存储库中包含多个不同的构件或模块时，该存储库被认为是monorepo。
- en: 'In the case of Helm charts, a monorepo could have the following file structure:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在Helm图表的情况下，monorepo可能具有以下文件结构：
- en: '[PRE49]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Helm charts in a well-maintained monorepo should be tested when they are modified
    to ensure that intended breaking changes did not occur. When a chart is modified,
    its `version` field in its `Chart.yaml` file should also be increased according
    to the correct `SemVer` versioning to denote the type of change that was made.
    `SemVer` versions follow a `MAJOR.MINOR.PATCH` version numbering format.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改Helm图表时，应对其进行测试，以确保没有意外的破坏性更改发生。当修改图表时，其`Chart.yaml`文件中的`version`字段也应根据正确的`SemVer`版本进行增加，以表示所做更改的类型。`SemVer`版本遵循`MAJOR.MINOR.PATCH`版本编号格式。
- en: 'Use the following list as guideline for how to increase a `SemVer` version:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下列表作为如何增加`SemVer`版本的指南：
- en: Increment the `MAJOR` version if you are making a breaking change to your chart.
    A breaking change is a change that is not backward-compatible with the previous
    chart version.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您对图表进行了破坏性更改，请增加`MAJOR`版本。破坏性更改是指与先前的图表版本不兼容的更改。
- en: Increment the `MINOR` version if you are adding a feature but you are not making
    a breaking change. You should increment this version if the change you are making
    is backward-compatible with the previous chart version.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在添加一个功能但没有进行破坏性更改，请增加`MINOR`版本。如果您所做的更改与先前的图表版本兼容，应该增加此版本。
- en: Increment the `PATCH` version if you are making a patch to a bug or a security
    vulnerability that will not result in a breaking change. This version should be
    incremented if the change is backward-compatible with the previous chart version.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在修复错误或安全漏洞，而不会导致破坏性更改，请增加`PATCH`版本。如果更改与先前的图表版本兼容，应该增加此版本。
- en: Without well-written automation, it can become increasingly difficult to make
    sure charts are tested when modified and that their versions are incremented,
    especially if maintaining a monorepo with multiple Helm charts. This challenge
    prompted the Helm community to create a tool called `ct` to provide structure
    and automation around chart tests and maintenance. We will discuss this tool next.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 没有良好编写的自动化，当修改图表并增加它们的版本时，确保测试图表会变得越来越困难，特别是在维护多个Helm图表的monorepo时。这一挑战促使Helm社区创建了一个名为“ct”的工具，以提供图表测试和维护的结构和自动化。我们接下来将讨论这个工具。
- en: Introducing the chart testing project
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍图表测试项目
- en: T[he chart testing project, which can](https://github.com/helm/chart-testing)
    be found at [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing),
    is designed to be used against charts in a `git` monorepo to perform automated
    linting, validation, and testing. The automated testing is achieved by using `git`
    to detect charts that are changed against a target branch. Charts that are changed
    should undergo a testing process, while charts that are unchanged do not need
    to be tested.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图表测试项目可以在[https://github.com/helm/chart-testing](https://github.com/helm/chart-testing)找到，并设计用于针对git
    monorepo中的图表执行自动化的linting、验证和测试。通过使用git检测已更改的图表来实现自动化测试。已更改的图表应该经历测试过程，而未更改的图表则无需进行测试。
- en: 'The project''s CLI, `ct`, provides four primary commands:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的CLI“ct”提供了四个主要命令：
- en: '`lint`: Lints and validates charts that have been modified'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “lint”：对已修改的图表进行lint和验证
- en: '`install`: Installs and tests charts that have been modified'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “install”：安装和测试已修改的图表
- en: '`lint-and-install`: Lints, installs, and tests charts that have been modified'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “lint-and-install”：对已修改的图表进行lint、安装和测试
- en: '`list-changed`: Lists charts that have been modified'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “list-changed”：列出已修改的图表
- en: The `list-changed` command does not perform any validation or testing, while
    the `lint-and-install` command combines the `lint` and `install` commands to `lint`,
    `install`, and `test` modified charts. It also checks whether you have increased
    the modified charts' `version` fields in each of the charts' `Chart.yaml` files
    and fails testing for charts whose versions have not been increased but whose
    contents have been modified. This validation helps maintainers remain strict toward
    increasing their chart versions depending on the type of change made.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: “list-changed”命令不执行任何验证或测试，而“lint-and-install”命令将“lint”和“install”命令结合起来，对已修改的图表进行“lint”、“install”和“test”。它还会检查您是否已增加了每个图表的“Chart.yaml”文件中修改的图表的“version”字段，并对未增加版本但内容已修改的图表进行测试失败。这种验证有助于维护者根据所做更改的类型保持严格，以增加其图表版本。
- en: 'In addition to checking the chart versions, chart testing provides the ability
    to specify multiple values files per chart for testing purposes. During the invocation
    of the `lint`, `install`, and `lint-and-install` commands, chart testing loops
    through each test `values` file to override the chart''s default values and to
    perform validation and testing based on the different values permutations provided.
    Test `values` files are written under a folder called `ci/` to keep these values
    separate from your chart''s default `values.yaml` file, as in the following example
    file structure:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检查图表版本外，图表测试还提供了为测试目的指定多个值文件的能力。在调用“lint”、“install”和“lint-and-install”命令时，图表测试会循环遍历每个测试“values”文件，以覆盖图表的默认值，并根据提供的不同值排列进行验证和测试。测试“values”文件写在一个名为“ci/”的文件夹下，以将这些值与图表的默认“values.yaml”文件分开，如下例文件结构所示：
- en: '[PRE50]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Chart testing applies each `values` file under the `ci/` folder, regardless
    of the name used for the file. You may find it helpful to name each `values` file
    based on the values that are overridden so that the maintainers and contributors
    can understand the file contents.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图表测试适用于`ci/`文件夹下的每个`values`文件，无论文件使用的名称如何。您可能会发现，根据被覆盖的值为每个`values`文件命名，以便维护者和贡献者可以理解文件内容，这是有帮助的。
- en: 'The most common `ct` command you are likely to use is the `lint-and-install`
    command. The following lists the steps that this command uses to lint, install,
    and test charts that are modified in a `git` monorepo:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会经常使用的最常见的`ct`命令是`lint-and-install`命令。以下列出了该命令用于lint、安装和测试在`git` monorepo中修改的图表的步骤：
- en: Detect the charts that have been modified.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检测已修改的图表。
- en: Update the local Helm cache with the `helm repo update` command.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`helm repo update`命令更新本地Helm缓存。
- en: Download each modified chart's dependencies with the `helm dependency build`
    command.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`helm dependency build`命令下载每个修改后的图表的依赖项。
- en: Check whether each modified chart's version has been incremented.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查每个修改后的图表版本是否已递增。
- en: For each chart that evaluates to `true` in *step 4*, lint the chart and each
    `values` file under the `ci/` folder.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于在*步骤4*中评估为`true`的每个图表，对图表和`ci/`文件夹下的每个`values`文件进行lint。
- en: 'For each chart that evaluates to `true` in *step 4*, perform the following
    additional steps:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于在*步骤4*中评估为`true`的每个图表，执行以下附加步骤：
- en: Install the chart in an automatically created namespace.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动创建的命名空间中安装图表。
- en: Run tests by executing `helm test`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`helm test`来运行测试。
- en: Delete the namespace.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 删除命名空间。
- en: Repeat for each `values` file under the `ci/` folder.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ci/`文件夹下的每个`values`文件上重复。
- en: 'As you can see, this command performs a variety of different steps to ensure
    that your charts are properly linted and tested by installing and testing each
    modified chart in a separate namespace, repeating the process for each `values`
    file defined under the `ci/` folder. However, by default, the `lint-and-install`
    command does not check for backward compatibility by performing an upgrade from
    an older version of the chart. This feature can be enabled by adding the `--upgrade`
    flag:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，该命令执行各种不同的步骤，以确保您的图表通过在单独的命名空间中安装和测试每个修改后的图表来正确进行lint和测试，重复该过程对`ci/`文件夹下定义的每个`values`文件。然而，默认情况下，`lint-and-install`命令不会通过从图表的旧版本升级来检查向后兼容性。可以通过添加`--upgrade`标志来启用此功能：
- en: 'If a breaking change is not indicated, the `--upgrade` flag modifies *step
    6* of the previous set of steps by running the following steps:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指示有破坏性变化，则`--upgrade`标志会修改*上一组步骤*中的*步骤6*，通过运行以下步骤：
- en: Install the older version of the chart in an automatically created namespace.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自动创建的命名空间中安装图表的旧版本。
- en: Run tests by executing `helm test`.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`helm test`来运行测试。
- en: Upgrade the release to the modified version of the chart and run the tests again.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级发布到修改后的图表版本并再次运行测试。
- en: Delete the namespace.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除命名空间。
- en: Install the modified version of the chart in a new, automatically created namespace.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的自动创建的命名空间中安装修改后的图表版本。
- en: Run tests by executing `helm test`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`helm test`来运行测试。
- en: Upgrade the release again using the same chart version and rerun the tests.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用相同的图表版本升级发布并重新运行测试。
- en: Delete the namespace.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除命名空间。
- en: Repeat for each `values` file under the `ci/` folder.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ci/`文件夹下的每个`values`文件上重复。
- en: It is recommended that you add the `--upgrade` flag to perform additional testing
    on Helm upgrades and to prevent possible regressions.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您添加`--upgrade`标志，以便对Helm升级进行额外测试，并防止可能的回归。
- en: 'Important note:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: The `--upgrade` flag will not take effect if you have incremented the `MAJOR`
    version of your Helm chart as this indicates that you made a breaking change and
    that an in-place upgrade on this version would not be successful.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`--upgrade`标志将不会生效，如果您已经增加了Helm图表的`MAJOR`版本，因为这表示您进行了破坏性更改，并且在此版本上进行就地升级将不会成功。'
- en: Let's install the chart testing CLI and its dependencies locally so that we
    can later see this process in action.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在本地安装图表测试CLI及其依赖项，以便稍后可以看到此过程的实际操作。
- en: Installing the chart testing tools
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装图表测试工具
- en: 'In order to use the chart testing CLI, you must have the following tools installed
    on your local machine:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用图表测试CLI，您必须在本地机器上安装以下工具：
- en: '`helm`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: '`git` (version `2.17.0` or later)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git`（版本`2.17.0`或更高）'
- en: '`yamllint`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamllint`'
- en: '`yamale`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamale`'
- en: '`kubectl`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: Chart testing uses each of these tools in the testing process. `helm` and `kubectl`
    were installed in [*Chapter 2*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098),
    *Preparing a Kubernetes and Helm Environment*, Git was installed in [*Chapter
    5*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265), *Building Your First Helm
    Chart*, and yamllint was installed at the beginning of this chapter. If you have
    followed along with this book so far, the only prerequisite tool you should need
    to install now is Yamale, which is a tool that chart testing uses to validate
    your charts' `Chart.yaml` files against a `Chart.yaml` schema file.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图表测试在测试过程中使用这些工具。`helm`和`kubectl`在[*第2章*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098)中安装，*准备Kubernetes和Helm环境*，Git在[*第5章*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265)中安装，*构建您的第一个Helm图表*，yamllint在本章开头安装。如果您迄今为止一直在跟随本书，现在您应该需要安装的唯一先决条件工具是Yamale，这是图表测试用来验证您的图表的`Chart.yaml`文件与`Chart.yaml`模式文件相匹配的工具。
- en: 'Yamale can be installed with the `pip` package manager, as shown:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Yamale可以使用`pip`软件包管理器安装，如下所示：
- en: '[PRE51]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You can also ins[tall Yamale manually by downloading an archive from](https://github.com/23andMe/Yamale/archive/master.zip)
    [https://github.com/23andMe/Yamale/archive/master.zip](https://github.com/23andMe/Yamale/archive/master.zip).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过从[https://github.com/23andMe/Yamale/archive/master.zip](https://github.com/23andMe/Yamale/archive/master.zip)手动下载存档来安装Yamale。
- en: 'Once downloaded, unzip the archive and run the setup script:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，解压缩存档并运行安装脚本：
- en: '[PRE52]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Note that if you install the tool using a downloaded archive, you may need to
    run the `setup.py` script with elevated permissions, such as an administrator
    or as root on macOS and Linux.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您使用下载的存档安装工具，您可能需要以提升的权限运行`setup.py`脚本，例如在macOS和Linux上作为管理员或root用户。
- en: Once you have the required tooling installed, you should download the chart
    t[esting tool from the project's GitHub releases](https://github.com/helm/chart-testing/releases)
    page at [https://github.com/helm/chart-testing/releases](https://github.com/helm/chart-testing/releases).
    Each release contains an *Assets* section with a list of archives.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所需的工具后，您应该从项目的GitHub发布页面[https://github.com/helm/chart-testing/releases](https://github.com/helm/chart-testing/releases)下载图表测试工具。每个发布版本都包含一个*Assets*部分，其中列出了存档文件。
- en: 'Download the archive that corresponds with the platform type of your local
    machine. Version `v3.0.0-beta.1` was the version used for this book:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 下载与本地机器平台类型对应的存档。本书使用的版本是`v3.0.0-beta.1`：
- en: '![Figure 6.5 – The chart testing releases page on GitHub'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 - GitHub上的图表测试发布页面'
- en: '](image/Figure_6.5.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.5.jpg)'
- en: Figure 6.5 – The chart testing releases page on GitHub
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 - GitHub上的图表测试发布页面
- en: 'Unarchive the chart testing release once you have downloaded the appropriate
    file from the GitHub releases page. Once unarchived, you will see the following
    contents:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 从GitHub发布页面下载适当的文件后，解压缩图表测试版本。解压缩后，您将看到以下内容：
- en: '[PRE53]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You can remove the `LICENSE` and `README.md` files as they are not needed.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以删除`LICENSE`和`README.md`文件，因为它们是不需要的。
- en: 'The `etc/chart_schema.yaml` and `etc/lintconf.yaml` files should be moved to
    either the `$HOME/.ct/` or the `/etc/ct/` location on your local machine. The
    `ct` file should be moved to somewhere that is managed by your system''s `PATH`
    variable:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`etc/chart_schema.yaml`和`etc/lintconf.yaml`文件应移动到本地计算机上的`$HOME/.ct/`或`/etc/ct/`位置。`ct`文件应移动到由系统的`PATH`变量管理的位置：'
- en: '[PRE54]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Now, all of the required tooling is installed. For this example, we will make
    a change locally to the Packt repository and use chart testing to lint and install
    the modified charts.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有必需的工具都已安装。在本示例中，我们将在本地对Packt存储库进行更改，并使用图表测试来对修改后的图表进行lint和安装。
- en: 'If you have not yet cloned the repository to your local machine, you should
    do so now:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未将存储库克隆到本地计算机，请立即执行此操作：
- en: '[PRE55]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Once cloned, you may notice that this repository has a file in the top level
    called `ct.yaml` with the following contents:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆后，您可能会注意到该存储库在顶层有一个名为`ct.yaml`的文件，其中包含以下内容：
- en: '[PRE56]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The `chart-dirs` field of this file indicates to `ct` that the `helm-charts/charts`
    directory relative to the `ct.yaml` file is the root of the chart's monorepo.
    The `chart-repos` field provides a list of repositories that chart testing should
    run `helm repo add` against to ensure it is able to download dependencies.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的`chart-dirs`字段指示`ct`，相对于`ct.yaml`文件，`helm-charts/charts`目录是图表monorepo的根目录。`chart-repos`字段提供了应该运行`helm
    repo add`的存储库列表，以确保它能够下载依赖项。
- en: There are a variety of other configurations that can be added to this file,
    which will not be discussed at this time b[ut can be reviewed in the chart testi](https://github.com/helm/chart-testing)ng
    documentation at [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing).
    Each invocation of the `ct` command references the `ct.yaml` file.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他配置可以添加到此文件中，这些将在此时不予讨论，但可以在图表测试文档中查看。每次调用`ct`命令都会引用`ct.yaml`文件。
- en: Now that the tooling is installed and the Packt repository has been cloned,
    let's test the `ct` tool out by executing the `lint-and-install` command.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，工具已安装，并且Packt存储库已克隆，让我们通过执行`lint-and-install`命令来测试`ct`工具。
- en: Running the chart testing lint-and-install command
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 运行图表测试lint-and-install命令
- en: 'The `lint-and-install` command is used against the three Helm charts included
    under `Learn-Helm/helm-charts/charts`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`lint-and-install`命令针对`Learn-Helm/helm-charts/charts`下包含的三个Helm图表使用：'
- en: '`guestbook`: This is the Guestbook chart that you wrote in the previous chapter.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`guestbook`：这是您在上一章中编写的Guestbook图表。'
- en: '`nginx`: This is an additional Helm chart that we have included for demonstration
    purposes. This chart, created by running the `helm create` command, is used to
    deploy the `nginx` reverse proxy.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nginx`：这是我们为演示目的包含的另一个Helm图表。通过运行`helm create`命令创建的此图表用于部署`nginx`反向代理。'
- en: 'To run the tests, first, navigate to the top level of the `Learn-Helm` repository:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试，首先导航到`Learn-Helm`存储库的顶层：
- en: '[PRE57]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The `ct.yaml` file displays the location of the chart''s monorepo via the `chart-dirs`
    field, so you can simply run the `ct lint-and-install` command from the top level:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`ct.yaml`文件通过`chart-dirs`字段显示了图表monorepo的位置，因此您可以直接从顶层运行`ct lint-and-install`命令：'
- en: '[PRE58]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'After running this command, you''ll see the following message displayed at
    the end of the output:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您将在输出的末尾看到以下消息显示：
- en: '![Figure 6.6 – The chart testing lint-and-install output when charts are not
    modified'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 - 当图表没有被修改时的图表测试lint-and-install输出'
- en: '](image/Figure_6.6.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.6.jpg)'
- en: Figure 6.6 – The chart testing `lint-and-install` output when charts are not
    modified
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 - 当图表没有被修改时的图表测试`lint-and-install`输出
- en: 'Since none of the charts in this repository were modified, `ct` did not perform
    any actions on your charts. We should modify at least one of these charts to see
    the `lint-and-install` process take place. Modifications should take place in
    branches other than `master`, so a new branch called `chart-testing-example` should
    be created by executing the following command:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个存储库中的图表都没有被修改，`ct`没有对您的图表执行任何操作。我们应该至少修改其中一个图表，以便看到`lint-and-install`过程发生。修改应该发生在`master`之外的分支上，因此应该通过执行以下命令创建一个名为`chart-testing-example`的新分支：
- en: '[PRE59]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The modifications can be large or small; for this example, we will simply modify
    each chart''s `Chart.yaml` file. Modify the `description` field of the `Learn-Helm/helm-charts/charts/guestbook/Chart.yaml`
    file to read as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 修改可以是大的或小的；对于这个例子，我们将简单地修改每个图表的`Chart.yaml`文件。修改`Learn-Helm/helm-charts/charts/guestbook/Chart.yaml`文件的`description`字段如下所示：
- en: '[PRE60]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Previously, this value was `A Helm chart for Kubernetes`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 先前，这个值是`A Helm chart for Kubernetes`。
- en: 'Modify the `description` field of the `Learn-Helm/helm-charts/charts/nginx/Chart.yaml`
    file to read as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`Learn-Helm/helm-charts/charts/nginx/Chart.yaml`文件的`description`字段如下所示：
- en: '[PRE61]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Previously, this value was `A Helm chart for Kubernetes`. Verify that both
    charts have been modified from their last `git` commit by running the `git status`
    command:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 先前，这个值是`A Helm chart for Kubernetes`。通过运行`git status`命令验证上次`git`提交后两个图表是否已被修改：
- en: '![Figure 6.7 – The git status output after both charts have been modified'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 - 在修改了两个图表后的git status输出'
- en: '](image/Figure_6.7.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.7.jpg)'
- en: Figure 6.7 – The `git status` output after both charts have been modified
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 - 在修改了两个图表后的`git status`输出
- en: 'You should see a change in both the `guestbook` and `nginx` charts. With these
    charts modified, try running the `lint-and-install` command again:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到`guestbook`和`nginx`图表的变化。修改了这些图表后，尝试再次运行`lint-and-install`命令：
- en: '[PRE62]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This time, `ct` determines whether changes have occurred to two of the charts
    in this monorepo, as in the following output:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`ct`确定了这个monorepo中两个图表是否发生了更改，如下所示的输出：
- en: '![Figure 6.8 – Messages denoting changes to the guestbook and nginx charts'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 - 指示对guestbook和nginx图表的更改的消息'
- en: '](image/Figure_6.8.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.8.jpg)'
- en: Figure 6.8 – Messages denoting changes to the `guestbook` and `nginx` charts
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 - 指示对`guestbook`和`nginx`图表的更改的消息
- en: 'This process, however, will later fail because neither of the charts'' versions
    were modified:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个过程后来会失败，因为这两个图表的版本都没有被修改：
- en: '![Figure 6.9 – The output when no chart changes have been made'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 - 当没有图表更改时的输出'
- en: '](image/Figure_6.9.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.9.jpg)'
- en: Figure 6.9 – The output when no chart changes have been made
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 - 当没有图表更改时的输出
- en: 'This can be fixed by incrementing the `guestbook` and `nginx` chart versions.
    Since this change does not introduce new features, we will increment the `PATCH`
    version. Modify both chart versions to `version 1.0.1` in their respective `Chart.yaml`
    files:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过增加`guestbook`和`nginx`图表的版本来解决。由于这个更改没有引入新功能，我们将增加`PATCH`版本。在各自的`Chart.yaml`文件中将两个图表的版本都修改为`version
    1.0.1`：
- en: '[PRE63]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Ensure that this change has been made to each chart by running the `git diff`
    command. If you see each version modification in the output, continue to run the
    `lint-and-install` command again:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行“git diff”命令确保每个图表都已进行了此更改。如果在输出中看到每个版本的修改，请继续再次运行“lint-and-install”命令：
- en: '[PRE64]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now that the chart versions have been incremented, the `lint-and-install` command
    will follow the full chart testing workflow. You will see that each modified chart
    is linted and deployed to an automatically created namespace. Once the deployed
    application''s pods are reported as ready, `ct` will automatically run the test
    cases of each chart as denoted by resources with the `helm.sh/hook: test` annotation.
    Chart testing will also print the logs of each test pod, as well as the namespace
    events.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '现在图表版本已经增加，“lint-and-install”命令将遵循完整的图表测试工作流程。您将看到每个修改的图表都会被linted并部署到自动创建的命名空间中。一旦部署的应用程序的pod被报告为就绪状态，“ct”将自动运行每个图表的测试用例，这些测试用例由带有“helm.sh/hook:
    test”注释的资源表示。图表测试还将打印每个测试pod的日志，以及命名空间事件。'
- en: You may notice, in the `lint-and-install` output, that the `nginx` chart is
    deployed twice, while the `guestbook` chart was only deployed and tested once.
    This is because the `nginx` chart has a `ci/` folder, located at `Learn-Helm/helm-charts/charts/nginx/ci/`,
    that contains two different `values` files. The `values` files in the `ci/` folder
    are iterated on by chart testing, which installs the chart as many times as there
    are `values` files to ensure that each combination of values results in a successful
    installation. The `guestbook` chart does not include a `ci/` folder, so this chart
    was only installed once.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，在“lint-and-install”输出中，“nginx”图表部署了两次，而“guestbook”图表只部署和测试了一次。这是因为“nginx”图表有一个位于“Learn-Helm/helm-charts/charts/nginx/ci/”的“ci/”文件夹，其中包含两个不同的“values”文件。“ci/”文件夹中的“values”文件将被图表测试迭代，该测试将安装与“values”文件数量相同的图表，以确保每个值组合都能成功安装。“guestbook”图表不包括“ci/”文件夹，因此此图表只安装了一次。
- en: 'This can be observed in the following lines of the `lint-and-install` output:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在“lint-and-install”输出的以下行中观察到：
- en: '[PRE65]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: While the command was useful for testing the functionality of both charts, it
    did not validate whether upgrades to the newer version will be successful.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然该命令对于测试两个图表的功能很有用，但它并未验证对新版本的升级是否成功。
- en: 'To do this, we need to provide the `--upgrade` flag to the `lint-and-install`
    command. Try, once again, to run this command, but this time with the `--upgrade`
    flag:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要向“lint-and-install”命令提供“--upgrade”标志。再次尝试运行此命令，但这次使用“--upgrade”标志：
- en: '[PRE66]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This time, an in-place upgrade will occur for each `values` file under `ci/`.
    This can be seen in the output as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，每个“ci/”下的“values”文件将进行原地升级。这可以在输出中看到如下：
- en: '[PRE67]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Recall that an in-place upgrade will only be tested if the `MAJOR` version
    between versions is the same. If you use the `--upgrade` flag but did change the
    `MAJOR` version, you will see a message similar to the following :'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，只有在版本之间的“MAJOR”版本相同时，原地升级才会被测试。如果您使用“--upgrade”标志，但未更改“MAJOR”版本，您将看到类似以下的消息：
- en: '[PRE68]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Now, with an understanding of how to perform robust testing on your Helm charts
    with chart testing, we will conclude by cleaning up your `minikube` environment.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过了解如何使用图表测试对Helm图表进行强大的测试，我们将通过清理您的“minikube”环境来结束。
- en: Cleaning up
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'If you are finished with the examples described in this chapter, you can remove
    the `chapter6` namespace from your `minikube` cluster:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经完成了本章中描述的示例，可以从您的“minikube”集群中删除“chapter6”命名空间：
- en: '[PRE69]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Finally, shut down your `minikube` cluster by running `minikube stop`.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过运行“minikube stop”关闭您的“minikube”集群。
- en: Summary
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the different methods you can apply to test
    your Helm charts. The most basic way of testing a chart is to run the `helm template`
    command against a local chart directory to determine whether its resources are
    properly generated. You can also use the `helm lint` command to ensure that your
    chart follows the correct format and you can use the `yamllint` command to lint
    the YAML style used in your chart.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了可以应用于测试Helm图表的不同方法。测试图表的最基本方法是针对本地图表目录运行`helm template`命令，以确定其资源是否正确生成。您还可以使用`helm
    lint`命令来确保您的图表遵循正确的格式，并且可以使用`yamllint`命令来检查图表中使用的YAML样式。
- en: Apart from local templating and linting, you can also perform live tests on
    a Kubernetes environment with the `helm test` command and the `ct` tool. In addition
    to performing chart tests, chart testing also provides capabilities that make
    it easier for chart developers to maintain Helm charts in a monorepo.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本地模板化和检查外，您还可以使用`helm test`命令和`ct`工具在Kubernetes环境中执行实时测试。除了执行图表测试外，图表测试还提供了使图表开发人员更容易在monorepo中维护Helm图表的功能。
- en: In the next chapter, you will learn how Helm can be used in a **Continuous Integration/Continuous
    Delivery** (**CI/CD**) and GitOps setting, from both the perspective of a chart
    developer that is building and testing Helm charts and from the perspective of
    an end user using Helm to deploy an application to Kubernetes.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解Helm如何在**持续集成/持续交付**（**CI/CD**）和GitOps设置中使用，从图表开发人员构建和测试Helm图表的角度，以及从使用Helm将应用程序部署到Kubernetes的最终用户的角度。
- en: Further reading
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For additional information on the `helm template` and `helm lint` com[mands,
    please refer to the following res](https://helm.sh/docs/helm/helm_template/)ources:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`helm template`和`helm lint`命令的更多信息，请参阅以下资源：[https://helm.sh/docs/helm/helm_template/](https://helm.sh/docs/helm/helm_template/)
- en: '`helm template`: [https://helm.sh/docs/helm/helm_template/](https://helm.sh/docs/helm/helm_template/)'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm template`：[https://helm.sh/docs/helm/helm_template/](https://helm.sh/docs/helm/helm_template/)'
- en: '`helm lint`: [https://helm.sh/docs/helm/helm_lint/](https://helm.sh/docs/helm/helm_lint/)'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm lint`：[https://helm.sh/docs/helm/helm_lint/](https://helm.sh/docs/helm/helm_lint/)'
- en: 'The following pages from the Helm documentati[on discuss chart tests and the
    `helm test`](https://helm.sh/docs/topics/chart_tests/) command:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Helm文档中的以下页面讨论了图表测试和`helm test`命令：[https://helm.sh/docs/topics/chart_tests/](https://helm.sh/docs/topics/chart_tests/)
- en: 'Chart tests: [https://helm.sh/docs/topics/chart_tests/](https://helm.sh/docs/topics/chart_tests/)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表测试：[https://helm.sh/docs/topics/chart_tests/](https://helm.sh/docs/topics/chart_tests/)
- en: 'The `helm test` command: [https://helm.sh/docs/helm/helm_test/](https://helm.sh/docs/helm/helm_test/)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm test`命令：[https://helm.sh/docs/helm/helm_test/](https://helm.sh/docs/helm/helm_test/)'
- en: 'Finally, see the chart te[sting GitHub repository for more info](https://github.com/helm/chart-testing)rmation
    about the `ct` CLI: [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing).'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，请查看有关`ct` CLI的图表测试GitHub存储库的更多信息：[https://github.com/helm/chart-testing](https://github.com/helm/chart-testing)。
- en: Questions
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the purpose of the `helm template` command? How does it differ from
    the `helm lint` command?
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm template`命令的目的是什么？它与`helm lint`命令有何不同？'
- en: What can you do to validate your chart templates before installing them in Kubernetes?
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将图表模板安装到Kubernetes之前，您可以做什么来验证它们？
- en: What tool can be leveraged to lint the style of your YAML resources?
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以利用哪个工具来检查您的YAML资源的样式？
- en: How is a chart test created? How is a chart test executed?
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建图表测试？如何执行图表测试？
- en: What additional value does the `ct` tool bring to Helm's built-in testing capabilities?
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ct`工具为Helm内置的测试功能带来了什么附加价值？'
- en: What is the purpose of the `ci/` folder when used with the `ct` tool?
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用`ct`工具时，`ci/`文件夹的目的是什么？
- en: How does the `--upgrade` flag change the behavior of the `ct lint-and-install`
    command?
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--upgrade` 标志如何改变 `ct lint-and-install` 命令的行为？'
