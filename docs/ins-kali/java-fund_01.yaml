- en: '*Chapter 1*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*'
- en: Introduction to Java
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Java
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this lesson, you''ll be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课结束时，你将能够：
- en: Describe the working of the Java ecosystem
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述Java生态系统的工作
- en: Write simple Java programs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写简单的Java程序
- en: Read input from the users
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户那里读取输入
- en: Utilize classes in the java.util package
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用java.util包中的类
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In this first lesson, we are embarking on our study of Java. If you are coming
    to Java from a background of working with another programming language, you probably
    know that Java is a language for programming computers. But Java goes beyond just
    that. It's more than a very popular and successful language that is virtually
    present everywhere, it is a collection of technologies. Besides the language,
    it encompasses a very rich ecosystem and it has a vibrant community working on
    many facets to make the ecosystem as dynamic as it can be.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第一课中，我们开始学习Java。如果你是从其他编程语言的背景下来学习Java，你可能知道Java是一种用于编程计算机的语言。但Java不仅仅是如此。它不仅仅是一种无处不在的非常流行和成功的语言，它还是一系列技术。除了语言之外，它还包括一个非常丰富的生态系统，并且有一个充满活力的社区，致力于使生态系统尽可能动态。
- en: The Java Ecosystem
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java生态系统
- en: The three most basic parts of the Java ecosystem are the **Java Virtual Machine
    (JVM)**, the **Java Runtime Environment (JRE)**, and the **Java Development Kit
    (JDK)**, which are *stock* parts that are supplied by Java implementations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java生态系统的三个最基本部分是**Java虚拟机（JVM）**，**Java运行时环境（JRE）**和**Java开发工具包（JDK）**，它们是Java实现提供的*标准*部分。
- en: '![Figure 1.1: A representation of the Java ecoystem](img/C09581_01_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1：Java生态系统的表示](img/C09581_01_01.jpg)'
- en: 'Figure 1.1: A representation of the Java ecosystem'
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.1：Java生态系统的表示
- en: Every Java program runs under the control of a **JVM**. Every time you run a
    Java program, an instance of JVM is created. It provides security and isolation
    for the Java program that is running. It prevents the running of the code from
    clashing with other programs within the system. It works like a non-strict sandbox,
    making it safe to serve resources, even in hostile environments such as the internet,
    but allowing interoperability with the computer on which it runs. In simpler terms,
    JVM acts as a *computer inside a computer*, which is meant specifically for running
    Java programs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Java程序都在**JVM**的控制下运行。每次运行Java程序时，都会创建一个JVM实例。它为正在运行的Java程序提供安全性和隔离。它防止代码运行与系统中的其他程序发生冲突。它的工作原理类似于一个非严格的沙箱，使其可以安全地提供资源，即使在敌对环境（如互联网）中，但允许与其运行的计算机进行互操作。简单来说，JVM就像一个*计算机内的计算机*，专门用于运行Java程序。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: It is common for servers to have many JVMs in execution simultaneously.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器通常同时执行许多JVM。
- en: Up in the hierarchy of stock Java technologies is the `java` command). It includes
    all the base Java classes (the runtime) as well as the libraries for interaction
    with the host system (such as font management, communication with the graphical
    system, the ability to play sounds, and plugins for the execution of Java applets
    in the browser) and utilities (such as the Nashorn JavaScript interpreter and
    the keytool cryptographic manipulation tool). As stated before, the JRE includes
    the JVM.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java技术的*标准*层次结构中是`java`命令）。它包括所有基本的Java类（运行时）以及与主机系统交互的库（如字体管理，与图形系统通信，播放声音的能力以及在浏览器中执行Java小程序的插件）和实用程序（如Nashorn
    JavaScript解释器和keytool加密操作工具）。如前所述，JRE包括JVM。
- en: At the top layer of stock Java technologies is the `javac`). The JDK also includes
    many auxiliary tools such as a Java disassembler (`javap`), a utility to create
    packages of Java applications (`jar`), system to generate documentation from source
    code (`javadoc`), among many other utilities. The JDK is a superset of the JRE,
    meaning that if you have the JDK, then you also have the JRE (and the JVM).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java技术的顶层是`javac`。JDK还包括许多辅助工具，如Java反汇编器（`javap`），用于创建Java应用程序包的实用程序（`jar`），从源代码生成文档的系统（`javadoc`）等等。JDK是JRE的超集，这意味着如果你有JDK，那么你也有JRE（和JVM）。
- en: But those three parts are not the entirety of Java. The ecosystem of Java includes
    a very large participation of the community, which is one of the reasons for the
    popularity of the platform.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但这三个部分并不是Java的全部。Java的生态系统包括社区的大量参与，这是该平台受欢迎的原因之一。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Research into the most popular Java libraries that are used by the top Java
    projects on GitHub (according to research that has been repeated in 2016 and 2017)
    showed that JUnit, Mockito, Google's Guava, logging libraries (log4j, sl4j), and
    all of Apache Commons (Commons IO, Commons Lang, Commons Math, and so on), marked
    their presence, together with libraries to connect to databases, libraries for
    data analysis and machine learning, distributed computing, and almost anything
    else that you can imagine. In other words, for almost any use that you want to
    write programs to, there are high chances of an existing library of tools to help
    you with your task.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对GitHub上顶级Java项目使用的最流行的Java库进行的研究（根据2016年和2017年的重复研究）显示，JUnit，Mockito，Google的Guava，日志库（log4j，sl4j）以及所有Apache
    Commons（Commons IO，Commons Lang，Commons Math等）都标志着它们的存在，还有连接到数据库的库，用于数据分析和机器学习的库，分布式计算等几乎你能想象到的任何其他用途。换句话说，几乎任何你想编写程序的用途都有现有的工具库来帮助你完成任务。
- en: Besides the numerous libraries that extend the functionality of the stock distributions
    of Java, there is a myriad of tools to automate builds (for example, Apache Ant,
    Apache Maven, and Gradle), automate tests, distribution and continuous integration/delivery
    programs (for example, Jenkins and Apache Continuum), and much, much more.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了扩展Java标准发行版功能的众多库之外，还有大量工具可以自动化构建（例如Apache Ant，Apache Maven和Gradle），自动化测试，分发和持续集成/交付程序（例如Jenkins和Apache
    Continuum），以及更多其他工具。
- en: Our First Java Application
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个Java应用程序
- en: 'As we briefly hinted before, programs in Java are written in source code (which
    are plain text, human-readable files) that is processed by a compiler (in the
    case of Java, `javac`) to produce the Java bytecode in class files. The class
    files containing Java bytecode are, then, fed to a program called java, which
    contains the Java interpreter/JVM that executes the program that we wrote:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前简要提到的，Java中的程序是用源代码（即普通文本，人类可读文件）编写的，这些源代码由编译器（在Java的情况下是`javac`）处理，以生成包含Java字节码的类文件。包含Java字节码的类文件，然后被提供给一个名为java的程序，其中包含执行我们编写的程序的Java解释器/JVM：
- en: '![Figure 1.2: The process of compilation in Java](img/C09581_01_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2：Java编译过程](img/C09581_01_02.jpg)'
- en: 'Figure 1.2: The process of compilation in Java'
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.2：Java编译过程
- en: Syntax of a Simple Java Program
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单Java程序的语法
- en: 'Like all programming languages, the source code in Java must follow particular
    syntaxes. Only then, will the program compile and provide accurate results. Since
    Java is an object-oriented programming language, everything in Java is enclosed
    within classes. A simple Java program looks similar to this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有编程语言一样，Java中的源代码必须遵循特定的语法。只有这样，程序才能编译并提供准确的结果。由于Java是一种面向对象的编程语言，Java中的所有内容都包含在类中。一个简单的Java程序看起来类似于这样：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Every java program file should have the same name as that of the class that
    contains `main ()`. It is the entry point into the Java program.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个java程序文件的名称应与包含`main()`的类的名称相同。这是Java程序的入口点。
- en: Therefore the preceding program will compile and run without any errors only
    when these instructions are stored in a file called `Test.java`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只有当这些指令存储在名为`Test.java`的文件中时，前面的程序才会编译并运行而不会出现任何错误。
- en: Another key feature of Java is that it is case-sensitive. This implies that
    `System.out.Println` will throw an error as it is not capitalized correctly. The
    correct instruction should be `System.out.println.`
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Java的另一个关键特性是它区分大小写。这意味着`System.out.Println`会抛出错误，因为它的大小写没有正确。正确的指令应该是`System.out.println`。
- en: '`main()` should always be declared as shown in the sample. This is because,
    if `main()` is not a `public` method, it will not be accessed by the compiler,
    and the java program will not run. The reason `main()` is static is because we
    do not call it using any object, like you would for all other regular methods
    in Java.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`应该始终声明如示例所示。这是因为，如果`main()`不是一个`public`方法，编译器将无法访问它，java程序将无法运行。`main()`是静态的原因是因为我们不使用任何对象来调用它，就像你对Java中的所有其他常规方法一样。'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: We will discuss these the public and static keywords later in this book, in
    greater depth.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面讨论这些`public`和`static`关键字。
- en: Comments are used to provide some additional information. The Java compiler
    ignores these comments.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注释用于提供一些额外的信息。Java编译器会忽略这些注释。
- en: Single line comments are denoted by `//` and multiline comments are denoted
    by `/* */`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 单行注释用`//`表示，多行注释用`/* */`表示。
- en: 'Exercise 1: A Simple Hello World Program'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习1：一个简单的Hello World程序
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，选择**新建** | **类**。
- en: Enter `HelloWorld` as the class name, and then click **OK**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`HelloWorld`作为类名，然后点击**确定**。
- en: 'Enter the following code within the class:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中输入以下代码：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run the program by clicking on **Run** | **Run 'Main'**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**运行** | **运行“Main”**来运行程序。
- en: 'The output of the program should be as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出应该如下所示：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Exercise 2: A Simple Program for Performing Simple Mathematic Operations'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习2：执行简单数学运算的简单程序
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，选择**新建** | **类**。
- en: Enter `ArithmeticOperations` as the class name, and then click **OK**.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ArithmeticOperations`作为类名，然后点击**确定**。
- en: 'Replace the code inside this folder with the following code:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换此文件夹中的代码：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run the main program.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Java, when you divide an integer (such as 4) by another integer (such as
    5), the result is always an integer (unless you instruct the program otherwise).
    In the preceding case, do not be alarmed to see that 4 / 5 gives 0 as a result,
    since that's the quotient of 4 when divided by 5 (you can get the remainder of
    the division by using a % instead of the division bar).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，当您将一个整数（例如4）除以另一个整数（例如5）时，结果总是一个整数（除非您另有指示）。在前面的情况下，不要惊讶地看到4/5的结果是0，因为这是4除以5的商（您可以使用%而不是除法线来获得除法的余数）。
- en: 'To get the result of 0.8, you would have to instruct the division to be a floating-point
    division instead of an integer division. You can do that with the following line:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得0.8的结果，您必须指示除法是浮点除法，而不是整数除法。您可以使用以下行来实现：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Yes, this does mean, like most programming languages, there is more than one
    type of number in Java.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这意味着，像大多数编程语言一样，Java中有多种类型的数字。
- en: 'Exercise 3: Displaying Non-ASCII Characters'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习3：显示非ASCII字符
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，选择**新建** | **类**。
- en: Enter `ArithmeticOperations` as the class name, and then click **OK**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ArithmeticOperations`作为类名，然后点击**确定**。
- en: 'Replace the code in this folder with the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换此文件夹中的代码：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run the main program.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output for the program should be as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出应该如下所示：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Activity 1: Printing the Results of Simple Arithmetic Operations'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动1：打印简单算术运算的结果
- en: 'To write a java program that prints the sum and the product of any two values,
    perform the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个打印任意两个值的和和乘积的java程序，请执行以下步骤：
- en: Create a new class.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新类。
- en: Within `main()`, print a sentence describing the operation on the values you
    will be performing along with the result.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中，打印一句描述您将执行的值的操作以及结果。
- en: 'Run the main program. Your output should be similar to the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。您的输出应该类似于以下内容：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 304.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在304页找到。
- en: Getting Input from the User
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从用户那里获取输入
- en: 'We previously studied a program that created output. Now, we are, going to
    study a complementary program: a program that gets input from the user so that
    the program can work based on what the user gives the program:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前学习过一个创建输出的程序。现在，我们要学习一个补充性的程序：一个从用户那里获取输入，以便程序可以根据用户给程序的内容来工作：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we must dissect the structure of our new program, the one with the public
    class `ReadInput`. You might notice that it has more lines and that it is apparently
    more complex, but fret not: every single detail will be revealed (in all its full,
    glorious depth) when the time is right. But, for now, a simpler explanation will
    do, since we don''t want to lose our focus on the principal, which is taking input
    from the user.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须剖析我们的新程序的结构，即具有公共类`ReadInput`的程序。你可能注意到它有更多的行，而且显然更复杂，但不要担心：在合适的时候，每一个细节都会被揭示出来（以其全部、光辉的深度）。但是，现在，一个更简单的解释就足够了，因为我们不想失去对主要内容的关注，即从用户那里获取输入。
- en: First, on line 1, we use the `import` keyword, which we have not seen yet. All
    Java code is organized in a hierarchical fashion, with many packages (we will
    discuss packages in more detail later, including how to make your own).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在第1行，我们使用了`import`关键字，这是我们之前没有见过的。所有的Java代码都是以分层方式组织的，有许多包（我们稍后会更详细地讨论包，包括如何创建自己的包）。
- en: Here, hierarchy means "organized like a tree", similar to a family tree. In
    line 1 of the program, the word `import` simply means that we will use methods
    or classes that are organized in the `java.io.Exception` package.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，层次结构意味着“像树一样组织”，类似于家谱。在程序的第1行，`import`这个词简单地意味着我们将使用`java.io.Exception`包中组织的方法或类。
- en: On line 2, we, as before, create a new public class called `ReadInput`, without
    any surprises. As expected, the source code of this program will have to be inside
    a source file called `ReadInput.java`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2行，我们像以前一样创建了一个名为`ReadInput`的新公共类，没有任何意外。正如预期的那样，这个程序的源代码必须在一个名为`ReadInput.java`的源文件中。
- en: On line 3, we start the definition of our `main` method, but, this time, add
    a few words after the closing parentheses. The new words are `throws IOException`.
    Why is this needed?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3行，我们开始定义我们的`main`方法，但是这次在括号后面加了几个词。新词是`throws IOException`。为什么需要这个呢？
- en: 'The short explanation is: "Because, otherwise, the program will not compile."
    A longer version of the explanation is "Because when we read the input from the
    user, there may be an error and the Java language forces us to tell the compiler
    about some errors that our program may encounter during execution."'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的解释是：“否则，程序将无法编译。”更长的解释是：“因为当我们从用户那里读取输入时，可能会出现错误，Java语言强制我们告诉编译器关于程序在执行过程中可能遇到的一些错误。”
- en: 'Also, line 3 is the line that''s responsible for the need of the `import` in
    line 1: the `IOException` is a special class that is under the `java.io.Exception`
    hierarchy.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，第3行是需要第1行的`import`的原因：`IOException`是一个特殊的类，位于`java.io.Exception`层次结构之下。
- en: 'Line 5 is where the real action begins: we define a variable called `inByte`
    (short for "byte that will be input"), which will contain the results of the `System.in.read`
    method.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第5行是真正行动开始的地方：我们定义了一个名为`inByte`（缩写为“将要输入的字节”）的变量，它将包含`System.in.read`方法的结果。
- en: The `System.in.read` method, when executed, will take the first byte (and only
    one) from the standard input (usually, the keyboard, as we already discussed)
    and give it back as the answer to those who executed it (in this case, we, in
    line 5). We store this result in the `inByte` variable and continue the execution
    of the program.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.in.read`方法在执行时，将从标准输入（通常是键盘，正如我们已经讨论过的）中取出第一个字节（仅一个），并将其作为答案返回给执行它的人（在这种情况下，就是我们，在第5行）。我们将这个结果存储在`inByte`变量中，并继续执行程序。'
- en: With line 6, we print (to the standard output) a message saying what byte we
    read, using the standard way of calling the `System.out.println` method.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6行，我们打印（到标准输出）一条消息，说明我们读取了什么字节，使用了调用`System.out.println`方法的标准方式。
- en: 'Notice that, for the sake of printing the byte (and not the internal number
    that represents the character for the computer), we had to use a construct of
    the following form:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了打印字节（而不是代表计算机字符的内部数字），我们必须使用以下形式的结构：
- en: An open parenthesis
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个开括号
- en: The word `char`
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单词`char`
- en: A closing parenthesis
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个闭括号
- en: We use this before the variable named `inByte`. This construct is called a type
    cast and will be explained in much more detail in the lessons that follow.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在名为`inByte`的变量之前使用了这个。这个结构被称为类型转换，将在接下来的课程中更详细地解释。
- en: On line 7, we use a different way to print the same message to the standard
    output. This is meant to show you how many tasks may be accomplished in more than
    one way and that there is "no single correct" way. Here, we use the `System.out.println`
    function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7行，我们使用了另一种方式将相同的消息打印到标准输出。这是为了向你展示有多少任务可以以不止一种方式完成，以及“没有单一正确”的方式。在这里，我们使用了`System.out.println`函数。
- en: The remaining lines simply close the braces of the `main` method definition
    and that of the `ReadInput` class.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的行只是关闭了`main`方法定义和`ReadInput`类的大括号。
- en: 'Some of the main format strings for `System.out.printf` are listed in the following
    table:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.out.printf`的一些主要格式字符串列在下表中：'
- en: '![Table 1.1: Format strings and its meaning](img/C09581_Table_01_01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![表1.1：格式字符串及其含义](img/C09581_Table_01_01.jpg)'
- en: 'Table 1.1: Format strings and their meaning'
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 表1.1：格式字符串及其含义
- en: There are many other formatting strings and many variables, and you can find
    the full specification on Oracle's website.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他格式化字符串和许多变量，你可以在Oracle的网站上找到完整的规范。
- en: We will see some other common (modified) formatted strings, such as %.2f (which
    instructs the function to print a floating-point number with exactly two decimal
    digits after the decimal point, such as 2.57 or -123.45) and %03d (which instructs
    the function to print an integer with at least three places possibly left filled
    with 0s, such as 001 or 123 or 27204).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一些其他常见（修改过的）格式化字符串，例如%.2f（指示函数打印小数点后恰好两位小数的浮点数，例如2.57或-123.45）和%03d（指示函数打印至少三位数的整数，可能左侧填充0，例如001或123或27204）。
- en: 'Exercise 4: Reading Values from the User and Performing Operations'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4：从用户那里读取值并执行操作
- en: 'To read two numbers from the user and print their product, perform the following
    steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户那里读取两个数字并打印它们的乘积，执行以下步骤：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“src”文件夹，然后选择**新建** | **类**。
- en: Enter `ProductOfNos` as the class name, and then click **OK**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ProductOfNos`作为类名，然后单击**确定**。
- en: 'Import the `java.io.IOException` package:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.io.IOException`包：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Enter the following code within the `main()` to read integers:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中输入以下代码以读取整数：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Enter the following code to display the product of the two variables:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码以显示两个变量的乘积：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the program. You should see an output similar to this:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。您应该看到类似于以下内容的输出：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Well done, this is your first Java program.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好，这是你的第一个Java程序。
- en: Packages
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包
- en: Packages are namespaces in Java that can be used to avoid name collisions when
    you have more than one class with the same name.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 包是Java中的命名空间，可用于在具有相同名称的多个类时避免名称冲突。
- en: For example, we might have more than one class named `Student` being developed
    by Sam and another class with the same name being developed by David. We need
    a way to differentiate between the two classes if we need to use them in our code.
    We use packages to put the two classes in two different namespaces.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能有由Sam开发的名为`Student`的多个类，另一个类由David开发的同名类。如果我们需要在代码中使用它们，我们需要区分这两个类。我们使用包将这两个类放入两个不同的命名空间。
- en: 'For example, we might have the two classes in two packages:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能有两个类在两个包中：
- en: '`sam.Student`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sam.Student`'
- en: '`david.Student`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`david.Student`'
- en: 'The two packages look as follows in File Explorer:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个包在文件资源管理器中如下所示：
- en: '![Figure 1.3: Screenshot of the sam.Student and david.Student packages in File
    Explorer](img/C09581_01_03.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3：文件资源管理器中sam.Student和david.Student包的屏幕截图](img/C09581_01_03.jpg)'
- en: 'Figure 1.3: Screenshot of the sam.Student and david.Student packages in File
    Explorer'
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.3：文件资源管理器中sam.Student和david.Student包的屏幕截图
- en: All the classes that are fundamental to the Java language belong to the `java.lang`
    package. All the classes that contain utility classes in Java, such as collections,
    classes for localization, and time utilities, belong to the `java.util` package.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对Java语言基本的类都属于`java.lang`包。Java中包含实用类的所有类，例如集合类、本地化类和时间实用程序类，都属于`java.util`包。
- en: As a programmer, you can create and use your own packages.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，您可以创建和使用自己的包。
- en: Rules to Follow When Using Packages
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用包时需要遵循的规则
- en: 'Here are a few rules to be considered while using packages:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用包时需要考虑一些规则：
- en: Packages are written in lowercase
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包应该用小写字母编写
- en: To avoid name conflicts, the package name should be the reverse domain of the
    company. For example, if the company domain is `example.com`, then the package
    name should be `com.example`. So, if we have a `Student` class in that package,
    the class can be accessed with `com.example.Student.`
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了避免名称冲突，包名应该是公司的反向域。例如，如果公司域是`example.com`，那么包名应该是`com.example`。因此，如果我们在该包中有一个`Student`类，可以使用`com.example.Student`访问该类。
- en: 'Package names should correspond to folder names. For the preceding example,
    the folder structure would be as follows:![Figure 1.4: Screenshot of the folder
    structure in File Explorer](img/C09581_01_04.jpg)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包名应该对应文件夹名。对于前面的例子，文件夹结构将如下所示：![图1.4：文件资源管理器中的文件夹结构的屏幕截图](img/C09581_01_04.jpg)
- en: 'Figure 1.4: Screenshot of the folder structure in File Explorer'
  id: totrans-128
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.4：文件资源管理器中的文件夹结构的屏幕截图
- en: 'To use a class from a package in your code, you need to import the class at
    the top of your Java file. For example, to use the Student class, you would import
    it as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要在代码中使用包中的类，您需要在Java文件的顶部导入该类。例如，要使用Student类，您可以按如下方式导入它：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Scanner` is a useful class in the `java.util` package. It is an easy way of
    inputting types, such as int or strings. As we saw in an earlier exercise, the
    packages use `nextInt()` to input an integer with the following syntax:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Scanner`是`java.util`包中的一个有用的类。这是一种输入类型（例如int或字符串）的简单方法。正如我们在早期的练习中看到的，包使用`nextInt()`以以下语法输入整数：'
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Activity 2: Reading Values from the User and Performing Operations Using the
    Scanner Class'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动2：从用户那里读取值并使用Scanner类执行操作
- en: 'To read two numbers from the user and print their sum, perform the following
    steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户那里读取两个数字并打印它们的和，执行以下步骤：
- en: Create a new class and enter `ReadScanner` as the class name
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新类，并将`ReadScanner`作为类名输入
- en: Import the `java.util.Scanner` package
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包
- en: In the `main()` use `System.out.print` to ask the user to enter two numbers
    of variables `a` and `b`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中使用`System.out.print`要求用户输入两个变量`a`和`b`的数字。
- en: Use `System.out.println` to output the sum of the two numbers.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`System.out.println`输出两个数字的和。
- en: Run the main program.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于这样：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 304.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在304页找到。
- en: 'Activity 3: Calculating the Percent Increase or Decrease of Financial Instruments'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动3：计算金融工具的百分比增长或减少
- en: 'Users expect to see the daily percentage of increase or decrease of financial
    instruments such as stocks and foreign currency. We will ask the user for the
    stock symbol, the value of the stock on day 1, the value of the same stock on
    day 2, calculate the percent change and print it in a nicely formatted way. To
    achieve this, perform the following steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 用户期望看到股票和外汇等金融工具的日增长或减少百分比。我们将要求用户输入股票代码，第一天的股票价值，第二天相同股票的价值，计算百分比变化并以格式良好的方式打印出来。为了实现这一点，执行以下步骤：
- en: Create a new class and enter `StockChangeCalculator` as the class name
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新类，并输入`StockChangeCalculator`作为类名
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: In the `main()` use `System.out.print` to ask the user for the `symbol` of the
    stock, followed by the `day1` and `day2` values of the stock.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中使用`System.out.print`询问用户股票的`symbol`，然后是股票的`day1`和`day2`值。
- en: Calculate the `percentChange` value.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`percentChange`值。
- en: Use `System.out.println` to output the symbol and the percent change with two
    decimal digits.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`System.out.println`输出符号和带有两位小数的百分比变化。
- en: Run the main program.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于：
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 305.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在305页找到。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: This lesson covered the very basics of Java. We saw some of the basic features
    of a Java program, and how we can display or print messages to the console. We
    also saw how we can read values using the input consoles. We also looked at packages
    that can be used to group classes, and saw an example of `Scanner` in `java.util`
    package.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程涵盖了Java的基础知识。我们看到了Java程序的一些基本特性，以及如何在控制台上显示或打印消息。我们还看到了如何使用输入控制台读取值。我们还研究了可以用来分组类的包，并看到了`java.util`包中`Scanner`的一个示例。
- en: In the next lesson, we will cover more about how values are stored, and the
    different values that we can use in a Java program.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一课中，我们将更多地了解值是如何存储的，以及我们可以在Java程序中使用的不同值。
