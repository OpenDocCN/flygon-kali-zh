- en: Docker Swarm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: 'In this chapter, we will be taking a look at Docker Swarm. With Docker Swarm,
    you can create and manage Docker clusters. Swarm can be used to distribute containers
    across multiple hosts and also has the ability to scale containers. We will cover
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Docker Swarm。使用Docker Swarm，您可以创建和管理Docker集群。Swarm可用于在多个主机上分发容器，并且还具有扩展容器的能力。我们将涵盖以下主题：
- en: Introducing Docker Swarm
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Docker Swarm
- en: Roles within a Docker Swarm cluster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm集群中的角色
- en: Creating and managing a Swarm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理Swarm
- en: Docker Swarm services and stacks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm服务和堆栈
- en: Docker Swarm load balancing and scheduling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm负载均衡和调度
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As in previous chapters, we will continue to use our local Docker installations.
    Again, the screenshots in this chapter will be from my preferred operating system,
    macOS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的章节一样，我们将继续使用我们的本地Docker安装。同样，本章中的截图将来自我首选的操作系统macOS。
- en: As before, the Docker commands we will be running will work on all three of
    the operating systems on which we have installed Docker so far. However, some
    of the supporting commands, which will be few and far between, may only apply
    to macOS and Linux-based operating systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，我们将运行的Docker命令将适用于我们迄今为止安装了Docker的三种操作系统。但是，一些支持命令可能只适用于基于macOS和Linux的操作系统。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2yWA4gl](http://bit.ly/2yWA4gl)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2yWA4gl](http://bit.ly/2yWA4gl)'
- en: Introducing Docker Swarm
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Docker Swarm
- en: Before we go any further, I should mention that there are two very different
    versions of Docker Swarm. There was a standalone version of Docker Swarm; this
    was supported up until Docker 1.12 and is no longer being actively developed;
    however, you may find some old documentation mentions it. Installation of the
    standalone Docker Swarm is not recommended as Docker ended support for version
    1.11.x in the first quarter of 2017.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我应该提到Docker Swarm有两个非常不同的版本。有一个独立的Docker Swarm版本；这个版本受支持直到Docker 1.12，并且不再被积极开发；但是，您可能会发现一些旧的文档提到它。不建议安装独立的Docker
    Swarm，因为Docker在2017年第一季度结束了对1.11.x版本的支持。
- en: Docker version 1.12 introduced Docker Swarm mode. This introduced all of the
    functionality that was available in the standalone Docker Swarm into the core
    Docker engine, along with a significant number of additional features. As we are
    covering Docker 18.06 and higher in this book, we will be using Docker Swarm mode,
    which, for the remainder of the chapter, we will refer to as Docker Swarm.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 1.12版本引入了Docker Swarm模式。这将所有独立的Docker Swarm中可用的功能引入了核心Docker引擎，还增加了大量的功能。由于本书涵盖的是Docker
    18.06及更高版本，我们将使用Docker Swarm模式，本章剩余部分将称之为Docker Swarm。
- en: 'As you are already running a version of Docker with in-built support for Docker
    Swarm, there isn''t anything you need to do in order to install Docker Swarm;
    you can verify that Docker Swarm is available on your installation by running
    the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经运行了内置Docker Swarm支持的Docker版本，因此您无需安装Docker Swarm；您可以通过运行以下命令验证Docker Swarm是否可用于您的安装：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see something that looks like the following Terminal output when
    running the command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行以下命令时，您应该会看到类似以下终端输出：
- en: '![](Images/c12154f3-2fe8-4d38-9ff5-cab971d15d00.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c12154f3-2fe8-4d38-9ff5-cab971d15d00.png)'
- en: If you get an error, ensure that you are running Docker 18.06 or higher, the
    installation of which we covered in [Chapter 1](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml)*,
    Docker Overview*. Now that we know that our Docker client supports Docker Swarm,
    what do we mean by a Swarm?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，请确保您正在运行Docker 18.06或更高版本，我们在[第1章](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml)*，Docker概述*中涵盖了其安装。现在我们知道我们的Docker客户端支持Docker
    Swarm，那么Swarm是什么意思呢？
- en: A **Swarm** is a collection of hosts, all running Docker, which have been set
    up to interact with each other in a clustered configuration. Once configured you
    will be able to use all of the commands we have been running so far when targeting
    a single host and let Docker Swarm decided the placement of your containers by
    using a deployment strategy to decide the most appropriate host on which to launch
    your container.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swarm**是一组主机，都在运行Docker，并已设置为在集群配置中相互交互。一旦配置完成，您将能够使用我们迄今为止一直在针对单个主机运行的所有命令，并让Docker
    Swarm通过使用部署策略来决定启动容器的最合适的主机来决定容器的放置位置。'
- en: Docker Swarms are made up of two types of host. Let's take a look at these now.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm由两种类型的主机组成。现在让我们来看看这些。
- en: Roles within a Docker Swarm cluster
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm集群中的角色
- en: Which roles are involved with Docker Swarm? Let's take a look at the two roles
    a host can assume when running within a Docker Swarm cluster.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm涉及哪些角色？让我们来看看在Docker Swarm集群中运行时主机可以承担的两种角色。
- en: Swarm manager
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swarm管理器
- en: The **Swarm manager** is a host that is the central management point for all
    Swarm hosts. Swarm manager is where you issue all your commands to control those
    nodes. You can switch between the nodes, join nodes, remove nodes, and manipulate
    those hosts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swarm管理器**是一个主机，是所有Swarm主机的中央管理点。Swarm管理器是您发出所有命令来控制这些节点的地方。您可以在节点之间切换，加入节点，移除节点，并操纵这些主机。'
- en: 'Each cluster can run several Swarm managers. For production, it is recommended
    that you run a minimum of five Swarm managers: this would mean that our cluster
    can take a maximum of two Swarm manager node failures before you start to encounter
    any errors. Swarm managers use the Raft Consensus Algorithm (see the Further reading
    section for more details) to maintain a consistent state across all of the manager
    nodes.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个集群可以运行多个Swarm管理器。对于生产环境，建议至少运行五个Swarm管理器：这意味着在开始遇到任何错误之前，我们的集群可以容忍最多两个Swarm管理器节点故障。Swarm管理器使用Raft一致性算法（有关更多详细信息，请参阅进一步阅读部分）来在所有管理节点上维护一致的状态。
- en: Swarm worker
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swarm工作者
- en: 'The **Swarm workers**, which we have seen referred to earlier as Docker hosts,
    are those that run the Docker containers. Swarm workers are managed from the Swarm
    manager:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swarm工作者**，我们之前称之为Docker主机，是运行Docker容器的主机。Swarm工作者是从Swarm管理器管理的：'
- en: '![](Images/0dc79ce2-c308-4a06-ac4d-70530101cf4a.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0dc79ce2-c308-4a06-ac4d-70530101cf4a.png)'
- en: This is an illustration of all the Docker Swarm components. We see that the
    Docker Swarm manager talks to each Swarm host that has the role of Docker Swarm
    workers. The workers do have some level of connectivity, which we will look at
    shortly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有Docker Swarm组件的示意图。我们看到Docker Swarm管理器与具有Docker Swarm工作者角色的每个Swarm主机进行通信。工作者确实具有一定程度的连接性，我们将很快看到。
- en: Creating and managing a Swarm
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理Swarm
- en: 'Let''s now take a look at using Swarm and how we can perform the following
    tasks:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看如何使用Swarm以及我们如何执行以下任务：
- en: Creating a cluster
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建集群
- en: Joining workers
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入工作者
- en: Listing nodes
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出节点
- en: Managing a cluster
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理集群
- en: Creating a cluster
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群
- en: 'Let''s start by creating a cluster, which starts with a Swarm manager. Since
    we are going to be creating a multi-node cluster on our local machine, we should
    use Docker Machine to launch a host by running this command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个以Swarm管理器为起点的集群开始。由于我们将在本地机器上创建一个多节点集群，我们应该使用Docker Machine通过运行以下命令来启动一个主机：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'An abridged version of the output you get is shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了您获得的输出的缩略版本：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The Swarm manager node is now up and running using VirtualBox. We can confirm
    this by running the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm管理节点现在正在使用VirtualBox启动和运行。我们可以通过运行以下命令来确认：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see something similar to the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下输出：
- en: '![](Images/a2046c70-6991-407c-bef0-cc89a9795b3f.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a2046c70-6991-407c-bef0-cc89a9795b3f.png)'
- en: 'Now, let''s point Docker Machine at the new Swarm manager. From the preceding
    output when we created the Swarm manager, we can see it is telling us how to point
    to the node:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将Docker Machine指向新的Swarm管理器。从我们创建Swarm管理器时的先前输出中，我们可以看到它告诉我们如何指向该节点：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will show you the commands needed to configure your local Docker client
    to talk to our newly launched Docker host. The following block of code shows the
    configuration returned when I ran the command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向您显示配置本地Docker客户端与我们新启动的Docker主机通信所需的命令。当我运行该命令时，以下代码块显示了返回的配置：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Upon running the previous command, we are told to run the following command
    to point to the Swarm manager:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上一个命令后，我们被告知运行以下命令指向Swarm管理器：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, if we look at which machines are on our host, we can see that we have
    the Swarm master host, as well as it now being set to `ACTIVE`, which means we
    can now run commands on it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们查看我们主机上有哪些机器，我们可以看到我们有Swarm主节点，以及它现在被设置为`ACTIVE`，这意味着我们现在可以在其上运行命令：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It should show you something like the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该向您显示类似以下内容：
- en: '![](Images/9bbe1018-54b2-4139-be47-72fe23d7fe3a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9bbe1018-54b2-4139-be47-72fe23d7fe3a.png)'
- en: 'Now that we have the first host up and running, we should add the two worker
    nodes. To do this, simply run the following command to launch two more Docker
    hosts:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动并运行了第一个主机，我们应该添加另外两个工作节点。要做到这一点，只需运行以下命令来启动另外两个Docker主机：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have launched the two additional hosts, you can get the list of hosts
    using this command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启动了另外两个主机，您可以使用以下命令获取主机列表：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It should show you something like the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该向您显示类似以下内容：
- en: '![](Images/f3dd5f78-b321-4507-b50c-e58a5cc83402.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f3dd5f78-b321-4507-b50c-e58a5cc83402.png)'
- en: It is worth pointing out that, so far, we have not done anything to create our
    Swarm cluster; we have only launched the hosts it will be running on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 值得指出的是，到目前为止，我们还没有做任何事情来创建我们的Swarm集群；我们只是启动了它将要运行的主机。
- en: You may have noticed that one of the columns when running the `docker-machine
    ls` command is `SWARM`. This only contains information if you have launched your
    Docker hosts using the standalone Docker Swarm command, which is built into Docker
    Machine.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到在运行`docker-machine ls`命令时的一列是`SWARM`。只有在使用独立的Docker Swarm命令（内置于Docker
    Machine中）启动Docker主机时，此列才包含信息。
- en: Adding a Swarm manager to the cluster
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向集群添加Swarm管理器
- en: 'Let''s bootstrap our Swarm manager. To do this, we will pass the results of
    a few Docker Machine commands to our host. The command to run in order to create
    our manager is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们引导我们的Swarm管理器。为此，我们将传递一些Docker Machine命令的结果给我们的主机。要创建我们的管理器的命令如下：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should receive a message similar to this one:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该收到类似于这样的消息：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see from the output, once your manager is initialized, you are given
    a unique token. In  the preceding example, the full token is `SWMTKN-1-1uulmpx4j4hub2qmd8q2ozxmonzcehxcomt7cw92xarg3yrkx2-dfiqnfisl75bwwh8yk9pv3msh`.
    This token will be needed for the worker nodes to authenticate themselves and
    join our cluster.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，一旦初始化了您的管理器，您将获得一个唯一的令牌。在上面的示例中，完整的令牌是`SWMTKN-1-1uulmpx4j4hub2qmd8q2ozxmonzcehxcomt7cw92xarg3yrkx2-dfiqnfisl75bwwh8yk9pv3msh`。这个令牌将被工作节点用于验证自己并加入我们的集群。
- en: Joining Swarm workers to the cluster
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入Swarm工作节点到集群
- en: 'To add our two workers to the cluster, run the following commands. First, let''s
    set an environment variable to hold our token, making sure you replace the token
    with the one you received when initializing your own manager:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的两个工作节点添加到集群中，请运行以下命令。首先，让我们设置一个环境变量来保存我们的令牌，确保您用初始化自己管理器时收到的令牌替换它：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we can run the following command to add `swarm-worker01` to the cluster:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行以下命令将`swarm-worker01`添加到集群中：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For `swarm-worker02`, you need to run the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`swarm-worker02`，您需要运行以下命令：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Both times, you should get confirmation that your node has joined the cluster:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 两次，您都应该得到确认，您的节点已加入集群：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Listing nodes
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出节点
- en: 'You can check the Swarm by running the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查Swarm：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Check that your local Docker client is still configured to connect to the Swarm
    manager node, and if it isn''t, rerun the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的本地Docker客户端是否仍然配置为连接到Swarm管理节点，如果没有，请重新运行以下命令：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now that we are connecting to the Swarm manager node, you can run the following
    command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在连接到Swarm管理节点，您可以运行以下命令：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will connect to the Swarm master and query all of the nodes that form
    our cluster. You should see that all three of our nodes are listed:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将连接到Swarm主节点并查询组成我们集群的所有节点。您应该看到我们的三个节点都被列出：
- en: '![](Images/9b53fe45-f48a-4b9b-93e0-674240551e44.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9b53fe45-f48a-4b9b-93e0-674240551e44.png)'
- en: Managing a cluster
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理集群
- en: Let's see how we can perform some management of all of these cluster nodes that
    we are creating.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何对我们创建的所有这些集群节点进行一些管理。
- en: There are only two ways in which you can go about managing these Swarm hosts
    and the containers on each host that you are creating, but first, you need to
    know some information about them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以管理这些Swarm主机和您正在创建的每个主机上的容器，但首先，您需要了解一些关于它们的信息。
- en: Finding information on the cluster
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找集群信息
- en: 'As we have already seen, we can list the nodes within the cluster using our
    local Docker client, as it is already configured to connect to the Swarm manager
    host. We can simply type this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，我们可以使用我们的本地Docker客户端列出集群中的节点，因为它已经配置为连接到Swarm管理主机。我们只需输入：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will give us lots of information about the host, as you can see from the
    following output, which I have truncated:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供有关主机的大量信息，如您从下面的输出中所见，我已经截断了：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, there is information about the cluster in the Swarm section;
    however, we are only able to run the `docker info` command against the host with
    which our client is currently configured to communicate. Luckily, the `docker
    node` command is cluster aware, so we can use that to get information on each
    node within our cluster, such as the following, for example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在Swarm部分有关集群的信息；但是，我们只能针对当前客户端配置为通信的主机运行`docker info`命令。幸运的是，`docker node`命令是集群感知的，因此我们可以使用它来获取有关我们集群中每个节点的信息，例如以下内容：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Assessing the `--pretty` flag with the `docker node inspect` command will render
    the output in the easy-to-read format you see as follows. If `-- pretty` is left
    out, Docker will return the raw `JSON` object containing the results of the query
    the `inspect` command runs against the cluster.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker node inspect`命令的`--pretty`标志来评估输出，将以易于阅读的格式呈现。如果省略`--pretty`，Docker将返回包含`inspect`命令针对集群运行的查询结果的原始`JSON`对象。
- en: 'This should provide the following information on our Swarm manager:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该提供了关于我们Swarm管理节点的以下信息：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the same command, but this time targeting one of the worker nodes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 运行相同的命令，但这次是针对其中一个工作节点：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This gives us similar information:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们提供了类似的信息：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: But as you can see, it is missing the information about the state of the manager
    functionality. This is because the worker nodes do not need to know about the
    status of the manager nodes; they just need to know that they are allowed to receive
    instructions from the managers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你会发现，它缺少了关于管理功能状态的信息。这是因为工作节点不需要知道管理节点的状态，它们只需要知道它们可以接收来自管理节点的指令。
- en: In this way, we can see the information about this host, such as the number
    of containers, the numbers of images on the host, and information about the CPU
    and memory, along with other interesting information.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以看到关于这个主机的信息，比如容器的数量，主机上的镜像数量，以及关于CPU和内存的信息，还有其他有趣的信息。
- en: Promoting a worker node
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升工作节点
- en: Say you wanted to perform some maintenance on your single manager node, but
    you wanted to maintain the availability of your cluster. No problem; you can promote
    a worker node to a manager node.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想对单个管理节点进行一些维护，但又想保持集群的可用性。没问题，你可以将工作节点提升为管理节点。
- en: 'While we have our local three-node cluster up and running, let''s promote `swarm-worker01`
    to be a new manager. To do this, run the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的本地三节点集群已经运行起来了，现在让我们把`swarm-worker01`提升为新的管理节点。要做到这一点，运行以下命令：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should receive a message confirming that your node has been promoted immediately
    after executing the command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，你应该会收到一个确认你的节点已经被提升的消息：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'List the nodes by running this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行这个命令来列出节点：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This should show you that you now have two nodes that display something in
    the `MANAGER STATUS` column:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示你现在有两个节点在`MANAGER STATUS`列中显示了一些内容：
- en: '![](Images/9bf51b6f-2de8-49c7-ad01-563f2199b316.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9bf51b6f-2de8-49c7-ad01-563f2199b316.png)'
- en: Our `swarm-manager` node is still the primary manager node though. Let's look
    at doing something about that.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`swarm-manager`节点仍然是主要的管理节点。让我们来处理一下这个问题。
- en: Demoting a manager node
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降级管理节点
- en: 'You may have already put two and two together, but to `demote` a manager node
    to a worker, you simply need to run this command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经联想到了，要将管理节点降级为工作节点，你只需要运行这个命令：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Again, you will receive immediate feedback stating the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你将立即收到以下反馈：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we have demoted our node, you can check the status of the nodes within
    the cluster by running this command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经降级了我们的节点，你可以通过运行这个命令来检查集群中节点的状态：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As your local Docker client is still pointing toward the newly demoted node,
    you will receive a message stating the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的本地Docker客户端仍然指向新降级的节点，你将收到以下消息：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As we have already learned, it is easy to update our local client configuration
    to communicate with other nodes using Docker Machine. To point your local client
    to the new manager node, run the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经学到的，使用Docker Machine很容易更新我们本地客户端配置以与其他节点通信。要将本地客户端指向新的管理节点，运行以下命令：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now that out client is talking to a manager node again, rerun this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的客户端又在与一个管理节点通信了，重新运行这个命令：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'It should list the nodes, as expected:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该列出节点，正如预期的那样：
- en: '![](Images/0bf7fe15-6d01-4c87-ad79-c4b55d039cb5.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0bf7fe15-6d01-4c87-ad79-c4b55d039cb5.png)'
- en: Draining a node
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排水节点
- en: 'To temporarily remove a node from our cluster so that we can perform maintenance,
    we need to set the status of the node to Drain. Let''s look at draining our former
    manager node. To do this, we need to run the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了暂时从集群中移除一个节点，以便我们可以进行维护，我们需要将节点的状态设置为Drain。让我们看看如何排水我们以前的管理节点。要做到这一点，我们需要运行以下命令：
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This will stop any new tasks, such as new containers launching or being executed
    against the node we are draining. Once new tasks have been blocked, all running
    tasks will be migrated from the node we are draining to nodes with an `ACTIVE`
    status.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将停止任何新任务，比如新容器的启动或在我们排水的节点上执行。一旦新任务被阻止，所有正在运行的任务将从我们排水的节点迁移到具有`ACTIVE`状态的节点。
- en: 'As you can see from the following Terminal output, listing the nodes now shows
    that `swarm-manager` node is listed as `Drain` in the `AVAILABILITY` column:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下终端输出中所见，现在列出节点显示`swarm-manager`节点在`AVAILABILITY`列中被列为`Drain`：
- en: '![](Images/b656b676-0f32-409d-835a-77c2021e4666.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b656b676-0f32-409d-835a-77c2021e4666.png)'
- en: 'Now that our node is no longer accepting new tasks and all running tasks have
    been migrated to our two remaining nodes, we can safely perform our maintenance,
    such as rebooting the host. To reboot Swarm manager, run the following two commands,
    ensuring that you are connected to the Docker host (you should see the `boot2docker`
    banner, like in the screenshot following the commands):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的节点不再接受新任务，所有正在运行的任务都已迁移到我们剩下的两个节点，我们可以安全地进行维护，比如重新启动主机。要重新启动Swarm管理器，请运行以下两个命令，确保您连接到Docker主机（您应该看到`boot2docker`横幅，就像在命令后面的截图中一样）：
- en: '[PRE35]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![](Images/1cb99ead-ce1e-44aa-aee0-5ccf89af0c0a.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1cb99ead-ce1e-44aa-aee0-5ccf89af0c0a.png)'
- en: 'Once the host has been rebooted, run this command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 主机重新启动后，运行此命令：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'It should show that the node has an `AVAILABILITY` of `Drain`. To add the node
    back into the cluster, simply change the `AVAILABILITY` to active by running this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该显示节点的`AVAILABILITY`为`Drain`。要将节点重新添加到集群中，只需通过运行以下命令将`AVAILABILITY`更改为active：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As you can see from the following Terminal output, our node is now active,
    meaning new tasks can be executed against it:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下终端输出中所见，我们的节点现在处于活动状态，这意味着可以对其执行新任务：
- en: '![](Images/b2d8703d-fc56-4745-8cff-087c167cdb54.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b2d8703d-fc56-4745-8cff-087c167cdb54.png)'
- en: Now that we have looked at how to create and manage a Docker Swarm cluster,
    we should look at how to run a task such as creating and scaling a service.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过如何创建和管理Docker Swarm集群，我们应该看看如何运行诸如创建和扩展服务之类的任务。
- en: Docker Swarm services and stacks
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm服务和堆栈
- en: 'So far, we have looked at the following commands:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过以下命令：
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'These two commands allow us to bootstrap and manage our Docker Swarm cluster
    from a collection of existing Docker hosts. The next two commands we are going
    to look at are as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令允许我们从一组现有的Docker主机引导和管理我们的Docker Swarm集群。我们接下来要看的两个命令如下：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `service` and `stack` commands allow us to execute tasks that, in turn,
    launch, scale, and manage containers within our Swarm cluster.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`service`和`stack`命令允许我们执行任务，进而在我们的Swarm集群中启动、扩展和管理容器。'
- en: Services
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: 'The `service` command is a way of launching containers that take advantage
    of the Swarm cluster. Let''s look at launching a really basic single-container
    service on our Swarm cluster. To do this, run the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`service`命令是启动利用Swarm集群的容器的一种方式。让我们来看看在我们的Swarm集群上启动一个非常基本的单容器服务。要做到这一点，运行以下命令：'
- en: '[PRE40]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This will create a service called cluster that consists of a single container
    with port `80` mapped from the container to the host machine, and it will only
    be running on nodes that have the role of worker.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为cluster的服务，该服务由一个单个容器组成，端口`80`从容器映射到主机，它只会在具有工作节点角色的节点上运行。
- en: 'Before we look at doing more with the service, we can check whether it worked
    on our browser. To do this, we will need the IP address of our two worker nodes.
    First of all, we need to double check which are the worker nodes by running this
    command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看如何处理服务之前，我们可以检查它是否在我们的浏览器上运行。为此，我们需要两个工作节点的IP地址。首先，我们需要通过运行此命令再次确认哪些是工作节点：
- en: '[PRE41]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once we know which node has which role, you can find the IP addresses of your
    nodes by running this command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道哪个节点具有哪个角色，您可以通过运行此命令找到您节点的IP地址：
- en: '[PRE42]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Look at the following Terminal output:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下终端输出：
- en: '![](Images/ec92169f-f6c8-465b-a6fd-ed3c9a670640.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ec92169f-f6c8-465b-a6fd-ed3c9a670640.png)'
- en: My worker nodes are `swarm-manager` and `swarm-worker02`, whose IP addresses
    are `192.168.99.100` and `192.168.99.102` respectively.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我的工作节点是`swarm-manager`和`swarm-worker02`，它们的IP地址分别是`192.168.99.100`和`192.168.99.102`。
- en: 'Going to either of the IP addresses of your worker nodes, such as [http://192.168.99.100/](http://192.168.99.100/)
    or [http://192.168.99.102/](http://192.168.99.102/), in a browser will show the
    output of the `russmckendrick/cluster` application, which is the Docker Swarm
    graphic and the hostname of the container the page is being served from:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中输入工作节点的任一IP地址，例如[http://192.168.99.100/](http://192.168.99.100/)或[http://192.168.99.102/](http://192.168.99.102/)，将显示`russmckendrick/cluster`应用程序的输出，这是Docker
    Swarm图形和页面提供服务的容器的主机名：
- en: '![](Images/5c4522f7-b026-427a-afd9-9d91648800be.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5c4522f7-b026-427a-afd9-9d91648800be.png)'
- en: 'Now that we have our service running on our cluster, we can start to find out
    more information about it. First of all, we can list the services again by running
    this command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的服务在集群上运行，我们可以开始了解更多关于它的信息。首先，我们可以通过运行以下命令再次列出服务：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In our case, this should return the single service we launched, called cluster:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这应该返回我们启动的单个名为cluster的服务：
- en: '![](Images/110247ed-8f1f-42f6-8a30-3f9be2da0c99.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/110247ed-8f1f-42f6-8a30-3f9be2da0c99.png)'
- en: 'As you can see, it is a `replicated` service and `1/1` containers are active.
    Next, you can drill down to find out more information about the service by running
    the `inspect` command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个`replicated`服务，有`1/1`个容器处于活动状态。接下来，您可以通过运行`inspect`命令深入了解有关服务的更多信息：
- en: '[PRE44]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This will return detailed information about the service:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回有关服务的详细信息：
- en: '![](Images/5289633f-34eb-4900-a7d7-7c6a647e141d.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5289633f-34eb-4900-a7d7-7c6a647e141d.png)'
- en: You may have noticed that so far, we haven't had to care about which of our
    two worker nodes the service is currently running on. This is quite an important
    feature of Docker Swarm, as it completely removes the need for you to worry about
    the placement of individual containers.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经注意到，我们无需关心我们的两个工作节点中的服务当前正在哪个节点上运行。这是Docker Swarm的一个非常重要的特性，因为它完全消除了您担心单个容器放置的需要。
- en: 'Before we look at scaling our service, we can take a quick look at which host
    our single container is running on by running these commands:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看如何扩展我们的服务之前，我们可以通过运行以下命令快速查看我们的单个容器正在哪个主机上运行：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This will list the containers running on each of our hosts. By default, it
    will list the host the command is being targeted against, which in my case is
    `swarm-worker01`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出在每个主机上运行的容器。默认情况下，它将列出命令所针对的主机，我这里是`swarm-worker01`：
- en: '![](Images/ce578e7c-7393-4a2b-8e4b-64f5b33aa575.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ce578e7c-7393-4a2b-8e4b-64f5b33aa575.png)'
- en: 'Let''s look at scaling our service to six instances of our application container.
    Run the following commands to scale and check our service:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看将我们的服务扩展到六个应用程序容器实例。运行以下命令来扩展和检查我们的服务：
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We are only checking two of the nodes since we originally told our service
    to launch on worker nodes. As you can see from the following Terminal output,
    we now have three containers running on each of our worker nodes:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只检查两个节点，因为我们最初告诉我们的服务在工作节点上启动。从以下终端输出中可以看出，我们现在在每个工作节点上运行了三个容器：
- en: '![](Images/8b4bd90c-fa5c-4073-a197-1b20ec53e0c3.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8b4bd90c-fa5c-4073-a197-1b20ec53e0c3.png)'
- en: 'Before we move on to look at stacks, let''s remove our service. To do this,
    run the following command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续查看stack之前，让我们删除我们的服务。要做到这一点，请运行以下命令：
- en: '[PRE47]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will remove all of the containers while leaving the downloaded image on
    the hosts.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除所有容器，同时保留主机上下载的镜像。
- en: Stacks
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stacks
- en: It is more than possible to create quite complex, highly available multi-container
    applications using Swarm and services. In a non-Swarm cluster, manually launching
    each set of containers for a part of the application can start to become a little
    laborious and also difficult to share. To this end, Docker has created functionality
    that allows you to define your services in Docker Compose files.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Swarm和服务可以创建相当复杂、高可用的多容器应用程序是完全可能的。在非Swarm集群中，手动为应用程序的一部分启动每组容器开始变得有点费力，也很难共享。为此，Docker创建了功能，允许您在Docker
    Compose文件中定义您的服务。
- en: 'The following Docker Compose file, which should be named `docker-compose.yml`, will
    create the same service we launched in the previous section:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Docker Compose文件，应命名为`docker-compose.yml`，将创建与上一节中启动的相同服务：
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As you can see, the stack can be made up of multiple services, each defined
    under the `services` section of the Docker Compose file.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，stack可以由多个服务组成，每个服务在Docker Compose文件的`services`部分下定义。
- en: In addition to the normal Docker Compose commands, you can add a `deploy` section;
    this is where you define everything relating to the Swarm element of your stack.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常规的Docker Compose命令外，您可以添加一个`deploy`部分；这是您定义与stack的Swarm元素相关的所有内容的地方。
- en: In the previous example, we said we would like six replicas, which should be
    distributed across our two worker nodes. Also, we updated the default restart
    policy, which you saw when we inspected the service from the previous section
    and it showed up as paused, so that, if a container becomes unresponsive, it is
    always restarted.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们说我们想要六个副本，应该分布在我们的两个工作节点上。此外，我们更新了默认的重启策略，您在上一节中检查服务时看到的，它显示为暂停，因此，如果容器变得无响应，它将始终重新启动。
- en: 'To launch our stack, copy the previous content into a file called `docker-compose.yml`,
    and then run the following command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的stack，请将先前的内容复制到名为`docker-compose.yml`的文件中，然后运行以下命令：
- en: '[PRE49]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Docker will, as when launching containers with Docker Compose, create a new
    network and then launch your services on it.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用Docker Compose启动容器时一样，Docker将创建一个新网络，然后在其上启动您的服务。
- en: 'You can check the status of your `stack` by running this command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行此命令来检查您的`stack`的状态：
- en: '[PRE50]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This will show that a single service has been created. You can get details
    of the service created by the `stack` by running this command:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示已创建一个单一服务。您可以通过运行以下命令来获取由`stack`创建的服务的详细信息：
- en: '[PRE51]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Finally, running the following command will show where the containers within
    the `stack` are running:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行以下命令将显示`stack`中容器的运行位置：
- en: '[PRE52]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Take a look at the Terminal output:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 查看终端输出：
- en: '![](Images/cb8a2a68-8757-47e4-85b2-96e4dc5dc737.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cb8a2a68-8757-47e4-85b2-96e4dc5dc737.png)'
- en: 'Again, you will be able to access the stack using the IP addresses of your
    nodes, and you will be routed to one of the running containers. To remove a stack,
    simply run this command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您将能够使用节点的IP地址访问堆栈，并且将被路由到其中一个正在运行的容器。要删除一个堆栈，只需运行此命令：
- en: '[PRE53]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This will remove all services and networks created by the stack when it is launched.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在启动时删除堆栈创建的所有服务和网络。
- en: Deleting a Swarm cluster
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除Swarm集群
- en: 'Before moving on, as we no longer require it for the next section, you can
    delete your Swarm cluster by running the following command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，因为我们不再需要它用于下一节，您可以通过运行以下命令删除您的Swarm集群：
- en: '[PRE54]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Should you need to relaunch the Swarm cluster for any reason, simply follow
    the instructions from the start of the chapter to recreate a cluster.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于任何原因需要重新启动Swarm集群，只需按照本章开头的说明重新创建集群。
- en: Load balancing, overlays, and scheduling
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载平衡、覆盖和调度
- en: In the last few sections, we looked at launching services and stacks. To access
    the applications we launched, we were able to use any of the host IP addresses
    in our cluster; how was this possible?
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后几节中，我们看了如何启动服务和堆栈。要访问我们启动的应用程序，我们可以使用集群中任何主机的IP地址；这是如何可能的？
- en: Ingress load balancing
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ingress负载平衡
- en: Docker Swarm has an ingress load balancer built in, making it easy to distribute
    traffic to our public facing containers.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm内置了一个入口负载均衡器，可以轻松地将流量分发到我们面向公众的容器。
- en: 'This means that you can expose applications within your Swarm cluster to services,
    for example, an external load balancer such as Amazon Elastic Load Balancer, knowing
    that your request will be routed to the correct container(s) no matter which host
    happens to be currently hosting it, as demonstrated by the following diagram:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您可以将Swarm集群中的应用程序暴露给服务，例如，像Amazon Elastic Load Balancer这样的外部负载均衡器，知道您的请求将被路由到正确的容器，无论当前托管它的主机是哪个，如下图所示：
- en: '![](Images/2fcef96f-1873-487a-9691-81816678fac5.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2fcef96f-1873-487a-9691-81816678fac5.png)'
- en: This means that our application can be scaled up or down, fail, or be updated,
    all without the need to have the external load balancer reconfigured.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的应用程序可以进行扩展或缩减、失败或更新，而无需重新配置外部负载均衡器。
- en: Network overlays
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络覆盖
- en: In our example, we launched a simple service running a single application. Say
    we wanted to add a database layer in our application, which is typically a fixed
    point within the network; how could we do this?
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们启动了一个运行单个应用程序的简单服务。假设我们想在我们的应用程序中添加一个数据库层，这通常是网络中的一个固定点；我们该如何做呢？
- en: Docker Swarm's network overlay layer extends the network you launch your containers
    in across multiple hosts, meaning that each service or stack can be launched in
    its own isolated network. This means that our database container, running MongoDB,
    will be accessible to all other containers running on the same overlay network
    on port `27017`, no matter which of the hosts the containers are running on.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm的网络覆盖层将您启动容器的网络扩展到多个主机，这意味着每个服务或堆栈可以在其自己的隔离网络中启动。这意味着我们的运行MongoDB的数据库容器将在相同的覆盖网络上的所有其他容器上的端口`27017`可访问，无论这些容器运行在哪个主机上。
- en: You may be thinking to yourself *Hang on a minute. Does this mean I have to
    hardcode an IP address into my application's configuration?* Well, that wouldn't
    fit well with the problems Docker Swarm is trying to resolve, so no, you don't.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想*等一下。这是否意味着我必须将IP地址硬编码到我的应用程序配置中？*嗯，这与Docker Swarm试图解决的问题不太匹配，所以不，您不必这样做。
- en: Each overlay network has its own inbuilt DNS service, which means that every
    container launched within the network is able to resolve the hostname of another
    container within the same network to its currently assigned IP address. This means
    that when we configure our application to connect to our database instance, we
    simply need to tell it to connect to, say, `mongodb:27017`, and it will connect
    to our MongoDB container.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 每个覆盖网络都有自己内置的DNS服务，这意味着在网络中启动的每个容器都能解析同一网络中另一个容器的主机名到其当前分配的IP地址。这意味着当我们配置我们的应用程序连接到我们的数据库实例时，我们只需要告诉它连接到，比如，`mongodb:27017`，它就会连接到我们的MongoDB容器。
- en: 'This will make our diagram appear as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们的图表如下所示：
- en: '![](Images/1883cbd8-9542-4be9-a1c4-6477bba73ddc.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1883cbd8-9542-4be9-a1c4-6477bba73ddc.png)'
- en: There are some other considerations you will need to take into account when
    adopting this pattern, but we will cover those in [Chapter 14](2a59899d-85fa-4a6f-960f-15f77654396d.xhtml)*,
    Docker Workflows*.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用这种模式时，还有一些其他考虑因素需要考虑，但我们将在[第14章](2a59899d-85fa-4a6f-960f-15f77654396d.xhtml)*《Docker工作流程》*中进行讨论。
- en: Scheduling
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度
- en: At the time of writing, there is only a single scheduling strategy available
    within Docker Swarm, called Spread. What this strategy does is to schedule tasks
    to be run against the least loaded node that meets any of the constraints you
    defined when launching the service or stack. For the most part, you should not
    need to add too many constraints to your services.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Docker Swarm中只有一种调度策略，称为Spread。这种策略的作用是将任务安排在满足你在启动服务或堆栈时定义的任何约束的最轻载节点上运行。在大多数情况下，你不应该对你的服务添加太多约束。
- en: One feature that is not currently supported by Docker Swarm is affinity and
    anti-affinity rules. While it is easy to get around this using constraints, I
    urge you not to over complicate things, as it is very easy to end up overloading
    hosts or creating single points of failure if you put too many constraints in
    place when defining your services.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm目前不支持的一个特性是亲和性和反亲和性规则。虽然可以通过使用约束来解决这个问题，但我建议您不要过于复杂化，因为如果在定义服务时设置了太多约束，很容易导致主机过载或创建单点故障。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we explored Docker Swarm. We took a look at how to install
    Docker Swarm and the Docker Swarm components that make up Docker Swarm. We took
    a look at how to use Docker Swarm: joining, listing, and managing Swarm manager
    and worker nodes. We reviewed the service and stack commands and how to use them
    and spoke about the Swarm inbuilt ingress load balancer, overlay networks, and
    scheduler.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Docker Swarm。我们看了如何安装Docker Swarm以及组成Docker Swarm的Docker Swarm组件。我们看了如何使用Docker
    Swarm：加入、列出和管理Swarm管理器和工作节点。我们回顾了服务和堆栈命令以及如何使用它们，并谈到了Swarm内置的入口负载均衡器、覆盖网络和调度器。
- en: In the next chapter, we are going to look at an alternative to Docker Swarm
    called Kubernetes. This is also supported by Docker as well as other providers.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一个名为Kubernetes的Docker Swarm替代方案。这也得到了Docker以及其他提供商的支持。
- en: Questions
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or false: You should be running your Docker Swarm using the standalone
    Docker Swarm rather than the in-built Docker Swarm mode?'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：你应该使用独立的Docker Swarm而不是内置的Docker Swarm模式来运行你的Docker Swarm？
- en: What two things do you need after initiating your Docker Swarm manager to add
    your workers to your Docker Swarm cluster?
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动Docker Swarm管理器后，你需要什么来将你的工作节点添加到Docker Swarm集群中？
- en: Which command would you use to find out the status of each of the nodes within
    your Docker Swarm cluster?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个命令来查找Docker Swarm集群中每个节点的状态？
- en: Which flag would you add to docker node inspect Swarm manager to make it more
    readable?
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会添加哪个标志到docker node inspect Swarm manager来使其更易读？
- en: How do you promote a node to be a manager?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将节点提升为管理节点？
- en: What command can you use to scale your service?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用什么命令来扩展您的服务？
- en: Further reading
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For a detailed explanation of the Raft consensus algorithms, I recommend working
    through the excellent presentation entitled *The Secret Lives of Data*, which
    can be found at [http://thesecretlivesofdata.com/raft](http://thesecretlivesofdata.com/raft).
    It explains all the processes taking place in the background on the manager nodes
    via an easy-to-follow animation.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Raft共识算法的详细解释，我推荐阅读名为*数据的秘密生活*的优秀演示，可以在[http://thesecretlivesofdata.com/raft](http://thesecretlivesofdata.com/raft)找到。它通过易于理解的动画解释了后台管理节点上发生的所有过程。
