- en: Building Blocks for Java Programs &#x2013; Loops and Conditions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java程序的构建模块-循环和条件
- en: Loops and conditions are the building blocks of Java programs. This chapter
    will help us understand the important loops and conditions through examples. Learning
    these loops and conditions in Java will make writing code easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 循环和条件是Java程序的基本组成部分。本章将通过示例帮助我们理解重要的循环和条件。学习Java中的这些循环和条件将使编写代码变得更容易。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The for loop
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: for循环
- en: The if...else condition
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: if...else条件
- en: The while loop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: while循环
- en: Nested loops
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: The for loop
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for循环
- en: 'Let''s see how the `for` loop works. The `for` loop is one of the most commonly
    used loops in Java programs, and it it is very important to understand how it
    works internally. So, let''s say we want to print the numbers from 1 to 100 using
    the `for`loop. For the syntax to execute the numbers from 1 to 100 in a sequence
    and to write that in a `for` loop, we will simply write:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`for`循环的工作原理。`for`循环是Java程序中最常用的循环之一，了解它的内部工作原理非常重要。因此，假设我们想使用`for`循环打印从1到100的数字。对于在`for`循环中执行1到100的数字的语法，并将其写入`for`循环，我们只需写：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since we want to print `0`, `1`, `2`, `3`, we use `i++`. This means for every
    loop, it increments only by  `1`. And while looping, each time, it also checks
    whether the preceding condition is satisfied. So, if `1` is less than `100`, it
    goes inside; if `2` is less than `100`, it goes inside. Until this condition is
    satisfied, it will keep on looping. When the value of `i` reaches `100`, `100` is
    less than `100`, which is false. At that time, it terminates the loop and comes
    out of it. We will use a basic example here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想打印`0`、`1`、`2`、`3`，我们使用`i++`。这意味着对于每个循环，它只增加`1`。并且在循环时，每次它还会检查前面的条件是否满足。因此，如果`1`小于`100`，它会进入；如果`2`小于`100`，它会进入。直到满足此条件，它将继续循环。当`i`的值达到`100`时，`100`小于`100`，这是假的。此时，它终止循环并退出循环。我们将在这里使用一个基本示例：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run test cases in debug mode in the IDE, double-click at the location shown
    in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDE中以调试模式运行测试用例，双击以下截图中显示的位置：
- en: '![](img/8aaee5c9-6a2c-43ac-aa74-c02f5b8cb927.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8aaee5c9-6a2c-43ac-aa74-c02f5b8cb927.png)'
- en: Line from which the debugging begins
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 调试开始的行
- en: 'When you see the blue icon, run that in the debug mode by clicking the insects-like
    symbol. It will ask you to launch in debug mode. Just click on Save to do so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您看到蓝色图标时，点击像昆虫一样的符号以调试模式运行。它会要求您以调试模式启动。只需点击保存即可：
- en: '![](img/b08a7a2c-5824-45ab-b87f-1e0a39473d1b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b08a7a2c-5824-45ab-b87f-1e0a39473d1b.png)'
- en: Debug icon at the top of the editor
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器顶部的调试图标
- en: 'You will see all the variable values here. Step by step, we''ll go inside the
    loop, and will execute the next step of the program:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在这里看到所有变量值。逐步进行，我们将进入循环，并执行程序的下一步：
- en: '![](img/efed05a3-dcc2-44de-8712-6fa2acd0e277.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efed05a3-dcc2-44de-8712-6fa2acd0e277.png)'
- en: Variable value while debugging
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 调试时的变量值
- en: 'Finally, when it reaches the value `4`, and is incremented by `1` again, it
    is `5`. Note that it comes out of the loop without going inside that after the
    value becomes `5`. So, that means the condition is no longer satisfied and the
    loop will run five times. The output is shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当它达到值`4`并再次增加`1`时，它是`5`。请注意，当值变为`5`时，它会退出循环而不会进入循环内部。因此，这意味着条件不再满足，循环将运行五次。输出如下截图所示：
- en: '![](img/0142eecc-269f-461a-9c7d-bfb6ce86e060.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0142eecc-269f-461a-9c7d-bfb6ce86e060.png)'
- en: Final output as per the code
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码的最终输出
- en: So, that's how the `for` loop works.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是`for`循环的工作原理。
- en: 'Now, if we set the condition to the following, it will not go inside the `for` loop,
    even for the first time since, the condition is false.:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们将条件设置为以下内容，即使第一次条件为假，也不会进入`for`循环内部：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On running the preceding condition in in the debug mode, the complete loop is
    skipped,and nothing is seen in the output.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下运行前面的条件时，完整的循环被跳过，输出中什么也看不到。
- en: 'Let''s see another example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will be:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is how the `for` loop works internally.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`for`循环的内部工作原理。
- en: In the next section, we will learn about the `if...else` and `do...while` loops.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习`if...else`和`do...while`循环。
- en: if...else condition
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果...else条件
- en: Before we learn the `while` and `do...while` loops, we will discuss the `if`
    condition in this section. In a Java program, when the `if` conditional statement
    is used, the statement in the `if` block is executed only if the condition is
    satisfied. Otherwise the statement from `else` block is run. Also this execution
    is just takes place once. In a `for` loop, a variable is initiated and the loop
    runs till the condition is satisfied.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习`while`和`do...while`循环之前，我们将在本节讨论`if`条件。在Java程序中，当使用`if`条件语句时，仅当条件满足时才执行`if`块中的语句。否则，将运行`else`块中的语句。此执行仅发生一次。在`for`循环中，初始化一个变量，并且循环运行直到条件满足。
- en: 'However, in the `if` case, it will not keep on looping. It will just go inside
    the loop once the `if` condition is satisfied; otherwise, it will go into the
    `else` block. So, control will execute the statements present in this `else` block,
    as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`if`情况下，它不会一直循环。只有在`if`条件满足时，它才会进入循环；否则，它将进入`else`块。因此，控制将执行此`else`块中的语句，如下截图所示：
- en: '![](img/4c8a86a1-3c08-4821-861f-825c7fcc5da4.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c8a86a1-3c08-4821-861f-825c7fcc5da4.png)'
- en: Output of the if...else condition as per the code
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码的if...else条件输出
- en: But all this happens only once, unlike the `for` loop, where a condition is
    satisfied until it goes back and executes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但所有这些只发生一次，不像`for`循环，条件满足直到返回并执行。
- en: 'Let''s take a look at the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot displays those errors:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了这些错误：
- en: '![](img/fb0e677a-3ca2-4043-b08f-174fbb5b5db0.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb0e677a-3ca2-4043-b08f-174fbb5b5db0.png)'
- en: Quick fixes drop down with suggestions to correct the code error
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 快速修复下拉菜单，提供纠正代码错误的建议
- en: 'The first error is to remove the including condition, which can be ignored.
    On running the preceding program, you will see the output as `success` because
    the condition `5` greater than `2` that went inside is true:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个错误是删除包含条件，可以忽略。运行上述程序时，您将看到输出为“成功”，因为进入的条件`5`大于`2`是真的：
- en: '![](img/f7022ae4-60cb-484f-ba03-1aeef6950efe.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7022ae4-60cb-484f-ba03-1aeef6950efe.png)'
- en: Output displays success as per the code
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示成功，根据代码
- en: If we change the condition and make `5` less than `2`, making the condition
    false, it will skip to the `else` block and execute the statement present in `else`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们改变条件，使`5`小于`2`，使条件为假，它将跳到`else`块并执行`else`中的语句。
- en: '![](img/ff440aae-1b9c-4108-a23e-5743b9c68173.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff440aae-1b9c-4108-a23e-5743b9c68173.png)'
- en: code to receive fail as the output
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码接收失败作为输出
- en: 'This time the output should be `fail`, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这次输出应该是“失败”，如下面的屏幕截图所示：
- en: '![](img/08efbbda-6a40-4a3c-94d0-21201524e20c.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08efbbda-6a40-4a3c-94d0-21201524e20c.png)'
- en: Output displays success as per the code
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示成功，根据代码
- en: This is how the `if` condition works.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`if`条件的工作原理。
- en: 'Note that if there is only a single line in your block, then you can get rid
    of these braces, because it eventually assumes that the next line will be executed
    if the condition is true. This means if you just have a single line in your block,
    then you can get rid of the braces. But if you want to have more than one statement,
    if your condition is true, then make sure you write that in braces to avoid conflict.
    If you do not specify the braces, it will still print as `success`, as shown in
    the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您的块中只有一行，则可以摆脱这些大括号，因为它最终会假定如果条件为真，则将执行下一行。这意味着如果您的块中只有一行，则可以摆脱大括号。但是，如果您想要有多于一个语句，如果您的条件为真，那么请确保您在大括号中编写以避免冲突。如果您不指定大括号，它仍将打印为“成功”，如下面的屏幕截图所示：
- en: '![](img/2c1551ea-22ed-4bd1-bee1-09fa506a241d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c1551ea-22ed-4bd1-bee1-09fa506a241d.png)'
- en: Output displays success after modifying the code
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码后，输出显示成功
- en: Here, `5` is greater than `2`. On running this, the program will run without
    braces.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，“5”大于“2”。运行此代码时，程序将在没有大括号的情况下运行。
- en: 'Now, on adding one more statement, say `"second step"`, it throws an error,
    as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加一个附加语句，比如“第二步”，它会抛出一个错误，如下面的屏幕截图所示：
- en: '![](img/5f56dfe4-3c35-4def-9ada-6f9c46bc7967.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f56dfe4-3c35-4def-9ada-6f9c46bc7967.png)'
- en: Error is flagged with a cross mark besides the line number, showing syntax error
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 错误在行号旁边标有一个交叉标记，显示语法错误
- en: Notice the syntax error on the token in the preceding screenshot. Either you
    should keep a brace or you should avoid this step. To get rid of that, we will
    just keep the entire block in the brace. In this way, the error goes away.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意前面屏幕截图中标记的标记的语法错误。要么您应该保留一个大括号，要么您应该避免这一步。为了摆脱这一点，我们将整个块都放在大括号中。这样，错误就消失了。
- en: Bringing the if...else condition in the for loop
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将if...else条件带入for循环
- en: 'Now, let us bring the `if...else` condition into the `for` loop. Let''s add
    the following to our code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`if...else`条件带入`for`循环。让我们将以下内容添加到我们的代码中：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since there is only one statement here, we won't be writing it in the braces. Now,
    let's analyze this. The values will begin to enter the `for` loop from zero until
    the value is less than `10`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这里只有一个语句，我们不会将其写在大括号中。现在，让我们分析一下。值将从零开始进入`for`循环，直到该值小于`10`。
- en: 'On entering the `for` loop, it will check if the first value, `0`, is equal
    to `8`. Since it is not equal, it will display `"I didnot find"`. Now, for the
    second time, `2` will be added to `0` (as per our set condition). Notice that
    this new value is still not equal to `8`; hence the output will remain same for values
    `0`, `2`, `4`, and `6`. Next, when `8` goes inside the `for` loop, the condition
    is satisfied and the `" 8 is displayed"` statement is displayed as the output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`for`循环后，它将检查第一个值`0`是否等于`8`。由于它不相等，它将显示“我没有找到”。现在，第二次，`2`将被加到`0`（根据我们设置的条件）。请注意，这个新值仍然不等于`8`；因此对于值`0`、`2`、`4`和`6`，输出将保持不变。接下来，当`8`进入`for`循环时，条件得到满足，并且“8被显示”语句作为输出显示：
- en: '![](img/8c71b43a-21c1-4dd2-a8a9-2f73d9d39404.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c71b43a-21c1-4dd2-a8a9-2f73d9d39404.png)'
- en: '"8 is displayed" and "I didnot find" is displayed as the output'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “8被显示”和“我没有找到”显示为输出
- en: Now, if we say `i=9`, it will never be printed because the condition we set
    is `i+2`, which will be an incremental even number. This means that the condition
    is not satisfied and the very next step after the `if` condition is not executed.
    Thus, we can say that, if a condition is true, only then will it be executed;
    if not, the conditions or the statements present in the `else` block will be executed.
    And when you run this, you always get the output as `"I did not find"`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们说`i=9`，它将永远不会被打印，因为我们设置的条件是`i+2`，这将是一个递增的偶数。这意味着条件不满足，并且在`if`条件之后的下一步不会被执行。因此，我们可以说，如果条件为真，那么它才会被执行；如果不是，那么`else`块中的条件或语句将被执行。当您运行此代码时，您总是会得到输出“我没有找到”。
- en: 'However, if we write the following syntax, we will get the output as `"9 is
    displayed"`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们写以下语法，我们将得到输出“9被显示”：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is how the `if...else` condition works using the `for` loop. In the next
    section, we will learn about `for` loops in detail.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用`for`循环的`if...else`条件的工作原理。在下一节中，我们将详细了解`for`循环。
- en: The while loop
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while循环
- en: 'In this section, we will learn the `while` loop in detail. First, create a
    new class. Now let us see how we can utilize this `while` loop when programming
    our code. Let''s say we want to print the numbers from 1 to 10, sequentially.
    How do we print this using the `while` loop? The basic syntax of the `while` loop
    is:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细学习`while`循环。首先，创建一个新类。现在让我们看看在编写代码时如何利用这个`while`循环。假设我们想要按顺序打印从1到10的数字。我们如何使用`while`循环打印这个？`while`循环的基本语法是：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And here, if the Boolean expression returns `true`, only then will the control
    go inside this loop, whereas if the expression returns `false`, then the control
    will not go inside the loop. That''s the basic simple concept you have with the
    `while` loop. Now let''s say we want to bring in the numbers from 1 to 10\. For
    this, we will write the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果布尔表达式返回`true`，那么控制权才会进入这个循环，而如果表达式返回`false`，那么控制权就不会进入循环。这就是你对`while`循环的基本简单概念。现在假设我们想要输出从1到10的数字。为此，我们将编写以下代码：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, in the preceding code example, we can see that that the given
    condition is true. So, it goes inside the loop and prints the value of `i`. This
    loop keeps on executing until the expression evaluates to false. As per our example,
    the condition will always be true; thus, it will go to the infinite loop and print
    zero.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在前面的代码示例中，我们可以看到给定的条件是true。所以，它进入循环并打印`i`的值。这个循环会一直执行，直到表达式评估为false。根据我们的例子，条件将始终为true；因此，它将进入无限循环并打印零。
- en: 'This is how the `while` loop works. Unless the condition becomes false in this
    argument, this loop will never stop executing. Now, what if we increment after
    printing the variable? Let''s see what happens when we do that:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`while`循环的工作原理。除非在这个参数中条件变为false，否则这个循环永远不会停止执行。现在，如果我们在打印变量之后递增会发生什么？让我们看看当我们这样做时会发生什么：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output will be as that shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下截图所示：
- en: '![](img/a85aed48-a67a-4728-ac07-197732c9b00a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a85aed48-a67a-4728-ac07-197732c9b00a.png)'
- en: Output of the while condition as per the code
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码的while条件输出
- en: 'If we use the following condition:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用以下条件：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The new output will be:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 新的输出将是：
- en: '![](img/e3cd184f-cdc3-4586-9c75-a5b9d32a5402.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3cd184f-cdc3-4586-9c75-a5b9d32a5402.png)'
- en: Output of the while condition after modifying the code
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码后的while条件输出
- en: 'Similarly, you you can reverse the condition, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以反转条件，如下所示：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output will go to infinite, since the numbers keep on increasing because
    `10` is greater than `0`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将会无限循环，因为数字会不断增加，因为`10`大于`0`。
- en: 'If we use the decrement condition, it will keep on decreasing until the condition
    becomes false. After that, it will exit the loop, as shown in the following code
    example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用递减条件，它将一直减少直到条件变为false。之后，它将退出循环，如下面的代码示例所示：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output for the preceding code example will be:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例的输出将是：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So, this is how we can use the `while` loop syntax in our Java program. In the
    next section, we will see how to work on the `do...while` loop.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是我们如何在Java程序中使用`while`循环语法。在下一节中，我们将看到如何使用`do...while`循环。
- en: The do...while loop
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`do...while`循环'
- en: 'The syntax of the `do...while` loop is:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`do...while`循环的语法是：'
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s consider the following example, where we want to print the numbers from
    20 to 30:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子，我们想要打印从20到30的数字：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code will print `20`, `21`, `22` until `29` as the output. Thus,
    first it executes and then it compares.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将打印`20`、`21`、`22`直到`29`作为输出。因此，首先执行，然后再比较。
- en: The basic difference between the `while` and `do...while` loop is that the `while`
    loop will not execute without evaluating the Boolean expression, and the `do...while`
    loop first executes for one loop and then evaluates to run for more loops.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`和`do...while`循环之间的基本区别在于，`while`循环在评估布尔表达式之前不会执行，而`do...while`循环首先执行一次循环，然后评估是否继续执行更多循环。'
- en: 'Let''s consider the following example, where the value of the variable is greater
    than `30`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子，变量的值大于`30`：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the output will be `20`, while the script after that will be terminated because,
    as mentioned earlier in this section, in the `do...while` loop, execution of one
    loop is guaranteed. If you run same logic in this `while` loop, even for the first
    time, it will not run.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，输出将是`20`，之后的脚本将被终止，因为正如在本节前面提到的，在`do...while`循环中，执行一个循环是有保证的。如果你在`while`循环中运行相同的逻辑，即使是第一次，它也不会运行。 '
- en: So, in the next section, we will try to do one exercise based on the `for` loop,
    the `while` loop, the `do...while` loop, and the `if` condition. These programs
    will be good hands-on learning for understanding the loops.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在下一节中，我们将尝试进行一个基于`for`循环、`while`循环、`do...while`循环和`if`条件的练习。这些程序将是理解循环的好的实践学习。
- en: In the next section, we will learn how the nested loops work.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习嵌套循环的工作原理。
- en: Nested loops
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: 'This is one of the most important concepts. All the programming logic comes
    from the nested loops. If you can grasp the concept behind it, it will be easy
    for you to solve the programming examples in Java. So, first of all, I will write
    one syntax:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最重要的概念之一。所有的编程逻辑都来自嵌套循环。如果你能掌握它背后的概念，那么你就能轻松地解决Java编程示例。所以，首先我会写一个语法：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding syntax means that the loop will run four times. What if we write
    one more `for` loop inside the preceding block? The concept of implementing a
    loop within a loop is called **nested loops**:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语法意味着循环将运行四次。如果我们在前面的代码块中再写一个`for`循环会怎么样？在循环中实现循环的概念称为**嵌套循环**：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Thus, one looping system is completed when we finish the preceding iteration
    once. To finish one outer loop, we have to complete all four inner loops. This
    means that we will have to run this inner loop 16 times (four times four) to just
    finish this outer loop four times.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们完成前一个迭代时，一个循环系统就完成了。要完成一个外部循环，我们必须完成所有四个内部循环。这意味着我们必须运行这个内部循环16次（四次四次）才能完成这个外部循环四次。
- en: 'The output is shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下截图所示：
- en: '![](img/ae3324e7-541a-43bf-8fc4-d712bd9f3431.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae3324e7-541a-43bf-8fc4-d712bd9f3431.png)'
- en: Output of the nested loops as per the code
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码的嵌套循环的输出
- en: Further ahead, the concept of `for` loops will be used more often. To understand
    the concept of `for` loops, let's try to solve a few examples.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在更进一步，`for`循环的概念将更频繁地被使用。为了理解`for`循环的概念，让我们尝试解决一些例子。
- en: Example 1
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子1
- en: 'Write the code for the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以下输出的代码：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As we can observe in the output, for every line, one number is decrementing.
    We will look at the concept of the outer loop and inner loop here. The code will
    be as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在输出中观察到的，对于每一行，一个数字在递减。我们将在这里看一下外部循环和内部循环的概念。代码将如下：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Example 2
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子2
- en: 'Write the code for the following output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以下输出的代码：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As you can see, the output used in this example is the reverse of the output
    from first example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个例子中使用的输出与第一个例子中的输出相反：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Example 3
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子3
- en: In a similar fashion, there is one more program, called sorting numbers
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，还有一个程序，称为排序数字
- en: 'Write the code for the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以下输出的代码：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The code for the preceding output will be:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出的代码将是：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With the use of easy examples, we learned how to use the `if...else` condition
    in Java. We also saw how to use the `for` loop and the `while` loops to get the
    desired outputs. Moving further ahead, we learned how to use the nested `for`
    loops to get the outputs in certain patterns.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用简单的例子，我们学会了如何在Java中使用`if...else`条件。我们还看到了如何使用`for`循环和`while`循环来获得所需的输出。更进一步，我们学会了如何使用嵌套的`for`循环来以特定的模式获得输出。
- en: In the next chapter, we will go through some important concepts, such as interfaces,
    how they work, and their usage in Java. We will also discuss inheritance using
    a practical example.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习一些重要的概念，比如接口，它们的工作原理以及它们在Java中的用法。我们还将使用一个实际的例子来讨论继承。
