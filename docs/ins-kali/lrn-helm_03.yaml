- en: '*Chapter 2*: Preparing a Kubernetes and Helm Environment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*：准备Kubernetes和Helm环境'
- en: Helm is a tool that provides a variety of benefits that help users deploy and
    manage Kubernetes applications more easily. Before users can start experiencing
    these benefits, however, they must satisfy several prerequisites. First, a user
    must have access to a Kubernetes cluster. Next, a user should have the command-line
    tools for both Kubernetes and Helm. Finally, a user should be aware of Helm's
    basic configuration options in order to be productive with as little friction
    as possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是一个提供各种好处的工具，帮助用户更轻松地部署和管理Kubernetes应用程序。然而，在用户可以开始体验这些好处之前，他们必须满足一些先决条件。首先，用户必须能够访问Kubernetes集群。其次，用户应该具有Kubernetes和Helm的命令行工具。最后，用户应该了解Helm的基本配置选项，以便尽可能少地产生摩擦地提高生产力。
- en: 'In this chapter, we will outline the tools and concepts that are required in
    order to begin working with Helm. The following topics will be covered in this
    chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述开始使用Helm所需的工具和概念。本章将涵盖以下主题：
- en: Preparing a local Kubernetes environment with Minikube
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Minikube准备本地Kubernetes环境
- en: Setting up `kubectl`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置`kubectl`
- en: Setting up Helm
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Helm
- en: Configuring Helm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Helm
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you will install the following technologies to your local
    workstation:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将在本地工作站上安装以下技术：
- en: Minikube
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minikube
- en: VirtualBox
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox
- en: Helm
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm
- en: These tools can be installed with a package manager or by downloading them directly
    from a download link. We will provide instructions for using the `Chocolatey`
    package manager on Windows, the `Homebrew` package manager on macOS, the `apt-get`
    package manager for Debian-based Linux distributions, and the `dnf` package manager
    for RPM-based Linux distributions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具可以通过软件包管理器安装，也可以通过下载链接直接下载。我们将提供在Windows上使用`Chocolatey`软件包管理器，在macOS上使用`Homebrew`软件包管理器，在基于Debian的Linux发行版上使用`apt-get`软件包管理器，在基于RPM的Linux发行版上使用`dnf`软件包管理器的使用说明。
- en: Preparing a local Kubernetes environment with Minikube
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Minikube准备本地Kubernetes环境
- en: Helm won't be able to deploy applications without access to a Kubernetes cluster.
    For this reason, let's discuss one option that users can follow to run their own
    cluster on their machine—Minikube.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 没有访问Kubernetes集群，Helm将无法部署应用程序。因此，让我们讨论一个用户可以遵循的选项，在他们的机器上运行自己的集群的选项—Minikube。
- en: Minikube is a community-driven tool that allows users to easily deploy a small,
    single-node Kubernetes cluster to their local machine. A cluster created with
    Minikube is created inside a **virtual machine** (**VM**), so it can be created
    and later discarded in a way that is isolated from the host operating system that
    the VM is running on. Minikube presents an excellent way to experiment with Kubernetes
    and it can also be used to learn how to use Helm alongside the examples provided
    throughout this book.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube是一个由社区驱动的工具，允许用户轻松在本地机器上部署一个小型的单节点Kubernetes集群。使用Minikube创建的集群是在一个虚拟机（VM）内创建的，因此可以在与运行VM的主机操作系统隔离的方式下创建和丢弃。Minikube提供了一个很好的方式来尝试Kubernetes，并且还可以用来学习如何在本书中提供的示例中使用Helm。
- en: In the next few sections, we'll cover how Minikube can be installed and configured
    so that you have a Kubernetes cluster available while learning how to use Helm.
    For more comprehensive instructions, please refer to the *Getting Started* page
    from the official Minikube websit[e at https://minikube.sigs.k8s.io/docs/s](https://minikube.sigs.k8s.io/docs/start/)tart/.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将介绍如何安装和配置Minikube，以便在学习如何使用Helm时拥有一个可用的Kubernetes集群。有关更全面的说明，请参考官方Minikube网站的*入门*页面[https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)。
- en: Installing Minikube
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Minikube
- en: Minikube, like the other tools that will be installed within this chapter, has
    binaries compiled for the Windows, macOS, and Linux operating systems. The easiest
    way to install the latest version of Minikube on Windows and macOS is via a package
    manager, such as `Chocolatey` for Windows and `Homebrew` for macOS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中将安装的其他工具一样，Minikube的二进制文件是为Windows、macOS和Linux操作系统编译的。在Windows和macOS上安装最新版本的Minikube的最简单方法是通过软件包管理器，例如Windows的`Chocolatey`和macOS的`Homebrew`。
- en: Linux users will find it easier to install the latest `minikube` binary by downloading
    it from Minikube's GitHub releases page, though this method can also be used on
    Windows and macOS as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Linux用户将发现，通过从Minikube的GitHub发布页面下载最新的`minikube`二进制文件更容易安装，尽管这种方法也可以在Windows和macOS上使用。
- en: The following steps describe how you can install Minikube based on your machine
    and installation preference. Please note that Minikube version v1.5.2 was used
    during the writing and development of the examples used throughout this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何根据您的计算机和安装偏好安装Minikube。请注意，在撰写本书中使用的示例的编写和开发过程中使用了Minikube版本v1.5.2。
- en: 'To install it via a package manager (on Windows and macOS), do the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过软件包管理器安装它（在Windows和macOS上），请执行以下操作：
- en: 'Use the following command for Windows:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows，请使用以下命令：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use the following command for macOS:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS，请使用以下命令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The following steps show you how to install it via a download link (on Windows,
    macOS, and Linux).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤向您展示了如何通过下载链接（在Windows、macOS和Linux上）安装它。
- en: 'The `Minikube` binary can be downloaded directly from its releases page on
    Git[Hub at https://github.com/kubernetes/minikube/re](https://github.com/kubernetes/minikube/releases/tag/v1.5.2)leases/:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Minikube`二进制文件可以直接从其在Git上的发布页面下载[Hub at https://github.com/kubernetes/minikube/re](https://github.com/kubernetes/minikube/releases/tag/v1.5.2)leases/：'
- en: 'At the bottom of the releases page, there is a section called *Assets*, which
    consists of the Minikube binaries available for the various supported platforms:![Figure
    2.1: The Minikube binaries from the GitHub releases page'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布页面的底部，有一个名为*Assets*的部分，其中包含了各种支持的平台可用的Minikube二进制文件：![图2.1：来自GitHub发布页面的Minikube二进制文件
- en: '](image/Figure_2.1.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.1.jpg)'
- en: 'Figure 2.1: The minikube binaries from the GitHub releases page'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：来自GitHub发布页面的minikube二进制文件
- en: 'Under the **Assets** section, the binary that corresponds to the target platform
    should be downloaded. Once downloaded, you should rename the binary to `minikube`.
    If you are downloading the Linux binary, for example, you would run the following
    command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Assets**部分下，应下载与目标平台对应的二进制文件。下载后，您应将二进制文件重命名为`minikube`。例如，如果您正在下载Linux二进制文件，您将运行以下命令：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In order to execute `minikube`, Linux and macOS users may need to add the executable
    bit by running the `chmod` command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了执行`minikube`，Linux和macOS用户可能需要通过运行`chmod`命令添加可执行位：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`minikube` should then be moved to a location managed by the `PATH` variable
    so that it can be executed from any location in your command line. The locations
    that the `PATH` variable contains vary depending on your operating system. For
    macOS and Linux users, these locations can be determined by running the following
    command in the Terminal:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`minikube`应移动到由`PATH`变量管理的位置，以便可以从命令行的任何位置执行它。`PATH`变量包含的位置因操作系统而异。对于macOS和Linux用户，可以通过在终端中运行以下命令来确定这些位置：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Windows users can determine the `PATH` variable''s locations by running the
    following command in Command Prompt or PowerShell:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows用户可以通过在命令提示符或PowerShell中运行以下命令来确定`PATH`变量的位置：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can then move the `minikube` binary to a new location by using the `mv`
    command. The following example moves `minikube` to a common `PATH` location on
    Linux:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以使用 `mv` 命令将 `minikube` 二进制文件移动到新位置。以下示例将 `minikube` 移动到 Linux 上的常见 `PATH`
    位置：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can verify your Minikube installation by running `minikube version` and
    ensuring that the displayed version corresponds with the version that was downloaded:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过运行 `minikube version` 并确保显示的版本与下载的版本相对应来验证 Minikube 的安装：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Although you have downloaded Minikube, you will also need a hypervisor to be
    able to run your local Kubernetes cluster. This can be done by installing VirtualBox,
    which we will describe in the next section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您已经下载了 Minikube，但您还需要一个 hypervisor 来运行本地 Kubernetes 集群。这可以通过安装 VirtualBox
    来实现，我们将在下一节中描述。
- en: Installing VirtualBox
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 VirtualBox
- en: Minikube depends on the existence of hypervisors in order to install a single-node
    Kubernetes cluster on a VM. For this book, we have chosen to discuss VirtualBox
    as the hypervisor option, since it is the most flexible and is available on the
    Windows, macOS, and Linux operating systems. Additional hypervisor options for
    each operating system can be found in the official Minikube documentation at [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 依赖于存在的 hypervisors，以便在虚拟机上安装单节点 Kubernetes 集群。对于本书，我们选择讨论 VirtualBox
    作为 hypervisor 选项，因为它是最灵活的，并且可用于 Windows、macOS 和 Linux 操作系统。每个操作系统的其他 hypervisor
    选项可以在官方 Minikube 文档中找到 [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)。
- en: 'Like Minikube, VirtualBox is easily installed via Chocolatey or Homebrew, but
    can also be easily installed using `apt-get` for Debian-based Linux and `dnf`
    for RPM/RHEL-based Linux:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Minikube 一样，VirtualBox 可以通过 Chocolatey 或 Homebrew 轻松安装，但也可以使用 `apt-get`（Debian-based
    Linux）和 `dnf`（RPM/RHEL-based Linux）轻松安装：
- en: 'Use the following code to install VirtualBox on Windows:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 VirtualBox 的代码如下：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following code to install VirtualBox on macOS:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 VirtualBox 的代码如下：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the following code to install VirtualBox on Debian-based Linux:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基于 Debian 的 Linux 上安装 VirtualBox 的代码如下：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use the following code to install VirtualBox on RHEL-based Linux:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 RHEL-based Linux 上安装 VirtualBox 的代码如下：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Alternative methods of installing VirtualBox can be found at its official downl[oad
    page at https://www.virtualbox.org/wi](https://www.virtualbox.org/wiki/Downloads)ki/Downloads.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在其官方下载页面 [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    找到安装 VirtualBox 的其他方法。
- en: With VirtualBox installed, Minikube must be configured to leverage VirtualBox
    as its default hypervisor. This configuration will be made in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 VirtualBox 后，必须配置 Minikube 以利用 VirtualBox 作为其默认 hypervisor。此配置将在下一节中进行。
- en: Configuring VirtualBox as the designated hypervisor
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 VirtualBox 配置为指定的 hypervisor
- en: 'VirtualBox can be made the default hypervisor by setting the `vm-driver` option
    of `minikube` to `virtualbox`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将 `minikube` 的 `vm-driver` 选项设置为 `virtualbox` 来将 VirtualBox 设置为默认 hypervisor：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that this command may produce the following warning:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此命令可能会产生以下警告：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This message can be safely ignored if there are no active Minikube clusters
    on the workstation. This command states that any existing Kubernetes clusters
    will not make use of VirtualBox as the hypervisor until the cluster is deleted
    and then recreated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果工作站上没有活动的 Minikube 集群，则可以安全地忽略此消息。此命令表示任何现有的 Kubernetes 集群在删除并重新创建集群之前都不会使用
    VirtualBox 作为 hypervisor。
- en: 'The change to VirtualBox can be confirmed by assessing the value of the `vm-driver`
    configuration option:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过评估 `vm-driver` 配置选项的值来确认切换到 VirtualBox：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If all is well, the output will be as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，输出将如下所示：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In addition to configuring the default hypervisor, you can also configure the
    resources that are allocated to a Minikube cluster, discussed in the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置默认的hypervisor之外，您还可以配置分配给Minikube集群的资源，这将在下一节中讨论。
- en: Configuring Minikube resource allocation
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Minikube资源分配
- en: By default, Minikube will allocate two CPUs and 2 GB of RAM to its VM. These
    resources are sufficient for each of the examples in this book except for those
    in [*Chapter 7*](B15458_07_Final_JM_ePub.xhtml#_idTextAnchor335), which are more
    resource intensive. If your machine has the available resources, you should increase
    the default memory allocation to 4 GB (the CPU allocation can remain the same).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Minikube将为其虚拟机分配两个CPU和2 GB的RAM。这些资源对本书中的每个示例都足够，除了[*第7章*](B15458_07_Final_JM_ePub.xhtml#_idTextAnchor335)中更需要资源的示例。如果您的机器有可用资源，应该将默认内存分配增加到4
    GB（CPU分配可以保持不变）。
- en: Run the following command to increase the default memory allocation of new Minikube
    VMs to 4 GB (4000 MB).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将增加新Minikube虚拟机的默认内存分配为4 GB（4000 MB）。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This change can be verified by running the `minikube config get memory` command,
    similar to the way the `vm-driver` change was verified previously.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行`minikube config get memory`命令来验证此更改，类似于之前验证`vm-driver`更改的方式。
- en: Let's continue exploring Minikube by discussing its basic usage.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续探索Minikube，讨论其基本用法。
- en: Exploring the basic usage
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索基本用法
- en: Throughout this book, it will be handy to understand the key commands used in
    a typical Minikube operation. They will also be essential to understand during
    the execution of the examples provided throughout the course of this book. Fortunately,
    Minikube is an easy tool to get started with.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，了解典型Minikube操作中使用的关键命令将非常方便。在本书的示例执行过程中，了解这些命令也是至关重要的。幸运的是，Minikube是一个很容易上手的工具。
- en: 'Minikube has three key subcommands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube有三个关键子命令：
- en: '`start`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`'
- en: '`stop`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop`'
- en: '`delete`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`'
- en: 'The `start` subcommand is used to create a single-node Kubernetes cluster.
    It will create a VM and bootstrap the cluster within it. The command will terminate
    once the cluster is ready:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`start`子命令用于创建单节点Kubernetes集群。它将创建一个虚拟机并在其中引导集群。一旦集群准备就绪，命令将终止：'
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `stop` subcommand is used to shut down the cluster and the VM. The state
    of the cluster and VM are saved to the disk, allowing users to run the `start`
    subcommand again to quickly begin working, rather than having to build a new VM
    from scratch. You should try to get into the habit of running `minikube stop`
    when you have finished working with a cluster that you would like to return to
    later:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`stop`子命令用于关闭集群和虚拟机。集群和虚拟机的状态将保存到磁盘上，允许用户再次运行`start`子命令快速开始工作，而不必从头开始构建新的虚拟机。当您完成对集群的工作并希望以后返回时，应该尝试养成运行`minikube
    stop`的习惯：'
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `delete` subcommand is used to delete a cluster and the VM. This command
    erases the state of the cluster and VM, freeing up the space on the disk that
    was previously allocated. The next time `minikube start` is executed, a fresh
    cluster and VM will be created. You should run the `delete` subcommand when you
    would like to remove all of the allocated resources and work on a fresh Kubernetes
    cluster on your next invocation of `minikube start`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete`子命令用于删除集群和虚拟机。此命令将擦除集群和虚拟机的状态，释放先前分配的磁盘空间。下次执行`minikube start`时，将创建一个全新的集群和虚拟机。当您希望删除所有分配的资源并在下次调用`minikube
    start`时在一个全新的Kubernetes集群上工作时，应该运行`delete`子命令：'
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There are more Minikube subcommands available, but these are the main ones that
    you should be aware of.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多Minikube子命令可用，但这些是您应该知道的主要命令。
- en: With Minikube installed and configured on a local machine, you can now install
    `kubectl`, the Kubernetes command-line tool, and satisfy the remaining prerequisites
    for working with Helm.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并配置了Minikube后，您现在可以安装`kubectl`，即Kubernetes命令行工具，并满足使用Helm的其余先决条件。
- en: Setting up Kubectl
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Kubectl
- en: As mentioned in [*Chapter 1*](B15458_01_Final_JM_ePub.xhtml#_idTextAnchor017),
    *Understanding Kubernetes and Helm*, Kubernetes is a system that exposes different
    API endpoints. These API endpoints are used to perform various actions on a cluster,
    such as creating, viewing, or deleting resources. To provide simpler user experience,
    developers need a way of interacting with Kubernetes without having to manage
    the underlying API layer.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第1章*](B15458_01_Final_JM_ePub.xhtml#_idTextAnchor017)中所述，*了解Kubernetes和Helm*，Kubernetes是一个公开不同API端点的系统。这些API端点用于在集群上执行各种操作，例如创建、查看或删除资源。为了提供更简单的用户体验，开发人员需要一种与Kubernetes交互的方式，而无需管理底层API层。
- en: While you will predominantly use the Helm command-line tool throughout the course
    of this book to install and manage applications, `kubectl` is an essential tool
    for common tasks.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在本书的过程中，您主要会使用Helm命令行工具来安装和管理应用程序，但`kubectl`是常见任务的必备工具。
- en: Read on to learn how to install `kubectl` on a local workstation. Note that
    the `kubectl` version used at the time of writing is `v1.16.2`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读以了解如何在本地工作站上安装`kubectl`。请注意，写作时使用的`kubectl`版本为`v1.16.2`。
- en: Installing Kubectl
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Kubectl
- en: '`Kubectl` can be installed using Minikube or it can be obtained via a package
    manager or through direct download. We will first describe how to obtain `kubectl`
    using Minikube.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`可以使用Minikube安装，也可以通过软件包管理器或直接下载获取。我们首先描述如何使用Minikube获取`kubectl`。'
- en: Installing Kubectl via Minikube
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过Minikube安装Kubectl
- en: 'The installation of `kubectl` is straightforward with Minikube. Minikube provides
    a subcommand called `kubectl`, which will download the Kubectl binary. Begin by
    running `minikube kubectl`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Minikube安装`kubectl`非常简单。Minikube提供了一个名为`kubectl`的子命令，它将下载Kubectl二进制文件。首先运行`minikube
    kubectl`：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This command will install `kubectl` to the `$HOME/.kube/cache/v1.16.2` directory.
    Note that the version of `Kubectl` included in the path will depend on the version
    of Minikube that you are using. To access `kubectl`, you can use the following
    syntax:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将`kubectl`安装到`$HOME/.kube/cache/v1.16.2`目录中。请注意，路径中包含的`kubectl`版本将取决于您使用的Minikube版本。要访问`kubectl`，可以使用以下语法：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s an example command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例命令：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'While invoking `kubectl` with `minikube kubectl` will suffice, the syntax is
    more unwieldy than that of invoking `kubectl` directly. This can be overcome by
    copying the `kubectl` executable from the local Minikube cache into a location
    managed by the `PATH` variable. Performing this action is similar on each operating
    system, but the following is an example of how it can be achieved on a Linux machine:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`minikube kubectl`调用`kubectl`就足够了，但是语法比直接调用`kubectl`更加笨拙。可以通过将`kubectl`可执行文件从本地Minikube缓存复制到由`PATH`变量管理的位置来克服这个问题。在每个操作系统上执行此操作类似，但以下是如何在Linux机器上实现的示例：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once complete, `kubectl` can be invoked as a standalone binary, as illustrated:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，`kubectl`可以作为独立的二进制文件调用，如下所示：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Installing Kubectl without Minikube
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在没有Minikube的情况下安装Kubectl
- en: Kubectl can also be installed without Minikube. The Kubernetes upstream documentation
    provides several different mechanisms to do so for a variety of ta[rget operating
    systems at https://kubernetes.io/docs/ta](https://kubernetes.io/docs/tasks/tools/install-kubectl/)sks/tools/install-kubectl/.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Kubectl也可以在没有Minikube的情况下安装。Kubernetes官方文档提供了多种不同的机制来为各种目标操作系统进行安装，网址为https://kubernetes.io/docs/tasks/tools/install-kubectl/。
- en: Using a package manager
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用软件包管理器
- en: 'One way that `kubectl` can be installed without Minikube is with native package
    management. The following list demonstrates how this can be done on different
    operating systems:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`可以在没有Minikube的情况下通过本机软件包管理进行安装。以下列表演示了如何在不同的操作系统上完成此操作：'
- en: 'Use the following command to install `kubectl` on Windows:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在Windows上安装`kubectl`：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Use the following command to install `kubectl` on macOS:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在macOS上安装`kubectl`：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Use the following command to install `kubectl` on Debian-based Linux:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在基于Debian的Linux上安装`kubectl`：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Use the following command to install `kubectl` RPM-based Linux:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在基于RPM的Linux上安装`kubectl`：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We will discuss the final Kubectl installation method next.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节讨论最终的Kubectl安装方法。
- en: Downloading directly from a link
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接从链接下载
- en: Kubectl can also be downloaded directly from a download link. The download link
    will contain the version of Kubectl that will be downloaded. You can determine
    the latest version of Kubectl by going to [https://storage.googleapis.com/kubernetes-release/release/stable.txt](https://storage.googleapis.com/kubernetes-release/release/stable.txt)
    in your browser.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Kubectl也可以直接从下载链接下载。下载链接将包含要下载的Kubectl版本。您可以通过在浏览器中访问[https://storage.googleapis.com/kubernetes-release/release/stable.txt](https://storage.googleapis.com/kubernetes-release/release/stable.txt)来确定Kubectl的最新版本。
- en: 'The following example instructions display how version v1.16.2 can be downloaded,
    which is the version of Kubectl that is used throughout this book:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何下载版本v1.16.2，这是本书中使用的Kubectl版本：
- en: Do[wnload Kubectl for Windows from https://storage.googleapis.com/kubernetes-release/release/v1.1](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/windows/amd64/kubectl.exe)6.2/bin/windows/amd64/kubectl.exe.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/windows/amd64/kubectl.exe下载Windows的Kubectl。
- en: '[Download Kubectl for macOS from https://storage.googleapis.com/kubernetes-release/releas](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/darwin/amd64/kubectl)e/v1.16.2/bin/darwin/amd64/kubectl.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从https://storage.googleapis.com/kubernetes-release/releas](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/darwin/amd64/kubectl)e/v1.16.2/bin/darwin/amd64/kubectl下载macOS的Kubectl。
- en: Download Kubectl for Linux from [https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/linux/amd64/kubectl](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/linux/amd64/kubectl).
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/linux/amd64/kubectl](https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/linux/amd64/kubectl)下载Linux的Kubectl。
- en: 'The Kubectl binary can then be moved to somewhere managed by the `PATH` variable.
    On the macOS and Linux operating systems, be sure to grant the executable permission:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Kubectl二进制文件可以移动到由`PATH`变量管理的位置。在macOS和Linux操作系统上，确保授予可执行权限：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The Kubectl installation can be verified by running the following command.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令来验证Kubectl的安装。
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now that we've covered how to set up `kubectl`, we're ready to get into the
    key technology of this book—Helm.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何设置`kubectl`，我们准备进入本书的关键技术——Helm。
- en: Setting up Helm
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Helm
- en: Once Minikube and `kubectl` are installed, the next logical tool to configure
    is Helm. Note that the version of Helm used when writing this book was `v3.0.0`,
    but you are encouraged to use the latest version available of the Helm v3 release
    to receive the latest vulnerability and bug fixes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Minikube和`kubectl`后，下一个逻辑工具是配置Helm。请注意，写作本书时使用的Helm版本是`v3.0.0`，但建议您使用Helm
    v3发布的最新版本，以获得最新的漏洞修复和bug修复。
- en: Installing Helm
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Helm
- en: 'Helm packages exist for Chocolatey and Homebrew to allow easy installation
    on Windows or macOS. On these systems, the following commands can be run to install
    Helm with a package manager:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey和Homebrew都有Helm软件包，可以方便地在Windows或macOS上安装。在这些系统上，可以运行以下命令来使用软件包管理器安装Helm：
- en: 'Install Helm on Windows using the following command:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在Windows上安装Helm：
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Install Helm on macOS using the following command:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在macOS上安装Helm：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Linux users, or users who would rather install Helm from a direct downloadable
    link, can download an archive from Helm''s GitHub releases page by following these
    steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Linux用户或者宁愿从直接可下载链接安装Helm的用户可以按照以下步骤从Helm的GitHub发布页面下载存档文件：
- en: 'Find the section called **Installati**[**on** on Helm''s GitHub releases page
    at](https://github.com/helm/helm/releases) :![Figure 2.2: The Installation section
    on the Helm GitHub releases page'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Helm的GitHub发布页面上找到名为**Installati**[**on**的部分：](https://github.com/helm/helm/releases)：![图2.2：Helm
    GitHub发布页面上的安装部分
- en: '](image/Figure_2.2.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.2.jpg)'
- en: 'Figure 2.2: The Installation section on the Helm GitHub releases page'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：Helm GitHub发布页面上的安装部分
- en: Download the archive file associated with the operating system you are using
    for the desired version.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载与所使用操作系统对应版本的存档文件。
- en: 'Once downloaded, the file will need to be unarchived. One way that this can
    be achieved is by using the `Expand-Archive` cmdlet function on PowerShell or
    by using the `tar` utility on Bash:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载后，需要解压文件。可以通过在PowerShell上使用`Expand-Archive`命令函数或在Bash上使用`tar`实用程序来实现这一点：
- en: 'For Windows/PowerShell, use the following example :'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows/PowerShell，请使用以下示例：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For Linux and Mac, use the following example :'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux和Mac，请使用以下示例：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Be sure to specify the version that corresponds to the version downloaded. The
    `helm` binary can be found in the unarchived folder. It should be moved to a location
    managed by the `PATH` variable.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 确保指定与下载版本对应的版本。`helm`二进制文件可以在未解压的文件夹中找到。它应该被移动到由`PATH`变量管理的位置。
- en: 'The following example shows you how to move the `helm` binary to the `/usr/local/bin`
    folder on a Linux system:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例向您展示了如何将`helm`二进制文件移动到Linux系统上的`/usr/local/bin`文件夹中：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Regardless of the way that Helm was installed, verification can be performed
    by running the `helm version` command. If the resulting output is similar to that
    of the following output, then Helm has been successfully installed:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 无论Helm是以何种方式安装的，都可以通过运行`helm version`命令来进行验证。如果结果输出类似于以下输出，则Helm已成功安装：
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: With Helm installed on your machine, proceed to the next section to learn about
    the basic Helm configuration topics.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Helm后，继续下一部分，了解基本的Helm配置主题。
- en: Configuring Helm
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Helm
- en: Helm is a tool with sensible defaults that allow users to be productive without
    needing to perform a large number of tasks post-installation. With that being
    said, there are several different options users can change or enable to modify
    Helm's behavior. We will cover these options in the following sections, beginning
    with the configuration of upstream repositories.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是一个具有合理默认值的工具，允许用户在安装后无需执行大量任务即可提高生产力。话虽如此，用户可以更改或启用几种不同的选项来修改Helm的行为。我们将在接下来的部分中介绍这些选项，首先是配置上游仓库。
- en: Adding upstream repositories
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加上游仓库
- en: One way that users can begin to modify their Helm installation is by adding
    upstream chart repositories. In [*Chapter 1*](B15458_01_Final_JM_ePub.xhtml#_idTextAnchor017),
    *Understanding Kubernetes and Helm*, we described how chart repositories contain
    Helm charts, which are used to package Kubernetes resource files. Helm, being
    the Kubernetes package manager, can connect to various chart repositories to install
    Kubernetes applications.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以开始修改他们的 Helm 安装的一种方式是添加上游图表存储库。在[*第1章*]中，*理解 Kubernetes 和 Helm*，我们描述了图表存储库包含
    Helm 图表，用于打包 Kubernetes 资源文件。作为 Kubernetes 包管理器的 Helm，可以连接到各种图表存储库来安装 Kubernetes
    应用程序。
- en: Helm provides the `repo` subcommand to allow users to manage configured chart
    repositories. This subcommand contains additional subcommands that can be used
    to perform actions against specified repositories.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 提供了 `repo` 子命令，允许用户管理配置的图表存储库。这个子命令包含其他子命令，可以用来执行针对指定存储库的操作。
- en: 'Here are the five `repo` subcommands:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是五个 `repo` 子命令：
- en: '`add`: To add a chart repository'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add`：添加图表存储库'
- en: '`list`: To list chart repositories'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：列出图表存储库'
- en: '`remove`: To remove a chart repository'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`：删除图表存储库'
- en: '`update`: To update information on available charts locally from chart repositories'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：从图表存储库更新本地可用图表的信息'
- en: '`index`: To generate an index file given a directory containing packaged charts'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：根据包含打包图表的目录生成索引文件'
- en: 'Using the preceding list as a guide, adding a chart repository can be accomplished
    using the `repo add` subcommand, as shown:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述列表作为指南，可以使用 `repo add` 子命令来添加图表存储库，如下所示：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Adding chart repositories is required in order to install the charts managed
    within them. Chart installation will be discussed in detail throughout this book.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装其中管理的图表，需要添加图表存储库。本书将详细讨论图表安装。
- en: 'You can confirm whether a repository has been successfully added by leveraging
    the `repo list` subcommand:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过利用 `repo list` 子命令来确认存储库是否已成功添加：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Repositories that have been added to the Helm client will appear in this output.
    The preceding example shows that the `bitnami` repository was added, so it appears
    in the list of repositories known by the Helm client. If additional repositories
    are added, they will also appear in this output.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加到 Helm 客户端的存储库将显示在此输出中。前面的示例显示，`bitnami` 存储库已添加，因此它出现在 Helm 客户端已知的存储库列表中。如果添加了其他存储库，它们也将出现在此输出中。
- en: 'Over time, updates to charts will be published and released to these repositories.
    Repository metadata is cached locally. As a result, Helm is not automatically
    aware when a chart is updated. You can instruct Helm to check for updates from
    each added repository by running the `repo update` subcommand. Once this command
    is executed, you will be able to install the latest charts from each repository:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，更新的图表将被发布并发布到这些存储库中。存储库元数据被本地缓存。因此，Helm 不会自动意识到图表已更新。您可以通过运行 `repo update`
    子命令来指示 Helm 从每个添加的存储库检查更新。一旦执行了这个命令，您就可以从每个存储库安装最新的图表：
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You may also need to remove repositories that have been added previously. This
    can be accomplished by using the `repo` `remove` subcommand:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还需要删除先前添加的存储库。这可以通过使用 `repo remove` 子命令来完成：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The last remaining `repo` subcommand form is `index`. This subcommand is used
    by repository and chart maintainers to publish new or updated charts. This task
    will be covered more extensively in [*Chapter 5*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265),
    *Building your First Helm Chart*.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后剩下的 `repo` 子命令形式是 `index`。这个子命令被存储库和图表维护者用来发布新的或更新的图表。这个任务将在[*第5章*]中更详细地介绍，*构建您的第一个
    Helm 图表*。
- en: Next, we will discuss Helm plugin configurations.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论Helm插件配置。
- en: Adding plugins
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加插件
- en: Plugins are add-on capabilities that can be used to provide additional features
    to Helm. Most users will not need to worry about plugins and plugin management
    with Helm. Helm is a powerful tool on its own and is complete with the features
    it promises out of the box. With that being said, the Helm community maintains
    a variety of different plugins that can be used to enhance Helm's capab[ilities.
    A list of these plugins can b](https://helm.sh/docs/community/related/)e found
    at [https://helm.sh/docs/community/related/](https://helm.sh/docs/community/related/).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是可以用来为Helm提供额外功能的附加功能。大多数用户不需要担心Helm的插件和插件管理。Helm本身就是一个强大的工具，并且在开箱即用时就具备了它承诺的功能。话虽如此，Helm社区维护了各种不同的插件，可以用来增强Helm的功能。这些插件的列表可以在[https://helm.sh/docs/community/related/](https://helm.sh/docs/community/related/)找到。
- en: 'Helm provides a `plugin` subcommand for managing plugins, which contain further
    subcommands, described in the following table:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Helm提供了一个`plugin`子命令来管理插件，其中包含进一步的子命令，如下表所述：
- en: '![](image/011.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](image/011.jpg)'
- en: Plugins can provide a variety of different productivity enhancements.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以提供各种不同的生产力增强。
- en: 'The following are several examples of the upstream plugins:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些上游插件的示例：
- en: '`helm diff`: Performs a diff between a deployed release and a proposed Helm
    upgrade'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm diff`: 在部署的发布和建议的Helm升级之间执行差异'
- en: '`helm secrets`: Used to help conceal secrets from Helm charts'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm secrets`: 用于帮助隐藏Helm图表中的秘密'
- en: '`helm monitor`: Used to monitor a release and perform a rollback if certain
    events occur'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm monitor`: 用于监视发布并在发生特定事件时执行回滚'
- en: '`helm unittest`: Used to perform unit testing on a Helm chart'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm unittest`: 用于对Helm图表执行单元测试'
- en: We will continue discussing Helm configuration options by reviewing the different
    environment variables that can be set to change various aspects of Helm's behavior.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续讨论Helm配置选项，通过审查可以设置的不同环境变量来改变Helm行为的各个方面。
- en: Environment variables
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境变量
- en: 'Helm relies on the existence of externalized variables to configure low-level
    options. The Helm documentation lists six primary environment variables used to
    configure Helm:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Helm依赖于外部化变量的存在来配置低级选项。Helm文档列出了用于配置Helm的六个主要环境变量：
- en: '**XDG_CACHE_HOME**: Sets an alternative location for storing cached files'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XDG_CACHE_HOME**: 设置存储缓存文件的替代位置'
- en: '**XDG_CONFIG_HOME**: Sets an alternative location for storing Helm configuration'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XDG_CONFIG_HOME**: 设置存储Helm配置的替代位置'
- en: '**XDG_DATA_HOME**: Sets an alternative location for storing Helm data'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XDG_DATA_HOME**: 设置存储Helm数据的替代位置'
- en: '**HELM_DRIVER**: Sets the backend storage driver'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HELM_DRIVER**: 设置后端存储驱动程序'
- en: '**HELM_NO_PLUGINS**: Disables plugins'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HELM_NO_PLUGINS**: 禁用插件'
- en: '**KUBECONFIG**: Sets an alternative Kubernetes configuration file'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KUBECONFIG**: 设置替代的Kubernetes配置文件'
- en: 'Helm adheres to The **XDG Base Directory Specification**, which is designed
    to provide a standardized way of defining where different files are located on
    an operating system''s filesystem. Based on the XDG specification, Helm automatically
    creates three different default directories on each operating system as required:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Helm遵循**XDG基本目录规范**，该规范旨在提供一种标准化的方式来定义操作系统文件系统上不同文件的位置。根据XDG规范，Helm会根据需要在每个操作系统上自动创建三个不同的默认目录：
- en: '![](image/02.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](image/02.jpg)'
- en: Helm uses the **cache path** for charts that are downloaded from upstream chart
    repositories. Installed charts are cached to the local machine to enable faster
    installation of the chart the next time it is referenced. To update the cache,
    a user can run the `helm repo update` command, which will refresh the repository
    metadata with the most recent information available, as well as save the chart
    to the local cache.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Helm使用缓存路径存储从上游图表存储库下载的图表。安装的图表被缓存到本地机器，以便在下次引用时更快地安装图表。要更新缓存，用户可以运行`helm repo
    update`命令，这将使用最新可用的信息刷新存储库元数据，并将图表保存到本地缓存中。
- en: The **configuration path** is used to save repository information that was added
    by running the `helm repo add` command. When a chart that has not been cached
    is installed, Helm uses the configuration path to look up the URL of the chart
    repository. Helm uses that URL to understand where the chart resides for it to
    be downloaded.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 配置路径用于保存通过运行`helm repo add`命令添加的存储库信息。当安装尚未缓存的图表时，Helm使用配置路径查找图表存储库的URL。Helm使用该URL来了解图表所在的位置以便下载。
- en: The **data path** is used to store plugins. When a plugin is installed using
    the `helm plugin install` command, the plugin data is stored in this location.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 数据路径用于存储插件。当使用`helm plugin install`命令安装插件时，插件数据存储在此位置。
- en: Regarding the remaining environment variables we previously detailed, `HELM_DRIVER`
    is used to determine how the release state is stored in Kubernetes. The default
    value is `secret`, which is also the recommended value. `Secret` will Base64-encode
    the state in a Kubernetes **Secret**. Other options are `configmap`, which will
    store state in a plaintext Kubernetes ConfigMap and `memory`, which will store
    the state in the local process's memory. The use of local memory is intended for
    testing purposes and is not suitable for general purpose or production environments.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们之前详细介绍的其余环境变量，`HELM_DRIVER`用于确定发布状态在Kubernetes中的存储方式。默认值为`secret`，这也是推荐的值。`Secret`将在Kubernetes
    **Secret**中对状态进行Base64编码。其他选项包括`configmap`，它将在明文Kubernetes ConfigMap中存储状态，以及`memory`，它将在本地进程的内存中存储状态。本地内存的使用是为了测试目的，不适用于通用或生产环境。
- en: The `HELM_NO_PLUGINS` environment variable is used to disable plugins. If unset,
    the default value that keeps plugins enabled is `0`. To disable plugins, the variable
    should be set to `1`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`HELM_NO_PLUGINS`环境变量用于禁用插件。如果未设置，默认值将保持插件启用为`0`。要禁用插件，应将变量设置为`1`。'
- en: The `KUBECONFIG` environment variable is used to set the file used for authentication
    to the Kubernetes cluster. If unset, the default value will be `~/.kube/config`.
    In most cases, users will not need to modify this value.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`KUBECONFIG`环境变量用于设置用于对Kubernetes集群进行身份验证的文件。如果未设置，默认值将为`~/.kube/config`。在大多数情况下，用户不需要修改此值。'
- en: Another component of Helm that can be configured is tab completion, discussed
    next.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Helm的另一个可配置的组件是选项卡完成，接下来讨论。
- en: Tab completion
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项卡完成
- en: Bash and Z shell users can enable tab completion to simplify Helm usage. Tab
    completion allows Helm commands to be auto-completed when the *Tab* key is pressed,
    allowing users to perform tasks faster and helping prevent input mistakes.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Bash和Z shell用户可以启用选项卡完成以简化Helm的使用。选项卡完成允许在按下*Tab*键时自动完成Helm命令，使用户能够更快地执行任务并帮助防止输入错误。
- en: This is similar to how most modern terminal emulators behave by default. When
    the *Tab* key is pressed, terminals try to guess what the next argument needs
    to be by observing the state of the command and the environment. For example,
    the `cd /usr/local/b` input can be tab-completed to `cd /usr/local/bin` in a Bash
    shell. Similarly, an input such as `helm upgrade hello-` can be tab-completed
    to read `helm upgrade hello-world`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于大多数现代终端仿真器的默认行为。当按下*Tab*键时，终端会通过观察命令和环境的状态来猜测下一个参数应该是什么。例如，在Bash shell中，`cd
    /usr/local/b`输入可以通过Tab补全为`cd /usr/local/bin`。类似地，输入`helm upgrade hello-`可以通过Tab补全为`helm
    upgrade hello-world`。
- en: 'Tab completion can be enabled by running the following command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令启用Tab补全：
- en: '[PRE41]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `$SHELL` variable must be either `bash` or `zsh`. Note that auto-completion
    will only exist in terminal windows that run the preceding command, so other windows
    will need to run this command as well to experience the auto-completion feature.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`$SHELL`变量必须是`bash`或`zsh`。请注意，自动补全只存在于运行前述命令的终端窗口中，因此其他窗口也需要运行此命令才能体验到自动补全功能。'
- en: Authentication
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: Helm needs to be able to authenticate with a Kubernetes cluster in order to
    deploy and manage applications. It authenticates by referencing a `kubeconfig`
    file, which specifies different Kubernetes clusters and how to authenticate against
    them.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Helm需要能够通过`kubeconfig`文件对Kubernetes集群进行身份验证，以便部署和管理应用程序。它通过引用`kubeconfig`文件进行身份验证，该文件指定了不同的Kubernetes集群以及如何对其进行身份验证。
- en: Those of you who are using Minikube when following this book will not need to
    configure authentication, as Minikube automatically configures a `kubeconfig`
    file each time a new cluster is created. Those of you who aren't running Minikube,
    however, will likely need to create a `kubeconfig` file or have one provided,
    depending on the Kubernetes distribution you are using.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书时使用Minikube的人不需要配置身份验证，因为Minikube在每次创建新集群时会自动配置`kubeconfig`文件。然而，没有运行Minikube的人可能需要创建`kubeconfig`文件或者根据使用的Kubernetes发行版提供一个。
- en: 'A `kubeconfig` file can be created by leveraging three different `kubectl`
    commands:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubeconfig`文件可以通过利用三个不同的`kubectl`命令来创建：'
- en: 'The first command is `set-cluster`:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个命令是`set-cluster`：
- en: '[PRE42]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `set-cluster` command will define a `cluster` entry in the `kubeconfig`
    file. It determines the Kubernetes cluster's hostname or IP address, along with
    its certificate authority.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`set-cluster`命令将在`kubeconfig`文件中定义一个`cluster`条目。它确定Kubernetes集群的主机名或IP地址，以及其证书颁发机构。'
- en: 'The next command is `set-credentials`:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个命令是`set-credentials`：
- en: '[PRE43]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `set-credentials` command will define the name of a user along with its
    authentication method and details. This command can configure a username and password
    pair, client certificate, bearer token, or authentication provider to allow users
    and administrators the ability to specify varying different methods of authentication.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`set-credentials`命令将定义用户的名称以及其身份验证方法和详细信息。此命令可以配置用户名和密码对、客户端证书、持有者令牌或身份验证提供程序，以允许用户和管理员指定不同的身份验证方法。'
- en: 'Then, we have the `set-context` command:'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们有`set-context`命令：
- en: '[PRE44]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `set-context` command is used to associate a credential to a cluster. Once
    an association between a credential and a cluster is established, the user will
    be able to authenticate to the specified cluster using the credential's authentication
    method.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`set-context`命令用于将凭据与集群关联起来。一旦建立了凭据和集群之间的关联，用户将能够使用凭据的身份验证方法对指定的集群进行身份验证。'
- en: 'The `kubectl config view` command can be used to view the `kubeconfig` file.
    Notice how the `clusters`, `contexts`, and `user` stanzas of `kubeconfig` correspond
    to the previously described commands, as shown:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl config view`命令可用于查看`kubeconfig`文件。注意`kubeconfig`的`clusters`、`contexts`和`user`部分与先前描述的命令相对应，如下所示：'
- en: '[PRE45]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Once a valid kubeconfig file is present, Kubectl and Helm will be able to interact
    with a Kubernetes cluster.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦存在有效的kubeconfig文件，Kubectl和Helm将能够与Kubernetes集群进行交互。
- en: In the next section, we will discuss how authorization is handled against a
    Kubernetes cluster.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论授权如何针对Kubernetes集群进行处理。
- en: Authorization/RBAC
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权/RBAC
- en: While authentication is a means of confirming identity, authorization defines
    the actions that an authenticated user is allowed to perform. Kubernetes uses
    **role-based access control** (**RBAC**) to perform authorization on Kubernetes.
    RBAC is a system of designing roles and privileges that can be assigned to a given
    user or group of users. The actions a user is permitted to perform on Kubernetes
    depends on the roles that the user has been assigned.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证是确认身份的一种方式，授权定义了经过身份验证的用户被允许执行的操作。Kubernetes使用基于角色的访问控制（RBAC）来执行对Kubernetes的授权。RBAC是一种设计角色和特权的系统，可以分配给特定用户或用户组。用户被允许在Kubernetes上执行的操作取决于用户被分配的角色。
- en: 'Kubernetes provides many different roles on the platform. Three common roles
    are listed here:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes在平台上提供了许多不同的角色。这里列出了三种常见的角色：
- en: '`cluster-admin`: Allows a user to perform any action against any resource throughout
    the cluster'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cluster-admin`：允许用户对整个集群中的任何资源执行任何操作'
- en: '`edit`: Allows a user to read and write to most resources within a namespace
    or a logical grouping of Kubernetes resources'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit`：允许用户在命名空间或逻辑分组的大多数资源中进行读写'
- en: '`view`: Prevents a user from modifying existing resources, and only allows
    users to read resources within a namespace'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`：防止用户修改现有资源，只允许用户在命名空间内读取资源'
- en: Since Helm authenticates to Kubernetes using the credentials defined in the
    `kubeconfig` file, Helm is given the same level of access as the users defined
    in the file. If `edit` access is enabled, Helm can be assumed to have sufficient
    permission to install applications, in most cases. For only view access, Helm
    will not be able to install applications, as this level of access is read-only.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Helm使用kubeconfig文件中定义的凭据对Kubernetes进行身份验证，因此Helm被赋予与文件中定义的用户相同级别的访问权限。如果启用了`edit`访问权限，Helm可以假定具有足够的权限来安装应用程序，在大多数情况下。对于仅具有查看权限的情况，Helm将无法安装应用程序，因为这种访问级别是只读的。
- en: 'Users that run Minikube are given `cluster-admin` by default after cluster
    creation. While this would not be best practice in a production environment, it
    is acceptable for learning and experimenting. Those of you running Minikube will
    not have to worry about configuring authorization in order to follow along with
    both the concepts and examples provided in this book. Those of you using other
    Kubernetes clusters that aren''t Minikube will need to make sure they are given
    at least the edit role to be able to deploy most applications with Helm. This
    can be done by asking an administrator to run the following command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Minikube的用户在集群创建后默认被赋予`cluster-admin`权限。虽然这在生产环境中不是最佳做法，但对于学习和实验是可以接受的。运行Minikube的用户不必担心配置授权以便跟随本书提供的概念和示例。那些使用其他不是Minikube的Kubernetes集群的用户需要确保他们至少被赋予编辑角色才能够使用Helm部署大多数应用程序。可以通过要求管理员运行以下命令来实现这一点：
- en: '[PRE46]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Best practices around RBAC will be discussed in [*Chapter 9*](B15458_09_Final_JM_ePub.xhtml#_idTextAnchor416),
    *Helm Security Considerations* when we discuss, in greater detail, the concepts
    related to security, including how to appropriately apply roles to prevent mistakes
    or malicious intent in the cluster.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第9章*](B15458_09_Final_JM_ePub.xhtml#_idTextAnchor416)中将讨论RBAC的最佳实践，*Helm安全考虑*，我们将更详细地讨论与安全相关的概念，包括如何适当地应用角色以防止集群中的错误或恶意意图。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There are a variety of different components you will need to have available
    in order to start using Helm. In this chapter, you learned how to install Minikube
    to provide a local Kubernetes cluster that can be used throughout this book. You
    also learned how to install Kubectl, which is the official tool for interacting
    with the Kubernetes API. Finally, you learned how to install the Helm client and
    explored the various ways that Helm can be configured, which includes adding repositories
    and plugins, modifying environment variables, enabling tab completion, and configuring
    authentication and authorization against a Kubernetes cluster.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Helm需要准备各种不同的组件。在本章中，您学习了如何安装Minikube，以提供可用于本书的本地Kubernetes集群。您还学习了如何安装Kubectl，这是与Kubernetes
    API 交互的官方工具。最后，您学习了如何安装Helm客户端，并探索了Helm的各种配置方式，包括添加存储库和插件，修改环境变量，启用选项卡完成，并配置针对Kubernetes集群的身份验证和授权。
- en: Now that you have the prerequisite tooling installed, you can begin to learn
    how to deploy your first application with Helm. In the next chapter, you will
    install a Helm chart from an upstream chart repository, as well as learn about
    life cycle management and application configuration. After finishing the chapter,
    you will have an understanding of how Helm acts as the package manager for Kubernetes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了必备的工具，可以开始学习如何使用Helm部署您的第一个应用程序。在下一章中，您将从上游图表存储库安装Helm图表，并了解生命周期管理和应用程序配置。完成本章后，您将了解Helm如何作为Kubernetes的软件包管理器。
- en: Further reading
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links to learn more about the installation options
    available for Minikube, Kubectl, and Helm:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，了解Minikube、Kubectl和Helm的安装选项：
- en: 'Minikube: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minikube：[https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)
- en: 'Kubectl: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubectl：[https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)
- en: 'Helm: [https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm：[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)
- en: 'We covered various different ways of configuring Helm post-installation. Check
    out the following links to learn more about the following topics:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了各种不同的Helm后安装配置方式。查看以下链接，了解更多有关以下主题的信息：
- en: 'Repository management: [https://helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository](https://helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库管理：[https://helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository](https://helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository)
- en: 'Plugi[n management: https://helm.sh/docs/t](https://helm.sh/docs/topics/plugins/)opics/plugins/'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件管理：[https://helm.sh/docs/topics/plugins/](https://helm.sh/docs/topics/plugins/)
- en: 'Environment variables and the `helm help` output: [https://helm.sh/docs/helm/helm/](https://helm.sh/docs/helm/helm/)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量和`helm help`输出：[https://helm.sh/docs/helm/helm/](https://helm.sh/docs/helm/helm/)
- en: 'Tab completion: [https://helm.sh/docs/helm/helm_completion/](https://helm.sh/docs/helm/helm_completion/)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项卡完成：[https://helm.sh/docs/helm/helm_completion/](https://helm.sh/docs/helm/helm_completion/)
- en: 'Authentication and authorization via the `kub`[`econfig` file: https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-mult](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/)iple-clusters/'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`kub`[`econfig`文件进行身份验证和授权：https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/
- en: Questions
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Can you list the various methods you can use to install the Helm client?
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以列出安装Helm客户端的各种方法吗？
- en: How does Helm authenticate to a Kubernetes cluster?
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm如何对Kubernetes集群进行身份验证？
- en: What mechanism is in place to provide authorization to the Helm client? How
    can an administrator manage these privileges?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有什么机制可以为Helm客户端提供授权？管理员如何管理这些权限？
- en: What is the purpose of the `helm repo add` command?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm repo add`命令的目的是什么？'
- en: What are the three XDG environment variables used by Helm? What purpose do they
    serve?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm使用的三个XDG环境变量是什么？它们有什么作用？
- en: Why is Minikube a good choice for learning how to use Kubernetes and Helm? What
    does Minikube automatically configure for users to allow them to get started more
    rapidly?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么Minikube是学习如何使用Kubernetes和Helm的好选择？Minikube自动配置了哪些内容，以使用户能够更快地开始使用？
