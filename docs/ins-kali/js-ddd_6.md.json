["```js\nfunction Notifier(backend) {\n  this.backend = backend\n}\n\nfunction createMessageFromSubject(subject) {\n  return {} // Not relevant for the example here.\n}\n\nNotifier.prototype.message = function (target, subject, cb) {\n  var message = createMessageFromSubject(subject)\n  backend.connectTo(target, function (err, connection) {\n    connection.send(message)\n    connection.close()\n    cb()\n  })\n}\n```", "```js\nvar sinon = require(\"sinon\")\n\nvar connection = {\n  send: function (message) {\n    // NOOP\n  },\n  close: function () {\n    // NOOP\n  }\n\n}\n\nvar backend = {\n  connectTo: function (target, cb) {\n    cb(null, connection)\n  }\n}\n\ndescribe(\"Notifier\", function () {\n  it(\"calls the backend and sends a message\", function () {\n    var backendMock = sinon.mock(backend)\n    mock.expects(\"connectTo\").once()\n\n    var notifier = new Notifier(backendMock)\n    var dungeon = {}\n    var transport = {}\n    notifier.message(dungeon, transport, function (err) {\n      mock.verify()\n    })\n  })\n})\n```", "```js\nvar prisonerTransfer = require(\"../../lib/prisoner_transfer\")\nvar dungeon = require(\"../../lib/dungeon\")\nvar inmates = require(\"../../lib/inmates\")\nvar messages = require(\"../../lib/messages\")\nvar assert = require(\"assert\")\n\ndescribe(\"Prisoner transfer to other dungeons\", function () {\n\n  it(\"prisoner is moved to remote dungeon\", function (done) {\n    var prisoner = new inmates.Prisoner()\n    var remoteDongeon = new dungeon.remoteDungeon()\n    var localDungeon = new dungeon.localDungeon()\n    localDungeon.imprison(prisoner)\n    var channel = new messages.Channel(localDungeon, remoteDungeon)\n\n    assert(localDungeon.hasPrioner(prisoner))\n    prisonerTransfer(prisoner, localDungeon, remoteDungeon, channel, function (err) {\n      assert.ifError(err)\n      assert(remoteDungeon.hasPrioner(prisoner))\n      assert(!localDungeon.hasPrioner(prisoner))\n      done()\n    })\n  })\n})\n```", "```js\nprisonerTransfer = function (prisoner, otherDungeon, ourDungeon, notifier, callback) {\n  var keeper = ourDungeon.getOrc()\n  var carriage = ourDungeon.getCarriage()\n  var transfer = prepareTransfer(carriage, keeper, prisoner)\n  if (transfer) {\n    notifier.message(dungeon, transfer)\n    callback()\n  } else {\n    callback(new Error(\"Transfer initiation failed.\"))\n  }\n}\n\nfunction prepareTransfer(carriage, keeper, prisoner) {\n  return {} // as a placeholder for now\n}\n```", "```js\nvar PrisonerTransfer = function (prisoner, ourDungeon) {\n  this.prisoner = prisoner\n  this.ourDungeon = ourDungeon\n  this.assignDungeonRessources()\n}\n\nPrisonerTransfer.prototype.assignDungeonRessources = function () {\n  var resources = this.ourDungeon.getTransferResources()\n  this.carriage = resources.getCarriage()\n  this.keeper = resources.getKeeper()\n}\n\nPrisonerTransfer.prototype.prepare = function () {\n  // Make the transfer preparations\n  return true;\n}\n\nPrisonerTransfer.init = function (prisoner, otherDungeon, ourDungeon, notifier, callback) {\n  var transfer = new PrisonerTransfer(prisoner, ourDungeon)\n  if (transfer.prepare()) {\n    notifier.message(otherDungeon, transfer)\n    callback()\n  } else {\n    callback(new Error(\"Transfer initiation failed.\"))\n  }\n}\n```", "```js\n**$ curl \u2013X POST --date ' {\"receiver\":1,\"sender\":2,\"message\":\"new transfer of one prisoner\"'  http://api.messaging.orc**\n\n```"]