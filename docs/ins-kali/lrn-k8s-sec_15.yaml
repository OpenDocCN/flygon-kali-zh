- en: '*Chapter 12*: Analyzing and Detecting Crypto-Mining Attacks'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：分析和检测加密挖矿攻击'
- en: Crypto-mining attacks are becoming more notable as blockchain and cryptocurrency
    are becoming more and more popular. Cryptocurrency is earned as the transaction
    fee of decentralized transactions on a blockchain for utilizing compute resources.
    The process of earning cryptocurrency for validating transactions using compute
    resources is called crypto-mining and is conducted by a software called a crypto-miner.
    Security researchers have found hacking incidents related to various crypto-miner
    binaries running within victims' infrastructures. The default openness of Kubernetes
    clusters and the availability of the extensive compute power required for mining
    makes Kubernetes clusters a perfect target for crypto-mining attacks. The complexity
    of Kubernetes clusters also makes crypto-mining activities hard to detect.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着区块链和加密货币的日益普及，加密挖矿攻击变得越来越引人注目。加密货币是通过在区块链上利用计算资源进行去中心化交易的交易费而获得的。使用计算资源验证交易以赚取加密货币的过程称为加密挖矿，由一个名为加密挖矿软件的软件进行。安全研究人员发现与各种加密挖矿二进制文件相关的黑客事件在受害者的基础设施内运行。Kubernetes集群的默认开放性以及用于挖矿所需的大量计算能力的可用性使得Kubernetes集群成为加密挖矿攻击的完美目标。Kubernetes集群的复杂性也使得加密挖矿活动难以检测。
- en: Since we've already been introduced to different Kubernetes built-in security
    mechanisms and open source tools to secure Kubernetes clusters, we'll now look
    at how to use them in a concrete scenario. In this chapter, we will first analyze
    a couple of known crypto-mining attacks, then we will discuss the detection mechanisms
    for crypto-mining attacks by using open source tools. Last but not least, we will
    recap the topics we discussed in previous chapters and see how they should be
    applied to defend our environment against attacks in general.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经介绍了不同的Kubernetes内置安全机制和开源工具来保护Kubernetes集群，现在我们将看看如何在具体场景中使用它们。在本章中，我们将首先分析几种已知的加密挖矿攻击，然后我们将讨论如何使用开源工具检测加密挖矿攻击的检测机制。最后但同样重要的是，我们将回顾我们在之前章节中讨论的主题，并看看它们应该如何应用来保护我们的环境免受一般攻击。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Analyzing crypto-mining attacks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析加密挖矿攻击
- en: Detecting mining attacks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测挖矿攻击
- en: Defending against attacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防御攻击
- en: Analyzing crypto-mining attacks
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析加密挖矿攻击
- en: In this section, we will first provide a brief introduction to crypto-mining
    attacks, and then we will analyze some publicly disclosed crypto-mining attacks.
    We hope that you are aware of the crypto-mining attack patterns as well as the
    flaws that make the attack possible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先简要介绍加密挖矿攻击，然后分析一些公开披露的加密挖矿攻击。我们希望您了解加密挖矿攻击模式以及使攻击可能的缺陷。
- en: An introduction to crypto-mining attacks
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密挖矿攻击简介
- en: Blockchain forms the basis for cryptocurrency. In short, blockchain is a chain
    of digital assets represented as blocks. These blocks have information about the
    transaction and who was involved in the transaction as a digital signature. Each
    cryptocurrency is associated with a blockchain. The process of verifying transactional
    records is called mining. Mining adds history to the blockchain to ensure that
    blocks cannot be modified in the future. Mining is designed to be resource-intensive
    to ensure the decentralized property of a blockchain. By successfully mining blocks,
    miners earn the transaction fee that is associated with the transaction. So, if
    you have a laptop or PC, you can use it to mine cryptocurrency, too; but most
    likely, you will need some dedicated GPUs or specialized hardware, such as **Field-Programmable
    Gate Arrays** (**FPGA**) and **Application-Specific Integrated Circuit** (**ASIC**)
    in order to do a good job of mining. The availability of resources in Kubernetes
    clusters makes them an ideal target for attackers to earn cryptocurrency.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 区块链构成了加密货币的基础。简而言之，区块链是由表示为区块的数字资产链组成的。这些区块包含有关交易的信息以及谁参与了交易的数字签名。每种加密货币都与一个区块链相关联。验证交易记录的过程称为挖矿。挖矿将历史记录添加到区块链中，以确保区块在未来无法修改。挖矿旨在消耗大量资源，以确保区块链的去中心化属性。通过成功挖矿区块，矿工可以获得与交易相关的交易费。因此，如果你有一台笔记本电脑或个人电脑，你也可以用它来挖矿；但很可能你需要一些专用的GPU或专门的硬件，比如**现场可编程门阵列**（**FPGA**）和**专用集成电路**（**ASIC**）来做好挖矿工作。Kubernetes集群中的资源可用性使它们成为攻击者赚取加密货币的理想目标。
- en: A crypto-mining attack is just like free riding on Wi-Fi. Just as your network
    bandwidth will be shared by the free rider, some (or most) of your CPU or computing
    resources will be occupied by the mining processes without your consent. The impact
    is also similar. If the Wi-Fi free rider is downloading movies via BitTorrent
    using your Wi-Fi network, you may have a poor experience while watching Netflix.
    When there is a mining process running, other applications running in the same
    node will be severely impacted as the mining process may occupy the CPU most of
    the time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 加密挖矿攻击就像在Wi-Fi上免费搭车一样。就像你的网络带宽会被免费搭车者分享一样，你的CPU或计算资源的一部分（或大部分）将在没有你的同意的情况下被挖矿进程占用。影响也是类似的。如果Wi-Fi上的免费搭车者正在使用你的Wi-Fi网络通过BitTorrent下载电影，你在观看Netflix时可能会有不好的体验。当有挖矿进程运行时，同一节点中运行的其他应用程序也会受到严重影响，因为挖矿进程可能会大部分时间占用CPU。
- en: Crypto-mining attacks have become one of the most appealing attacks to hackers
    as it is an almost guaranteed way of gaining some benefits out of a successful
    intrusion. Thieves come only to steal or destroy. If disruption is not the goal
    of the intrusion, a crypto-mining attack is probably one of the main choices for
    hackers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 加密挖矿攻击已经成为黑客最吸引人的攻击之一，因为这几乎是一种确保能够从成功入侵中获益的方式。小偷只来偷或破坏。如果破坏不是入侵的目的，加密挖矿攻击可能是黑客的主要选择之一。
- en: At least two ways for hackers to launch a crypto-mining attack on a target victim
    have been reported. One is through application vulnerabilities, such as cross-site
    scripting, SQL injection, remote code execution, and more, so that the hacker
    gains access to the system, then downloads and executes the miner binary. The
    other way is through a malicious container image. When a container is created
    from the image that contains the mining binary, the mining process starts.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客发动加密挖矿攻击的至少两种方式已经被报道。一种是通过应用程序漏洞，比如跨站脚本，SQL注入，远程代码执行等，使黑客能够访问系统，然后下载并执行挖矿程序。另一种方式是通过恶意容器镜像。当从包含挖矿程序的镜像创建容器时，挖矿过程就会开始。
- en: Although there are different types of crypto-mining binaries available on the
    internet, in general, the mining process is computation heavy and occupies a lot
    of CPU cycles. The mining process sometimes joins a mining pool in order to carry
    out mining in a collaborative way.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管互联网上有不同类型的加密挖矿二进制文件，但总的来说，矿业过程是计算密集型的，占用大量CPU周期。矿业过程有时会加入矿业池，以便以合作的方式进行挖矿。
- en: Next, let's look at a couple of crypto-mining attacks that have occurred in
    the real world. We will discuss the flaws that made the attacks possible and we
    will look at the attack patterns.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看发生在现实世界中的一些加密挖矿攻击。我们将讨论使攻击可能的漏洞，并研究攻击模式。
- en: The crypto-mining attack on Tesla's Kubernetes cluster
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特斯拉的Kubernetes集群上的加密挖矿攻击
- en: A crypto-mining attack on Tesla's Kubernetes cluster occurred in 2018 and was
    reported by RedLock. Although the attack took place quite a while ago, there are
    at least two things we can learn from it—the flaw that made the attack possible
    and the attack patterns.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年，特斯拉的Kubernetes集群遭受了一次加密挖矿攻击，并由RedLock报告。尽管这次攻击发生了相当长时间，但我们至少可以从中学到两件事情——使攻击可能的漏洞和攻击模式。
- en: The flaw
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞
- en: The hacker infiltrated the Kubernetes dashboard, which was not protected by
    a password. From the dashboard, the hacker gained some important secrets to access
    the Amazon S3 buckets.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客渗透了没有密码保护的Kubernetes仪表板。从仪表板上，黑客获得了一些重要的秘密来访问Amazon S3存储桶。
- en: The attack patterns
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 攻击模式
- en: 'The hackers did a pretty good job of hiding their footprint so that they could
    avoid being detected. The following are a few patterns worth mentioning:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客们做了相当不错的工作，隐藏了他们的足迹，以避免被发现。以下是一些值得一提的模式：
- en: The mining process did not occupy too many CPU cycles, so the CPU usage of the
    pod was not too high.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矿业过程没有占用太多CPU周期，因此pod的CPU使用率并不太高。
- en: Unlike most crypto-mining cases, the mining process did not join any well-known
    mining pools. Instead, it had its own mining server, which sat behind Cloudflare,
    a **Content Delivery Network** (**CDN**) service.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与大多数加密挖矿案例不同，矿业过程没有加入任何知名的矿业池。相反，它有自己的矿业服务器，位于Cloudflare后面，这是一个内容交付网络（CDN）服务。
- en: The communication between the mining process and the mining server was encrypted.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矿业过程与矿业服务器之间的通信是加密的。
- en: With the preceding maneuver, the hacker purposely tried to hide the crypto-mining
    pattern so that they could evade detection.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的操作，黑客故意试图隐藏加密挖矿模式，以便逃避检测。
- en: Graboid – a crypto-worm attack
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Graboid——一次加密蠕虫攻击
- en: This crypto-worm attack was discovered by the Palo Alto Network Unit42 research
    team in late 2019\. Although the attack was not directed against Kubernetes clusters,
    this was aimed at Docker daemons, which is one of the foundation pillars in a
    Kubernetes cluster. In one of the attack steps, the toolkit downloaded images
    containing a crypto-mining binary from Docker Hub and launched. This step can
    also be applied to Kubernetes clusters too.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这次加密蠕虫攻击是由Palo Alto Network Unit42研究团队在2019年底发现的。尽管这次攻击并不是针对Kubernetes集群，但它是针对Docker守护程序的，这是Kubernetes集群中的基石之一。在攻击的一个步骤中，工具包从Docker
    Hub下载包含加密挖矿二进制文件的镜像并启动。这一步也可以应用于Kubernetes集群。
- en: The flaw
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞
- en: The Docker engine was exposed to the internet while it was configured without
    authentication and authorization. The attacker could easily take full control
    of the Docker engine.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Docker引擎暴露在互联网上，而且没有进行身份验证和授权配置。攻击者可以轻松地完全控制Docker引擎。
- en: The attack patterns
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 攻击模式
- en: 'Once the hacker took control over the Docker engine, they started downloading
    a malicious image and launched a container. The following are a few patterns worth
    mentioning regarding the malicious container:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦黑客控制了Docker引擎，他们就开始下载一个恶意镜像并启动一个容器。以下是关于恶意容器值得一提的一些模式：
- en: The malicious container contacted the command and control server to download
    some malicious scripts.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意容器联系了命令和控制服务器，以下载一些恶意脚本。
- en: The malicious container contained a Docker client binary, which was used to
    control other insecure Docker engines.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意容器包含了一个Docker客户端二进制文件，用于控制其他不安全的Docker引擎。
- en: The malicious container initiated commands via the Docker client to other insecure
    Docker engines to download and launch another image, which contained the crypto-mining
    binary.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意容器通过Docker客户端向其他不安全的Docker引擎发出命令，以下载和启动另一个包含加密挖矿二进制文件的镜像。
- en: According to Shodan, a search engine for internet-connected devices, more than
    2,000 Docker engines were exposed to the internet. The preceding steps were repeated
    so that the crypto-mining worm spread.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Shodan的数据，超过2000个Docker引擎暴露在互联网上。前述步骤被重复执行，以便加密挖矿蠕虫传播。
- en: Lessons learned
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 吸取的教训
- en: To recap what we have discussed about the two known crypto-mining attacks, misconfiguration
    is one of the major issues that make hacking easy. Crypto-mining has some typical
    patterns—for example, the mining process will communicate with mining pools and
    the mining process usually occupies a lot of CPU cycles. However, hackers may
    purposely disguise their mining behavior to evade detection. Once hackers get
    into the pod, they can start the contacting command and control server to download
    and execute the mining binary; on the other hand, they can also start reconnaissance.
    It would be easy for them to make a lateral move if the security domain in your
    Kubernetes cluster is not properly configured. Next, let's use the open source
    tools we introduced in previous chapters to detect typical crypto-mining activities
    in Kubernetes clusters.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下我们讨论过的两种已知的加密挖矿攻击，配置错误是使黑客轻松入侵的主要问题之一。加密挖矿具有一些典型的模式，例如，挖矿过程将与挖矿池通信，而挖矿过程通常会占用大量的CPU周期。然而，黑客可能会故意伪装他们的挖矿行为以逃避检测。一旦黑客进入pod，他们可以开始联系命令和控制服务器来下载和执行挖矿二进制文件；另一方面，他们也可以开始侦察。如果您的Kubernetes集群中的安全域没有得到适当配置，他们很容易进行横向移动。接下来，让我们使用我们在之前章节介绍的开源工具来检测Kubernetes集群中典型的加密挖矿活动。
- en: Detecting crypto-mining attacks
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测加密挖矿攻击
- en: 'In this section, we are going to talk about detecting crypto-mining activities
    in the Kubernetes cluster with some of the open source tools we introduced in
    earlier chapters. We detect crypto-mining activities based on the known patterns
    of crypto-mining: high CPU usage, communicating to mining pools, the executed
    command line of miner, and the binary signature. Note that each individual measure
    has its own limitations. Combining them improves the efficiency of detection for
    sure. However, there are still some advanced crypto-mining attacks, such as the
    one that attacked Tesla. It''s necessary for you to work with your security team
    to apply a comprehensive detection strategy for your Kubernetes cluster to cover
    all kinds of intrusion.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论如何使用我们在前几章介绍的一些开源工具来检测Kubernetes集群中的加密挖矿活动。我们基于已知的加密挖矿模式来检测加密挖矿活动：高CPU使用率，与挖矿池的通信，矿工的执行命令行以及二进制签名。请注意，每个单独的措施都有其自身的局限性。将它们结合起来可以提高检测的效率。然而，仍然存在一些高级的加密挖矿攻击，比如攻击特斯拉的那种。因此，有必要与安全团队合作，为您的Kubernetes集群应用全面的检测策略，以覆盖各种入侵。
- en: 'In order to demonstrate each tool to detect crypto-mining, we simulate a victim
    `nginx` pod:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示每个工具检测加密挖矿，我们模拟一个受害者`nginx` pod：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Inside the `nginx` pod, there is a miner binary located in the `/tmp` directory:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`nginx` pod内部，有一个矿工二进制文件位于`/tmp`目录中：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`minerd2` is the mining binary. We can assume that `minerd2` is either seeded
    in the image or downloaded from a command and control server. First, let''s see
    how monitoring the CPU usage can help detect crypto-mining activities.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`minerd2`是挖矿二进制文件。我们可以假设`minerd2`要么被种子化在镜像中，要么从命令和控制服务器下载。首先，让我们看看监控CPU使用率如何帮助检测加密挖矿活动。'
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is not recommended that you run crypto-mining binaries in your production
    servers. This is for educational purposes only.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '不建议在生产服务器上运行加密挖矿二进制文件。这仅供教育目的。 '
- en: Monitoring CPU utilization
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控CPU利用率
- en: 'As we discussed in [*Chapter 10*](B15566_10_Final_ASB_ePub.xhtml#_idTextAnchor305),
    *Real-Time Monitoring and Resource Management of a Kubernetes Cluster*, resource
    management and resource monitoring are crucial to maintaining a service''s availability.
    Crypto-mining usually occupies tons of CPU cycles, which leads to the CPU usage
    of a container or a pod reaching a significantly higher level. Let''s take a look
    at an example by comparing the CPU usage before and after crypto-mining happens
    within an `nginx` pod:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第10章*](B15566_10_Final_ASB_ePub.xhtml#_idTextAnchor305)中讨论的那样，*Kubernetes集群的实时监控和资源管理*，资源管理和资源监控对于维护服务的可用性至关重要。加密挖矿通常占用大量CPU周期，导致容器或pod的CPU使用率显着提高。让我们通过比较加密挖矿发生前后`nginx`
    pod的CPU使用情况来看一个例子：
- en: '![Figure 12.1 – The CPU usage of an nginx pod before mining happens in Grafana
    metrics'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.1 - 挖矿前nginx pod的CPU使用情况在Grafana指标中'
- en: '](image/B15566_12_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_12_01.jpg)'
- en: Figure 12.1 – The CPU usage of an nginx pod before mining happens in Grafana
    metrics
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 - 挖矿前nginx pod的CPU使用情况在Grafana指标中
- en: 'The preceding screenshot shows the CPU usage of the `insecure-nginx` pod monitored
    by Prometheus and Grafana. In general, the maximum CPU usage rate is less than
    `0.1`. When the crypto-mining binary is executed, you will find that the CPU usage
    skyrockets:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了由Prometheus和Grafana监控的`insecure-nginx` pod的CPU使用情况。一般来说，最大的CPU使用率小于`0.1`。当执行加密挖矿二进制文件时，你会发现CPU使用率急剧上升：
- en: '![Figure 12.2 – The CPU usage of an nginx pod after mining happens'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.2 - 挖矿后nginx pod的CPU使用情况'
- en: '](image/B15566_12_02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_12_02.jpg)'
- en: Figure 12.2 – The CPU usage of an nginx pod after mining happens
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 - 挖矿后nginx pod的CPU使用情况
- en: The CPU usage rate hikes from an average rate of `0.07` to around `2.4`. No
    matter what happens behind the scenes, such a huge CPU usage hike should get your
    attention immediately. It's also quite obvious that even with this CPU surge,
    it doesn't mean there is a crypto-mining binary running inside the pod. The CPU
    surge can be caused by some other reasons, too.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CPU使用率从平均率`0.07`上升到约`2.4`。无论在幕后发生了什么，这样巨大的CPU使用率上升都应立即引起您的注意。很明显，即使有这样的CPU激增，也不意味着pod内运行着加密挖矿二进制文件。CPU激增也可能是由其他原因引起的。
- en: On the flip side, if the hacker purposely restricts the crypto-mining attack
    progress, as was the case with the attack on Tesla, there may only be a little
    hike in the CPU that is hard to notice. Next, let's look at how Falco can help
    detect crypto-mining activities.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果黑客故意限制加密挖矿攻击的进展，就像对特斯拉的攻击一样，CPU可能只会有一点点上升，很难注意到。接下来，让我们看看Falco如何帮助检测加密挖矿活动。
- en: Detecting network traffic to a mining pool
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测到矿池的网络流量
- en: One typical crypto-mining process behavior is where the mining process works
    collaboratively with other mining processes within the same mining pool for the
    purpose of mining efficiently. The mining processes communicate with the mining
    pool server during mining.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的加密挖矿进程行为是挖矿进程与同一挖矿池内的其他挖矿进程协作，以便高效地进行挖矿。挖矿进程在挖矿期间与挖矿池服务器进行通信。
- en: 'In Falco''s default rules, there is one rule to detect outbound connections
    to known mining pools. Let''s take a closer look at this rule. First, there are
    predefines lists for mining ports and the mining domain ([https://github.com/falcosecurity/falco/blob/master/rules/falco_rules.yaml#L2590](https://github.com/falcosecurity/falco/blob/master/rules/falco_rules.yaml#L2590)):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Falco的默认规则中，有一个规则用于检测对已知矿工池的出站连接。让我们更仔细地看看这个规则。首先，有一个用于挖矿端口和挖矿域的预定义列表([https://github.com/falcosecurity/falco/blob/master/rules/falco_rules.yaml#L2590](https://github.com/falcosecurity/falco/blob/master/rules/falco_rules.yaml#L2590))：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, there is a predefined macro for network connections to the preceding
    miner ports and miner domains:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有一个预定义的网络连接宏用于前述矿工端口和矿工域：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Besides the `minerpool_other` macro, there are two other macros for HTTP and
    HTTPS connections, respectively—`minerpool_http` and `minerpool_https`—and all
    of them combine to get the main detection logic:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`minerpool_other`宏之外，还有两个分别用于HTTP和HTTPS连接的其他宏—`minerpool_http`和`minerpool_https`—它们都结合起来得到主要的检测逻辑：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `net_miner_pool` macro is then used by the `Detect outbound connections
    to common miner pool ports` rule to detect outbound connections to miner domains:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`net_miner_pool`宏由`检测出站连接到常见矿工池端口`规则使用，以检测出站连接到矿工域：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If there is a crypto-mining process running and communicating to the miner
    domains defined in the list, the alert will be triggered, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个正在运行并与列表中定义的矿工域进行通信的加密挖矿进程，警报将被触发，如下所示：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `Detect outbound connections to common miner pool ports` rule is straightforward.
    If there is an alert generated by this rule, you should address it as high-priority.
    The limitation of the rule is also obvious; you will have to keep the mining domain
    and mining ports updated. If there is a new mining domain available or a new mining
    server port is used and they are not added to the Falco list, then the rule will
    miss detecting the crypto-mining activities. Note that the rule is disabled by
    default. As Falco needs to send DNS requests to resolve the miner pool domains,
    these DNS requests will be alerted by some cloud providers. A side note is that
    an open source tool such as Hubble from Cilium can help monitor network traffic.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`检测出站连接到常见矿工池端口`规则很简单。如果这个规则生成了一个警报，你应该把它作为高优先级处理。规则的限制也很明显；您将不得不保持挖矿域和挖矿端口的更新。如果有新的挖矿域可用或者使用了新的挖矿服务器端口，并且它们没有添加到Falco列表中，那么规则将无法检测到加密挖矿活动。请注意，该规则默认情况下是禁用的。由于Falco需要发送DNS请求来解析矿工池域名，这些DNS请求将被一些云提供商警报。一个副作用是，像Cilium的Hubble这样的开源工具可以帮助监控网络流量。'
- en: 'Another approach is to use the whitelist approach. If you know the target port
    or IP blocks in the outbound connections of your microservices, you can create
    Falco rules to alert any outbound connection''s destination IPs or ports that
    are not on the whitelist. The following is an example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用白名单方法。如果您知道微服务的出站连接中的目标端口或IP块，您可以创建Falco规则来警报不在白名单上的任何出站连接的目标IP或端口。以下是一个例子：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding rule alerts any outbound connection to IP addresses or ports outside
    of `trusted_server_ports` or `trusted_server_addresses`. Given that the attack
    happened in Tesla, Falco will alert that there is an anomalous connection, even
    though the IP address looks normal. Next, let's look at another Falco rule to
    detect potential crypto-mining activities based on patterns in the command line.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上述规则将警报任何对`trusted_server_ports`或`trusted_server_addresses`之外的IP地址或端口的出站连接。鉴于攻击发生在特斯拉，Falco将警报存在异常连接，即使IP地址看起来正常。接下来，让我们看另一个Falco规则，根据命令行中的模式来检测潜在的加密挖矿活动。
- en: Detecting launched crypto-mining processes
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测已启动的加密挖矿进程
- en: Stratum mining protocol is the most common protocol for the mining process to
    communicate with mining servers. Some mining binaries allow users to specify protocols
    to communicate with the mining pool server when executed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Stratum挖矿协议是与挖矿服务器进行通信的挖矿过程中最常见的协议。一些挖矿二进制文件允许用户在执行时指定与挖矿池服务器通信的协议。
- en: 'In Falco''s default rules, there is one to detect the crypto binaries'' execution
    based on keywords in the command line:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Falco的默认规则中，有一个规则是基于命令行中的关键字来检测加密二进制文件的执行：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `Detect crypto miners using the Stratum protocol` rule will raise an alert
    if Falco detects any processes launched with `stratum+tcp` and is specified in
    the process''s command line. The output looks as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Falco检测到任何使用`stratum+tcp`启动的进程并且在进程的命令行中指定了，那么`检测使用Stratum协议的加密矿工`规则将引发警报。输出如下：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `minerd2 -a cryptonight -o stratum+tcp://monero.crypto-pool.fr:3333 -u 49TfoHGd6apXxNQTSHrMBq891vH6JiHmZHbz5Vx36nLRbz6Wgc
    JunTtgcxnoG6snKFeGhAJB5LjyAEnvhBgCs5MtEgML3LU -p x` command line that was executed
    contains the `stratum+tcp` keyword. That's why the alert was triggered.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的`minerd2 -a cryptonight -o stratum+tcp://monero.crypto-pool.fr:3333 -u 49TfoHGd6apXxNQTSHrMBq891vH6JiHmZHbz5Vx36nLRbz6Wgc
    JunTtgcxnoG6snKFeGhAJB5LjyAEnvhBgCs5MtEgML3LU -p x`命令行包含了`stratum+tcp`关键字。这就是为什么会触发警报。
- en: Like other name-based detection rules, the limitation of the rule is obvious.
    If the crypto binary execution does not contain `stratum+tcp`, the rule will not
    be triggered.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他基于名称的检测规则一样，该规则的限制是显而易见的。如果加密二进制执行文件不包含`stratum+tcp`，则该规则将不会被触发。
- en: 'The preceding rule uses the blacklist approach. Another way is to use a whitelist
    approach if you know the processes that are going to run in the microservices.
    You can define a Falco rule to raise an alert when any process that is not on
    the trusted list is launched. The following is an example of this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述规则使用了黑名单方法。另一种方法是使用白名单方法，如果您知道将在微服务中运行的进程。您可以定义一个Falco规则，当启动任何不在信任列表上的进程时引发警报。以下是一个示例：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding rule will alert any anomalous process launched in an `nginx` container,
    which includes the crypto-mining processes. Last but not least, let's look at
    how image scanning tools can help detect the existence of crypto-mining binaries
    through integrating with malware feed services.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述规则将警报任何在`nginx`容器中启动的异常进程，其中包括加密挖矿进程。最后，让我们看看图像扫描工具如何通过与恶意软件源集成来帮助检测加密挖矿二进制文件的存在。
- en: Checking the binary signature
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查二进制签名
- en: 'Crypto-mining binaries can sometimes be recognized as malware. Like traditional
    anti-virus software, we can also check the hash value of running binaries against
    the malware feeds. With the help of an image scanning tool, such as Anchore, we
    can get the file''s hash values:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 加密挖矿二进制文件有时可以被识别为恶意软件。与传统的反病毒软件一样，我们也可以检查运行中的二进制文件的哈希值与恶意软件源的匹配情况。借助图像扫描工具，比如Anchore，我们可以获取文件的哈希值：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The hash value of the `/tmp/minerd2` file is `e86db6abf96f5851ee476eeb8c847
    cd73aebd0bd903827a362c07389d71bc728`. Then, we can check the hash value against
    VirusTotal, which provides malware feed service:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`/tmp/minerd2`文件的哈希值为`e86db6abf96f5851ee476eeb8c847cd73aebd0bd903827a362c07389d71bc728`。然后，我们可以将哈希值与VirusTotal进行比对，VirusTotal提供恶意软件信息源服务：'
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`$VIRUS_FEEDS_API_KEY` is your API key to access the VirusTotal API service,
    which then provides the following report:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`$VIRUS_FEEDS_API_KEY`是您访问VirusTotal API服务的API密钥，然后提供以下报告：'
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The VirusTotal report shows that `/tmp/minerd2` has been reported as malware
    by 25 different feed sources, such as Fortinet and Antiy AVL. By integrating an
    image scanning tool and malware feeds service in your CI/CD pipeline, you can
    help detect malware at an early stage in the development life cycle. However,
    the downside of this single approach is that you will miss the crypto-mining attack
    if the mining binary is downloaded from the command and control server into a
    running pod. Another limitation is that if the feed server doesn't have any information
    about the crypto binary, you will definitely miss it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: VirusTotal报告显示，`/tmp/minerd2`已被25个不同的信息源报告为恶意软件，如Fortinet和Antiy AVL。通过在CI/CD流水线中集成图像扫描工具和恶意软件信息源服务，您可以帮助在开发生命周期的早期阶段检测恶意软件。然而，这种单一方法的缺点是，如果挖矿二进制文件从命令和控制服务器下载到运行的Pod中，您将错过加密挖矿攻击。另一个限制是，如果信息源服务器没有关于加密二进制文件的任何信息，您肯定会错过它。
- en: We have talked about four different approaches to detect crypto-mining attacks.
    Each of these approaches has its own advantages and limitations; it would be ideal
    to apply some of these approaches together to improve their detection capability
    and detection efficacy.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了四种不同的方法来检测加密挖矿攻击。每种方法都有其自身的优点和局限性；将一些这些方法结合起来以提高其检测能力和检测效果将是理想的。
- en: Next, let's recap what we've discussed in this book, and comprehensively use
    this knowledge to prevent attacks in general.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们回顾一下我们在本书中讨论的内容，并全面运用这些知识来预防一般性的攻击。
- en: Defending against attacks
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防御攻击
- en: In the previous section, we talk about a few ways of detecting crypto-mining
    activities. In this section, we will talk about defending against attacks in general
    by securing Kubernetes clusters. So, this involves more than just defending against
    a particular attack, but defending against all kinds of attacks. The four major
    defense areas are Kubernetes cluster provisioning, build, deployment, and runtime.
    First, let's talk about securing Kubernetes cluster provisioning.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们讨论了几种检测加密挖矿活动的方法。在本节中，我们将讨论通过保护Kubernetes集群来防御攻击。因此，这不仅涉及防御特定攻击，还涉及防御各种攻击。四个主要的防御领域是Kubernetes集群供应、构建、部署和运行时。首先，让我们谈谈保护Kubernetes集群供应。
- en: Securing Kubernetes cluster provisioning
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护Kubernetes集群供应
- en: 'There are multiple ways to provision Kubernetes clusters such as `kops` and
    `kubeadm`. No matter which tool you use to provision a cluster, each Kubernetes
    component needs to be configured securely. Use `kube-bench` to benchmark your
    Kubernetes cluster and improve the security configurations. Make sure that RBAC
    is enabled, the `--anonymous-auth` flag is disabled, network connections are encrypted,
    and so on. The following are the key areas we covered in [*Chapter 6*](B15566_06_Final_ASB_ePub.xhtml#_idTextAnchor170),
    *Securing Cluster Components*, and [*Chapter 7*](B15566_07_Final_ASB_ePub.xhtml#_idTextAnchor186),
    *Authentication, Authorization, and Admission Control*:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以配置Kubernetes集群，比如`kops`和`kubeadm`。无论您使用哪种工具来配置集群，每个Kubernetes组件都需要进行安全配置。使用`kube-bench`来对您的Kubernetes集群进行基准测试，并改进安全配置。确保启用了RBAC，禁用了`--anonymous-auth`标志，网络连接进行了加密等等。以下是我们在[*第6章*](B15566_06_Final_ASB_ePub.xhtml#_idTextAnchor170)中涵盖的关键领域，*保护集群组件*，以及[*第7章*](B15566_07_Final_ASB_ePub.xhtml#_idTextAnchor186)，*身份验证、授权和准入控制*：
- en: Properly configuring authentication and authorization for the Kubernetes control
    plane, `kubelet`, and so on
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Kubernetes控制平面、`kubelet`等正确配置身份验证和授权
- en: Securing communication between Kubernetes components—for example, communication
    between `kube-apiserver`, `kubelet`, `kube-apiserver`, and `etcd`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护Kubernetes组件之间的通信，例如`kube-apiserver`、`kubelet`、`kube-apiserver`和`etcd`之间的通信
- en: Enabling data encryption at rest for `etcd`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`etcd`启用静态数据加密
- en: Ensuring you do not launch unnecessary components, such as the dashboard
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保不启动不必要的组件，比如仪表板
- en: Making sure all the necessary admission controllers are enabled while the deprecated
    ones are disabled
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有必要的准入控制器都已启用，而已弃用的控制器已禁用
- en: With the Kubernetes clusters securely provisioned, there are fewer chances for
    hackers to hack into your Kubernetes cluster easily, as was the case with Tesla's
    clusters (where the dashboard did not require authentication). Next, let's talk
    about securing the build.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安全配置Kubernetes集群，可以减少黑客轻易入侵您的Kubernetes集群的机会，就像特斯拉的集群一样（其中仪表板不需要身份验证）。接下来，让我们谈谈如何保护构建。
- en: Securing the build
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护构建
- en: 'Securing Kubernetes clusters also includes securing microservices. Securing
    microservices has to start at the beginning of the CI/CD pipeline. The following
    are some key countermeasures, as discussed in [*Chapter 8*](B15566_08_Final_ASB_ePub.xhtml#_idTextAnchor249),
    *Securing Kubernetes Pods*, and [*Chapter 9*](B15566_09_Final_ASB_ePub.xhtml#_idTextAnchor277),
    *Image Scanning in DevOps Pipelines* to secure microservices at the build stage:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 保护Kubernetes集群还包括保护微服务。保护微服务必须从CI/CD流水线的开始进行。以下是一些关键的对策，如[*第8章*](B15566_08_Final_ASB_ePub.xhtml#_idTextAnchor249)中讨论的，*保护Kubernetes
    Pod*，以及[*第9章*](B15566_09_Final_ASB_ePub.xhtml#_idTextAnchor277)，*DevOps流水线中的图像扫描*，以在构建阶段保护微服务：
- en: Address vulnerabilities discovered by image scanning tools properly for your
    microservices so that the possibility of a successful intrusion through exploiting
    application vulnerabilities is slim.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 妥善处理图像扫描工具发现的微服务漏洞，以减少通过利用应用程序漏洞成功入侵的可能性。
- en: Benchmark Dockerfiles to improve security configuration for images. Make sure
    no sensitive data is stored in the image, that all the dependent packages are
    updated, and so on.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Dockerfile进行基准测试，以改进镜像的安全配置。确保镜像中没有存储敏感数据，所有依赖包都已更新等等。
- en: Scan executable files in the image to make sure no malware is seeded inside
    the image.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描镜像中的可执行文件，确保没有恶意软件植入镜像。
- en: Configure Kubernetes security contexts properly for workloads. Follow the principle
    of least privileges, limit access to system resources, such as using host-level
    namespaces, host paths, and so on, and remove unnecessary Linux capabilities,
    only granting the ones that are required.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为工作负载正确配置Kubernetes安全上下文。遵循最小特权原则，限制对系统资源的访问，比如使用主机级别的命名空间、主机路径等，并移除不必要的Linux能力，只授予必需的能力。
- en: Do not enable an auto-mount service account. If no service account is required
    for the workload, don't create a service account for it.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要启用自动挂载服务账户。如果工作负载不需要服务账户，就不要为其创建服务账户。
- en: Follow the principle of least privileges, try to understand the tasks your workloads
    are carrying out, and only grant the required privileges to the service account.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循最小特权原则，尝试了解工作负载正在执行的任务，并只授予服务账户所需的特权。
- en: Follow the principle of least privileges, try to estimate the resource usage
    for workloads, and apply proper resource requests and limits to workloads.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循最小特权原则，尝试估计工作负载的资源使用情况，并为工作负载应用适当的资源请求和限制。
- en: Of course, securing the build can also be expanded to secure the entire CI/CD
    pipeline, such as source code management and CI/CD components. However, that is
    beyond the scope of this book. We will only suggest the options we think are most
    relevant to securing your Kubernetes clusters. Next, let's talk about securing
    deployment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，保护构建也可以扩展到保护整个CI/CD流水线，比如源代码管理和CI/CD组件。然而，这超出了本书的范围。我们只会建议我们认为最相关的保护Kubernetes集群的选项。接下来，让我们谈谈保护部署。
- en: Securing deployment
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护部署
- en: 'We''ve already talked about different kinds of admission controllers in Kubernetes
    clusters in [*Chapter 7*](B15566_07_Final_ASB_ePub.xhtml#_idTextAnchor186), *Authentication,
    Authorization, and Admission Control*, and [*Chapter 8*](B15566_08_Final_ASB_ePub.xhtml#_idTextAnchor249),
    *Securing Kubernetes Pods*, and the need to use them properly with an example
    of an image-scanning admission controller ([*Chapter 9*](B15566_09_Final_ASB_ePub.xhtml#_idTextAnchor277),
    *Image Scanning in DevOps Pipelines*). Using admission controllers and other built-in
    mechanisms serves as a great security gatekeeper for your workloads. The following
    are some key counter-measures:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在Kubernetes集群中的[*第7章*](B15566_07_Final_ASB_ePub.xhtml#_idTextAnchor186)、*认证、授权和准入控制*，以及[*第8章*](B15566_08_Final_ASB_ePub.xhtml#_idTextAnchor249)、*保护Kubernetes
    Pods*中讨论了不同类型的准入控制器，以及正确使用它们的必要性，例如一个镜像扫描准入控制器的示例（[*第9章*](B15566_09_Final_ASB_ePub.xhtml#_idTextAnchor277)、*DevOps流水线中的镜像扫描*）。使用准入控制器和其他内置机制作为工作负载的重要安全门卫。以下是一些关键的对策：
- en: Apply network policies for namespaces and workloads. This could either be to
    restrict access to workloads (inbound network policies) or to implement the principle
    of least privileges (outbound network policies). When given a workload, if you
    know the destination IP block for outbound connection, you should create a network
    policy for that workload to restrict its outbound connection. The outbound network
    policy should block any traffic with a destination beyond the whitelisted IP block,
    such as downloading a crypto-mining binary from command and control server.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为命名空间和工作负载应用网络策略。这可以是限制对工作负载的访问（入站网络策略），也可以是实施最小特权原则（出站网络策略）。当给定一个工作负载时，如果你知道出站连接的目标IP块，你应该为该工作负载创建一个网络策略来限制其出站连接。出站网络策略应该阻止任何超出白名单IP块的目的地流量，比如从命令和控制服务器下载加密挖矿二进制文件。
- en: Use **Open Policy Agent** (**OPA**) to ensure only images from trusted image
    registries are allowed to run in the cluster. With this policy, OPA should block
    any images from untrusted sources from running. For example, malicious images
    that contain crypto-mining binaries may reside in Docker Hub, so you should never
    consider Docker Hub as a trusted image registry.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Open Policy Agent**（**OPA**）来确保只有来自受信任的镜像仓库的镜像被允许在集群中运行。有了这个策略，OPA应该阻止来自不受信任来源的镜像运行。例如，可能存在包含加密挖矿二进制文件的恶意镜像在Docker
    Hub中，因此您不应该将Docker Hub视为受信任的镜像仓库。
- en: Use image-scanning admission controllers to ensure only images compliant with
    the scanning policy are allowed to run in the cluster. We already talked about
    this in [*Chapter 9*](B15566_09_Final_ASB_ePub.xhtml#_idTextAnchor277), *Image
    Scanning in DevOps Pipelines*. New vulnerabilities may be discovered and the vulnerabilities'
    databases will be updated when you deploy workloads. It is necessary to scan before
    deploying.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用镜像扫描准入控制器来确保只有符合扫描策略的镜像被允许在集群中运行。我们已经在[*第9章*]（B15566_09_Final_ASB_ePub.xhtml#_idTextAnchor277）中谈到了这一点，*DevOps流水线中的镜像扫描*。可能会发现新的漏洞，并且在部署工作负载时漏洞数据库将会更新。在部署之前进行扫描是必要的。
- en: Use OPA or pod security policies to ensure workloads with limited Linux capabilities
    and restricted access to the host-level namespaces, host paths, and so on.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OPA或Pod安全策略来确保具有受限Linux功能和对主机级命名空间、主机路径等受限访问权限的工作负载。
- en: It would be ideal to have AppArmor enabled on worker nodes and for each image
    that is deployed to have an AppArmor profile applied to it. Confining AppArmor
    profiles is done when workloads deploy, although the actual protection happens
    during runtime. A good use case is to build an AppArmor profile to whitelist the
    allowed processes when you know the processes that are running inside the container
    so that other processes, such as crypto-mining processes, will be blocked by AppArmor.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最好在工作节点上启用AppArmor，并为部署的每个镜像应用一个AppArmor配置文件。当工作负载部署时，会限制AppArmor配置文件，尽管实际的保护是在运行时发生的。一个很好的用例是构建一个AppArmor配置文件，以允许白名单内的进程运行，当您知道容器内运行的进程时，这样其他进程，比如加密挖矿进程，将被AppArmor阻止。
- en: Do leverage the power of admission controllers and build a gatekeeper for your
    workload's deployment. Next, let's talk about securing workloads in runtime.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 利用准入控制器的力量，为您的工作负载部署构建一个门卫。接下来，让我们谈谈在运行时保护工作负载。
- en: Securing runtime
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护运行时
- en: 'Most likely, your Kubernetes clusters are the front battlefield to fight against
    hackers. Although we discussed different tactics to secure the build and deployment,
    all of these tactics ultimately aim to reduce the attack surface in the Kubernetes
    clusters. You cannot simply close your eyes and assume everything is going to
    be fine in your Kubernetes cluster. That''s why we talk about resource monitoring
    in [*Chapter 10*](B15566_10_Final_ASB_ePub.xhtml#_idTextAnchor305), *Real-Time
    Monitoring and Resource Management of a Kubernetes Cluster*, and auditing, secret
    management, detection, and forensics in [*Chapter 11*](B15566_11_Final_ASB_ePub.xhtml#_idTextAnchor324),
    *Defense in Depth*. To recap what was covered in those two chapters, the following
    are the key counter-measures to secure runtime:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，您的Kubernetes集群是与黑客作战的前线。尽管我们讨论了不同的策略来保护构建和部署，但所有这些策略最终都旨在减少Kubernetes集群中的攻击面。您不能简单地闭上眼睛，假设您的Kubernetes集群一切都会好起来。这就是为什么我们在[*第10章*]（B15566_10_Final_ASB_ePub.xhtml#_idTextAnchor305）中谈论资源监控，*Kubernetes集群的实时监控和资源管理*，以及审计、秘钥管理、检测和取证在[*第11章*]（B15566_11_Final_ASB_ePub.xhtml#_idTextAnchor324）中，*深度防御*。总结一下在这两章中涵盖的内容，以下是保护运行时的关键对策：
- en: Deploy decent monitor tools, such as Prometheus and Grafana, to monitor resource
    usage in your Kubernetes cluster. This is critical to ensure the availability
    of services and also, attacks such as crypto mining may trigger surges in CPU
    usage.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署像Prometheus和Grafana这样的良好的监控工具，以监控Kubernetes集群中的资源使用情况。这对于确保服务的可用性至关重要，而且像加密货币挖矿这样的攻击可能会引发CPU使用率的激增。
- en: Enable Kubernetes' audit policy to log Kubernetes events and activities.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用Kubernetes的审计策略以记录Kubernetes事件和活动。
- en: Ensure high availability across your infrastructure, Kubernetes components,
    and workloads.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保基础设施、Kubernetes组件和工作负载的高可用性。
- en: Use decent secret management tools, such as Vault, to manage and provision secrets
    for microservices.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用像Vault这样的良好的秘密管理工具来管理和提供微服务的秘密。
- en: Deploy decent detection tools, such as Falco, to detect suspicious activities
    in Kubernetes clusters.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署像Falco这样的良好的检测工具，以侦测Kubernetes集群中的可疑活动。
- en: It would be ideal to have forensics tools to collect and analyze suspicious
    events.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最好有取证工具来收集和分析可疑事件。
- en: 'You may notice that securing communication among microservices is not mentioned.
    Service meshes are a hot topic that could help secure communication among microservices
    and beyond. However, service meshes are not covered in this book for two reasons:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到保护微服务间通信并未被提及。服务网格是一个热门话题，可以帮助保障微服务及其间通信，但出于两个原因，本书未涵盖服务网格：
- en: A service mesh introduces performance overhead to workloads and Kubernetes clusters,
    so they are not yet a perfect solution to secure communication among services.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务网格会给工作负载和Kubernetes集群带来性能开销，因此它们还不是保障服务间通信的完美解决方案。
- en: From an application security standpoint, it is easy to enforce service listening
    on port `443` with a CA-signed certificate so that the communication is encrypted.
    If microservices also perform authentication and authorization, then only trusted
    microservices can access authorized resources. A service mesh is not an irreplaceable
    solution to secure communication among services.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从应用安全的角度来看，可以轻松地强制应用程序在443端口上监听，并使用CA签名证书进行加密通信。如果微服务还执行身份验证和授权，那么只有受信任的微服务才能访问授权资源。服务网格并非保障服务间通信的不可替代解决方案。
- en: To defend against attacks to Kubernetes clusters, we need to secure the provisioning,
    build, deployment, and runtime of our Kubernetes clusters from end to end. They
    should all be considered as equally important as the strength of your defense
    is determined by your weakest link.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防御针对Kubernetes集群的攻击，我们需要从头到尾保护Kubernetes集群的供应、构建、部署和运行。它们都应被视为同等重要，因为你的防御力取决于最薄弱的环节。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went through a couple of the crypto-mining attacks that
    occurred over the last two years that brought a lot of attention to the need for
    securing containerized environments. Then, we showed you how to detect crypto-mining
    attacks with different open source tools. Last but not the least, we talked about
    how to defend your Kubernetes clusters against attacks in general by recapping
    what we discussed in previous chapters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了过去两年发生的一些加密货币挖矿攻击，这引起了对保护容器化环境需求的广泛关注。然后，我们向你展示了如何使用不同的开源工具来检测加密货币挖矿攻击。最后但同样重要的是，我们讨论了如何通过总结前几章的内容来保护你的Kubernetes集群免受攻击。
- en: We hope you understand the core concepts of securing a Kubernetes cluster, which
    means securing the cluster provisioning, build, deployment, and runtime stages.
    You should also feel comfortable with starting to use Anchore, Prometheus, Grafana,
    and Falco.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望你理解保护Kubernetes集群的核心概念，这意味着保护集群的供应、构建、部署和运行阶段。你也应该对开始使用Anchore、Prometheus、Grafana和Falco感到满意。
- en: As we know, Kubernetes is still evolving and it's not perfect. In the next chapter,
    we're going to talk about some known Kubernetes **Common Vulnerabilities and Exposures**
    (**CVEs**) and some mitigations that can protect your cluster against unknown
    variations. The purpose of the following chapter is to prepare you to be able
    to respond to handling any Kubernetes CVEs discovered in the future.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，Kubernetes仍在不断发展，并不完美。在下一章中，我们将讨论一些已知的Kubernetes**常见漏洞和曝光**（**CVEs**）以及一些可以保护您的集群免受未知变体影响的缓解措施。以下一章的目的是为了让您能够应对未来发现的任何Kubernetes
    CVEs。
- en: Questions
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What was the flaw that made a crypto-mining attack possible in Tesla's Kubernetes
    cluster?
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是什么缺陷导致了特斯拉的Kubernetes集群中发生了加密挖矿攻击？
- en: If you were the DevOps of Tesla, what would you do to prevent the crypto-mining
    attack?
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您是特斯拉的DevOps，您会采取什么措施来防止加密挖矿攻击？
- en: When you see CPU usage surge in a container, can you conclude that there has
    been a crypto-mining attack?
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您在一个容器中看到CPU使用率激增时，您能否得出结论说发生了加密挖矿攻击？
- en: Can you think of a crypto-mining process that can bypass the `Detect crypto
    miners using the Stratum protocol` Falco rule?
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您能想到一种可以绕过“使用Stratum协议检测加密挖矿程序”的Falco规则的加密挖矿过程吗？
- en: What are the four areas you need to secure in order to secure your Kubernetes
    cluster?
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了保护您的Kubernetes集群，您需要保护哪四个领域？
- en: Further reading
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Refer to the following links for more information on the topics covered in
    this chapter:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章涵盖的主题的更多信息，请参考以下链接：
- en: 'The Tesla crypto-mining attack: [https://redlock.io/blog/cryptojacking-tesla](https://redlock.io/blog/cryptojacking-tesla)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特斯拉加密挖矿攻击：[https://redlock.io/blog/cryptojacking-tesla](https://redlock.io/blog/cryptojacking-tesla)
- en: 'The crypto-worm attack: [https://unit42.paloaltonetworks.com/graboid-first-ever-cryptojacking-worm-found-in-images-on-docker-hub/](https://unit42.paloaltonetworks.com/graboid-first-ever-cryptojacking-worm-found-in-images-on-docker-hub/)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密蠕虫攻击：[https://unit42.paloaltonetworks.com/graboid-first-ever-cryptojacking-worm-found-in-images-on-docker-hub/](https://unit42.paloaltonetworks.com/graboid-first-ever-cryptojacking-worm-found-in-images-on-docker-hub/)
- en: 'Prometheus: [https://prometheus.io/docs/introduction/overview/](https://prometheus.io/docs/introduction/overview/)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普罗米修斯：[https://prometheus.io/docs/introduction/overview/](https://prometheus.io/docs/introduction/overview/)
- en: 'Falco: [https://falco.org/docs/](https://falco.org/docs/)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Falco：[https://falco.org/docs/](https://falco.org/docs/)
- en: 'The VirusTotal API: [https://developers.virustotal.com/v3.0/reference](https://developers.virustotal.com/v3.0/reference)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirusTotal API：[https://developers.virustotal.com/v3.0/reference](https://developers.virustotal.com/v3.0/reference)
- en: 'The crypto-mining attack analysis: [https://kromtech.com/blog/security-center/cryptojacking-invades-cloud-how-modern-containerization-trend-is-exploited-by-attackers](https://kromtech.com/blog/security-center/cryptojacking-invades-cloud-how-modern-containerization-trend-is-exploited-by-attackers)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密挖矿攻击分析：[https://kromtech.com/blog/security-center/cryptojacking-invades-cloud-how-modern-containerization-trend-is-exploited-by-attackers](https://kromtech.com/blog/security-center/cryptojacking-invades-cloud-how-modern-containerization-trend-is-exploited-by-attackers)
- en: 'Hubble: [https://github.com/cilium/hubble](https://github.com/cilium/hubble)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈勃：[https://github.com/cilium/hubble](https://github.com/cilium/hubble)
