["```cs\n[AccessModifier] delegate ReturnType DelegateName([parameters]); \n\n```", "```cs\npublic delegate void SingleStringDelegate(string dataString); \n\n```", "```cs\nprivate static void AssignData(string dataString) \n{ \n  globalString = dataString; \n} \n\n```", "```cs\nprivate static void WriteToConsole(string dataText) \n{ \n  Console.WriteLine(dataText); \n} \n\n```", "```cs\nSingleStringDelegate delegate1 = AssignData; \n\n```", "```cs\nSingleStringDelegate delegate2 = WriteToConsole; \n\n```", "```cs\npublic partial class Program \n{ \n  static int Rectangle(int a, int b) \n  { \n    return a * b; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate int AreaCalculatorDelegate(int x, int y); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static int Square(int x, int y) \n  { \n    return x * y; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    AreaCalculatorDelegate rect = Rectangle; \n    AreaCalculatorDelegate sqr = Square; \n    int i = rect(1, 2); \n    int j = sqr(2, 3); \n    Console.WriteLine(\"i = \" + i); \n    Console.WriteLine(\"j = \" + j); \n  } \n} \n\n```", "```cs\nAreaCalculatorDelegate rect = Rectangle; \nAreaCalculatorDelegate sqr = Square; \n\n```", "```cs\nint i = rect(1, 2); \nint j = sqr(2, 3); \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate void CalculatorDelegate(int a, int b); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void Add(int x, int y) \n  { \n    Console.WriteLine( \n      \"{0} + {1} = {2}\", \n      x, \n      y, \n      x + y); \n  } \n  private static void Subtract(int x, int y) \n  { \n    Console.WriteLine( \n      \"{0} - {1} = {2}\", \n      x, \n      y, \n      x - y); \n  } \n  private static void Multiply(int x, int y) \n  { \n    Console.WriteLine( \n      \"{0} * {1} = {2}\", \n      x, \n      y, \n      x * y); \n  } \n  private static void Division(int x, int y) \n  { \n    Console.WriteLine( \n      \"{0} / {1} = {2}\", \n      x, \n      y, \n      x / y); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CombineDelegate() \n  { \n    CalculatorDelegate calcMultiples = \n      (CalculatorDelegate)Delegate.Combine( \n      new CalculatorDelegate[] { \n      Add, \n      Subtract, \n      Multiply, \n      Division }); \n    Delegate[] calcList = calcMultiples.GetInvocationList(); \n    Console.WriteLine( \n      \"Total delegates in calcMultiples: {0}\", \n      calcList.Length); \n    calcMultiples(6, 3); \n  } \n} \n\n```", "```cs\ncalcMultiples(6, 3); \n\n```", "```cs\nCalculatorDelegate calcMultiples = \n  (CalculatorDelegate)Delegate.Combine( \n    new CalculatorDelegate[] { \n      Add, \n      Subtract, \n      Multiply, \n      Division }); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void RemoveDelegate() \n  { \n    CalculatorDelegate addDel = Add; \n    CalculatorDelegate subDel = Subtract; \n    CalculatorDelegate mulDel = Multiply; \n    CalculatorDelegate divDel = Division; \n    CalculatorDelegate calcDelegates1 = \n      (CalculatorDelegate)Delegate.Combine( \n      addDel, \n      subDel); \n    CalculatorDelegate calcDelegates2 = \n      (CalculatorDelegate)Delegate.Combine( \n      calcDelegates1, \n      mulDel); \n    CalculatorDelegate calcDelegates3 = \n      (CalculatorDelegate)Delegate.Combine( \n      calcDelegates2, \n      divDel); \n    Console.WriteLine( \n      \"Total delegates in calcDelegates3: {0}\", \n      calcDelegates3.GetInvocationList().Length); \n    calcDelegates3(6, 3); \n    CalculatorDelegate calcDelegates4 = \n      (CalculatorDelegate)Delegate.Remove( \n      calcDelegates3, \n      mulDel); \n    Console.WriteLine( \n      \"Total delegates in calcDelegates4: {0}\", \n      calcDelegates4.GetInvocationList().Length); \n    calcDelegates4(6, 3); \n  } \n} \n\n```", "```cs\nCalculatorDelegate calcDelegates4 = \n  (CalculatorDelegate)Delegate.Remove( \n  calcDelegates3, \n  mulDel); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void DuplicateEntries() \n  { \n    CalculatorDelegate addDel = Add; \n    CalculatorDelegate subDel = Subtract; \n    CalculatorDelegate mulDel = Multiply; \n    CalculatorDelegate duplicateDelegates1 = \n      (CalculatorDelegate)Delegate.Combine( \n      addDel, \n      subDel); \n    CalculatorDelegate duplicateDelegates2 = \n      (CalculatorDelegate)Delegate.Combine( \n      duplicateDelegates1, \n      mulDel); \n    CalculatorDelegate duplicateDelegates3 = \n      (CalculatorDelegate)Delegate.Combine( \n      duplicateDelegates2, \n      subDel); \n    CalculatorDelegate duplicateDelegates4 = \n      (CalculatorDelegate)Delegate.Combine( \n      duplicateDelegates3, \n      addDel); \n    Console.WriteLine( \n      \"Total delegates in duplicateDelegates4: {0}\", \n      duplicateDelegates4.GetInvocationList().Length); \n      duplicateDelegates4(6, 3); \n  } \n} \n\n```", "```cs\nCalculatorDelegate duplicateDelegates1 = \n  (CalculatorDelegate)Delegate.Combine( \n  addDel, \n  subDel); \nCalculatorDelegate duplicateDelegates2 = \n  (CalculatorDelegate)Delegate.Combine( \n  duplicateDelegates1, \n  mulDel); \n\n```", "```cs\nCalculatorDelegate duplicateDelegates3 = \n  (CalculatorDelegate)Delegate.Combine( \n  duplicateDelegates2, \n  subDel); \nCalculatorDelegate duplicateDelegates4 = \n  (CalculatorDelegate)Delegate.Combine( \n  duplicateDelegates3, \n  addDel); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void AddSubtractDelegate() \n  { \n    CalculatorDelegate addDel = Add; \n    CalculatorDelegate subDel = Subtract; \n    CalculatorDelegate mulDel = Multiply; \n    CalculatorDelegate divDel = Division; \n    CalculatorDelegate multiDel = addDel + subDel; \n    multiDel += mulDel; \n    multiDel += divDel; \n    Console.WriteLine( \n      \"Invoking multiDel delegate (four methods):\"); \n    multiDel(8, 2); \n    multiDel = multiDel - subDel; \n    multiDel -= mulDel; \n    Console.WriteLine( \n      \"Invoking multiDel delegate (after subtraction):\"); \n    multiDel(8, 2); \n  } \n} \n\n```", "```cs\nCalculatorDelegate multiDel = addDel + subDel; \nmultiDel += mulDel; \nmultiDel += divDel; \nConsole.WriteLine( \n  \"Invoking multiDel delegate (four methods):\"); \nmultiDel(8, 2); \n\n```", "```cs\nmultiDel = multiDel - subDel; \nmultiDel -= mulDel; \nConsole.WriteLine( \n  \"Invoking multiDel delegate (after subtraction):\"); \nmultiDel(8, 2); \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate T FormulaDelegate<T>(T a, T b); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static int AddInt(int x, int y) \n  { \n    return x + y; \n  } \n  private static double AddDouble(double x, double y) \n  { \n    return x + y; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void GenericDelegateInvoke() \n  { \n    FormulaDelegate<int> intAddition = AddInt; \n    FormulaDelegate<double> doubleAddition = AddDouble; \n    Console.WriteLine(\"Invoking intAddition(2, 3)\"); \n    Console.WriteLine( \n      \"Result = {0}\", \n      intAddition(2, 3)); \n    Console.WriteLine(\"Invoking doubleAddition(2.2, 3.5)\"); \n    Console.WriteLine( \n      \"Result = {0}\", \n      doubleAddition(2.2, 3.5)); \n  } \n} \n\n```", "```cs\nFormulaDelegate<int> intAddition = AddInt; \nFormulaDelegate<double> doubleAddition = AddDouble; \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate void AdditionDelegate<T1, T2>( \n    T1 value1, T2 value2); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void AddIntDouble(int x, double y) \n  { \n    Console.WriteLine( \n      \"int {0} + double {1} = {2}\", \n      x, \n      y, \n      x + y); \n  } \n  private static void AddFloatDouble(float x, double y) \n  { \n    Console.WriteLine( \n      \"float {0} + double {1} = {2}\", \n      x, \n      y, \n      x + y); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void VoidDelegateInvoke() \n  { \n    AdditionDelegate<int, double> intDoubleAdd = \n      AddIntDouble; \n    AdditionDelegate<float, double> floatDoubleAdd = \n      AddFloatDouble; \n    Console.WriteLine(\"Invoking intDoubleAdd delegate\"); \n    intDoubleAdd(1, 2.5); \n    Console.WriteLine(\"Invoking floatDoubleAdd delegate\"); \n    floatDoubleAdd((float)1.2, 4.3); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate TResult AddAndConvert<T1, T2, TResult>( \n    T1 digit1, T2 digit2); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static float AddIntDoubleConvert(int x, double y) \n  { \n    float result = (float)(x + y); \n    Console.WriteLine( \n      \"(int) {0} + (double) {1} = (float) {2}\", \n      x, \n      y, \n      result); \n    return result; \n  } \n  private static int AddFloatDoubleConvert(float x, double y) \n  { \n    int result = (int)(x + y); \n    Console.WriteLine( \n      \"(float) {0} + (double) {1} = (int) {2}\", \n      x, \n      y, \n      result); \n    return result; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void ReturnValueDelegateInvoke() \n  { \n    AddAndConvert<int, double, float>\n        intDoubleAddConvertToFloat = AddIntDoubleConvert; \n    AddAndConvert<float, double, int>\n        floatDoubleAddConvertToInt = AddFloatDoubleConvert; \n    Console.WriteLine(\"Invoking intDoubleAddConvertToFloat delegate\"); \n    float f = intDoubleAddConvertToFloat(5, 3.9); \n    Console.WriteLine(\"Invoking floatDoubleAddConvertToInt delegate\"); \n    int i = floatDoubleAddConvertToInt((float)4.3, 2.1); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate void AdditionDelegate<T1, T2>( \n    T1 value1, T2 value2); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void ActionDelegateInvoke() \n  { \n    Action<int, double> intDoubleAddAction = \n      AddIntDouble; \n    Action<float, double> floatDoubleAddAction = \n      AddFloatDouble; \n    Console.WriteLine( \n      \"Invoking intDoubleAddAction delegate\"); \n    intDoubleAddAction(1, 2.5); \n    Console.WriteLine( \n      \"Invoking floatDoubleAddAction delegate\"); \n    floatDoubleAddAction((float)1.2, 4.3); \n  } \n} \n\n```", "```cs\nAction<int, double> intDoubleAddAction = \n  AddIntDouble; \nAction<float, double> floatDoubleAddAction = \n  AddFloatDouble; \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate TResult AddAndConvert<T1, T2, TResult>( \n    T1 digit1, T2 digit2); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void FuncDelegateInvoke() \n  { \n    Func<int, double, float> \n       intDoubleAddConvertToFloatFunc = \n          AddIntDoubleConvert; \n    Func<float, double, int> \n       floatDoubleAddConvertToIntFunc = \n          AddFloatDoubleConvert; \n    Console.WriteLine( \n      \"Invoking intDoubleAddConvertToFloatFunc delegate\"); \n    float f = intDoubleAddConvertToFloatFunc(5, 3.9); \n    Console.WriteLine( \n      \"Invoking floatDoubleAddConvertToIntFunc delegate\"); \n    int i = floatDoubleAddConvertToIntFunc((float)4.3, 2.1); \n  } \n} \n\n```", "```cs\nFunc<int, double, float> \n  intDoubleAddConvertToFloatFunc = AddIntDoubleConvert; \nFunc<float, double, int> \n  floatDoubleAddConvertToIntFunc = AddFloatDoubleConvert; \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate TextWriter CovarianceDelegate(); \n} \n\n```", "```cs\npublic partial class Program\n{\n  private static StreamWriter StreamWriterMethod()\n  {\n    DirectoryInfo[] arrDirs =\n       new DirectoryInfo(@\"C:\\Windows\")\n    .GetDirectories(\n       \"s*\", \n        SearchOption.TopDirectoryOnly);\n\n    StreamWriter sw = new StreamWriter(\n    Console.OpenStandardOutput());\n\n    foreach (DirectoryInfo dir in arrDirs)\n    {\n      sw.WriteLine(dir.Name);\n    }\n\n    return sw;\n   }\n}\n\n```", "```cs\npublic partial class Program \n{ \n  private static StringWriter StringWriterMethod() \n  { \n    StringWriter strWriter = new StringWriter(); \n    string[] arrString = new string[]{ \n      \"Covariance\", \n      \"example\", \n      \"using\", \n      \"StringWriter\", \n      \"object\" \n    }; \n    foreach (string str in arrString) \n    { \n      strWriter.Write(str); \n      strWriter.Write(' '); \n    } \n    return strWriter; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CovarianceStreamWriterInvoke() \n  { \n    CovarianceDelegate covDelegate; \n    Console.WriteLine( \n      \"Invoking CovarianceStreamWriterInvoke method:\"); \n      covDelegate = StreamWriterMethod; \n    StreamWriter sw = (StreamWriter)covDelegate(); \n    sw.AutoFlush = true; \n    Console.SetOut(sw); \n  } \n} \n\n```", "```cs\nStreamWriter sw = new StreamWriter( \n  Console.OpenStandardOutput()); \n\n```", "```cs\nsw.AutoFlush = true; \nConsole.SetOut(sw); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CovarianceStringWriterInvoke() \n  { \n    CovarianceDelegate covDelegate; \n    Console.WriteLine( \n      \"Invoking CovarianceStringWriterInvoke method:\"); \n    covDelegate = StringWriterMethod; \n    StringWriter strW = (StringWriter)covDelegate(); \n    Console.WriteLine(strW.ToString()); \n  } \n} \n\n```", "```cs\nStringWriter strWriter = new StringWriter(); \nstring[] arrString = new string[]{ \n  // Array of string \n}; \nforeach (string str in arrString) \n{ \n  strWriter.Write(str); \n  strWriter.Write(' '); \n} \n\n```", "```cs\nConsole.WriteLine(strW.ToString()); \n\n```", "```cs\nprivate delegate TextWriter CovarianceDelegate(); \nCovarianceDelegate covDelegate; \ncovDelegate = StreamWriterMethod; \ncovDelegate = StringWriterMethod; \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate void ContravarianceDelegate(StreamWriter sw); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void TextWriterMethod(TextWriter tw) \n  { \n    string[] arrString = new string[]{ \n      \"Contravariance\", \n      \"example\", \n      \"using\", \n      \"TextWriter\", \n      \"object\" \n    }; \n    tw = new StreamWriter(Console.OpenStandardOutput()); \n    foreach (string str in arrString) \n    { \n      tw.Write(str); \n      tw.Write(' '); \n    } \n    tw.WriteLine(); \n    Console.SetOut(tw); \n    tw.Flush(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void ContravarianceTextWriterInvoke() \n  { \n    ContravarianceDelegate contravDelegate = TextWriterMethod; \n    TextWriter tw = null; \n    Console.WriteLine( \n      \"Invoking ContravarianceTextWriterInvoke method:\"); \n    contravDelegate((StreamWriter)tw); \n  } \n} \n\n```", "```cs\nprivate delegate void ContravarianceDelegate(StreamWriter sw); \nprivate static void TextWriterMethod(TextWriter tw) \n{ \n  // Implementation \n} \nContravarianceDelegate contravDelegate = TextWriterMethod; \nTextWriter tw = null; \ncontravDelegate((StreamWriter)tw); \n\n```"]