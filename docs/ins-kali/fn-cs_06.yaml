- en: Chapter 6. Enhancing the Responsiveness of the Functional Program with Asynchronous
    Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用异步编程增强功能程序的响应性
- en: 'Responsive applications are a must in today''s programming approach. They can
    improve the performance of the application itself and make our application have
    a user-friendly interface. We need to asynchronously run the code execution process
    in our program to have a responsive application. To achieve this goal, in this
    chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式应用程序在今天的编程方法中是必不可少的。它们可以提高应用程序本身的性能，并使我们的应用程序具有用户友好的界面。我们需要在程序中异步运行代码执行过程，以实现响应式应用程序。为了实现这一目标，在本章中，我们将讨论以下主题：
- en: Using thread and thread pool to build a responsive application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用线程和线程池构建响应式应用程序
- en: Learning about asynchronous programming model patterns
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习异步编程模型模式
- en: Learning about task-based asynchronous patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习基于任务的异步模式
- en: Using the async and await keywords to build asynchronous programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用async和await关键字构建异步编程
- en: Applying an asynchronous method in a functional approach
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在功能方法中应用异步方法
- en: Building a responsive application
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建响应式应用程序
- en: The first time .NET Framework was announced, the flow of the program was executed
    sequentially. The drawback of this execution flow is that our application has
    to wait for the operation to finish before executing the next operation. It will
    freeze our application, and that will be an unpleasant user experience.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework首次发布时，程序的流程是按顺序执行的。这种执行流程的缺点是我们的应用程序必须等待操作完成才能执行下一个操作。这将冻结我们的应用程序，这将是一个不愉快的用户体验。
- en: To minimize this problem, .NET Framework introduces thread, the smallest unit
    of execution, which can be scheduled independently by the OS. And the asynchronous
    programming means that you run a piece of code on a separate thread, freeing up
    the original thread and doing other things while the task is completed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最小化这个问题，.NET Framework引入了线程，这是操作的最小单位，可以由操作系统独立调度。而异步编程意味着在单独的线程上运行一段代码，释放原始线程并在任务完成时做其他事情。
- en: Running a program synchronously
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同步运行程序
- en: 'Let''s start our discussion by creating a program that will run all operations
    synchronously. The following is the code that demonstrates the synchronous operation
    that we can find in the `SynchronousOperation.csproj` project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个运行所有操作的程序开始同步运行。以下是演示我们可以在`SynchronousOperation.csproj`项目中找到的同步操作的代码：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see in the preceding code, the `RunSynchronousProcess()` method executes
    two methods; they are the `LongProcess1()` and `LongProcess2()` methods. Now let''s
    call the preceding `RunSynchronousProcess()` method, and we will get the following
    output on the console:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，`RunSynchronousProcess()`方法执行两种方法；它们是`LongProcess1()`和`LongProcess2()`方法。现在让我们调用前面的`RunSynchronousProcess()`方法，我们将在控制台上得到以下输出：
- en: '![Running a program synchronously](img/Image00072.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![同步运行程序](img/Image00072.jpg)'
- en: These two methods, `LongProcess1()` and `LongProcess2()` , are independent,
    and each method takes a particular time to finish. Since it is executed synchronously,
    it takes 12 seconds to finish these two methods. The `LongProcess1()` method needs
    5 seconds to finish, and the `LongProcess2()` method needs 7 seconds to finish.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法，`LongProcess1()`和`LongProcess2()`，是独立的，每种方法都需要一定的时间来完成。由于它是同步执行的，完成这两种方法需要12秒。`LongProcess1()`方法需要5秒完成，`LongProcess2()`方法需要7秒完成。
- en: Applying threads in the program
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在程序中应用线程
- en: 'We can improve our previous code so that it can be the responsive program by
    refactoring some of the code and adding threads to the code. The refactored code
    would be as follows, which we can find in the `ApplyingThreads.csproj` project:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改进先前的代码，使其成为响应式程序，通过重构一些代码并向代码添加线程。重构后的代码如下，在`ApplyingThreads.csproj`项目中可以找到：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can see, we refactor the `RunSynchronousProcess()` method in the previous
    code into the `RunAsynchronousProcess()` method. And if we run the `RunAsynchronousProcess()`
    method, we will get the following output on the console:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们将先前的代码中的`RunSynchronousProcess()`方法重构为`RunAsynchronousProcess()`方法。如果我们运行`RunAsynchronousProcess()`方法，我们将在控制台上得到以下输出：
- en: '![Applying threads in the program](img/Image00073.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![在程序中应用线程](img/Image00073.jpg)'
- en: 'Compared to the `RunSynchronousProcess()` method, we now have a faster process
    in the `RunAsynchronousProcess()` method. We create a new thread that will run
    the `LongProcess1()` method. The thread will not run until it has started using
    the `Start()` method. Take a look at the following code snippet, in which we create
    and run the thread:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与`RunSynchronousProcess()`方法相比，我们现在在`RunAsynchronousProcess()`方法中有一个更快的进程。我们创建一个新的线程来运行`LongProcess1()`方法。线程将在使用`Start()`方法启动之后才会运行。看一下以下代码片段，其中我们创建并运行线程：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After the thread is run, we can run the other operation, in this case, the
    `LongProcess2()` method. When this operation is done, we have to wait for the
    thread to be finished so that we use the `Join()` method from the thread instance.
    The following code snippet will explain this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 线程运行后，我们可以运行其他操作，这种情况下是`LongProcess2()`方法。当此操作完成时，我们必须等待线程完成，然后使用线程实例的`Join()`方法。以下代码片段将解释这一点：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Join()` method will block the current thread until the other thread that's
    being executed is finished. After the other thread finishes, the `Join()` method
    will return, and then the current thread will be unblocked.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Join()`方法将阻塞当前线程，直到正在执行的其他线程完成。在其他线程完成后，`Join()`方法将返回，然后当前线程将被解除阻塞。'
- en: Creating threads using thread pool
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用线程池创建线程
- en: 'Besides using the thread itself, we can also precreate some threads using the
    `System.Threading.ThreadPool` class. We use this class if we need to work with
    threads from the thread pool. When using thread pool, you are more likely to use
    only the `QueueUserWorkItem()` method. This method will add an execution request
    to the thread pool queue. If any threads are available in the thread pool, the
    request will execute right away. Let''s take a look at the following code in order
    to demonstrate the use of thread pool, which we can find in the `UsingThreadPool.csproj`
    project:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用线程本身，我们还可以使用`System.Threading.ThreadPool`类预先创建一些线程。如果需要从线程池中使用线程，我们可以使用这个类。在使用线程池时，您更有可能只使用`QueueUserWorkItem()`方法。该方法将向线程池队列中添加执行请求。如果线程池中有可用线程，请求将立即执行。让我们看一下以下代码，以演示线程池的使用，可以在`UsingThreadPool.csproj`项目中找到：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the thread pool, we can invoke the `QueueUserWorkItem()` method to put a
    new work item in a queue, which is managed by the thread pool when we need to
    run the long running process instead of creating a new thread. There are three
    possibilities of how the work is treated when we send it to thread pool; they
    are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在线程池中，我们可以调用`QueueUserWorkItem()`方法将新的工作项放入队列中，当我们需要运行长时间运行的进程而不是创建新线程时，线程池会管理该队列。当我们将工作发送到线程池时，有三种可能性来处理工作；它们如下：
- en: The thread has one or more available threads idle in the thread pool so that
    the work can be handled by the idle thread and run immediately.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程池中有一个或多个可用线程在空闲，因此工作可以由空闲线程处理并立即运行。
- en: No threads are available, but the `MaxThreads` property has not been reached
    yet so the thread pool will create a new thread, assign the work, and run the
    work immediately.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有可用的线程，但`MaxThreads`属性尚未达到，因此线程池将创建一个新线程，分配工作，并立即运行工作。
- en: There is no available thread in the thread pool and the total number of threads
    in the thread pool has reached the `MaxThreads` . In this situation, the work
    item will wait in the queue for the first available thread.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程池中没有可用线程，并且线程池中的线程总数已达到`MaxThreads`。在这种情况下，工作项将在队列中等待第一个可用线程。
- en: 'Now, let''s run the `ThreadPoolProcess()` method, and we will get the following
    output on the console:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行`ThreadPoolProcess()`方法，我们将在控制台上得到以下输出：
- en: '![Creating threads using thread pool](img/Image00074.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用线程池创建线程](img/Image00074.jpg)'
- en: As we can see in the preceding screenshot, we get the same result with the similar
    process time we get when we apply the new thread that we discussed in the previous
    section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，当我们应用前面部分讨论的新线程时，我们得到了相似的处理时间相同的结果。
- en: The asynchronous programming model pattern
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程模型模式
- en: The **asynchronous programming model** ( **APM** ) is an asynchronous operation
    that uses the `IAsyncResult` interface as its design pattern. It's also called
    the `IAsyncResult` pattern. For this purpose, the framework has provided the method
    named `BeginXx` and `EndXx` , in which `Xx` is the operation name, for instance,
    `BeginRead` and `EndRead` provided by the `FileStream` class to read bytes from
    a file asynchronously.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步编程模型**（**APM**）是一种使用`IAsyncResult`接口作为设计模式的异步操作。它也被称为`IAsyncResult`模式。为此，框架提供了名为`BeginXx`和`EndXx`的方法，其中`Xx`是操作名称，例如，`FileStream`类提供的`BeginRead`和`EndRead`用于异步从文件中读取字节。'
- en: 'The difference in the synchronous `Read()` method with `BeginRead()` and `EndRead()`
    can be recognized from the method''s declaration, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 同步的`Read()`方法与`BeginRead()`和`EndRead()`的区别可以从方法的声明中识别，如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, in the synchronous `Read()` method, we need three parameters;
    they are `array` , `offset` , and `numBytes` . In the `BeginRead()` method, there
    are two more parameter additions; they are `userCallback` , the method that will
    be called when the asynchronous read operation is completed, and `stateObject`
    , an object provided by the user that distinguishes the asynchronous read request
    from other requests.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在同步的`Read()`方法中，我们需要三个参数；它们是`array`，`offset`和`numBytes`。在`BeginRead()`方法中，还有两个参数添加；它们是`userCallback`，即在异步读取操作完成时将被调用的方法，以及`stateObject`，用户提供的用于区分异步读取请求和其他请求的对象。
- en: Using the synchronous Read() method
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用同步的Read()方法
- en: 'Now, let''s take a look at the following code, which we can find in the `APM.csproj`
    project, in order to distinguish the asynchronous `BeginRead()` method from the
    synchronous `Read()` method in a clearer way:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下以下代码，在`APM.csproj`项目中可以找到，以便更清楚地区分异步的`BeginRead()`方法和同步的`Read()`方法：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code will synchronously read the `LoremIpsum.txt` file (included
    in the `APM.csproj` project), which means that the reading process has to be completed
    before executing the next process. If we run the preceding `ReadFile()` method,
    we will get the following output on the console:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将同步读取`LoremIpsum.txt`文件（包含在`APM.csproj`项目中），这意味着在执行下一个进程之前，读取过程必须完成。如果我们运行上述的`ReadFile()`方法，我们将在控制台上得到以下输出：
- en: '![Using the synchronous Read() method](img/Image00075.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![使用同步的Read()方法](img/Image00075.jpg)'
- en: Using the BeginRead() and EndRead() methods
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用BeginRead()和EndRead()方法
- en: 'Now, let''s compare the synchronous reading process using the `Read()` method
    with the asynchronous reading process using the `BeginRead()` and `EndRead()`
    methods from the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们比较使用`Read()`方法进行同步读取过程与使用`BeginRead()`和`EndRead()`方法进行异步读取过程的以下代码：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we can see, we have two methods named `ReadAsyncFile()` and `OnReadComplete()`
    . The `ReadAsyncFile()` method will read the `LoremIpsum.txt` file asynchronously
    and then invoke the `OnReadComplete()` method just after finishing reading the
    file. We have additional code to make sure that the asynchronous operation runs
    properly using the following `do-while` looping code snippet:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们有两个名为`ReadAsyncFile()`和`OnReadComplete()`的方法。`ReadAsyncFile()`方法将异步读取`LoremIpsum.txt`文件，然后在完成文件读取后立即调用`OnReadComplete()`方法。我们有额外的代码来确保使用以下`do-while`循环代码片段正确运行异步操作：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding `do-while` loop will iterate until the asynchronous operation
    is completed, as indicated in the `IsComplete` property of `IAsyncResult` . The
    asynchronous operation is started when the `BeginRead()` method is invoked, as
    shown in the following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`do-while`循环将迭代，直到异步操作完成，如`IAsyncResult`的`IsComplete`属性所示。当调用`BeginRead()`方法时，异步操作开始，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After that, it will continue with the next process while it reads the file.
    The `OnReadComplete()` method will be invoked when the reading process is finished,
    and since the implementation of the `OnReadComplete()` method set the `IsFinish`
    variable to true, it will stop our `do-while` looping.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，它将在读取文件的同时继续下一个过程。当读取过程完成时，将调用`OnReadComplete()`方法，由于`OnReadComplete()`方法的实现将`IsFinish`变量设置为true，它将停止我们的`do-while`循环。
- en: 'The output we will get by running the `ReadAsyncFile()` method is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`ReadAsyncFile()`方法，我们将得到以下输出：
- en: '![Using the BeginRead() and EndRead() methods](img/Image00076.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![使用BeginRead()和EndRead()方法](img/Image00076.jpg)'
- en: From the screenshot of the preceding output, we can see that the iteration of
    the `do-while` loop is successfully executed when the reading process is run as
    well. The reading process is finished in the 64th iteration of the `do-while`
    loop.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述输出的截图中，我们可以看到在运行读取过程时，`do-while`循环的迭代成功执行。读取过程在`do-while`循环的第64次迭代中完成。
- en: Adding LINQ to the BeginRead() method invocation
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在BeginRead()方法调用中添加LINQ
- en: 'We can also use LINQ to define the `OnReadComplete()` method so that we can
    replace that method using the anonymous method, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用LINQ来定义`OnReadComplete()`方法，以便我们可以使用匿名方法替换该方法，如下所示：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see, we replace the invocation of the `BeginRead()` method with the
    following code snippet:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们用以下代码片段替换了对`BeginRead()`方法的调用：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: From the preceding code, we can see that we don't have the `OnReadComplete()`
    method anymore since it has been represented by the anonymous method. We remove
    the `FileStream` instance in the callback because the anonymous method in lambda
    will access it using the closure. And if we invoke the `ReadAsyncFileAnonymousMethod()`
    method, we will get the exact same output as the `ReadAsyncFile()` method except
    the iteration count, since it depends on the CPU speed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，我们可以看到我们不再有`OnReadComplete()`方法，因为它已被匿名方法代替。我们在回调中删除了`FileStream`实例，因为lambda中的匿名方法将使用闭包访问它。如果我们调用`ReadAsyncFileAnonymousMethod()`方法，我们将得到与`ReadAsyncFile()`方法完全相同的输出，除了迭代次数，因为它取决于CPU速度。
- en: 'Besides the `IsCompleted` property, which is used to fetch the value that indicates
    whether the asynchronous operation is complete, there are three more properties
    we can use when dealing with `IAsyncResult` ; they are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`IsCompleted`属性用于获取指示异步操作是否完成的值外，处理`IAsyncResult`时还有三个属性可用，它们如下：
- en: '`AsyncState` : This is used to retrieve an object defined by the user that
    qualifies or contains information about an asynchronous operation'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AsyncState`：用于检索由用户定义的对象，该对象限定或包含有关异步操作的信息'
- en: '`AsyncWaitHandle` : This is used to retrieve `WaitHandle` (an object from the
    operating system that waits for exclusive access to shared resources), which indicates
    the completeness of the asynchronous operation'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AsyncWaitHandle`：用于检索`WaitHandle`（来自操作系统的等待对共享资源的独占访问的对象），指示异步操作的完成情况'
- en: '`CompletedSynchronously` : This is used to retrieve a value that indicates
    whether the asynchronous operation completed synchronously'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CompletedSynchronously`：用于检索指示异步操作是否同步完成的值'
- en: Unfortunately, there are several shortages when applying APM, such as the inability
    to do a cancelation. This means that we cannot cancel the asynchronous operator
    because from the invocation of `BeginRead` until the callback is triggered, there
    is no way to cancel the background process. If `LoremIpsum.txt` is a gigabyte
    file, we have to wait until the asynchronous operation is finished instead of
    canceling the operation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，应用APM时存在一些缺点，例如无法取消操作。这意味着我们无法取消异步操作，因为从调用`BeginRead`到触发回调时，没有办法取消后台进程。如果`LoremIpsum.txt`是一个千兆字节的文件，我们必须等待异步操作完成，而不能取消操作。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The APM pattern is no longer recommended in a new development due to its obsolete
    technology.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其过时的技术，不再建议在新开发中使用APM模式。
- en: The task-based asynchronous pattern
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于任务的异步模式
- en: The **task-based asynchronous pattern** ( **TAP** ) is a pattern that's used
    to represent arbitrary asynchronous operations. The concept of this pattern is
    to represent asynchronous operations in a method and combine the status of the
    operation and the API that is used to interact with these operators for them to
    become a single object. The objects are the `Task` and `Task<TResult>` types in
    the `System.Threading.Tasks` namespace.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 基于任务的异步模式（TAP）是一种用于表示任意异步操作的模式。这种模式的概念是在一个方法中表示异步操作，并结合操作的状态和用于与这些操作交互的API，使它们成为一个单一对象。这些对象是`System.Threading.Tasks`命名空间中的`Task`和`Task<TResult>`类型。
- en: Introducing the Task and Task<TResult> classes
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Task和Task<TResult>类
- en: The `Task` and `Task<TResult>` classes were announced in .NET Framework 4.0
    in order to represent an asynchronous operation. It uses threads that are stored
    in the thread pool but offers the flexibility of how the task is created. We use
    the `Task` class when we need to run a method as a task but don't need the return
    value; otherwise, we use the `Task<TResult>` class when we need to get the return
    value.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`.NET Framework 4.0`中宣布了`Task`和`Task<TResult>`类，以表示异步操作。它使用存储在线程池中的线程，但提供了任务创建的灵活性。当我们需要将方法作为任务运行但不需要返回值时，我们使用`Task`类；否则，当我们需要获取返回值时，我们使用`Task<TResult>`类。'
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can find a complete reference, including methods and properties, inside `Task`
    and `Task<TResult>` on the MSDN site at [https://msdn.microsoft.com/en-us/library/dd321424(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/dd321424(v=vs.110).aspx)
    .
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在MSDN网站上找到`Task`和`Task<TResult>`的完整参考，包括方法和属性，网址为[https://msdn.microsoft.com/en-us/library/dd321424(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/dd321424(v=vs.110).aspx)。
- en: Applying a simple TAP model
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用简单的TAP模型
- en: 'Let''s start our discussion on TAP by creating the following code, which we
    can find in the `TAP.csproj` project, and use it to read a file asynchronously:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建以下代码来开始讨论TAP，我们可以在`TAP.csproj`项目中找到它，并使用它来异步读取文件：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see in the preceding code, the `ReadAsync()` method inside the `FileStream`
    class will return `Task<int>` , which in this case will indicate the number of
    bytes that have been read from the file. After invoking the `ReadAsync()` method,
    we invoke the `ContinueWith()` extension method using method chaining, as discussed
    in [Chapter 1](text00016.html#ch01 "Chapter 1. Tasting Functional Style in C#")
    , *Tasting Functional Type in C#* . It allows us to specify `Action<Task<T>>`
    , which will be run after the asynchronous operation is completed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如上述代码所示，`FileStream`类中的`ReadAsync()`方法将返回`Task<int>`，在这种情况下，它将指示从文件中读取的字节数。在调用`ReadAsync()`方法后，我们使用方法链接调用`ContinueWith()`扩展方法，如[第1章](text00016.html#ch01
    "第1章。在C#中品尝函数式风格")中讨论的，*在C#中品尝函数式类型*。它允许我们指定`Action<Task<T>>`，该操作将在异步操作完成后运行。
- en: 'By invoking the `ContinueWith()` method after the task is completed, the delegate
    will be run in a synchronous operation immediately. And if we run the preceding
    `ReadFileTask()` method, we get the following output on the console:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在任务完成后调用`ContinueWith()`方法，委托将立即以同步操作运行。如果我们运行前面的`ReadFileTask()`方法，我们将在控制台上得到以下输出：
- en: '![Applying a simple TAP model](img/Image00077.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![应用简单的TAP模型](img/Image00077.jpg)'
- en: Using the WhenAll() extension method
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用WhenAll()扩展方法
- en: 'We successfully applied a simple TAP in the previous section. Now, we will
    continue by asynchronously reading two files and then processing the other operation
    only when both the reading operations have been completed. Let''s take a look
    at the following code, which will demonstrate our need:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的部分成功应用了简单的TAP。现在，我们将继续通过异步读取两个文件，然后仅在两个读取操作都完成后处理其他操作。让我们看一下以下代码，它将演示我们的需求：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we can see, we use the `Task.WhenAll()` method to wrap the two tasks that
    are passed in as parameters into a larger asynchronous operation. It then returns
    a task that represents the combination of these two asynchronous operations. We
    don't need to wait for the completeness of both files' reading operations but
    it adds a continuation for when these two files have been read successfully.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`Task.WhenAll()`方法将作为参数传递的两个任务包装成一个更大的异步操作。然后返回一个代表这两个异步操作组合的任务。我们不需要等待两个文件的读取操作完成，但它会在这两个文件成功读取后添加一个继续操作。
- en: 'If we run the preceding `ReadTwoFileTask()` method, we get the following output
    on the console:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的`ReadTwoFileTask()`方法，我们将在控制台上得到以下输出：
- en: '![Using the WhenAll() extension method](img/Image00078.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用WhenAll()扩展方法](img/Image00078.jpg)'
- en: 'As we have discussed earlier that the drawback of APM pattern is that we cannot
    cancel the background process, now let''s try to cancel the list of tasks in TAP
    by refactoring the preceding code we have. The complete code will become like
    the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论过的，APM模式的缺点是我们无法取消后台进程，现在让我们尝试通过重构我们之前的代码来取消TAP中的任务列表。完整的代码将变成以下样子：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As we can see from the preceding code, we add `CancellationTokenSource` and
    `CancellationToken` to inform the cancellation process. We then pass token to
    the `Task.WhenAll()` function. After the tasks have run, we can cancel the tasks
    using the `source.Cancel()` method.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如上述代码所示，我们添加了`CancellationTokenSource`和`CancellationToken`来通知取消过程。然后我们将令牌传递给`Task.WhenAll()`函数。任务运行后，我们可以使用`source.Cancel()`方法取消任务。
- en: 'The following is the output we will get on the console if we run the preceding
    code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述代码，我们将在控制台上得到以下输出：
- en: '![Using the WhenAll() extension method](img/Image00079.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用WhenAll()扩展方法](img/Image00079.jpg)'
- en: The preceding output tells us that the tasks have been canceled successfully
    in the 11th counter because the counter has been higher than 10.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出告诉我们，任务在第11个计数器中成功取消，因为计数器已经超过了10。
- en: Wrapping an APM into a TAP model
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将APM包装成TAP模型
- en: 'If the framework doesn''t offer a TAP model for asynchronous operation, we
    can, if we want, wrap APM `BeginXx` and `EndXx` methods into the TAP model using
    the `Task.FromAsync` method. Let''s take a look at the following code in order
    to demonstrate the wrapping process:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果框架没有为异步操作提供TAP模型，我们可以将APM的`BeginXx`和`EndXx`方法包装成TAP模型，使用`Task.FromAsync`方法。让我们看一下以下代码，以演示包装过程：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'From the preceding code, we can see that we use the `BeginRead()` and `EndRead()`
    methods, which are actually APM patterns, but we use them in the TAP model, as
    shown in the following code snippet:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，我们可以看到我们使用了`BeginRead()`和`EndRead()`方法，实际上是APM模式，但我们在TAP模型中使用它们，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And if we run the preceding `WrapApmIntoTap()` method, we will get the following
    output on the console:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的`WrapApmIntoTap()`方法，我们将在控制台上得到以下输出：
- en: '![Wrapping an APM into a TAP model](img/Image00080.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: 将APM包装成TAP模型
- en: As we can see in the screenshot of the output result, we have successfully read
    the `LoremIpsum.txt` file using the `BeginRead()` and `EndRead()` methods wrapped
    into the TAP model.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在输出结果的截图中所看到的，我们成功地使用了包装到TAP模型中的`BeginRead()`和`EndRead()`方法来读取`LoremIpsum.txt`文件。
- en: Asynchronous programming with the async and await keywords
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`async`和`await`关键字进行异步编程
- en: The `async` and `await` keywords were announced in C# 5.0 and became the latest
    and greatest things in C# asynchronous programming. Developed from the TAP pattern,
    C# integrates these two keywords into the language itself so that it makes it
    simple and easy to read. Using these two keywords, the `Task` and `Task<TResult>`
    classes still become the core building blocks of asynchronous programming. We
    will still build a new `Task` or `Task<TResult>` data type using the `Task.Run()`
    method, as discussed in the previous section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`和`await`关键字是在C# 5.0中宣布的，并成为C#异步编程中的最新和最伟大的东西。从TAP模式发展而来，C#将这两个关键字整合到语言本身中，使其变得简单易读。使用这两个关键字，`Task`和`Task<TResult>`类仍然成为异步编程的核心构建块。我们仍然会使用`Task.Run()`方法构建一个新的`Task`或`Task<TResult>`数据类型，就像在前一节中讨论的那样。'
- en: 'Now let''s take a look at the following code, which demonstrates the `async`
    and `await` keywords, which we can find in the `AsyncAwait.csproj` project:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下下面的代码，它演示了`async`和`await`关键字，我们可以在`AsyncAwait.csproj`项目中找到：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As we can see in the preceding code, we refactor the code from our previous
    topic by adding the `await` keyword when we read the file stream, as shown in
    the following code snippet:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上面的代码中所看到的，我们通过在读取文件流时添加`await`关键字来重构了我们上一个主题的代码，如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Also, we use the `async` keyword in front of the method name, as shown in the
    following code snippet:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在方法名前面使用`async`关键字，如下面的代码片段所示：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'From the preceding two code snippets, we can see that the `await` keyword can
    only be called inside a method that is marked with the `async` keyword. And when
    `await` is reached--in this case, it is in await `fs.ReadAsync()` --the thread
    that called the method will jump out of the method and continue on its way to
    something else. The asynchronous code then takes place on a separate thread (like
    how we use the `Task.Run()` method). However, everything after await is scheduled
    to be executed when the task is finished. And if we run the preceding `AsyncAwaitReadFile()`
    method, we will get the following output on the console:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从前两个代码片段中，我们可以看到`await`关键字只能在标记有`async`关键字的方法内部调用。当达到`await`时--在这种情况下是在`await
    fs.ReadAsync()`中--调用方法的线程将跳出方法并继续执行其他操作。然后异步代码将在一个单独的线程上执行（就像我们使用`Task.Run()`方法一样）。然而，`await`之后的所有内容都将在任务完成时被调度执行。如果我们运行上述的`AsyncAwaitReadFile()`方法，将在控制台上得到以下输出：
- en: '![Asynchronous programming with the async and await keywords](img/Image00081.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: 使用`async`和`await`关键字进行异步编程
- en: As with the TAP model, we obtain the asynchronous result here as well.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与TAP模型一样，我们在这里也获得了异步结果。
- en: Asynchronous functions in functional programming
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程中的异步函数
- en: 'Now, using the chaining method, we are going to use the `async` and `await`
    keywords in functional programming. Suppose we have three tasks, as shown in the
    following code snippet, and we need to chain them together:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用链接方法，我们将在函数式编程中使用`async`和`await`关键字。假设我们有三个任务，如下面的代码片段所示，并且我们需要将它们链接在一起：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For that purpose, we have to create a new extension method for `Task<T>` named
    `MapAsync` , with the following implementation:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们必须为`Task<T>`创建一个名为`MapAsync`的新扩展方法，具体实现如下：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `MapAsync()` method allows us to define the method as `async` , accept
    the task returned from the `async` method, and `await` the call to the delegate.
    The following is the complete code we use to chain the three tasks that we can
    find in the `AsyncChain.csproj` project:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapAsync()`方法允许我们将方法定义为`async`，接受从`async`方法返回的任务，并`await`委托的调用。以下是我们用于链接`AsyncChain.csproj`项目中的三个任务的完整代码：'
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we run the preceding `AsyncChain()` method, we will get the following output
    on the console:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述的`AsyncChain()`方法，将在控制台上得到以下输出：
- en: '![Asynchronous functions in functional programming](img/Image00082.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: 函数式编程中的异步函数
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Asynchronous programming is a way that we can use to develop a responsive application,
    and we successfully applied `Thread` and `ThreadPool` to achieve this goal. We
    can create a new thread to run the work, or we can reuse the available threads
    in thread pool.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程是一种我们可以用来开发响应式应用程序的方式，我们成功地应用了`Thread`和`ThreadPool`来实现这一目标。我们可以创建一个新线程来运行工作，或者我们可以重用线程池中的可用线程。
- en: We also learned about the asynchronous programming model pattern, which is an
    asynchronous operation that uses the `IAsyncResult` interface as its design pattern.
    In this pattern, we used the two methods that are preceded by `Begin` and `End`
    ; for instance, in our discussion, these were the `BeginRead()` and `EndRead()`
    methods. The `BeginRead()` method started the asynchronous operation when invoked,
    and then the `EndRead()` method stopped the operation so that we could fetch the
    return value of the operation.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了异步编程模型模式，这是一种使用`IAsyncResult`接口作为设计模式的异步操作。在这种模式中，我们使用了以`Begin`和`End`开头的两种方法；例如，在我们的讨论中，这些方法是`BeginRead()`和`EndRead()`。`BeginRead()`方法在调用时启动了异步操作，然后`EndRead()`方法停止了操作，以便我们可以获取操作的返回值。
- en: Besides the asynchronous programming model pattern, .NET Framework also has
    a task-based asynchronous pattern to run the asynchronous operation. The concept
    of this pattern is to represent asynchronous operations in a method and combine
    the status of the operation and the API that is used to interact with these operators
    to become a single object. The objects we used in this pattern are `Task` and
    `Task<TResult>` , which we can find in the `System.Threading.Tasks` namespace.
    In this pattern, we can also cancel the active tasks running as background processes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除了异步编程模型模式，.NET Framework还有基于任务的异步模式来运行异步操作。这种模式的概念是在一个方法中表示异步操作，并将操作的状态和用于与这些操作交互的API结合成一个单一对象。我们在这种模式中使用的对象是`Task`和`Task<TResult>`，可以在`System.Threading.Tasks`命名空间中找到。在这种模式中，我们还可以取消作为后台进程运行的活动任务。
- en: Then, C# announced `async` and `await` to complete the asynchronous technique,
    which we can choose. It was developed from the task-based asynchronous pattern,
    where the `Task` and `Task<TResult>` classes became the core building blocks of
    asynchronous programming. The last thing we did in this chapter is that we tried
    to chain the three tasks using our extension method based on the use of the `async`
    and `await` keywords.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，C#宣布了`async`和`await`来完成异步技术，我们可以选择使用。它是从基于任务的异步模式发展而来的，其中`Task`和`Task<TResult>`类成为了异步编程的核心构建模块。本章我们做的最后一件事是尝试使用基于`async`和`await`关键字的扩展方法来链接这三个任务。
- en: In the next chapter, we will discuss the recursion that is useful in functional
    programming in order to simplify the code. We will learn about the usage of recursion
    and how to reduce the lines of code based on the recursion.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论在函数式编程中有用的递归，以简化代码。我们将学习递归的用法，以及如何基于递归减少代码行数。
