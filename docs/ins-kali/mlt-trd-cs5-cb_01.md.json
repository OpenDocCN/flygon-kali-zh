["```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void PrintNumbers()\n    {\n      Console.WriteLine(\"Starting...\");\n      for (int i = 1; i < 10; i++)\n      {\n        Console.WriteLine(i);\n      }\n    }\n    ```", "```cs\n    Thread t = new Thread(PrintNumbers);\n    t.Start();\n    PrintNumbers();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void PrintNumbers()\n    {\n      Console.WriteLine(\"Starting...\");\n      for (int i = 1; i < 10; i++)\n      {\n        Console.WriteLine(i);\n      }\n    }\n    static void PrintNumbersWithDelay()\n    {\n      Console.WriteLine(\"Starting...\");\n      for (int i = 1; i < 10; i++)\n      {\n        Thread.Sleep(TimeSpan.FromSeconds(2));\n        Console.WriteLine(i);\n      }\n    }\n    ```", "```cs\n    Thread t = new Thread(PrintNumbersWithDelay);\n    t.Start();\n    PrintNumbers();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void PrintNumbersWithDelay()\n    {\n      Console.WriteLine(\"Starting...\");\n      for (int i = 1; i < 10; i++)\n      {\n        Thread.Sleep(TimeSpan.FromSeconds(2));\n        Console.WriteLine(i);\n      }\n    }\n    ```", "```cs\n    Console.WriteLine(\"Starting...\");\n    Thread t = new Thread(PrintNumbersWithDelay);\n    t.Start();\n    t.Join();\n    Console.WriteLine(\"Thread completed\");\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void PrintNumbersWithDelay()\n    {\n      Console.WriteLine(\"Starting...\");\n      for (int i = 1; i < 10; i++)\n      {\n        Thread.Sleep(TimeSpan.FromSeconds(2));\n        Console.WriteLine(i);\n      }\n    }\n    ```", "```cs\n    Console.WriteLine(\"Starting program...\");\n    Thread t = new Thread(PrintNumbersWithDelay);\n    t.Start();\n    Thread.Sleep(TimeSpan.FromSeconds(6));\n    t.Abort();\n    Console.WriteLine(\"A thread has been aborted\");\n    Thread t = new Thread(PrintNumbers);\n    t.Start();\n    PrintNumbers();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void DoNothing()\n    {\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n    }\n\n    static void PrintNumbersWithStatus()\n    {\n      Console.WriteLine(\"Starting...\");\n      Console.WriteLine(Thread.CurrentThread\n      .ThreadState.ToString());\n      for (int i = 1; i < 10; i++)\n      {\n        Thread.Sleep(TimeSpan.FromSeconds(2));\n        Console.WriteLine(i);\n      }\n    }\n    ```", "```cs\n    Console.WriteLine(\"Starting program...\");\n    Thread t = new Thread(PrintNumbersWithStatus);\n    Thread t2 = new Thread(DoNothing);\n    Console.WriteLine(t.ThreadState.ToString());\n    t2.Start();\n    t.Start();\n    for (int i = 1; i < 30; i++)\n    {\n      Console.WriteLine(t.ThreadState.ToString());\n    }\n    Thread.Sleep(TimeSpan.FromSeconds(6));\n    t.Abort();\n    Console.WriteLine(\"A thread has been aborted\");\n    Console.WriteLine(t.ThreadState.ToString());\n    Console.WriteLine(t2.ThreadState.ToString());\n    ```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Threading;\n    ```", "```cs\n    static void RunThreads()\n    {\n      var sample = new ThreadSample();\n\n      var threadOne = new Thread(sample.CountNumbers);\n      threadOne.Name = \"ThreadOne\";\n      var threadTwo = new Thread(sample.CountNumbers);\n      threadTwo.Name = \"ThreadTwo\";\n\n      threadOne.Priority = ThreadPriority.Highest;\n      threadTwo.Priority = ThreadPriority.Lowest;\n      threadOne.Start();\n      threadTwo.Start();\n\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      sample.Stop();\n    }\n    class ThreadSample\n    {\n      private bool _isStopped = false;\n      public void Stop()\n      {\n        _isStopped = true;\n      }\n\n      public void CountNumbers()\n      {\n        long counter = 0;\n\n        while (!_isStopped)\n        {\n          counter++;\n        }\n\n        Console.WriteLine(\"{0} with {1,11} priority \" +\"has a count = {2,13}\", Thread.CurrentThread.Name, Thread.CurrentThread.Priority,counter.ToString(\"N0\"));\n      }\n    }\n    ```", "```cs\n    Console.WriteLine(\"Current thread priority: {0}\", Thread.CurrentThread.Priority);\n    Console.WriteLine(\"Running on all cores available\");\n    RunThreads();\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    Console.WriteLine(\"Running on a single core\");\n    Process.GetCurrentProcess().ProcessorAffinity = new IntPtr(1);\n    RunThreads();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    class ThreadSample\n    {\n      private readonly int _iterations;\n\n      public ThreadSample(int iterations)\n      {\n        _iterations = iterations;\n      }\n      public void CountNumbers()\n      {\n        for (int i = 0; i < _iterations; i++)\n        {\n          Thread.Sleep(TimeSpan.FromSeconds(0.5));\n          Console.WriteLine(\"{0} prints {1}\", Thread.CurrentThread.Name, i);\n        }\n      }\n    }\n    ```", "```cs\n    var sampleForeground = new ThreadSample(10);\n    var sampleBackground = new ThreadSample(20);\n\n    var threadOne = new Thread(sampleForeground.CountNumbers);\n    threadOne.Name = \"ForegroundThread\";\n    var threadTwo = new Thread(sampleBackground.CountNumbers);\n    threadTwo.Name = \"BackgroundThread\";\n    threadTwo.IsBackground = true;\n\n    threadOne.Start();\n    threadTwo.Start();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void Count(object iterations)\n    {\n      CountNumbers((int)iterations);\n    }\n\n    static void CountNumbers(int iterations)\n    {\n      for (int i = 1; i <= iterations; i++)\n      {\n        Thread.Sleep(TimeSpan.FromSeconds(0.5));\n        Console.WriteLine(\"{0} prints {1}\", Thread.CurrentThread.Name, i);\n      }\n    }\n    static void PrintNumber(int number)\n    {\n      Console.WriteLine(number);\n    }\n\n    class ThreadSample\n    {\n      private readonly int _iterations;\n\n      public ThreadSample(int iterations)\n      {\n        _iterations = iterations;\n      }\n      public void CountNumbers()\n      {\n        for (int i = 1; i <= _iterations; i++)\n        {\n          Thread.Sleep(TimeSpan.FromSeconds(0.5));\n          Console.WriteLine(\"{0} prints {1}\", Thread.CurrentThread.Name, i);\n        }\n      }\n    }\n    ```", "```cs\n    var sample = new ThreadSample(10);\n\n    var threadOne = new Thread(sample.CountNumbers);\n    threadOne.Name = \"ThreadOne\";\n    threadOne.Start();\n    threadOne.Join();\n    Console.WriteLine(\"--------------------------\");\n\n    var threadTwo = new Thread(Count);\n    threadTwo.Name = \"ThreadTwo\";\n    threadTwo.Start(8);\n    threadTwo.Join();\n    Console.WriteLine(\"--------------------------\");\n\n    var threadThree = new Thread(() => CountNumbers(12));\n    threadThree.Name = \"ThreadThree\";\n    threadThree.Start();\n    threadThree.Join();\n    Console.WriteLine(\"--------------------------\");\n\n    int i = 10;\n    var threadFour = new Thread(() => PrintNumber(i));\n    i = 20;\n    var threadFive = new Thread(() => PrintNumber(i));\n    threadFour.Start(); \n    threadFive.Start();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void TestCounter(CounterBase c)\n    {\n      for (int i = 0; i < 100000; i++)\n      {\n        c.Increment();\n        c.Decrement();\n      }\n    }\n\n    class Counter : CounterBase\n    {\n      public int Count { get; private set; }\n      public override void Increment()\n      {\n        Count++;\n      }\n\n      public override void Decrement()\n      {\n        Count--;\n      }\n    }\n\n    class CounterWithLock : CounterBase\n    {\n      private readonly object _syncRoot = new Object();\n\n      public int Count { get; private set; }\n\n      public override void Increment()\n      {\n        lock (_syncRoot)\n        {\n          Count++;\n        }\n      }\n\n      public override void Decrement()\n      {\n        lock (_syncRoot)\n        {\n          Count--;\n        }\n      }\n    }\n\n    abstract class CounterBase\n    {\n      public abstract void Increment();\n      public abstract void Decrement();\n    }\n    ```", "```cs\n    Console.WriteLine(\"Incorrect counter\");\n\n    var c = new Counter();\n\n    var t1 = new Thread(() => TestCounter(c));\n    var t2 = new Thread(() => TestCounter(c));\n    var t3 = new Thread(() => TestCounter(c));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    t1.Join();\n    t2.Join();\n    t3.Join();\n\n    Console.WriteLine(\"Total count: {0}\",c.Count);\n    Console.WriteLine(\"--------------------------\");\n    Console.WriteLine(\"Correct counter\");\n\n    var c1 = new CounterWithLock();\n\n    t1 = new Thread(() => TestCounter(c1));\n    t2 = new Thread(() => TestCounter(c1));\n    t3 = new Thread(() => TestCounter(c1));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    t1.Join();\n    t2.Join();\n    t3.Join();\n    Console.WriteLine(\"Total count: {0}\", c1.Count);\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void LockTooMuch(object lock1, object lock2)\n    {\n      lock (lock1)\n      {\n        Thread.Sleep(1000);\n        lock (lock2);\n      }\n    }\n    ```", "```cs\n    object lock1 = new object();\n    object lock2 = new object();\n\n    new Thread(() => LockTooMuch(lock1, lock2)).Start();\n\n    lock (lock2)\n    {\n      Thread.Sleep(1000);\n      Console.WriteLine(\"Monitor.TryEnter allows not to get stuck, returning false after a specified timeout is elapsed\");\n      if (Monitor.TryEnter(lock1, TimeSpan.FromSeconds(5)))\n      {\n        Console.WriteLine(\"Acquired a protected resource succesfully\");\n      }\n      else\n      {\n        Console.WriteLine(\"Timeout acquiring a resource!\");\n      }\n    }\n    new Thread(() => LockTooMuch(lock1, lock2)).Start();\n\n    Console.WriteLine(\"----------------------------------\");\n    lock (lock2)\n    {\n      Console.WriteLine(\"This will be a deadlock!\");\n      Thread.Sleep(1000);\n      lock (lock1)\n      {\n        Console.WriteLine(\"Acquired a protected resource succesfully\");\n      }\n    }\n    ```", "```cs\nbool acquiredLock = false;\ntry\n{\n  Monitor.Enter(lockObject, ref acquiredLock);\n\n// Code that accesses resources that are protected by the lock.\n\n}\nfinally\n{\n  if (acquiredLock)\n  {\n    Monitor.Exit(lockObject);\n  }\n}\n```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void BadFaultyThread()\n    {\n      Console.WriteLine(\"Starting a faulty thread...\");\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      throw new Exception(\"Boom!\");\n    }\n\n    static void FaultyThread()\n    {\n      try\n      {\n        Console.WriteLine(\"Starting a faulty thread...\");\n        Thread.Sleep(TimeSpan.FromSeconds(1));\n        throw new Exception(\"Boom!\");\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(\"Exception handled: {0}\", ex.Message);\n      }\n    }\n    ```", "```cs\n    var t = new Thread(FaultyThread);\n    t.Start();\n    t.Join();\n\n    try\n    {\n      t = new Thread(BadFaultyThread);\n      t.Start();\n    }\n    catch (Exception ex)\n    {\n      Console.WriteLine(\"We won't get here!\");\n    }\n    ```", "```cs\n<configuration>\n  <runtime>\n    <legacyUnhandledExceptionPolicy enabled=\"1\" />\n  </runtime>\n</configuration>\n```"]