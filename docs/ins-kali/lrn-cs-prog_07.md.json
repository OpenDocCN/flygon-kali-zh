["```cs\npublic class List<T> : ICollection<T>, ICollection\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IEnumerable<T>, IEnumerable, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IList<T>, IList,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IReadOnlyCollection<T>, IReadOnlyList<T> {}\n```", "```cs\nvar numbers = new List<int>();\nvar words = new List<string>();\n```", "```cs\nvar numbers = new List<int> { 1, 2, 3, 5, 7, 11 };\nvar words = new List<string> { \"one\", \"two\" };\n```", "```cs\nvar numbers = new List<int> {1, 2, 3}; // 1 2 3\nnumbers.Add(5);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 3 5\nnumbers.AddRange(new int[] { 7, 11 }); // 1 2 3 5 7 11\nnumbers.Insert(5, 1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 3 5 7 1 11\nnumbers.Insert(5, 1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 3 5 7 1 1 11\nnumbers.InsertRange(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 13 17 19 2 3 5..\n\u00a0\u00a0\u00a0\u00a01, new int[] {13, 17, 19});\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ..7 1 1 11\n```", "```cs\nnumbers.Remove(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 13 17 19\u00a0\u00a02\u00a0\u00a03\u00a0\u00a05\u00a0\u00a07\u00a0\u00a01\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 11\nnumbers.RemoveRange(2, 3);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 13 17\u00a0\u00a05\u00a0\u00a07\u00a0\u00a01\u00a0\u00a01 11\nnumbers.RemoveAll(e => e < 10); // 13 17 11\nnumbers.RemoveAt(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 13 11\nnumbers.Clear();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// empty\n```", "```cs\nvar numbers = new List<int> { 1, 2, 3, 5, 7, 11 };\nvar a = numbers.Find(e => e < 10);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1\nvar b = numbers.FindLast(e => e < 10);\u00a0\u00a0// 7\nvar c = numbers.FindAll(e => e < 10);\u00a0\u00a0\u00a0// 1 2 3 5 7\n```", "```cs\nvar numbers = new List<int> { 1, 1, 2, 3, 5, 8, 11 };\nvar a = numbers.FindIndex(e => e < 10);\u00a0\u00a0\u00a0\u00a0\u00a0// 0\nvar b = numbers.FindLastIndex(e => e < 10); // 5\nvar c = numbers.IndexOf(5);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 4\nvar d = numbers.LastIndexOf(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1\nvar e = numbers.BinarySearch(8);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 5\n```", "```cs\nvar numbers = new List<int> { 1, 5, 3, 11, 8, 1, 2 };\nnumbers.Sort();\u00a0\u00a0\u00a0\u00a0\u00a0// 1 1 2 3 5 8 11\nnumbers.Reverse();\u00a0\u00a0// 11 8 5 3 2 1 1\n```", "```cs\nvar arr = new string[] { \"Ankit\", \"Marius\", \"Raffaele\" };\nStack<string> names = new Stack<string>(arr);\nStack<int> numbers = new Stack<int>();\n```", "```cs\nvar numbers = new Stack<int>(new int[]{ 1, 2, 3 });// 3 2 1\nnumbers.Push(5);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 5 3 2 1\nnumbers.Push(7);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 7 5 3 2 1\nnumbers.Pop();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 5 3 2 1\nvar n = numbers.Peek();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 5 3 2 1\nnumbers.Push(11);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 11 5 3 2 1\nnumbers.Clear();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// empty\n```", "```cs\nvar arr = new string[] { \"Ankit\", \"Marius\", \"Raffaele\" };\nQueue<string> names = new Queue<string>(arr);\nQueue<int> numbers = new Queue<int>();\n```", "```cs\nvar numbers = new Queue<int>(new int[] { 1, 2, 3 });// 1 2 3\nnumbers.Enqueue(5);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 3 5\nnumbers.Enqueue(7);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 3 5 7\nnumbers.Dequeue();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 2 3 5 7\nvar n = numbers.Peek();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 2 3 5 7\nnumbers.Enqueue(11);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 2 3 5 7 11\nnumbers.Clear();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// empty\n```", "```cs\nvar arr = new string[] { \"Ankit\", \"Marius\", \"Raffaele\" };\nvar words = new LinkedList<string>(arr);\nvar numbers = new LinkedList<int>();\n```", "```cs\nvar numbers = new LinkedList<int>();\nvar n2 = numbers.AddFirst(2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 2\nvar n1 = numbers.AddFirst(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2\nvar n7 = numbers.AddLast(7);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 7\nvar n11 = numbers.AddLast(11);\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 7 11\nvar n3 = numbers.AddAfter(n2, 3);\u00a0\u00a0// 1 2 3 7 11\nvar n5 = numbers.AddBefore(n7, 5); // 1 2 3 5 7 11\n```", "```cs\nvar fn1 = numbers.Find(5);\nvar fn2 = numbers.FindLast(5);\nConsole.WriteLine(fn1 == fn2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// True\nConsole.WriteLine(numbers.Contains(3));\u00a0\u00a0// True\nConsole.WriteLine(numbers.Contains(13)); // False\n```", "```cs\nnumbers.RemoveFirst(); // 2 3 5 7 11\nnumbers.RemoveLast();\u00a0\u00a0// 2 3 5 7\nnumbers.Remove(3);\u00a0\u00a0\u00a0\u00a0\u00a0// 2 5 7\nnumbers.Remove(n5);\u00a0\u00a0\u00a0\u00a0// 2 7\nnumbers.Clear();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// empty\n```", "```cs\nvar languages = new Dictionary<int, string>(); \n```", "```cs\nvar languages = new Dictionary<int, string>()\n{\n\u00a0\u00a0\u00a0\u00a0{1, \"C#\"}, \n\u00a0\u00a0\u00a0\u00a0{2, \"Java\"}, \n\u00a0\u00a0\u00a0\u00a0{3, \"Python\"}, \n\u00a0\u00a0\u00a0\u00a0{4, \"C++\"}\n};\n```", "```cs\nvar languages = new Dictionary<int, string>()\n{\n\u00a0\u00a0\u00a0\u00a0[1] = \"C#\",\n\u00a0\u00a0\u00a0\u00a0[2] = \"Java\",\n\u00a0\u00a0\u00a0\u00a0[3] = \"Python\",\n\u00a0\u00a0\u00a0\u00a0[4] = \"C++\"\n};\n```", "```cs\nvar languages = new Dictionary<int, string>()\n{\n\u00a0\u00a0\u00a0\u00a0{1, \"C#\"},\n\u00a0\u00a0\u00a0\u00a0{2, \"Java\"},\n\u00a0\u00a0\u00a0\u00a0{3, \"Python\"},\n\u00a0\u00a0\u00a0\u00a0{4, \"C++\"}\n};\nlanguages.Add(5, \"JavaScript\");\nlanguages.TryAdd(5, \"JavaScript\");\nlanguages[6] = \"F#\";\nlanguages[5] = \"TypeScript\";\n```", "```cs\nConsole.WriteLine($\"Has 5: {languages.ContainsKey(5)}\");\nConsole.WriteLine($\"Has C#: {languages.ContainsValue(\"C#\")}\");\nif (languages.TryGetValue(1, out string lang))\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(lang);\nelse\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Not found!\");\n```", "```cs\nforeach(var kvp in languages)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"[{kvp.Key}] = {kvp.Value}\");\n}\n```", "```cs\nlanguages.Remove(5);\nlanguages.Clear();\n```", "```cs\nHashSet<int> numbers = new HashSet<int>();\n```", "```cs\nHashSet<int> numbers = new HashSet<int>()\n{\n\u00a0\u00a0\u00a0\u00a01, 1, 2, 3, 5, 8, 11\n};\n```", "```cs\nHashSet<int> numbers = new HashSet<int>() { 11, 3, 8 };\nnumbers.Add(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 11 3 8 1\nnumbers.Add(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 11 3 8 1\nnumbers.Add(2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 11 3 8 1 2\nnumbers.Add(5);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 11 3 8 1 2 5\nConsole.WriteLine(numbers.Contains(1));\nConsole.WriteLine(numbers.Contains(7));\nnumbers.Remove(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 11 3 8 2 5\nnumbers.RemoveWhere(n => n % 2 == 0); // 11 3 5\nnumbers.Clear();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// empty\n```", "```cs\nHashSet<int> a = new HashSet<int>() { 1, 2, 5, 6, 9};\nHashSet<int> b = new HashSet<int>() { 1, 2, 3, 4};\nvar s1 = new HashSet<int>(a);\ns1.IntersectWith(b);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2\nvar s2 = new HashSet<int>(a);\ns2.UnionWith(b);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1 2 5 6 9 3 4\nvar s3 = new HashSet<int>(a);\ns3.ExceptWith(b);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 5 6 9\nvar s4 = new HashSet<int>(a);\ns4.SymmetricExceptWith(b);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 4 3 5 6 9\n```", "```cs\nHashSet<int> a = new HashSet<int>() { 1, 2, 5, 6, 9 };\nHashSet<int> b = new HashSet<int>() { 1, 2, 3, 4 };\nHashSet<int> c = new HashSet<int>() { 2, 5 };\nConsole.WriteLine(a.Overlaps(b));\u00a0\u00a0\u00a0\u00a0\u00a0// True\nConsole.WriteLine(a.IsSupersetOf(c)); // True\nConsole.WriteLine(c.IsSubsetOf(a));\u00a0\u00a0\u00a0// True\n```", "```cs\nusing var bc = new BlockingCollection<int>();\n```", "```cs\nusing var producer = Task.Run(() => {\n\u00a0\u00a0\u00a0int a = 1, b = 1;\n\u00a0\u00a0\u00a0bc.Add(a);\n\u00a0\u00a0\u00a0bc.Add(b);\n\u00a0\u00a0\u00a0for(int i = 0; i < 10; ++i)\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int c = a + b;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bc.Add(c);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = b;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b = c;\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0bc.CompleteAdding();\n});\n```", "```cs\nusing var consumer1 = Task.Run(() => { \n\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (true)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"[1] {bc.Take()}\");\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0catch (InvalidOperationException)\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"[1] collection completed\");\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0Console.WriteLine(\"[1] work done\");\n});\n```", "```cs\nusing var consumer2 = Task.Run(() => {\n\u00a0\u00a0\u00a0foreach(var n in bc.GetConsumingEnumerable())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"[2] {n}\");\n\u00a0\u00a0\u00a0Console.WriteLine(\"[2] work done\");\n});\n```", "```cs\nawait Task.WhenAll(producer, consumer1, consumer2); \n```"]