- en: '*Chapter 9*: Introducing Helm for Kubernetes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：介绍Helm用于Kubernetes'
- en: In the previous chapter, we learned how to install and use Kustomize. In this
    chapter, let's learn about Helm ([https://helm.sh](https://helm.sh)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何安装和使用Kustomize。在本章中，让我们了解Helm（[https://helm.sh](https://helm.sh)）。
- en: Helm is the de facto Kubernetes package manager, and one of the best and easiest
    ways to install any kind of complex application on Kubernetes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是事实上的Kubernetes包管理器，也是在Kubernetes上安装任何复杂应用程序的最佳和最简单的方法之一。
- en: Helm is not part of `kubectl`, nor does it have a `kubectl` plugin, but it plays
    a big role in the Kubernetes space and is a must-know tool.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Helm不是`kubectl`的一部分，也没有`kubectl`插件，但它在Kubernetes领域中扮演着重要角色，是一个必须了解的工具。
- en: In this chapter, we are going to learn about Helm v3, in particular, how to
    install applications, upgrade and roll back application releases, create and lint
    Helm charts, and extend Helm with plugins.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Helm v3，特别是如何安装应用程序、升级和回滚应用程序发布、创建和检查Helm图表，并使用插件扩展Helm。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We are going to use Helm v3 as it was the latest version of Helm at the time
    of writing.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Helm v3，因为它是写作时的最新版本。
- en: 'We''re going to cover the following main topics in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Introduction to Helm
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm简介
- en: Installing applications using Helm charts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm图表安装应用程序
- en: Upgrading Helm releases
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级Helm发布
- en: Rolling back to a previous Helm release
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚到先前的Helm发布
- en: Using Helm's template command
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm的模板命令
- en: Creating a Helm chart
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Helm图表
- en: Using Helm's linting feature
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm的检查功能
- en: Extending Helm with plugins
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件扩展Helm
- en: Introduction to Helm
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm简介
- en: Helm is a Kubernetes package manager that allows developers and users an easy
    way to package, configure, share, and deploy Kubernetes applications onto Kubernetes
    clusters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是一个Kubernetes包管理器，允许开发人员和用户轻松打包、配置、共享和部署Kubernetes应用程序到Kubernetes集群上。
- en: You can think of Helm as the same as the Homebrew/APT/Yum package managers,
    but for Kubernetes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将Helm视为Homebrew/APT/Yum包管理器，但用于Kubernetes。
- en: Helm v3 is based on a client-only architecture. It connects to the Kubernetes
    API the same way as `kubectl` does, by using a `kubeconfig` file containing the
    Kubernetes cluster connection settings. So where `kubectl` works, the Helm CLI
    will work too, using the same `kubectl` capabilities and permissions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Helm v3基于仅客户端架构。它与Kubernetes API的连接方式与`kubectl`相同，使用包含Kubernetes集群连接设置的`kubeconfig`文件。因此，在`kubectl`可用的地方，Helm
    CLI也可以使用，使用相同的`kubectl`功能和权限。
- en: 'To better understand Helm, you should get familiar with the following concepts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Helm，您应该熟悉以下概念：
- en: '**The Helm CLI**: A command-line tool that interacts with the Kubernetes API
    and does various functions, such as installing, upgrading, and deleting Helm releases.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm CLI：与Kubernetes API交互并执行各种功能的命令行工具，如安装、升级和删除Helm发布。
- en: '**A chart**: This is a collection of template files that describe Kubernetes
    resources.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表：这是描述Kubernetes资源的模板文件集合。
- en: '**Chart templating**: Helm chart templating language used in the charts.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表模板化：图表中使用的Helm图表模板语言。
- en: '**A repository**: A Helm repository is a location where packaged charts are
    stored and shared.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库：Helm存储库是存储和共享打包图表的位置。
- en: '**A release**: A specific instance of a chart deployed to a Kubernetes cluster.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布：部署到Kubernetes集群的图表的特定实例。
- en: Let's take a look at each one of them in detail in the following sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中详细了解每一个。
- en: The Helm CLI
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Helm CLI
- en: 'The Helm CLI can be installed on different operating systems using the following
    commands:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Helm CLI可以使用以下命令在不同操作系统上安装：
- en: 'Installing on macOS is done as follows:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上的安装如下进行：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Installing on Windows is done with the following command:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上安装使用以下命令进行：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Installing on Linux is done as follows:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上安装如下进行：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can get all available Helm CLI commands with `helm –h`. Let''s list the
    most used ones, along with their descriptions:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`helm –h`获取所有可用的Helm CLI命令。让我们列出最常用的命令以及它们的描述：
- en: '`helm repo add`: Adds a Helm chart repository to the local cache list, after
    which we can reference it to pull charts from the repository.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm repo add`: 将Helm图表仓库添加到本地缓存列表，之后我们可以引用它从仓库中拉取图表。'
- en: '`helm repo update`: Gets the latest information about chart repositories; the
    information is stored locally.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm repo update`: 获取有关图表仓库的最新信息；该信息存储在本地。'
- en: '`helm search repo`: Searches for charts in the given repositories.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm search repo`: 在给定的仓库中搜索图表。'
- en: '`helm pull`: Downloads a given chart from the chart repository.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm pull`: 从图表仓库下载给定的图表。'
- en: '`helm upgrade -i`: If there is no release then install it, otherwise upgrade
    the release.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm upgrade -i`: 如果没有发布，则安装它，否则升级发布。'
- en: '`helm ls`: Lists releases in the current namespace. If the `-A` flag is provided,
    it will list all the namespaces.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm ls`: 列出当前命名空间中的发布。如果提供了`-A`标志，它将列出所有命名空间。'
- en: '`helm history`: Prints historical revisions for a given release.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm history`: 打印给定发布的历史修订版本。'
- en: '`helm rollback`: Rolls back a release to a previous revision.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm rollback`: 将发布回滚到先前的修订版本。'
- en: '`helm template`: Renders chart templates locally and displays the output.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm template`: 在本地渲染图表模板并显示输出。'
- en: '`helm create`: Creates a chart.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm create`: 创建一个图表。'
- en: '`helm lint`: Lints a chart.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm lint`: 对图表进行检查。'
- en: '`helm plugin`: Installs, lists, updates, and uninstalls Helm plugins.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm plugin`: 安装、列出、更新和卸载Helm插件。'
- en: Let's learn each one of these in more detail in the following sections.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中更详细地学习每一个。
- en: Helm charts
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Helm图表
- en: A chart is a Helm package. It is a collection of template files that describe
    Kubernetes resources. It uses templating to create Kubernetes manifests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是Helm的一个包。它是一组描述Kubernetes资源的模板文件。它使用模板创建Kubernetes清单。
- en: 'An example Helm chart structure is shown as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Helm图表结构示例如下：
- en: '![Figure 9.1 – hart folders layout'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 图表文件夹布局'
- en: '](image/B16411_09_001.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_001.jpg)'
- en: Figure 9.1 – Chart folders layout
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 图表文件夹布局
- en: 'Let''s discuss some of the preceding contents in detail:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论一些前述内容：
- en: '`Chart.yaml`: The file that contains information about the chart''s metadata.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`: 包含有关图表元数据的文件。'
- en: '`charts`: The folder where sub-charts get stored.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charts`: 子图表存储的文件夹。'
- en: '`templates`: The folder where template files get stored.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`: 存储模板文件的文件夹。'
- en: '`values.yaml`: A YAML-formatted file with configuration values used by the
    chart templates. These values can be resources, replica counts, or an image repository
    and tag, among other things.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values.yaml`: 一个YAML格式的文件，其中包含图表模板使用的配置数值。这些数值可以是资源、副本计数，或者是镜像仓库和标签等。'
- en: Tip
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: To change values, it is recommended to use the `override-values.yaml` file,
    in which you just enter the values you want to change. Changing the default `values.yaml`
    file that comes with the chart is not recommended, as you might lose track of
    changes in the newer versions of the file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改数值，建议使用`override-values.yaml`文件，您只需输入要更改的数值。不建议更改随图表提供的默认`values.yaml`文件，因为您可能会丢失对文件新版本中更改的跟踪。
- en: Now that we have learned some of the basics of the Helm chart structure, let's
    dive into chart templating.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了Helm图表结构的一些基础知识，让我们深入了解图表模板。
- en: Chart templating
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表模板
- en: The strongest feature of Helm is chart templating. The Helm template language
    is based on the Go language package `text/template` syntax. Values used with templating
    syntax can be employed to customize Kubernetes resource manifests. Before chart
    installation, Helm renders the chart's templates by injecting specified values
    and then does the chart install.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Helm最强大的功能是图表模板化。Helm模板语言基于Go语言包`text/template`的语法。使用模板语法的值可以用来定制Kubernetes资源清单。在安装图表之前，Helm通过注入指定的值来渲染图表的模板，然后进行图表安装。
- en: Values are read from the default `values.yaml` file that comes with the chart,
    or a user-provided file, for example, named `override-values.yaml`. Both files'
    values will be combined and then applied to the chart.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 值是从默认的`values.yaml`文件中读取的，该文件与图表一起提供，或者是用户提供的文件，例如命名为`override-values.yaml`。这两个文件的值将被合并，然后应用于图表。
- en: 'Let''s take a look at the following chart template example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下图表模板示例：
- en: '![Figure 9.2 – Chart template example'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – 图表模板示例'
- en: '](image/B16411_09_002.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_002.jpg)'
- en: Figure 9.2 – Chart template example
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 图表模板示例
- en: The preceding code snippet of the Helm template, which is a Kubernetes service
    resource, allows us to set the service type and port. If the default values do
    not suit your requirements, you can change the default values by providing new
    ones using a custom `override-values.yaml` file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Helm模板的上述代码片段是一个Kubernetes服务资源，允许我们设置服务类型和端口。如果默认值不符合您的要求，您可以通过提供新的值使用自定义的`override-values.yaml`文件来更改默认值。
- en: 'Other values such as `name`, `labels`, and `selector` get injected from the
    `_helpers.tpl` file, which is the default location for template partials:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其他值，如`name`、`labels`和`selector`，都是从`_helpers.tpl`文件中注入的，这是模板部分的默认位置：
- en: '![Figure 9.3 – A partial example of _helpers.tpl'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3 – _helpers.tpl的部分示例'
- en: '](image/B16411_09_003.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_003.jpg)'
- en: Figure 9.3 – A partial example of _helpers.tpl
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – _helpers.tpl的部分示例
- en: The preceding code snippet is of a `_helpers.tpl` file that defines labels and
    the selector to be injected into the chart's templates.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段是一个`_helpers.tpl`文件的一部分，定义了要注入到图表模板中的标签和选择器。
- en: Repositories
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库
- en: A repository is a location where packaged charts are stored and shared. It can
    be any web server capable of serving files. Charts in a repository are stored
    in the compressed `.tgz` format.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库是存储和共享打包图表的位置。它可以是任何能够提供文件的Web服务器。仓库中的图表以压缩的`.tgz`格式存储。
- en: Releases
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布
- en: A release is a specific instance of a chart deployed to a Kubernetes cluster.
    One Helm chart can be installed many times using the same release name, and each
    time a new release version will be created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 发布是部署到Kubernetes集群的图表的特定实例。可以使用相同的发布名称多次安装一个Helm图表，每次都会创建一个新的发布版本。
- en: The release information for a particular release is stored in the same namespace
    as the release itself.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 特定发布的发布信息存储在与发布本身相同的命名空间中。
- en: You can install the same Helm chart using the same release name but a different
    namespace an infinite number of times.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用相同的发布名称但不同的命名空间无限次安装相同的Helm图表。
- en: Now that we have learned some of the basics of Helm, let's dive into installing
    applications using charts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了Helm的一些基础知识，让我们深入了解使用图表安装应用程序。
- en: Installing applications using Helm charts
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm图表安装应用程序
- en: There are many Helm chart repositories, and it is way too much hassle to set
    them all up one by one.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多Helm图表仓库，逐个设置它们太麻烦了。
- en: 'Instead, we are going to use as our central Helm chart repository [https://chartcenter.io](https://chartcenter.io),
    which has over 300 Helm repositories and can be our single source of truth to
    install all the charts from one location. It also has a nice UI where you can
    search for charts and get very informative details about them:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将使用[https://chartcenter.io](https://chartcenter.io)作为我们的中央Helm图表存储库，该存储库拥有300多个Helm存储库，并且可以成为我们安装所有图表的单一真相来源。它还有一个很好的UI，您可以在其中搜索图表并获取非常详细的信息：
- en: '![Figure 9.4 – ChartCenter UI'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4 – ChartCenter UI'
- en: '](image/B16411_09_004.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_004.jpg)'
- en: Figure 9.4 – ChartCenter UI
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – ChartCenter UI
- en: The preceding screenshot shows the ChartCenter **UI**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了ChartCenter的UI。
- en: 'It is also very easy to set ChartCenter as your central Helm repository, as
    follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将ChartCenter设置为中央Helm存储库也非常容易，如下所示：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding commands added the `center` chart repository and updated the Helm
    local cache with its content.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令添加了`center`图表存储库，并使用其内容更新了Helm本地缓存。
- en: 'Now we can try searching for the `postgresql` chart by running the `$ helm
    search repo center/bitnami/postgresql -l | head -n 5` command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试通过运行`$ helm search repo center/bitnami/postgresql -l | head -n 5`命令来搜索`postgresql`图表：
- en: '![Figure 9.5 – Searching for PostgreSQL chart'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.5 – 搜索PostgreSQL图表'
- en: '](image/B16411_09_005.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_005.jpg)'
- en: Figure 9.5 – Searching for the PostgreSQL chart
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 搜索PostgreSQL图表
- en: In the preceding screenshot, we can see that we got the latest five versions
    of the Bitnami PostgreSQL chart.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们可以看到Bitnami PostgreSQL图表的最新五个版本。
- en: Before installing the PostgreSQL chart, we should set a password, as it is a
    good practice to set your own password instead of using one generated by Helm
    charts.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装PostgreSQL图表之前，我们应该设置一个密码，因为设置自己的密码而不是使用Helm图表生成的密码是一个好习惯。
- en: 'By reading the chart''s `README` at [https://chartcenter.io/bitnami/postgresql](https://chartcenter.io/bitnami/postgresql),
    we can find the value name we need to use:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读[https://chartcenter.io/bitnami/postgresql](https://chartcenter.io/bitnami/postgresql)上的图表`README`，我们可以找到需要使用的值名称：
- en: '![Figure 9.6 – PostgreSQL chart password'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.6 – PostgreSQL图表密码'
- en: '](image/B16411_09_006.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_006.jpg)'
- en: Figure 9.6 – PostgreSQL chart password
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – PostgreSQL图表密码
- en: The preceding screenshot shows us that the `postgresqlPassword` variable in
    the `values.yaml` file is needed to set the password for the PostgreSQL chart.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图向我们展示了`values.yaml`文件中`postgresqlPassword`变量需要设置PostgreSQL图表的密码。
- en: 'First, let''s create a `password-values.yaml` file to store the PostgreSQL
    password:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个`password-values.yaml`文件来存储PostgreSQL密码：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And let''s install it using the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令进行安装：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output for the preceding command is shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.7 – Helm installing the PostgreSQL chart'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.7 – Helm安装PostgreSQL图表'
- en: '](image/B16411_09_007.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_007.jpg)'
- en: Figure 9.7 – Helm installing the PostgreSQL chart
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – Helm安装PostgreSQL图表
- en: The preceding command installed the PostgreSQL chart with the name `postgresql`
    into the current namespace.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将PostgreSQL图表安装到当前命名空间，并命名为`postgresql`。
- en: Tip
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The preceding `helm upgrade` command has an `–i` flag (with the long name of
    `--install`), which allows us to use the same command for both the first install
    and the following upgrades afterward.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`helm upgrade`命令具有一个`–i`标志（长名称为`--install`），允许我们在第一次安装和随后的升级中使用相同的命令。
- en: 'Let''s check what was installed with the chart using the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查使用该图表安装了什么：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.8 – Listing all installed resources'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.8 – 列出所有已安装的资源'
- en: '](image/B16411_09_008.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_008.jpg)'
- en: Figure 9.8 – Listing all installed resources
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 - 列出所有已安装的资源
- en: In the preceding screenshot, we can see the `postgresql` pod, two `postgresql-`related
    services, and `statefulset`. Looking at `service/postgresql`, we can see that
    `postgresql` can be accessed by other Kubernetes applications on `postgresql:5432`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到`postgresql` pod，两个与`postgresql`相关的服务，以及`statefulset`。查看`service/postgresql`，我们可以看到`postgresql`可以被其他Kubernetes应用访问，端口为`postgresql:5432`。
- en: 'Let''s check that all secrets were properly created by running the following
    command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令检查所有秘钥是否正确创建：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 9.9 – Listing all installed secrets'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.9 - 列出所有已安装的秘钥'
- en: '](image/B16411_09_009.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_009.jpg)'
- en: Figure 9.9 – Listing all installed secrets
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 - 列出所有已安装的秘钥
- en: In the preceding screenshot, we see the `postgresql` secret where the PostgreSQL
    password is stored, and `sh.helm.release.v1.postgresql.v1`, where the Helm release
    information is stored.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们看到了`postgresql`秘钥，其中存储了PostgreSQL密码，以及`sh.helm.release.v1.postgresql.v1`，其中存储了Helm发布信息。
- en: 'Now, let''s check for Helm releases in the current namespace by running the
    following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过运行以下命令检查当前命名空间中的Helm发布：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 9.10 – Listing Helm releases'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.10 - 列出Helm发布'
- en: '](image/B16411_09_010.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_010.jpg)'
- en: Figure 9.10 – Listing Helm releases
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10 - 列出Helm发布
- en: 'In the preceding screenshot, we see a successfully deployed Helm release of
    `postgresql`, where we have a list of the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们看到了一个成功部署的`postgresql` Helm发布，其中我们列出了以下内容：
- en: '`STATUS`: Shows the release status as `deployed`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STATUS`：显示发布状态为`deployed`'
- en: '`CHART`: Shows the chart name and version as `postgresql-9.2.1`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHART`：显示图表名称和版本为`postgresql-9.2.1`'
- en: '`APP VERSION`: Shows the PostgreSQL version; in this case, `11.9.0`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`APP VERSION`：显示PostgreSQL版本；在这种情况下为`11.9.0`'
- en: This was easy to install – we just had to provide the password, and boom, we
    have a fully installed PostgreSQL instance, and its password is even stored in
    the secret.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易安装 - 我们只需要提供密码，然后，我们就有了一个完全安装好的PostgreSQL实例，甚至它的密码也存储在秘钥中。
- en: Upgrading Helm releases
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级Helm发布
- en: In the previous section, we installed PostgreSQL, so now let's try and upgrade
    it. We need to know how to do this because it will have to be upgraded from time
    to time.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们安装了PostgreSQL，现在让我们尝试升级它。我们需要知道如何做这个，因为它将不时地需要升级。
- en: For the upgrade, we are going to use the latest available PostgreSQL chart version,
    that is, `9.3.2.`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于升级，我们将使用最新可用的PostgreSQL图表版本，即`9.3.2`。
- en: 'Let''s get and run the upgrade with the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令获取并运行升级：
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 9.11 – Listing Helm releases'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.11 - 列出Helm发布'
- en: '](image/B16411_09_011.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_011.jpg)'
- en: Figure 9.11 – Listing Helm releases
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11 - 列出Helm发布
- en: We ran the preceding `helm upgrade` command to change the `postgresql` chart
    version to `9.3.2`, but we see the PostgreSQL version is still the same as it
    was, that is, `11.9.0`, so that means the chart itself received some changes,
    but the application version was kept the same.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行了上述的`helm upgrade`命令，将`postgresql`图表版本更改为`9.3.2`，但我们看到PostgreSQL版本仍然与之前相同，即`11.9.0`，这意味着图表本身接收了一些更改，但应用程序版本保持不变。
- en: Running `helm ls` shows `REVISION 2`, which means the second release for the
    PostgreSQL chart.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`helm ls`显示`REVISION 2`，这意味着PostgreSQL图表的第二次发布。
- en: 'Let''s check the secrets one more time by running the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令再次检查秘钥：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.12 – Listing Helm releases'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.12 - 列出Helm发布'
- en: '](image/B16411_09_012.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_012.jpg)'
- en: Figure 9.12 – Listing Helm releases
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12 - 列出Helm发布
- en: From the preceding screenshot, we can see a new secret, `sh.helm.release.v1.postgresql.v2`,
    which is where the PostgreSQL upgrade release was stored.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以看到一个新的秘钥，`sh.helm.release.v1.postgresql.v2`，这是存储了PostgreSQL升级发布的地方。
- en: It's nice to see how Helm keeps track of all releases and allows easy application
    upgrades with a single `helm upgrade` command.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 看到Helm如何跟踪所有发布并允许使用单个`helm upgrade`命令轻松进行应用程序升级是件好事。
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A Helm release contains all Kubernetes templates from the chart, which make
    it much easier to track them (from the perspective of releases) as one single
    unit.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Helm发布包含图表中的所有Kubernetes模板，这使得跟踪它们（从发布的角度）作为一个单一单元变得更加容易。
- en: Let's learn how to do a release rollback. We'll do this because, from time to
    time, releases can go bad and need to be rolled back.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何进行发布回滚。我们这样做是因为，有时发布可能出现问题，需要回滚。
- en: Rolling back to a previous Helm release
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回滚到先前的Helm发布
- en: In this section, let's see how to roll back to a previous version using the
    `helm rollback` command.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看如何使用`helm rollback`命令回滚到先前的版本。
- en: The `helm rollback` command is unique to Helm, and it allows us to roll back
    the whole application, so you do not have to worry about which Kubernetes resources
    need to be rolled back specifically.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm rollback`命令是Helm独有的，它允许我们回滚整个应用程序，因此您不必担心需要特别回滚哪些Kubernetes资源。'
- en: Of course, when dealing with the release IDs of real-world applications, database
    schemas get changed as well, so to roll back the frontend application, you have
    to roll back the database schema changes too. This means that things aren't always
    so straightforward as they may seem here, but using Helm still simplifies some
    parts of the application release rollback process.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理真实应用程序的发布ID时，数据库模式也会发生变化，因此要回滚前端应用程序，您还必须回滚数据库模式更改。这意味着事情并不总是像在这里看起来的那样简单，但使用Helm仍然简化了应用程序发布回滚过程的某些部分。
- en: 'To run the `helm rollback` command, we first need to know the release revision
    we want to roll back to, which we can find with the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`helm rollback`命令，我们首先需要知道要回滚到的发布修订版本，我们可以使用以下命令找到它：
- en: '[PRE11]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.13 – Listing Helm release revisions'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.13 - 列出Helm发布修订版本'
- en: '](image/B16411_09_013.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_013.jpg)'
- en: Figure 9.13 – Listing Helm release revisions
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13 - 列出Helm发布修订版本
- en: In the preceding `helm history postgresql` command, we got a list of release
    revisions.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`helm history postgresql`命令中，我们得到了一个发布修订版本的列表。
- en: 'So, we want to roll back `postgresql` to revision `1`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们要将`postgresql`回滚到修订版本`1`：
- en: '[PRE12]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.14 – Helm rollback release'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.14 - Helm回滚发布'
- en: '](image/B16411_09_014.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_014.jpg)'
- en: Figure 9.14 – Helm rollback release
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14 - Helm回滚发布
- en: In the preceding screenshot, we see that the rollback was done with the `helm
    rollback postgresql 1` command and now we see three revisions, as even when doing
    a rollback, a new release gets created.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们看到使用`helm rollback postgresql 1`命令进行了回滚，现在我们看到了三个修订版本，即使进行回滚，也会创建一个新的发布。
- en: As you can see, rolling back to the previous release is quite easy.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，回滚到先前的发布非常容易。
- en: Using Helm's template command
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm的模板命令
- en: With Helm's helm `template` command, you can check the output of the chart in
    fully rendered Kubernetes resource templates. This is a very handy command to
    check the templates' outputs, especially when you are developing a new chart,
    making changes to the chart, debugging, and so on.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Helm的`helm template`命令，您可以检查图表的完全渲染的Kubernetes资源模板的输出。这是一个非常方便的命令，特别是在开发新图表、对图表进行更改、调试等情况下，用于检查模板的输出。
- en: 'So, let''s check it out by running the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们通过运行以下命令来检查它：
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding command will print all templates on the screen. Of course, you
    can pipe it out to the file as well.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将在屏幕上打印所有模板。当然，您也可以将其输出到文件中。
- en: 'As the output is very long, we aren''t going to print all of it, but only parts
    of the Kubernetes manifest:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 由于输出非常长，我们不打印所有内容，而只打印部分Kubernetes清单：
- en: '[PRE14]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding output shows all of the resources that are part of the `postgresql`
    chart. The resources are divided with `---`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示了所有属于`postgresql`图表的资源。资源使用`---`分隔。
- en: '`helm template` is a powerful command for checking a chart''s templates and
    printing the output so you read it through. `helm template` doesn''t connect to
    the Kubernetes cluster, it only fills the templates with values and prints the
    output.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm template`是一个强大的命令，用于检查图表的模板并打印输出，以便您阅读。`helm template`不连接到Kubernetes集群，它只填充模板的值并打印输出。'
- en: You can achieve the same thing by adding `--dry-run --debug` flags to the `helm
    upgrade` command. With this, Helm will validate the templates against the Kubernetes
    cluster.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过向`helm upgrade`命令添加`--dry-run --debug`标志来实现相同的效果。使用这种方式，Helm将根据Kubernetes集群验证模板。
- en: 'An example of the full command would look as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 完整命令的示例如下：
- en: '[PRE15]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have learned a few handy Helm commands to be used before installing or upgrading
    our Helm release.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了一些在安装或升级Helm发布之前使用的方便的Helm命令。
- en: Another strong use case for using `helm template` is to render templates to
    a file and then compare them. This is useful for comparing chart versions or the
    impact of customized parameters on the final output.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`helm template`的另一个强大用例是将模板渲染到文件中，然后进行比较。这对比较图表版本或自定义参数对最终输出的影响非常有用。
- en: Creating a Helm chart
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Helm图表
- en: We have learned many cool tricks we can do with Helm! Let's now learn how to
    create a Helm chart.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了许多有关Helm的技巧！现在让我们学习如何创建Helm图表。
- en: The `helm create` command creates an example chart for you, so you can use it
    as a base and update it with the required Kubernetes resources, values, and so
    on. It creates a fully working `nginx` chart, so we are going to name the chart
    by that name.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm create`命令为您创建了一个示例图表，因此您可以将其用作基础，并使用所需的Kubernetes资源、值等进行更新。它创建了一个完全可用的`nginx`图表，因此我们将以该名称命名图表。'
- en: 'Let''s now check how easy it is to create a chart by running the following
    command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过运行以下命令来检查创建图表有多容易：
- en: '[PRE16]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出显示在以下屏幕截图中：
- en: '![Figure 9.15 – The helm create command'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.15 – helm create命令'
- en: '](image/B16411_09_015.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_015.jpg)'
- en: Figure 9.15 – The helm create command
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15 – helm create命令
- en: In the preceding screenshot, we ran the `helm create nginx` command, where `nginx`
    is our chart name. The name is also used to create a new folder where the chart
    content will be stored. The folder structure is shown using the `tree nginx` command.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们运行了`helm create nginx`命令，其中`nginx`是我们的图表名称。该名称也用于创建一个新的文件夹，其中将存储图表内容。文件夹结构使用`tree
    nginx`命令显示。
- en: As you can see in the screenshot, the `deployment.yaml` file, **Horizontal Pod
    Autoscaler** (**HPA**), `ingress`, `service`, and `serviceaccount` resource templates
    have been created, all of which provide a good base to start from.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在截图中所看到的，`deployment.yaml`文件、**水平Pod自动缩放器**（**HPA**）、`ingress`、`service`和`serviceaccount`资源模板都已创建，这些资源提供了一个良好的起点。
- en: The preceding command also created the `test-connection.yaml` file so we can
    run a test with `helm test` against the installed `nginx` chart.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令还创建了`test-connection.yaml`文件，因此我们可以对安装的`nginx`图表运行`helm test`进行测试。
- en: 'Now let''s install the chart by running the following command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过运行以下命令来安装图表：
- en: '[PRE17]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.16 – Installing the nginx chart'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.16 - 安装nginx图表'
- en: '](image/B16411_09_016.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_016.jpg)'
- en: Figure 9.16 – Installing the nginx chart
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16 - 安装nginx图表
- en: 'In the preceding screenshot, we ran `helm install nginx nginx`. This command
    uses the following basic syntax:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们运行了`helm install nginx nginx`。该命令使用以下基本语法：
- en: '[PRE18]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, `<CHART NAME>` is the local folder, so note that you can install the chart
    from remote Helm repositories and also from local folders, both with the same
    command.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<CHART NAME>`是本地文件夹，因此请注意您可以使用相同的命令从远程Helm存储库和本地文件夹安装图表。
- en: 'The next command we used is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的下一个命令如下：
- en: '[PRE19]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command helped us to show the resources deployed by default by the chart.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令帮助我们展示了图表默认部署的资源。
- en: 'As we already mentioned the `helm test` command, let''s check out how that
    command functions:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的`helm test`命令，让我们来看看该命令的功能：
- en: '[PRE20]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.17 – Testing the nginx chart'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.17 - 测试nginx图表'
- en: '](image/B16411_09_017.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_017.jpg)'
- en: Figure 9.17 – Testing the nginx chart
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17 - 测试nginx图表
- en: The preceding `helm test nginx` command runs the test against the Helm release
    named `nginx`. The output of the `kubectl get pods` command shows the `nginx-test-connection`
    pod that was used to run the chart test and was then stopped.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`helm test nginx`命令针对名为`nginx`的Helm发布运行测试。`kubectl get pods`命令的输出显示了用于运行图表测试的`nginx-test-connection`
    pod，然后被停止。
- en: 'Next, let''s check the contents of the `test-connection.yaml` file:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们检查`test-connection.yaml`文件的内容：
- en: '[PRE21]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在以下截图中：
- en: '![Figure 9.18 – test-connection.yaml content'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.18 - test-connection.yaml内容'
- en: '](image/B16411_09_018.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_018.jpg)'
- en: Figure 9.18 – test-connection.yaml content
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18 - test-connection.yaml内容
- en: In the preceding screenshot, you can see a simple pod template that runs the
    `curl` command against the `nginx` service resource.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，您可以看到一个简单的pod模板，该模板针对`nginx`服务资源运行`curl`命令。
- en: 'This `args: [''{{ include "nginx.fullname" . }}:{{ .Values.service.port }}'']`
    line of template code gets converted to `nginx:80` when the actual Kubernetes
    resource gets created.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '当实际的Kubernetes资源被创建时，模板代码的`args: [''{{ include "nginx.fullname" . }}:{{ .Values.service.port
    }}'']`行会被转换为`nginx:80`。'
- en: Simple and easy, right? As we can see, the `helm create` command creates a working
    chart with the example resource templates, and even with the test template.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 简单易行，对吧？正如我们所看到的，`helm create`命令创建了一个带有示例资源模板的工作图表，甚至包括测试模板。
- en: Using Helm's linting feature
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm的linting功能
- en: So far, we've learned how to create a Helm chart. However, we also need to know
    how to check the chart for possible issues and errors. For that, we can use the
    `helm lint <CHART NAME>` command, which will check the Helm chart content by running
    a series of tests to verify the chart integrity.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何创建Helm图表。然而，我们还需要知道如何检查图表是否存在可能的问题和错误。为此，我们可以使用`helm lint <CHART
    NAME>`命令，它将通过运行一系列测试来验证图表的完整性。
- en: 'Let''s `lint` the `nginx` chart we have created:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们`lint`我们创建的`nginx`图表：
- en: '[PRE22]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![Figure 9.19 – Linting the nginx chart'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.19 - 对nginx图表进行lint'
- en: '](image/B16411_09_019.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_019.jpg)'
- en: Figure 9.19 – Linting the nginx chart
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19 - 对nginx图表进行lint
- en: As you can see in the preceding screenshot, our chart has no issues and can
    be installed safely. The `[INFO]` message is just the warning that the chart's
    icon is missing, which can be safely ignored.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上面的截图中所看到的，我们的图表没有问题，可以安全地安装。`[INFO]`消息只是警告说图表的图标丢失了，可以安全地忽略。
- en: It is really recommend to have it if you want to host your charts for example
    in [https://chartcenter.io](https://chartcenter.io) where it gets shown in its
    UI.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在[https://chartcenter.io](https://chartcenter.io)中托管你的图表并在其UI中显示，那么强烈建议你这样做。
- en: Extending Helm with plugins
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件扩展Helm
- en: Helm can be extended with plugins as well. Plugins are useful to extend Helm
    features that are not part of the Helm CLI, as Helm might not have everything
    that you need.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Helm也可以通过插件进行扩展。插件对于扩展Helm CLI中没有的功能非常有用，因为Helm可能没有你需要的一切。
- en: There is no central Helm plugins repository yet, where you would be able to
    see a list of all available plugins, nor is there a Helm plugin manager.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有中央Helm插件存储库，你可以在那里看到所有可用插件的列表，也没有Helm插件管理器。
- en: 'As most of the plugins are stored in GitHub repositories, and it is recommended
    to use the GitHub topic `helm-plugin` to label the plugin, you can easily search
    for available plugins there:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数插件都存储在GitHub存储库中，并且建议使用GitHub主题`helm-plugin`来标记插件，你可以在那里轻松搜索可用的插件：
- en: '![Figure 9.20 – Helm plugins search on GitHub'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.20 - 在GitHub上搜索Helm插件'
- en: '](image/B16411_09_020.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_020.jpg)'
- en: Figure 9.20 – Helm plugins search on GitHub
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.20 - 在GitHub上搜索Helm插件
- en: In the preceding screenshot [https://github.com/search?q=helm-plugin](https://github.com/search?q=helm-plugin)
    was used to search for Helm plugins in GitHub.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中使用了[https://github.com/search?q=helm-plugin](https://github.com/search?q=helm-plugin)来在GitHub上搜索Helm插件。
- en: 'Let''s see how easy it is to install a Helm plugin:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看安装Helm插件有多容易：
- en: '[PRE23]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![Figure 9.21 – Helm plugin helm-diff being installed'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.21 - 安装Helm插件helm-diff'
- en: '](image/B16411_09_021.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_021.jpg)'
- en: Figure 9.21 – Helm plugin helm-diff being installed
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21 - 安装Helm插件helm-diff
- en: In the preceding command, `helm plugin list`, we checked for installed plugins,
    then we used `helm plugin` install [https://github.com/databus23/helm-diff](https://github.com/databus23/helm-diff)
    to install the `helm-diff` plugin. The preceding plugin installation output was
    cut as the installed plugin prints a lot of information.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令`helm plugin list`中，我们检查了已安装的插件，然后我们使用`helm plugin` install [https://github.com/databus23/helm-diff](https://github.com/databus23/helm-diff)来安装`helm-diff`插件。之前的插件安装输出被截断了，因为安装的插件打印了大量信息。
- en: 'Let''s check the plugins list:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来检查插件列表：
- en: '[PRE24]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![Figure 9.22 – Helm plugin list'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.22 - Helm插件列表'
- en: '](image/B16411_09_022.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_022.jpg)'
- en: Figure 9.22 – Helm plugin list
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22 - Helm插件列表
- en: 'We see that the `diff` plugin is installed, which is basically a new Helm command:
    `helm diff`.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`diff`插件已安装，这基本上是一个新的Helm命令：`helm diff`。
- en: We are not going to check how `helm diff` works, but it is a very handy one
    as you can check the differences between the installed and new chart versions.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不打算检查`helm diff`的工作原理，但它非常方便，因为您可以检查已安装和新图表版本之间的差异。
- en: 'Let''s install one more:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再安装一个：
- en: '[PRE25]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 9.23 – Helm plugin install helm-kubeval'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.23 - Helm插件安装helm-kubeval'
- en: '](image/B16411_09_023.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_023.jpg)'
- en: Figure 9.23 – helm plugin install helm-kubeval
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23 - helm插件安装helm-kubeval
- en: The preceding command, `helm plugin install` [https://github.com/instrumenta/helm-kubeval](https://github.com/instrumenta/helm-kubeval),
    installed the `kubeval` plugin, which validates Helm charts against Kubernetes
    schemas.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令`helm plugin install` [https://github.com/instrumenta/helm-kubeval](https://github.com/instrumenta/helm-kubeval)
    安装了`kubeval`插件，该插件验证Helm图表与Kubernetes模式的匹配情况。
- en: 'Let''s validate the `nginx` chart that we created with `helm create` before:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证之前使用`helm create`创建的`nginx`图表：
- en: '[PRE26]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 9.24 – Validating nginx chart with kubeval plugin'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.24 - 使用kubeval插件验证nginx图表'
- en: '](image/B16411_09_024.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_09_024.jpg)'
- en: Figure 9.24 – Validating the nginx chart with the kubeval plugin
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24 - 使用kubeval插件验证nginx图表
- en: The preceding `helm kubeval nginx` command validated the `nginx` chart – as
    we can see, it's all green, so no issues there. This plugin is a good addition
    to the `helm lint` command, and the combination of both gives you nice tooling
    to check charts with.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`helm kubeval nginx`命令验证了`nginx`图表 - 正如我们所看到的，一切都是绿色的，所以没有问题。该插件是`helm lint`命令的很好补充，两者结合起来可以为您提供良好的工具来检查图表。
- en: Now, we know how to extend Helm with extra features, as one tool cannot have
    everything. Plugins are easy to write as well, and you can learn that in your
    own time, of course.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何使用Helm来扩展额外的功能，因为一个工具不能包含所有功能。编写插件也很容易，当然您可以在自己的时间里学习。
- en: Summary
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to use Helm for installing, upgrading,
    rolling back releases, checking chart templates' output, creating a chart, linting
    a chart, and extending Helm with plugins.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Helm来安装、升级、回滚发布、检查图表模板的输出、创建图表、对图表进行lint检查，并使用插件扩展Helm。
- en: Helm is a powerful tool with which you can deploy both simple and complex Kubernetes
    applications. It will help you to deploy real-world applications, especially as
    there are so many different charts ready to use from many Helm repositories.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是一个强大的工具，您可以使用它部署简单和复杂的Kubernetes应用程序。它将帮助您部署真实世界的应用程序，特别是因为有许多不同的图表可以从许多Helm仓库中使用。
- en: In the last chapter of this book, we're going to learn `kubectl` best practices
    and `kubectl` commands for Docker users.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章中，我们将学习`kubectl`的最佳实践和Docker用户的`kubectl`命令。
