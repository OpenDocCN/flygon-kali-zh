- en: Data Types, Variables, and Constants
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型、变量和常量
- en: In this chapter, we will start building our TicTacToe game while learning about
    data types, variables, and constants in Kotlin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始构建我们的井字游戏，同时学习 Kotlin 中的数据类型、变量和常量。
- en: 'By the end of the chapter, we will have:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将有：
- en: Examined the current UI of the app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查了应用程序的当前 UI
- en: Designed the UI for the game
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计了游戏的 UI
- en: Learned about basic types in Kotlin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kotlin 中学习了基本类型
- en: The user interface
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户界面
- en: In Android, the code for the app UI is written in XML and stored in layout files.
    Let's take a look at the default UI that was created when we created our project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，应用程序 UI 的代码是用 XML 编写的，并存储在布局文件中。让我们来看看在创建项目时创建的默认 UI。
- en: 'Open `res/layout/activity_main.xml`. Make sure Text is selected at the bottom
    of the screen. Android Studio should show you the XML code for the UI with a preview
    on the right-hand side:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `res/layout/activity_main.xml`。确保在屏幕底部选择了 Text。Android Studio 应该会显示右侧的预览和
    UI 的 XML 代码：
- en: '![](img/b0b66a1e-2348-4f1c-b91f-44361838752a.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0b66a1e-2348-4f1c-b91f-44361838752a.png)'
- en: If you don't see the preview on the right-hand side, enable it by going to View | Tool
    Windows | Preview.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在右侧看不到预览，请转到 View | Tool Windows | Preview 启用它。
- en: 'Now, let''s take a look at the separate elements of the main activity layout:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看主活动布局的各个元素：
- en: The parent element is a `CoordinatorLayout`. The `CoordinatorLayout` was introduced
    in Android 5.0 as part of the design library. It provides better control over
    touch events between its child views. We've already seen this functionality at
    work with the way the `SnackBar` appears under the `FloatingActionButton` (instead
    of covering it) when the button is clicked.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父元素是 `CoordinatorLayout`。`CoordinatorLayout` 在 Android 5.0 中作为设计库的一部分引入。它提供了更好的控制，可以在其子视图之间进行触摸事件。当单击按钮时，我们已经看到了这种功能是如何工作的，`SnackBar`
    出现在 `FloatingActionButton` 下方（而不是覆盖它）。
- en: The element labeled `2` is the `Toolbar`, which acts as the top navigation for
    your app. It's usually used to display the title of the app, the app logo, action
    menu, and navigation button.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标记为 `2` 的元素是 `Toolbar`，它充当应用程序的顶部导航。通常用于显示应用程序的标题、应用程序标志、操作菜单和导航按钮。
- en: The `include` tag is used to embed a layout into another layout. In this case,
    the `res/layout/content_main.xml` file contains the `TextView` (the one displaying
    the Hello World! message) we see when we run the app. Most of our UI changes will
    be done in the `res/layout/content_main.xml` file.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`include` 标签用于将一个布局嵌入到另一个布局中。在这种情况下，`res/layout/content_main.xml` 文件包含了我们在运行应用程序时看到的
    `TextView`（显示 Hello World! 消息）。我们的大多数 UI 更改将在 `res/layout/content_main.xml` 文件中完成。'
- en: The `FloatingActionButton`, as you may have noticed, is an actionable `ImageView`
    that floats on the screen.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FloatingActionButton`，您可能已经注意到，是一个可操作的浮动在屏幕上的 `ImageView`。'
- en: Building our game UI
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的游戏 UI
- en: Our TicTacToe game screen will consist of the game board (which is a 3x3 grid),
    a `TextView` displaying whose turn it is, and a `FloatingActionButton` used to
    restart the game.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的井字游戏屏幕将包括游戏板（一个 3x3 的网格）、显示轮到谁了的 `TextView` 和用于重新开始游戏的 `FloatingActionButton`。
- en: 'We will use a `TableLayout` to design the game board. Open the `res/layout/content_main.xml` file
    and replace the `TextView` declaration with the `TableLayout` declaration, as
    shown in the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `TableLayout` 来设计游戏板。打开 `res/layout/content_main.xml` 文件，并将 `TextView`
    声明替换为 `TableLayout` 声明，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A number of things should be noted here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件事情需要注意：
- en: The `TableRow` element represents a single row of the table. From the preceding
    code, each element of the row is represented by a `TextView`.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TableRow` 元素表示表格的一行。从前面的代码中，行的每个元素都由一个 `TextView` 表示。'
- en: Each `TextView` has similar attributes.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 `TextView` 都具有相似的属性。
- en: The previous code declares a 1x3 table, in other words, a table with a single
    row and three columns. Since we want to create a 3x3 grid, we will need to add
    two more `TableRow` elements.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的代码声明了一个 1x3 的表格，换句话说，是一个具有一行和三列的表格。由于我们想要创建一个 3x3 的网格，我们需要添加另外两个 `TableRow`
    元素。
- en: The previous code already contains a lot of duplicated code. We need to find
    a way to reduce the amount of duplicates. That's where `res/values` comes in.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码已经包含了很多重复的代码。我们需要找到一种方法来减少重复的数量。这就是 `res/values` 的作用所在。
- en: 'Before adding the two extra `TableRow` elements, let''s organize our code better.
    Open `res/values/styles.xml` and add the following lines of code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加两个额外的 `TableRow` 元素之前，让我们更好地组织我们的代码。打开 `res/values/styles.xml` 并添加以下代码：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can create child styles who inherit from the parent by naming them in the
    format **Parent.child**, for instance, `Cell.Left`, `Cell.Middle`, and `Cell.Right`
    all inherit the attributes of the `Cell` style.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以 **Parent.child** 的格式命名它们来创建继承自父级的子样式，例如，`Cell.Left`、`Cell.Middle` 和 `Cell.Right`
    都继承了 `Cell` 样式的属性。
- en: 'Next, open `res/values/dimens.xml`. This is where you declare dimensions used
    in your layouts. Add the following lines of code to the resource element:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `res/values/dimens.xml`。这是您在布局中声明的尺寸。将以下代码添加到资源元素中：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, open the `res/values/strings.xml`. This is where you declare string resources
    needed within the app. Add the following lines of code in the resource element:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开 `res/values/strings.xml`。这是您在应用程序中声明所需的字符串资源。在资源元素中添加以下代码：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, open the `res/layout/content_main.xml` file and replace the `TableRow`
    declaration with the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开 `res/layout/content_main.xml` 文件，并将 `TableRow` 声明替换为以下内容：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We now have all three rows declared. As you can see, our code is looking more
    organized.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经声明了所有三行。正如您所看到的，我们的代码看起来更有组织性。
- en: 'Build and run to view your progress so far:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行以查看到目前为止的进展：
- en: '![](img/5d316414-e6f5-479e-961e-2cc66ae1f21b.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d316414-e6f5-479e-961e-2cc66ae1f21b.png)'
- en: 'Let''s go ahead and add a `TextView` that will be used to display whose turn
    it is. Open `res/layout/activity_main.xml` and add the following `TextView` declaration
    just before the `include` element:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加一个 `TextView`，用于显示轮到谁了。打开 `res/layout/activity_main.xml` 并在 `include`
    元素之前添加以下 `TextView` 声明：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s change the icon and background color for the `FloatingActionButton`
    by replacing the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过替换以下代码来改变`FloatingActionButton`的图标和背景颜色：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once again, build and run:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建和运行：
- en: '![](img/1eeca583-e07a-4afc-9d8a-8b44dec6da87.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1eeca583-e07a-4afc-9d8a-8b44dec6da87.png)'
- en: That's it. We're done with the UI design.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们完成了UI设计。
- en: Basic types
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型
- en: In Kotlin, there's no concept of primitive datatypes. All types are objects
    with member functions and properties.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，没有原始数据类型的概念。所有类型都是带有成员函数和属性的对象。
- en: Variables and constants
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和常量
- en: 'You declare a variable using the `var` keyword, and declare constants with
    the `val` keyword. When declaring a variable or constant, its type doesn''t have
    to be explicitly defined. The type will be inferred from context. A `val` can
    only be initialized once. A variable or constant can only be assigned a null value
    if it''s explicitly declared as a nullable type. You declare a nullable type by
    appending a `?` to the end of the type:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`var`关键字声明变量，并使用`val`关键字声明常量。在声明变量或常量时，不必显式定义其类型。类型将从上下文中推断出来。`val`只能初始化一次。只有在明确声明为可空类型时，变量或常量才能被赋予空值。通过在类型的末尾添加`?`来声明可空类型：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For instance, in the preceeding code, `a` and `b` will both be treated as `String`.
    When trying to reassign a variable with an inferred type, a value of a different
    type will throw an error. A `val` can only be initialized once.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上面的代码中，`a`和`b`都将被视为`String`。当尝试重新分配推断类型的变量时，不同类型的值将引发错误。`val`只能初始化一次。
- en: Properties
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性
- en: 'In Kotlin, properties are accessed by simply referring to them by name. As
    much as `getters` and `setters` are not a requirement, you are not prohibited
    from creating them. A property''s `getter` and/or `setter` can be created as part
    of its declaration. A `setter` is not allowed if the property is a `val`. A property
    needs to be initialized at the point of creation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，通过简单地引用名称来访问属性。尽管`getter`和`setter`不是必需的，但你也可以创建它们。属性的`getter`和/或`setter`可以作为其声明的一部分创建。如果属性是`val`，则不允许有`setter`。属性需要在创建时初始化：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s go ahead and declare a few properties that we will require in our `MainActivity`
    class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续声明一些我们在`MainActivity`类中需要的属性：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`gameBoard` is a 3x3 matrix that represents a single TicTacToe game board.
    It will be used to store the value of each cell on the board.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`gameBoard`是一个3x3的矩阵，表示一个井字棋游戏板。它将用于存储棋盘上每个单元格的值。'
- en: '`turn` is a char that stores whose turn it is at the moment, X or O.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`turn`是一个char类型的变量，用于存储当前是谁的回合，X还是O。'
- en: '`tableLayout` is an `android.widget.TableLayout` that will be initialized in
    the `onCreate()` method with the view from the xml layout.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tableLayout`是一个`android.widget.TableLayout`，将在`onCreate()`方法中用xml布局中的视图进行初始化。'
- en: '`turnTextView` is an `android.widget.TextView` that is used to display whose
    turn it is at the moment. This will also be initialized in the `onCreate()` method
    with the view from the xml layout.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`turnTextView`是一个`android.widget.TextView`，用于显示当前是谁的回合。这也将在`onCreate()`方法中用xml布局中的视图进行初始化。'
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we designed the user interface for our simple TicTacToe game.
    We also learned how to work with variables and constants in Kotlin.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为简单的井字棋游戏设计了用户界面。我们还学习了如何在Kotlin中使用变量和常量。
- en: In the next chapter, we will go ahead and start implementing the logic for our
    game while learning about classes and objects.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续实现游戏逻辑，同时学习类和对象。
