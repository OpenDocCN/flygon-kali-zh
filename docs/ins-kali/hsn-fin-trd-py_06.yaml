- en: '*Chapter 4*: Data Manipulation and Analysis with pandas'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：使用pandas进行数据操作和分析'
- en: In this chapter, you will learn about the Python `pandas` library built upon
    NumPy, which provides data manipulation and analysis methods for structured data
    frames. The name **pandas** is derived from **panel** **data**, an econometrics
    term for multidimensional structured datasets, according to the Wikipedia page
    on pandas.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习建立在NumPy之上的Python `pandas`库，为结构化数据框提供数据操作和分析方法。根据维基百科关于pandas的页面，**pandas**这个名字来源于**panel**
    **data**，这是一个多维结构化数据集的计量经济学术语。
- en: 'The `pandas` library contains two fundamental data structures to represent
    and manipulate structured rectangular datasets with a variety of indexing options:
    Series and DataFrames. Both use the index data structure.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`库包含两种基本数据结构，用于表示和操作具有各种索引选项的结构化矩形数据集：Series和DataFrames。两者都使用索引数据结构。'
- en: Most operations in the processing of financial data in Python are based upon
    DataFrames. A DataFrame is like an Excel worksheet – a two-dimensional table that
    may contain multiple time series stored in columns. Therefore, we recommend you
    execute all the examples in this chapter yourself in your environment to get practice
    with the syntax and to better know what is possible.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python中金融数据处理中的大多数操作都是基于DataFrames。DataFrame类似于Excel工作表-一个可能包含多个时间序列的二维表格。因此，我们建议您在您的环境中执行本章中的所有示例，以便练习语法并更好地了解可能的操作。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing pandas Series, pandas DataFrames, and pandas Indexes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍pandas Series、pandas DataFrames和pandas Indexes
- en: Learning essential operations on pandas DataFrames
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习pandas DataFrames的基本操作
- en: Exploring file operations with pandas DataFrames
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pandas DataFrames进行文件操作
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Python code used in this chapter is available in the `Chapter04/pandas.ipynb`
    notebook in the book's code repository.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的Python代码在书籍代码库中的`Chapter04/pandas.ipynb`笔记本中可用。
- en: Introducing pandas Series, pandas DataFrames, and pandas Indexes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍pandas Series、pandas DataFrames和pandas Indexes
- en: pandas Series, pandas DataFrames, and pandas Indexes are the fundamental pandas
    data structures.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: pandas Series、pandas DataFrames和pandas Indexes是基本的pandas数据结构。
- en: pandas.Series
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas.Series
- en: The `pandas.Series` data structure represents a one-dimensional series of homogenous
    values (integer values, string values, double values, and so on). Series are a
    type of list and can contain only a single list with an index. A Data Frame, on
    the other hand, is a collection of one or more series.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.Series`数据结构表示一维同质值系列（整数值、字符串值、双精度值等）。Series是一种列表，只能包含带有索引的单个列表。另一方面，Data
    Frame是一个或多个系列的集合。'
- en: 'Let''s create a `pandas.Series` data structure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`pandas.Series`数据结构：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That series contains the index in the first column, and in the second column,
    the index''s corresponding values:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该系列包含第一列中的索引，第二列中包含索引的相应值：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can specify custom index names by specifying the `index` parameter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定`index`参数来指定自定义索引名称：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will look like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can also create a series by specifying the `index -> value` mapping via
    a dictionary:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用字典指定`index -> value`映射来创建一个系列：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `pandas.Series.index` attribute lets us access the index:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.Series.index`属性让我们可以访问索引：'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The index is of type `pandas.Index`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的类型是`pandas.Index`：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The values of the series can be accessed using the `pandas.Series.values` attribute:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`pandas.Series.values`属性访问系列的值：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The values are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 值如下：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can assign the series a name by modifying the `pandas.Series.name` attribute:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过修改`pandas.Series.name`属性为系列指定一个名称：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding examples demonstrated numerous ways how to construct a pandas
    Series. Let's learn about DataFrames, a data structure that may contain multiple
    Series.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例演示了构建pandas Series的多种方式。让我们了解一下DataFrames，这是一个可能包含多个Series的数据结构。
- en: pandas.DataFrame
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas.DataFrame
- en: The `pandas.DataFrame` data structure is a collection of multiple `pandas.Series`
    objects of possibly different types indexed by the same common Index object.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame`数据结构是由相同公共Index对象索引的多个`pandas.Series`对象的集合。'
- en: The majority of all statistical time series operations are performed on DataFrames
    and `pandas.DataFrame` is optimized for parallel super-fast processing of DataFrames,
    much faster than if the processing was done on separate series.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有统计时间序列操作都是在DataFrames上执行的，`pandas.DataFrame`针对DataFrames的并行超快处理进行了优化，比在单独的系列上进行处理要快得多。
- en: 'We can create a DataFrame from a dictionary, where the key is the column name
    and the value of that key contains the data for the corresponding series/column:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从字典创建一个DataFrame，其中键是列名，该键的值包含相应系列/列的数据：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can also pass the `index=` parameter here to label the indices:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在这里传递`index=`参数来标记索引：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This constructs the following DataFrame:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这构建了以下DataFrame：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `pandas.DataFrame.columns` attribute returns the names of the different
    columns:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.columns`属性返回不同列的名称：'
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result is an `Index` object:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个`Index`对象：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The indices can be accessed from the `pandas.DataFrame.index` attribute:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从`pandas.DataFrame.index`属性中访问索引：
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'That gives us this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们这个：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The DataFrame also contains the `pandas.DataFrame.values` attribute, which
    returns the values contained in the columns:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame还包含`pandas.DataFrame.values`属性，该属性返回列中包含的值：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is the following 2D array:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下2D数组：
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can add a new column to the DataFrame with specified values and the same
    index with the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方法向DataFrame添加具有指定值和相同索引的新列：
- en: '[PRE22]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The updated DataFrame is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的DataFrame如下：
- en: '[PRE23]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can assign names to the DataFrame's index and columns.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为DataFrame的索引和列分配名称。
- en: 'We can name the index by modifying the `pandas.DataFrame.index.name` attribute:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过修改`pandas.DataFrame.index.name`属性来命名索引：
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And that yields the following updated DataFrame:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下更新的DataFrame：
- en: '[PRE25]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The columns can be renamed using the `pandas.DataFrame.columns.name` attribute:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`pandas.DataFrame.columns.name`属性重命名列：
- en: '[PRE26]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The new DataFrame is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 新的DataFrame如下：
- en: '[PRE27]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding examples demonstrated how a DataFrame can be constructed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子演示了如何构建DataFrame。
- en: pandas.Index
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas.Index
- en: Both the `pandas.Series` and `pandas.DataFrame` data structures utilize the
    `pandas.Index` data structure.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.Series`和`pandas.DataFrame`数据结构都利用`pandas.Index`数据结构。'
- en: 'There are many special types of `Index` objects:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多特殊类型的`Index`对象：
- en: '`Int64Index`: `Int64Index` contains integer index values.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int64Index`：`Int64Index`包含整数索引值。'
- en: '`MultiIndex`: `MultiIndex` contains indices that are tuples used in hierarchical
    indexing, which we will explore in this chapter.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultiIndex`：`MultiIndex`包含元组索引，用于分层索引，我们将在本章中探讨。'
- en: '`DatetimeIndex`: `DatetimeIndex`, which we have seen before, contains datetime
    index values for time series datasets.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DatetimeIndex`：`DatetimeIndex`，我们之前见过，包含时间序列数据集的日期时间索引值。'
- en: 'We can create a `pandas.Index` object by doing the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式创建一个`pandas.Index`对象：
- en: '[PRE28]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The result is this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是这样的：
- en: '[PRE29]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`Index` objects are immutable and thus cannot be modified in place.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index`对象是不可变的，因此不能就地修改。'
- en: 'Let''s see what happens if we try to modify an element in an `Index` object:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我们尝试修改`Index`对象中的元素会发生什么：
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We get the following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Python warns us that we cannot manually modify the index object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Python警告我们不能手动修改索引对象。
- en: We have now learned how to construct series and DataFrames. Let's explore the
    essential operations done on DataFrames.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何构建系列和DataFrame。让我们探索在DataFrame上进行的基本操作。
- en: Learning essential pandas.DataFrame operations
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习基本的pandas.DataFrame操作
- en: This section describes the essential operations done on DataFrames. Knowing
    they exist and how to use them will save you an enormous amount of time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了在DataFrame上进行的基本操作。知道它们的存在以及如何使用它们将为您节省大量时间。
- en: Indexing, selection, and filtering of DataFrames
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame的索引、选择和过滤
- en: 'pandas data structures are indexed by special `Index` objects (while `numpy.ndarrays`
    and Python list objects are only indexable by integers). The steps for this lesson
    are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: pandas数据结构是由特殊的`Index`对象索引的（而`numpy.ndarrays`和Python列表对象只能通过整数进行索引）。本课的步骤如下：
- en: 'Let''s inspect the contents of the `df2` DataFrame created earlier in the chapter:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查本章前面创建的`df2`DataFrame的内容：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can select the Series of values in column `B` by performing the following
    operation:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下操作选择列`B`中的值的系列：
- en: '[PRE34]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This yields the following Series:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下系列：
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can select multiple columns by passing a list of column names (somewhat
    similar to what we saw with `numpy.ndarrays`):'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过传递列名列表来选择多列（与我们在`numpy.ndarrays`中看到的类似）：
- en: '[PRE36]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This yields the following DataFrame with two columns:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下包含两列的DataFrame：
- en: '[PRE37]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can use Boolean selection with DataFrames by doing the following:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用DataFrame进行布尔选择：
- en: '[PRE38]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This selects the following rows, which satisfy the provided condition:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这选择了满足提供条件的以下行：
- en: '[PRE39]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `pandas.DataFrame.loc[...]` attribute lets us index rows instead of columns.
    The following selects the two rows `c` and `d`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.loc[...]`属性让我们索引行而不是列。以下选择了两行`c`和`d`：'
- en: '[PRE40]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This yields the following subset DataFrame:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下子集DataFrame：
- en: '[PRE41]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'pandas DataFrames still support standard integer indexing through the `pandas.DataFrame.iloc[...]`
    attribute. We can select the first row by doing this:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pandas DataFrame仍然支持通过`pandas.DataFrame.iloc[...]`属性进行标准整数索引。我们可以通过这样做选择第一行：
- en: '[PRE42]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This selects the following single-row DataFrame:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这选择了以下单行DataFrame：
- en: '[PRE43]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can modify the DataFrame with an operation like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这样的操作修改DataFrame：
- en: '[PRE44]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This updates the DataFrame to this new DataFrame:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新DataFrame为这个新的DataFrame：
- en: '[PRE45]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In this section, we have learned how to index, select, and filter DataFrames.
    In the next section, we will learn how to drop rows and columns.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经学会了如何对DataFrame进行索引、选择和过滤。在下一节中，我们将学习如何删除行和列。
- en: Dropping rows and columns from a DataFrame
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从DataFrame中删除行和列
- en: 'Dropping rows and columns from a DataFrame is a critical operation – it not
    only helps save the computer''s memory but also ensures that the DataFrame contains
    only logically needed information. The steps are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从DataFrame中删除行和列是一个关键操作-它不仅有助于节省计算机的内存，还确保DataFrame只包含逻辑上需要的信息。步骤如下：
- en: 'Let''s display the current DataFrame:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们显示当前的DataFrame：
- en: '[PRE46]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This DataFrame contains the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个DataFrame包含以下内容：
- en: '[PRE47]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To drop the row at index `b`, we use the `pandas.DataFrame.drop(...)` method:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除索引为`b`的行，我们使用`pandas.DataFrame.drop(...)`方法：
- en: '[PRE48]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This yields a new DataFrame without the row at index `b`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了一个不包含索引`b`的新DataFrame：
- en: '[PRE49]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s check whether the original DataFrame was changed:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查原始DataFrame是否已更改：
- en: '[PRE50]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The output shows that it was not, that is, `pandas.DataFrame.drop(...)` is
    not in place by default:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示它不是，默认情况下不是`pandas.DataFrame.drop(...)`是就地进行的：
- en: '[PRE51]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'To modify the original DataFrame, we use the `inplace=` parameter:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要修改原始DataFrame，我们使用`inplace=`参数：
- en: '[PRE52]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The new in-place modified DataFrame is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 就地修改后的新DataFrame如下：
- en: '[PRE53]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can drop multiple rows as well:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以删除多行：
- en: '[PRE54]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This returns the following new DataFrame:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回以下新DataFrame：
- en: '[PRE55]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'To drop columns instead of rows, we specify the additional `axis=` parameter:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除列而不是行，我们指定额外的`axis=`参数：
- en: '[PRE56]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This gives us this new DataFrame with two dropped columns:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们这个新的DataFrame，其中删除了两列：
- en: '[PRE57]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: We have learned how to drop rows and columns in this section. In the next section,
    we will learn how to sort values and rand them.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中学会了如何删除行和列。在下一节中，我们将学习如何对值进行排序和排名。
- en: Sorting values and ranking the values' order within a DataFrame
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对DataFrame进行排序和排名值的顺序
- en: 'First, let''s create a DataFrame with integer row indices, integer column names,
    and random values:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个具有整数行索引、整数列名和随机值的数据框：
- en: '[PRE58]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The DataFrame contains the following data:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框包含以下数据：
- en: '[PRE59]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '`pandas.DataFrame.sort_index(...)` sorts the DataFrame by index values:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.sort_index(...)`按索引值对数据框进行排序：'
- en: '[PRE60]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The result is as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE61]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We can also sort by column name values by specifying the `axis` parameter:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过指定“axis”参数按列名值进行排序：
- en: '[PRE62]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This yields the following DataFrame with the columns arranged in order:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下按顺序排列的数据框：
- en: '[PRE63]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'To sort the values in the DataFrame, we use the `pandas.DataFrame.sort_values(...)`
    method, which takes a `by=` parameter specifying which column(s) to sort by:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要对数据框中的值进行排序，我们使用“pandas.DataFrame.sort_values(...)”方法，该方法使用“by=”参数指定要按其排序的列：
- en: '[PRE64]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This yields the following DataFrame sorted by the values in the first column:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下按第一列的值排序的数据框：
- en: '[PRE65]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The `pandas.DataFrame.rank(...)` method yields a DataFrame containing the rank/order
    of values in each column:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: “pandas.DataFrame.rank(...)”方法产生一个包含每列值的排名/顺序的数据框：
- en: '[PRE66]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The output contains the rank (in ascending order) of values:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包含值的排名（按升序）：
- en: '[PRE67]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: With this lesson completed, in the next section we will perform arithmetic operations
    on DataFrames.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了这节课，接下来我们将在数据框上执行算术运算。
- en: Arithmetic operations on DataFrames
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据框上的算术运算
- en: 'First, let''s create two DataFrames for our examples:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为我们的示例创建两个数据框：
- en: '[PRE68]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The `df1` DataFrame contains the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: “df1”数据框包含以下数据：
- en: '[PRE69]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now we create the `df2` DataFrame:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建“df2”数据框：
- en: '[PRE70]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'This contains the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含以下内容：
- en: '[PRE71]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We can add the two DataFrames together. Note that they have different index
    values as well as different columns:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将两个数据框相加。请注意，它们具有不同的索引值以及不同的列：
- en: '[PRE72]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The output is a summation of elements if the index and column exists in both
    DataFrames, otherwise it is NaN:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果索引和列在两个数据框中都存在，则输出是元素的总和，否则是NaN：
- en: '[PRE73]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We can use the `pandas.DataFrame.add(...)` method with `fill_value=` to a value
    to be used instead of `NaN` (in this case `0`):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用“pandas.DataFrame.add(...)”方法，并使用“fill_value=”来替代“NaN”（在本例中为“0”）：
- en: '[PRE74]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The output is as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE75]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'We can perform arithmetic operations between DataFrames and Series as well:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在数据框和系列之间执行算术运算：
- en: '[PRE76]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The output of this operation is the following (since the right-hand-side only
    had `colB`):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作的输出是以下内容（因为右侧只有“colB”）：
- en: '[PRE77]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Let's now learn how to merge and combine multiple DataFrames into a single Dataframe.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们学习如何将多个数据框合并和组合成单个数据框。
- en: Merging and combining multiple DataFrames into a single DataFrame
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将多个数据框合并和组合成单个数据框
- en: 'Let''s start by creating two DataFrames, `df1` and `df2`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建两个数据框，“df1”和“df2”：
- en: '[PRE78]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The `df1` DataFrame has the following data:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: “df1”数据框包含以下数据：
- en: '[PRE79]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now we create `df2`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建“df2”：
- en: '[PRE80]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The `df2` DataFrame has the following data:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: “df2”数据框包含以下数据：
- en: '[PRE81]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The `pandas.merge(...)` method joins/merges two DataFrames. The `left_index=`
    and `right_index=` parameters indicate that the merge should be performed on Index
    values in both DataFrames:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: “pandas.merge(...)”方法连接/合并两个数据框。“left_index=”和“right_index=”参数指示应在两个数据框的索引值上执行合并：
- en: '[PRE82]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'That yields the following merged DataFrame. The `_x` and `_y` suffixes are
    added to differentiate between left and right DataFrame columns with the same
    name:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下合并的数据框。添加了“_x”和“_y”后缀以区分左侧和右侧数据框中具有相同名称的列：
- en: '[PRE83]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'We can specify custom suffixes with the `suffixes=` parameter:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用“suffixes=”参数指定自定义后缀：
- en: '[PRE84]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The result is the following DataFrame with the suffixes we provided:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下数据框，带有我们提供的后缀：
- en: '[PRE85]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'We can specify the behavior of the join (outer, inner, left, or right join)
    using the `how=` parameter:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用“how=”参数指定连接的行为（外连接、内连接、左连接或右连接）：
- en: '[PRE86]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'This yields the following DataFrame with `NaNs` for missing values:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下数据框，其中缺少值为“NaN”：
- en: '[PRE87]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'pandas DataFrames themselves have a `pandas.DataFrame.merge(...)` method that
    behaves the same way:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: pandas数据框本身有一个“pandas.DataFrame.merge(...)”方法，行为相同：
- en: '[PRE88]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'This yields the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下结果：
- en: '[PRE89]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Another alternative is the `pandas.DataFrame.join(...)` method:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是“pandas.DataFrame.join(...)”方法：
- en: '[PRE90]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'And the output of the join (left join by default) is as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 连接的输出（默认为左连接）如下：
- en: '[PRE91]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The `pandas.concat(...)` method combines DataFrames by concatenating rows together:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.concat(...)`方法通过将行连接在一起来组合数据框：'
- en: '[PRE92]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'This yields the following concatenated DataFrame with `NaNs` for missing values:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下连接的数据框，其中缺少值为“NaN”：
- en: '[PRE93]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'We can concatenate across columns by specifying the `axis=` parameter:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定“axis=”参数在列之间进行连接：
- en: '[PRE94]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'This yields the following DataFrame with additional columns from `df2`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下数据框，其中包含来自“df2”的附加列：
- en: '[PRE95]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: We will now look at hierarchical indexing.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下分层索引。
- en: Hierarchical indexing
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分层索引
- en: So far, we have been dealing with Index objects that were a simple single value.
    Hierarchical indexing uses `MultiIndex` objects, which are tuples of multiple
    values per Index. This lets us create sub-DataFrames inside a single DataFrame.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理单个值的索引对象。分层索引使用“MultiIndex”对象，它是每个索引的多个值的元组。这使我们能够在单个数据框内创建子数据框。
- en: 'Let''s create a `MultiIndex` DataFrame:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个“MultiIndex”数据框：
- en: '[PRE96]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'This is the layout of the `MultiIndex` DataFrame that uses hierarchical indexing:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用分层索引的“MultiIndex”数据框的布局：
- en: '[PRE97]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'We can assign names to the `MultiIndex` object with the `pandas.MultiIndex.names`
    attribute – it requires a list of names with the same dimension as the dimensions
    of the `MultiIndex` DataFrame (in this case, two elements):'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用“pandas.MultiIndex.names”属性为“MultiIndex”对象指定名称-它需要一个与“MultiIndex”数据框的维度相同的名称列表（在本例中为两个元素）：
- en: '[PRE98]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'This yields the following:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下结果：
- en: '[PRE99]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The `pandas.DataFrame.reset_index(...)` method removes all indexing levels
    from a `MultiIndex` DataFrame by default, but can be used to remove one or more
    levels:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.reset_index(...)`方法默认情况下会从`MultiIndex` DataFrame中删除所有索引级别，但可以用于删除一个或多个级别：'
- en: '[PRE100]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'This leads to the following integer indexed DataFrame and the `MultiIndex`
    values are added as columns in this DataFrame:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致以下整数索引的DataFrame和`MultiIndex`值被添加为此DataFrame的列：
- en: '[PRE101]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The `pandas.DataFrame.unstack(...)` method has similar behavior and pivots
    the inner level of indexing and converts them to columns:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.unstack(...)`方法具有类似的行为，并且将内部索引的级别旋转并将它们转换为列：'
- en: '[PRE102]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Let''s inspect the new DataFrame where the innermost indexing level `[1, 2,
    3]` becomes columns:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查内部索引级别`[1, 2, 3]`变为列的新DataFrame：
- en: '[PRE103]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The `pandas.DataFrame.stack(...)` method does the opposite of `unstack(...)`:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.stack(...)`方法与`unstack(...)`相反：'
- en: '[PRE104]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The output DataFrame is the original DataFrame with hierarchical indexing:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 输出DataFrame是原始DataFrame，具有分层索引：
- en: '[PRE105]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Let''s examine the structure of the `MultiIndex` DataFrame. Note that we first
    call `pandas.DataFrame.stack(...)` to convert the columns `[A, B]` into a third
    level of indexing in the `MultiIndex` DataFrame:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`MultiIndex` DataFrame的结构。请注意，我们首先调用`pandas.DataFrame.stack(...)`将列`[A,
    B]`转换为`MultiIndex` DataFrame中的第三级索引：
- en: '[PRE106]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'This gives us a `MultiIndex` object with three levels of indexing:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们一个具有三个索引级别的`MultiIndex`对象：
- en: '[PRE107]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Now we will learn how to group operations in DataFrames.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将学习如何在DataFrame中进行分组操作。
- en: Grouping operations in DataFrames
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame中的分组操作
- en: 'Grouping operations in pandas generally follow the split-apply-combine process
    of operations:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: pandas中的分组操作通常遵循操作的分割-应用-合并过程：
- en: First, the data is split into groups based on one or more keys.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，根据一个或多个键将数据分成组。
- en: Then we apply necessary functions to these groups to compute the desired results.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们对这些组应用必要的函数来计算所需的结果。
- en: Finally, we combine them to build the transformed dataset.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将它们组合起来构建转换后的数据集。
- en: 'Thus, grouping a single indexed DataFrame builds a hierarchical DataFrame.
    The steps are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对单个索引的DataFrame进行分组会构建一个分层的DataFrame。步骤如下：
- en: 'Let''s use the `pandas.DataFrame.reset_index(…)` method to remove all hierarchical
    indexing from our previous `df` DataFrame:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`pandas.DataFrame.reset_index(…)`方法从先前的`df` DataFrame中删除所有分层索引：
- en: '[PRE108]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'This returns the following DataFrame with integer indexing:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下带有整数索引的DataFrame：
- en: '[PRE109]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Let''s use the `pandas.DataFrame.groupby(...)` method to group the `A` and
    `B` columns by the `alpha` column:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`pandas.DataFrame.groupby(...)`方法按“alpha”列对“A”和“B”列进行分组：
- en: '[PRE110]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'This yields the following `DataFrameGroupBy` object, which we can subsequently
    operate on:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下`DataFrameGroupBy`对象，随后我们可以对其进行操作：
- en: '[PRE111]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'We can use the `DataFrameGroupBy.describe(...)` method to collect summary descriptive
    statistics:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`DataFrameGroupBy.describe(...)`方法收集摘要描述性统计信息：
- en: '[PRE112]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'This yields the following output where statistics for `A` and `B` are generated
    but grouped by the `alpha` column:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下输出，其中生成了“A”和“B”的统计数据，但是按“alpha”列分组：
- en: '[PRE113]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'We can apply the `pandas.DataFrame.unstack(...)` method using the `DataFrameGroupBy.apply(...)`
    method, which accepts different functions and applies them to each group of the
    `grouped` object:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`DataFrameGroupBy.apply(...)`方法应用`pandas.DataFrame.unstack(...)`方法，该方法接受不同的函数并将它们应用于`grouped`对象的每个组：
- en: '[PRE114]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'This generates the following hierarchical DataFrame:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下分层DataFrame：
- en: '[PRE115]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'There also exists the `DataFrameGroupBy.agg(...)` method, which accepts functions
    and aggregates each column for each group using that method. The next example
    aggregates using the `mean` method:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还存在`DataFrameGroupBy.agg(...)`方法，它接受函数并使用该方法对每个组的每列进行聚合。下一个示例使用`mean`方法进行聚合：
- en: '[PRE116]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The output contains the mean for columns `A` and `B` grouped by values in `alpha`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包含按“alpha”中的值分组的列“A”和“B”的平均值：
- en: '[PRE117]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'A similar method is the `DataFrameGroupBy.transform(...)` method, with the
    only difference being that transform works on one column at a time and returns
    a sequence of values of the same length as the series, while apply can return
    any type of result:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似的方法是`DataFrameGroupBy.transform(...)`方法，唯一的区别是transform一次只对一列起作用，并返回与系列长度相同的值序列，而apply可以返回任何类型的结果：
- en: '[PRE118]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'This generates the Z score for columns `A` and `B`, which we explained in [*Chapter
    2*](B15029_02_Final_NM_ePub.xhtml#_idTextAnchor026), *Exploratory Data Analysis*:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为列`A`和`B`生成Z得分，我们在[*第2章*](B15029_02_Final_NM_ePub.xhtml#_idTextAnchor026)中解释了*探索性数据分析*：
- en: '[PRE119]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: We will now learn how to transform values in DataFrames' axis indices.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将学习如何转换DataFrame的轴索引中的值。
- en: Transforming values in DataFrames' axis indices
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换DataFrame的轴索引中的值
- en: 'Let''s first reinspect the `df2` DataFrame that we will be using in these examples:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先重新检查一下我们将在这些示例中使用的`df2` DataFrame：
- en: '[PRE120]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'This contains the following data:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含以下数据：
- en: '[PRE121]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'We can rename the Index labels using the `pandas.DataFrame.index` attribute
    as we saw before:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`pandas.DataFrame.index`属性重命名索引标签，就像我们之前看到的那样：
- en: '[PRE122]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'This generates the following transformed DataFrame:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下转换后的DataFrame：
- en: '[PRE123]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: The `pandas.Index.map(...)` method applies functions to transform the Index.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.Index.map(...)`方法应用函数来转换索引。'
- en: 'In the following example, the `map` function takes the first three characters
    of the name and sets that as the new name:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，`map`函数获取名称的前三个字符，并将其设置为新名称：
- en: '[PRE124]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The output is as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE125]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The `pandas.DataFrame.rename(...)` method lets us transform both Index names
    and column names and accepts a dictionary mapping from the old name to the new
    name:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.rename(...)`方法让我们可以转换索引名称和列名称，并接受从旧名称到新名称的字典映射：'
- en: '[PRE126]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'The resulting DataFrame has new labels on both axes:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的DataFrame在两个轴上都有新标签：
- en: '[PRE127]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: With this lesson learned, we will learn how to handle missing data in DataFrames.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个教训，我们将学习如何处理DataFrame中的缺失数据。
- en: Handling missing data in DataFrames
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在DataFrame中处理缺失数据
- en: Missing data is a common phenomenon in data science and can happen for multiple
    reasons – for example, technical error, human error, market holiday.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失数据在数据科学中是常见现象，可能由多种原因引起-例如技术错误、人为错误、市场假期。
- en: Filtering out missing data
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤掉缺失数据
- en: When dealing with missing data, the first option is to remove all observations
    with any missing data.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失数据时，第一个选项是删除所有具有任何缺失数据的观察。
- en: 'This code block modifies the `df2` DataFrame using the `pandas.DataFrame.at[...]`
    attribute and sets some values to `NaN`:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码块使用`pandas.DataFrame.at[...]`属性修改`df2` DataFrame并将一些值设置为`NaN`：
- en: '[PRE128]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The modified DataFrame is as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的DataFrame如下：
- en: '[PRE129]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The `pandas.DataFrame.isnull(...)` method finds missing values in a DataFrame:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.isnull(...)`方法在DataFrame中查找缺失值：'
- en: '[PRE130]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'The result is a DataFrame with `True` where values are missing and `False`
    otherwise:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个DataFrame，其中缺失值为`True`，否则为`False`：
- en: '[PRE131]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The `pandas.DataFrame.notnull(...)` method does the opposite (detects non-missing
    values):'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.notnull(...)`方法则相反（检测非缺失值）：'
- en: '[PRE132]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'The output is the following DataFrame:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下DataFrame：
- en: '[PRE133]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The `pandas.DataFrame.dropna(...)` method allows us to drop rows with missing
    values. The additional `how=` parameter controls which rows get dropped. To drop
    rows that have `NaN` for all fields, we do the following:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.dropna(...)`方法允许我们删除具有缺失值的行。附加的`how=`参数控制哪些行被删除。要删除所有字段都为`NaN`的行，我们执行以下操作：'
- en: '[PRE134]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'The result is the following modified DataFrame with the `Bet` row removed since
    that was the only one with all `NaN`:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下修改后的DataFrame，`Bet`行被删除，因为这是唯一一个所有值都为`NaN`的行：
- en: '[PRE135]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Setting `how=` to `any` removes rows with any NaN values:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 将`how=`设置为`any`会删除具有任何NaN值的行：
- en: '[PRE136]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'This gives us the following DataFrame with all non-NaN values:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下DataFrame，其中所有非NaN值：
- en: '[PRE137]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: We will now look at how to fill in missing data.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何填补缺失数据。
- en: Filling in missing data
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充缺失数据
- en: The second option when dealing with missing data is to fill in the missing values
    either with a value of our choice or using other valid values in the same column
    to duplicate/extrapolate the missing values.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失数据的第二个选项是使用我们选择的值填充缺失值，或者使用同一列中的其他有效值来复制/外推缺失值。
- en: 'Let''s start by re-inspecting the `df2` DataFrame:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始重新检查`df2` DataFrame：
- en: '[PRE138]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'This yields the following DataFrame with some missing values:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下带有一些缺失值的DataFrame：
- en: '[PRE139]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Now, let''s use the `pandas.DataFrame.fillna(...)` method with the `method=''backfill''`
    and `inplace=True` arguments to use the `backfill` method to backward fill the
    missing values from the other values and change the DataFrame in place:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`pandas.DataFrame.fillna(...)`方法，使用`method='backfill'`和`inplace=True`参数来使用`backfill`方法从其他值向后填充缺失值，并在原地更改DataFrame：
- en: '[PRE140]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'The new DataFrame contains the following:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 新的DataFrame包含以下内容：
- en: '[PRE141]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: The `NaN` value at `(Del,colB)` is because there were no observations after
    that row, so backfill could not be performed. That can be fixed instead with forward
    fill.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`(Del,colB)`处的`NaN`值是因为在该行之后没有观察到数据，因此无法进行向后填充。可以改用向前填充来解决这个问题。'
- en: The transformation of DataFrames with functions and mappings
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用函数和映射转换DataFrame
- en: pandas DataFrame values can also be modified by passing functions and dictionary
    mappings that operate on one or more data values and generate new transformed
    values.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递操作一个或多个数据值并生成新转换值的函数和字典映射，也可以修改pandas DataFrame值。
- en: 'Let''s modify the `df2` DataFrame by adding a new column, `Category`, containing
    discrete text data:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`df2` DataFrame添加一个包含离散文本数据的新列`Category`来修改DataFrame：
- en: '[PRE142]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The new DataFrame contains the following:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 新的DataFrame包含以下内容：
- en: '[PRE143]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'The `pandas.Series.map(...)` method accepts a dictionary containing a mapping
    from the old value to the new value and transforms the values. The following snippet
    changes the text values in `Category` to single characters:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.Series.map(...)`方法接受包含从旧值到新值的映射的字典，并转换值。以下代码片段将`Category`中的文本值更改为单个字符：'
- en: '[PRE144]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'The updated DataFrame is as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的DataFrame如下：
- en: '[PRE145]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: The `pandas.DataFrame.applymap(...)` method allows us to apply functions to
    data values in a DataFrame.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.applymap(...)`方法允许我们对DataFrame中的数据值应用函数。'
- en: 'The following code applies the `numpy.exp(...)` method, which calculates the
    exponential:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码应用了`numpy.exp(...)`方法，该方法计算指数：
- en: '[PRE146]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'The result is a DataFrame containing exponential values of the original DataFrame''s
    values (except the `NaN` value):'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个包含原始DataFrame值的指数值的DataFrame（除了`NaN`值）：
- en: '[PRE147]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Now that we've learned how to transform DataFrames, we will see how to discretize
    and bucket values in DataFrames.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何转换DataFrame，我们将看到如何在DataFrame中离散化和分桶值。
- en: Discretization/bucketing of DataFrame values
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame值的离散化/分桶
- en: The simplest way to achieve discretization is to create ranges of values and
    assign a single discrete label to all values that fall within a certain bucket.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 实现离散化的最简单方法是创建值范围并为所有落入某个桶内的值分配单个离散标签。
- en: 'First, let''s generate a random valued ndarray for our use:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为我们的使用生成一个随机值的ndarray：
- en: '[PRE148]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'This contains the following:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 包含以下内容：
- en: '[PRE149]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'The `pandas.cut(...)` method can be used to discretize these values. The following
    code uses the `bins=` and `labels=[...]` arguments to bin the values into five
    discrete values with the labels provided:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.cut(...)`方法可用于离散化这些值。以下代码使用`bins=`和`labels=[...]`参数将值分成五个离散值，并提供标签：'
- en: '[PRE150]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'We get the discrete values after the transformation:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后得到离散值如下：
- en: '[PRE151]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: The `pandas.qcut(...)` method is similar but uses quartiles to bin the continuous
    values to discrete values so that each category has the same amount of observations.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.qcut(...)`方法类似，但使用四分位数将连续值分成离散值，以便每个类别具有相同数量的观察。'
- en: 'The following builds five discrete bins using the `q=` parameter:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`q=`参数构建了五个离散的箱： '
- en: '[PRE152]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'And the quartile discretization yields the following categories:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 四分位数离散化产生以下类别：
- en: '[PRE153]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'The following code block builds a pandas DataFrame consisting of the original
    continuous values as well as the categories generated from `cut` and `qcut`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块构建了一个pandas DataFrame，其中包含原始连续值以及从`cut`和`qcut`生成的类别：
- en: '[PRE154]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'This DataFrame allows side-by-side comparison:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 这个DataFrame允许并排比较：
- en: '[PRE155]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'The `pandas.Categorical.categories` attribute provides us with the bucket ranges:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.Categorical.categories`属性为我们提供了桶范围：'
- en: '[PRE156]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'In this case, the buckets/range of values are as follows:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，值的桶/范围如下：
- en: '[PRE157]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'We can inspect the buckets for `qcut` as well:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查`qcut`的桶：
- en: '[PRE158]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'They are slightly different from the previous buckets and they are shown as
    follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 它们与先前的桶略有不同，并显示如下：
- en: '[PRE159]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: We will now look at permuting and sampling DataFrame values to generate new
    DataFrames.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看对DataFrame值进行排列和抽样以生成新的DataFrame。
- en: Permuting and sampling DataFrame values to generate new DataFrames
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对DataFrame值进行排列和抽样以生成新的DataFrame
- en: Permuting available datasets to generate new datasets and sampling datasets
    to either sub-sample (reduce the number of observations) or super-sample (increase
    the number of observations) are common operations in statistical analysis.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 对可用数据集进行排列以生成新数据集，并对数据集进行抽样以进行子抽样（减少观察数量）或超抽样（增加观察数量）是统计分析中常见的操作。
- en: 'First, let''s generate a DataFrame of random values to work with:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们生成一个随机值的DataFrame来使用：
- en: '[PRE160]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'The result is the following:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE161]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'The `numpy.random.permutation(...)` method, when applied to a DataFrame, randomly
    shuffles along the Index axis and can be used to permute the rows in the dataset:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于DataFrame时，`numpy.random.permutation(...)`方法会沿着索引轴随机洗牌，并可用于对数据集中的行进行排列：
- en: '[PRE162]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'This yields the following DataFrame with the rows randomly shuffled:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下随机洗牌的DataFrame：
- en: '[PRE163]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: We can use the `numpy.random.randint(...)` method to generate random integers
    within a certain range and then use the `pandas.DataFrame.iloc[...]` attribute
    to randomly sample with replacement (the same observation can be picked more than
    once) from our DataFrame.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`numpy.random.randint(...)`方法在一定范围内生成随机整数，然后使用`pandas.DataFrame.iloc[...]`属性从DataFrame中进行随机抽样（可以多次选择相同的观察结果）。
- en: 'The following code block picks out five rows randomly sampled with replacement:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块随机抽取了五行样本：
- en: '[PRE164]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'This yields the following randomly sub-sampled DataFrame:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下随机子抽样的DataFrame：
- en: '[PRE165]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: In the following section, we will look at exploring file operations with `pandas.DataFrames`.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看看如何使用`pandas.DataFrames`探索文件操作。
- en: Exploring file operations with pandas.DataFrames
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pandas.DataFrames探索文件操作
- en: pandas supports the persistence of DataFrames in both plain-text and binary
    formats. The common text formats are CSV and JSON files, the most used binary
    formats are Excel XLSX, HDF5, and pickle.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: pandas支持以纯文本和二进制格式持久化DataFrame。常见的文本格式是CSV和JSON文件，最常用的二进制格式是Excel XLSX、HDF5和pickle。
- en: In this book, we focus on plain-text persistence.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们专注于纯文本持久化。
- en: CSV files
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSV文件
- en: '**CSV** files (**comma-separated values** files) are data-exchange standard
    files.'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV**文件（**逗号分隔值**文件）是数据交换标准文件。'
- en: Writing CSV files
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入CSV文件
- en: 'Writing a pandas DataFrame to a CSV file is easily achievable using the `pandas.DataFrame.to_csv(...)`
    method. The `header=` parameter controls whether a header is written to the top
    of the file or not and the `index=` parameter controls whether the Index axis
    values are written to the file or not:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pandas.DataFrame.to_csv(...)`方法可以轻松将pandas DataFrame写入CSV文件。`header=`参数控制是否将标题写入文件顶部，`index=`参数控制是否将索引轴值写入文件：
- en: '[PRE166]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'We can inspect the file written to disk using the following Linux command typed
    into the notebook. The `!` character instructs the notebook to run a shell command:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下Linux命令在笔记本中输入，来检查写入磁盘的文件。`!`字符指示笔记本运行shell命令：
- en: '[PRE167]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'The file contains the following lines:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含以下行：
- en: '[PRE168]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Reading CSV files
  id: totrans-421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取CSV文件
- en: 'Reading a CSV file and building a pandas DataFrame from the data in it can
    be achieved using the `pandas.read_csv(...)` method. Here we will specify the
    character (although that is the default for `read_csv`), the `index_col=` parameter
    to specify which column to treat as the Index of the DataFrame, and the `nrows=`
    parameter to specify how many rows to read in:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`pandas.read_csv(...)`方法读取CSV文件并从中构建pandas DataFrame。在这里，我们将指定字符（尽管这是`read_csv`的默认值），`index_col=`参数指定要将哪一列视为DataFrame的索引，`nrows=`参数指定要读取多少行：
- en: '[PRE169]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'This builds the following DataFrame, which is the same DataFrame that was written
    to disk:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 这构建了以下DataFrame，这是与写入磁盘的相同DataFrame：
- en: '[PRE170]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'We can also specify the `chunksize=` parameter, which reads in the specified
    number of lines at a time, which can help when exploring very large datasets contained
    in very large files:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以指定`chunksize=`参数，该参数一次读取指定数量的行，这在探索非常大的文件中包含的非常大的数据集时会有所帮助：
- en: '[PRE171]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'That returns a pandas `TextFileReader` generator, which we can iterate through
    as needed instead of loading the entire file at once:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回一个pandas `TextFileReader`生成器，我们可以根据需要进行迭代，而不是一次性加载整个文件：
- en: '[PRE172]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'We can force the generator to finish evaluation by wrapping it in a list and
    observe the entire DataFrame loaded in chunks of two lines:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将生成器包装在列表中来强制生成器完成评估，并观察以两行为一组加载的整个DataFrame：
- en: '[PRE173]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'That gives us the following list of two-line blocks:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下两行块的列表：
- en: '[PRE174]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: We will now look at how to explore file operations in JSON files.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何在JSON文件中探索文件操作。
- en: JSON files
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON文件
- en: JSON files are based upon data structures identical to Python dictionaries.
    This makes JSON files very convenient for many purposes including representing
    DataFrames as well as representing configuration files.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文件基于与Python字典相同的数据结构。这使得JSON文件非常方便，可以用于许多目的，包括表示DataFrame以及表示配置文件。
- en: 'The `pandas.DataFrame.to_json(...)` method conveniently writes a DataFrame
    to a JSON file on disk. Here we write only the first four rows:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.to_json(...)`方法方便地将DataFrame写入磁盘上的JSON文件。这里我们只写入前四行：'
- en: '[PRE175]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Let''s check out the JSON file written to disk:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看写入磁盘的JSON文件：
- en: '[PRE176]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'This gives us the following dictionary-style JSON file written to disk:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就得到了以下以字典形式的JSON文件写入磁盘：
- en: '[PRE177]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Reading JSON files back into Pandas DataFrames is just as easy with the `pandas.read_json(...)`
    method:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pandas.read_json(...)`方法将JSON文件读回Pandas DataFrames同样很容易：
- en: '[PRE178]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'This gives us back the original four-row DataFrame that was written to disk:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以得到写入磁盘的原始四行DataFrame：
- en: '[PRE179]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Congrats on successfully completing this lesson!
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺你成功完成了这节课！
- en: Summary
  id: totrans-448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced us to the pandas library, upon which the majority, if
    not all, time-series operations in Python are done. We have learned how to create
    a DataFrame, how to alter it, and how to persist it.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们介绍了pandas库，大部分，如果不是全部，Python中的时间序列操作都是基于它完成的。我们已经学会了如何创建DataFrame，如何修改它，以及如何持久化它。
- en: Pandas DataFrames are principally for high-performance bulk data manipulation,
    selecting and reshaping data. They are the Python version of Excel worksheets.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas DataFrames主要用于高性能的大数据操作，选择和重塑数据。它们是Python版本的Excel工作表。
- en: In the next chapter, we will investigate visualization in Python using Matplotlib.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Matplotlib在Python中进行可视化研究。
