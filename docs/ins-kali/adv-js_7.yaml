- en: '*Appendix*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*附录*'
- en: About
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于
- en: This section is included to assist the students in performing the activities
    in the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在帮助学生执行书中的活动。它包括详细的步骤，学生需要执行这些步骤以实现活动的目标。
- en: 'Chapter 1: Introducing ECMAScript 6'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章：介绍ECMAScript 6
- en: Activity 1 – Implementing Generators
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动1 - 实现生成器
- en: You have been tasked with building a simple app that generates numbers in the
    Fibonacci sequence upon request. The app generates the next number in the sequence
    for each request and resets the sequence it is given an input. Use a generator
    to generate the Fibonacci sequence. If a value is passed into the generator, reset
    the sequence. You may start the Fibonacci sequence at n=1 for simplicity.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您被要求构建一个简单的应用程序，根据请求生成斐波那契数列中的数字。该应用程序为每个请求生成序列中的下一个数字，并在给定输入时重置序列。使用生成器生成斐波那契数列。如果将一个值传递给生成器，则重置序列。为了简单起见，您可以从n=1开始斐波那契数列。
- en: 'To highlight how the generators can be used to build iterative datasets, follow
    these steps:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了突出生成器如何用于构建迭代数据集，请按照以下步骤进行：
- en: Look up the Fibonacci sequence and understand how the next value is calculated.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找斐波那契数列并了解下一个值是如何计算的。
- en: Create a generator for the Fibonacci sequence.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为斐波那契数列创建一个生成器。
- en: Inside the generator, set up the default values for `current` and `next` (0,
    1) using variables `n2` and `n1`.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成器内，使用变量`n2`和`n1`设置`current`和`next`（0, 1）的默认值。
- en: Create an infinite `while` loop.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个无限的`while`循环。
- en: Inside the `while` loop, use the `yield` keyword to provide the current value
    in the sequence and save the return value of the yield statement into a variable
    called `input`.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`循环内，使用`yield`关键字提供序列中的当前值，并将yield语句的返回值保存到名为`input`的变量中。
- en: If input contains a value, reset the variables `n2` and `n1` to their starting
    values.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入包含一个值，则将变量`n2`和`n1`重置为它们的起始值。
- en: Inside the `while` loop, calculate the new next value from `current` + `next`
    and save it into the variable next.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`循环内，从`current` + `next`计算出新的下一个值，并将其保存到变量next中。
- en: Otherwise update `n2` to contain the value from `n1` (the `next` value) and
    set `n1` to the `next` value that we calculated at the top of the `while` loop.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，将`n2`更新为包含`n1`（`next`值）的值，并将`n1`设置为我们在`while`循环顶部计算的`next`值。
- en: '**Code:**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '**index.js**'
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**index.js**'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Snippet 1.87: Implementing a generator'
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.87：实现生成器
- en: https://bit.ly/2CV4KAi
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: https://bit.ly/2CV4KAi
- en: '**Outcome:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果：**'
- en: '![Figure 1.19: Fibonacci sequence with a generator](image/Figure_1.19.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图1.19：带有生成器的斐波那契数列](image/Figure_1.19.jpg)'
- en: .
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 。
- en: 'Figure 1.19: Fibonacci sequence with a generator'
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.19：带有生成器的斐波那契数列
- en: You have successfully demonstrated how generators can be used to build an iterative
    data set based on the Fibonacci sequence.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功演示了如何使用生成器基于斐波那契数列构建迭代数据集。
- en: 'Chapter 2: Asynchronous JavaScript'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2章：异步JavaScript
- en: Activity 2 – Using Async/Await
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动2 - 使用Async/Await
- en: 'You have been tasked with building a server that interfaces with a database.
    You must write some code to look up sets and look up basic user objects in the
    database. Import the `simple_db.js` file. Using the `get` and `insert` commands,
    write the following program using the async/await syntax:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您被要求构建一个与数据库交互的服务器。您必须编写一些代码来查找数据库中的集合和基本用户对象。导入`simple_db.js`文件。使用`async/await`语法编写以下程序，使用`get`和`insert`命令：
- en: Look up the key called `john`, the key `sam`, and your first name as a database
    key.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找名为`john`的键，名为`sam`的键，以及您的名字作为数据库键。
- en: If the database entry exists, log the `age` field of the result object.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据库条目存在，则记录结果对象的`age`字段。
- en: If your name does not exist in the database, insert your name and associate
    an object containing your first name, last name, and age. Look up the new data association
    and log the age.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的名字在数据库中不存在，请插入您的名字并关联一个包含您的名字、姓氏和年龄的对象。查找新的数据关联并记录年龄。
- en: For any `db.get` operation that fails, save the key into an array. At the end
    of the program, print the keys that failed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何失败的`db.get`操作，将键保存到数组中。在程序结束时，打印失败的键。
- en: '**DB API:**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**DB API：**'
- en: '`db.get( index ):`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`db.get（index）：`'
- en: This takes in an index and returns a promise. The promise is fulfilled with
    the `db` entry associated with that index. If the index does not exist, the db
    lookup fails, or the key parameter is not specified, the promise is rejected with
    an error.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一个索引并返回一个promise。如果索引不存在，数据库查找失败，或者未指定键参数，则promise将被拒绝并返回错误。
- en: '`db.insert( index, insertData ):`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`db.insert（index，insertData）：`'
- en: This takes in an index and some data and returns a promise. The promise is fulfilled
    with the key inserted if the operation completes. If the operation fails, or there
    is no key or inserted data specified, the promise is rejected with an error.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一个索引和一些数据，并返回一个promise。如果操作完成，promise将被插入的键满足。如果操作失败，或者没有指定键或插入的数据，则promise将被拒绝并返回错误。
- en: 'To utilize promises and the async/await syntax to build a program, follow these steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用promise和async/await语法构建程序，请按照以下步骤进行：
- en: Import the database API with `require( ‘./simple_db’ )` and save it into the
    variable `db`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`require（'./simple_db'）`导入数据库API，并将其保存到变量`db`中。
- en: Write an async main function. All of the operations will go in here.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个异步主函数。所有操作都将在这里进行。
- en: Create an array to keep track of the keys that cause `db` errors. Save it into
    the variable `missingKeys`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数组来跟踪导致`db`错误的键。将其保存到变量`missingKeys`中。
- en: Create a try-catch block.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个try-catch块。
- en: Inside the try section, look up the key `john` from the database with async/await
    and the `db.get()` function.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在try部分内，使用async/await和`db.get（）`函数从数据库中查找键`john`。
- en: Save the value into the variable `user`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将值保存到变量`user`中。
- en: Log the age of the user we looked up.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记录我们查找的用户的年龄。
- en: In the catch section, push the key `john` to the `missingKeys` array.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在catch部分，将键`john`推送到`missingKeys`数组中。
- en: Create a second try-catch block.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个try-catch块。
- en: Inside the try section look up the key `sam` from the database with async/await
    and the `db.get()` function
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在try部分中，使用async/await和`db.get()`函数查找数据库中的键`sam`
- en: Save the value into the variable `user`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将值保存到变量`user`中。
- en: Log the age of the user we looked up.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 记录查找到的用户的年龄。
- en: In the catch section, push the key `sam` to the `missingKeys` array.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在catch部分，将键`sam`推送到`missingKeys`数组中。
- en: Create a third try-catch block.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第三个try-catch块。
- en: Inside the try section, look up the key that is your name from the database
    with async/await and the `db.get()` function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在try部分中，使用async/await和`db.get()`函数查找数据库中的您的名字的键。
- en: Save the value into the variable `user`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将值保存到变量`user`中。
- en: Log the age of the user we looked up.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 记录查找到的用户的年龄。
- en: In the catch section, push the key to the `missingKeys` array.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在catch部分，将键推送到`missingKeys`数组中。
- en: In the catch section, insert your `user` object into the `db` with await and
    `db.insert()`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在catch部分，使用await和`db.insert()`将您的`user`对象插入`db`中。
- en: In the catch section, create a new try-catch block inside the `catch` block.
    In the new try section, look up the user we just added to the db with async/await.
    Save the found user into the `variable` `user`. Log the age of the user we found.
    In the catch section, push the key to the `missingKeys` array.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在catch部分，在`catch`块内创建一个新的try-catch块。在新的try部分中，使用async/await查找刚刚添加到db中的用户。将找到的用户保存到`variable`
    `user`中。记录查找到的用户的年龄。在catch部分，将键推送到`missingKeys`数组中。
- en: Outside all of the try-catch blocks, at the end of the main function, return
    the `missingKeys` `array`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有的try-catch块之外，在主函数的末尾，返回`missingKeys`数组。
- en: Call the `main` function and attach a `then()` and `catch()` handler to the
    returned promise.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`main`函数，并为返回的承诺附加一个`then()`和`catch()`处理程序。
- en: The `then()` handler should be passed a function that logs the promise resolution
    value.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`then()`处理程序应传递一个记录承诺解析值的函数。'
- en: The `catch()` handler should be passed a function that logs the error’s message field.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`catch()`处理程序应传递一个记录错误消息字段的函数。'
- en: '**Code:**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '**index.js**'
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**index.js**'
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Snippet 2.43: Using async/await'
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段2.43：使用async/await
- en: https://bit.ly/2FvhPo2
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: https://bit.ly/2FvhPo2
- en: '**Outcome:**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**：'
- en: '![Figure 2.12: Names and ages displayed'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.12：显示的姓名和年龄'
- en: '](image/Figure_2.12.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.12.jpg)'
- en: 'Figure 2.12: Names and ages displayed'
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.12：显示的姓名和年龄
- en: You have successfully implemented file-tracking commands and navigated the repository's
    history.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功实现了文件跟踪命令并浏览了存储库的历史记录。
- en: 'Chapter 3: DOM Manipulation and Event Handling'
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章：DOM操作和事件处理
- en: Activity 3 – Implementing jQuery
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动3 - 实现jQuery
- en: You want to make a web app that controls your home's smart LED light system.
    You have three LEDs that can be individually turned on or off, or all toggled
    together. You must build a simple HTML and jQuery interface that shows the on
    state of the lights. It must also have buttons to control the lights.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要制作一个控制家中智能LED灯系统的Web应用程序。您有三个LED灯，可以单独打开或关闭，或者一起切换。您必须构建一个简单的HTML和jQuery界面，显示灯的开启状态。它还必须有控制灯的按钮。
- en: 'To utilize jQuery to build a functioning application, follow these steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用jQuery构建一个功能应用程序，请按照以下步骤进行：
- en: Create a directory for the activity and in that directory, in the command prompt,
    run `npm run init` to set up `package.json`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为该活动创建一个目录，并在该目录中，在命令提示符中运行`npm run init`以设置`package.json`。
- en: Run `npm install jquery -s` to install jQuery.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm install jquery -s`以安装jQuery。
- en: Create an HTML file for the activity and give the HTML block a body.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为该活动创建一个HTML文件，并给HTML块添加一个body。
- en: Add a style block.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个样式块。
- en: Add a div to hold all of the buttons and lights.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个div来容纳所有的按钮和灯。
- en: Add a `script` tag with the source to the `jQuery` file.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有`jQuery`文件源的`script`标签。
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add a `script` tag to hold the main JavaScript code.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`script`标签来保存主JavaScript代码。
- en: 'Add a `light` class to the CSS style sheet with the following settings:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CSS样式表中为`light`类添加以下设置：
- en: 'Width and height: `100px`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 宽度和高度：`100px`
- en: 'Background-color: `white`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 背景颜色：`白色`
- en: Add a toggle button to the div by using the `id=toggle.`
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在div中添加一个切换按钮，使用`id=toggle`。
- en: Add a div to hold the lights with the id `lights`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个div来容纳带有id`lights`的灯。
- en: Add three divs inside this div.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个div内添加三个div。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Each div should have a div with the `light` class and a button with the `lightButton`
    class`.`
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 每个div应该有一个带有`light`类的div和一个带有`lightButton`类的按钮。
- en: 'In the code script, set up a function to run when the DOM loads:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码脚本中，设置一个函数在DOM加载时运行：
- en: '`$( () => { ... } )`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(() => { ... })`'
- en: 'Select all the `lightButton` class buttons and add on-click handler that does
    the following:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有`lightButton`类按钮，并添加一个点击处理程序，执行以下操作：
- en: Stops the event propagation and selects the element target and get the `light`
    div by traversing DOM.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 停止事件传播并选择元素目标，并通过遍历DOM获取`light` div。
- en: Check the `lit` attribute. If lit, unset the `lit` attribute. Otherwise, set
    it with `jQuery.attr()`
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`lit`属性。如果已点亮，则取消`lit`属性。否则，使用`jQuery.attr()`设置它
- en: Change the `background-color css` style to reflect the `lit` attribute with
    `jQuery.css().`
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将`background-color css`样式更改为反映`lit`属性的`jQuery.css()`。
- en: 'Select the `toggle` button by ID and add an on click handler that does the following:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过ID选择`toggle`按钮，并添加一个点击处理程序，执行以下操作：
- en: 'Stops the event propagation and selects all the light buttons by CSS class
    and trigger a click event on them:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 停止事件传播并通过CSS类选择所有的灯按钮，并在它们上触发点击事件：
- en: '**Code:**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '**activity.html**'
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**activity.html**'
- en: The following is the condensed code. The full solution can be found at `activities/activity3/index.html`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是精简的代码。完整的解决方案可以在`activities/activity3/index.html`中找到。
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Snippet 3.32: jQuery function application'
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段3.32：jQuery函数应用
- en: https://bit.ly/2VV9DlB
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: https://bit.ly/2VV9DlB
- en: '**Outcome****:**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**：'
- en: '![Figure 3.14: Adding buttons after each div'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.14：在每个div后添加按钮'
- en: '](image/Figure_3.14.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.14.jpg)'
- en: 'Figure 3.14: Adding buttons after each div'
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.14：在每个div后添加按钮
- en: '![Figure 3.15: Adding toggle buttons](image/Figure_3.21.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图3.15：添加切换按钮](image/Figure_3.21.jpg)'
- en: 'Figure 3.15: Adding toggle buttons'
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.15：添加切换按钮
- en: You have successfully utilized jQuery to build a functioning application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功利用 jQuery 构建了一个功能应用程序。
- en: 'Chapter 4: Testing JavaScript'
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章：测试JavaScript
- en: Activity 4 – Utilizing Test Environments
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Activity 4 – 利用测试环境
- en: You have been tasked with upgrading your Fibonacci sequence test code to use
    the Mocha test framework. Take the Fibonacci sequence code and test code you created
    for Activity 1 and upgrade it to use the Mocha test framework to test the code.
    You should write tests for the n=0 condition, then implement the n=0 condition,
    then write tests for and implement the n=1 condition, then write tests for and
    implement the n=2 condition, and finally do so for the n=5, n=7, and n=9 conditions.
    If the `it()` test passes, call the `done` callback with no argument. Otherwise,
    call the `test done` callback with an error or other truthy value.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您的任务是将斐波那契数列测试代码升级为使用 Mocha 测试框架。将您为 Activity 1 创建的斐波那契数列代码和测试代码升级为使用 Mocha
    测试框架来测试代码。您应该为 n=0 条件编写测试，然后实现 n=0 条件，然后为 n=1 条件编写测试并实现，然后为 n=2 条件编写测试并实现，最后为
    n=5、n=7 和 n=9 条件做同样的操作。如果 `it()` 测试通过，调用 `done` 回调而不带参数。否则，使用错误或其他真值调用 `test done`
    回调。
- en: 'To utilize the Mocha test framework to write and run tests, follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用 Mocha 测试框架编写和运行测试，请按照以下步骤进行：
- en: Set up the project directory with `npm run init.` Install mocha globally with
    `npm install mocha -s -g`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run init` 设置项目目录。使用 `npm install mocha -s -g` 全局安装 mocha。
- en: Create `index.js` to hold the code and `test.js` to hold the tests.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `index.js` 来保存代码，`test.js` 保存测试。
- en: Add the test script to `package.json` in the `scripts` field. The test should
    call the `mocha` module and pass in the `test.js` file.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试脚本添加到 `package.json` 的 `scripts` 字段中。测试应该调用 `mocha` 模块并传入 `test.js` 文件。
- en: Add the recursive Fibonacci sequence code to `index.js`. You can use the code
    built in `Exercise 24`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将递归斐波那契数列代码添加到 `index.js`。您可以使用 `Exercise 24` 中构建的代码。
- en: Export the function with `module.exports = { fibonacci }.`
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出函数与 `module.exports = { fibonacci }.`
- en: 'Import the Fibonacci function into the test file using the following command:
    `const { fibonacci } = require( ''./index.js'' )`;'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将斐波那契函数导入测试文件：`const { fibonacci } = require( './index.js' )`;
- en: Write a `describe` block for the tests. Pass in the string `fibonacci` and a
    callback function
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为测试编写一个 `describe` 块。传入字符串 `fibonacci` 和一个回调函数
- en: Calculate the expected value by hand for each item in the fibonacci sequence
    (you can also look up the sequence on Google to avoid doing too much math by hand).
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过手工计算每个斐波那契数列中的预期值（您也可以在Google上查找该数列，以避免手工计算太多数学）。
- en: 'For each test condition (n=0, n=1, n=2, n=5, n=7, and n=9) do the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个测试条件（n=0、n=1、n=2、n=5、n=7 和 n=9），执行以下操作：
- en: Create a mocha test with the `it()` function and pass in a description of the
    test as the first parameter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `it()` 函数创建一个 mocha 测试，并将测试描述作为第一个参数传入。
- en: Pass a callback as the second parameter. The callback should take in one argument,
    `done`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将回调作为第二个参数。回调函数应该接受一个参数 `done`。
- en: Inside the callback call the fibonacci sequence and compare its result to the
    expected value with a not equal comparison.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数中调用斐波那契数列，并使用不等于比较将其结果与预期值进行比较。
- en: Call the `done()` function and pass in the test comparison result.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `done()` 函数并传入测试比较结果。
- en: If the test fails, return `done( error )`. Otherwise, return `done(null)` or
    `done(false)`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试失败，返回 `done( error )`。否则，返回 `done(null)` 或 `done(false)`。
- en: Run the tests from the command line with `npm run test`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run test` 从命令行运行测试。
- en: '**Code:**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '**test.js**'
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**test.js**'
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Snippet 4.9: Utilizing test environments'
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Snippet 4.9：利用测试环境
- en: https://bit.ly/2CcDpJE
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: https://bit.ly/2CcDpJE
- en: 'Take a look at the following output screenshot below:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 查看下面的输出截图：
- en: '![Figure 4.8 : Displaying the Fibonacci series](image/Figure_4.71.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8：显示斐波那契数列](image/Figure_4.71.jpg)'
- en: 'Figure 4.8 : Displaying the Fibonacci series'
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.8：显示斐波那契数列
- en: '**Outcome**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: You have successfully utilized the Mocha test framework to write and run tests.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功利用 Mocha 测试框架编写和运行测试。
- en: 'Chapter 5: Functional Programming'
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章：函数式编程
- en: Activity 1 – Recursive Immutability
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Activity 1 – 递归不可变性
- en: You are building an application in JavaScript and your team has been told that
    it cannot use any third-party libraries for security reasons. You must now use
    Functional Programming (FP) principles for this application and you need an algorithm
    to create immutable objects and arrays. Create a recursive function that enforces
    the immutability of objects and arrays at all levels of nesting with `Object.freeze()`.
    For simplicity, you can assume that there are no null or classes nested in the
    objects. Write your function in `activities/activity5/activity-test.js`. This
    file contains code to test your implementation.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在使用 JavaScript 构建一个应用程序，并且您的团队被告知出于安全原因不能使用任何第三方库。现在，您必须为该应用程序使用函数式编程（FP）原则，并且您需要一个算法来创建不可变的对象和数组。创建一个递归函数，使用
    `Object.freeze()` 强制对象和数组在所有嵌套级别上的不可变性。为简单起见，您可以假设对象中没有嵌套的 null 或类。在 `activities/activity5/activity-test.js`
    中编写您的函数。该文件包含测试您的实现的代码。
- en: 'Todemonstrate forcing immutability in objects, follow these steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示在对象中强制不可变性，请按照以下步骤进行：
- en: Open the activity test file at `activities/activity5/activity-test.js`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activities/activity5/activity-test.js` 中的活动测试文件。
- en: Create a function called `immutable` that takes in a single argument, `data`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `immutable` 的函数，它接受一个参数 `data`。
- en: Check to see if `data` is not of type `object`. If it is not, then return.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `data` 是否不是 `object` 类型。如果不是，则返回。
- en: Freeze the `data` object. You don't need to freeze non-objects.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 冻结 `data` 对象。您不需要冻结非对象。
- en: Loop through the object values with `object.values` and a `forEach()` loop.
    Recursively call the immutable function for each.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `object.values` 和 `forEach()` 循环遍历对象值。对每个值递归调用不可变函数。
- en: Run the code contained in the test file. If any tests fail, fix the bugs and
    rerun the test
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试文件中包含的代码。如果有任何测试失败，修复错误并重新运行测试。
- en: '**Code:**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '**activity-solution.js**'
  id: totrans-153
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**activity-solution.js**'
- en: '[PRE5]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Snippet 5.11: Recursive immutability'
  id: totrans-155
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段5.11：递归不可变性
- en: https://bit.ly/2H56ah1
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: https://bit.ly/2H56ah1
- en: 'Take a look at the following output screenshot below:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 查看下面的输出截图：
- en: '![Figure 5.7 : Passed Tests output display'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7：通过测试的输出显示'
- en: '](image/Figure_5.11.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.11.jpg)'
- en: 'Figure 5.7 : Passed Tests output display'
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.7：通过测试的输出显示
- en: '**Outcome:**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果：**'
- en: You have successfully demonstrated forcing immutability in objects.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功地展示了在对象中强制使用不可变性。
- en: 'Chapter 6: JavaScript Ecosystem'
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章：JavaScript生态系统
- en: Activity 6 – Building a Frontend with React
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动6 - 使用React构建前端
- en: 'The frontend team working on your note-taking app from Exercise 35 has unexpectedly
    quit. You must build the frontend for this application using React. Your frontend
    should have two views: a Home view and an `Edit` view. Create a React component
    for each view. The `Home` view should have a button that changes the view to the
    Edit view. The Edit view should have a button that switches back to the Home view,
    a text input that contains the note text, a load button that calls the API load
    route, and a save button that calls the API save route. A Node.js server has been
    provided. Write your React code in `activities/activity6/activity/src/index.js`.
    When you are ready to test your code, run the build script (defined in `package.json`)
    before starting the server. You can reference the `index.html` file from Exercise
    35 for hints on how to call the API routes.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 从练习35中负责笔记应用的前端团队意外退出。您必须使用React构建此应用程序的前端。您的前端应该有两个视图：一个Home视图和一个`Edit`视图。为每个视图创建一个React组件。`Home`视图应该有一个按钮，可以将视图切换到Edit视图。Edit视图应该有一个按钮，可以切换回Home视图，一个包含笔记文本的文本输入，一个调用API加载路由的加载按钮，以及一个调用API保存路由的保存按钮。已提供一个Node.js服务器。在`activities/activity6/activity/src/index.js`中编写您的React代码。当您准备测试您的代码时，在启动服务器之前运行构建脚本（在`package.json`中定义）。您可以参考练习35中的`index.html`文件，了解如何调用API路由的提示。
- en: 'To build a working React frontend and integrate it with a Node.js express server,
    follow these steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个可工作的React前端并将其与Node.js express服务器集成，按照以下步骤进行：
- en: Begin working in "activity/activity6/activity". Run `npm install` to install
    the required dependencies.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始在"activity/activity6/activity"中工作。运行`npm install`来安装所需的依赖项。
- en: In src/index.js, create React components called `Home` and `Editor`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在src/index.js中，创建名为`Home`和`Editor`的React组件。
- en: 'Add a constructor to the App react component. In the constructor:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向App react组件添加一个构造函数。在构造函数中：
- en: Take in the `props` variable. Call `super` and pass `props` into `super`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接受`props`变量。调用`super`并将`props`传递给`super`。
- en: Set the `state` object in the `this` scope. It must have a property called `view`
    with the value `home`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在`this`作用域中设置`state`对象。它必须具有一个名为`view`且值为`home`的属性。
- en: Add a `changeView` method to the app.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向应用程序添加一个`changeView`方法。
- en: The `changeView` method should take in a parameter called `view`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`changeView`方法应该接受一个名为`view`的参数。'
- en: Update the state with `setState` and set the `view` property of the `state`
    equal to the provided parameter `view`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setState`更新状态，并将`state`的`view`属性设置为提供的参数`view`。
- en: In the constructor, add a line that sets `this.changeView` equal to `this.changeView.bind(this)`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，添加一行代码，将`this.changeView`设置为`this.changeView.bind(this)`。
- en: 'In App’s `render` function, create a conditional rendering based on the value
    of `this.state.view` that does the following:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在App的`render`函数中，根据`this.state.view`的值创建一个条件渲染，执行以下操作：
- en: If `state.view` is equal to `home`, show the home view. Otherwise, show the
    editor view.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`state.view`等于`home`，则显示Home视图。否则，显示编辑器视图。
- en: Pass the `changeView` function as a parameter to both views, which are `<Editor`
    `changeView={this.changeView}/>` and `<Home changeView={this.changeView}/>`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 将`changeView`函数作为参数传递给两个视图，即`<Editor changeView={this.changeView}/>`和`<Home
    changeView={this.changeView}/>`.
- en: In the `Home` component, add a `goEdit()` function, which `calls` the `changeView`
    function passed in through `props` (`this.props.changeView`). and passes in the
    string `editor` to the `changeView` function.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Home`组件中，添加一个`goEdit()`函数，调用通过`props`传入的`changeView`函数（`this.props.changeView`），并将字符串`editor`传递给`changeView`函数。
- en: 'Create the `render` function in the `Home` component:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Home`组件中创建`render`函数：
- en: Return a JSX expression.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个JSX表达式。
- en: To the returned JSX expression, add a `div` that contains a title heading `title`
    of the app `Note Editor App`, and add a button that changes the view to the `Edit` view.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回的JSX表达式中，添加一个包含应用程序`Note Editor App`标题的`div`，并添加一个按钮，将视图更改为`Edit`视图。
- en: The button should call the `goEdit` function on click. Be sure to properly bind
    the `this` state to the `goEdit` function.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮应在单击时调用`goEdit`函数。确保将`this`状态正确绑定到`goEdit`函数。
- en: 'Add a constructor to the `Editor` component:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Editor`组件添加一个构造函数：
- en: Take in the `props` parameter
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 接受`props`参数
- en: Call `super` and pass in the `props` variable.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`super`并将`props`变量传递给它。
- en: 'Set the `state` variable in the `this` scope equal to the `{value: ‘’}` object.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '在`this`作用域中将`state`变量设置为`{value: ‘’}`对象。'
- en: 'Add a function called `handleChage` to `Editor`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Editor`中添加一个名为`handleChage`的函数：
- en: Takes in an argument, `e`, that represents the event object.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接受一个名为`e`的参数，表示事件对象。
- en: 'Update the state with `setState` to set the state property `value` equal to
    the event target’s value:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setState`更新状态，将状态属性`value`设置为事件目标的值：
- en: '[PRE6]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Create a `save` function in `Editor` that makes an HTTP request to the API save route.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Editor`中创建一个名为`save`的函数，向API的save路由发出HTTP请求。
- en: Create a new XHR request and save it into the `xhttp` variable.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的XHR请求，并将其保存到`xhttp`变量中。
- en: Set the `xhttp` property `onreadystatechange` to a function that checks if this.`readyState`
    is equal to `4`. If it is not, then return. Also, check if `this.status` is equal
    to `200`. If it is not, then throw an error.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将`xhttp`属性`onreadystatechange`设置为一个函数，检查`this.readyState`是否等于`4`。如果不是，则返回。还要检查`this.status`是否等于`200`。如果不是，则抛出错误。
- en: Open the `xhr` request by calling the `open` function on `xhttp`. Pass in the
    parameters `POST`, `/save`, and `true`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`xhttp`上调用`open`函数打开`xhr`请求。传入参数`POST`，`/save`和`true`。
- en: Set the request header `Content-Type` to `application/json;charset=UTF-8` by
    calling the `setRequestHeader` on the `xhttp` object. Pass in the values specified.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在“xhttp”对象上调用“setRequestHeader”将请求头“Content-Type”设置为“application/json;charset=UTF-8”。传入指定的值。
- en: Send the JSON data of the text input with `xhttp.send`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 通过“xhttp.send”发送文本输入的JSON数据。
- en: The value to which, we must send is stored in `this.state`. Stringify the value
    before sending it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 必须发送的值存储在“this.state”中。在发送之前对值进行字符串化。
- en: Create a `load` function in `Editor` that makes an HTTP request to the API load route.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Editor”中创建一个“load”函数，向API加载路由发出HTTP请求。
- en: Create a new XHR request and save it into the `xhttp` variable.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的XHR请求并将其保存到“xhttp”变量中。
- en: Save the `this` scope into a variable called `that` so that it can be used inside
    the `xhr` request.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 将“this”范围保存到名为“that”的变量中，以便在“xhr”请求内部使用。
- en: Set the `xhttp` property `onreadystatechange` to a function that checks if `this.readyState`
    is equal to `4`. If it isn’t, then return. It then checks if `this.status` is
    equal to `200`. If it is not, then throw an error. It calls the `setState` function
    on the React component’s scope, which is saved in the `that` variable.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 将“xhttp”属性“onreadystatechange”设置为一个函数，检查“this.readyState”是否等于4。如果不是，则返回。然后检查“this.status”是否等于200。如果不是，则抛出错误。它在React组件的范围上调用“setState”函数，该函数保存在“that”变量中。
- en: Pass in an object with the key `value` equal to the parsed response of the request.
    Parse the HTTP response value from the `this.response` variable with the `JSON.parse`
    function.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 传入一个对象，其中键“value”等于请求的解析响应。使用“JSON.parse”函数从“this.response”变量中解析HTTP响应值。
- en: Open the HTTP request by calling the `open` function on the `xhttp` variable.
    Pass in the parameters `GET`, `/load`, and `true`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在“xhttp”变量上调用“open”函数打开HTTP请求。传入参数“GET”、“/load”和“true”。
- en: Send the XHR request by calling the `send()` method on the `xhttp` object.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在“xhttp”对象上调用“send()”方法发送XHR请求。
- en: Create a `goHome` function in `Editor`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Editor”中创建一个“goHome”函数。
- en: Call the `changeView` function that was passed in through the React element
    properties object (`this.props.changeView()`).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 调用通过React元素属性对象传入的“changeView”函数（`this.props.changeView()`）。
- en: Pass in the string `home`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 传入字符串“主页”。
- en: Create the `render` function in `Editor`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Editor”中创建“render”函数。
- en: Add a button that, once clicked, calls the `goHome` function that contains the
    text `Back to home`. It calls the `goHome` function on the click event. Make sure
    to properly bind the `this` scope to the function.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个按钮，点击后调用包含文本“返回主页”的“goHome”函数。在点击事件上调用“goHome”函数。确保将“this”范围正确绑定到函数。
- en: Add a `text` input that contains the note text. The text input loads its value
    from the `state.value` field. The `text` field calls the `handleChange` function
    on a change event. Make sure to properly bind the `this` scope to the `handleChange`
    function.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个包含笔记文本的“文本”输入。文本输入从“state.value”字段加载其值。“文本”字段在更改事件上调用“handleChange”函数。确保将“this”范围正确绑定到“handleChange”函数。
- en: Add a button to load the note data from the server that contains the text `Load`.
    It calls the `load` function on the click event. Be sure to properly bind the
    `this` scope to the load function call.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个按钮，从包含文本“加载”的服务器中加载笔记数据。在点击事件上调用“load”函数。确保将“this”范围正确绑定到load函数调用。
- en: Add a button to save the note data to the server that contains the text `Save`.
    It calls the `save` function on the click event. Be sure to properly bind the
    `this` scope to the save function call.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个按钮，将包含文本“保存”的笔记数据保存到服务器。在点击事件上调用“save”函数。确保将“this”范围正确绑定到save函数调用。
- en: Be sure to bind the `this` state properly to all listeners.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将“this”状态正确绑定到所有监听器。
- en: 'Test the code when ready by doing the following:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备好后通过以下方式测试代码：
- en: Running `npm run build` in the root project folder to transpile the code from JSX.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在根项目文件夹中运行“npm run build”以将代码从JSX转换。
- en: Running `npm start` to start the server.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 运行“npm start”以启动服务器。
- en: Loading the URL specified when the server start (`127.0.0.1:PORT`).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器启动时加载指定的URL（`127.0.0.1:PORT`）。
- en: Testing the view changes by clicking the **Edit** and `Back to home` buttons.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击“编辑”和“返回主页”按钮测试视图更改。
- en: Testing the `save` functionality by entering text into the `text` input, saving
    it, and checking the text file that was created in the folder to see if it matches.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在“文本”输入框中输入文本，保存并检查创建的文件夹中的文本文件，测试“保存”功能。
- en: Testing the `load` functionality by entering text into the text file, loading
    it, and making sure that the value in the `text` input matches the value in text
    file.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在文本文件中输入文本，加载它，并确保“文本”输入中的值与文本文件中的值匹配，测试“加载”功能。
- en: A condensed snippet is provided in the following snippet. Refer to `activities/activity6/solution/src/index.js`
    for the full solution code.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下提供了一个简化的片段。有关完整解决方案代码，请参阅`activities/activity6/solution/src/index.js`。
- en: Index.js
  id: totrans-223
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Index.js
- en: '[PRE7]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Snippet 6.42: React component'
  id: totrans-225
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段6.42：React组件
- en: https://bit.ly/2RzxKI2
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: https://bit.ly/2RzxKI2
- en: '**Outcome:**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果：**'
- en: 'Take a look at the output screenshots here:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这里的输出截图：
- en: '![Figure 6.13 : Edit view'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.13：编辑视图'
- en: '](image/Figure_6.13.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.13.jpg)'
- en: 'Figure 6.13 : Edit view'
  id: totrans-231
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.13：编辑视图
- en: '![Figure 6.14 : Server view'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.14：服务器视图'
- en: '](image/Figure_6.21.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.21.jpg)'
- en: 'Figure 6.14 : Server view'
  id: totrans-234
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.14：服务器视图
- en: '![Figure 6.15 : Running the server to test code'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.15：运行服务器以测试代码'
- en: '](image/Figure_6.31.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.31.jpg)'
- en: 'Figure 6.15 : Running the server to test code'
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.15：运行服务器以测试代码
- en: You have successfully built a working React frontend and integrated it with
    a Node.js express server.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功构建了一个可工作的React前端，并将其与Node.js express服务器集成。
