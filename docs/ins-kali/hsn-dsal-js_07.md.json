["```js\nmkdir sorting\n```", "```js\ncd sorting\nnpm init\n```", "```js\nnpm install express --save\n```", "```js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n   res.status(200).send('OK!')\n});\n\napp.listen(3000, function () {\n   console.log('Chat Application listening on port 3000!')\n});\n```", "```js\n...\n\"scripts\": {\n  \"start\": \"node index.js\",\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" },\n...\n```", "```js\n[\n{\"id\":\"dfa6cccd-d78b-4ea0-b447-abe7d6440180\",\"pages\":1133},\n{\"id\":\"0a2b0a9e-5b3d-4072-ad23-92afcc335c11\",\"pages\":708},\n{\"id\":\"e1a58d73-3bd2-4a3a-9f29-6cfb9f7a0007\",\"pages\":726},\n{\"id\":\"5edf9d36-9b5d-4d1f-9a5a-837ad9b73fe9\",\"pages\":1731},\n...\n]\n```", "```js\nnpm install uuid --save\n```", "```js\nconst fs = require('fs');\nconst uuid = require('uuid');\nconst books = [];\n\nfor(var i = 0; i < 5000; i++) {\n   books.push({\n      \"id\": uuid.v4(),\n      \"pages\": Math.floor(Math.random() * (2000 - 300 + 1) + 300)\n   })\n}\n\nfs.writeFile('books.json', JSON.stringify(books), (err) => {});\n```", "```js\nLOOP over all data excluding first entry (i = 1)\n\n    INITIALIZE variable j = i - 1\n\n    COPY data at index i\n\n    WHILE all previous values are less than current\n\n        COPY previous value to next\n\n        DECREMENT j\n\n    ADD current data to new position\n\nRETURN sorted data\n```", "```js\nclass Insertion {\n\n   sort(data) {\n      // loop over all the entries excluding the first record\n  for (var i = 1; i< data.length; ++i) {\n\n         // take each entry\n  var current = data[i];\n\n         // previous entry\n  var j = i-1;\n\n         // until beginning or until previous data is lesser than\n         current\n  while (j >= 0 && data[j].pages < current.pages) {\n\n            // shift entries to right\n  data[j + 1] = data[j];\n\n            // decrement position for next iteration\n  j = j - 1;\n         }\n\n         // push current data to new position\n  data[j+1] = current;\n      }\n\n      // return all sorted data\n  return data;\n   }\n}\n\nmodule.exports = Insertion;\n```", "```js\nclass Insertion {\n\n   sort(data) {\n      // loop over all the entries\n  for (var i = 1; i < data.length; ++i) {\n\n         // take each entry\n  var current = data[i];\n\n         // previous entry\n  var j = i - 1;\n\n         // find location where selected sould be inseretd\n  var index = this.binarySearch(data, current, 0, j);\n\n         // shift all elements until new position\n  while (j >= index) {\n            // shift entries to right\n  data[j + 1] = data[j];\n\n            // decrement position for next iteration\n  j = j - 1;\n         }\n\n         // push current data to new position\n  data[j + 1] = current;\n      }\n\n      // return all sorted data\n  return data;\n   }\n\n   binarySearch(data, current, lowPos, highPos) {\n      // get middle position\n  var midPos = Math.floor((lowPos + highPos) / 2);\n\n      // if high < low return low position;\n // happens at the beginning of the data set  if (highPos <= lowPos) {\n\n         // invert condition to reverse sorting\n  return (current.pages < data[lowPos].pages) ? (lowPos + 1):\n         lowPos;\n      }\n\n      // if equal, give next available position\n  if(current.pages === data[midPos].pages) {\n         return midPos + 1;\n      }\n\n      // if current page count is less than mid position page count,\n // reevaluate for left half of selected range // invert condition and exchange return statements to reverse\n      sorting  if(current.pages > data[midPos].pages) {\n         return this.binarySearch(data, current, lowPos, midPos - 1);\n      }\n\n      // evaluate for right half of selected range\n  return this.binarySearch(data, current, midPos + 1, highPos);\n   }\n}\n\nmodule.exports = Insertion;\n```", "```js\nvar express = require('express');\nvar app = express();\nvar data = require('./books.json');\nvar Insertion = require('./sort/insertion');\n\napp.get('/', function (req, res) {\n   res.status(200).send('OK!')\n});\n\napp.get('/insertion', function (req, res) {\n res.status(200).send(new Insertion().sort(data));\n});\n\napp.listen(3000, function () {\n   console.log('Chat Application listening on port 3000!')\n});\n```", "```js\nMERGE_SORT(array)\n    INITIALIZE middle, left_half, right_half\n\n    RETURN MERGE(MERGE_SORT(left_half), MERGE_SORT(right_half))\n\nMERGE(left, right)\n\n    INITIALIZE response\n\n    WHILE left and right exist \n\n        IF left[0] < right[0]\n\n            INSERT left[0] in result\n\n        ELSE\n\n            INSERT right[0] in result\n\n    RETURN result concatenated with remainder of left and right\n```", "```js\nclass Merge {\n\n   sort(data) {\n      // when divided to single elements\n  if(data.length === 1) {\n         return data;\n      }\n\n      // get middle index\n  const middle = Math.floor(data.length / 2);\n\n      // left half\n  const left = data.slice(0, middle);\n\n      // right half\n  const right = data.slice(middle);\n\n      // sort and merge\n  return this.merge(this.sort(left), this.sort(right));\n   }\n\n   merge(left, right) {\n      // initialize result\n  const result = [];\n\n      // while data\n  while(left.length && right.length) {\n\n         // sort and add to result\n // change to invert sorting  if(left[0].pages > right[0].pages) {\n            result.push(left.shift());\n         } else {\n            result.push(right.shift());\n         }\n      }\n\n      // concat remaining elements with result\n  return result.concat(left, right);\n   }\n}\n\nmodule.exports = Merge;\n```", "```js\nvar express = require('express');\nvar app = express();\nvar data = require('./books.json');\nvar Insertion = require('./sort/insertion');\nvar Merge = require('./sort/merge');\n\napp.get('/', function (req, res) {\n   res.status(200).send('OK!')\n});\n\napp.get('/insertion', function (req, res) {\n   res.status(200).send(new Insertion().sort(data));\n});\n\napp.get('/merge', function (req, res) {\n res.status(200).send(new Merge().sort(data));\n});\n\napp.listen(3000, function () {\n   console.log('Chat Application listening on port 3000!')\n});\n```", "```js\nQUICKSORT(Set, lo, high)\n\n    GET pivot\n\n    GENERATE Left, Right partitions\n\n    QUICKSORT(SET, lo, Left - 1)\n\n    QUICKSORT(SET, Right + 1, high)\n```", "```js\nclass Quick {\n\n   simpleSort(data) {\n\n      // if only one element exists\n  if(data.length < 2) {\n         return data;\n      }\n\n      // first data point is the pivot\n  const pivot = data[0];\n\n      // initialize low and high values\n  const low = [];\n      const high = [];\n\n      // compare against pivot and add to\n // low or high values  for(var i = 1; i < data.length; i++) {\n\n         // interchange condition to reverse sorting\n  if(data[i].pages > pivot.pages) {\n            low.push(data[i]);\n         } else {\n            high.push(data[i]);\n         }\n      }\n\n      // recursively sort and concat the\n // low values, pivot and high values  return this.simpleSort(low)\n         .concat(pivot, this.simpleSort(high));\n   }\n\n}\n\nmodule.exports = Quick;\n```", "```js\nvar express = require('express');\nvar app = express();\nvar data = require('./books.json');\nvar Insertion = require('./sort/insertion');\nvar Merge = require('./sort/merge');\nvar Quick = require('./sort/quick');\n\n....\n\napp.get('/quick', function (req, res) {\n res.status(200).send(new Quick().simpleSort(data));\n});\n\napp.listen(3000, function () {\n   console.log('Chat Application listening on port 3000!')\n});\n```", "```js\npartitionLomuto(data, low, high) {\n\n   // Take pivot as the high value\n  var pivot = high;\n\n   // initialize loop pointer variable\n  var i = low;\n\n   // loop over all values except the last (pivot)\n  for(var j = low; j < high - 1; j++) {\n\n      // if value greater than pivot\n  if (data[j].pages >= data[pivot].pages) {\n\n         // swap data\n  this.swap(data, i , j);\n\n         // increment pointer\n  i++;\n      }\n   }\n\n   // final swap to place pivot at correct\n // position by swapping  this.swap(data, i, j);\n\n   // return pivot position\n  return i;\n}\n```", "```js\n[{pages: 20}, {pages: 10}, {pages: 1}, {pages: 5}, {pages: 3}]\n```", "```js\n20, 10, 1, 5, 3\npointer: 1\n```", "```js\n20, 10, 1, 5, 3\npointer: 2\n```", "```js\n20, 10, 1, 5, 3\npointer: 2\n```", "```js\n20, 10, 5, 1, 3\npointer: 3\n```", "```js\n20, 10, 5, 3, 1 \n```", "```js\npartitionHoare(data, low, high) {\n   // determine mid point\n  var pivot = Math.floor((low + high) / 2 );\n\n   // while both ends do not converge\n  while(low <= high) {\n\n      // increment low index until condition matches\n  while(data[low].pages > data[pivot].pages) {\n         low++;\n      }\n\n      // decrement high index until condition matches\n  while(data[high] && (data[high].pages < data[pivot].pages)) {\n         high--;\n      }\n\n      // if not converged, swap and increment/decrement indices\n  if (low <= high) {\n         this.swap(data, low, high);\n         low++;\n         high--;\n      }\n   }\n\n   // return the smaller value\n  return low;\n}\n```", "```js\nclass Quick {\n\n   simpleSort(data) {\n        ...\n   }\n\n   // sort class, default the values of high, low and sort\n   sort(data, low = 0, high = data.length - 1, sort = 'hoare') {\n      // get the pivot   var pivot =  (sort === 'hoare') ? this.partitionHoare(data, low,\n      high)\n                  : this.partitionLomuto(data, low, high);\n\n      // sort values lesser than pivot position recursively\n  if(low < pivot - 1) {\n         this.sort(data, low, pivot - 1);\n      }\n\n      // sort values greater than pivot position recursively\n  if(high > pivot) {\n         this.sort(data, pivot, high);\n      }\n\n      // return sorted data\n  return data;\n   }\n\n   // Hoare Partition Scheme\n  partitionHoare(data, low, high) {\n        ...\n   }\n\n   // Lomuto Partition Scheme\n  partitionLomuto(data, low, high) {\n        ...\n   }\n\n   // swap data at two indices\n  swap(data, i, j) {\n      var temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n   }\n\n}\n\nmodule.exports = Quick;\n```", "```js\napp.get('/quick', function (req, res) {\n res.status(200).send(new Quick().sort(data));\n});\n```", "```js\nnpm install benchmark --save\n```", "```js\nvar Benchmark = require('benchmark');\nvar suite = new Benchmark.Suite();\nvar Insertion = require('./sort/insertion');\nvar Merge = require('./sort/merge');\nvar Quick = require('./sort/quick');\nvar data = require('./books.json');\n\nsuite\n  .add('Binary Insertionsort', function(){\n      new Insertion().sort(data);\n   })\n   .add('Mergesort', function(){\n      new Merge().sort(data);\n   })\n   .add('Quicksort -> Simple', function(){\n      new Quick().simpleSort(data);\n   })\n   .add('Quicksort -> Lomuto', function(){\n      new Quick().sort(data, undefined, undefined, 'lomuto');\n   })\n   .add('Quicksort -> Hoare', function(){\n      new Quick().sort(data);\n   })\n   .on('cycle', function(e) {\n      console.log(`${e.target}`);\n   })\n   .on('complete', function() {\n      console.log(`Fastest is ${this.filter('fastest').map('name')}`);\n   })\n   .run({ 'async': true });\n```", "```js\n...\n\n\"scripts\": {\n  \"start\": \"node index.js\",\n  \"test\": \"node benchmark.js\" },\n\n...\n```", "```js\nBinary Insertionsort x 1,366 ops/sec \u00b11.54% (81 runs sampled)\nMergesort x 199 ops/sec \u00b11.34% (78 runs sampled)\nQuicksort -> Simple x 2.33 ops/sec \u00b17.88% (10 runs sampled)\nQuicksort -> Lomuto x 2,685 ops/sec \u00b10.66% (86 runs sampled)\nQuicksort -> Hoare x 2,932 ops/sec \u00b10.67% (88 runs sampled)\nFastest is Quicksort -> Hoare\n```"]