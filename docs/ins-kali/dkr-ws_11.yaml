- en: 11\. Docker Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. Docker安全性
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we will give you the information you need to make sure your
    containers are secure and do not pose a security risk to the people using the
    applications running on them. You will work with privileged and non-privileged
    containers and learn why you should not be running your containers under the root
    user. This chapter will help you verify whether images are from a trusted source,
    using a signing key. You will also set up a security scan for your Docker images,
    ensuring your images are safe for use and distribution. You will work with AppArmor
    to further secure your containers by using them and Security Computing Mode (`seccomp`)
    for Linux to create and use `seccomp` profiles with your Docker images.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为您提供所需的信息，以确保您的容器是安全的，并且不会对使用其上运行的应用程序的人员构成安全风险。您将使用特权和非特权容器，并了解为什么不应该以root用户身份运行容器。本章将帮助您验证镜像是否来自可信的来源，使用签名密钥。您还将为Docker镜像设置安全扫描，确保您的镜像可以安全使用和分发。您将使用AppArmor进一步保护您的容器，并使用Linux的安全计算模式（`seccomp`）来创建和使用`seccomp`配置文件与您的Docker镜像。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter tries to tackle a subject that could have an entire book dedicated
    to it. We attempt to go part of the way in educating you on how to approach security
    with Docker. Previous chapters have given you a solid foundation in using Docker
    to build your applications, and this chapter hopes to use that information to
    also provide secure and stable containers for them to run on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章试图解决一个可以专门写一本书的主题。我们试图在教育您如何使用Docker来处理安全性方面走一部分路。之前的章节已经为您提供了使用Docker构建应用程序的坚实基础，本章希望利用这些信息为它们提供安全稳定的容器来运行。
- en: Docker and the microservices architecture allow us to start with a more secure
    and robust environment to manage our services, but that doesn't mean we need to
    completely forget about security. This chapter provides details on some of the
    aspects we need to consider when we are creating and maintaining services across
    our environments, as well as the ways in which you can start to implement these
    procedures in your working systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Docker和微服务架构使我们能够从更安全和健壮的环境开始管理我们的服务，但这并不意味着我们需要完全忘记安全性。本章详细介绍了在创建和维护跨环境服务时需要考虑的一些方面，以及您可以开始在工作系统中实施这些程序的方式。
- en: 'Docker security should not be separated from your regular IT security process,
    as the concepts will be the same. Docker has a different approach to handle these
    concepts, but in general, a great place to start with Docker security is the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Docker安全性不应该与您的常规IT安全流程分开，因为概念是相同的。Docker有不同的处理这些概念的方法，但总的来说，开始使用Docker安全性的好地方包括以下内容：
- en: '**Access control**: Make sure that running containers cannot be accessed by
    an attacker and that privileges are also limited.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制**：确保运行的容器无法被攻击者访问，并且权限也受到限制。'
- en: '**Updated and patched OS**: We need to make sure we are using trusted sources
    for our images. We also need to be able to scan our images to make sure any introduced
    applications are not also introducing extra vulnerabilities.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新和修补操作系统**：我们需要确保我们使用的镜像来自可信的来源。我们还需要能够扫描我们的镜像，以确保引入的任何应用程序也不会引入额外的漏洞。'
- en: '**Data sensitivity**: All sensitive information should remain inaccessible.
    This could be passwords, personal information, or any other data you don''t want
    to be made available to anyone.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据敏感性**：所有敏感信息都应该保持不可访问。这可能是密码、个人信息，或者任何您不希望被任何人获取的数据。'
- en: In this chapter, we will cover a lot of information that will encompass the
    preceding points and more. We will start by considering the different access your
    Docker containers might have when running and how you can start to limit what
    can be performed by them. We will then look more closely at securing images, using
    signing keys, and how we can verify that they are from a trusted source. We will
    also practice scanning your images against known vulnerabilities to ensure that
    they are safe for use. The last two sections of this chapter will focus on using
    both the AppArmor and `seccomp` security profiles to further limit the capabilities
    and access your running containers can have.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖许多信息，包括前述的内容以及更多。我们将首先考虑在运行时您的Docker容器可能具有的不同访问权限，以及您如何开始限制它们可以执行的操作。然后，我们将更仔细地研究如何保护镜像，使用签名密钥，以及如何验证它们来自可信任的来源。我们还将练习扫描您的镜像以确保它们可以安全使用的已知漏洞。本章的最后两节将重点介绍使用AppArmor和`seccomp`安全配置文件来进一步限制正在运行的容器的功能和访问权限。
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using secrets and passwords in your Docker images, orchestration methods
    such as Swarm and Kubernetes offer secure ways to store your secrets without needing
    to store them as plaintext configurations for everyone to access. If you are not
    using one of these orchestration methods, we will also provide some ideas on how
    to use secrets in your images in the next chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker镜像中使用密码和秘钥时，编排方法如Swarm和Kubernetes提供了安全的存储秘钥的方式，无需将它们存储为明文配置供所有人访问。如果您没有使用这些编排方法，我们也将在下一章提供一些关于如何在镜像中使用秘钥的想法。
- en: Privileged and Root User Access in Containers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器中的特权和root用户访问权限
- en: One important way to improve the security of your containers is to reduce what
    an attacker can do if they manage to gain access. The types of command the attacker
    can run on the container are limited to the level of access the user who is running
    the processes on the container has. So, if there are no root or elevated privileges
    on the running container, this limits what the attacker can do. Another thing
    to remember is that if a container is compromised and is running as the root user,
    this may also allow the attacker to escape the container and access the host system
    running Docker.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 提高容器安全性的一个重要方法是减少攻击者在获得访问权限后可以做的事情。攻击者在容器上可以运行的命令类型受限于运行容器进程的用户的访问权限级别。因此，如果运行容器的用户没有root或提升的特权，这将限制攻击者可以做的事情。另一个需要记住的事情是，如果容器被攻破并以root用户身份运行，这也可能允许攻击者逃离容器并访问运行Docker的主机系统。
- en: Most processes running on the container are applications that don't need root
    access, and this is the same as running processes on a server, where you would
    not run them as root either. The applications running on the container should
    only have access to what they need. The reason why root access is provided, especially
    in base images, is because applications need to be installed on the container,
    but this should only be a temporary measure, with your complete image running
    as another user.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 容器上运行的大多数进程都是不需要root访问权限的应用程序，这与在服务器上运行进程是一样的，您也不会将它们作为root运行。在容器上运行的应用程序应该只能访问它们所需的内容。提供root访问权限的原因，特别是在基础镜像中，是因为应用程序需要安装在容器上，但这应该只是一个临时措施，您的完整镜像应该以另一个用户身份运行。
- en: 'To do this, when creating our image, we can set up a Dockerfile and create
    a user that will run the processes on the container. The following line is the
    same as setting up a user on a Linux command line, where we set up the group first
    and then assign the user to this group:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，在创建我们的镜像时，我们可以设置一个Dockerfile并创建一个将在容器上运行进程的用户。下面这行与在Linux命令行上设置用户相同，我们首先设置组，然后将用户分配到这个组中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding command, we are also using the `adduser` option to set the
    `home` directory and disable a login password.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们还使用`adduser`选项来设置`home`目录并禁用登录密码。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`addgroup` and `adduser` are specific to Alpine-based images, which are Linux-based
    images but use different packages and utilities to Debian-based images. The reason
    why Alpine-based images use these packages is that they opt for more lightweight
    utilities and applications. If you are using Ubuntu-/Debian- or Red Hat-based
    images, you would need to instead use the `useradd` and `groupadd` commands, with
    the relevant options for those commands.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`addgroup`和`adduser`是特定于基于Alpine的镜像的命令，这些镜像是基于Linux的镜像，但使用不同的软件包和实用程序来自基于Debian的镜像。Alpine镜像使用这些软件包的原因是它们选择更轻量级的实用程序和应用程序。如果您使用的是基于Ubuntu/Debian或Red
    Hat的镜像，您需要改用`useradd`和`groupadd`命令，并使用这些命令的相关选项。'
- en: 'As you''ll see in the upcoming exercise, we will then switch to the user we
    have specifically created to create the processes we are going to run. It is optional
    what you name the groups and users, but a lot of users prefer to use a four- or
    five-digit number as this will not highlight any further privileges of this user
    to a potential attacker and is usually standard practice for creating users and
    groups. In our Dockerfile, before we create our processes, we include the `USER`
    directive and include the user ID of the user we previously created:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将在即将进行的练习中看到的，我们将切换到我们专门创建的用户以创建我们将要运行的进程。您可以自行决定组和用户的名称，但许多用户更喜欢使用四位或五位数字作为这将不会向潜在攻击者突出显示该用户的任何更多特权，并且通常是创建用户和组的标准做法。在我们的Dockerfile中，在创建进程之前，我们包括`USER`指令，并包括我们先前创建的用户的用户ID：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this part of the chapter, we will introduce a new image and show the issues
    that can arise if the processes on the container are being run by the root user.
    We'll also show you how the root user in a container is the same as the root user
    on the underlying host. We'll then change our image to show the benefit of removing
    root access to the processes running on the container.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将介绍一个新的镜像，并展示如果容器上的进程由root用户运行可能会出现的问题。我们还将向您展示容器中的root用户与底层主机上的root用户是相同的。然后，我们将更改我们的镜像，以展示删除容器上运行的进程的root访问权限的好处。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`touch`命令创建文件，并使用`vim`命令在文件上使用vim编辑器进行操作。
- en: 'Exercise 11.01: Running Containers as the Root User'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.01：以root用户身份运行容器
- en: Many issues can arise when we are running container processes with the root
    user. This exercise will demonstrate specific security issues, such as changing
    the access rights, killing processes, making changes to DNS, and how your images
    and underlying operating system can be made vulnerable. You will observe that
    as the root user, an attacker would also be able to use tools such as `nmap` to
    scan the network for open ports and network targets.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们以root用户身份运行容器进程时，可能会出现许多问题。本练习将演示特定的安全问题，例如更改访问权限、终止进程、对DNS进行更改，以及您的镜像和底层操作系统可能会变得脆弱。您将注意到，作为root用户，攻击者还可以使用诸如`nmap`之类的工具来扫描网络以查找开放的端口和网络目标。
- en: 'You will also correct these issues, therefore limiting what an attacker can
    do on the running container:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将纠正这些问题，从而限制攻击者在运行容器上的操作：
- en: 'Create a new Dockerfile named `Dockerfile_original` with your favorite text
    editor and enter the following code into the file. All of the commands are currently
    being run as the root user in this step:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器创建一个名为`Dockerfile_original`的新Dockerfile，并将以下代码输入文件。在此步骤中，所有命令都是以root用户身份运行的：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a basic application that will run a small script called `test_memory.sh`,
    which uses the `meminfo`, `mpstat`, and `pmap` commands to provide details on
    the container's memory status. You'll also notice that on *line 4*, we are installing
    some extra applications to view the network processes with `nmap` and to allow
    us to view the user container capabilities with the `libcap` library.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个基本的应用程序，将运行一个名为`test_memory.sh`的小脚本，该脚本使用`meminfo`，`mpstat`和`pmap`命令来提供有关容器内存状态的详细信息。您还会注意到在*第4行*上，我们正在安装一些额外的应用程序，以使用`nmap`查看网络进程，并使用`libcap`库查看用户容器的功能。
- en: 'Build the `security-app` image and run the image in the same step:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`security-app`镜像并在同一步骤中运行该镜像：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output has been drastically reduced, and you should see the image build
    and then the memory report run:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 输出已经大大减少，您应该看到镜像构建，然后运行内存报告：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Use the `whoami` command to view the running user on the container:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`whoami`命令查看容器上的运行用户：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It should not be any surprise that the running user is the root user:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不应该让人感到惊讶的是运行用户是root用户：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use the `capsh –print` command to see the processes that the user is able to
    run on the container. As the root user, you should have a large number of capabilities
    available:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`capsh –print`命令查看用户在容器上能够运行的进程。作为root用户，您应该拥有大量的功能：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You''ll notice that the user has access to changing the ownership of files
    (`cap_chown`), killing processes (`cap_kill`), and making changes to DNS (`cap_net_bind_service`),
    among other things. These are all high-level processes that can cause a lot of
    issues in a running environment and should not be available to the container:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到用户可以访问更改文件所有权（`cap_chown`），杀死进程（`cap_kill`）和对DNS进行更改（`cap_net_bind_service`）等功能。这些都是可以在运行环境中引起许多问题的高级进程，不应该对容器可用：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As the root user, an attacker would also be able to use tools such as `nmap`,
    which we installed earlier, to scan the network for open ports and network targets.
    Run your container images again by passing the `nmap` command, looking for the
    opened `443` port under `localhost`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为root用户，攻击者还可以使用我们之前安装的`nmap`等工具来扫描网络以查找开放的端口和网络目标。通过传递`nmap`命令再次运行您的容器镜像，查找`localhost`下已打开的`443`端口：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the command is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding `nmap` scan doesn't find any open networks, but it is an elevated
    command that shouldn't be able to be run by any users. We will demonstrate later
    in this exercise that a non-root user is not able to run this command.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`nmap`扫描没有找到任何开放的网络，但这是一个不应该能够由任何用户运行的提升命令。我们将在本练习的后面演示非root用户无法运行此命令。
- en: 'As previously mentioned, being the root user on your container is the same
    as being the root user on the underlying host. This can be demonstrated by mounting
    a file owned by the root onto the container. To do that, create a secret file.
    Echo your secret password into the `/tmp/secret.txt` file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，在容器上作为root用户与在底层主机上作为root用户是相同的。这可以通过将一个由root拥有的文件挂载到容器上来证明。为此，创建一个秘密文件。将您的秘密密码回显到`/tmp/secret.txt`文件中：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change the ownership to make sure the root user owns it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更改所有权以确保root用户拥有它：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Use the `docker run` command to mount the file on the running container and
    check whether you are able to access it and view the data in the file. The user
    on the container can access the file that the root user on the host system should
    only have access to:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker run`命令将文件挂载到运行的容器上，并检查是否能够访问并查看文件中的数据。容器上的用户可以访问只有主机系统上的root用户才能访问的文件：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The output from the docker run command will be the words "`secret password`"
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 来自docker run命令的输出将是“`secret password`”
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: However, the Docker container should not be able to expose this information.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Docker容器不应该能够暴露这些信息。
- en: 'To start making some simple changes to your container to stop this access from
    happening again, open the Dockerfile again and add the highlighted code (*lines
    6*, *7*, *8*, and *9*), keeping the previous lines of code as they are. These
    lines of code will create a group, `10001`, and a user, `20002`. The user will
    be set up with a `home` directory, which you will then move into and start working
    with the `USER` directive in *line 9*:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始对容器进行一些简单的更改，以阻止再次发生这种访问，再次打开Dockerfile并添加突出显示的代码（*行6*，*7*，*8*和*9*），保持先前的代码不变。这些代码将创建一个名为`10001`的组和一个名为`20002`的用户。然后将设置一个带有`home`目录的用户，然后您将进入该目录并开始使用*行9*中的`USER`指令进行操作：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Make a change to *line 15* to make sure the script is being run from the new
    `security_app` directory, and then save the Dockerfile:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对*行15*进行更改，以确保脚本是从新的`security_app`目录运行的，然后保存Dockerfile：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The complete Dockerfile should look like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的Dockerfile应该如下所示：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Build the image again and run it with the `whoami` command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次构建图像并使用`whoami`命令运行它：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will see a new user as `20002` and not the root user:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个新用户为`20002`而不是root用户：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Previously, you were able to run `nmap` from the container. Verify whether
    the new user is stopped from accessing the `nmap` command now to scan for network
    vulnerabilities:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以前，您可以从容器中运行`nmap`。验证新用户是否被阻止访问`nmap`命令以扫描网络漏洞：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'By running your image again with the `nmap -sS` command, you should now be
    stopped from running the command since the `20002` user that the container is
    running as does not have sufficient privileges to run the command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`nmap -sS`命令再次运行您的镜像，您现在应该无法运行该命令，因为容器正在以`20002`用户身份运行，没有足够的权限来运行该命令：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You have now drastically limited what can be done with the running container,
    but are files that are owned by the host root user still accessible by the `security-app`
    running container? Mount the file again and see whether you can output the information
    on the file:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已经大大限制了运行容器的功能，但是由主机root用户拥有的文件是否仍然可以被运行的`security-app`容器访问？再次挂载文件，看看是否可以输出文件的信息：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see `Permission denied` in your results, ensuring the container
    no longer has access to the `secret.txt` file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在结果中看到`Permission denied`，确保容器不再可以访问`secret.txt`文件：
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As we've been able to demonstrate in this exercise, removing your running containers'
    access to the root user is a good first step in reducing what an attacker can
    achieve if they manage to gain access to your running images. The next section
    will take a quick look at the privileges and capabilities of running containers
    and how they can be manipulated with `docker run` commands.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本练习中所演示的，删除正在运行的容器对root用户的访问权限是减少攻击者可以实现的目标的一个良好的第一步。下一节将快速查看运行容器的特权和能力以及如何使用`docker
    run`命令进行操作。
- en: Runtime Privileges and Linux Capabilities
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时特权和Linux能力
- en: When running your containers, Docker provides a flag that overrides all the
    security and user options. This is done by running your container with the `––privileged`
    option. Though you have seen what the user can achieve when the container is run
    as the root user, we are running the container in an unprivileged state. Although
    the `––privileged` option is provided, it should be used sparingly, and we should
    be cautious if anyone is requesting to run your containers in this mode. There
    are some specific circumstances—for example, if you needed to run Docker on Raspberry
    Pi and needed to access the underlying architecture—in which you may want to add
    capabilities to your user.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行容器时，Docker提供了一个标志，可以覆盖所有安全和用户选项。这是通过使用`––privileged`选项来运行容器来实现的。尽管您已经看到了当容器以root用户身份运行时用户可以实现什么，但我们正在以非特权状态运行容器。尽管提供了`––privileged`选项，但应该谨慎使用，如果有人请求以此模式运行您的容器，我们应该谨慎对待。有一些特定情况，例如，如果您需要在树莓派上运行Docker并需要访问底层架构，那么您可能希望为用户添加功能。
- en: If you need to provide extra privileges to your container to run specific commands
    and functions, Docker provides an easier way to do this, using the `––cap–add`
    and `––cap–drop` options. This means that instead of providing complete control
    with the `––privileged` option, you can use `––cap–add` and `––cap–drop` to limit
    what can be achieved by the user.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为容器提供额外的特权以运行特定命令和功能，Docker提供了一种更简单的方法，即使用`––cap–add`和`––cap–drop`选项。这意味着，与使用`––privileged`选项提供完全控制不同，您可以使用`––cap–add`和`––cap–drop`来限制用户可以实现的内容。
- en: Both `––cap–add` and `––cap–drop` can be used simultaneously when running your
    containers. For example, you may want to include `––cap–add=all` and `––cap–drop=chown`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行容器时，`––cap–add`和`––cap–drop`可以同时使用。例如，您可能希望包括`––cap–add=all`和`––cap–drop=chown`。
- en: 'Here''s a short list of some of the capabilities available to both `––cap``–add`
    and `––cap–drop`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用于`––cap``–add`和`––cap–drop`的功能的简短列表：
- en: '`setcap`: Modify the process capabilities of your running system.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setcap`：修改正在运行系统的进程功能。'
- en: '`mknod`: Create special files on your running system using the `mknod` command.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mknod`：使用`mknod`命令在运行系统上创建特殊文件。'
- en: '`chown`: Perform file ownership changes to a file''s UID and GID values.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chown`：对文件的UID和GID值执行文件所有权更改。'
- en: '`kill`: Bypass permissions for sending signals to stop processes.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kill`：绕过发送信号以停止进程的权限。'
- en: '`setgid/setuid`: Change the process'' UID and GID values.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setgid/setuid`：更改进程的UID和GID值。'
- en: '`net_bind_service`: Bind a socket to a domain port.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net_bind_service`：将套接字绑定到域端口。'
- en: '`sys_chroot`: Change the `root` directory on the running system.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys_chroot`：更改运行系统上的`root`目录。'
- en: '`setfcap`: Set the capabilities of a file.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setfcap`：设置文件的功能。'
- en: '`sys_module`: Load and unload kernel modules on the running system.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys_module`：在运行系统上加载和卸载内核模块。'
- en: '`sys_admin`: Perform a range of administration operations.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys_admin`：执行一系列管理操作。'
- en: '`sys_time`: Make changes and set the time to the system clock.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys_time`：对系统时钟进行更改和设置时间。'
- en: '`net_admin`: Perform a range of administration operations related to networking.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net_admin`：执行与网络相关的一系列管理操作。'
- en: '`sys_boot`: Reboot the system and load a new kernel on the system for later execution.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys_boot`：重新启动系统并在系统上加载新内核以供以后执行。'
- en: 'To add extra capabilities, you simply need to include the capability, and if
    you are adding or dropping the capabilities while performing your `docker run`
    command, your command will be as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加额外的功能，您只需包括该功能，如果您在执行`docker run`命令时添加或删除功能，您的命令将如下所示：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, the syntax uses `––cap–add` to add a capability and `––cap–drop`
    to remove the capability.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，语法使用`––cap–add`来添加功能，`––cap–drop`来移除功能。
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you're interested in seeing the entire list of capabilities that you can
    add and drop when running your containers, go to [http://man7.org/linux/man-pages/man7/capabilities.7.html](http://man7.org/linux/man-pages/man7/capabilities.7.html).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣查看在运行容器时可以添加和删除的全部功能列表，请访问[http://man7.org/linux/man-pages/man7/capabilities.7.html](http://man7.org/linux/man-pages/man7/capabilities.7.html)。
- en: We've taken a brief look at using privileges and capabilities. Later in this
    chapter, we will get a chance to use the functionality when testing our security
    profiles. For now, though, we are going to look at using digital signatures with
    our Docker images to verify their authenticity.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简要介绍了使用特权和功能。在本章的后面，我们将有机会在测试安全配置文件时使用这些功能。不过，现在我们将看看如何使用数字签名来验证我们的Docker镜像的真实性。
- en: Signing and Verifying Docker Images
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 签署和验证Docker镜像
- en: Just as we can make sure that the applications we purchase and install on our
    systems are from a trusted source, we can do the same with the Docker images we
    use. Running an untrusted Docker image could become a huge risk and could cause
    major issues in our system. This is why we should look to have specific proof
    of the images we are using. An untrusted source could potentially add code to
    the running image, which could expose your entire network to the attacker.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们可以确保我们购买和安装在系统上的应用程序来自可信任的来源一样，我们也可以对我们使用的Docker镜像进行同样的操作。运行一个不受信任的Docker镜像可能会带来巨大的风险，并可能导致系统出现重大问题。这就是为什么我们应该寻求对我们使用的镜像进行特定的验证。不受信任的来源可能会向正在运行的镜像添加代码，这可能会将整个网络暴露给攻击者。
- en: Fortunately, Docker has a way of digitally signing our images to ensure we're
    using images from a verified vendor or provider. This will also ensure the image
    has not been changed or corrupted since it was originally signed, ensuring some
    authenticity. It shouldn't be the only way we trust our images. As you'll see
    later in this chapter, once we have our image, we can then scan it to ensure we
    avoid installing an image that may have security issues.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Docker有一种方式可以对我们的镜像进行数字签名，以确保我们使用的是来自经过验证的供应商或提供者的镜像。这也将确保自签名之初镜像未被更改或损坏，从而确保其真实性。这不应该是我们信任镜像的唯一方式。正如您将在本章后面看到的那样，一旦我们有了镜像，我们可以扫描它以确保避免安装可能存在安全问题的镜像。
- en: The way that Docker allows us to sign and verify images is by using **Docker
    Content Trust** (**DCT**). DCT is provided as part of Docker Hub and allows you
    to use digital signatures for all the data sent and received from your registries.
    The DCT is associated with the image tag, so not all images need to be tagged,
    and as a result, not all images will have a DCT associated with it. This will
    mean that anyone wanting to publish an image can do so but is able to ensure the
    image is working correctly before needing to sign it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Docker允许我们签署和验证镜像的方式是使用**Docker内容信任**（**DCT**）。DCT作为Docker Hub的一部分提供，并允许您对从您的注册表发送和接收的所有数据使用数字签名。DCT与镜像标签相关联，因此并非所有镜像都需要标记，因此并非所有镜像都会有与之相关的DCT。这意味着任何想要发布镜像的人都可以这样做，但可以确保在需要签署之前镜像是否正常工作。
- en: 'DCT doesn''t only stop with Docker Hub. If a user has enabled DCT on their
    environment, they will only be able to pull, run, or build with images that are
    trusted, as DCT ensures that a user will only be able to see signed images. DCT
    trust is managed through the use of signing keys, which are created the first
    time you run DCT. When a key set is created, it consists of three different types
    of keys:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: DCT并不仅限于Docker Hub。如果用户在其环境中启用了DCT，他们只能拉取、运行或构建受信任的镜像，因为DCT确保用户只能看到已签名的镜像。DCT信任是通过使用签名密钥来管理的，这些密钥是在首次运行DCT时创建的。当密钥集创建时，它包括三种不同类型的密钥：
- en: '**Offline keys**: These are used to create tagging keys. They should be stored
    carefully and are owned by the user creating the images. If these keys are lost
    or compromised, it could cause a lot of issues for the publisher.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线密钥**：用于创建标记密钥。它们应该被小心存放，并由创建图像的用户拥有。如果这些密钥丢失或被 compromise，可能会给发布者带来很多问题。'
- en: '**Repository or tagging keys**: These reside with the publisher and are associated
    with the image repository. They are used when you are signing your trusted images
    ready to be pushed to your repository.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库或标记密钥**：这些与发布者相关，并与图像存储库相关联。当您签署准备推送到存储库的受信任图像时使用。'
- en: '**Server managed keys**: These are also associated with the image repository
    and are stored on the server.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器管理的密钥**：这些也与图像存储库相关联，并存储在服务器上。'
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you keep your offline keys safe because if you lose your offline key,
    it will cause a lot of problems as Docker Support will most likely need to be
    involved to reset the repository state. It also requires manual intervention from
    all consumers that have used signed images from the repository.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您保管好您的离线密钥，因为如果您丢失了离线密钥，它将会导致很多问题，因为Docker支持很可能需要介入来重置存储库状态。这还需要所有使用过存储库中签名图像的消费者进行手动干预。
- en: 'Just as we''ve seen in previous sections, Docker provides easy-to-use command-line
    options to generate, load, and work with signing keys. If you have DCT enabled,
    Docker will set up your keys and sign your images directly with them. If you''d
    like to control things a little further, you can use the `docker trust key generate`
    command to create your offline keys with the name you assign to them:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在前面的章节中看到的那样，Docker提供了易于使用的命令行选项来生成、加载和使用签名密钥。如果您启用了DCT，Docker将使用您的密钥直接对图像进行签名。如果您想进一步控制事情，您可以使用`docker
    trust key generate`命令来创建您的离线密钥，并为它们分配名称：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Your keys will be stored in your `home` directory in the `.docker/trust` directory.
    If you have a set of offline keys, you can use the `docker trust key load` command
    with the keys and the name you created them with, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您的密钥将存储在您的`home`目录的`.docker/trust`目录中。如果您有一组离线密钥，您可以使用`docker trust key load`命令和您创建它们的名称来使用这些密钥，如下所示：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once you have your key, or you load in your original keys, you can then start
    to sign your images. You need to include the full registry name and the tag of
    the image using the `docker trust sign` command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有您的密钥，或者加载了您的原始密钥，您就可以开始对图像进行签名。您需要使用`docker trust sign`命令包括图像的完整注册表名称和标签：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once you sign your images, or you have an image that you need to verify is
    signed, you can use the `docker trust inspect` command to show the details of
    the signing keys and the issuer:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您签署了您的图像，或者您有一个需要验证签名的图像，您可以使用`docker trust inspect`命令来显示签名密钥和签发者的详细信息：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using DCT as part of your development process prevents users from using container
    images from untrusted and unknown sources. We'll use the security app we've been
    working on in the previous sections of this chapter to create and implement a
    DCT signing key.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中使用DCT可以防止用户使用来自不受信任和未知来源的容器图像。我们将使用本章前几节中我们一直在开发的安全应用程序来创建和实施DCT签名密钥。
- en: 'Exercise 11.02: Signing Docker Images and Utilizing DCT on Your System'
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.02：签署Docker图像并在您的系统上利用DCT
- en: 'In the following exercise, you will learn about using DCT and implementing
    processes using signed images in your environment. You will begin by exporting
    the `DOCKER_CONTENT_TRUST` environment variable to enable DCT on your system.
    Moving on, you will learn how to sign the images and verify signed images:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将学习如何在您的环境中使用DCT并实施使用签名图像的流程。您将首先导出`DOCKER_CONTENT_TRUST`环境变量以在您的系统上启用DCT。接下来，您将学习如何对图像进行签名和验证签名的图像：
- en: 'Export the `DOCKER_CONTENT_TRUST` environment variable to your system to enable
    DCT on your system. Also, make sure the variable is set to `1`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`DOCKER_CONTENT_TRUST`环境变量导出到您的系统，以在您的系统上启用DCT。还要确保将变量设置为`1`：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that DCT is enabled, you won''t be able to pull or work with any Docker
    images that do not have a signed key associated with them. We can test this by
    pulling the `security-app` image from our Docker Hub repository:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在启用了DCT，您将无法拉取或处理任何没有与其关联签名密钥的Docker图像。我们可以通过从Docker Hub存储库中拉取`security-app`图像来测试：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As you can see from the error message, we weren''t able to pull our latest
    image, and that''s good news because we hadn''t pushed it originally using a signing
    key:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从错误消息中可以看出，我们无法拉取最新的图像，这是个好消息，因为我们最初没有使用签名密钥进行推送：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Push the image to your image repository:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像推送到您的图像存储库：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should not be able to do this as there are no signing keys associated with
    this local image either:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您不应该能够这样做，因为本地图像也没有关联签名密钥：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Tag your new image ready to be pushed to Docker Hub as `trust1`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新图像标记为`trust1`，准备推送到Docker Hub：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As mentioned earlier, a signing key will be associated automatically with the
    image when we push it to our repository for the first time. Make sure to tag your
    image, as this will stop DCT from recognizing that it needs to be signed. Push
    the image to the repository again:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，当我们第一次将图像推送到存储库时，签名密钥将自动与图像关联。确保给你的图像打上标签，因为这将阻止DCT识别需要签名。再次将图像推送到存储库：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following lines will be printed after running the preceding command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述命令后，将打印以下行：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The following output shows that as the image is being pushed to the registry,
    a new signing key is created as part of the process, requesting the user to create
    a new root key and repository key in the process.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示，当图像被推送到注册表时，作为该过程的一部分创建了一个新的签名密钥，要求用户在过程中创建新的根密钥和存储库密钥。
- en: 'It''s a lot more secure now. What about running the image on your system, though?
    With DCT now enabled on our system, will there be any issues running on our container
    image? Use the `docker run` command to run the `security-app` image on your system:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在更加安全了。不过，在您的系统上运行图像呢？现在我们的系统上启用了DCT，运行容器图像会有任何问题吗？使用`docker run`命令在您的系统上运行`security-app`图像：
- en: '[PRE37]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The command should return the following output:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回以下输出：
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding output, we have deliberately not used the `trust1` tag. As
    in earlier chapters, Docker will try to run the image with the `latest` tag. As
    this also doesn't have a signing key associated with it, you are not able to run
    it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的输出中，我们故意没有使用`trust1`标签。与前几章一样，Docker将尝试使用`latest`标签运行图像。由于这也没有与之关联的签名密钥，因此无法运行它。
- en: 'You can sign the image directly from your working system, and you can use the
    keys created previously to sign subsequent tagged images. Tag your image with
    the `trust2` tag:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以直接从工作系统对图像进行签名，并且可以使用之前创建的密钥对后续标记的图像进行签名。使用`trust2`标签对图像进行标记：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Sign the newly tagged image with the signing key created earlier in this exercise.
    Use the `docker trust sign` command with the image name and tag to sign the image
    and layers of the image:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用在此练习中创建的签名密钥对新标记的图像进行签名。使用`docker trust sign`命令对图像和图像的层进行签名：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The command will automatically push the signed image to our Docker Hub repository
    as well:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将自动将已签名的图像推送到我们的Docker Hub存储库：
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'View the signing information using the `docker trust` command with the `inspect`
    option:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker trust`命令和`inspect`选项查看签名信息：
- en: '[PRE42]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output will give you details of the signer, the tagged image that is signed,
    and other information on the image:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将为您提供签名者的详细信息，已签名的标记图像以及有关图像的其他信息：
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Use the `docker trust revoke` command to remove the signature of the associated
    key:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker trust revoke`命令来移除相关密钥的签名：
- en: '[PRE44]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you're using your own Docker registry, you may need to set up a Notary server
    to allow DCT to work with your Docker registry. Products such as Amazon's Elastic
    Container Registry and Docker Trusted Registry have Notary built into their products.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用自己的Docker注册表，您可能需要设置一个公证服务器，以允许DCT与您的Docker注册表一起工作。亚马逊的弹性容器注册表和Docker可信注册表等产品已经内置了公证功能。
- en: As you can see, signing and verifying your Docker images using DCT makes it
    easy to control the images you are using as part of your applications. Using signed
    images from trusted sources is only part of the equation. In the next section,
    we'll use Anchore and Snyk to start scanning our images for vulnerabilities.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，使用DCT对Docker映像进行签名和验证可以轻松地控制您作为应用程序一部分使用的映像。从可信源使用已签名的映像只是方程式的一部分。在下一节中，我们将使用Anchore和Snyk来开始扫描我们的映像以查找漏洞。
- en: Docker Image Security Scans
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker映像安全扫描
- en: Security scans play an important part in not only ensuring the uptime of your
    applications but also making sure you are not running outdated, unpatched, or
    vulnerable container images. Security scans should be performed on all images
    used by your team and in your environment. It doesn't matter if you have created
    them from scratch and you trust them; it's still an important step in reducing
    the potential risk within your environment. This section of the chapter will go
    through two options for scanning images that can easily be adopted by your development
    teams.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 安全扫描在不仅确保应用程序的正常运行时间方面发挥着重要作用，而且还确保您不会运行过时、未打补丁或容器映像存在漏洞。应该对团队使用的所有映像以及您的环境中使用的所有映像进行安全扫描。无论您是从头开始创建它们并且信任它们与否，这都是减少环境中潜在风险的重要步骤。本章的这一部分将介绍两种扫描映像的选项，这些选项可以轻松地被您的开发团队采用。
- en: 'By implementing a security scan of our Docker images, we hope to achieve the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对我们的Docker映像实施安全扫描，我们希望实现以下目标：
- en: We need to keep a database of known and up-to-date vulnerabilities or use an
    application that will keep this database on our behalf.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要保持一个已知且最新的漏洞数据库，或者使用一个将代表我们保持这个数据库的应用程序。
- en: We scan our Docker images against this database of vulnerabilities, not only
    verifying that the underlying operating system is safe and patched but also that
    the open-source applications used by the container and the languages used by our
    software implementation are safe.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将我们的Docker映像与漏洞数据库进行扫描，不仅验证底层操作系统是否安全和打了补丁，还验证容器使用的开源应用程序和我们软件实现所使用的语言是否安全。
- en: Once the security scan is complete, we need to be provided with a full report
    of what has been scanned on our image, as well as report and alert any issues
    that may have been highlighted during the scan.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全扫描完成后，我们需要得到一个完整的报告，报告和警报任何在扫描过程中可能被突出显示的问题。
- en: Finally, a security scan can then provide remediation of any issues found and
    alerted on by updating the base image used in the Dockerfile or supporting the
    applications used.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，安全扫描可以提供任何发现的问题的修复，并通过更新Dockerfile中使用的基础镜像或支持的应用程序来发出警报。
- en: There are a lot of products on the market that can perform security scans for
    you, both paid and open source. We are limited with our space in this chapter,
    so we've chosen two services that we found to be both easy to use and that provide
    good functionality. The first is Anchore, which is an open-source container analysis
    tool that we'll install onto our system and run as a local tool to test our images.
    We will then look at Snyk, which is an online SaaS product. There is a free version
    of Snyk available, which is the version we will be using in this chapter to demonstrate
    how it works. It provides decent functionality without needing to pay a monthly
    fee.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有很多可以为您执行安全扫描的产品，包括付费和开源产品。在本章中，由于篇幅有限，我们选择了两项我们发现易于使用并提供良好功能的服务。首先是Anchore，这是一个开源的容器分析工具，我们将安装到我们的系统上，并作为本地工具来测试我们的图像。然后我们将看看Snyk，这是一个在线SaaS产品。Snyk有免费版本可用，这也是我们在本章中将使用的版本，以演示其工作原理。它提供了不错的功能，而无需支付月费。
- en: Scanning Images Locally Using Anchore Security Scan
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Anchore安全扫描本地扫描图像
- en: Anchore Container Analysis is an open-source static analysis tool that allows
    you to scan your Docker images and provide a pass or fail result against a policy
    defined by the user. The Anchore Engine allows the user to pull an image and without
    running it, analyze the image's content, and evaluate whether the image is suitable
    for use. Anchore uses a PostgreSQL database to store details of known vulnerabilities.
    You can then use the command-line interface to scan images against the database.
    Anchore also makes it very easy to get started, as we will see in the following
    exercise, as it provides an easy-to-use `docker-compose` file to automate installation
    and get you started as quickly as possible.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Anchore容器分析是一个开源的静态分析工具，允许您扫描您的Docker图像，并根据用户定义的策略提供通过或失败的结果。Anchore Engine允许用户拉取图像，并在不运行图像的情况下分析图像的内容，并评估图像是否适合使用。Anchore使用PostgreSQL数据库存储已知漏洞的详细信息。然后，您可以使用命令行界面针对数据库扫描图像。Anchore还非常容易上手，正如我们将在接下来的练习中看到的那样，它提供了一个易于使用的`docker-compose`文件，以自动安装并尽快让您开始使用。
- en: Note
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you're interested in learning more about Anchore, there is a large body of
    documentation and information at [https://docs.anchore.com/current/](https://docs.anchore.com/current/).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Anchore想了解更多信息，可以在[https://docs.anchore.com/current/](https://docs.anchore.com/current/)找到大量的文档和信息。
- en: In the upcoming exercise, once our environment is up and running, you will interface
    with Anchore using its API. The `anchore-cli` command comes with a number of easy-to-use
    commands to check the system status and start to assess the vulnerability of our
    images.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将进行的练习中，一旦我们的环境正常运行，您将使用Anchore的API进行交互。`anchore-cli`命令带有许多易于使用的命令，用于检查系统状态并开始评估我们图像的漏洞。
- en: 'Once our system is up and running, we can use the `system status` command to
    provide a list of all our services and ensure they are up and running:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的系统正常运行，我们可以使用`system status`命令来提供所有服务的列表，并确保它们正常运行：
- en: '[PRE45]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'One of the first things you''ll need to do once your system is up and running
    is to verify that the feeds list is up to date. This will ensure that your database
    has been populated with vulnerability feeds. This is achieved with the following
    `system feeds list` command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦系统正常运行，您需要做的第一件事情之一就是验证feeds列表是否是最新的。这将确保您的数据库已经填充了漏洞feeds。这可以通过以下`system
    feeds list`命令来实现：
- en: '[PRE46]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'By default, `anchore-cli` will use Docker Hub as your image registry. If your
    image is residing on a different registry, you will need to add the registry with
    the `anchore-cli registry add` command and specify the registry name, as well
    as include a username and password that Anchore can use:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`anchore-cli`将使用Docker Hub作为您的图像注册表。如果您的图像存储在不同的注册表上，您将需要使用`anchore-cli
    registry add`命令添加注册表，并指定注册表名称，以及包括Anchore可以使用的用户名和密码：
- en: '[PRE47]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To add an image to Anchore, you can use the `image add` command-line option,
    including the Docker Hub location and the image name:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要将图像添加到Anchore，您可以使用`image add`命令行选项，包括Docker Hub位置和图像名称：
- en: '[PRE48]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If you then wish to scan the image for vulnerabilities, you can do so using
    the `image vuln` option, including the image name you scanned in originally. We
    could also use the `os` option for operating system-specific vulnerabilities and
    `non-os` for language-related vulnerabilities. In the following example, we have
    used `all` to include both the `os` and `non-os` options:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望扫描图像以查找漏洞，可以使用`image vuln`选项，包括您最初扫描的图像名称。我们还可以使用`os`选项来查找特定于操作系统的漏洞，以及`non-os`来查找与语言相关的漏洞。在以下示例中，我们使用了`all`来包括`os`和`non-os`选项：
- en: '[PRE49]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Then, to view the completed evaluation of the image and be provided with a
    pass or fail on whether the image is safe for use, you use the `evaluate check`
    option of the `anchore-cli` command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要查看图像的完成评估，并根据图像是否安全可用提供通过或失败，您可以使用`anchore-cli`命令的`evaluate check`选项：
- en: '[PRE50]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: With all that in mind, Anchore does provide a supported and paid version with
    an easy-to-use web interface, but as you'll see in the following exercise, there
    is not a lot of hard work required to get the Anchore application running and
    scanning on your system.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，Anchore确实提供了一个支持和付费版本，带有易于使用的Web界面，但正如您将在以下练习中看到的，需要很少的工作即可让Anchore应用程序在您的系统上运行和扫描。
- en: Note
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The previous exercise used DCT as part of the creation and signing of containers.
    In the following exercise, the Anchore image needed for the exercise uses the
    `latest` tag, so if you are still running DCT, you will need to stop it before
    proceeding with the next exercise:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个练习在创建和签署容器时使用了DCT。在以下练习中，用于练习的Anchore图像使用了`latest`标签，因此如果您仍在运行DCT，则需要在进行下一个练习之前停止它：
- en: '`export DOCKER_CONTENT_TRUST=0`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`export DOCKER_CONTENT_TRUST=0`'
- en: 'Exercise 11.03: Getting Started with Anchore Image Scanning'
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.03：开始使用Anchore图像扫描
- en: 'In the following exercise, you will install Anchore onto your local system
    using `docker-compose` and start to analyze the images you have been using as
    part of this chapter:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，您将使用`docker-compose`在本地系统上安装Anchore，并开始分析您在本章中使用的图像：
- en: 'Create and tag a new version of the `security-app` image that you have been
    working on. Tag the image with the `scan1` tag:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并标记您一直在使用的`security-app`图像的新版本。使用`scan1`标记图像：
- en: '[PRE51]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Push it to the Docker Hub repository:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 将其推送到Docker Hub存储库：
- en: '[PRE52]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create a new directory called `aevolume` and move into that directory using
    the following command. This is where we will perform our work:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`aevolume`的新目录，并使用以下命令进入该目录。这是我们将执行工作的地方：
- en: '[PRE53]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Anchore provides you with everything you need to get started in an easy-to-use
    `docker-compose.yaml` file to set up and run the Anchore API. Pull the latest
    `anchore-engine` Docker Compose file using the following command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Anchore为您提供了一切您需要开始使用的东西，一个易于使用的`docker-compose.yaml`文件来设置和运行Anchore API。使用以下命令拉取最新的`anchore-engine`
    Docker Compose文件：
- en: '[PRE54]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Look through the `docker-compose.yml` file. Although it contains over 130 lines,
    there is nothing too complex in the file. The `Compose` file is setting up the
    functionality for Anchore, including the PostgreSQL database, catalog, and analyzer
    to query against; a simple queue and policy engine; and an API to run commands
    and queries.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`docker-compose.yml`文件。虽然文件包含超过130行，但文件中没有太复杂的内容。`Compose`文件正在设置Anchore的功能，包括PostgreSQL数据库、目录和分析器进行查询；一个简单的队列和策略引擎；以及一个API来运行命令和查询。
- en: 'Pull the images needed by the `docker-compose.yml` file using the `docker-compose
    pull` command, making sure you are in the same directory as the `Compose` file:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose pull`命令拉取`docker-compose.yml`文件所需的镜像，确保您在与`Compose`文件相同的目录中：
- en: '[PRE55]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The command will start pulling the database, catalog, analyzer, simple queue,
    policy engine, and API:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将开始拉取数据库、目录、分析器、简单队列、策略引擎和API：
- en: '[PRE56]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If all our images are now available, as seen in the preceding output, there
    is nothing left to do other than running the `Compose` file using the `docker-compose
    up` command. Use the `-d` option to have all of the containers running in the
    background as daemons:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们的所有镜像现在都可用，如前面的输出所示，除了使用`docker-compose up`命令运行`Compose`文件之外，没有其他事情要做。使用`-d`选项使所有容器作为守护进程在后台运行：
- en: '[PRE57]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The command should output the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应该输出以下内容：
- en: '[PRE58]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Run the `docker ps` command to have the running containers on your system that
    make up Anchore ready to start scanning our images. The `IMAGE`, `COMMAND`, and
    `CREATED` columns are removed from the table for convenience:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker ps`命令，以查看系统上正在运行的包含Anchore的容器，准备开始扫描我们的镜像。表格中的`IMAGE`、`COMMAND`和`CREATED`列已被删除以方便查看：
- en: '[PRE59]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'All values in the output should show `healthy` for each of the Anchore Engine containers:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的所有值应该显示每个Anchore Engine容器的`healthy`状态：
- en: '[PRE60]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now that the environment is deployed onto your system, use the `docker-compose
    exec` command to run the `anchor-cli` commands mentioned earlier. Use the `pip3`
    command to install the `anchorecli` package onto your running system. The `--version`
    command has been used to verify whether `anchore-cli` has installed successfully:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在环境已部署到您的系统上，使用`docker-compose exec`命令来运行前面提到的`anchor-cli`命令。使用`pip3`命令将`anchorecli`包安装到您的运行系统上。使用`--version`命令来验证`anchore-cli`是否已成功安装：
- en: '[PRE61]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The command returns the version of `anchor-cli`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回`anchor-cli`的版本：
- en: '[PRE62]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The version may vary depending on your system.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 版本可能会因系统而异。
- en: 'You could now run your `anchore-cli` command, but you would need to specify
    the URL (using `--url`) to your API and the username and password (using `--u`
    and `--p`). Instead, export the values to your environment with the following
    commands so that you don''t need to use the extra command-line options:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以运行您的`anchore-cli`命令，但您需要指定API的URL（使用`--url`）以及用户名和密码（使用`--u`和`--p`）。相反，使用以下命令将值导出到您的环境中，这样您就不需要使用额外的命令行选项：
- en: '[PRE63]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding variables are the default values for the `Compose` file provided
    by Anchore. If you decide to set up the environment running inside your deployment
    environment, you will most likely change these to be more secure.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 上述变量是Anchore提供的`Compose`文件的默认值。如果您决定在部署环境中设置运行环境，您很可能会更改这些值以提高安全性。
- en: 'With `anchore-cli` now installed and configured, use the `anchore-cli system
    status` command to verify that the analyzer, queue, policy engine, catalog, and
    API are all up and running:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在`anchore-cli`已安装和配置好，使用`anchore-cli system status`命令来验证分析器、队列、策略引擎、目录和API是否都正常运行：
- en: '[PRE64]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'There may be instances where one or two of the services may be down, which
    will mean you will most likely need to restart the container:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现一两个服务宕机的情况，这意味着您很可能需要重新启动容器：
- en: '[PRE65]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Note
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`Engine DB Version` and `Engine Code Version` may vary depending on the system.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`Engine DB Version`和`Engine Code Version`可能会因系统而异。'
- en: 'Use the `anchore-cli system feeds list` command to see all of the vulnerabilities
    in your database:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`anchore-cli system feeds list`命令查看数据库中的所有漏洞：
- en: '[PRE66]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The following output has been reduced as there is, as you can imagine, a large
    number of vulnerabilities provided to the database:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于提供给数据库的漏洞数量很大，以下输出已经被缩减：
- en: '[PRE67]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: In the preceding output, you will notice that some of the vulnerability feeds
    are showing `None`. This is because the database was only recently set up and
    has not updated all of the vulnerabilities. Continue to display the feeds list
    as you did in the previous step, and once all of the entries are showing a date
    in the `LastSync` column, you will then be ready to start scanning images.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，您会注意到一些漏洞feed显示为`None`。这是因为数据库是最近设置的，并且尚未更新所有漏洞。继续显示feed列表，就像在上一步中所做的那样，一旦所有条目在`LastSync`列中显示日期，您就可以开始扫描镜像了。
- en: 'Once the feed has fully updated, add an image with the `anchore-cli image add`
    command. Remember to use the full path, including the image repository tags, as
    Anchore will use the image located on Docker Hub:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦feed完全更新，使用`anchore-cli image add`命令添加镜像。记得使用完整路径，包括镜像仓库标签，因为Anchore将使用位于Docker
    Hub上的镜像：
- en: '[PRE68]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The command adds the image to the Anchore database, ready for it to be scanned:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将镜像添加到Anchore数据库，准备进行扫描：
- en: '[PRE69]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: When you add the image, you will notice that we have highlighted that the output
    is showing `not_analyzed`. This will be queued for analysis and for smaller images,
    which will be a quick process.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当您添加镜像时，您会注意到我们已经强调输出显示为`not_analyzed`。这将被排队等待分析，对于较小的镜像，这将是一个快速的过程。
- en: 'Monitor your image to see whether it has been analyzed using the `anchore-cli
    image list` command:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控您的镜像，查看是否已使用`anchore-cli image list`命令进行分析：
- en: '[PRE70]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'This will provide a list of all the images we have currently added and will
    give you a status on whether they have been analyzed:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供我们当前添加的所有镜像列表，并显示它们是否已经被分析的状态：
- en: '[PRE71]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now that the image is added and analyzed, you can start to look through the
    image and see what is included as part of the base image and what applications
    are installed, including the version and license number. Use the `image content
    os` command for `anchore-cli`. You can also use other content types, including
    `file` for all the files on the image, `npm` for all the Node.js modules, `gem`
    for the Ruby gems, `java` for the Java archives, and `python` for the Python artifacts:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在镜像已经添加并分析完成，您可以开始查看镜像，并查看基础镜像和安装的应用程序，包括版本和许可证号。使用`anchore-cli`的`image content
    os`命令。您还可以使用其他内容类型，包括`file`用于镜像上的所有文件，`npm`用于所有Node.js模块，`gem`用于Ruby gems，`java`用于Java存档，以及`python`用于Python工件。
- en: '[PRE72]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The command will return an output like the following:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将返回以下输出：
- en: '[PRE73]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Use the `anchore-cli image vuln` command and include the image you want to
    scan to check for vulnerabilities. If there are no vulnerabilities present, you
    should not see any output. We have used `all` in the following command line to
    provide a report on both OS and non-OS vulnerabilities. We could also have used
    `os` for operating system-specific vulnerabilities and `non-os` for language-related
    vulnerabilities:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`anchore-cli image vuln`命令，并包括您要扫描的图像以检查漏洞。如果没有漏洞存在，您将不会看到任何输出。我们在下面的命令行中使用了`all`来提供关于操作系统和非操作系统漏洞的报告。我们也可以使用`os`来获取特定于操作系统的漏洞，使用`non-os`来获取与语言相关的漏洞：
- en: '[PRE74]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Perform an evaluation check of the image to provide us with a `pass` or `fail`
    result for our image scan. Use the `anchore-cli evaluate check` command to see
    whether the image is safe to use:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对图像进行评估检查，为我们提供图像扫描的“通过”或“失败”结果。使用`anchore-cli evaluate check`命令来查看图像是否安全可用：
- en: '[PRE75]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: All of the preceding exercises have gone a long way to establish whether or
    not our image has any vulnerabilities and is safe to use. The following section
    will show you an alternative to Anchore, which although it has a paid component,
    does still provide a large amount of functionality by only accessing the free
    version.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前面的练习都已经很好地确定了我们的图像是否存在漏洞并且是否安全可用。接下来的部分将向您展示Anchore的替代方案，尽管它有付费组件，但仍然通过访问免费版本提供了大量的功能。
- en: Utilizing SaaS Security Scans with Snyk
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Snyk进行SaaS安全扫描
- en: Snyk is an online SaaS application that provides an easy-to-use interface that
    allows you to scan your Docker images for vulnerabilities. Although Snyk is a
    paid application, it does provide a free tier with a large amount of functionality
    to the user. It provides unlimited tests to open source projects and allows GitHub
    and GitLab integration, with remediation to open source projects and continuous
    monitoring. You are limited to the amount of container vulnerability testing that
    is allowed.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Snyk是一个在线SaaS应用程序，提供易于使用的界面，允许您扫描Docker图像以查找漏洞。虽然Snyk是一个付费应用程序，但它提供了一个免费的功能大量的免费版本。它为开源项目提供无限的测试，并允许GitHub和GitLab集成，提供对开源项目的修复和持续监控。您所能进行的容器漏洞测试受到限制。
- en: The following exercise will run through using the web interface providing a
    guide on how to register for an account and then add your container to be scanned
    for security vulnerabilities.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的练习将通过使用Web界面来指导您如何注册帐户，然后添加要扫描安全漏洞的容器。
- en: 'Exercise 11.04: Setting up a Snyk Security Scan'
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.04：设置Snyk安全扫描
- en: 'In this exercise, you will use your web browser to work with Snyk to start
    implementing security scans on our `security-app` image:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用您的网络浏览器与Snyk合作，开始对我们的“security-app”图像实施安全扫描。
- en: Create an account with Snyk if you have not used Snyk before or do not have
    an account. You are not required to give any credit card details unless you want
    to upgrade your account to the paid version, but in this exercise, you will only
    need the free option. So, log in to Snyk or create an account at [https://app.snyk.io/signup](https://app.snyk.io/signup).
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您以前没有使用过Snyk或没有帐户，请在Snyk上创建一个帐户。除非您想将帐户升级到付费版本，否则您不需要提供任何信用卡详细信息，但在这个练习中，您只需要免费选项。因此，请登录Snyk或在[https://app.snyk.io/signup](https://app.snyk.io/signup)上创建一个帐户。
- en: 'You will be presented with a web page as in the following screenshot. Choose
    the method by which you wish to create your account and follow the prompts to continue:![Figure
    11.1: Creating an account with Snyk'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个网页，如下面的屏幕截图所示。选择您希望创建帐户的方法，并按照提示继续：![图11.1：使用Snyk创建帐户
- en: '](image/B15021_11_01.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_11_01.jpg)'
- en: 'Figure 11.1: Creating an account with Snyk'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：使用Snyk创建帐户
- en: 'Once logged in, you will be presented with a page similar to the one in *Figure
    11.2*, asking `Where is the code you want to test?`. Snyk not only scans Docker
    images but also scans your code for vulnerabilities. You already have your `security-app`
    image in Docker Hub, so click on the `Docker Hub` button to start the process:![Figure
    11.2: Starting security scans with Snyk'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，您将看到一个类似于*图11.2*的页面，询问`您想要测试的代码在哪里？`。Snyk不仅扫描Docker图像，还扫描您的代码以查找漏洞。您已经在Docker
    Hub中有了您的`security-app`图像，所以点击`Docker Hub`按钮开始这个过程：![图11.2：使用Snyk开始安全扫描
- en: '](image/B15021_11_02.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_11_02.jpg)'
- en: 'Figure 11.2: Starting security scans with Snyk'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：使用Snyk开始安全扫描
- en: Note
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are not presented with the preceding web page, you can go to the following
    URL to add a new repository. Remember to change `<your_account_name>` in the following
    URL to the account you were assigned when you created your Snyk account:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到上述的网页，您可以转到以下网址添加一个新的存储库。请记住，将以下网址中的`<your_account_name>`更改为您创建Snyk帐户时分配给您的帐户名称：
- en: '`https://app.snyk.io/org/<your_account_name>/add`.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://app.snyk.io/org/<your_account_name>/add`。'
- en: 'Authenticate with Docker Hub to allow it to view your available repositories.
    When presented with the following page, enter your Docker Hub details and click
    on `Continue`:![Figure 11.3: Authenticating with Docker Hub in Snyk'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Docker Hub进行身份验证，以允许其查看您可用的存储库。当出现以下页面时，输入您的Docker Hub详细信息，然后点击`Continue`：![图11.3：在Snyk中与Docker
    Hub进行身份验证
- en: '](image/B15021_11_03.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_11_03.jpg)'
- en: 'Figure 11.3: Authenticating with Docker Hub in Snyk'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：在Snyk中与Docker Hub进行身份验证
- en: 'Once authenticated, you will then be presented with a list of all your repositories
    on Docker Hub, including the tags that are stored for each repository. In this
    exercise, you only need to select one of your images and use the `scan1` tag created
    in this section. Select the `security-app` image with the `scan1` tag. Once you
    are happy with your selection, click on the `Add selected repositories` button
    in the top-right corner of the screen:![Figure 11.4: Selecting your Docker Hub
    repositories for Snyk to scan'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证后，您将看到Docker Hub上所有存储库的列表，包括每个存储库存储的标签。在本练习中，您只需要选择一个图像，并使用本节中创建的`scan1`标签。选择带有`scan1`标签的`security-app`图像。一旦您对选择满意，点击屏幕右上角的`Add
    selected repositories`按钮：![图11.4：选择要由Snyk扫描的Docker Hub存储库
- en: '](image/B15021_11_04.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_11_04.jpg)'
- en: 'Figure 11.4: Selecting your Docker Hub repositories for Snyk to scan'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：选择要由Snyk扫描的Docker Hub存储库
- en: 'Snyk will run a scan over your image as soon as you have added it, and depending
    on the size of the image, this should complete in a matter of seconds. Click on
    the `Projects` tab at the top of the screen to see the results of your scan, and
    click and select the repository and tag you would like to view:![Figure 11.5:
    Viewing your project reports in Snyk'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您添加了图像，Snyk将立即对其进行扫描，根据图像的大小，这应该在几秒钟内完成。点击屏幕顶部的`Projects`选项卡，查看扫描结果，并点击选择您想要查看的存储库和标签：![图11.5：在Snyk中查看您的项目报告
- en: '](image/B15021_11_05.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_11_05.jpg)'
- en: 'Figure 11.5: Viewing your project reports in Snyk'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：在Snyk中查看您的项目报告
- en: 'After clicking on the repository name, you will be presented with a report
    of your image scan, outlining details about the image, what base images are being
    used, and whether there were any high, medium, or low issues found during the
    scan:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 单击存储库名称后，您将看到图像扫描报告，概述图像的详细信息，使用了哪些基本图像，以及在扫描过程中是否发现了任何高、中或低级问题：
- en: '![Figure 11.6: Image scan report page in Snyk'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.6：Snyk中的图像扫描报告页面'
- en: '](image/B15021_11_06.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_11_06.jpg)'
- en: 'Figure 11.6: Image scan report page in Snyk'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6：Snyk中的图像扫描报告页面
- en: Snyk will scan your image daily and will alert you if it finds any issues. A
    weekly report will be emailed to you unless there are any vulnerabilities found.
    If there are, you will be notified as soon as possible.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Snyk将每天扫描您的镜像，如果发现任何问题，将会通知您。除非发现任何漏洞，否则每周都会给您发送一份报告。如果有漏洞被发现，您将尽快收到通知。
- en: With Snyk, you can scan your images for vulnerabilities with an easy-to-follow
    interface. As an SaaS web-based application, it also means there is no need to
    administer your applications and servers for security scanning. This is the end
    of the section on security scanning our images, and we will now move on to using
    security profiles with our images to help stop attackers from taking advantage
    of any images that they may be able to access.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Snyk，您可以使用易于遵循的界面扫描您的镜像中的漏洞。作为一种SaaS基于Web的应用程序，这也意味着无需管理应用程序和服务器进行安全扫描。这是关于安全扫描我们的镜像的部分的结束，我们现在将转向使用安全配置文件来帮助阻止攻击者利用他们可能能够访问的任何镜像。
- en: Using Container Security Profiles
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用容器安全配置文件
- en: Security profiles allow you to leverage existing security tools in Linux and
    implement them across your Docker images. In the following sections, we will cover
    both AppArmor and `seccomp`. These are the ways by which you can reduce the amount
    of access that processes can gain when running on your Docker environments. They
    are both simple to use and you'll find you will most likely be using them already
    in your images. We will look at both of them separately but note that AppArmor
    and Security Computing for Linux do overlap with their functionality. For the
    time being, all you need to remember is that AppArmor stops applications from
    accessing files that they shouldn't be accessing, while Security Computing for
    Linux will help stop any Linux kernel vulnerabilities from being exploited.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 安全配置文件允许您利用Linux中现有的安全工具，并在您的Docker镜像上实施它们。在接下来的部分中，我们将涵盖AppArmor和`seccomp`。这些都是您可以在Docker环境中运行时减少进程获取访问权限的方式。它们都很容易使用，您很可能已经在您的镜像中使用它们。我们将分别查看它们，但请注意，AppArmor和Linux的安全计算在功能上有重叠。目前，您需要记住的是，AppArmor可以阻止应用程序访问它们不应该访问的文件，而Linux的安全计算将帮助阻止利用任何Linux内核漏洞。
- en: 'By default, and especially if you have an up-to-date version of Docker running,
    you may already have both running. You can verify this by running the `docker
    info` command and looking for `Security Options`. The following is the output
    from a system showing both features are available:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，特别是如果您正在运行最新版本的Docker，您可能已经同时运行了两者。您可以通过运行`docker info`命令并查找`Security
    Options`来验证这一点。以下是一个显示两个功能都可用的系统的输出：
- en: '[PRE76]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The following sections will cover both AppArmor and Security Computing for Linux
    and give you a clear view of how to implement and work with both on your system.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将涵盖Linux的AppArmor和安全计算，并清楚地介绍如何在系统上实施和使用两者。
- en: Implementing AppArmor Security Profiles on Your Images
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您的镜像上实施AppArmor安全配置文件
- en: AppArmor stands for Application Armor and is a Linux Security module. The goal
    of AppArmor is to protect the operating system from security threats, and it was
    implemented as part of Docker version 1.13.0\. It allows the user to load a security
    profile to their running container and can be created to lock down the processes
    available to the services on the container. The default included by Docker provides
    moderate protection, while still allowing access to a large number of applications.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor代表应用程序装甲，是一个Linux安全模块。AppArmor的目标是保护操作系统免受安全威胁，并作为Docker版本1.13.0的一部分实施。它允许用户向其运行的容器加载安全配置文件，并可以创建以锁定容器上服务可用的进程。Docker默认包含的提供了中等保护，同时仍允许访问大量应用程序。
- en: To help a user write a security profile, AppArmor provides a **complain mode**,
    which allows almost any task to be run without it being restricted, but any breaches
    will be logged to the audit log as an event. It also has an **unconfined mode**,
    which is the same as complain mode but will not log any events.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助用户编写安全配置文件，AppArmor提供了**complain模式**，允许几乎任何任务在没有受限制的情况下运行，但任何违规行为都将被记录到审计日志中。它还有一个**unconfined模式**，与complain模式相同，但不会记录任何事件。
- en: Note
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more details on AppArmor, including documentation, use the following link,
    which will take you to the AppArmor home page on GitLab:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AppArmor的更多详细信息，包括文档，请使用以下链接，它将带您到GitLab上AppArmor主页：
- en: '[https://gitlab.com/apparmor/apparmor/wikis/home](https://gitlab.com/apparmor/apparmor/wikis/home).'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://gitlab.com/apparmor/apparmor/wikis/home](https://gitlab.com/apparmor/apparmor/wikis/home)。'
- en: AppArmor also comes with a set of commands to help users administer the application,
    including compiling and loading policies into the kernel. The default profile
    can be a little confusing for new users. The main rules you need to remember are
    that a deny rule has precedence over allow and owner rules, which means that allow
    rules will be overridden by a subsequent deny rule if they are both on the same
    application. File operations are clearer with `'r'` as read, `'w'` as write, `'k'`
    as lock, `'l'` as link, and `'x'` as execute.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor还配备了一套命令，帮助用户管理应用程序，包括将策略编译和加载到内核中。默认配置文件对新用户来说可能有点令人困惑。您需要记住的主要规则是，拒绝规则优先于允许和所有者规则，这意味着如果它们都在同一个应用程序上，则允许规则将被随后的拒绝规则覆盖。文件操作使用`'r'`表示读取，`'w'`表示写入，`'k'`表示锁定，`'l'`表示链接，`'x'`表示执行。
- en: 'We can start working with AppArmor as it provides some easy-to-use command-line
    tools. The first one you will utilize is the `aa-status` command, which provides
    the status of all the profiles running on your system. These are located in the
    `/etc/apparmor.d` directory of your system:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以开始使用AppArmor，因为它提供了一些易于使用的命令行工具。您将使用的第一个是`aa-status`命令，它提供了系统上所有正在运行的配置文件的状态。这些配置文件位于系统的`/etc/apparmor.d`目录中：
- en: '[PRE77]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'If we have profiles installed on our system, we should at least have the `docker-default`
    profile; it can be applied to our Docker containers with the `--security-opt`
    option of the `docker run` command. In the following example, you can see that
    we are setting the `--security-opt` value to the `apparmor` profile, or you could
    use the `unconfined` profile, which means there is no profile running with the image:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的系统上安装了配置文件，我们至少应该有`docker-default`配置文件；它可以通过`docker run`命令的`--security-opt`选项应用于我们的Docker容器。在下面的示例中，您可以看到我们将`--security-opt`值设置为`apparmor`配置文件，或者您可以使用`unconfined`配置文件，这意味着没有配置文件与该镜像一起运行：
- en: '[PRE78]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'To generate our profiles, we can use the `aa-genprof` command to gain further
    insight into what needs to be set up as the profile. AppArmor will scan through
    the logs when you perform some sample commands to then create a profile for you
    on your system and place it in the default profiles directory:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成我们的配置文件，我们可以使用`aa-genprof`命令来进一步了解需要设置为配置文件的内容。AppArmor将在您执行一些示例命令时扫描日志，然后为您在系统上创建一个配置文件，并将其放在默认配置文件目录中：
- en: '[PRE79]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Once you''re happy with your profiles, they need to be loaded onto your system
    before you can start to use them with your images. You use the `apparmor_parser`
    command with the `-r` (replace, if already set up) and `-W` (write to cache) options.
    The profiles can then be used with your running containers:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您满意您的配置文件，它们需要加载到您的系统中，然后您才能开始使用它们与您的镜像。您可以使用`apparmor_parser`命令，带有`-r`（如果已经设置，则替换）和`-W`（写入缓存）选项。然后可以将配置文件与正在运行的容器一起使用：
- en: '[PRE80]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Lastly, if you wish to then remove a profile from AppArmor, you can use the
    `apparmor_parser` command with the `-R` option to do so:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您希望从AppArmor中删除配置文件，可以使用`apparmor_parser`命令和`-R`选项来执行此操作：
- en: '[PRE81]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: AppArmor seems complicated, but hopefully, with the following exercises, you
    should become comfortable with the application and gain extra confidence in generating
    your custom profiles.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor 看起来很复杂，但希望通过以下练习，您应该能够熟悉该应用程序，并对生成自定义配置文件增加额外的信心。
- en: 'Exercise 11.05: Getting Started with AppArmor Security Profiles'
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.05：开始使用AppArmor安全配置文件
- en: 'The following exercise will introduce you to AppAmor security profiles and
    help you implement new rules in your running Docker containers:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习将向您介绍AppArmor安全配置文件，并帮助您在运行的Docker容器中实施新规则：
- en: 'If you''re running Docker Engine version 19 or greater, AppArmor should already
    be set up as part of the application. Run the `docker info` command to verify
    that it is running:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在运行 Docker Engine 版本19或更高版本，则 AppArmor 应已作为应用程序的一部分设置好。运行`docker info`命令来验证它是否正在运行：
- en: '[PRE82]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Previously in this chapter, we changed the user the container was running as
    by creating the user `20002`. We will stop this for the time being to demonstrate
    how AppArmor works in this situation. Open the `Dockerfile` with your text editor
    and this time, comment *line 9* out as we have in the code below:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中，我们通过创建用户`20002`更改了容器的运行用户。我们将暂停此操作，以演示AppArmor在此情况下的工作原理。使用文本编辑器打开`Dockerfile`，这次将*第9行*注释掉，就像我们在下面的代码中所做的那样：
- en: '[PRE83]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Build the `Dockerfile` again and verify the user the image is once running
    as the root user again:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次构建`Dockerfile`并验证镜像一旦再次作为root用户运行：
- en: '[PRE84]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The above commands will build `Dockerfile` and then return the output like
    the following:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将构建`Dockerfile`，然后返回以下输出：
- en: '[PRE85]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Use the AppArmor `status` command by running `aa-status` in the command line:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中运行`aa-status`使用AppArmor`status`命令：
- en: '[PRE86]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Note
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are refused to run the `aa-status` command, use `sudo`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您被拒绝运行`aa-status`命令，请使用`sudo`。
- en: 'This will show a similar output to the following and will provide the profiles
    loaded and the types of profiles loaded. You''ll notice that the output includes
    all the AppArmor profiles running on the Linux system:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示类似于以下内容的输出，并提供加载的配置文件和加载的配置文件类型。您会注意到输出包括在Linux系统上运行的所有AppArmor配置文件：
- en: '[PRE87]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Run the `security-app` container in the background to help us test AppArmor:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后台运行`security-app`容器，以帮助我们测试AppArmor：
- en: '[PRE88]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'As we didn''t specify a profile to use, AppArmor uses the `docker-default`
    profile. Verify this by running `aa-status` again:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们没有指定要使用的配置文件，AppArmor 使用`docker-default`配置文件。通过再次运行`aa-status`来验证这一点：
- en: '[PRE89]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'You will see, toward the bottom of the output, that it now shows that two processes
    are in `enforce mode`, one showing `docker-default`:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到，在输出的底部，现在显示有两个进程处于`强制模式`，一个显示为`docker-default`：
- en: '[PRE90]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Remove the current containers we have running so that you don''t get confused
    later in this exercise:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除我们当前正在运行的容器，以便在本练习中稍后不会混淆：
- en: '[PRE91]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Start your container without using an AppArmor profile using the `-–security-opt`
    Docker option, specifying `apparmor=unconfined`. Also, use the `–-cap-add SYS_ADMIN`
    capability to make sure you have full access to the running container:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不使用AppArmor配置文件的情况下启动容器，使用`-–security-opt` Docker选项指定`apparmor=unconfined`。还使用`–-cap-add
    SYS_ADMIN`功能，以确保您对运行的容器具有完全访问权限：
- en: '[PRE92]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Access the container and see what type of commands you can run. Use the `docker
    exec` command with `CONTAINER ID` to access the container, but please note that
    your `CONTAINER ID` value will be different from the following:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问容器并查看您可以运行哪些类型的命令。使用`docker exec`命令和`CONTAINER ID`访问容器，但请注意，您的`CONTAINER ID`值将与以下不同：
- en: '[PRE93]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Test out the permissions you have by creating two directories and mounting
    them as a bind mount with the following command:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建两个目录并使用以下命令将它们挂载为绑定挂载来测试你所拥有的权限：
- en: '[PRE94]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Being able to mount directories on the container is an elevated privilege,
    so if you are able to do this, it will be clear that there is no profile stopping
    us, and we have access to mount the filesystem like this:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在容器上挂载目录是一种提升的权限，所以如果你能够做到这一点，那么很明显没有配置文件在阻止我们，并且我们可以像这样访问挂载文件系统：
- en: '[PRE95]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Exit the container using the `docker kill` command. You should see whether
    the default AppArmor profile will restrict access to these commands:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker kill`命令退出容器。你应该看到默认的AppArmor配置文件是否会限制对这些命令的访问：
- en: '[PRE96]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Create a new instance of the `security-app` image. In this instance, use the
    `–-cap-add SYS_ADMIN` capability, as well, to allow the default AppArmor profile
    to be loaded:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`security-app`镜像的一个新实例。在这个实例中，也使用`--cap-add SYS_ADMIN`能力，以允许加载默认的AppArmor配置文件：
- en: '[PRE97]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: The command will return the random hash provided to the user when a new container
    is created.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个新的容器时，该命令将返回提供给用户的随机哈希。
- en: 'Test the changes by accessing the new running container using `exec` command,
    and see whether you can perform a bind mount, as in the earlier step:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`exec`命令访问新的运行容器来测试更改，并查看是否可以执行绑定挂载，就像之前的步骤一样：
- en: '[PRE98]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'You should hopefully see `Permission denied`:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到`Permission denied`：
- en: '[PRE99]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Exit the container again. Delete the original container using the `docker kill` command:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次退出容器。使用`docker kill`命令删除原始容器：
- en: '[PRE100]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: In the next part of this exercise, you will look to see whether you can implement
    our custom profile for our Docker container.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习的下一部分，你将看到是否可以为我们的Docker容器实现自定义配置文件。
- en: 'Use AppArmor tools to gather information about the resource needed to be tracked.
    Use the `aa-genprof` command to track details of the `nmap` command:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用AppArmor工具收集需要跟踪的资源信息。使用`aa-genprof`命令跟踪`nmap`命令的详细信息：
- en: '[PRE101]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Note
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you don''t have `aa-genprof` command installed, install it with the following
    command and then again run the `aa-genprof nmap` command:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装`aa-genprof`命令，使用以下命令安装它，然后再次运行`aa-genprof nmap`命令：
- en: '`sudo apt install apparmor - utils`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt install apparmor-utils`'
- en: 'We have reduced the output of the command, but if it''s successful, you should
    see an output showing it is profiling the `/usr/bin/nmap` command:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经减少了命令的输出，但如果成功的话，你应该会看到一个输出，显示正在对`/usr/bin/nmap`命令进行分析：
- en: '[PRE102]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Note
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If `nmap` is not installed in your system, run the following commands:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的系统中没有安装`nmap`，运行以下命令：
- en: '`sudo apt-get update`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt-get update`'
- en: '`sudo apt-get install nmap`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt-get install nmap`'
- en: 'Run the `nmap` command in a separate terminal window to provide `aa-genprof`
    with the details of the application. Use the `-u root` option as part of the `docker
    run` command to run the `security-app` container as the root user so that it will
    be able to run the `nmap` command:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个单独的终端窗口中运行`nmap`命令，以向`aa-genprof`提供应用程序的详细信息。在`docker run`命令中使用`-u root`选项，以root用户身份运行`security-app`容器，这样它就能够运行`nmap`命令：
- en: '[PRE103]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Move back to the terminal you have been running the `aa-genprof` command from.
    Press *S* to scan the system logs for events. Once the scan finishes, press *F*
    to finish the generation:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你一直在运行`aa-genprof`命令的终端。按下*S*来扫描系统日志以查找事件。扫描完成后，按下*F*来完成生成：
- en: '[PRE104]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'All profiles are placed in the `/etc/apparmor.d/` directory. If everything
    has worked correctly, you should now see a file with a similar output to the following
    in the `/etc/apparmor.d/usr.bin.nmap` file:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置文件都放在`/etc/apparmor.d/`目录中。如果一切正常，你现在应该在`/etc/apparmor.d/usr.bin.nmap`文件中看到类似以下输出的文件：
- en: '[PRE105]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Use the `apparmor_parser` command to load the new file onto the system. Use
    the `-r` option to replace the profile if it already exists and the `-W` option
    to write it to the cache:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`apparmor_parser`命令将新文件加载到系统上。使用`-r`选项来替换已存在的配置文件，使用`-W`选项将其写入缓存：
- en: '[PRE106]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Run the `aa-status` command to verify that the profile is now available and
    to see whether there is a new profile that is specifying `nmap`:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`aa-status`命令来验证配置文件现在是否可用，并查看是否有一个新的配置文件指定了`nmap`：
- en: '[PRE107]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Note that the profile is listed as the same name as the application, `/usr/bin/nmap`,
    which is what you will need to use when running it with our container:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，配置文件的名称与应用程序的名称相同，即`/usr/bin/nmap`，这是在运行容器时需要使用的名称：
- en: '[PRE108]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Now, test your changes. Run the container with the `-u root` user. Also, use
    the `–-security-opt apparmor=/usr/bin/nmap` option to run the container with the
    newly created profile:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，测试您的更改。以`-u root`用户运行容器。还使用`--security-opt apparmor=/usr/bin/nmap`选项以使用新创建的配置文件运行容器：
- en: '[PRE109]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'You should also see a result of `Permission denied` to show that the AppArmor
    profile we have created is restricting the usage as we would hope:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该看到`Permission denied`的结果，以显示我们创建的AppArmor配置文件正在限制使用，这正是我们希望看到的：
- en: '[PRE110]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: In this exercise, we demonstrated how you can start to work with AppArmor on
    your system and also showed you how you can create your profiles. In the next
    section, we will move on to a similar application, *seccomp for Linux*.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们演示了如何在您的系统上开始使用AppArmor，并向您展示了如何创建您自己的配置文件。在下一节中，我们将继续介绍类似的应用程序，即Linux的*seccomp*。
- en: seccomp for Linux Containers
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux容器的seccomp
- en: '`seccomp` for Linux was added to the Linux kernel from version 3.17, and it
    provides a way to restrict the system calls that Linux processes can issue. This
    feature can also be used within our running Docker images to help reduce the processes
    available to running containers, ensuring that if a container is ever accessed
    by an attacker or infected with malicious code, the commands and processes available
    to the attacker will be limited.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的`seccomp`是从3.17版本开始添加到Linux内核中的，它提供了一种限制Linux进程可以发出的系统调用的方法。这个功能也可以在我们运行的Docker镜像中使用，以帮助减少运行容器的进程，确保如果容器被攻击者访问或感染了恶意代码，攻击者可用的命令和进程将受到限制。
- en: '`seccomp` uses profiles to establish a whitelist of system calls that can be
    performed, with the default profile providing a long list of system calls that
    can be performed, and also disables approximately 44 system calls from running
    on your Docker containers. You''ve most likely been using the default `seccomp`
    profile as you have been working through the chapters in this book.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`seccomp`使用配置文件来建立可以执行的系统调用的白名单，默认配置文件提供了一个可以执行的系统调用的长列表，并且还禁用了大约44个系统调用在您的Docker容器上运行。在阅读本书的章节时，您很可能一直在使用默认的`seccomp`配置文件。'
- en: 'Docker will be using the `seccomp` configurations from your host system, which
    can be located by searching for the `/boot/config` file and checking that the
    `CONFIG_SECCOMP` option is set to `y`:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: Docker将使用主机系统的`seccomp`配置，可以通过搜索`/boot/config`文件并检查`CONFIG_SECCOMP`选项是否设置为`y`来找到它：
- en: '[PRE111]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'When running our containers, if we ever need to run the container with no `seccomp`
    profile, we can use the `-–security-opt` option, followed by specifying that the
    `seccomp` profile is unconfirmed. The following example provides the syntax for
    this:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行我们的容器时，如果我们需要以无`seccomp`配置文件的方式运行容器，我们可以使用`--security-opt`选项，然后指定`seccomp`配置文件未确认。以下示例提供了此语法的示例：
- en: '[PRE112]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'We can also create our custom profiles. In these instances, we specify the
    custom profile file location as the value of `seccomp`, as you can see here:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以创建我们自定义的配置文件。在这些情况下，我们将自定义配置文件的位置指定为`seccomp`的值，如下所示：
- en: '[PRE113]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Exercise 11.06: Getting Started with seccomp'
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.06：开始使用seccomp
- en: 'In this exercise, you will use `seccomp` profiles in your current environment.
    You will also create a custom profile to stop your Docker image from performing
    the change ownership command against files:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将在当前环境中使用`seccomp`配置文件。您还将创建一个自定义配置文件，以阻止您的Docker镜像对文件执行更改所有权命令：
- en: 'Check whether your running Linux system has s`eccomp` enabled. This will then
    allow you to ensure that it is running for Docker as well:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您运行的Linux系统是否已启用`seccomp`。然后可以确保它也在Docker上运行：
- en: '[PRE114]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'If you search for `CONFIG_SECCOMP` in your boot config directory, it should
    have a value of `y`:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在引导配置目录中搜索`CONFIG_SECCOMP`，它的值应为`y`：
- en: '[PRE115]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Use the `docker info` command to ensure that Docker is using a profile:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker info`命令确保Docker正在使用配置文件：
- en: '[PRE116]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'In most instances, you will note that it is running the default profile:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您会注意到它正在运行默认配置文件：
- en: '[PRE117]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: We have reduced the output of the `docker info` command, but if you look for
    the `Security Options` heading, you should see `seccomp` on your system. You would
    need to change the value for `CONFIG_SECCOMP` to `n` if you ever wished to turn
    this off.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经减少了`docker info`命令的输出，但是如果您查找`Security Options`标题，您应该会在系统上看到`seccomp`。如果您希望关闭此功能，您需要将`CONFIG_SECCOMP`的值更改为`n`。
- en: 'Run `security-app` to see whether it has also been running with a `seccomp`
    profile. Also, search for the word `Seccomp` in the `/proc/1/status` file:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`security-app`，看看它是否也在运行时使用了`seccomp`配置文件。还要在`/proc/1/status`文件中搜索单词`Seccomp`：
- en: '[PRE118]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'A value of `2` will show that the container has been running with a `Seccomp`
    profile all this time:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 值为`2`将显示容器一直在使用`Seccomp`配置文件运行：
- en: '[PRE119]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'There may be some situations where you want to run a container without a `seccomp`
    profile. You may need to debug a container or the application running on it. To
    run the container without using any `seccomp` profile, use the `–-security-opt`
    option of the `docker run` command and specify that `seccomp` will be unconfined.
    Do this now with your `security-app` container to see the result:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能会有一些情况，您希望在不使用`seccomp`配置文件的情况下运行容器。您可能需要调试容器或运行在其上的应用程序。要在不使用任何`seccomp`配置文件的情况下运行容器，请使用`docker
    run`命令的`--security-opt`选项，并指定`seccomp`将不受限制。现在对您的`security-app`容器执行此操作，以查看结果：
- en: '[PRE120]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'A value of `0` will show that we have successfully switched off `Seccomp`:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 值为`0`将显示我们已成功关闭`Seccomp`：
- en: '[PRE121]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Creating custom profiles is also not very difficult, but it may require some
    additional troubleshooting to fully understand the syntax. First, test the `security-app`
    container to see whether we can use the `chown` command in the command line. Your
    custom profile will then look to stop this command from being available:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建自定义配置文件也并不是很困难，但可能需要一些额外的故障排除来完全理解语法。首先，测试`security-app`容器，看看我们是否可以在命令行中使用`chown`命令。然后，您的自定义配置文件将尝试阻止此命令的可用性：
- en: '[PRE122]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The current `seccomp` profile running as the default should allow us to run
    the `chown` command, so while you have access to the running container, test to
    see whether you can create a new file and change the ownership using the `chown`
    command. Run the long listing of the directory at the end to verify that the change
    has taken place:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前作为默认值运行的`seccomp`配置文件应该允许我们运行`chown`命令，因此在您可以访问运行的容器时，测试一下是否可以创建新文件并使用`chown`命令更改所有权。最后运行目录的长列表以验证更改是否已生效：
- en: '[PRE123]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The commands should provide an output like the following:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令应该提供类似以下的输出：
- en: '[PRE124]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Create your custom profile by modifying the default profile. Use the `wget`
    command to download the custom profile from this book''s official GitHub account
    onto your system. Use the following command to rename the downloaded custom profile
    `new_default.json`:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改默认配置文件来创建您的自定义配置文件。使用`wget`命令从本书的官方GitHub帐户下载自定义配置文件到您的系统上。使用以下命令将下载的自定义配置文件重命名为`new_default.json`：
- en: '[PRE125]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Open the `new_default.json` file with your text editor and, although there
    will be a large list of configurations, search for the specific configurations
    that control `chown`. At the time of writing, this was located on *line 59* of
    the default `seccomp` profile:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开`new_default.json`文件，尽管会有大量的配置列表，但要搜索控制`chown`的特定配置。在撰写本文时，这位于默认`seccomp`配置文件的*第59行*：
- en: '[PRE126]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The `SCMP_ACT_ALLOW` action allows the command to be run, but if you remove
    *lines 59* to *63* from the `new_default.json` file, this should now stop our
    profile from allowing this command to be run. Delete the lines and save the file
    ready for us to use.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCMP_ACT_ALLOW`操作允许运行命令，但如果从`new_default.json`文件中删除*第59*至*63行*，这应该会阻止我们的配置文件允许运行此命令。删除这些行并保存文件以供我们使用。'
- en: 'As in *step 4* of this exercise, use the `–-security-opt` option and specify
    the image to now run using our edited `new_default.json` file:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与此练习中*步骤4*一样，使用`--security-opt`选项并指定使用我们编辑过的`new_default.json`文件来运行镜像：
- en: '[PRE127]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Perform the same test as in *step 6* of this exercise, and if our changes have
    worked, the `seccomp` profile should now stop us from running the `chown` command:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行与此练习中*步骤6*相同的测试，如果我们的更改起作用，`seccomp`配置文件现在应该阻止我们运行`chown`命令：
- en: '[PRE128]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: With only a minimal amount of work, we've managed to create a policy to stop
    malicious code or an attacker from changing the ownership of files in our container.
    Although this is a very basic example, it gives you an idea of how you can start
    to configure `seccomp` profiles to fine-tune them specifically for your needs.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 只需进行最少量的工作，我们就成功创建了一个策略，以阻止恶意代码或攻击者更改容器中文件的所有权。虽然这只是一个非常基本的例子，但它让您了解了如何开始配置`seccomp`配置文件，以便根据您的需求进行特定的微调。
- en: 'Activity 11.01: Setting up a seccomp Profile for the Panoramic Trekking App'
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动11.01：为全景徒步应用程序设置seccomp配置文件
- en: The Panoramic Trekking app is coming along nicely, but this chapter has shown
    that you need to make sure that the actions a user can make on the container are
    limited. If there is a way in which the container can be accessed by an attacker,
    you need to set up some safeguard against that possible attacker. In this activity,
    you will create a `seccomp` profile that you can use with the services in the
    app that will stop a user from being able to make new directories, kill processes
    running on the container, and lastly, find out more details about the running
    container by running the `uname` command.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 全景徒步应用程序正在顺利进行，但本章表明您需要确保用户在容器上可以执行的操作受到限制。如果容器可以被攻击者访问，您需要设置一些防范措施。在此活动中，您将创建一个`seccomp`配置文件，可用于应用程序中的服务，以阻止用户能够创建新目录，终止运行在容器上的进程，并最后，通过运行`uname`命令了解有关运行容器的更多详细信息。
- en: 'The steps required to complete this activity are as follows:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此活动所需的步骤如下：
- en: Obtain a copy of the default `seccomp` profile.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取默认的`seccomp`配置文件的副本。
- en: Locate the specific controls on the profile that will disable the `mkdir`, `kill`,
    and `uname` commands.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找配置文件中将禁用`mkdir`、`kill`和`uname`命令的特定控件。
- en: Run the services of the Panoramic Trekking app and ensure that the new profile
    is applied to the containers.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行全景徒步应用程序的服务，并确保新配置文件应用于容器。
- en: 'Access the container and verify that you are no longer able to perform the
    `mkdir`, `kill`, and `uname` commands that have been blocked in the `seccomp`
    profile. For example, if we perform the `mkdir` command on our new image with
    the new profile added, we should see a similar output to the following:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问容器并验证您是否不再能够执行在`seccomp`配置文件中被阻止的`mkdir`、`kill`和`uname`命令。例如，如果我们在添加了新配置文件的新图像上执行`mkdir`命令，我们应该看到类似以下的输出：
- en: '[PRE129]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Note
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor347).
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor347)找到此活动的解决方案。
- en: 'Activity 11.02: Scanning Your Panoramic Trekking App Images for Vulnerabilities'
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动11.02：扫描全景徒步应用图像以查找漏洞
- en: We have been using base images for the Panoramic Trekking app that were provided
    by other users or developers. In this activity, you will need to scan the images
    for vulnerabilities and see whether they are safe for use.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用其他用户或开发人员提供的全景徒步应用的基本图像。在这个活动中，您需要扫描图像以查找漏洞，并查看它们是否安全可用。
- en: 'The steps you''ll need to take to complete this activity are as follows:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此活动需要采取的步骤如下：
- en: Decide on a service to use to scan your images.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定使用哪种服务来扫描您的图像。
- en: Load your images into the service ready for scanning.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像加载到准备好进行扫描的服务中。
- en: Scan the images and see whether any vulnerabilities are present on the images.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描图像并查看图像上是否存在任何漏洞。
- en: 'Verify whether the image is safe for use. You should be able to perform an
    evaluation check in Anchore and see a pass status similar to the following output:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证图像是否安全可用。您应该能够在Anchore中执行评估检查，并看到类似以下输出的通过状态：
- en: '[PRE130]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Note
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor348).
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor348)找到此活动的解决方案。
- en: Summary
  id: totrans-440
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has been all about security, limiting risk when we're working with
    Docker and our container images, and how can we take our first steps with Docker
    security. We looked at the potential risks of running container processes as the
    root user and saw how we can make some minor changes to prevent these issues from
    arising if attackers were to access the running container. We then looked closer
    at how we can trust the images we are working with by using signing certificates
    for images and then implementing security scans on our Docker images.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论了安全性，限制在使用Docker和我们的容器图像时的风险，以及我们如何在Docker安全方面迈出第一步。我们看到了以root用户身份运行容器进程的潜在风险，并了解了如何通过进行一些微小的更改来防止这些问题的出现，如果攻击者能够访问正在运行的容器。然后，我们更仔细地研究了如何通过使用图像签名证书来信任我们正在使用的图像，然后在我们的Docker图像上实施安全扫描。
- en: At the end of this chapter, we started working with security profiles. We used
    two of the most common security profiles – AppArmor and `seccomp` – implementing
    both on our Docker images and looking at the result of reducing specific access
    to the containers. The next chapter will look at implementing best practices when
    running and creating our Docker images.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们开始使用安全配置文件。我们使用了两种最常见的安全配置文件 - AppArmor和`seccomp` - 在我们的Docker图像上实施了两种配置文件，并查看了减少容器特定访问权限的结果。下一章将探讨在运行和创建我们的Docker图像时实施最佳实践。
