- en: Object Collaboration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象协作
- en: As we saw in earlier chapters, OOP is all about objects, which are the main
    focus of this programming methodology. When we design our software using this
    methodology, we will keep the concepts of OOP in mind. We will also try to break
    our software components into smaller objects and create proper relationships between
    the objects so that all of them can work together to give us our desired output.
    This relationship between objects is called **object collaboration**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中看到的，面向对象编程的重点是对象。当我们使用这种方法设计软件时，我们会牢记面向对象编程的概念。我们还会尝试将软件组件分解为更小的对象，并创建对象之间的适当关系，以便它们可以共同工作，为我们提供所需的输出。对象之间的这种关系称为**对象协作**。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is object collaboration?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是对象协作？
- en: Different types of collaboration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的协作
- en: What is dependency collaboration?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是依赖协作？
- en: What is association?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是关联？
- en: What is inheritance?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是继承？
- en: Examples of object collaboration
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象协作的示例
- en: Object collaboration is one of the most important topics in OOP. If the objects
    don't collaborate with each other in a program, nothing can be achieved. For example,
    if we think about a simple web application, we can see how the relationship between
    different objects plays an important role in constructing the application. Twitter,
    for example, has many objects that are related to each other in order to make
    the application work. The `User` object consists of the username, password, first
    name, last name, picture, and other user-related information belonging to Twitter
    users. There could be another object called `Tweet` that consists of a message,
    date and time, the username of the user who posted the tweet, and some other properties.
    There may also be another object called `Message` that holds the content of the message,
    who it was from, who it was sent to, and the date and time. This is the simplest
    breakdown possible for a big application like Twitter; it almost certainly contains
    many other objects. But for now, let's just think about these three objects and
    try to find a relationship between them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对象协作是面向对象编程中最重要的主题之一。如果对象在程序中不相互协作，就无法实现任何目标。例如，如果我们考虑一个简单的Web应用程序，我们可以看到不同对象之间的关系在构建应用程序中起着重要作用。例如，Twitter有许多对象彼此相关，以使应用程序正常运行。`User`对象包括Twitter用户的用户名、密码、名字、姓氏、图片和其他用户相关信息。可能还有另一个名为`Tweet`的对象，其中包括消息、日期和时间、发布推文的用户的用户名以及其他一些属性。还可能有另一个名为`Message`的对象，其中包含消息的内容、消息的发送者和接收者、日期和时间。这是对Twitter这样一个大型应用程序的最简单的分解；它几乎肯定包含许多其他对象。但现在，让我们只考虑这三个对象，并尝试找到它们之间的关系。
- en: First, we will look at the `User` object. This is one of the most important
    objects in Twitter, as it holds the user information. Everything in Twitter is
    either made or performed *by* a user or *for* a user, so we can assume that there
    should be some other objects that will need to have a relationship with this `User`
    object. Now let's try to see whether the `Tweet` object has any relationship with
    the `User` object or not. A tweet is a message that should be available for all
    users to see if the `Tweet` object is public. If it is private, only that user's
    followers will see it. As we can see, a `Tweet` object has a very strong relationship
    with a `User` object. So, with the OOP approach, we can say that the `User` object
    has a collaboration with the `Tweet` object in the Twitter application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看一下`User`对象。这是Twitter中最重要的对象之一，因为它保存了用户信息。在Twitter中，一切都是由用户制作或为用户执行的，因此我们可以假设应该有一些其他对象需要与`User`对象有关系。现在让我们尝试看看`Tweet`对象是否与`User`对象有关系。推文是一条消息，如果`Tweet`对象是公开的，所有用户都应该能看到它。如果是私密的，只有该用户的关注者才能看到。正如我们所看到的，`Tweet`对象与`User`对象有着非常紧密的关系。因此，根据面向对象编程的方法，我们可以说`User`对象在Twitter应用程序中与`Tweet`对象协作。
- en: If we also try to analyze the relationship between `User` and `Message` objects,
    we will see that the `Message` object also has a very strong relationship with
    the `User` object. A message is sent by a user to another user; therefore, without
    a user, the `Message` object has no proper implementation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们也尝试分析`User`和`Message`对象之间的关系，我们会发现`Message`对象也与`User`对象有着非常强的关系。消息是由一个用户发送给另一个用户的；因此，没有用户，`Message`对象就没有合适的实现。
- en: But is there any relationship between the `Tweet` and `Message` objects? From
    what has been said, we can say that there is no relationship between these two
    objects. It's not necessary for every object to be related to all other objects,
    but an object usually has a relationship with at least one other object. Now let's
    see what different types of object collaborations are available in C#.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但`Tweet`和`Message`对象之间有关系吗？从已经说过的内容来看，我们可以说这两个对象之间没有关系。并不是每个对象都必须与所有其他对象相关联，但一个对象通常至少与另一个对象有关系。现在让我们看看C#中有哪些不同类型的对象协作。
- en: Different types of object collaboration in C#
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#中不同类型的对象协作
- en: There are many ways an object can collaborate with other objects in programming.
    However, in this chapter, we will only talk about the three most important collaboration
    rules.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，对象可以以许多种方式与其他对象协作。然而，在本章中，我们只会讨论三个最重要的协作规则。
- en: We will first try to explain each of these types, looking at some examples to
    help us to understand them. If you can't relate these concepts to your work, it
    might be a little hard for you to understand the importance of object collaboration,
    but trust me, these concepts are very important on your path to becoming a good
    software developer.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先尝试解释每种类型，看一些示例来帮助我们理解它们。如果你无法将这些概念与你的工作联系起来，你可能很难理解对象协作的重要性，但相信我，这些概念对你成为一名优秀的软件开发人员非常重要。
- en: All these concepts and terms will come in handy when you have discussions about software
    design with other people, or even when you design your own software. As a consequence,
    my suggestion would be to focus on understanding the concepts and relate them
    to your work in order to reap the benefits of this information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与其他人讨论软件设计时，或者当你设计自己的软件时，所有这些概念和术语都会派上用场。因此，我的建议是专注于理解这些概念，并将它们与你的工作联系起来，以便从这些信息中获益。
- en: 'Now, let''s look at the three collaboration types that we are going to be talking
    about in this chapter, as shown in the following list:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们将在本章中讨论的三种协作类型，如下列表所示：
- en: Dependency
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖
- en: Association
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联想
- en: Inheritance
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承
- en: Let's think of an imaginary application and try to relate these collaboration
    concepts to the objects of this application. Learning is easier and more interesting
    when you can relate concepts to the real world, so this is the approach we will
    take in the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一个应用程序，并尝试将这些协作概念与该应用程序的对象联系起来。当你能将概念与现实世界联系起来时，学习会更容易、更有趣，因此这是我们在接下来的章节中将采取的方法。
- en: Case study
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究
- en: Since the main goal of this chapter is to learn about the concepts involved
    in object collaboration rather than design a fully fledged, super-duper application,
    we will design our objects in a simple and minimal manner.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章的主要目标是学习对象协作涉及的概念，而不是设计一个完全成熟的、超级棒的应用程序，我们将以简单和最小的方式设计我们的对象。
- en: For our example, we are going to develop some restaurant management software.
    This could be for a luxury restaurant, or a small cafe where people come to drink
    coffee and relax. In our case, we are thinking of a restaurant with mid-range
    pricing. To begin building this application, let's think about what classes and
    objects we need. We will be needing a `Food` class, a `Chef` class, a `Waiter`
    class, and maybe a `Beverage` class.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将开发一些餐厅管理软件。这可以是豪华餐厅，也可以是人们来喝咖啡放松的小咖啡馆。在我们的情况下，我们考虑的是价格中等的餐厅。要开始构建这个应用程序，让我们考虑我们需要哪些类和对象。我们将需要一个`Food`类，一个`Chef`类，一个`Waiter`类，也许还需要一个`Beverage`类。
- en: 'When you are done reading this chapter, don''t jump straight into the next
    chapter. Instead, spend some time thinking about some of the objects that aren''t
    mentioned in this chapter and try to analyze the relationships between the objects
    you have thought about. This will help you to develop your knowledge of the concept
    of object collaboration. Remember: software development is not a typing job, it
    requires heavy brain work. Consequently, the more you think about the concepts,
    the better at software developing you will become.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你读完本章后，不要直接跳到下一章。相反，花一些时间思考一些在本章中没有提到的对象，并尝试分析你所想到的对象之间的关系。这将帮助你发展对对象协作概念的了解。记住：软件开发不是一份打字的工作，它需要大量的脑力工作。因此，你越多地思考这些概念，你在软件开发方面就会变得更加优秀。
- en: 'Now, let''s see what objects I came up with when I did some thinking about
    the objects that should be included in our imaginary restaurant application:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看当我考虑了应该包括在我们想象的餐厅应用程序中的对象时，我想到了哪些对象：
- en: '`Food`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 食品
- en: '`Beef Burger`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 牛肉汉堡
- en: '`Pasta`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 意面
- en: '`Beverage`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饮料
- en: '`Cola`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可乐
- en: '`Coffee`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咖啡
- en: '`Order`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单
- en: '`OrderItem`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单项目
- en: '`Staff`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 员工
- en: '`Chef`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 厨师
- en: '`Waiter`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务员
- en: '`FoodRepository`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 食品存储库
- en: '`BeverageRepository`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饮料存储库
- en: '`StaffRepository`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 员工存储库
- en: Some of these objects might not make much sense to you right now. For example,
    the `FoodRepository`, `BeverageRepository`, and `StaffRepository` objects are
    not actually business objects, but are helper objects that help different modules
    to interact with each other in the application. The `FoodRepository` object, for
    example, will be used to save and retrieve `Food` objects from the database and
    the UI. Similarly, the `BeverageRepository` object will deal with beverages. We
    also have a class called `Food` that is a general type of class, as well as more
    specific food objects such as `Beef Burger` and `Pasta`. These objects are subcategories
    of the `Food` object. As software developers, we have identified the objects that
    are needed to develop this software. Now, it's time to use these objects in a
    way that solves the problem that the software will be used for; however, before
    we start writing code, we need to understand and figure out how the objects can
    relate to each other so that the application is the best that it can be. Let's
    start with the dependency relationship.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有些对象可能对你来说并没有太多意义。例如，`FoodRepository`、`BeverageRepository`和`StaffRepository`对象实际上并不是业务对象，而是帮助不同模块在应用程序中相互交互的辅助对象。例如，`FoodRepository`对象将用于从数据库和UI保存和检索`Food`对象。同样，`BeverageRepository`对象将处理饮料。我们还有一个名为`Food`的类，它是一种通用类型的类，以及更具体的食品对象，如`Beef
    Burger`和`Pasta`。这些对象是`Food`对象的子类别。作为软件开发人员，我们已经确定了开发此软件所需的对象。现在，是时候以解决软件将被用于的问题的方式使用这些对象了；然而，在我们开始编写代码之前，我们需要了解并弄清楚对象之间如何关联，以便应用程序能够达到最佳状态。让我们从依赖关系开始。
- en: Dependency
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖
- en: When an object uses another unrelated object to carry out a task, the relationship
    between them is called a **dependency**. In the software world, we also refer
    to this relationship as **uses a** **relation**. Now, let's see if any kind of
    dependency relationship exists between the objects that we have thought about
    for our restaurant application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个对象使用另一个无关的对象来执行任务时，它们之间的关系被称为**依赖**。在软件世界中，我们也将这种关系称为**使用关系**。现在，让我们看看我们为餐厅应用程序所考虑的对象之间是否存在任何依赖关系。
- en: 'If we analyze our `FoodRepository` object, which will be saving and retrieving
    `Food` objects from the database and passing them to the UI, we can say that the
    `FoodRepository` object has to use the `Food` object. This means that the relationship
    between the `Food` and `FoodRepository` object is a type of dependency relationship.
    If we think about the flow in the frontend when a new `Food` objects is created,
    that object will be passed to the `FoodRepository`. The `FoodRepository` will
    then serialize the `Food` object to database data in order to save it in the database.
    If the `FoodRepository` doesn''t use the `Food` object, then how would it know
    what to serialize and store in the database? Here, the `FoodRepository` must have a dependency
    relationship with the `Food` object. Let''s look at the code for this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们分析一下`FoodRepository`对象，它将从数据库中保存和检索`Food`对象并将其传递给UI，我们可以说`FoodRepository`对象必须使用`Food`对象。这意味着`Food`和`FoodRepository`对象之间的关系是一种依赖关系。如果我们考虑在前端创建新的`Food`对象时的流程，该对象将被传递给`FoodRepository`。然后，`FoodRepository`将把`Food`对象序列化为数据库数据以便将其保存在数据库中。如果`FoodRepository`不使用`Food`对象，那它怎么知道要序列化和存储在数据库中的内容呢？在这里，`FoodRepository`必须与`Food`对象存在依赖关系。让我们看看这段代码：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, we can see that the `FoodRepository` class has two methods.
    One method is `SaveFood` and the other is `GetFood`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们可以看到`FoodRepository`类有两个方法。一个方法是`SaveFood`，另一个是`GetFood`。
- en: The `SaveFood` method involves taking one `Food` object and saving it in the
    database. After saving the food item in the database, it returns the newly created
    `foodId` back to the `FoodRepository`. The `FoodRepository` then passes the newly
    created `FoodId` to the UI to inform the user that the food item creation was
    successful. On the other hand, the other `GetFood` method takes an ID as parameter
    from the UI and checks whether or not the ID is a valid input. If it is, the `FoodRepository` passes
    the `FoodId` to the `databasehandler` object, which searches the food in the database
    and maps it back as a `Food` object. After this, the `Food` object is returned
    to the view.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`SaveFood`方法涉及获取一个`Food`对象并将其保存在数据库中。在将食品项目保存在数据库后，它将新创建的`foodId`返回给`FoodRepository`。然后，`FoodRepository`将新创建的`FoodId`传递给UI，通知用户食品项目创建成功。另一方面，另一个`GetFood`方法从UI获取一个ID作为参数，并检查该ID是否是有效输入。如果是，`FoodRepository`将`FoodId`传递给`databasehandler`对象，该对象在数据库中搜索食品并将其映射回作为`Food`对象。之后，将`Food`对象返回给视图。'
- en: Here, we can see that the `FoodRepository` object needs to use the `Food` object
    to do its work. This type of relationship is called a **dependency relationship**.
    We can also use the *uses a* phrase to identify this relationship. The `FoodRepository`
    uses a `Food` object to save food in the database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`FoodRepository`对象需要使用`Food`对象来完成其工作。这种关系称为**依赖关系**。我们还可以使用*uses a*短语来识别这种关系。`FoodRepository`使用`Food`对象来保存食品在数据库中。
- en: 'Like `FoodRepository`, the `BeverageRepository` does the same thing for a `Beverage`
    object: it saves and retrieves beverage objects in the database and UI. Now let''s
    see what the `BeverageRepository` looks like as code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与`FoodRepository`一样，`BeverageRepository`对`Beverage`对象做了同样的事情：它在数据库和UI中保存和检索饮料对象。现在让我们看看`BeverageRepository`的代码是什么样的：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you look at the preceding code, you will see that the `BeverageRepository`
    has two methods: `SaveBeverage` and `GetBeverage`. Both of these methods use the
    `Beverage` object. This means that the `BeverageRepository` has a dependency relationship
    with a `Beverage` object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下前面的代码，你会发现`BeverageRepository`有两个方法：`SaveBeverage`和`GetBeverage`。这两个方法都使用`Beverage`对象。这意味着`BeverageRepository`与`Beverage`对象存在依赖关系。
- en: 'Now let''s take a look at the two classes we have created so far, as shown
    in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下我们迄今为止创建的两个类，如下所示的代码：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One object can be related to multiple objects using a dependency relationship.
    In OOP, this type of relationship is very common.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象可以使用依赖关系与多个对象相关联。在面向对象编程中，这种关系非常常见。
- en: 'Let''s look at another example of dependency relationships. A relationship
    between a `Programmer` and a `Computer` could be a dependency relationship. How?
    Well, we know that a `Programmer` is most likely a human and a `Computer` is a
    machine. A `Programmer` uses a `Computer` to write computer programs, but the
    `Computer` is not a property of the `Programmer`. A `Programmer` *uses a* computer,
    and this doesn''t have to be one specific computer—it can be any computer. So
    can we say that a relationship between a `Programmer` and a `Computer` is a type
    of dependency relationship? Yes, we surely can. Let''s see how we can represent
    this in code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看另一个依赖关系的例子。`程序员`和`计算机`之间的关系可能是一种依赖关系。怎么样？我们知道`程序员`很可能是一个人，而`计算机`是一台机器。`程序员`使用`计算机`来编写计算机程序，但`计算机`不是`程序员`的属性。`程序员`*使用*计算机，并且这不一定是一个特定的计算机——可以是任何计算机。那么我们可以说`程序员`和`计算机`之间的关系是一种依赖关系吗？是的，我们当然可以。让我们看看如何在代码中表示这一点：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, we can clearly see how a `Programmer` and a `Computer` have
    a dependency relationship, however, this is not always the case: it depends on
    how you design your objects. If you have designed your `Programmer` class in such
    a way that each programmer has to have a dedicated computer, you could have used
    `Computer` as a property in the `Programmer` class, and then the relationship
    between the programmer and the computer would have changed. Consequently, the
    relationship depends on how the objects are designed.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们可以清楚地看到`程序员`和`计算机`之间有一种依赖关系，但这并不总是如此：这取决于你如何设计你的对象。如果你设计了`程序员`类，使得每个程序员都必须有一台专用的计算机，你可以在`程序员`类中使用`计算机`作为属性，那么程序员和计算机之间的关系将会改变。因此，关系取决于对象的设计方式。
- en: My main goal in this section was to clarify the dependency relationship. I hope
    the nature of dependency relationships is now clear to you.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本节的主要目标是澄清依赖关系。我希望依赖关系的本质现在对你来说是清楚的。
- en: 'Now let''s see how the dependency relationship is drawn in a **Unified Modeling
    Language** (**UML**) diagram, as shown in the following diagram:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看依赖关系在**统一建模语言**（**UML**）图表中是如何绘制的，如下图所示：
- en: '![](img/4ad50b5f-04ab-4fb3-829c-3e23eef738c8.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ad50b5f-04ab-4fb3-829c-3e23eef738c8.png)'
- en: A solid line is used to represent a dependency relationship.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 用实线表示依赖关系。
- en: Association
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关联
- en: Another type of relationship is the association relationship. This type of relationship
    is unlike the dependency relationship. In this type of relationship, one object
    knows another object and is associated with it. This relationship is achieved
    by having one object as a property of another object. In the software community,
    this relationship type is also referred to as a *has a* relationship. For example,
    a car has an engine. If you think of any objects that you can relate to each other
    using the phrase *has a*, then that relationship is an association relationship.
    In our car example, the engine is a part of the car. Without an engine, the car
    can't carry out any functions. While the engine itself is a separate object, it
    is part of the car, and therefore there is an association between the car and
    the engine.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种关系类型是关联关系。这种关系类型不同于依赖关系。在这种关系类型中，一个对象知道另一个对象并与之相关联。这种关系是通过将一个对象作为另一个对象的属性来实现的。在软件社区中，这种关系类型也被称为*拥有*关系。例如，汽车拥有引擎。如果你能想到任何可以用*拥有*短语来关联的对象，那么这种关系就是关联关系。在我们的汽车例子中，引擎是汽车的一部分。没有引擎，汽车无法执行任何功能。虽然引擎本身是一个独立的对象，但它是汽车的一部分，因此汽车和引擎之间存在关联。
- en: 'This association relationship can be divided into the following two categories:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种关联关系可以分为以下两类：
- en: Aggregation
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合
- en: Composition
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合
- en: Let's see what these two types of relationship are and how they differ from
    each other.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这两种关系是什么，它们之间有什么不同。
- en: Aggregation
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合
- en: When one object has another object in it as a property and this other object
    is independent, this is called an **aggregation relationship**. Let's take the
    example in the previous section and try to see whether this was an aggregation relationship
    or not.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个对象在其属性中有另一个独立的对象时，这被称为**聚合关系**。让我们看看前一节中的例子，试着看看这是否是一个聚合关系。
- en: 'The previous example looked at the relationship between a car and an engine.
    We all know that a car must have an engine, and that is why an engine is the property
    of a car, as shown in the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子是关于汽车和引擎之间的关系。我们都知道汽车必须有引擎，这就是为什么引擎是汽车的属性，如下代码所示：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now the question is, what is this type of relationship? The deciding factor
    is that an engine is a separate object that functions independently of a car. When
    the manufacturer creates an engine, they don''t make it when they are creating
    the other parts of the car: they can create it separately. Even without a car,
    an engine can be tested or even used for another purpose. Consequently, we can
    say that the type of relationship that the car has with the engine is an *aggregation
    relationship*.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是，这种关系是什么类型？决定因素是引擎是一个独立的对象，可以独立于汽车运行。制造商在制造汽车的其他零件时并不制造引擎：他们可以单独制造它。即使没有汽车，引擎也可以进行测试，甚至用于其他目的。因此，我们可以说汽车与引擎之间的关系是一种*聚合关系*。
- en: 'Now let''s look at the example of our restaurant management software. If we
    analyze the relationship between the `Food` and `Chef` objects, it is clear that
    no food can exist without a chef. Someone has to cook, bake, and prepare the food,
    the food cannot do this itself. Consequently, we can say that the food has a chef.
    This means that the `Food` object should have a property named `Chef`, which will
    hold the `Chef` object of that `Food`. Let''s look at the code for this relationship:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下我们的餐厅管理软件的例子。如果我们分析`Food`和`Chef`对象之间的关系，很明显没有厨师就没有食物。必须有人来烹饪、烘焙和准备食物，食物本身无法做到这一点。因此，我们可以说食物有厨师。这意味着`Food`对象应该有一个名为`Chef`的属性，用来保存该`Food`的`Chef`对象。让我们来看一下这种关系的代码：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we think about the `Beverage` object, every beverage must have a company
    or maker. For example, commercial beverages are made by companies such as Pepsi
    Co., Coca Cola Company, and so on. The beverages that these companies produce
    are their legal property. Beverages can also be made locally, in which case the
    company name would be the name of the local shop. However, the main idea here
    is that a beverage must have a manufacturer company. Let''s see how the `Beverage`
    class would look in code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们考虑`Beverage`对象，每种饮料都必须有一个公司或制造商。例如，商业饮料是由百事公司、可口可乐公司等公司生产的。这些公司生产的饮料是它们的合法财产。饮料也可以在本地制造，这种情况下公司名称将是当地商店的名称。然而，这里的主要观点是饮料必须有一个制造商公司。让我们看看`Beverage`类在代码中是什么样子的：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In both of these examples, the `Chef` and `Manufacturer` objects are objects
    that are used as the property of `Food` and `Beverage` respectively. We also know
    that a `Chef` or a `Manufacturer` company is independent. Consequently, the relationship
    between `Food` and `Chef` is an aggregation relationship. This is also the case
    for `Beverage` and `Manufacturer`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个例子中，`Chef`和`Manufacturer`对象都是`Food`和`Beverage`的属性。我们也知道`Chef`或`Manufacturer`公司是独立的。因此，`Food`和`Chef`之间的关系是一种聚合关系。`Beverage`和`Manufacturer`也是如此。
- en: 'To make things clearer, let''s look at another example of aggregation. Our
    computer that we use for programming or for any other task is made up of different
    components. We have a motherboard, RAM, CPU, graphics card, screen, keyboard,
    mouse, and many other things. Some components have an aggregation relationship
    with the computer. For example, the motherboard, RAM, and CPU are internal components
    that are needed to build a computer. All of these components can exist independently
    of the computer, and consequently, all of these have aggregation relationships
    with the computer. Let''s look at how the `Computer` class is related to the `MotherBoard`
    class in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让事情更清晰，让我们看另一个聚合的例子。我们用于编程或执行任何其他任务的计算机由不同的组件组成。我们有主板、RAM、CPU、显卡、屏幕、键盘、鼠标和许多其他东西。一些组件与计算机具有聚合关系。例如，主板、RAM和CPU是构建计算机所需的内部组件。所有这些组件都可以独立存在于计算机之外，因此所有这些组件都与计算机具有聚合关系。让我们看看`Computer`类如何与`MotherBoard`类相关联的以下代码：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s see how the aggregation relationship is drawn in a UML diagram.
    If we try to display the preceding computer class aggregation relationship with
    the RAM, CPU, and motherboard, then it would look something like the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看在UML图中如何绘制聚合关系。如果我们尝试用RAM、CPU和主板显示前面的计算机类聚合关系，那么它看起来会像下面这样：
- en: '![](img/e0467b14-4fd0-4131-a993-b34defc2694b.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0467b14-4fd0-4131-a993-b34defc2694b.jpg)'
- en: 'A solid line and a diamond are used to represent an aggregation relationship.
    The diamond is placed at the side of the class that holds the property, as shown
    in the following diagram:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实线和菱形用于表示聚合关系。菱形放在持有属性的类的一侧，如下图所示：
- en: '![](img/a1c0dbc5-417b-4e68-86b3-c2d464f80da0.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1c0dbc5-417b-4e68-86b3-c2d464f80da0.jpg)'
- en: Composition
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合
- en: A composition relationship is a type of association relationship. This means
    that one object will have another object as its property, but where it differs
    from aggregation is that, in composition, the object that is used as a property
    can't exist independently; it must have the help of another object in order to
    be functional. If we think about the `Chef` and `Manufacturer` classes, the existence
    of these classes is not fully dependent on the `Food` and `Beverage` classes.
    Instead, these classes can exist independently, and therefore have an aggregation
    relationship.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 组合关系是一种关联关系。这意味着一个对象将另一个对象作为其属性，但与聚合的不同之处在于，在组合中，作为属性的对象不能独立存在；它必须借助另一个对象才能发挥作用。如果我们考虑`Chef`和`Manufacturer`类，这些类的存在并不完全依赖于`Food`和`Beverage`类。相反，这些类可以独立存在，因此具有聚合关系。
- en: 'However, if we think about the relationship between the `Order` and `OrderItem`
    objects, we can see that the `OrderItem` object has no meaning without `Order`.
    Let''s look at the following code of the `Order` class:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们考虑`Order`和`OrderItem`对象之间的关系，我们会发现`OrderItem`对象没有没有`Order`就没有意义。让我们看一下`Order`类的以下代码：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we can see that the `Order` object has a list of `OrderItems` in it. These
    `OrderItems` are the `Food` items that the customer has ordered. A customer can
    order one dish or multiple dishes, which is why the `OrderItems` is a list type.
    So now it's time to justify our thinking. Does an `OrderItem` really have a composition
    relationship with `Order`? Are we making any mistakes here? Are we thinking about
    an aggregation relationship as a composition relationship?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`Order`对象中有一个`OrderItems`列表。这些`OrderItems`是顾客订购的`Food`项目。顾客可以订购一个菜或多个菜，这就是为什么`OrderItems`是一个列表类型。现在是时候证明我们的想法了。`OrderItem`是否真的与`Order`有组合关系？我们有没有犯任何错误？我们是否把聚合关系当作组合关系了？
- en: To identify which type of association relationship it is, we have to ask ourselves
    some questions. Can `OrderItem` exist without `Order`? If not, then why not? It's
    a separate object! However, if you think a little more deeply, you will realize
    that no `OrderItem` can exist without an `Order`, as a customer has to order an
    item, and without an `Order` object, the `OrderItem` object is not trackable.
    The `OrderItem` item cannot be served to any customer as there is no data for
    which customer the `OrderItem` is for. Consequently, we can say that the `OrderItem`
    has a composition relationship with the `Order` object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定它是哪种类型的关联关系，我们必须问自己一些问题。`OrderItem`可以在没有`Order`的情况下存在吗？如果不能，那为什么？它是一个独立的对象！然而，如果你再深入思考一下，你会意识到没有`Order`，没有`OrderItem`可以存在，因为顾客必须订购商品，没有`Order`对象，`OrderItem`对象就无法跟踪。`OrderItem`无法提供给任何顾客，因为没有关于`OrderItem`是为哪个顾客的数据。因此，我们可以说`OrderItem`与`Order`对象有组合关系。
- en: 'Let''s look at another example of composition. In our schooling system, we
    have students, teachers, subjects, and grades, right? Now, I would say that the
    relationship between a `Subject` object and a `Grade` object is a composition
    relationship. Let me justify my answer. Take a look at the following code of these
    two classes:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个组合的例子。在我们的学校系统中，我们有学生、老师、科目和成绩，对吧？现在，我会说`Subject`对象和`Grade`对象之间的关系是组合关系。让我证明我的答案。看看这两个类的以下代码：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we can see that the `Grade` object holds the mark that a student has scored
    on a test for a particular subject. It also holds the `GradeSymbol`, such as `A`,
    `B`, or `F`, depending on the marking rules of that school. We can see in the
    `Subject` class that there is a property called `Grade`. This holds the grade
    for that particular `Subject` object. If we just think about `Grade` individually
    rather than in association with the `Subject` class, we will get a bit confused
    and wonder what subject the grade is for.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`Grade`对象保存了学生在特定科目的考试成绩。它还保存了`GradeSymbol`，比如`A`，`B`或`F`，取决于学校的评分规则。我们可以在`Subject`类中看到有一个叫做`Grade`的属性。这个属性保存了特定`Subject`对象的成绩。如果我们只是单独考虑`Grade`而不是与`Subject`类关联，我们会有点困惑，想知道成绩是为哪个科目的。
- en: Consequently, the relationship between `Grade` and `Subject` is a composition
    relationship.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`Grade`和`Subject`之间的关系是组合关系。
- en: 'Let''s look at how we can show a composition relationship in a UML diagram using
    the preceding example of `Subject` and `Grade`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在UML图中展示组合关系，使用`Subject`和`Grade`的前面的例子：
- en: '![](img/21c4e007-c706-470e-9cb2-be5c87ffceae.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21c4e007-c706-470e-9cb2-be5c87ffceae.jpg)'
- en: 'A solid line and a black diamond are used to represent a composition relationship.
    The diamond is placed at the side of the class that holds the property:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用实线和黑色菱形表示组合关系。菱形放置在持有属性的类的一侧：
- en: '![](img/44e0de3f-109f-439e-a5a6-c1b9c0288418.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44e0de3f-109f-439e-a5a6-c1b9c0288418.png)'
- en: Inheritance
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: 'This is one of the four pillars of OOP. **Inheritance** is when one object
    inherits or reuses another object''s properties or methods. The class that gets
    inherited is called the **base class** and the class that inherits the base class
    is normally called the **derived class**. The inheritance relationship can be
    treated as an *is a relationship*. For example, pasta is a `Food`. The `Pasta`
    object has a unique ID in the database, which has other properties such as name,
    price, and chef. So, as `Pasta` satisfies all the attributes of the `Food` class,
    it can inherit the `Food` class and use the properties of the `Food` class. Let''s
    look at the code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是面向对象编程的四大支柱之一。**继承**是一个对象继承或重用另一个对象的属性或方法。被继承的类称为**基类**，继承基类的类通常称为**派生类**。继承关系可以被视为一个*是一个*的关系。例如，意大利面是一种`Food`。`Pasta`对象在数据库中有一个唯一的ID，还有其他属性，比如名称、价格和厨师。因此，由于`Pasta`满足`Food`类的所有属性，它可以继承`Food`类并使用`Food`类的属性。让我们看一下代码：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The case is the same for beverages. For example, `Coffee` is a type of beverage
    that has all the attributes that the `Beverage` object has. A coffee has a name
    and price, and it might have sugar, milk, and coffee beans. Let''s write the `Coffee`
    class and see how it looks:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于饮料也是一样的。例如，`Coffee`是一种饮料，具有`Beverage`对象具有的所有属性。咖啡有名称和价格，可能有糖、牛奶和咖啡豆。让我们编写`Coffee`类，看看它是什么样子的：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So here, we can say that `Coffee` is inheriting the `Beverage` class. Here, `Coffee`
    is the derived class and `Beverage` is the base class.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以说`Coffee`正在继承`Beverage`类。在这里，`Coffee`是派生类，`Beverage`是基类。
- en: 'In an earlier example, we used the `Programmer` object. In that case, do you
    think that the `Programmer` class can actually inherit the `Human` class? Yes,
    for sure. A programmer is nobody other than a human in this example. If we look
    at the properties of a `Programmer` and the properties of a `Human`, we will find
    that there are some common properties, such as the name, age, and so on. Consequently,
    we can modify the code of the `Programmer` class to resemble the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的例子中，我们使用了`Programmer`对象。在这种情况下，你认为`Programmer`类实际上可以继承`Human`类吗？是的，当然可以。在这个例子中，程序员无非就是一个人。如果我们看一下`Programmer`的属性和`Human`的属性，我们会发现有一些共同的属性，比如姓名、年龄等。因此，我们可以修改`Programmer`类的代码如下：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s see how we can draw a UML diagram for our `Programmer` class:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何为我们的`Programmer`类绘制UML图：
- en: '![](img/3db18b8b-3f8e-460b-bf50-c4bd42c833d5.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3db18b8b-3f8e-460b-bf50-c4bd42c833d5.png)'
- en: 'Inheritance is represented by a solid line with a triangle sign attached to
    it. This triangle points in the direction of the super class:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 继承由一条实线和一个三角形符号表示。这个三角形指向超类的方向：
- en: '![](img/f549a7f4-2baa-4c24-865b-5fcfdc37d65d.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f549a7f4-2baa-4c24-865b-5fcfdc37d65d.png)'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The object collaboration types that we looked at in this chapter are the most
    commonly used types in C#. When designing an application or architecting some
    software, object collaboration is very important. It will define how flexible
    the software is, how many new functions can be added, and how easy it will be
    to maintain the code. Object collaboration is very important.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中看到的对象协作类型是C#中最常用的类型。在设计应用程序或架构软件时，对象协作非常重要。它将定义软件的灵活性，可以添加多少新功能，以及维护代码的难易程度。对象协作非常重要。
- en: In the next chapter, we will talk about exception handling. This is another
    very important part of programming.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论异常处理。这也是编程中非常重要的一部分。
