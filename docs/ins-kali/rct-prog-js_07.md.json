["```js\n(ns nodehello\n  (:require [cljs.nodejs :as nodejs]))\n\n(defn -main [& args]\n  (println (apply str (map [\\space \"world\" \"hello\"] [2 0 1]))))\n\n(nodejs/enable-util-print!)\n(set! *main-cli-fn* -main)\n\n(comment\n; Compile this using a command line like:\n\nCLOJURESCRIPT_HOME=\".../clojurescript/\" \\\n  bin/cljsc samples/nodehello.cljs {:target :nodejs} \\\n  > out/nodehello.js\n\n; Then run using:\nnodejs out/nodehello.js\n\n)\n```", "```js\n(ns example\n  (:require [om.core :as om]\n            [om.dom :as dom]))\n\n(defn widget [data owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/h1 nil (:text data)))))\n\n(om/root widget {:text \"Hello world!\"}\n  {:target (. js/document (getElementById \"my-app\"))})\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, Brython!</title>\n    <script src=\"img/brython.js\"></script>\n    <script src=\"img/react.js\"></script>\n  </head>\n  <body onload=\"brython()\">\n    <p>Hello, static world!</p>\n    <div id=\"dynamic\"></div>\n    <!--\n      <script type=\"text/javascript\">\n        React.render(\n          React.createElement('p', null,\n          'Hello, JavaScript world!'),\n          document.getElementById('dynamic')\n        );\n      </script>\n      -->\n    <script type=\"text/python3\">\n      from browser import document, window\n\n      window.React.render(window.React.createElement(\n        'p', None, 'Hello, Python world!'),\n        document['dynamic']);\n\n    </script>\n  </body>\n</html>\n```", "```js\nvar Pragmatometer = React.createClass({\n  render: function() {\n    return (\n      <div className=\"Pragmatometer\">\n      <Calendar />\n      <Todo />\n      <Scratch />\n      <YouPick />\n      </div>\n    );\n  }\n});\n```", "```js\nvar ReactTools = require('react-tools');\nmodule.exports = {\n  process: function(source) {\n    return ReactTools.transform(source);\n  }\n};\n```", "```js\n'dependencies': {\n  'react': '*',\n  'react-tools': '*'\n},\n}, 'jest': {\n  'scriptPreprocessor': '<root directory>/preprocessor.js',\n  'unmockedModulePathPatterns':['<root directory>/node_modules/react']\n},\n```", "```js\n/** @jsx React.DOM */\n\nvar React = require('react/addons');\nvar CheckboxWithLabel = React.createClass({\n  getInitialState: function() {\n    return {\n      isChecked: false\n    };\n  },\n  onChange: function() {\n    this.setState({isChecked: !this.state.isChecked});\n  },\n  render: function() {\n    return (\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={this.state.isChecked}\n          onChange={this.onChange}\n        />\n        {(this.state.isChecked ?\n        this.props.labelOn :\n        this.props.labelOff)}\n      </label>\n    );\n  }\n});\n\nmodule.exports = CheckboxWithLabel;\n```", "```js\n/** @jsx React.DOM */\n\njest.dontMock('../CheckboxWithLabel.js');\n\ndescribe('CheckboxWithLabel', function() {\n  it('changes the text after click', function() {\n    var React = require('react/addons');\n    var CheckboxWithLabel = require('../CheckboxWithLabel.js');\n    var TestUtils = React.addons.TestUtils;\n\n    // Verify that it's Off by default.\n    var label = TestUtils.findRenderedDOMComponentWithTag(\n      checkbox, 'label');\n    expect(label.getDOMNode().textContent).toEqual('Off');\n\n    // Simulate a click and verify that it is now On.\n    var input = TestUtils.findRenderedDOMComponentWithTag(\n      checkbox, 'input');\n    TestUtils.Simulate.change(input);\n    expect(label.getDOMNode().textContent).toEqual('On');\n  });\n});\n```"]