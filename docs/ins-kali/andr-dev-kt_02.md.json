["```kt\n    fun main(args: Array<String>) { \n        var fruit:String =  \"orange\" //1 \n        fruit  = \"banana\" //2 \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n        val fruit:String= \"orange\"//1 \n        a = \"banana\" //2  Error \n    } \n```", "```kt\n    val list = mutableListOf(\"a\",\"b\",\"c\") //1 \n    list = mutableListOf(\"d\", \"e\") //2 Error \n    list.remove(\"a\") //3 \n```", "```kt\n    var title: String \n```", "```kt\n    var title: String = \"Kotlin\" \n```", "```kt\n    var title = \"Kotlin\" \n```", "```kt\n    var title = \"Kotlin\" \n    title = 12 // 1, Error \n```", "```kt\n    var title: Any = \"Kotlin\" \n    title = 12\n```", "```kt\n    var total = sum(10, 20) \n```", "```kt\n    var persons = listOf(personInstance1, personInstance2) \n\n    // Inferred type: List<Person> () \n```", "```kt\n    var pair = \"Everest\" to 8848 // Inferred type: Pair<String, Int> \n```", "```kt\n    var pair = \"Everest\" to 8848   \n\n    // Create pair using to infix method \n    var pair2 = Pair(\"Everest\", 8848) \n\n    // Create Pair using constructor \n```", "```kt\n    var map = mapOf(\"Mount Everest\" to 8848, \"K2\" to 4017) \n    // Inferred type: Map<String, Int> \n```", "```kt\n    var map = mapOf(\"Mount Everest\" to 8848, \"K2\" to \"4017\") \n    // Inferred type: Map<String, Any> \n```", "```kt\n    var age: Int = 18\n```", "```kt\n    var age: Short = 18\n```", "```kt\n    var age: Long = 18 // Explicitly define variable type\n    var age = 18L      \n\n    // Use literal constant to specify value type\n```", "```kt\n    val title // Error \n```", "```kt\n    val age: Int = null //1, Error \n    val name: String? = null //2 \n```", "```kt\n    val name: String? = null \n    // ... \n    name.toUpperCase() // error, this reference may be null \n```", "```kt\n    var nullableVehicle: Vehicle?  \n    var vehicle: Vehicle \n\n    nullableVehicle = vehicle // 1 \n    vehicle = nullableVehicle // 2, Error \n\n```", "```kt\n    //Java \n    @Override \n    public void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        savedInstanceState.getBoolean(\"locked\"); \n    } \n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) { //1 \n         super.onCreate(savedInstanceState) \n         savedInstanceState.getBoolean(\"key\") //2 Error \n    } \n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState)\n    } \n\n    override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n\n        val locked: Boolean \n        if(savedInstanceState != null) \n            locked = savedInstanceState.getBoolean(\"locked\")  \n        else \n            locked = false \n    } \n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) { \n         super.onCreate(savedInstanceState) \n         val locked: Boolean? = savedInstanceState?.getBoolean(\"locked\") \n    } \n```", "```kt\n    //Java idiomatic - multiple checks\n    val quiz: Quiz = Quiz()\n    //...\n    val correct: Boolean?\n\n    if(quiz.currentQuestion != null) {\n        if(quiz.currentQuestion.answer != null ) {\n            //do something\n        }\n    }\n\n    //Kotlin idiomatic - multiple calls of save call operator \n    val quiz: Quiz = Quiz() \n\n    //... \n\n    val correct = quiz.currentQuestion?.answer?.correct  \n\n    // Inferred type Boolean? \n```", "```kt\n    first operand ?: second operand \n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n\n        val locked: Boolean = savedInstanceState?.\n\n                    getBoolean(\"locked\") ?: false \n    } \n```", "```kt\n    val correct = quiz.currentQuestion?.answer?.correct ?: false \n```", "```kt\n    var y: String? = \"foo\" \n    var size: Int = y!!.length \n```", "```kt\noverride fun onCreate(savedInstanceState: Bundle?) { \n    super.onCreate(savedInstanceState) \n    val locked: Boolean = savedInstanceState!!.getBoolean(\"locked\")  \n} \n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n\n        savedInstanceState?.let{ \n            println(it.getBoolean(\"isLocked\")) // 1 \n        } \n    } \n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) { \n        ...\n\n    } \n```", "```kt\nView! // View defined as platform type\n```", "```kt\n    T! = T or T? \n```", "```kt\n    val textView = findViewById(R.id.textView)  \n```", "```kt\n    val textView = findViewById(R.id.textView) as TextView // 1 \n    val textView = findViewById(R.id.textView) as TextView? // 2 \n```", "```kt\n    Fragment fragment = new ProductFragment(); \n    ProductFragment productFragment = (ProductFragment) fragment; \n```", "```kt\nval fragment: Fragment = ProductFragment() \nval productFragment: ProductFragment =  fragment as ProductFragment \n```", "```kt\n    val fragment : String = \"ProductFragment\" \n    val productFragment : ProductFragment =  fragment as \n\n        ProductFragment  \n\n    \\\\ Exception: ClassCastException  \n```", "```kt\n    val fragment: String = \"ProductFragment\" \n    val productFragment: ProductFragment? =  fragment as? \n\n        ProductFragment   \n```", "```kt\n    val fragment: String = \"ProductFragment\" \n    val productFragment: ProductFragment? =  fragment as \n\n        ProductFragment? \n```", "```kt\n    val fragment: String = \"ProductFragment\" \n    val productFragment: ProductFragment? = fragment as? \n\n        ProductFragment ?: ProductFragment() \n```", "```kt\nvar productFragment: ProductFragment? = supportFragmentManager \n.findFragmentById(R.id.fragment_product) as? ProductFragment \n```", "```kt\nval name: String \n    val age: Int = 12 \n    name = age.toString(); // Converts Int to String\n```", "```kt\n    \\\\Java \n    if (animal instanceof Fish){ \n        Fish fish = (Fish) animal; \n        fish.isHungry(); \n\n        //or \n        ((Fish) animal).isHungry(); \n    } \n```", "```kt\n    if(animal is Fish) { \n        animal.isHungry() \n    } \n```", "```kt\n    if(animal is Fish) { \n        animal.isHungry() //1 \n    } \n\n    animal.isHungry() //2, Error \n```", "```kt\n    val fish:Fish? = // ... \n    if (animal !is Fish) //1 \n        return \n\n    animal.isHungry() //1 \n```", "```kt\n    if (animal is Fish && animal.isHungry()) { \n        println(\"Fish is hungry\") \n    } \n```", "```kt\nval view: View? = findViewById(R.layout.activity_shop) \n```", "```kt\n    val view: View? \n\n    if ( view != null ){ \n        view.isShown() \n\n        // view is casted to non-nullable inside if code block \n    } \n\n    view.isShown() // error, outside if the block view is nullable \n```", "```kt\n    fun setView(view: View?){\n\n        if (view == null)\n\n        return\n\n        //view is casted to non-nullable\n\n        view.isShown()\n\n    }\n```", "```kt\n    fun verifyView(view: View?){ \n        view ?: return \n\n        //view is casted to non-nullable \n        view.isShown() \n        //.. \n    } \n```", "```kt\n    fun setView(view: View?){ \n        view ?: throw RuntimeException(\"View is empty\") \n\n        //view is casted to non-nullable \n        view.isShown() \n    } \n```", "```kt\n    var code: Int = 75 \n    code.toChar() \n```", "```kt\n    var weight: Int = 12 // 1 \n    var weight: Int? = null // 2 \n```", "```kt\n    var a: Int = 1 // 1 \n    var b: Int? = null // 2 \n    b = 12 // 3 \n```", "```kt\n    var weight : Int = 12 \n    var truckWeight: Long = weight // Error1 \n```", "```kt\n    var weight:I nt = 12 \n    var truckWeight: Long = weight.toLong() \n```", "```kt\n    val a: Int = 1 \n    val b = a + 1 // Inferred type is Int \n    val b = a + 1L // Inferred type is Long\n```", "```kt\n    27 // Decimals by default \n    27L // Longs are tagged by a upper case L suffix \n    0x1B // Hexadecimals are tagged by 0x prefix \n    0b11011 // Binaries are tagged by 0b prefix \n```", "```kt\n    27.5 // Inferred type is Double \n    27.5F // Inferred type is Float. Float are tagged by f or F \n```", "```kt\n    val char = 'a' \\\\ 1 \n    val string = \"a\" \\\\ 2 \n```", "```kt\n    var yinYang = '\\u262F'\n```", "```kt\n    val array = arrayOf(1,2,3)   // inferred type Array<Int> \n```", "```kt\n    val array2: Array<Short> = arrayOf(1,2,3) \n    val array3: Array<Long> = arrayOf(1,2,3) \n```", "```kt\n    val array =  shortArrayOf(1, 2, 3) \n    val array =  intArrayOf(1, 2, 3) \n    val array =  longArrayOf(1, 2, 3) \n```", "```kt\n    val array = arrayOf(1,2,3) // 1 \n    val array = longArrayOf(1, 2, 3) // 2 \n```", "```kt\n    val array = arrayOfNulls(3) // Prints: [null, null, null] \n    println(array) // Prints: [null, null, null] \n```", "```kt\n    val array = Array (5) { it * 2 } \n    println(array) // Prints: [0, 2, 4, 8, 10] \n```", "```kt\n    val array = arrayOf(1,2,3) \n    println(array[1]) //Prints: 2 \n```", "```kt\n    val isGrowing: Boolean = true \n    val isGrowing: Boolean? = null \n```", "```kt\n    val str = \"abcd\" \n    println (str[1]) // Prints: b \n```", "```kt\n    val str = \"abcd\" \n    println(str.reversed()) // Prints: dcba \n    println(str.takeLast(2)) // Prints: cd \n    println(\"john@test.com\".substringBefore(\"@\")) // Prints: john \n    println(\"john@test.com\".startsWith(\"@\")) // Prints: false \n```", "```kt\n\\\\Java \nString name = \"Eva\"; \nint age = 27; \nString message = \"My name is\" + name + \"and I am\" + age + \"years old\";\n```", "```kt\n    val name = \"Eva\" \n    val age = 27 \n    val message = \"My name is $name and I am $age years old\" \n    println(message) \n\n    //Prints: My name is Eva  and I am 27 years old \n```", "```kt\n    val name = \"Eva\" \n    val message = \"My name has ${name.length} characters\" \n    println(message) //Prints: My name has 3 characters \n```", "```kt\n    val intRange = 1..4 // 1 \n    val charRange= 'b'..'g' // 2 \n```", "```kt\n    for (i in 1..5) print(i) // Prints: 1234 \n    for (i in 'b'..'g') print(i) // Prints: bcdefg \n```", "```kt\n    val weight = 52 \n    val healthy = 50..75 \n\n    if (weight in healthy) \n        println(\"$weight is in $healthy range\") \n\n        //Prints: 52 is in 50..75 range \n```", "```kt\n    val c = 'k'      // Inferred type is Char\n    val alphabet = 'a'..'z'  \n\n    if(c in alphabet) \n        println(\"$c is character\") //Prints: k is a character \n```", "```kt\n    for (i in 1..1) print(i) // Prints: 123\n```", "```kt\n    for (i in 5..1) print(i) // Prints nothing \n```", "```kt\n    for (i in 5 downTo 1) print(i) // Prints: 54321 \n```", "```kt\n    for (i in 3..6 step 2) print(i) // Prints: 35 \n```", "```kt\n    for (i in 9 downTo 1 step 3) print(i) // Prints: 963 \n```", "```kt\n    val x = 5 \n\n    if(x > 10){ \n        println(\"greater\") \n    } else { \n        println(\"smaller\") \n    } \n```", "```kt\n    val x = 5 \n\n    if(x > 10) \n        println(\"greater\") \n    else \n        println(\"smaller\") \n```", "```kt\n    println(if(x > 10) \"greater\" else \"smaller\") \n```", "```kt\n\n    val hour = 10 \n    val greeting: String \n    if (hour < 18) { \n        greeting = \"Good day\" \n    } else { \n        greeting = \"Good evening\" \n    } \n```", "```kt\n    val greeting = if (hour < 18) \"Good day\" else \"Good evening\" \n```", "```kt\n    val hour = 10 \n\n    val greeting = if (hour < 18) { \n        //some code \n        \"Good day\" \n    } else { \n        //some code \n        \"Good evening\" \n    } \n\n    println(greeting) // Prints: \"Good day\" \n```", "```kt\nval age = 18 \nval message = \"You are ${ if (age < 18) \"young\" else \"of age\" } person\" \nprintln(message) // Prints: You are of age person \n```", "```kt\n    when (x) { \n        1 -> print(\"x == 1\") \n        2 -> print(\"x == 2\") \n        else -> println(\"x is neither 1 nor 2\") \n    } \n```", "```kt\n    val vehicle = \"Bike\" \n\n    val message= when (vehicle) { \n        \"Car\" -> { \n            // Some code \n            \"Four wheels\" \n        } \n        \"Bike\" -> { \n            // Some code \n            \"Two wheels\" \n        } \n        else -> { \n            //some code \n            \"Unknown number of wheels\" \n        } \n    } \n\n    println(message) //Prints: Two wheels \n```", "```kt\n    val vehicle = \"Car\" \n\n    when (vehicle) { \n        \"Car\", \"Bike\" -> print(\"Vehicle\")\n        else -> print(\"Unidentified funny object\") \n    } \n```", "```kt\n    val name = when (person) { \n        is String -> person.toUpperCase()\n        is User -> person.name \n\n        //Code is smart casted to String, so we can \n\n        //call String class methods \n\n        //... \n\n    } \n```", "```kt\n    val riskAssessment = 47 \n\n    val risk = when (riskAssessment) { \n        in 1..20 -> \"negligible risk\" \n        !in 21..40 -> \"minor risk\" \n        !in 41..60 -> \"major risk\" \n        else -> \"undefined risk\" \n    } \n\n    println(risk) // Prints: major risk \n```", "```kt\n    val riskAssessment = 80 \n    val handleStrategy = \"Warn\" \n\n    val risk = when (riskAssessment) { \n        in 1..20 -> print(\"negligible risk\") \n        !in 21..40 -> print(\"minor risk\") \n        !in 41..60 -> print(\"major risk\") \n        else -> when (handleStrategy){ \n            \"Warn\" -> \"Risk assessment warning\"  \n            \"Ignore\" -> \"Risk ignored\" \n            else -> \"Unknown risk!\" \n        }  \n    } \n\n    println(risk) // Prints: Risk assessment warning \n```", "```kt\nprivate fun getPasswordErrorId(password: String) = when { \n    password.isEmpty() -> R.string.error_field_required \n    passwordInvalid(password) -> R.string.error_invalid_password \n    else -> null \n} \n```", "```kt\n    val large:Boolean = true \n\n    when(large){ \n        true -> println(\"Big\") \n        false -> println(\"Big\") \n    } \n```", "```kt\n    //Java \n    String str = \"Foo Bar\"; \n    for(int i=0; i<str.length(); i++) \n    System.out.println(str.charAt(i)); \n```", "```kt\n    var array = arrayOf(1, 2, 3) \n\n    for (item in array) { \n        print(item) \n    } \n```", "```kt\n    for (item in array) \n        print(item) \n```", "```kt\n    var array = arrayOf(1, 2, 3) \n\n    for (item in array) \n        print(item) // item is Int \n```", "```kt\n    for (i in array.indices) \n        print(array[i]) \n```", "```kt\n    for ((index, value) in array.withIndex()) { \n        println(\"Element at $index is $value\") \n    } \n```", "```kt\n    while (condition) { \n        //code \n    } \n```", "```kt\n    do { \n        //code \n    } while (condition)  \n```", "```kt\n    do { \n        var found = false \n        //.. \n    } while (found) \n```", "```kt\n    val range = 1..6 \n\n    for(i in range) { \n        print(\"$i \") \n    } \n\n    // prints: 1 2 3 4 5 6 \n```", "```kt\n    val range = 1..6 \n\n    for(i in range) { \n        print(\"$i \") \n\n        if (i == 3) \n            break \n    } \n\n    // prints: 1 2 3 \n```", "```kt\n    val intRange = 1..6 \n    val charRange = 'A'..'B' \n\n    for(value in intRange) { \n        if(value == 3) \n            break \n\n        println(\"Outer loop: $value \") \n\n        for (char in charRange) { \n            println(\"\\tInner loop: $char \") \n        } \n    } \n\n    // prints \n    Outer loop: 1  \n        Inner loop: A  \n        Inner loop: B  \n    Outer loop: 2  \n        Inner loop: A  \n        Inner loop: B  \n```", "```kt\n    val intRange = 1..5 \n\n    for(value in intRange) { \n        if(value == 3) \n            continue \n\n        println(\"Outer loop: $value \") \n\n        for (char in charRange) { \n            println(\"\\tInner loop: $char \") \n        } \n    } \n\n    // prints \n    Outer loop: 1  \n        Inner loop: A  \n        Inner loop: B  \n    Outer loop: 2  \n        Inner loop: A  \n        Inner loop: B  \n    Outer loop: 4  \n        Inner loop: A  \n        Inner loop: B  \n    Outer loop: 5  \n        Inner loop: A  \n        Inner loop: B  \n```", "```kt\n    for(value in intRange) { \n        for (char in charRange) { \n            // How can we break outer loop here? \n        } \n    } \n```", "```kt\n    val charRange = 'A'..'B' \n    val intRange = 1..6 \n\n    outer@ for(value in intRange) { \n        println(\"Outer loop: $value \") \n\n        for (char in charRange) { \n            if(char == 'B') \n                break@outer \n\n            println(\"\\tInner loop: $char \") \n        } \n    } \n\n    // prints \n    Outer loop: 1  \n        Inner loop: A  \n```", "```kt\n    fun doSth() { \n        val charRange = 'A'..'B' \n        val intRange = 1..6 \n\n        for(value in intRange) { \n            println(\"Outer loop: $value \") \n\n            for (char in charRange) { \n                println(\"\\tInner loop: $char \") \n\n                return \n            } \n        }   \n    } \n\n    //usage \n    println(\"Before method call\") \n    doSth() \n    println(\"After method call\") \n\n    // prints\n\n    Outer loop: 1 \n\n        Inner loop: A  \n```", "```kt\n    Outer loop: 1  \n        Inner loop: A  \n```", "```kt\n    // Java \n    try { \n        doSomething() \n    } catch (IOException e) { \n        // Must be safe \n    } \n```", "```kt\n    fun foo() { \n        throw IOException() \n    } \n\n    fun bar() { \n        foo () //no need to surround method with try-catch block \n    } \n```", "```kt\n    fun sendFormData(user: User?, data: Data?) { // 1 \n        user ?: throw NullPointerException(\"User cannot be null\") \n\n        // 2 \n        data ?: throw NullPointerException(\"Data cannot be null\")         \n\n        //do something \n    } \n\n    fun onSendDataClicked() { \n        try { // 3 \n            sendFormData(user, data) \n        } catch (e: AssertionError) { // 4 \n            // handle error \n        }  finally { // 5 \n            // optional finally block \n        } \n    } \n```", "```kt\nval result = try { // 1 \n    context.packageManager.getPackageInfo(\"com.text.app\", 0)  //2 \n    true \n} catch (ex: PackageManager.NameNotFoundException) { // 3 \n    false \n} \n```", "```kt\n   val fruit:String  = getName() \n```", "```kt\n    const val MAX_LOG_ENTRIES = 100 \n\n        @MyLogger(MAX_LOG_ENTRIES ) \n\n        // value available at compile time\n\n        class Test {}\n```"]