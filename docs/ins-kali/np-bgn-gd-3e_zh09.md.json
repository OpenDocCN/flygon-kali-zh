["```py\n    func = np.poly1d(np.array([1, 2, 3, 4]).astype(float))\n    ```", "```py\n    x = np.linspace(-10, 10, 30)\n    ```", "```py\n    y = func(x)\n    ```", "```py\n    plt.plot(x, y)\n    ```", "```py\n    plt.xlabel('x')\n    ```", "```py\n    plt.ylabel('y(x)')\n    ```", "```py\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfunc = np.poly1d(np.array([1, 2, 3, 4]).astype(float))\nx = np.linspace(-10, 10, 30)\ny = func(x)\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y(x)')\nplt.show()\n```", "```py\n    func = np.poly1d(np.array([1, 2, 3, 4]).astype(float))\n    func1 = func.deriv(m=1)\n    x = np.linspace(-10, 10, 30)\n    y = func(x)\n    y1 = func1(x)\n    ```", "```py\n    plt.plot(x, y, 'ro', x, y1, 'g--')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfunc = np.poly1d(np.array([1, 2, 3, 4]).astype(float))\nfunc1 = func.deriv(m=1)\nx = np.linspace(-10, 10, 30)\ny = func(x)\ny1 = func1(x)\n\nplt.plot(x, y, 'ro', x, y1, 'g--')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n```", "```py\n    func = np.poly1d(np.array([1, 2, 3, 4]).astype(float))\n    x = np.linspace(-10, 10, 30)\n    y = func(x)\n    func1 = func.deriv(m=1)\n    y1 = func1(x)\n    func2 = func.deriv(m=2)\n    y2 = func2(x)\n    ```", "```py\n    plt.subplot(311)\n    plt.plot(x, y, 'r-')\n    plt.title(\"Polynomial\")\n    ```", "```py\n    plt.subplot(312)\n    plt.plot(x, y1, 'b^')\n    plt.title(\"First Derivative\")\n    ```", "```py\n    plt.subplot(313)\n    plt.plot(x, y2, 'go')\n    plt.title(\"Second Derivative\")\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfunc = np.poly1d(np.array([1, 2, 3, 4]).astype(float))\nx = np.linspace(-10, 10, 30)\ny = func(x)\nfunc1 = func.deriv(m=1)\ny1 = func1(x)\nfunc2 = func.deriv(m=2)\ny2 = func2(x)\n\nplt.subplot(311)\nplt.plot(x, y, 'r-')\nplt.title(\"Polynomial\")\nplt.subplot(312)\nplt.plot(x, y1, 'b^')\nplt.title(\"First Derivative\")\nplt.subplot(313)\nplt.plot(x, y2, 'go')\nplt.title(\"Second Derivative\")\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n```", "```py\n    from matplotlib.dates import DateFormatter\n    from matplotlib.dates import DayLocator\n    from matplotlib.dates import MonthLocator\n    from matplotlib.finance import quotes_historical_yahoo\n    from matplotlib.finance import candlestick\n    import sys\n    from datetime import date\n    import matplotlib.pyplot as plt\n    today = date.today()\n    start = (today.year - 1, today.month, today.day)\n    ```", "```py\n    alldays = DayLocator()\n    months = MonthLocator()\n    ```", "```py\n    month_formatter = DateFormatter(\"%b %Y\")\n    ```", "```py\n    quotes = quotes_historical_yahoo(symbol, start, today)\n    ```", "```py\n    fig = plt.figure()\n    ```", "```py\n    ax = fig.add_subplot(111)\n    ```", "```py\n    ax.xaxis.set_major_locator(months)\n    ```", "```py\n    ax.xaxis.set_minor_locator(alldays)\n    ```", "```py\n    ax.xaxis.set_major_formatter(month_formatter)\n    ```", "```py\n    candlestick(ax, quotes)\n    ```", "```py\n    fig.autofmt_xdate()\n    plt.show()\n    ```", "```py\nfrom matplotlib.dates import DateFormatter\nfrom matplotlib.dates import DayLocator\nfrom matplotlib.dates import MonthLocator\nfrom matplotlib.finance import quotes_historical_yahoo\nfrom matplotlib.finance import candlestick\nimport sys\nfrom datetime import date\nimport matplotlib.pyplot as plt\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nalldays = DayLocator()\nmonths = MonthLocator()\nmonth_formatter = DateFormatter(\"%b %Y\")\n\nsymbol = 'DISH'\n\nif len(sys.argv) == 2:\n   symbol = sys.argv[1]\n\nquotes = quotes_historical_yahoo(symbol, start, today)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.xaxis.set_major_locator(months)\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_formatter(month_formatter)\n\ncandlestick(ax, quotes)\nfig.autofmt_xdate()\nplt.show()\n```", "```py\n    today = date.today()\n    start = (today.year - 1, today.month, today.day)\n\n    quotes = quotes_historical_yahoo(symbol, start, today)\n    ```", "```py\n    quotes = np.array(quotes)\n    close = quotes.T[4]\n    ```", "```py\n    plt.hist(close, np.sqrt(len(close)))\n    plt.show()\n    ```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo\nimport sys\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nsymbol = 'DISH'\n\nif len(sys.argv) == 2:\n   symbol = sys.argv[1]\n\nquotes = quotes_historical_yahoo(symbol, start, today)\nquotes = np.array(quotes)\nclose = quotes.T[4]\n\nplt.hist(close, np.sqrt(len(close)))\nplt.show()\n```", "```py\nplt.semilogy(dates, volume)\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo\nfrom matplotlib.dates import DateFormatter\nfrom matplotlib.dates import DayLocator\nfrom matplotlib.dates import MonthLocator\nimport sys\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nsymbol = 'DISH'\n\nif len(sys.argv) == 2:\n   symbol = sys.argv[1]\n\nquotes = quotes_historical_yahoo(symbol, start, today)\nquotes = np.array(quotes)\ndates = quotes.T[0]\nvolume = quotes.T[5]\n\nalldays = DayLocator()\nmonths = MonthLocator()\nmonth_formatter = DateFormatter(\"%b %Y\")\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nplt.semilogy(dates, volume)\nax.xaxis.set_major_locator(months)\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_formatter(month_formatter)\nfig.autofmt_xdate()\nplt.show()\n```", "```py\n    dates = quotes.T[4]\n    volume = quotes.T[5]\n    ```", "```py\n    ret = np.diff(close)/close[:-1]\n    volchange = np.diff(volume)/volume[:-1]\n    ```", "```py\n    fig = plt.figure()\n    ```", "```py\n    ax = fig.add_subplot(111)\n    ```", "```py\n    ax.scatter(ret, volchange, c=ret * 100, s=volchange * 100, alpha=0.5)\n    ```", "```py\n    ax.set_title('Close and volume returns')\n    ax.grid(True)\n\n    plt.show()\n    ```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo\nimport sys\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nsymbol = 'DISH'\n\nif len(sys.argv) == 2:\n   symbol = sys.argv[1]\n\nquotes = quotes_historical_yahoo(symbol, start, today)\nquotes = np.array(quotes)\nclose = quotes.T[4]\nvolume = quotes.T[5]\nret = np.diff(close)/close[:-1]\nvolchange = np.diff(volume)/volume[:-1]\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.scatter(ret, volchange, c=ret * 100, s=volchange * 100, alpha=0.5)\nax.set_title('Close and volume returns')\nax.grid(True)\n\nplt.show()\n```", "```py\n    fig = plt.figure()\n    ```", "```py\n    ax = fig.add_subplot(111)\n    ```", "```py\n    ax.plot(dates, close)\n    ```", "```py\n    plt.fill_between(dates, close.min(), close, where=close>close.mean(), facecolor=\"green\", alpha=0.4)\n    plt.fill_between(dates, close.min(), close, where=close<close.mean(), facecolor=\"red\", alpha=0.4)\n    ```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo\nfrom matplotlib.dates import DateFormatter\nfrom matplotlib.dates import DayLocator\nfrom matplotlib.dates import MonthLocator\nimport sys\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nsymbol = 'DISH'\n\nif len(sys.argv) == 2:\n   symbol = sys.argv[1]\n\nquotes = quotes_historical_yahoo(symbol, start, today)\nquotes = np.array(quotes)\ndates = quotes.T[0]\nclose = quotes.T[4]\n\nalldays = DayLocator()\nmonths = MonthLocator()\nmonth_formatter = DateFormatter(\"%b %Y\")\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(dates, close)\nplt.fill_between(dates, close.min(), close, where=close>close.mean(), facecolor=\"green\", alpha=0.4)\nplt.fill_between(dates, close.min(), close, where=close<close.mean(), facecolor=\"red\", alpha=0.4)\nax.xaxis.set_major_locator(months)\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_formatter(month_formatter)\nax.grid(True)\nfig.autofmt_xdate()\nplt.show()\n```", "```py\n    emas = []\n\n    for i in range(9, 18, 3):\n       weights = np.exp(np.linspace(-1., 0., i))\n       weights /= weights.sum()\n\n       ema = np.convolve(weights, close)[i-1:-i+1]\n       idx = (i - 6)/3\n       ax.plot(dates[i-1:], ema, lw=idx, label=\"EMA(%s)\" % (i))\n       data = np.column_stack((dates[i-1:], ema))\n       emas.append(np.rec.fromrecords(\n         data, names=[\"dates\", \"ema\"]))\n    ```", "```py\n    first = emas[0][\"ema\"].flatten()\n    second = emas[1][\"ema\"].flatten()\n    bools = np.abs(first[-len(second):] - second)/second < 0.0001\n    xpoints = np.compress(bools, emas[1])\n    ```", "```py\n    for xpoint in xpoints:\n       ax.annotate('x', xy=xpoint, textcoords='offset points',\n                    xytext=(-50, 30),\n                    arrowprops=dict(arrowstyle=\"->\"))\n    ```", "```py\n    leg = ax.legend(loc='best', fancybox=True))\n    ```", "```py\n    leg.get_frame().set_alpha(0.5)\n    ```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo\nfrom matplotlib.dates import DateFormatter\nfrom matplotlib.dates import DayLocator\nfrom matplotlib.dates import MonthLocator\nimport sys\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntoday = date.today()\nstart = (today.year - 1, today.month, today.day)\n\nsymbol = 'DISH'\n\nif len(sys.argv) == 2:\n   symbol = sys.argv[1]\n\nquotes = quotes_historical_yahoo(symbol, start, today)\nquotes = np.array(quotes)\ndates = quotes.T[0]\nclose = quotes.T[4]\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nemas = []\nfor i in range(9, 18, 3):\n   weights = np.exp(np.linspace(-1., 0., i))\n   weights /= weights.sum()\n   ema = np.convolve(weights, close)[i-1:-i+1]\n   idx = (i - 6)/3\n   ax.plot(dates[i-1:], ema, lw=idx, label=\"EMA(%s)\" % (i))\n   data = np.column_stack((dates[i-1:], ema))\n   emas.append(np.rec.fromrecords(data, names=[\"dates\", \"ema\"]))\n\nfirst = emas[0][\"ema\"].flatten()\nsecond = emas[1][\"ema\"].flatten()\nbools = np.abs(first[-len(second):] - second)/second < 0.0001\nxpoints = np.compress(bools, emas[1])\n\nfor xpoint in xpoints:\n   ax.annotate('x', xy=xpoint, textcoords='offset points',\n                xytext=(-50, 30),\n                arrowprops=dict(arrowstyle=\"->\"))\n\nleg = ax.legend(loc='best', fancybox=True)\nleg.get_frame().set_alpha(0.5)\n\nalldays = DayLocator()\nmonths = MonthLocator()\nmonth_formatter = DateFormatter(\"%b %Y\")\nax.plot(dates, close, lw=1.0, label=\"Close\")\nax.xaxis.set_major_locator(months)\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_formatter(month_formatter)\nax.grid(True)\nfig.autofmt_xdate()\nplt.show()\n```", "```py\n    ax = fig.add_subplot(111, projection='3d')\n    ```", "```py\n    u = np.linspace(-1, 1, 100)\n\n    x, y = np.meshgrid(u, u)\n    ```", "```py\n    ax.plot_surface(x, y, z,  rstride=4, cstride=4, cmap=cm.YlGnBu_r)\n    ```", "```py\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib import cm\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nu = np.linspace(-1, 1, 100)\n\nx, y = np.meshgrid(u, u)\nz = x ** 2 + y ** 2\nax.plot_surface(x, y, z,  rstride=4, cstride=4, cmap=cm.YlGnBu_r)\n\nplt.show()\n```", "```py\nax.contourf(x, y, z)\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib import cm\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nu = np.linspace(-1, 1, 100)\n\nx, y = np.meshgrid(u, u)\nz = x ** 2 + y ** 2\nax.contourf(x, y, z)\n\nplt.show()\n```", "```py\n    circles, triangles, dots = ax.plot(x, 'ro', y, 'g^', z, 'b.')\n    ```", "```py\n    def update(data):\n        circles.set_ydata(data[0])\n        triangles.set_ydata(data[1])\n        return circles, triangles\n    ```", "```py\n    def generate():\n        while True: yield np.random.rand(2, N)\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nN = 10\nx = np.random.rand(N)\ny = np.random.rand(N)\nz = np.random.rand(N)\ncircles, triangles, dots = ax.plot(x, 'ro', y, 'g^', z, 'b.')\nax.set_ylim(0, 1)\nplt.axis('off')\n\ndef update(data):\n    circles.set_ydata(data[0])\n    triangles.set_ydata(data[1])\n    return circles, triangles\n\ndef generate():\n    while True: yield np.random.rand(2, N)\n\nanim = animation.FuncAnimation(fig, update, generate, interval=150)\nplt.show()\n```"]