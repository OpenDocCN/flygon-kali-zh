["```ts\nclass Converter {\n    Convert(temperature : number, converter : FahrenheitToCelsius | CelsiusToFahrenheit) : number {\n        return converter.Convert(temperature);\n    }\n}\n\nlet converter = new Converter();\nconsole.log(converter.Convert(32, new CelsiusToFahrenheit()));\n```", "```ts\nclass Commands {\n    private commands = new Map<string, Command>();\n    public Add(...commands : Command[]) {\n        commands.forEach(command => {\n            this.Add(command);\n        })\n    }\n    public Add(command : Command) {\n        this.commands.set(command.Name, command);\n    }\n}\n\nlet command = new Commands();\ncommand.Add(new Command(\"Command1\", new Function()), new Command(\"Command2\", new Function()));\n```", "```ts\nfunction Log(target : any, propertyKey : string | symbol, descriptor : PropertyDescriptor) {\n    let originalMethod = descriptor.value;\n    descriptor.value = function() {\n        console.log(`Added a command`);\n        originalMethod.apply(this, arguments);\n    }\n    return descriptor;\n}\n```", "```ts\n@Log\npublic Add(command : Command) {\n    this.commands.set(command.Name, command);\n}\n```", "```ts\n<div class=\"row\">\n  <div class=\"col-md-2\">\n  </div>\n  <div class=\"col-md-2\">\n  </div>\n  <div class=\"col-md-2\">\n  </div>\n  <div class=\"col-md-2\">\n  </div>\n  <div class=\"col-md-2\">\n  </div>\n  <div class=\"col-md-2\">\n  </div>\n</div>\n```", "```ts\nng serve --open\n```", "```ts\nng generate service <<servicename>>\n```", "```ts\nng g s <<servicename>>\n```", "```ts\n@Input() Todo: ITodoItem;\n```", "```ts\nexport class Prefill {\n  private constructor() {}\n}\n```", "```ts\nprivate static prefill: Prefill;\npublic static get Instance(): Prefill {\n  return this.prefill || (this.prefill = new this());\n}\n```", "```ts\nio.to('room').emit('event', 'message');\n```", "```ts\nsocket.broadcast.emit('broadcast', 'my message');\n```", "```ts\n@Component({\n  selector: 'atp-map-view',\n  templateUrl: './map-view.component.html',\n  styleUrls: ['./map-view.component.scss'],\n  host: {\n    '(window:load)' : 'Loaded()'\n  }\n})\n```", "```ts\ndocker build -t ohanlon/addresses .\ndocker run -p 17171:3000 -d ohanlon/addresses\n```", "```ts\ndocker-compose up\n```", "```ts\ndocker run -p 17171:3000 -d ohanlon/addresses\n```", "```ts\nvue create <<applicationname>>\n```", "```ts\npublic static void Main(string[] args)\n{\n  CreateWebHostBuilder(args).Build().Run();\n}\n```"]