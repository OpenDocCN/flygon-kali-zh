["```java\n@Mock\nMyDoc docMock;\n```", "```java\nMyDoc docMock = Mockito.*mock*(MyDoc.class)\n```", "```java\nimport static org.mockito.Mockito.*mock*;\n\nimport java.lang.reflect.Parameter;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ExtensionContext.Namespace;\nimport org.junit.jupiter.api.extension.ExtensionContext.Store;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolver;\nimport org.junit.jupiter.api.extension.TestInstancePostProcessor;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\npublic class MockitoExtension\n        implements TestInstancePostProcessor, ParameterResolver {\n\n    @Override\n    public void postProcessTestInstance(Object testInstance,\n            ExtensionContext context) {\n        MockitoAnnotations.*initMocks*(testInstance);\n    }\n\n    @Override\n    public boolean supportsParameter(ParameterContext parameterContext,\n       ExtensionContext extensionContext) {\n      return \n       parameterContext.getParameter().isAnnotationPresent(Mock.class);\n    }\n\n    @Override\n    public Object resolveParameter(ParameterContext parameterContext,\n            ExtensionContext extensionContext) {\n        return getMock(parameterContext.getParameter(), extensionContext);\n    }\n\n    private Object getMock(Parameter parameter,\n            ExtensionContext extensionContext) {\n        Class<?> mockType = parameter.getType();\n        Store mocks = extensionContext\n                .getStore(Namespace.*create*(MockitoExtension.class, \n                mockType));\n        String mockName = getMockName(parameter);\n        if (mockName != null) {\n            return mocks.getOrComputeIfAbsent(mockName,\n                    key -> *mock*(mockType, mockName));\n        } else {\n            return mocks.getOrComputeIfAbsent(mockType.getCanonicalName(),\n                    key -> *mock*(mockType));\n        }\n    }\n\n    private String getMockName(Parameter parameter) {\n        String explicitMockName = \n                parameter.getAnnotation(Mock.class).name()\n                .trim();\n        if (!explicitMockName.isEmpty()) {\n            return explicitMockName;\n        } else if (parameter.isNamePresent()) {\n            return parameter.getName();\n        }\n        return null;\n    }\n\n}\n```", "```java\nMockitoAnnotations.*initMocks*(testInstance)\n```", "```java\npackage io.github.bonigarcia;\n\npublic class LoginController {\n    public LoginService loginService = new LoginService();\n\n    public String login(UserForm userForm) {\n        System.*out*.println(\"LoginController.login \" + userForm);\n        try {\n            if (userForm == null) {\n                return \"ERROR\";\n            } else if (loginService.login(userForm)) {\n                return \"OK\";\n            } else {\n                return \"KO\";\n            }\n        } catch (Exception e) {\n            return \"ERROR\";\n        }\n    }\n\n    public void logout(UserForm userForm) {\n        System.*out*.println(\"LoginController.logout \" + userForm);\n        loginService.logout(userForm);\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\npublic class UserForm {\n\n    public String username;\n    public String password;\n\n    public UserForm(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    // Getters and setters\n\n    @Override\n    public String toString() {\n        return \"UserForm [username=\" + username + \", password=\" + password\n                + \"]\";\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LoginService {\n\n    private LoginRepository loginRepository = new LoginRepository();\n    private List<String> usersLogged = new ArrayList<>();\n\n    public boolean login(UserForm userForm) {\n        System.*out*.println(\"LoginService.login \" + userForm);\n\n        // Preconditions\n        checkForm(userForm);\n\n        // Same user cannot be logged twice\n        String username = userForm.getUsername();\n        if (usersLogged.contains(username)) {\n            throw new LoginException(username + \" already logged\");\n        }\n\n        // Call to repository to make logic\n        boolean login = loginRepository.login(userForm);\n\n        if (login) {\n            usersLogged.add(username);\n        }\n\n        return login;\n    }\n\n    public void logout(UserForm userForm) {\n        System.*out*.println(\"LoginService.logout \" + userForm);\n\n        // Preconditions\n        checkForm(userForm);\n\n        // User should be logged beforehand\n        String username = userForm.getUsername();\n        if (!usersLogged.contains(username)) {\n            throw new LoginException(username + \" not logged\");\n        }\n\n        usersLogged.remove(username);\n    }\n\n    public int getUserLoggedCount() {\n        return usersLogged.size();\n    }\n\n    private void checkForm(UserForm userForm) {\n        assert userForm != null;\n        assert userForm.getUsername() != null;\n        assert userForm.getPassword() != null;\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LoginRepository {\n\n    Map<String, String> users;\n\n    public LoginRepository() {\n        users = new HashMap<>();\n        users.put(\"user1\", \"p1\");\n        users.put(\"user2\", \"p3\");\n        users.put(\"user3\", \"p4\");\n    }\n\n    public boolean login(UserForm userForm) {\n        System.*out*.println(\"LoginRepository.login \" + userForm);\n        String username = userForm.getUsername();\n        String password = userForm.getPassword();\n        return users.keySet().contains(username)\n                && users.get(username).equals(password);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\nimport static org.mockito.Mockito.*verify*;\nimport static org.mockito.Mockito.*verifyNoMoreInteractions*;\nimport static org.mockito.Mockito.*verifyZeroInteractions*;\nimport static org.mockito.Mockito.*when*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass LoginControllerLoginTest {\n\n    // Mocking objects\n    @InjectMocks\n    LoginController loginController;\n\n    @Mock\n    LoginService loginService;\n\n    // Test data\n    UserForm userForm = new UserForm(\"foo\", \"bar\");\n\n    @Test\n    void testLoginOk() {\n        // Setting expectations (stubbing methods)\n        *when*(loginService.login(userForm)).thenReturn(true);\n\n        // Exercise SUT\n        String reseponseLogin = loginController.login(userForm);\n\n        // Verification\n        *assertEquals*(\"OK\", reseponseLogin);\n        *verify*(loginService).login(userForm);\n        *verifyNoMoreInteractions*(loginService);\n    }\n\n    @Test\n    void testLoginKo() {\n        // Setting expectations (stubbing methods)\n        *when*(loginService.login(userForm)).thenReturn(false);\n\n        // Exercise SUT\n        String reseponseLogin = loginController.login(userForm);\n\n        // Verification\n        *assertEquals*(\"KO\", reseponseLogin);\n        *verify*(loginService).login(userForm);\n        *verifyZeroInteractions*(loginService);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\nimport static org.mockito.ArgumentMatchers.*any*;\nimport static org.mockito.Mockito.*when*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass LoginControllerErrorTest {\n\n    @InjectMocks\n    LoginController loginController;\n\n    @Mock\n    LoginService loginService;\n\n    UserForm userForm = new UserForm(\"foo\", \"bar\");\n\n    @Test\n    void testLoginError() {\n        // Exercise\n        String response = loginController.login(null);\n\n        // Verify\n        *assertEquals*(\"ERROR\", response);\n    }\n\n    @Test\n    void testLoginException() {\n        // Expectation\n        *when*(loginService.login(*any*(UserForm.class)))\n                .thenThrow(IllegalArgumentException.class);\n\n        // Exercise\n        String response = loginController.login(userForm);\n\n        // Verify\n        *assertEquals*(\"ERROR\", response);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\nimport static org.mockito.ArgumentMatchers.*any*;\nimport static org.mockito.BDDMockito.*given*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass LoginControllerBDDTest {\n\n    @InjectMocks\n    LoginController loginController;\n\n    @Mock\n    LoginService loginService;\n\n    UserForm userForm = new UserForm(\"foo\", \"bar\");\n\n    @Test\n    void testLoginOk() {\n        *given*(loginService.login(userForm)).willReturn(true);\n        *assertEquals*(\"OK\", loginController.login(userForm));\n    }\n\n    @Test\n    void testLoginKo() {\n        *given*(loginService.login(userForm)).willReturn(false);\n        *assertEquals*(\"KO\", loginController.login(userForm));\n    }\n\n    @Test\n    void testLoginError() {\n        *assertEquals*(\"ERROR\", loginController.login(null));\n    }\n\n    @Test\n    void testLoginException() {\n        *given*(loginService.login(*any*(UserForm.class)))\n                .willThrow(IllegalArgumentException.class);\n        *assertEquals*(\"ERROR\", loginController.login(userForm));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertFalse*;\nimport static org.junit.jupiter.api.Assertions.*assertThrows*;\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\nimport static org.mockito.ArgumentMatchers.*any*;\nimport static org.mockito.Mockito.*atLeast*;\nimport static org.mockito.Mockito.*times*;\nimport static org.mockito.Mockito.*verify*;\nimport static org.mockito.Mockito.*when*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass LoginServiceTest {\n\n    @InjectMocks\n    LoginService loginService;\n\n    @Mock\n    LoginRepository loginRepository;\n\n    UserForm userForm = new UserForm(\"foo\", \"bar\");\n\n    @Test\n    void testLoginOk() {\n        *when*(loginRepository.login(*any*(UserForm.class))).thenReturn(true);\n        *assertTrue*(loginService.login(userForm));\n        *verify*(loginRepository, *atLeast*(1)).login(userForm);\n    }\n\n    @Test\n    void testLoginKo() {\n        *when*(loginRepository.login(*any*(UserForm.class))).thenReturn(false);\n        *assertFalse*(loginService.login(userForm));\n        *verify*(loginRepository, *times*(1)).login(userForm);\n    }\n\n    @Test\n    void testLoginTwice() {\n        *when*(loginRepository.login(userForm)).thenReturn(true);\n        *assertThrows*(LoginException.class, () -> {\n            loginService.login(userForm);\n            loginService.login(userForm);\n        });\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\nimport static org.mockito.Mockito.*verify*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass LoginServiceChaptorTest {\n\n    @InjectMocks\n    LoginService loginService;\n\n    @Mock\n    LoginRepository loginRepository;\n\n    @Captor\n    ArgumentCaptor<UserForm> argCaptor;\n\n    UserForm userForm = new UserForm(\"foo\", \"bar\");\n\n    @Test\n    void testArgumentCaptor() {\n        loginService.login(userForm);\n        *verify*(loginRepository).login(argCaptor.capture());\n        *assertEquals*(userForm, argCaptor.getValue());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertFalse*;\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\n import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Spy;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass LoginServiceSpyTest {\n\n    @InjectMocks\n    LoginService loginService;\n\n    @Spy\n    LoginRepository loginRepository;\n\n    UserForm userOk = new UserForm(\"user1\", \"p1\");\n    UserForm userKo = new UserForm(\"foo\", \"bar\");\n\n    @Test\n    void testLoginOk() {\n        *assertTrue*(loginService.login(userOk));\n    }\n\n    @Test\n    void testLoginKo() {\n        *assertFalse*(loginService.login(userKo));\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>${spring-context.version}</version>\n</dependency>\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.ComponentScan;\n\n@ComponentScan\npublic class MySpringApplication {\n\n    public static void main(String[] args) {\n        try (AnnotationConfigApplicationContext context = new \n                AnnotationConfigApplicationContext(\n                MySpringApplication.class)) {\n            MessageComponent messageComponent = context\n                    .getBean(MessageComponent.class);\n            System.*out*.println(messageComponent.getMessage());\n        }\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MessageComponent {\n\n    private MessageService messageService;\n\n    public MessageComponent(MessageService messageService) {\n       this.messageService = messageService;\n    }\n\n    public String getMessage() {\n        return messageService.getMessage();\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class MessageService {\n\n    public String getMessage() {\n        return \"Hello world!\";\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.ComponentScan;\n\n@ComponentScan\npublic class MySpringApplication {\n\n    public static void main(String[] args) {\n        try (AnnotationConfigApplicationContext context = new \n                AnnotationConfigApplicationContext(\n                MySpringApplication.class)) {\n            MessageComponent messageComponent = context\n                    .getBean(MessageComponent.class);\n            System.*out*.println(messageComponent.getMessage());\n        }\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\n@ContextConfiguration(classes = { MySpringApplication.class })\nclass SimpleSpringTest {\n\n    @Autowired\n    public MessageComponent messageComponent;\n\n    @Test\n    public void test() {\n        *assertEquals*(\"Hello world!\", messageComponent.getMessage());\n    }\n\n}\n```", "```java\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>${junit.jupiter.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```", "```java\ndependencies {\n    compile(\"org.springframework:spring-context:${springVersion}\")\n    testCompile(\"org.springframework:spring-test:${springVersion}\")\n    testCompile(\"org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}\")\n    testRuntime(\"org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}\")\n}\n```", "```java\n<project  \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>io.github.bonigarcia</groupId>\n    <artifactId>junit5-spring-boot</artifactId>\n    <version>1.0.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.0.M3</version>\n    </parent>\n\n    <properties>\n        <junit.jupiter.version>5.0.0</junit.jupiter.version>\n        <junit.platform.version>1.0.0</junit.platform.version>\n        <java.version>1.8</java.version>\n        <maven.compiler.target>${java.version}</maven.compiler.target>\n        <maven.compiler.source>${java.version}</maven.compiler.source>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>${junit.jupiter.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.junit.platform</groupId>\n                        <artifactId>junit-platform-surefire-provider</artifactId>\n                        <version>${junit.platform.version}</version>\n                    </dependency>\n                    <dependency>\n                        <groupId>org.junit.jupiter</groupId>\n                        <artifactId>junit-jupiter-engine</artifactId>\n                        <version>${junit.jupiter.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <url>https://repo.spring.io/libs-milestone</url>\n        </repository>\n    </repositories>\n\n    <pluginRepositories>\n        <pluginRepository>\n            <id>spring-milestones</id>\n            <url>https://repo.spring.io/milestone</url>\n        </pluginRepository>\n    </pluginRepositories>\n\n</project>\n```", "```java\nbuildscript {\n    ext {\n        springBootVersion = '2.0.0.M3'\n        junitPlatformVersion = '1.0.0'\n    }\n\n    repositories {\n        mavenCentral()\n        maven {\n            url 'https://repo.spring.io/milestone'\n        }\n    }\n\n    dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\")\n        classpath(\"org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}\")\n    }\n}\n\nrepositories {\n    mavenCentral()\n    maven {\n        url 'https://repo.spring.io/libs-milestone'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\napply plugin: 'org.junit.platform.gradle.plugin'\n\njar {\n    baseName = 'junit5-spring-boot'\n    version = '1.0.0'\n}\n\ncompileTestJava {\n    sourceCompatibility = 1.8\n    targetCompatibility = 1.8\n    options.compilerArgs += '-parameters'\n}\n\ndependencies {\n    compile('org.springframework.boot:spring-boot-starter')\n    testCompile(\"org.springframework.boot:spring-boot-starter-test\")\n    testCompile(\"org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}\")\n    testRuntime(\"org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}\")\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport javax.annotation.PostConstruct;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MySpringBootApplication {\n    final Logger log = LoggerFactory.*getLogger*(MySpringBootApplication.class);\n\n    @Autowired\n    public MessageComponent messageComponent;\n\n    @PostConstruct\n    private void setup() {\n        log.info(\"*** {} ***\", messageComponent.getMessage());\n    }\n\n    public static void main(String[] args) throws Exception {\n        new SpringApplication(MySpringBootApplication.class).run(args);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\n import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\nclass SimpleSpringBootTest {\n\n    @Autowired\n    public MessageComponent messagePrinter;\n\n    @Test\n    public void test() {\n        *assertEquals*(\"Hello world!\", messagePrinter.getMessage());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.springframework.web.bind.annotation.RequestMethod.*GET*;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class WebController {\n\n    @Autowired\n    private PageService pageService;\n\n    @RequestMapping(value = \"/\", method = *GET*)\n    public String greeting() {\n        return pageService.getPage();\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class PageService {\n\n    public String getPage() {\n        return \"/index.html\";\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.hamcrest.core.StringContains.*containsString*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*get*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*content*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*status*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@AutoConfigureMockMvc\nclass IndexTest {\n\n    @Autowired\n    MockMvc mockMvc;\n\n    @Test\n    void testIndex() throws Exception {\n        mockMvc.perform(*get*(\"/index.html\")).andExpect(*status*().isOk())\n                .andExpect(*content*().contentType(\"text/html\")).andExpect(\n                        *content*().string(*containsString*(\"This is index \n                        page\")));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.mockito.Mockito.*doReturn*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*get*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*redirectedUrl*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*status*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@AutoConfigureMockMvc\nclass RedirectTest {\n\n    @MockBean\n    PageService pageService;\n\n    @Autowired\n    MockMvc mockMvc;\n\n    @Test\n    void test() throws Exception {\n        *doReturn*(\"redirect:/page.html\").when(pageService).getPage();\n        mockMvc.perform(*get*(\"/\")).andExpect(*status*().isFound())\n                .andExpect(*redirectedUrl*(\"/page.html\"));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\nimport static org.mockito.Mockito.*times*;\nimport static org.mockito.Mockito.*verify*;\nimport static org.mockito.Mockito.*when*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass OutOfContainerTest {\n\n    @InjectMocks\n    private WebController webController;\n\n    @Mock\n    private PageService pageService;\n\n    @Test\n    void test() {\n        *when*(pageService.getPage()).thenReturn(\"/my-page.html\");\n        *assertEquals*(\"/my-page.html\", webController.greeting());\n        *verify*(pageService, *times*(1)).getPage();\n    }\n\n}\n```", "```java\nWebDriver driver = new FirefoxDriver();\n\nWebDriver driver = new ChromeDriver();\n\nWebDriver driver = new OperaDriver();\n```", "```java\ndriver.get(\"http://junit.org/junit5/\");\n```", "```java\nWebElement webElement = driver.findElement(By.*id(\"id\"));* driver.findElement(By.*name(\"name\"));* driver.findElement(By.*className(\"class\"));* driver.findElement(By.*cssSelector(\"cssInput\"));* driver.findElement(By.*linkText(\"text\"));* driver.findElement(By.*tagName(\"tag name\"));* driver.findElement(By.*xpath(\"/html/body/div[4]\"));*\n```", "```java\nwebElement.click();\nwebElement.sendKeys(\"text\");\nwebElement.clear();\nString text = webElement.getText();\nString href = webElement.getAttribute(\"href\");\nString css = webElement.getCssValue(\"css\");\nDimension dim = webElement.getSize();\nboolean enabled = webElement.isEnabled();\nboolean selected = webElement.isSelected();\nboolean displayed = webElement.isDisplayed();\n```", "```java\n// Explicit\nWebDriverWait wait = new WebDriverWait(driver, 30);\nwait.until(ExpectedConditions);\n\n// Implicit wait\ndriver.manage().timeouts().implicitlyWait(30, ***SECONDS***);\n```", "```java\n<dependency>\n        <groupId>io.github.bonigarcia</groupId>\n        <artifactId>selenium-jupiter</artifactId>\n        <version>${selenium-jupiter.version}</version>\n        <scope>test</scope>\n</dependency>\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertNotNull*;\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\n import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.htmlunit.HtmlUnitDriver;\nimport org.openqa.selenium.opera.OperaDriver;\nimport org.openqa.selenium.phantomjs.PhantomJSDriver;\n\n@ExtendWith(SeleniumExtension.class)\npublic class LocalWebDriverTest {\n\n    @Test\n    public void testWithChrome(ChromeDriver chrome) {\n        chrome.get(\"https://bonigarcia.github.io/selenium-jupiter/\");\n        *assertTrue*(chrome.getTitle().startsWith(\"selenium-jupiter\"));\n    }\n\n    @Test\n    public void testWithFirefoxAndOpera(FirefoxDriver firefox,\n            OperaDriver opera) {\n        firefox.get(\"http://www.seleniumhq.org/\");\n        opera.get(\"http://junit.org/junit5/\");\n        *assertTrue*(firefox.getTitle().startsWith(\"Selenium\"));\n        *assertTrue*(opera.getTitle().equals(\"JUnit 5\"));\n    }\n\n    @Test\n    public void testWithHeadlessBrowsers(HtmlUnitDriver htmlUnit,\n            PhantomJSDriver phantomjs) {\n        htmlUnit.get(\"https://bonigarcia.github.io/selenium-jupiter/\");\n        phantomjs.get(\"https://bonigarcia.github.io/selenium-jupiter/\");\n        *assertTrue*(htmlUnit.getTitle().contains(\"JUnit 5 extension\"));\n        *assertNotNull*(phantomjs.getPageSource());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\n import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.openqa.selenium.remote.RemoteWebDriver;\n\n@ExtendWith(SeleniumExtension.class)\npublic class RemoteWebDriverTest {\n\n    @Test\n    void testWithRemoteChrome(\n            @DriverUrl(\"http://localhost:4444/wd/hub\") \n            @DriverCapabilities(capability = {\n                   @Capability(name = \"browserName\", value =\"chrome\"),\n                   @Capability(name = \"version\", value = \"59\") }) \n                   RemoteWebDriver remoteChrome)\n            throws InterruptedException {\n        remoteChrome.get(\"https://bonigarcia.github.io/selenium-    \n            jupiter/\");\n        *assertTrue*(remoteChrome.getTitle().contains(\"JUnit 5 \n            extension\"));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertTrue*;\n import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport io.appium.java_client.AppiumDriver;\n\n@ExtendWith(SeleniumExtension.class)\npublic class AppiumTest {\n\n    @DriverCapabilities\n    DesiredCapabilities capabilities = new DesiredCapabilities();\n    {\n        capabilities.setCapability(\"browserName\", \"chrome\");\n        capabilities.setCapability(\"deviceName\", \"Android\");\n    }\n\n    @Test\n    void testWithAndroid(AppiumDriver<WebElement> android) {\n        String context = android.getContext();\n        android.context(\"NATIVE_APP\");\n        android.findElement(By.*id*(\"com.android.chrome:id/terms_accept\"))\n                .click();\n        android.findElement(By.*id*(\"com.android.chrome:id/negative_button\"))\n                .click();\n        android.context(context);\n        android.get(\"https://bonigarcia.github.io/selenium-jupiter/\");\n        *assertTrue*(android.getTitle().contains(\"JUnit 5 extension\"));\n    }\n\n}\n```", "```java\nFeature: Basic Arithmetic\n  Background: A Calculator\n    *Given* a calculator I just turned on\n  Scenario: Addition\n    *When* I add 4 and 5\n    *Then* the result is 9\n  Scenario: Substraction\n    *When* I substract 7 to 2\n    *Then* the result is 5\n  Scenario Outline: Several additions\n    *When* I add *<a>* and *<b>\n*    *Then* the result is *<c>\n*  Examples: Single digits\n    | a | b | c  |\n    | 1 | 2 | 3  |\n    | 3 | 7 | 10 |\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\n\nimport cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\n public class CalculatorSteps {\n\n    private Calculator calc;\n\n    @Given(\"^a calculator I just turned on$\")\n    public void setup() {\n        calc = new Calculator();\n    }\n\n    @When(\"^I add (\\\\d+) and (\\\\d+)$\")\n    public void add(int arg1, int arg2) {\n        calc.push(arg1);\n        calc.push(arg2);\n        calc.push(\"+\");\n    }\n\n    @When(\"^I substract (\\\\d+) to (\\\\d+)$\")\n    public void substract(int arg1, int arg2) {\n        calc.push(arg1);\n        calc.push(arg2);\n        calc.push(\"-\");\n    }\n\n    @Then(\"^the result is (\\\\d+)$\")\n    public void the_result_is(double expected) {\n        *assertEquals*(expected, calc.value());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport org.junit.jupiter.api.DynamicTest;\nimport org.junit.jupiter.api.TestFactory;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport cucumber.api.CucumberOptions;\nimport cucumber.api.junit.jupiter.CucumberExtension;\n\n@CucumberOptions(plugin = { \"pretty\" })\n@ExtendWith(CucumberExtension.class)\npublic class CucumberTest {\n\n    @TestFactory\n    public Stream<DynamicTest> runCukes(Stream<DynamicTest> scenarios) {\n        List<DynamicTest> tests = scenarios.collect(Collectors.*toList*());\n        return tests.stream();\n    }\n\n}\n```", "```java\n<dependency>\n   <groupId>com.github.faustxvi</groupId>\n   <artifactId>junit5-docker</artifactId>\n   <version>${junit5-docker.version}</version>\n   <scope>test</scope>\n</dependency>\n```", "```java\ndependencies {\n    testCompile(\"com.github.faustxvi:junit5-docker:${junitDockerVersion}\")\n}\n```", "```java\npackage io.github.bonigarcia;\n import static org.junit.jupiter.api.Assertions.*assertFalse*;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport org.junit.jupiter.api.Test;\nimport com.github.junit5docker.Docker;\nimport com.github.junit5docker.Environment;\nimport com.github.junit5docker.Port;\nimport com.github.junit5docker.WaitFor;\n\n@Docker(image = \"mysql\", ports = @Port(exposed = 8801, inner = 3306), environments = {\n        @Environment(key = \"MYSQL_ROOT_PASSWORD\", value = \"root\"),\n        @Environment(key = \"MYSQL_DATABASE\", value = \"testdb\"),\n        @Environment(key = \"MYSQL_USER\", value = \"testuser\"),\n        @Environment(key = \"MYSQL_PASSWORD\", value = \"secret\"), }, \n            waitFor = @WaitFor(\"mysqld: ready for connections\"))\n\npublic class DockerTest {\n\n    @Test\n   void test() throws Exception {\n        Class.*forName*(\"com.mysql.jdbc.Driver\");\n        Connection connection = DriverManager.*getConnection*(\n                \"jdbc:mysql://192.168.99.100:8801/testdb\", \"testuser\",\n                \"secret\");\n        *assertFalse*(connection.isClosed());\n        connection.close();\n    }\n\n}\n```", "```java\nbuildscript {\n    dependencies {\n        classpath \"de.mannodermaus.gradle.plugins:android-junit5:1.0.0\"\n    }\n}\n```", "```java\napply plugin: \"com.android.application\"\napply plugin: \"de.mannodermaus.android-junit5\"\n\ndependencies {\n    testCompile junitJupiter()\n}\n```", "```java\n<dependency>\n   <groupId>io.rest-assured</groupId>\n   <artifactId>rest-assured</artifactId>\n   <version>${rest-assured.version}</version>\n   <scope>test</scope>\n</dependency>\n```", "```java\ndependencies {\n    testCompile(\"io.rest-assured:rest-assured:${restAssuredVersion}\")\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static io.restassured.RestAssured.*given*;\nimport static org.hamcrest.Matchers.*equalTo*;\n\nimport org.junit.jupiter.api.Test;\n public class PublicRestServicesTest {\n\n    @Test\n    void testEchoService() {\n        String key = \"foo\";\n        String value = \"bar\";\n        given().when().get(\"http://echo.jsontest.com/\" + key + \"/\" + value)\n                .then().assertThat().statusCode(200).body(key, \n                equalTo(value));\n    }\n\n    @Test\n    void testCountryService() {\n        *given*().when()\n                .get(\"http://services.groupkt.com/country/get/iso2code/ES\")\n                .then().assertThat().statusCode(200)\n                .body(\"RestResponse.result.name\", *equalTo*(\"Spain\"));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n import java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class MyRestController {\n\n    @Autowired\n    private LibraryService libraryService;\n\n    @RequestMapping(value = \"/books\", method = RequestMethod.*GET*)\n    public List<Book> getBooks() {\n        return libraryService.getBooks();\n    }\n\n    @RequestMapping(value = \"/book/{index}\", method = RequestMethod.*GET*)\n    public Book getTeam(@PathVariable(\"index\") int index) {\n        return libraryService.getBook(index);\n    }\n\n    @RequestMapping(value = \"/book\", method = RequestMethod.*POST*)\n    public ResponseEntity<Boolean> addBook(@RequestBody Book book) {\n        libraryService.addBook(book);\n        return new ResponseEntity<Boolean>(true, HttpStatus.*CREATED*);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.Assert.*assertEquals*;\nimport static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.*RANDOM_PORT*;\nimport static org.springframework.http.HttpStatus.*CREATED*;\nimport static org.springframework.http.HttpStatus.*OK*;\n import java.time.LocalDate;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest(webEnvironment = *RANDOM_PORT*)\nclass SpringBootRestTest {\n\n    @Autowired\n    TestRestTemplate restTemplate;\n\n    @Test\n    void testGetAllBooks() {\n        ResponseEntity<Book[]> responseEntity = restTemplate\n                .getForEntity(\"/books\", Book[].class);\n        *assertEquals*(*OK*, responseEntity.getStatusCode());\n        *assertEquals*(3, responseEntity.getBody().length);\n    }\n\n    @Test\n    void testGetBook() {\n        ResponseEntity<Book> responseEntity = restTemplate\n                .getForEntity(\"/book/0\", Book.class);\n        *assertEquals*(*OK*, responseEntity.getStatusCode());\n        *assertEquals*(\"The Hobbit\", responseEntity.getBody().getName());\n    }\n\n    @Test\n    void testPostBook() {\n        Book book = new Book(\"I, Robot\", \"Isaac Asimov\",\n                LocalDate.*of*(1950, 12, 2));\n        ResponseEntity<Boolean> responseEntity = restTemplate\n                .postForEntity(\"/book\", book, Boolean.class);\n        *assertEquals*(*CREATED*, responseEntity.getStatusCode());\n        *assertEquals*(true, responseEntity.getBody());\n        ResponseEntity<Book[]> responseEntity2 = restTemplate\n                .getForEntity(\"/books\", Book[].class);\n        *assertEquals*(responseEntity2.getBody().length, 4);\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.http.POST;\nimport retrofit2.http.Path;\n public interface RemoteFileApi {\n\n    @POST(\"/api/v1/paths/{file}/open-file\")\n    Call<ResponseBody> openFile(@Path(\"file\") String file);\n\n    @POST(\"/api/v1/streams/{streamId}/read\")\n    Call<ResponseBody> readStream(@Path(\"streamId\") String streamId);\n\n    @POST(\"/api/v1/streams/{streamId}/close\")\n    Call<ResponseBody> closeStream(@Path(\"streamId\") String streamId);\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.io.IOException;\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Response;\nimport retrofit2.Retrofit;\nimport retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;\nimport retrofit2.converter.gson.GsonConverterFactory;\n public class RemoteFileService {\n\n    private RemoteFileApi remoteFileApi;\n\n    public RemoteFileService(String baseUrl) {\n        Retrofit retrofit = new Retrofit.Builder()\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.*create*())\n                .addConverterFactory(GsonConverterFactory.*create*())\n                .baseUrl(baseUrl).build();\n        remoteFileApi = retrofit.create(RemoteFileApi.class);\n    }\n\n    public byte[] getFile(String file) throws IOException {\n        Call<ResponseBody> openFile = remoteFileApi.openFile(file);\n        Response<ResponseBody> execute = openFile.execute();\n        String streamId = execute.body().string();\n        System.*out*.println(\"Stream \" + streamId + \" open\");\n\n        Call<ResponseBody> readStream = remoteFileApi.readStream(streamId);\n        byte[] content = readStream.execute().body().bytes();\n        System.*out*.println(\"Received \" + content.length + \" bytes\");\n\n        remoteFileApi.closeStream(streamId).execute();\n        System.*out*.println(\"Stream \" + streamId + \" closed\");\n\n        return content;\n    }\n\n}\n```", "```java\n\npackage io.github.bonigarcia;\n\nimport static com.github.tomakehurst.wiremock.client.WireMock.*aResponse*;\nimport static com.github.tomakehurst.wiremock.client.WireMock.*configureFor*;\nimport static com.github.tomakehurst.wiremock.client.WireMock.*post*;\nimport static com.github.tomakehurst.wiremock.client.WireMock.*stubFor*;\nimport static com.github.tomakehurst.wiremock.client.WireMock.*urlEqualTo*;\nimport static com.github.tomakehurst.wiremock.core.WireMockConfiguration.*options*;\nimport static org.junit.jupiter.api.Assertions.*assertEquals*;\n import java.io.IOException;\nimport java.net.ServerSocket;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport com.github.tomakehurst.wiremock.WireMockServer;\n\npublic class RemoteFileTest {\n\n    RemoteFileService remoteFileService;\n    WireMockServer wireMockServer;\n\n    // Test data\n    String filename = \"foo\";\n    String streamId = \"1\";\n    String contentFile = \"dummy\";\n\n    @BeforeEach\n    void setup() throws Exception {\n        // Look for free port for SUT instantiation\n        int port;\n        try (ServerSocket socket = new ServerSocket(0)) {\n            port = socket.getLocalPort();\n        }\n        remoteFileService = new RemoteFileService(\"http://localhost:\" + \n             port);\n\n        // Mock server\n        wireMockServer = new WireMockServer(*options*().port(port));\n        wireMockServer.start();\n        *configureFor*(\"localhost\", wireMockServer.port());\n\n        // Stubbing service\n        *stubFor*(*post*(*urlEqualTo*(\"/api/v1/paths/\" + filename + \"/open-\n           file\"))\n           .willReturn(*aResponse*().withStatus(200).withBody(streamId)));\n        *stubFor*(*post*(*urlEqualTo*(\"/api/v1/streams/\" + streamId + \n           \"/read\"))\n           .willReturn(*aResponse*().withStatus(200).withBody(contentFile)));\n        *stubFor*(*post*(*urlEqualTo*(\"/api/v1/streams/\" + streamId + /close\"))\n           .willReturn(*aResponse*().withStatus(200)));\n    }\n\n    @Test\n    void testGetFile() throws IOException {\n        byte[] fileContent = remoteFileService.getFile(filename);\n        *assertEquals*(contentFile.length(), fileContent.length);\n    }\n\n    @AfterEach\n    void teardown() {\n        wireMockServer.stop();\n    }\n\n}\n```"]