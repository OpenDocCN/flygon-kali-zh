["```\n$ docker run -d -p 5000:5000 --restart=always --name registry registry:2\n```", "```\n$ docker run -d -p 5000:5000 --restart=always --name registry -v `pwd`/certs:/certs -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key registry:2\n```", "```\n$ mkdir auth\n$ docker run --entrypoint htpasswd registry:2 -Bbn <username> <password> > auth/passwords\n```", "```\n$ docker run -d -p 5000:5000 --restart=always --name registry -v `pwd`/auth:/auth -e \"REGISTRY_AUTH=htpasswd\" -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/passwords -v `pwd`/certs:/certs -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key registry:2\n```", "```\nFROM ubuntu:16.04\nRUN apt-get update && \\\n    apt-get install -y python\n```", "```\n$ docker build -t ubuntu_with_python .\n```", "```\n<registry_address>/<image_name>:<tag>\n```", "```\n$ docker tag ubuntu_with_python leszko/ubuntu_with_python:1\n```", "```\n$ docker login --username <username> --password <password>\n```", "```\n$ docker push leszko/ubuntu_with_python:1\n```", "```\n$ docker rmi ubuntu_with_python leszko/ubuntu_with_python:1\n```", "```\n$ docker pull leszko/ubuntu_with_python:1\n```", "```\nFROM frolvlad/alpine-oraclejdk8:slim\nCOPY build/libs/calculator-0.0.1-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```", "```\n$ ./gradlew build\n$ docker build -t calculator .\n$ docker run -p 8080:8080 --name calculator calculator\n```", "```\n$ git add Dockerfile\n$ git commit -m \"Add Dockerfile\"\n$ git push\n```", "```\nstage(\"Package\") {\n     steps {\n          sh \"./gradlew build\"\n     }\n}\n\nstage(\"Docker build\") {\n     steps {\n          sh \"docker build -t leszko/calculator .\"\n     }\n}\n```", "```\nstage(\"Docker push\") {\n     steps {\n          sh \"docker push leszko/calculator\"\n     }\n}\n```", "```\nstage(\"Deploy to staging\") {\n     steps {\n          sh \"docker run -d --rm -p 8765:8080 --name calculator leszko/calculator\"\n     }\n}\n```", "```\n#!/bin/bash\ntest $(curl localhost:8765/sum?a=1\\&b=2) -eq 3\n```", "```\nstage(\"Acceptance test\") {\n     steps {\n          sleep 60\n          sh \"./acceptance_test.sh\"\n     }\n}\n```", "```\npost {\n     always {\n          sh \"docker stop calculator\"\n     }\n}\n```", "```\n$ pip install docker-compose\n```", "```\n$ docker-compose --version\n```", "```\nversion: \"3\"\nservices:\n     calculator:\n          image: calculator:latest\n          ports:\n               - 8080\n     redis:\n          image: redis:latest\n```", "```\n$ docker-compose up -d\n```", "```\n$ docker-compose ps\n Name                   Command            State          Ports \n---------------------------------------------------------------------------\nproject_calculator_1   java -jar app.jar    Up     0.0.0.0:8080->8080/tcp\nproject_redis_1        docker-entrypoint.sh redis ... Up 6379/tcp\n```", "```\n$ docker ps\nCONTAINER ID  IMAGE             COMMAND                 PORTS\n360518e46bd3  calculator:latest \"java -jar app.jar\"     0.0.0.0:8080->8080/tcp \n2268b9f1e14b  redis:latest      \"docker-entrypoint...\"  6379/tcp\n```", "```\n$ docker-compose down\n```", "```\nversion: \"3\"\nservices:\n     calculator:\n          build: .\n          ports:\n               - 8080\n     redis:\n          image: redis:latest\n```", "```\n$ docker-compose up -d\n$ docker-compose scale calculator=5\n```", "```\n$ docker-compose ps\n Name                     Command             State Ports \n---------------------------------------------------------------------------\ncalculator_calculator_1   java -jar app.jar   Up   0.0.0.0:32777->8080/tcp\ncalculator_calculator_2   java -jar app.jar   Up   0.0.0.0:32778->8080/tcp\ncalculator_calculator_3   java -jar app.jar   Up   0.0.0.0:32779->8080/tcp\ncalculator_calculator_4   java -jar app.jar   Up   0.0.0.0:32781->8080/tcp\ncalculator_calculator_5   java -jar app.jar   Up   0.0.0.0:32780->8080/tcp\ncalculator_redis_1        docker-entrypoint.sh redis ... Up 6379/tcp\n```", "```\n$ docker-compose down\n```", "```\ncompile \"org.springframework.data:spring-data-redis:1.8.0.RELEASE\"\ncompile \"redis.clients:jedis:2.9.0\"\n```", "```\npackage com.leszko.calculator;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/** Cache config. */\n@Configuration\n@EnableCaching\npublic class CacheConfig extends CachingConfigurerSupport {\n    private static final String REDIS_ADDRESS = \"redis\";\n\n    @Bean\n    public JedisConnectionFactory redisConnectionFactory() {\n        JedisConnectionFactory redisConnectionFactory = new\n          JedisConnectionFactory();\n        redisConnectionFactory.setHostName(REDIS_ADDRESS);\n        redisConnectionFactory.setPort(6379);\n        return redisConnectionFactory;\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory cf) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, \n          String>();\n        redisTemplate.setConnectionFactory(cf);\n        return redisTemplate;\n    }\n\n    @Bean\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        return new RedisCacheManager(redisTemplate);\n    }\n}\n```", "```\npackage com.leszko.calculator;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\n/** Calculator logic */\n@Service\npublic class Calculator {\n    @Cacheable(\"sum\")\n    public int sum(int a, int b) {\n        return a + b;\n    }\n}\n```", "```\n$ ./gradlew clean build\n$ docker-compose up --build -d\n```", "```\n$ docker-compose port calculator 8080\n0.0.0.0:32783\n```", "```\n$ docker-compose exec redis redis-cli\n\n127.0.0.1:6379> keys *\n1) \"\\xac\\xed\\x00\\x05sr\\x00/org.springframework.cache.interceptor.SimpleKeyL\\nW\\x03km\\x93\\xd8\\x02\\x00\\x02I\\x00\\bhashCode[\\x00\\x06paramst\\x00\\x13[Ljava/lang/Object;xp\\x00\\x00\\x03\\xe2ur\\x00\\x13[Ljava.lang.Object;\\x90\\xceX\\x9f\\x10s)l\\x02\\x00\\x00xp\\x00\\x00\\x00\\x02sr\\x00\\x11java.lang.Integer\\x12\\xe2\\xa0\\xa4\\xf7\\x81\\x878\\x02\\x00\\x01I\\x00\\x05valuexr\\x00\\x10java.lang.Number\\x86\\xac\\x95\\x1d\\x0b\\x94\\xe0\\x8b\\x02\\x00\\x00xp\\x00\\x00\\x00\\x01sq\\x00~\\x00\\x05\\x00\\x00\\x00\\x02\"\n2) \"sum~keys\"\n```", "```\nstage(\"Deploy to staging\") {\n    steps {\n        sh \"docker-compose up -d\"\n    }\n}\n```", "```\npost {\n    always {\n        sh \"docker-compose down\"\n    }\n}\n```", "```\n#!/bin/bash\nCALCULATOR_PORT=$(docker-compose port calculator 8080 | cut -d: -f2)\ntest $(curl localhost:$CALCULATOR_PORT/sum?a=1\\&b=2) -eq 3\n```", "```\nFROM ubuntu:trusty\nRUN apt-get update && \\\n    apt-get install -yq curl\nCOPY test.sh .\nCMD [\"bash\", \"test.sh\"]\n```", "```\nversion: \"3\"\nservices:\n    test:\n        build: ./acceptance\n```", "```\n#!/bin/bash\nsleep 60\ntest $(curl calculator:8080/sum?a=1\\&b=2) -eq 3\n```", "```\n$ docker-compose -f docker-compose.yml -f acceptance/docker-compose-acceptance.yml -p acceptance up -d --build\n```", "```\n$ docker logs acceptance_test_1\n %   Total %   Received % Xferd Average Speed Time \n 100 1     100 1        0 0     1       0     0:00:01\n```", "```\n$ docker wait acceptance_test_1\n0\n```", "```\n$ docker-compose -f docker-compose.yml -f acceptance/docker-compose-acceptance.yml -p acceptance down\n```", "```\nstage(\"Acceptance test\") {\n    steps {\n        sh \"docker-compose -f docker-compose.yml \n                   -f acceptance/docker-compose-acceptance.yml build test\"\n        sh \"docker-compose -f docker-compose.yml \n                   -f acceptance/docker-compose-acceptance.yml \n                   -p acceptance up -d\"\n        sh 'test $(docker wait acceptance_test_1) -eq 0'\n    }\n}\n```", "```\npost {\n    always {\n        sh \"docker-compose -f docker-compose.yml \n                   -f acceptance/docker-compose-acceptance.yml \n                   -p acceptance down\"\n    }\n}\n```", "```\nGiven I have two numbers: 1 and 2\nWhen the calculator sums them\nThen I receive 3 as a result\n```", "```\nFeature: Calculator\n    Scenario: Sum two numbers\n        Given I have two numbers: 1 and 2\n        When the calculator sums them\n        Then I receive 3 as a result\n```", "```\npackage acceptance;\n\nimport cucumber.api.java.en.Given;\nimport cucumber.api.java.en.Then;\nimport cucumber.api.java.en.When;\nimport org.springframework.web.client.RestTemplate;\n\nimport static org.junit.Assert.assertEquals;\n\n/** Steps definitions for calculator.feature */\npublic class StepDefinitions {\n    private String server = System.getProperty(\"calculator.url\");\n\n    private RestTemplate restTemplate = new RestTemplate();\n\n    private String a;\n    private String b;\n    private String result;\n\n    @Given(\"^I have two numbers: (.*) and (.*)$\")\n    public void i_have_two_numbers(String a, String b) throws Throwable {\n        this.a = a;\n        this.b = b;\n    }\n\n    @When(\"^the calculator sums them$\")\n    public void the_calculator_sums_them() throws Throwable {\n        String url = String.format(\"%s/sum?a=%s&b=%s\", server, a, b);\n        result = restTemplate.getForObject(url, String.class);\n    }\n\n    @Then(\"^I receive (.*) as a result$\")\n    public void i_receive_as_a_result(String expectedResult) throws Throwable {\n        assertEquals(expectedResult, result);\n    }\n}\n```", "```\n        testCompile(\"info.cukes:cucumber-java:1.2.4\")\n        testCompile(\"info.cukes:cucumber-junit:1.2.4\")\n```", "```\n       task acceptanceTest(type: Test) {\n            include '**/acceptance/**'\n            systemProperties System.getProperties()\n       }\n\n       test {\n            exclude '**/acceptance/**'\n       }\n```", "```\n        package acceptance;\n\n        import cucumber.api.CucumberOptions;\n        import cucumber.api.junit.Cucumber;\n        import org.junit.runner.RunWith;\n\n        /** Acceptance Test */\n        @RunWith(Cucumber.class)\n        @CucumberOptions(features = \"classpath:feature\")\n        public class AcceptanceTest { }\n```", "```\n$ ./gradlew acceptanceTest -Dcalculator.url=http://localhost:8080\n```", "```\nScenario: Store book in the library\nGiven: Book \"The Lord of the Rings\" by \"J.R.R. Tolkien\" with ISBN number  \n\"0395974682\"\nWhen: I store the book in library\nThen: I am able to retrieve the book by the ISBN number\n```"]