- en: '*Chapter 8*: Introducing Kustomize for Kubernetes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：介绍Kubernetes的Kustomize'
- en: In the previous chapter, we learned how to install, use, and create `kubectl`
    plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何安装、使用和创建`kubectl`插件。
- en: In this chapter, let's learn how to use Kustomize for Kubernetes. Kustomize
    allows us to patch Kubernetes templates without changing the application's original
    templates. We are going to learn about Kustomize and how to patch Kubernetes deployments
    with its help.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，让我们学习如何在Kubernetes中使用Kustomize。Kustomize允许我们在不更改应用程序原始模板的情况下修补Kubernetes模板。我们将学习Kustomize以及如何使用它来修补Kubernetes部署。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Introduction to Kustomize
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kustomize简介
- en: Patching Kubernetes deployment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修补Kubernetes部署
- en: Introduction to Kustomize
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kustomize简介
- en: Kustomize uses overlays for Kubernetes manifests to add, remove, or update configuration
    options without forking. What Kustomize does is take a Kubernetes template, patch
    it with specified changes in `kustomization.yaml`, and then deploy it to Kubernetes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kustomize使用Kubernetes清单的覆盖来添加、删除或更新配置选项，而无需分叉。Kustomize的作用是获取Kubernetes模板，在`kustomization.yaml`中指定的更改，然后将其部署到Kubernetes。
- en: It is a handy tool for patching non-complex applications, for example, with
    changes needed for different environments or resource namespacing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个方便的工具，用于修补非复杂的应用程序，例如，需要针对不同环境或资源命名空间的更改。
- en: Kustomize is available as a standalone binary and as a native command in `kubectl`
    since v.1.14.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Kustomize作为一个独立的二进制文件和自v.1.14以来作为`kubectl`中的本机命令可用。
- en: 'Let''s look at a couple of Kustomize commands, use the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下几个Kustomize命令，使用以下命令：
- en: 'To show the generated modified templates on the terminal, use the following
    command:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在终端上显示生成的修改模板，请使用以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To deploy generated modified templates on Kubernetes:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在Kubernetes上部署生成的修改模板：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding examples, `base` is the folder that has the application files
    and `kustomization.yaml`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`base`是包含应用程序文件和`kustomization.yaml`的文件夹。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding commands will fail as there is no `base` folder. This is just
    an example of the commands.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有`base`文件夹，上述命令将失败。这只是命令的示例。
- en: Patching a Kubernetes application
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修补Kubernetes应用程序
- en: 'In this section, let''s try to patch an application with Kustomize. For this
    example, we have a `kustomize` folder with the following files:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们尝试使用Kustomize来修补一个应用程序。例如，我们有一个带有以下文件的`kustomize`文件夹：
- en: '![Figure 8.1 – Kustomize examples'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – Kustomize示例'
- en: '](image/B16411_08_001.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_001.jpg)'
- en: Figure 8.1 – Kustomize examples
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – Kustomize示例
- en: The `base` folder has three files—`deployment.yaml`, `service.yaml`, and `kustomization.yaml`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`base`文件夹有三个文件—`deployment.yaml`、`service.yaml`和`kustomization.yaml`。'
- en: 'Let''s check the `deployment.yaml` file by running the `$ cat base/deployment.yaml`
    command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`$ cat base/deployment.yaml`命令来检查`deployment.yaml`文件：
- en: '![Figure 8.2 – The deployment.yaml file'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 – deployment.yaml文件'
- en: '](image/B16411_08_002.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_002.jpg)'
- en: Figure 8.2 – The deployment.yaml file
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – deployment.yaml文件
- en: In the preceding screenshot, we have the `nginx` deployment template, which
    we are going to use with Kustomize.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们有`nginx`部署模板，我们将在Kustomize中使用它。
- en: 'Let''s get the `service.yaml` file''s content by running the `$ cat base/service.yaml`
    command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`$ cat base/service.yaml`命令来获取`service.yaml`文件的内容：
- en: '![Figure 8.3 – The service.yaml file'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3 – service.yaml文件'
- en: '](image/B16411_08_003.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_003.jpg)'
- en: Figure 8.3 – The service.yaml file
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – service.yaml文件
- en: In the preceding screenshot, we have the `nginx` service template that we are
    going to use with Kustomize.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们有`nginx`服务模板，我们将在Kustomize中使用它。
- en: As you can see, we are using the `nginx` deployment and service template again
    so it will be easier for you to understand what Kustomize does.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们再次使用了`nginx`部署和服务模板，这样您就更容易理解Kustomize的操作。
- en: 'Let''s get the `kustomization.yaml.yaml` file''s content by running the `$
    cat base/kustomization.yaml` command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`$ cat base/kustomization.yaml`命令，让我们获取`kustomization.yaml.yaml`文件的内容：
- en: '![Figure 8.4 – The kustomization.yaml file'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 - kustomization.yaml文件'
- en: '](image/B16411_08_004.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_004.jpg)'
- en: Figure 8.4 – The kustomization.yaml file
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 - kustomization.yaml文件
- en: As we are already familiar with the `nginx` deployment and service, let's take
    a look into the `kustomization.yaml` file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经熟悉了`nginx`部署和服务，让我们来看看`kustomization.yaml`文件。
- en: 'With the following code from `kustomization.yaml`, we set a new tag for the
    `nginx` image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`kustomization.yaml`中的以下代码，我们为`nginx`图像设置了一个新标签：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'images:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图像：
- en: '- name: nginx'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：nginx'
- en: 'newTag: 1.19.1'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'newTag: 1.19.1'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following code sets which `resources` to apply the settings to. As `service`
    does not have images, Kustomize will only apply to the `deployment`, but we will
    need `service` in the later steps, so we are setting it anyway:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码设置了要应用设置的`resources`。由于`service`没有图像，Kustomize只会应用于`deployment`，但我们将在以后的步骤中需要`service`，所以我们仍然设置它：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'resources:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 资源：
- en: '- deployment.yaml'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '- deployment.yaml'
- en: '- service.yaml'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '- service.yaml'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s check how Kustomize will change the deployment by running the `$kubectl
    kustomize base` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过运行`$ kubectl kustomize base`命令来检查Kustomize将如何更改部署：
- en: '![Figure 8.5 – kubectl kustomize base output'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.5 - kubectl kustomize base输出'
- en: '](image/B16411_08_005.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_005.jpg)'
- en: Figure 8.5 – kubectl kustomize base output
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 - kubectl kustomize base输出
- en: 'From the preceding output, you can see that Kustomize generated `service` and
    `deployment` content. The contents of `service` did not change, but let''s take
    a look at `deployment`. Comparing the original file, `base/deployment.yaml`, with
    the preceding output, we see that `- image: nginx:1.18.0` got changed to `- image:
    nginx:1.19.1`, as was specified in the `kustomization.yaml` file.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '从前面的输出中，您可以看到Kustomize生成了`service`和`deployment`内容。`service`的内容没有改变，但让我们来看看`deployment`。将原始文件`base/deployment.yaml`与前面的输出进行比较，我们看到`-
    image: nginx:1.18.0`已更改为`- image: nginx:1.19.1`，正如在`kustomization.yaml`文件中指定的那样。'
- en: It's a nice and easy `image` tag change without modifying the original `deployment.yaml`
    file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好且简单的`image`标签更改，而不需要修改原始的`deployment.yaml`文件。
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Such tricks come handy, especially in real-world application deployments, where
    different environments might use different Docker image tags.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的技巧特别方便，特别是在真实的应用程序部署中，不同的环境可能使用不同的Docker镜像标签。
- en: Kustomize overlays
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kustomize叠加
- en: As a sysadmin, I want to be able to deploy different environments (development
    and production) of my web service with dedicated custom configurations, such as
    the number of replicas, allocated resources, security rules, or other configurations.
    I would like to do this without maintaining duplications of my core application
    configurations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统管理员，我希望能够部署具有专用自定义配置的不同环境（开发和生产）的Web服务，例如副本的数量，分配的资源，安全规则或其他配置。我希望能够在不维护核心应用程序配置的重复副本的情况下完成这些操作。
- en: In this section, let's learn more advanced customizations using Kustomize to
    deploy to development and production environments and using different namespaces
    and NGINX Docker tags for each environment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们通过使用Kustomize进行更高级的自定义来部署到开发和生产环境，并为每个环境使用不同的命名空间和NGINX Docker标签来学习更多内容。
- en: In the `overlays` folder, we have the `development/kustomization.yaml` and `production/kustomization.yaml`
    files; let's check them. In the following screenshot, we have the `kustomization.yaml`
    file, which will be applied to the development environment.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`overlays`文件夹中，我们有`development/kustomization.yaml`和`production/kustomization.yaml`文件；让我们来检查它们。在下面的截图中，我们有`kustomization.yaml`文件，它将应用于开发环境。
- en: 'Let''s get the `overlays/development/kustomization.yaml` file''s content by
    running the `$ cat overlays/development/kustomization.yaml` command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`$ cat overlays/development/kustomization.yaml`命令来获取`overlays/development/kustomization.yaml`文件的内容：
- en: '![Figure 8.6 – The development/kustomization.yaml content'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.6 - development/kustomization.yaml内容'
- en: '](image/B16411_08_006.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_006.jpg)'
- en: Figure 8.6 – The development/kustomization.yaml content
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 - development/kustomization.yaml内容
- en: In the preceding screenshot, we have the `kustomization.yaml` file, which will
    be applied to the development environment.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们有`kustomization.yaml`文件，它将应用于开发环境。
- en: 'Let''s get the `overlays/production/kustomization.yaml` file''s content by
    running the `$ cat overlays/development/kustomization.yaml` command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`$ cat overlays/development/kustomization.yaml`命令来获取`overlays/production/kustomization.yaml`文件的内容：
- en: '![Figure 8.7 – The production/kustomization.yaml content'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.7 - production/kustomization.yaml内容'
- en: '](image/B16411_08_007.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_007.jpg)'
- en: Figure 8.7 – The production/kustomization.yaml content
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 - production/kustomization.yaml内容
- en: In the preceding screenshot, we have the `kustomization.yaml` file, which will
    be applied to the production environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们有`kustomization.yaml`文件，它将应用于生产环境。
- en: 'OK, let''s check the changes we are getting in the `development/kustomization.yaml`
    file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们来检查我们在`development/kustomization.yaml`文件中得到的更改：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s see how these changes will be applied to the development `deployment`
    and `service` by running the `$ kubectl kustomize overlays/development` command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行`$ kubectl kustomize overlays/development`命令来看看这些更改将如何应用于开发环境的`deployment`和`service`：
- en: '![Figure 8.8 – The kubectl kustomize overlays/development output'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.8 - kubectl kustomize overlays/development输出'
- en: '](image/B16411_08_008.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_008.jpg)'
- en: Figure 8.8 – The kubectl kustomize overlays/development output
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 - kubectl kustomize overlays/development输出
- en: As we can see, the `deployment` and `service` names were changed, a namespace
    was added, and the `nginx` image tag was changed as per the `kustomization.yaml`
    file in the `base` folder specification. Great job so far!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`base`文件夹规范，我们可以看到`deployment`和`service`的名称已更改，添加了一个命名空间，并且`nginx`镜像标签也已更改。到目前为止做得很好！
- en: 'Now let''s check the `production/kustomization.yaml` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查`production/kustomization.yaml`文件：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The changes we want to apply are very similar to the ones made for `development`,
    but we also want a different Docker image tag to be set.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要应用的更改与为`development`所做的更改非常相似，但我们还希望设置不同的Docker镜像标签。
- en: 'Let''s see how it is going to work out by running the `$ kubectl kustomize
    overlays/production` command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`$ kubectl kustomize overlays/production`命令来看看它将如何运行：
- en: '![Figure 8.9 – The kubectl kustomize overlays/production output'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.9 - kubectl kustomize overlays/production输出'
- en: '](image/B16411_08_009.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_08_009.jpg)'
- en: Figure 8.9 – The kubectl kustomize overlays/production output
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 - kubectl kustomize overlays/production输出
- en: As you can see, all the required changes were applied.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，所有所需的更改都已应用。
- en: Note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Kustomize merges all found `kustomization.yaml` files, and files from the `base`
    folder get applied first, then the files from the `overlay` folder. You can choose
    how to name your folders.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Kustomize合并所有找到的`kustomization.yaml`文件，首先应用来自`base`文件夹的文件，然后应用来自`overlay`文件夹的文件。您可以选择如何命名您的文件夹。
- en: 'Now, it is time to actually perform an installation using Kustomize:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候实际执行使用Kustomize进行安装了：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With the preceding commands, we have created the `nginx-prod` namespace and
    installed the `nginx` application with the help of the Kustomize-applied changes,
    which you can see it running.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述命令，我们已经创建了`nginx-prod`命名空间，并借助Kustomize应用的更改安装了`nginx`应用程序，您可以看到它正在运行。
- en: 'We have learned only some basic functionalities of Kustomize, as it is out
    of scope to cover everything about Kustomize in this book, so please refer to
    the following link for more information: [https://kustomize.io/](https://kustomize.io/).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只学习了Kustomize的一些基本功能，因为在本书中涵盖Kustomize的所有内容超出了范围，请参考以下链接获取更多信息：[https://kustomize.io/](https://kustomize.io/)。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to install applications using Kustomize.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学会了如何使用Kustomize安装应用程序。
- en: We have learned how to apply Kustomize to `nginx` deployments and services,
    changing their names, adding namespace, and changing the image tag in the deployment.
    All that was done without changing the application's original templates by using
    `kustomization.yaml` files with Kustomize to make the required changes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何将Kustomize应用于`nginx`部署和服务，改变它们的名称，添加命名空间，并在部署中更改镜像标签。所有这些都是在不更改应用程序原始模板的情况下完成的，通过使用带有Kustomize的`kustomization.yaml`文件来进行所需的更改。
- en: In the next chapter, we are going to learn how to use Helm—the Kubernetes package
    manager.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Helm——Kubernetes软件包管理器。
