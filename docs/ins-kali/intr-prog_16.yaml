- en: Managing Objects, Strings, Time, and Random Numbers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理对象、字符串、时间和随机数
- en: The classes that we will be discussing in this chapter, belong—together with
    Java collections and arrays discussed in the previous chapters—to the group of
    classes (mostly utilities from the Java Standard Library and Apache Commons) that
    every programmer has to master in order to become an effective coder. They also
    illustrate various software designs and solutions that are instructive and can
    be used as patterns for best coding practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章讨论的类，与前几章讨论的Java集合和数组一起，属于每个程序员都必须掌握的类（主要是来自Java标准库和Apache Commons的实用程序），以便成为有效的编码人员。它们还说明了各种有益的软件设计和解决方案，可以作为最佳编码实践的模式。
- en: 'We will cover the following areas of functionality:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下功能领域：
- en: Managing objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理对象
- en: Managing strings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理字符串
- en: Managing time
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理时间
- en: Manage random numbers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理随机数
- en: 'The list of the overviewed classes includes:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 概述的类列表包括：
- en: '`java.util.Objects`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Objects`'
- en: '`org.apache.commons.lang3.ObjectUtils`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3.ObjectUtils`'
- en: '`java.lang.String`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang.String`'
- en: '`org.apache.commons.lang3.StringUtils`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3.StringUtils`'
- en: '`java.time.LocalDate`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time.LocalDate`'
- en: '`java.time.LocalTime`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time.LocalTime`'
- en: '`java.time.LocalDateTime`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time.LocalDateTime`'
- en: '`java.lang.Math`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang.Math`'
- en: '`java.util.Random`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Random`'
- en: Managing objects
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理对象
- en: You may not need to manage arrays and may even not need to manage collections
    (for some time, at least), but you cannot avoid managing objects, which means
    that the classes described in this section you are probably going to use every
    day.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不需要管理数组，甚至可能不需要管理集合（至少有一段时间），但您无法避免管理对象，这意味着您可能每天都会使用本节中描述的类。
- en: Although the `java.util.Objects` class was added to the Java Standard Libraries
    in 2011 (with the Java 7 release), while the `ObjectUtils` class has existed in
    the Apache Commons libraries since 2002, their use grew slowly. This may be partially
    explained by the small number of methods they had originally—only six in `ObjectUtils` in
    2003 and only nine in `Objects` in 2011\. However, they were very helpful methods
    that could make the code more readable and robust—less prone to errors. So, why
    these classes were not used more often from the very beginning remains a mystery.
    We hope that you start using them immediately with your very first project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`java.util.Objects`类是在2011年（Java 7发布时）添加到Java标准库中的，而`ObjectUtils`类自2002年以来就存在于Apache
    Commons库中，但它们的使用增长缓慢。这可能部分原因是它们最初的方法数量很少-2003年`ObjectUtils`只有六个方法，2011年`Objects`只有九个。然而，它们是非常有用的方法，可以使代码更易读和更健壮，减少错误的发生。因此，为什么这些类最初没有被更频繁地使用仍然是一个谜。我们希望您立即在您的第一个项目中开始使用它们。
- en: Class java.util.Objects
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Class java.util.Objects
- en: 'The class `Objects` has only 17 methods—all static. We have already used some
    of them in the previous chapter when we implemented the class `Person`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Objects`类只有17个方法-全部是静态的。我们在上一章中已经使用了其中一些方法，当时我们实现了`Person`类：'
- en: '```java'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: class Person implements Comparable<Person> {
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: class Person implements Comparable<Person> {
- en: private int age;
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: private int age;
- en: private String name;
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: private String name;
- en: public Person(int age, String name) {
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: public Person(int age, String name) {
- en: this.age = age;
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: this.age = age;
- en: 'this.name = name == null ? "" : name;'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.name = name == null ? "" : name;'
- en: '}'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public int getAge(){ return this.age; }
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: public int getAge(){ return this.age; }
- en: public String getName(){ return this.name; }
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: public String getName(){ return this.name; }
- en: '@Override'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public int compareTo(Person p){
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: public int compareTo(Person p){
- en: int result = this.name.compareTo(p.getName());
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: int result = this.name.compareTo(p.getName());
- en: if (result != 0) {
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: if (result != 0) {
- en: return result;
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: return result;
- en: '}'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return this.age - p.getAge();
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: return this.age - p.getAge();
- en: '}'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Override'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public boolean equals(Object o) {
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: public boolean equals(Object o) {
- en: if (this == o) return true;
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: if (this == o) return true;
- en: if (o == null) return false;
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: if (o == null) return false;
- en: if(!(o instanceof Person)) return false;
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: if(!(o instanceof Person)) return false;
- en: Person person = (Person)o;
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Person person = (Person)o;
- en: return age == person.getAge() &&
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: return age == person.getAge() &&
- en: Objects.equals(name, person.getName()); //line 25
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.equals(name, person.getName()); //line 25
- en: '}'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '@Override'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public int hashCode(){
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: public int hashCode(){
- en: return Objects.hash(age, name);
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: return Objects.hash(age, name);
- en: '}'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Override'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public String toString() {
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: public String toString() {
- en: return "Person{age=" + age + ", name=" + name + "}";
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: return "Person{age=" + age + ", name=" + name + "}";
- en: '}'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: We used the class `Objects` in the methods `equals()` and `hashCode()` previously.
    Everything worked fine. But, notice how we check the parameter `name` in the preceding
    constructor. If the parameter is `null`, we assign to the field `name` an empty `String` value.
    We did it to avoid `NullPointerException` in line 25\. Another way to do it is
    to use the class `ObjectUtils` from the Apache Commons library. We will demonstrate
    it in the next section. Methods of the class `ObjectUtils` handle `null` values
    and make the conversion of a `null` parameter to an empty `String` unnecessary.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在以前的`equals()`和`hashCode()`方法中使用了`Objects`类。一切都运行正常。但是，请注意我们如何检查前面构造函数中的参数`name`。如果参数是`null`，我们将为字段`name`分配一个空的`String`值。我们这样做是为了避免第25行的`NullPointerException`。另一种方法是使用Apache
    Commons库中的`ObjectUtils`类。我们将在下一节中进行演示。`ObjectUtils`类的方法处理`null`值，并且使将`null`参数转换为空`String`变得不必要。
- en: But first, let's review the methods of the class `Objects`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们回顾一下`Objects`类的方法。
- en: equals() and deepEquals()
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: equals() and deepEquals()
- en: We talked about the `equals()` method implementation extensively, but always
    assumed that it was invoked on a non-`null` object, `obj`, so the call `obj.equals(anotherObject)` could
    not generate `NullPointerException`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经广泛讨论了`equals()`方法的实现，但始终假设它是在非`null`对象`obj`上调用的，因此调用`obj.equals(anotherObject)`不会生成`NullPointerException`。
- en: 'Yet, sometimes we need to compare two objects, `a` and `b`, when one or both
    of them can be `null`. Here is typical code for such a case:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时我们需要比较两个对象`a`和`b`，当它们中的一个或两个都可以是`null`时。以下是这种情况的典型代码：
- en: '```java'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: boolean equals(Object a, Object b) {
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: boolean equals(Object a, Object b) {
- en: return (a == b) || (a != null && a.equals(b));
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: return (a == b) || (a != null && a.equals(b));
- en: '}'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This is the actual source code of the `boolean Objects.equals(Object a, Object
    b)` method. It allows comparing two objects using the method `equals(Object)` and
    handles cases where one or both of them are `null`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: This is the actual source code of the `boolean Objects.equals(Object a, Object
    b)` method. It allows comparing two objects using the method `equals(Object)` and
    handles cases where one or both of them are `null`.
- en: 'Another related method of the class `Objects` is `boolean deepEquals(Object a, Object
    b)`. Here is its source code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 'Another related method of the class `Objects` is `boolean deepEquals(Object a, Object
    b)`. Here is its source code:'
- en: '```java'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: boolean deepEquals(Object a, Object b) {
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: boolean deepEquals(Object a, Object b) {
- en: if (a == b)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: if (a == b)
- en: return true;
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: else if (a == null || b == null)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: else if (a == null || b == null)
- en: return false;
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: return false;
- en: else
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: return Arrays.deepEquals0(a, b);
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: return Arrays.deepEquals0(a, b);
- en: '}'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As you can see, it is based on `Arrays.deepEquals()`, which we discussed in
    the previous section. The demonstration code for these methods helps to understand
    the difference:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'As you can see, it is based on `Arrays.deepEquals()`, which we discussed in
    the previous section. The demonstration code for these methods helps to understand
    the difference:'
- en: '```java'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Integer[] as1 = {1,2,3};
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Integer[] as1 = {1,2,3};
- en: Integer[] as2 = {1,2,3};
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Integer[] as2 = {1,2,3};
- en: 'System.out.println(Arrays.equals(as1, as2));        //prints: true'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Arrays.equals(as1, as2));        //prints: true'
- en: 'System.out.println(Arrays.deepEquals(as1, as2));    //prints: true'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Arrays.deepEquals(as1, as2));    //prints: true'
- en: 'System.out.println(Objects.equals(as1, as2));        //prints: false'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.equals(as1, as2));        //prints: false'
- en: 'System.out.println(Objects.deepEquals(as1, as2));    //prints: true'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.deepEquals(as1, as2));    //prints: true'
- en: Integer[][] aas1 = {{1,2,3},{1,2,3}};
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Integer[][] aas1 = {{1,2,3},{1,2,3}};
- en: Integer[][] aas2 = {{1,2,3},{1,2,3}};
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Integer[][] aas2 = {{1,2,3},{1,2,3}};
- en: 'System.out.println(Arrays.equals(aas1, aas2));       //prints: false'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Arrays.equals(aas1, aas2));       //prints: false'
- en: 'System.out.println(Arrays.deepEquals(aas1, aas2));   //prints: true'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Arrays.deepEquals(aas1, aas2));   //prints: true'
- en: 'System.out.println(Objects.equals(aas1, aas2));       //prints: false'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.equals(aas1, aas2));       //prints: false'
- en: 'System.out.println(Objects.deepEquals(aas1, aas2));   //prints: true'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.deepEquals(aas1, aas2));   //prints: true'
- en: '```'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the preceding code, `Objects.equals(as1, as2)` and `Objects.equals(aas1,
    aas2)` return `false` because arrays cannot override the method `equals()` of
    the class `Object` and are compared by references, not by value.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: In the preceding code, `Objects.equals(as1, as2)` and `Objects.equals(aas1,
    aas2)` return `false` because arrays cannot override the method `equals()` of
    the class `Object` and are compared by references, not by value.
- en: 'The method `Arrays.equals(aas1, aas2)` returns `false` for the same reason:
    because the elements of the nested array are arrays and are compared by references.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'The method `Arrays.equals(aas1, aas2)` returns `false` for the same reason:
    because the elements of the nested array are arrays and are compared by references.'
- en: 'To summarize, if you would like to compare two objects, `a` and `b`, by the
    values of their fields, then:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'To summarize, if you would like to compare two objects, `a` and `b`, by the
    values of their fields, then:'
- en: If they are not arrays and `a` is not `null`, use `a.equals(b)`
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: If they are not arrays and `a` is not `null`, use `a.equals(b)`
- en: If they are not arrays and both objects can be `null`, use `Objects.equals(a,
    b)`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: If they are not arrays and both objects can be `null`, use `Objects.equals(a,
    b)`
- en: If both can be arrays and both can be `null`, use `Objects.deepEquals(a, b)`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: If both can be arrays and both can be `null`, use `Objects.deepEquals(a, b)`
- en: That said, we can see that the method `Objects.deepEquals()` is the safest one,
    but it does not mean you must always use it. Most of the time, you will know whether
    the compared objects can be `null` or can be arrays, so you can safely use other `equals()` methods
    too.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: That said, we can see that the method `Objects.deepEquals()` is the safest one,
    but it does not mean you must always use it. Most of the time, you will know whether
    the compared objects can be `null` or can be arrays, so you can safely use other `equals()` methods
    too.
- en: hash() and hashCode()
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hash() and hashCode()
- en: 'The hash values returned by the methods `hash()` or `hashCode()` are typically
    used as a key for storing the object in a hash-using collection, such as `HashSet()`.
    The default implementation in the  `Object` superclass is based on the object
    reference in memory.  It returns different hash values for two objects of the
    same class with the same values of the instance fields. That is why, if you need
    two class instances to have the same hash value for the same state, it is important
    to override the default `hashCode()` implementation using one of these methods:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'The hash values returned by the methods `hash()` or `hashCode()` are typically
    used as a key for storing the object in a hash-using collection, such as `HashSet()`.
    The default implementation in the  `Object` superclass is based on the object
    reference in memory.  It returns different hash values for two objects of the
    same class with the same values of the instance fields. That is why, if you need
    two class instances to have the same hash value for the same state, it is important
    to override the default `hashCode()` implementation using one of these methods:'
- en: '`int hashCode(Object value)`: calculates a hash value for a single object'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int hashCode(Object value)`: calculates a hash value for a single object'
- en: '`int hash(Object... values)`: calculates a hash value for an array of objects
    (see how we used it in the class `Person` in our previous example)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int hash(Object... values)`: calculates a hash value for an array of objects
    (see how we used it in the class `Person` in our previous example)'
- en: 'Please notice that these two methods return different hash values for the same
    object when it is used as a single-element input array of the method `Objects.hash()`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'Please notice that these two methods return different hash values for the same
    object when it is used as a single-element input array of the method `Objects.hash()`:'
- en: '```java'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(Objects.hash("s1"));           //prints: 3645'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.hash("s1"));           //prints: 3645'
- en: 'System.out.println(Objects.hashCode("s1"));       //prints: 3614'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.hashCode("s1"));       //prints: 3614'
- en: '```'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The only value that yields the same hash from both methods is `null`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'The only value that yields the same hash from both methods is `null`:'
- en: '```java'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(Objects.hash(null));      //prints: 0'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.hash(null));      //prints: 0'
- en: 'System.out.println(Objects.hashCode(null));  //prints: 0'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(Objects.hashCode(null));  //prints: 0'
- en: '```'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: When used as a single not-null parameter, the same value has different hash
    values returned from the methods `Objects.hashCode(Object value)` and `Objects.hash(Object...
    values)`. The value `null` yields the same hash value, `0`, returned from each
    of these methods.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: When used as a single not-null parameter, the same value has different hash
    values returned from the methods `Objects.hashCode(Object value)` and `Objects.hash(Object...
    values)`. The value `null` yields the same hash value, `0`, returned from each
    of these methods.
- en: Another advantage of using the class `Objects` for hash value calculation is
    that it tolerates `null` values, while the attempt to call the instance method `hashCode()` on
    the `null` reference generates `NullPointerException`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类`Objects`进行哈希值计算的另一个优点是它容忍`null`值，而在`null`引用上调用实例方法`hashCode()`会生成`NullPointerException`。
- en: isNull() and nonNull()
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: isNull()和nonNull()
- en: 'These two methods are just thin wrappers around Boolean expressions, `obj == null` and  `obj
    != null`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法只是对布尔表达式`obj == null`和`obj != null`的薄包装：
- en: '`boolean isNull(Object obj)`: returns the same value as `obj == null`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNull(Object obj)`: 返回与`obj == null`相同的值'
- en: '`boolean nonNull(Object obj)`: returns the same value as `obj != null`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean nonNull(Object obj)`: 返回与`obj != null`相同的值'
- en: 'And here is the demo code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是演示代码：
- en: '```java'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String object = null;
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: String object = null;
- en: 'System.out.println(object == null);           //prints: true'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(object == null);           //打印：true
- en: 'System.out.println(Objects.isNull(object));   //prints: true'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Objects.isNull(object));   //打印：true
- en: 'System.out.println(object != null);           //prints: false'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(object != null);           //打印：false
- en: 'System.out.println(Objects.nonNull(object));  //prints: false'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Objects.nonNull(object));  //打印：false
- en: '```'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: requireNonNull()
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: requireNonNull()
- en: 'The following methods of the class `Objects` check the value of the first parameter
    and, if the value is `null`, either throw `NullPointerException` or return the
    provided default value:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Objects`的以下方法检查第一个参数的值，如果值为`null`，则抛出`NullPointerException`或返回提供的默认值：
- en: '`T requireNonNull(T obj)`: Throws `NullPointerException` without a message
    if the parameter is `null`:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNull(T obj)`: 如果参数为`null`，则抛出没有消息的`NullPointerException`：'
- en: '```java'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String object = null;
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: String object = null;
- en: try {
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: Objects.requireNonNull(object);
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.requireNonNull(object);
- en: '} catch (NullPointerException ex){'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: 'System.out.println(ex.getMessage());  //prints: null'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());  //打印：null
- en: '}'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`T requireNonNull(T obj, String message)`: Throws `NullPointerException` with
    the message provided if the first parameter is `null`:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNull(T obj, String message)`: 如果第一个参数为`null`，则抛出带有提供的消息的`NullPointerException`：'
- en: '```java'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String object = null;
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: String object = null;
- en: try {
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: Objects.requireNonNull(object, "Parameter 'object' is null");
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.requireNonNull(object, "参数'object'为空");
- en: '} catch (NullPointerException ex){'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: System.out.println(ex.getMessage());
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());
- en: //Parameter 'object' is null
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: //参数'object'为空
- en: '}'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`T requireNonNull(T obj, Supplier<String> messageSupplier)`: returns the message
    generated by the provided function if the first parameter is `null` or, if the
    generated message or the function itself is `null`, throws `NullPointerException`:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNull(T obj, Supplier<String> messageSupplier)`: 如果第一个参数为`null`，则返回由提供的函数生成的消息，如果生成的消息或函数本身为`null`，则抛出`NullPointerException`：'
- en: '```java'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String object = null;
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: String object = null;
- en: Supplier<String> msg1 = () -> {
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Supplier<String> msg1 = () -> {
- en: String msg = "Msg from db";
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: String msg = "来自数据库的消息";
- en: //get the corresponding message from database
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: //从数据库获取相应的消息
- en: return msg;
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 返回消息;
- en: '};'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: try {
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: Objects.requireNonNull(object, msg1);
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.requireNonNull(object, msg1);
- en: '} catch (NullPointerException ex){'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: 'System.out.println(ex.getMessage());  //prints: Msg from db'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());  //打印：来自数据库的消息
- en: '}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Supplier<String> msg2 = () -> null;
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Supplier<String> msg2 = () -> null;
- en: try {
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: Objects.requireNonNull(object, msg2);
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.requireNonNull(object, msg2);
- en: '} catch (NullPointerException ex){'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: 'System.out.println(ex.getMessage());  //prints: null'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());  //打印：null
- en: '}'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Supplier<String> msg3 = null;
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Supplier<String> msg3 = null;
- en: try {
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: Objects.requireNonNull(object, msg3);
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.requireNonNull(object, msg3);
- en: '} catch (NullPointerException ex){'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: 'System.out.println(ex.getMessage());  //prints: null'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());  //打印：null
- en: '}'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`T requireNonNullElse(T obj, T defaultObj)`: returns the first parameter value
    if it is non-null, or the second parameter value if it is non-null, or throws `NullPointerException` with
    the message `defaultObj`:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNullElse(T obj, T defaultObj)`: 如果第一个参数非空，则返回第一个参数值，如果第二个参数非空，则返回第二个参数值，否则抛出带有消息`defaultObj`的`NullPointerException`：'
- en: '```java'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String object = null;
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: String object = null;
- en: System.out.println(Objects.requireNonNullElse(object,
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Objects.requireNonNullElse(object,
- en: '"Default value"));'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '"默认值"));'
- en: '//prints: Default value'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: //打印：默认值
- en: try {
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: Objects.requireNonNullElse(object, null);
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.requireNonNullElse(object, null);
- en: '} catch (NullPointerException ex){'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: 'System.out.println(ex.getMessage());     //prints: defaultObj'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());     //打印：defaultObj
- en: '}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`T requireNonNullElseGet(T obj, Supplier<? extends T> supplier)`: returns the
    first parameter value if it is non-null, or the object produced by the provided
    function if it is non-null, or throws `NullPointerException` with the message
    `defaultObj`:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNullElseGet(T obj, Supplier<? extends T> supplier)`: 如果第一个参数非空，则返回第一个参数值，如果第一个参数非空，则返回由提供的函数生成的对象，否则抛出带有消息`defaultObj`的`NullPointerException`：'
- en: '```java'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String object = null;
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: String object = null;
- en: Supplier<String> msg1 = () -> {
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Supplier<String> msg1 = () -> {
- en: String msg = "Msg from db";
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: String msg = "来自数据库的消息";
- en: //get the corresponding message from database
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: //从数据库获取相应的消息
- en: return msg;
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 返回消息;
- en: '};'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: String s = Objects.requireNonNullElseGet(object, msg1);
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: String s = Objects.requireNonNullElseGet(object, msg1);
- en: 'System.out.println(s);                //prints: Msg from db'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);                //打印：来自数据库的消息
- en: Supplier<String> msg2 = () -> null;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Supplier<String> msg2 = () -> null;
- en: try {
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: System.out.println(Objects.requireNonNullElseGet(object, msg2));
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Objects.requireNonNullElseGet(object, msg2));
- en: '} catch (NullPointerException ex){'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: 'System.out.println(ex.getMessage()); //prints: supplier.get()'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage()); //打印：supplier.get()
- en: '}'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: try {
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: System.out.println(Objects.requireNonNullElseGet(object, null));
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Objects.requireNonNullElseGet(object, null));
- en: '} catch (NullPointerException ex){'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '} 捕获 (NullPointerException ex){'
- en: 'System.out.println(ex.getMessage()); //prints: supplier'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage()); //打印：供应商
- en: '}'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: checkIndex()
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: checkIndex()
- en: 'The following group of methods checks whether the index and the length of a
    collection or an array are compatible:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一组方法检查集合或数组的索引和长度是否兼容：
- en: '`int checkIndex(int index, int length)`: throws `IndexOutOfBoundsException` if
    the provided `index` is bigger than `length - 1`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int checkIndex(int index, int length)`: throws `IndexOutOfBoundsException` if
    the provided `index` is bigger than `length - 1`'
- en: '`int checkFromIndexSize(int fromIndex, int size, int length)`: throws `IndexOutOfBoundsException` if
    the provided `index + size` is bigger than `length - 1`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int checkFromIndexSize(int fromIndex, int size, int length)`: throws `IndexOutOfBoundsException` if
    the provided `index + size` is bigger than `length - 1`'
- en: '`int checkFromToIndex(int fromIndex, int toIndex, int length)`: throws `IndexOutOfBoundsException` if
    the provided `fromIndex` is bigger than `toIndex`, or `toIndex` is bigger than `length
    - 1`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int checkFromToIndex(int fromIndex, int toIndex, int length)`: throws `IndexOutOfBoundsException` if
    the provided `fromIndex` is bigger than `toIndex`, or `toIndex` is bigger than `length
    - 1`'
- en: 'Here is the demo code:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 'Here is the demo code:'
- en: '```java'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: List<String> list = List.of("s0", "s1");
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: List<String> list = List.of("s0", "s1");
- en: try {
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: try {
- en: Objects.checkIndex(3, list.size());
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.checkIndex(3, list.size());
- en: '} catch (IndexOutOfBoundsException ex){'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch (IndexOutOfBoundsException ex){'
- en: System.out.println(ex.getMessage());
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());
- en: '//prints: Index 3 out-of-bounds for length 2'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '//prints: Index 3 out-of-bounds for length 2'
- en: '}'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: try {
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: try {
- en: Objects.checkFromIndexSize(1, 3, list.size());
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.checkFromIndexSize(1, 3, list.size());
- en: '} catch (IndexOutOfBoundsException ex){'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch (IndexOutOfBoundsException ex){'
- en: System.out.println(ex.getMessage());
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());
- en: '//prints: Range [1, 1 + 3) out-of-bounds for length 2'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '//prints: Range [1, 1 + 3) out-of-bounds for length 2'
- en: '}'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: try {
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: try {
- en: Objects.checkFromToIndex(1, 3, list.size());
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Objects.checkFromToIndex(1, 3, list.size());
- en: '} catch (IndexOutOfBoundsException ex){'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch (IndexOutOfBoundsException ex){'
- en: System.out.println(ex.getMessage());
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(ex.getMessage());
- en: '//prints: Range [1, 3) out-of-bounds for length 2'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '//prints: Range [1, 3) out-of-bounds for length 2'
- en: '}'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: compare()
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: compare()
- en: 'The method `int compare(T a, T b, Comparator<T> c)` of the class `Objects` uses
    the provided comparator''s method `compare(T o1, T o2)` for comparing the two
    objects. We have described already the behavior of the `compare(T o1, T o2)` method while
    talking about sorting collections, so the following results should be expected:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 'The method `int compare(T a, T b, Comparator<T> c)` of the class `Objects` uses
    the provided comparator''s method `compare(T o1, T o2)` for comparing the two
    objects. We have described already the behavior of the `compare(T o1, T o2)` method while
    talking about sorting collections, so the following results should be expected:'
- en: '```java'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: int diff = Objects.compare("a", "c", Comparator.naturalOrder());
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: int diff = Objects.compare("a", "c", Comparator.naturalOrder());
- en: 'System.out.println(diff);  //prints: -2'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(diff);  //prints: -2'
- en: diff = Objects.compare("a", "c", Comparator.reverseOrder());
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: diff = Objects.compare("a", "c", Comparator.reverseOrder());
- en: 'System.out.println(diff);  //prints: 2'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(diff);  //prints: 2'
- en: diff = Objects.compare(3, 5, Comparator.naturalOrder());
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: diff = Objects.compare(3, 5, Comparator.naturalOrder());
- en: 'System.out.println(diff);  //prints: -1'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(diff);  //prints: -1'
- en: diff = Objects.compare(3, 5, Comparator.reverseOrder());
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: diff = Objects.compare(3, 5, Comparator.reverseOrder());
- en: 'System.out.println(diff);  //prints: 1'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(diff);  //prints: 1'
- en: '```'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: As we have mentioned already, the method `compare(T o1, T o2)` returns the difference
    of positions of objects `o1` and `o2` in a sorted list for `String` objects and
    just `-1`, `0`, or `1` for `Integer` objects. The API describes it as returning
    `0` when objects are equal and a negative number when the first object is smaller
    than the second; otherwise, it returns a positive number.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: As we have mentioned already, the method `compare(T o1, T o2)` returns the difference
    of positions of objects `o1` and `o2` in a sorted list for `String` objects and
    just `-1`, `0`, or `1` for `Integer` objects. The API describes it as returning
    `0` when objects are equal and a negative number when the first object is smaller
    than the second; otherwise, it returns a positive number.
- en: 'To demonstrate how the method `compare(T a, T b, Comparator<T> c)` works, let''s
    assume that we want to sort objects of the class `Person` so that the name and
    age are arranged in a natural order of `String` and `Integer` classes, respectively:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 'To demonstrate how the method `compare(T a, T b, Comparator<T> c)` works, let''s
    assume that we want to sort objects of the class `Person` so that the name and
    age are arranged in a natural order of `String` and `Integer` classes, respectively:'
- en: '```java'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: '@Override'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public int compareTo(Person p){
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: public int compareTo(Person p){
- en: int result = Objects.compare(this.name, p.getName(),
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: int result = Objects.compare(this.name, p.getName(),
- en: Comparator.naturalOrder());
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Comparator.naturalOrder());
- en: if (result != 0) {
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: if (result != 0) {
- en: return result;
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: return result;
- en: '}'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return Objects.compare(this.age, p.getAge(),
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: return Objects.compare(this.age, p.getAge(),
- en: Comparator.naturalOrder());
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: Comparator.naturalOrder());
- en: '}'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'And here is the result of this new implementation of the `compareTo(Object)` method
    of the class `Person`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 'And here is the result of this new implementation of the `compareTo(Object)` method
    of the class `Person`:'
- en: '```java'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Person p1 = new Person(15, "Zoe");
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Person p1 = new Person(15, "Zoe");
- en: Person p2 = new Person(45, "Adam");
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Person p2 = new Person(45, "Adam");
- en: Person p3 = new Person(37, "Bob");
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Person p3 = new Person(37, "Bob");
- en: Person p4 = new Person(30, "Bob");
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Person p4 = new Person(30, "Bob");
- en: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4));
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4));
- en: System.out.println(list);//[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}]
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);//[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}]
- en: Collections.sort(list);
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Collections.sort(list);
- en: System.out.println(list);//[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}]
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);//[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}]
- en: '```'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As you can see, the `Person` objects are ordered by name in their natural order
    first, then by age in their natural order too. If we need to reverse the order
    of names, for example, we change the `compareTo(Object)` method to the following:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'As you can see, the `Person` objects are ordered by name in their natural order
    first, then by age in their natural order too. If we need to reverse the order
    of names, for example, we change the `compareTo(Object)` method to the following:'
- en: '```java'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: '@Override'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public int compareTo(Person p){
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: public int compareTo(Person p){
- en: int result = Objects.compare(this.name, p.getName(),
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: int result = Objects.compare(this.name, p.getName(),
- en: Comparator.reverseOrder());
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Comparator.reverseOrder());
- en: if (result != 0) {
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: if (result != 0) {
- en: return result;
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: return result;
- en: '}'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return Objects.compare(this.age, p.getAge(),
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: return Objects.compare(this.age, p.getAge(),
- en: Comparator.naturalOrder());
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Comparator.naturalOrder());
- en: '}'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The results looks as like we expected:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'The results looks as like we expected:'
- en: '```java'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Person p1 = new Person(15, "Zoe");
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Person p1 = new Person(15, "Zoe");
- en: Person p2 = new Person(45, "Adam");
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: Person p2 = new Person(45, "Adam");
- en: Person p3 = new Person(37, "Bob");
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Person p3 = new Person(37, "Bob");
- en: Person p4 = new Person(30, "Bob");
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Person p4 = new Person(30, "Bob");
- en: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4));
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4));
- en: System.out.println(list);//[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}]
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);//[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}]
- en: Collections.sort(list);
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Collections.sort(list);
- en: System.out.println(list);//[{15, Zoe}, {30, Bob}, {37, Bob}, {45, Adam}]
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);//[{15, Zoe}, {30, Bob}, {37, Bob}, {45, Adam}]
- en: '```'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The weakness of the method `compare(T a, T b, Comparator<T> c)` is that it does
    not handle `null` values. Adding the `new Person(25, null)` object to the list
    triggers `NullPointerException` during sorting. In such cases, it is better to
    use the `org.apache.commons.lang3.ObjectUtils.compare(T o1, T o2)` method, which
    we are going to demonstrate in the next section.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 方法compare(T a, T b, Comparator<T> c)的弱点是它不处理null值。将new Person(25, null)对象添加到列表中会在排序过程中触发NullPointerException。在这种情况下，最好使用org.apache.commons.lang3.ObjectUtils.compare(T
    o1, T o2)方法，我们将在下一节中进行演示。
- en: toString()
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: toString()
- en: 'There are cases when you need to convert an `object` (which is a reference
    to some class type) to its `String` representation. When the reference `obj` is
    assigned a `null` value (the object is not created yet), writing `obj.toString()` 
    generates `NullPointerException`. For such cases, using the following methods
    of the class `Objects` is a better choice:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您需要将对象（它是对某个类类型的引用）转换为其字符串表示形式。当引用obj被赋予null值（对象尚未创建）时，编写obj.toString()会生成NullPointerException。对于这种情况，使用Objects类的以下方法是更好的选择：
- en: '`String toString(Object o)`: returns the result of calling `toString()` on
    the first parameter when it is not `null` and `null` when the first parameter
    value is `null`'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toString(Object o)`: 当第一个参数不为null时，返回调用toString()的结果；当第一个参数值为null时，返回null'
- en: '`String toString(Object o, String nullDefault)`: returns the result of calling `toString()` on
    the first parameter when it is not `null` and the second parameter value `nullDefault` when
    the first parameter value is `null`'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toString(Object o, String nullDefault)`: 当第一个参数不为null时，返回调用toString()的结果；当第一个参数值为null时，返回第二个参数值nullDefault'
- en: 'Here is the code that demonstrates how to use these methods:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是演示如何使用这些方法的代码：
- en: '```java'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: List<String> list = new ArrayList<>(List.of("s0 "));
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: List<String> list = new ArrayList<>(List.of("s0 "));
- en: list.add(null);
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: list.add(null);
- en: 'for(String e: list){'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列表中的每个元素e：
- en: 'System.out.print(e);                   //prints: s0 null'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.print(e);                   //prints: s0 null'
- en: '}'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: System.out.println();
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println();
- en: 'for(String e: list){'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列表中的每个元素e：
- en: 'System.out.print(Objects.toString(e)); //prints: s0 null'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.print(Objects.toString(e)); //prints: s0 null'
- en: '}'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: System.out.println();
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println();
- en: 'for(String e: list){'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列表中的每个元素e：
- en: System.out.print(Objects.toString(e, "element was null"));
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print(Objects.toString(e, "element was null"));
- en: '//prints: s0 element was null'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '//prints: s0 element was null'
- en: '}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: By the way, unrelated to the current discussion, please notice how we used the
    method `print()` instead of `println()` to show all the results in one line, because
    the method `print()` does not add an end-of-line symbol.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，与当前讨论无关，请注意我们如何使用print()方法而不是println()方法来在一行中显示所有结果，因为print()方法不会添加换行符号。
- en: Class lang3.ObjectUtils
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Class lang3.ObjectUtils
- en: The class `org.apache.commons.lang3.ObjectUtils` of the Apache Commons library
    complements the methods of the class `java.util.Objects` described previously.
    The scope of this book and the allocated size does not allow for a detailed review
    of all the methods of the class `ObjectUtils`, so we will describe them briefly,
    grouped by related functionality, and will demonstrate only those that are aligned
    with the examples we have provided already.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Commons库的org.apache.commons.lang3.ObjectUtils类补充了先前描述的java.util.Objects类的方法。本书的范围和分配的大小不允许对ObjectUtils类的所有方法进行详细审查，因此我们将简要描述它们，按相关功能进行分组，并仅演示与我们已经提供的示例一致的方法。
- en: 'All the methods of the class `ObjectUtils` can be organized into seven groups:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 类ObjectUtils的所有方法可以分为七组：
- en: 'Object cloning methods:'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象克隆方法：
- en: '`T clone(T obj)`: returns a copy of the provided object if it implements the
    interface `Cloneable`; otherwise, returns `null`.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T clone(T obj)`: 如果实现了Cloneable接口，则返回提供对象的副本；否则返回null。'
- en: '`T cloneIfPossible(T obj)`: returns a copy of the provided object if it implements
    the interface `Cloneable`; otherwise, returns the original provided object.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T cloneIfPossible(T obj)`: 如果实现了Cloneable接口，则返回提供对象的副本；否则返回原始提供的对象。'
- en: 'Methods that support object comparison:'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持对象比较的方法：
- en: '`int compare(T c1, T c2)`: compares newly ordered positions of the two objects
    that implement the interface `Comparable`; allows any or both parameters to be `null`;
    places a `null` value in front of a non-null value.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int compare(T c1, T c2)`: 比较实现Comparable接口的两个对象的新排序位置；允许任何或两个参数为null；将null值放在非null值前面。'
- en: '`int compare(T c1, T c2, boolean nullGreater)`: behaves exactly as the previous
    method if the value of parameter `nullGreater` is `false`; otherwise, places a
    `null` value behind a non-null value. We can demonstrate the last two methods
    by using them in our class `Person`:'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int compare(T c1, T c2, boolean nullGreater)`: 如果参数nullGreater的值为false，则与前一个方法的行为完全相同；否则，将null值放在非null值后面。我们可以通过在我们的Person类中使用它们来演示最后两种方法：'
- en: '```java'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: '@Override'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public int compareTo(Person p){
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: public int compareTo(Person p){
- en: int result = ObjectUtils.compare(this.name, p.getName());
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: int result = ObjectUtils.compare(this.name, p.getName());
- en: if (result != 0) {
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: if (result != 0) {
- en: return result;
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 返回result;
- en: '}'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return ObjectUtils.compare(this.age, p.getAge());
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 返回ObjectUtils.compare(this.age, p.getAge())的值
- en: '}'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The result of this change allows us to use a `null` value for the `name` field:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 这种改变的结果使我们可以对name字段使用null值：
- en: '```java'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Person p1 = new Person(15, "Zoe");
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为p1的人类对象，年龄为15岁，名字为Zoe
- en: Person p2 = new Person(45, "Adam");
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: Person p2 = new Person(45, "Adam");
- en: Person p3 = new Person(37, "Bob");
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: Person p3 = new Person(37, "Bob");
- en: Person p4 = new Person(30, "Bob");
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Person p4 = new Person(30, "Bob");
- en: Person p5 = new Person(25, null);
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: Person p5 = new Person(25, null);
- en: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));
- en: System.out.println(list);  //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25,
    }]
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);  //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25,
    }]
- en: Collections.sort(list);
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Collections.sort(list);
- en: System.out.println(list);  //[{25, }, {45, Adam}, {30, Bob}, {37, Bob}, {15,
    Zoe}]
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);  //[{25, }, {45, Adam}, {30, Bob}, {37, Bob}, {15,
    Zoe}]
- en: '```'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Since we have used the method `Objects.compare(T c1, T c2)`, the `null` value
    was placed in front of non-null values. By the way, have you noticed that we do
    not display `null` anymore? That is because we have changed the method `toString()` of
    the class `Person` as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了`Objects.compare(T c1, T c2)`方法，`null`值被放在了非空值的前面。顺便说一句，您是否注意到我们不再显示`null`了？那是因为我们已经修改了`Person`类的`toString()`方法如下：
- en: '```java'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: '@Override'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public String toString() {
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: public String toString() {
- en: //return "{" + age + ", " + name + "}";
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: //return "{" + age + ", " + name + "}";
- en: return "{" + age + ", " + Objects.toString(name, "") + "}";
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: return "{" + age + ", " + Objects.toString(name, "") + "}";
- en: '}'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Instead of just displaying the value of the field `name`, we used the method `Objects.toString(Object
    o, String nullDefault)`, which substitutes the object with the provided `nullDefault` value
    when the object is `null`. As to whether to use this method, in this case, is
    a matter of style. Many programmers would probably argue that we must display
    the actual value without substituting it for something else. But, we have done
    it just to show how the method `Objects.toString(Object o, String nullDefault)` could
    be used.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 与其仅仅显示字段`name`的值，我们使用了`Objects.toString(Object o, String nullDefault)`方法，当对象为`null`时，它会用提供的`nullDefault`值替换对象。在这种情况下是否使用这种方法，是一个风格问题。许多程序员可能会认为我们必须显示实际值，而不是用其他值替换它。但是，我们这样做只是为了展示方法`Objects.toString(Object
    o, String nullDefault)`的用法。
- en: 'If we now use the second `compare(T c1, T c2, boolean nullGreater)` method,
    the `compareTo()` method of the class `Person` will look as follows:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在使用第二个`compare(T c1, T c2, boolean nullGreater)`方法，`Person`类的`compareTo()`方法将如下所示：
- en: '```java'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: '@Override'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public int compareTo(Person p){
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: public int compareTo(Person p){
- en: int result = ObjectUtils.compare(this.name, p.getName(), true);
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: int result = ObjectUtils.compare(this.name, p.getName(), true);
- en: if (result != 0) {
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: if (result != 0) {
- en: return result;
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: return result;
- en: '}'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return ObjectUtils.compare(this.age, p.getAge());
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: return ObjectUtils.compare(this.age, p.getAge());
- en: '}'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Then, `Person` objects with their `name` set to `null` will be shown at the
    end of the sorted list:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`name`设置为`null`的`Person`对象将显示在排序后的列表末尾：
- en: '```java'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Person p1 = new Person(15, "Zoe");
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: Person p1 = new Person(15, "Zoe");
- en: Person p2 = new Person(45, "Adam");
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: Person p2 = new Person(45, "Adam");
- en: Person p3 = new Person(37, "Bob");
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: Person p3 = new Person(37, "Bob");
- en: Person p4 = new Person(30, "Bob");
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: Person p4 = new Person(30, "Bob");
- en: Person p5 = new Person(25, null);
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: Person p5 = new Person(25, null);
- en: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));
- en: System.out.println(list);
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);
- en: //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25, }]
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25, }]
- en: Collections.sort(list);
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Collections.sort(list);
- en: System.out.println(list);
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);
- en: //[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }]
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: //[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }]
- en: '```'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'And, to complete the discussion of `null` values, the preceding code will break
    with `NullPointerException` when a `null` object is added to the list: `list.add(null)`.
    To avoid the exception, you can use a special `Comparator` object that handles
    the `null` elements of a list:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，为了完成对`null`值的讨论，当将`null`对象添加到列表中时，上述代码将会因为`NullPointerException`而中断：`list.add(null)`。为了避免异常，您可以使用一个特殊的`Comparator`对象来处理列表中的`null`元素：
- en: '```java'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Person p1 = new Person(15, "Zoe");
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: Person p1 = new Person(15, "Zoe");
- en: Person p2 = new Person(45, "Adam");
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: Person p2 = new Person(45, "Adam");
- en: Person p3 = new Person(37, "Bob");
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: Person p3 = new Person(37, "Bob");
- en: Person p4 = new Person(30, "Bob");
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: Person p4 = new Person(30, "Bob");
- en: Person p5 = new Person(25, null);
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: Person p5 = new Person(25, null);
- en: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));
- en: list.add(null);
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: list.add(null);
- en: System.out.println(list);
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);
- en: //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25, }, null]
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25, }, null]
- en: Collections.sort(list,
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: Collections.sort(list,
- en: Comparator.nullsLast(Comparator.naturalOrder()));
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: Comparator.nullsLast(Comparator.naturalOrder()));
- en: System.out.println(list);
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);
- en: //[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }, null]
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: //[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }, null]
- en: '```'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In this code, you can see how we have indicated the desire to see the `null` objects
    at the end of the list. Instead, we could use another `Comparator` that places
    null objects at the beginning of the sorted list:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，您可以看到我们已经表明了希望在列表末尾看到`null`对象。相反，我们可以使用另一个`Comparator`，将`null`对象放在排序后的列表的开头：
- en: '```java'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Collections.sort(list,
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: Collections.sort(list,
- en: Comparator.nullsFirst(Comparator.naturalOrder()));
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: Comparator.nullsFirst(Comparator.naturalOrder()));
- en: System.out.println(list);
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(list);
- en: //[null, {45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }]
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: //[null, {45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }]
- en: '```'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`notEqual`:'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notEqual`:'
- en: '`boolean notEqual(Object object1, Object object2)`: compares two objects for
    inequality, where either one or both objects may be `null`'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean notEqual(Object object1, Object object2)`: compares two objects for
    inequality, where either one or both objects may be `null`'
- en: '`identityToString`:'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identityToString`:'
- en: '`String identityToString(Object object)`: returns the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String identityToString(Object object)`: returns the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
- en: '`void identityToString(StringBuffer buffer, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void identityToString(StringBuffer buffer, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
- en: '`void identityToString(StringBuilder builder, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void identityToString(StringBuilder builder, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
- en: '`void identityToString(Appendable appendable, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void identityToString(Appendable appendable, Object object)`: 将提供的对象的`String`表示附加到`appendable`，就好像是由基类`Object`的默认方法`toString()`生成的一样'
- en: 'The following code demonstrates two of these methods:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了这两种方法：
- en: '```java'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = "s0 " + ObjectUtils.identityToString("s1");
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: String s = "s0 " + ObjectUtils.identityToString("s1");
- en: 'System.out.println(s);  //prints: s0 java.lang.String@5474c6c'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);  //打印：s0 java.lang.String@5474c6c
- en: StringBuffer sb = new StringBuffer();
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: StringBuffer sb = new StringBuffer();
- en: sb.append("s0");
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: sb.append("s0");
- en: ObjectUtils.identityToString(sb, "s1");
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: ObjectUtils.identityToString(sb, "s1");
- en: 'System.out.println(s);  //prints: s0 java.lang.String@5474c6c'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);  //打印：s0 java.lang.String@5474c6c
- en: '```'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`allNotNull` and `anyNotNull`:'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allNotNull` 和 `anyNotNull`:'
- en: '`boolean allNotNull(Object... values)`: returns `true` when all values in the
    provided array are not `null`'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean allNotNull(Object... values)`: 当提供的数组中的所有值都不为`null`时返回`true`'
- en: '`boolean anyNotNull(Object... values)`: returns `true` when at least one value
    in the provided array is not `null`'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean anyNotNull(Object... values)`: 当提供的数组中至少有一个值不为`null`时返回`true`'
- en: '`firstNonNull` and `defaultIfNull`:'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firstNonNull` 和 `defaultIfNull`:'
- en: '`T firstNonNull(T... values)`: returns the first value from the provided array
    that is not `null`'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T firstNonNull(T... values)`: 从提供的数组中返回第一个不为`null`的值'
- en: '`T defaultIfNull(T object, T defaultValue)`: returns the provided default value
    if the first parameter is `null`'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T defaultIfNull(T object, T defaultValue)`: 如果第一个参数为`null`，则返回提供的默认值'
- en: '`max`, `min`, `median`, and `mode`:'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max`, `min`, `median`, 和 `mode`:'
- en: '`T max(T... values)`: returns the last in the ordered list of provided values
    that implement the `Comparable` interface; returns `null` only when all values
    are `null`'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T max(T... values)`: 返回实现`Comparable`接口的提供的值的有序列表中的最后一个值；只有当所有值都为`null`时才返回`null`'
- en: '`T min(T... values)`: returns the first in the ordered list of provided values
    that implement the `Comparable` interface; returns `null` only when all values
    are `null`'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T min(T... values)`: 返回实现`Comparable`接口的提供的值的有序列表中的第一个值；只有当所有值都为`null`时才返回`null`'
- en: '`T median(T... items)`: returns the value that is in the middle of the ordered
    list of provided values that implement the `Comparable` interface; if the count
    of the values is even, returns the smallest of the two in the middle'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T median(T... items)`: 返回实现`Comparable`接口的提供的值的有序列表中间的值；如果值的数量是偶数，则返回中间两个中较小的一个'
- en: '`T median(Comparator<T> comparator, T... items)`: returns the value that is
    in the middle of the list of provided values ordered according to the provided `Comparator` object;
    if the count of the values is even, returns the smallest of the two in the middle'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T median(Comparator<T> comparator, T... items)`: 返回根据提供的`Comparator`对象排序的提供的值列表中间的值；如果值的数量是偶数，则返回中间两个中较小的一个'
- en: '`T mode(T... items)`: returns the most frequently occurring item from the items provided;
    returns `null` when such an item occurs most often or when there is no one item
    that occurs most often; here is the code that demonstrates this last method:'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T mode(T... items)`: 从提供的项目中返回出现频率最高的项目；当最常出现此类项目或没有一个项目最常出现时，返回`null`；以下是演示此最后一个方法的代码：'
- en: '```java'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = ObjectUtils.mode("s0", "s1", "s1");
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: String s = ObjectUtils.mode("s0", "s1", "s1");
- en: 'System.out.println(s);     //prints: s1'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);     //打印：s1
- en: s = ObjectUtils.mode("s0", "s1", "s2");
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: s = ObjectUtils.mode("s0", "s1", "s2");
- en: 'System.out.println(s);     //prints: null'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);     //打印：null
- en: s = ObjectUtils.mode("s0", "s1", "s2", "s1", "s2");
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: s = ObjectUtils.mode("s0", "s1", "s2", "s1", "s2");
- en: 'System.out.println(s);     //prints: null'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);     //打印：null
- en: s = ObjectUtils.mode(null);
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: s = ObjectUtils.mode(null);
- en: 'System.out.println(s);     //prints: null'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);     //打印：null
- en: s = ObjectUtils.mode("s0", null, null);
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: s = ObjectUtils.mode("s0", null, null);
- en: 'System.out.println(s);     //prints: null'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);     //打印：null
- en: '```'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Managing strings
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理字符串
- en: The class `String` is used a lot. So, you have to have a good handle on its
    functionality. We talked already talked about `String` value immutability in [Chapter
    5](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml), *Java Language Elements and Types*.
    We have shown that every time a `String` value is "modified", a new copy of the
    value is created, which means that in the case of multiple "modifications", many `String` objects
    are created, consuming memory and putting a burden on the JVM.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 类`String`被广泛使用。因此，您必须熟悉其功能。我们已经在[第5章](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml)中讨论了`String`值的不可变性，*Java语言元素和类型*。我们已经表明，每次“修改”`String`值时，都会创建该值的新副本，这意味着在多次“修改”的情况下，会创建许多`String`对象，消耗内存并给JVM带来负担。
- en: In such cases, it is advisable to use the class `java.lang.StringBuilder` or `java.lang.StringBuffer` because
    they are modifiable objects and do not have an overhead of creating `String` value
    copies. We will show how to use them and explain the difference between these
    two classes in the first part of this section.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，建议使用类`java.lang.StringBuilder`或`java.lang.StringBuffer`，因为它们是可修改的对象，不需要创建`String`值副本。我们将展示如何使用它们，并在本节的第一部分解释这两个类之间的区别。
- en: After that, we will review the methods of the class `String` and then provide
    an overview of the class `org.apache.commons.lang3.StringUtils`, which complements
    the class `String` functionality.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将回顾类`String`的方法，然后概述类`org.apache.commons.lang3.StringUtils`，它补充了类`String`的功能。
- en: StringBuilder and StringBuffer
  id: totrans-455
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StringBuilder 和 StringBuffer
- en: The classes `StringBuilder` and `StringBuffer` have exactly the same list of
    methods. The difference is that the methods of the class `StringBuilder` perform
    faster than the same methods of the class `StringBuffer`. That is because the
    class `StringBuffer` has an overhead of not allowing concurrent access to its
    values from different application threads. So, if you are not coding for multithreaded
    processing, use `StringBuilder`.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringBuilder`和`StringBuffer`类具有完全相同的方法列表。不同之处在于`StringBuilder`类的方法执行速度比`StringBuffer`类的相同方法更快。这是因为`StringBuffer`类在不允许从不同的应用程序线程并发访问其值时有开销。因此，如果您不是为多线程处理编码，请使用`StringBuilder`。'
- en: There are many methods in the classes `StringBuilder` and `StringBuffer`.  But,
    we are going to show how to use only the method `append()`, which is by far the
    most popular, used for cases when multiple `String` value modifications are required.
    Its main function is to append a value to the end of the value already stored
    inside the `StringBuilder` (or `StringBuffer`) object.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringBuilder`和`StringBuffer`类中有许多方法。但是，我们将展示如何仅使用`append()`方法，这是目前最受欢迎的方法，用于需要多个`String`值修改的情况。它的主要功能是将一个值附加到已存储在`StringBuilder`（或`StringBuffer`）对象中的值的末尾。'
- en: 'The method `append()` is overloaded for all primitive types and for the classes `String`, `Object`, `CharSequence`,
    and `StringBuffer`, which means that a `String` representation of the passed-in
    object of any of these classes can be appended to the existing value. For our
    demonstration, we are going use only the `append(String s)` version because that
    is what you are probably going to use most of the time. Here is an example:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`append()`方法对所有原始类型和`String`、`Object`、`CharSequence`和`StringBuffer`类进行了重载，这意味着传入任何这些类的对象的`String`表示都可以附加到现有值上。对于我们的演示，我们将只使用`append(String
    s)`版本，因为这是您可能大部分时间要使用的。这是一个例子：'
- en: '```java'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: List<String> list =
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: List<String> list =
- en: List.of("That", "is", "the", "way", "to", "build", "a", "sentence");
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: List.of("That", "is", "the", "way", "to", "build", "a", "sentence");
- en: StringBuilder sb = new StringBuilder();
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: StringBuilder sb = new StringBuilder();
- en: 'for(String s: list){'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 'for(String s: list){'
- en: sb.append(s).append(" ");
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: sb.append(s).append(" ");
- en: '}'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: String s = sb.toString();
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: String s = sb.toString();
- en: 'System.out.println(s);  //prints: That is the way to build a sentence'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s);  //prints: That is the way to build a sentence'
- en: '```'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are also methods `replace()`, `substring()`, and `insert()` in the class `StringBuilder` (and `StringBuffer`)
    that allow modifying the value further. They are used much less often than the
    method `append()` though, and we are not going to discuss them as they are outside
    the scope of this book.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringBuilder`（和`StringBuffer`）类中还有`replace()`、`substring()`和`insert()`方法，允许进一步修改值。但是，它们的使用频率远低于`append()`方法，我们不会讨论它们，因为它们超出了本书的范围。'
- en: Class java.lang.String
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Class java.lang.String
- en: The class `String` has 15 constructors and almost 80 methods. To talk details
    and demonstrate each of them is just too much for this book, so we will comment
    only on the most popular methods and just mention the rest. After you master the
    basics, you can read the online documentation and see what else you can do with
    other methods of the class `String`.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`类有15个构造函数和近80个方法。详细讨论并演示每一个对于本书来说太多了，因此我们只会评论最受欢迎的方法，并提及其余部分。掌握基础知识后，您可以阅读在线文档，了解`String`类的其他方法可以做什么。'
- en: Constructors
  id: totrans-472
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构造函数
- en: The constructors of the class `String` are useful if you are concerned that
    the strings your application creates consume too much memory. The problem is that `String` literals
    (`abc`, for example) are stored in a special area of the memory called the "string
    constant pool" and never garbage collected. The idea behind such a design is that `String` literals
    consume substantially more memory than numbers. Also, the handling of such large
    entities has an overhead that may tax the JVM. That is why the designers figured
    it is cheaper to store them and share them between all application threads than
    allocate new memory and then clean it up several times for the same value.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您担心应用程序创建的字符串占用太多内存，则`String`类的构造函数很有用。问题在于，`String`文字（例如`abc`）存储在内存的特殊区域中，称为“字符串常量池”，并且永远不会被垃圾回收。这样设计的理念是，`String`文字占用的内存比数字多得多。此外，处理这样大的实体会产生开销，可能会对JVM产生负担。这就是为什么设计者认为将它们存储并在所有应用程序线程之间共享比分配新内存然后多次清理相同值更便宜。
- en: 'But if the rate of reuse of the `String` values is low, while the stored `String` values
    consume too much memory, creating a `String` object with a constructor may be
    the solution to the problem. Here is an example:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果`String`值的重用率很低，而存储的`String`值占用的内存太多，使用构造函数创建`String`对象可能是解决问题的方法。这是一个例子：
- en: '```java'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String veryLongText = new String("asdakjfakjn akdb aakjn... akdjcnak");
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: String veryLongText = new String("asdakjfakjn akdb aakjn... akdjcnak");
- en: '```'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: A `String` object created this way resides in the heap area (where all objects
    are stored) and is garbage collected when not used anymore. That is when the `String` constructor
    shines.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式创建的`String`对象驻留在堆区域（存储所有对象的地方），并且在不再使用时进行垃圾回收。这就是`String`构造函数的用武之地。
- en: If necessary, you can use the method `intern()` of the class `String` to create
    a copy of the heap `String` object in the string constant pool. It allows us not
    only to share the value with other application threads (in multithreaded processing),
    but also to compare it with another literal value by reference (using the operator
    `==`). If the references are equal, it means they point to the same `String` value
    in the pool.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用`String`类的`intern()`方法在字符串常量池中创建堆`String`对象的副本。它不仅允许我们与其他应用程序线程共享值（在多线程处理中），还允许我们通过引用（使用运算符`==`）将其与另一个文字值进行比较。如果引用相等，则表示它们指向池中相同的`String`值。
- en: But, mainstream programmers rarely manage the memory this way, so we will not
    discuss this topic further.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，主流程序员很少以这种方式管理内存，因此我们不会进一步讨论这个话题。
- en: format()
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: format()
- en: 'The method `String format(String format, Object... args)` allows insertion
    of the provided objects into specified locations of a string and formatting them
    as needed. There are many format specifiers in the class `java.util.Formatter`.
    We will demonstrate here only `%s`, which converts the passed-in object to its `String` representation
    by invoking it on the object method `toString()`:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`String format(String format, Object... args)`方法允许将提供的对象插入到字符串的指定位置并根据需要进行格式化。在`java.util.Formatter`类中有许多格式说明符。我们这里只演示`%s`，它通过调用对象的`toString()`方法将传入的对象转换为其`String`表示形式： '
- en: '```java'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String format = "There is a %s in the %s";
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: String format = "There is a %s in the %s";
- en: String s = String.format(format, "bear", "woods");
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: String s = String.format(format, "bear", "woods");
- en: 'System.out.println(s); //prints: There is a bear in the woods'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s); //prints: There is a bear in the woods'
- en: format = "Class %s is very useful";
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: format = "Class %s is very useful";
- en: s = String.format(format, new A());
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: s = String.format(format, new A());
- en: 'System.out.println(s);  //prints: Class A is very useful'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s);  //prints: Class A is very useful'
- en: '```'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: replace()
  id: totrans-491
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: replace()
- en: 'The method `String replace(CharSequence target, CharSequence replacement)` in
    the `String` value replaces the value of the first parameter with the value of
    the second one:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`String replace(CharSequence target, CharSequence replacement)`方法在`String`值中用第一个参数的值替换第二个参数的值：'
- en: '```java'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s1 = "There is a bear in the woods";
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: String s1 = "There is a bear in the woods";
- en: String s2 = s1.replace("bear", "horse").replace("woods", "field");
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: String s2 = s1.replace("bear", "horse").replace("woods", "field");
- en: 'System.out.println(s2);     //prints: There is a horse in the field'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s2);     //prints: There is a horse in the field'
- en: '```'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are also the methods `String replaceAll(String regex, String replacement)` and `String
    replaceFirst(String regex, String replacement)`, which have similar capabilities.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`String replaceAll(String regex, String replacement)`和`String replaceFirst(String
    regex, String replacement)`方法，具有类似的功能。
- en: compareTo()
  id: totrans-499
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: compareTo()
- en: We have already used the `int compareTo(String anotherString)` method in our
    examples. It returns the difference between the positions of this `String` value
    and the value of `anotherString` in an ordered list. It is used for the natural
    ordering of strings since it is an implementation of the `Comparable` interface.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在示例中使用了`int compareTo(String anotherString)`方法。它返回此`String`值的位置和有序列表中`anotherString`值的位置之间的差异。它用于字符串的自然排序，因为它是`Comparable`接口的实现。
- en: The method `int compareToIgnoreCase(String str)` performs the same function
    but ignores the case of the compared strings and is not used for natural ordering
    because it is not an implementation of the `Comparable` interface.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '`int compareToIgnoreCase(String str)`方法执行相同的功能，但忽略比较字符串的大小写，并且不用于自然排序，因为它不是`Comparable`接口的实现。'
- en: valueOf(Objectj)
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: valueOf(Objectj)
- en: The static method `String valueOf(Object obj)` returns `null` if the provided
    object is `null`, or calls the method `toString()` on the object provided.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法`String valueOf(Object obj)`如果提供的对象为`null`，则返回`null`，或者在提供的对象上调用`toString()`方法。
- en: valueOf(primitive or char[])
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: valueOf(primitive or char[])
- en: 'Any primitive type value can be passed as the parameter into the static method `String
    valueOf(primitive value)`, which returns the String representation of the value provided.
    For example, `String.valueOf(42)` returns `42`. This group of methods includes
    the following static methods:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 任何原始类型值都可以作为参数传递给静态方法`String valueOf(primitive value)`，它返回提供的值的字符串表示形式。例如，`String.valueOf(42)`返回`42`。这组方法包括以下静态方法：
- en: '`String valueOf(boolean b)`'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(boolean b)`'
- en: '`String valueOf(char c)`'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(char c)`'
- en: '`String valueOf(double d)`'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(double d)`'
- en: '`String valueOf(float f)`'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(float f)`'
- en: '`String valueOf(int i)`'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(int i)`'
- en: '`String valueOf(long l)`'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(long l)`'
- en: '`String valueOf(char[] data)`'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(char[] data)`'
- en: '`String valueOf(char[] data, int offset, int count)`'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(char[] data, int offset, int count)`'
- en: copyValueOf(char[])
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: copyValueOf(char[])
- en: The method `String copyValueOf(char[] data)` is equivalent to `valueOf(char[])`,
    while the method `String copyValueOf(char[] data, int offset, int count)` is equivalent
    to `valueOf(char[], int, int)`. They return a `String` representation of a char
    array or its subarray.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '`String copyValueOf(char[] data)`方法等同于`valueOf(char[])`，而`String copyValueOf(char[]
    data, int offset, int count)`方法等同于`valueOf(char[], int, int)`。它们返回字符数组或其子数组的`String`表示形式。'
- en: And the method `void getChars(int srcBegin, int srcEnd, char[] dest, int dstBegin)` copies
    characters from this `String` value into the destination character array.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`void getChars(int srcBegin, int srcEnd, char[] dest, int dstBegin)`方法将此`String`值中的字符复制到目标字符数组中。'
- en: indexOf() and substring()
  id: totrans-517
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: indexOf() and substring()
- en: 'Various `int indexOf(String str)` and `int lastIndexOf(String str)` methods
    return the position of a substring  in a string:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 各种`int indexOf(String str)`和`int lastIndexOf(String str)`方法返回字符串中子字符串的位置：
- en: '```java'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = "Introduction";
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: String s = "Introduction";
- en: 'System.out.println(s.indexOf("I"));      //prints: 0'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.indexOf("I"));      //prints: 0'
- en: 'System.out.println(s.lastIndexOf("I"));  //prints: 0'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.lastIndexOf("I"));  //prints: 0'
- en: 'System.out.println(s.lastIndexOf("i"));  //prints: 9'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.lastIndexOf("i"));  //prints: 9'
- en: 'System.out.println(s.indexOf("o"));      //prints: 4'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.indexOf("o"));      //prints: 4'
- en: 'System.out.println(s.lastIndexOf("o"));  //prints: 10'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.lastIndexOf("o"));  //prints: 10'
- en: 'System.out.println(s.indexOf("tro"));    //prints: 2'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.indexOf("tro"));    //prints: 2'
- en: '```'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Notice that the position count starts from zero.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，位置计数从零开始。
- en: 'The method `String substring(int beginIndex)` returns the rest of the string
    value, starting from the position (index) passed in as the parameter:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '`String substring(int beginIndex)`方法返回字符串值的其余部分，从作为参数传递的位置（索引）开始：'
- en: '```java'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = "Introduction";
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: String s = "Introduction";
- en: 'System.out.println(s.substring(1));        //prints: ntroduction'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.substring(1));        //prints: ntroduction'
- en: 'System.out.println(s.substring(2));        //prints: troduction'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(s.substring(2));        //prints: troduction'
- en: '```'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The character with the `beginIndex` position is the first that is present in
    the preceding substring.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '`beginIndex`位置的字符是前面子字符串中存在的第一个字符。'
- en: 'The method `String substring(int beginIndex, int endIndex)` returns the substring,
    starting from the position passed in as the first parameter, to the position passed
    in as the second parameter:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String substring(int beginIndex, int endIndex)`返回从作为第一个参数传递的位置开始到作为第二个参数传递的位置结束的子字符串：
- en: '```java'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = "Introduction";
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: String s = "Introduction";
- en: 'System.out.println(s.substring(1, 2));        //prints: n'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.substring(1, 2));        //输出：n
- en: 'System.out.println(s.substring(1, 3));        //prints: nt'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.substring(1, 3));        //输出：nt
- en: '```'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: As with the method `substring(beginIndex)`, the character with the `beginIndex` position
    is the first that is present in the preceding substring, while the character with
    the `endIndex` position is not included. The difference `endIndex - beginIndex` equals
    the length of the substring.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 与`substring(beginIndex)`方法一样，`beginIndex`位置的字符是前面子字符串中存在的第一个字符，而`endIndex`位置的字符不包括在内。`endIndex
    - beginIndex`的差等于子字符串的长度。
- en: 'This means that the following two substrings are equal:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着以下两个子字符串是相等的：
- en: '```java'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(s.substring(1));              //prints: ntroduction'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.substring(1));              //输出：ntroduction
- en: 'System.out.println(s.substring(1, s.length()));  //prints: ntroduction'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.substring(1, s.length()));  //输出：ntroduction
- en: '```'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: contains() and matches()
  id: totrans-548
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: contains()和matches()
- en: 'The method `boolean contains(CharSequence s)` returns `true` when the provided
    sequence of characters (substring) is present:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`boolean contains(CharSequence s)`返回`true`当提供的字符序列（子字符串）存在时：
- en: '```java'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = "Introduction";
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: String s = "Introduction";
- en: 'System.out.println(s.contains("x"));          //prints: false'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.contains("x"));          //输出：false
- en: 'System.out.println(s.contains("o"));          //prints: true'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.contains("o"));          //输出：true
- en: 'System.out.println(s.contains("tro"));        //prints: true'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.contains("tro"));        //输出：true
- en: 'System.out.println(s.contains("trx"));        //prints: false'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s.contains("trx"));        //输出：false
- en: '```'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Other similar methods are:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类似的方法有：
- en: '`boolean matches(String regex)`: uses a regular expression (not a subject of
    this book)'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean matches(String regex)`: 使用正则表达式（不是本书的主题）'
- en: '`boolean regionMatches(int tOffset, String other, int oOffset, int length)`:
    compares regions of two strings'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean regionMatches(int tOffset, String other, int oOffset, int length)`:
    比较两个字符串的区域'
- en: '`boolean regionMatches(boolean ignoreCase, int tOffset, String other, int oOffset,
    int length)`: same as above, but with the flag `ignoreCase` indicating whether
    to ignore the case'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean regionMatches(boolean ignoreCase, int tOffset, String other, int oOffset,
    int length)`: 与上面相同，但标志`ignoreCase`指示是否忽略大小写'
- en: split(), concat(), and join()
  id: totrans-561
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: split()，concat()和join()
- en: 'The methods `String[] split(String regex)` and `String[] split(String regex,
    int limit)` use the passed-in regular expression to split the strings into substrings.
    We do not explain regular expressions in this book. However, there is a very simple
    one that is easy to use even if you know nothing about regular expressions: if
    you just pass into this method any symbol or substring present in a string, the
    string will be broken (split) into parts separated by the passed-in value, for
    example:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String[] split(String regex)`和`String[] split(String regex, int limit)`使用传递的正则表达式将字符串拆分为子字符串。我们在本书中不解释正则表达式。但是，有一个非常简单的正则表达式，即使您对正则表达式一无所知，也很容易使用：如果您只是将字符串中存在的任何符号或子字符串传递到此方法中，字符串将被拆分为由传递的值分隔的部分，例如：
- en: '```java'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String[] substrings = "Introduction".split("o");
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: String[] substrings = "Introduction".split("o");
- en: System.out.println(Arrays.toString(substrings));
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Arrays.toString(substrings));
- en: '//prints: [Intr, ducti, n]'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: //输出：[Intr, ducti, n]
- en: substrings = "Introduction".split("duct");
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: substrings = "Introduction".split("duct");
- en: System.out.println(Arrays.toString(substrings));
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Arrays.toString(substrings));
- en: '//prints: [Intro, ion]'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: //输出：[Intro, ion]
- en: '```'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This code just illustrates the functionality. But the following code snippet
    is more practical:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只是说明了功能。但是以下代码片段更实用：
- en: '```java'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = "There is a bear in the woods";
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: String s = "There is a bear in the woods";
- en: String[] arr = s.split(" ");
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: String[] arr = s.split(" ");
- en: System.out.println(Arrays.toString(arr));
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Arrays.toString(arr));
- en: '//prints: [There, is, a, bear, in, the, woods]'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: //输出：[There, is, a, bear, in, the, woods]
- en: arr = s.split(" ", 3);
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: arr = s.split(" ", 3);
- en: System.out.println(Arrays.toString(arr));
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Arrays.toString(arr));
- en: '//prints: [There, is, a bear in the woods]'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: //输出：[There, is, a bear in the woods]
- en: '```'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: As you can see, the second parameter in the `split()` method limits the number
    of resulting substrings.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`split()`方法中的第二个参数限制了结果子字符串的数量。
- en: 'The method `String concat(String str)` adds the passed-in value to the end
    of the string:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String concat(String str)`将传递的值添加到字符串的末尾：
- en: '```java'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s1 =  "There is a bear";
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: String s1 =  "There is a bear";
- en: String s2 =  " in the woods";
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: String s2 =  " in the woods";
- en: String s = s1.concat(s2);
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: String s = s1.concat(s2);
- en: 'System.out.println(s);  //prints: There is a bear in the woods'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);  //输出：There is a bear in the woods
- en: '```'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The `concat()` method creates a new `String` value with the result of concatenation,
    so it is quite economical. But if you need to add (concatenate) many values, using `StringBuilder` (or `StringBuffer`,
    if you need protection from concurrent access) would be a better choice. We discussed
    it in the previous section. Another option would be to use the operator `+`:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat()`方法创建一个新的`String`值，其结果是连接，因此它是非常经济的。但是，如果您需要添加（连接）许多值，使用`StringBuilder`（或`StringBuffer`，如果您需要保护免受并发访问）将是更好的选择。我们在前一节中讨论过。另一个选择是使用运算符`+`：'
- en: '```java'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s =  s1 + s2;
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: String s =  s1 + s2;
- en: 'System.out.println(s);  //prints: There is a bear in the woods'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s);  //输出：There is a bear in the woods
- en: '```'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The operator `+`, when used with `String` values, is implemented based on `StringBuilder`,
    so allows the addition of `String` values by modifying the existing one. There
    is no performance difference between using StringBuilder and just the operator
    `+` for adding `String` values.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 当与`String`值一起使用时，运算符`+`是基于`StringBuilder`实现的，因此允许通过修改现有的`String`值来添加`String`值。使用StringBuilder和仅使用运算符`+`添加`String`值之间没有性能差异。
- en: 'The methods `String join(CharSequence delimiter, CharSequence... elements)` and `String
    join(CharSequence delimiter, Iterable<? extends CharSequence> elements)` are based
    on `StringBuilder` too. They assemble the provided values in one `String` value
    using the passed-in `delimiter` to separate the assembled values inside the created `String` result.
    Here is an example:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String join(CharSequence delimiter, CharSequence... elements)`和`String join(CharSequence
    delimiter, Iterable<? extends CharSequence> elements)`也基于`StringBuilder`。它们使用传入的`delimiter`将提供的值组装成一个`String`值，在创建的`String`结果中使用`delimiter`分隔组装的值。这是一个例子：
- en: '```java'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: s = String.join(" ", "There", "is", "a", "bear", "in", "the", "woods");
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: s = String.join(" ", "There", "is", "a", "bear", "in", "the", "woods");
- en: 'System.out.println(s);  //prints: There is a bear in the woods'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s); //输出：There is a bear in the woods
- en: List<String> list =
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: List<String> list =
- en: List.of("There", "is", "a", "bear", "in", "the", "woods");
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: List.of("There", "is", "a", "bear", "in", "the", "woods");
- en: s = String.join(" ", list);
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: s = String.join(" ", list);
- en: 'System.out.println(s);  //prints: There is a bear in the woods'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(s); //输出：There is a bear in the woods
- en: '```'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: startsWith() and endsWith()
  id: totrans-604
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: startsWith()和endsWith()
- en: 'The following methods return `true` when the String value starts (or ends)
    with the provided substring `prefix`:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法在字符串值以提供的子字符串`prefix`开头（或结尾）时返回`true`：
- en: '`boolean startsWith(String prefix)`'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean startsWith(String prefix)`'
- en: '`boolean startsWith(String prefix, int toffset)`'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean startsWith(String prefix, int toffset)`'
- en: '`boolean endsWith(String suffix)`'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean endsWith(String suffix)`'
- en: 'Here is the demo code:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是演示代码：
- en: '```java'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: boolean b = "Introduction".startsWith("Intro");
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: boolean b = "Introduction".startsWith("Intro");
- en: 'System.out.println(b);             //prints: true'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(b); //输出：true
- en: b = "Introduction".startsWith("tro", 2);
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: b = "Introduction".startsWith("tro", 2);
- en: 'System.out.println(b);             //prints: true'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(b); //输出：true
- en: b = "Introduction".endsWith("ion");
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: b = "Introduction".endsWith("ion");
- en: 'System.out.println(b);             //prints: true'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(b); //输出：true
- en: '```'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: equals() and equalsIgnoreCase()
  id: totrans-618
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: equals()和equalsIgnoreCase()
- en: We have used the method `boolean equals(Object anObject)` of the class `String` several
    times already and have pointed out that it compares this `String` value with other
    objects. This method returns `true` only when the passed-in object is `String` with
    the same value.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经多次使用了`String`类的`boolean equals(Object anObject)`方法，并指出它将此`String`值与其他对象进行比较。当传入的对象是具有相同值的`String`时，此方法仅返回`true`。
- en: The method `boolean equalsIgnoreCase(String anotherString)` does the same but
    also ignores case, so the strings `AbC` and `ABC` are considered equal.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`boolean equalsIgnoreCase(String anotherString)`也是如此，但还忽略大小写，因此字符串`AbC`和`ABC`被视为相等。
- en: contentEquals() and copyValueOf()
  id: totrans-621
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: contentEquals()和copyValueOf()
- en: The method `boolean contentEquals(CharSequence cs)` compares this `String` value
    with the `String` representation of an object that implements the interface `CharSequence`.
    The popular `CharSequence` implementations are `CharBuffer`, `Segment`, `String`, `StringBuffer`,
    and `StringBuilder`.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`boolean contentEquals(CharSequence cs)`将此`String`值与实现接口`CharSequence`的对象的`String`表示进行比较。流行的`CharSequence`实现包括`CharBuffer`、`Segment`、`String`、`StringBuffer`和`StringBuilder`。
- en: The method `boolean contentEquals(StringBuffer sb)` does the same but for `StringBuffer` only.
    It has slightly different implementation than `contentEquals(CharSequence cs)` and
    may have some performance advantages in certain situations, but we are not going
    to discuss such details. Besides, you probably will not even notice which of the
    two methods is used when you call `contentEquals()` on a `String` value unless
    you make an effort to exploit the difference.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`boolean contentEquals(StringBuffer sb)`也是如此，但仅适用于`StringBuffer`。它的实现与`contentEquals(CharSequence
    cs)`略有不同，并且在某些情况下可能具有一些性能优势，但我们不打算讨论这些细节。此外，当您在`String`值上调用`contentEquals()`时，您可能甚至不会注意到使用了这两种方法中的哪一种，除非您努力利用差异。
- en: length(), isEmpty(), and hashCode()
  id: totrans-624
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: length()、isEmpty()和hashCode()
- en: The method `int length()` returns the number of characters in a `String` value.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`int length()`返回`String`值中的字符数。
- en: The method `boolean isEmpty()` returns `true` when there are no characters in
    the `String` value and the method `length()` returns zero.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`boolean isEmpty()`在`String`值中没有字符时返回`true`，而方法`length()`返回零。
- en: The method `int hashCode()` returns a hash value of the `String` object.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`int hashCode()`返回`String`对象的哈希值。
- en: trim(), toLowerCase(), and toUpperCase()
  id: totrans-628
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: trim()、toLowerCase()和toUpperCase()
- en: The method `String trim()` removes leading and trailing whitespaces from a `String` value.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String trim()`从`String`值中删除前导和尾随空格。
- en: 'The following methods change the case of the characters in a `String` value:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法更改`String`值中字符的大小写：
- en: '`String toLowerCase()`'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toLowerCase()`'
- en: '`String toUpperCase()`'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toUpperCase()`'
- en: '`String toLowerCase(Locale locale)`'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toLowerCase(Locale locale)`'
- en: '`String toUpperCase(Locale locale)`'
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toUpperCase(Locale locale)`'
- en: getBytes(), getChars(), and toCharArray()
  id: totrans-635
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: getBytes()、getChars()和toCharArray()
- en: 'The following methods convert the `String` value to a byte array, optionally
    encoding it using the given charset:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将`String`值转换为字节数组，可选择使用给定的字符集进行编码：
- en: '`byte[] getBytes()`'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte[] getBytes()`'
- en: '`byte[] getBytes(Charset charset)`'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte[] getBytes(Charset charset)`'
- en: '`byte[] getBytes(String charsetName)`'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte[] getBytes(String charsetName)`'
- en: 'And these methods convert all the `String` value to other types, or only part
    of it:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法将`String`值全部转换为其他类型，或仅转换部分：
- en: '`IntStream chars()`'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntStream chars()`'
- en: '`char[] toCharArray()`'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char[] toCharArray()`'
- en: '`char charAt(int index)`'
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char charAt(int index)`'
- en: '`CharSequence subSequence(int beginIndex, int endIndex)`'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CharSequence subSequence(int beginIndex, int endIndex)`'
- en: Get code point by index or stream
  id: totrans-645
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按索引或流获取代码点
- en: 'The following group of methods convert all the `String` value, or only part
    of it, into Unicode code points of its characters:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一组方法将`String`值全部或部分转换为其字符的Unicode代码点：
- en: '`IntStream codePoints()`'
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntStream codePoints()`'
- en: '`int codePointAt(int index)`'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int codePointAt(int index)`'
- en: '`int codePointBefore(int index)`'
  id: totrans-649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int codePointBefore(int index)`'
- en: '`int codePointCount(int beginIndex, int endIndex)`'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int codePointCount(int beginIndex, int endIndex)`'
- en: '`int offsetByCodePoints(int index, int codePointOffset)`'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int offsetByCodePoints(int index, int codePointOffset)`'
- en: We explained Unicode code points in [Chapter 5](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml), *Java
    Language Elements and Types*. These methods are especially useful when you need
    to represent characters that *do not fit* into the two bytes of the `char` type.
    Such characters have code points bigger than `Character.MAX_VALUE`, which is  `65535`.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml)中解释了Unicode代码点，*Java语言元素和类型*。当您需要表示*不适合*`char`类型的字符时，这些方法特别有用。这些字符的代码点大于`Character.MAX_VALUE`，即`65535`。
- en: Class lang3.StringUtils
  id: totrans-653
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Class lang3.StringUtils
- en: The class `org.apache.commons.lang3.StringUtils` of the Apache Commons library
    has more than 120 static utility methods that complement those of the class `String` we
    described in the previous section.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Commons库的`org.apache.commons.lang3.StringUtils`类具有超过120个静态实用方法，这些方法补充了我们在上一节中描述的`String`类的方法。
- en: 'Among the most popular are the following static methods:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的静态方法包括以下内容：
- en: '`boolean isBlank(CharSequence cs)`: returns `true` when the passed-in parameter
    is an empty `String` "", `null`, or whitespace'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isBlank(CharSequence cs)`: 当传入的参数是空字符串""、`null`或空格时返回`true`'
- en: '`boolean isNotBlank(CharSequence cs)`: returns `true` when the passed-in parameter
    is not an empty `String` "", `null`, or whitespace'
  id: totrans-657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNotBlank(CharSequence cs)`: 当传入的参数不是空字符串""、`null`或空格时返回`true`'
- en: '`boolean isAlpha(CharSequence cs)`: returns `true` when the passed-in parameter
    contains only Unicode letters'
  id: totrans-658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlpha(CharSequence cs)`: 当传入的参数只包含Unicode字母时返回`true`'
- en: '`boolean isAlphaSpace(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only Unicode letters and spaces (''  '')'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlphaSpace(CharSequence cs)`: 当传入的参数只包含Unicode字母和空格('' '')时返回`true`'
- en: '`boolean isNumeric(CharSequence cs)`: returns `true` when the passed-in parameter
    contains only digits'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNumeric(CharSequence cs)`: 当传入的参数只包含数字时返回`true`'
- en: '`boolean isNumericSpace(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only digits and spaces (''  '')'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNumericSpace(CharSequence cs)`: 当传入的参数只包含数字和空格('' '')时返回`true`'
- en: '`boolean isAlphaNumeric(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only Unicode letters and digits'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlphaNumeric(CharSequence cs)`: 当传入的参数只包含Unicode字母和数字时返回`true`'
- en: '`boolean isAlphaNumericSpace(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only Unicode letters, digits, and spaces (''  '')'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlphaNumericSpace(CharSequence cs)`: 当传入的参数只包含Unicode字母、数字和空格(''
    '')时返回`true`'
- en: We highly recommend you look through the API of this class and get a feel for
    what you can find there.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您查看此类的API，并了解您可以在其中找到什么。
- en: Managing time
  id: totrans-665
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间管理
- en: There are many classes in the `java.time` package and its sub-packages. They
    were introduced as a replacement for other—older—packages that handle date and
    time. The new classes are thread-safe (so better suited for multithreaded processing)
    and, no less important, are more consistently designed and easier to understand.
    Also, the new implementation follows the **International Standard Organization**
    (**ISO**) for date and time formats, but allows the use of any other custom format
    too.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.time`包及其子包中有许多类。它们被引入作为处理日期和时间的其他旧包的替代品。新类是线程安全的（因此更适合多线程处理），而且同样重要的是，设计更加一致且更易于理解。此外，新的实现遵循**国际标准化组织**（**ISO**）的日期和时间格式，但也允许使用任何其他自定义格式。'
- en: 'We will describe the main five classes and demonstrate how to use them:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将描述主要的五个类，并演示如何使用它们：
- en: '`java.util.LocalDate`'
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.LocalDate`'
- en: '`java.util.LocalTime`'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.LocalTime`'
- en: '`java.util.LocalDateTime`'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.LocalDateTime`'
- en: '`java.util.Period`'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Period`'
- en: '`java.util.Duration`'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Duration`'
- en: All these, and other classes of the `java.time` package and its sub-packages,
    are rich in various functionalities that cover all practical and any imaginable
    cases. But we are not going to cover all of them, just introduce the basics and
    most popular use cases.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些以及`java.time`包及其子包的其他类都具有各种功能，涵盖了所有实际和任何想象得到的情况。但我们不打算覆盖所有这些，只是介绍基础知识和最流行的用例。
- en: java.time.LocalDate
  id: totrans-674
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.time.LocalDate
- en: 'The class `LocalDate` does not carry time. It represents a date in ISO 8601
    format, yyyy-MM-DD:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`类不包含时间。它表示ISO 8601格式的日期，yyyy-MM-DD：'
- en: '```java'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(LocalDate.now());   //prints: 2018-04-14'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(LocalDate.now());   //输出：2018-04-14
- en: '```'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As you can see, the method `now()` returns the current date as it is set on
    your computer: `April 14, 2018` was the date when this section was written.'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`now()`方法返回您计算机上设置的当前日期：`2018年4月14日`是编写本节时的日期。
- en: 'Similarly,  you can get the current date in any other timezone using the static
    method `now(ZoneId zone)`. The `ZoneId` object can be constructed using the static
    method `ZoneId.of(String zoneId)`, where `String zoneId` is any of the `String` values
    returned by the method `ZonId.getAvailableZoneIds()`:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用静态方法`now(ZoneId zone)`在任何其他时区获取当前日期。`ZoneId`对象可以使用静态方法`ZoneId.of(String
    zoneId)`构造，其中`String zoneId`是方法`ZonId.getAvailableZoneIds()`返回的任何`String`值之一：
- en: '```java'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Set<String> zoneIds = ZoneId.getAvailableZoneIds();
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: Set<String> zoneIds = ZoneId.getAvailableZoneIds();
- en: 'for(String zoneId: zoneIds){'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 'for(String zoneId: zoneIds){'
- en: System.out.println(zoneId);
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(zoneId);
- en: '}'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This code prints many timezone IDs, one of them being `Asia/Tokyo`. Now, we
    can find what the date is now, in that time zone:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码打印了许多时区ID，其中之一是`Asia/Tokyo`。现在，我们可以找到在该时区中现在是什么日期：
- en: '```java'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: ZoneId zoneId = ZoneId.of("Asia/Tokyo");
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: ZoneId zoneId = ZoneId.of("Asia/Tokyo");
- en: 'System.out.println(LocalDate.now(zoneId));   //prints: 2018-04-15'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(LocalDate.now(zoneId));   //输出：2018-04-15
- en: '```'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'An object of `LocalDate` can represent any date in the past or in the future
    too, using the following methods:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`对象可以使用以下方法表示过去或未来的任何日期：'
- en: '`LocalDate parse(CharSequence text)`: constructs an object from a string in ISO
    8601 format, yyyy-MM-DD'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate parse(CharSequence text)`: 从ISO 8601格式的字符串yyyy-MM-DD构造对象'
- en: '`LocalDate parse(CharSequence text, DateTimeFormatter formatter) `: constructs
    an object from a string in a format specified by the object `DateTimeFormatter`, which
    has many predefined formats'
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate parse(CharSequence text, DateTimeFormatter formatter) `: 用`DateTimeFormatter`对象指定的格式从字符串构造一个对象，该对象有许多预定义的格式'
- en: '`LocalDate of(int year, int month, int dayOfMonth)`: constructs an object form
    a year, month, and day'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate of(int year, int month, int dayOfMonth)`: 从年、月和日构造一个对象'
- en: '`LocalDate of(int year, Month month, int dayOfMonth)`: constructs an object
    from a year, month (as `enum` constant), and day'
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate of(int year, Month month, int dayOfMonth)`: 从年、月（作为`enum`常量）和日构造一个对象'
- en: '`LocalDate ofYearDay(int year, int dayOfYear)`: constructs an object from a
    year and day-of-year'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate ofYearDay(int year, int dayOfYear)`: 从年和一年中的某一天构造一个对象'
- en: 'The following code demonstrates these methods:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了这些方法：
- en: '```java'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: LocalDate lc1 =  LocalDate.parse("2020-02-23");
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate lc1 =  LocalDate.parse("2020-02-23");
- en: 'System.out.println(lc1);                     //prints: 2020-02-23'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc1);                     //prints: 2020-02-23'
- en: DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
- en: LocalDate lc2 =  LocalDate.parse("23/02/2020", formatter);
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate lc2 =  LocalDate.parse("23/02/2020", formatter);
- en: 'System.out.println(lc2);                     //prints: 2020-02-23'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc2);                     //prints: 2020-02-23'
- en: LocalDate lc3 =  LocalDate.of(2020, 2, 23);
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate lc3 =  LocalDate.of(2020, 2, 23);
- en: 'System.out.println(lc3);                     //prints: 2020-02-23'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc3);                     //prints: 2020-02-23'
- en: LocalDate lc4 =  LocalDate.of(2020, Month.FEBRUARY, 23);
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate lc4 =  LocalDate.of(2020, Month.FEBRUARY, 23);
- en: 'System.out.println(lc4);                     //prints: 2020-02-23'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc4);                     //prints: 2020-02-23'
- en: LocalDate lc5 = LocalDate.ofYearDay(2020, 54);
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate lc5 = LocalDate.ofYearDay(2020, 54);
- en: 'System.out.println(lc5);                     //prints: 2020-02-23'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5);                     //prints: 2020-02-23'
- en: '```'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Using the `LocalDate` object, you can get various values:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`LocalDate`对象，你可以得到各种值：
- en: '```java'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(lc5.getYear());          //prints: 2020'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.getYear());          //prints: 2020'
- en: 'System.out.println(lc5.getMonth());         //prints: FEBRUARY'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.getMonth());         //prints: FEBRUARY'
- en: 'System.out.println(lc5.getMonthValue());    //prints: 2'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.getMonthValue());    //prints: 2'
- en: 'System.out.println(lc5.getDayOfMonth());    //prints: 23'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.getDayOfMonth());    //prints: 23'
- en: 'System.out.println(lc5.getDayOfWeek());     //prints: SUNDAY'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.getDayOfWeek());     //prints: SUNDAY'
- en: 'System.out.println(lc5.isLeapYear());       //prints: true'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.isLeapYear());       //prints: true'
- en: 'System.out.println(lc5.lengthOfMonth());    //prints: 29'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.lengthOfMonth());    //prints: 29'
- en: 'System.out.println(lc5.lengthOfYear());     //prints: 366'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.lengthOfYear());     //prints: 366'
- en: '```'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The `LocalDate` object can be modified:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`对象可以被修改：'
- en: '```java'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(lc5.withYear(2021));     //prints: 2021-02-23'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.withYear(2021));     //prints: 2021-02-23'
- en: 'System.out.println(lc5.withMonth(5));       //prints: 2020-05-23'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.withMonth(5));       //prints: 2020-05-23'
- en: 'System.out.println(lc5.withDayOfMonth(5));  //prints: 2020-02-05'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.withDayOfMonth(5));  //prints: 2020-02-05'
- en: 'System.out.println(lc5.withDayOfYear(53));  //prints: 2020-02-22'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.withDayOfYear(53));  //prints: 2020-02-22'
- en: 'System.out.println(lc5.plusDays(10));       //prints: 2020-03-04'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.plusDays(10));       //prints: 2020-03-04'
- en: 'System.out.println(lc5.plusMonths(2));      //prints: 2020-04-23'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.plusMonths(2));      //prints: 2020-04-23'
- en: 'System.out.println(lc5.plusYears(2));       //prints: 2022-02-23'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.plusYears(2));       //prints: 2022-02-23'
- en: 'System.out.println(lc5.minusDays(10));      //prints: 2020-02-13'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.minusDays(10));      //prints: 2020-02-13'
- en: 'System.out.println(lc5.minusMonths(2));     //prints: 2019-12-23'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.minusMonths(2));     //prints: 2019-12-23'
- en: 'System.out.println(lc5.minusYears(2));      //prints: 2018-02-23'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc5.minusYears(2));      //prints: 2018-02-23'
- en: '```'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The `LocalDate` objects can be compared:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`对象可以进行比较：'
- en: '```java'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: LocalDate lc6 =  LocalDate.parse("2020-02-22");
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate lc6 =  LocalDate.parse("2020-02-22");
- en: LocalDate lc7 =  LocalDate.parse("2020-02-23");
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate lc7 =  LocalDate.parse("2020-02-23");
- en: 'System.out.println(lc6.isAfter(lc7));       //prints: false'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc6.isAfter(lc7));       //prints: false'
- en: 'System.out.println(lc6.isBefore(lc7));      //prints: true'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lc6.isBefore(lc7));      //prints: true'
- en: '```'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are many other helpful methods in the `LocalDate` class. If you have to
    work with dates, we recommend that you read the API of this class and other classes
    of the `java.time` package and its sub-packages.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`类中还有许多其他有用的方法。如果你必须处理日期，我们建议你阅读这个类和`java.time`包及其子包的API。'
- en: java.time.LocalTime
  id: totrans-744
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.time.LocalTime
- en: The class `LocalTime` contains the time without a date. It has methods similar
    to those of the class `LocalDate`.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`类包含没有日期的时间。它有类似于`LocalDate`类的方法。'
- en: 'Here is how an object of the `LocalTime` class can be created:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何创建`LocalTime`类的对象：
- en: '```java'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(LocalTime.now());         //prints: 21:15:46.360904'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(LocalTime.now());         //prints: 21:15:46.360904'
- en: ZoneId zoneId = ZoneId.of("Asia/Tokyo");
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: ZoneId zoneId = ZoneId.of("Asia/Tokyo");
- en: 'System.out.println(LocalTime.now(zoneId));   //prints: 12:15:46.364378'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(LocalTime.now(zoneId));   //prints: 12:15:46.364378'
- en: LocalTime lt1 =  LocalTime.parse("20:23:12");
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: LocalTime lt1 =  LocalTime.parse("20:23:12");
- en: 'System.out.println(lt1);                     //prints: 20:23:12'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt1);                     //prints: 20:23:12'
- en: LocalTime lt2 =  LocalTime.of(20, 23, 12);
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: LocalTime lt2 =  LocalTime.of(20, 23, 12);
- en: 'System.out.println(lt2);                     //prints: 20:23:12'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2);                     //prints: 20:23:12'
- en: '```'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Each component of the time value can be extracted from a `LocalTime` object
    as follows:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 时间值的每个组件可以从`LocalTime`对象中提取如下：
- en: '```java'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(lt2.getHour());          //prints: 20'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.getHour());          //prints: 20'
- en: 'System.out.println(lt2.getMinute());        //prints: 23'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.getMinute());        //prints: 23'
- en: 'System.out.println(lt2.getSecond());        //prints: 12'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.getSecond());        //prints: 12'
- en: 'System.out.println(lt2.getNano());          //prints: 0'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.getNano());          //prints: 0'
- en: '```'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The object can be modified:'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 对象可以被修改：
- en: '```java'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'System.out.println(lt2.withHour(3));        //prints: 03:23:12'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.withHour(3));        //prints: 03:23:12'
- en: 'System.out.println(lt2.withMinute(10));     //prints: 20:10:12'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.withMinute(10));     //prints: 20:10:12'
- en: 'System.out.println(lt2.withSecond(15));     //prints: 20:23:15'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.withSecond(15));     //prints: 20:23:15'
- en: 'System.out.println(lt2.withNano(300));      //prints: 20:23:12:000000300'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.withNano(300));      //prints: 20:23:12:000000300'
- en: 'System.out.println(lt2.plusHours(10));      //prints: 06:23:12'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.plusHours(10));      //prints: 06:23:12'
- en: 'System.out.println(lt2.plusMinutes(2));     //prints: 20:25:12'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.plusMinutes(2));     //prints: 20:25:12'
- en: 'System.out.println(lt2.plusSeconds(2));     //prints: 20:23:14'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.plusSeconds(2));     //prints: 20:23:14'
- en: 'System.out.println(lt2.plusNanos(200));     //prints: 20:23:14:000000200'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.plusNanos(200));     //prints: 20:23:14:000000200'
- en: 'System.out.println(lt2.minusHours(10));      //prints: 10:23:12'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.minusHours(10));      //prints: 10:23:12'
- en: 'System.out.println(lt2.minusMinutes(2));     //prints: 20:21:12'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.minusMinutes(2));     //prints: 20:21:12'
- en: 'System.out.println(lt2.minusSeconds(2));     //prints: 20:23:10'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.minusSeconds(2));     //prints: 20:23:10'
- en: 'System.out.println(lt2.minusNanos(200));     //prints: 20:23:11.999999800'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt2.minusNanos(200));     //prints: 20:23:11.999999800'
- en: '```'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'And two objects of the `LocalTime` class can be compared as well:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 'And two objects of the `LocalTime` class can be compared as well:'
- en: '```java'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: LocalTime lt3 =  LocalTime.parse("20:23:12");
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: LocalTime lt3 =  LocalTime.parse("20:23:12");
- en: LocalTime lt4 =  LocalTime.parse("20:25:12");
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: LocalTime lt4 =  LocalTime.parse("20:25:12");
- en: 'System.out.println(lt3.isAfter(lt4));       //prints: false'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt3.isAfter(lt4));       //prints: false'
- en: 'System.out.println(lt3.isBefore(lt4));      //prints: true'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(lt3.isBefore(lt4));      //prints: true'
- en: '```'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are many other helpful methods in the `LocalTime` class. If you have to
    work with time, we recommend you read the API of this class and other classes
    of the `java.time` package and its sub-packages.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: There are many other helpful methods in the `LocalTime` class. If you have to
    work with time, we recommend you read the API of this class and other classes
    of the `java.time` package and its sub-packages.
- en: java.time.LocalDateTime
  id: totrans-786
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.time.LocalDateTime
- en: 'The class `LocalDateTime` contains both date and time, and has all the methods
    the classes `LocalDate` and `LocalTime` have, so we are not going to repeat them
    here. We will only show how an object of `LocalDateTime` can be created:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 'The class `LocalDateTime` contains both date and time, and has all the methods
    the classes `LocalDate` and `LocalTime` have, so we are not going to repeat them
    here. We will only show how an object of `LocalDateTime` can be created:'
- en: '```java'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: System.out.println(LocalDateTime.now());  //2018-04-14T21:59:00.142804
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(LocalDateTime.now());  //2018-04-14T21:59:00.142804
- en: ZoneId zoneId = ZoneId.of("Asia/Tokyo");
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: ZoneId zoneId = ZoneId.of("Asia/Tokyo");
- en: System.out.println(LocalDateTime.now(zoneId));
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(LocalDateTime.now(zoneId));
- en: '//prints: 2018-04-15T12:59:00.146038'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '//prints: 2018-04-15T12:59:00.146038'
- en: LocalDateTime ldt1 =  LocalDateTime.parse("2020-02-23T20:23:12");
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime ldt1 =  LocalDateTime.parse("2020-02-23T20:23:12");
- en: 'System.out.println(ldt1);                 //prints: 2020-02-23T20:23:12'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(ldt1);                 //prints: 2020-02-23T20:23:12'
- en: DateTimeFormatter formatter =
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: DateTimeFormatter formatter =
- en: DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
- en: LocalDateTime ldt2 =
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime ldt2 =
- en: LocalDateTime.parse("23/02/2020 20:23:12", formatter);
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime.parse("23/02/2020 20:23:12", formatter);
- en: 'System.out.println(ldt2);                 //prints: 2020-02-23T20:23:12'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(ldt2);                 //prints: 2020-02-23T20:23:12'
- en: LocalDateTime ldt3 = LocalDateTime.of(2020, 2, 23, 20, 23, 12);
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime ldt3 = LocalDateTime.of(2020, 2, 23, 20, 23, 12);
- en: 'System.out.println(ldt3);                 //prints: 2020-02-23T20:23:12'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(ldt3);                 //prints: 2020-02-23T20:23:12'
- en: LocalDateTime ldt4 =
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime ldt4 =
- en: LocalDateTime.of(2020, Month.FEBRUARY, 23, 20, 23, 12);
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime.of(2020, Month.FEBRUARY, 23, 20, 23, 12);
- en: 'System.out.println(ldt4);                     //prints: 2020-02-23T20:23:12'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(ldt4);                     //prints: 2020-02-23T20:23:12'
- en: LocalDate ld = LocalDate.of(2020, 2, 23);
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate ld = LocalDate.of(2020, 2, 23);
- en: LocalTime lt =  LocalTime.of(20, 23, 12);
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: LocalTime lt =  LocalTime.of(20, 23, 12);
- en: LocalDateTime ldt5 = LocalDateTime.of(ld, lt);
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime ldt5 = LocalDateTime.of(ld, lt);
- en: 'System.out.println(ldt5);                     //prints: 2020-02-23T20:23:12'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(ldt5);                     //prints: 2020-02-23T20:23:12'
- en: '```'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are many other helpful methods in the `LocalDateTime` class. If you have
    to work with date and time, we recommend you read the API of this class and other
    classes of the `java.time` package and its sub-packages.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: There are many other helpful methods in the `LocalDateTime` class. If you have
    to work with date and time, we recommend you read the API of this class and other
    classes of the `java.time` package and its sub-packages.
- en: Period and Duration
  id: totrans-811
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Period and Duration
- en: 'The classes `java.time.Period` and `java.time.Duration` are designed to contain
    an amount of time:'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 'The classes `java.time.Period` and `java.time.Duration` are designed to contain
    an amount of time:'
- en: The `Period` object contains an amount of time in units of years, months, and
    days
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The `Period` object contains an amount of time in units of years, months, and
    days
- en: The `Duration` object contains an amount of time in hours, minutes, seconds,
    and nanoseconds
  id: totrans-814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The `Duration` object contains an amount of time in hours, minutes, seconds,
    and nanoseconds
- en: 'The following code demonstrates their creation and use with the class `LocalDateTime`,
    but the same methods exist in the classes `LocalDate` (for `Period`) and `LocalTime` (for `Duration`):'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 'The following code demonstrates their creation and use with the class `LocalDateTime`,
    but the same methods exist in the classes `LocalDate` (for `Period`) and `LocalTime` (for `Duration`):'
- en: '```java'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: LocalDateTime ldt1 = LocalDateTime.parse("2020-02-23T20:23:12");
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime ldt1 = LocalDateTime.parse("2020-02-23T20:23:12");
- en: LocalDateTime ldt2 = ldt1.plus(Period.ofYears(2));
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDateTime ldt2 = ldt1.plus(Period.ofYears(2));
- en: 'System.out.println(ldt2); //prints: 2022-02-23T20:23:12'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(ldt2); //prints: 2022-02-23T20:23:12'
- en: '//The following methods work the same way:'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '//The following methods work the same way:'
- en: ldt.minus(Period.ofYears(2));
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.minus(Period.ofYears(2));
- en: ldt.plus(Period.ofMonths(2));
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.plus(Period.ofMonths(2));
- en: ldt.minus(Period.ofMonths(2));
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.minus(Period.ofMonths(2));
- en: ldt.plus(Period.ofWeeks(2));
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.plus(Period.ofWeeks(2));
- en: ldt.minus(Period.ofWeeks(2));
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.minus(Period.ofWeeks(2));
- en: ldt.plus(Period.ofDays(2));
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.plus(Period.ofDays(2));
- en: ldt.minus(Period.ofDays(2));
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.minus(Period.ofDays(2));
- en: ldt.plus(Duration.ofHours(2));
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.plus(Duration.ofHours(2));
- en: ldt.minus(Duration.ofHours(2));
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.minus(Duration.ofHours(2));
- en: ldt.plus(Duration.ofMinutes(2));
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.plus(Duration.ofMinutes(2));
- en: ldt.minus(Duration.ofMinutes(2));
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.minus(Duration.ofMinutes(2));
- en: ldt.plus(Duration.ofMillis(2));
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.plus(Duration.ofMillis(2));
- en: ldt.minus(Duration.ofMillis(2));
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: ldt.minus(Duration.ofMillis(2));
- en: '```'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Some other ways to create and use `Period` objects are demonstrated in the
    following code:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 'Some other ways to create and use `Period` objects are demonstrated in the
    following code:'
- en: '```java'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: LocalDate ld1 =  LocalDate.parse("2020-02-23");
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate ld1 =  LocalDate.parse("2020-02-23");
- en: LocalDate ld2 =  LocalDate.parse("2020-03-25");
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: LocalDate ld2 =  LocalDate.parse("2020-03-25");
- en: Period period = Period.between(ld1, ld2);
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: Period period = Period.between(ld1, ld2);
- en: 'System.out.println(period.getDays());       //prints: 2'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(period.getDays());       //prints: 2'
- en: 'System.out.println(period.getMonths());     //prints: 1'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(period.getMonths());     //prints: 1'
- en: 'System.out.println(period.getYears());      //prints: 0'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(period.getYears());      //prints: 0'
- en: 'System.out.println(period.toTotalMonths()); //prints: 1'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(period.toTotalMonths()); //prints: 1'
- en: period = Period.between(ld2, ld1);
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: period = Period.between(ld2, ld1);
- en: 'System.out.println(period.getDays());       //prints: -2'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(period.getDays());       //prints: -2'
- en: '```'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Objects of `Duration` can be similarly created and used:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '`Duration`的对象可以类似地创建和使用：'
- en: '```java'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: LocalTime lt1 =  LocalTime.parse("10:23:12");
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: LocalTime lt1 =  LocalTime.parse("10:23:12");
- en: LocalTime lt2 =  LocalTime.parse("20:23:14");
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: LocalTime lt2 =  LocalTime.parse("20:23:14");
- en: Duration duration = Duration.between(lt1, lt2);
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: Duration duration = Duration.between(lt1, lt2);
- en: 'System.out.println(duration.toDays());     //prints: 0'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(duration.toDays());     //prints: 0'
- en: 'System.out.println(duration.toHours());    //prints: 10'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(duration.toHours());    //prints: 10'
- en: 'System.out.println(duration.toMinutes());  //prints: 600'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(duration.toMinutes());  //prints: 600'
- en: 'System.out.println(duration.toSeconds());  //prints: 36002'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(duration.toSeconds());  //prints: 36002'
- en: 'System.out.println(duration.getSeconds()); //prints: 36002'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(duration.getSeconds()); //prints: 36002'
- en: 'System.out.println(duration.toNanos());    //prints: 36002000000000'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(duration.toNanos());    //prints: 36002000000000'
- en: 'System.out.println(duration.getNano());    //prints: 0'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.println(duration.getNano());    //prints: 0'
- en: '```'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are many other helpful methods in the classes `Period` and `Duration`.
    If you have to work with the amount of time, we recommend you read the API of
    these classes and other classes of the `java.time` package and its sub-packages.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '`Period`和`Duration`类中还有许多其他有用的方法。如果您必须处理时间量，我们建议您阅读这些类和`java.time`包及其子包的API。'
- en: Managing random numbers
  id: totrans-861
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理随机数
- en: Generating a truly random number is a big topic that does not belong to this
    book. But for the vast majority of practical purposes, the pseudo-random number
    generators provided by Java are good enough, and that is what we are going to
    discuss in this section.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 生成真正随机数是一个大课题，不属于本书的范围。但对于绝大多数实际目的而言，Java提供的伪随机数生成器已经足够好，这就是我们将在本节讨论的内容。
- en: 'There are two primary ways to generate a random number in Java Standard Library:'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java标准库中有两种主要生成随机数的方法：
- en: The `java.lang.Math.random()` method
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang.Math.random()`方法'
- en: The `java.util.Random` class
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Random`类'
- en: There is also the `java.security.SecureRandom` class, which provides a cryptographically
    strong random number generator, but it is outside the scope of an introductory
    course.
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`java.security.SecureRandom`类，它提供了一个密码强度的随机数生成器，但它超出了入门课程的范围。
- en: Method java.lang.Math.random()
  id: totrans-867
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法`java.lang.Math.random()`
- en: 'The static method `double random()` of the class `Math` returns a `double` type
    value greater than or equal to `0.0` and less than `1.0`:'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Math`的静态方法`double random()`返回大于或等于`0.0`且小于`1.0`的`double`类型值：
- en: '```java'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: System.out.println(Math.random());
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(Math.random());
- en: //0.9350483840148613
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: //0.9350483840148613
- en: //0.0477353019234189
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: //0.0477353019234189
- en: //0.25784245516898985
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: //0.25784245516898985
- en: '}'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: 'We captured the result in the previous comments. But in practice, more often
    than not, a random integer from a certain range is required. To accommodate such
    a need, we can write a method that, for example, produces a random integer number
    from 0 (inclusive) to 10 (exclusive):'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的注释中捕获了结果。但实际上，通常需要从某个范围内获得随机整数。为了满足这种需求，我们可以编写一个方法，例如，从0（包括）到10（不包括）产生一个随机整数：
- en: '```java'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: int getInteger(int max){
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: int getInteger(int max){
- en: return (int)(Math.random() * max);
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: return (int)(Math.random() * max);
- en: '}'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Here is the result of one run of the previous code:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的一次运行结果：
- en: '```java'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: 'System.out.print(getInteger(10) + " "); //prints: 2 5 6'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.print(getInteger(10) + " "); //prints: 2 5 6'
- en: '}'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As you can see, it generates a random integer value that can be one of the
    following 10 numbers: 0, 1, ..., 9\. And here is the code that uses the same method
    and produces random integer numbers from 0 (inclusive) to 100 (exclusive):'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它生成一个随机整数值，可以是以下10个数字之一：0、1、...、9。以下是使用相同方法并生成从0（包括）到100（不包括）的随机整数的代码：
- en: '```java'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: 'System.out.print(getInteger(100) + " "); //prints: 48 11 97'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.print(getInteger(100) + " "); //prints: 48 11 97'
- en: '}'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'And when you need a random number between 100 (inclusive) and 200 (exclusive),
    you can just add 100 to the preceding result:'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要一个介于100（包括）和200（不包括）之间的随机数时，您只需将前面的结果加上100：
- en: '```java'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: 'System.out.print(100 + getInteger(100) + " "); //prints: 114 101 127'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.print(100 + getInteger(100) + " "); //prints: 114 101 127'
- en: '}'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Including both ends of the range in the result can be done by rounding the
    generated `double` value:'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中包括范围的两端可以通过四舍五入生成的`double`值来实现：
- en: '```java'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: int getIntegerRound(int max){
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: int getIntegerRound(int max){
- en: return (int)Math.round(Math.random() * max);
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: return (int)Math.round(Math.random() * max);
- en: '}'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'When we used the preceding method, the results were:'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用上述方法时，结果是：
- en: '```java'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: System.out.print(100 + getIntegerRound(100) + " "); //179 147 200
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print(100 + getIntegerRound(100) + " "); //179 147 200
- en: '}'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As you can see, the upper end of the range (the number 200) is included in
    the possible results set. The same effect can be achieved by just adding 1 to
    the requested upper range:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，范围的上限（数字200）包括在可能的结果集中。通过仅将1添加到请求的上限范围，可以实现相同的效果：
- en: '```java'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: int getInteger2(int max){
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: int getInteger2(int max){
- en: return (int)(Math.random() * (max + 1));
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: return (int)(Math.random() * (max + 1));
- en: '}'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If we use the previous method, we can get the following result:'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用前面的方法，我们可以得到以下结果：
- en: '```java'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: System.out.print(100 + getInteger2(100) + " "); //167 200 132
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print(100 + getInteger2(100) + " "); //167 200 132
- en: '}'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: But if you look at the source code of the `Math.random()` method, you will see
    that it uses the `java.util.Random` class and its `nextDouble()` method to generate
    a random double value. So, let's look at how to use the `java.util.Random` class directly.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您查看`Math.random()`方法的源代码，您会发现它使用`java.util.Random`类及其`nextDouble()`方法生成随机双精度值。因此，让我们看看如何直接使用`java.util.Random`类。
- en: Class java.util.Random
  id: totrans-926
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类java.util.Random
- en: 'The method `doubles()` of the class `Random` generates a `double` type value
    greater than or equal to `0.0` and less than `1.0`:'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Random`的方法`doubles()`生成一个大于或等于`0.0`且小于`1.0`的`double`类型的值：
- en: '```java'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: Random random = new Random();
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: Random random = new Random();
- en: for(int i =0; i < 3; i++){
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: System.out.print(random.nextDouble() + " ");
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print(random.nextDouble() + " ");
- en: '//prints: 0.8774928230544553 0.7822070124559267 0.09401796000707807'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '//prints: 0.8774928230544553 0.7822070124559267 0.09401796000707807'
- en: '}'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'We can use the method `nextDouble()` the same way we used `Math.random()` in
    the previous section. But class have other methods that can be used without creating
    a custom `getInteger()` method when a random integer value of a certain range
    is required. For example, the `nextInt()` method returns an integer value between `Integer.MIN_VALUE` (inclusive)
    and `Integer.MAX_VALUE` (inclusive):'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像在前一节中使用`Math.random()`一样使用方法`nextDouble()`。但是当需要某个范围内的随机整数值时，类还有其他方法可以使用，而无需创建自定义的`getInteger()`方法。例如，`nextInt()`方法返回一个介于`Integer.MIN_VALUE`（包括）和`Integer.MAX_VALUE`（包括）之间的整数值：
- en: '```java'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: System.out.print(random.nextInt() + " ");
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print(random.nextInt() + " ");
- en: '//prints: -2001537190 -1148252160 1999653777'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '//prints: -2001537190 -1148252160 1999653777'
- en: '}'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'And the same method with a parameter allows us to limit the range of the returned
    values by the upper limit (exclusive):'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 而带有参数的相同方法允许我们通过上限（不包括）限制返回值的范围：
- en: '```java'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: 'System.out.print(random.nextInt(11) + " "); //prints: 4 6 2'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.print(random.nextInt(11) + " "); //prints: 4 6 2'
- en: '}'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This code generates a random integer value between 0 (inclusive) and 10 (inclusive).
    And the following code returns a random integer value between 11 (inclusive) and
    20 (inclusive):'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码生成一个介于0（包括）和10（包括）之间的随机整数值。以下代码返回介于11（包括）和20（包括）之间的随机整数值：
- en: '```java'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: for(int i =0; i < 3; i++){
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: for(int i =0; i < 3; i++){
- en: 'System.out.print(11 + random.nextInt(10) + " "); //prints: 13 20 15'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.out.print(11 + random.nextInt(10) + " "); //prints: 13 20 15'
- en: '}'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Another way to generate a random integer from the range is by using the `IntStream` object
    returned by the method `ints(int count, int min, int max)`, where `count` is the
    number of requested values, `min` is the minimum value (inclusive), and `max` is the
    maximum value (exclusive):'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种生成范围内随机整数的方法是使用方法`ints(int count, int min, int max)`返回的`IntStream`对象，其中`count`是请求的值的数量，`min`是最小值（包括），`max`是最大值（不包括）：
- en: '```java'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String result = random.ints(3, 0, 101)
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: String result = random.ints(3, 0, 101)
- en: .mapToObj(String::valueOf)
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: .mapToObj(String::valueOf)
- en: '.collect(Collectors.joining(" ")); //prints: 30 48 52'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: '.collect(Collectors.joining(" ")); //prints: 30 48 52'
- en: '```'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This code returns three integer values from 0 (inclusive) to 100 (inclusive).
    We will talk more about streams in [Chapter 18](be052e15-ac84-4e19-9bd9-24548aa3f904.xhtml), *Streams
    and Pipelines*.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码返回从0（包括）到100（包括）的三个整数值。我们将在[第18章](be052e15-ac84-4e19-9bd9-24548aa3f904.xhtml)中更多地讨论流，*流和管道*。
- en: Exercise – Objects.equals() result
  id: totrans-961
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Exercise – Objects.equals() result
- en: 'There are three classes:'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个类：
- en: '```java'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: public class A{}
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: public class A{}
- en: public class B{}
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: public class B{}
- en: public class Exercise {
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: public class Exercise {
- en: private A a;
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: private A a;
- en: private B b;
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: private B b;
- en: public Exercise(){
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: public Exercise(){
- en: System.out.println(java.util.Objects.equals(a, b));
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(java.util.Objects.equals(a, b));
- en: '}'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public static void main(String... args){
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String... args){
- en: new Exercise();
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: new Exercise();
- en: '}'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: What is going to be displayed when we run the `main()` method of the `Exercise` class?
    `Error`? `False`? `True`?
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`Exercise`类的`main()`方法时，会显示什么？`错误`？`假`？`真`？
- en: Answer
  id: totrans-978
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Answer
- en: 'The display will show only one value: `True`. The reason is that both private
    fields—`a` and `b`—are initialized to `null`.'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 显示将只显示一个值：`True`。原因是两个私有字段——`a`和`b`——都被初始化为`null`。
- en: Summary
  id: totrans-980
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: In this chapter, we introduced the reader to the most popular utilities and
    some other classes from the Java Standard Library and Apache Commons libraries.
    Every Java programmer has to have a solid understanding of their capabilities
    in order to become an effective coder. Studying them also helps to get exposure
    to various software designs pattern and solutions that are instructive and can
    be used as patterns for best coding practices in any application.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向读者介绍了Java标准库和Apache Commons库中最受欢迎的实用程序和其他一些类。每个Java程序员都必须对它们的功能有扎实的理解，才能成为一个有效的编码人员。研究它们还有助于接触各种软件设计模式和解决方案，这些模式和解决方案具有教育意义，并可以作为任何应用程序中最佳编码实践的模式。
- en: In the next chapter, we are going to demonstrate to the reader how to write
    Java code that can manipulate—insert, read, update, and delete—data in a database.
    It will also provide a short introduction to SQL and basic database operations.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向读者演示如何编写Java代码，以便在数据库中操作（插入、读取、更新和删除）数据。它还将简要介绍SQL和基本的数据库操作。
