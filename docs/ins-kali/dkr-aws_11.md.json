["```\n> export AWS_PROFILE=docker-in-aws\n> make build\npacker build packer.json\namazon-ebs output will be in this color.\n\n==> amazon-ebs: Prevalidating AMI Name: docker-in-aws-ecs 1518934269\n...\n...\nBuild 'amazon-ebs' finished.\n\n==> Builds finished. The artifacts of successful builds are:\n--> amazon-ebs: AMIs were created:\nus-east-1: ami-77893508\n```", "```\n...\n...\nResources:\n  ...\n  ...\n  ApplicationAutoscaling:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    CreationPolicy:\n      ResourceSignal:\n        Count: !Ref ApplicationDesiredCount\n        Timeout: PT15M\n    UpdatePolicy:\n AutoScalingRollingUpdate:\n MinInstancesInService: !Ref ApplicationDesiredCount\n MinSuccessfulInstancesPercent: 100\n WaitOnResourceSignals: \"true\"\n PauseTime: PT15M\n  ...\n  ...\n```", "```\n> export AWS_PROFILE=docker-in-aws\n> aws cloudformation deploy --template-file stack.yml \\\n --stack-name todobackend --parameter-overrides $(cat dev.cfg) \\\n --capabilities CAPABILITY_NAMED_IAM\nEnter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - todobackend\n  ...\n  ...\n```", "```\nApplicationDesiredCount=1\nApplicationImageId=ami-77893508\nApplicationImageTag=5fdbe62\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\nVpcId=vpc-f8233a80\n```", "```\n...\n...\nResources:\n  ...\n  ...\n LifecycleHook:\n Type: AWS::AutoScaling::LifecycleHook\n Properties:\n RoleARN: !Sub ${LifecycleHookRole.Arn}\n AutoScalingGroupName: !Ref ApplicationAutoscaling\n DefaultResult: CONTINUE\n HeartbeatTimeout: 900\n LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING\n NotificationTargetARN: !Ref LifecycleHookTopic\n LifecycleHookRole:\n Type: AWS::IAM::Role\n Properties:\n AssumeRolePolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Action:\n - sts:AssumeRole\n Effect: Allow\n Principal:\n Service: autoscaling.amazonaws.com\n Policies:\n- PolicyName: LifecycleHookPermissions\n PolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Sid: PublishNotifications\n Action: \n - sns:Publish\n Effect: Allow\n Resource: !Ref LifecycleHookTopic\n LifecycleHookTopic:\n Type: AWS::SNS::Topic\n Properties: {}\n  LifecycleHookSubscription:\n    Type: AWS::SNS::Subscription\n    Properties:\n      Endpoint: !Sub ${LifecycleHookFunction.Arn}\n      Protocol: lambda\n      TopicArn: !Ref LifecycleHookTopic    ...\n    ...\n\n```", "```\n...\n...\nResources: LifecycleHookFunction:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - LifecycleHookFunctionLogGroup\n    Properties:\n      Role: !Sub ${LifecycleFunctionRole.Arn}\n      FunctionName: !Sub ${AWS::StackName}-lifecycleHooks\n      Description: !Sub ${AWS::StackName} Autoscaling Lifecycle Hook\n      Environment:\n        Variables:\n          ECS_CLUSTER: !Ref ApplicationCluster\n      Code:\n        ZipFile: |\n          import os, time\n          import json\n          import boto3\n          cluster = os.environ['ECS_CLUSTER']\n          # AWS clients\n          ecs = boto3.client('ecs')\n          sns = boto3.client('sns')\n          autoscaling = boto3.client('autoscaling')\n\n          def handler(event, context):\n            print(\"Received event %s\" % event)\n            for r in event.get('Records'):\n              # Parse SNS message\n              message = json.loads(r['Sns']['Message'])\n              transition, hook = message['LifecycleTransition'], message['LifecycleHookName']\n              group, ec2_instance = message['AutoScalingGroupName'], message['EC2InstanceId']\n              if transition != 'autoscaling:EC2_INSTANCE_TERMINATING':\n                print(\"Ignoring lifecycle transition %s\" % transition)\n                return\n              try:\n                # Get ECS container instance ARN\n                ecs_instance_arns = ecs.list_container_instances(\n                  cluster=cluster\n                )['containerInstanceArns']\n                ecs_instances = ecs.describe_container_instances(\n                  cluster=cluster,\n                  containerInstances=ecs_instance_arns\n                )['containerInstances']\n                # Find ECS container instance with same EC2 instance ID in lifecycle hook message\n                ecs_instance_arn = next((\n                  instance['containerInstanceArn'] for instance in ecs_instances\n                  if instance['ec2InstanceId'] == ec2_instance\n                ), None)\n                if ecs_instance_arn is None:\n                  raise ValueError('Could not locate ECS instance')\n                # Drain instance\n                ecs.update_container_instances_state(\n                  cluster=cluster,\n                  containerInstances=[ecs_instance_arn],\n                  status='DRAINING'\n                )\n                # Check task count on instance every 5 seconds\n                count = 1\n                while count > 0 and context.get_remaining_time_in_millis() > 10000:\n                  status = ecs.describe_container_instances(\n                    cluster=cluster,\n                    containerInstances=[ecs_instance_arn],\n                  )['containerInstances'][0]\n                  count = status['runningTasksCount']\n                  print(\"Sleeping...\")\n                  time.sleep(5)\n                if count == 0:\n                  print(\"All tasks drained - sending CONTINUE signal\")\n                  autoscaling.complete_lifecycle_action(\n                    LifecycleHookName=hook,\n                    AutoScalingGroupName=group,\n                    InstanceId=ec2_instance,\n                    LifecycleActionResult='CONTINUE'\n                  )\n                else:\n                  print(\"Function timed out - republishing SNS message\")\n                  sns.publish(TopicArn=r['Sns']['TopicArn'], Message=r['Sns']['Message'])\n              except Exception as e:\n                print(\"A failure occurred with exception %s\" % e)\n                autoscaling.complete_lifecycle_action(\n                  LifecycleHookName=hook,\n                  AutoScalingGroupName=group,\n                  InstanceId=ec2_instance,\n                  LifecycleActionResult='ABANDON'\n                )\n      Runtime: python3.6\n      MemorySize: 128\n      Timeout: 300\n      Handler: index.handler\n  LifecycleHookFunctionLogGroup:\n    Type: AWS::Logs::LogGroup\n    DeletionPolicy: Delete\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-lifecycleHooks\n      RetentionInDays: 7    ...\n    ...\n\n```", "```\n...\n...\nResources: LifecycleHookPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref LifecycleHookFunction\n      Principal: sns.amazonaws.com\n      SourceArn: !Ref LifecycleHookTopic\n  LifecycleFunctionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n      Policies:\n        - PolicyName: LifecycleHookPermissions\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Sid: ListContainerInstances\n                Effect: Allow\n                Action:\n                  - ecs:ListContainerInstances\n                Resource: !Sub ${ApplicationCluster.Arn}\n              - Sid: ManageContainerInstances\n                Effect: Allow\n                Action:\n                  - ecs:DescribeContainerInstances\n                  - ecs:UpdateContainerInstancesState\n                Resource: \"*\"\n                Condition:\n                  ArnEquals:\n                    ecs:cluster: !Sub ${ApplicationCluster.Arn}\n              - Sid: Publish\n                Effect: Allow\n                Action:\n                  - sns:Publish\n                Resource: !Ref LifecycleHookTopic\n              - Sid: CompleteLifecycleAction\n                Effect: Allow\n                Action:\n                  - autoscaling:CompleteLifecycleAction\n                Resource: !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ApplicationAutoscaling}\n              - Sid: ManageLambdaLogs\n                Effect: Allow\n                Action:\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                Resource: !Sub ${LifecycleHookFunctionLogGroup.Arn}    LifecycleHookFunction:\n      Type: AWS::Lambda::Function\n    ...\n    ...\n\n```", "```\nApplicationDesiredCount=1\nApplicationImageId=ami-ec957491\nApplicationImageTag=5fdbe62\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\nVpcId=vpc-f8233a80\n```"]