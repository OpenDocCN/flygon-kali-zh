- en: Android Preferences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android偏好设置
- en: In the previous chapter, we were dealing with complex data that was stored in
    the SQLite database. This time, we will deal with a much simpler form of data.
    We will cover one particular case of use to demonstrate the use of Android shared
    preferences.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们处理了存储在SQLite数据库中的复杂数据。这一次，我们将处理一种更简单的数据形式。我们将涵盖一个特定的用例，以演示Android共享偏好设置的使用。
- en: Let's say that we want to remember the last page position of our `ViewPager`
    class and to open it every time an application is started. We will use shared
    preferences to remember it and persist that information on each view page position
    change and retrieve it when it is needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要记住我们的`ViewPager`类的最后一页位置，并在每次启动应用程序时打开它。我们将使用共享偏好设置来记住它，并在每次视图页面位置更改时持久化该信息，并在需要时检索它。
- en: 'In this rather short chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个相当简短的章节中，我们将涵盖以下主题：
- en: What are Android's preferences and how can you use them?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android的偏好设置是什么，你如何使用它们？
- en: Defining your own preferences manager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义自己的偏好设置管理器
- en: What are Android preferences?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android的偏好设置是什么？
- en: Preferences for our application that are persisted and retrieved by Android's
    shared preferences mechanism are called **shared preferences**. Shared preferences
    themselves represent XML data that is accessed and modified by Android and its
    API. Android handles all the work for us regarding retrieving and saving preferences.
    It also provides the mechanism for these preferences to be private, hidden from
    the public access. Android SDK has a great set of classes for preferences management.
    Also, there are abstractions available so you are not limited to default XMLs,
    but you can create your own persistence layer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的偏好设置是由Android的共享偏好设置机制持久化和检索的。共享偏好设置本身代表Android及其API访问和修改的XML数据。Android处理有关检索和保存偏好设置的所有工作。它还提供了这些偏好设置为私有的机制，隐藏在公共访问之外。Android
    SDK具有一套用于偏好设置管理的优秀类。还有可用的抽象，因此您不仅限于默认的XML，而可以创建自己的持久化层。
- en: How can you use them?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你如何使用它们？
- en: 'To use shared preferences, you have to obtain the `SharedPreferences` instance
    from the current context:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用共享偏好设置，您必须从当前上下文获取`SharedPreferences`实例：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, `key` represents a `String` that will name this shared preferences instance.
    The XML file in the system will have that name as well. These are modes (operation
    modes) that can be available from `Context class`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`key`表示将命名此共享偏好设置实例的`String`。系统中的XML文件也将具有该名称。这些是可以从`Context类`获得的模式（操作模式）：
- en: '`MODE_PRIVATE`: This is a default mode, and the created file can only be accessed
    by our calling application'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE_PRIVATE`：这是默认模式，创建的文件只能被我们的调用应用程序访问'
- en: '`MODE_WORLD_READABLE`: This is deprecated'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE_WORLD_READABLE`：这已被弃用'
- en: '`MODE_WORLD_WRITEABLE`: This is deprecated'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE_WORLD_WRITEABLE`：这已被弃用'
- en: 'Then, we can store values or retrieve them as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以存储值或按以下方式检索它们：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There is a similar `getter` method for all common data types.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有常见数据类型都有类似的`getter`方法。
- en: Editing (storing) preferences
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑（存储）偏好设置
- en: 'We will start this section by providing an example of preferences editing:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过提供偏好设置编辑的示例来开始本节：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `commit()` method executes the operation immediately, while the `apply()`
    method executes it in the background.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`commit()`方法立即执行操作，而`apply()`方法在后台执行操作。'
- en: Never obtain or manipulate your shared preferences from an application's main
    thread if you use the `commit()` method.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`commit()`方法，永远不要从应用程序的主线程获取或操作共享偏好设置。
- en: Make sure that all writing and reading is performed in the background. You can
    use `AsyncTask` for that purpose or, instead of `commit()`, use `apply()`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有写入和读取都在后台执行。您可以使用`AsyncTask`来实现这一目的，或者使用`apply()`而不是`commit()`。
- en: Removing preferences
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除偏好设置
- en: 'To remove preferences, there is a `remove` method available, shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 删除偏好设置，有一个`remove`方法可用，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Do not remove your preferences by overwriting them with empty data. For example,
    overwriting integers with null or strings with empty string.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不要通过用空数据覆盖它们来删除您的偏好设置。例如，用null覆盖整数或用空字符串覆盖字符串。
- en: Defining your own preferences manager
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义自己的偏好设置管理器
- en: To achieve the mission from the beginning of this chapter, we will create a
    proper mechanism to obtaining shared preferences.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现本章开头的任务，我们将创建一个适当的机制来获取共享偏好设置。
- en: 'Create a new package called `preferences`. We will put all `preferences` related
    code in that package. For shared preferences management, we will need the following
    three classes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`preferences`的新包。我们将把所有与`preferences`相关的代码放在该包中。对于共享偏好设置管理，我们将需要以下三个类：
- en: '`PreferencesProviderAbstract`: This is basic abstraction to provide access
    to SharedPreferences'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreferencesProviderAbstract`：这是提供对SharedPreferences的访问的基本抽象'
- en: '`PreferencesProvider`: This is a `PreferencesProviderAbstract` implementation'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreferencesProvider`：这是`PreferencesProviderAbstract`的实现'
- en: '`PreferencesConfiguration`: This class is responsible for describing preferences
    we try to instantiate'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreferencesConfiguration`：这个类负责描述我们尝试实例化的偏好设置'
- en: Benefit of using this approach is a unified approach to shared preferences access
    in our application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法的好处是在我们的应用程序中统一访问共享偏好设置的方法。
- en: 'Let''s define each class as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义每个类如下：
- en: 'The `PreferencesProviderAbstract` class code is as follows:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreferencesProviderAbstract`类代码如下：'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `PreferencesConfiguration` class code is as follows:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreferencesConfiguration`类代码如下：'
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `PreferencesProvider` class code is as follows:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreferencesProvider`类代码如下：'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, we created a simple mechanism to obtain shared preferences.
    We will incorporate it. Open the `MainActivity` class and extend it according
    to this piece of code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们创建了一个简单的机制来获取共享偏好设置。我们将加以整合。打开`MainActivity`类，并根据以下代码进行扩展：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We created the `preferences` instance that is used to persist and read the
    view pager position. Build and run your application; swipe to one of the pages
    and then kill your application and run it again. If you take a look at Logcat,
    you will see something like this (filter it by `Page`):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`preferences`实例，用于持久化和读取视图页面位置。构建并运行您的应用程序；滑动到其中一个页面，然后关闭您的应用程序并再次运行。如果您查看Logcat，您将看到类似以下内容的信息（通过`Page`进行过滤）：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We opened the application again after closing, and swiped back to the page with
    index `0`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在关闭后再次打开应用程序，并滑动回索引为`0`的页面。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use the Android shared preferences mechanism
    for persisting application preferences. As you can see, it is very easy to create
    application preferences and use them in your application. In the next chapter,
    we will focus on concurrency in Android. We will learn about the mechanisms Android
    offers and give examples of how to use them.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用Android共享偏好机制来持久化应用程序偏好设置。正如您所看到的，创建应用程序偏好设置并在应用程序中使用它们非常容易。在下一章中，我们将专注于Android中的并发性。我们将学习Android提供的机制，并举例说明如何使用它们。
