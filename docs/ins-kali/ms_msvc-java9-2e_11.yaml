- en: Migrating a Monolithic Application to Microservice-Based Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将单片应用程序迁移到基于微服务的应用程序
- en: We are at the last chapter of this book and I hope you have enjoyed and mastered
    the full stack (except DB) microservice development. I have tried to touch upon
    all necessary topics that will give you a complete view of a microservice-based
    production application and allow you to move forward with more exploration. Since
    you have learned about microservice architecture and design, you can easily differentiate
    between a monolithic application and a microservice-based application, and you
    can identify what work one needs to do to migrate a monolithic application to
    a microservice-based application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到了本书的最后一章，我希望您已经享受并掌握了全栈（除DB外）微服务开发。我已经尝试触及所有必要的主题，这将为您提供一个完整的微服务生产应用程序的视图，并允许您继续更多的探索。由于您已经了解了微服务架构和设计，您可以轻松区分单片应用程序和基于微服务的应用程序，并且可以确定迁移单片应用程序到基于微服务的应用程序需要做哪些工作。
- en: In this chapter, we'll talk about refactoring a monolithic application to a
    microservice based application. I assume an existing monolithic application is
    already deployed and being used by customers. At the end of this chapter, you'll
    learn about the different approaches and strategies one can use to make monolithic
    migration to microservice easier.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论将单片应用程序重构为基于微服务的应用程序。我假设现有的单片应用程序已经部署并被客户使用。在本章结束时，您将了解可以使用哪些方法和策略来使单片迁移到微服务更容易。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Do you need to migrate?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要迁移吗？
- en: Approaches and keys for successful migration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功迁移的方法和关键
- en: Do you need to migrate?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要迁移吗？
- en: This is the first question that should set the tone for your migration. Do you
    really need to migrate your existing application to a microservice-based architecture?
    What benefits does it bring to the table? What are the consequences? How we can
    support the existing on-premise customers? Would existing customers support and
    bear the cost of migration to microservices? Do I need to write the code from
    scratch? How would the data be migrated to a new microservice-based system? What
    would be the timeline to this migration? Is existing team proficient enough to
    bring this change fast? Could we accept the new functional changes during this
    migration? Does our process in line to accommodate migration? So on and so forth.
    I believe there would be plenty of similar questions that come to your mind. I
    hope that, from all of the previous chapters, that you might have gained good
    knowledge of the work a microservice-based system requires.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应该为您的迁移定调的第一个问题。您真的需要将现有应用程序迁移到基于微服务的架构吗？它带来了什么好处？有什么后果？我们如何支持现有的本地端客户？现有客户是否支持并承担迁移到微服务的成本？我需要从头开始编写代码吗？数据将如何迁移到新的基于微服务的系统？这个迁移的时间表是什么？现有团队是否足够熟练地快速进行这种变革？我们在这个迁移过程中能接受新的功能变化吗？我们的流程是否符合迁移？等等。我相信您脑海中会有许多类似的问题。我希望您从之前的所有章节中，对基于微服务的系统所需的工作有了很好的了解。
- en: After all of the pros and cons, your team would decide the migration. If the
    answer is yes, this chapter will help you on the way forward to migration.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在权衡了利弊之后，您的团队会决定是否迁移。如果答案是肯定的，本章将帮助您迈出迁移的下一步。
- en: Cloud versus on-premise versus both cloud and on-premise
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云端与本地端与云端和本地端的对比
- en: What is your existing offering to a cloud solution, an on-premise solution,
    or do you offer both cloud and on-premise solutions or do you want to start cloud
    offering along with on-premise solution. Your approach would be based on the kind
    of solution you offer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您现有的解决方案是云解决方案、本地解决方案，还是两者兼有，或者您想要在本地解决方案的同时开始云解决方案。您的方法将基于您提供的解决方案类型。
- en: Cloud only solution
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅云端解决方案
- en: If you offer cloud solutions, then your migration task is easier than the other
    two solutions. Having said that, it does not mean it would be a cake walk. You
    would have full control over migration. You have the liberty of not considering
    the direct impact of migration on customers. Cloud customers simply use the solution
    and are not bothered how it has been implemented or hosted. I assume that there
    is no API or SDK change, and obviously, migration should not involve any functional
    change. Microservice migration only on the cloud has the edge of using smooth
    incremental migration. This means that you would first transform the UI application,
    then one API/service, and then the next, so on and so forth. Mind you, you are
    in control.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您提供云解决方案，那么您的迁移任务将比其他两种解决方案更容易。话虽如此，并不意味着这将是一帆风顺。您将完全控制迁移。您有自由不考虑迁移对客户的直接影响。云客户只是使用解决方案，不关心它是如何实现或托管的。我假设没有API或SDK的更改，显然，迁移不应涉及任何功能性的更改。仅在云端进行微服务迁移有使用平稳增量迁移的优势。这意味着您首先会转换UI应用程序，然后是一个API/服务，然后是下一个，依此类推。请注意，您是在控制之中。
- en: On-premise only solution
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅本地端解决方案
- en: On-premise solutions are deployed on customer infrastructure. On top of that,
    you might have many clients with different versions deployed on their infrastructure.
    You don't have full control of these deployments. You need to work with customers
    and a team effort is required for successful migration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本地端解决方案部署在客户基础设施上。除此之外，您可能有许多客户在其基础设施上部署了不同版本。您无法完全控制这些部署。您需要与客户合作，成功迁移需要团队的努力。
- en: Also, before you approach a customer, you should have the full flesh migration
    solution ready. Having different versions of your product makes this extra difficult.
    I would recommend offering migration only of the latest version and while you
    developed migration, only security and break fixes should be allowed for customers.
    Yes, you should not offer new functionality at all.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，在接触客户之前，您应该准备好完整的迁移解决方案。产品的不同版本使这变得更加困难。我建议只提供最新版本的迁移，同时在开发迁移时，只允许客户进行安全性和故障修复。是的，您根本不应该提供新功能。
- en: Both cloud and on-premise solution
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云端和本地解决方案都是。
- en: If your application has both cloud and on-premise offering, then migration of
    on-premise solution to microservices could be in synchronization with the cloud
    or vice versa. This means that if you spent efforts on migrating one, you can
    replicate the same on the other. Therefore, it includes challenges mentioned earlier
    for either cloud or on-premise migration with addition to replication on other
    environments. Also, sometimes on-premise customers may have their own customization.
    It also needs to be taken care of while migrating. Here, your own cloud solution
    should be migrated first to microservices, which can be replicated on on-premises
    later.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序既提供云端又提供本地部署，那么将本地解决方案迁移到微服务可以与云端同步，反之亦然。这意味着如果您在迁移一个方面花费了精力，您可以在另一个方面复制相同的工作。因此，它包括了之前提到的云端或本地迁移的挑战，同时还需要在其他环境中进行复制。此外，有时本地客户可能有他们自己的定制。在迁移时也需要考虑到这一点。在这里，您自己的云解决方案应该首先迁移到微服务，然后可以在本地后续复制。
- en: Migrating a production/solution offering only on-premise deployment, but you
    want of start cloud deployments also; this is most challenging. You are supposed
    to migrate your existing code as per my microservice design, while making sure
    it also supports existing on-premise deployments. Sometimes, it could be a legacy
    technology stack, or even existing code might have been written using some own
    proprietary technology like protocols. It could be that the existing design is
    not flexible enough to break into microservices. This type of migration offers
    the most challenges. An incremental migration of on-premise solution to microservices
    should be done, where you can first separate the UI applications and offer external
    APIs that interact with UI applications. If APIs are already in place or your
    application is already divided into separate UI applications, believe me, it removes
    tons of baggage from migration. Then, you can focus on migrating the server-side
    code, including the APIs developed for UI applications. You might ask why we can't
    migrate all UI applications, APIs, and server code together. Yes, you can. But,
    doing an incremental migration would give you surety, confidence, and quick failures/learning.
    After all, Agile development is all about incremental development.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将生产/解决方案迁移到仅在本地部署，但您也希望开始云部署；这是最具挑战性的。您应该根据我的微服务设计迁移现有代码，同时确保它也支持现有的本地部署。有时，可能是遗留技术堆栈，或者甚至现有代码可能是使用自己的专有技术编写的，比如协议。可能现有设计不够灵活，无法分解为微服务。这种类型的迁移提供了最大的挑战。应该先进行本地解决方案的增量迁移到微服务，您可以首先分离UI应用程序，并提供与UI应用程序交互的外部API。如果API已经存在，或者您的应用程序已经分为独立的UI应用程序，相信我，这会减轻迁移的负担。然后，您可以专注于迁移服务器端代码，包括为UI应用程序开发的API。您可能会问为什么我们不能一起迁移所有UI应用程序、API和服务器代码。是的，您可以。但是，进行增量迁移会给您带来确定性、信心和快速失败/学习。毕竟，敏捷开发就是增量开发。
- en: If your existing code is not modular or contains lots of legacy code, then I
    would advise you to first refactor it and make it modular. It would make your
    task easier. Having said that, it should be done module by module. Break and refactor
    whatever code you can before migrating it to pure microservices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现有的代码不是模块化的，或者包含大量遗留代码，那么我建议您首先对其进行重构，使其模块化。这将使您的任务更加容易。话虽如此，应该逐个模块地进行。在将其迁移到纯微服务之前，尽可能地分解和重构代码。
- en: We'll discuss a few approaches that might help you to refactor a large complex
    monolithic application into microservices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论一些方法，这些方法可能会帮助您将一个庞大复杂的单体应用程序重构为微服务。
- en: Approaches and keys to successful migration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成功迁移的方法和关键
- en: Software modernization has been done for many years. A lot of work is done to
    perform successful software modernization. You will find it useful to go through
    all of the best practices and principles for successful software modernization
    (migration). In this chapter, we will talk specifically about software modernization
    of the microservice architecture.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 软件现代化已经进行了很多年。为了成功进行软件现代化，已经做了大量工作。您会发现，阅读所有成功软件现代化（迁移）的最佳实践和原则是很有用的。在本章中，我们将专门讨论微服务架构的软件现代化。
- en: Incremental migration
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增量迁移
- en: You should transform monolithic applications to microservices in an incremental
    manner. You should not start the full-fledged migration of the whole code all
    together. It entangles the risk-reward ratio and increases the probability of
    failure. It also increases the probability of transition time and, hence, cost.
    You may want to break your code into different modules and then start transforming
    each of the modules one by one. It is quite likely that you may want to rewrite
    a few modules from scratch, which should be done if the existing code is tightly
    coupled and too complex to refactor. But, writing the complete solution from scratch
    is a big no. You should avoid it. It increases the cost, time to migration, and
    the probability of failures.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该以增量方式将单体应用程序转换为微服务。您不应该一次性开始整个代码的全面迁移。这会使风险-回报比纠缠不清，并增加失败的可能性。它还增加了过渡时间的可能性，因此也增加了成本。您可能希望将代码分解为不同的模块，然后逐个转换每个模块。很可能您可能希望从头开始重写一些模块，如果现有代码耦合度过高且过于复杂，则应该这样做。但是，从头开始编写完整的解决方案是绝对不可取的。您应该避免这样做。它会增加成本、迁移时间和失败的可能性。
- en: Process automation and tools setup
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流程自动化和工具设置
- en: Agile methodologies work hand in hand with microservices. You can use any Agile
    processes, such as Scrum and Kanban with modern development processes, such as
    test-driven development or peer programing, for incremental development. Process
    automation is a must for microservice-based environments. You should have automated
    CI/CD and test automation in place. If containerization of deliverables is not
    yet done with the CI/CD pipeline, then you should do it. It enables successful
    integration of newly developed microservices with the existing system or other
    new microservices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法与微服务紧密配合。您可以使用任何敏捷流程，如Scrum和Kanban，与现代开发流程一起使用，例如测试驱动开发或对等编程，进行增量开发。流程自动化对基于微服务的环境至关重要。您应该在适当的位置进行自动化的CI/CD和测试自动化。如果交付内容尚未通过CI/CD管道进行容器化，则应该这样做。它使新开发的微服务成功集成到现有系统或其他新的微服务中。
- en: You would want to set up the service discovery, service gateway, configuration
    server, or any event-based system in parallel or prior to the start of your first
    microservice transformation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望并行或在第一个微服务转换开始之前设置服务发现、服务网关、配置服务器或任何基于事件的系统。
- en: Pilot project
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 试点项目
- en: Another problem I have observed in microservice migration is starting development
    with different modules altogether. Ideally, a small team should perform the pilot
    project to transform any of the existing modules to microservices. Once it is
    successful, the same approach can be replicated to other modules. If you start
    the migration of various modules simultaneously, then you may repeat the same
    mistake in all microservices. It increases the risk of failures and the duration
    of transformation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我观察到微服务迁移中的另一个问题是从头开始开发不同模块。理想情况下，一个小团队应该执行试点项目，将现有模块之一转换为微服务。一旦成功，同样的方法可以复制到其他模块。如果同时开始迁移各种模块，那么您可能会在所有微服务中重复同样的错误。这会增加失败的风险和转换的持续时间。
- en: A team that performs successful migration offers the way to developed modules
    and its integration with existing monolithic applications successfully. If you
    successfully developed and transformed each module into a microservice one by
    one, at some point in time, you would have a microservice-based application instead
    of a monolithic application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 成功迁移的团队提供了开发模块及其与现有单块应用程序的集成的方式。如果您成功地逐个将每个模块开发并转换为微服务，那么在某个时间点，您将拥有基于微服务的应用程序，而不是单块应用程序。
- en: Standalone user interface applications
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立的用户界面应用程序
- en: If you already have standalone user interface applications that consume APIs,
    then you are already steps away from a successful migration. If this is not the
    case, it should be the first step to separate your user interface from the server
    code. UI applications would consume the APIs. If the existing application does
    not have the APIs that should be consumed by the UI applications, then you should
    write the wrapper APIs on top of the existing code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有独立的用户界面应用程序来消耗API，则您离成功迁移已经很近了。如果不是这种情况，首先应该将用户界面与服务器代码分离。UI应用程序将消耗API。如果现有应用程序没有应该被UI应用程序消耗的API，则应该在现有代码的基础上编写包装API。
- en: 'Take a look at the following diagram that reflects the presentation layer before
    the migration of UI applications:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下图，它反映了UI应用程序迁移之前的表示层：
- en: '![](img/59d116bf-c7db-4216-9203-33f56b466a98.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59d116bf-c7db-4216-9203-33f56b466a98.png)'
- en: Before UI Applications migration
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在UI应用程序迁移之前
- en: 'The following diagram reflects the presentation layer after the migration of
    UI applications:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: UI应用程序迁移后的表示层如下图所示：
- en: '![](img/56cc418e-1d2e-4987-be74-eb62894213fc.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56cc418e-1d2e-4987-be74-eb62894213fc.png)'
- en: After UI applications Migration
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: UI应用程序迁移后
- en: You can see that earlier, the UI was included inside the monolithic application
    along with business logic and DAO. After migration, the UI application is separated
    from the monolithic application and consumes the APIs for communicating with the
    server code. REST is standard for implementing the APIs that can be written on
    top of existing code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在早期，UI包含在单块应用程序中，以及业务逻辑和DAO。迁移后，UI应用程序从单块应用程序中分离出来，并使用API与服务器代码进行通信。REST是实现API的标准，可以在现有代码的基础上编写。
- en: Migrating modules to microservices
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模块迁移到微服务
- en: Now, you have one server-side monolithic application and one or more UI applications.
    It gives you another advantage of consuming the APIs while separating the modules
    from existing monolithic applications. For example, after separation of UI applications,
    you might transform one of the modules to a microservice. Once the UI applications
    are successfully tested, API calls related with this module can be routed to the
    newly transformed module instead of the existing monolithic API. As shown in next
    diagram, when the API `GET/customer/1` is called, the web `Gateway` can route
    the request to the `Customer Microservice` instead of the `Monolithic` application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您有一个服务器端的单块应用程序和一个或多个UI应用程序。这使您在从现有的单块应用程序中分离模块的同时，另一个优势是可以使用API。例如，在分离UI应用程序后，您可能会将其中一个模块转换为微服务。一旦UI应用程序成功测试，与该模块相关的API调用可以路由到新转换的模块，而不是现有的单块API。如下图所示，当调用API
    `GET/customer/1` 时，Web `Gateway` 可以将请求路由到 `Customer Microservice` 而不是 `Monolithic`
    应用程序。
- en: You can also perform the testing on production before making the new microservice-based
    API live by comparing the response from both monolithic and microservice modules.
    Once we have consistently matching responses, we can be sure that the transformation
    is done successfully and API calls can be migrated to the refactored module API.
    As shown in the following figure, a component is deployed that makes another call
    to a new customer microservice whenever a customer API is called. Then, it compares
    the responses of both of the calls and stores the results. These results can be
    analyzed and a fix should be delivered for any inconsistency. When a response
    from a newly transformed microservice matches with the existing monolithic responses,
    you can stop routing the calls to existing monolithic applications and replace
    it with new microservice.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在将基于新微服务的API投入生产之前进行测试，方法是比较来自单体和微服务模块的响应。一旦我们有一致的匹配响应，我们就可以确信转换已成功完成，并且API调用可以迁移到重构后的模块API。如下图所示，部署了一个组件，每当调用客户API时，它会调用一个新的客户微服务。然后，比较这两个调用的响应并存储结果。这些结果可以进行分析，并且应为任何不一致性提供修复。当来自新转换的微服务的响应与现有单体响应匹配时，您可以停止将调用路由到现有的单体应用程序，并将其替换为新的微服务。
- en: Following this approach allows you to migrate modules one by one to a microservice,
    and at one point in time, you can migrate all monolithic modules to microservices.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这种方法允许您逐个将模块迁移到微服务，一段时间后，您可以将所有单体模块迁移到微服务。
- en: '![](img/237764f3-242b-43bc-8fb1-33eac8744c1c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/237764f3-242b-43bc-8fb1-33eac8744c1c.png)'
- en: API routing, comparison, and migration
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: API路由、比较和迁移
- en: How to accommodate a new functionality during migration
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在迁移过程中适应新功能
- en: A new functionality should be avoided in ideal scenarios during migration. Only
    important fixes and security changes should be allowed. However, if there is an
    urgency to implement a new functionality, then it should be developed either in
    a separate microservice or in a modular way to existing monolithic code that makes
    its separation from existing code easier.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移过程中，理想情况下应避免引入新功能。只允许重要的修复和安全更改。但是，如果有紧急需要实现新功能，那么它应该以独立的微服务或模块化的方式开发到现有的单体代码中，以便更容易地与现有代码分离。
- en: For example, if you really need a new feature in the `customer` module that
    does not have any dependency on other modules, you can simply create a new customer
    microservice and use it for specific API calls, either by external world or through
    other modules. It is up to you whether you use REST calls or events for inter-process
    communication.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您真的需要 `customer` 模块中没有任何其他模块依赖性的新功能，您可以简单地创建一个新的客户微服务，并将其用于特定的API调用，无论是通过外部世界还是通过其他模块。您可以选择使用REST调用或事件进行进程间通信。
- en: Similarly, if you need a new functionality that has dependency on other modules
    (for example, a new customer functionality having a dependency on booking) and
    it is not exposed as an API to a UI or service API, then it can still be developed
    as a separate microservice, as shown in the following diagram. The `customer`
    module calls a newly developed microservice and then it calls the `booking` module
    for request processing and provides the response back to the `customer` module.
    Here, for inter-process communication, REST or events could be used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您需要一个具有其他模块依赖性的新功能（例如，具有对预订依赖性的新客户功能），并且它没有作为API暴露给UI或服务API，那么它仍然可以作为独立的微服务开发，如下图所示。
    `customer` 模块调用一个新开发的微服务，然后调用 `booking` 模块进行请求处理，并将响应返回给 `customer` 模块。在这里，可以使用REST或事件进行进程间通信。
- en: '![](img/2acbdfb7-53ea-4a58-8739-5c945ff95560.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2acbdfb7-53ea-4a58-8739-5c945ff95560.png)'
- en: Implementing a new module as a microservice that calls another module
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实现作为微服务调用另一个模块的新功能
- en: References
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Read the following books for more information on code refactoring and domain-driven
    design:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读以下书籍以获取有关代码重构和领域驱动设计的更多信息：
- en: '*Refactoring: Improving the Design of Existing Code* by Martin Fowler'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《重构：改善既有代码的设计》马丁·福勒*'
- en: '*Domain-Driven Design* by Eric J. Evans'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《领域驱动设计》埃里克·J·埃文斯*'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Software modernization is the way to move forward and in the current environment
    since everything is moved to the cloud and the way resource power and capacity
    is increased, microservices based on design look more appropriate than anything
    else. We discussed a combination of cloud and on-premise solutions and the challenges
    of transforming those into microservices.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 软件现代化是前进的方式，在当前环境中，由于一切都转移到云端，资源能力和容量的增加方式，基于设计的微服务看起来比其他任何东西更合适。我们讨论了云端和本地解决方案的组合以及将其转换为微服务的挑战。
- en: We also discussed why an incremental development approach is preferred as far
    as monolithic application migration to microservices is concerned. We talked about
    various approaches and practices that are required for successful migration to
    microservices.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了为什么在单体应用迁移到微服务时更倾向于增量开发方法。我们谈到了成功迁移到微服务所需的各种方法和实践。
