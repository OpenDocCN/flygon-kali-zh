- en: Chapter 6. Capture and Share
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。捕捉和分享
- en: We love to share the world we live in with others, so we will use our smartphones
    to take images or videos of all the things and all the people we care about. With
    Android, this is pretty easy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢与他人分享我们生活的世界，所以我们将使用我们的智能手机拍摄我们关心的所有事物和所有人的图像或视频。在Android上，这相当容易。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Capturing images the easy way
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以简单的方式捕捉图像
- en: Image capturing using the Camera2 API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Camera2 API进行图像捕捉
- en: Image sharing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像分享
- en: Orientation issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方向问题
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As a developer, you can just launch an intent, grab the data, and do with it
    whatever you want.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，你可以启动一个意图，获取数据，并对其进行任何你想要的操作。
- en: Things become a little bit more complicated if you want to handle image or video
    capturing yourself. So, why would someone want to do that in the first place?
    It gives us more flexibility in the way the camera is being previewed, filtered,
    or handled.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想自己处理图像或视频捕捉，事情会变得有点复杂。那么，为什么有人要这样做呢？这给了我们更多的灵活性，以处理相机的预览、过滤或处理方式。
- en: With Android Lollipop onwards, the old Camera API that we had been using has
    been replaced with the Camera2 API, which has turned out to be a huge improvement.
    Unfortunately, some orientation issues remain, mostly due to the large fragmentation
    of Android hardware and software. On some devices, captured images seem to be
    rotated 90 degrees. Why is that? You will find out in the last recipe in this
    chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android Lollipop开始，我们一直在使用的旧相机API已被Camera2 API取代，这被证明是一个巨大的改进。不幸的是，一些方向问题仍然存在，主要是由于Android硬件和软件的大碎片化。在一些设备上，捕获的图像似乎被旋转了90度。为什么会这样？你将在本章的最后一个配方中找到答案。
- en: Capturing images the easy way
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以简单的方式捕捉图像
- en: There are of course, many ways on Android to take a picture or record a video.
    The easiest way to capture an image is by using an intent to launch the camera
    app and grabbing the results once the image has been taken.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在Android上有许多拍照或录像的方式。捕捉图像的最简单方式是使用意图启动相机应用程序，并在拍摄完成后获取结果。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you just need to have Android Studio up and running.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，你只需要运行Android Studio。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Launching a camera intent typically goes like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 启动相机意图通常是这样的：
- en: In Android Studio, create a new project.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中，创建一个新项目。
- en: In the `activity_main.xml` layout, add a new button and an image view. Name
    the image view `image`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`布局中，添加一个新按钮和一个图像视图。将图像视图命名为`image`。
- en: Create an on-click handler for that button.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为该按钮创建一个点击处理程序。
- en: Call the `takePicture` method from the event handler implementation.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从事件处理程序实现中调用`takePicture`方法。
- en: 'Implement the `takePicture` method. If supported by the device, launch the
    capture intent:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`takePicture`方法。如果设备支持，启动捕捉意图：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Override the `onActivityResult` method. You will get the thumbnail from the
    data being returned and display the result in the image view:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onActivityResult`方法。你将从返回的数据中获取缩略图，并在图像视图中显示结果：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is the easiest way to capture an image, and perhaps you have already done
    it this way before.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是捕捉图像的最简单方式，也许你以前已经这样做过了。
- en: There's more...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to preview the image within your own app, there is more work to
    do. The Camera2 API can be used for previewing, capturing, and encoding purposes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在自己的应用程序中预览图像，还有更多工作要做。Camera2 API可用于预览、捕捉和编码。
- en: Within the Camera2 API, you will find components such as `CameraManager`, `CameraDevice`,
    `CaptureRequest`, and `CameraCaptureSession`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Camera2 API中，你会找到诸如`CameraManager`、`CameraDevice`、`CaptureRequest`和`CameraCaptureSession`之类的组件。
- en: 'Listed here are the most important Camera2 API classes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最重要的Camera2 API类：
- en: '| Class | Objectives |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 类 | 目标 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `CameraManager` | Select camera, create camera device |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `CameraManager` | 选择相机，创建相机设备 |'
- en: '| `CameraDevice` | `Create CaptureRequest`, `CameraCaptureSession` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `CameraDevice` | `创建CaptureRequest`，`CameraCaptureSession` |'
- en: '| `CaptureRequest, CameraBuilder` | Link to surface view (previewing) |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `CaptureRequest, CameraBuilder` | 链接到表面视图（预览） |'
- en: '| `CameraCaptureSession` | Capture an image and display it on the surface view
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `CameraCaptureSession` | 捕捉图像并在表面视图上显示 |'
- en: The sample that we are going to investigate in the next recipe, *Image capturing*,
    may look a bit confusing at first. This is mostly because the setup process requires
    many steps, and most of them will be executed asynchronously. But do not worry,
    though - we will investigate it step by step.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一个配方“图像捕捉”中调查的示例可能一开始看起来有点令人困惑。这主要是因为设置过程需要许多步骤，大部分将以异步方式执行。但不要担心，我们将逐步调查它。
- en: Image capturing using the Camera2 API
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Camera2 API进行图像捕捉
- en: Let us share the world around us with the ones we love. It all starts with previewing
    and capturing it. That is what this recipe is all about. We will also go back
    to those good old days when photos were sepia toned.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们与我们所爱的人分享我们周围的世界。一切都始于预览和捕捉。这就是这个配方的全部内容。我们还将回到那些旧日的照片是棕褐色调的好日子。
- en: 'There are many apps, such as Instagram, that provide options to add filters
    or effects to your photos. What would happen if sepia were the only option for
    filtering and sharing your pictures? Maybe we can set a trend. #EverybodyLovesSepia!'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多应用程序，比如Instagram，提供了添加滤镜或效果到你的照片的选项。如果棕褐色是过滤和分享照片的唯一选项，会发生什么？也许我们可以设置一个趋势。#每个人都喜欢棕褐色！
- en: 'We will be using the Camera2 API to capture an image, based on Google''s Camera2
    Basic sample that is available on GitHub. As a reference for the steps in the
    recipe, you can have a look at the following class diagram. It will make clear
    what classes we are dealing with and how they interact with each other:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Camera2 API来捕捉图像，基于Google在GitHub上提供的Camera2 Basic示例。作为配方步骤的参考，你可以查看以下类图。它将清楚地显示我们正在处理的类以及它们之间的交互方式：
- en: '![Image capturing using the Camera2 API](img/B04299_06_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![使用Camera2 API进行图像捕捉](img/B04299_06_01.jpg)'
- en: We will investigate what exactly is in there, and once you have found out what
    is going on, we will add a little bit of ourselves to it by making the preview
    and the captured image appear in sepia (or another effect, if you prefer).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调查其中的具体情况，一旦您找出了问题所在，我们将通过使预览和捕获的图像呈现为棕褐色（或者，如果您愿意，可以选择其他效果）来为其添加一些我们自己的东西。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the Camera2 API. As we will be using this
    API, you need to have a real device that is running Android 5.0 or above (recommended),
    or you will need to create a virtual device.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用Camera2 API。由于我们将使用此API，您需要使用运行Android 5.0或更高版本（推荐）的真实设备，或者您需要创建一个虚拟设备。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Let''s take a look at how we can get up to speed quickly. Google has already
    prepared a neat example for us:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何快速上手。Google已经为我们准备了一个整洁的示例：
- en: In Android Studio, choose **Import Android code sample** from the launch wizard,
    or choose **Import Sample** on the **File** menu.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中，从启动向导中选择**导入Android代码示例**，或者在**文件**菜单上选择**导入示例**。
- en: In the next dialog you will see many interesting sample apps demonstrating various
    Android features. Choose the **Camera2 Basic** sample, and click on the **Next**
    button:![How to do it...](img/B04299_06_02.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，您将看到许多有趣的示例应用程序，展示了各种Android功能。选择**Camera2 Basic**示例，然后点击**Next**按钮：![操作步骤...](img/B04299_06_02.jpg)
- en: Name your project `EverybodyLovesSepia` and click on the **Finish** button.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为`EverybodyLovesSepia`，然后点击**Finish**按钮。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If nothing happens after clicking on the button (due to a bug in some versions
    of Android Studio), try again, but leave the project name unchanged this time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击按钮后什么都没有发生（由于Android Studio的某些版本中存在的错误），请再试一次，但这次保持项目名称不变。
- en: Android Studio will get the sample project from GitHub for you. You can find
    it at [https://github.com/googlesamples/android-Camera2Basic](https://github.com/googlesamples/android-Camera2Basic)
    as well.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio将为您从GitHub获取示例项目。您可以在[https://github.com/googlesamples/android-Camera2Basic](https://github.com/googlesamples/android-Camera2Basic)找到它。
- en: Run the app on a device or on a virtual device.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上或虚拟设备上运行应用程序。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a virtual device running on Genymotion, enable the camera first
    by clicking on the camera icon on the right, turning the camera switch on, and
    selecting a (web) camera.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Genymotion上运行的虚拟设备，请首先通过单击右侧的相机图标，打开相机开关，并选择（网络）相机来启用相机。
- en: 'Within the app, you will see a preview of the camera, as shown in the following
    screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中，您将看到相机的预览，如下截图所示：
- en: '![How to do it...](img/B04299_06_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/B04299_06_03.jpg)'
- en: A lot of things have happened automatically again! What is in this Camera2 API
    sample? What is needed to capture an image? Actually, quite a lot is needed. Open
    the `Camera2BasicFragment` class. This is where most of the magic happens.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 许多事情又自动发生了！这个Camera2 API示例中有什么？需要什么来捕获图像？实际上，需要相当多的东西。打开`Camera2BasicFragment`类。这就是大部分魔术发生的地方。
- en: Collapsing all methods
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 折叠所有方法
- en: 'To create a less overwhelming view, collapse all methods:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个不那么压倒性的视图，折叠所有方法：
- en: You can do this by choosing the **Folding** option from the **Code** menu. In
    the submenu, choose **Collapse all**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过从**Code**菜单中选择**Folding**选项来做到这一点。在子菜单中，选择**Collapse all**。
- en: You will also find other options in this submenu; for example, **Expand all**
    methods or **Expand** (which expands only the selected method).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还会在此子菜单中找到其他选项；例如，**展开所有**方法或**展开**（仅展开所选方法）。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Use the shortcuts *Cmd* followed by *+* and *Cmd* followed by *–* (or *Ctrl*
    with *+* and *Ctrl* with *–* for Windows) to expand or collapse a method, respectively.
    Use the shortcuts *Cmd* + *Shift* with *+* and *Cmd* + *Shift* with *–* (*Ctrl*
    + *Shift* and *+* and *Shift* + *Ctrl* and *–* for Windows) to expand or collapse,
    respectively, all methods within a class.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用快捷键*Cmd*后跟*+*和*Cmd*后跟*–*（或者*Ctrl*后跟*+*和*Ctrl*后跟*–*对于Windows）来展开或折叠一个方法。使用快捷键*Cmd*
    + *Shift*后跟*+*和*Cmd* + *Shift*后跟*–*（*Ctrl* + *Shift*和*+*和*Shift* + *Ctrl*和*–*对于Windows）来展开或折叠类中的所有方法。
- en: Expand the `onViewCreated` method. Here, we see the initialization of `mTextureView`,
    which is a reference to the custom widget `AutoFitTextureView`. It will display
    the camera preview.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`onViewCreated`方法。在这里，我们看到了`mTextureView`的初始化，它是对自定义小部件`AutoFitTextureView`的引用。它将显示相机预览。
- en: Next, expand the `onResume` method. Initially, this is where the `SurfaceTextureListener`
    class will be set. As the comments in the sample already suggest, this allows
    us to wait for the surface to be ready before we try to open a camera. Double
    click on `mSurfaceTextureListener` and jump to its declaration using the shortcut
    *Cmd* + *B* (for Windows, that's *Ctrl* + *B*) to see what this is about.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，展开`onResume`方法。最初，这是设置`SurfaceTextureListener`类的地方。正如示例中的注释已经建议的那样，这允许我们在尝试打开相机之前等待表面准备就绪。双击`mSurfaceTextureListener`，使用快捷键*Cmd*
    + *B*（对于Windows，是*Ctrl* + *B*）跳转到其声明，看看这是怎么回事。
- en: Fully expand the initialization of `mSurfaceTextureListener`. Just like an activity,
    the texture view has a life cycle. Events are being handled here. For now, the
    most interesting one here is the `onSurfaceTextureAvailable` event. As soon as
    the surface is available, the `openCamera` method will be called. Double-click
    on it and jump to it.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全展开`mSurfaceTextureListener`的初始化。就像活动一样，纹理视图也有一个生命周期。事件在这里被处理。目前，这里最有趣的是`onSurfaceTextureAvailable`事件。一旦表面可用，将调用`openCamera`方法。双击它并跳转到它。
- en: Many things happen in the `openCamera` method. There is a call to the `setUpCameraOutputs`
    method. This method will handle which camera to use (if there are multiple ones)
    by setting the private member `mCameraId` and the (preview) size of the image.
    This may be different for each type of device. It will also take care of the aspect
    ratio. Almost any device supports the 4:3 aspect ratio, but many also support
    16:9 or other aspect ratios.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`openCamera`方法中发生了许多事情。调用了`setUpCameraOutputs`方法。此方法将通过设置私有成员`mCameraId`和图像的（预览）大小来处理要使用的相机（如果有多个）。这对于每种类型的设备可能是不同的。它还会处理宽高比。几乎任何设备都支持4:3的宽高比，但许多设备也支持16:9或其他宽高比。'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most devices have one or two cameras on board. Some have only a back camera
    and some have only a front camera. Front cameras often support fewer image sizes
    and aspect ratios.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数设备都有一到两个摄像头。有些只有一个后置摄像头，有些只有一个前置摄像头。前置摄像头通常支持较少的图像尺寸和宽高比。
- en: Also, with the new permission policy that comes with Android Marshmallow (Android
    6.0), your app may not be allowed to use any camera at all. This means that you
    always need to test whether or not the cameras functionality is available to your
    app. You will have to provide some feedback to your user by displaying a dialog
    or toast if it cannot.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，随着Android Marshmallow（Android 6.0）带来的新权限策略，您的应用程序可能根本不被允许使用任何摄像头。这意味着您始终需要测试您的应用程序是否可以使用摄像头功能。如果不能，您将需要通过显示对话框或toast向用户提供一些反馈。
- en: 'Next, let''s have a look at the following line in the `openCamera` method.
    It says to open the camera that the `setCameraOutputs` method has selected for
    us:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下`openCamera`方法中的以下行。它说要打开`setCameraOutputs`方法为我们选择的相机：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It also provides a `mStateCallback` parameter. If you double-click on it and
    jump to it, you can see its declaration. Things are again happening asynchronously
    here.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它还提供了一个`mStateCallback`参数。如果您双击它并跳转到它，您可以看到它的声明。这里的事情再次是异步发生的。
- en: As soon as the camera has been opened, the preview session will be started.
    Let's jump to the `createCameraPreviewSession` method.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦相机被打开，预览会话将会开始。让我们跳转到`createCameraPreviewSession`方法。
- en: Have a look at `mCameraDevice.createCaptureSession`. One of the parameters that
    go into that method is a capture session state callback. It is used to determine
    whether or not the session is configured successfully so the preview can be shown.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看一下`mCameraDevice.createCaptureSession`。进入该方法的一个参数是捕获会话状态回调。它用于确定会话是否成功配置，以便可以显示预览。
- en: Now, what needs to be done to take a picture? Find the `onClick` method. You
    will notice a call to the `takePicture` method. Jump to it. The `takePicture`
    method in turn calls the `lockFocus` method. Jump to it.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，需要做什么来拍照？找到`onClick`方法。您会注意到调用`takePicture`方法。跳转到它。`takePicture`方法又调用`lockFocus`方法。跳转到它。
- en: 'Taking a picture involves several steps. The focus of the camera has to be
    locked. Next, a new capture request needs to be created and the `capture` method
    needs to be called:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拍照涉及几个步骤。相机的焦点必须被锁定。接下来，需要创建一个新的捕获请求并调用`capture`方法：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One of the parameters that go into `capture` method is `mCaptureCallback`. Jump
    to its declaration using *Cmd* + *B* (or *Ctrl* + *B* for Windows).
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`capture`方法的一个参数是`mCaptureCallback`。使用*Cmd* + *B*（或Windows的*Ctrl* + *B*）跳转到它的声明。
- en: 'You will notice two methods: `onCaptureProgressed` and `onCaptureCompleted`.
    They both call the private method `process` and pass the result or partial result
    to it.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到两个方法：`onCaptureProgressed`和`onCaptureCompleted`。它们都调用私有方法`process`并将结果或部分结果传递给它。
- en: The `process` method will act differently on the various possible states. Finally,
    it will call the `captureStillPicture` method. Go to its declaration using *Cmd*
    + *B* (or *Ctrl* + *B* for Windows).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`process`方法将根据各种可能的状态而有所不同。最后，它将调用`captureStillPicture`方法。使用*Cmd* + *B*（或Windows的*Ctrl*
    + *B*）跳转到它的声明。'
- en: 'The `captureStillPicture` method initializes a `CaptureRequest.Builder` class,
    which is used to take the picture and store it with the right properties, such
    as orientation information. Once the capturing is completed and the file has been
    saved, the camera focus is unlocked and the user is notified through a toast:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`captureStillPicture`方法初始化了一个`CaptureRequest.Builder`类，用于拍照并以正确的属性存储照片，例如方向信息。一旦捕获完成并且文件已保存，相机焦点将被解锁，并通过toast通知用户：'
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding steps showed you the highlights of the basic (!) Camera2 example
    app. Quite a bit of work for just taking a picture within your app! If you do
    not need a preview within your app, you may want to consider taking pictures just
    using an intent. However, having your own preview gives you more flexibility for
    controls and effects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤向您展示了基本的Camera2示例应用程序的亮点。为了在您的应用程序中拍照，需要做相当多的工作！如果您不需要在应用程序中进行预览，您可能希望考虑使用意图来拍照。但是，拥有自己的预览可以为您提供更多的控制和效果的灵活性。
- en: Adding the sepia effect
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加深褐色效果
- en: 'We will add a sepia effect to the preview just because it looks cool (and because
    of course, everything used to be better in the early days), using the following
    steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在预览中添加一个深褐色效果，只是因为它看起来很酷（当然，一切在早期都更好），使用以下步骤：
- en: 'Go to the `createCameraPreviewSession` method, and within the `onConfigured`
    class of the camera capture session state call back implementation, add this line
    just before setting the `autofocus` parameter:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`createCameraPreviewSession`方法，并在相机捕获会话状态回调实现的`onConfigured`类内部，在设置`autofocus`参数之前添加这一行：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you run your app now, your preview will be in sepia. However, if you press
    the button to capture an image, it will not have this effect. In the `onCaptureStillPicture`
    method, you will have to do the same thing. Add this line just above the line
    that sets the `autofocus` parameter:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在运行您的应用程序，您的预览将是深褐色。但是，如果您按下按钮来捕获图像，它将不会产生这种效果。在`onCaptureStillPicture`方法中，您将不得不做同样的事情。在设置`autofocus`参数的行的上面添加这一行：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run your app one more time, capture an image, and find the captured file using
    the Astro app (or another file browser app). You can find it at `Android/data/com.example.android.camera2basic`
    (Obviously that is if you have accepted the suggested package name or else the
    path includes the package name you have provided). Sepia it is!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行您的应用程序，捕捉一张图像，并使用Astro应用程序（或其他文件浏览器应用程序）找到捕捉的文件。您可以在`Android/data/com.example.android.camera2basic`找到它（显然，如果您接受了建议的包名称，否则路径将包括您提供的包名称）。它是泛黄的！
- en: If you like, you can perform some further experiments with the negative or any
    of the other available effects, which is fun too, at least for a while.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您还可以尝试一些其他可用效果的负面实验，这也很有趣，至少有一段时间。
- en: That is it for now. We haven't done much programming yet, but we have looked
    at some interesting pieces of code. In the next recipe, we will share our captured
    image on Facebook.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 目前就是这样。我们还没有做太多的编程，但我们已经看了一些有趣的代码片段。在下一个教程中，我们将在Facebook上分享我们捕捉的图像。
- en: There's more...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For more information, check out GitHub at [https://github.com/googlesamples/
    android-Camera2Basic](https://github.com/googlesamples/ android-Camera2Basic)
    and the Google Camera2 API reference at [https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请访问GitHub [https://github.com/googlesamples/android-Camera2Basic](https://github.com/googlesamples/android-Camera2Basic)
    和Google Camera2 API参考 [https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html)。
- en: An interesting fork of the Camera2 API sample, with QR code scanning support
    can be found at [https://github.com/ChristianBecker/Camera2Basic](https://github.com/ChristianBecker/Camera2Basic).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/ChristianBecker/Camera2Basic](https://github.com/ChristianBecker/Camera2Basic)找到一个有趣的Camera2
    API示例的分支，支持QR码扫描。
- en: Image sharing
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像分享
- en: Image capturing is no fun without the ability to share images; for example,
    on Facebook. We will be using the Facebook SDK for that.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图像捕捉如果没有分享图像的能力就不好玩；例如，在Facebook上。我们将使用Facebook SDK来实现这一点。
- en: Challenge! If you are building an app running on a Parse backend, as we did
    in [Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"),
    *Applications with a Cloud-based Backend*, there is no need for that, as the Facebook
    SDK is already in there. If you want, you can combine the recipes from [Chapter
    2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"), *Applications
    with a Cloud-based Backend* with this one, and create a real cool app real quick!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战！如果您正在构建一个在Parse后端上运行的应用程序，就像我们在[第2章](ch02.html "第2章 云端后端的应用程序")中所做的那样，*云端后端的应用程序*，那就没有必要了，因为Facebook
    SDK已经在其中了。如果您愿意，您可以将[第2章](ch02.html "第2章 云端后端的应用程序")的教程与本教程结合起来，快速创建一个真正酷的应用程序！
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you need to have the previous recipe completed successfully
    and you need to have a real Android device (or a virtual one, but this will require
    some additional steps).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要成功完成上一个教程，并且需要有一个真正的Android设备（或虚拟设备，但这将需要一些额外的步骤）。
- en: You also need to have a Facebook account, or you can create one just for testing
    purposes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个Facebook账户，或者您可以只为测试目的创建一个。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Let''s take a look at how we can share our sepia captured image on Facebook:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Facebook上分享我们的泛黄捕捉的图像：
- en: 'Get the code from the previous recipe. Open the `build.gradle` file in the
    `app` folder. Add a new dependency to the `dependencies` section, and click on
    the **Sync now** link that will appear after you have added this line:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个教程中获取代码。打开`app`文件夹中的`build.gradle`文件。在`dependencies`部分添加一个新的依赖项，并在添加了这行代码后点击**立即同步**链接：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To obtain a Facebook app ID, browse to [https://developers.facebook.com](https://developers.facebook.com)
    (yeah, this requires a Facebook account). From the **MyApps** menu, choose **Add
    a new app**, select **Android** as your platform, enter a name for your app, and
    click on **Create new Facebook App ID**. Choose a category- for example, **Entertainment**-
    and click on **Create App ID**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取Facebook应用程序ID，请浏览[https://developers.facebook.com](https://developers.facebook.com)（是的，这需要一个Facebook账户）。从**MyApps**菜单中，选择**添加新应用**，选择**Android**作为您的平台，输入您的应用名称，然后点击**创建新的Facebook应用程序ID**。选择一个类别-例如，**娱乐**-然后点击**创建应用程序ID**。
- en: Your app will be created, and a QuickStart page will be shown. Scroll down all
    the way to the **Tell us about your Android project** section. Enter details in
    the **package name** and **default activity class name** fields, and click on
    the **Next** button.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用程序将被创建，并显示一个快速入门页面。向下滚动到**告诉我们关于您的Android项目**部分。在**包名称**和**默认活动类名称**字段中输入详细信息，然后点击**下一步**按钮。
- en: A pop-up warning will be shown. You can safely ignore the warning and click
    on the **Use this package name** button. Facebook will start thinking, and after
    a while the section **Add your development and release key hashes** will appear.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示一个弹出警告。您可以放心地忽略警告，然后点击**使用此包名称**按钮。Facebook将开始思考，一段时间后**添加您的开发和发布密钥哈希**部分将出现。
- en: 'To obtain development key hashes, open the Terminal app (in Windows, start
    Command Prompt) and type the following:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取开发密钥哈希，打开终端应用程序（在Windows中，启动命令提示符）并输入以下内容：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If prompted for the keystore password, enter `android`, which should do the
    trick - unless you have changed the password previously, of course.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提示输入密钥库密码，请输入`android`，这应该就可以了 - 除非您之前已更改了密码。
- en: Hit *Enter*, copy the value that is shown, and paste it into the Facebook web
    page at **Development Key Hashes**. Click on the **Next** button to proceed.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击*Enter*，复制显示的值，并粘贴到Facebook网页的**开发密钥哈希**中。点击**下一步**按钮继续。
- en: In the section **Next Steps**, click on the **Skip to developer dashboard**
    button. It will bring you straight to the information you need, the app ID. Copy
    the value in the **App ID** field:![How to do it...](img/B04299_06_04.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**下一步**部分，点击**跳转到开发者仪表板**按钮。它会直接带你到你需要的信息，即应用ID。复制**应用ID**字段中的值：![操作步骤...](img/B04299_06_04.jpg)
- en: 'Next, initialize the Facebook SDK. Open the `CameraActivity` class, and within
    the `onCreate` method, add the following line just after the `super.OnCreate`
    line. Use the *Alt* + *Enter* shortcut to import the required package `com.facebook.FacebookSdk`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，初始化Facebook SDK。打开`CameraActivity`类，在`onCreate`方法中，在`super.OnCreate`行后添加以下行。使用*Alt*
    + *Enter*快捷键导入所需的包`com.facebook.FacebookSdk`：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we need to tell the app about the Facebook app ID. Open the `strings.xml`
    file from the `res/values` folder. Add a new string that will contain your Facebook
    app id:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要告诉应用关于Facebook应用ID的信息。打开`res/values`文件夹中的`strings.xml`文件。添加一个包含你的Facebook应用ID的新字符串：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Open the `AndroidManifest.xml` file.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AndroidManifest.xml`文件。
- en: 'Add a metadata element to the `application` element:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`application`元素中添加一个元数据元素：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a `FacebookActivity` declaration to the `manifest` file:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`manifest`文件中添加一个`FacebookActivity`声明：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `Camera2BasicFragment` class, locate the `captureStillPicture` method.
    Add a new call to the end of the `onCaptureCompleted` callback implementation,
    just after the `unlockFocus` class:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Camera2BasicFragment`类中，找到`captureStillPicture`方法。在`onCaptureCompleted`回调实现的末尾添加一个新的调用，就在`unlockFocus`类后面：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, add a provider to the `manifest` file (within the `application` section),
    which will allow you to share images on Facebook. The next chapter will discuss
    content providers. For now just append your app ID to the end of `FaceBookContentProvider`
    at `authorities`, replacing the zeros in the example shown here:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`manifest`文件中的`application`部分添加一个提供者，这将允许你在Facebook上分享图片。下一章将讨论内容提供者。现在只需在`authorities`的`FaceBookContentProvider`末尾添加你的应用ID，替换示例中的零：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Implement the `sharePictureOnFacebook` method. We will load the bitmap from
    the file. In a real app, we would have to calculate the required value for `inSampleSize`,
    but for the sake of simplicity, we will just use a fixed `inSampleSize` setting
    of `4` here. On most devices, this will be sufficient to avoid any `OutOfMemory`
    exceptions that may occur otherwise. Also, we will add the photo to the `share`
    dialog that will be displayed after taking a picture:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`sharePictureOnFacebook`方法。我们将从文件中加载位图。在真实的应用中，我们需要计算`inSampleSize`的所需值，但为了简单起见，我们在这里只使用固定的`inSampleSize`设置为`4`。在大多数设备上，这将足以避免其他情况下可能发生的任何`OutOfMemory`异常。此外，我们将在拍照后显示的`share`对话框中添加照片：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To be on the safe side, we want to create a unique file name for each picture.
    Modify the `onActivityCreated` method to do so:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了安全起见，我们希望为每张图片创建一个唯一的文件名。修改`onActivityCreated`方法以实现这一点：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The page will look like this on your Facebook timeline. Here it is shown in
    the Dutch language:![How to do it...](img/B04299_06_05.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Facebook时间轴上，页面会显示如下。这里是用荷兰语显示的：![操作步骤...](img/B04299_06_05.jpg)
- en: Run the app and share some sepia images on your own Facebook timeline!
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，在你自己的Facebook时间轴上分享一些棕褐色的图片！
- en: Our app is fully functional already, although it may require a few tweaks. On
    my Samsung device, all images that I have captured in portrait mode are rotated
    90 degrees. That is just a little bit too artistic. Let's fix it in the next recipe!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用已经完全可用，尽管可能需要一些调整。在我的三星设备上，我以竖屏模式拍摄的所有图像都旋转了90度。这有点太艺术了。让我们在下一个示例中修复它！
- en: Orientation issues
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方向问题
- en: On some devices (such as the Samsung ones), captured images in portrait mode
    are rotated 90degrees; and on other devices (such as the Nexus devices), things
    seem to be just fine. You won't notice this if you have a look at the file using
    the Astro app, for example, but you will if you see the preview in the Facebook
    **share** dialog.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些设备上（如三星设备），以竖屏模式捕获的图像会旋转90度；而在其他设备上（如Nexus设备），情况似乎很好。例如，如果你使用Astro应用查看文件，你可能不会注意到这一点，但如果你在Facebook的**share**对话框中预览，你就会注意到。
- en: This is a well-known challenge for many Android developers. Images may contain
    metadata about the rotation degree, but apparently not every app respects that
    metadata. What is the best solution? Should you rotate the image every time you
    want to display it? Should you rotate the bitmap itself, which could be very time
    and processor consuming?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是许多Android开发者都面临的一个众所周知的挑战。图像可能包含有关旋转角度的元数据，但显然并不是每个应用都尊重这些元数据。最好的解决方案是什么？每次显示图像时都应该旋转图像吗？应该旋转位图本身，这可能非常耗时和占用处理器吗？
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: For this recipe, you need to have the previous recipe completed successfully.
    It would be ideal if you had multiple Android devices to test your app on. Otherwise,
    it would be great if you had at least a Samsung device available, as the orientation
    issue can be reproduced for most (if not all) models from this brand.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，你需要成功完成之前的示例。最好如果你有多个Android设备来测试你的应用。否则，如果你至少有一台三星设备可用，那就太好了，因为这个品牌的大多数（如果不是全部）型号都可以重现方向问题。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s take a look at how you can fix this orientation issue if it appears:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果出现这个方向问题，你如何解决它：
- en: In the Facebook **share** dialog, the preview image is rotated 90 degrees (on
    some devices), as shown here:![How to do it...](img/B04299_06_06.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Facebook的**share**对话框中，预览图像会旋转90度（在一些设备上），如下所示：![操作步骤...](img/B04299_06_06.jpg)
- en: This does not look like the world I live in. It appears this way on my Samsung
    Galaxy Note 3 device, but not on my Nexus 5 device. Apparently, Samsung stores
    the picture as it is from a landscape point of view, and then adds metadata to
    it to indicate that the image has been rotated (compared to the default orientation).
    Things, however, will go wrong if you want to share it on Facebook, for example,
    as the orientation information in the metadata is not being respected.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这看起来不像我生活的世界。在我的三星Galaxy Note 3设备上是这样的，但在我的Nexus 5设备上不是。显然，三星将图片存储为从横向角度看的样子，然后向其中添加元数据以指示图像已经旋转（与默认方向相比）。然而，如果你想在Facebook上分享它，事情就会出错，因为元数据中的方向信息没有得到尊重。
- en: 'So, we need to examine the meta data and find out if there is any rotation
    information in there. Add the `getRotationFromMetaData` method:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，我们需要检查元数据，并找出其中是否有旋转信息。添加`getRotationFromMetaData`方法：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If needed, you have to rotate the bitmap before showing the sharing preview.
    That is where the `rotateCaptureImageIfNeeded` method comes in.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，您必须在显示共享预览之前旋转位图。这就是`rotateCaptureImageIfNeeded`方法的用处。
- en: 'Here, we can safely rotate the bitmap in memory, because of the `inSampleSet`
    value of `4`. If you rotate the original full-size bitmap, chances are that you
    will run out of memory. Either way, it is going to be time consuming and will
    result in a delay between capturing an image and displaying the sharing preview
    dialog:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以安全地在内存中旋转位图，因为`inSampleSet`值为`4`。如果旋转原始全尺寸位图，很可能会耗尽内存。无论哪种方式，都会耗费时间，并导致捕获图像和显示共享预览对话框之间的延迟：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, in the `sharePictureOnFacebook` method, right after you have retrieved
    the bitmap using the `BitmapFactory` class , call the `onRotateCaptureImageIfNeeded`
    method and pass the bitmap as a parameter:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`sharePictureOnFacebook`方法中，在使用`BitmapFactory`类检索位图后，调用`onRotateCaptureImageIfNeeded`方法，并将位图作为参数传递：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you run the app again, you will see that everything is fine in portrait mode
    too:![How to do it...](img/B04299_06_07.jpg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果再次运行应用程序，您会发现在纵向模式下一切都很好：![如何做...](img/B04299_06_07.jpg)
- en: These things are easy to implement and will improve the quality of your app,
    although they can also drive you nuts sometimes and make you wonder why one solution
    cannot just work on any device. Everything looks fine now, but what will it look
    like on a tablet or on a Huawei, LG, or HTC device? There's nothing that cannot
    be fixed, but since you do not have a drawerful of Android devices (or maybe you
    do), testing is hard.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些东西很容易实现，并且会提高您的应用程序的质量，尽管有时它们也会让您感到困惑，让您想知道为什么一个解决方案不能在任何设备上都正常工作。现在一切看起来都很好，但在平板电脑或华为、LG或HTC设备上会是什么样子呢？没有什么是不能解决的，但由于您没有一堆Android设备（或者也许您有），测试是困难的。
- en: It always is a good thing to test your app on as many devices as possible. Consider
    using a service for remote testing, for example, TestDroid. You can find their
    website at [www.testdroid.com](http://www.testdroid.com). In [Chapter 8](ch08.html
    "Chapter 8. Improving Quality"), *Improving quality*, this and other topics will
    be discussed, but first will we have a look at observables and content providers
    in the upcoming chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能在尽可能多的设备上测试您的应用程序总是一件好事。考虑使用远程测试服务，例如TestDroid。您可以在[www.testdroid.com](http://www.testdroid.com)找到他们的网站。在[第8章](ch08.html
    "第8章。提高质量")中，将讨论这些和其他主题，但首先我们将在即将到来的章节中看一下可观察对象和内容提供程序。
- en: There's more...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Capturing video is even more fun to do. There is also a Camera2 API sample for
    video capturing available. You can examine the sample project through the **Import
    sample** option as well.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 拍摄视频更有趣。还有一个用于视频捕获的Camera2 API示例可用。您也可以通过**导入示例**选项来检查示例项目。
- en: See also
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving quality*'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章。提高质量"), *提高质量*'
