["```js\nconst program = require('commander');\n```", "```js\nconsole.log(html);\n```", "```js\nconsole.debug('This will go to Standard Output');\nconsole.info('This will also go to Standard Output');\nconsole.warn('This will go to standard error');\nconsole.error('Same here');\n```", "```js\n$ node index.js > std.out 2> err.out\n$ cat std.out \nThis will go to Standard Output\nThis will also go to Standard Output\n$ cat err.out \nThis will go to standard error\nSame here\n```", "```js\nconst whatILike = 'cheese';\nconsole.log('I like %s', whatILike);\nconsole.log(`I like ${whatILike}`);\n```", "```js\nI like cheese\nI like cheese\n```", "```js\nconsole.assert(1 == 1, 'One is equal to one');\nconsole.assert(2 == 1, 'Oh no! One is not equal to two');\n```", "```js\nAssertion failed: Oh no! One is not equal to two\n```", "```js\nconsole.trace('You can easily find me.');\n```", "```js\nTrace: You can easily find me.\n\u00a0\u00a0\u00a0\u00a0at Object.<anonymous> (.../Lesson03/sample_globals/console.js:14:9)\n\u00a0\u00a0\u00a0\u00a0at Module._compile (internal/modules/cjs/loader.js:776:30)\n\u00a0\u00a0\u00a0\u00a0at Object.Module._extensions.js (internal/modules/cjs/loader.js:787:10)\n\u00a0\u00a0\u00a0\u00a0at Module.load (internal/modules/cjs/loader.js:653:32)\n\u00a0\u00a0\u00a0\u00a0at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\n\u00a0\u00a0\u00a0\u00a0at Function.Module._load (internal/modules/cjs/loader.js:585:3)\n\u00a0\u00a0\u00a0\u00a0at Function.Module.runMain (internal/modules/cjs/loader.js:829:12)\n\u00a0\u00a0\u00a0\u00a0at startup (internal/bootstrap/node.js:283:19)\n\u00a0\u00a0\u00a0\u00a0at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)\n```", "```js\nconst myTable = [\n\u00a0\u00a0{ name: 'John Doe', age: 10 },\n\u00a0\u00a0{ name: 'Jane Doe', age: 17 },\n];\n```", "```js\nconsole.table(myTable);\n```", "```js\nconsole.table(myTable, ['name']);\n```", "```js\nconsole.time();\nblockFor2Seconds();\nconsole.timeEnd();\n```", "```js\ndefault: 2000.911ms\n```", "```js\nconsole.time('Outer');\nconsole.time('Inner');\nblockFor2Seconds();\nconsole.timeEnd('Inner');\nconsole.timeEnd('Outer');\n```", "```js\nInner: 2000.304ms\nOuter: 2000.540ms\n```", "```js\nconsole.log(`This script is in: ${__dirname}`);\nconsole.log(`The full path for this file is: ${__filename}`);\n```", "```js\nThis script is in: /.../Lesson03/sample_globals\nThe full path for this file is: /.../Lesson03/sample_globals/dir_and_filename.js\n```", "```js\nconst start = Date.now();\nsetTimeout(() => {\n\u00a0\u00a0console.log('I'm ${Date.now() - start}ms late.');\n}, 1000);\n```", "```js\nconst secondTimer = setTimeout(() => {\n\u00a0\u00a0console.log(`I am ${Date.now() - start}ms late.');\n}, 3000);\nsetTimeout(() => {\n\u00a0\u00a0console.log(`Refreshing second timer at ${Date.now() - start}ms`);\n\u00a0\u00a0secondTimer.refresh();\n}, 2000);\n```", "```js\nRefreshing second timer at 2002ms\nI am 5004ms late.\n```", "```js\nconst thirdTimer = setTimeout(() => {\n\u00a0\u00a0console.log('I am never going to be executed.');\n}, 5000);\nsetTimeout(() => {\n\u00a0\u00a0console.log('Cancelling third timer at ${Date.now() - start}ms');\n\u00a0\u00a0clearTimeout(thirdTimer);\n}, 2000);\n```", "```js\nCancelling third timer at 2007ms\n```", "```js\nlet counter = 0;\nconst MAX = 5;\nconst start = Date.now();\nconst timeout = setInterval(() => {\n\u00a0\u00a0console.log(`Executing ${Date.now() - start}ms in the future.`);\n\u00a0\u00a0counter++\n\u00a0\u00a0if (counter >= MAX) {\n\u00a0\u00a0\u00a0\u00a0console.log(`Ran for too long, cancelling it at ${Date.now() - start}ms`);\n\u00a0\u00a0\u00a0\u00a0clearInterval(timeout);\n\u00a0\u00a0}\n}, 1000);\n```", "```js\nExecuting 1004ms in the future.\nExecuting 2009ms in the future.\nExecuting 3013ms in the future.\nExecuting 4018ms in the future.\nExecuting 5023ms in the future.\nRan for too long, cancelling it at 5023ms\n```", "```js\nconsole.log(`Arguments are:\\n${process.argv.join('\\n')}`);\n```", "```js\n$ node argv.js \nArguments are:\n/usr/local/bin/node\n/Users/visola/git/Professional-JavaScript/Lesson03/sample_globals/argv.js\n```", "```js\n$ node argv.js this is a test\nArguments are:\n/usr/local/bin/node\n/Users/visola/git/Professional-JavaScript/Lesson03/sample_globals/argv.js\nthis\nis\na\ntest\n```", "```js\n$ node argv.js 'this is a test'\nArguments are:\n/usr/local/bin/node\n/Users/visola/git/Professional-JavaScript/Lesson03/sample_globals/argv.js\nthis is a test\n```", "```js\nprogram.version('0.1.0')\n\u00a0\u00a0.option('-b, --add-bootstrap', 'Add Bootstrap 4 to the page.')\n\u00a0\u00a0.option('-c, --add-container', 'Adds a div with container id in the body.')\n\u00a0\u00a0.option('-t, --title [title]', 'Add a title to the page.')\n\u00a0\u00a0.parse(process.argv);\n```", "```js\nprocess.stdout.write(`You typed: '${text}'\\n`);\nprocess.stderr.write('Exiting your application now.\\n');\n```", "```js\nprocess.stdin.addListener('data', (data) => {\n\u00a0\u00a0...\n});\n```", "```js\nconst text = data.toString().trim();\n```", "```js\nprocess.stdout.write('Type something then press [ENTER]\\n');\nprocess.stdout.write('> ');\nprocess.stdin.addListener('data', (data) => {\n\u00a0\u00a0const text = data.toString().trim();\n\u00a0\u00a0process.stdout.write('You typed: '${text}'\\n');\n\u00a0\u00a0if (text == 'exit') {\n\u00a0\u00a0\u00a0\u00a0process.stderr.write('Exiting your application now.\\n');\n\u00a0\u00a0\u00a0\u00a0process.exit(0);\n\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0process.stdout.write('> ');\n\u00a0\u00a0}\n});\n```", "```js\n$ node read_input.js \nType something then press [ENTER]\n> test\nYou typed: 'test'\n> something\nYou typed: 'something'\n> exit\nYou typed: 'exit'\nExiting your application now.\n```", "```js\n    // Constants to calculate the interval based on time unit\n    const timeUnits = ['Seconds', 'Minutes', 'Hours'];\n    const multipliers = [1000, 60 * 1000, 3600 * 1000];\n    // Variables that will store the application state\n    let amount = null;\n    let message = null;\n    let timeUnit = null;\n    // Alias to print to console\n    const write = process.stdout.write.bind(process.stdout);\n    ```", "```js\n    function processInput(input) {\n    \u00a0\u00a0// Phase 1 - Collect message\n    \u00a0\u00a0if (message == null) {\n    \u00a0\u00a0\u00a0\u00a0askForMessage(input);\n    \u00a0\u00a0\u00a0\u00a0input = null;\n    \u00a0\u00a0}\n    \u00a0\u00a0// Phase 2 - Collect time unit\n    \u00a0\u00a0if (message != null && timeUnit == null) {\n    \u00a0\u00a0\u00a0\u00a0askForTimeUnit(input);\n    \u00a0\u00a0\u00a0\u00a0input = null;\n    \u00a0\u00a0}\n    \u00a0\u00a0// Phase 3 - Collect amount of time\n    \u00a0\u00a0if (timeUnit != null && amount == null) {\n    \u00a0\u00a0\u00a0\u00a0askForAmount(input);\n    \u00a0\u00a0}\n    }\n    ```", "```js\n    function askForMessage(input) {\n    \u00a0\u00a0if (input == null) {\n    \u00a0\u00a0\u00a0\u00a0write('What do you want to be reminded of? > ');\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0if (input.length == 0) {\n    \u00a0\u00a0\u00a0\u00a0write('Message cannot be empty. Please try again. > ');\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0message = input;\n    }\n    ```", "```js\n    function askForTimeUnit(input) {\n    \u00a0\u00a0if (input == null) {\n    \u00a0\u00a0\u00a0\u00a0console.log('What unit?');\n    \u00a0\u00a0\u00a0\u00a0timeUnits.forEach((unit, index) => console.log('${index + 1} - ${unit}') );\n    \u00a0\u00a0\u00a0\u00a0write('> ');\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0const index = parseInt(input, 10);\n    \u00a0\u00a0if (isNaN(index) || index <= 0 || index > timeUnits.length) {\n    \u00a0\u00a0\u00a0\u00a0write(`Sorry, '${input}' is not valid. Please try again. > `);\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n     timeUnit = index - 1;\n    \u00a0\u00a0console.log(`Picked: ${timeUnits[timeUnit]}`);\n    }\n    ```", "```js\n    function askForAmount(input) {\n    \u00a0\u00a0if (input == null) {\n    \u00a0\u00a0\u00a0\u00a0write(`In how many ${timeUnits[timeUnit]}? > `);\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0const number = parseInt(input, 10);\n    \u00a0\u00a0if (isNaN(number)) {\n    \u00a0\u00a0\u00a0\u00a0write(`Sorry, '${input}' is not valid. Try again. > `);\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0amount = number;\n    \u00a0\u00a0setTimerAndRestart();\n    }\n    ```", "```js\n    function setTimerAndRestart() {\n    \u00a0\u00a0const currentMessage = message;\n    \u00a0\u00a0write(`Setting reminder: '${message}' in ${amount} ${unit} from now.\\n`);\n    \u00a0\u00a0let timerMessage = `\\n\\x07Time to '${currentMessage}'\\n> `;\n    \u00a0\u00a0setTimeout(() => write(timerMessage), amount * multipliers[timeUnit]);\n    \u00a0\u00a0amount = message = timeUnit = null;\n    \u00a0\u00a0askForMessage();\n    }\n    ```", "```js\n    process.stdin.on('data', (data) => processInput(data.toString().trim()));\n    askForMessage();\n    ```", "```js\nprocess.stdin.addListener('data', (data) => {\n\u00a0\u00a0...\n});\n```", "```js\nconst fs = require('fs');\n```", "```js\nconst readStream = fs.createReadStream(__filename);\n```", "```js\nreadStream.on('data', (data) => console.log(`--data--\\n${data}`));\nreadStream.on('ready', () => console.log(`--ready--`));\nreadStream.on('close', () => console.log(`--close--`));\n```", "```js\n$ node read_stream.js \n--ready--\n--data--\nconst fs = require('fs');\nconst readStream = fs.createReadStream(__filename);\nreadStream.on('data', (data) => console.log(`--data--\\n${data}`));\nreadStream.on('ready', () => console.log(`--ready--`));\nreadStream.on('close', () => console.log(`--close--`));\n--close--\n```", "```js\nprocess.stdout.write('You typed: '${text}'\\n');\nprocess.stderr.write('Exiting your application now.\\n');\n```", "```js\nconst fs = require('fs');\nconst writable = fs.createWriteStream('todo.txt');\n```", "```js\nwritable.write('- Buy milk\\n');\nwritable.write('- Buy eggs\\n');\nwritable.write('- Buy cheese\\n');\n```", "```js\nwritable.end();\n```", "```js\nwritable.on('finish', () => console.log(\"-- finish --\"));\nwritable.on('close', () => console.log(\"-- close --\"));\n```", "```js\n$ node write_stream.js \n-- finish --\n-- close --\n$ cat todo.txt \n- Buy milk\n- Buy eggs\n- Buy cheese\n```", "```js\nconst writable = fs.createWriteStream('todo.txt', { flags: 'a'});\n```", "```js\nconst fs = require('fs');\nfs.createReadStream('somefile.txt')\n\u00a0\u00a0.pipe(fs.createWriteStream('copy.txt'));\n```", "```js\nconst firstDirectory = 'first';\nfs.mkdir(firstDirectory, (error) => {\n\u00a0\u00a0if (error != null) {\n\u00a0\u00a0\u00a0\u00a0console.error(`Error: ${error.message}`, error);\n\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0}\n\u00a0\u00a0console.log(`Directory created: ${firstDirectory}`);\n});\n```", "```js\n$ node directories_and_files.js\n...\nDirectory created: first\n```", "```js\n$ node directories_and_files.js \nError: EEXIST: file already exists, mkdir 'first' { [Error: EEXIST: file already exists, mkdir 'first'] errno: -17, code: 'EEXIST', syscall: 'mkdir', path: 'first' }\n...\n```", "```js\nconst firstDirectory = 'first';\nfs.mkdir(firstDirectory, (error) => {\n\u00a0\u00a0...\n});\nfs.writeFile(`${firstDirectory}/test.txt`, 'Some content', (error) => {\n\u00a0\u00a0console.assert(error == null, 'Error while creating file.', error);\n});\n```", "```js\n$ node directories_and_files.js \nAssertion failed: Error while creating file. { [Error: ENOENT: no such file or directory, open 'first/test.txt']\n...\n```", "```js\nconst firstDirectory = 'first';\nfs.mkdir(firstDirectory, (error) => {\n\u00a0\u00a0...\n\u00a0\u00a0fs.writeFile(`${firstDirectory}/test.txt`, 'Some content', (error) => {\n\u00a0\u00a0\u00a0\u00a0console.assert(error == null, 'Error while creating file.', error);\n\u00a0\u00a0});\n});\n```", "```js\nconst thirdDirectory = 'third';\nfs.mkdirSync(thirdDirectory);\nconsole.log(`Directory created: ${thirdDirectory}`);\nconst thirdFile = `${thirdDirectory}/test.txt`;\nfs.writeFileSync(thirdFile, 'Some content');\nconsole.log(`File created: ${thirdFile}`);\n```", "```js\n$ node directories_and_files.js \nDirectory created: third\nFile created: third/test.txt\n```", "```js\nfs.readdir('./', (error, files) => {\n\u00a0\u00a0if (error != null) {\n\u00a0\u00a0\u00a0\u00a0console.error('Error while reading directory.', error);\n\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0}\n\u00a0\u00a0console.log('-- File names --');\n\u00a0\u00a0console.log(files.join('\\n'));\n});\n```", "```js\n$ node list_dir.js \n-- File names --\n.gitignore\ncopy_file.js\ndirectories_and_files.js\nfirst\nlist_dir.js\nread_stream.js\nsecond\nthird\nwrite_stream.js\n...\n```", "```js\nfs.readdir('./', { withFileTypes: true }, (error, files) => {\n\u00a0\u00a0if (error != null) {\n\u00a0\u00a0\u00a0\u00a0console.error('Error while reading directory.', error);\n\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0}\n\u00a0\u00a0console.log('-- File infos --');\n\u00a0\u00a0console.log(files.map(d => `(${d.isDirectory() ? 'D': 'F'}) ${d.name}`)\n\u00a0\u00a0\u00a0\u00a0.sort()\n\u00a0\u00a0\u00a0\u00a0.join('\\n'));\n});\n```", "```js\n$ node list_dir.js \n...\n-- File infos --\n(D) first\n(D) second\n(D) third\n(F) .gitignore\n(F) copy_file.js\n(F) directories_and_files.js\n(F) list_dir.js\n(F) read_stream.js\n(F) write_stream.js\n```", "```js\nconst fs = require('fs');\nconst filename = process.argv[2];\nfs.access(filename, fs.constants.F_OK | fs.constants.R_OK, (error) => {\n\u00a0\u00a0if (error == null) {\n\u00a0\u00a0\u00a0\u00a0console.log('File exists and is readable');\n\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0console.log(error.message);\n\u00a0\u00a0}\n});\n```", "```js\n$ node file_status.js test.txt \nFile exists and is readable\n```", "```js\n$ node file_status.js not.txt \nENOENT: no such file or directory, access 'not.txt'\n```", "```js\n$ node file_status.js not.txt \nEACCES: permission denied, access 'not.txt'\n```", "```js\nfs.lstat(filename, (statError, stat) => {\n\u00a0\u00a0if (statError != null) {\n\u00a0\u00a0\u00a0\u00a0console.error('Error while file status.', statError);\n\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0}\n\u00a0\u00a0console.log(`Is file: ${stat.isFile()}`);\n\u00a0\u00a0console.log(`Is directory: ${stat.isDirectory()}`);\n\u00a0\u00a0console.log(`Created at: ${stat.birthtime}`);\n\u00a0\u00a0console.log(`Last modified at: ${stat.mtime}`);\n});\n```", "```js\n$ node file_status.js first/test.txt \n...\nIs file: true\nIs directory: false\nCreated at: Tue Aug 13 2019 20:39:37 GMT-0400 (Eastern Daylight Time)\nLast modified at: Tue Aug 13 2019 21:26:53 GMT-0400 (Eastern Daylight Time)\n```", "```js\n$ search '**/*.txt'\n```", "```js\n    $ npm install commander glob-to-regexp\n    npm notice created a lockfile as package-lock.json. You should commit this file.\n    + glob-to-regexp@0.4.1\n    + commander@3.0.0\n    added 2 packages from 2 contributors and audited 2 packages in 0.534s\n    found 0 vulnerabilities\n    ```", "```js\n    const fs = require('fs');\n    const globToRegExp = require('glob-to-regexp');\n    const join = require('path').join;\n    const program = require('commander');\n    ```", "```js\n    let counter = 0;\n    let found = 0;\n    const start = Date.now();\n    ```", "```js\n    \u00a0\u00a0\u00a0\u00a0\u00a0program.version('1.0.0')\n    \u00a0\u00a0.arguments('<glob>')\n    \u00a0\u00a0.option('-b, --base-dir <dir>', 'Base directory to start the search.', './')\n    \u00a0\u00a0.parse(process.argv);\n    ```", "```js\n    function walkDirectory(path, callback) {\n    \u00a0\u00a0const dirents = fs.readdirSync(path, { withFileTypes: true });\n    \u00a0\u00a0dirents.forEach(dirent => {\n    \u00a0\u00a0\u00a0\u00a0if (dirent.isDirectory()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0walkDirectory(join(path, dirent.name), callback);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0counter++;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0callback(join(path, dirent.name));\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0});\n    }\n    ```", "```js\n    const glob = program.args[0];\n    if (typeof glob === 'undefined') {\n    \u00a0\u00a0program.help();\n    \u00a0\u00a0process.exit(-1);\n    }\n    ```", "```js\n    const matcher = globToRegExp(program.args[0], { globstar: true });\n    ```", "```js\n    walkDirectory(program.baseDir, (f) => {\n    \u00a0\u00a0if (matcher.test(f)) {\n    \u00a0\u00a0\u00a0\u00a0found++;\n    \u00a0\u00a0\u00a0\u00a0console.log(`${found} - ${f}`);\n    \u00a0\u00a0}\n    });\n    ```", "```js\nconst http = require('http');\nconst server = http.createServer();\n```", "```js\nserver.on('request', (request, response) => {\n\u00a0\u00a0console.log('Request received.', request.url);\n\u00a0\u00a0response.writeHead(200, { 'Content-type': 'text/plain' });\n\u00a0\u00a0response.write('Hello world!');\n\u00a0\u00a0response.end();\n});\n```", "```js\nconst port = 3000;\nconsole.log('Starting server on port %d.', port);\nconsole.log('Go to: http://localhost:%d', port);\nserver.listen(port);\n```", "```js\n$ node http_server.js \nStarting server on port 3000.\nGo to: http://localhost:3000\n```", "```js\n$ node http_server.js \nStarting server on port 3000.\nGo to: http://localhost:3000\nRequest received. /\nRequest received. /favicon.ico\nRequest received. /index.html\nRequest received. /favicon.ico\n```", "```js\n    npm install mime\n    ```", "```js\n    const fs = require('fs');\n    const http = require('http');\n    const mime = require('mime');\n    const path = require('path');\n    const url = require('url');\n    ```", "```js\n    function walkDirectory(dirPath, callback) {\n    \u00a0\u00a0const dirents = fs.readdirSync(dirPath, { withFileTypes: true });\n    \u00a0\u00a0dirents.forEach(dirent => {\n    \u00a0\u00a0\u00a0\u00a0if (dirent.isDirectory()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0walkDirectory(path.join(dirPath, dirent.name), callback);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0callback(path.join(dirPath, dirent.name));\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0});\n    }\n    ```", "```js\n    const rootDirectory = path.resolve(process.argv[2] || './');\n    ```", "```js\n    const files = new Set();\n    walkDirectory(rootDirectory, (file) => {\n     file = file.substr(rootDirectory.length);\n    \u00a0\u00a0files.add(file);\n    });\n    console.log(`Found ${files.size} in '${rootDirectory}'...`);\n    ```", "```js\n    const server = http.createServer();\n    ```", "```js\n    server.on('request', (request, response) => {\n    ```", "```js\n    const requestUrl = url.parse(request.url);\n    const requestedPath = path.join(requestUrl.pathname);\n    ```", "```js\n    if (!files.has(requestedPath)) {\n    \u00a0\u00a0console.log('404 %s', requestUrl.href);\n    \u00a0\u00a0response.writeHead(404);\n    \u00a0\u00a0response.end();\n    \u00a0\u00a0return;\n    }\n    ```", "```js\n    \u00a0\u00a0const contentType = mime.getType(path.extname(requestedPath));\n    \u00a0\u00a0console.log('200 %s', requestUrl.href);\n    \u00a0\u00a0response.writeHead(200, { 'Content-type': contentType });\n    \u00a0\u00a0fs.createReadStream(path.join(rootDirectory, requestedPath))\n    \u00a0\u00a0\u00a0\u00a0.pipe(response);\n    });\n    ```", "```js\n    const port = 3000;\n    console.log('Starting server on port %d.', port);\n    console.log('Go to: http://localhost:%d', port);\n    server.listen(port);\n    ```", "```js\n    $ node .\n    Found 23 in '/Path/to/Folder'...\n    Starting server on port 3000.\n    o to: http://localhost:3000\n    ```", "```js\n    $ curl -i localhost:3000/index.js\n    HTTP/1.1 200 OK\n    Content-type: application/javascript\n    Date: Fri, 16 Aug 2019 02:06:05 GMT\n    Connection: keep-alive\n    Transfer-Encoding: chunked\n    const fs = require('fs');\n    const http = require('http');\n    const mime = require('mime');\n    ... rest of content here....\n    ```", "```js\n$ curl -i localhost:3000/not_real.js\nHTTP/1.1 404 Not Found\nDate: Fri, 16 Aug 2019 02:07:14 GMT\nConnection: keep-alive\nTransfer-Encoding: chunked\n```", "```js\n$ node .\nFound 23 in '/Path/to/Folder'...\nStarting server on port 3000\nGo to: http://localhost:3000\n200 /index.js\n404 /not_real.js\n```", "```js\nconst http = require('http');\n```", "```js\nconst request = http.get('http://httpbin.org/get', (response) => {\n```", "```js\nresponse.on('data', (data) => {\n\u00a0\u00a0console.log(data.toString());\n});\n```", "```js\nrequest.end();\n```", "```js\n$ node http_client_get.js \n{\n\u00a0\u00a0\"args\": {}, \n\u00a0\u00a0\"headers\": {\n\u00a0\u00a0\u00a0\u00a0\"Host\": \"httpbin.org\"\n\u00a0\u00a0}, \n\u00a0\u00a0\"origin\": \"100.0.53.211, 100.0.53.211\", \n\u00a0\u00a0\"url\": \"https://httpbin.org/get\"\n}\n```", "```js\nconst options = {\n\u00a0\u00a0auth: 'myuser:mypass',\n\u00a0\u00a0headers: {\n\u00a0\u00a0\u00a0\u00a0Test: 'Some Value'\n\u00a0\u00a0}\n};\n```", "```js\nconst request = http.get(url, options, (response) => {\n```", "```js\n$ node http_client_get_with_headers.js \n{\n\u00a0\u00a0\"args\": {}, \n\u00a0\u00a0\"headers\": {\n\u00a0\u00a0\u00a0\u00a0\"Authorization\": \"Basic bXl1c2VyOm15cGFzcw==\", \n\u00a0\u00a0\u00a0\u00a0\"Host\": \"httpbin.org\", \n\u00a0\u00a0\u00a0\u00a0\"Test\": \"Some Value\"\n\u00a0\u00a0}, \n\u00a0\u00a0\"origin\": \"100.0.53.211, 100.0.53.211\", \n\u00a0\u00a0\"url\": \"https://httpbin.org/get\"\n}\n```", "```js\nconst options = {\n\u00a0\u00a0method: 'POST',\n};\n```", "```js\nconst request = http.request(url, options, (response) => {\n```", "```js\nrequest.write('Hello world.');\n```", "```js\nrequest.end();\n```", "```js\n$ node http_client_post.js \n{\n\u00a0\u00a0\"args\": {}, \n\u00a0\u00a0\"data\": \"Hello world.\", \n\u00a0\u00a0\"files\": {}, \n\u00a0\u00a0\"form\": {}, \n\u00a0\u00a0\"headers\": {\n\u00a0\u00a0\u00a0\u00a0\"Content-Length\": \"12\", \n\u00a0\u00a0\u00a0\u00a0\"Host\": \"httpbin.org\"\n\u00a0\u00a0}, \n\u00a0\u00a0\"json\": null, \n\u00a0\u00a0\"origin\": \"100.0.53.211, 100.0.53.211\", \n\u00a0\u00a0\"url\": \"https://httpbin.org/post\"\n}\n```", "```js\n    $ npm init\n    ...\n    $ npm install handlebars mime\n    + handlebars@4.1.2\n    + mime@2.4.4\n    updated 2 packages and audited 10 packages in 1.075s\n    found 0 vulnerabilities\n    ```", "```js\n    const fs = require('fs');\n    const handlebars = require('handlebars');\n    const http = require('http');\n    const mime = require('mime');\n    const path = require('path');\n    const url = require('url');\n    ```", "```js\n    const staticDir = path.resolve(`${__dirname}/static`);\n    console.log(`Static resources from ${staticDir}`);\n    ```", "```js\n    const data = fs.readFileSync(`products.json`);\n    const products = JSON.parse(data.toString());\n    console.log(`Loaded ${products.length} products...`);\n    ```", "```js\n    handlebars.registerHelper('currency', (number) => `$${number.toFixed(2)}`);\n    ```", "```js\n    function initializeServer() {\n    \u00a0\u00a0const server = http.createServer();\n    \u00a0\u00a0server.on('request', handleRequest);\n    \u00a0\u00a0const port = 3000;\n    \u00a0\u00a0console.log('Go to: http://localhost:%d', port);\n    \u00a0\u00a0server.listen(port);\n    }\n    ```", "```js\n    function handleRequest(request, response) {\n    \u00a0\u00a0const requestUrl = url.parse(request.url);\n    \u00a0\u00a0const pathname = requestUrl.pathname;\n    \u00a0\u00a0if (pathname == '/' || pathname == '/index.html') {\n    \u00a0\u00a0\u00a0\u00a0handleProductsPage(requestUrl, response);\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0handleStaticFile(pathname, response);\n    }\n    ```", "```js\n    function handleStaticFile(pathname, response) {\n    \u00a0\u00a0// For security reasons, only serve files from static directory\n    \u00a0\u00a0const fullPath = path.join(staticDir, pathname);\n    \u00a0\u00a0// Check if file exists and is readable\n    \u00a0\u00a0fs.access(fullPath, fs.constants.R_OK, (error) => {\n    \u00a0\u00a0\u00a0\u00a0if (error) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error(`File is not readable: ${fullPath}`, error);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0response.writeHead(404);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0response.end();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const contentType = mime.getType(path.extname(fullPath));\n    \u00a0\u00a0\u00a0response.writeHead(200, { 'Content-type': contentType });\n    \u00a0\u00a0\u00a0\u00a0fs.createReadStream(fullPath)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(response);\n    \u00a0\u00a0});\n    }\n    ```", "```js\n    const htmlString = fs.readFileSync(`html/index.html`).toString();\n    const template = handlebars.compile(htmlString);\n    function handleProductsPage(requestUrl, response) {\n    \u00a0\u00a0response.writeHead(200);\n     response.write(template({ products: products }));\n    \u00a0\u00a0response.end();\n    }\n    ```", "```js\n    <html>\n    \u00a0\u00a0<head>\n    \u00a0\u00a0\u00a0\u00a0<link rel=\"stylesheet\" type=\"text/css\" href=\"css/semantic.min.css\" />\n    \u00a0\u00a0\u00a0\u00a0<link rel=\"stylesheet\" type=\"text/css\" href=\"css/store.css\" />\n    \u00a0\u00a0</head>\n    \u00a0\u00a0<body>\n    \u00a0\u00a0\u00a0\u00a0<section>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h1 class=\"title\">Welcome to Fresh Products Store!</h1>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"ui items\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{#products}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"item\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"image\"><img src=\"{{image}}\" /></div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"content\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<a class=\"header\">{{name}}</a>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"meta\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span>{{currency price}} / {{unit}}</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"description\">{{description}}</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"extra\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{#tags}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"ui label teal\">{{this}}</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{/tags}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{/products}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</section>\n    \u00a0\u00a0</body>\n    </html>\n    ```", "```js\n    initializeServer();\n    ```", "```js\n    $ node .\n    Static resources from\n    .../Lesson03/Exercise14/static\n    Loaded 21 products...\n    Go to: http://localhost:3000\n    ```", "```js\nconst http = require('https');\n```", "```js\nfunction downloadPage(urlToDownload, callback) {\n}\n```", "```js\nconst request = http.get(urlToDownload, (response) => {\n});\nrequest.end();\n```", "```js\nif (response.statusCode != 200) {\n\u00a0\u00a0console.error('Error while downloading page %s.', urlToDownload);\n\u00a0\u00a0console.error('Response was: %s %s', response.statusCode, response.statusMessage);\n\u00a0\u00a0return;\n}\n```", "```js\nlet content = '';\nresponse.on('data', (chunk) => content += chunk.toString());\nresponse.on('close', () => callback(content));\n```", "```js\ndownloadPage('https://medium.com/topic/javascript', (content) => {\n\u00a0\u00a0console.log(content);\n});\n```", "```js\nconst JSDOM = require('jsdom').JSDOM;\ndownloadPage('https://medium.com/topic/javascript', (content) => {\n const document = new JSDOM(content).window.document;\n\u00a0\u00a0Array.from(document.querySelectorAll('a'))\n\u00a0\u00a0\u00a0\u00a0.map((el) => el.text)\n\u00a0\u00a0\u00a0\u00a0.filter(s => s.trim() != '')\n\u00a0\u00a0\u00a0\u00a0.forEach((s) => console.log(s));\n});\n```", "```js\n$ node print_all_texts.js \nJavascript\nBecome a member\nSign in\n14 Beneficial Tips to Write Cleaner Code in React Apps\nBe a hygienic coder by writing cleaner\n14 Beneficial Tips to Write Cleaner Code in React Apps\nBe a hygienic coder by writing cleaner\n...\n```", "```js\n    $ npm init\n    ...\n    $ npm install jsdom\n    + jsdom@15.1.1\n    added 97 packages from 126 contributors and audited 140 packages in 12.278s\n    found 0 vulnerabilities\n    ```", "```js\n    const http = require('https');\n    const JSDOM = require('jsdom').JSDOM;\n    const url = require('url');\n    ```", "```js\n    const topics = [\n    \u00a0\u00a0'artificial-intelligence',\n    \u00a0\u00a0'data-science',\n    \u00a0\u00a0'javascript',\n    \u00a0\u00a0'programming',\n    \u00a0\u00a0'software-engineering',\n    ];\n    ```", "```js\n    function downloadPage(urlToDownload, callback) {\n    \u00a0\u00a0const request = http.get(urlToDownload, (response) => {\n    \u00a0\u00a0\u00a0\u00a0if (response.statusCode != 200) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error('Error while downloading page %s.', urlToDownload);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error('Response was: %s %s', response.statusCode, response.statusMessage);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0let content = '';\n    \u00a0\u00a0\u00a0\u00a0response.on('data', (chunk) => content += chunk.toString());\n    \u00a0\u00a0\u00a0\u00a0response.on('close', () => callback(content));\n    \u00a0\u00a0});\n    \u00a0\u00a0request.end();\n    }\n    ```", "```js\n    topics.forEach(topic => {\n    \u00a0\u00a0downloadPage(`https://medium.com/topic/${topic}`, (content) => {\n    \u00a0\u00a0\u00a0\u00a0const articles = findArticles(new JSDOM(content).window.document);\n    \u00a0\u00a0\u00a0\u00a0Object.values(articles)\n    \u00a0\u00a0\u00a0\u00a0\u00a0.forEach(printArticle);\n    \u00a0\u00a0});\n    });\n    ```", "```js\n    function findArticles(document) {\n    \u00a0\u00a0const articles = {};\n    \u00a0\u00a0Array.from(document.querySelectorAll('h1 a, h3 a'))\n    ```", "```js\n    .filter(el => {\n    \u00a0\u00a0const parsedUrl = url.parse(el.href);\n    \u00a0\u00a0const split = parsedUrl.pathname.split('/').filter((s) => s.trim() != '');\n    \u00a0\u00a0return split.length == 2;\n    })\n    ```", "```js\n    .forEach(el => {\n    \u00a0\u00a0const description = el.parentNode.nextSibling.querySelector('p a').text;\n    \u00a0\u00a0articles[el.text] = {\n    \u00a0\u00a0\u00a0\u00a0description: description,\n    \u00a0\u00a0\u00a0\u00a0link: url.parse(el.href).pathname,\n    \u00a0\u00a0\u00a0\u00a0title: el.text,\n     };\n    });\n    ```", "```js\n    \u00a0\u00a0return articles;\n    }\n    ```", "```js\n    function printArticle(article) {\n    \u00a0\u00a0console.log('-----');\n    \u00a0\u00a0console.log(` ${article.title}`);\n    \u00a0\u00a0console.log(` ${article.description}`);\n    \u00a0\u00a0console.log(` https://medium.com${article.link}`);\n    }\n    ```", "```js\n$ node .\nDownloading http://localhost:3000...\nDownload finished.\nParsing product data...\n.....................\nFound 21 products.\nWriting data to products.csv...\nDone.\n$ cat products.csv \nname,price,unit\nApples,3.99,lb\nAvocados,4.99,lb\nBlueberry Muffin,2.5,each\nButter,1.39,lb\nCherries,4.29,lb\nChocolate Chips Cookies,3.85,lb\nChristmas Cookies,3.89,lb\nCroissant,0.79,each\nDark Chocolate,3.49,lb\nEggs,2.99,lb\nGrapes,2.99,lb\nMilk Chocolate,3.29,lb\nNacho Chips,2.39,lb\nParmesan Cheese,8.99,lb\nPears,4.89,lb\nPetit French Baguette,0.39,each\nSmiling Cookies,2.79,lb\nStrawberries,7.29,lb\nSwiss Cheese,2.59,lb\nWhite Chocolate,3.49,lb\nWhole Wheat Bread,0.89,each\n```"]