["```\ntodobackend> tree -L 2\n.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 coverage.xml\n    \u251c\u2500\u2500 db.sqlite3\n    \u251c\u2500\u2500 manage.py\n    \u251c\u2500\u2500 requirements.txt\n    \u251c\u2500\u2500 requirements_test.txt\n    \u251c\u2500\u2500 todo\n    \u251c\u2500\u2500 todobackend\n    \u2514\u2500\u2500 unittests.xml\n\n3 directories, 8 files\n```", "```\n# Test stage\nFROM alpine AS test\nLABEL application=todobackend\n```", "```\n# Test stage\nFROM alpine AS test\nLABEL application=todobackend\n\n# Install basic utilities\nRUN apk add --no-cache bash git\n# Install build dependencies RUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev\nRUN pip3 install wheel\n```", "```\n# Test stage\nFROM alpine AS test\nLABEL application=todobackend\n\n# Install basic utilities\nRUN apk add --no-cache bash git\n\n# Install build dependencies\nRUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev\nRUN pip3 install wheel\n\n# Copy requirements\nCOPY /src/requirements* /build/\nWORKDIR /build\n\n# Build and install requirements\nRUN pip3 wheel -r requirements_test.txt --no-cache-dir --no-input\nRUN pip3 install -r requirements_test.txt -f /build --no-index --no-cache-dir\n```", "```\n# Test stage\nFROM alpine AS test\nLABEL application=todobackend\n\n# Install basic utilities\nRUN apk add --no-cache bash git\n\n# Install build dependencies\nRUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev\nRUN pip3 install wheel\n\n# Copy requirements\nCOPY /src/requirements* /build/\nWORKDIR /build\n\n# Build and install requirements\nRUN pip3 wheel -r requirements_test.txt --no-cache-dir --no-input\nRUN pip3 install -r requirements_test.txt -f /build --no-index --no-cache-dir\n\n# Copy source code COPY /src /app\nWORKDIR /app # Test entrypoint CMD [\"python3\", \"manage.py\", \"test\", \"--noinput\", \"--settings=todobackend.settings_test\"]\n```", "```\n> docker build --target test -t todobackend-test . Sending build context to Docker daemon 311.8kB\nStep 1/12 : FROM alpine AS test\n ---> 3fd9065eaf02\nStep 2/12 : LABEL application=todobackend\n ---> Using cache\n ---> afdd1dee07d7\nStep 3/12 : RUN apk add --no-cache bash git\n ---> Using cache\n ---> d9cd912ffa68\nStep 4/12 : RUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev\n ---> Using cache\n ---> 89113207b0b8\nStep 5/12 : RUN pip3 install wheel\n ---> Using cache\n ---> a866d3b1f3e0\nStep 6/12 : COPY /src/requirements* /build/\n ---> Using cache\n ---> efc869447227\nStep 7/12 : WORKDIR /build\n ---> Using cache\n ---> 53ced29de259\nStep 8/12 : RUN pip3 wheel -r requirements_test.txt --no-cache-dir --no-input\n ---> Using cache\n ---> ba6d114360b9\nStep 9/12 : RUN pip3 install -r requirements_test.txt -f /build --no-index --no-cache-dir\n ---> Using cache\n ---> ba0ebdace940\nStep 10/12 : COPY /src /app\n ---> Using cache\n ---> 9ae5c85bc7cb\nStep 11/12 : WORKDIR /app\n ---> Using cache\n ---> aedd8073c9e6\nStep 12/12 : CMD [\"python3\", \"manage.py\", \"test\", \"--noinput\", \"--settings=todobackend.settings_test\"]\n ---> Using cache\n ---> 3ed637e47056\nSuccessfully built 3ed637e47056\nSuccessfully tagged todobackend-test:latest\n```", "```\ntodobackend>  docker run -it --rm todobackend-test\nCreating test database for alias 'default'...\n\nEnsure we can create a new todo item\n- item has correct title\n- item was created\n- received 201 created status code\n- received location header hyperlink\n\nEnsure we can delete all todo items\n- all items were deleted\n- received 204 no content status code\n\nEnsure we can delete a todo item\n- received 204 no content status code\n- the item was deleted\n\nEnsure we can update an existing todo item using PATCH\n- item was updated\n- received 200 ok status code\n\nEnsure we can update an existing todo item using PUT\n- item was updated\n- received 200 created status code\n----------------------------------------------------------------------\nXML: /app/unittests.xml\nName                              Stmts   Miss  Cover\n-----------------------------------------------------\ntodo/__init__.py                      0      0   100%\ntodo/admin.py                         1      1     0%\ntodo/migrations/0001_initial.py       5      0   100%\ntodo/migrations/__init__.py           0      0   100%\ntodo/models.py                        6      6     0%\ntodo/serializers.py                   7      0   100%\ntodo/urls.py                          6      0   100%\ntodo/views.py                        17      0   100%\n-----------------------------------------------------\nTOTAL                                42      7    83%\n----------------------------------------------------------------------\nRan 12 tests in 0.433s\n\nOK\n\nDestroying test database for alias 'default'...\n```", "```\n# Test stage\nFROM alpine AS test\nLABEL application=todobackend\n.........\n...# Test entrypointCMD [\"python3\", \"manage.py\", \"test\", \"--noinput\", \"--settings=todobackend.settings_test\"]\n\n# Release stage\nFROM alpine\nLABEL application=todobackend\n\n# Install operating system dependencies\nRUN apk add --no-cache python3 mariadb-client bash\n```", "```\n# Test stage\n...\n...\n# Release stage\nFROM alpine\nLABEL application=todobackend\n\n# Install operating system dependencies\nRUN apk add --no-cache python3 mariadb-client bash\n\n# Create app user\nRUN addgroup -g 1000 app && \\\n adduser -u 1000 -G app -D app\n```", "```\n# Test stage\n...\n...\n# Release stage\nFROM alpine\nLABEL application=todobackend\n\n# Install operating system dependencies\nRUN apk add --no-cache python3 mariadb-client bash\n\n# Create app user\nRUN addgroup -g 1000 app && \\\n    adduser -u 1000 -G app -D app\n\n# Copy and install application source and pre-built dependencies\nCOPY --from=test --chown=app:app /build /build\nCOPY --from=test --chown=app:app /app /app\nRUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir\nRUN rm -rf /build\n\n# Set working directory and application user\nWORKDIR /app\nUSER app\n```", "```\n> docker build -t todobackend-release . Sending build context to Docker daemon 312.8kB\nStep 1/22 : FROM alpine AS test\n ---> 3fd9065eaf02\n...\n...\nStep 13/22 : FROM alpine\n ---> 3fd9065eaf02\nStep 14/22 : LABEL application=todobackend\n ---> Using cache\n ---> afdd1dee07d7\nStep 15/22 : RUN apk add --no-cache python3 mariadb-client bash\n ---> Using cache\n ---> dfe0b6487459\nStep 16/22 : RUN addgroup -g 1000 app && adduser -u 1000 -G app -D app\n ---> Running in d75df9cadb1c\nRemoving intermediate container d75df9cadb1c\n ---> ac26efcbfea0\nStep 17/22 : COPY --from=test --chown=app:app /build /build\n ---> 1f177a92e2c9\nStep 18/22 : COPY --from=test --chown=app:app /app /app\n ---> ba8998a31f1d\nStep 19/22 : RUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir\n ---> Running in afc44357fae2\nLooking in links: /build\nCollecting Django==2.0 (from -r /build/requirements.txt (line 1))\nCollecting django-cors-headers==2.1.0 (from -r /build/requirements.txt (line 2))\nCollecting djangorestframework==3.7.3 (from -r /build/requirements.txt (line 3))\nCollecting mysql-connector-python==8.0.11 (from -r /build/requirements.txt (line 4))\nCollecting pytz==2017.3 (from -r /build/requirements.txt (line 5))\nCollecting uwsgi (from -r /build/requirements.txt (line 6))\nCollecting protobuf>=3.0.0 (from mysql-connector-python==8.0.11->-r /build/requirements.txt (line 4))\nRequirement already satisfied: setuptools in /usr/lib/python3.6/site-packages (from protobuf>=3.0.0->mysql-connector-python==8.0.11->-r /build/requirements.txt (line 4)) (28.8.0)\nCollecting six>=1.9 (from protobuf>=3.0.0->mysql-connector-python==8.0.11->-r /build/requirements.txt (line 4))\nInstalling collected packages: pytz, Django, django-cors-headers, djangorestframework, six, protobuf, mysql-connector-python, uwsgi\nSuccessfully installed Django-2.0 django-cors-headers-2.1.0 djangorestframework-3.7.3 mysql-connector-python-8.0.11 protobuf-3.6.0 pytz-2017.3 six-1.11.0 uwsgi-2.0.17\nRemoving intermediate container afc44357fae2\n ---> ab2bcf89fe13\nStep 20/22 : RUN rm -rf /build\n ---> Running in 8b8006ea8636\nRemoving intermediate container 8b8006ea8636\n ---> ae7f157d29d1\nStep 21/22 : WORKDIR /app\nRemoving intermediate container fbd49835ca49\n ---> 55856af393f0\nStep 22/22 : USER app\n ---> Running in d57b2cb9bb69\nRemoving intermediate container d57b2cb9bb69\n ---> 8170e923b09a\nSuccessfully built 8170e923b09a\nSuccessfully tagged todobackend-release:latest\n```", "```\n> docker run -it --rm -p 8000:8000 todobackend-release uwsgi \\\n    --http=0.0.0.0:8000 --module=todobackend.wsgi --master *** Starting uWSGI 2.0.17 (64bit) on [Tue Jul 3 11:44:44 2018] ***\ncompiled with version: 6.4.0 on 02 July 2018 14:34:31\nos: Linux-4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018\nnodename: 5be4dd1ddab0\nmachine: x86_64\nclock source: unix\ndetected number of CPU cores: 1\ncurrent working directory: /app\ndetected binary path: /usr/bin/uwsgi\n!!! no internal routing support, rebuild with pcre support !!!\nyour memory page size is 4096 bytes\ndetected max file descriptor number: 1048576\nlock engine: pthread robust mutexes\nthunder lock: disabled (you can enable it with --thunder-lock)\nuWSGI http bound on 0.0.0.0:8000 fd 4\nuwsgi socket 0 bound to TCP address 127.0.0.1:35765 (port auto-assigned) fd 3\nPython version: 3.6.3 (default, Nov 21 2017, 14:55:19) [GCC 6.4.0]\n*** Python threads support is disabled. You can enable it with --enable-threads ***\nPython main interpreter initialized at 0x55e9f66ebc80\nyour server socket listen backlog is limited to 100 connections\nyour mercy for graceful operations on workers is 60 seconds\nmapped 145840 bytes (142 KB) for 1 cores\n*** Operational MODE: single process ***\nWSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x55e9f66ebc80 pid: 1 (default app)\n*** uWSGI is running in multiple interpreter mode ***\nspawned uWSGI master process (pid: 1)\nspawned uWSGI worker 1 (pid: 7, cores: 1)\nspawned uWSGI http 1 (pid: 8)\n```", "```\n> curl -s localhost:8000/todos | jq\n[\n {\n \"url\": \"http://localhost:8000/todos/1\",\n \"title\": \"Walk the dog\",\n \"completed\": false,\n \"order\": 1\n },\n {\n \"url\": \"http://localhost:8000/todos/2\",\n \"title\": \"Wash the car\",\n \"completed\": true,\n \"order\": 2\n }\n]\n```", "```\n# Ignore SQLite database files\n**/***.sqlite3\n\n# Ignore test output and private code coverage files\n**/*.xml\n**/.coverage\n\n# Ignore compiled Python source files\n**/*.pyc\n**/pycache# Ignore macOS directory metadata files\n**/.DS_Store\n\n```", "```\nversion: '2.4'\n\nservices:\n  test:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: test\n  release:\n    build:\n      context: .\n      dockerfile: Dockerfile\n```", "```\n> docker-compose build test\nBuilding test\nStep 1/12 : FROM alpine AS test\n ---> 3fd9065eaf02\nStep 2/12 : LABEL application=todobackend\n ---> Using cache\n ---> 23e0c2657711\n...\n...\nStep 12/12 : CMD [\"python3\", \"manage.py\", \"test\", \"--noinput\", \"--settings=todobackend.settings_test\"]\n ---> Running in 1ac9bded79bf\nRemoving intermediate container 1ac9bded79bf\n ---> f42d0d774c23\n\nSuccessfully built f42d0d774c23\nSuccessfully tagged todobackend_test:latest\n```", "```\n> docker-compose run test\nCreating network \"todobackend_default\" with the default driver\nnosetests --verbosity=2 --nologcapture --with-coverage --cover-package=todo --with-spec --spec-color --with-xunit --xunit-file=./unittests.xml --cover-xml --cover-xml-file=./coverage.xml\nCreating test database for alias 'default'...\n\nEnsure we can create a new todo item\n- item has correct title\n- item was created\n- received 201 created status code\n- received location header hyperlink\n...\n...\n...\n...\nRan 12 tests in 0.316s\n\nOK\n\nDestroying test database for alias 'default'...\n```", "```\nversion: '2.4'\n\nservices:\n  test:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: test\n  release:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n - 8000:8000\n command:\n - uwsgi\n - --http=0.0.0.0:8000\n - --module=todobackend.wsgi\n - --master\n```", "```\n> docker-compose up release\nBuilding release\nStep 1/22 : FROM alpine AS test\n ---> 3fd9065eaf02\nStep 2/22 : LABEL application=todobackend\n ---> Using cache\n ---> 23e0c2657711\n...\n...\n\nSuccessfully built 5b20207e3e9c\nSuccessfully tagged todobackend_release:latest\nWARNING: Image for service release was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating todobackend_release_1 ... done\nAttaching to todobackend_release_1\n...\n...\nrelease_1 | *** uWSGI is running in multiple interpreter mode ***\nrelease_1 | spawned uWSGI master process (pid: 1)\nrelease_1 | spawned uWSGI worker 1 (pid: 6, cores: 1)\nrelease_1 | spawned uWSGI http 1 (pid: 7)\n```", "```\nversion: '2.4'\n\nservices:\n  test:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: test\n  release:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - 8000:8000\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n  db:\n image: mysql:5.7\n environment:\n MYSQL_DATABASE: todobackend\n MYSQL_USER: todo\n MYSQL_PASSWORD: password\n MYSQL_ROOT_PASSWORD: password\n```", "```\n# Import base settings\nfrom .settings import *\nimport os\n\n# Disable debug\nDEBUG = True\n\n# Set secret key\nSECRET_KEY = os.environ.get('SECRET_KEY', SECRET_KEY)\n\n# Must be explicitly specified when Debug is disabled\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')\n\n# Database settings\nDATABASES = {\n    'default': {\n        'ENGINE': 'mysql.connector.django',\n        'NAME': os.environ.get('MYSQL_DATABASE','todobackend'),\n        'USER': os.environ.get('MYSQL_USER','todo'),\n        'PASSWORD': os.environ.get('MYSQL_PASSWORD','password'),\n        'HOST': os.environ.get('MYSQL_HOST','localhost'),\n        'PORT': os.environ.get('MYSQL_PORT','3306'),\n    },\n    'OPTIONS': {\n      'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"\n    }\n}\n\nSTATIC_ROOT = os.environ.get('STATIC_ROOT', '/public/static')\nMEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/public/media')\n```", "```\nversion: '2.4'\n\nservices:\n  test:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: test\n  release:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - 8000:8000\n depends_on:\n db:\n condition: service_healthy\n    environment:\n DJANGO_SETTINGS_MODULE: todobackend.settings_release\n MYSQL_HOST: db\n MYSQL_USER: todo\n MYSQL_PASSWORD: password\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n  db:\n    image: mysql:5.7\n healthcheck:\n test: mysqlshow -u $$MYSQL_USER -p$$MYSQL_PASSWORD\n      interval: 3s\n      retries: 10\n    environment:\n      MYSQL_DATABASE: todobackend\n      MYSQL_USER: todo\n      MYSQL_PASSWORD: password\n      MYSQL_ROOT_PASSWORD: password\n```", "```\n> docker-compose down -v\nRemoving todobackend_release_1 ... done\nRemoving todobackend_test_run_1 ... done\nRemoving network todobackend_default\n> docker-compose up release Creating network \"todobackend_default\" with the default driver\nPulling db (mysql:5.7)...\n5.7: Pulling from library/mysql\n683abbb4ea60: Pull complete\n0550d17aeefa: Pull complete\n7e26605ddd77: Pull complete\n9882737bd15f: Pull complete\n999c06ab75f6: Pull complete\nc71d695f9937: Pull complete\nc38f847c1491: Pull complete\n74f9c61f40bf: Pull complete\n30b252a90a12: Pull complete\n9f92ebb7da55: Pull complete\n90303981d276: Pull complete\nDigest: sha256:1203dfba2600f140b74e375a354b1b801fa1b32d6f80fdee5f155d1e9f38c841\nStatus: Downloaded newer image for mysql:5.7\nCreating todobackend_db_1 ... done\nCreating todobackend_release_1 ... done\nAttaching to todobackend_release_1\nrelease_1 | *** Starting uWSGI 2.0.17 (64bit) on [Thu Jul 5 07:45:38 2018] ***\nrelease_1 | compiled with version: 6.4.0 on 04 July 2018 11:33:09\nrelease_1 | os: Linux-4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018\n...\n... *** uWSGI is running in multiple interpreter mode ***\nrelease_1 | spawned uWSGI master process (pid: 1)\nrelease_1 | spawned uWSGI worker 1 (pid: 7, cores: 1)\nrelease_1 | spawned uWSGI http 1 (pid: 8)\n```", "```\n> docker-compose down -v ...\n...\n> docker-compose run release python3 manage.py migrate\nCreating network \"todobackend_default\" with the default driver\nCreating todobackend_db_1 ... done\nTraceback (most recent call last):\n  File \"/usr/lib/python3.6/site-packages/mysql/connector/network.py\", line 515, in open_connection\n    self.sock.connect(sockaddr)\nConnectionRefusedError: [Errno 111] Connection refused\n...\n...\n```", "```\nversion: '2.4'\n\nservices:\n  test:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: test\n  release:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    environment:\n      DJANGO_SETTINGS_MODULE: todobackend.settings_release\n      MYSQL_HOST: db\n      MYSQL_USER: todo\n      MYSQL_PASSWORD: password\n  app:\n extends:\n service: release\n depends_on:\n db:\n condition: service_healthy\n ports:\n - 8000:8000\n command:\n - uwsgi\n - --http=0.0.0.0:8000\n - --module=todobackend.wsgi\n - --master\n  migrate:\n extends:\n service: release\n depends_on:\n db:\n condition: service_healthy\n command:\n - python3\n - manage.py\n - migrate\n - --no-input\n  db:\n    image: mysql:5.7\n    healthcheck:\n      test: mysqlshow -u $$MYSQL_USER -p$$MYSQL_PASSWORD\n      interval: 3s\n      retries: 10\n    environment:\n      MYSQL_DATABASE: todobackend\n      MYSQL_USER: todo\n      MYSQL_PASSWORD: password\n      MYSQL_ROOT_PASSWORD: password\n```", "```\n> docker-compose down -v ...\n...\n> docker-compose up migrate\nCreating network \"todobackend_default\" with the default driver\nBuilding migrate\nStep 1/24 : FROM alpine AS test\n ---> 3fd9065eaf02\n...\n...\nSuccessfully built 5b20207e3e9c\nSuccessfully tagged todobackend_migrate:latest\nWARNING: Image for service migrate was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating todobackend_db_1 ... done\nCreating todobackend_migrate_1 ... done\nAttaching to todobackend_migrate_1\nmigrate_1 | Operations to perform:\nmigrate_1 | Apply all migrations: admin, auth, contenttypes, sessions, todo\nmigrate_1 | Running migrations:\nmigrate_1 | Applying contenttypes.0001_initial... OK\nmigrate_1 | Applying auth.0001_initial... OK\nmigrate_1 | Applying admin.0001_initial... OK\nmigrate_1 | Applying admin.0002_logentry_remove_auto_add... OK\nmigrate_1 | Applying contenttypes.0002_remove_content_type_name... OK\nmigrate_1 | Applying auth.0002_alter_permission_name_max_length... OK\nmigrate_1 | Applying auth.0003_alter_user_email_max_length... OK\nmigrate_1 | Applying auth.0004_alter_user_username_opts... OK\nmigrate_1 | Applying auth.0005_alter_user_last_login_null... OK\nmigrate_1 | Applying auth.0006_require_contenttypes_0002... OK\nmigrate_1 | Applying auth.0007_alter_validators_add_error_messages... OK\nmigrate_1 | Applying auth.0008_alter_user_username_max_length... OK\nmigrate_1 | Applying auth.0009_alter_user_last_name_max_length... OK\nmigrate_1 | Applying sessions.0001_initial... OK\nmigrate_1 | Applying todo.0001_initial... OK\ntodobackend_migrate_1 exited with code 0\n> docker-compose up app\nBuilding app\nStep 1/24 : FROM alpine AS test\n ---> 3fd9065eaf02\n...\n...\nSuccessfully built 5b20207e3e9c\nSuccessfully tagged todobackend_app:latest\nWARNING: Image for service app was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\ntodobackend_db_1 is up-to-date\nCreating todobackend_app_1 ... done\nAttaching to todobackend_app_1\napp_1 | *** Starting uWSGI 2.0.17 (64bit) on [Thu Jul 5 11:21:00 2018] ***\napp_1 | compiled with version: 6.4.0 on 04 July 2018 11:33:09\napp_1 | os: Linux-4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018\n...\n...\n```", "```\n> curl -s localhost:8000/todos | jq\n[]\n```", "```\nversion: '2.4'\n\nvolumes:\n public:\n driver: local\n\nservices:\n  test:\n    ...\n    ...\n  release:\n    ...\n    ...\n  app:\n    extends:\n      service: release\n    depends_on:\n      db:\n        condition: service_healthy\n    volumes:\n - public:/public\n    ports:\n      - 8000:8000\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n - --check-static=/public\n  migrate:\n    ...\n    ...\n  db:\n    ...\n    ...\n```", "```\n> docker-compose down -v ...\n...\n> docker-compose up migrate\n...\n...\n> docker-compose run app python3 manage.py collectstatic --no-input\nStarting todobackend_db_1 ... done\nCopying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/prepopulate.js'\nTraceback (most recent call last):\n  File \"manage.py\", line 15, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/usr/lib/python3.6/site-packages/django/core/management/__init__.py\", line 371, in execute_from_command_line\n    utility.execute()\n...\n...\nPermissionError: [Errno 13] Permission denied: '/public/static'\n```", "```\n# Test stage\n...\n...\n# Release stage\nFROM alpine\nLABEL application=todobackend\n...\n...\n# Copy and install application source and pre-built dependencies\nCOPY --from=test --chown=app:app /build /build\nCOPY --from=test --chown=app:app /app /app\nRUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir\nRUN rm -rf /build\n\n# Create public volume\nRUN mkdir /public\nRUN chown app:app /public\nVOLUME /public\n\n# Set working directory and application user\nWORKDIR /app\nUSER app\n```", "```\n> docker-compose down -v\n...\n...\n> docker-compose build Building test\nStep 1/13 : FROM alpine AS test\n...\n...\nBuilding release\n...\n...\nBuilding app\n...\n...\nBuilding migrate\n...\n...\n> docker-compose up migrate\n...\n...\n> docker-compose run app python3 manage.py collectstatic --no-input\nCopying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/prepopulate.js'\nCopying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/SelectFilter2.js'\nCopying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/change_form.js'\nCopying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/inlines.min.js'\n...\n...\n> docker-compose up app\n```", "```\nsetup() {\n  url=${APP_URL:-localhost:8000}\n  item='{\"title\": \"Wash the car\", \"order\": 1}'\n  location='Location: ([^[:space:]]*)'\n  curl -X DELETE $url/todos\n}\n\n@test \"todobackend root\" {\n  run curl -oI -s -w \"%{http_code}\" $APP_URL\n  [ $status = 0 ]\n  [ $output = 200 ]\n}\n\n@test \"todo items returns empty list\" {\n  run jq '. | length' <(curl -s $url/todos)\n  [ $output = 0 ]\n}\n\n@test \"create todo item\" {\n  run curl -i -X POST -H \"Content-Type: application/json\" $url/todos -d \"$item\"\n  [ $status = 0 ]\n  [[ $output =~ \"201 Created\" ]] || false\n  [[ $output =~ $location ]] || false\n  [ $(curl ${BASH_REMATCH[1]} | jq '.title') = $(echo \"$item\" | jq '.title') ]\n}\n\n@test \"delete todo item\" {\n  run curl -i -X POST -H \"Content-Type: application/json\" $url/todos -d \"$item\"\n  [ $status = 0 ]\n  [[ $output =~ $location ]] || false\n  run curl -i -X DELETE ${BASH_REMATCH[1]}\n  [ $status = 0 ]\n  [[ $output =~ \"204 No Content\" ]] || false\n  run jq '. | length' <(curl -s $APP_URL/todos)\n  [ $output = 0 ]\n}\n```", "```\n# Test stage\nFROM alpine AS test\nLABEL application=todobackend\n...\n...\n# Release stage\nFROM alpine\nLABEL application=todobackend\n\n# Install dependencies\nRUN apk add --no-cache python3 mariadb-client bash curl bats jq\n...\n...\n```", "```\nversion: '2.4'\n\nvolumes:\n  public:\n    driver: local\n\nservices:\n  test:\n    ...\n    ...\n  release:\n    ...\n    ...\n  app:\n    extends:\n      service: release\n    depends_on:\n      db:\n        condition: service_healthy\n    volumes:\n      - public:/public\n healthcheck:\n test: curl -fs localhost:8000\n      interval: 3s\n retries: 10\n    ports:\n      - 8000:8000\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n      - --check-static=/public\n  acceptance:\n extends:\n service: release\n depends_on:\n app:\n condition: service_healthy\n environment:\n APP_URL: http://app:8000\n command:\n - bats \n - acceptance.bats\n  migrate:\n    ...\n    ...\n  db:\n    ...\n    ...\n```", "```\n> docker-compose down -v\n...\n...\n> docker-compose build\n...\n...\n> docker-compose up migrate\n...\n...\n> docker-compose run app python3 manage.py collectstatic --no-input\n...\n...\n> docker-compose up acceptance todobackend_db_1 is up-to-date\nCreating todobackend_app_1 ... done\nCreating todobackend_acceptance_1 ... done\nAttaching to todobackend_acceptance_1\nacceptance_1 | Processing secrets []...\nacceptance_1 | 1..4\nacceptance_1 | ok 1 todobackend root\nacceptance_1 | ok 2 todo items returns empty list\nacceptance_1 | ok 3 create todo item\nacceptance_1 | ok 4 delete todo item\ntodobackend_acceptance_1 exited with code 0\n```", "```\nhello:\n    @ echo \"Hello World\"\n    echo \"How are you?\"\n```", "```\n> make hello\nHello World\necho \"How are you?\"\nHow are you?\n```", "```\n.PHONY: hello\n\nhello:\n    @ echo \"Hello World\"\n    echo \"How are you?\"\n```", "```\n.PHONY: test\n\ntest:\n    docker-compose build --pull release\n    docker-compose build\n    docker-compose run test\n```", "```\n.PHONY: test release\n\ntest:\n    docker-compose build --pull release\n    docker-compose build\n    docker-compose run test\n\nrelease:\n docker-compose up --abort-on-container-exit migrate\n docker-compose run app python3 manage.py collectstatic --no-input\n docker-compose up --abort-on-container-exit acceptance\n```", "```\n> docker images REPOSITORY            TAG        IMAGE ID        CREATED            SIZEtodobackend_app       latest     ca3e62e168f2    13 minutes ago     137MBtodobackend_migrate   latest     ca3e62e168f2    13 minutes ago     137MB\ntodobackend_release   latest     ca3e62e168f2    13 minutes ago     137MB\n<none>                <none>     03cc5d44bd7d    14 minutes ago     253MB\n<none>                <none>     e88666a35577    22 minutes ago     137MB\n<none>                <none>     8909f9001297    23 minutes ago     253MB\n<none>                <none>     3d6f9a5c9322    2 hours ago        137MB todobackend_test      latest     60b3a71946cc    2 hours ago        253MB\n<none>                <none>     53d19a2de60d    9 hours ago        136MB\n<none>                <none>     54f0fb70b9d0    15 hours ago       135MB alpine                latest     11cd0b38bc3c    23 hours ago       4.41MB\n```", "```\n.PHONY: test release clean\n\ntest:\n    docker-compose build --pull release\n    docker-compose build\n    docker-compose run test\n\nrelease:\n    docker-compose up --abort-on-container-exit migrate\n    docker-compose run app python3 manage.py collectstatic --no-input\n    docker-compose up --abort-on-container-exit acceptance\n\nclean:\n docker-compose down -v\n docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS\n```", "```\n> make test\n...\n...\n> make release\n...\n...\n> make clean\ndocker-compose down -v\nStopping todobackend_app_1 ... done\nStopping todobackend_db_1 ... done\nRemoving todobackend_app_run_2 ... done\nRemoving todobackend_app_1 ... done\nRemoving todobackend_app_run_1 ... done\nRemoving todobackend_migrate_1 ... done\nRemoving todobackend_db_1 ... done\nRemoving todobackend_test_run_1 ... done\nRemoving network todobackend_default\nRemoving volume todobackend_public\ndocker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS\nDeleted: sha256:03cc5d44bd7dec8d535c083dd5a8e4c177f113bc49f6a97d09f7a1deb64b7728\nDeleted: sha256:6448ea330f415f773fc4cd5fe35862678ac0e35a1bf24f3780393eb73637f765\nDeleted: sha256:baefcaca3929d6fc419eab06237abfb6d9ba9a1ba8d5623040ea4f49b2cc22d4\nDeleted: sha256:b1dca5a87173bfa6a2c0c339cdeea6287e4207f34869a2da080dcef28cabcf6f\n...\n...\n```", "```\nversion: '2.4'\n\nvolumes:\n  public:\n    driver: local\n\nservices:\n  test:\n    ...\n    ...\n  release:\n    ...\n    ...\n  app:\n    extends:\n      service: release\n    depends_on:\n      db:\n        condition: service_healthy\n    volumes:\n      - public:/public\n    healthcheck:\n      test: curl -fs localhost:8000\n      interval: 3s\n      retries: 10\n    ports:\n      - 8000:8000\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n      - --check-static=/public\n - --die-on-term\n - --processes=4\n - --threads=2\n  acceptance:\n    ...\n    ...\n  migrate:\n    ...\n    ...\n  db:\n    ...\n    ...\n```", "```\nversion: '2.4'\n\nvolumes:\n  public:\n    driver: local\n\nservices:\n  test:\n    ...\n    ...\n  release:\n    ...\n    ...\n  app:\n    extends:\n      service: release\n    depends_on:\n      db:\n        condition: service_healthy\n    volumes:\n      - public:/public\n    healthcheck:\n      test: curl -fs localhost:8000\n      interval: 3s\n      retries: 10\n    ports:\n - 8000\n    command:\n      - uwsgi\n      - --http=0.0.0.0:8000\n      - --module=todobackend.wsgi\n      - --master\n      - --check-static=/public\n      - --die-on-term\n      - --processes=4\n      - --threads=2\n  acceptance:\n    ...\n    ...\n  migrate:\n    ...\n    ...\n  db:\n    ...\n    ...\n```", "```\n> docker-compose port app 8000\n0.0.0.0:32768\n```", "```\n.PHONY: test release clean\n\ntest:\n    docker-compose build --pull release\n    docker-compose build\n    docker-compose run test\n\nrelease:\n    docker-compose up --exit-code-from migrate migrate\n    docker-compose run app python3 manage.py collectstatic --no-input\n    docker-compose up --exit-code-from acceptance acceptance\n @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g) clean:\n    docker-compose down -v\n    docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS\n```", "```\n> make release\n...\n...\ndocker-compose run app bats acceptance.bats\nStarting todobackend_db_1 ... done\n1..4\nok 1 todobackend root\nok 2 todo items returns empty list\nok 3 create todo item\nok 4 delete todo item\nApp running at http://localhost:32771\n```", "```\n.PHONY: test release clean version\n\nexport APP_VERSION ?= $(shell git rev-parse --short HEAD)\n\nversion:\n @ echo '{\"Version\": \"$(APP_VERSION)\"}'\n\ntest:\n    docker-compose build --pull release\n    docker-compose build\n    docker-compose run test\n\nrelease:\n    docker-compose up --abort-on-container-exit migrate\n    docker-compose run app python3 manage.py collectstatic --no-input\n    docker-compose up --abort-on-container-exit acceptance\n    @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g)clean:\n    docker-compose down -v\n    docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS\n```", "```\n> make version\n{\"Version\": \"5cd83c0\"}\n```"]