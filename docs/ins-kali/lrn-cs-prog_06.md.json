["```cs\npublic class GenericDemo<T>\n{\n\u00a0\u00a0\u00a0\u00a0public T Value { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public GenericDemo(T value)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value = value;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public override string ToString() => $\"{typeof(T)} : {Value}\";\n}\n```", "```cs\nvar obj1 = new GenericDemo<int>(10);\nvar obj2 = new GenericDemo<string>(\"Hello World\");\n```", "```cs\nvar t1 = obj1.GetType();\nConsole.WriteLine(t1.Name);\nConsole.WriteLine(t1.GetGenericArguments()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.FirstOrDefault().Name);\nvar t2 = obj2.GetType();\nConsole.WriteLine(t2.Name);\nConsole.WriteLine(t2.GetGenericArguments()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.FirstOrDefault().Name);\nConsole.WriteLine(obj1);\nConsole.WriteLine(obj2);\n```", "```cs\nclass Pair<T, U>\n{\n\u00a0\u00a0\u00a0\u00a0public T Item1 { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public U Item2 { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public Pair(T item1, U item2)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Item1 = item1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Item2 = item2;\n\u00a0\u00a0\u00a0\u00a0}\n}\nvar p1 = new Pair<int, int>(1, 2);\nvar p2 = new Pair<int, double>(1, 42.99);\nvar p3 = new Pair<string, bool>(\"true\", true);\n```", "```cs\npublic abstract class Shape<T>\n{\n\u00a0\u00a0\u00a0\u00a0public abstract T Area { get; }\n}\n```", "```cs\npublic class Square : Shape<int>\n{\n\u00a0\u00a0\u00a0\u00a0public int Length { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Square(int length)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Length = length;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public override int Area => Length * Length;\n}\n```", "```cs\npublic class Circle : Shape<double>\n{\n\u00a0\u00a0\u00a0\u00a0public double Radius { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Circle(double radius)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Radius = radius;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public override double Area => Math.PI * Radius * Radius;\n}\n```", "```cs\nSquare objSquare = new Square(10);\nConsole.WriteLine($\"The area of square is {objSquare.Area}\");\nCircle objCircle = new Circle(7.5);\nConsole.WriteLine($\"The area of circle is {objCircle.Area}\");\n```", "```cs\npublic class Square<T> : Shape<T>\n{\n\u00a0\u00a0\u00a0\u00a0public T Length { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Square(T length)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Length = length;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0/* ERROR: Operator '*' cannot be applied to operands \n\u00a0\u00a0\u00a0\u00a0of type 'T' and 'T' */\n\u00a0\u00a0\u00a0\u00a0public override T Area => Length * Length;\n}\n```", "```cs\npublic interface IShape<T>\n{\n\u00a0\u00a0\u00a0\u00a0public T Area { get; }\n}\n```", "```cs\npublic class Square : IShape<int>\n{\n\u00a0\u00a0\u00a0\u00a0public int Length { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Square(int length)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Length = length;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public int Area => Length * Length;\n}\npublic class Circle : IShape<double>\n{\n\u00a0\u00a0\u00a0\u00a0public double Radius { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Circle(double radius)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Radius = radius;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public double Area => Math.PI * Radius * Radius;\n}\n```", "```cs\npublic interface IEnumerable\n{\n\u00a0\u00a0\u00a0\u00a0IEnumerator GetEnumerator();\n}\npublic interface IEnumerable<out T> : IEnumerable\n{\n\u00a0\u00a0\u00a0\u00a0IEnumerator<T> GetEnumerator();\n}\n```", "```cs\nIEnumerable<string> names = \n\u00a0\u00a0\u00a0new List<string> { \"Marius\", \"Ankit\", \"Raffaele\" };\nIEnumerable<object> objects = names;\n```", "```cs\nIEnumerable<string> names = \n\u00a0\u00a0\u00a0new List<string> { \"Marius\", \"Ankit\", \"Raffaele\" };\nList<object> objects = names; // error\n```", "```cs\nIEnumerable<int> numbers = new List<int> { 1, 1, 2, 3, 5, 8 };\nIEnumerable<object> objects = numbers; // error\n```", "```cs\npublic interface IShape\n{\n\u00a0\u00a0\u00a0\u00a0public double Area { get; }\n}\npublic class Square : IShape\n{\n\u00a0\u00a0\u00a0\u00a0public double Length { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Square(int length)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Length = length;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public double Area => Length * Length;\n}\npublic class Circle : IShape\n{\n\u00a0\u00a0\u00a0\u00a0public double Radius { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Circle(double radius)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Radius = radius;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public double Area => Math.PI * Radius * Radius;\n}\n```", "```cs\npublic class ShapeComparer : IComparer<IShape>\n{\n\u00a0\u00a0\u00a0\u00a0public int Compare(IShape x, IShape y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (x is null) return y is null ? 0 : -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (y is null) return 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x.Area.CompareTo(y.Area);\n\u00a0\u00a0\u00a0\u00a0}\n}\npublic class SquareComparer : IComparer<Square>\n{\n\u00a0\u00a0\u00a0\u00a0public int Compare(Square x, Square y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (x is null) return y is null ? 0 : -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (y is null) return 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x.Length.CompareTo(y.Length);\n\u00a0\u00a0\u00a0\u00a0}\n}\npublic class CircleComparer : IComparer<Circle>\n{\n\u00a0\u00a0\u00a0\u00a0public int Compare(Circle x, Circle y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (x is null) return y is null ? 0 : -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (y is null) return 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x.Radius.CompareTo(y.Radius);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic interface IComparer<in T>\n{\n\u00a0\u00a0\u00a0\u00a0int Compare(T x, T y);\n}\n```", "```cs\npublic class SquareComparison\n{\n\u00a0\u00a0\u00a0\u00a0public static bool IsBigger(Square a, Square b,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IComparer<Square> comparer)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return comparer.Compare(a, b) >= 0;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nSquare sqr1 = new Square(4);\nSquare sqr2 = new Square(5);\nSquareComparison.IsBigger(sqr1, sqr2, new SquareComparer());\nSquareComparison.IsBigger(sqr1, sqr2, new ShapeComparer());\n```", "```cs\ninterface IMultiVariant<out T, in U>\n{\n\u00a0\u00a0\u00a0\u00a0T Make();\n\u00a0\u00a0\u00a0\u00a0void Take(U arg);\n}\n```", "```cs\npublic struct Square : IShape<int>\n{\n\u00a0\u00a0\u00a0\u00a0public int Length { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Square(int length)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Length = length;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public int Area => Length * Length;\n}\npublic struct Circle : IShape<double>\n{\n\u00a0\u00a0\u00a0\u00a0public double Radius { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Circle(double radius)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Radius = radius;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public double Area => Math.PI * Radius * Radius;\n}\n```", "```cs\nclass CompareObjects\n{\n\u00a0\u00a0\u00a0\u00a0public bool Compare<T>(T input1, T input2)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return input1.Equals(input2);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nCompareObjects comps = new CompareObjects();\nConsole.WriteLine(comp.Compare<int>(10, 10));\nConsole.WriteLine(comp.Compare<double>(10.5, 10.8));\nConsole.WriteLine(comp.Compare<string>(\"a\", \"a\"));\nConsole.WriteLine(comp.Compare<string>(\"a\", \"b\"));\n```", "```cs\nCompareObjects comp = new CompareObjects();\nConsole.WriteLine(comp.Compare(10, 10));\nConsole.WriteLine(comp.Compare(10.5, 10.8));\nConsole.WriteLine(comp.Compare(\"a\", \"a\"));\nConsole.WriteLine(comp.Compare(\"a\", \"b\"));\n```", "```cs\nclass ConflictingGenerics<T>\n{\n\u00a0\u00a0\u00a0\u00a0public void DoSomething<T>(T arg) // warning\n\u00a0\u00a0\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nstruct Point<T>\n{\n\u00a0\u00a0\u00a0\u00a0public T X { get; }\n\u00a0\u00a0\u00a0\u00a0public T Y { get; }\n\u00a0\u00a0\u00a0\u00a0public Point(T x, T y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X = x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Y = y;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nPoint<int> p1 = new Point<int>(3, 4);\nPoint<double> p2 = new Point<double>(3.12, 4.55);\nPoint<bool> p3 = new Point<bool>(true, false);\nPoint<string> p4 = new Point<string>(\"alpha\", \"beta\");\n```", "```cs\nstruct Point<T>\n\u00a0\u00a0\u00a0\u00a0where T : struct, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IComparable, IComparable<T>,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IConvertible,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IEquatable<T>,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IFormattable\n{\n\u00a0\u00a0\u00a0\u00a0public T X { get; }\n\u00a0\u00a0\u00a0\u00a0public T Y { get; }\n\u00a0\u00a0\u00a0\u00a0public Point(T x, T y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X = x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Y = y;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass RestrictedDictionary<TKey, TValue> : Dictionary<TKey, List<TValue>>\n\u00a0\u00a0\u00a0\u00a0where TKey : System.Enum\n\u00a0\u00a0\u00a0\u00a0where TValue : class, new()\n{\n\u00a0\u00a0\u00a0\u00a0public T Make<T>(TKey key) where T : TValue, new()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var value = new T();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!TryGetValue(key, out List<TValue> list))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Add(key, new List<TValue>() { value });\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list.Add(value);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return value;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nenum ShapeType { Sharp, Rounded };\nclass Shape { }\nclass Ellipsis\u00a0\u00a0: Shape { }\nclass Circle\u00a0\u00a0\u00a0\u00a0: Shape { }\nclass Rectangle : Shape { }\nclass Square\u00a0\u00a0\u00a0\u00a0: Shape { }\n```", "```cs\nvar dictionary = new RestrictedDictionary<ShapeType, Shape>();\nvar c = dictionary.Make<Circle>(ShapeType.Rounded);\nvar e = dictionary.Make<Ellipsis>(ShapeType.Rounded);\nvar r = dictionary.Make<Rectangle>(ShapeType.Sharp);\nvar s = dictionary.Make<Square>(ShapeType.Sharp);\n```"]