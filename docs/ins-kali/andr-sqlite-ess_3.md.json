["```kt\npublic void pickContact() {\n   try {\n       Intent cIntent = new Intent(Intent.ACTION_PICK,\n            ContactsContract.Contacts.CONTENT_URI);\n      startActivityForResult(cIntent, PICK_CONTACT);\n    } catch (Exception e) {\n      e.printStackTrace();\n      Log.i(TAG, \"Exception while picking contact\");\n    }\n   }\n```", "```kt\n{\n.\n.\n.\n\nelse if (requestCode == PICK_CONTACT) {\n      if (resultCode == Activity.RESULT_OK)\n\n       {\n          Uri contactData = data.getData();\n          Cursor c = getContentResolver().query(contactData, null, null, null, null);\n         if (c.moveToFirst()) {\n             String id = c\n                   .getString(c\n                         .getColumnIndexOrThrow(ContactsContract.Contacts._ID));\n\n             String hasPhone = c\n                   .getString(c\n                         .getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER));\n\n            if (hasPhone.equalsIgnoreCase(\"1\")) {\n                Cursor phones = getContentResolver()\n                      .query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,\n                           null,\n                           ContactsContract.CommonDataKinds.Phone.CONTACT_ID\n                                  + \" = \" + id, null, null);\n               phones.moveToFirst();\n               contactPhone.setText(phones.getString(phones\n                      .getColumnIndex(\"data1\")));\n\n               contactName\n                      .setText(phones.getString(phones\n                            .getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME)));\n\n }\n\u2026..\n```", "```kt\ncontent://authority/Path/Id\n```", "```kt\npublic final class PersonalContactContract {\n\n   /**\n    * The authority of the PersonalContactProvider\n    */\n   public static final String AUTHORITY = \"com.personalcontactmanager.provider\";\n\n   public static final String BASE_PATH = \"contacts\";\n\n   /**\n    * The Uri for the top-level PersonalContactProvider\n    * authority\n    */\n   public static final Uri CONTENT_URI = Uri.parse(\"content://\" + AUTHORITY \n         + \"/\" + BASE_PATH);\n\n   /**\n    * The mime type of a directory of items.\n    */\n   public static final String CONTENT_TYPE =                  \nContentResolver.CURSOR_DIR_BASE_TYPE + \n                  \"/vnd.com.personalcontactmanager.provider.table\";\n   /**\n    * The mime type of a single item.\n    */\n   public static final String CONTENT_ITEM_TYPE = \nContentResolver.CURSOR_ITEM_BASE_TYPE + \n                 \"/vnd.com.personalcontactmanager.provider.table_item\";\n\n   /**\n    * A projection of all columns \n    * in the items table.\n    */\n   public static final String[] PROJECTION_ALL = { \"_id\", \n      \"contact_name\", \"contact_number\", \n      \"contact_email\", \"photo_id\" };\n\n   /**\n    * The default sort order for \n    * queries containing NAME fields.\n    */\n   //public static final String SORT_ORDER_DEFAULT = NAME + \" ASC\";\n\n   public static final class Columns {\n      public static String TABLE_ROW_ID = \"_id\";\n      public static String TABLE_ROW_NAME  = \"contact_name\";\n      public static String TABLE_ROW_PHONENUM = \"contact_number\";\n      public static String TABLE_ROW_EMAIL = \"contact_email\";\n      public static String TABLE_ROW_PHOTOID = \"photo_id\";\n   }\n}\n```", "```kt\naddURI(String authority, String path, int code)\n```", "```kt\nprivate static final int CONTACTS_TABLE = 1;\nprivate static final int CONTACTS_TABLE_ITEM = 2;\n\nprivate static final UriMatcher mmURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n   static {\n      mmURIMatcher.addURI(PersonalContactContract.AUTHORITY, \n            PersonalContactContract.BASE_PATH, CONTACTS_TABLE);\n      mmURIMatcher.addURI(PersonalContactContract.AUTHORITY, \n            PersonalContactContract.BASE_PATH+  \"/#\",  \n                       CONTACTS_TABLE_ITEM);\n   }\n```", "```kt\n@Override\nPublic Boolean onCreate() {\n   dbm = new DatabaseManager(getContext());\n   return false;\n}   \n```", "```kt\n@Override\npublic Cursor query(Uri uri, String[] projection, String selection,\n      String[] selectionArgs, String sortOrder) {\n\n   int uriType = mmURIMatcher.match(uri);\n   switch(uriType) {\n\n   case CONTACTS_TABLE:\n      break;\n   case CONTACTS_TABLE_ITEM:\n      if (TextUtils.isEmpty(selection)) {\n         selection = PersonalContactContract.Columns.TABLE_ROW_ID \n                  + \"=\" + uri.getLastPathSegment();\n      } else {\n         selection = PersonalContactContract.Columns.TABLE_ROW_ID \n                  + \"=\" + uri.getLastPathSegment() + \n               \" and \" + selection;\n      }\n      break;\n   default:\n      throw new IllegalArgumentException(\"Unknown URI: \" + uri);\n   }\n\n   Cursor cr = dbm.getRowAsCursor(projection, selection, \n               selectionArgs, sortOrder);\n\n   return cr;\n}\n```", "```kt\n@Override\npublic Uri insert(Uri uri, ContentValues values) {\n\n   int uriType = mmURIMatcher.match(uri);\n   long id;\n\n   switch(uriType) {\n   case CONTACTS_TABLE:\n      id = dbm.addRow(values);\n      break;\n   default:\n      throw new IllegalArgumentException(\"Unknown URI: \" + uri);\n   }\n\n   Uri ur = ContentUris.withAppendedId(uri, id);\n   return ur;\n}\n```", "```kt\n@Override\npublic int update(Uri uri, ContentValues values, String selection,\n      String[] selectionArgs) {\n   int uriType = mmURIMatcher.match(uri);\n\n   switch(uriType) {\n   case CONTACTS_TABLE:\n      break;\n   case CONTACTS_TABLE_ITEM:\n      if (TextUtils.isEmpty(selection)) {\n         selection = PersonalContactContract.Columns.TABLE_ROW_ID\n + \"=\" + uri.getLastPathSegment();\n      } else {\n         selection = PersonalContactContract.Columns.TABLE_ROW_ID \n+ \"=\" + uri.getLastPathSegment() \n+ \" and \" + selection;\n      }\n      break;\n   default:\n      throw new IllegalArgumentException(\"Unknown URI: \" + uri);\n   }\n\n   int count = dbm.updateRow(values, selection, selectionArgs);\n\n   return count;\n}\n```", "```kt\n@Override\npublic int delete(Uri uri, String selection, String[] selectionArgs) {\n\n   int uriType = mmURIMatcher.match(uri);\n\n   switch(uriType) {\n   case CONTACTS_TABLE:\n      break;\n   case CONTACTS_TABLE_ITEM:\n      if (TextUtils.isEmpty(selection)) {\n         selection = PersonalContactContract.Columns.TABLE_ROW_ID\n + \"=\" + uri.getLastPathSegment();\n      } else {\n         selection = PersonalContactContract.Columns.TABLE_ROW_ID \n + \"=\" + uri.getLastPathSegment() \n + \" and \" + selection;\n      }\n      break;\n   default:\n      throw new IllegalArgumentException(\"Unknown URI: \" + uri);\n   }\n\n   int count = dbm.deleteRow(selection, selectionArgs);\n\n   return count;\n}\n```", "```kt\n@Override\npublic String getType(Uri uri) {\n\n   int uriType = mmURIMatcher.match(uri);\n   switch(uriType) {\n   case CONTACTS_TABLE:\n      return PersonalContactContract.CONTENT_TYPE;\n   case CONTACTS_TABLE_ITEM:\n      return PersonalContactContract.CONTENT_ITEM_TYPE;\n   default:\n      throw new IllegalArgumentException(\"Unknown URI: \" + uri);   \n   }\n\n}\n```", "```kt\n<provider\n   android:name=\"com.personalcontactmanager.provider.PersonalContactProvider\"\n   android:authorities=\"com.personalcontactmanager.provider\"\n   android:exported=\"true\"\n   android:grantUriPermissions=\"true\" >\n   </provider>\n```", "```kt\nandroid:readPermission=\"com.personalcontactmanager.provider.READ\"\n```", "```kt\npublic class TestMainActivity extends Activity {\n\npublic final String AUTHORITY = \"com.personalcontactmanager.provider\";\npublic final String BASE_PATH = \"contacts\";\nprivate TextViewqueryT, insertT;\n\npublic class Columns {\n   public final static String TABLE_ROW_ID = \"_id\";\n   public final static String TABLE_ROW_NAME = \"contact_name\";\n   public final static String TABLE_ROW_PHONENUM =\n\n\"contact_number\";\n   public final static String TABLE_ROW_EMAIL = \"contact_email\";\n   public final static String TABLE_ROW_PHOTOID = \"photo_id\";\n   }\n```", "```kt\n<uses-permissionandroid:name=\"AUTHORITY.permission.WRITE_TASKS\"/>\n```", "```kt\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n   setContentView(R.layout.activity_test_main);\n   queryT = (TextView) findViewById(R.id.textQuery);\n   insertT = (TextView) findViewById(R.id.textInsert);\n   }\n```", "```kt\npublic void query(View v) {\n  Uri contentUri = Uri.parse(\"content://\" + AUTHORITY \n               + \"/\" + BASE_PATH);\n\n  Cursor cr = getContentResolver().query(contentUri, null, \n            null, null, null);     \n\n  if (cr != null) {\n      if (cr.getCount() > 0) {\n         cr.moveToFirst();\n         String name = cr.getString(cr.getColumnIndexOrThrow( \nColumns.TABLE_ROW_NAME));\n         queryT.setText(name);\n      }\n  }\n\n  ....\n  ....\n}\n```", "```kt\npublic void query(View v) {\n\n ...\n ...\n\n  Uri rowUri = contentUri = ContentUris.withAppendedId\n            (contentUri, getFirstRowId());\n\n  String[] projection = new String[] {\n      Columns.TABLE_ROW_NAME, Columns.TABLE_ROW_PHONENUM,\n      Columns.TABLE_ROW_EMAIL, Columns.TABLE_ROW_PHOTOID };\n\n  cr = getContentResolver().query(contentUri, projection,\n      null, null, null);\n\n  if (cr != null) {\n      if (cr.getCount() > 0) {\n         cr.moveToFirst();\n         String name = cr.getString(cr.getColumnIndexOrThrow(\n                  Columns.TABLE_ROW_NAME));\n\n         queryT.setText(name);\n\n      }\n  }\n\n}   \n```", "```kt\nprivate int getFirstRowId() {\n\n  int id = 1;\n  Uri contentUri = Uri.parse(\"content://\" + AUTHORITY + \"/\"\n               + \"contacts\");\n  Cursor cr = getContentResolver().query(contentUri, null,\n            null, null, null);\n  if (cr != null) {\n      if (cr.getCount() > 0) {\n         cr.moveToFirst();\n         id = cr.getInt(cr.getColumnIndexOrThrow(\n            Columns.TABLE_ROW_ID));\n      }\n  }\nreturn id;\n\n}\n```", "```kt\npublic final Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)\n```", "```kt\npublic void insert(View v) {\n\n  String name = getRandomName();\n  String number = getRandomNumber();\n\n  ContentValues values = new ContentValues();\n  values.put(Columns.TABLE_ROW_NAME, name);\n  values.put(Columns.TABLE_ROW_PHONENUM, number);\n  values.put(Columns.TABLE_ROW_EMAIL, name + \"@gmail.com\");\n  values.put(Columns.TABLE_ROW_PHOTOID, \"abc\");\n\n  String[] projection = new String[] {\n      Columns.TABLE_ROW_NAME, Columns.TABLE_ROW_PHONENUM,\n      Columns.TABLE_ROW_EMAIL, Columns.TABLE_ROW_PHOTOID };\n\n  Uri contentUri = Uri.parse(\"content://\" + AUTHORITY + \"/\"\n            + BASE_PATH);\n\n  Uri insertedRowUri = getContentResolver().insert(\n            contentUri, values);\n\n  //checking the added row\n  Cursor cr = getContentResolver().query(insertedRowUri,\n         projection, null, null, null);\n\n  if (cr != null) {\n      if (cr.getCount() > 0) {\n           cr.moveToFirst();\n           name = cr.getString(cr.getColumnIndexOrThrow(\n               Columns.TABLE_ROW_NAME));\n           insertT.setText(name);\n      }\n  }\n\n}\n```", "```kt\nprivate String getRandomName() {\n\n      Random rand = new Random();\n      String name = \"\" + (char) (122-rand.nextInt(26))\n         + (char) (122-rand.nextInt(26))\n         + (char) (122-rand.nextInt(26))\n         + (char) (122-rand.nextInt(26))\n         + (char) (122-rand.nextInt(26))\n         + (char) (122-rand.nextInt(26))\n         + (char) (122-rand.nextInt(26))\n         + (char) (122-rand.nextInt(26)) ;\n\n      return name;\n}\n\npublic String getRandomNumber() {\n  Random rand = new Random();\n  String number = rand.nextInt(98989)*rand.nextInt(59595)+\"\";\n\n  return number;\n}\n```", "```kt\npublic final Uri insert (Uri url, ContentValues values)\n```", "```kt\npublic void update(View v) {\n\n  String name = getRandomName();\n  String number = getRandomNumber();\n\n  ContentValues values = new ContentValues();\n  values.put(Columns.TABLE_ROW_NAME, name);\n  values.put(Columns.TABLE_ROW_PHONENUM, number);\n  values.put(Columns.TABLE_ROW_EMAIL, name + \"@gmail.com\");\n  values.put(Columns.TABLE_ROW_PHOTOID, \" \");\n\n  Uri contentUri = Uri.parse(\"content://\" + AUTHORITY\n                    + \"/\" + BASE_PATH);\n  Uri rowUri = ContentUris.withAppendedId(\n                    contentUri, getFirstRowId());\n  int count = getContentResolver().update(rowUri, values, null, null);\n\n}\n```", "```kt\npublic final int update (Uri uri, ContentValues values, String where, String[] selectionArgs)\n```", "```kt\npublic void delete(View v) {\n\n      Uri contentUri = Uri.parse(\"content://\" + AUTHORITY\n                              + \"/\" + BASE_PATH);\n      Uri rowUri = contentUri = ContentUris.withAppendedId(\n                              contentUri, getFirstRowId());\n      int count = getContentResolver().delete(rowUri, null,\n               null);\n}\n```"]