["```\ndocker attach - Attach the shell's input/output/error stream to the container\ndocker build - Build a Docker image based on a provided Dockerfile\ndocker cp - Copy files between container and host\ndocker exec - Execute a command in a running container\ndocker images - List image available to your installation of docker\ndocker info - Display information about the system\ndocker inspect - Display information about Docker layers, containers, images, etc\ndocker kill - Forcefully terminate a container \ndocker logs - Display logs from a container since it last started\ndocker pause - Pause all processes within a container\ndocker ps - List information about containers and their resource usage\ndocker pull - Pull an image from a remote repository into the local registry\ndocker push - Push an image from the local registry into a remote repository\ndocker rm - Remove a container\ndocker rmi - Remove an image from the local repository\ndocker run - Start a new container and run it\ndocker search - Search DockerHub for images\ndocker start - Start a stopped container\ndocker stop - Stop a running container nicely (wait for container to shut down)\ndocker tag - Create a tag for an image\ndocker top - Show running processes of a container\ndocker unpause - Resume all processes in a paused container\ndocker version - Show the Docker version\n```", "```\nserver {\n  listen  80;\n  server_name    _;\n\n  root /srv/www/html;\n\n  location ~/\\. {\n    deny all;\n  }\n\n  location / {\n    auth_basic           \"Authentication required\";\n    auth_basic_user_file /srv/www/html/.htpasswd;\n\n    proxy_pass           http://172.17.0.1:8000;\n  }\n}\n```", "```\nFROM nginx:latest\n# Make sure we are fully up to date\nRUN apt-get update -q && \\\n apt-get dist-upgrade -y && \\\n apt-get install openssl && \\\n apt-get clean && \\\n apt-get autoclean\n\n# Setup any variables we need\nENV SRV_PATH /srv/www/html\n\n# Get a variable defined for our password\nARG PASSWORD=test\n\n# Remove default configuration\nRUN rm /etc/nginx/conf.d/default.conf\n\n# Change ownership of copied files\nRUN mkdir -p $SRV_PATH && \\\n chown nginx:nginx $SRV_PATH\n\n# Setup authentication file\nRUN printf \"user:$(openssl passwd -1 $PASSWORD)\\n\" >> $SRV_PATH/.htpasswd\n\n# Add our own configuration in\nCOPY nginx_main_site.conf /etc/nginx/conf.d/\n```", "```\nRUN apt-get update -q && \\         # Update our repository information\n apt-get dist-upgrade -y && \\   # Upgrade any packages we already have\n apt-get install openssl && \\   # Install dependency (openssl)\n apt-get clean && \\             # Remove cached package files\n apt-get autoclean              # Remove any packages that are no longer needed on the system\n```", "```\nARG PASSWORD=test\n...\nRUN printf \"user:$(openssl passwd -1 $PASSWORD)\\n\" >> $SRV_PATH/.htpasswd\n```", "```\nFROM mongo:3\n\n# Make sure we are fully up to date\nRUN apt-get update -q && \\\n apt-get dist-upgrade -y && \\\n apt-get clean && \\\n apt-get autoclean\n```", "```\n{\n  \"name\": \"application-server\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.15.4\"\n  }\n}\n```", "```\nFROM node:8\n\n# Make sure we are fully up to date\nRUN apt-get update -q && \\\n apt-get dist-upgrade -y && \\\n apt-get clean && \\\n apt-get autoclean\n\n# Container port that should get exposed\nEXPOSE 8000\n\n# Setup any variables we need\nENV SRV_PATH /usr/local/share/word_test\n\n# Make our directory\nRUN mkdir -p $SRV_PATH && \\\n chown node:node $SRV_PATH\n\nWORKDIR $SRV_PATH\n\nUSER node\n\nCOPY . $SRV_PATH/\n\nRUN npm install\n\nCMD [\"npm\", \"start\"]\n```", "```\nhtml\n  head\n    title Docker words\n  body\n    h1 Saved Words\n\n    form(method='POST' action='/new')\n        input.form-control(type='text', placeholder='New word' name='word')\n        button(type='submit') Save\n\n    ul\n        for word in words\n            li= word\n```", "```\n'use strict'\n\n// Load our dependencies\nconst bodyParser = require('body-parser')\nconst express = require('express');\nconst mongo = require('mongodb')\n\n// Setup database and server constants\nconst DB_NAME = 'word_database';\nconst DB_HOST = process.env.DB_HOST || 'localhost:27017';\nconst COLLECTION_NAME = 'words';\nconst SERVER_PORT = 8000;\n\n// Create our app, database clients, and the word list array\nconst app = express();\nconst client = mongo.MongoClient();\nconst dbUri = `mongodb://${DB_HOST}/${DB_NAME}`;\nconst words = [];\n\n// Setup our templating engine and form data parser\napp.set('view engine', 'pug')\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// Load all words that are in the database\nfunction loadWordsFromDatabase() {\n    return client.connect(dbUri).then((db) => {\n        return db.collection(COLLECTION_NAME).find({}).toArray();\n    })\n    .then((docs) => {\n        words.push.apply(words, docs.map(doc => doc.word));\n        return words;\n    });\n}\n\n// Our main landing page handler\napp.get('/', (req, res) => {\n    res.render('index', { words: words });\n});\n\n// Handler for POSTing a new word\napp.post('/new', (req, res) => {\n    const word = req.body.word;\n\n    console.info(`Got word: ${word}`);\n    if (word) {\n        client.connect(dbUri).then((db) => {\n            db.collection(COLLECTION_NAME).insertOne({ word }, () => {\n                db.close();\n                words.push(word);\n            });\n        });\n    }\n\n    res.redirect('/');\n});\n\n// Start everything by loading words and then starting the server \nloadWordsFromDatabase().then((words) => {\n    console.info(`Data loaded from database (${words.length} words)`);\n    app.listen(SERVER_PORT, () => {\n        console.info(\"Server started on port %d...\", SERVER_PORT);\n    });\n});\n```", "```\nconst DB_HOST = process.env.DB_HOST || 'localhost:27017';\n```", "```\n$ tree ./\n./\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 views\n    \u2514\u2500\u2500 index.pug\n\n1 directory, 4 files\n```", "```\n$ # Install MongoDB\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\n$ echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n\n$ sudo apt-get update \n$ sudo apt-get install -y mongodb-org\n$ sudo systemctl start mongodb\n\n$ # Install our service dependencies\n$ npm install\napplication-server@0.0.1 /home/sg/checkout/deploying_with_docker/chapter_3/prototype_service/application_server\n<snip>\nnpm WARN application-server@0.0.1 No license field.\n\n$ # Run the service</strong>\n**$ npm start**\n**> application-server@0.0.1 start /home/sg/checkout/deploying_with_docker/chapter_3/prototype_service/application_server**\n**> node index.js**\n\n**Data loaded from database (10 words)**\n**Server started on port 8000...**\n```", "```\n$ tree .\n.\n\u251c\u2500\u2500 application_server\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 views\n\u2502       \u2514\u2500\u2500 index.pug\n\u251c\u2500\u2500 database\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 web_server\n \u251c\u2500\u2500 Dockerfile\n \u2514\u2500\u2500 nginx_main_site.conf\n\n4 directories, 7 files\n```", "```\n $ # Build the app server image\n $ cd application_server\n $ docker build -t application_server .\n Sending build context to Docker daemon 34.3kB\n Step 1/10 : FROM node:8\n <snip>\n Successfully built f04778cb3778\n Successfully tagged application_server:latest\n\n $ # Build the database image\n $ cd ../database\n $ docker build -t database .\n Sending build context to Docker daemon 2.048kB\n Step 1/2 : FROM mongo:3\n <snip>\n Successfully built 7c0f9399a152\n Successfully tagged database:latest\n\n $ # Build the web server image\n $ cd ../web_server\n $ docker build -t web_server .\n Sending build context to Docker daemon 3.584kB\n Step 1/8 : FROM nginx:latest\n <snip>\n Successfully built 738c17ddeca8\n Successfully tagged web_server:latest\n```", "```\n$ docker run --rm \\\n             -d \\\n             -p 27000:27017 \\\n             database\n3baec5d1ceb6ec277a87c46bcf32f3600084ca47e0edf26209ca94c974694009\n\n$ docker run --rm \\\n             -d \\\n             -e DB_HOST=172.17.0.1:27000 \\\n             -p 8000:8000 \\\n             application_server\ndad98a02ab6fff63a2f4096f4e285f350f084b844ddb5d10ea3c8f5b7d1cb24b\n\n$ docker run --rm \\\n             -d \\\n             -p 8080:80 \\\n             web_server\n3ba3d1c2a25f26273592a9446fc6ee2a876904d0773aea295a06ed3d664eca5d\n\n$ # Verify that all containers are running\n$ docker ps --format \"table {{.Image}}\\t{{.Status}}\\t{{.ID}}\\t{{.Ports}}\"\nIMAGE                STATUS              CONTAINER ID        PORTS\nweb_server           Up 11 seconds       3ba3d1c2a25f        0.0.0.0:8080->80/tcp\napplication_server   Up 26 seconds       dad98a02ab6f        0.0.0.0:8000->8000/tcp\ndatabase             Up 45 seconds       3baec5d1ceb6        0.0.0.0:27000->27017/tcp\n```", "```\nBrowser <=> localhost:8080 <=> web_server:80 <=> 172.17.0.1:8000 (Docker \"localhost\") <=> app_server <=> 172.17.0.1:27000 (Docker \"localhost\") <=> database:27017\n```", "```\n$ docker run --rm -d -v local_storage:/data/db -p 27000:27017 database\n```", "```\n$ # Start our container\n$ docker run --rm \\\n             -d \\\n             -v local_storage:/data/db \\\n             -p 27000:27017 \\\n             database\n16c72859da1b6f5fbe75aa735b539303c5c14442d8b64b733eca257dc31a2722\n\n$ # Insert a test record in test_db/coll1 as { \"item\": \"value\" }\n$ mongo localhost:27000\nMongoDB shell version: 2.6.10\nconnecting to: localhost:27000/test\n\n> use test_db\nswitched to db test_db\n > db.createCollection(\"coll1\")\n{ \"ok\" : 1 }\n > db.coll1.insert({\"item\": \"value\"})\nWriteResult({ \"nInserted\" : 1 })\n > exit\nbye\n\n$ # Stop the container. The --rm flag will remove it.\n$ docker stop 16c72859\n16c72859\n\n$ # See what volumes we have\n$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               local_storage\n\n$ # Run a new container with the volume we saved data onto\n$ docker run --rm \\\n             -d \\\n             -v local_storage:/data/db \\\n             -p 27000:27017 \\\n             database\na5ef005ab9426614d044cc224258fe3f8d63228dd71dee65c188f1a10594b356\n\n$ # Check if we have our records saved\n$ mongo localhost:27000\nMongoDB shell version: 2.6.10\nconnecting to: localhost:27000/test\n\n> use test_db\nswitched to db test_db\n > db.coll1.find()\n{ \"_id\" : ObjectId(\"599cc7010a367b3ad1668078\"), \"item\" : \"value\" }\n > exit\n\n$ # Cleanup\n$ docker stop a5ef005a\na5ef005a\n```", "```\n$ printf \"user123:$(openssl passwd -1 password123)\\n\" >> ~/test_htpasswd\n\n$ # Start the web_server with our password as the credentials source\n$ docker run --rm \\\n             -v $HOME/test_htpasswd:/srv/www/html/.htpasswd \\\n             -p 8080:80 web_server\n1b96c35269dadb1ac98ea711eec4ea670ad7878a933745678f4385d57e96224a\n```", "```\n$ # Host's iptables. If you have running containers, DOCKER chain wouldn't be empty.\n$ sudo iptables -L\n<snip>\nChain FORWARD (policy DROP)\ntarget     prot opt source               destination \nDOCKER-ISOLATION  all  --  anywhere             anywhere \nACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED\nDOCKER     all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere\n<snip>\nChain DOCKER (1 references)\ntarget     prot opt source               destination \n\nChain DOCKER-ISOLATION (1 references)\ntarget     prot opt source               destination \nRETURN     all  --  anywhere             anywhere \n<snip>\n\n$ # Host's network addresses is 172.17.0.1\n$ ip addr\n<snip>\n5: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n link/ether 02:42:3c:3a:77:c1 brd ff:ff:ff:ff:ff:ff\n inet 172.17.0.1/16 scope global docker0\n valid_lft forever preferred_lft forever\n inet6 fe80::42:3cff:fe3a:77c1/64 scope link \n valid_lft forever preferred_lft forever\n<snip>\n\n$ # Get container's network addresses\n$ docker run --rm \\\n             -it \\\n             web_server /bin/bash\n root@08b6521702ef:/# # Install pre-requisite (iproute2) package\nroot@08b6521702ef:/# apt-get update && apt-get install -y iproute2\n<snip>\n root@08b6521702ef:/# # Check the container internal address (172.17.0.2)\nroot@08b6521702ef:/# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n inet 127.0.0.1/8 scope host lo\n valid_lft forever preferred_lft forever\n722: eth0@if723: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n inet 172.17.0.2/16 scope global eth0\n valid_lft forever preferred_lft forever\n root@08b6521702ef:/# # Verify that our main route is through our host at 172.17.0.1\nroot@08b6521702ef:/# ip route\ndefault via 172.17.0.1 dev eth0\n172.17.0.0/16 dev eth0 proto kernel scope link src 172.17.0.2\n root@08b6521702ef:/# exit\n```"]