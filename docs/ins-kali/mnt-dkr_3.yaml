- en: Chapter 3. Advanced Container Resource Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。高级容器资源分析
- en: 'In the last chapter, we looked at how you can use the API built into Docker
    to gain an insight to what resources your containers are running. Now, we are
    to see how we can take it to the next level by using cAdvisor from Google. In
    this chapter, you will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何使用内置到Docker中的API来洞察您的容器正在运行的资源。现在，我们将看到如何通过使用谷歌的cAdvisor将其提升到下一个级别。在本章中，您将涵盖以下主题：
- en: How to install cAdvisor and start collecting metrics
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装cAdvisor并开始收集指标
- en: Learn all about the web interface and real-time monitoring
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解有关Web界面和实时监控的所有信息
- en: What your options are for shipping metrics to a remote Prometheus database for
    long-term storage and trend analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将指标发送到远程Prometheus数据库进行长期存储和趋势分析的选项是什么
- en: What is cAdvisor?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cAdvisor是什么？
- en: 'Google describes cAdvisor as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌将cAdvisor描述如下：
- en: '*"cAdvisor (Container Advisor) provides container users an understanding of
    the resource usage and performance characteristics of their running containers.
    It is a running daemon that collects, aggregates, processes, and exports information
    about running containers. Specifically, for each container, it keeps resource
    isolation parameters, historical resource usage, histograms of complete historical
    resource usage, and network statistics. This data is exported by a container and
    is machine-wide."*'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “cAdvisor（容器顾问）为容器用户提供了对其运行容器的资源使用情况和性能特征的理解。它是一个运行的守护程序，用于收集、聚合、处理和导出有关运行容器的信息。具体来说，对于每个容器，它保留资源隔离参数、历史资源使用情况、完整历史资源使用情况的直方图和网络统计信息。这些数据由容器导出，并且是整个机器范围内的。”
- en: The project started off life as an internal tool at Google for gaining an insight
    into containers that had been launched using their own container stack.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目最初是谷歌内部工具，用于洞察使用他们自己的容器堆栈启动的容器。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Google's own container stack was called "Let Me Contain That For You" or lmctfy
    for short. The work on lmctfy has been installed as a Google port functionality
    over to libcontainer that is part of the Open Container Initiative. Further details
    on lmctfy can be found at [https://github.com/google/lmctfy/](https://github.com/google/lmctfy/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌自己的容器堆栈被称为“让我为你包含”，简称lmctfy。对lmctfy的工作已经安装为谷歌端口功能到Open Container Initiative的libcontainer。有关lmctfy的更多详细信息，请访问[https://github.com/google/lmctfy/](https://github.com/google/lmctfy/)。
- en: cAdvisor is written in Go ([https://golang.org](https://golang.org)); you can
    either compile your own binary or you can use the pre-compiled binary that are
    supplied via a container, which is available from Google's own Docker Hub account.
    You can find this at [http://hub.docker.com/u/google/](http://hub.docker.com/u/google/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: cAdvisor是用Go编写的（[https://golang.org](https://golang.org)）；您可以编译自己的二进制文件，也可以使用通过容器提供的预编译二进制文件，该容器可从谷歌自己的Docker
    Hub帐户获得。您可以在[http://hub.docker.com/u/google/](http://hub.docker.com/u/google/)找到它。
- en: Once installed, cAdvisor will sit in the background and capture metrics that
    are similar to that of the `docker stats` command. We will go through these stats
    and understand what they mean later in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，cAdvisor将在后台运行并捕获类似于`docker stats`命令的指标。我们将在本章后面详细了解这些统计数据的含义。
- en: cAdvisor takes these metrics along with those for the host machine and exposes
    them via a simple and easy-to-use built-in web interface.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: cAdvisor获取这些指标以及主机机器的指标，并通过一个简单易用的内置Web界面公开它们。
- en: Running cAdvisor using a container
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用容器运行cAdvisor
- en: There are a number of ways to install cAdvisor; the easiest way to get started
    is to download and run the container image that contains a copy of a precompiled
    cAdvisor binary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多安装cAdvisor的方法；开始的最简单方法是下载并运行包含预编译cAdvisor二进制文件副本的容器映像。
- en: 'Before running cAdvisor, let''s launch a fresh vagrant host:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行cAdvisor之前，让我们启动一个新的vagrant主机：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Using a backslash**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用反斜杠**'
- en: As we have a lot options to pass to the `docker run` command, we are using `\`
    to split the command over multiple lines so it's easier to follow what is going
    on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有很多选项要传递给`docker run`命令，我们使用`\`来将命令拆分成多行，以便更容易跟踪发生了什么。
- en: 'Once you have access to the host machine, run the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您可以访问主机，运行以下命令：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should now have a cAdvisor container up and running on your host machine.
    Before we start, let's look at cAdvisor in more detail by discussing why we have
    passed all the options to the container.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该在主机上运行一个cAdvisor容器。在开始之前，让我们通过讨论为什么我们传递了所有选项给容器来更详细地了解cAdvisor。
- en: The cAdvisor binary is designed to run on the host machine alongside the Docker
    binary, so by launching cAdvisor in a container, we are actually isolating the
    binary in its down environment. To give cAdvisor access to the resources it requires
    on the host machine, we have to mount several partitions and also give the container
    privileged access to let the cAdvisor binary think it is being executed on the
    host machine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: cAdvisor二进制文件设计为在主机上与Docker二进制文件一起运行，因此通过在容器中启动cAdvisor，我们实际上是将二进制文件隔离在其自己的环境中。为了让cAdvisor访问主机上需要的资源，我们必须挂载几个分区，并且还要给容器特权访问权限，让cAdvisor二进制文件认为它是在主机上执行的。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When a container is launched with `--privileged`, Docker will enable full access
    to devices on the host machine; also, Docker will configure both AppArmor or SELinux
    to allow your container the same access to the host machine as a process running
    outside the container will have. For information on the `--privileged` flag, see
    this post on the Docker blog at [http://blog.docker.com/2013/09/docker-can-now-run-within-docker/](http://blog.docker.com/2013/09/docker-can-now-run-within-docker/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个容器使用`--privileged`启动时，Docker将允许对主机上的设备进行完全访问；此外，Docker将配置AppArmor或SELinux，以允许您的容器与在容器外部运行的进程具有相同的对主机的访问权限。有关`--privileged`标志的信息，请参阅Docker博客上的这篇文章[http://blog.docker.com/2013/09/docker-can-now-run-within-docker/](http://blog.docker.com/2013/09/docker-can-now-run-within-docker/)。
- en: Compiling cAdvisor from source
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码编译cAdvisor
- en: As mentioned in the previous section, cAdvisor really ought to be executed on
    the host machine; this means, you may have to use a case to compile your own cAdvisor
    binary and run it directly on the host.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，cAdvisor实际上应该在主机上执行；这意味着，您可能需要使用一个案例来编译自己的cAdvisor二进制文件并直接在主机上运行它。
- en: 'To compile cAdvisor, you will need to perform the following steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译cAdvisor，您需要执行以下步骤：
- en: Install Go and Mercurial on the host machine—version 1.3 or higher of Go is
    needed to compile cAdvisor.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机上安装Go和Mercurial——需要版本1.3或更高版本的Go来编译cAdvisor。
- en: Set the path for Go to work from.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置Go的工作路径。
- en: Grab the source code for cAdvisor and godep.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取cAdvisor和godep的源代码。
- en: Set the path for your Go binaries.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置Go二进制文件的路径。
- en: Build the cAdvisor binary using godep to source the dependencies for us.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用godep构建cAdvisor二进制文件以为我们提供依赖项。
- en: Copy the binary to /`usr/local/bin/`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将二进制文件复制到`/usr/local/bin/`。
- en: Download either an `Upstart` or `Systemd` script and launch the process.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`Upstart`或`Systemd`脚本并启动进程。
- en: 'If you followed the instructions in the previous section, you will already
    have a cAdvisor process running. Before compiling from source, you should start
    with a clean host; let''s log out of the host and launch a fresh copy:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照上一节中的说明操作，您已经有一个cAdvisor进程正在运行。在从源代码编译之前，您应该从一个干净的主机开始；让我们注销主机并启动一个新的副本：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To build cAdvisor on the CentOS 7 host, run the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要在CentOS 7主机上构建cAdvisor，请运行以下命令：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On the Ubuntu 14.04 LTS host, run the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 14.04 LTS主机上，运行以下命令：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should now have a running cAdvisor process. You can check this by running
    `ps aux | grep cadvisor` and you should see a process with a path of `/usr/local/bin/cadvisor`
    running.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该有一个正在运行的cAdvisor进程。您可以通过运行`ps aux | grep cadvisor`来检查，您应该会看到一个路径为`/usr/local/bin/cadvisor`的进程正在运行。
- en: Collecting metrics
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集指标
- en: Now, you have cAdvisor running; what do you need to do to configure the service
    in order to start collecting metrics? The short answer is, nothing at all. When
    you started the cAdvisor process, it instantly started polling your host machine
    to find out what containers are running and gathered information on both the running
    containers and your host machine.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经运行了cAdvisor；为了开始收集指标，您需要做些什么？简短的答案是，根本不需要做任何事情。当您启动cAdvisor进程时，它立即开始轮询您的主机机器，以查找正在运行的容器，并收集有关正在运行的容器和主机机器的信息。
- en: The Web interface
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web界面
- en: 'cAdvisor should be running on the `8080` port; if you open `http://192.168.33.10:8080/`,
    you should be greeted with the cAdvisor logo and an overview of your host machine:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: cAdvisor应该在`8080`端口上运行；如果您打开`http://192.168.33.10:8080/`，您应该会看到cAdvisor的标志和主机机器的概述：
- en: '![The Web interface](../images/00015.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Web界面](../images/00015.jpeg)'
- en: This initial page streams live stats about the host machine, though each section
    is repeated when you start to drill down and view the containers. To start with,
    let's look at each section using the host information.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个初始页面会实时传输有关主机机器的统计信息，尽管每个部分在您开始深入查看容器时都会重复。首先，让我们使用主机信息查看每个部分。
- en: Overview
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概览
- en: 'This overview section gives you a bird''s-eye view of your system; it uses
    gauges so you can quickly get an idea of which resources are reaching their limits.
    In the following screenshot, there is very little in the way of CPU utilization
    and the file system usage is relatively low; however, we are using 64% of the
    available RAM:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概览部分为您提供了对系统的鸟瞰视图；它使用标尺，因此您可以快速了解哪些资源正在达到其限制。在下面的截图中，CPU利用率很低，文件系统使用率相对较低；但是，我们使用了可用RAM的64%：
- en: '![Overview](../images/00016.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![概览](../images/00016.jpeg)'
- en: Processes
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程
- en: 'The following screenshot displays a combined view of the output of the `ps
    aux`, `dockerps` and `top` commands we used in the previous chapter:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们在上一章中使用的`ps aux`，`dockerps`和`top`命令的输出的综合视图：
- en: '![Processes](../images/00017.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![进程](../images/00017.jpeg)'
- en: 'Here is what each column heading means:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每个列标题的含义：
- en: '**User**: This shows which user is running the process'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：这显示运行进程的用户'
- en: '**PID**: This is the unique process ID'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PID**：这是唯一的进程ID'
- en: '**PPID**: This is the **PID** of the parent process'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PPID**：这是父进程的**PID**'
- en: '**Start Time**: This shows what time the process started'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动时间**：这显示进程启动的时间'
- en: '**CPU %**: This is the percentage of the CPU the process is currently consuming'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU%**：这是进程当前消耗的CPU的百分比'
- en: '**MEM %**: This is the percentage of the RAM the process is currently consuming'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存%**：这是进程当前消耗的RAM的百分比'
- en: '**RSS**: This shows how much of the main memory the process is using'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RSS**：这显示进程正在使用的主内存量'
- en: '**Virtual Size**: This shows how much of the virtual memory the process is
    using'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟大小**：这显示进程正在使用的虚拟内存量'
- en: '**Status**: This shows the current status of the process; this are the standard
    Linux process state codes'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：显示进程的当前状态；这些是标准的Linux进程状态代码'
- en: '**Running Time**: This shows how long the process has been running'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时间**：显示进程运行的时间'
- en: '**Command**: This shows which command the process is running'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令**：显示进程正在运行的命令'
- en: '**Container**: This shows which container the process is attached to; the container
    listed as `/` is the host machine'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：显示进程附加到的容器；列为`/`的容器是主机机器'
- en: As there could be several hundred processes active, this section is split into
    pages; you can navigate to these with the buttons on the bottom-left. Also, you
    can sort the processes by clicking on any of the headings.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可能有数百个活动进程，此部分分为页面；您可以使用左下角的按钮导航到这些页面。此外，您可以通过单击任何标题对进程进行排序。
- en: CPU
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CPU
- en: 'The following graph shows the CPU utilization over the last minute:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了过去一分钟的CPU利用率：
- en: '![CPU](../images/00018.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![CPU](../images/00018.jpeg)'
- en: 'Here is what each term means:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每个术语的含义：
- en: '**Total Usage**: This shows an aggregate usage across all cores'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总使用情况**：显示所有核心的总体使用情况'
- en: '**Usage per Core**: This graph breaks down the usage per core'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每核使用情况**：此图表显示每个核的使用情况'
- en: '**Usage Breakdown** (not shown in the preceding screenshot): This shows aggregate
    usage across all cores, but breaks it down to what is being used by the kernel
    and what is being used by the user-owned processes'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用情况细分**（在上一个截图中未显示）：显示所有核心的总体使用情况，但将其细分为内核使用和用户拥有的进程使用'
- en: Memory
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存
- en: 'The **Memory** section is split into two parts. The graph tells you the total
    amount of memory used by all the processes for the host or container; this is
    the total of the hot and cold memory. The **Hot** memory is the current working
    set: pages that have been touched by the kernel recently. The **Cold** memory
    is the page that hasn''t been touched for a while and could be reclaimed if needed.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存**部分分为两部分。图表告诉您所有进程使用的主机或容器的内存总量；这是热内存和冷内存的总和。**热**内存是当前的工作集：最近被内核访问的页面。**冷**内存是一段时间没有被访问的页面，如果需要可以回收。'
- en: 'The **Usage Breakdown** gives a visual representation of the total memory in
    the host machine, or allowance in the container, alongside the total and hot usage:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用情况细分**以可视化方式表示了主机机器的总内存或容器的允许量，以及总使用量和热使用量。'
- en: '![Memory](../images/00019.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![内存](../images/00019.jpeg)'
- en: Network
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: 'This section shows the incoming and outgoing traffic over the last minute.
    You can change the interface using the drop-down box on the top-left. There is
    also a graph that shows any networking errors. Typically, this graph should be
    flat. If it isn''t, then you will be seeing performance issues with your host
    machine or container:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分显示了过去一分钟的传入和传出流量。您可以使用左上角的下拉框更改接口。还有一个图表显示任何网络错误。通常，此图表应该是平的。如果不是，那么您将看到主机机器或容器的性能问题：
- en: '![Network](../images/00020.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![网络](../images/00020.jpeg)'
- en: Filesystem
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统
- en: 'The final section gives a break down of the filesystem usage. In the following
    screenshot, `/dev/sda1` is the boot partition, `/dev/sda3` is the main filesystem,
    and `/dev/mapper/docker-8…` is an aggregate of the write file systems of your
    running containers:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分显示了文件系统的使用情况。在下一个截图中，`/dev/sda1`是引导分区，`/dev/sda3`是主文件系统，`/dev/mapper/docker-8…`是正在运行的容器的写文件系统的总和：
- en: '![Filesystem](../images/00021.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![文件系统](../images/00021.jpeg)'
- en: Viewing container stats
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看容器统计信息
- en: At the top of the page, there is a link of your running containers; you can
    either click on the link or go directly to `http://192.168.33.10:8080/docker/`.
    Once the page loads, you should see a list of all your running containers, and
    also a detailed overview of your Docker process, and finally a list of the images
    you have downloaded.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 页面顶部有一个您正在运行的容器的链接；您可以单击该链接，也可以直接转到`http://192.168.33.10:8080/docker/`。页面加载后，您应该会看到所有正在运行的容器的列表，以及Docker进程的详细概述，最后是您已下载的镜像列表。
- en: Subcontainers
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子容器
- en: 'Subcontainers shows a list of your containers; each entry is a clickable link
    that will take you to a page that will give you the following details:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 子容器显示了您的容器列表；每个条目都是一个可点击的链接，点击后将带您到一个页面，该页面将提供以下详细信息：
- en: 'Isolation:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离：
- en: '**CPU**: This shows you the CPU allowances of the container; if you have not
    set any resource limits, you will see the host''s CPU information'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU**：这显示了容器的CPU允许量；如果您没有设置任何资源限制，您将看到主机的CPU信息'
- en: '**Memory**: This shows you the memory allowances of the container; if you have
    not set any resource limits, your container will show an unlimited allowance'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存**：这显示了容器的内存允许量；如果您没有设置任何资源限制，您的容器将显示无限制的允许量'
- en: 'Usage:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法：
- en: '**Overview**: This shows gauges so you can quickly see how close to any resource
    limits you are'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概览**：这显示了仪表，让您快速了解您距离任何资源限制有多近'
- en: '**Processes**: This shows the processes for just your selected container'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程**：这显示了您选择的容器的进程'
- en: '**CPU**: This shows the CPU utilization graphs isolated to just your container'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU**：这显示了仅针对您的容器的CPU利用率图'
- en: '**Memory**: This shows the memory utilization of your container'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存**：这显示了您容器的内存利用情况'
- en: Driver status
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 驱动程序状态
- en: The driver gives the basic stats on your main Docker process, along with the
    information on the host machine's kernel, host name, and also the underlying operating
    system.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该驱动程序提供了有关主要Docker进程的基本统计信息，以及有关主机机器的内核、主机名以及底层操作系统的信息。
- en: It also gives information on the total number of containers and images. You
    may notice that the total number of images is a much larger figure than you expected
    to see; this is because it is counting each file system as an individual image.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了有关容器和镜像的总数的信息。您可能会注意到镜像的总数比您预期看到的要大得多；这是因为它将每个文件系统都计算为一个单独的镜像。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more details on Docker images, see the Docker user guide at [https://docs.docker.com/userguide/dockerimages/](https://docs.docker.com/userguide/dockerimages/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Docker镜像的更多详细信息，请参阅Docker用户指南[https://docs.docker.com/userguide/dockerimages/](https://docs.docker.com/userguide/dockerimages/)。
- en: It also gives you a detailed breakdown of your storage configuration.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它还为您提供了存储配置的详细分解。
- en: Images
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 镜像
- en: Finally, you get a list of the Docker images which are available on the host
    machine. It lists the Repository, Tag, Size, and when the image was created, along
    with the images' unique ID. This lets you know where the image originated from
    (Repository), which version of the image you have downloaded (Tag) and how big
    the image is (Size).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将获得主机机器上可用的Docker镜像列表。它列出了存储库、标签、大小以及镜像创建的时间，以及镜像的唯一ID。这让您知道镜像的来源（存储库）、您已下载的镜像的版本（标签）以及镜像的大小（大小）。
- en: This is all great, what's the catch?
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这一切都很棒，有什么问题吗？
- en: So you are maybe thinking to yourself that all of this information available
    in your browser is really useful; being able to see real-time performance metrics
    in an easily readable format is a really plus.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所以您可能会想，您在浏览器中获得的所有这些信息真的很有用；能够以易于阅读的格式查看实时性能指标真的是一个很大的优势。
- en: The biggest drawback of using the web interface for cAdvisor, as you may have
    noticed, is that it only shows you one minute's worth of metrics; you can quite
    literally see the information disappearing in real time.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cAdvisor的Web界面最大的缺点，正如你可能已经注意到的，就是它只会显示一分钟的指标；你可以实时看到信息消失。
- en: As a pane of glass gives a real-time view into your containers, cAdvisor is
    a brilliant tool; if you want to review any metrics that are older than one minute,
    you are out of luck.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像玻璃窗格可以实时查看您的容器一样，cAdvisor是一个很棒的工具；如果您想查看超过一分钟的任何指标，那就没那么幸运了。
- en: That is, unless you configure somewhere to store all of your data; this is where
    Prometheus comes in.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，除非你在某个地方配置存储所有数据；这就是Prometheus的用武之地。
- en: Prometheus
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prometheus
- en: 'So what''s Prometheus? Its developers describe it as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Prometheus是什么？它的开发人员描述如下：
- en: '*Prometheus is an open-source system''s monitoring and alerting toolkit built
    at SoundCloud. Since its inception in 2012, it has become the standard for instrumenting
    new services at SoundCloud and is seeing growing external usage and contributions.*'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Prometheus是一个在SoundCloud建立的开源系统监控和警报工具包。自2012年推出以来，它已成为在SoundCloud上为新服务进行仪表化的标准，并且正在看到越来越多的外部使用和贡献。
- en: OK, but what does that have to do with cAdvisor? Well, Prometheus has quite
    a powerful database backend that stores the data it imports as a time series of
    events.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，但这与cAdvisor有什么关系？嗯，Prometheus有一个非常强大的数据库后端，它将导入的数据存储为事件的时间序列。
- en: 'Wikipedia describes a time series as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科对时间序列的描述如下：
- en: '*"A time series is a sequence of data points, typically consisting of successive
    measurements made over a time interval. Examples of time series are ocean tides,
    counts of sunspots, and the daily closing value of the Dow Jones Industrial Average.
    Time series are very frequently plotted via line charts."*'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"时间序列是一系列数据点，通常由在一段时间间隔内进行的连续测量组成。时间序列的例子包括海洋潮汐、太阳黑子的计数和道琼斯工业平均指数的每日收盘价。时间序列经常通过折线图绘制。"*'
- en: '>'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*[https://en.wikipedia.org/wiki/Time_series](https://en.wikipedia.org/wiki/Time_series)*'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*[https://en.wikipedia.org/wiki/Time_series](https://en.wikipedia.org/wiki/Time_series)*'
- en: 'One of the things cAdvisor does, by default, is expose all the metrics it is
    capturing on a single page at `/metrics`; you can see this at `http://192.168.33.10:8080/metrics`
    on our cAdvisor installation. The metrics are updated each time the page is loaded:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: cAdvisor默认会做的一件事是在`/metrics`上公开它捕获的所有指标；您可以在我们的cAdvisor安装的`http://192.168.33.10:8080/metrics`上看到这一点。这些指标在每次加载页面时都会更新：
- en: '![Prometheus](../images/00022.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Prometheus](../images/00022.jpeg)'
- en: As you can see in the preceding screenshot, this is just a single long page
    of raw text. The way Prometheus works is that you configure it to scrape the `/metrics`
    URL at a user-defined interval, let's say every five seconds; the text is in a
    format that Prometheus understands and it is ingested into the Prometheus's time
    series database.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所看到的，这只是一个单独的长页面原始文本。Prometheus的工作方式是，您配置它以在用户定义的间隔时间内抓取`/metrics`
    URL，比如每五秒；文本以Prometheus理解的格式，并被摄入到Prometheus的时间序列数据库中。
- en: What this means is that, using Prometheus's powerful built-in query language,
    you can start to drill down into your data. Let's look at getting Prometheus up
    and running.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，使用Prometheus强大的内置查询语言，您可以开始深入挖掘您的数据。让我们来看看如何启动和运行Prometheus。
- en: Launching Prometheus
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Prometheus
- en: 'Like cAdvisor there are several ways you can launch Prometheus. To start with,
    we will launch a container and inject our own configuration file so that Prometheus
    knows where our cAdvisor endpoint is:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与cAdvisor一样，您可以以几种方式启动Prometheus。首先，我们将启动一个容器，并注入我们自己的配置文件，以便Prometheus知道我们的cAdvisor端点在哪里：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once you have launched the container, Prometheus will be accessible on the
    following URL: `http://192.168.33.10:9090`. When you first load the URL, you will
    be taken to a status page; this gives some basic information on the Prometheus
    installation. The important part of this page is the list of targets. This lists
    the URL that Prometheus will be scrapping to capture metrics; you should see your
    cAdvisor URL listed with a state of **HEALTHY**, as shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启动了容器，Prometheus将可以通过以下URL访问：`http://192.168.33.10:9090`。当您首次加载URL时，您将被带到一个状态页面；这提供了有关Prometheus安装的一些基本信息。此页面的重要部分是目标列表。这列出了Prometheus将抓取以捕获指标的URL；您应该看到您的cAdvisor
    URL列在其中，并显示为**HEALTHY**，如下面的截图所示：
- en: '![Launching Prometheus](../images/00023.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![启动Prometheus](../images/00023.jpeg)'
- en: 'Another information page contains the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个信息页面包含以下内容：
- en: '**Runtime information**: This displays how long Prometheus has been up and
    polling data, if you have configured an endpoint'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时信息**：显示Prometheus已经运行并轮询数据的时间，如果您已经配置了一个端点'
- en: '**Build information**: This contains the details of the version of Prometheus
    that you have been running'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建信息**：这包含了您正在运行的Prometheus版本的详细信息'
- en: '**Configuration**: This is a copy of the configuration file we injected into
    the container when it was launched'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：这是我们在启动容器时注入的配置文件的副本'
- en: '**Rules**: This is a copy of any rules we injected; these will be used for
    alerting'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：这是我们注入的任何规则的副本；这些将用于警报'
- en: '**Startup flags**: This shows all the runtime variables and their values'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动标志**：显示所有运行时变量及其值'
- en: Querying Prometheus
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询Prometheus
- en: As we only have a few containers up and running at the moment, let's launch
    one that runs Redis so we can start to look at the query language built into Prometheus.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们目前只有几个容器正在运行，让我们启动一个运行Redis的容器，这样我们就可以开始查看内置在Prometheus中的查询语言。
- en: 'We will use the official Redis image for this and as we are only going to use
    this as an example we won''t need to pass it any user variables:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用官方的Redis镜像，并且我们只会将其用作示例，因此我们不需要传递任何用户变量：
- en: '[PRE6]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We now have a container called `my-redis-server` running. cAdvisor should already
    be exposing metrics about the container to Prometheus; let's go ahead and see.
    In the Prometheus web interface, go to the **Graph** link in the menu at the top
    of the page. Here, you will be presented with a text box into which you can enter
    your query. To start with, let's look at the CPU usage of the Redis container.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个名为`my-redis-server`的容器正在运行。 cAdvisor应该已经在向Prometheus公开有关容器的指标；让我们继续查看。在Prometheus
    Web界面中，转到页面顶部菜单中的**Graph**链接。在这里，您将看到一个文本框，您可以在其中输入查询。首先，让我们查看Redis容器的CPU使用情况。
- en: 'In the box, enter the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在框中输入以下内容：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, after clicking on **Execute**, you should have two results returned,
    listed in the **Console** tab of the page. If you remember, cAdvisor records the
    CPU usage of each of the CPU cores that the container has access to, which is
    why we have two values returned, one for "cpu00" and one for "cpu01". Clicking
    on the **Graph** link will show you results over a period of time:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**Execute**后，您应该会得到两个结果，列在页面的**Console**选项卡中。如果您记得，cAdvisor记录容器可以访问的每个CPU核的CPU使用情况，这就是为什么我们得到了两个值，一个是"cpu00"，另一个是"cpu01"。点击**Graph**链接将显示一段时间内的结果：
- en: '![Querying Prometheus](../images/00024.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![查询Prometheus](../images/00024.jpeg)'
- en: As you can see in the preceding screenshot, we now have access to the usage
    graphs for the last 25 minutes, which is about how long ago I launched the Redis
    instance before generating the graph.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的截图中所看到的，我们现在可以访问过去25分钟的使用情况图表，这大约是我在生成图表之前启动Redis实例的时间。
- en: Dashboard
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表板
- en: Also, when creating one of the graphs using the query tool in the main application,
    you can install a separate Dashboard application. This runs in a second container
    that connects to your main Prometheus container using the API as a data source.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在主应用程序中使用查询工具创建图表时，您可以安装一个单独的仪表板应用程序。这个应用程序运行在第二个容器中，通过API连接到您的主Prometheus容器作为数据源。
- en: 'Before we start the Dashboard container, we should initialize a SQLite3 database
    to store our configuration. To ensure that the database is persistent, we will
    store this on the host machine in `/tmp/prom/file.sqlite3`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动仪表板容器之前，我们应该初始化一个SQLite3数据库来存储我们的配置。为了确保数据库是持久的，我们将把它存储在主机机器上的`/tmp/prom/file.sqlite3`中：
- en: '[PRE8]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once we have initialized the database, we can launch the Dashboard application
    properly:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们初始化了数据库，我们就可以正常启动仪表板应用程序了：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The application should now be accessible at `http://192.168.33.10:3000/`. The
    first thing we need to do is set up the data source. To do this, click on the
    **Servers** link at the top of the screen and then click on **New Server**. Here,
    you will be asked to provide the details of your Prometheus server. Name the server
    and enter the following URL:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序现在应该可以在`http://192.168.33.10:3000/`上访问。我们需要做的第一件事是设置数据源。要做到这一点，点击屏幕顶部的**服务器**链接，然后点击**新服务器**。在这里，您将被要求提供您的Prometheus服务器的详细信息。命名服务器并输入以下URL：
- en: '**Name**: `cAdvisor`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`cAdvisor`'
- en: '**URL**: `http://192.168.33.10:9090`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**：`http://192.168.33.10:9090`'
- en: '**Server Type**: `Prometheus`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器类型**：`Prometheus`'
- en: Once you click on **Create Server**, you should receive a message saying **Server
    was successfully created**. Next up, you need to create a `directory`; this is
    where your dashboards will be stored.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击**创建服务器**，您应该会收到一条消息，上面写着**服务器已成功创建**。接下来，您需要创建一个`目录`；这是您的仪表板将被存储的地方。
- en: Click on the **Dashboards** link in the top menu and then click on **New directory**
    and create one called `Test directory`. Now, you are ready to start creating Dashboards.
    Click on **New Dashboard**, call it **My Dashboard**, place it in `Test directory`.
    Once you click on **Create Dashboard**, you will be taken to the preview screen.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 点击顶部菜单中的**仪表板**链接，然后点击**新目录**，创建一个名为`测试目录`的目录。现在，您可以开始创建仪表板了。点击**新仪表板**，命名为**我的仪表板**，放置在`测试目录`中。一旦您点击**创建仪表板**，您将进入预览屏幕。
- en: 'From here, you can build up dashboards using the control in the top right-hand
    side of each section. To add data, you simply enter the query you would like to
    see in the dashboard section:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以使用每个部分右上角的控件来构建仪表板。要添加数据，您只需在仪表板部分输入您想要查看的查询：
- en: '![Dashboard](../images/00025.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![仪表板](../images/00025.jpeg)'
- en: Note
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For detailed information on how to create Dashboards, see the **PROMDASH** section
    of the Prometheus documentation at [http://prometheus.io/docs/visualization/promdash/](http://prometheus.io/docs/visualization/promdash/).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何创建仪表板的详细信息，请参阅Prometheus文档中的**PROMDASH**部分，网址为[http://prometheus.io/docs/visualization/promdash/](http://prometheus.io/docs/visualization/promdash/)。
- en: The next steps
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来的步骤
- en: At the moment, we are running Prometheus in a single container and its data
    is being stored within that same container. This means, if for any reason the
    container is terminated, our data is lost; it also means that we can't upgrade
    without loosing out data. To get around this problem, we can create a data volume
    container.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们正在单个容器中运行Prometheus，并且其数据存储在同一个容器中。这意味着，如果由于任何原因容器被终止，我们的数据就会丢失；这也意味着我们无法升级而不丢失数据。为了解决这个问题，我们可以创建一个数据卷容器。
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A data volume container is a special type of container that only exists as storage
    for other containers. For more details, see the Docker user guide at [https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container](https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 数据卷容器是一种特殊类型的容器，仅用作其他容器的存储。有关更多详细信息，请参阅Docker用户指南[https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container](https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container)。
- en: 'First of all, let''s make sure we have removed all the running Prometheus containers:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保已删除所有正在运行的Prometheus容器：
- en: '[PRE10]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next up, let''s create a data container called `promdata`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个名为`promdata`的数据容器：
- en: '[PRE11]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, launch Prometheus again, this time, using the data container:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次启动Prometheus，这次使用数据容器：
- en: '[PRE12]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will ensure that, if you have to upgrade or relaunch your container, the
    metrics you have been capturing are safe and sound.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保，如果您必须升级或重新启动容器，您一直在捕获的指标是安全的。
- en: 'We have only touched on the basics of using Prometheus in this section of the
    book; for further information on the application, I recommend the following links
    as a good starting point:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的本节中，我们只是简单介绍了使用Prometheus的基础知识；有关该应用程序的更多信息，我建议以下链接作为一个很好的起点：
- en: 'Documentation: [http://prometheus.io/docs/introduction/overview/](http://prometheus.io/docs/introduction/overview/)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档：[http://prometheus.io/docs/introduction/overview/](http://prometheus.io/docs/introduction/overview/)
- en: 'Twitter: [https://twitter.com/PrometheusIO](https://twitter.com/PrometheusIO)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter：[https://twitter.com/PrometheusIO](https://twitter.com/PrometheusIO)
- en: 'Project page: [https://github.com/prometheus/prometheus](https://github.com/prometheus/prometheus)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目页面：[https://github.com/prometheus/prometheus](https://github.com/prometheus/prometheus)
- en: 'Google groups: [https://groups.google.com/forum/#!forum/prometheus-developers](https://groups.google.com/forum/#!forum/prometheus-developers)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google群组：[https://groups.google.com/forum/#!forum/prometheus-developers](https://groups.google.com/forum/#!forum/prometheus-developers)
- en: Alternatives?
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他选择？
- en: 'There are some alternatives to Prometheus. One such alternative is InfluxDB
    that describes itself as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus有一些替代方案。其中一个替代方案是InfluxDB，它自述如下：
- en: '*An open-source distributed time series database with no external dependencies.*'
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个无需外部依赖的开源分布式时间序列数据库。
- en: However, at the time of writing, cAdvisor is not currently compatible with the
    latest version of InfluxDB. There are patches in the codebase for cAdvisor; however,
    these are yet to make it through to the Google-maintained Docker Image.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在撰写本文时，cAdvisor目前与最新版本的InfluxDB不兼容。cAdvisor的代码库中有补丁；然而，这些补丁尚未通过由Google维护的Docker镜像。
- en: For more details on InfluxDB and it's new visualization complain application
    Chronograf, see the project website at [https://influxdb.com/](https://influxdb.com/)
    and for more details on how to export cAdvisor statistics to InfluxDB, see the
    supporting documentation for cAdvisor at [https://github.com/google/cadvisor/tree/master/docs](https://github.com/google/cadvisor/tree/master/docs).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 有关InfluxDB及其新的可视化投诉应用Chronograf的更多详细信息，请参阅项目网站[https://influxdb.com/](https://influxdb.com/)，有关如何将cAdvisor统计数据导出到InfluxDB的更多详细信息，请参阅cAdvisor的支持文档[https://github.com/google/cadvisor/tree/master/docs](https://github.com/google/cadvisor/tree/master/docs)。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to take the viewing real-time statistics of
    our containers off the command line and into the web browser. We explored some
    different methods to install Google's cAdvisor application and also how to use
    its web interface to keep an eye on our running containers. We also learned how
    to capture metrics from cAdvisor and store them using Prometheus, a modern time
    series database.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将容器的实时统计信息从命令行转移到Web浏览器中进行查看。我们探讨了一些不同的方法来安装谷歌的cAdvisor应用程序，以及如何使用其Web界面来监视我们正在运行的容器。我们还学习了如何从cAdvisor捕获指标并使用Prometheus存储这些指标，Prometheus是一种现代时间序列数据库。
- en: The two main technologies we have covered in this chapter have only been publically
    available for less than twelve months. In the next chapter, we will look at using
    a monitoring tool that has been in a SysAdmins toolbox for over 10 years—Zabbix.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的两种主要技术仅在公开市场上可用不到十二个月。在下一章中，我们将介绍如何使用一种监控工具，这种工具已经在系统管理员的工具箱中使用了超过10年——Zabbix。
