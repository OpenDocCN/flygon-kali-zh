- en: '*Appendix*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*附录*'
- en: About
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于
- en: This section is included to assist the students to perform the activities in
    the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在帮助学生完成书中的活动。
- en: It includes detailed steps that are to be performed by the students to achieve
    the objectives of the activities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 其中包括学生执行活动目标所需执行的详细步骤。
- en: 'Lesson 1: Introduction to Java'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1课：Java简介
- en: 'Activity 1: Printing the Results of Simple Arithmetic Operations'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动1：打印简单算术运算的结果
- en: 'Solution:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a class named `Operations` as follows:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Operations`的类，如下所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Within `main()`, print a sentence describing the operation on the values you
    will be performing along with the result:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中，打印一句话描述您将执行的值操作以及结果：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Activity 2: Reading Values from the User and Performing Operations Using the
    Scanner Class.'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动2：从用户那里读取值并使用Scanner类执行操作。
- en: 'Solution:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建**|**类**。
- en: Enter `ReadScanner` as the class name, and then click **OK**.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ReadScanner`作为类名，然后点击**确定**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `main()` enter the following:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中输入以下内容：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the main program.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output will be as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Activity 3: Calculating the Percent Increase or Decrease of Financial Instruments'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动3：计算金融工具的百分比增加或减少
- en: 'Solution:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建**|**类**。
- en: Enter `StockChangeCalculator` as the class name, and then click **OK**.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`StockChangeCalculator`作为类名，然后点击**确定**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `main()` enter the following:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中输入以下内容：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Run the main program.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lesson 2: Variables, Data Types, and Operators'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2课：变量、数据类型和运算符
- en: 'Activity 4: Inputting Student Information and Outputting an ID'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动4：输入学生信息并输出ID
- en: 'Solution:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Import the `Scanner` package and create a new class
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Scanner`包并创建一个新类
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Take the student name as a string.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将学生姓名作为字符串。
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Take the university name as a string.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将大学名称作为字符串。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Take the student's age as an integer.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将学生的年龄作为整数。
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Print out the student details.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印学生详细信息。
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Activity 5: Calculating the Number of Full Fruit Boxes'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动5：计算满箱水果的数量
- en: 'Solution:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建**|**类**。
- en: Enter `PeachCalculator` as the class name, and then click **OK**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`PeachCalculator`作为类名，然后点击**确定**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `main()` enter the following:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中输入以下内容：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the main program.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lesson 3: Control Flow'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3课：控制流
- en: 'Activity 6: Controlling the Flow of Execution Using Conditionals'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动6：使用条件控制执行流程
- en: 'Solution:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a class named `Salary` and add `main()` method:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Salary`的类并添加`main()`方法：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Initialize two variables `workerhours` and `salary`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化两个变量`workerhours`和`salary`。
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the `if` condition, check whether the working hours of the worker is below
    the required hours. If the condition holds `true`, then the salary should be (working
    hours * 10).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if`条件中，检查工人的工作时间是否低于所需的工作时间。如果条件成立，则工资应为（工作时间* 10）。
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Use the `else if` statement to check if the working hours lies between 8 hours
    and 12 hours. If that is true, then the salary should be calculated at $10 per
    hour for the first eight hours and the remaining hours should be calculated at
    $12 per hour.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`else if`语句检查工作时间是否在8小时和12小时之间。如果是真的，则工资应为前8小时每小时$10，剩下的小时应按每小时$12计算。
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Use the `else` block for the default of $160 (additional day's salary) per day.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`else`块来处理每天额外的$160（额外一天的工资）的默认情况。
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Activity 7: Developing a Temperature System'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动7：开发温度系统
- en: 'Solution:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Declare two strings, `temp` and `weatherWarning`, and then initialize `temp`
    with either `High`, `Low`, or `Humid`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明两个字符串，`temp`和`weatherWarning`，然后用`High`、`Low`或`Humid`初始化`temp`。
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Create a switch statement that checks the different cases of `temp`, and then
    initialize the variable `weatherWarning` to appropriate messages for each case
    of temp (`High`, `Low`, `Humid`).
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个switch语句，检查`temp`的不同情况，然后根据每种情况的`temp`初始化变量`weatherWarning`为适当的消息（`High`、`Low`、`Humid`）。
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the default case, initialize `weatherWarning` to "The weather looks good.
    Take a walk outside".
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在默认情况下，将`weatherWarning`初始化为“天气看起来不错。出去散步吧”。
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After you complete the switch construct, print the value of `weatherWarning`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成switch结构后，打印`weatherWarning`的值。
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the program to see the output, it should be similar to:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序以查看输出，应该类似于：
- en: '[PRE26]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Full code is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码如下：
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Activity 8: Implementing the for Loop'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动8：实现for循环
- en: 'Solution:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建**|**类**。
- en: Enter `PeachBoxCounter` as the class name, and then click **OK**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`PeachBoxCounter`作为类名，然后点击**确定**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `main()` enter the following:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中输入以下内容：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Activity 9: Implementing the while Loop'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动9：实现while循环
- en: 'Solution:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建**|**类**。
- en: Enter `PeachBoxCounters` as the class name, and then click **OK**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`PeachBoxCounters`作为类名，然后点击**确定**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE30]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `main()` enter the following:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中输入以下内容：
- en: '[PRE31]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Activity 10: Implementing Looping Constructs'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动10：实现循环结构
- en: 'Solution:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Import the packages that are required to read data from the user.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入从用户读取数据所需的包。
- en: '[PRE32]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Declare the variables to store the total number of seats available, remaining
    seats, and tickets requested.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明变量以存储可用座位总数、剩余座位和请求的票数。
- en: '[PRE33]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Within a `while` loop, implement the `if else` loop that checks whether the
    request is valid, which implies that the number of tickets requested is less than
    the number of seats remaining.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`循环内，实现`if else`循环，检查请求是否有效，这意味着请求的票数少于剩余座位数。
- en: '[PRE34]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If the logic in the previous step is true, then print a message to denote that
    the ticket is processed, set the remaining seats to the appropriate value, and
    ask for the next set of tickets.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果前一步中的逻辑为真，则打印一条消息以表示票已处理，将剩余座位设置为适当的值，并要求获取下一组票。
- en: '[PRE35]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If the logic in step 3 is false, then print an appropriate message and break
    out of the loop:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果步骤3中的逻辑为假，则打印适当的消息并跳出循环：
- en: '[PRE36]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Activity 11: Continuous Peach Shipment with Nested Loops'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动11：使用嵌套循环进行连续桃子装运
- en: 'Solution:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建** | **类**。
- en: Enter `PeachBoxCounter` as the class name, and then click **OK**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`PeachBoxCounter`作为类名，然后单击**确定**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE37]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the `main()` enter the following:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中输入以下内容：
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Lesson 4: Object-Oriented Programming'
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4课：面向对象编程
- en: 'Activity 12: Creating a Simple Class in Java'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动12：在Java中创建一个简单的类
- en: 'Solution:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Create a new project in the IDE named `Animals`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IDE中创建一个名为`Animals`的新项目。
- en: In the project, create a new file named `Animal.java` under the `src/` folder.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中，在`src/`文件夹下创建一个名为`Animal.java`的新文件。
- en: 'Open `Animal.java` and paste in the following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Animal.java`并粘贴以下代码：
- en: '[PRE39]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Inside the curly braces, create the following instance variables to hold our
    data, as shown here:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号内，创建以下实例变量来保存我们的数据，如下所示：
- en: '[PRE40]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Below the instance variables, define two constructors. One will take no arguments
    and initialize legs to 4, ears to 2, and eyes to 2\. The second constructor will
    take the value of legs, ears, and eyes as arguments and set those values:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实例变量下面，定义两个构造函数。一个将不带参数并将腿初始化为4，耳朵初始化为2，眼睛初始化为2。第二个构造函数将以腿、耳朵和眼睛的值作为参数，并设置这些值：
- en: '[PRE41]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Define four methods, two to set and get the family and two to set and get the
    name:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义四个方法，两个用于设置和获取家庭，两个用于设置和获取名称：
- en: Note
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE42]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We have finished constructing our Animal class. Let's continue and create a
    few instances of this class.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了构建我们的Animal类。让我们继续创建这个类的几个实例。
- en: 'Create a new file named `Animals.java` and copy the following code into it,
    as shown here:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Animals.java`的新文件，并将以下代码复制到其中，如下所示：
- en: '[PRE43]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create two objects of the `Animal` class:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个`Animal`类的对象：
- en: '[PRE44]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let''s create another animal with 2 legs, 2 ears and 2 eyes:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再创建一个有2条腿、2只耳朵和2只眼睛的动物：
- en: '[PRE45]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To set the animals'' names and family, we will use the getters and setters
    we created in the class. Copy/write the following lines into the `Animals` class:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了设置动物的名称和家庭，我们将使用在类中创建的getter和setter。将以下行复制/写入`Animals`类中：
- en: '[PRE46]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出如下：
- en: '[PRE47]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![](img/C09581_04_09.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_04_09.jpg)'
- en: 'Figure 4.9: Output of the Animal class'
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.9：Animal类的输出
- en: 'Activity 13: Writing a Calculator Class'
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动13：编写一个计算器类
- en: 'Solution:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a Calculator class as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Calculator的类：
- en: '[PRE48]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Create three fields `double operand1`, `double operand2`, and `String operator`.
    Add a constructor that sets all three fields.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个字段`double operand1`，`double operand2`和`String operator`。添加一个设置所有三个字段的构造函数。
- en: '[PRE49]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In this class, add an `operate` method that will check what operator is ("+",
    "-", "x" or "/") and executes the correct operation, returning the result:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类中，添加一个`operate`方法，它将检查运算符是什么（"+"，"-"，"x"或"/"）并执行正确的操作，返回结果：
- en: '[PRE50]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Write a `main()` method as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`main()`方法如下：
- en: '[PRE51]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Activity 14: Creating a Calculator Using Java'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动14：使用Java创建计算器
- en: 'Solution:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a class `Operator` that has one String field initialized in the constructor
    that represents the operator. This class should have a default constructor that
    represents the default operator, which is sum. The `Operator` class should also
    have a method called `operate` that receives two doubles and return the result
    of the operator as a double. The default operation is `sum`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Operator`的类，它具有一个在构造函数中初始化的String字段，表示运算符。这个类应该有一个代表默认运算符的默认构造函数，即sum。`Operator`类还应该有一个名为`operate`的方法，它接收两个double并将运算符的结果作为double返回。默认操作是`sum`：
- en: '[PRE52]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Create another class named `Subtraction`. It extends from `Operator` and override
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`Subtraction`的类。它继承自`Operator`并覆盖
- en: the `operate` method with each operation that it represents. It also need a
    no-argument constructor that calls super passing the operator that it
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`operate`方法与它所代表的每个操作一起使用。它还需要一个不带参数的构造函数，调用super传递它所代表的运算符'
- en: 'represents:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 代表：
- en: '[PRE53]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create another class named `Multiplication`. It extends from Operator and override
    the `operate` method with each operation that it represents. It also need a no-argument
    constructor that calls super passing the operator that it represents:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`Multiplication`的类。它继承自Operator并覆盖`operate`方法，其中包含它所代表的每个操作。它还需要一个不带参数的构造函数，调用super传递它所代表的运算符：
- en: '[PRE54]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create another class named `Division`. It extends from Operator and override
    the `operate` method with each operation that it represents. It also need a no-argument
    constructor that calls super passing the operator that it represents:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`Division`的类。它继承自Operator并覆盖`operate`方法，其中包含它所代表的每个操作。它还需要一个不带参数的构造函数，调用super传递它所代表的运算符：
- en: '[PRE55]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As the previous `Calculator` class, this one will also have an `operate` method,
    but it will only delegate to the operator instance. Last, write a `main` method
    that calls the new calculator a few times, printing the results of the operation
    for each time:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与前一个`Calculator`类一样，这个类也将有一个`operate`方法，但它只会委托给运算符实例。最后，编写一个`main`方法，调用新的计算器几次，打印每次操作的结果：
- en: '[PRE56]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Activity 15: Understanding Inheritance and Polymorphism in Java'
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动15：理解Java中的继承和多态
- en: 'Solution:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a `Cat` class that inherits from `Animal`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个继承自`Animal`的`Cat`类：
- en: '[PRE57]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create instance variables `owner`, `numberOfTeeth`, and `age` as follows:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建实例变量`owner`，`numberOfTeeth`和`age`如下：
- en: '[PRE58]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create `main()` method as follows:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main()`方法如下：
- en: '[PRE59]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The output is as follows
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下
- en: '[PRE60]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Lesson 5: OOP in Depth'
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第5课：深入面向对象编程
- en: 'Activity 16: Creating and Implementing Interfaces in Java'
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动16：在Java中创建和实现接口
- en: 'Solution:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Open our `Animals` project from the previous lesson.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们之前的课程中打开`Animals`项目。
- en: Create a new interface called `AnimalBehavior`.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`AnimalBehavior`的新接口。
- en: In this create two methods `void move()` and `void makeSound().`
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此创建两个方法`void move()`和`void makeSound()。`
- en: Create a new `public` class called `Cow` and implement the `AnimalBehavior`
    interface. Override the two methods, but leave them blank for now.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Cow`的新的`public`类，并实现`AnimalBehavior`接口。重写这两个方法，但现在先留空。
- en: 'Inside the `Cow` class, create two fields, as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Cow`类中，创建两个字段，如下所示：
- en: '[PRE61]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Edit the overridden methods to look like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑重写的方法，使其如下所示：
- en: '[PRE62]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create another interface called `AnimalListener` with the following methods:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`AnimalListener`的接口，其中包含以下方法：
- en: '[PRE63]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Let the `Cow` class also implement this interface. Make sure that you override
    the two methods in the interface.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让`Cow`类也实现这个接口。确保你重写接口中的两个方法。
- en: 'Edit the two methods to look like this:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑两个方法，使其如下所示：
- en: '[PRE64]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Finally, create a `main` method to test your code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`main`方法来测试你的代码：
- en: '[PRE65]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Run the `Cow` class and view the output. It should look something like this:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`Cow`类并查看输出。它应该看起来像这样：
- en: '[PRE66]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Activity 17: Using instanceof and Typecasting'
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动17：使用instanceof和类型转换
- en: 'Solution:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Import `Random` package to generate random employees:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Random`包以生成随机员工：
- en: '[PRE67]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create an `EmployeeLoader` class that will serve as a datasource as follows:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`EmployeeLoader`类，作为数据源，如下所示：
- en: '[PRE68]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Declare a static pseudo-random generator as follows:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个静态伪随机生成器如下：
- en: '[PRE69]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Generate a new randomly picked employee as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个新的随机选择的员工如下：
- en: '[PRE70]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Create another file with `SalesWithCommission` class that extends `Sales`.
    Add a constructor that receives the gross sales as double and store it as a field.
    Also add a method called `getCommission` which returns a double that is the gross
    sales times 15% (0.15):'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`SalesWithCommission`的文件，该文件扩展`Sales`。添加一个接收毛销售额作为double的构造函数，并将其存储为字段。还添加一个名为`getCommission`的方法，该方法返回毛销售额乘以15%（0.15）的double：
- en: '[PRE71]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Write a class `ShowSalaryAndCommission` with `main()` method, that calls `getEmployee()`
    repeatedly inside a `for` loop and print the information about the Employee salary
    and tax. And if the employee is an instance of `SalesWithCommission`, also print
    his commission:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为`ShowSalaryAndCommission`的类，其中包含`main()`方法，该方法在`for`循环中重复调用`getEmployee()`并打印有关员工工资和税收的信息。如果员工是`SalesWithCommission`的实例，还要打印他的佣金：
- en: '[PRE72]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Activity 18: Understanding Typecasting in Java'
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动18：理解Java中的类型转换
- en: 'Solution:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Open our `Animals` project.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的`Animals`项目。
- en: 'Create a new class called `AnimalTest` and, inside it, create the main method:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`AnimalTest`的新类，并在其中创建`main`方法：
- en: '[PRE73]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Inside the `main` method, create two variables:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，创建两个变量：
- en: '[PRE74]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Print the owner of the `cat`:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`cat`的所有者：
- en: '[PRE75]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Upcast the `cat` to `Animal` and try to print the owner once more. What error
    do you get? Why?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`cat`向上转型为`Animal`，再次尝试打印所有者。你得到了什么错误？为什么？
- en: '[PRE76]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The error message is as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息如下：
- en: '![](img/C09581_05_07.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_05_07.jpg)'
- en: 'Figure 5.7: Exception while accessing the variables of the subclass for upcasting'
  id: totrans-230
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.7：在向上转型时访问子类变量时出现异常
- en: 'Reason: Since we did an upcast, we cannot access the variables of the subclass
    anymore.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 原因：由于我们进行了向上转型，所以我们不能再访问子类的变量。
- en: 'Print the sound of the `cow`:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`cow`的声音：
- en: '[PRE77]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Try to upcast the `cow` to `Animal`. Why error do you get? Why?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将`cow`向上转型为`Animal`。为什么会出错？为什么？
- en: '[PRE78]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The error message is as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息如下：
- en: '![](img/C09581_05_08.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_05_08.jpg)'
- en: 'Figure 5.8: Exception while upcasting cow to Animal'
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.8：将cow向上转型为Animal时出现异常
- en: 'Reason: Cow does not inherit from the Animal class, so they don''t share the
    same hierarchical tree.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 原因：牛没有继承自Animal类，所以它们不共享相同的层次树。
- en: 'Downcast the `animal` to `cat1` and print the owner again:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`animal`向下转型为`cat1`并再次打印所有者：
- en: '[PRE79]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The full `AnimalTest` class should look like this:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的`AnimalTest`类应该如下所示：
- en: '[PRE80]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output is as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/C09581_05_09.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_05_09.jpg)'
- en: 'Figure 5.9: Output of the AnimalTest class'
  id: totrans-246
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.9：AnimalTest类的输出
- en: 'Activity 19: Implementing Abstract Classes and Methods in Java'
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动19：在Java中实现抽象类和方法
- en: 'Solution:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Create a new project called `Hospital` and open it.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Hospital`的新项目并打开它。
- en: 'Inside the `src` folder, create an abstract class called `Person`:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，创建一个名为`Person`的抽象类：
- en: '[PRE81]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Create an abstract method that returns the type of person in the hospital.
    Name this method String `getPersonType()`, returning a String:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个返回医院中人员类型的抽象方法。命名此方法为`getPersonType()`，返回一个字符串：
- en: '[PRE82]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: We have finished our abstract class and method. Now, we will continue to inherit
    from it and implement this abstract method.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了抽象类和方法。现在，我们将继承它并实现这个抽象方法。
- en: 'Create a new class called Doctor that inherits from the Person class:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Doctor的继承自Person类的新类：
- en: '[PRE83]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Override the `getPersonType` abstract method in our `Doctor` class. Return
    the string "`Arzt`". This is German for Doctor:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`Doctor`类中重写`getPersonType`抽象方法。返回字符串"`Arzt`"。这是德语中的医生：
- en: '[PRE84]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Create another class called `Patient` to represent the patients in the hospital.
    Similarly, make sure that the class inherits from `Person` and overrides the `getPersonType`
    method. Return "`Kranke`". This is German for Patient:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`Patient`的类来代表医院中的患者。同样，确保该类继承自`Person`并重写`getPersonType`方法。返回"`Kranke`"。这是德语中的患者：
- en: '[PRE85]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Now, we have the two classes. We will now test our code using a third test class.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了两个类。我们将使用第三个测试类来测试我们的代码。
- en: Create a third class called `HospitalTest`. We will use this class to test the
    two classes we created previously.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第三个名为`HospitalTest`的类。我们将使用这个类来测试我们之前创建的两个类。
- en: 'Inside the `HospitalTest` class, create the `main` method:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HospitalTest`类中，创建`main`方法：
- en: '[PRE86]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Inside the `main` method, create an instance of `Doctor` and another instance
    of `Patient`:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，创建一个`Doctor`的实例和另一个`Patient`的实例：
- en: '[PRE87]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Try calling the `getPersonType` method for each of the objects and print it
    out to the console. What is the output?
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试为每个对象调用`getPersonType`方法并将其打印到控制台。输出是什么？
- en: '[PRE88]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The output is as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/C09581_05_10.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_05_10.jpg)'
- en: 'Figure 5.10: Output on calling getPersonType()'
  id: totrans-271
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.10：调用getPersonType()的输出
- en: 'Activity 20: Use abstract class to Encapsulate Common Logic'
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动20：使用抽象类封装通用逻辑
- en: 'Solution:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create an abstract class `GenericEmployee` that has a constructor that receives
    the gross salary and stores that in a field. It should implement the Employee
    interface and have two methods: `getGrossSalary()` and `getNetSalary()`. The first
    will just return the value passed into the constructor. The latter will return
    the gross salary minus the result of calling `getTax()` method:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个抽象类`GenericEmployee`，它具有一个接收总工资并将其存储在字段中的构造函数。它应该实现Employee接口，并具有两个方法：`getGrossSalary()`和`getNetSalary()`。第一个将只返回传递给构造函数的值。后者将返回总工资减去调用`getTax()`方法的结果：
- en: '[PRE89]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Create a new generic version of each type of employee: `GenericEngineer`. It
    will need a constructor that receives gross salary and pass it to the super constructor.
    It also needs to implement the `getTax()` method, returning the correct tax value
    for each class:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建每种类型员工的新通用版本：`GenericEngineer`。它将需要一个接收总工资并将其传递给超级构造函数的构造函数。它还需要实现`getTax()`方法，返回每个类的正确税值：
- en: '[PRE90]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Create a new generic version of each type of employee: `GenericManager`. It
    will need a constructor that receives gross salary and pass it to the super constructor.
    It also needs to implement the `getTax()` method, returning the correct tax value
    for each class:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建每种类型员工的新通用版本：`GenericManager`。它将需要一个接收总工资并将其传递给超级构造函数的构造函数。它还需要实现`getTax()`方法，返回每个类的正确税值：
- en: '[PRE91]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Create a new generic version of each type of employee: `GenericSales`. It will
    need a constructor that receives gross salary and pass it to the super constructor.
    It also needs to implement the `getTax()` method, returning the correct tax value
    for each class:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建每种类型员工的新通用版本：`GenericSales`。它将需要一个接收总工资并将其传递给超级构造函数的构造函数。它还需要实现`getTax()`方法，返回每个类的正确税值：
- en: '[PRE92]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Create a new generic version of each type of employee: `GenericSalesWithCommission`.
    It will need a constructor that receives gross salary and pass it to the super
    constructor. It also needs to implement the `getTax()` method, returning the correct
    tax value for each class. Remember to also receive the gross sales on the `GenericSalesWithCommission`
    class, and add the method that calculates the commission:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建每种类型员工的新通用版本：`GenericSalesWithCommission`。它将需要一个接收总工资并将其传递给超级构造函数的构造函数。它还需要实现`getTax()`方法，返回每个类的正确税值。记得在`GenericSalesWithCommission`类中也接收总销售额，并添加计算佣金的方法：
- en: '[PRE93]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Add a new method `getEmployeeWithSalary` to your `EmployeeLoader` class. This
    method will generate a random salary between 70,000 and 120,000 and assign to
    the newly created employee before returning it. Remember to also provide a gross
    sales when creating a `GenericSalesWithCommission` employee:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`EmployeeLoader`类添加一个新方法`getEmployeeWithSalary`。此方法将在返回之前为新创建的员工生成一个介于70,000和120,000之间的随机工资。记得在创建`GenericSalesWithCommission`员工时也提供总销售额：
- en: '[PRE94]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Write an application that calls the `getEmployeeWithSalary` method multiple
    times from inside `for` loop. This method will work like the one in the previous
    activity: print the net salary and tax for all employees. If the employee is an
    instance of `GenericSalesWithCommission` also print his commission.'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个应用程序，从`for`循环内多次调用`getEmployeeWithSalary`方法。此方法将像上一个活动中的方法一样工作：打印所有员工的净工资和税收。如果员工是`GenericSalesWithCommission`的实例，还要打印他的佣金。
- en: '[PRE95]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Lesson 6: Data Structures, Arrays, and Strings'
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6课：数据结构、数组和字符串
- en: 'Activity 21: Finding the Smallest Number in an Array'
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动21：在数组中找到最小的数字
- en: 'Solution:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Set up the `main` method in a new class file known as `ExampleArray:`
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`ExampleArray`的新类文件中设置`main`方法：
- en: '[PRE96]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Create an array of 20 numbers:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含20个数字的数组：
- en: '[PRE97]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Set the minimum float as the first number
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最小的浮点数设为第一个数字
- en: '[PRE98]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Create a for loop to check all the numbers in the array
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个for循环来检查数组中的所有数字
- en: '[PRE99]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Use if to test each number against the minimum. If it is smaller than the minimum
    then make that number the new minimum:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用if来测试每个数字是否小于最小值。如果小于最小值，则将该数字设为新的最小值：
- en: '[PRE100]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'After the loop completes, print out the minimum number:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环完成后，打印出最小的数字：
- en: '[PRE101]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: The full code should look like this.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码应该如下所示。
- en: '[PRE102]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Activity 22: Calculator with Array of Operators'
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动22：带有操作符数组的计算器
- en: 'Solution:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a class `Operators` that will contain the logic of determining what
    operator to use based out of a String. In this class create a `public` constant
    field `default_operator` that is going to be an instance of the `Operator` class.
    Then create another constant field called `operators` of type array of `Operator`
    and initialize it with an instance of each of the operators you have:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Operators`的类，它将包含基于字符串确定要使用的操作符的逻辑。在这个类中创建一个`public`常量字段`default_operator`，它将是`Operator`类的一个实例。然后创建另一个名为`operators`的常量字段，类型为`Operator`数组，并使用每个操作符的实例进行初始化：
- en: '[PRE103]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'In the `Operators` class, add a `public static` method called `findOperator`
    that receives the operator as a String and return an instance of `Operator`. Inside
    it iterate over the possible operators array and, using the `matches` method for
    each operator, return the selected operator, or the default one if it didn''t
    match any of them:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Operators`类中，添加一个名为`findOperator`的`public static`方法，该方法接收操作符作为字符串并返回`Operator`的实例。在其中迭代可能的操作符数组，并对每个操作符使用`matches`方法，返回所选操作符，如果没有匹配任何操作符，则返回默认操作符：
- en: '[PRE104]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Create a new `CalculatorWithDynamicOperator` class with three fields: `operand1`
    and `operator2` as `double` and `operator` of type `Operator`:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`CalculatorWithDynamicOperator`类，其中包含三个字段：`operand1`和`operator2`为`double`类型，`operator`为`Operator`类型：
- en: '[PRE105]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Add a constructor that receives three parameters: `operand1` and `operand2`
    of type `double` and `operator` as a String. In the constructor, instead of having
    an if-else to select the operator, use the `Operators.findOperator` method to
    set the operator field:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个接收三个参数的构造函数：`operand1`和`operand2`的类型为`double`，`operator`为String类型。在构造函数中，不要使用if-else来选择操作符，而是使用`Operators.findOperator`方法来设置操作符字段：
- en: '[PRE106]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Add a `main` method where you call the `Calculator` class multiple times and
    print the results:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`main`方法，在其中多次调用`Calculator`类并打印结果：
- en: '[PRE107]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Activity 23: Working with ArrayList'
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动23：使用ArrayList
- en: 'Solution:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Import `ArrayList` and `Iterator` from `java.util`:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`java.util`导入`ArrayList`和`Iterator`：
- en: '[PRE108]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Create a new class called `StudentsArray`:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`StudentsArray`的新类：
- en: '[PRE109]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'In the `main` method define an `ArrayList` of `Student` objects. Insert 4 student
    instances, instantiated with different kinds of constructors we created earlier:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中定义一个`Student`对象的`ArrayList`。插入4个学生实例，用我们之前创建的不同类型的构造函数实例化：
- en: '[PRE110]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Create an iterator for your list and print the name of each student:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的列表创建一个迭代器并打印每个学生的姓名：
- en: '[PRE111]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Clear all the `students`:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除所有的“学生”：
- en: '[PRE112]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The final code should look like this:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的代码应该如下所示：
- en: '[PRE113]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The output is as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/C09581_06_30.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_06_30.jpg)'
- en: 'Figure 6.30: Output of the StudentsArray class'
  id: totrans-333
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.30：StudentsArray类的输出
- en: 'Activity 24: Input a String and Output Its Length and as an Array'
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动24：输入一个字符串并将其长度输出为数组
- en: 'Solution:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE114]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Create a public class called `NameTell` and a `main` method:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`NameTell`的公共类和一个`main`方法：
- en: '[PRE115]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Use the `Scanner` and `nextLine` to input a string at the prompt "`Enter your
    name:`"
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Scanner`和`nextLine`在提示“输入您的姓名：”处输入一个字符串
- en: '[PRE116]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Count the length of the string and find the first character:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算字符串的长度并找到第一个字符：
- en: '[PRE117]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Print an output:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印一个输出：
- en: '[PRE118]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The output is as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/C09581_06_31.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_06_31.jpg)'
- en: 'Figure 6.31: Output of the NameTell class'
  id: totrans-348
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.31：NameTell类的输出
- en: 'Activity 25: Calculator Reads from Input'
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动25：计算器从输入中读取
- en: 'Solution:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a new class called `CommandLineCalculator` with a `main()` method in
    it:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`CommandLineCalculator`的新类，其中包含一个`main()`方法：
- en: '[PRE119]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Use an infinite loop to keep the application running until the user asks to
    exit.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无限循环使应用程序保持运行，直到用户要求退出。
- en: '[PRE120]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Collect the user input to decide which action to execute. If the action is
    **Q** or **q**, exit the loop:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集用户输入以决定要执行的操作。如果操作是**Q**或**q**，则退出循环：
- en: '[PRE121]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'If the action is anything else, find an operator and request two other inputs
    that will be the operands covering them to double:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果操作是其他任何操作，请查找操作符并请求另外两个输入，这些输入将是覆盖它们为double的操作数：
- en: '[PRE122]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Call the `operate` method on the Operator found and print the result to the
    console.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到的操作符上调用`operate`方法并将结果打印到控制台。
- en: 'Activity 26: Removing Duplicate Characters from a String'
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动26：从字符串中删除重复字符
- en: 'Solution:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a Unique class as follows:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Unique的类，如下所示：
- en: '[PRE123]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Create a new method `removeDups` called that takes and returns a string. This
    is where our algorithm will go. This method should be `public` and `static`:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`removeDups`的新方法，该方法接受并返回一个字符串。这就是我们的算法所在的地方。此方法应该是`public`和`static`的：
- en: '[PRE124]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Inside the method, check whether the string is null, empty, or has a length
    of 1\. If any of these cases are true, then just return the original string since
    there checking is not needed:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法内部，检查字符串是否为null、空或长度为1。如果这些情况中的任何一个为真，则只返回原始字符串，因为不需要检查：
- en: '[PRE125]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Create a string called `result` that is empty. This will be a unique string
    to be returned:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`result`的空字符串。这将是要返回的唯一字符串：
- en: '[PRE126]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Create for loop from `0` to the length of the string passed into the method.
    Inside the `for` loop, get the character at the current index of the string. Name
    the variable `c`. Also create a `boolean` called `isDuplicate` and initialize
    it to `false`. When we encounter a duplicate, we will change it to `true`.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个从`0`到传递到方法中的字符串长度的for循环。在`for`循环内，获取字符串当前索引处的字符。将变量命名为`c`。还创建一个名为`isDuplicate`的`boolean`并将其初始化为`false`。当我们遇到重复时，我们将其更改为`true`。
- en: '[PRE127]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Create another nested `for` loop from `0` to the `length()` of result. Inside
    the `for` loop, also get the character at the current index of result. Name it
    `d`. Compare `c` and d. If they are equal, then set `isDuplicate` to `true` and
    `break`. Close the inner `for` loop and go inside the first `for` loop. Check
    if `isDuplicate` is false. If it is, then append `c` to result. Go outside the
    first `for` loop and return the result. That concludes our algorithm:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个嵌套的`for`循环，从`0`到`result`的`length()`。在内部的`for`循环中，还要获取结果当前索引处的字符。将其命名为`d`。比较`c`和`d`。如果它们相等，则将`isDuplicate`设置为`true`并`break`。关闭内部的`for`循环并进入第一个`for`循环。检查`isDuplicate`是否为false。如果是，则将`c`附加到结果。退出第一个`for`循环并返回结果。这就结束了我们的算法：
- en: '[PRE128]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Create a `main()` method as follows:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个如下所示的`main()`方法：
- en: '[PRE129]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The output is as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/C09581_06_32.jpg)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_06_32.jpg)'
- en: 'Figure 6.32: Output of Unique class'
  id: totrans-378
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.32：Unique类的输出
- en: 'The full code is as follows:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码如下：
- en: '[PRE130]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'The output is as follows:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.30: Output of Unique class](img/C09581_06_33.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![图6.30：Unique类的输出](img/C09581_06_33.jpg)'
- en: 'Figure 6.33: Output of Unique class'
  id: totrans-383
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.33：Unique类的输出
- en: 'Lesson 7: The Java Collections Framework and Generics'
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7课：Java集合框架和泛型
- en: 'Activity 27: Read Users from CSV Using Array with Initial Capacity'
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动27：使用具有初始容量的数组从CSV中读取用户
- en: 'Solution:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Create a class called `UseInitialCapacity` with a `main()` method
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`UseInitialCapacity`的类，其中包含一个`main()`方法
- en: '[PRE131]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Add a constant field that will be the initial capacity of the array. It will
    also be used when the array needs to grow:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个常量字段，它将是数组的初始容量。当数组需要增长时，也将使用它：
- en: '[PRE132]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Add a `static` method that will resize arrays. It receives two parameters:
    an array of Users and an `int` that represents the new size for the array. It
    should also return an array of Users. Implement the resize algorithm using `System.arraycopy`
    like you did in the previous exercise. Be mindful that the new size might be smaller
    than the current size of the passed in array:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`static`方法，用于调整数组大小。它接收两个参数：一个用户数组和一个表示数组新大小的`int`。它还应返回一个用户数组。使用`System.arraycopy`实现调整大小算法，就像在上一个练习中所做的那样。请注意，新大小可能小于传入数组的当前大小：
- en: '[PRE133]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Write another `static` method that will load the users from a CSV file into
    an array. It needs to ensure that the array has the capacity to receive the users
    as they are loaded from the file. You''ll also need to ensure that after finishing
    loading the users, the array do not contain extra slots at the end:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写另一个`static`方法，将用户从CSV文件加载到数组中。它需要确保数组有能力接收从文件加载的用户。您还需要确保在加载用户后，数组不包含额外的插槽：
- en: '[PRE134]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'In the `main` method, call the load users method and print the total number
    of users loaded:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，调用加载用户的方法并打印加载的用户总数：
- en: '[PRE135]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Add imports:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加导入：
- en: '[PRE136]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'The output is as follows:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE137]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Activity 28: Reading a Real Dataset Using Vector'
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动28：使用Vector读取真实数据集
- en: 'Solution:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Before starting, change your `CSVLoader` to support files without headers.
    To do that, add a new constructor that receives a `boolean` that tells if it should
    ignore the first line or not:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始之前，将您的`CSVLoader`更改为支持没有标题的文件。为此，添加一个新的构造函数，接收一个`boolean`，告诉它是否应该忽略第一行：
- en: '[PRE138]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Change the old constructor to call this new one passing true to ignore the
    first line. This will avoid you to go back and change any existing code:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将旧构造函数更改为调用此新构造函数，传递true以忽略第一行。这将避免您返回并更改任何现有代码：
- en: '[PRE139]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Create a class called `CalculateAverageSalary` with `main` method:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`CalculateAverageSalary`的类，其中包含`main`方法：
- en: '[PRE140]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Create another method that reads data from the CSV and load the wages into
    a Vector. The method should return the Vector at the end:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个方法，从CSV中读取数据并将工资加载到Vector中。该方法应在最后返回Vector：
- en: '[PRE141]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'In the `main` method, call the `loadWages` method and store the loaded wages
    in a Vector. Also store the initial time that the application started:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，调用`loadWages`方法并将加载的工资存储在Vector中。还要存储应用程序启动时的初始时间：
- en: '[PRE142]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Initialize three variables to store the min, max and sum of all wages:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化三个变量来存储所有工资的最小值、最大值和总和：
- en: '[PRE143]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'In a for-each loop, process all wages, storing the min, max and adding it to
    the sum:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`for-each`循环中，处理所有工资，存储最小值、最大值并将其添加到总和中：
- en: '[PRE144]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'At the end print the number of wages loaded and total time it took to load
    and process them. Also print the average, min and max wages:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后打印加载的工资数量和加载和处理它们所花费的总时间。还打印平均工资、最低工资和最高工资：
- en: '[PRE145]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Add imports:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加导入：
- en: '[PRE146]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'The output is as follows:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE147]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Activity 29: Iterating on Vector of Users'
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动29：对用户的Vector进行迭代
- en: 'Solution:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a new class called `IterateOnUsersVector` with `main` method:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`IterateOnUsersVector`的新类，其中包含`main`方法：
- en: '[PRE148]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'In the main method, call the `UsersLoader.loadUsersInVector` passing the first
    argument passed from the command line as the file to load from and store the data
    in a Vector:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主方法中，调用`UsersLoader.loadUsersInVector`，传递从命令行传递的第一个参数作为要加载的文件，并将数据存储在Vector中：
- en: '[PRE149]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Iterate over the users Vector using a `for-each` loop and print the information
    about the users to the console:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`for-each`循环迭代用户Vector，并将有关用户的信息打印到控制台：
- en: '[PRE150]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Add imports:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加导入：
- en: '[PRE151]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The output is as follows:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE152]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Activity 30: Using a Hashtable to Group Data'
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动30：使用Hashtable对数据进行分组
- en: 'Solution:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a class called `GroupWageByEducation` with a `main` method:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`GroupWageByEducation`的类，其中包含一个`main`方法：
- en: '[PRE153]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Create a `static` method that creates and returns a `Hashtable` with keys of
    type String and values of type Vector of Integers:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`static`方法，创建并返回一个键类型为String，值类型为整数向量的`Hashtable`：
- en: '[PRE154]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Between creating the `Hashtable` and returning it, load the rows from the CSV
    ensuring they have the correct format:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`Hashtable`和返回它之间，加载来自CSV的行，确保它们具有正确的格式：
- en: '[PRE155]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'In the `if` inside the `while` loop, get the education level and wage for the
    record:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`循环内的`if`中，获取记录的教育水平和工资：
- en: '[PRE156]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Find the Vector in the `Hashtable` that corresponds to the current education
    level and add the new wage to it:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Hashtable`中找到与当前教育水平相对应的Vector，并将新工资添加到其中：
- en: '[PRE157]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'In the main method, call your `loadWages` method passing the first argument
    from the command line as the file to load the data from:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主方法中，调用您的`loadWages`方法，传递命令行的第一个参数作为要加载数据的文件：
- en: '[PRE158]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Iterate on the `Hashtable` entries using a `for-each` loop and for each entry,
    get the Vector of the corresponding wages and initialize min, max and sum variables
    for it:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`for-each`循环迭代`Hashtable`条目，并为每个条目获取相应工资的Vector，并初始化最小值、最大值和总和变量：
- en: '[PRE159]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'After initializing the variables, iterate over all wages and store the min,
    max and sum values:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化变量后，遍历所有工资并存储最小值、最大值和总和：
- en: '[PRE160]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Then, print the information found for the specified entry, which represents
    an education level:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打印找到的指定条目的信息，该条目表示教育水平：
- en: '[PRE161]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Add imports:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加导入：
- en: '[PRE162]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'The output is as follows:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE163]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Activity 31: Sorting Users'
  id: totrans-459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动31：对用户进行排序
- en: 'Solution:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Write a comparator class to compare Users by ID:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个比较器类来比较用户的ID：
- en: '[PRE164]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Write a comparator class to compare Users by email:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个比较器类，按电子邮件比较用户：
- en: '[PRE165]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Write a comparator class to compare Users by name:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个比较器类，按用户名比较用户：
- en: '[PRE166]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Create a new class called `SortUsers` with a `main` method which loads the
    unique users keyed by email:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`SortUsers`的新类，其中包含一个`main`方法，该方法按电子邮件加载唯一的用户：
- en: '[PRE167]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'After loading the users, transfer the users into a Vector of Users to be able
    to preserve order since `Hashtable` doesn''t do that:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载用户后，将用户转移到用户的Vector中，以便保留顺序，因为`Hashtable`不会这样做：
- en: '[PRE168]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Ask the user to pick what field he wants to sort the users by and collect the
    input from standard input:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要求用户选择要按其对用户进行排序的字段，并从标准输入收集输入：
- en: '[PRE169]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Use the input in a `switch` statement to pick what comparator to use. If the
    input is not valid, print a friendly message and exit:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`switch`语句中的输入来选择要使用的比较器。如果输入无效，则打印友好的消息并退出：
- en: '[PRE170]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Tell the user what field you''re going to sort by and sort the Vector of users:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉用户你要按什么字段排序，并对用户的向量进行排序：
- en: '[PRE171]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Print the users using a `for-each` loop:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`for-each`循环打印用户：
- en: '[PRE172]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Add imports:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加导入：
- en: '[PRE173]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'The output is as follows:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE174]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'Lesson 8: Advanced Data Structures in Java'
  id: totrans-483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第8课：Java中的高级数据结构
- en: 'Activity 32: Creating a Custom Linked List in Java'
  id: totrans-484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动32：在Java中创建自定义链表
- en: 'Solution:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Create a class named, `SimpleObjLinkedList`.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`SimpleObjLinkedList`的类。
- en: '[PRE175]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Create a class named Node that represents each element in a Linked List. Each
    node will have an Object that it needs to hold, and it will have a reference to
    the next Node. The `LinkedList` class will have a reference to the head node and
    will be able to traverse to the next Node by using `Node.getNext()`. Head being
    the first element, we could traverse to the next element by moving `next` in the
    current Node. Like this, we could traverse till the last element of the list:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Node的类，表示链表中的每个元素。每个节点将有一个它需要保存的对象，并且将引用下一个节点。`LinkedList`类将引用头节点，并且可以通过使用`Node.getNext()`遍历到下一个节点。头部是第一个元素，我们可以通过移动当前节点中的`next`来遍历到下一个元素。这样，我们可以遍历到列表的最后一个元素：
- en: '[PRE176]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'Implement a `toString()` method to represent this object. Starting from the
    head Node, iterate all the nodes until the last node is found. On each iteration,
    construct a string representation of the object stored in each node:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`toString()`方法来表示这个对象。从头节点开始，迭代所有节点，直到找到最后一个节点。在每次迭代中，构造存储在每个节点中的对象的字符串表示：
- en: '[PRE177]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Implement the `add(Object item)` method so that any item/object can be added
    into this List. Construct a new Node object by passing the `newItem = new Node(item)`
    Item. Starting at the head node, crawl to the end of the list. In the last node,
    set the next node as our newly created node (`newItem`). Increment the index:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`add(Object item)`方法，以便将任何项目/对象添加到此列表中。通过传递`newItem = new Node(item)` Item来构造一个新的Node对象。从头节点开始，爬到列表的末尾。在最后一个节点中，将下一个节点设置为我们新创建的节点（`newItem`）。增加索引：
- en: '[PRE178]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Implement `get(Integer index`) method to retrieve the item from the list based
    on the index. Index must not be less than 0\. Write a logic to crawl to the specified
    index, identify the node, and return the value from the node.
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`get(Integer index)`方法，根据索引从列表中检索项目。索引不能小于0。编写一个逻辑来爬到指定的索引，识别节点，并从节点返回值。
- en: '[PRE179]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Implement the `remove(Integer index)` method to remove the item from the list
    based on the index. Write logic to crawl to the node before the specified index
    and identify the node. In this node, set the `next` as `getNext()`. Return true
    if the element was found and deleted. If the element was not found, return false:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`remove(Integer index)`方法，根据索引从列表中删除项目。编写逻辑来爬到指定索引之前的节点并识别节点。在这个节点中，将`next`设置为`getNext()`。如果找到并删除了元素，则返回true。如果未找到元素，则返回false：
- en: '[PRE180]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Create a member attribute of type Node (pointing to the head node). Write a
    `main` method, create an object of `SimpleObjLinkedList`, and add five strings,
    one after the other `("INPUT-1", "INPUT-2", "INPUT-3", "INPUT-4","INPUT-5")`,
    to it respectively. Print the `SimpleObjLinkedList` object. In the `main` method,
    get the item from the list using `get(2)` and print the value of the item retrieved.
    Also, remove the item from list `remove(2)` and print the value of the list. One
    element should have been deleted from the list:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个指向头节点的Node类型的成员属性。编写一个`main`方法，创建一个`SimpleObjLinkedList`对象，并依次向其中添加五个字符串（"INPUT-1"，"INPUT-2"，"INPUT-3"，"INPUT-4"，"INPUT-5"）。打印`SimpleObjLinkedList`对象。在`main`方法中，使用`get(2)`从列表中获取项目并打印检索到的项目的值。还要从列表中删除项目`remove(2)`并打印列表的值。列表中应该已经删除了一个元素：
- en: '[PRE181]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'The output is as follows:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE182]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Activity 33: Implementing the Methods in the BinarySearchTree Class to Find
    the Highest and Lowest Value in the BST'
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动33：实现BinarySearchTree类中的方法，以找到BST中的最高和最低值
- en: 'Solution:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Take the same class we used in the previous exercise: `BinarySearchTree`. Add
    a new method, `int` `getLow()`, to find the lowest value in the BST and return
    it. As we learned about the BST, the leftmost node will be the lowest of all the
    values. Iterate all of the left nodes until we reach an empty left node and get
    the value of its root:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在上一个练习中使用的相同类：`BinarySearchTree`。添加一个新方法`int getLow()`，以找到BST中的最低值并返回它。正如我们所了解的BST，最左边的节点将是所有值中最低的。迭代所有左节点，直到达到一个空的左节点，并获取其根的值：
- en: '[PRE183]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Add a new method, `int` `getHigh()`, to find the highest value in the BST and
    return it. As we learned about the BST, the rightmost node will be the highest
    of all the values. Iterate all the right nodes until we reach an empty right node
    and get the value of its root:'
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新方法`int getHigh()`，以找到BST中的最高值并返回它。正如我们所了解的BST，最右边的节点将是所有值中最高的。迭代所有右节点，直到达到一个空的右节点，并获取其根的值：
- en: '[PRE184]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'In the `main` method, construct a BST, add values to it, and then print the
    highest and lowest values by calling `getLow()` and `getHigh()`:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，构造一个BST，向其中添加值，然后通过调用`getLow()`和`getHigh()`来打印最高和最低的值：
- en: '[PRE185]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'The output is as follows:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE186]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Activity 34: Using an Enum to Hold College Department Details'
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动34：使用枚举来保存大学部门的详细信息
- en: 'Solution:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a `DeptEnum` enum using the `enum` keyword. Add two private attributes
    (`String deptName` and `int deptNo`) to hold the values to be kept in the enum.
    Override a constructor to take an acronym and `deptNo` and place it in the member
    variables. Add enum constants adhering to the constructor:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`enum`关键字创建一个`DeptEnum`枚举。添加两个私有属性（`String deptName`和`int deptNo`）来保存枚举中的值。重写一个构造函数，以取一个缩写和`deptNo`并将其放入成员变量中。添加符合构造函数的枚举常量：
- en: '[PRE187]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Add getter methods for `deptName` and `deptNo`:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`deptName`和`deptNo`添加getter方法：
- en: '[PRE188]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Let''s write a `main` method and sample program to demonstrate the use of enums:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写一个`main`方法和一个示例程序来演示枚举的用法：
- en: '[PRE189]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'Output:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE190]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Activity 35: Implementing Reverse Lookup'
  id: totrans-522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动35：实现反向查找
- en: 'Solution:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Create an enum `App`, that declares constants BE, BCOM, BSC and BARC, along
    with their full forms and department numbers.
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个枚举`App`，声明常量BE、BCOM、BSC和BARC，以及它们的全称和部门编号。
- en: '[PRE191]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Also declare two private variables `accronym` and `deptNo`.
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还声明两个私有变量`accronym`和`deptNo`。
- en: '[PRE192]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Create a parameterized constructor and assign the variables `accronym` and `deptNo`
    with values passed as arguments.
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带参数的构造函数，并将变量`accronym`和`deptNo`分配为传递的值。
- en: '[PRE193]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Declare a public method `getAccronym()` that returns the variable `accronym`
    and a public method `getDeptNo()` that returns the variable `deptNo`.
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个公共方法`getAccronym()`，返回变量`accronym`，以及一个公共方法`getDeptNo()`，返回变量`deptNo`。
- en: '[PRE194]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Implement reverse look up that takes in the course name, and searches the corresponding
    acronym in the `App` enum.
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现反向查找，接受课程名称，并在`App`枚举中搜索相应的缩写。
- en: '[PRE195]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Implement the main method, and run the program.
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现主方法，并运行程序。
- en: '[PRE196]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'Your Output should be similar to:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 您的输出应类似于：
- en: '[PRE197]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Lesson 9: Exception Handling'
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第9课：异常处理
- en: 'Activity 36: Handling Mistakes in Numeric User Input'
  id: totrans-539
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动36：处理数字用户输入中的错误
- en: 'Solution:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the **src** folder and select **New** | **Class**.
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**src**文件夹，然后选择**New** | **Class**。
- en: Create a class `Adder`, and then click **OK**.
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Adder`的类，然后单击**OK**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE198]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'Create a class named `Adder`:'
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Adder`的类：
- en: '[PRE199]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'In `main()` method, use the `for` loop to read values from the user:'
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`方法中，使用`for`循环从用户那里读取值：
- en: '[PRE200]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: In the same loop, check if the valid value is entered. If the value is valid,
    add a try block to calculate the sum of three numbers.
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个循环中，检查是否输入了有效值。如果值有效，则添加一个try块来计算三个数字的总和。
- en: '[PRE201]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: The catch block should prompt the user to input valid numbers.
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: catch块应提示用户输入有效数字。
- en: '[PRE202]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Print the sum:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印总和：
- en: '[PRE203]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'Print the result to the console. Here is a sample output of a case with no
    errors:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 将结果打印到控制台。以下是一个没有错误的案例的示例输出：
- en: '[PRE204]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'And here is a sample output of a run with errors:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有错误的运行的示例输出：
- en: '[PRE205]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'Activity 37: Writing Custom Exceptions in Java'
  id: totrans-559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动37：在Java中编写自定义异常
- en: 'Solution:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the **src** folder and select **New** | **Class**.
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**src**文件夹，然后选择**New** | **Class**。
- en: Enter `RollerCoasterWithAge` as the class name, and then click **OK**.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`RollerCoasterWithAge`作为类名，然后单击**OK**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE206]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Create an exception class, `TooYoungException`:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个异常类，`TooYoungException`：
- en: '[PRE207]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'In `main()`, create a loop that reads in the names of the visitors:'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中，创建一个循环，读取访客的姓名：
- en: '[PRE208]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'The `try` block, read the age of the visitors, throws `TooYoungException` if
    the age is below 15, prints the name of the visitor riding the Roller Coaster:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`try`块，读取访客的年龄，如果年龄低于15岁，则抛出`TooYoungException`，打印乘坐过山车的访客的姓名：'
- en: '[PRE209]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'The catch block will display the message that is to be displayed for visitors
    below the age of 15:'
  id: totrans-571
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: catch块将显示15岁以下访客的消息：
- en: '[PRE210]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Activity 38: Dealing with Multiple Exceptions in a Block'
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动38：在一个块中处理多个异常
- en: 'Solution:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the **src** folder and select **New** | **Class**.
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**src**文件夹，然后选择**New** | **Class**。
- en: Enter `RollerCoasterWithAgeAndHeight` as the class name, and then click **OK**.
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`RollerCoasterWithAgeAndHeight`作为类名，然后单击**OK**。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE211]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Create an exception class, `TooYoungException`:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个异常类，`TooYoungException`：
- en: '[PRE212]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Create an exception class, `TooShortException`:'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个异常类，`TooShortException`：
- en: '[PRE213]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'In `main()`, create a loop that reads in the names of the visitors:'
  id: totrans-583
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中，创建一个循环，读取访客的姓名：
- en: '[PRE214]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'The `try` block, read the age of the visitors, throws `TooYoungException` if
    the age is below 15, `TooShortException` if the height is below 130, and prints
    the name of the visitor riding the Roller Coaster:'
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`try`块，读取访客的年龄，如果年龄低于15岁，则抛出`TooYoungException`，如果身高低于130，则抛出`TooShortException`，并打印乘坐过山车的访客的姓名：'
- en: '[PRE215]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'The catch block will display the message that is to be displayed for visitors
    below the age of 15 or height below 130:'
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: catch块将显示15岁以下或身高低于130的访客的消息：
- en: '[PRE216]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'Activity 39: Working with Multiple Custom Exceptions'
  id: totrans-589
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动39：使用多个自定义异常处理
- en: 'Solution:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: Right-click the **src** folder and select **New** | **Class**.
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**src**文件夹，然后选择**New** | **Class**。
- en: Enter `RollerCoasterWithAgeAndHeight` as the class name, and then click `OK`.
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`RollerCoasterWithAgeAndHeight`作为类名，然后单击`OK`。
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: '[PRE217]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'Create an exception class, `TooYoungException`:'
  id: totrans-595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个异常类，`TooYoungException`：
- en: '[PRE218]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Create an exception class, `TooShortException`
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个异常类，`TooShortException`
- en: '[PRE219]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'In `main()`, create a loop that reads in the names of the visitors:'
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中，创建一个循环，读取访客的姓名：
- en: '[PRE220]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'The `try` block, read the age of the visitors, throws `TooYoungException` if
    the age is below 15, `TooShortException` if the height is below 130, and prints
    the name of the visitor riding the Roller Coaster:'
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`try`块，读取访客的年龄，如果年龄低于15岁，则抛出`TooYoungException`，如果身高低于130，则抛出`TooShortException`，并打印乘坐过山车的访客的姓名：'
- en: '[PRE221]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'Create a catch block for `TooYoungException`:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`TooYoungException`创建一个catch块：
- en: '[PRE222]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Create a catch block for `TooShortException`:'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`TooShortException`创建一个catch块：
- en: '[PRE223]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'Create a finally block that prints a message for escorting visitors off the
    premises:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个最终块，打印一条消息，将访客护送离开场地：
- en: '[PRE224]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
