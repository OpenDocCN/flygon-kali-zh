- en: Chapter 3. Orchestration and Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。编排和交付
- en: The main motivation behind creating a cluster of Docker hosts is designing for
    high availability. Most, if not all, clustering and orchestration tools, such
    as Docker Swarm and Kubernetes, take advantage of clustering by creating a master-slave
    kind of relationship. This ensures that there is always a node to fall back to
    in case any one node goes down in the environment. While deploying a cluster to
    a cloud provider, there are a couple of technologies you can leverage to ensure
    that your environment is highly available, for example Consul, and also take advantage
    of the native fault-tolerant design of the cloud by deploying masters and nodes
    in separate availability zones.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Docker主机集群的主要动机是为了实现高可用性。大多数，如果不是全部的集群和编排工具，如Docker Swarm和Kubernetes，都利用集群创建主从关系。这确保了在环境中任何一个节点出现故障时，总是有一个节点可以借助。在向云提供商部署集群时，您可以利用一些技术来确保您的环境是高可用的，例如Consul，并利用云的本地容错设计，通过在不同的可用性区域部署主节点和节点。
- en: Lesson Objectives
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程目标
- en: 'By the end of this lesson, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本课程结束时，您将能够：
- en: Obtain an overview of the Docker Swarm mode
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取Docker Swarm模式的概述
- en: Use Docker engine to create a swarm of Docker engines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker引擎创建一组Docker引擎
- en: Manage services and applications in a swarm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一组中管理服务和应用程序
- en: Scale services up and down to handle more requests on your application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展服务以处理应用程序的更多请求
- en: Load balance a Docker Swarm deployment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡Docker Swarm部署
- en: Secure Docker containers and deployments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全地管理Docker容器和部署
- en: Orchestration
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编排
- en: Running containers on our local environment is easy and does not require a lot
    of our effort; when it comes to the cloud, we need a different kind of mindset
    and tools to aid us in achieving this. Our environment should be **highly available,
    fault tolerant**, and **easily scalable**. This process of coordinating resources
    and/or containers, resulting in a consolidated workflow, is orchestration.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的本地环境中运行容器很容易，不需要我们付出很多努力；但是在云端，我们需要一种不同的思维方式和工具来帮助我们实现这一目标。我们的环境应该是高可用的、容错的和易于扩展的。协调资源和/或容器的过程，导致了一个整合的工作流程，这就是编排。
- en: 'First, let''s get familiarized with some of the terms used when it comes to
    orchestration:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们熟悉一些在编排时使用的术语：
- en: '`docker-engine`: This refers to the Docker bundle or installation we currently
    have on our computers'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-engine`：这指的是我们当前在计算机上安装的Docker包或安装'
- en: '`docker-machine`: A tool that helps us install Docker on virtual hosts'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-machine`：一个帮助我们在虚拟主机上安装Docker的工具'
- en: '`Virtual hosts`: These are virtual servers that run under physical hosts'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`虚拟主机`：这些是在物理主机下运行的虚拟服务器'
- en: '`docker-swarm`: A clustering tool for Docker'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-swarm`：Docker的集群工具'
- en: '`docker host`: A host or server that has Docker set up or installed'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker主机`：已安装或设置了Docker的主机或服务器'
- en: '`Node`: A Docker host that is connected to a swarm cluster'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`节点`：连接到群集的Docker主机'
- en: '`Cluster`: A group of Docker hosts or nodes'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`集群`：一组Docker主机或节点'
- en: '`Replica`: A duplicate or number of duplicates of an instance'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`副本`：一个实例的副本或多个副本'
- en: '`Task`: A defined operation to be run on nodes'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`任务`：在节点上运行的定义操作'
- en: '`Service`: A group of tasks'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`服务`：一组任务'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Here are the most common terms throughout the lesson:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是整个课程中最常见的术语：
- en: '`docker-engine`: running Docker on our computers;'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-engine`：在我们的计算机上运行Docker；'
- en: '`docker-machine`: A tool or CLI that helps us install Docker'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-machine`：一个帮助我们安装Docker的工具或CLI'
- en: '`Virtual hosts`: A host or server running on a physical host.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`虚拟主机`：在物理主机上运行的主机或服务器。'
- en: '`docker-swarm:`A clustering tool for Docker'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-swarm:`Docker的集群工具'
- en: '`Docker host`: Any server or host running Docker'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Docker host`：运行Docker的任何服务器或主机'
- en: '`Node`: This refers to any host bound to a swarm cluster.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Node`：这指的是绑定到swarm集群的任何主机。'
- en: '`Cluster`: A group of managed and controlled hosts.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cluster`：一组受管理和控制的主机。'
- en: '`Replica`: A duplicate of other running hosts for various tasks'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Replica`：其他正在运行的主机的副本，用于各种任务'
- en: '`Task`: Operations like install, upgrade, or remove.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务：安装、升级或移除等操作。
- en: '`Service`: Multiple tasks define a service.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Service`：多个任务定义一个服务。'
- en: Now that we are at least conversant with the terms above, we are ready to implement
    a Docker Swarm orchestration flow using `docker-machine`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们至少熟悉了上述术语，我们准备使用`docker-machine`实施Docker Swarm编排流程。
- en: An Overview of Docker Swarm
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm概述
- en: Docker Swarm is a **clustering** tool for Docker containers. It allows you to
    establish and manage a cluster of Docker **nodes** as a single **virtual system**.
    This means we get to run Docker on multiple hosts on our computers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm是Docker容器的**集群**工具。它允许您建立和管理一组Docker **节点**作为一个单一的**虚拟系统**。这意味着我们可以在计算机上的多个主机上运行Docker。
- en: We control the swarm cluster through a manager which primarily **handles** and
    **controls** containers. With the swarm manager, you can create a primary manager
    instance and multiple **replica** instances in case the primary fails. This means
    you can have more than one manager in a swarm!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过管理器来控制swarm集群，管理器主要**处理**和**控制**容器。通过swarm管理器，您可以创建一个主管理器实例和多个**副本**实例，以防主要实例失败。这意味着在swarm中可以有多个管理器！
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A swarm is created from a manager node, and other Docker machines join the cluster,
    either as worker nodes or manager nodes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个swarm是从一个管理节点创建的，其他Docker机器加入集群，可以作为工作节点或管理节点。
- en: Clustering is important because it creates a group of cooperating systems that
    provide redundancy, creating a fault-tolerant environment. For example, if one
    or more of the nodes goes down, Docker Swarm will fail over to another working
    node.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 集群化很重要，因为它创建了一组合作系统，提供冗余，从而创建了一个容错环境。例如，如果一个或多个节点宕机，Docker Swarm将故障转移到另一个正常工作的节点。
- en: 'The **Swarm manager** carries out the following roles:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swarm manager** 执行以下角色：'
- en: Accepts `docker` commands
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受`docker`命令
- en: Executes commands against the cluster
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行针对集群的命令
- en: Supports high availability; deploys a primary and secondary instance which can
    take over in the event of the primary instance going down
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持高可用性；部署主要和次要实例，可以在主要实例宕机时接管
- en: Docker Swarm uses **scheduling** to optimize resources and ensure efficiency
    in the environment. It **assigns containers** to the most appropriate **nodes**.
    This means Docker Swarm will assign containers to the most healthy node.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm使用**调度**来优化资源并确保环境的效率。它将**分配容器**给最合适的**节点**。这意味着Docker Swarm将容器分配给最健康的节点。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember, a node is a **host running Docker**, not a **container.**
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，节点是运行Docker的**主机**，而不是**容器**。
- en: 'Swarm can be configured to use any of the following scheduling strategies:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm可以配置为使用以下任一调度策略：
- en: '**Random**: Deploys a new container to a random node.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Random**：将新的容器部署到随机节点。'
- en: '**Spread**: Swarm deploys a new container to the node with the least number
    of containers.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spread**：Swarm将新的容器部署到具有最少数量容器的节点。'
- en: '**Binpack**: The binpack strategy involves deploying a new container to the
    node with the highest number of containers.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Binpack**：binpack策略涉及将新的容器部署到具有最多容器的节点。'
- en: 'You can download VirtualBox at: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址下载VirtualBox：[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)：
- en: '![An Overview of Docker Swarm](graphics/image03_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Swarm概述](graphics/image03_01.jpg)'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To simulate a Docker Swarm cluster, we need to install a hypervisor (a hypervisor
    type 2 is a virtual machine manager that is installed as a software application
    on an existing operating system) locally, in this case VirtualBox, that will allow
    us to create multiple hosts running Docker locally via `docker-machine` and then
    add them to the swarm cluster. While deploying to a cloud vendor, this is achieved
    using their compute service, for instance EC2 on AWS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟一个Docker Swarm集群，我们需要在本地安装一个hypervisor（hypervisor type 2是一种安装在现有操作系统上的软件应用程序的虚拟机管理器），在这种情况下是VirtualBox，它将允许我们通过`docker-machine`创建多个运行Docker的主机，并将它们添加到集群中。在部署到云供应商时，可以使用它们的计算服务来实现，例如AWS上的EC2。
- en: For Windows operating systems, select your OS distribution and you should get
    a download immediately. Run the executable and install VirtualBox.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows操作系统，选择您的操作系统分发版，您应该立即获得下载。运行可执行文件并安装VirtualBox。
- en: Using Docker Engine to Create a Swarm
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Engine创建一个Swarm
- en: 'Before we create our swarm, let''s get a quick overview of the `docker-machine
    cli`. Typing `docker-machine` on your terminal should give you this output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的集群之前，让我们快速概述一下`docker-machine cli`。在您的终端上键入`docker-machine`应该会给您这个输出：
- en: '![Using Docker Engine to Create a Swarm](graphics/image03_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用Docker Engine创建Swarm](graphics/image03_03.jpg)'
- en: 'Just below that, we have our list of commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就在下面，我们有我们的命令列表：
- en: '![Using Docker Engine to Create a Swarm](graphics/image03_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![使用Docker Engine创建Swarm](graphics/image03_04.jpg)'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to always use the `help` option when you need to clarify something,
    that is, `docker-machine stop --help`
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当您需要澄清某些事情时，始终使用`help`选项，即`docker-machine stop --help`
- en: To create our first Docker Swarm cluster, we are going to use `docker-machine`
    to create our manager and worker nodes first.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个Docker Swarm集群，我们将使用`docker-machine`首先创建我们的管理器和工作节点。
- en: 'Before creating the first machine, a quick overview of our objectives gives
    us the following: we are going to have four docker-machines, one manager, and
    three workers; they are all running on VirtualBox, thus there are four **virtual
    machines**.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建第一台机器之前，快速概述我们的目标给出了以下内容：我们将拥有四台docker-machines，一个管理器和三个工作节点；它们都在VirtualBox上运行，因此有四个虚拟机。
- en: Creating Docker Machines
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Docker机器
- en: 'This command is used to create a new virtual Docker host:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于创建一个新的虚拟Docker主机：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This means our Docker host will be running on **VirtualBox**, but managed and
    controlled by `docker-machine`. The `--driver` option specifies the driver to
    create the machine with. In this case, our driver is **VirtualBox**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的Docker主机将在VirtualBox上运行，但由`docker-machine`进行管理和控制。`--driver`选项指定要使用的驱动程序来创建机器。在这种情况下，我们的驱动程序是VirtualBox。
- en: Our command will be `docker-machine create --driver virtualbox manager1`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的命令将是`docker-machine create --driver virtualbox manager1`。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We require the driver in the command because that is our host's foundation,
    meaning our `manager1` machine will be running on VirtualBox as a virtual host.
    There are multiple drivers available from different vendors, but this is the best
    one for demo purposes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在命令中需要指定驱动程序，因为这是我们主机的基础，这意味着我们的`manager1`机器将在VirtualBox上作为虚拟主机运行。有多个供应商提供的多个驱动程序可用，但这是用于演示目的的最佳驱动程序。
- en: '![Creating Docker Machines](graphics/image03_05.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![创建Docker机器](graphics/image03_05.jpg)'
- en: Listing Created Machines
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建机器清单
- en: 'This command will provide a listing of all the Docker Machines currently on
    your host and more information such as the state, driver, and so on of the machine:
    `docker-machine ls`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将提供当前主机上所有Docker机器的列表以及有关机器的状态、驱动程序等的更多信息：`docker-machine ls`
- en: '![Listing Created Machines](graphics/image03_06.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建的机器清单](graphics/image03_06.jpg)'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Listing our machine is very important as it gives us an update of our machine
    status. We don't really get notified of errors, which at times could build up
    to a fateful event. Before doing some work on a machine, this will give a brief
    overview. A more detailed check can be run through the `docker-machine status`
    command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 列出我们的机器非常重要，因为它给我们提供了机器状态的更新。我们并不真正会收到错误通知，有时错误可能会积累成为一个重大事件。在对机器进行一些工作之前，这将给出一个简要的概述。可以通过`docker-machine
    status`命令运行更详细的检查。
- en: Worker Machine Creation
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作机器创建
- en: 'We will follow the same process to create three worker machines for our swarm
    cluster, in other words, running `docker-machine create --driver virtualbox <machine_name>`
    three times, passing `worker1, worker2,` and `worker3` as the value for `<machine_name>`
    on each subsequent run:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照相同的流程为我们的swarm集群创建三个工作机器，换句话说，连续三次运行`docker-machine create --driver virtualbox
    <machine_name>`，在每次运行时将`worker1, worker2`和`worker3`作为`<machine_name>`的值传递：
- en: '![Worker Machine Creation](graphics/image03_07.jpg)![Worker Machine Creation](graphics/image03_08.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![工作机器创建](graphics/image03_07.jpg)![工作机器创建](graphics/image03_08.jpg)'
- en: 'Finally, the last worker node will be displayed as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最后一个工作节点将显示如下：
- en: '![Worker Machine Creation](graphics/image03_09.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![工作机器创建](graphics/image03_09.jpg)'
- en: 'After doing so, run `docker-machine ls` and if the creation was successful,
    you will see an output similar to the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做后，运行`docker-machine ls`，如果创建成功，您将看到类似以下的输出：
- en: '![Worker Machine Creation](graphics/image03_10.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![工作机器创建](graphics/image03_10.jpg)'
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Naming the machines according to their purpose helps us avoid unexpected calls
    to the wrong hosts.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 根据它们的用途命名机器有助于避免意外地呼叫错误的主机。
- en: Initializing our Swarm
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化我们的Swarm
- en: 'Now that we have our machines running, it''s time to create our swarm. This
    will be done through the manager node, `manager1`. The following are the steps
    we will take to achieve a full-fledged swarm:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的机器正在运行，是时候创建我们的swarm了。这将通过管理节点`manager1`完成。以下是我们将采取的步骤，以实现一个完整的swarm：
- en: Connect to the manager node.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到管理节点。
- en: Declare the `manager1` node as the manager and advertise its address.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`manager1`节点为管理者并宣布其地址。
- en: Get the invite address for nodes to join the swarm.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取节点加入swarm的邀请地址。
- en: We will be using `ssh` for our connection. `ssh` is a secure network protocol
    used to access or connect to hosts or servers.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ssh`进行连接。`ssh`是一种安全的网络协议，用于访问或连接主机或服务器。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Docker Machines are controlled via the `docker-machine cli.` Docker Swarm runs
    as a service that bonds all the Docker Machines and unifies them under a manager
    machine, or node. This doesn't mean the machines in a swarm cluster are equal
    or similar in any way, they could all be running different services or operations,
    for example, a database host and a web server. Docker Swarm comes in to help orchestrate
    the hosts.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Docker机器通过`docker-machine cli`进行控制。Docker Swarm作为一个服务运行，将所有Docker机器绑定在一个管理机器或节点下。这并不意味着swarm集群中的机器是相等或相似的，它们可能在运行不同的服务或操作，例如，数据库主机和Web服务器。Docker
    Swarm帮助编排主机。
- en: 'This command is used to get the IP address of one or more Docker machines:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于获取一个或多个Docker机器的IP地址：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command is used to get the IP address of one or more Docker machines.
    The `<machine_name>` is the name or names of the machines whose IP addresses we
    need. In our case, we will use it to get the IP address of the `manager1` node
    as we will need it when initializing swarm mode:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于获取一个或多个Docker机器的IP地址。`<machine_name>`是我们需要IP地址的机器的名称。在我们的情况下，我们将用它来获取`manager1`节点的IP地址，因为在初始化swarm模式时我们将需要它：
- en: '![Initializing our Swarm](graphics/image03_11.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![初始化我们的Swarm](graphics/image03_11.jpg)'
- en: Connecting to a Machine
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到一个机器
- en: This command is used to log into a machine using `SSH:`
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于使用`SSH`登录到机器：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After a successful connection to our `manager1`, we should get an output that
    looks like the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 成功连接到我们的`manager1`后，我们应该得到以下输出：
- en: '![Connecting to a Machine](graphics/image03_12.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![连接到一个机器](graphics/image03_12.jpg)'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using the `ssh protocol` on cloud vendors will require authentication and/or
    authorization through usernames and passwords or `ssh keys`. We will not be going
    deeper into this because this is a demo.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在云供应商上使用`ssh协议`将需要通过用户名和密码或`ssh密钥`进行身份验证和/或授权。我们不会深入讨论这个问题，因为这只是一个演示。
- en: Initializing Swarm Mode
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化Swarm模式
- en: 'Here is the command to initialize the swarm mode:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是初始化Swarm模式的命令：
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's run this command inside the manager node to initialize a swarm. The `advertise-addr`
    option is used to specify the address that will be advertised to other members
    of the swarm for API access and networking.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在管理节点内运行此命令以初始化Swarm。`advertise-addr`选项用于指定将向集群的其他成员广告的地址，以进行API访问和网络。
- en: 'In this case, its value is the `manager IP address` whose value we got from
    running the `docker-machine ip manager1` earlier:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它的值是`管理者IP地址`，其值是我们之前运行`docker-machine ip manager1`得到的：
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We mentioned earlier that Docker Swarm is a service that bonds and orchestrates
    all machines through a manager node. For this to happen, Docker Swarm lets us
    advertise the cluster through the address of the manager, by including `advertise-addr`
    in the `docker swarm init` command.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，Docker Swarm是通过管理节点将所有机器绑定和编排的服务。为了实现这一点，Docker Swarm让我们通过管理者的地址来广告集群，包括在`docker
    swarm init`命令中包含`advertise-addr`。
- en: '![Initializing Swarm Mode](graphics/image03_13.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![初始化Swarm模式](graphics/image03_13.jpg)'
- en: The output of running the command shows us that our node is now a manager!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令的输出显示我们的节点现在是一个管理者！
- en: 'Notice we also have two commands: one should allow us to invite other nodes
    to the cluster and the other to add another manager to the cluster.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还有两个命令：一个应该允许我们邀请其他节点加入集群，另一个是将另一个管理者添加到集群中。
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When designing for high availability, it is recommended to have more than one
    manager node that will take over in the case of a failure on the primary manager
    node.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计高可用性时，建议有多个管理者节点，以便在主管理者节点发生故障时接管。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ensure you save two commands listed in the output as they will be useful in
    adding other hosts in the swarm.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您保存输出中列出的两个命令，它们将有助于添加其他主机到集群中。
- en: Adding Workers to our Swarm
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将工作节点添加到我们的Swarm
- en: This command is used to add swarm workers`:`
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于添加Swarm工作节点`：`
- en: '[PRE4]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Before we can add our workers to the swarm, we will need to connect to them,
    through `ssh.`
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以将工作节点添加到集群之前，我们需要通过`ssh`连接到它们。
- en: We achieve this by running `docker-machine ssh <node_name>` and then running
    the invite command we got from the `manager1 node.`
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过运行`docker-machine ssh <node_name>`，然后运行我们从`manager1节点`得到的邀请命令来实现这一点。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `docker-machine` command can be run from any directory and will always work
    with the created machines.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-machine`命令可以从任何目录运行，并且始终与创建的机器一起工作。'
- en: 'First, we will exit the manager node, using the `exit` command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`exit`命令退出管理节点：
- en: '![Adding Workers to our Swarm](graphics/image03_14.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![将工作节点添加到我们的Swarm](graphics/image03_14.jpg)'
- en: 'Then, we connect to a worker node via `ssh`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过`ssh`连接到一个工作节点：
- en: '![Adding Workers to our Swarm](graphics/image03_15.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![将工作节点添加到我们的Swarm](graphics/image03_15.jpg)'
- en: 'Finally, we add the node to the cluster:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将节点添加到集群中：
- en: '![Adding Workers to our Swarm](graphics/image03_16.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![将工作节点添加到我们的Swarm](graphics/image03_16.jpg)'
- en: Viewing a Cluster's Status
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看集群状态
- en: 'We use this command to view the status of our cluster:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用此命令来查看我们集群的状态：
- en: '[PRE5]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We use this command to view the status of our cluster. This command is run
    on the manager node and displays all the nodes in our cluster and their status
    and availability. Running this on our manager node shows output similar to that
    of the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个命令来查看我们集群的状态。这个命令在管理节点上运行，并显示我们集群中所有节点的状态和可用性。在我们的管理节点上运行这个命令会显示类似以下的输出：
- en: '![Viewing a Cluster''s Status](graphics/image03_17.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![查看集群状态](graphics/image03_17.jpg)'
- en: Activity 1 — Adding Nodes to a Cluster
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1 — 添加节点到集群
- en: Ensure you have a manager node and the node invite command.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有一个管理节点和节点邀请命令。
- en: To get you conversant with `ssh` and cluster management.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让您熟悉 `ssh` 和集群管理。
- en: You have been asked to connect to at least two nodes and add them to the cluster.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您被要求连接至少两个节点并将它们添加到集群中。
- en: '`Ssh` into your first node:![Activity 1 — Adding Nodes to a Cluster](graphics/image03_18.jpg)'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ssh` 进入您的第一个节点：![Activity 1 — 添加节点到集群](graphics/image03_18.jpg)'
- en: Run the invite command on the node to join the cluster. Remember, we got this
    command when we first initialized our manager node:![Activity 1 — Adding Nodes
    to a Cluster](graphics/image03_19.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在节点上运行邀请命令加入集群。记住，我们在第一次初始化管理节点时得到了这个命令：![Activity 1 — 添加节点到集群](graphics/image03_19.jpg)
- en: Exit the node, `ssh` into another, and run the command:![Activity 1 — Adding
    Nodes to a Cluster](graphics/image03_20.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出节点，`ssh` 进入另一个节点，并运行命令：![Activity 1 — 添加节点到集群](graphics/image03_20.jpg)
- en: '`Ssh` into the manager node to check the cluster status through `docker node
    ls:`![Activity 1 — Adding Nodes to a Cluster](graphics/image03_21.jpg)'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ssh` 进入管理节点，通过 `docker node ls` 检查集群状态：![Activity 1 — 添加节点到集群](graphics/image03_21.jpg)'
- en: Managing Services and Applications in a Swarm
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Swarm中管理服务和应用程序
- en: Now that our cluster is ready, it's time to schedule some services on our cluster.
    As mentioned earlier, the role of the manager node is to accept Docker commands
    and apply them against the cluster. Therefore, we will create the services on
    the manager node.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集群已经准备好了，是时候在我们的集群上安排一些服务了。如前所述，管理节点的角色是接受Docker命令并将其应用于集群。因此，我们将在管理节点上创建服务。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At this point, there really isn't much one can do on worker nodes as they are
    fully under the control of the manager.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，worker节点上真的没有太多可以做的，因为它们完全受管理节点控制。
- en: Creating a Service
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建服务
- en: 'This command is used to create a service:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于创建服务：
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We run this on the manager as earlier alluded to. We are going to be using the
    WordPress example we built in the previous lesson. Since we already have this
    image locally, there will be no hassle pulling it from the hub.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在管理节点上运行这个命令，正如前面所提到的。我们将使用我们在上一课中构建的WordPress示例。由于我们已经在本地拥有这个镜像，所以不需要从hub上拉取它。
- en: Our replica count is going to be three because we currently have three worker
    nodes; confirm your node number by running `docker node ls`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的副本数量将是三，因为我们目前有三个工作节点；通过运行 `docker node ls` 确认您的节点编号。
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We do not create a replica count; this introduces the following topics.The
    `-p <host_port>:<container_port>` maps the container to be built on our computer''s
    defined port, against the container port. We do not need to have an equal number
    of replicas as our node number. Other nodes can handle different application layers,
    for example, the database:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不创建副本数量；这引入了以下主题。`-p <host_port>:<container_port>` 将容器映射到我们计算机上定义的端口，与容器端口相对应。我们不需要与我们的节点编号相同数量的副本。其他节点可以处理不同的应用程序层，例如数据库：
- en: '![Creating a Service](graphics/image03_22.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![创建服务](graphics/image03_22.jpg)'
- en: We created a web, based on the WordPress image, and mapped the host port `80`
    to the container port `80`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个基于WordPress镜像的web，并将主机端口 `80` 映射到容器端口 `80`。
- en: Listing Services
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务列表
- en: 'This command is used to view the currently running services:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于查看当前正在运行的服务：
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command is used to view the currently running services and more information,
    such as the replicas, image, ports, and so on.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于查看当前正在运行的服务以及更多信息，例如副本、镜像、端口等。
- en: 'From the following output, we can see the service we just started and the associated
    information:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下输出中，我们可以看到我们刚刚启动的服务和相关信息：
- en: '![Listing Services](graphics/image03_23.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![列出服务](graphics/image03_23.jpg)'
- en: Service Status
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务状态
- en: 'This command is used to know whether our services are operational:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于了解我们的服务是否运行正常：
- en: '[PRE8]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Viewing the service listing will not provide us with all the information we
    need, such as what nodes our service is deployed on. However, we get to know whether
    our services are operational and the errors encountered, if any. When we run this
    on our manager, we get the following output:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 查看服务列表不会为我们提供所有所需的信息，比如我们的服务部署在哪些节点上。但是，我们可以知道我们的服务是否运行正常以及遇到的错误（如果有）。当我们在管理节点上运行此命令时，我们会得到以下输出：
- en: '![Service Status](graphics/image03_24.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![服务状态](graphics/image03_24.jpg)'
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Viewing the status is very important. In a situation where we are running upgrades
    or updates on our nodes, running `docker ps` would inform us on the status of
    our nodes. In an ideal Docker Swarm setup, when a node goes down, the manager
    would reallocate traffic to the available nodes, thus it would be a little hard
    noticing downtime, unless monitoring is available. Before working with the nodes,
    always run this to check on the status of the nodes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 查看状态非常重要。在我们对节点进行升级或更新的情况下，运行`docker ps`会通知我们节点的状态。在理想的Docker Swarm设置中，当一个节点宕机时，管理节点会重新分配流量到可用节点，因此很难注意到停机时间，除非有监控可用。在处理节点之前，始终运行此命令以检查节点的状态。
- en: How Do We Know Our Site is Running?
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何知道我们的网站正在运行？
- en: 'We can verify WordPress is running by opening any of the workers'' IP addresses
    on our browser:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在浏览器上打开任何工作节点的IP地址来验证WordPress是否正在运行：
- en: '![How Do We Know Our Site is Running?](graphics/image03_25.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![我们如何知道我们的网站正在运行？](graphics/image03_25.jpg)'
- en: 'Here is a screenshot of how WordPress would appear on our browser:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是WordPress在我们的浏览器上的外观截图：
- en: '![How Do We Know Our Site is Running?](graphics/image03_26.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![我们如何知道我们的网站正在运行？](graphics/image03_26.jpg)'
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Opening any of the IP addresses running the WordPress web service, including
    the manager node, will open the same address.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 打开任何运行WordPress Web服务的IP地址，包括管理节点，都会打开相同的地址。
- en: Activity 2 — Running Services on a Swarm
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动2 — 在集群上运行服务
- en: Ensure you have a manager node running.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有一个管理节点正在运行。
- en: To get you conversant with service management in a swarm.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让您熟悉集群中的服务管理。
- en: You have been asked to add a new `postgres` service to the swarm.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 已要求您向集群添加一个新的`postgres`服务。
- en: 'Create a new node and name it `dbworker`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新节点并将其命名为`dbworker`：
- en: '[PRE9]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Activity 2 — Running Services on a Swarm](graphics/image03_27.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![活动2 — 在集群上运行服务](graphics/image03_27.jpg)'
- en: Add the new worker to the swarm:![Activity 2 — Running Services on a Swarm](graphics/image03_28.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的工作节点添加到集群中：![活动2 — 在集群上运行服务](graphics/image03_28.jpg)
- en: 'Create a new database service and name it `db`, using the postgres image as
    the base:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的数据库服务，并将其命名为`db`，使用postgres镜像作为基础：
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is a screenshot of the output:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出的截图：
- en: '![Activity 2 — Running Services on a Swarm](graphics/image03_29.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![活动2 — 在集群上运行服务](graphics/image03_29.jpg)'
- en: 'Verify `postgres` is running through the following steps:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下步骤验证`postgres`是否正在运行：
- en: 'Map the `postgres` container running in `dbworker node` to your computer:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将运行在`dbworker节点`中的`postgres`容器映射到您的计算机上：
- en: '[PRE11]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Activity 2 — Running Services on a Swarm](graphics/image03_30.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![活动2 — 在集群上运行服务](graphics/image03_30.jpg)'
- en: Run `docker ps` to list running containers; this should have our `postgres`
    container and the status should be `UP`:![Activity 2 — Running Services on a Swarm](graphics/image03_31.jpg)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker ps`以列出正在运行的容器；这应该有我们的`postgres`容器，状态应为`UP`：![Activity 2 — Running
    Services on a Swarm](graphics/image03_31.jpg)
- en: Exit and stop the container through the following:![Activity 2 — Running Services
    on a Swarm](graphics/image03_32.jpg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式退出并停止容器：![Activity 2 — Running Services on a Swarm](graphics/image03_32.jpg)
- en: Scaling Services Up and Down
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展服务上下。
- en: As the number of requests coming into your application increases or decreases,
    there will be a need to scale the infrastructure. We have recently worked with
    node replicas running the same WordPress installation we made.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 随着进入应用程序的请求数量增加或减少，将需要扩展基础架构。我们最近使用了运行相同WordPress安装的节点副本。
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: That is a very basic example of a production-level setup. Ideally, we would
    need a few more manager nodes and replicas, but since we are running a demo, this
    will be sufficient.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个生产级设置的非常基本的示例。理想情况下，我们需要更多的管理节点和副本，但由于我们正在运行演示，这将足够了。
- en: Scaling involves both the increase and decrease of resources depending on an
    application's traffic.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展涉及根据应用程序的流量增加和减少资源。
- en: Scaling Our Database Service
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展我们的数据库服务
- en: 'We will scale our database service as an example of how to scale services.
    In a real-world scenario, cloud services such as Google Cloud Platform and Amazon
    Web Services may have automatic scaling services defined, where a number of replicas
    are created and traffic is distributed across the replicas through a service known
    as **load balancing**. We will dig deeper into that in the next activity. First,
    we understand how scaling works from the basics. The command for scaling the database
    is in the following format:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展我们的数据库服务，作为扩展服务的示例。在现实世界的场景中，云服务如Google Cloud Platform和Amazon Web Services可能定义了自动扩展服务，其中创建了一些副本，并通过称为**负载平衡**的服务在副本之间分发流量。我们将在下一个活动中深入探讨这一点。首先，我们要从基础知识开始了解扩展是如何工作的。扩展数据库的命令格式如下：
- en: '[PRE12]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To scale the service, pass in the service name we provided when creating the
    service and the number of replicas you want to increase it to.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展服务，请传入我们创建服务时提供的服务名称以及要将其增加到的副本数。
- en: Note
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `--detach=false` allows us to view the replication progress.The command
    is `docker service scale <service_name>=<count>:`
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`--detach=false`允许我们查看复制进度。命令是`docker service scale <service_name>=<count>:`'
- en: '![Scaling Our Database Service](graphics/image03_33.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![扩展我们的数据库服务](graphics/image03_33.jpg)'
- en: From the output above, we can see that our `db` service has been replicated.
    We now have two database services running on the `dbworker` node.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的输出中，我们可以看到我们的`db`服务已经被复制。我们现在在`dbworker`节点上运行了两个数据库服务。
- en: How Does Swarm Know Where to Schedule a Service?
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Swarm如何知道在哪里安排服务？
- en: 'We covered scheduling modes earlier; they include the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前介绍了调度模式；它们包括以下内容：
- en: Random
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机
- en: Spread
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spread
- en: Binpack
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Binpack
- en: The default scheduling strategy for Docker Swarm is `spread`, which assigns
    a new service to the node with the **least** resources.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm的默认调度策略是`spread`，它将新服务分配给资源**最少**的节点。
- en: Note
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't have extra unassigned nodes on the swarm, the service you want
    to scale will be replicated on the currently running nodes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在swarm上没有额外的未分配节点，则要扩展的服务将在当前运行的节点上复制。
- en: The swarm manager will use the spread strategy and allocate according to resources.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: swarm管理器将使用spread策略并根据资源分配。
- en: 'We can then verify that the action was indeed successful using the `docker
    service ls` command and we can see that the number of replicas is two:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`docker service ls`命令验证操作是否成功，我们可以看到副本的数量为两个：
- en: '![How Does Swarm Know Where to Schedule a Service?](graphics/image03_34.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![Swarm如何知道在哪里安排服务？](graphics/image03_34.jpg)'
- en: 'Scaling down is pretty similar to scaling up, only we pass a lower replica
    count than we had before. From the following output, we scale down to one replica
    and verify that the replica count is one:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 缩减规模与扩大规模非常相似，只是我们传递的副本计数比以前少。从以下输出中，我们将规模缩减到一个副本，并验证副本计数为一个：
- en: '![How Does Swarm Know Where to Schedule a Service?](graphics/image03_35.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![Swarm如何知道在哪里安排服务？](graphics/image03_35.jpg)'
- en: How Does Swarm Load Balance Requests between Replicas?
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Swarm如何在副本之间平衡请求？
- en: A load balancer helps in handling and managing requests in an application. In
    cases where an application handles a lot of requests, which could be 1,000 in
    less than 5 minutes, we would need to have multiple replicas and a load balancer
    on our application, specifically the logical (backend) section. The load balancer
    helps distribute requests and prevent overloading of an instance, eventually leading
    to downtime.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器有助于处理和管理应用程序中的请求。在应用程序处理大量请求的情况下，可能在不到5分钟内就有1000个请求，我们需要在我们的应用程序上有多个副本和一个负载均衡器，特别是逻辑（后端）部分。负载均衡器有助于分发请求并防止实例过载，最终导致停机时间。
- en: When deploying to production on a cloud platform such as **Google Cloud Platform**
    or **Amazon Web Services**, you can make use of an external load balancer to route
    requests to your swarm hosts.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在像**Google Cloud Platform**或**Amazon Web Services**这样的云平台上部署到生产环境时，您可以利用外部负载均衡器将请求路由到您的Swarm主机。
- en: Docker Swarm includes a built-in routing service that enables each node in the
    swarm to accept incoming connections to a published port, even if there is no
    service running on the node. `postgres` service uses port `5432` by default.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm包括一个内置的路由服务，使得群集中的每个节点都能接受对已发布端口的传入连接，即使节点上没有运行服务。`postgres`服务默认使用端口`5432`。
- en: Activity 3 — Scaling Services on a Swarm
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动3 —— 在Swarm上扩展服务
- en: Ensure you have a swarm with at least one manager, two services, and three worker
    nodes.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您至少有一个管理节点、两个服务和三个工作节点的群集。
- en: To get you conversant with scaling services and replicating nodes.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 让您熟悉扩展服务和复制节点。
- en: You have been asked to scale the web service to four replicas and the database
    service to two replicas.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要求将网络服务扩展到四个副本，数据库服务扩展到两个副本。
- en: Create three new worker nodes, two for the web service and one for the database
    service.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个新的工作节点，两个用于网络服务，一个用于数据库服务。
- en: Connect to the manager node and scale the web and database services.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到管理节点并扩展网络和数据库服务。
- en: 'Confirm the service replica count using docker service ls; the final result
    should be as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用docker service ls确认服务副本计数；最终结果应该如下：
- en: The WordPress web service should have two replica counts
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress网络服务应该有两个副本计数
- en: The Postgres database service should have four replica counts
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Postgres数据库服务应该有四个副本计数
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this lesson, we have done the following:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们已经完成了以下工作：
- en: Talked about orchestration and mentioned a few example tools
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了编排，并提到了一些示例工具
- en: Discussed clustering and why it's important, especially in production-level
    setups
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了集群化以及为什么它在生产级设置中很重要
- en: Learned about virtual hosts by running Docker Machines on VirtualBox
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在VirtualBox上运行Docker Machines学习了虚拟主机
- en: Walked through Docker Swarm and how to create and manage a cluster of nodes
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Docker Swarm以及如何创建和管理节点集群来了解
- en: Introduced example services including Wordpress running on our swarm
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了包括在我们的群集上运行的Wordpress在内的示例服务
- en: Gained a high-level understanding of working with the `docker-machine cli`
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对使用`docker-machine cli`进行工作有了高层次的理解
- en: Talked about load balancing and how Docker Swarm manages this
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了负载均衡以及Docker Swarm如何管理这一点
- en: Congratulations for getting to the finish line! Here's a recap of the knowledge
    we have gained through the lessons.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你到达终点！以下是我们通过课程获得的知识的总结。
- en: 'In this book, we have covered the following:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们涵盖了以下内容：
- en: Talked about DevOps and how Docker contributes to the workflow
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了DevOps以及Docker如何促进工作流程
- en: Understood how to template applications on Dockerfiles
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了如何在Dockerfiles上为应用程序创建模板
- en: Built images and containers and pushed them to Docker Hub
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建镜像和容器并将它们推送到Docker Hub
- en: Managed containers through `docker-compose`
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`docker-compose`管理容器
- en: Learned how we can orchestrate our applications through Docker Swarm
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会了如何通过Docker Swarm编排我们的应用程序
