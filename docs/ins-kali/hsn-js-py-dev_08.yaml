- en: The Document Object Model (DOM)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）
- en: The **Document Object Model** (**DOM**) is the API exposed by the browser to
    allow JavaScript to communicate with HTML and, indirectly, CSS. Since one of JavaScript's
    main abilities is dynamically changing content on a page, we should know how to
    do that. Enter the DOM.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档对象模型**（**DOM**）是浏览器暴露给JavaScript的API，允许JavaScript与HTML和间接与CSS进行通信。由于JavaScript的主要能力之一是动态更改页面上的内容，我们应该知道如何做到这一点。这就是DOM的作用。'
- en: In this chapter, we will learn how to use this powerful API to read and change
    content on a page. I'm sure you've seen websites that change content without reloading
    the page. These programs use *DOM manipulation, *and we'll learn how to use it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用这个强大的API来读取和更改页面上的内容。我相信你已经看到过不需要重新加载页面就可以更改内容的网站。这些程序使用*DOM操作*，我们将学习如何使用它。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Selectors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器
- en: Properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: Manipulations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be sure to have the [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers) repository handy
    and ready for use in the `Chapter-6` directory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在`Chapter-6`目录中有[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers) 存储库方便使用。
- en: Using selectors
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选择器
- en: 'So far, we''ve only been using `console.log` and alerts and prompts to input
    and output information. While these methods are useful for testing, they''re not
    exactly what you would use in everyday life. Most of the web applications that
    we use, from searching to email, use the DOM to interact with the user to get
    input and show information. Let''s take a look at a small example: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/hello](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/hello).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了`console.log`和警报和提示来输入和输出信息。虽然这些方法对于测试很有用，但并不是你在日常生活中会使用的。我们使用的大多数Web应用程序，从搜索到电子邮件，都使用DOM与用户交互以获取输入和显示信息。让我们看一个小例子：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/hello](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/hello)。
- en: 'If you open the HTML in the browser, we see a very simple page:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中打开HTML，我们会看到一个非常简单的页面：
- en: '![](assets/a342e927-fbb8-426a-b8d4-39b5c9293115.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a342e927-fbb8-426a-b8d4-39b5c9293115.png)'
- en: Figure 6.1 Our basic page
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1我们的基本页面
- en: 'If we click the button, we don''t get an alert or a console message, but instead,
    we have this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击按钮，我们不会得到警报或控制台消息，而是会看到这个：
- en: '![](assets/f04c693f-3d8e-458e-9042-1293872160a7.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f04c693f-3d8e-458e-9042-1293872160a7.png)'
- en: Figure 6.2 An in-page response to our click!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2我们点击后页面的响应！
- en: Yay! It's our first instance of **DOM manipulation**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 耶！这是我们第一个**DOM操作**的实例。
- en: DOM manipulation explained
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释DOM操作
- en: 'Let''s look at the JavaScript that powered that amazing example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看支持这个惊人示例的JavaScript：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first thing to notice is that we''re operating on the `document` object.
    `document` is JavaScript''s conception of what the page in the browser consists
    of. Remember when I mentioned that the DOM is an API exposed by the browser? This
    is the vector by which you access the DOM: `document`.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，我们正在操作`document`对象。`document`是JavaScript对浏览器页面的概念。记得我提到过DOM是浏览器暴露的API吗？这是你访问DOM的方式：`document`。
- en: 'Before we dissect the JavaScript, let''s see how the DOM and HTML differ. Here''s
    our HTML for our page:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们分析JavaScript之前，让我们看看DOM和HTML有什么不同。这是我们页面的HTML：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we use our console now to inspect Elements instead of Console, we''ll see
    this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在使用控制台来检查元素而不是控制台，我们会看到这个：
- en: '![](assets/3093173a-07ac-4804-930f-18c516613b2f.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3093173a-07ac-4804-930f-18c516613b2f.png)'
- en: Figure 6.3 The DOM of our page
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3我们页面的DOM
- en: 'If you look closely and compare this screenshot with the preceding HTML, you
    won''t really find any differences. However, now click the button and see what
    happens to the `<p>` tag:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察并将这个截图与前面的HTML进行比较，你不会真的找到任何区别。然而，现在点击按钮，看看`<p>`标签会发生什么：
- en: '![](assets/ecb14272-76ad-4364-8592-af09cd0687a4.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ecb14272-76ad-4364-8592-af09cd0687a4.png)'
- en: Figure 6.4 After clicking the button
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4点击按钮后
- en: 'Ah! Now we see a difference between the HTML and the DOM: the addition of text
    inside the paragraph tag. If we reload the page, poof, there goes our text and
    we''re back to the beginning. So, what we''re seeing is that nothing is changing
    *on disk*, only *in memory*. The DOM only lives in memory. You can experiment
    in the Elements view by changing values and even deleting whole **nodes**. A node
    is the DOM''s reflection of an HTML tag. You may hear *node* and *tag* used interchangeably,
    but when working with JavaScript, it''s a good habit to use *node* to be consistent
    with JavaScript''s nomenclature, as we''ll see in a bit.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 啊！现在我们看到HTML和DOM之间的区别：在段落标签内添加了文本。如果我们重新加载页面，文本就会消失，我们又回到了起点。所以，我们看到的是什么都没有*在磁盘上*改变，只是*在内存中*改变。DOM只存在于内存中。你可以在元素视图中通过更改值甚至删除整个**节点**来进行实验。节点是DOM对HTML标签的反映。你可能会听到*节点*和*标签*互换使用，但在使用JavaScript时，使用*节点*是一个好习惯，以保持与JavaScript的命名一致，我们稍后会看到。
- en: 'Back to our JavaScript. So far, we''ve talked about `document`, which is the
    DOM''s in-memory interpretation of the HTML. The method of `document` that we''re
    using is a powerful one: `.querySelector()`. This method returns the *first* match
    to the argument we pass into the method. In this case, we''re asking for `button`.
    Since there''s only one button on the page, we can simply use the tag name. However,
    `querySelector` is more powerful than that, in that we can select based on CSS
    selectors as well. For example, say our button had a class on it like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的JavaScript。到目前为止，我们已经讨论了`document`，它是DOM对HTML的内存解释。我们正在使用的`document`方法是一个强大的方法：`.querySelector()`。这个方法返回与我们传递给方法的参数的*第一个*匹配项。在这种情况下，我们要求`button`。由于页面上只有一个按钮，我们可以简单地使用标签名称。但是，`querySelector`比这更强大，因为我们也可以基于CSS选择器进行选择。例如，假设我们的按钮上有一个类，就像这样：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We could then access the button like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以这样访问按钮：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice the "`.`" in front of `clickme`, just like a CSS selector. Similarly,
    when accessing an element with an ID, you would use "`#`".
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`clickme`前面的“`.`”，就像CSS选择器一样。同样，当访问具有ID的元素时，您将使用“`#`”。
- en: Now that we have access to our button, we want to do *something* with it. In
    this case, *something* is to take action when the button is clicked. We do this
    by adding an **event listener**. We'll take a deeper dive into event listeners
    in [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events, Event-Driven
    Design, and APIs*, so for now, let's just scratch the surface.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以访问我们的按钮，我们想对它做*一些*事情。在这种情况下，*一些*是指在点击按钮时采取行动。我们通过添加**事件监听器**来实现这一点。我们将在[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)中更深入地了解事件监听器，所以现在让我们只是浅尝辄止。
- en: 'This is the structure of an event listener:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是事件监听器的结构：
- en: '![](assets/cf03f546-306f-446a-a59a-1511eb529ce1.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf03f546-306f-446a-a59a-1511eb529ce1.png)'
- en: Figure 6.5 Event listener structure
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 事件监听器结构
- en: First, our **event target** is the node upon which we want to listen; in this
    case, our target is the button. We then use the `.addEventListener()` method and
    assign the **event** of `click` to be the event for which we are listening. The
    second argument to our event listener is a function called the **event handler**.
    We can pass the actual **event object** to our handler. Event handlers don't have
    to be anonymous, as this one is, but it's common practice unless you need repeated
    functionality for several event types. Our handler is using `querySelector` again
    to target the `p` node and setting its `innerHTML` property to the string with
    our date.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的**事件目标**是我们要监听的节点；在这种情况下，我们的目标是按钮。然后我们使用`.addEventListener()`方法，并将`click`**事件**分配为我们要监听的事件。我们事件监听器的第二个参数是一个称为**事件处理程序**的函数。我们可以将实际的**事件对象**传递给我们的处理程序。事件处理程序通常不必是匿名的，但这是常见的做法，除非您需要为多个事件类型重复使用功能。我们的处理程序再次使用`querySelector`来定位`p`节点，并将其`innerHTML`属性设置为包含我们日期的字符串。
- en: 'A word about node properties: a node''s *properties* are the DOM''s in-memory
    representation of an HTML element''s attributes. That means there are plenty of
    them: `className`, `id`, and `innerHTML`, just to name a few; we''ll get into
    them more in a minute when we get to the *Properties* section. So all together,
    these lines of code tell the browser, "Hey, when this button is clicked, change
    the content of the `p` tag to be this string."'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于节点属性：节点的*属性*是HTML元素属性在DOM中的内存表示。这意味着有很多属性：`className`、`id`和`innerHTML`，只是举几个例子；当我们到达*属性*部分时，我们将更深入地了解它们。因此，这些代码行告诉浏览器：“嘿，当点击这个按钮时，将`p`标签的内容更改为这个字符串。”
- en: Now that we've taken a bird's eye view of this, let's dive into each of the
    pieces involved in making DOM manipulation work.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经俯视了这个问题，让我们深入研究涉及DOM操作的每个部分。
- en: Using selectors
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用选择器
- en: 'Let''s consider a more complex page. We''ll be opening a sample page and working
    with some of the elements provided to you:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个更复杂的页面。我们将打开一个示例页面，并使用为您提供的一些元素：
- en: 'Open `index.html` in [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals)
    in a browser:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals)中的`index.html`：
- en: '![](assets/7062a150-3baf-4d78-bee5-b47f64c7150e.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7062a150-3baf-4d78-bee5-b47f64c7150e.png)'
- en: Figure 6.6 The animals page
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 动物页面
- en: 'If you hover over an orange button, it will turn turquoise and, when you click
    it, the black box at the top of the page will show the animal:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您悬停在橙色按钮上，它将变为青绿色，并且当您单击它时，页面顶部的黑色框将显示动物：
- en: '![](assets/4765b49f-8eaa-427d-b4f0-aadb950d780f.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4765b49f-8eaa-427d-b4f0-aadb950d780f.png)'
- en: Figure 6.7 A selected animal
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 选择的动物
- en: Take a minute to play around with the page and examine its behavior. Also, try
    hovering over the photo; what happens?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 花一分钟玩一下页面，观察它的行为。还要尝试悬停在照片上；会发生什么？
- en: 'Now let''s take a look at the JavaScript. Again, it''s fairly simple, but we
    have a few new characters in our story:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看JavaScript。再次，它非常简单，但是我们的故事中有一些新的字符：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Lines 1-9 contain an object as a datastore. Great! We covered this usage in
    [Chapter 5](6001365f-eadd-4ed7-878b-080a7857a1cb.xhtml), *Hello World! and Beyond:
    Your First Application*.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第1-9行包含一个数据存储对象。太棒了！我们在[第5章](6001365f-eadd-4ed7-878b-080a7857a1cb.xhtml)中已经介绍了这种用法，*你的第一个应用程序：你好，世界！以及更多*。
- en: 'Line 11 introduces a new way of using a selector: `.querySelectorAll()`. As
    mentioned previously, when we use `.querySelector()`, we''ll get the *first* item
    that matches our query. This method will return an array of all matching nodes.
    Then, we can iterate over them on line 13 to give each of them a click handler.
    On line 15, we define *what happens* in our event handler: set the source of the
    only `img` node to be a concatenation of the path and image source from our data
    object.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第11行介绍了使用选择器的一种新方法：`.querySelectorAll()`。如前所述，当我们使用`.querySelector()`时，我们会得到与我们查询匹配的*第一个*项目。这种方法将返回所有匹配节点的数组。然后，我们可以在第13行对它们进行迭代，为每个节点添加一个点击处理程序。在第15行，我们定义了我们事件处理程序中的*发生了什么*：将唯一`img`节点的源设置为来自我们数据对象的路径和图像源的连接。
- en: But wait! What is `e.target`? We'll take a deeper dive into events in [Chapter
    7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events, Event-Driven Design,
    and APIs*, but for now, it's only important to know that `e.target` is *the DOM
    node of the event target*. So, in this example, we're iterating through all DOM
    nodes of the `.flex-item` class. On each node, we are assigning an event handler,
    thus `e.target` equals the DOM node and `e.target.id` equals its HTML attribute
    of `id`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等！`e.target`是什么？我们将在[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml) *事件、事件驱动设计和API*中深入探讨事件，但现在只需要知道`e.target`是*事件目标的DOM节点*。因此，在这个例子中，我们正在遍历所有`.flex-item`类的DOM节点。在每个节点上，我们正在分配一个事件处理程序，因此`e.target`等于DOM节点，`e.target.id`等于其`id`的HTML属性。
- en: 'Fantastic. Let''s take a look at line 19, where we''re doing something similar,
    but this time using the CSS selector of `id`—`image`. Take a look at the HTML:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。让我们看看第19行，我们正在做类似的事情，但这次使用CSS选择器`id`——`image`。看一下HTML：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We see there is an ID of `image` on our tag, which means our DOM node will also
    have this ID. Now, when we move (or hover) over the image, we'll get an alert
    message stating the local path of the image file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到标签上有一个`image`的ID，这意味着我们的DOM节点也会有这个ID。现在，当我们移动（或悬停）在图像上时，我们将收到一个警报消息，说明图像文件的本地路径。
- en: 'If you''re not that fluent with CSS, right now you may be asking yourself:
    But where''s the JavaScript to turn the orange boxes turquoise? Ha! Trick question!
    Let''s look at lines 45-48 in the `style.css` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对CSS不太熟悉，现在你可能会问自己：但是用JavaScript把橙色框变成蓝绿色的代码在哪里？哈！这是个陷阱问题！让我们看一下`style.css`文件中的45-48行：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you notice the *pseudoclass* of `:hover` on the item, we see the CSS rules
    that change the cursor from an arrow to the hand (indicating clickability in most
    user interfaces) as well as the background color change. Surprise!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了项目上的`：hover`伪类，我们可以看到改变光标从箭头到手的CSS规则（在大多数用户界面中表示可点击性），以及背景颜色的改变。惊喜！
- en: 'This is not a book on CSS; on the contrary, we''re going to try to steer clear
    of too many style dependencies. However, it''s important to note that often CSS
    allows us to make changes to some presentational aspects of HTML elements. But
    why do we care? After all, we''re writing *JavaScript*. The answer is simple:
    computational expense. It''s more *expensive* (that is, it takes more processing
    power) to modify an element via JavaScript than by CSS. If you''re manipulating
    CSS attributes that don''t require logic, use CSS where possible. However, if
    you need logic (such as stitching in variables to display an image, as in our
    example) then JavaScript is the correct choice.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一本关于CSS的书；相反，我们将尽量避免过多的样式依赖。然而，重要的是要注意，通常CSS允许我们对HTML元素的一些表现方面进行更改。但是我们为什么要在意呢？毕竟，我们正在写*JavaScript*。答案很简单：计算开销。通过JavaScript修改元素比通过CSS更*昂贵*（也就是说，需要更多的处理能力）。如果你正在操作不需要逻辑的CSS属性，请尽可能使用CSS。但是，如果你需要逻辑（比如在我们的例子中将变量拼接到显示图像中），那么JavaScript是正确的选择。
- en: Using other selectors
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用其他选择器
- en: 'It''s important to note that before `querySelector` and `querySelectorAll`
    were standardized as part of ES6 and HTML5, there were other selectors that were
    more prevalent, and you''re certain to encounter them in the wild. Some of them
    include `getElementById`, `getElementsByClassName`, and `getElementsByTagName`.
    It''s now considered a standard practice to use a variant of `querySelector`,
    but as with everything JavaScript, there is a caveat: technically, the `querySelector`
    methods are a tiny bit more expensive than the `getElement`-style methods. Usually,
    this expense is negligible when weighed against the power and flexibility of the
    `querySelector` methods, but it''s something to keep in the back of your mind
    when dealing with large pages.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，在ES6和HTML5的一部分之前，`querySelector`和`querySelectorAll`被标准化之前，有其他更常见的选择器，你肯定会在实际中遇到它们。其中一些包括`getElementById`、`getElementsByClassName`和`getElementsByTagName`。现在使用`querySelector`的变体被认为是标准做法，但是和所有JavaScript一样，有一个警告：从技术上讲，`querySelector`方法比`getElement`风格的方法稍微昂贵一点。通常情况下，与`querySelector`方法的强大和灵活性相比，这种开销是可以忽略的，但在处理大页面时，这是需要记在心里的事情。
- en: Now, let's take a look at *what* we can change after we've selected our elements.
    These are the **properties** of an element.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一看在选择了元素之后我们可以改变*什么*。这些是元素的**属性**。
- en: Properties
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性
- en: 'We''ve dealt with a few properties already: `innerHTML` of a node, `src` of
    an image, and `id` of a node. There is a vast array of properties available to
    us, so let''s take a peek at how CSS marries with JavaScript.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经处理了一些属性：节点的`innerHTML`，图像的`src`和节点的`id`。我们有大量可用的属性，所以让我们来看看CSS是如何与JavaScript结合的。
- en: 'Just for the sake of argument, let''s change our Animals program to use JavaScript
    to change the background color of the target instead of CSS ([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals-2](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals-2)):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 光是为了论证，让我们把我们的动物程序改成使用JavaScript来改变目标的背景颜色，而不是CSS（[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals-2](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals-2)）：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we examine our mouseover handler, we can notice two things:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查我们的mouseover处理程序，我们可以注意到两件事：
- en: The name of the event is `mouseover`, not `hover`. More on that later.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件的名称是`mouseover`，而不是`hover`。稍后再详细讨论。
- en: We're modifying the style property of our target, but the name is `backgroundColor`,
    not `background-color` as it is in CSS.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在修改目标的样式属性，但名称是`backgroundColor`，而不是CSS中的`background-color`。
- en: The camel case rule of properties in CSS is also a standard in JavaScript. It
    may seem a bit counterintuitive to have a different set of nouns for JavaScript,
    but in practice, it's better because you don't have to use bracket notation and
    quotes to deal with the hyphens in property names (which would be interpreted
    as an invalid subtraction statement).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: CSS中属性的驼峰命名规则在JavaScript中也是标准的。在实践中，这可能看起来有点违反直觉，因为你不必使用括号表示法和引号来处理属性名称中的连字符（这将被解释为无效的减法语句）。
- en: However, let's now run our program and hover over all of the boxes. Do you see
    a color change from one color to another, like this?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在让我们运行程序并悬停在所有框上。你看到颜色从一种颜色变成另一种颜色了吗，就像这样吗？
- en: '![](assets/87dd9e77-c927-43c3-bdbf-fe3ea86a36c2.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/87dd9e77-c927-43c3-bdbf-fe3ea86a36c2.png)'
- en: Figure 6.8 All the boxes are changed!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 所有的框都改变了！
- en: Yep, if you guessed that we didn't include a "reset" handler, you're right.
    We can do that with the `mouseout` event. However, do you see how it makes sense
    to use CSS when you can?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，如果你猜到我们没有包括一个“重置”处理程序，你是对的。我们可以用`mouseout`事件来做到这一点。然而，你看到当你可以使用CSS时使用CSS是有道理的吗？
- en: It's certainly not necessary to memorize all the various properties available
    to you on DOM nodes, but `id`, `className`, `style`, and `dataset` are probably
    the most useful.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有必要记住DOM节点上可用的各种属性，但`id`、`className`、`style`和`dataset`可能是最有用的。
- en: 'What''s this `dataset` property, you ask? You may not be familiar with data
    attributes in HTML, but they come in immensely handy. Consider this example from
    MDN:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你问的这个`dataset`属性是什么？你可能不熟悉HTML中的数据属性，但它们非常方便。考虑MDN中的这个例子：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The "`data-`" attributes are quite handy when your backend can insert markup
    into your HTML but is divorced from your JavaScript (as is almost always the case
    and, arguably, as your structure should be architected). To access `data-index-number`
    of `article`, we use this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的后端可以将标记插入到HTML中，但与JavaScript分离时（几乎总是如此，并且可以说是你的结构应该被架构化的方式），`data-`属性就非常方便。要访问`article`的`data-index-number`，我们使用这个：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice again our camel case and the new usage of `.dataset.`, not `data-`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意我们的驼峰命名法和`.dataset.`的新用法，而不是`data-`。
- en: We now know enough to do some more exciting work with our elements. We can target
    elements with selectors and read the elements' attributes. Next, let's look at **manipulations**.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道足够多的知识来对我们的元素进行更多的激动人心的工作。我们可以用选择器来定位元素并读取元素的属性。接下来，让我们看看**操作**。
- en: Manipulations
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作
- en: 'When working with the DOM via JavaScript, we can not only read but *manipulate*
    these properties. Let''s get some practice in manipulating properties by making
    a small program: a sticky note creator.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用JavaScript通过DOM工作时，我们不仅可以读取，还可以*操作*这些属性。让我们通过制作一个小程序来练习操作属性：便利贴创建者。
- en: Sticky note creator
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 便利贴创建者
- en: 'We''re going to make a sticky note creator that takes a color and a message
    and adds that colored box to the DOM with an ordinal number. Here''s what our
    final product might look like:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将制作一个便利贴创建者，它接受颜色和消息，并将带有序号的彩色框添加到DOM中。我们的最终产品可能看起来像这样：
- en: '![](assets/a6ca44b0-6dea-4b74-aa00-a0579315aa93.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a6ca44b0-6dea-4b74-aa00-a0579315aa93.png)'
- en: Figure 6.9 Final product
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 最终产品
- en: 'Take a look at the starter code: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code).
    [](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下起始代码：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code)。
    [](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code)
- en: 'Your goal is to recreate this functionality. Here are two methods we haven''t
    yet covered for you to research:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你的目标是重新创建这个功能。这里有两种我们还没有涵盖的方法供你研究：
- en: '`document.createElement()`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.createElement()`'
- en: '`container.appendChild()`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container.appendChild()`'
- en: Solution code
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案代码
- en: 'How did you do? Let''s take a look at the solution code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你做得怎么样？让我们看看解决方案代码：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: OK! Some of these lines shouldn't be a mystery, but the most interesting ones
    are lines 7 (`const stickyNote = document.createElement('div')`) and 28 (`container.appendChild(stickyNote)`).
    As mentioned previously, these are the two methods you would need to research
    in order to finish this program. Line 7 is creating a DOM node—in memory! We can
    make our manipulations to it, such as adding content and style, and then on line
    28 we're adding it to the DOM.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！其中一些行不应该是一个谜，但最有趣的是第7行（`const stickyNote = document.createElement('div')`）和第28行（`container.appendChild(stickyNote)`）。正如之前提到的，这是你需要研究的两种方法，以完成这个程序。第7行正在创建一个DOM节点——在内存中！我们可以对它进行操作，比如添加内容和样式，然后在第28行将其添加到DOM中。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Yay, we've finally gotten into the DOM and manipulated it! Congrats on where
    you're at so far!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 耶，我们终于进入了DOM并对其进行了操作！恭喜你迄今为止的成就！
- en: 'With JavaScript, we can now dynamically change what is on the page as opposed
    to only using alerts and console messages. Here''s an overview of what we learned:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过JavaScript动态地改变页面上的内容，而不仅仅是使用警报和控制台消息。以下是我们学到的内容的概述：
- en: '`querySelector` and `querySelectorAll` are our gateways into the magical realm
    of the DOM.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`querySelector`和`querySelectorAll`是我们进入DOM的神奇领域的门户。'
- en: The DOM exists only in memory as a dynamic representation of where the HTML
    was when the page was loaded.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM只存在于内存中，作为HTML在页面加载时的动态表示。
- en: Selectors for these methods will use CSS selectors; legacy methods will not.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些方法的选择器将使用CSS选择器；旧方法不会。
- en: Properties of nodes can be changed, but the nomenclature varies.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的属性可以更改，但术语不同。
- en: In the next chapter, we'll work more with *events*.Events are at the heart of
    a JavaScript program, so let's learn about their structure and use.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更多地使用*events*。事件是JavaScript程序的核心，让我们学习它们的结构和用法。
- en: Questions
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Consider the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Answer the following question:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What is the correct syntax to select the button?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择按钮的正确语法是什么？
- en: '`document.querySelector(''Click me!'')`'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''点击我！'')`'
- en: '`document.querySelector(''.button'')`'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''.button'')`'
- en: '`document.querySelector(''#button'')`'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''#button'')`'
- en: '`document.querySelector(''button'')`'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''button'')`'
- en: 'Take a look at this code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这段代码：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Answer the following questions:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: 'True or false: `do``cument.querySelector(''button'')` will serve our needs
    to place a click handler on each button.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：`document.querySelector('button')` 将满足我们对每个按钮放置点击处理程序的需求。
- en: 'True'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: To change the text of the button from "Click me!" to "Click me first!", what
    should we use?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将按钮的文本从“点击我！”更改为“先点击我！”，我们应该使用什么？
- en: '`document.querySelectorAll(''button'')[0].innerHTML = "Click me first!"`'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelectorAll(''button'')[0].innerHTML = "先点击我！"`'
- en: '`document.querySelector(''button'')[0].innerHTML = "Click me first!"`'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''button'')[0].innerHTML = "先点击我！"`'
- en: '`document.querySelector(''button'').innerHTML = "Click me first!"`'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''button'').innerHTML = "先点击我！"`'
- en: '`document.querySelectorAll(''#button'')[0].innerHTML = "Click me first!"`'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelectorAll(''#button'')[0].innerHTML = "先点击我！"`'
- en: What method could we use to add another button?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用什么方法来添加另一个按钮？
- en: '`document.appendChild(''button'')`'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.appendChild(''button'')`'
- en: '`document.appendChild(''<button>'')`'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.appendChild(''<button>'')`'
- en: '`document.appendChild(document.createElement(''button''))`'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.appendChild(document.createElement(''button''))`'
- en: '`document.appendChild(document.querySelector(''button''))`'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.appendChild(document.querySelector(''button''))`'
- en: How can we change the class of the third button to `third`?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何将第三个按钮的类更改为`third`？
- en: '`document.querySelector(''button'')[3].className = ''third''`'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''button'')[3].className = ''third''`'
- en: '`document.querySelectorAll(''button'')[2].className = ''third''`'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelectorAll(''button'')[2].className = ''third''`'
- en: '`document.querySelector(''button[2]'').className = ''third''`'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''button[2]'').className = ''third''`'
- en: '`document.querySelectorAll(''button'')[3].className = ''third''`'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.querySelectorAll(''button'')[3].className = ''third''`'
- en: Further reading
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can refer to the following links:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，您可以参考以下链接：
- en: 'MDN: *Document* *Object Model (DOM)*: [https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MDN：*Document* *Object Model (DOM)*：[https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)
- en: 'MDN: *Document.createElement()*: [https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MDN：*Document.createElement()*：[https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)
- en: 'MDN: *Node.appendChild()*: [https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MDN：*Node.appendChild()*：[https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)
