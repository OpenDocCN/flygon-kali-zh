["```java\n.* \ntarget/* \n!target/eureka-server-*.jar \n```", "```java\nFROM openjdk:8-jdk-alpine \n\nRUN mkdir -p /app \n\nADD target/eureka-server-0.0.1-SNAPSHOT.jar /app/app.jar \n\nEXPOSE 8761 \n\nENTRYPOINT [ \"/usr/bin/java\", \"-jar\", \"/app/app.jar\" ] \n```", "```java\nmvn package \n```", "```java\ndocker build -t cloudnativejava/eureka-server . \n```", "```java\ndocker network create app_nw \n```", "```java\ndocker run -d --network app_nw --name eureka cloudnativejava/eureka-server \n```", "```java\n--- \nspring: \n  profiles: docker \neureka: \n  instance: \n    preferIpAddress: true \n  client: \n    serviceUrl: \n      defaultZone: http://eureka:8761/eureka/ \n```", "```java\nmvn clean package \n```", "```java\n.* \ntarget/* \n!target/product-*.jar \n```", "```java\nFROM openjdk:8-jdk-alpine \n\nRUN mkdir -p /app \n\nADD target/product-0.0.1-SNAPSHOT.jar /app/app.jar \n\nEXPOSE 8080 \n\nENTRYPOINT [ \"/usr/bin/java\", \"-jar\", \"/app/app.jar\", \"--spring.profiles.active=docker\" ] \n```", "```java\ndocker build -t cloudnativejava/product-api . \n```", "```java\ndocker run -d -p 8011:8080 \\ \n    --network app_nw \\ \n    cloudnativejava/product-api \n\ndocker run -d -p 8012:8080 \\ \n    --network app_nw \\ \n    cloudnativejava/product-api \n```", "```java\ncreate table product(id serial primary key, name varchar(20), cat_id int not null); \nbegin; \ninsert into product(name, cat_id) values ('Apples', 1); \ninsert into product(name, cat_id) values ('Oranges', 1); \ninsert into product(name, cat_id) values ('Bananas', 1); \ninsert into product(name, cat_id) values ('Carrots', 2); \ninsert into product(name, cat_id) values ('Beans', 2); \ninsert into product(name, cat_id) values ('Peas', 2); \ncommit; \n```", "```java\nFROM postgres:alpine \n\nENV POSTGRES_USER=dbuser  \n    POSTGRES_PASSWORD=dbpass  \n    POSTGRES_DB=product \n\nEXPOSE 5432 \n\nRUN mkdir -p /docker-entrypoint-initdb.d \n\nADD import-postgres.sql /docker-entrypoint-initdb.d/import.sql \n```", "```java\ndocker build -t cloudnativejava/datastore -f Dockerfile.postgres . \n```", "```java\n--- \nspring: \n  profiles: postgres \n  datasource: \n    url: jdbc:postgresql://<docker-host>:5432/product \n    username: dbuser \n    password: dbpass \n    driver-class-name: org.postgresql.Driver \n  jpa: \n    database-platform: org.hibernate.dialect.PostgreSQLDialect \n    hibernate: \n      ddl-auto: none \n```", "```java\nmvn clean package \n```", "```java\ndocker build -t cloudnativejava/product-api . \n```", "```java\nold_ids=$(docker ps -f ancestor=cloudnativejava/product-api -q) \ndocker stop $old_ids \ndocker rm $old_ids \n```", "```java\ndocker run -d -p 5432:5432  \n    --network app_nw  \n    --name datastore  \n    cloudnativejava/datastore \n```", "```java\ndocker run -d -p 8011:8080  \n    --network app_nw  \n    cloudnativejava/product-api  \n    --spring.profiles.active=postgres \n\ndocker run -d -p 8012:8080  \n    --network app_nw  \n    cloudnativejava/product-api  \n    --spring.profiles.active=postgres \n```", "```java\nnode { \n  def mvnHome \n  stage('Preparation') { // for display purposes \n    // Get some code from a GitHub repository \n    git 'https://github.com/...' \n    // Get the Maven tool. \n    // ** NOTE: This 'M3' Maven tool must be configured \n    // **       in the global configuration. \n    mvnHome = tool 'M3' \n  } \n  stage('Eureka Server') { \n    dir('eureka-server') { \n      stage('Build - Eureka Server') { \n        // Run the maven build \n        if (isUnix()) { \n          sh \"'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package\" \n        } else { \n          bat(/\"${mvnHome}binmvn\" -Dmaven.test.failure.ignore clean package/) \n        } \n      } \n      stage('Results - Eureka Server') { \n        archiveArtifacts 'target/*.jar' \n      } \n    }    \n  } \n  stage('Product API') { \n    dir('product') { \n      stage('Build - Product API') { \n        // Run the maven build \n        if (isUnix()) { \n          sh \"'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package\" \n        } else { \n          bat(/\"${mvnHome}binmvn\" -Dmaven.test.failure.ignore clean package/) \n        } \n      } \n      stage('Results - Product API') { \n        junit '**/target/surefire-reports/TEST-*.xml' \n        archiveArtifacts 'target/*.jar' \n      } \n    } \n  } \n} \n```"]