- en: Chapter 11. Latest and Greatest NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十一章：最新最强的 NumPy
- en: 'In this chapter, we cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖以下秘籍：
- en: Fancy indexing in place of ufuncs with the `at()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`at()`方法结合花式索引代替通用函数
- en: Partial sorting via selection of the fast median with the `partition()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`partition()`函数选择快速中位数进行部分排序
- en: Skipping NaNs with the `nanmean()`, `nanvar()`, and `nanstd()` functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`nanmean()`，`nanvar()`和`nanstd()`函数跳过`NaN`
- en: Creating value-initialized arrays with the `full()` and `full_like()` functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`full()`和`full_like()`函数创建值初始化的数组
- en: Random sampling with `numpy.random.choice()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.random.choice()`随机抽样'
- en: Using the `datetime64` type and the related API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`datetime64`类型和相关的 API
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Since the first edition of *NumPy Cookbook*, the NumPy team has introduced new
    features; I will describe them in this chapter. It's probably unlikely that you
    read the first edition of this book and are now reading the second edition. I
    wrote the first edition in 2012 and used the then available features. NumPy has
    many features, so you can't expect coverage of all of them, but the functionality
    I've described in this chapter is relatively important.
  prefs: []
  type: TYPE_NORMAL
  zh: 自《NumPy 秘籍》第一版以来，NumPy 团队引入了新功能； 我将在本章中对其进行描述。 您可能不太可能阅读本书的第一版，而现在正在阅读第二版。 我在
    2012 年撰写了第一版，并使用了当时可用的功能。 NumPy 具有许多功能，因此您不能期望涵盖所有功能，但是我在本章中介绍的功能相对重要。
- en: Fancy indexing in place for ufuncs with the at() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`at()`方法结合花式索引代替通用函数
- en: The `at()` method was added to the NumPy universal function class in NumPy 1.8\.
    This method allows fancy indexing in-place. Fancy indexing is indexing that does
    not involve integers or slices, which is normal indexing. "In-place" means that
    the data of the input array will be altered.
  prefs: []
  type: TYPE_NORMAL
  zh: '`at()`方法已添加到 NumPy 1.8 的 NumPy 通用函数类中。 此方法允许就地进行花式索引。 花式索引是不涉及整数或切片的索引，这是正常的索引。
    “就地”是指将更改输入数组的数据。'
- en: The signature for the `at()` method is `ufunc.at(a, indices[, b])`. The indices
    array corresponds to the elements to operate on. We must specify the `b` array
    only for universal functions with two operands.
  prefs: []
  type: TYPE_NORMAL
  zh: '`at()`方法的签名为`ufunc.at(a, indices[, b])`。 索引数组对应于要操作的元素。 我们仅必须为具有两个操作数的通用函数指定`b`数组。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The following steps demonstrate how the `at()` method works:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了`at()`方法的工作方式：
- en: Create an array with `7` random integers from `-4` to `4` with a seed of `44:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有种子`44`的`7`个从`-4`到`4`的随机整数的数组。
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The array appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该数组如下所示：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Apply the `at()` method of the `sign` universal function to the third and fifth
    array elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`sign`通用函数的`at()`方法应用于第三和第五个数组元素：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get the following altered array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下更改后的数组：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The NumPy universal function documentation is at [http://docs.scipy.org/doc/numpy/reference/ufuncs.html](http://docs.scipy.org/doc/numpy/reference/ufuncs.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NumPy 通用函数文档位于[`docs.scipy.org/doc/numpy/reference/ufuncs.html`](http://docs.scipy.org/doc/numpy/reference/ufuncs.html)'
- en: Partial sorting via selection for fast median with the partition() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`partition()`函数通过快速中位数的选择进行部分排序
- en: The `partition()` subroutine does partial sorting. This should be less work
    than normal sorting.
  prefs: []
  type: TYPE_NORMAL
  zh: '`partition()`子例程进行部分排序。 这应该比正常的分类工作少。'
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [http://en.wikipedia.org/wiki/Partial_sorting](http://en.wikipedia.org/wiki/Partial_sorting)
    for more information. A useful scenario is selecting the top five (or some other
    number) items of a group. Partial sorting doesn't preserve the right order within
    the set of the top elements.
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[`en.wikipedia.org/wiki/Partial_sorting`](http://en.wikipedia.org/wiki/Partial_sorting)。 有用的情况是选择组中的前五项（或其他一些数字）。
    部分排序不能在顶部元素集中保留正确的顺序。
- en: The first parameter of the subroutine is the input array to sort. The second
    parameter is an integer or a list of integers corresponding to the indices of
    the array elements. The `partition()` subroutine sorts items at those indices
    correctly. One specified index gives two partitions. Multiple indices result in
    more than two partitions. The algorithm guarantees that items in partitions smaller
    than a correctly sorted item come before that item. Otherwise, they are put behind
    that item.
  prefs: []
  type: TYPE_NORMAL
  zh: 子例程的第一个参数是要排序的输入数组。 第二个参数是整数或与数组元素的索引相对应的整数列表。 `partition()`子例程正确地对那些索引处的项目进行排序。
    一个指定的索引给出两个分区。 多个索自举致两个以上的分区。 该算法保证分区中小于正确排序项目的项目位于该项目之前。 否则，它们将放在该项目的后面。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s illustrate this explanation with an example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举例说明此解释：
- en: 'Create an array with random numbers to sort:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有随机数的数组以进行排序：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The array has the following elements:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该数组具有以下元素：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Partially sort the array by partitioning it into two roughly equal parts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将数组划分为两个大致相等的部分，对数组进行部分排序：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We get the following result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下结果：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We partially sorted a nine-element array. The function guaranteed only that
    one element in the middle, at index `4,` is at the right place. This corresponds
    to attempting to select the top five items of the array without caring about the
    order within the top five set. Since the correctly sorted item is in the middle,
    this also returns the median of the array.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 9 个元素的数组进行了部分排序。 该函数保证索引`4,`的中间只有一个元素在正确的位置。 这对应于尝试选择数组的前五项而不关心前五组中的顺序。
    由于正确排序的项目位于中间，因此这也将返回数组的中位数。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant NumPy documentation is at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关 NumPy 文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.partition.html)'
- en: Skipping NaNs with the nanmean(), nanvar(), and nanstd() functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`nanmean()`，`nanvar()`和`nanstd()`函数跳过`NaN`
- en: It is common to attempt to estimate how variable the arithmetic mean, variance,
    and standard deviation of a set of data are.
  prefs: []
  type: TYPE_NORMAL
  zh: 试图估计一组数据的算术平均值，方差和标准差是很常见的。
- en: A simple, but effective, method is called **jackknife resampling** (refer to
    [http://en.wikipedia.org/wiki/Jackknife_resampling](http://en.wikipedia.org/wiki/Jackknife_resampling)).
    The idea behind jackknife resampling is to create datasets from the original data
    by leaving out one value each time. In essence, we are attempting to estimate
    what will occur if at least one of the values is incorrect. For every new dataset,
    we recalculate the statistical estimator we are interested in. This helps us understand
    how the estimator varies.
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单但有效的方法称为**折刀重采样**（参考[`en.wikipedia.org/wiki/Jackknife_resampling`](http://en.wikipedia.org/wiki/Jackknife_resampling)）。
    折刀重采样的想法是通过每次都遗漏一个值来从原始数据创建数据集。 本质上，我们试图估计如果至少一个值不正确会发生什么。 对于每个新数据集，我们都会重新计算我们感兴趣的统计估计量。这有助于我们了解估计量的变化方式。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will apply jackknife resampling to random data. We will skip every array
    element once by setting it to NaN (Not a Number). The `nanmean()`, `nanvar()`,
    and `nanstd()` can then be used to compute the arithmetic mean, variance, and
    standard deviation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将折刀重采样应用于随机数据。 通过将其设置为`NaN`（非数字），我们将跳过每个数组元素一次。 然后，可以使用`nanmean()`，`nanvar()`和`nanstd()`计算算术平均值，方差和标准差：
- en: 'First initialize a 30 x 3 array for the estimates, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先为估算值初始化一个`30 x 3`的数组，如下所示：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Loop through the array and create a new dataset by setting one value to NaN
    at every iteration of the loop. For every new dataset, calculate the estimates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历数组并通过在循环的每次迭代中将一个值设置为`NaN`来创建新的数据集。 对于每个新数据集，计算估计值：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Print the variance for every estimator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印每个估计量的方差：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following output appears on the screen:'
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上显示以下输出：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We estimated the variances of the arithmetic mean, variance, and standard deviation
    of a data set with jackknife resampling. This indicates how much the arithmetic
    mean, variance and standard deviation vary. The code for this recipe is in the
    `jackknife.py` file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用折刀重采样估计了数据集的算术平均值，方差和标准差的方差。 这表明算术平均值，方差和标准差有多少变化。 该秘籍的代码在本书的代码包的`jackknife.py`
    文件中：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation page for `nanmean()` is at [http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanmean.html](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanmean.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nanmean()`的文档页面位于[`docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanmean.html`](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanmean.html)'
- en: The documentation page for `nanvar()` is at [http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanvar.html](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanvar.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nanvar()`的文档页面位于[`docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanvar.html`](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanvar.html)'
- en: The documentation page for `nanstd()` is at [http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanstd.html](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanstd.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nanstd()`的文档页面位于[`docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanstd.html`](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nanstd.html)'
- en: Creating value initialized arrays with the full() and full_like() functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`full()`和`full_like()`函数创建值初始化数组
- en: 'The `full()` and `full_like()` functions are new additions to NumPy meant to
    facilitate initialization. Here''s what the documentation says about them:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`full()`和`full_like()`函数是 NumPy 的新增函数，用于简化初始化。 这是文档中关于它们的内容：'
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s see how `full()` and `full_like()` function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下`full()`和`full_like()`函数：
- en: 'Create a `1` by `2` array with `full()`, filled with the lucky number `7`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`full()`创建一个`1x2`数组，并填充幸运数字`7`：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Accordingly, we get the following array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们得到以下数组：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The array elements are floating-point numbers.
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素是浮点数。
- en: 'Specify an integer data type, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定整数数据类型，如下所示：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output changes accordingly:'
  prefs: []
  type: TYPE_NORMAL
  zh: 输出相应地更改：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `full_like()` function checks the metadata of an array and reuses it for
    the new array. For example, create an array using `linspace()`, and apply it as
    a template for the `full_like()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`full_like()`函数检查数组的元数据，并将其重新用于新数组。 例如，使用`linspace()`创建一个数组，并将其用作`full_like()`函数的模板：'
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Again, we filled the array with the lucky number `7`. To modify the data type
    to integer, use the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们用幸运数字`7`填充数组。 要将数据类型修改为整数，请在以下行中使用：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We produced arrays with `full()` and `full_like()`. The `full()` function filled
    the array with the number `7`. The `full_like()` function reused the metadata
    of an array for the creation of a new array. Both functions let you specify the
    data type of the array.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用`full()`和`full_like()`产生了数组。 `full()`函数用数字`7`填充数组。 `full_like()`函数重新使用了数组的元数据来创建新的数组。
    这两个函数都可以指定数组的数据类型。
- en: Random sampling with numpy.random.choice()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`numpy.random.choice()`进行随机采样
- en: '**Bootstrapping** is a procedure similar to jackknifing. The basic bootstrapping
    method has the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: '**自举**的过程类似于折刀。 基本的自举方法包括以下步骤：'
- en: Generate samples from the original data of size *N.* Visualize the original
    data sample as a bowl of numbers. We create new samples by taking numbers at random
    from the bowl. After taking a number, we return it to the bowl.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从大小为`N`的原始数据生成样本。将原始数据样本可视化为一碗数字。 我们通过从碗中随机抽取数字来创建新样本。 取一个数字后，我们将其放回碗中。
- en: For each generated sample, we compute the statistical estimator of interest
    (for example, the arithmetic mean).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个生成的样本，我们计算感兴趣的统计估计量（例如，算术平均值）。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will apply `numpy.random.choice()` to do bootstrapping:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将应用`numpy.random.choice()`进行自举：
- en: 'Generate a data sample following the binomial distribution that simulates flipping
    a fair coin five times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照二项式分布生成数据样本，该数据样本模拟五次抛掷公平硬币：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Generate 30 samples and compute their means (more samples will give a better
    result):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 30 个样本并计算其平均值（更多样本将得到更好的结果）：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Visualize the arithmetic means distribution with a `matplotlib` box plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 箱形图可视化算术平均值分布：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Refer to the following annotated plot for the end result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 有关最终结果，请参考以下带注释的图：
- en: '![How to do it...](img/0945_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_11_01.jpg)'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We simulated an experiment involving flipping a fair coin five times. We bootstrapped
    the data by creating samples and computing the corresponding means. Then we used
    `numpy.random.choice()` to bootstrap. We visualized the means with a `matplotlib`
    box plot. If you are not familiar with box plots, the annotations in the plot
    will hopefully help you. The following elements of the box plot are of importance:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模拟了一个实验，该实验涉及掷出五次公平硬币。 我们通过创建样本并计算相应的方法来自举数据。 然后，我们使用`numpy.random.choice()`进行自举。
    我们用`matplotlib`箱形图直观地表示了均值。 如果您不熟悉箱形图，图中的注释将对您有所帮助。 箱形图中的以下元素很重要：
- en: The median represented by a line in a box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中位数由框中的一条线表示。
- en: Upper and lower quartiles shown as edges of the box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下四分位数显示为框的边界。
- en: Whiskers indicating boundaries for outliers. By default, these are set at *1.5
    * (Q3 – Q1)* from the edges of the box, which is also known as the **interquartile
    range**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 胡须指示异常值的边界。 默认情况下，这些值从框的边界设置为`1.5 * (Q3 - Q1)`，也称为**四分位间距**。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The NumPy `numpy.random.choice()` documentation is at [http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.choice.html](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.choice.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NumPy `numpy.random.choice()`文档位于[`docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.choice.html`](http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.choice.html)'
- en: The `matplotlib boxplot()` function documentation is at [http://matplotlib.org/api/pyplot_api.html](http://matplotlib.org/api/pyplot_api.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matplotlib boxplot()`函数文档位于[`matplotlib.org/api/pyplot_api.html`](http://)'
- en: The Wikipedia page about box plots is at [http://en.wikipedia.org/wiki/Box_plot](http://en.wikipedia.org/wiki/Box_plot)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '箱形图的维基百科位于[`en.wikipedia.org/wiki/Box_plot`](http://en.wikipedia.org/wiki/Box_plot)'
- en: Using the datetime64 type and related API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`datetime64`类型和相关的 API
- en: The `datetime64` type represents a date and the corresponding time. You need
    NumPy 1.7.0 or later versions to use this data type.
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime64`类型表示相应的日期和时间。 您需要 NumPy 1.7.0 或更高版本才能使用此数据类型。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'To get acquainted with `datetime64`, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 要熟悉`datetime64`，请按照下列步骤操作：
- en: 'Create a `datetime64` from a string, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字符串创建一个`datetime64`，如下所示：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding line prints the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行输出以下输出：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We created a `datetime64` type for May 21, 2015, using the `YYYY-MM-DD` format,
    where `Y` corresponds to the year, `M` corresponds to the month, and `D` corresponds
    to the day of the month. NumPy complies with the ISO 8601 standard—an international
    standard for representing dates and times.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`YYYY-MM-DD`格式为 2015 年 5 月 21 日创建了`datetime64`类型，其中`Y`对应于年份，`M`对应于月份，`D`对应于每月的一天。
    NumPy 符合 ISO 8601 标准——一种表示日期和时间的国际标准。
- en: 'ISO 8601 also defines the `YYYY-MM-DD`, `YYYY-MM`, and `YYYYMMDD` formats.
    Check these out for yourself, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ISO 8601 还定义了`YYYY-MM-DD`，`YYYY-MM`和`YYYYMMDD`格式。 自己检查这些，如下所示：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The code prints the following lines:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码显示以下行：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'By default, ISO 8601 uses the local time zone. The time can be specified using
    the `T[hh:mm:ss]` format. For example, we can define January 1, 1578, and the
    time 9:18 p.m. as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，ISO 8601 使用本地时区。 可以使用`T[hh:mm:ss]`格式指定时间。 例如，我们可以定义 1578 年 1 月 1 日和晚上
    9:18。 如下：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following line shows the result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了结果：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A string in the `-[hh:mm]` format defines an offset relative to the UTC time
    zone. We can create a `datetime64` type with 8 hours of offset, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 格式为`-[hh:mm]`的字符串定义相对于 UTC 时区的偏移量。 我们可以使用 8 个小时的偏移量创建一个`datetime64`类型，如下所示：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We then see the following line on the screen:'
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在屏幕上看到以下行：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `Z` at the end stands for Zulu time, which is how UTC is sometimes referred
    to.
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`Z`代表祖鲁时间，有时也称为 UTC。
- en: 'Subtract the two `datetime64` objects from each other:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相互减去两个`datetime64`对象：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The result appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示如下：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Subtracting creates a `timedelta64` NumPy object, which in this case indicates
    a 480-minute delta.
  prefs: []
  type: TYPE_NORMAL
  zh: 减法创建一个`timedelta64` NumPy 对象，在这种情况下，它表示 480 分钟的增量。
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'You learned about the `datetime64` NumPy type. This data type allows us to
    manipulate dates and times with ease. Its features include simple arithmetic and
    creation of arrays using the normal NumPy capabilities. Please refer to the `datetime_demo.py`
    file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您了解了`datetime64` NumPy 类型。 这种数据类型使我们可以轻松地操纵日期和时间。 它的功能包括简单的算术运算和使用常规 NumPy 函数创建数组。
    请参考本书代码包中的`datetime_demo.py`文件：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant NumPy documentation is at [http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html](http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的 NumPy 文档位于[`docs.scipy.org/doc/numpy/reference/arrays.datetime.html`](http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)'
- en: The relevant Wikipedia page is at [http://en.wikipedia.org/wiki/ISO_8601](http://en.wikipedia.org/wiki/ISO_8601)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的维基百科页面位于[`en.wikipedia.org/wiki/ISO_8601`](http://en.wikipedia.org/wiki/ISO_8601)'
