["```java\npublic class Connect4 {\n  public enum Color {\n    RED('R'), GREEN('G'), EMPTY(' ');\n\n    private final char value;\n\n    Color(char value) { this.value = value; }\n\n    @Override\n    public String toString() {\n      return String.valueOf(value);\n    }\n  }\n\n  public static final int COLUMNS = 7;\n\n  public static final int ROWS = 6;\n\n  private Color[][] board = new Color[COLUMNS][ROWS];\n\n  public Connect4() {\n    for (Color[] column : board) {\n      Arrays.fill(column, Color.EMPTY);\n    }\n  }\n}\n```", "```java\npublic void putDisc(int column) {\n  if (column > 0 && column <= COLUMNS) {\n    int numOfDiscs = getNumberOfDiscsInColumn(column - 1);\n    if (numOfDiscs < ROWS) {\n      board[column - 1][numOfDiscs] = Color.RED;\n    }\n  }\n}\n\nprivate int getNumberOfDiscsInColumn(int column) {\n  if (column >= 0 && column < COLUMNS) {\n    int row;\n    for (row = 0; row < ROWS; row++) {\n      if (Color.EMPTY == board[column][row]) {\n        return row;\n      }\n    }\n    return row;\n  }\n  return -1;\n}\n```", "```java\n...\nprivate Color currentPlayer = Color.RED;\n\nprivate void switchPlayer() {\n  if (Color.RED == currentPlayer) {\n    currentPlayer = Color.GREEN;\n  } else {\n    currentPlayer = Color.RED;\n  }\n}\n\npublic void putDisc(int column) {\n  if (column > 0 && column <= COLUMNS) {\n    int numOfDiscs = getNumberOfDiscsInColumn(column - 1);\n    if (numOfDiscs < ROWS) {\n      board[column - 1][numOfDiscs] = currentPlayer;\n      switchPlayer();\n    }\n  }\n}\n...\n```", "```java\n... \nprivate static final String DELIMITER = \"|\";\n\nprivate void switchPlayer() {\n  if (Color.RED == currentPlayer) {\n    currentPlayer = Color.GREEN;\n  } else {\n    currentPlayer = Color.RED;\n  }\n  System.out.println(\"Current turn: \" + currentPlayer);\n}\n\npublic void printBoard() {\n  for (int row = ROWS - 1; row >= 0; --row) {\n    StringJoiner stringJoiner =\n      new StringJoiner(DELIMITER, DELIMITER, DELIMITER);\n    for (int col = 0; col < COLUMNS; ++col) {\n      stringJoiner.add(board[col][row].toString());\n    }\n    System.out.println(stringJoiner.toString());\n  }\n}\n\npublic void putDisc(int column) {\n  if (column > 0 && column <= COLUMNS) {\n    int numOfDiscs = getNumberOfDiscsInColumn(column - 1); \n    if (numOfDiscs < ROWS) { \n      board[column - 1][numOfDiscs] = currentPlayer; \n      printBoard();\n      switchPlayer();\n    } else {\n      System.out.println(numOfDiscs); \n      System.out.println(\"There's no room \" + \n        \"for a new disc in this column\"); \n      printBoard(); \n    } \n  } else { \n    System.out.println(\"Column out of bounds\"); \n    printBoard(); \n  } \n}\n... \n```", "```java\n...\npublic boolean isFinished() {\n  int numOfDiscs = 0;\n  for (int col = 0; col < COLUMNS; ++col) {\n    numOfDiscs += getNumberOfDiscsInColumn(col);\n  }\n  if (numOfDiscs >= COLUMNS * ROWS) {\n    System.out.println(\"It's a draw\");\n    return true;\n  }\n  return false;\n}\n...\n```", "```java\n... \nprivate Color winner;\n\npublic static final int DISCS_FOR_WIN = 4;\n\npublic void putDisc(int column) {\n  ...\n  if (numOfDiscs < ROWS) {\n    board[column - 1][numOfDiscs] = currentPlayer;\n    printBoard();\n    checkWinCondition(column - 1, numOfDiscs);\n    switchPlayer();\n    ...\n}\n\nprivate void checkWinCondition(int col, int row) {\n  Pattern winPattern = Pattern.compile(\".*\" +\n    currentPlayer + \"{\" + DISCS_FOR_WIN + \"}.*\");\n\n  // Vertical check\n  StringJoiner stringJoiner = new StringJoiner(\"\");\n  for (int auxRow = 0; auxRow < ROWS; ++auxRow) {\n    stringJoiner.add(board[col][auxRow].toString());\n  }\n  if (winPattern.matcher(stringJoiner.toString()).matches()) {\n    winner = currentPlayer;\n    System.out.println(currentPlayer + \" wins\");\n  }\n}\n\npublic boolean isFinished() {\n  if (winner != null) return true;\n  ...\n}\n...\n```", "```java\n...\nprivate void checkWinCondition(int col, int row) {\n  ...\n  // Horizontal check\n  stringJoiner = new StringJoiner(\"\");\n  for (int column = 0; column < COLUMNS; ++column) {\n    stringJoiner.add(board[column][row].toString());\n  }\n  if (winPattern.matcher(stringJoiner.toString()).matches()) { \n    winner = currentPlayer;\n    System.out.println(currentPlayer + \" wins\");\n    return;\n  }\n  ...\n}\n...\n```", "```java\n...\nprivate void checkWinCondition(int col, int row) {\n  ...\n  // Diagonal checks\n  int startOffset = Math.min(col, row);\n  int column = col - startOffset, auxRow = row - startOffset; \n  stringJoiner = new StringJoiner(\"\");\n  do {\n    stringJoiner.add(board[column++][auxRow++].toString());\n  } while (column < COLUMNS && auxRow < ROWS);\n\n  if (winPattern.matcher(stringJoiner.toString()).matches()) {\n    winner = currentPlayer;\n    System.out.println(currentPlayer + \" wins\");\n    return;\n  }\n\n  startOffset = Math.min(col, ROWS - 1 - row);\n  column = col - startOffset;\n  auxRow = row + startOffset;\n  stringJoiner = new StringJoiner(\"\");\n  do {\n    stringJoiner.add(board[column++][auxRow--].toString());\n  } while (column < COLUMNS && auxRow >= 0);\n\n  if (winPattern.matcher(stringJoiner.toString()).matches()) {\n    winner = currentPlayer;\n    System.out.println(currentPlayer + \" wins\");\n  }\n}\n...\n```", "```java\npublic class Connect4TDDSpec {\n  private Connect4TDD tested;\n\n  @Before\n  public void beforeEachTest() {\n    tested = new Connect4TDD();\n  }\n  @Test\n  public void whenTheGameIsStartedTheBoardIsEmpty() {\n    assertThat(tested.getNumberOfDiscs(), is(0));\n  }\n}\n```", "```java\npublic class Connect4TDD {\n  public int getNumberOfDiscs() {\n    return 0;\n  }\n}\n```", "```java\n@Test \npublic void whenDiscOutsideBoardThenRuntimeException() {\n  int column = -1;\n  exception.expect(RuntimeException.class);\n  exception.expectMessage(\"Invalid column \" + column);\n  tested.putDiscInColumn(column);\n}\n\n@Test\npublic void whenFirstDiscInsertedInColumnThenPositionIsZero() {\n  int column = 1;\n  assertThat(tested.putDiscInColumn(column),  is(0));\n}\n\n@Test\npublic void whenSecondDiscInsertedInColumnThenPositionIsOne() {\n  int column = 1;\n  tested.putDiscInColumn(column);\n  assertThat(tested.putDiscInColumn(column), is(1));\n}\n\n@Test\npublic void whenDiscInsertedThenNumberOfDiscsIncreases() {\n  int column = 1;\n  tested.putDiscInColumn(column);\n  assertThat(tested.getNumberOfDiscs(), is(1));\n}\n\n@Test \npublic void whenNoMoreRoomInColumnThenRuntimeException() {\n  int column = 1;\n  int maxDiscsInColumn = 6; // the number of rows\n  for (int times = 0; times < maxDiscsInColumn; ++times) {\n    tested.putDiscInColumn(column);\n  }\n  exception.expect(RuntimeException.class);\n  exception.expectMessage(\"No more room in column \" + column);\n  tested.putDiscInColumn(column);\n}\n```", "```java\nprivate static final int ROWS = 6;\n\nprivate static final int COLUMNS = 7;\n\nprivate static final String EMPTY = \" \";\n\nprivate String[][] board = new String[ROWS][COLUMNS];\n\npublic Connect4TDD() {\n  for (String[] row : board) Arrays.fill(row, EMPTY);\n}\n\npublic int getNumberOfDiscs() {\n  return IntStream\n           .range(0, COLUMNS)\n           .map(this::getNumberOfDiscsInColumn)\n           .sum(); \n} \n\nprivate int getNumberOfDiscsInColumn(int column) {\n  return (int) IntStream\n                 .range(0, ROWS)\n                 .filter(row -> !EMPTY.equals(board[row][column]))\n                 .count();\n}\n\npublic int putDiscInColumn(int column) {\n  checkColumn(column);\n  int row = getNumberOfDiscsInColumn(column);\n  checkPositionToInsert(row, column);\n  board[row][column] = \"X\";\n  return row;\n}\n\nprivate void checkColumn(int column) {\n  if (column < 0 || column >= COLUMNS)\n    throw new RuntimeException(\"Invalid column \" + column);\n}\n\nprivate void checkPositionToInsert(int row, int column) {\n  if (row == ROWS)\n    throw new RuntimeException(\"No more room in column \" + column); \n} \n```", "```java\n@Test\npublic void whenFirstPlayerPlaysThenDiscColorIsRed() {\n  assertThat(tested.getCurrentPlayer(), is(\"R\"));\n}\n\n@Test\npublic void whenSecondPlayerPlaysThenDiscColorIsRed() {\n  int column = 1;\n  tested.putDiscInColumn(column);\n  assertThat(tested.getCurrentPlayer(), is(\"G\"));\n}\n```", "```java\nprivate static final String RED = \"R\";\n\nprivate static final String GREEN = \"G\";\n\nprivate String currentPlayer = RED;\n\npublic Connect4TDD() {\n  for (String[] row : board) Arrays.fill(row, EMPTY);\n}\n\npublic String getCurrentPlayer() {\n  return currentPlayer;\n}\n\nprivate void switchPlayer() {\n  if (RED.equals(currentPlayer)) currentPlayer = GREEN;\n  else currentPlayer = RED;\n}\n\npublic int putDiscInColumn(int column) {\n  ...\n  switchPlayer();\n  return row;\n}\n```", "```java\nprivate OutputStream output;\n\n@Before\npublic void beforeEachTest() {\n  output = new ByteArrayOutputStream(); \n  tested = new Connect4TDD(new PrintStream(output)); \n}\n\n@Test\npublic void whenAskedForCurrentPlayerTheOutputNotice() {\n  tested.getCurrentPlayer();\n  assertThat(output.toString(), containsString(\"Player R turn\")); \n}\n\n@Test\npublic void whenADiscIsIntroducedTheBoardIsPrinted() {\n  int column = 1;\n  tested.putDiscInColumn(column);\n  assertThat(output.toString(), containsString(\"| |R| | | | | |\"));\n}\n```", "```java\nprivate static final String DELIMITER = \"|\";\n\npublic Connect4TDD(PrintStream out) {\n  outputChannel = out;\n  for (String[] row : board) Arrays.fill(row, EMPTY); \n}\n\npublic String getCurrentPlayer() {\n  outputChannel.printf(\"Player %s turn%n\", currentPlayer);\n  return currentPlayer;\n}\n\nprivate void printBoard() {\n  for (int row = ROWS - 1; row >= 0; row--) {\n    StringJoiner stringJoiner = new StringJoiner(DELIMITER, DELIMITER, DELIMITER); \n    Stream.of(board[row]).forEachOrdered(stringJoiner::add); \n    outputChannel.println(stringJoiner.toString()); \n  }\n}\n\npublic int putDiscInColumn(int column) {\n  ... \n  printBoard();\n  switchPlayer();\n  return row;\n} \n```", "```java\n@Test\npublic void whenTheGameStartsItIsNotFinished() {\n  assertFalse(\"The game must not be finished\", tested.isFinished()); \n} \n\n@Test \npublic void whenNoDiscCanBeIntroducedTheGamesIsFinished() { \n  for (int row = 0; row < 6; row++)\n    for (int column = 0; column < 7; column++)\n      tested.putDiscInColumn(column);\n    assertTrue(\"The game must be finished\", tested.isFinished()); \n}\n```", "```java\npublic boolean isFinished() {\n  return getNumberOfDiscs() == ROWS * COLUMNS;\n}\n```", "```java\n@Test\npublic void when4VerticalDiscsAreConnectedThenPlayerWins() {\n  for (int row = 0; row < 3; row++) {\n    tested.putDiscInColumn(1); // R\n    tested.putDiscInColumn(2); // G\n  }\n  assertThat(tested.getWinner(), isEmptyString());\n  tested.putDiscInColumn(1); // R\n  assertThat(tested.getWinner(), is(\"R\"));\n}\n```", "```java\nprivate static final int DISCS_TO_WIN = 4;\n\nprivate String winner = \"\";\n\nprivate void checkWinner(int row, int column) {\n  if (winner.isEmpty()) {\n    String colour = board[row][column];\n    Pattern winPattern =\n      Pattern.compile(\".*\" + colour + \"{\" +\n           DISCS_TO_WIN + \"}.*\");\n\n    String vertical = IntStream\n                       .range(0, ROWS)\n                       .mapToObj(r -> board[r][column])\n                       .reduce(String::concat).get();\n    if (winPattern.matcher(vertical).matches()) \n      winner = colour;\n  }\n}\n```", "```java\n@Test\npublic void when4HorizontalDiscsAreConnectedThenPlayerWins() {\n  int column;\n  for (column = 0; column < 3; column++) {\n    tested.putDiscInColumn(column); // R\n    tested.putDiscInColumn(column); // G\n  }\n  assertThat(tested.getWinner(), isEmptyString());\n  tested.putDiscInColumn(column); // R\n  assertThat(tested.getWinner(), is(\"R\"));\n}\n```", "```java\n  if (winner.isEmpty()) { \n    String horizontal = Stream\n                         .of(board[row])\n                         .reduce(String::concat).get();\n    if (winPattern.matcher(horizontal).matches())\n      winner = colour; \n  }\n```", "```java\n@Test\npublic void when4Diagonal1DiscsAreConnectedThenThatPlayerWins() {\n  int[] gameplay = new int[] {1, 2, 2, 3, 4, 3, 3, 4, 4, 5, 4};\n  for (int column : gameplay) {\n    tested.putDiscInColumn(column);\n  }\n  assertThat(tested.getWinner(), is(\"R\"));\n}\n\n@Test\npublic void when4Diagonal2DiscsAreConnectedThenThatPlayerWins() { \n  int[] gameplay = new int[] {3, 4, 2, 3, 2, 2, 1, 1, 1, 1};\n  for (int column : gameplay) {\n    tested.putDiscInColumn(column);\n  }\n  assertThat(tested.getWinner(), is(\"G\"));\n}\n```", "```java\n    if (winner.isEmpty()) { \n      int startOffset = Math.min(column, row); \n      int myColumn = column - startOffset, \n        myRow = row - startOffset; \n      StringJoiner stringJoiner = new StringJoiner(\"\"); \n      do { \n        stringJoiner .add(board[myRow++][myColumn++]); \n      } while (myColumn < COLUMNS && myRow < ROWS); \n      if (winPattern .matcher(stringJoiner.toString()).matches()) \n        winner = currentPlayer; \n    } \n\n    if (winner.isEmpty()) {\n      int startOffset = Math.min(column, ROWS - 1 - row);\n      int myColumn = column - startOffset,\n        myRow = row + startOffset;\n      StringJoiner stringJoiner = new StringJoiner(\"\");\n      do {\n        stringJoiner.add(board[myRow--][myColumn++]);\n      } while (myColumn < COLUMNS && myRow >= 0);\n      if (winPattern.matcher(stringJoiner.toString()).matches())\n        winner = currentPlayer; \n    } \n```"]