["```js\nThread::runAsync((data) -> {\n   for(d : data) { //do some computation }\n});\n```", "```js\n<script type=\"text/javascript\">\n    const worker = new Worker('worker.js');\n    console.log('this is on the main thread');\n</script>\n```", "```js\nlet num = 0;\nfor(let i = 0; i < 1000000; i++) {\n    num += i;\n}\n```", "```js\n<input id=\"in\" type=\"number\" />\n<script type=\"text/javascript\">\ndocument.querySelector(\"#in\").addEventListener('change', (ev) => {\n    const worker = new Worker('worker.js', {name : \n     ev.target.value});\n});\n</script>\n```", "```js\nlet numForPrimes = parseInt(self.name);\nconst primes = [];\nconsole.log('we are looking for the prime factorization of: ', numForPrimes);\nwhile( numForPrimes % 2 === 0 ) {\n    primes.push(2);\n    numForPrimes /= 2;\n}\nfor(let i = 3; i <= Math.sqrt(numForPrimes); i+=2) {\n    while( numForPrimes % i === 0 ) {\n        primes.push(i);\n        numForPrimes /= i;\n    }\n}\nif( numForPrimes > 2 ) {\n    primes.push(numForPrimes);\n}\nconsole.log('prime factorization is: ', primes.join(\" \"));\nself.close();\n```", "```js\nconst dedicated_worker = new Worker('worker.js', {name : 'heavy lifter'});\ndocument.querySelector(\"#in\").addEventListener('change', (ev) => {\n    dedicated_worker.postMessage(parseInt(ev.target.value));\n});\n```", "```js\nfunction calculatePrimes(val) {\n    let numForPrimes = val;\n    const primes = [];\n    while( numForPrimes % 2 === 0 ) {\n        primes.push(2);\n        numForPrimes /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(numForPrimes); i+=2) {\n        while( numForPrimes % i === 0 ) {\n            primes.push(i);\n            numForPrimes /= i;\n        }\n    }\n    if( numForPrimes > 2 ) {\n        primes.push(numForPrimes);\n    }\n    return primes;\n}\nself.onmessage = function(ev) {\n    console.log('our primes are: ', calculatePrimes(ev.data).join(' '));\n}\n```", "```js\n<p>The primes for the number is: <span id=\"answer\"></span></p>\n<script type=\"text/javascript\">\n    const answer = document.querySelector('#answer');\n    // previous code here\n</script>\n```", "```js\ndedicated_worker.onmessage = function(ev) {\n    answer.innerText = ev.data;\n}\n```", "```js\nself.onmessage = function(ev) {\n    postMessage(calculatePrimes(ev.data).join(' '));\n}\n```", "```js\nconst workers = [];\nfor(let i = 0; i < 5; i++) {\n    const worker = new Worker('test.js', {name : `worker${i}`});\n    workers.push(worker);\n}\ndocument.querySelector(\"#in\").addEventListener('change', (ev) => {\n    for(let i = 0; i < workers.length; i++) {\n        workers[i].postMessage(ev.target.value);\n    }\n});\n```", "```js\nconst channel = new BroadcastChannel('workers');\ndocument.querySelector(\"#in\").addEventListener('change', (ev) => {\n    channel.postMessage(ev.target.value);\n});\n```", "```js\nconst channel = new BroadcastChannel('workers');\nchannel.onmessage = function(ev) {\n    console.log(ev.data, 'was received by', name);\n}\n```", "```js\nfor(let i = 0; i < 4; i++) {\n    const worker = new Worker('worker.js', \n        {name : `worker ${i % 2 === 0 ? 'even' : 'odd'}`}\n    );\n}\n```", "```js\ndocument.querySelector(\"#in\").addEventListener('change', (ev) => {\n    const value = parseInt(ev.target.value);\n    if( value % 2 === 0 ) {\n        even_channel.postMessage(value);\n    } else {\n        odd_channel.postMessage(value);\n    }\n});\n```", "```js\nconst even_channel = new BroadcastChannel('even');\nconst odd_channel = new BroadcastChannel('odd');\nconst global = new BroadcastChannel('global');\n```", "```js\n<button id=\"quit\">Stop Workers</button>\n<script type=\"text/javascript\">\ndocument.querySelector('#quit').addEventListener('click', (ev) => {\n     global.postMessage('quit');\n});\n</script>\n```", "```js\nconst mainChannelName = name.includes(\"odd\") ? \"odd\" : \"even\";\nconst mainChannel = new BroadcastChannel(mainChannelName);\n```", "```js\nmainChannel.onmessage = function(ev) {\n    if( typeof ev.data === 'number' )\n        this.postMessage(calculatePrimes(ev.data));\n}\n```", "```js\nconst globalChannel = new BroadcastChannel('global');\nglobalChannel.onmessage = function(ev) {\n    if( ev.data === 'quit' ) {\n        close();\n    }\n}\n```", "```js\neven_channel.onmessage = function(ev) {\n    if( typeof ev.data === 'object' ) {\n        answer.innerText = ev.data.join(' ');\n    }\n}\nodd_channel.onmessage= function(ev) {\n    if( typeof ev.data === 'object' ) {\n        answer.innerText = ev.data.join(' ');\n    }\n}\n```", "```js\nconst dataToSend = new Array(100000);\nconst baseObj = {prop1 : 1, prop2 : 'one'};\nfor(let i = 0; i < dataToSend.length; i++) {\n    dataToSend[i] = Object.assign({}, baseObj);\n    dataToSend[i].prop1 = i;\n    dataToSend[i].prop2 = `Data for ${i}`;\n}\nconsole.log('send at', Date.now());\npostMessage(dataToSend);\n```", "```js\nconst largeWorker = new Worker('largeObject.js');\nlargeWorker.onmessage = function(ev) {\n    console.log('the time is', Date.now());\n    const obj = ev.data;\n}\n```", "```js\nconst viewOfData = new Int32Array(1000000);\nfor(let i = 1; i <= viewOfData.length; i++) {\n    viewOfData[i-1] = i;\n}\n```", "```js\npostMessage(viewOfData, [viewOfData.buffer]);\n```", "```js\nconst obj = ev.data;\nconsole.log('data length', obj.byteLength);\n```", "```js\nif( typeof ev.data === 'number' ) {\n    const result = calculatePrimes(ev.data);\n    const send = new Int32Array(result);\n    this.postMessage(result, [result.buffer]);\n}\n```", "```js\nif( typeof ev.data === 'object' ) {\n    const data = new Int32Array(ev.data);\n    answer.innerText = data.join(' ');                  \n}\n```", "```js\nconst add = function(a, b) {\n    return a + b;\n}\nconst mult = function(a, b) {\n    return a * b;\n}\nconst divide = function(a, b) {\n    return a / b;\n}\nconst remainder = function(a, b) {\n    return a % b;\n}\n```", "```js\nconst shared = new SharedWorker('shared.js');\nshared.port.onmessage = function(ev) {\n    console.log('message', ev);\n}\n```", "```js\nconst shared = new SharedWorker('shared.js');\nshared.port.start();\nfor(let i = 0; i < 4; i++) {\n    const worker = new Worker('worker.js', \n        {name : `worker ${i % 2 === 0 ? 'even' : 'odd'}`}\n    );\n    worker.postMessage(shared.port, [shared.port]);\n}\n```", "```js\nconst shared = new SharedWorker('shared.js');\nshared.port.start();\nconst worker = new Worker('worker.js');\ndocument.querySelector(\"#in\").addEventListener('change', (ev) => {\n    const value = parseInt(ev.target.value);\n    worker.postMessage(value);\n});\ndocument.querySelector('#quit').addEventListener('click', (ev) => {\n    worker.postMesasge('quit');\n});\n```", "```js\nlet sharedPort = null;\nonmessage = function(ev) {\n    const data = ev.data;\n    if( typeof data === 'string' ) {\n        return close();\n    }\n    if( typeof data === 'number' ) {\n        const result = calculatePrimes(data);\n        const send = new Int32Array(result);\n        return postMessage(send, [send.buffer]);\n    }\n    // handle the port\n    sharedPort = data;\n}\n```", "```js\nsharedPort.onmessage = function(ev) {\n    console.log('data', ev.data);\n}\n```", "```js\nonconnect = function(e) {\n    let port = e.ports[0];\n    console.log('port', port);\n    port.onmessage = function(e) {\n        port.postMessage('you sent data');\n    }\n    port.postMessage('you connected');\n}\n```", "```js\nports.push(port);\n```", "```js\n<input id=\"in1\" type=\"number\" />\n<input id=\"in2\" type=\"number\" />\n<button id=\"add\">Add</button>\n<button id=\"subtract\">Subtract</button>\n<button id=\"multiply\">Multiply</button>\n<button id=\"divide\">Divide</button>\n```", "```js\nif( typeof data === 'string' ) {\n    if( data === 'quit' ) {\n        close();\n    } else {\n        sharedPort.postMessage(data);\n    }\n}\n```", "```js\nport.onmessage = function(e) {\n    const _d = e.data.split(' ');\n    const in1 = parseInt(_d[1]);\n    const in2 = parseInt(_d[2]);\n    switch(_d[0]) {\n        case 'add': {\n            port.postMessage(add(in1, in2));\n            break;\n        }\n        // other operations removed since they are the same thing\n    }\n}\n```", "```js\nlet sharedPort = null;\nlet buf = null;\nonmessage = function(ev) {\n    const data = ev.data;\n    if( typeof data === 'number' ) {\n        Atomics.add(buf, 0, 1);\n    } else {\n        buf = new Int32Array(ev.data);\n    }\n}\n```", "```js\n// HTML\n<button id=\"increment\">Increment</button>\n<p id=\"num\"></p>\n\n// JavaScript\ndocument.querySelector('#increment').addEventListener('click', () => {\n    worker.postMessage(1);\n});\n```", "```js\nsetInterval(() => {\n    document.querySelector('#num').innerText = shared;\n}, 100);\n```", "```js\nlet shared = new SharedArrayBuffer(4);\nconst worker = new Worker('worker_to_shared.js');\nworker.postMessage(shared);\nshared = new Int32Array(shared);\n```", "```js\n{\n    customerId : \"<guid>\",\n    buy : 1000000,\n    sell : 1000000\n}\n```", "```js\n<body>\n    <template id=\"row\">\n        <tr>\n            <td class=\"name\"></td>\n            <td class=\"zip\"></td>\n            <td class=\"phone\"></td>\n            <td class=\"email\"></td>\n            <td class=\"buy\"></td>\n            <td class=\"sell\"></td>\n        </tr>\n    </template>\n   <table id=\"buysellorders\">\n   <thead>\n       <tr>\n           <th>Customer Name</th>\n           <th>Zipcode</th>\n           <th>Phone Number</th>\n           <th>Email</th>\n           <th>Buy Order Amount</th>\n           <th>Sell Order Amount</th>\n       </tr>\n   </thead>\n   <tbody>\n   </tbody>\n   </table>\n</body>\n```", "```js\nconst tableBody = document.querySelector('#buysellorders > tbody');\nconst rowTemplate = document.querySelector('#row');\nconst worker = new SharedWorker('<fill in>', {name : 'cache'});\n```", "```js\nonconnect = function(e) {\n    let port = e.ports[0];\n    port.onmessage = function(e) {\n        // do something\n    }\n}\n```", "```js\nconst worker = new SharedWorker('cache_shared.js', 'cache');\n```", "```js\nlet cache = [{\"id\":1,\"full_name\":\"Binky Bibey\",\"email\":\"bbibey0@furl.net\",\"phone\":\"370-576-9587\",\"zipcode\":\"640069\"}, //rest of the data];\n\n// SharedWorker.js\nimportScripts('./mock_customer_data.js');\n```", "```js\nconst handleReq = function(arr) {\n    const res = new Array(arr.length)\n    for(let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n        for(let j = 0; j < cache.length; j++) {\n            if( num === cache[j].id ) {\n                res[i] = cache[j];\n               break;\n            }\n        }\n    }\n    return res;\n}\nonconnect = function(e) {\n    let port = e.ports[0];\n    port.onmessage = function(e) {\n        const request = e.data;\n        if( Array.isArray(request) ) {\n            const response = handleReq(request);\n            port.postMessage(response);\n        }\n    }\n}\n```", "```js\n// developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\n// Global_Objects/Math/random\n\nconst getRandomIntInclusive = function(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nconst simulateRequest = function() {\n    const MAX_BUY_SELL = 1000000;\n    const MIN_BUY_SELL = -1000000;\n    const ids = [];\n    const createdIds = [];\n    for(let i = 0; i < 100; i++) {\n        const id = getRandomIntInclusive(1, 1000);\n        if(!createdIds.includes(id)) {\n            const obj = {\n                id,\n                buy : getRandomIntInclusive(MIN_BUY_SELL,  \n                 MAX_BUY_SELL),\n                sell : getRandomIntInclusive(MIN_BUY_SELL, \n                 MAX_BUY_SELL)\n            };\n            ids.push(obj);\n        }\n    }\n    return ids;\n}\n```", "```js\nrequestButton.addEventListener('click', (ev) => {\n    const res = simulateRequest();\n    worker.port.postMessage(res);\n});\n```", "```js\n// HTML file\nconst requestMap = new Map();\nlet reqCounter = 0;\nrequestButton.addEventListener('click', (ev) => {\n    const res = simulateRequest();\n    const reqId = reqCounter;\n    reqCounter += 1;\n    worker.port.postMessage({\n        id : reqId,\n        data : res\n    });\n});\n\n// Shared worker\nport.onmessage = function(e) {\n    const request = e.data;\n    if( request.id &&\n        Array.isArray(request.data) ) {\n        const response = handleReq(request.data);\n        port.postMessage({\n            id : request.id,\n            data : response\n        });\n    }\n}\n```", "```js\nrequestButton.addEventListener('click', (ev) => {\n    const res = simulateRequest();\n    const reqId = reqCounter;\n    reqCounter += 1;\n    requestMap.set(reqId, res);\n    const attribute = [];\n    for(let i = 0; i < res.length; i++) {\n        attribute.push(res[i].id);\n    }\n    worker.port.postMessage({\n        id : reqId,\n        data : attribute\n    });\n});\n```", "```js\nworker.port.onmessage = function(ev) {\n    console.log('data', ev.data);\n}\n```", "```js\nworker.port.onmessage = function(ev) {\n    const data = ev.data;\n    const baseData = requestMap.get(data.id);\n    requestMap.delete(data.id);\n    const attribution = data.data;\n    tableBody.innerHTML = '';\n    for(let i = 0; i < baseData.length; i++) {\n        const _d = baseData[i];\n        for(let j = 0; j < attribution.length; j++) {\n            if( _d.id === attribution[j].id ) {\n                const final = {..._d, ...attribution[j]};\n                const newRow = rowTemplate.content.cloneNode(true);\n                newRow.querySelector('.name').innerText =  \n                 final.full_name;\n                newRow.querySelector('.zip').innerText = \n                 final.zipcode;\n                newRow.querySelector('.phone').innerText = \n                 final.phone;\n                newRow.querySelector('.email').innerText = \n                 final.email;\n                newRow.querySelector('.buy').innerText = \n                 final.buy;\n                newRow.querySelector('.sell').innerText = \n                 final.sell;\n                tableBody.appendChild(newRow);\n            }\n        }\n    }\n}\n```"]