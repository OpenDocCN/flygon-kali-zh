["```java\n// snippet 1\nreturn 23;\n```", "```java\n// snippet 2 - 'cars' is an array \nint thirdCar = cars[3];\n```", "```java\n// snippet 3 - 'cars' is a 'java.util.Queue'\nCar car = cars.peek();\n```", "```java\n// snippet 1 - 'a' is an array\nfor (int i = 0; i < a.length; i++) {\n\u00a0\u00a0\u00a0\u00a0System.out.println(a[i]);\n}\n```", "```java\n// snippet 1 - 'a' is an array\nfor (int i = 0; i < a.length; i++) {\n\u00a0\u00a0\u00a0\u00a0System.out.println(\"Current element:\");\n\u00a0\u00a0\u00a0\u00a0System.out.println(a[i]);\n\u00a0\u00a0\u00a0\u00a0System.out.println(\"Current element + 1:\");\n\u00a0\u00a0\u00a0\u00a0System.out.println(a[i] + 1);\n}\n```", "```java\nsearch 17 in {1, 4, 5, 7, 10, 16, 17, 18, 20, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a023, 24, 25, 26, 30, 31, 33}\n\u00a0\u00a0\u00a0\u00a0compare 17 to 18 -> 17 < 18\n\u00a0\u00a0\u00a0\u00a0search 17 in {1, 4, 5, 7, 10, 16, 17, 18}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compare 17 to 7 -> 17 > 7\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0search 17 in {7, 10, 16, 17}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compare 17 to 16 -> 17 > 16\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0search 17 in {16, 17}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compare 17 to 17\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n```", "```java\nint fibonacci(int k) {\n\u00a0\u00a0\u00a0\u00a0if (k <= 1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return k;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return fibonacci(k - 2) + fibonacci(k - 1);\n}\n```", "```java\nvoid printInOrder(Node node) {\n\u00a0\u00a0\u00a0\u00a0if (node != null) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 printInOrder(node.left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.print(\" \" + node.element);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 printInOrder(node.right);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```java\nvoid printFibonacci(int k) {\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < k; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(i + \": \" + fibonacci(i));\n\u00a0\u00a0\u00a0\u00a0}\n}\nint fibonacci(int k) {\n\u00a0\u00a0\u00a0\u00a0if (k <= 1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return k;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return fibonacci(k - 2) + fibonacci(k - 1);\n}\n```", "```java\nvoid printFibonacci(int k) {\n\u00a0\u00a0\u00a0\u00a0int[] cache = new int[k];\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < k; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(i + \": \" + fibonacci(i, cache));\n\u00a0\u00a0\u00a0\u00a0}\n}\nint fibonacci(int k, int[] cache) {\n\u00a0\u00a0\u00a0\u00a0if (k <= 1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return k;\n\u00a0\u00a0\u00a0\u00a0} else if (cache[k] > 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return cache[k];\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0cache[k] = fibonacci(k - 2, cache) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ fibonacci(k - 1, cache);\n\u00a0\u00a0\u00a0\u00a0return cache[k];\n}\n```", "```java\nCalling fibonacci(0):\nResult of fibonacci(0) is 0\nCalling fibonacci(1):\nResult of fibonacci(1) is 1\nCalling fibonacci(2):\n fibonacci(0)\n fibonacci(1)\n fibonacci(2) is computed and cached at cache[2]\nResult of fibonacci(2) is 1\nCalling fibonacci(3):\n fibonacci(1)\n fibonacci(2) is fetched from cache[2] as: 1\n fibonacci(3) is computed and cached at cache[3]\nResult of fibonacci(3) is 2\nCalling fibonacci(4):\n fibonacci(2) is fetched from cache[2] as: 1\n fibonacci(3) is fetched from cache[3] as: 2\n fibonacci(4) is computed and cached at cache[4]\nResult of fibonacci(4) is 3\nCalling fibonacci(5):\n fibonacci(3) is fetched from cache[3] as: 2\n fibonacci(4) is fetched from cache[4] as: 3\n fibonacci(5) is computed and cached at cache[5]\nResult of fibonacci(5) is 5\nCalling fibonacci(6):\n fibonacci(4) is fetched from cache[4] as: 3\n fibonacci(5) is fetched from cache[5] as: 5\n fibonacci(6) is computed and cached at cache[6]\nResult of fibonacci(6) is 8\n```", "```java\nfor (int i = 0; i < a.length; i++) {\n\u00a0\u00a0\u00a0\u00a0for (int j = 0; j < a.length; j++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int q = 0; q < 1_000_000; q++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(a[i] + a[j]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```java\nfor (int i = 0; i < a.length; i++) {\n\u00a0\u00a0\u00a0\u00a0for (int j = 0; j < a.length; j++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// O(1)\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```java\nfor (int i = 0; i < a.length / 2; i++) {\n\u00a0\u00a0\u00a0\u00a0System.out.println(a[i]);\n}\n```", "```java\nfor (int i = 0; i < a.length; i++) {\n\u00a0\u00a0\u00a0\u00a0for (int j = a.length; j > 0; j /= 2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(a[i] + \", \" + j);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```java\nString[] sortArrayOfString(String[] a) {\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < a.length; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// sort each string via O(n log n) algorithm\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// sort the array itself via O(n log n) algorithm\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n\u00a0\u00a0\u00a0\u00a0return a;\n}\n```", "```java\nlong factorial(int num) {\n\u00a0\u00a0\u00a0\u00a0if (num >= 1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return num * factorial(num - 1);\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```java\nint div(int x, int y) {\n\u00a0\u00a0\u00a0\u00a0int count = 0;\n\u00a0\u00a0\u00a0\u00a0int sum = y;\n\u00a0\u00a0\u00a0\u00a0while (sum <= x) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sum += y;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 count++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return count;\n}\n```", "```java\nint sqrt(int n) {\n\u00a0\u00a0\u00a0\u00a0for (int guess = 1; guess * guess <= n; guess++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (guess * guess == n) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return guess;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return -1;\n}\n```", "```java\nint sumDigits(int n) {\n\u00a0\u00a0\u00a0\u00a0int result = 0;\n\u00a0\u00a0\u00a0\u00a0while (n > 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result += n % 10;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n /= 10;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return result;\n}\n```", "```java\nboolean matching(int[] x, int[] y) {\n\u00a0\u00a0\u00a0\u00a0mergesort(y);\n\u00a0\u00a0\u00a0\u00a0for (int i : x) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (binarySearch(y, i) >= 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return false;\n}\n```"]