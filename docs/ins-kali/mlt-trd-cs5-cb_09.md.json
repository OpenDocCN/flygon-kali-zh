["```cs\n    using System;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    ```", "```cs\n    const int BUFFER_SIZE = 4096;\n\n    async static Task ProcessAsynchronousIO()\n    {\n      using (var stream = new FileStream(\"test1.txt\", FileMode.Create, FileAccess.ReadWrite, FileShare.None, BUFFER_SIZE))\n      {\n        Console.WriteLine(\"1\\. Uses I/O Threads: {0}\", stream.IsAsync);\n\n        byte[] buffer = Encoding.UTF8.GetBytes(CreateFileContent());\n        var writeTask = Task.Factory.FromAsync(stream.BeginWrite, stream.EndWrite, buffer, 0, buffer.Length, null);\n\n        await writeTask;\n      }\n\n      using (var stream = new FileStream(\"test2.txt\", FileMode.Create, FileAccess.ReadWrite,FileShare.None, BUFFER_SIZE, FileOptions.Asynchronous))\n      {\n        Console.WriteLine(\"2\\. Uses I/O Threads: {0}\", stream.IsAsync);\n\n        byte[] buffer = Encoding.UTF8.GetBytes(CreateFileContent());\n        var writeTask = Task.Factory.FromAsync(stream.BeginWrite, stream.EndWrite, buffer, 0, buffer.Length, null);\n\n        await writeTask;\n      }\n\n      using (var stream = File.Create(\"test3.txt\", BUFFER_SIZE, FileOptions.Asynchronous))\n      using (var sw = new StreamWriter(stream))\n      {\n        Console.WriteLine(\"3\\. Uses I/O Threads: {0}\", stream.IsAsync);\n        await sw.WriteAsync(CreateFileContent());\n      }\n\n      using (var sw = new StreamWriter(\"test4.txt\", true))\n      {\n        Console.WriteLine(\"4\\. Uses I/O Threads: {0}\", ((FileStream)sw.BaseStream).IsAsync);\n        await sw.WriteAsync(CreateFileContent());\n      }\n\n      Console.WriteLine(\"Starting parsing files in parallel\");\n\n      Task<long>[] readTasks = new Task<long>[4];\n      for (int i = 0; i < 4; i++)\n      {\n        readTasks[i] = SumFileContent(string.Format(\"test{0}.txt\", i + 1));\n      }\n\n      long[] sums = await Task.WhenAll(readTasks);\n\n      Console.WriteLine(\"Sum in all files: {0}\", sums.Sum());\n\n      Console.WriteLine(\"Deleting files...\");\n\n      Task[] deleteTasks = new Task[4];\n      for (int i = 0; i < 4; i++)\n      {\n        string fileName = string.Format(\"test{0}.txt\", i + 1);\n        deleteTasks[i] = SimulateAsynchronousDelete(fileName);\n      }\n\n      await Task.WhenAll(deleteTasks);\n\n      Console.WriteLine(\"Deleting complete.\");\n    }\n\n    static string CreateFileContent()\n    {\n      var sb = new StringBuilder();\n      for (int i = 0; i < 100000; i++)\n      {\n        sb.AppendFormat(\"{0}\", new Random(i).Next(0, 99999));\n        sb.AppendLine();\n      }\n      return sb.ToString();\n    }\n\n    async static Task<long> SumFileContent(string fileName)\n    {\n      using (var stream = new FileStream(fileName, FileMode.Open, FileAccess.Read,FileShare.None, BUFFER_SIZE, FileOptions.Asynchronous))\n      using (var sr = new StreamReader(stream))\n      {\n        long sum = 0;\n        while (sr.Peek() > -1)\n        {\n          string line = await sr.ReadLineAsync();\n          sum += long.Parse(line);\n        }\n\n        return sum;\n      }\n    }\n\n    static Task SimulateAsynchronousDelete(string fileName)\n    {\n      return Task.Run(() => File.Delete(fileName));\n    }\n    ```", "```cs\n    var t = ProcessAsynchronousIO();\n    t.GetAwaiter().GetResult();\n    ```", "```cs\n    using System;\n    using System.IO;\n    using System.Net;\n    using System.Net.Http;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static async Task GetResponseAsync(string url)\n    {\n      using (var client = new HttpClient())\n      {\n        HttpResponseMessage responseMessage = await client.GetAsync(url);\n        string responseHeaders = responseMessage.Headers.ToString();\n        string response = await responseMessage.Content.ReadAsStringAsync();\n\n        Console.WriteLine(\"Response headers:\");\n        Console.WriteLine(responseHeaders);\n        Console.WriteLine(\"Response body:\");\n        Console.WriteLine(response);\n      }\n    }\n\n    class AsyncHttpServer\n    {\n      readonly HttpListener _listener;\n      const string RESPONSE_TEMPLATE = \"<html><head><title>Test</title></head><body><h2>Test page</h2><h4>Today is: {0}</h4></body></html>\";\n\n      public AsyncHttpServer(int portNumber)\n      {\n        _listener = new HttpListener();\n        _listener.Prefixes.Add(string.Format(\"http://+:{0}/\", portNumber));\n      }\n\n      public async Task Start()\n      {\n        _listener.Start();\n\n        while (true)\n        {\n          var ctx = await _listener.GetContextAsync();\n          Console.WriteLine(\"Client connected...\");\n          string response = string.Format(RESPONSE_TEMPLATE, DateTime.Now);\n\n          using (var sw = new StreamWriter(ctx.Response.OutputStream))\n          {\n            await sw.WriteAsync(response);\n            await sw.FlushAsync();\n          }\n        }\n      }\n\n      public async Task Stop()\n      {\n        _listener.Abort();\n      }\n    }\n    ```", "```cs\n    var server = new AsyncHttpServer(portNumber: 1234);\n    var t = Task.Run(() => server.Start());\n    Console.WriteLine(\"Listening on port 1234\\. Open http://localhost:1234 in your browser.\");\n    Console.WriteLine(\"Trying to connect:\");\n    Console.WriteLine();\n\n    GetResponseAsync(\"http://localhost:1234\").GetAwaiter().GetResult();\n\n    Console.WriteLine();\n    Console.WriteLine(\"Press Enter to stop the server.\");\n    Console.ReadLine();\n\n    server.Stop().GetAwaiter().GetResult();\n    ```", "```cs\n    using System;\n    using System.Data;\n    using System.Data.SqlClient;\n    using System.IO;\n    using System.Reflection;\n    using System.Threading.Tasks;\n    ```", "```cs\n    async static Task ProcessAsynchronousIO(string dbName)\n    {\n      try\n      {\n        const string connectionString = @\"Data Source=(LocalDB)\\v11.0;Initial Catalog=master;Integrated Security=True\";\n        string outputFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n        string dbFileName = Path.Combine(outputFolder, string.Format(@\".\\{0}.mdf\", dbName));\n        string dbLogFileName = Path.Combine(outputFolder, string.Format(@\".\\{0}_log.ldf\", dbName));\n        string dbConnectionString = string.Format(@\"Data Source=(LocalDB)\\v11.0;AttachDBFileName={1};Initial Catalog={0};Integrated Security=True;\", dbName, dbFileName);\n\n        using (var connection = new SqlConnection(connectionString))\n        {\n          await connection.OpenAsync();\n\n          if (File.Exists(dbFileName))\n          {\n            Console.WriteLine(\"Detaching the database...\");\n\n            var detachCommand = new SqlCommand(\"sp_detach_db\", connection);\n            detachCommand.CommandType = CommandType.StoredProcedure;\n            detachCommand.Parameters.AddWithValue(\"@dbname\", dbName);\n\n            await detachCommand.ExecuteNonQueryAsync();\n\n            Console.WriteLine(\"The database was detached successfully.\");\n            Console.WriteLine(\"Deleting the database...\");\n\n            if(File.Exists(dbLogFileName)) File.Delete(dbLogFileName);\n            File.Delete(dbFileName);\n\n            Console.WriteLine(\"The database was deleted successfully.\");\n          }\n\n          Console.WriteLine(\"Creating the database...\");\n          string createCommand = String.Format(\"CREATE DATABASE {0} ON (NAME = N'{0}', FILENAME = '{1}')\", dbName, dbFileName);\n          var cmd = new SqlCommand(createCommand, connection);\n\n          await cmd.ExecuteNonQueryAsync();\n          Console.WriteLine(\"The database was created successfully\");\n        }\n\n        using (var connection = new SqlConnection(dbConnectionString))\n        {\n          await connection.OpenAsync();\n\n          var cmd = new SqlCommand(\"SELECT newid()\", connection);\n          var result = await cmd.ExecuteScalarAsync();\n\n          Console.WriteLine(\"New GUID from DataBase: {0}\", result);\n\n          cmd = new SqlCommand(@\"CREATE TABLE [dbo].[CustomTable]( [ID] [int] IDENTITY(1,1) NOT NULL, [Name] [nvarchar](50) NOT NULL,CONSTRAINT [PK_ID] PRIMARY KEY CLUSTERED ([ID] ASC) ON [PRIMARY]) ON [PRIMARY]\", connection);\n          await cmd.ExecuteNonQueryAsync();\n\n          Console.WriteLine(\"Table was created successfully.\");\n\n          cmd = new SqlCommand(@\"INSERT INTO [dbo].[CustomTable] (Name) VALUES ('John');\n          INSERT INTO [dbo].[CustomTable] (Name) VALUES ('Peter');\n          INSERT INTO [dbo].[CustomTable] (Name) VALUES ('James');\n          INSERT INTO [dbo].[CustomTable] (Name) VALUES ('Eugene');\", connection);\n          await cmd.ExecuteNonQueryAsync();\n\n          Console.WriteLine(\"Inserted data successfully\t\");\n          Console.WriteLine(\"Reading data from table...\");\n\n          cmd = new SqlCommand(@\"SELECT * FROM [dbo].[CustomTable]\", connection);\n          using (SqlDataReader reader = await cmd.ExecuteReaderAsync())\n          {\n            while (await reader.ReadAsync())\n            {\n              var id = reader.GetFieldValue<int>(0);\n              var name = reader.GetFieldValue<string>(1);\n\n              Console.WriteLine(\"Table row: Id {0}, Name {1}\", id, name);\n            }\n          }\n        }\n      }\n      catch(Exception ex)\n      {\n        Console.WriteLine(\"Error: {0}\", ex.Message);\n      }\n    }\n    ```", "```cs\n    const string dataBaseName = \"CustomDatabase\";\n    var t = ProcessAsynchronousIO(dataBaseName);\n    t.GetAwaiter().GetResult();\n    Console.WriteLine(\"Press Enter to exit\");\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.ServiceModel;\n    using System.ServiceModel.Description;\n    using System.Threading.Tasks;\n    ```", "```cs\n    const string SERVICE_URL = \"http://localhost:1234/HelloWorld\";\n\n    static async Task RunServiceClient()\n    {\n      var endpoint = new EndpointAddress(SERVICE_URL);\n      var channel = ChannelFactory<IHelloWorldServiceClient>.CreateChannel(new BasicHttpBinding(), endpoint);\n\n      var greeting = await channel.GreetAsync(\"Eugene\");\n      Console.WriteLine(greeting);\n    }\n\n      [ServiceContract(Namespace = \"Packt\", Name = \"HelloWorldServiceContract\")]\n    public interface IHelloWorldService\n    {\n      [OperationContract]\n      string Greet(string name);\n    }\n\n    [ServiceContract(Namespace = \"Packt\", Name = \"HelloWorldServiceContract\")]\n    public interface IHelloWorldServiceClient\n    {\n      [OperationContract]string Greet(string name);\n\n      [OperationContract]Task<string> GreetAsync(string name);\n    }\n\n    public class HelloWorldService : IHelloWorldService\n    {\n      public string Greet(string name)\n      {\n        return string.Format(\"Greetings, {0}!\", name);\n      }\n    }\n    ```", "```cs\n    ServiceHost host = null;\n\n    try\n    {\n      host = new ServiceHost(typeof (HelloWorldService), new Uri(SERVICE_URL));\n      var metadata = host.Description.Behaviors.Find<ServiceMetadataBehavior>();\n      if (null == metadata)\n      {\n        metadata = new ServiceMetadataBehavior();\n      }\n\n      metadata.HttpGetEnabled = true;\n      metadata.MetadataExporter.PolicyVersion = PolicyVersion.Policy15;\n      host.Description.Behaviors.Add(metadata);\n\n      host.AddServiceEndpoint(ServiceMetadataBehavior.MexContractName, MetadataExchangeBindings.CreateMexHttpBinding(),\"mex\");\n      var endpoint = host.AddServiceEndpoint(typeof (IHelloWorldService), new BasicHttpBinding(), SERVICE_URL);\n\n      host.Faulted += (sender, e) => Console.WriteLine(\"Error!\");\n\n      host.Open();\n\n      Console.WriteLine(\"Greeting service is running and listening on:\");\n      Console.WriteLine(\"{0} ({1})\", endpoint.Address, endpoint.Binding.Name);\n\n      var client = RunServiceClient();\n      client.GetAwaiter().GetResult();\n\n      Console.WriteLine(\"Press Enter to exit\");\n      Console.ReadLine();\n    }\n    catch (Exception ex)\n    {\n      Console.WriteLine(\"Error in catch block: {0}\", ex);\n    }\n    finally\n    {\n      if (null != host)\n      {\n        if (host.State == CommunicationState.Faulted)\n        {\n          host.Abort();\n        }\n        else\n        {\n          host.Close();\n        }\n      }\n    }\n    ```"]