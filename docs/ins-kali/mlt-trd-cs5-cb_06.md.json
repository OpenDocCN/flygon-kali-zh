["```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    ```", "```cs\n    const string Item = \"Dictionary item\";\n    public static string CurrentItem;\n    ```", "```cs\n    var concurrentDictionary = new ConcurrentDictionary<int, string>();\n    var dictionary = new Dictionary<int, string>();\n\n    var sw = new Stopwatch();\n\n    sw.Start();\n    for (int i = 0; i < 1000000; i++)\n    {\n      lock (dictionary)\n      {\n        dictionary[i] = Item;\n      }\n    }\n    sw.Stop();\n    Console.WriteLine(\"Writing to dictionary with a lock: {0}\", sw.Elapsed);\n\n    sw.Restart();\n    for (int i = 0; i < 1000000; i++)\n    {\n      concurrentDictionary[i] = Item;\n    }\n    sw.Stop();\n    Console.WriteLine(\"Writing to a concurrent dictionary: {0}\", sw.Elapsed);\n\n    sw.Restart();\n    for (int i = 0; i < 1000000; i++)\n    {\n      lock (dictionary)\n      {\n        CurrentItem = dictionary[i];\n      }\n    }\n    sw.Stop();\n    Console.WriteLine(\"Reading from dictionary with a lock: {0}\", sw.Elapsed);\n\n    sw.Restart();\n    for (int i = 0; i < 1000000; i++)\n    {\n      CurrentItem = concurrentDictionary[i];\n    }\n    sw.Stop();\n    Console.WriteLine(\"Reading from a concurrent dictionary: {0}\", sw.Elapsed);\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static async Task RunProgram()\n    {\n      var taskQueue = new ConcurrentQueue<CustomTask>();\n      var cts = new CancellationTokenSource();\n\n      var taskSource = Task.Run(() => TaskProducer(taskQueue));\n\n      Task[] processors = new Task[4];\n      for (int i = 1; i <= 4; i++)\n      {\n        string processorId = i.ToString();\n        processors[i-1] = Task.Run(\n        () => TaskProcessor(taskQueue, \"Processor \" + processorId, cts.Token));\n      }\n\n      await taskSource;\n      cts.CancelAfter(TimeSpan.FromSeconds(2));\n\n      await Task.WhenAll(processors);\n    }\n\n    static async Task TaskProducer(ConcurrentQueue<CustomTask> queue)\n    {\n      for (int i = 1; i <= 20; i++)\n      {\n        await Task.Delay(50);\n        var workItem = new CustomTask {Id = i};\n        queue.Enqueue(workItem);\n        Console.WriteLine(\"Task {0} has been posted\", workItem.Id);\n      }\n    }\n\n    static async Task TaskProcessor(ConcurrentQueue<CustomTask> queue, string name, CancellationToken token){\n      CustomTask workItem;\n      bool dequeueSuccesful = false;\n\n      await GetRandomDelay();\n      do\n      {\n        dequeueSuccesful = queue.TryDequeue(out workItem);\n        if (dequeueSuccesful)\n        {\n        Console.WriteLine(\"Task {0} has been processed by {1}\", workItem.Id, name);\n        }\n\n        await GetRandomDelay();\n      }\n      while (!token.IsCancellationRequested);\n    }\n\n    static Task GetRandomDelay()\n    {\n      int delay = new Random(DateTime.Now.Millisecond).Next(1, 500);\n      return Task.Delay(delay);\n    }\n\n    class CustomTask\n    {\n      public int Id { get; set; }\n    }\n    ```", "```cs\n    Task t = RunProgram();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static async Task RunProgram()\n    {\n      var taskStack = new ConcurrentStack<CustomTask>();\n      var cts = new CancellationTokenSource();\n\n      var taskSource = Task.Run(() => TaskProducer(taskStack));\n\n      Task[] processors = new Task[4];\n      for (int i = 1; i <= 4; i++)\n      {\n        string processorId = i.ToString();\n        processors[i - 1] = Task.Run(\n        () => TaskProcessor(taskStack, \"Processor \" + processorId, cts.Token));\n      }\n\n      await taskSource;\n      cts.CancelAfter(TimeSpan.FromSeconds(2));\n\n      await Task.WhenAll(processors);\n    }\n\n    static async Task TaskProducer(ConcurrentStack<CustomTask> stack)\n    {\n      for (int i = 1; i <= 20; i++)\n      {\n        await Task.Delay(50);\n        var workItem = new CustomTask { Id = i };\n        stack.Push(workItem);\n        Console.WriteLine(\"Task {0} has been posted\", workItem.Id);\n      }\n    }\n\n    static async Task TaskProcessor(\n      ConcurrentStack<CustomTask> stack, string name, CancellationToken token)\n    {\n      await GetRandomDelay();\n      do\n      {\n        CustomTask workItem;\n        bool popSuccesful = stack.TryPop(out workItem);\n        if (popSuccesful)\n        {\n        Console.WriteLine(\"Task {0} has been processed by {1}\", workItem.Id, name);\n        }\n\n        await GetRandomDelay();\n      }\n      while (!token.IsCancellationRequested);\n    }\n\n    static Task GetRandomDelay()\n    {\n      int delay = new Random(DateTime.Now.Millisecond).Next(1, 500);\n      return Task.Delay(delay);\n    }\n\n    class CustomTask\n    {\n      public int Id { get; set; }\n    }\n    ```", "```cs\n    Task t = RunProgram();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static Dictionary<string, string[]> _contentEmulation = new Dictionary<string, string[]>();\n\n    static async Task RunProgram()\n    {\n      var bag = new ConcurrentBag<CrawlingTask>();\n\n      string[] urls = new[] {\"http://microsoft.com/\", \"http://google.com/\", \"http://facebook.com/\", \"http://twitter.com/\"};\n\n      var crawlers = new Task[4];\n      for (int i = 1; i <= 4; i++)\n      {\n        string crawlerName = \"Crawler \" + i.ToString();\n        bag.Add(new CrawlingTask { UrlToCrawl = urls[i-1], ProducerName = \"root\"});\n        crawlers[i - 1] = Task.Run(() => Crawl(bag, crawlerName));\n      }\n\n      await Task.WhenAll(crawlers);\n    }\n\n    static async Task Crawl(ConcurrentBag<CrawlingTask> bag, string crawlerName)\n    {\n      CrawlingTask task;\n      while (bag.TryTake(out task))\n      {\n        IEnumerable<string> urls = await GetLinksFromContent(task);\n        if (urls != null)\n        {\n          foreach (var url in urls)\n          {\n            var t = new CrawlingTask\n            {\n              UrlToCrawl = url,\n              ProducerName = crawlerName\n            };\n\n          bag.Add(t);\n          }\n        }\n      Console.WriteLine(\"Indexing url {0} posted by {1} is completed by {2}!\",\n          task.UrlToCrawl, task.ProducerName, crawlerName);\n      }\n    }\n\n    static async Task<IEnumerable<string>> GetLinksFromContent(CrawlingTask task)\n    {\n      await GetRandomDelay();\n\n      if (_contentEmulation.ContainsKey(task.UrlToCrawl)) return _contentEmulation[task.UrlToCrawl];\n\n      return null;\n    }\n\n    static void CreateLinks()\n    {\n      _contentEmulation[\"http://microsoft.com/\"] = new [] { \"http://microsoft.com/a.html\", \"http://microsoft.com/b.html\" };\n      _contentEmulation[\"http://microsoft.com/a.html\"] = new[] { \"http://microsoft.com/c.html\", \"http://microsoft.com/d.html\" };\n      _contentEmulation[\"http://microsoft.com/b.html\"] = new[] { \"http://microsoft.com/e.html\" };\n\n      _contentEmulation[\"http://google.com/\"] = new[] { \"http://google.com/a.html\", \"http://google.com/b.html\" };\n      _contentEmulation[\"http://google.com/a.html\"] = new[] { \"http://google.com/c.html\", \"http://google.com/d.html\" };\n      _contentEmulation[\"http://google.com/b.html\"] = new[] { \"http://google.com/e.html\", \"http://google.com/f.html\" };\n      _contentEmulation[\"http://google.com/c.html\"] = new[] { \"http://google.com/h.html\", \"http://google.com/i.html\" };\n\n      _contentEmulation[\"http://facebook.com/\"] = new [] { \"http://facebook.com/a.html\", \"http://facebook.com/b.html\" };\n      _contentEmulation[\"http://facebook.com/a.html\"] = new[] { \"http://facebook.com/c.html\", \"http://facebook.com/d.html\" };\n      _contentEmulation[\"http://facebook.com/b.html\"] = new[] { \"http://facebook.com/e.html\" };\n\n      _contentEmulation[\"http://twitter.com/\"] = new[] { \"http://twitter.com/a.html\", \"http://twitter.com/b.html\" };\n      _contentEmulation[\"http://twitter.com/a.html\"] = new[] { \"http://twitter.com/c.html\", \"http://twitter.com/d.html\" };\n      _contentEmulation[\"http://twitter.com/b.html\"] = new[] { \"http://twitter.com/e.html\" };\n      _contentEmulation[\"http://twitter.com/c.html\"] = new[] { \"http://twitter.com/f.html\", \"http://twitter.com/g.html\" };\n      _contentEmulation[\"http://twitter.com/d.html\"] = new[] { \"http://twitter.com/h.html\" };\n      _contentEmulation[\"http://twitter.com/e.html\"] = new[] { \"http://twitter.com/i.html\" };\n    }\n\n    static Task GetRandomDelay()\n    {\n      int delay = new Random(DateTime.Now.Millisecond).Next(150, 200);\n      return Task.Delay(delay);\n    }\n\n    class CrawlingTask\n    {\n      public string UrlToCrawl { get; set; }\n\n      public string ProducerName { get; set; }\n    }\n    ```", "```cs\n    CreateLinks();\n    Task t = RunProgram();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static async Task RunProgram(IProducerConsumerCollection<CustomTask> collection = null)\n    {\n      var taskCollection = new BlockingCollection<CustomTask>();\n      if (null != collection)\n      taskCollection= new BlockingCollection<CustomTask>(collection);\n\n      var taskSource = Task.Run(() => TaskProducer(taskCollection));\n\n      Task[] processors = new Task[4];\n      for (int i = 1; i <= 4; i++)\n      {\n        string processorId = \"Processor \" + i;\n        processors[i - 1] = Task.Run(() => TaskProcessor(taskCollection, processorId));\n      }\n\n      await taskSource;\n\n      await Task.WhenAll(processors);\n    }\n\n    static async Task TaskProducer(BlockingCollection<CustomTask> collection)\n    {\n      for (int i = 1; i <= 20; i++)\n      {\n        await Task.Delay(20);\n        var workItem = new CustomTask { Id = i };\n        collection.Add(workItem);\n        Console.WriteLine(\"Task {0} have been posted\", workItem.Id);\n      }\n      collection.CompleteAdding();\n    }\n\n    static async Task TaskProcessor(BlockingCollection<CustomTask> collection, string name)\n    {\n      await GetRandomDelay();\n      foreach (CustomTask item in collection.GetConsumingEnumerable())\n      {\n        Console.WriteLine(\"Task {0} have been processed by {1}\", item.Id, name);\n        await GetRandomDelay();\n      }\n    }\n\n    static Task GetRandomDelay()\n    {\n      int delay = new Random(DateTime.Now.Millisecond).Next(1, 500);\n      return Task.Delay(delay);\n    }\n\n    class CustomTask\n    {\n      public int Id { get; set; }\n    }\n    ```", "```cs\n    Console.WriteLine(\"Using a Queue inside of BlockingCollection\");\n    Console.WriteLine();\n    Task t = RunProgram();\n    t.Wait();\n\n    Console.WriteLine();\n    Console.WriteLine(\"Using a Stack inside of BlockingCollection\");\n    Console.WriteLine();\n    t = RunProgram(new ConcurrentStack<CustomTask>());\n    t.Wait();\n    ```"]