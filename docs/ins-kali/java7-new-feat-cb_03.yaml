- en: Chapter 3. Obtaining File and Directory Information
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。获取文件和目录信息
- en: 'In this chapter, we will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Determining the file content type
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定文件内容类型
- en: Obtaining a single attribute at a time using the getAttribute method
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用getAttribute方法逐个获取单个属性
- en: Obtaining a map of file attributes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取文件属性的映射
- en: Getting file and directory information
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取文件和目录信息
- en: Determining operating system support for attribute views
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定操作系统对属性视图的支持
- en: Maintaining basic file attributes using the BasicFileAttributeView
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用BasicFileAttributeView维护基本文件属性
- en: Maintaining POSIX file attributes using the PosixFileAttributeView
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PosixFileAttributeView维护POSIX文件属性
- en: Maintaining FAT table attributes using the DosFileAttributeView
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DosFileAttributeView维护FAT表属性
- en: Maintaining file ownership attributes using the FileOwnerAttributeView
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FileOwnerAttributeView维护文件所有权属性
- en: Maintaining a file's ACL using the AclFileAttributeView
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AclFileAttributeView维护文件的ACL
- en: Maintaining user-defined file attributes using the UserDefinedFileAttributeView
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用UserDefinedFileAttributeView维护用户定义的文件属性
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Many applications need access to file and directory information. This information
    includes such attributes as whether the file can be executed or not, the size
    of the file, the owner of the file, and even its content type. In this chapter,
    we examine the various techniques available for obtaining information regarding
    a file or directory. We have organized the recipes according to the type of access
    desired.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序需要访问文件和目录信息。这些信息包括文件是否可以执行，文件的大小，文件的所有者，甚至其内容类型等属性。在本章中，我们将研究获取有关文件或目录信息的各种技术。我们根据所需的访问类型组织了配方。
- en: 'There are five general approaches to obtaining file and directory information
    using the `java.nio.file.Files` class that are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`java.nio.file.Files`类获取文件和目录信息的五种一般方法如下：
- en: Obtaining a single attribute at a time using the `Files` class' specific methods,
    such as the `isDirectory` method. This is detailed in the *Getting file and directory
    information* recipe.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Files`类的特定方法，如`isDirectory`方法，逐个获取单个属性。这在*获取文件和目录信息*配方中有详细说明。
- en: Obtaining a single attribute at a time using the `Files` class' `getAttribute`
    method. This is detailed in the *Obtaining a single attribute at a time using
    the getAttribute method* recipe.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Files`类的`getAttribute`方法逐个获取单个属性。这在*使用getAttribute方法逐个获取单个属性*配方中有详细说明。
- en: Returning a map of attributes using the `readAttributes` method using a `String`
    to specify which attributes to return. This is explained in the *Obtaining a map
    of file attributes* recipe.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`readAttributes`方法返回使用`String`指定要返回的属性的映射。这在*获取文件属性的映射*配方中有解释。
- en: Using the `readAttributes` method with a `BasicFileAttributes` derived class
    to return an attribute class for that set of attributes. This is detailed in the
    *Maintaining basic file attributes using the BasicFileAttributeView* recipe.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`readAttributes`方法与`BasicFileAttributes`派生类返回该属性集的属性类。这在*使用BasicFileAttributeView维护基本文件属性*配方中有详细说明。
- en: Using the `getFileAttributes` method to return a view that provides access to
    a specific set of attributes. This is also detailed in the *Using the BasicFileAttributeView
    method to maintain basic file attributes* recipe. It is found in the *There's
    More..*. section of the recipe.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`getFileAttributes`方法返回提供对特定属性集的访问的视图。这也在*使用BasicFileAttributeView方法维护基本文件属性*配方中有详细说明。它在配方的*还有更多..*部分中找到。
- en: Dynamic access to attributes is supported through several methods and allows
    the developer to specify an attribute using a `String`. The `Files` class' `getAttribute`
    method typifies this approach.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几种方法支持对属性的动态访问，并允许开发人员使用`String`指定属性。`Files`类的`getAttribute`方法代表了这种方法。
- en: 'Java 7 introduces a number of interfaces that are based on a file view. A view
    is simply a way of organizing information about a file or directory. For example,
    the `AclFileAttributeView` provides methods related to the file''s **Access Control
    List** (**ACL**). The `FileAttributeView` interface is the base interface for
    other interfaces that provide specific types of file information. Sub-interfaces
    found in the `java.nio.file.attribute` package include the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Java 7引入了一些基于文件视图的接口。视图只是关于文件或目录的信息的一种组织方式。例如，`AclFileAttributeView`提供了与文件的**访问控制列表**（**ACL**）相关的方法。`FileAttributeView`接口是提供特定类型文件信息的其他接口的基接口。`java.nio.file.attribute`包中的子接口包括以下内容：
- en: '`AclFileAttributeView:` This is used to maintain the file''s ACL and ownership
    attributes'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AclFileAttributeView：`用于维护文件的ACL和所有权属性'
- en: '`BasicFileAttributeView:` This is used to access basic information about a
    file and to set time-related attributes'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BasicFileAttributeView：`用于访问有关文件的基本信息并设置与时间相关的属性'
- en: '`DosFileAttributeView:` This is designed to be used with the legacy **Disk
    Operating System** (**DOS**) file attributes'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DosFileAttributeView：`设计用于与传统**磁盘操作系统**（**DOS**）文件属性一起使用'
- en: '`FileOwnerAttributeView:` This is used to maintain the ownership of a file'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileOwnerAttributeView：`用于维护文件的所有权'
- en: '`PosixFileAttributeView:` This supports **Portable Operating System Interface**
    (**POSIX**) attributes'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PosixFileAttributeView：`支持**便携式操作系统接口**（**POSIX**）属性'
- en: '`UserDefinedFileAttributeView:` This supports user-defined attributes for a
    file'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserDefinedFileAttributeView：`支持文件的用户定义属性'
- en: 'The relationships between the views are shown as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 视图之间的关系如下所示：
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The lower-level interfaces inherit from the interfaces above them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 低级接口继承自它们上面的接口。
- en: '![Introduction](img/5627_03_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/5627_03_01.jpg)'
- en: 'The `readAttributes` method''s second parameter specifies the type of attributes
    to be returned. Three attribute interfaces are supported and their relationship
    is illustrated in the following figure. These interfaces provide a means of accessing
    their corresponding view interfaces:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`readAttributes` 方法的第二个参数指定要返回的属性类型。支持三个属性接口，它们的关系如下图所示。这些接口提供了访问它们对应的视图接口的方法：'
- en: '![Introduction](img/5627_03_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Introduction](img/5627_03_02.jpg)'
- en: There is a recipe devoted to each of these views. The `FileStoreAttributeView`
    is not discussed here, but is covered in the *Getting FileStore information* recipe
    found in [Chapter 4](ch04.html "Chapter 4. Managing Files and Directories"), *Managing
    Files and Directories*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每个视图都有一个专门的配方。这里不讨论 `FileStoreAttributeView`，但在 [第四章](ch04.html "第四章。管理文件和目录")
    的 *管理文件和目录* 中有相关内容。
- en: Files and the directory structure used for examples in this chapter are described
    in the introduction to [Chapter 2](ch02.html "Chapter 2. Locating Files and Directories
    Using Paths"), *Locating Files and Directories Using Paths*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中示例使用的文件和目录结构在 [第二章](ch02.html "第二章。使用路径定位文件和目录") 的介绍中有描述，*使用路径定位文件和目录*。
- en: Determining the file content type
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定文件内容类型
- en: The type of a file can often be derived from its extension. However this can
    be misleading, and files with the same extension may contain different types of
    data. The `Files` class' `probeContentType` method is used to determine the content
    type of a file, if possible. This is useful when the application needs some indication
    of what is in a file in order to process it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的类型通常可以从其扩展名推断出来。但这可能会误导，具有相同扩展名的文件可能包含不同类型的数据。`Files` 类的 `probeContentType`
    方法用于确定文件的内容类型（如果可能）。当应用程序需要一些指示文件内容以便处理时，这是很有用的。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to determine the content type, the following steps need to be completed:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定内容类型，需要完成以下步骤：
- en: Obtain a `Path` object that represents the file.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取代表文件的 `Path` 对象。
- en: Use the `Path` object as the argument to the `probeContentType` method.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Path` 对象作为 `probeContentType` 方法的参数。
- en: Use the results to process the file.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用结果处理文件。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a new console application. Add three different types of files to the
    `/home/docs` directory. Use the following for the `main` method. While you may
    use any files that you choose, this example uses a text file, a Word document,
    and an executable file as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。将三种不同类型的文件添加到 `/home/docs` 目录中。使用以下内容作为 `main` 方法。虽然你可以使用任何你选择的文件，但本示例使用了一个文本文件，一个
    Word 文档和一个可执行文件：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Execute the application. Your output should appear as follows. The type returned
    is dependent on the actual files you used:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。你的输出应该如下所示。返回的类型取决于你使用的实际文件：
- en: '**text/plain**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**text/plain**'
- en: '**application/msword**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**application/msword**'
- en: '**application/x-msdownload**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**application/x-msdownload**'
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: A `java.nio.file.Path` variable was created and assigned to each of the three
    different files. The `Files` class' `probeContentPath` method was executed for
    each of these files. The result returned was a `String`, which was displayed for
    illustration purposes. The `probeContentType` method throws a `java.io.IOException`
    and we handle this by having the `displayConentType` method and the `main` method
    throw a base class exception. The `probeContentPath` method may also throw a `java.lang.SecurityException`,
    but you are not required to handle it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个 `java.nio.file.Path` 变量，并分配给了三个不同的文件。对每个文件执行了 `Files` 类的 `probeContentPath`
    方法。返回的结果是一个 `String`，用于说明目的。`probeContentType` 方法会抛出一个 `java.io.IOException`，我们通过让
    `displayConentType` 方法和 `main` 方法抛出一个基类异常来处理这个异常。`probeContentPath` 方法也可能会抛出一个
    `java.lang.SecurityException`，但你不需要处理它。
- en: In the files used for this example, the first file was a text file. The returned
    type was **text/plain**. The other two were a Word document and the executable
    `java.exe` file. The return types were **application/msword** and **application/x-msdownload**
    respectively.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中使用的文件中，第一个文件是一个文本文件。返回的类型是 **text/plain**。另外两个是一个 Word 文档和可执行文件 `java.exe`。返回的类型分别是
    **application/msword** 和 **application/x-msdownload**。
- en: There's more...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The result of the method is a `String` as defined by the **Multipurpose Internet
    Mail Extension** (**MIME**): **RFC 2045: Multipurpose Internet Mail Extensions
    (**MIME**) Part One: Format of Internet Message Bodies**. This permits the `String`
    to be parsed using the RFC 2045 grammar specifications. If the content type is
    not recognized, then null is returned.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的结果是一个 `String`，由 **多用途互联网邮件扩展** (**MIME**)：**RFC 2045：多用途互联网邮件扩展（MIME）第一部分：互联网消息正文的格式**
    定义。这允许使用 RFC 2045 语法规范解析 `String`。如果无法识别内容类型，则返回 null。
- en: A MIME type is composed of a type and a subtype with one or more optional parameters.
    The type is separated from the subtype using a forward slash. In the previous
    output, the text document type was text and its subtype was plain. The other two
    types were both of the type application, but had different subtypes. Subtypes
    that begin with x- are non-standard.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: MIME 类型由类型和子类型以及一个或多个可选参数组成。类型和子类型之间使用斜杠分隔。在前面的输出中，文本文档的类型是 text，子类型是 plain。另外两种类型都是
    application 类型，但子类型不同。以 x- 开头的子类型是非标准的。
- en: The implementation of the `probeContentType` method is system-dependent. The
    method will use a `java.nio.file.spi.FileTypeDetector` implementation to determine
    the content type. It may examine the filename or possibly access file attributes
    to determine the file content type. Most operating systems will maintain a list
    of file detectors. A detector from this list is loaded and used to determine the
    file type. The `FileTypeDetector` class is not extended, and it is not currently
    possible to determine which file detectors are available.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`probeContentType`方法的实现取决于系统。该方法将使用`java.nio.file.spi.FileTypeDetector`实现来确定内容类型。它可能检查文件名或可能访问文件属性以确定文件内容类型。大多数操作系统将维护文件探测器列表。从此列表中加载并用于确定文件类型。`FileTypeDetector`类没有扩展，并且目前无法确定哪些文件探测器可用。'
- en: Obtaining a single attribute at a time using the getAttribute method
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`getAttribute`方法一次获取一个属性
- en: If you are interested in getting a single file attribute, and you know the name
    of the attribute, then the `Files` class' `getAttribute` method is simple and
    easy to use. It will return information about the file based upon a `String` representing
    the attribute. The first part of this recipe illustrates a simple use of the `getAttribute`
    method. Other available attributes are listed in the *There's More..*. section
    of this recipe.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣获取单个文件属性，并且知道属性的名称，则`Files`类的`getAttribute`方法简单且易于使用。它将返回基于表示属性的`String`的文件信息。本食谱的第一部分说明了`getAttribute`方法的简单用法。其他可用的属性列在本食谱的*更多内容*部分中。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To obtain a single file attribute value:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 获取单个文件属性值：
- en: Create a `Path` object representing the file of interest.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表示感兴趣的文件的`Path`对象。
- en: Use this object as the first argument of the `getAttribute` method.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此对象用作`getAttribute`方法的第一个参数。
- en: Use a `String` containing the name of the attribute as the method's second argument.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包含属性名称的`String`作为方法的第二个参数。
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application and use the following `main` method. In this
    method we determine the size of the file as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序并使用以下`main`方法。在此方法中，我们确定文件的大小如下：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be as follows, and will depend upon the actual size of the
    file used:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将如下所示，并将取决于所使用文件的实际大小：
- en: '**30**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**30**'
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A `Path` was created representing the `users.txt` file. This path was then used
    as the first argument of the `Files` class' `getAttribute` method. When the code
    was executed the size of the file was displayed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个表示`users.txt`文件的`Path`。然后将此路径用作`Files`类的`getAttribute`方法的第一个参数。执行代码时，将显示文件的大小。
- en: There's more...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The `Files` class'' `getAttribute` method possesses the following three arguments:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`Files`类的`getAttribute`方法具有以下三个参数：'
- en: A `Path` object representing the file
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个表示文件的`Path`对象
- en: A `String` containing the name of the attribute
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含属性名称的`String`
- en: An optional `LinkOption` to use when dealing with symbolic files
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理符号文件时使用的可选`LinkOption`
- en: 'The following table lists the valid attribute names that can be used with this
    method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了可以与此方法一起使用的有效属性名称：
- en: '| Attribute Name | Data Type |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 属性名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `lastModifiedTime` | FileTime |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `lastModifiedTime` | FileTime |'
- en: '| `lastAccessTime` | FileTime |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `lastAccessTime` | FileTime |'
- en: '| `creationTime` | FileTime |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `creationTime` | FileTime |'
- en: '| `size` | long |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 长整型 |'
- en: '| `isRegularFile` | Boolean |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `isRegularFile` | 布尔值 |'
- en: '| `isDirectory` | Boolean |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `isDirectory` | 布尔值 |'
- en: '| `isSymbolicLink` | Boolean |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `isSymbolicLink` | 布尔值 |'
- en: '| `isOther` | Boolean |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `isOther` | 布尔值 |'
- en: '| `fileKey` | Object |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `fileKey` | 对象 |'
- en: If an invalid name is used then a runtime error occurs. This is the primary
    weakness of this approach. For example, if the name is misspelled, we will get
    a runtime error. This approach is shown as follows, where the attribute specified
    has an extra *s* at the end of the attribute `String:`
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用无效的名称，则会发生运行时错误。这是这种方法的主要弱点。例如，如果名称拼写错误，我们将收到运行时错误。此方法如下所示，指定的属性在属性`String`末尾有一个额外的*s*：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the application is executed, you should get results similar to the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序执行时，您应该获得类似以下的结果：
- en: '**Exception in thread "main" java.lang.IllegalArgumentException: ''sizes''
    not recognized**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**线程"main"中的异常java.lang.IllegalArgumentException：未识别''sizes''**'
- en: '**at sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder.<init>(AbstractBasicFile
    AttributeView.java:102)**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**在sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder.<init>(AbstractBasicFile
    AttributeView.java:102)**'
- en: '**at sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder.create(AbstractBasicFileAttributeView.java:112)**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**在sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder.create(AbstractBasicFileAttributeView.java:112)**'
- en: '**at sun.nio.fs.AbstractBasicFileAttributeView.readAttributes(AbstractBasicFileAttributeView.java:166)**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**在sun.nio.fs.AbstractBasicFileAttributeView.readAttributes(AbstractBasicFileAttributeView.java:166)**'
- en: '**at sun.nio.fs.AbstractFileSystemProvider.readAttributes(AbstractFileSystemProvider.java:92)**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**在sun.nio.fs.AbstractFileSystemProvider.readAttributes(AbstractFileSystemProvider.java:92)**'
- en: '**at java.nio.file.Files.readAttributes(Files.java:1896)**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**在java.nio.file.Files.readAttributes(Files.java:1896)**'
- en: '**at java.nio.file.Files.getAttribute(Files.java:1801)**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**在java.nio.file.Files.getAttribute(Files.java:1801)**'
- en: '**at packt.SingleAttributeExample.main(SingleAttributeExample.java:15)**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**在packt.SingleAttributeExample.main(SingleAttributeExample.java:15)**'
- en: '**Java Result: 1**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java结果：1**'
- en: A list of file attributes can be obtained as described in the *Obtaining a map
    of file attributes* recipe. This can be used to avoid using an invalid name.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照*获取文件属性映射*食谱中的描述获取文件属性列表。这可以用来避免使用无效名称。
- en: Obtaining a map of file attributes
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取文件属性映射
- en: An alternative way of accessing file attributes is to use the `Files` class'
    `readAttributes` method. There are two overloaded versions of this method, and
    they differ in their second argument and their return data types. In this recipe,
    we will explore the version that returns a `java.util.Map` object as it allows
    more flexibility in what attributes it can return. The second version of the method
    is discussed in a series of recipes, each devoted to a specific class of attributes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 访问文件属性的另一种方法是使用`Files`类的`readAttributes`方法。该方法有两个重载版本，在第二个参数和返回的数据类型上有所不同。在本示例中，我们将探讨返回`java.util.Map`对象的版本，因为它允许在返回的属性上更灵活。该方法的第二个版本在一系列食谱中讨论，每个食谱都专门讨论一类属性。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To obtain a list of attributes in the form of a `Map` object, the following
    steps need to be done:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取`Map`对象形式的属性列表，需要执行以下步骤：
- en: Create a `Path` object representing a file.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表示文件的`Path`对象。
- en: Apply the static `readAttributes` method against the `Files` class.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Files`类应用静态的`readAttributes`方法。
- en: 'Specify the value of its arguments:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定其参数的值：
- en: The `Path` object representing the file of interest
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示感兴趣文件的`Path`对象
- en: A `String` argument representing the attributes to be returned
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示要返回的属性的`String`参数
- en: An optional third argument specifying whether symbolic links should be followed
    or not
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的第三个参数，指定是否应该跟踪符号链接
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. Use the following `main` method:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。使用以下`main`方法：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Execute the application. Your output should appear similar to the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应该类似于以下内容：
- en: '**lastModifiedTime: 2011-09-06T01:26:56.501665Z**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**lastModifiedTime: 2011-09-06T01:26:56.501665Z**'
- en: '**fileKey: null**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**fileKey: null**'
- en: '**isDirectory: false**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**isDirectory: false**'
- en: '**lastAccessTime: 2011-09-06T21:14:11.214057Z**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**lastAccessTime: 2011-09-06T21:14:11.214057Z**'
- en: '**isOther: false**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**isOther: false**'
- en: '**isSymbolicLink: false**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**isSymbolicLink: false**'
- en: '**isRegularFile: true**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**isRegularFile: true**'
- en: '**creationTime: 2011-09-06T21:14:11.214057Z**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**creationTime: 2011-09-06T21:14:11.214057Z**'
- en: '**size: 30**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小：30**'
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The example used the `users.txt` file in the `docs` directory. A `Map` object
    with a key type of `String` and a value type of `Object` was declared and then
    assigned a value from the `readAttributes` method. A `java.util.Set` object was
    created using the `Map` interface's `keySet` method. This gives us access to both
    the keys and the values of the `Map`. In the for each loop, each member of the
    set was used as an argument to the `getAttribute` method. This corresponding attribute
    and its value were displayed for the file. The `getAttribute` method is explained
    in the *Obtaining a single attribute at a time using the getAttribute method*
    recipe.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中使用了`docs`目录中的`users.txt`文件。声明了一个键类型为`String`，值类型为`Object`的`Map`对象，然后为其赋予了`readAttributes`方法的值。使用`Map`接口的`keySet`方法创建了一个`java.util.Set`对象。这使我们可以访问`Map`的键和值。在for
    each循环中，将集合的每个成员用作`getAttribute`方法的参数。文件的相应属性和其值将被显示。`getAttribute`方法在*使用getAttribute方法逐个获取属性*食谱中有解释。
- en: In this example, we used the string literal, `"*`", as the second argument.
    This value instructs the method to return all available attributes of the file.
    As we will see shortly, other string values can be used to get different results.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用字符串字面值`"*"`作为第二个参数。这个值指示方法返回文件的所有可用属性。正如我们很快将看到的，其他字符串值可以用来获得不同的结果。
- en: 'The `readAttributes` method is an atomic filesystem operation. By default,
    symbolic links are followed. To direct the method to not follow symbolic links,
    use the `java.nio.file` package''s `LinkOption.NOFOLLOW_LINKS` enumeration constant,
    shown as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`readAttributes`方法是一个原子文件系统操作。默认情况下，会跟踪符号链接。要指示该方法不要跟踪符号链接，使用`java.nio.file`包的`LinkOption.NOFOLLOW_LINKS`枚举常量，如下所示：'
- en: '[PRE4]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There's more...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The interesting aspect of this method is its second argument. The syntax for
    the `String` argument consists of an optional `viewName` and a colon followed
    by an attribute list. A `viewName` is typically one of the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的有趣之处在于它的第二个参数。`String`参数的语法包括一个可选的`viewName`，后面跟着一个冒号，然后是属性列表。`viewName`通常是以下之一：
- en: acl
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: acl
- en: basic
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本
- en: owner
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有者
- en: user
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户
- en: dos
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dos
- en: posix
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: posix
- en: Each of these `viewNames` corresponds to the name of a view interface.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`viewNames`对应于一个视图接口的名称。
- en: The attribute list is a comma delimited list of attributes. The attribute list
    may contain zero or more elements. If an invalid element name is used, it is ignored.
    Using an asterisk will return all of the attributes associated with that `viewName`.
    If a `viewName` is not included, then all of the basic file attributes are returned
    as illustrated earlier.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 属性列表是一个逗号分隔的属性列表。属性列表可以包含零个或多个元素。如果使用无效的元素名称，则会被忽略。使用星号将返回与该`viewName`关联的所有属性。如果不包括`viewName`，则会返回所有基本文件属性，就像前面所示的那样。
- en: 'Using the basic view as an example, the following table illustrates how we
    can be selective about which attributes we return:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以基本视图为例，以下表格说明了我们如何选择要返回的属性：
- en: '| String | Attributes returned |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| String | 返回的属性 |'
- en: '| --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `"*"` | All of the basic file attributes |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `"*"` | 所有基本文件属性 |'
- en: '| `"basic:*"` | All of the basic file attributes |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `"basic:*"` | 所有基本文件属性 |'
- en: '| `"basic:isDirectory,lastAccessTime`" | Only the `isDirectory` and `lastAccessTime`
    attributes |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `"basic:isDirectory,lastAccessTime`" | 仅`isDirectory`和`lastAccessTime`属性
    |'
- en: '| `"isDirectory,lastAccessTime`" | Only the `isDirectory` and `lastAccessTime`
    attributes |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `"isDirectory,lastAccessTime`" | 仅`isDirectory`和`lastAccessTime`属性 |'
- en: '| `""` | None - a `java.lang.IllegalArgumentException` is generated |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `""` | 无 - 会生成`java.lang.IllegalArgumentException` |'
- en: The attribute `String` is used in the same way with views other than basic.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`属性在除基本视图以外的视图中使用方式相同。'
- en: Tip
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There cannot be any embedded spaces in the attribute `String`. For example,
    the `String, "basic:isDirectory, lastAccessTime`", where there is a blank after
    the comma will result in an `IllegalArgumentException`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`String`中不能有嵌入的空格。例如，`String, "basic:isDirectory, lastAccessTime"`，逗号后面有一个空格会导致`IllegalArgumentException`。
- en: Getting file and directory information
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取文件和目录信息
- en: It is frequently necessary to retrieve basic information about a file or directory.
    This recipe examines how the `java.nio.file.Files` class provides the direct support.
    These methods provide only partial access to file and directory information and
    are typified by methods such as the `isRegularFile` method. A list of such methods
    are found in the *There's more..*. section of this recipe.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 经常需要检索有关文件或目录的基本信息。本教程将介绍`java.nio.file.Files`类如何提供直接支持。这些方法仅提供对文件和目录信息的部分访问，并以`isRegularFile`等方法为代表。此类方法的列表可在本教程的*更多信息*部分找到。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To use the methods of the `Files` class to display information is easy since
    most, if not all, of these methods are static. This means that the methods can
    easily be executed against the `Files` class name. To use this technique:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`Files`类的方法显示信息很容易，因为这些方法大多数（如果不是全部）都是静态的。这意味着这些方法可以轻松地针对`Files`类名称执行。要使用这种技术：
- en: Create a `Path` object representing a file or directory.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表示文件或目录的`Path`对象。
- en: Use the `Path` object as an argument to the appropriate `Files` class' method.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Path`对象用作适当的`Files`类方法的参数。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To demonstrate how to obtain file attributes, we will develop a method to display
    the attributes of a file. Create a new console application that contains the following
    `main` method. In the method, we create a reference to a file and then call a
    `displayFileAttribute` method. It uses several methods to display information
    about the path as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了演示如何获取文件属性，我们将开发一个方法来显示文件的属性。创建一个包含以下`main`方法的新控制台应用程序。在该方法中，我们创建一个文件的引用，然后调用`displayFileAttribute`方法。它使用几种方法来显示有关路径的信息，如下所示：
- en: '[PRE5]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Execute the program. Your output should appear as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行程序。您的输出应如下所示：
- en: '**Exists: true**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**存在：true**'
- en: '**notExists: false**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**不存在：false**'
- en: '**Directory: false**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录：false**'
- en: '**Regular: true**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**常规：true**'
- en: '**Executable: true**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**可执行：true**'
- en: '**Readable: true**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**可读：true**'
- en: '**Writable: true**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**可写：true**'
- en: '**Hidden: false**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**隐藏：false**'
- en: '**Symbolic: false**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**符号链接：false**'
- en: '**Last Modified Date: 2011-10-20T03:18:20.338139Z**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**上次修改日期：2011-10-20T03:18:20.338139Z**'
- en: '**Size: 29**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小：29**'
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'A `Path` to the `users.txt` file was created. This `Path` object was then passed
    to the `displayFileAttribute` method, which displayed many of the attributes of
    the file. The methods that return these attributes are summarized in the following
    table:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了指向`users.txt`文件的`Path`。然后将此`Path`对象传递给`displayFileAttribute`方法，该方法显示了文件的许多属性。返回这些属性的方法在以下表格中进行了总结：
- en: '| Method | Description |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `exists` | Returns `true` if the files exist |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `exists` | 如果文件存在则返回`true` |'
- en: '| `notExists` | Returns `true` if the file does not exist |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `notExists` | 如果文件不存在则返回`true` |'
- en: '| `isDirectory` | Returns `true` if the Path represents a directory |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `isDirectory` | 如果路径表示目录则返回`true` |'
- en: '| `isRegularFile` | Returns `true` if the Path represents a regular file |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `isRegularFile` | 如果路径表示常规文件则返回`true` |'
- en: '| `isExecutable` | Returns `true` if the file can be executed |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `isExecutable` | 如果文件可执行则返回`true` |'
- en: '| `isReadable` | Returns `true` if the file can be read |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `isReadable` | 如果文件可读则返回`true` |'
- en: '| `isWritable` | Returns `true` if the file can be written to |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `isWritable` | 如果文件可写则返回`true` |'
- en: '| `isHidden` | Returns `true` if the file is hidden and not visible to the
    unprivileged user |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `isHidden` | 如果文件是隐藏的且对非特权用户不可见则返回`true` |'
- en: '| `isSymbolicLink` | Returns `true` if the file is a symbolic link |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `isSymbolicLink` | 如果文件是符号链接则返回`true` |'
- en: '| `getLastModifiedTime` | Returns the last time the file was modified |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `getLastModifiedTime` | 返回文件上次修改的时间 |'
- en: '| `size` | Returns the size of the file |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 返回文件的大小 |'
- en: Several of these methods possess a second argument that specifies how to handle
    symbolic links. When `LinkOption.NOFOLLOW_LINKS` is present, then symbolic links
    are not followed. The second argument is optional. If it is left out then symbolic
    links are not followed. Symbolic links are discussed in the *Managing symbolic
    links* recipe of [Chapter 2](ch02.html "Chapter 2. Locating Files and Directories
    Using Paths"), *Locating Files and Directories Using Paths*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 其中几种方法具有第二个参数，指定如何处理符号链接。当存在`LinkOption.NOFOLLOW_LINKS`时，符号链接不会被跟踪。第二个参数是可选的。如果省略，则不会跟踪符号链接。符号链接在[第2章](ch02.html
    "第2章. 使用路径定位文件和目录")的*使用路径定位文件和目录*中的*管理符号链接*教程中进行了讨论。
- en: There's more...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多信息...
- en: The following table summarizes the exceptions thrown, and whether the method
    is non-atomic. Methods that may throw a `SecurityException` will do so if the
    calling thread is not permitted to read the file.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '以下表格总结了抛出的异常以及方法是否为非原子操作。如果调用线程无权读取文件，则可能会抛出`SecurityException`。 '
- en: Note
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When a method is said to be **non-atomic**, it means that other filesystem operations
    may execute concurrently with that method. Non-atomic operations can result in
    inconsistent results. That is, it is possible that concurrent operations against
    the method's target may result in possible modification of the state of the file
    while these methods are executing. This should be considered when using these
    methods.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个方法被称为**非原子**时，这意味着其他文件系统操作可能会与该方法同时执行。非原子操作可能导致不一致的结果。也就是说，在这些方法执行时，可能会导致对方法目标的并发操作可能修改文件的状态。在使用这些方法时应考虑到这一点。
- en: The results of these methods marked as outdated are not necessarily valid upon
    their return. That is, there is no guarantee that any subsequent access will succeed
    as the file may have been deleted or otherwise modified.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法标记为过时的结果在返回时不一定有效。也就是说，不能保证任何后续访问都会成功，因为文件可能已被删除或以其他方式修改。
- en: 'Methods designated as **Cannot be determined** indicate that `false` may be
    returned if it is not possible to otherwise ascertain the results. For example,
    the `exists` method will return `false` if it cannot determine whether the file
    exists. It may exist, but the method was not able to determine definitively if
    it exists or not:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 被指定为**无法确定**的方法表示，如果无法确定结果，则可能返回 `false`。例如，如果 `exists` 方法无法确定文件是否存在，则会返回 `false`。它可能存在，但该方法无法确定它是否存在：
- en: '| Method | SecurityException | IOException | Non-atomic | Outdated | Cannot
    be determined |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | SecurityException | IOException | 非原子 | 过时 | 无法确定 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| `exists` | Yes |   |   | Yes | Yes |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `exists` | 是 |   |   | 是 | 是 |'
- en: '| `notExists` | Yes |   |   | Yes | Yes |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `notExists` | 是 |   |   | 是 | 是 |'
- en: '| `isDirectory` | Yes |   |   |   | Yes |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `isDirectory` | 是 |   |   |   | 是 |'
- en: '| `isRegularFile` | Yes |   |   |   | Yes |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `isRegularFile` | 是 |   |   |   | 是 |'
- en: '| `isExecutable` | Yes |   | Yes | Yes | Yes |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `isExecutable` | 是 |   | 是 | 是 | 是 |'
- en: '| `isReadable` | Yes |   | Yes | Yes | Yes |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `isReadable` | 是 |   | 是 | 是 | 是 |'
- en: '| `isWritable` | Yes |   | Yes | Yes | Yes |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `isWritable` | 是 |   | 是 | 是 | 是 |'
- en: '| `isHidden` | Yes | Yes |   |   |   |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `isHidden` | 是 | 是 |   |   |   |'
- en: '| `isSymbolicLink` | Yes |   |   |   | Yes |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `isSymbolicLink` | 是 |   |   |   | 是 |'
- en: '| `getLastModifiedTime` | Yes | Yes |   |   |   |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `getLastModifiedTime` | 是 | 是 |   |   |   |'
- en: '| `size` | Yes | Yes |   |   |   |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 是 | 是 |   |   |   |'
- en: Note that the `notExists` method is not the inverse of the `exists` method.
    With the use of either method, it may not be possible to determine if the file
    exists or not. When this is the case, both methods will return `false`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`notExists` 方法不是 `exists` 方法的反义词。使用任一方法，可能无法确定文件是否存在。在这种情况下，两种方法都将返回 `false`。
- en: 'The `isRegularFile` determines if the file is a regular file. Both the `isDirectory,
    isSymbolicLink`, and the `isRegularFile` methods may return `false` if:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`isRegularFile` 确定文件是否为常规文件。如果 `isDirectory, isSymbolicLink` 和 `isRegularFile`
    方法返回 `false`，则可能是因为：'
- en: It is not one of those types
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不是这些类型之一
- en: If the file does not exist or
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件不存在或
- en: If it is not possible to determine whether it is a file or a directory
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果无法确定它是文件还是目录
- en: For these methods, their corresponding methods in the `BasicFileAttributes`
    interface may provide better results. These methods are covered in the *Maintaining
    basic file attributes using the BasicFileAttributeView* recipe.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些方法，它们在 `BasicFileAttributes` 接口中对应的方法可能会提供更好的结果。这些方法在 *使用 BasicFileAttributeView
    维护基本文件属性* 部分中有介绍。
- en: 'The `isExecutable` method checks to see if the file exists and if the JVM has
    access rights to execute the file. If the file is a directory, then the method
    determines whether the JVM has sufficient privileges to search the directory.
    It will return `false` if:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`isExecutable` 方法检查文件是否存在，以及 JVM 是否有执行文件的访问权限。如果文件是一个目录，则该方法确定 JVM 是否有足够的权限来搜索该目录。如果：'
- en: The file does not exist
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件不存在
- en: The file is not executable
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件不可执行
- en: If it is not possible to determine whether it is executable
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果无法确定是否可执行
- en: The meaning of hidden is system-dependent. On UNIX systems, a file is hidden
    if its name begins with a period. On Windows, a file is hidden if the DOS hidden
    attribute is set.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏的含义取决于系统。在 UNIX 系统上，如果文件名以句点开头，则文件是隐藏的。在 Windows 上，如果设置了 DOS 隐藏属性，则文件是隐藏的。
- en: Determining operating system support for attribute views
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定操作系统对属性视图的支持
- en: An operating system may not support all the attribute views found in Java. There
    are three basic techniques for determining which views are supported. Knowing
    which views are supported allows the developer to avoid exceptions that can occur
    when trying to use a view that is not supported.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统可能不支持 Java 中的所有属性视图。有三种基本技术可以确定支持哪些视图。知道支持哪些视图可以让开发人员避免在尝试使用不受支持的视图时可能发生的异常。
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The three techniques include using:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种技术包括使用：
- en: The `java.nio.file.FileSystem` class' `supportedFileAttributeViews` method to
    return a set of all views supported.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `java.nio.file.FileSystem` 类的 `supportedFileAttributeViews` 方法返回一个包含所有支持的视图的集合。
- en: The `java.nio.file.FileStore` class' `supportsFileAttributeView` method with
    a class argument. If that class is supported, the method will return `true`.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `java.nio.file.FileStore` 类的 `supportsFileAttributeView` 方法和一个类参数。如果该类受支持，则该方法将返回
    `true`。
- en: The `FileStore` class' `supportsFileAttributeView` method with a `String` argument.
    If the class represented by that `String` is supported, the method will return
    `true`.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `FileStore` 类的 `supportsFileAttributeView` 方法和一个 `String` 参数。如果该 `String`
    表示的类受支持，则该方法将返回 `true`。
- en: The first approach is the simplest and will be illustrated first.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是最简单的，将首先进行说明。
- en: How to do it...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application with the following `main` method. In this
    method, we will display all views supported on the current system as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序，其中包含以下 `main` 方法。在这个方法中，我们将显示当前系统支持的所有视图，如下所示：
- en: '[PRE6]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When the application is executed on a Windows 7 system, you should get the
    following output:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用在 Windows 7 系统上执行时，应该会得到以下输出：
- en: '**acl**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**acl**'
- en: '**basic**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**basic**'
- en: '**owner**'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**owner**'
- en: '**user**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**user**'
- en: '**dos**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**dos**'
- en: 'When the application is executed under Ubuntu, version 10.10, you should get
    the following output:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用在Ubuntu 10.10版本下执行时，应该会得到以下输出：
- en: '**basic**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**basic**'
- en: '**owner**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**owner**'
- en: '**user**'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**user**'
- en: '**unix**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**unix**'
- en: '**dos**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**dos**'
- en: '**posix**'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**posix**'
- en: Notice that the **acl** view is not supported and a **unix** and **posix** view
    are supported. There is not a `UnixFileAttributeView` available as part of the
    Java 7 release. However, this interface can be found as part of the JSR203-backport
    project.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**acl**视图不受支持，而**unix**和**posix**视图受支持。在Java 7发布版中没有`UnixFileAttributeView`。但是，该接口可以作为JSR203-backport项目的一部分找到。
- en: How it works...
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A `Path` object was created for the `users.txt` file. The filesystem for this
    `Path` was obtained next using the `getFileSystem` method. The `FileSystem` class
    possesses the `supportedFileAttributeViews` method, which returns a set of strings
    representing the views supported. A for each loop was then used to display each
    string value.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为`users.txt`文件创建了一个`Path`对象。接下来使用`getFileSystem`方法获取了该`Path`的文件系统。`FileSystem`类具有`supportedFileAttributeViews`方法，该方法返回一个表示支持的视图的字符串集合。然后使用for
    each循环显示每个字符串值。
- en: There's more...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are two other methods that we can use to determine which views are supported:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另外两种方法可以用来确定支持哪些视图：
- en: Using the `supportsFileAttributeView` method with a class argument
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有类参数的`supportsFileAttributeView`方法
- en: Using the `supportsFileAttributeView` method with a `String` argument
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有`String`参数的`supportsFileAttributeView`方法
- en: These two techniques are very similar. They both allow you to test for a specific
    view.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种技术非常相似。它们都允许您测试特定的视图。
- en: Using the supportsFileAttributeView method with a class argument
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用带有类参数的supportsFileAttributeView方法
- en: 'The overloaded `supportsFileAttributeView` method accepts a class object representing
    the view in question. Add the following code to the previous example''s `main`
    method. In this code, we determine which of the several views are supported:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 重载的`supportsFileAttributeView`方法接受表示所讨论的视图的类对象。将以下代码添加到上一个示例的`main`方法中。在这段代码中，我们确定支持哪些视图：
- en: '[PRE7]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When executed on a Windows 7 machine, you should get the following output:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 7机器上执行时，您应该获得以下输出：
- en: '**FileAttributeView supported: false**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**FileAttributeView supported: false**'
- en: '**BasicFileAttributeView supported: true**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**BasicFileAttributeView supported: true**'
- en: '**FileOwnerAttributeView supported: true**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**FileOwnerAttributeView supported: true**'
- en: '**AclFileAttributeView supported: true**'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**AclFileAttributeView supported: true**'
- en: '**PosixFileAttributeView supported: false**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**PosixFileAttributeView supported: false**'
- en: '**UserDefinedFileAttributeView supported: true**'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**UserDefinedFileAttributeView supported: true**'
- en: '**DosFileAttributeView supported: true**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**DosFileAttributeView supported: true**'
- en: Using the supportsFileAttributeView method with a String argument
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用带有`String`参数的`supportsFileAttributeView`方法
- en: 'The overloaded `supportsFileAttributeView` method that accepts a `String` object
    works in a similar fashion. Add the following code to the try block of the `main`
    method:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 重载的`supportsFileAttributeView`方法接受一个`String`对象的工作方式类似。将以下代码添加到`main`方法的try块中：
- en: '[PRE8]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When executed on a Windows 7 platform, you should get the following output:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 7平台上执行时，您应该获得以下输出：
- en: '**FileAttributeView supported: false**'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**FileAttributeView supported: false**'
- en: '**BasicFileAttributeView supported: true**'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**BasicFileAttributeView supported: true**'
- en: '**FileOwnerAttributeView supported: true**'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**FileOwnerAttributeView supported: true**'
- en: '**AclFileAttributeView supported: true**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**AclFileAttributeView supported: true**'
- en: '**PosixFileAttributeView supported: false**'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**PosixFileAttributeView supported: false**'
- en: '**UserDefinedFileAttributeView supported: true**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**UserDefinedFileAttributeView supported: true**'
- en: '**DosFileAttributeView supported: true**'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**DosFileAttributeView supported: true**'
- en: Maintaining basic file attributes using the BasicFileAttributeView
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BasicFileAttributeView维护基本文件属性
- en: The `java.nio.file.attribute.BasicFileAttributeView` provides a series of methods
    that obtain basic information about a file such as its creation time and size.
    The view possesses a `readAttributes` method, which returns a `BasicFileAttributes`
    object. The `BasicFileAttributes` interface possesses several methods for accessing
    file attributes. This view provides an alternative means of obtaining file information
    than that supported by the `Files` class. The results of this method may be more
    reliable at times than those of the `Files` class.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.nio.file.attribute.BasicFileAttributeView`提供了一系列方法，用于获取有关文件的基本信息，例如其创建时间和大小。该视图具有一个`readAttributes`方法，该方法返回一个`BasicFileAttributes`对象。`BasicFileAttributes`接口具有几种用于访问文件属性的方法。该视图提供了一种获取文件信息的替代方法，而不是由`Files`类支持的方法。该方法的结果有时可能比`Files`类的结果更可靠。'
- en: Getting ready
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There are two approaches for obtaining a `BasicFileAttributes` object. The first
    approach is to use the `readAttributes` method that uses the `BasicFileAttributes.class`
    as the second argument. The second approach uses the `getFileAttributeView` method
    and is explored in the *There's more..*. section of this recipe.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以获取`BasicFileAttributes`对象。第一种方法是使用`readAttributes`方法，该方法使用`BasicFileAttributes.class`作为第二个参数。第二种方法使用`getFileAttributeView`方法，并在本章的*更多内容..*部分中进行了探讨。
- en: 'The `Files` class'' `readAttributes` method is easiest to use:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`Files`类的`readAttributes`方法最容易使用：'
- en: Use a `Path` object representing the file of interest as the first argument.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表示感兴趣的文件的`Path`对象用作第一个参数。
- en: Use `BasicFileAttributes.class` as the second argument.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BasicFileAttributes.class`用作第二个参数。
- en: Use the returned `BasicFileAttributes` object methods to access the file attributes.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用返回的`BasicFileAttributes`对象方法来访问文件属性。
- en: This basic approach is used for the other views illustrated in this chapter.
    Only the attribute view class differs.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基本方法用于本章中所示的其他视图。只有属性视图类不同。
- en: How to do it...
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a new console application. Use the following `main` method. In the method,
    we create a `BasicFileAttributes` object and use its methods to display information
    about a file:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。使用以下`main`方法。在该方法中，我们创建了一个`BasicFileAttributes`对象，并使用其方法来显示有关文件的信息：
- en: '[PRE9]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Execute the application. Your output should be similar to the following:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应该类似于以下内容：
- en: '**Creation Time: 2011-09-06T21:14:11.214057Z**'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**Creation Time: 2011-09-06T21:14:11.214057Z**'
- en: '**Last Accessed Time: 2011-09-06T21:14:11.214057Z**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**Last Accessed Time: 2011-09-06T21:14:11.214057Z**'
- en: '**Last Modified Time: 2011-09-06T01:26:56.501665Z**'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**Last Modified Time: 2011-09-06T01:26:56.501665Z**'
- en: '**File Key: null**'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件键：null**'
- en: '**Directory: false**'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录：false**'
- en: '**Other Type of File: false**'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他类型的文件：false**'
- en: '**Regular File: true**'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**常规文件：true**'
- en: '**Symbolic File: false**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**符号文件：false**'
- en: '**Size: 30**'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小：30**'
- en: How it works...
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we created a `Path` object representing the `users.txt` file. Next, we
    obtained a `BasicFileAttributes` object using the `Files` class' `readAttributes`
    method. The first argument of the method is a `Path` object. The second argument
    specifies the type of object that we want returned. In this case, it was a `BasicFileAttributes.class`
    object.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个代表`users.txt`文件的`Path`对象。接下来，我们使用`Files`类的`readAttributes`方法获取了一个`BasicFileAttributes`对象。该方法的第一个参数是一个`Path`对象。第二个参数指定了我们想要返回的对象类型。在这种情况下，它是一个`BasicFileAttributes.class`对象。
- en: This was followed by a series of print statements that display specific attribute
    information about the file. The `readAttributes` method retrieves all of the basic
    file attributes for a file. Since it can throw an `IOException`, the code sequence
    was enclosed in a try block.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是一系列打印语句，显示有关文件的特定属性信息。`readAttributes`方法检索文件的所有基本属性。由于它可能会抛出`IOException`，代码序列被包含在try块中。
- en: Most of the `BasicFileAttributes` interface methods are easy to follow, but
    a few require further explanation. First, if the `isOther` method returns `true`,
    it means that the file is not a regular file, directory, or a symbolic link. Additionally,
    although the file size is in bytes, due to issues such as file compression and
    implementation of sparse files, the actual size may be different. If the file
    is not a regular file, then the meaning of the return value is system-dependent.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数`BasicFileAttributes`接口方法很容易理解，但有一些需要进一步解释。首先，如果`isOther`方法返回`true`，这意味着文件不是常规文件、目录或符号链接。此外，尽管文件大小以字节为单位，但由于文件压缩和稀疏文件的实现等问题，实际大小可能会有所不同。如果文件不是常规文件，则返回值的含义取决于系统。
- en: The `fileKey` method returns an object that uniquely identifies that file. In
    UNIX, the device id or inode is used for this purpose. The file key will not necessarily
    be unique if the filesystem and its files are changed. They can be compared using
    the `equals` method, and can be used in collections. Again, the assumption is
    that the filesystem has not changed in a way that affects the file key. The comparison
    of two files is covered in the *Determining whether two paths are equivalent*
    recipe in [Chapter 2](ch02.html "Chapter 2. Locating Files and Directories Using
    Paths"), *Locating Files and Directories Using Paths*.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`fileKey`方法返回一个唯一标识该文件的对象。在UNIX中，设备ID或inode用于此目的。如果文件系统及其文件发生更改，文件键不一定是唯一的。它们可以使用`equals`方法进行比较，并且可以用于集合。再次强调的是，假设文件系统没有以影响文件键的方式发生更改。两个文件的比较在[第2章](ch02.html
    "第2章. 使用路径定位文件和目录")的*确定两个路径是否等效*中有所涉及，*使用路径定位文件和目录*。'
- en: There's more...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'An alternative approach to getting an object is to use the `Files` class''
    `getFileAttributeView` method. It returns an `AttributeView` derived `object`
    based on its second parameter. To get an instance of a `BasicFileAttributeView`
    object:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 获取对象的另一种方法是使用`Files`类的`getFileAttributeView`方法。它根据第二个参数返回一个基于`AttributeView`的派生对象。要获取`BasicFileAttributeView`对象的实例：
- en: Use a `Path` object representing the file of interest as the first argument.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用代表感兴趣的文件的`Path`对象作为第一个参数。
- en: Use the `BasicFileAttributeView` as the second argument.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`BasicFileAttributeView`作为第二个参数。
- en: 'Instead of using the following statement:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用以下语句：
- en: '[PRE10]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can replace it with the following code sequence:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下代码序列替换它：
- en: '[PRE11]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A `BasicFileAttributeView` object is returned using the getFileAttributeView
    method. The readAttributes method then returns the BasicFileAttributes object.
    This approach is longer, but we now have access to three additional methods, which
    are shown as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getFileAttributeView`方法返回`BasicFileAttributeView`对象。然后`readAttributes`方法返回`BasicFileAttributes`对象。这种方法更长，但现在我们可以访问另外三种方法，如下所示：
- en: '`name:` This returns the name of the attribute view'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name：`这返回属性视图的名称'
- en: '`readAttributes:` This returns a `BasicFileAttributes` object'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readAttributes：`这返回一个`BasicFileAttributes`对象'
- en: '`setTimes:` This is used to set the file''s time attributes'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setTimes：`这用于设置文件的时间属性'
- en: 'We then use the `name` method shown as follows:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用如下所示的`name`方法：
- en: '[PRE12]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This results in the following output:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下输出：
- en: '**Name: basic**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称：basic**'
- en: However, this does not provide us with much useful information. The `setTimes`
    method is illustrated in the *Setting time related attributes of a file or directory*
    recipe in [Chapter 4](ch04.html "Chapter 4. Managing Files and Directories"),
    *Managing Files and Directories*.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并没有为我们提供太多有用的信息。`setTimes`方法在[第4章](ch04.html "第4章. 管理文件和目录")的*设置文件或目录的时间相关属性*中有所说明，*管理文件和目录*。
- en: Maintaining POSIX file attributes using the PosixFileAttributeView
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PosixFileAttributeView维护POSIX文件属性
- en: Many operating systems support the **Portable Operating System Interface** (**POSIX**)
    standard. This provides a more portable way of writing applications that can be
    ported across operating systems. Java 7 supports access to file attributes using
    the `java.nio.file.attribute.PosixFileAttributeView` interface.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '许多操作系统支持**可移植操作系统接口**（**POSIX**）标准。这提供了一种更便携的方式来编写可以在不同操作系统之间移植的应用程序。Java 7支持使用`java.nio.file.attribute.PosixFileAttributeView`接口访问文件属性。 '
- en: Not all operating systems support the POSIX standard. The *Determining operating
    system support for attribute views* recipe illustrates how to determine whether
    a specific operating system supports POSIX or not.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有操作系统都支持POSIX标准。*确定操作系统是否支持属性视图*的示例说明了如何确定特定操作系统是否支持POSIX。
- en: Getting ready
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to obtain POSIX attributes for a file or directory, we need to do
    the following:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取文件或目录的POSIX属性，我们需要执行以下操作：
- en: Create a `Path` object representing the file or directory of interest.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个代表感兴趣的文件或目录的`Path`对象。
- en: Obtain an instance of the `PosixFileAttributeView` interface using the `getFileAttributeView`
    method.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`getFileAttributeView`方法获取`PosixFileAttributeView`接口的实例。
- en: Use the `readAttributes` method to obtain a set of attributes.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`readAttributes`方法获取一组属性。
- en: How to do it...
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. Use the `main` method that follows. In this
    method, we obtain attributes for the `users.txt` file as follows:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。使用以下`main`方法。在此方法中，我们获取`users.txt`文件的属性如下：
- en: '[PRE13]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Execute the application. Your output should appear as follows. The owner names
    will probably be different. In this case, it is **richard:**
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应如下所示。所有者名称可能会有所不同。在这种情况下，它是**richard：**
- en: '**Group: richard**'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**组：richard**'
- en: '**Owner: richard**'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '**所有者：richard**'
- en: '**OWNER_READ OWNER_WRITE OTHERS_READ GROUP_READ**'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**OWNER_READ OWNER_WRITE OTHERS_READ GROUP_READ**'
- en: How it works...
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A `Path` object was created for the `users.txt` file. This was used as the first
    argument of the `Files` class' `getFileAttributeView` method. The second argument
    was `PosixFileAttributeView.class`. A `PosixFileAttributeView` object was returned.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 为`users.txt`文件创建了一个`Path`对象。这被用作`Files`类的`getFileAttributeView`方法的第一个参数。第二个参数是`PosixFileAttributeView.class`。返回了一个`PosixFileAttributeView`对象。
- en: Next, an instance of the `PosixFileAttributes` interface was obtained using
    the `readAttributes` method. The `group` and `getName` methods were used to display
    the group and owner of the file. The permissions methods returned a set of `PosixFilePermission`
    enumerations. These enumerations represent the permissions assigned to the file.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`readAttributes`方法获取了`PosixFileAttributes`接口的实例。使用`group`和`getName`方法显示了文件的组和所有者。权限方法返回了一组`PosixFilePermission`枚举。这些枚举表示分配给文件的权限。
- en: There's more...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `PosixFileAttributes` interface extends the `java.nio.file.attribute.BasicFileAttributes`
    interface, and thus has access to all of its methods. The `PosixFileAttributeView`
    interface extends the `java.nio.file.attribute.FileOwnerAttributeView` and `BasicFileAttributeView`
    interfaces and inherits their methods also.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`PosixFileAttributes`接口扩展了`java.nio.file.attribute.BasicFileAttributes`接口，因此可以访问其所有方法。`PosixFileAttributeView`接口扩展了`java.nio.file.attribute.FileOwnerAttributeView`和`BasicFileAttributeView`接口，并继承了它们的方法。'
- en: The `PosixFileAttributeView` interface has a `setGroup` method that can be used
    to configure the group owner of the file. The permissions of the file can be maintained
    using the `setPermissions` method. Maintaining file permissions is discussed in
    the *Managing POSIX attributes* recipe in [Chapter 4](ch04.html "Chapter 4. Managing
    Files and Directories"), *Managing Files and Directories*.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`PosixFileAttributeView`接口具有`setGroup`方法，可用于配置文件的组所有者。可以使用`setPermissions`方法维护文件的权限。在[第4章](ch04.html
    "第4章。管理文件和目录")*管理文件和目录*中讨论了维护文件权限的*管理POSIX属性*配方。'
- en: See also
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Maintaining basic file attributes using the BasicFileAttributeView* recipe
    details the attributes available through this view. The *Maintaining file ownership
    attributes using the FileOwnerAttributeView* recipe discusses ownership issues.
    To determine whether POSIX is supported by an operating system, look at the *Determining
    operating system support for attribute views* recipe.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '*Maintaining basic file attributes using the BasicFileAttributeView*配方详细介绍了通过此视图可用的属性。*使用FileOwnerAttributeView维护文件所有权属性*配方讨论了所有权问题。要确定操作系统是否支持POSIX，请查看*确定属性视图的操作系统支持*配方。'
- en: Maintaining FAT table attributes using the DosFileAttributeView
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`DosFileAttributeView`维护FAT表属性
- en: The `java.nio.file.attribute.DosFileAttributeView` is concerned with the older
    **Disk Operating System** (**DOS**) files. It has limited value on most computers
    today. However, this is the only interface that can be used to determine if a
    file is marked for archive or is a system file.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.nio.file.attribute.DosFileAttributeView`涉及较旧的**磁盘操作系统**（**DOS**）文件。在今天的大多数计算机上，它的价值有限。但是，这是唯一可以用来确定文件是否标记为归档文件或系统文件的接口。'
- en: Getting ready
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To use the `DosFileAttributeView` interface:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`DosFileAttributeView`接口：
- en: Use the `Files` class' `getFileAttributeView` method to obtain an instance of
    a `DosFileAttributeView`.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Files`类的`getFileAttributeView`方法获取`DosFileAttributeView`的实例。
- en: Use the view's `readAttributes` method to return an instance of `DosFileAttributes`.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用视图的`readAttributes`方法返回`DosFileAttributes`的实例。
- en: Use the `DosFileAttributes` class' methods to obtain file information.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DosFileAttributes`类的方法获取文件信息。
- en: 'This view supports the following four methods:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图支持以下四种方法：
- en: '`isArchive:` which is concerned with whether the file needs to be backed up
    or not'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isArchive：`关注文件是否需要备份'
- en: '`isHidden:` returns `true` if the file is not visible to users'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isHidden：`如果文件对用户不可见，则返回`true`'
- en: '`isReadOnly:` returns `true` if the file can only be read'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isReadOnly：`如果文件只能读取，则返回`true`'
- en: '`isSystem:` returns `true` if the file is part of the operating system'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSystem：`如果文件是操作系统的一部分，则返回`true`'
- en: How to do it...
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application and add the following `main` method. In this
    method, we create an instance of the `DosFileAttributes` and then use its methods
    to display information about the file:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序，并添加以下`main`方法。在此方法中，我们创建`DosFileAttributes`的一个实例，然后使用其方法显示有关文件的信息：
- en: '[PRE14]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Execute the program. Your output should appear as follows:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行程序。您的输出应如下所示：
- en: '**isArchive: true**'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**isArchive：true**'
- en: '**isHidden: false**'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**isHidden：false**'
- en: '**isReadOnly: false**'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**isReadOnly：false**'
- en: '**isSystem: false**'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**isSystem：false**'
- en: How it works...
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A `Path` object representing the `users.txt` file was created. This object was
    used as an argument to the `Files` class' `getFileAttributeView` method along
    with `DosFileAttributeView.class`. An instance of the `DosFileAttributeView` interface
    was returned. This was used to create an instance of the `DosFileAttributes` interface,
    which was used with the four methods of the interface.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个代表`users.txt`文件的`Path`对象。将此对象用作`Files`类的`getFileAttributeView`方法的参数，以及`DosFileAttributeView.class`。返回了`DosFileAttributeView`接口的一个实例。这被用于创建`DosFileAttributes`接口的一个实例，该实例与接口的四个方法一起使用。
- en: The `DosFileAttributeView` extends the `BasicFileAttributes` interface, and
    thus inherits all of its attributes as detailed in the *Maintaining basic file
    attributes using the BasicFileAttributeView* recipe.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`DosFileAttributeView`扩展了`BasicFileAttributes`接口，并因此继承了其所有属性，如*使用BasicFileAttributeView维护基本文件属性*配方中所述。'
- en: See also
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: See the *Maintaining basic file attributes using the BasicFileAttributeView*
    recipe for more information about its methods.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其方法的更多信息，请参阅*使用BasicFileAttributeView维护基本文件属性*配方。
- en: Maintaining file ownership attributes using the FileOwnerAttributeView
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FileOwnerAttributeView来维护文件所有权属性
- en: If we are only interested in accessing information about the owners of a file
    or directory, then the `java.nio.file.attribute.FileOwnerAttributeView` interface
    provides methods for retrieving and setting this type of information. The setting
    of file ownership is covered in the *Setting file and directory owner* recipe
    of [Chapter 4](ch04.html "Chapter 4. Managing Files and Directories"), *Managing
    Files and Directories*.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只对访问文件或目录的所有者的信息感兴趣，那么`java.nio.file.attribute.FileOwnerAttributeView`接口提供了检索和设置此类信息的方法。文件所有权的设置在[第4章](ch04.html
    "第4章。管理文件和目录")的*设置文件和目录所有者*配方中有所涵盖，*管理文件和目录*。
- en: Getting ready
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To retrieve the owner of a file:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 检索文件的所有者：
- en: Obtain an instance of the `FileOwnerAttributeView` interface.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`FileOwnerAttributeView`接口的实例。
- en: Use its `getOwner` method to return a `UserPrincipal` object representing the
    owner.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其`getOwner`方法返回代表所有者的`UserPrincipal`对象。
- en: How to do it...
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. Add the following `main` method to it. In
    this method, we will determine the owner of the `users.txt` file as follows:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。将以下`main`方法添加到其中。在此方法中，我们将确定`users.txt`文件的所有者如下：
- en: '[PRE15]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Execute the application. Your output should be similar to the following, except
    the PC and usernames should be different.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应该类似于以下内容，除了PC和用户名应该不同。
- en: '**Richard-PC\Richard**'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**Richard-PC\Richard**'
- en: How it works...
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A `Path` object was created for the `users.txt` file. Next, the `Files` class'
    `getFileAttributeView` method was called using the `Path` object as the first
    argument. The second argument was `FileOwnerAttributeView.class`, which results
    in a `FileOwnerAttributeView` object for the file being returned.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 为`users.txt`文件创建了一个`Path`对象。接下来，使用`Path`对象作为第一个参数调用了`Files`类的`getFileAttributeView`方法。第二个参数是`FileOwnerAttributeView.class`，这导致返回文件的`FileOwnerAttributeView`对象。
- en: The view's `getOwner` method was then invoked to return a `UserPrincipal` object.
    Its `getName` method returns the name of the user, which was then displayed.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 然后调用视图的`getOwner`方法返回一个`UserPrincipal`对象。它的`getName`方法返回用户的名称，然后显示出来。
- en: See also
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: See the *Maintaining basic file attributes using the BasicFileAttributeView*
    recipe for more information about its methods.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其方法的更多信息，请参阅*使用BasicFileAttributeView维护基本文件属性*配方。
- en: Maintaining a file's ACL using the AclFileAttributeView
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AclFileAttributeView维护文件的ACL
- en: The `java.nio.file.attribute.AclFileAttributeView` interface provides access
    to ACL attributes of a file or directory. These attributes include the user principal,
    the type of attribute, and flags and permissions for the file. The ability to
    use this interface allows the user to determine what permissions are available
    and to modify these attributes.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.nio.file.attribute.AclFileAttributeView`接口提供了对文件或目录的ACL属性的访问。这些属性包括用户主体、属性类型以及文件的标志和权限。使用此接口的能力允许用户确定可用的权限并修改这些属性。'
- en: Getting ready
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To determine the attributes of a file or directory:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 确定文件或目录的属性：
- en: Create a `Path` object representing that file or directory.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建代表该文件或目录的`Path`对象。
- en: Use this `Path` object as the first argument of the `Files` class' `getFileAttributeView`
    method.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此`Path`对象作为`Files`类的`getFileAttributeView`方法的第一个参数。
- en: Use `AclFileAttributeView.class` as its second argument.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`AclFileAttributeView.class`作为其第二个参数。
- en: Use the `AclFileAttributeView` object, which was returned to access the list
    of ACL entries for that file or directory.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用返回的`AclFileAttributeView`对象访问该文件或目录的ACL条目列表。
- en: How to do it...
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. In the `main` method, we will examine the
    ACL attributes of the `users.txt` file. The `getFileAttributeView` method is used
    to obtain a view and access the ACL entry list. Two helper methods are used to
    support this example: `displayPermissions` and `displayEntryFlags`. Use the following
    `main` method:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。在`main`方法中，我们将检查`users.txt`文件的ACL属性。使用`getFileAttributeView`方法获取视图并访问ACL条目列表。使用两个辅助方法来支持此示例：`displayPermissions`和`displayEntryFlags`。使用以下`main`方法：
- en: '[PRE16]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the method `displayPermissions` to display the list of permissions for
    the file as follows:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`displayPermissions`方法以显示文件的权限列表如下：
- en: '[PRE17]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the method `displayEntryFlags` method to display the list of ACL flags
    for the file as follows:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`displayEntryFlags`方法以显示文件的ACL标志列表如下：
- en: '[PRE18]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Execute the application. You should get an output similar to the following:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您应该得到类似以下的输出：
- en: '**User Principal Name: BUILTIN\Administrators**'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户主体名称：BUILTIN\Administrators**'
- en: '**ACL Entry Type: ALLOW**'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '**ACL条目类型：允许**'
- en: '**No ACL Entry Flags present**'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**没有ACL条目标志**'
- en: '**Permissions**'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限**'
- en: '**WRITE_ATTRIBUTES EXECUTE DELETE READ_ATTRIBUTES WRITE_DATA READ_ACL READ_DATA
    WRITE_OWNER READ_NAMED_ATTRS WRITE_ACL APPEND_DATA SYNCHRONIZE DELETE_CHILD WRITE_NAMED_ATTRS**'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: WRITE_ATTRIBUTES EXECUTE DELETE READ_ATTRIBUTES WRITE_DATA READ_ACL READ_DATA
    WRITE_OWNER READ_NAMED_ATTRS WRITE_ACL APPEND_DATA SYNCHRONIZE DELETE_CHILD WRITE_NAMED_ATTRS
- en: '**User Principal Name: NT AUTHORITY\SYSTEM**'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主体名称：NT AUTHORITY\SYSTEM
- en: '**ACL Entry Type: ALLOW**'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: ACL条目类型：允许
- en: '**No ACL Entry Flags present**'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 未出现ACL条目标志
- en: '**Permissions**'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 权限
- en: '**WRITE_ATTRIBUTES EXECUTE DELETE READ_ATTRIBUTES WRITE_DATA READ_ACL READ_DATA
    WRITE_OWNER READ_NAMED_ATTRS WRITE_ACL APPEND_DATA SYNCHRONIZE DELETE_CHILD WRITE_NAMED_ATTRS**'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: WRITE_ATTRIBUTES EXECUTE DELETE READ_ATTRIBUTES WRITE_DATA READ_ACL READ_DATA
    WRITE_OWNER READ_NAMED_ATTRS WRITE_ACL APPEND_DATA SYNCHRONIZE DELETE_CHILD WRITE_NAMED_ATTRS
- en: '**User Principal Name: BUILTIN\Users**'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主体名称：BUILTIN\Users
- en: '**ACL Entry Type: ALLOW**'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: ACL条目类型：允许
- en: '**No ACL Entry Flags present**'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 未出现ACL条目标志
- en: '**Permissions**'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 权限
- en: '**READ_DATA READ_NAMED_ATTRS EXECUTE SYNCHRONIZE READ_ATTRIBUTES READ_ACL**'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: READ_DATA READ_NAMED_ATTRS EXECUTE SYNCHRONIZE READ_ATTRIBUTES READ_ACL
- en: '**User Principal Name: NT AUTHORITY\Authenticated Users**'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主体名称：NT AUTHORITY\Authenticated Users
- en: '**ACL Entry Type: ALLOW**'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: ACL条目类型：允许
- en: '**No ACL Entry Flags present**'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 未出现ACL条目标志
- en: '**Permissions**'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 权限
- en: '**READ_DATA READ_NAMED_ATTRS WRITE_ATTRIBUTES EXECUTE DELETE APPEND_DATA SYNCHRONIZE
    READ_ATTRIBUTES WRITE_NAMED_ATTRS WRITE_DATA READ_ACL**'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: READ_DATA READ_NAMED_ATTRS WRITE_ATTRIBUTES EXECUTE DELETE APPEND_DATA SYNCHRONIZE
    READ_ATTRIBUTES WRITE_NAMED_ATTRS WRITE_DATA READ_ACL
- en: How it works...
  id: totrans-416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A `Path` was created to the `users.txt` file. This was then used along with
    the `AclFileAttributeView.class` parameter as the arguments to the `getFileAttributeView`
    method. This returned an instance of the `AclFileAttributeView`.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了到`users.txt`文件的`Path`。然后将其与`AclFileAttributeView.class`参数一起用作`getFileAttributeView`方法的参数。这将返回`AclFileAttributeView`的一个实例。
- en: 'The `AclFileAttributeView` interface has three methods: `name, getAcl`, and
    `setAcl`. For this example, only the `getAcl` method was used, which returned
    a list of `AclEntry` elements. Each entry represents a specific ACL for the file.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`AclFileAttributeView`接口有三种方法：`name, getAcl`和`setAcl`。在本例中，只使用了`getAcl`方法，它返回了一个`AclEntry`元素列表。每个条目代表文件的特定ACL。'
- en: A for each loop was used to iterate through the list. The user principal's name
    and the entry type were displayed. Next the `displayEntryFlags` and `displayPermissions`
    methods were invoked to display more information about the entries.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 使用for each循环来遍历列表。显示了用户主体的名称和条目类型。接下来调用了`displayEntryFlags`和`displayPermissions`方法来显示有关条目的更多信息。
- en: These two methods are similar in construction. A check was made to determine
    if there are any elements in the sets and the appropriate messages were displayed.
    Next, each element of the sets was displayed on a single line to conserve vertical
    space on the output.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法在构造上相似。进行了检查以确定集合中是否有任何元素，并显示了适当的消息。接下来，将集合的每个元素显示在单独的一行上，以节省输出的垂直空间。
- en: There's more...
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `AclFileAttributeView` is derived from the `java.nio.file.attribute.FileOwnerAttributeView`
    interface. This provides access to the `getOwner` and `setOwner` methods. These
    methods either return or set a `UserPrincipal` object respectively for the file
    or directory.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`AclFileAttributeView`源自`java.nio.file.attribute.FileOwnerAttributeView`接口。这提供了对`getOwner`和`setOwner`方法的访问。这些方法分别为文件或目录返回或设置`UserPrincipal`对象。'
- en: 'There are three `AclFileAttributeView` methods:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种`AclFileAttributeView`方法：
- en: The `getAcl` method, which returns a list of ACL entries as illustrated previously
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAcl`方法，返回ACL条目列表，如前所示'
- en: The `setAcl` method, which allows us to add a new attribute to the file
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setAcl`方法，允许我们向文件添加新属性'
- en: The `name` method, which simply returns **acl**
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`方法，简单地返回`acl`'
- en: 'The `getAcl` method will return a list of `AclEntrys`. One of the elements
    of an entry is a `java.nio.file.attribute.UserPrincipal` object. As we saw in
    the earlier example, this represents the users who have access to the file. An
    alternate technique to access a user is to use the `java.nio.file.attribute.UserPrincipalLookupService`
    class. An instance of this class can be obtained using the `FileSystem` class''
    `getUserPrincipalLookupService` method, shown as follows:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAcl`方法将返回一个`AclEntrys`列表。条目的一个元素是一个`java.nio.file.attribute.UserPrincipal`对象。正如我们在前面的示例中看到的，这代表了可以访问文件的用户。访问用户的另一种技术是使用`java.nio.file.attribute.UserPrincipalLookupService`类。可以使用`FileSystem`类的`getUserPrincipalLookupService`方法获取此类的实例，如下所示：'
- en: '[PRE19]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There are two methods available to the service that can look for the users either
    by username or by group name. In the previous code we used the `Administrators`
    group and the user `Richard`.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 服务可用的两种方法可以按用户名或组名查找用户。在前面的代码中，我们使用了`Administrators`组和用户`Richard`。
- en: 'Add this code to the previous example and change the names to reflect groups
    and users on your system. When the code executes, you should receive output similar
    to the following:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码添加到上一个示例中，并更改名称以反映系统中的组和用户。当代码执行时，您应该收到类似以下的输出：
- en: '**BUILTIN\Administrators**'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: BUILTIN\Administrators
- en: '**Richard-PC\Richard**'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: Richard-PC\Richard
- en: However, note that the `UserPrincipal` and `java.nio.file.attribute.GroupPrincipal`
    objects' methods provide little more information than the names of the users.
    User or group names may or may not be case-sensitive depending on the operating
    system. If an invalid name is used, a `java.nio.file.attribute.UserPrincipalNotFoundException`
    is thrown.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，`UserPrincipal`和`java.nio.file.attribute.GroupPrincipal`对象的方法提供的信息比用户的名称更少。用户或组名称可能是大小写敏感的，这取决于操作系统。如果使用无效的名称，将抛出`java.nio.file.attribute.UserPrincipalNotFoundException`。
- en: See also
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Managing file ownership and permissions is discussed in [Chapter 4](ch04.html
    "Chapter 4. Managing Files and Directories"), *Managing Files and Directories*,
    in the *Setting file and directory owner* recipe. Also covered in [Chapter 4](ch04.html
    "Chapter 4. Managing Files and Directories") is the setting of ACL attributes
    as illustrated in the *Managing ACL file permissions* recipe.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。管理文件和目录")中讨论了管理文件所有权和权限的内容，*管理文件和目录*中的*设置文件和目录所有者*配方。[第4章](ch04.html
    "第4章。管理文件和目录")还涵盖了在*管理ACL文件权限*配方中说明的ACL属性的设置。
- en: Maintaining user-defined file attributes using the UserDefinedFileAttributeView
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用UserDefinedFileAttributeView维护用户定义的文件属性
- en: The `java.nio.file.attribute.UserDefinedFileAttributeView` interface permits
    the attachment of a non-standard attribute to a file or directory. These types
    of attributes are sometimes called **extended** attributes. Typically, a user-defined
    attribute stores metadata about a file. This data is not necessarily understood
    or used by the filesystem.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.nio.file.attribute.UserDefinedFileAttributeView`接口允许将非标准属性附加到文件或目录。这些类型的属性有时被称为**扩展**属性。通常，用户定义的属性存储有关文件的元数据。这些数据不一定被文件系统理解或使用。'
- en: These attributes are stored as a name/value pair. The name is a `String` and
    the value is stored as a `ByteBuffer` object. The size of this buffer should not
    exceed `Integer.MAX_VALUE`.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性存储为名称/值对。名称是一个`String`，值存储为`ByteBuffer`对象。该缓冲区的大小不应超过`Integer.MAX_VALUE`。
- en: Getting ready
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'A user-defined attribute must first be attached to a file. This is accomplished
    by:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的属性必须首先附加到文件上。这可以通过以下方式实现：
- en: Obtaining an instance of a `UserDefinedFileAttributeView` object
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`UserDefinedFileAttributeView`对象的实例
- en: Creating an attribute in the form of a `String` name and a `ByteBuffer` value
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个以`String`名称和`ByteBuffer`值形式的属性
- en: Using the `write` method to attach the attribute to a file
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`write`方法将属性附加到文件
- en: The process of reading a user-defined attribute is illustrated in the *There's
    more..*. section of this recipe.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 读取用户定义属性的过程在本配方的*更多内容*部分进行了说明。
- en: How to do it...
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new console application. In the `main` method, we will create a user-defined
    attribute called `publishable` and attach it to the `users.txt` file. Use the
    following `main` method:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制台应用程序。在`main`方法中，我们将创建一个名为`publishable`的用户定义属性，并将其附加到`users.txt`文件。使用以下`main`方法：
- en: '[PRE20]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Execute the application. Your output should appear as follows:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序。您的输出应如下所示：
- en: '**Publishable set**'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置为可发布**'
- en: How it works...
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we created a `Path` object representing the `users.txt` file. We then
    used the `Files` class' `getFileAttributeView` method using the `Path` object,
    and `UserDefinedFileAttributeView.class` for the second argument. This returns
    an instance of the `UserDefinedFileAttributeView` for the file.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个代表`users.txt`文件的`Path`对象。然后使用`Files`类的`getFileAttributeView`方法，使用`Path`对象和`UserDefinedFileAttributeView.class`作为第二个参数。这将返回文件的`UserDefinedFileAttributeView`的实例。
- en: Using this object, we execute the `write` method against it using the attribute
    `publishable`, and created a `java.nio.ByteBuffer` object containing the attribute
    value `true`. The `java.nio.Charset` class' `defaultCharset` method returns a
    `Charset` object that uses the locale and character set used by the underlying
    operating system. The `encode` method took the `String` and returned a `ByteBuffer`
    for the attribute value. We then displayed a simple message indicating the successful
    completion of the process.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个对象，我们对其执行`write`方法，使用属性`publishable`，创建了一个包含属性值`true`的`java.nio.ByteBuffer`对象。`java.nio.Charset`类的`defaultCharset`方法返回一个使用底层操作系统的区域设置和字符集的`Charset`对象。`encode`方法接受`String`并返回属性值的`ByteBuffer`。然后我们显示了一个简单的消息，指示进程成功完成。
- en: There's more...
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `read` method is used to read an attribute. To get a user-defined attribute
    associated with a file, the following steps need to be followed:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`方法用于读取属性。要获取与文件关联的用户定义属性，需要按照以下步骤进行：'
- en: Obtain an instance of a `UserDefinedFileAttributeView` object.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`UserDefinedFileAttributeView`对象的实例。
- en: Create a `String` for the attribute name.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为属性名称创建一个`String`。
- en: Allocate a `ByteBuffer` to hold the value.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配一个`ByteBuffer`来保存值。
- en: Use the `read` method to get the attribute value.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read`方法获取属性值。
- en: 'The following code sequence accomplishes this task for the previously attached
    `publishable` attribute:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码序列完成了先前附加的`publishable`属性的任务：
- en: '[PRE21]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A `String` for the attribute name was created first. Next, a `ByteBuffer` was
    created to hold the attribute value to be retrieved. The `allocate` method allocates
    space as specified by the `UserDefinedFileAttributeView` interface's `size` method.
    This method determines the size of the attached attribute and returns the size.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建属性名称的`String`。接下来，创建一个`ByteBuffer`来保存要检索的属性值。`allocate`方法根据`UserDefinedFileAttributeView`接口的`size`方法指定的空间分配空间。此方法确定附加属性的大小并返回大小。
- en: The `read` method is then executed against the `view` object. The buffer is
    populated with the attribute value. The `flip` method resets the buffer. The buffer
    is converted to a `String` object using the `decode` method, which uses the operating
    system's default character set.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对`view`对象执行`read`方法。缓冲区填充了属性值。`flip`方法重置了缓冲区。使用`decode`方法将缓冲区转换为`String`对象，该方法使用操作系统的默认字符集。
- en: 'Replace the user-defined attribute `write` sequence in the `main` method with
    this `read` sequence. When the application is executed, you should get an output
    similar to the following:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`方法中，用这个`read`序列替换用户定义的属性`write`序列。当应用程序执行时，您应该得到类似以下的输出：
- en: '**true**'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: There is also a `delete` method that is used to remove a user-defined attribute
    from a file or directory. In addition, note that the use of a `UserDefinedFileAttributeView`
    object requires a runtime permission of `accessUserDefinedAttributes`.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`delete`方法，用于从文件或目录中删除用户定义的属性。另外，需要注意使用`UserDefinedFileAttributeView`对象需要运行时权限`accessUserDefinedAttributes`。
