- en: Chapter 1. Getting Started with JavaFX 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用JavaFX 8入门
- en: JavaFX is Java's next-generation **Graphical User Interface (GUI)** toolkit.
    It's a platform that makes it easy to rapidly build high-performance Java client-side
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX是Java的下一代图形用户界面（GUI）工具包。它是一个平台，可以轻松快速地构建高性能的Java客户端应用程序。
- en: JavaFX's underlying engines take advantage of modern GPUs through hardware-accelerated
    graphics, while providing well-designed programming interfaces, thus enabling
    developers to combine graphics, animation, and UI controls.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX的底层引擎利用现代GPU通过硬件加速图形，同时提供设计良好的编程接口，从而使开发人员能够结合图形、动画和UI控件。
- en: These capabilities allow you to deliver a compelling, complex, and fully customizable
    client GUI for your customer that will make them quite impressed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能使您能够为客户提供引人入胜、复杂且完全可定制的客户端GUI，这将让他们非常印象深刻。
- en: While the original targets of Java were the *embedded* and *client* worlds,
    since 2006, many reasons pushed the Java language to become the top development
    platform for the Enterprise world.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Java最初的目标是嵌入式和客户端世界，但自2006年以来，许多原因推动Java语言成为企业世界的顶级开发平台。
- en: But recently, with the JavaFX platform's entrance as the standard client GUI,
    those original targets have started to gain popularity again.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但最近，随着JavaFX平台作为标准客户端GUI的进入，这些最初的目标又开始重新流行起来。
- en: Although it is much more than just a GUI toolkit, JavaFX allows Java developers
    to create client applications with compelling user interfaces that easily connect
    to backend systems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaFX不仅仅是一个GUI工具包，但它允许Java开发人员创建具有引人入胜的用户界面并轻松连接到后端系统的客户端应用程序。
- en: In addition, JavaFX's flexible FXML support allows you to build **MVC** (**Model-View-Controller**)
    architectural pattern applications easily, and use the WYSIWYG approach using
    the Scene Builder tool.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，JavaFX灵活的FXML支持使您能够轻松构建MVC（模型-视图-控制器）架构模式应用，并使用Scene Builder工具采用所见即所得的方法。
- en: JavaFX's bindings feature simplified communication between entities and support
    MVC even further. In addition to that, JavaFX provides fast, customizable UI modeling
    using CSS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX的绑定功能简化了实体之间的通信，并进一步支持MVC。除此之外，JavaFX还提供了使用CSS快速、可定制的UI建模。
- en: By adding a full-fledged `WebView` component with a document model, mapping
    to Java code is easy and provides great support for 3D and media capabilities.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加一个完整的`WebView`组件和文档模型，将其映射到Java代码变得容易，并为3D和媒体功能提供了很好的支持。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is JavaFX and what are its targeted platforms?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是JavaFX以及它的目标平台？
- en: A walk through JavaFX history
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaFX历史概览
- en: JavaFX goals, features, and what's new in JavaFX 8
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaFX的目标、特性以及JavaFX 8的新功能
- en: How to install Java SE 8, JavaFX 8, NetBeans, and configuring environment variables
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装Java SE 8、JavaFX 8、NetBeans，并配置环境变量
- en: Developing a *"Hello World"* JavaFX 8 application, and understanding the JavaFX
    8 basic application architecture and building blocks
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个“Hello World”JavaFX 8应用程序，并了解JavaFX 8的基本应用程序架构和构建模块
- en: JavaFX goals
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaFX的目标
- en: JavaFX came to light with a primary goal – to be used across many types of devices,
    such as embedded devices, smartphones, TVs, tablet computers, and desktops. JavaFX
    also follows Java's *write once, run anywhere* paradigm.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX诞生的初衷是被用于许多类型的设备，如嵌入式设备、智能手机、电视、平板电脑和台式电脑。JavaFX也遵循Java的“一次编写，到处运行”的范式。
- en: JavaFX 8 is written totally from scratch in Java language, it makes you feel
    at home. Therefore, applications written in JavaFX can be deployed on desktops,
    laptops, the Web, embedded systems, mobiles, and tablets.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 8完全使用Java语言编写，让您感到宾至如归。因此，使用JavaFX编写的应用程序可以部署在台式机、笔记本电脑、Web、嵌入式系统、移动设备和平板电脑上。
- en: Embedded systems are no longer supported by Oracle; it is left to companies
    like ARM and others to support it. Mobile devices have never been supported from
    JavaFX 2.x to 8.x; the support exists now only because of **OpenJFX**. The community
    has benefitted from open source bringing JavaFX to mobile environments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统不再得到Oracle的支持；它留给了像ARM等公司来支持。从JavaFX 2.x到8.x，移动设备从未得到支持；现在的支持仅存在于OpenJFX。社区受益于开源将JavaFX带入移动环境。
- en: For more about OpenJFX, visit [https://wiki.openjdk.java.net/display/OpenJFX/Main](https://wiki.openjdk.java.net/display/OpenJFX/Main).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关OpenJFX的更多信息，请访问[https://wiki.openjdk.java.net/display/OpenJFX/Main](https://wiki.openjdk.java.net/display/OpenJFX/Main)。
- en: JavaFX is a set of graphics and a media package that enables developers to design,
    create, test, debug, and deploy rich client applications that operate consistently
    across diverse platforms, in one bundle, without the need for many separate libraries,
    frameworks, and APIs to achieve the same goal. These separate libraries include
    media, UI controls, `WebView`, 3D, and 2D APIs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX是一套图形和媒体包，使开发人员能够设计、创建、测试、调试和部署在各种平台上一致运行的丰富客户端应用程序，而无需使用许多单独的库、框架和API来实现相同的目标。这些单独的库包括媒体、UI控件、`WebView`、3D和2D
    API。
- en: So if you are a Java frontend developer, an experienced Java Swing, Flash/Flex,
    SWT, or web developer looking to take your client-side applications to the next
    level, and you want to develop an attractive and complex user interface for your
    customer, then you are on track learning JavaFX skills – this book is for you.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您是一名Java前端开发人员，一名有经验的Java Swing、Flash/Flex、SWT或Web开发人员，希望将您的客户端应用程序提升到一个新水平，并且想要为您的客户开发一个引人注目且复杂的用户界面，那么学习JavaFX技能是正确的选择——这本书适合您。
- en: Getting started
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: This chapter is an introduction to JavaFX 8; we have already talked about JavaFX
    8 as a technology and why you should care about it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是对JavaFX 8的介绍；我们已经谈到了JavaFX 8作为一种技术以及为什么你应该关心它。
- en: Next, we will navigate its history, exploring its core features and where it
    could be used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将浏览其历史，探索其核心特性以及它可以使用的地方。
- en: Before you start using this book to learn JavaFX 8, we will go through the preparation
    of your development environment by installing various required software bundles,
    to be able to compile and run many of its examples.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用本书学习JavaFX 8之前，我们将通过安装各种所需的软件捆绑包来准备您的开发环境，以便能够编译和运行其中的许多示例。
- en: In this chapter, you will learn how to install the required software, such as
    the**Java Development Kit JDK** and the NetBeans **Integrated Development Environment**
    (**IDE**).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何安装所需的软件，如**Java开发工具包JDK**和NetBeans **集成开发环境**（**IDE**）。
- en: After installing the required software, you will begin by creating a traditional
    *Hello JavaFX 8* example. Once you feel comfortable with the development environment,
    as a final verification that we are on the right track, we will walk through the
    Hello JavaFX 8 source code to understand the basic JavaFX 8 application architecture.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所需的软件后，您将首先创建一个传统的*Hello JavaFX 8*示例。一旦您对开发环境感到满意，作为我们正在正确的轨道上的最终验证，我们将浏览Hello
    JavaFX 8源代码，以了解基本的JavaFX 8应用程序架构。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: If you are already familiar with the installation of the JDK and the NetBeans
    IDE, you can skip to [Chapter 2](ch02.html "Chapter 2. JavaFX 8 Essentials and
    Creating a Custom UI"), *JavaFX 8 Essentials and Creating a custom UI*, which
    covers JavaFX 8 fundamentals and how to create a custom UI component.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经熟悉了JDK和NetBeans IDE的安装，您可以跳转到[第2章](ch02.html "第2章。JavaFX 8基础知识和创建自定义UI")，*JavaFX
    8基础知识和创建自定义UI*，其中涵盖了JavaFX 8的基础知识以及如何创建自定义UI组件。
- en: So what you are waiting for? Let's get started!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你还在等什么？让我们开始吧！
- en: JavaFX history
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaFX历史
- en: You might believe JavaFX is quite a new technology, but it actually isn't. JavaFX
    has been here for a long time; unofficially since 2005\. Ever since Sun Microsystems
    acquired the company *SeeBeyond*, there has been a graphics-rich scripting language
    known as **F3** (**F**orm **F**ollows **F**unction), which was created by engineer
    Chris Oliver.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为JavaFX是一种相当新的技术，但实际上并不是。JavaFX已经存在很长时间了；自2005年以来就一直存在。自从Sun Microsystems收购了*SeeBeyond*公司以来，就有了一个名为**F3**（**F**orm
    **F**ollows **F**unction）的图形丰富的脚本语言，由工程师Chris Oliver创建。
- en: At the JavaOne 2007 conference, Sun Microsystems officially unveiled JavaFX
    as the language's name instead of F3\. During the period 2007 to 2010, Oracle
    acquired many big companies like BEA Systems, JD Edwards, Siebel Systems, and
    so on. I was working for Oracle with the responsibility of integrating different
    customer support channels to the Oracle support website *MetaLink*, as it was
    called at that time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在2007年的JavaOne大会上，Sun Microsystems正式将JavaFX作为语言的名称公布，而不是F3。在2007年至2010年期间，甲骨文收购了许多大公司，如BEA
    Systems、JD Edwards、Siebel Systems等。当时我正在甲骨文工作，负责将不同的客户支持渠道整合到甲骨文支持网站*MetaLink*中。
- en: On April 20, 2009, Oracle Corporation announced the acquisition of Sun Microsystems,
    making Oracle the new steward of JavaFX.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年4月20日，甲骨文公司宣布收购Sun Microsystems，使甲骨文成为JavaFX的新管理者。
- en: At JavaOne 2010, Oracle announced the JavaFX roadmap, which included its plans
    to phase out the JavaFX 1.3 scripting language and recreate the JavaFX platform
    for the Java platform as Java-based APIs. As promised, JavaFX 2.0 SDK was released
    at JavaOne in October 2011.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在2010年的JavaOne大会上，甲骨文宣布了JavaFX路线图，其中包括计划淘汰JavaFX 1.3脚本语言并为基于Java的API重新创建JavaFX平台。如承诺的那样，JavaFX
    2.0 SDK于2011年10月的JavaOne上发布。
- en: In addition to the release of JavaFX 2.0, Oracle took the platform to the next
    level by announcing its commitment to take steps to make JavaFX open source, thus
    allowing Java's versatile and strong community to help move the platform forward.
    Making JavaFX open source increased its adoption, enabled a quicker turnaround
    time on bug fixes, and generated new enhancements.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了发布JavaFX 2.0之外，Oracle还通过宣布致力于采取措施使JavaFX开源，从而允许Java多才多艺和强大的社区帮助推动平台发展。JavaFX开源增加了其采用率，使得错误修复的周转时间更快，并产生了新的增强功能。
- en: Between the versions JavaFX 2.1 and 2.2, the number of new features grew rapidly.
    JavaFX 2.1 was the official release of the Java SDK on Mac OS. JavaFX 2.2 was
    the official release of the Java SDK on the Linux operating system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaFX 2.1和2.2之间，新功能的数量迅速增长。JavaFX 2.1是Java SDK在Mac OS上的官方发布。JavaFX 2.2是Java
    SDK在Linux操作系统上的官方发布。
- en: There was no such thing as JavaFX 3.x, but the big change in the Java development
    world happened with the Java SE 8 release, which was announced on March 18, 2014\.
    Java SE 8 has many new APIs and language enhancements, which include **Lambdas**,
    Stream API, Nashorn JavaScript engine, and *JavaFX APIs*, which are being incorporated
    into standard JDK bundles, and JavaFX version becomes 8 as direct successor to
    JavaFX 2.0.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 没有JavaFX 3.x这样的东西，但是在2014年3月18日宣布的Java SE 8发布中，Java开发世界发生了重大变化。Java SE 8具有许多新的API和语言增强功能，包括**Lambda**、Stream
    API、Nashorn JavaScript引擎和*JavaFX API*，这些都被纳入标准JDK捆绑包中，JavaFX版本成为直接继承JavaFX 2.0的8。
- en: To see all of the new features in Java SE 8, visit [http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html](http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看Java SE 8中的所有新功能，请访问[http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html](http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html)。
- en: When is JavaFX 8 available?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaFX 8何时可用？
- en: The answer is *now*. As mentioned before, Java SE 8 was released on March 18,
    2014\. For developers who use Java to build client-site applications, the JavaFX
    rich Internet application framework supports Java 8 now.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是*现在*。如前所述，Java SE 8于2014年3月18日发布。对于使用Java构建客户端应用程序的开发人员，JavaFX丰富的互联网应用程序框架现在支持Java
    8。
- en: Most of the Java enterprise edition vendors support Java 8 too. Whether you
    move to Java SE 8 right away depends on the kind of projects you're working on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Java企业版供应商也支持Java 8。是否立即转移到Java SE 8取决于您正在处理的项目类型。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: In fact, as outlined in the Oracle JDK Support Roadmap, after April 2015, Oracle
    will not post further updates of Java SE 7 to its public download sites.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，根据Oracle JDK支持路线图，在2015年4月之后，Oracle将不会在其公共下载站点上发布Java SE 7的进一步更新。
- en: The JavaFX APIs are available as a fully integrated feature of the **Java SE
    Runtime Environment** (**JRE**) and JDK. The JDK is available for all major desktop
    platforms (*Windows*, *Mac OS X*, *Solaris*, and *Linux*), therefore JavaFX will
    also run on all major desktop platforms.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX API作为**Java SE Runtime Environment**（**JRE**）和JDK的完全集成功能可用。JDK适用于所有主要桌面平台（*Windows*、*Mac
    OS X*、*Solaris*和*Linux*），因此JavaFX也将在所有主要桌面平台上运行。
- en: 'Relating to JavaFX 8, it supports the following APIs:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JavaFX 8，它支持以下API：
- en: 3D graphics
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D图形
- en: Rich text support
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 富文本支持
- en: Printing APIs.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印API。
- en: JavaFX features
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaFX功能
- en: 'The following features are included in JavaFX 8 and later releases as per JavaFX''s
    official documentation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据JavaFX的官方文档，以下功能包括在JavaFX 8及以后的版本中：
- en: '**Java APIs**: JavaFX is a Java library that consists of classes and interfaces
    that are written in Java code.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java API**：JavaFX是一个由Java代码编写的类和接口的Java库。'
- en: '**FXML and Scene Builder**: This is an XML-based declarative markup language
    for constructing a JavaFX application user interface. You can code in FXML or
    use JavaFX Scene Builder to interactively design the GUI. Scene Builder generates
    FXML markup that can be ported to an IDE like NetBeans, where you can add the
    business logic. Moreover, the FXML file that is generated can be used directly
    inside the JavaFX application.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FXML和Scene Builder**：这是一种基于XML的声明性标记语言，用于构建JavaFX应用程序用户界面。您可以在FXML中编码，也可以使用JavaFX
    Scene Builder交互式设计GUI。Scene Builder生成可以移植到像NetBeans这样的IDE中的FXML标记，您可以在其中添加业务逻辑。此外，生成的FXML文件可以直接在JavaFX应用程序中使用。'
- en: '**WebView**: This is a web component that uses `WebKit`, an HTML render engine
    technology, to make it possible to embed web pages within a JavaFX application.
    JavaScript running in `WebView` can call Java APIs and vice-versa.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebView**：这是一个Web组件，使用`WebKit`，一种HTML渲染引擎技术，可以在JavaFX应用程序中嵌入网页。在`WebView`中运行的JavaScript可以调用Java
    API，反之亦然。'
- en: '**Swing/SWT interoperability**: The existing Swing and SWT applications can
    benefit from JavaFX features such as rich graphics, media playback, and embedded
    web content.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swing/SWT互操作性**：现有的Swing和SWT应用程序可以从JavaFX功能中受益，如丰富的图形、媒体播放和嵌入式网页内容。'
- en: '**Built-in UI controls and CSS**: JavaFX provides all the major UI controls,
    and some extra uncommon controls like charts, pagination, and accordion that are
    required to develop a full-featured application. Components can be skinned with
    standard web technologies such as CSS.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置UI控件和CSS**：JavaFX提供了所有主要的UI控件，以及一些额外的不常见的控件，如图表、分页和手风琴，这些控件是开发完整功能的应用程序所需的。组件可以使用标准的Web技术（如CSS）进行皮肤化。'
- en: '**3D graphics features**: Support for the 3D graphics library is included.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D图形功能**：包括对3D图形库的支持。'
- en: '**Canvas API**: You can draw directly inside a JavaFX scene area using the
    Canvas API, which consists of one graphical element (node).'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Canvas API**：您可以使用Canvas API直接在JavaFX场景区域内绘制，它由一个图形元素（节点）组成。'
- en: '**Multitouch support**: Multitouch operations are supported based on the capabilities
    of the underlying platform.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多点触控支持**：基于底层平台的能力支持多点触控操作。'
- en: '**Hardware-accelerated graphics pipeline**: JavaFX graphics are based on the
    graphics-rendering pipeline, *Prism*. The Prism engine smoothly and quickly renders
    JavaFX graphics when used with a supported graphics card or **graphics processing
    unit** (**GPU**). If a system does not feature one of them, then Prism defaults
    to the software-rendering stack.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件加速图形管道**：JavaFX图形基于图形渲染管道*Prism*。当与支持的图形卡或**图形处理单元**（**GPU**）一起使用时，Prism引擎可以平滑快速地渲染JavaFX图形。如果系统不具备其中之一，则Prism将默认为软件渲染堆栈。'
- en: '**High-performance media engine**: This engine provides a stable, low-latency
    media framework that is based on the `GStreamer` multimedia framework. The playback
    of web multimedia content is supported with the media pipeline.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能媒体引擎**：该引擎提供了一个稳定的、低延迟的基于`GStreamer`多媒体框架的媒体框架。支持Web多媒体内容的播放。'
- en: '**Self-contained deployment model**: Self-contained application packages have
    all of the application resources and a private copy of the Java and JavaFX runtimes.
    They are distributed as native installable packages and provide the same installation
    and launch experience as native applications for that operating system.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自包含部署模型**：自包含应用程序包含所有应用程序资源和Java和JavaFX运行时的私有副本。它们被分发为本机可安装的软件包，并为该操作系统提供与本机应用程序相同的安装和启动体验。'
- en: What's new in JavaFX 8
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaFX 8的新功能
- en: 'The following is a brief summary of the new features and significant product
    changes made in the JavaFX component of the Java SE 8 release:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Java SE 8版本的JavaFX组件中新增功能和重大产品变更的简要总结：
- en: The new *Modena theme* is now the default theme for JavaFX applications.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的*Modena主题*现在是JavaFX应用程序的默认主题。
- en: Support for additional HTML5 features, including Web Sockets, Web Workers, Web
    Fonts, and printing capabilities have been added.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了对其他HTML5功能的支持，包括Web Sockets、Web Workers、Web Fonts和打印功能。
- en: The API enables you to embed **Swing** content into JavaFX applications with
    the new `SwingNode` class, which improves the Swing interoperability feature.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该API使您能够使用新的`SwingNode`类将**Swing**内容嵌入到JavaFX应用程序中，从而改进了Swing互操作性功能。
- en: '`DatePicker`, `Spinner`, and `TableView` built-in UI controls are now available.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在提供了内置的UI控件`DatePicker`、`Spinner`和`TableView`。
- en: It provides the public JavaFX printing APIs through the `javafx.print` package.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过`javafx.print`包提供了公共JavaFX打印API。
- en: Support for Hi-DPI displays has been made available.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持高DPI显示。
- en: CSS-styleable classes became public APIs.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS可样式化类成为公共API。
- en: A scheduled service class has been introduced.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入了一个计划服务类。
- en: The 3D graphics library has been enhanced with several new API classes.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D图形库已经增强了几个新的API类。
- en: Major updates have been added to the *Camera API* class in this release.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此版本中，*Camera API*类进行了重大更新。
- en: Now JavaFX 8 supports rich text capabilities. These include bidirectional and
    complex text scripts such as Thai and Hindi in UI controls, and multiline, multistyle
    text in text nodes.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在JavaFX 8支持丰富的文本功能。这些包括在UI控件中支持泰语和印地语等双向和复杂文本脚本，以及文本节点中的多行、多样式文本。
- en: Dialogs and accessibility APIs are supported.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话框和辅助功能API得到支持。
- en: In [Appendix](apa.html "Appendix A. Become a JavaFX Guru"), *Become a JavaFX
    Guru*, I have provided a list of all the references (links, books, magazines,
    articles, blogs, and tools) and real JavaFX 8 production applications you will
    need to become a JavaFX guru.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在[附录](apa.html "附录 A. 成为JavaFX专家")中，*成为JavaFX专家*，我提供了您成为JavaFX专家所需的所有参考资料（链接、书籍、杂志、文章、博客和工具）和真实的JavaFX
    8生产应用程序的清单。
- en: The following figure shows the `Ensemble8.jar` application built using JavaFX
    8, showing examples dealing with various JavaFX 8 components, topics and concepts.
    More interestingly, the source code is available to learn from and modify – consult
    the last chapter to see how to install this application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了使用JavaFX 8构建的`Ensemble8.jar`应用程序，展示了处理各种JavaFX 8组件、主题和概念的示例。更有趣的是，源代码可供学习和修改-请参阅最后一章以了解如何安装此应用程序。
- en: '![What''s new in JavaFX 8](img/B03998_01_01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![JavaFX 8的新功能](img/B03998_01_01.jpg)'
- en: JavaFX 8 applications
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 8应用程序
- en: 'There are many topics covered by the application, especially the new JavaFX
    8 3D APIs, which can be found under the Graphics 3D section as seen in the following
    figure:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序涵盖了许多主题，特别是新的JavaFX 8 3D API，可以在下图中的3D图形部分找到：
- en: '![What''s new in JavaFX 8](img/B03998_01_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![JavaFX 8的新功能](img/B03998_01_02.jpg)'
- en: JavaFX 8 3D applications
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 8 3D应用程序
- en: Installing the required software
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件
- en: So far, we have had a good introduction to JavaFX and I am as eager as you to
    start creating and launching our first `"Hello JavaFX 8"` application. But this
    can't happen without downloading and installing the right tools that will allow
    us to create and compile most of the book's code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经对JavaFX有了一个很好的介绍，我和你一样急于开始创建和启动我们的第一个“Hello JavaFX 8”应用程序。但是，如果没有下载和安装允许我们创建和编译本书大部分代码的正确工具，这是不可能的。
- en: You'll need to download and install *Java 8 Java Development Kit* (JDK) or a
    later version. Not the runtime version (JRE).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要下载并安装*Java 8 Java开发工具包*（JDK）或更高版本。而不是运行时版本（JRE）。
- en: 'Download the latest Java SE 8u45 JDK or higher from the following location:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下位置下载最新的Java SE 8u45 JDK或更高版本：
- en: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
- en: 'Download and install NetBeans 8.0.2 or higher from the following link [https://netbeans.org/downloads](https://netbeans.org/downloads),
    though the NetBeans IDE **All** Bundle is recommended, *you can use the Java EE
    bundle as well*, as shown in the figure:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装NetBeans 8.0.2或更高版本[https://netbeans.org/downloads](https://netbeans.org/downloads)，尽管推荐使用NetBeans
    IDE **All** Bundle，*您也可以使用Java EE捆绑包*，如图所示：
- en: '![Installing the required software](img/B03998_01_03.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![安装所需的软件](img/B03998_01_03.jpg)'
- en: NetBeans bundles download.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans捆绑包下载。
- en: 'Currently, JavaFX 8 runs on the following operating systems:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，JavaFX 8可以在以下操作系统上运行：
- en: Windows OS (XP, Vista, 7, 8) 32- and 64-bit
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows操作系统（XP、Vista、7、8）32位和64位
- en: Mac OS X (64-bit)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OS X（64位）
- en: Linux (32- and 64-bit), Linux ARMv6/7 VFP, HardFP ABI (32-bit)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux（32位和64位），Linux ARMv6/7 VFP，HardFP ABI（32位）
- en: Solaris (32- and 64-bit)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solaris（32位和64位）
- en: Installing Java SE 8 JDK
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Java SE 8 JDK
- en: 'The steps outlined in this section will guide you to successfully download
    and install Java SE 8\. Download the Java SE 8 JDK from the following location:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本节概述的步骤将指导您成功下载和安装Java SE 8。从以下位置下载Java SE 8 JDK：
- en: '[http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)'
- en: In the following steps, the Java SE 8u45 JDK 64-bit version (at the time of
    writing) on the Mac OS X Yosemite (10.10.3) operating system will be used as an
    example.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，将以Mac OS X Yosemite（10.10.3）操作系统上的Java SE 8u45 JDK 64位版本（写作时）为例。
- en: 'The steps are similar on other operating systems and JDK versions. However,
    if your environment is different, refer to the following link for additional details:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其他操作系统和JDK版本的步骤类似。但是，如果您的环境不同，请参考以下链接获取更多详细信息：
- en: '[http://docs.oracle.com/javase/8/docs/technotes/guides/install/toc.html](http://docs.oracle.com/javase/8/docs/technotes/guides/install/toc.html)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javase/8/docs/technotes/guides/install/toc.html](http://docs.oracle.com/javase/8/docs/technotes/guides/install/toc.html)'
- en: 'The following are steps to install the Java SE 8 JDK:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是安装Java SE 8 JDK的步骤：
- en: Install the Java 8 JDK by launching the image file `jdk-8u45-macosx-x64.dmg`.
    A screen will appear that looks like the following screenshot once you've launched
    the JDK 8 setup image file. That's the package setup file. Double-click on it
    and the installer will launch:![Installing Java SE 8 JDK](img/B03998_01_04.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过启动图像文件`jdk-8u45-macosx-x64.dmg`来安装Java 8 JDK。一旦启动了JDK 8设置图像文件，屏幕将出现如下截图。这是软件包设置文件。双击它，安装程序将启动：![安装Java
    SE 8 JDK](img/B03998_01_04.jpg)
- en: JDK 8 setup image file
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 8设置图像文件
- en: Tip
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Typically, you will need administrator rights on the machine to install the
    software.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您需要在计算机上拥有管理员权限才能安装软件。
- en: Begin the setup of the Java 8 JDK. The screen in the following screenshot will
    appear at the beginning of the installation process. Click on the **Continue**
    button, next on the **Installation** type screen wizard, click on **Install**
    to begin the installation.![Installing Java SE 8 JDK](img/B03998_01_05.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始设置Java 8 JDK。在安装过程开始时，将出现以下屏幕截图中的屏幕。单击**继续**按钮，然后在**安装**类型屏幕向导上，单击**安装**开始安装。![安装Java
    SE 8 JDK](img/B03998_01_05.jpg)
- en: Java SE Development Kit 8 setup
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Java SE开发工具包8设置
- en: Once you hit **Install**, you may be asked to supply your password. Supply it,
    click on **Ok** and the installation will proceed with a progress bar, as shown
    in following figure:![Installing Java SE 8 JDK](img/B03998_01_06.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击**安装**，您可能会被要求输入密码。输入密码，单击**确定**，安装将继续进行，显示一个进度条，如下图所示：![安装Java SE 8 JDK](img/B03998_01_06.jpg)
- en: Java SE Development Kit 8 installation in progress
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Java SE开发工具包8安装进行中
- en: The setup will complete the installation of the Java 8 SE Development Kit. click
    on the **Close** button to exit.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置将完成Java 8 SE开发工具包的安装。单击**关闭**按钮退出。
- en: Setting environment variables
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: 'Now you need to set a couple of key environment variables. How you set them
    and the values they should be set to vary depending on your operating system.
    The two variables to be set are:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要设置一些关键的环境变量。如何设置它们以及它们应该设置的值取决于您的操作系统。需要设置的两个变量是：
- en: '**JAVA_HOME**: This tells your operating system where the Java installation
    directory is.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JAVA_HOME**：这告诉您的操作系统Java安装目录在哪里。'
- en: '**PATH**: This specifies where the Java executable directory resides. This
    environment variable lets the system search paths or directories containing executable
    files. The Java executables reside in the bin directory under the `JAVA_HOME`
    home directory.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PATH**：这指定了Java可执行目录的位置。这个环境变量让系统搜索包含可执行文件的路径或目录。Java可执行文件位于`JAVA_HOME`主目录下的bin目录中。'
- en: To make `JAVA_HOME` and `PATH` more permanent, you will want to add them to
    your system in such a way that they are always made available whenever you boot
    or log in. Depending on your operating system, you will need to be able to edit
    environment variable names and values.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`JAVA_HOME`和`PATH`更加永久，您将希望以这样的方式将它们添加到系统中，以便在每次启动或登录时都可以使用。根据您的操作系统，您需要能够编辑环境变量名称和值。
- en: In the *Windows environment*, you can use the keyboard shortcut *Windows logo
    key + Pause/Break key* and then click on **Advanced system settings** to display
    the **Systems Property** dialog.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Windows环境*中，您可以使用键盘快捷键*Windows徽标键+暂停/中断键*，然后单击**高级系统设置**以显示**系统属性**对话框。
- en: 'Next, click on **Environment Variables**. This is where you can add, edit,
    and delete environment variables. You will add or edit the `JAVA_HOME` environment
    variable by using the installed home directory as the value. Shown in this screenshot
    is the Environment Variables dialog on the Windows operating system:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，单击**环境变量**。这是您可以添加、编辑和删除环境变量的地方。您将使用已安装的主目录作为值来添加或编辑`JAVA_HOME`环境变量。在Windows操作系统的环境变量对话框中显示的是这个屏幕截图：
- en: '![Setting environment variables](img/B03998_01_07.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![设置环境变量](img/B03998_01_07.jpg)'
- en: Windows Environment Variables
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Windows环境变量
- en: 'Let''s set the environment variables:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置环境变量：
- en: 'To set your `JAVA_HOME` environment variable for the **Mac OS X** platform,
    you will need to launch a terminal window to edit your home directory''s `.bash_profile`
    file by adding the following export command:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要为**Mac OS X**平台设置`JAVA_HOME`环境变量，您需要启动终端窗口，编辑您的主目录的`.bash_profile`文件，添加以下导出命令：
- en: '[PRE0]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On **Linux** and other **Unix** operating systems that use Bash shell environments,
    launch a terminal window and edit either the `~/.bashrc` or `~/.profile` file
    to contain the export commands:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用Bash shell环境的**Linux**和其他**Unix**操作系统上，启动终端窗口并编辑`~/.bashrc`或`~/.profile`文件，包含导出命令：
- en: '[PRE1]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On Linux and other Unix operating systems that use `C` shell (csh) environments,
    launch a terminal window and edit either the `~/.cshrc` or `~/.login` file to
    contain the `setenv` commands:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用`C` shell（csh）环境的Linux和其他Unix操作系统上，启动终端窗口并编辑`~/.cshrc`或`~/.login`文件，包含`setenv`命令：
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you''ve set up your path and the `JAVA_HOME` environment variables, you
    will want to verify your setup by launching a terminal window and executing the
    following two commands from the command prompt:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好路径和`JAVA_HOME`环境变量后，您将希望通过启动终端窗口并从命令提示符执行以下两个命令来验证您的设置：
- en: '[PRE3]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The output in each case should display a message indicating the Java SE 8 version
    of the language and runtime.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每种情况下的输出都应该显示一个消息，指示语言和运行时的Java SE 8版本。
- en: Installing the NetBeans IDE
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装NetBeans IDE
- en: 'When developing JavaFX applications, you will be using the NetBeans IDE (or
    any other IDE of your preference). Be sure to download the correct NetBeans version
    containing JavaFX. To install the NetBeans IDE, follow these steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发JavaFX应用程序时，您将使用NetBeans IDE（或您喜欢的任何其他IDE）。请确保下载包含JavaFX的正确NetBeans版本。要安装NetBeans
    IDE，请按照以下步骤进行：
- en: 'Download the NetBeans IDE 8.0.2 or later from the following location:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载NetBeans IDE 8.0.2或更高版本：
- en: '[https://netbeans.org/downloads/index.html](https://netbeans.org/downloads/index.html)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://netbeans.org/downloads/index.html](https://netbeans.org/downloads/index.html)'
- en: 'Launch the `.dmg` image file `netbeans-8.0.2-macosx.dmg`. The image will be
    verified and a folder containing the installer package archive, `netbeans-8.0.2.pkg`,
    will open; double-click on it to launch the installer. A dialog box will appear
    with the message: *This package will run a program to determine if the software
    can be installed.* Click on the **Continue** button.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`.dmg`镜像文件`netbeans-8.0.2-macosx.dmg`。镜像将被验证，打开一个包含安装程序包存档`netbeans-8.0.2.pkg`的文件夹；双击它以启动安装程序。将出现一个带有消息的对话框：*此软件包将运行一个程序来确定是否可以安装软件。*单击**继续**按钮。
- en: Once you've launched the NetBeans installation dialog, click on **continue**
    again. Next, accept the license and click on **Continue** and then on **Agree**.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启动了NetBeans安装对话框，再次点击**继续**。接下来，接受许可证并点击**继续**，然后点击**同意**。
- en: Click on the **Install** button to proceed. The following screenshot shows a
    **Mac** security warning prompt; supply your password and click on **Install Software**.![Installing
    the NetBeans IDE](img/B03998_01_08.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮继续。下面的屏幕截图显示了一个**Mac**安全警告提示；输入密码并点击**安装软件**。![安装NetBeans IDE](img/B03998_01_08.jpg)
- en: The Mac Security Warning dialog
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Mac安全警告对话框
- en: The NetBeans IDE installation processes will begin. The following screenshot
    shows the installation progress bar:![Installing the NetBeans IDE](img/B03998_01_09.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NetBeans IDE安装过程将开始。下面的屏幕截图显示了安装进度条：![安装NetBeans IDE](img/B03998_01_09.jpg)
- en: Installation progress
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 安装进度
- en: Click on the **Close** button to complete the installation, as shown here:![Installing
    the NetBeans IDE](img/B03998_01_10.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**关闭**按钮完成安装，如下所示：![安装NetBeans IDE](img/B03998_01_10.jpg)
- en: Setup complete
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成
- en: Now you are ready to move on and create JavaFX applications.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好继续创建JavaFX应用程序了。
- en: Creating "Hello World" JavaFX-style applications
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建“Hello World” JavaFX风格的应用程序
- en: The best way to show you what it is like to create and build a JavaFX application
    would be with a `Hello World` application.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 展示创建和构建JavaFX应用程序的最佳方式是使用“Hello World”应用程序。
- en: In this section, you will be using the NetBeans IDE we just installed to develop,
    compile, and run a JavaFX-based `Hello World` application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将使用刚刚安装的NetBeans IDE来开发、编译和运行基于JavaFX的“Hello World”应用程序。
- en: Using the Netbeans IDE
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Netbeans IDE
- en: 'To quickly get started with creating, coding, compiling, and running a simple
    JavaFX-style `Hello World` application using the NetBeans IDE, follow the steps
    outlined in this section:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速开始创建、编码、编译和运行一个简单的JavaFX风格的“Hello World”应用程序，使用NetBeans IDE，按照本节中概述的步骤进行操作：
- en: From the **File** menu, choose **New Project**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中选择**新建项目**。
- en: From **JavaFX application category**, choose **JavaFX Application**. Click on
    **Next**.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**JavaFX应用程序类别**中选择**JavaFX应用程序**。点击**下一步**。
- en: Name the project `HelloJavaFX`. Optionally, you can define the package structure
    for application classes. Then click on **Finish** as shown in the following screenshot:![Using
    the Netbeans IDE](img/B03998_01_11.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为`HelloJavaFX`。可选地，您可以为应用程序类定义包结构。然后点击**完成**，如下所示：![使用Netbeans IDE](img/B03998_01_11.jpg)
- en: New JavaFX application wizard
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 新的JavaFX应用程序向导
- en: NetBeans opens the `HelloJavaFX.java` file and populates it with the code for
    a basic "Hello World" application.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans打开`HelloJavaFX.java`文件，并用基本的“Hello World”应用程序的代码填充它。
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will find that this version of code has been modified a bit from the one
    NetBeans actually creates, and you can compare them to find differences, but they
    have the same structure. I did that to show the result on the text node on the
    `Scene` instead of the console when clicking on the **Say 'Hello World'** button.
    For that, a `VBox` container has also been used.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现，这个版本的代码与NetBeans实际创建的代码有些不同，您可以进行比较以找出差异，但它们具有相同的结构。我这样做是为了在单击**Say 'Hello
    World'**按钮时，将结果显示在`Scene`上的文本节点上，而不是控制台上。为此，还使用了`VBox`容器。
- en: Right-click on the project and click on **Run** from the menu as shown here:![Using
    the Netbeans IDE](img/B03998_01_12.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目，然后从菜单中点击**运行**，如下所示：![使用Netbeans IDE](img/B03998_01_12.jpg)
- en: Running the application
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: NetBeans will compile and run the application. The output should be as shown
    in the following screenshot:![Using the Netbeans IDE](img/B03998_01_13.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NetBeans将编译和运行该应用程序。输出应该如下所示的屏幕截图：![使用Netbeans IDE](img/B03998_01_13.jpg)
- en: JavaFX Hello World launched from the NetBeans IDE
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从NetBeans IDE启动的JavaFX Hello World
- en: Click on the button and you should see the following result:![Using the Netbeans
    IDE](img/B03998_01_14.jpg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮，您应该看到以下结果：![使用Netbeans IDE](img/B03998_01_14.jpg)
- en: JavaFX Hello World results
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX Hello World结果
- en: 'Here is the modified code of the basic Hello world application (`HelloJavaFX.java`):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基本的Hello world应用程序（`HelloJavaFX.java`）的修改后的代码：
- en: '[PRE4]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'Here are the important things to know about the basic structure of a JavaFX
    application:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于JavaFX应用程序基本结构的重要信息：
- en: The main class for a JavaFX application should extend the `javafx.application.Application`
    class. The `start()` method is the *main entry point* for all JavaFX applications.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaFX应用程序的主类应该扩展`javafx.application.Application`类。`start()`方法是所有JavaFX应用程序的*主入口点*。
- en: A JavaFX application defines the user interface container by means of a *stage*
    and a *scene*. The JavaFX `Stage` class is the top-level JavaFX container. The
    JavaFX `Scene` class is the container for all content. The following code snippet
    creates a stage and scene and makes the scene visible in a given pixel size –
    `new Scene(root, 300, 250)`.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaFX应用程序通过*舞台*和*场景*定义用户界面容器。JavaFX `Stage`类是顶级JavaFX容器。JavaFX `Scene`类是所有内容的容器。以下代码片段创建了一个舞台和场景，并使场景在给定的像素大小下可见
    - `new Scene(root, 300, 250)`。
- en: In JavaFX, the content of the scene is represented as a hierarchical scene graph
    of nodes. In this example, the root node is a `VBox` layout object, which is a
    resizable layout node. This means that the root node's size tracks the scene's
    size and changes when a user resizes the stage.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JavaFX中，场景的内容表示为节点的分层场景图。在本例中，根节点是一个`VBox`布局对象，它是一个可调整大小的布局节点。这意味着根节点的大小跟踪场景的大小，并且在用户调整舞台大小时发生变化。
- en: 'The `VBox` is used here as the container that arranges its content nodes vertically
    in a single column with multiple rows. We have added the button **btn** control
    to the first row in the column, then the text **message** control to the second
    row on the same column, with vertical space of 10 pixels, as in the following
    code snippet:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，`VBox`被用作容器，以单列多行的形式垂直排列其内容节点。我们将按钮**btn**控件添加到列中的第一行，然后将文本**message**控件添加到同一列的第二行，垂直间距为10像素，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We set the button control with text, plus an event handler to set the message
    text control to **Hello World! JavaFX style :)** when the button is clicked on.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设置了带有文本的按钮控件，以及一个事件处理程序，当单击按钮时，将消息文本控件设置为**Hello World! JavaFX style :)**。
- en: 'You might note a strange code syntax written in Java, with no compiler errors.
    This is a **Lambda** expression, which has been added to Java SE 8, and we are
    going to talk about it briefly in [Chapter 2](ch02.html "Chapter 2. JavaFX 8 Essentials
    and Creating a Custom UI"), *JavaFX 8 Essentials and Creating a custom UI*. With
    a slight comparison to old anonymous inner classes style, it is cleaner and more
    concise to use Lambda expression now. Have a look at this comparison of code:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能会注意到在Java中有一种奇怪的代码语法，没有编译器错误。这是一个**Lambda**表达式，它已经添加到了Java SE 8中，我们将在[第2章](ch02.html
    "第2章。JavaFX 8 Essentials and Creating a Custom UI") *JavaFX 8 Essentials and Creating
    a custom UI*中简要讨论它。与旧的匿名内部类风格相比，现在使用Lambda表达式更清晰、更简洁。看一下这段代码的比较：
- en: 'Old School:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 老派：
- en: '[PRE6]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'New Era:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 新时代：
- en: '[PRE7]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `main()` method is not required for JavaFX applications when the **JAR**
    file for the application is created with the JavaFX Packager tool, which embeds
    the JavaFX Launcher in the JAR file.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用JavaFX Packager工具创建应用程序的**JAR**文件时，不需要`main()`方法，该工具会将JavaFX Launcher嵌入JAR文件中。
- en: However, it is useful to include the `main()` method so you can run JAR files
    that were created without the JavaFX Launcher, such as when using an IDE in which
    the JavaFX tools are not fully integrated. Also, **Swing** applications that embed
    JavaFX code require the `main()` method.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，包括`main()`方法是有用的，这样您就可以运行没有JavaFX Launcher创建的JAR文件，比如在使用JavaFX工具没有完全集成的IDE中。此外，嵌入JavaFX代码的**Swing**应用程序需要`main()`方法。
- en: Here, in our `main()` method's entry point, we launch the JavaFX application
    by simply passing in the command-line arguments to the `Application.launch()`
    method.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的`main()`方法的入口点，我们通过简单地将命令行参数传递给`Application.launch()`方法来启动JavaFX应用程序。
- en: After the `Application.launch()` method has executed, the application will enter
    a ready state and the framework internals will invoke the `start()` method to
    begin.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Application.launch()`方法执行后，应用程序将进入就绪状态，框架内部将调用`start()`方法开始执行。
- en: At this point, the program execution occurs on the *JavaFX application thread*
    and not on the **main thread**. When the `start()` method is invoked, a JavaFX
    `javafx.stage.Stage` object is available for you to use and manipulate.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此时，程序执行发生在*JavaFX应用程序线程*上，而不是在**主线程**上。当调用`start()`方法时，一个JavaFX `javafx.stage.Stage`对象可供您使用和操作。
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Advanced topics will be discussed at length in the next chapters. More importantly,
    we will go through the JavaFX application thread in the coming chapters. In the
    last three chapters, we will see how to bring the result from other threads into
    the JavaFX application thread in order to render it correctly on the scene.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 高级主题将在接下来的章节中进行详细讨论。更重要的是，我们将在接下来的章节中深入讨论JavaFX应用程序线程。在最后三章中，我们将看到如何将其他线程的结果带入JavaFX应用程序线程，以便在场景中正确呈现它。
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So far, you have learned what JavaFX is and seen its power. You have managed
    to download and install both Java 8 JDK and NetBeans IDE. After successfully installing
    the prerequisite software, you created a JavaFX Hello World GUI application through
    the NetBeans IDE. After learning how to compile and run a JavaFX application,
    you did a quick code walkthrough of the source file `HelloJavaFX.java`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经了解了JavaFX是什么，并见识了它的强大。您已经成功下载并安装了Java 8 JDK和NetBeans IDE。在成功安装了先决条件软件之后，您通过NetBeans
    IDE创建了一个JavaFX Hello World GUI应用程序。在学习了如何编译和运行JavaFX应用程序之后，您快速浏览了源文件`HelloJavaFX.java`的代码。
- en: Next, in [Chapter 2](ch02.html "Chapter 2. JavaFX 8 Essentials and Creating
    a Custom UI"), *JavaFX 8 Essentials and Creating a custom* you'll learn about
    JavaFX 8 architecture components and engines, which allow JavaFX applications
    to run efficiently and smoothly under the hood. You will also learn about the
    most common layout UI components and get an idea about theming your application
    as a whole or as individual scene nodes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在[第2章](ch02.html "第2章。JavaFX 8 Essentials and Creating a Custom UI") *JavaFX
    8 Essentials and Creating a custom*中，您将了解JavaFX 8架构组件和引擎，这些组件和引擎使JavaFX应用程序在底层高效平稳地运行。您还将了解最常见的布局UI组件，并了解如何为整个应用程序或单个场景节点设置主题。
- en: We will also be covering Java SE 8's most important feature, Lambda expressions,
    and how it works. We will then get insights into **Scene Builder** as a declarative
    UI and productive tool, then learn about generated FXML-based markup document
    and how to import it into NetBeans IDE to continue your application logic implementation
    to associate it to the already declared UI controls inside your FXML document.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍Java SE 8最重要的特性，Lambda表达式，以及它的工作原理。然后我们将深入了解**Scene Builder**作为一种声明式UI和高效工具，然后学习生成的基于FXML的标记文档以及如何将其导入到NetBeans
    IDE中，以继续将应用程序逻辑实现与已声明的UI控件关联起来。
- en: Finally, you will be able to create a custom UI component that isn't bundled
    with default JavaFX 8 UI controls.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将能够创建一个自定义的UI组件，该组件不与默认的JavaFX 8 UI控件捆绑在一起。
