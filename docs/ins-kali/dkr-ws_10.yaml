- en: 10\. Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. Kubernetes
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we will learn about Kubernetes, the most popular container
    management system in the market. Starting with the basics, architecture, and resources,
    you will create Kubernetes clusters and deploy real-life applications in them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Kubernetes，这是市场上最流行的容器管理系统。从基础知识、架构和资源开始，您将创建Kubernetes集群并在其中部署真实应用程序。
- en: By the end of the chapter, you will be able to identify the basics of Kubernetes
    design and its relationship with Docker. You will create and configure a local
    Kubernetes cluster, work with the Kubernetes API using client tools, and use fundamental
    Kubernetes resources to run containerized applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够识别Kubernetes设计的基础知识及其与Docker的关系。您将创建和配置本地Kubernetes集群，使用客户端工具使用Kubernetes
    API，并使用基本的Kubernetes资源来运行容器化应用程序。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapters, you ran multiple Docker containers with **Docker Compose**
    and **Docker Swarm**. Microservices running in various containers help developers
    to create scalable and reliable applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您使用Docker Compose和Docker Swarm运行了多个Docker容器。在各种容器中运行的微服务帮助开发人员创建可扩展和可靠的应用程序。
- en: However, when multiple applications are spread over multiple servers across
    a data center, or even across multiple data centers around the world, it becomes
    more complex to manage the applications. There are many open-ended problems related
    to the complexity of distributed applications, including, but not limited to,
    networking, storage, and container management.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当多个应用程序分布在数据中心的多台服务器上，甚至分布在全球多个数据中心时，管理这些应用程序变得更加复杂。与分布式应用程序复杂性相关的问题有很多，包括但不限于网络、存储和容器管理。
- en: 'For instance, the networking of containers running on the same nodes, as well
    as different nodes, should be configured. Similarly, the volumes of the containers
    that contain the applications (which can be scaled up or down) should be managed
    with a central controller. Fortunately, the management of the distributed containers
    has a well-accepted and adopted solution: Kubernetes.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，应该配置在相同节点上运行的容器以及不同节点上运行的容器之间的网络。同样，应该使用中央控制器管理包含应用程序的容器的卷（可以进行扩展或缩减）。幸运的是，分布式容器的管理有一个被广泛接受和采用的解决方案：Kubernetes。
- en: '**Kubernetes** is an open-source container orchestration system for running
    scalable, reliable, and robust containerized applications. It is possible to run
    Kubernetes on a wide range of platforms, from a **Raspberry Pi** to a data center.
    Kubernetes makes it possible to run containers with mounting volumes, inserting
    secrets, and configuring the network interfaces. Also, it focuses on the life
    cycle of containers to provide high-availability and scalability. With its inclusive
    approach, Kubernetes is the leading container management system currently available
    on the market.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个用于运行可扩展、可靠和强大的容器化应用程序的开源容器编排系统。可以在从Raspberry Pi到数据中心的各种平台上运行Kubernetes。Kubernetes使得可以运行具有挂载卷、插入密钥和配置网络接口的容器。此外，它专注于容器的生命周期，以提供高可用性和可扩展性。凭借其全面的方法，Kubernetes是目前市场上领先的容器管理系统。
- en: Kubernetes translates to the **captain of the ship** in Greek. With the Docker's
    analogy to boats and containers, Kubernetes positions itself as the sailing master.
    The idea of Kubernetes has roots in managing containers for Google Services such
    as Gmail or Google Drive for over a decade. From 2014 to the present, Kubernetes
    has been an open-source project, managed by **Cloud Native Computing Foundation**
    (**CNCF**).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes在希腊语中意为**船长**。与Docker对船只和容器的类比一样，Kubernetes将自己定位为航海大师。Kubernetes的理念源于在过去十多年中管理Google服务（如Gmail或Google
    Drive）的容器。从2014年至今，Kubernetes一直是一个由**Cloud Native Computing Foundation**（**CNCF**）管理的开源项目。
- en: 'One of the main advantages of Kubernetes comes from its community and maintainers.
    It is one of the most active repositories on GitHub, with nearly 88,000 commits
    from more than 2,400 contributors. In addition, the repository has over 62,000
    stars, which means more than 62,000 people have faith in the repository:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的主要优势之一来自于其社区和维护者。它是GitHub上最活跃的存储库之一，有近88,000次提交来自2400多名贡献者。此外，该存储库拥有超过62,000个星标，这意味着超过62,000人对该存储库有信心。
- en: '![Figure 10.1: Kubernetes GitHub repository'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1：Kubernetes GitHub存储库'
- en: '](image/B15021_10_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_01.jpg)'
- en: 'Figure 10.1: Kubernetes GitHub repository'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：Kubernetes GitHub存储库
- en: In this chapter, you will explore Kubernetes' design and architecture, followed
    by its API and access, and use the Kubernetes resources to create containerized
    applications. Since Kubernetes is the leading container orchestration tool, getting
    hands-on experience of it will help you get into the world of containerized applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将探索Kubernetes的设计和架构，然后了解其API和访问，并使用Kubernetes资源来创建容器化应用程序。由于Kubernetes是领先的容器编排工具，亲身体验它将有助于您进入容器化应用程序的世界。
- en: Kubernetes Design
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes设计
- en: Kubernetes focuses on the life cycle of containers, including configuration,
    scheduling, health checks, and scaling. With Kubernetes, it is possible to install
    various types of applications, including databases, content management systems,
    queue managers, load balancers, and web servers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes专注于容器的生命周期，包括配置、调度、健康检查和扩展。通过Kubernetes，可以安装各种类型的应用程序，包括数据库、内容管理系统、队列管理器、负载均衡器和Web服务器。
- en: For instance, imagine you are working at a new online food delivery chain, named
    **InstantPizza**. You can deploy the backend of your mobile application in Kubernetes
    and make it scalable to customer demand and usage. Similarly, you can implement
    a message queue to communicate between the restaurants and customers, again in
    Kubernetes. To store past orders and receipts, you can deploy a database in Kubernetes
    with storage. Furthermore, you can use load balancers to implement **Blue/Green**
    or **A/B Deployment** for your application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，想象一下你正在一家名为**InstantPizza**的新在线食品外卖连锁店工作。你可以在Kubernetes中部署你的移动应用的后端，并使其能够根据客户需求和使用情况进行扩展。同样，你可以在Kubernetes中实现消息队列，以便餐厅和顾客之间进行通信。为了存储过去的订单和收据，你可以在Kubernetes中部署一个带有存储的数据库。此外，你可以使用负载均衡器来为你的应用实现**Blue/Green**或**A/B部署**。
- en: In this section, the design and architecture of Kubernetes are discussed to
    illustrate how it achieves scalability and reliability.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，讨论了Kubernetes的设计和架构，以说明它如何实现可伸缩性和可靠性。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Blue/green deployments focus on installing two identical versions (called blue
    and green, respectively) of the same application and instantly moving from blue
    to green to reduce downtime and risk.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Blue/green部署专注于安装同一应用的两个相同版本（分别称为蓝色和绿色），并立即从蓝色切换到绿色，以减少停机时间和风险。
- en: A/B deployments focus on installing two versions of the application (namely,
    A and B), and the user traffic is divided between the versions for testing and experiments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: A/B 部署侧重于安装应用程序的两个版本（即 A 和 B），用户流量在版本之间分配，用于测试和实验。
- en: The design of Kubernetes concentrates on running on one or multiple servers—namely,
    clusters. On the other hand, Kubernetes consists of numerous components that should
    be distributed over a single cluster in order to have reliable and scalable applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的设计集中在一个或多个服务器上运行，即集群。另一方面，Kubernetes 由许多组件组成，这些组件应分布在单个集群上，以便拥有可靠和可扩展的应用程序。
- en: 'There are two groups of Kubernetes components—namely, the **control plane**
    and the **node**. Although there are different naming conventions for the elements
    that make up the Kubernetes landscape, such as master components instead of the
    control plane, the main idea of grouping has not changed at all. Control plane
    components are responsible for running the Kubernetes API, including the database,
    controllers, and schedulers. There are four main components in the Kubernetes
    control plane:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 组件分为两组，即**控制平面**和**节点**。尽管 Kubernetes 景观的组成元素有不同的命名约定，例如控制平面的主要组件而不是主控组件，但分组的主要思想并未改变。控制平面组件负责运行
    Kubernetes API，包括数据库、控制器和调度器。Kubernetes 控制平面中有四个主要组件：
- en: '`kube-apiserver`: This is the central API server that connects all the components
    in the cluster.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`: 这是连接集群中所有组件的中央 API 服务器。'
- en: '`etcd`: This is the database for Kubernetes resources, and the `kube-apiserver`
    stores the state of the cluster on `etcd`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd`: 这是 Kubernetes 资源的数据库，`kube-apiserver` 将集群的状态存储在 `etcd` 上。'
- en: '`kube-scheduler`: This is the scheduler that assigns containerized applications
    to the nodes.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler`: 这是将容器化应用程序分配给节点的调度器。'
- en: '`kube-controller-manager`: This is the controller that creates and manages
    the Kubernetes resources in the cluster.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-controller-manager`: 这是在集群中创建和管理 Kubernetes 资源的控制器。'
- en: 'In servers with the role node, there are two Kubernetes components:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有节点角色的服务器上，有两个 Kubernetes 组件：
- en: '`kubelet`: This is the Kubernetes client that lives on the nodes to create
    a bridge between the Kubernetes API and container runtime, such as Docker.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet`: 这是运行在节点上的 Kubernetes 客户端，用于在 Kubernetes API 和容器运行时（如 Docker）之间创建桥接。'
- en: '`kube-proxy`: This is a network proxy that runs on every node to allow network
    communication regarding the workloads across the cluster.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`: 这是在每个节点上运行的网络代理，允许集群中的工作负载进行网络通信。'
- en: 'The control plane and node components, along with their interactions, are illustrated
    in the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面和节点组件以及它们的交互如下图所示：
- en: '![Figure 10.2: Kubernetes architecture'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2: Kubernetes 架构'
- en: '](image/B15021_10_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_02.jpg)'
- en: 'Figure 10.2: Kubernetes architecture'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '图 10.2: Kubernetes 架构'
- en: 'Kubernetes is designed to run on scalable cloud systems. However, there are
    many tools to run Kubernetes clusters locally. `minikube` is the officially supported
    CLI tool to create and manage local Kubernetes clusters. Its commands focus on
    life cycle events and the troubleshooting of clusters, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 设计用于在可扩展的云系统上运行。然而，有许多工具可以在本地运行 Kubernetes 集群。`minikube` 是官方支持的 CLI
    工具，用于创建和管理本地 Kubernetes 集群。其命令侧重于集群的生命周期事件和故障排除，如下所示：
- en: '`minikube start`: Starts a local Kubernetes cluster'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube start`: 启动本地 Kubernetes 集群'
- en: '`minikube stop`: Stops a running local Kubernetes cluster'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube stop`: 停止正在运行的本地 Kubernetes 集群'
- en: '`minikube delete`: Deletes a local Kubernetes cluster'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube delete`: 删除本地 Kubernetes 集群'
- en: '`minikube service`: Fetches the URL(s) for the specified service in the local cluster'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube service`: 获取本地集群中指定服务的 URL(s)'
- en: '`minikube ssh`: Logs in or runs a command on a machine with SSH'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube ssh`：登录或在具有SSH的机器上运行命令'
- en: In the following exercise, you will create a local Kubernetes cluster to check
    the components discussed in this chapter. To create a local cluster, you will
    use `minikube` as the official local Kubernetes solution and run its commands
    to explore Kubernetes components.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，您将创建一个本地Kubernetes集群，以检查本章讨论的组件。为了创建一个本地集群，您将使用`minikube`作为官方的本地Kubernetes解决方案，并运行其命令来探索Kubernetes组件。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`minikube` runs the cluster on hypervisors, and you need to install a hypervisor
    such as KVM, VirtualBox, VMware Fusion, Hyperkit, or Hyper-V based on your operating
    system. You can check the official documentation for more information at [https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor](https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube`在虚拟机上运行集群，您需要根据您的操作系统安装虚拟机监控程序，如KVM、VirtualBox、VMware Fusion、Hyperkit或基于Hyper-V。您可以在[https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor](https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor)上查看官方文档以获取更多信息。'
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`touch`命令创建文件，并使用`vim`命令在vim编辑器中处理文件。
- en: 'Exercise 10.01: Starting a Local Kubernetes Cluster'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.01：启动本地Kubernetes集群
- en: Kubernetes was initially designed to run on clusters with multiple servers.
    This is an expected characteristic for a container orchestrator that runs scalable
    applications in the cloud. However, there are many times that you need to run
    a Kubernetes cluster locally, such as for development or testing. In this exercise,
    you will install a local Kubernetes provider and then create a Kubernetes cluster.
    In the cluster, you will check for the components discussed in this section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes最初设计为在具有多个服务器的集群上运行。这是一个容器编排器的预期特性，用于在云中运行可扩展的应用程序。然而，有很多时候您需要在本地运行Kubernetes集群，比如用于开发或测试。在这个练习中，您将安装一个本地Kubernetes提供程序，然后创建一个Kubernetes集群。在集群中，您将检查本节讨论的组件。
- en: 'To complete this exercise, perform the following steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个练习，请执行以下步骤：
- en: 'Download the latest version of the `minikube` executable for your operating
    system and set the binary as executable for your local system by running the following
    command in your terminal:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适用于您操作系统的最新版本的`minikube`可执行文件，并通过在终端中运行以下命令将二进制文件设置为本地系统可执行：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These preceding commands download the binary for Linux or Mac and make it ready
    to use in the terminal:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令下载了Linux或Mac的二进制文件，并使其在终端中可用：
- en: '![Figure 10.3: Installation of minikube'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.3：安装minikube'
- en: '](image/B15021_10_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_03.jpg)'
- en: 'Figure 10.3: Installation of minikube'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3：安装minikube
- en: 'Start a Kubernetes cluster with the following command in your terminal:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在终端中启动Kubernetes集群：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The single preceding command executes multiple steps to create a cluster successfully.
    You can check each stage and its output as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的单个命令执行多个步骤，成功创建一个集群。您可以按如下方式检查每个阶段及其输出：
- en: '![Figure 10.4: Starting a new Kubernetes cluster'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.4：启动一个新的Kubernetes集群'
- en: '](image/B15021_10_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_04.jpg)'
- en: 'Figure 10.4: Starting a new Kubernetes cluster'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：启动一个新的Kubernetes集群
- en: The output starts with printing out the version and the environment. Then, the
    images for Kubernetes components are pulled and started. Finally, you have a locally
    running Kubernetes cluster after a couple of minutes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输出以打印版本和环境开始。然后，拉取并启动Kubernetes组件的镜像。最后，经过几分钟后，您将拥有一个本地运行的Kubernetes集群。
- en: 'Connect to the cluster node started by `minikube` with the following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令连接到由`minikube`启动的集群节点：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the `ssh` command, you can continue working on the node running in the cluster:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ssh`命令，您可以继续在集群中运行的节点上工作：
- en: '![Figure 10.5: Cluster node'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5：集群节点'
- en: '](image/B15021_10_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_05.jpg)'
- en: 'Figure 10.5: Cluster node'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5：集群节点
- en: 'Check for each control plane component with the following commands:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查每个控制平面组件：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command checks for the Docker containers and filters with the control
    plane component names. The following output does not contain the pause container,
    which is responsible for the networking setup of the container groups in Kubernetes,
    so as to make analysis easier:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令检查Docker容器并使用控制平面组件名称进行过滤。以下输出不包含暂停容器，该容器负责Kubernetes中容器组的网络设置，以便进行分析：
- en: '![Figure 10.6: Control plane components'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6：控制平面组件'
- en: '](image/B15021_10_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_06.jpg)'
- en: 'Figure 10.6: Control plane components'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：控制平面组件
- en: The output shows that four control plane components are running in Docker containers
    in the `minikube` node.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，四个控制平面组件在`minikube`节点的Docker容器中运行。
- en: 'Check for the first node component, `kube-proxy`, with the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查第一个节点组件`kube-proxy`：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Similar to *Step 4*, this command lists a `kube-proxy` component, which is
    running in a Docker container:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与*步骤4*类似，此命令列出了一个在Docker容器中运行的`kube-proxy`组件：
- en: '![Figure 10.7: kube-proxy in minikube'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7：minikube中的kube-proxy'
- en: '](image/B15021_10_07.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_07.jpg)'
- en: 'Figure 10.7: kube-proxy in minikube'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7：minikube中的kube-proxy
- en: It can be seen that the `kube-proxy` component running in the Docker container
    has been up for 21 minutes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到在Docker容器中运行的`kube-proxy`组件已经运行了21分钟。
- en: 'Check for the second node component, `kubelet`, with the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查第二个节点组件`kubelet`：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command lists the process with its ID running in `minikube`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出了在`minikube`中运行的进程及其ID：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since `kubelet` communicates between the container runtime and API server, it
    is configured to run directly on the machine instead of inside a Docker container.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`kubelet`在容器运行时和API服务器之间进行通信，因此它被配置为直接在机器上运行，而不是在Docker容器内部运行。
- en: 'Disconnect from the `minikube` node connected in *Step 3* with the following command:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令断开与*步骤3*中连接的`minikube`节点的连接：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should have returned to your terminal and get output similar to the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经返回到你的终端并获得类似以下的输出：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this exercise, you have installed a Kubernetes cluster and checked the architectural
    components. In the next section, the Kubernetes API and access methods will be
    presented to connect and consume the cluster created in this section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经安装了一个Kubernetes集群并检查了架构组件。在下一节中，将介绍Kubernetes API和访问方法，以连接和使用本节中创建的集群。
- en: The Kubernetes API and Access
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes API和访问
- en: The **Kubernetes API** is the fundamental building block of the Kubernetes system.
    It is the home for all communication between the components in the cluster. External
    communication, such as user commands, is also executed against the Kubernetes
    API as REST API calls. The Kubernetes API is a resource-based interface over HTTP.
    In other words, the API server is oriented to work with resources to create and
    manage Kubernetes resources. In this section, you will connect to the API, and
    in the following section, you will start working with Kubernetes resources, including,
    but not limited to, Pods, Deployments, Statefulsets, and Services.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes API**是Kubernetes系统的基本构建模块。它是集群中所有组件之间的通信中心。外部通信，如用户命令，也是通过对Kubernetes
    API的REST API调用来执行的。Kubernetes API是基于HTTP的资源接口。换句话说，API服务器旨在使用资源来创建和管理Kubernetes资源。在本节中，您将连接到API，在接下来的部分中，您将开始使用Kubernetes资源，包括但不限于Pods、Deployments、Statefulsets和Services。'
- en: Kubernetes has an official command-line tool for client access, named `kubectl`.
    If you want to access a Kubernetes cluster, you need to install the `kubectl`
    tool and configure it to connect to your cluster. Then you can securely use the
    tool to manage the life cycle of applications running the cluster. `kubectl` is
    capable of essential create, read, update, and delete operations, as well as troubleshooting
    and log retrieval.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有一个官方的命令行工具用于客户端访问，名为`kubectl`。如果您想访问Kubernetes集群，您需要安装`kubectl`工具并配置它以连接到您的集群。然后，您可以安全地使用该工具来管理运行在集群中的应用程序的生命周期。`kubectl`能够执行基本的创建、读取、更新和删除操作，以及故障排除和日志检索。
- en: For instance, you can install a containerized application with `kubectl`, scale
    it to more replicas, check the logs, and finally delete it if you do not need
    it further. Furthermore, `kubectl` has cluster management commands to check the
    status of the cluster and servers. Therefore, `kubectl` is a vital command-line
    tool for accessing Kubernetes clusters and managing the applications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用`kubectl`安装一个容器化应用程序，将其扩展到更多副本，检查日志，最后如果不再需要，可以删除它。此外，`kubectl`还具有用于检查集群和服务器状态的集群管理命令。因此，`kubectl`是访问Kubernetes集群和管理应用程序的重要命令行工具。
- en: '`kubectl` is the key to controlling Kubernetes clusters with its rich set of
    commands. The essential basic and deployment-related commands can be listed as
    follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`是控制Kubernetes集群的关键，具有丰富的命令集。基本的和与部署相关的命令可以列举如下：'
- en: '`kubectl create`: This command creates a resource from a filename with the
    `-f` flag or standard terminal input. It is helpful when creating resources for
    the first time.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl create`：此命令使用`-f`标志从文件名创建资源或标准终端输入。在首次创建资源时很有帮助。'
- en: '`kubectl apply`: This command creates or updates the configuration to a Kubernetes
    resource, similar to the `create` command. It is an essential command if you are
    changing the resource configuration after the first creation.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl apply`：此命令创建或更新Kubernetes资源的配置，类似于`create`命令。如果在第一次创建后更改资源配置，则这是一个必要的命令。'
- en: '`kubectl get`: This command displays one or multiple resources from the cluster
    with its name, labels, and further information.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl get`：此命令显示集群中一个或多个资源及其名称、标签和其他信息。'
- en: '`kubectl edit`: This command edits a Kubernetes resource directly in the terminal
    with an editor such as `vi`.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl edit`：此命令直接在终端中使用诸如`vi`之类的编辑器编辑Kubernetes资源。'
- en: '`kubectl delete`: This command deletes Kubernetes resources and passes filenames,
    resource names, and label flags.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl delete`：此命令删除Kubernetes资源并传递文件名、资源名称和标签标志。'
- en: '`kubectl scale`: This command changes the number of resources of a Kubernetes
    cluster.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl scale`：此命令更改Kubernetes集群资源的数量。'
- en: 'Similarly, the cluster management and configuration commands required are listed
    as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，所需的集群管理和配置命令列举如下：
- en: '`kubectl cluster-info`: This command displays a summary of the cluster with
    its API and DNS services.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl cluster-info`：此命令显示集群的摘要及其API和DNS服务。'
- en: '`kubectl api-resources`: This command lists the supported API resources on
    the server. It is especially helpful if you work with different installations
    of Kubernetes that support different sets of API resources.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl api-resources`：此命令列出服务器支持的API资源。如果您使用支持不同API资源集的不同Kubernetes安装，这将特别有帮助。'
- en: '`kubectl version`: This command prints the client and server version information.
    If you are working with multiple Kubernetes clusters with different versions,
    it is a helpful command to catch version mismatches.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl version`：此命令打印客户端和服务器版本信息。如果您使用不同版本的多个Kubernetes集群，这是一个有用的命令，可以捕捉版本不匹配。'
- en: '`kubectl config`: This command configures `kubectl` to connect different clusters
    to each other. `kubectl` is a CLI tool designed to work with multiple clusters
    by changing its configuration.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl config`：此命令配置 `kubectl` 将不同的集群连接到彼此。`kubectl` 是一个设计用于通过更改其配置与多个集群一起工作的
    CLI 工具。'
- en: In the following exercise, you will install and configure `kubectl` to connect
    to the local Kubernetes cluster and start exploring the Kubernetes API with the
    help of its rich set of commands.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的练习中，您将安装和配置 `kubectl` 来连接到本地 Kubernetes 集群，并开始使用其丰富的命令集来探索 Kubernetes API。
- en: 'Exercise 10.02: Accessing Kubernetes Clusters with kubectl'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 10.02：使用 kubectl 访问 Kubernetes 集群
- en: Kubernetes clusters are installed in cloud systems and can be accessed from
    various locations. To access the clusters securely and reliably, you need a reliable
    client tool, which is the official client tool of Kubernetes—namely, `kubectl`.
    In this exercise, you will install, configure, and use `kubectl` to explore its
    capabilities along with the Kubernetes API.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 集群安装在云系统中，并可以从各种位置访问。要安全可靠地访问集群，您需要一个可靠的客户端工具，即 Kubernetes 的官方客户端工具
    `kubectl`。在这个练习中，您将安装、配置和使用 `kubectl` 来探索其与 Kubernetes API 的能力。
- en: 'To complete this exercise, perform the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此练习，请执行以下步骤：
- en: 'Download the latest version of the `kubectl` executable for your operating
    system and set this as the executable for your local system by running the following
    command in your terminal:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适用于您操作系统的 `kubectl` 可执行文件的最新版本，并通过在终端中运行以下命令将其设置为本地系统的可执行文件：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These preceding commands download the binary for Linux or Mac and make it ready
    to use in the terminal:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令下载了适用于 Linux 或 Mac 的二进制文件，并使其在终端中准备就绪：
- en: '![Figure 10.8: Installation of minikube'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.8：minikube 的安装'
- en: '](image/B15021_10_08.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_08.jpg)'
- en: 'Figure 10.8: Installation of minikube'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8：minikube 的安装
- en: 'In your terminal, run the following command to configure `kubectl` to connect
    to the `minikube` cluster and use it for further access:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中，运行以下命令来配置 `kubectl` 连接到 `minikube` 集群并将其用于进一步访问：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `use-context` command configures the `kubectl` context to use the `minikube`
    cluster. For the following steps, all commands will communicate with the Kubernetes
    cluster running inside `minikube`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`use-context` 命令配置 `kubectl` 上下文以使用 `minikube` 集群。在接下来的步骤中，所有命令将与在 `minikube`
    内运行的 Kubernetes 集群通信：'
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check for the cluster and client version with the following command:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查集群和客户端版本：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command returns the human-readable client and server version information:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回可读的客户端和服务器版本信息：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Check for further information about the cluster with the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查有关集群的更多信息：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This command shows a summary of Kubernetes components, including the master
    and DNS:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令显示 Kubernetes 组件的摘要，包括主节点和 DNS：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Get a list of the nodes in the cluster with the following command:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令获取集群中节点的列表：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Since the cluster is a `minikube` local cluster, there is only one node named
    `minikube` with the `master` role:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于集群是一个 `minikube` 本地集群，只有一个名为 `minikube` 的节点具有 `master` 角色：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'List the supported resources in the Kubernetes API with the following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令列出 Kubernetes API 中支持的资源：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command lists the `name` field of the `api-resources` supported in the
    Kubernetes API server. The long list shows how Kubernetes creates different abstractions
    to run containerized applications:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出 Kubernetes API 服务器支持的 `api-resources` 的 `name` 字段。长列表显示了 Kubernetes 如何创建不同的抽象来运行容器化应用程序：
- en: '![Figure 10.9: Kubernetes resource listing'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.9：Kubernetes 资源列表'
- en: '](image/B15021_10_09.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_09.jpg)'
- en: 'Figure 10.9: Kubernetes resource listing'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9：Kubernetes 资源列表
- en: The output lists the API resources available in the Kubernetes cluster we have
    connected to. As you can see, there are tens of resources you can use and each
    of them helps you to create cloud-native, scalable, and reliable applications.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输出列出了我们连接到的 Kubernetes 集群中可用的 API 资源。正如您所看到的，有数十种资源可供使用，每种资源都可以帮助您创建云原生、可扩展和可靠的应用程序。
- en: In this exercise, you have connected to the Kubernetes cluster and checked the
    functionalities of the client tool. `kubectl` is the most critical tool for accessing
    and managing applications running in Kubernetes. By the end of this exercise,
    you will have learned how to install, configure, and connect to a Kubernetes cluster.
    In addition, you will have checked its version, the statuses of its nodes, and
    the available API resources. Using `kubectl` effectively is an essential task
    in daily life for developers interacting with Kubernetes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已连接到 Kubernetes 集群并检查了客户端工具的功能。`kubectl` 是访问和管理在 Kubernetes 中运行的应用程序最关键的工具。通过本练习的结束，您将学会如何安装、配置和连接到
    Kubernetes 集群。此外，您还将检查其版本、节点的状态和可用的 API 资源。有效地使用 `kubectl` 是开发人员在与 Kubernetes
    交互时日常生活中的重要任务。
- en: In the following section, the primary Kubernetes resources (seen in part of
    the last step in the previous exercise) will be presented.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，将介绍主要的 Kubernetes 资源（在上一个练习的最后一步中看到）。
- en: Kubernetes Resources
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 资源
- en: Kubernetes provides a rich set of abstractions over containers to define cloud-native
    applications. All these abstractions are designed as resources in the Kubernetes
    API and are managed by the control plane. In other words, the applications are
    defined as a set of resources in the control plane. At the same time, node components
    try to achieve the state specified in the resources. If a Kubernetes resource
    is assigned to a node, the node components focus on attaching the required volumes
    and network interfaces to keep the application up and running.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了丰富的抽象，用于定义云原生应用程序中的容器。所有这些抽象都被设计为 Kubernetes API 中的资源，并由控制平面管理。换句话说，应用程序在控制平面中被定义为一组资源。同时，节点组件尝试实现资源中指定的状态。如果将
    Kubernetes 资源分配给节点，节点组件将专注于附加所需的卷和网络接口，以保持应用程序的正常运行。
- en: 'Let''s assume you will deploy the backend of the InstantPizza reservation system
    on Kubernetes. The backend consists of a database and a web server for handling
    REST operations. You will need to define a couple of resources in Kubernetes:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您将在 Kubernetes 上部署 InstantPizza 预订系统的后端。后端由数据库和用于处理 REST 操作的 Web 服务器组成。您需要在
    Kubernetes 中定义一些资源：
- en: A **StatefulSet** resource for the database
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**StatefulSet**资源用于数据库
- en: A **Service** resource to connect to the database from other components such
    as the web server
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**Service**资源用于从其他组件（如 Web 服务器）连接到数据库
- en: A **Deployment** resource to deploy the web server in a scalable way
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**Deployment**资源，以可扩展的方式部署 Web 服务器
- en: A **Service** resource to enable outside connections to the web server
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**Service**资源，以使外部连接到 Web 服务器
- en: When these resources are defined in the control plane via `kubectl`, the node
    components will create the required containers, networks, and storage in the cluster.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些资源在控制平面通过 `kubectl` 定义时，节点组件将在集群中创建所需的容器、网络和存储。
- en: Each resource has distinctive characteristics and schema in the Kubernetes API.
    In this section, you will learn about the fundamental Kubernetes resources, including
    **Pods**, **Deployments**, **StatefulSet**, and **Services**. In addition, you
    will learn about more complex Kubernetes resources such as **Ingresses**, **Horizontal
    Pod Autoscaling**, and **RBAC** **Authorization** in Kubernetes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes API中，每个资源都有独特的特征和模式。在本节中，您将了解基本的Kubernetes资源，包括Pods、Deployments、StatefulSet和Services。此外，您还将了解更复杂的Kubernetes资源，如Ingresses、Horizontal
    Pod Autoscaling和Kubernetes中的RBAC授权。
- en: Pods
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pods
- en: 'The Pod is the fundamental building block of containerized applications in
    Kubernetes. It consists of one or more containers that could share the network,
    storage, and memory. Kubernetes schedules all the containers in a Pod into the
    same node. Also, the containers in the Pod are scaled up or down together. The
    relationship between containers, Pods, and nodes can be outlined as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Pod是Kubernetes中容器化应用程序的基本构建块。它由一个或多个容器组成，这些容器可以共享网络、存储和内存。Kubernetes将Pod中的所有容器调度到同一个节点上。此外，Pod中的容器一起进行扩展或缩减。容器、Pod和节点之间的关系可以概括如下：
- en: '![Figure 10.10: Containers, Pods, and nodes'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.10：容器、Pod和节点'
- en: '](image/B15021_10_10.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_10.jpg)'
- en: 'Figure 10.10: Containers, Pods, and nodes'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10：容器、Pod和节点
- en: It can be seen from the preceding diagram that a Pod can contain multiple containers.
    All these containers share a common network, storage, and memory resources.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图可以看出，一个Pod可以包含多个容器。所有这些容器共享共同的网络、存储和内存资源。
- en: 'The Pod definition is straightforward, with four main sections:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Pod的定义很简单，有四个主要部分：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'These four sections are required for all Kubernetes resources:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Kubernetes资源都需要这四个部分：
- en: '`apiVersion` defines the versioned schema of this resource of an object.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiVersion`定义了对象的资源的版本化模式。'
- en: '`kind` represents the REST resource name.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind`代表REST资源名称。'
- en: '`metadata` holds the information of the resource, such as names, labels, and annotations.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata`保存了资源的信息，如名称、标签和注释。'
- en: '`spec` is the resource-specific part where resource-specific information is
    kept.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec`是资源特定部分，其中包含资源特定信息。'
- en: When the preceding server Pod is created in the Kubernetes API, the API will
    first check whether the definition is correct according to the `apiVersion=v1`
    and `kind=Pod` schema. Then, the scheduler will assign the Pod to a node. Following
    that, the `kubelet` in the node will create the `nginx` container for the `main`
    container.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Kubernetes API中创建前面的server Pod时，API首先会检查定义是否符合`apiVersion=v1`和`kind=Pod`的模式。然后，调度程序将Pod分配给一个节点。随后，节点中的`kubelet`将为`main`容器创建`nginx`容器。
- en: Pods are the first abstraction of Kubernetes over containers, and they are the
    building blocks of more complex resources. In the following section, we will use
    resources such as Deployments and Statefulsets to encapsulate Pods to create more
    sophisticated applications.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Pods是Kubernetes对容器的第一个抽象，它们是更复杂资源的构建块。在接下来的部分中，我们将使用资源，如Deployments和Statefulsets来封装Pods，以创建更复杂的应用程序。
- en: Deployments
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Deployments
- en: Deployments are a Kubernetes resource that focuses on scalability and high availability.
    Deployments encapsulate Pods to scale up, down, and roll out new versions. In
    other words, you can define a three-replica web server Pod as a Deployment. Deployment
    controllers in the control plane will guarantee the number of replicas. Besides,
    when you update the Deployment to a newer version, the controllers will gradually
    update the application instances.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 部署是Kubernetes资源，专注于可伸缩性和高可用性。部署封装了Pod以扩展、缩小和部署新版本。换句话说，您可以将三个副本的Web服务器Pod定义为部署。控制平面中的部署控制器将保证副本的数量。此外，当您将部署更新到新版本时，控制器将逐渐更新应用程序实例。
- en: 'The definitions of Deployments and Pods are similar, although labels and replicas
    are added to the schema of Deployments:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 部署和Pod的定义类似，尽管在部署的模式中添加了标签和副本：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Deployment `server` has 10 replicas of the Pod specification with the label
    `app:server`. In addition, port `80` of the container is published for each main
    container of the server instance. The Deployment controller will create or delete
    the instances to match the 10 replicas of the defined Pod. In other words, if
    a node with two running instances of the server Deployment goes offline, the controller
    will create two additional Pods on the remaining nodes. This automation of Kubernetes
    allows us to create scalable and highly available applications out of the box.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 部署`server`具有带有标签`app:server`的Pod规范的10个副本。此外，每个服务器实例的主容器的端口`80`都被发布。部署控制器将创建或删除实例以匹配定义的Pod的10个副本。换句话说，如果具有两个运行实例的服务器部署的节点下线，控制器将在剩余节点上创建两个额外的Pod。Kubernetes的这种自动化使我们能够轻松创建可伸缩和高可用的应用程序。
- en: In the following section, Kubernetes resources for stateful applications, such
    as databases and message queues, will be presented.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，将介绍用于有状态应用程序（如数据库和消息队列）的Kubernetes资源。
- en: Statefulsets
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: StatefulSets
- en: Kubernetes supports running stateful applications that store their states on
    the disk volumes with **StatefulSet** resources. StatefulSets make it possible
    to run database applications or data analysis tools in Kubernetes with the same
    reliability and high availability of temporary applications.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes支持在磁盘卷上存储其状态的有状态应用程序的运行，使用**StatefulSet**资源。StatefulSets使得在Kubernetes中运行数据库应用程序或数据分析工具具有与临时应用程序相同的可靠性和高可用性。
- en: 'The definition of StatefulSets resembles the definition of **Deployments**,
    with **volume mount** and **claim additions**:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: StatefulSets的定义类似于**部署**的定义，具有**卷挂载**和**声明添加**：
- en: '[PRE21]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The database resource defines a **MySQL** database with a disk volume of **2
    GB**. When the server `StatefulSet` resource is created in the Kubernetes API,
    `cloud-controller-manager` will create a volume and make it ready on the scheduled
    node. While creating the volume, it uses the specification under `volumeClaimTemplates`.
    Then, the node will mount the volume in the container according to the `volumeMounts`
    section in `spec`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库资源定义了一个具有**2GB**磁盘卷的**MySQL**数据库。当在Kubernetes API中创建服务器`StatefulSet`资源时，`cloud-controller-manager`将创建一个卷并在预定的节点上准备好。在创建卷时，它使用`volumeClaimTemplates`下的规范。然后，节点将根据`spec`中的`volumeMounts`部分在容器中挂载卷。
- en: In this resource definition, there is also an example of setting an environment
    variable for `MYSQL_ROOT_PASSWORD`. Statefulsets are vital resources in Kubernetes
    since they enable running stateful applications in the same cluster with ephemeral workloads.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在此资源定义中，还有一个设置`MYSQL_ROOT_PASSWORD`环境变量的示例。StatefulSets是Kubernetes中至关重要的资源，因为它们使得可以在相同的集群中运行有状态应用程序和临时工作负载。
- en: In the following resource, the Kubernetes solution for the connection between
    Pods will be presented.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的资源中，将介绍Pod之间连接的Kubernetes解决方案。
- en: Services
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: 'Kubernetes clusters host multiple applications running in various nodes, and
    most of the time, these applications need to communicate with each other. Assume
    you have a three-instance Deployment of your backend and a two-instance Deployment
    of your frontend application. Five Pods run, spread over the cluster with their
    IP addresses. Since the frontend instances need to connect to the backend, the
    frontend instances need to know the IP addresses of backend instances, as shown
    in *Figure 10.11*:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群托管在各个节点上运行的多个应用程序，大多数情况下，这些应用程序需要相互通信。假设您有一个包含三个实例的后端部署和一个包含两个实例的前端应用程序部署。有五个Pod在集群中运行，并分布在各自的IP地址上。由于前端实例需要连接到后端，前端实例需要知道后端实例的IP地址，如*图10.11*所示：
- en: '![Figure 10.11: Frontend and backend instances'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.11：前端和后端实例'
- en: '](image/B15021_10_11.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_11.jpg)'
- en: 'Figure 10.11: Frontend and backend instances'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11：前端和后端实例
- en: 'However, this is not a sustainable approach, with scaling up or down and the
    prospect of numerous potential failures in the cluster. Kubernetes proposes **Service**
    resources to define a set of Pods with labels and access them using the name of
    the Service. For instance, the frontend applications can connect to a backend
    instance by just using the address of `backend-service`, as illustrated in *Figure
    10.12*:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是一种可持续的方法，随着集群的扩展或缩减以及可能发生的大量潜在故障。Kubernetes提出了**服务**资源，用于定义具有标签的一组Pod，并使用服务的名称访问它们。例如，前端应用程序可以通过使用`backend-service`的地址连接到后端实例，如*图10.12*所示：
- en: '![Figure 10.12: Frontend and backend instances connected via backend-service'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.12：通过后端服务连接的前端和后端实例'
- en: '](image/B15021_10_12.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_12.jpg)'
- en: 'Figure 10.12: Frontend and backend instances connected via backend-service'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12：通过后端服务连接的前端和后端实例
- en: 'The definition of the Service resource is reasonably straightforward, as shown
    here:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 服务资源的定义相当简单，如下所示：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When the `my-db` Service is created, all other Pods in the cluster will be able
    to connect to the Pods with the label `app:mysql` at port `3306` via the address,
    `my-db`. In the following resource, external access to the Services in the cluster
    by using the Kubernetes Ingress resources will be presented.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`my-db`服务后，集群中的所有其他Pod都将能够通过地址`my-db`连接到标有`app:mysql`标签的Pod的`3306`端口。在下面的资源中，将介绍使用Kubernetes
    Ingress资源对集群中服务进行外部访问的方法。
- en: Ingress
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ingress
- en: Kubernetes clusters are designed to serve applications in and outside the cluster.
    Ingress resources are defined to expose Services to the outside world with additional
    features such as external URLs and load balancing. Although the Ingress resources
    are native Kubernetes objects, they require an Ingress controller up and running
    in the cluster. In other words, Ingress controllers are not part of the `kube-controller-manager`,
    and you need to install one in your cluster. There are multiple implementations
    available on the market. However, Kubernetes currently supports and maintains
    `GCE` and `nginx` controllers officially.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群旨在为集群内外的应用程序提供服务。Ingress资源被定义为将服务暴露给外部世界，并具有额外的功能，如外部URL和负载平衡。虽然Ingress资源是原生的Kubernetes对象，但它们需要在集群中运行Ingress控制器。换句话说，Ingress控制器不是`kube-controller-manager`的一部分，您需要在集群中安装一个Ingress控制器。市场上有多种实现可用。但是，Kubernetes目前正式支持和维护`GCE`和`nginx`控制器。
- en: Note
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A list of additional Ingress controllers is available in the official documentation
    at the following link: [https://kubernetes.io/docs/concepts/Services-networking/Ingress-controllers](https://kubernetes.io/docs/concepts/Services-networking/Ingress-controllers).'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档中提供了其他Ingress控制器的列表，链接如下：[https://kubernetes.io/docs/concepts/Services-networking/Ingress-controllers](https://kubernetes.io/docs/concepts/Services-networking/Ingress-controllers)。
- en: 'An Ingress resource with a host URL of `my-db.docker-workshop.io` to connect
    to port `3306` on the `my-db` Service looks like the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 具有主机URL为`my-db.docker-workshop.io`，连接到`my-db`服务上的端口`3306`的Ingress资源如下所示：
- en: '[PRE23]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Ingress resources are essential to open the Services to the outside world. However,
    their configuration can be more complicated than it seems. The Ingress resources
    could require individual annotations based on the Ingress controller running in
    your cluster.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress资源对于向外界打开服务至关重要。然而，它们的配置可能比看起来更复杂。根据您集群中运行的Ingress控制器，Ingress资源可能需要单独的注释。
- en: In the following resource, automatic scaling of the Pods with the help of the
    Horizontal Pod Autoscaler will be covered.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的资源中，将介绍使用水平Pod自动缩放器来自动缩放Pod的功能。
- en: Horizontal Pod Autoscaling
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 水平Pod自动缩放
- en: Kubernetes clusters provide a scalable and reliable containerized application
    environment. However, it is cumbersome and unfeasible to manually track the usage
    of applications and scale up or down when needed. Therefore, Kubernetes provides
    the Horizontal Pod Autoscaler to scale the number of Pods according to CPU utilization
    automatically.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群提供了可扩展和可靠的容器化应用环境。然而，手动跟踪应用程序的使用情况并在需要时进行扩展或缩减是繁琐且不可行的。因此，Kubernetes提供了水平Pod自动缩放器，根据CPU利用率自动缩放Pod的数量。
- en: 'Horizontal Pod Autoscalers are a Kubernetes resource with a target resource
    for scaling and target metrics:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 水平Pod自动缩放器是Kubernetes资源，具有用于缩放和目标指标的目标资源。
- en: '[PRE24]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When the `server-scaler` resource is created, the Kubernetes control plane will
    try to achieve the target CPU utilization of `50%` by scaling up or down the Deployment
    named as the `server`. In addition, the minimum and maximum numbers of replicas
    are set to `1` and `10`. This ensures that the Deployment is not scaled to `0`
    when it is not used, nor scaled too high so that it consumes all the resources
    in the cluster. Horizontal Pod Autoscaler resources are essential parts of Kubernetes
    for creating scalable and reliable applications that are automatically managed.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建`server-scaler`资源时，Kubernetes控制平面将尝试通过扩展或缩减名为`server`的部署来实现`50%`的目标CPU利用率。此外，最小和最大副本数设置为`1`和`10`。这确保了当部署未被使用时不会缩减到`0`，也不会扩展得太高以至于消耗集群中的所有资源。水平Pod自动缩放器资源是Kubernetes中创建可扩展和可靠应用程序的重要部分，这些应用程序是自动管理的。
- en: In the following section, you will learn about authorization in Kubernetes.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，您将了解Kubernetes中的授权。
- en: RBAC Authorization
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RBAC授权
- en: Kubernetes clusters are designed to connect and make changes to resources securely.
    However, when the applications are running in a production environment, it is
    critical to limit the scope of actions of the users.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群旨在安全地连接和更改资源。然而，当应用程序在生产环境中运行时，限制用户的操作范围至关重要。
- en: Let's assume that you have conferred extensive powers on everyone in your project
    group. In such circumstances, it will not be possible to protect your application
    running in the cluster from deletion or misconfiguration. Kubernetes provides
    **Role-Based Access Control** (**RBAC**) to manage users' access and abilities
    based on the roles given to them. In other words, Kubernetes can limit the ability
    of users to perform specific tasks on specific Kubernetes resources.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经赋予项目组中的每个人广泛的权限。在这种情况下，将无法保护集群中运行的应用免受删除或配置错误的影响。Kubernetes提供了**基于角色的访问控制**（**RBAC**）来管理用户的访问和能力，基于赋予他们的角色。换句话说，Kubernetes可以限制用户在特定Kubernetes资源上执行特定任务的能力。
- en: 'Let''s start with the `Role` resource to define the capabilities:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`Role`资源开始定义能力：
- en: '[PRE25]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `Pod-reader` role defined in the preceding snippet is only allowed to `get`,
    `watch`, and `list` the Pod resources in the `critical-project` namespace. When
    the user only has the role `Pod-reader`, they will not be able to delete or modify
    the resources in the `critical-project` namespace. Let''s see how roles are assigned
    to users using the `RoleBinding` resource:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面片段中定义的`Pod-reader`角色只允许在`critical-project`命名空间中`get`、`watch`和`list` Pod资源。当用户只有`Pod-reader`角色时，他们将无法删除或修改`critical-project`命名空间中的资源。让我们看看如何使用`RoleBinding`资源将角色分配给用户：
- en: '[PRE26]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `RoleBinding` resource combines the `Role` resource with the subjects. In
    `read-Pods RoleBinding`, the user `new-intern` is assigned to the `Pod-reader`
    `Role`. When the `read-Pods` resource is created in the Kubernetes API, it will
    not be possible for the `new-intern` user to modify or delete the Pods in the
    `critical-project` namespace.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`RoleBinding`资源将`Role`资源与主体结合起来。在`read-Pods RoleBinding`中，用户`new-intern`被分配到`Pod-reader`角色。当在Kubernetes
    API中创建`read-Pods`资源时，`new-intern`用户将无法修改或删除`critical-project`命名空间中的Pods。'
- en: In the following exercise, you will see the Kubernetes resources in action using
    `kubectl` and the local Kubernetes cluster.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将使用`kubectl`和本地Kubernetes集群来实践Kubernetes资源。
- en: 'Exercise 10.03: Kubernetes Resources in Action'
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.03：Kubernetes资源实践
- en: Cloud-native containerized applications require multiple Kubernetes resources
    due to their complex nature. In this exercise, you will create an instance of
    the popular WordPress application on Kubernetes by using one **Statefulset**,
    one **Deployment**, and two **Service** resources. In addition, you will check
    the status of the Pods and connect to the Service using `kubectl` and `minikube`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 由于云原生容器化应用的复杂性，需要多个Kubernetes资源。在这个练习中，您将使用一个**Statefulset**、一个**Deployment**和两个**Service**资源在Kubernetes上创建一个流行的WordPress应用的实例。此外，您将使用`kubectl`和`minikube`检查Pods的状态并连接到Service。
- en: 'To complete this exercise, perform the following steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个练习，请执行以下步骤：
- en: 'Create a `StatefulSet` definition in a file, named `database.yaml`, with the
    following content:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个名为`database.yaml`的文件中创建一个`StatefulSet`定义，内容如下：
- en: '[PRE27]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This `StatefulSet` resource defines a database to be used by WordPress in the
    following steps. There is only one container named `mysql` with the Docker image
    of `mysql:5.7`. There is one environment variable for the root password and one
    port defined in the container specification. In addition, one volume is claimed
    and attached to `/var/lib/mysql` in the preceding definition.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`StatefulSet`资源定义了一个数据库，将在接下来的步骤中被WordPress使用。只有一个名为`mysql`的容器，使用`mysql:5.7`的Docker镜像。容器规范中定义了一个根密码的环境变量和一个端口。此外，在前述定义中声明了一个卷并将其附加到`/var/lib/mysql`。
- en: 'Deploy the `StatefulSet` to the cluster by running the following command in
    your terminal:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行以下命令将`StatefulSet`部署到集群中：
- en: '[PRE28]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This command will apply the definition in the `database.yaml` file since it
    is passed with the `-f` flag:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将应用`database.yaml`文件中的定义，因为它带有`-f`标志：
- en: '[PRE29]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a `database-service.yaml` file in your local computer with the following
    content:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地计算机上创建一个`database-service.yaml`文件，包含以下内容：
- en: '[PRE30]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This Service resource defines a Service abstraction over database instances.
    WordPress instances will connect to the database by using the specified Service.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Service资源定义了数据库实例上的Service抽象。WordPress实例将使用指定的Service连接到数据库。
- en: 'Deploy the Service resource with the following command:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令部署Service资源：
- en: '[PRE31]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This command deploys the resource defined in the `database-service.yaml` file:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令部署了在`database-service.yaml`文件中定义的资源：
- en: '[PRE32]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a file with the name `wordpress.yaml` and the following content:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`wordpress.yaml`的文件，并包含以下内容：
- en: '[PRE33]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This `Deployment` resource defines a three-replica WordPress installation. There
    is one container defined with the `wordpress:4.8-apache` image and `database-service`
    is passed to the application as an environment variable. With the help of this
    environment variable, WordPress connects to the database deployed in *Step 3*.
    In addition, a container port is defined on port `80` so that we can reach the
    application from the browser in the following steps.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Deployment`资源定义了一个三个副本的WordPress安装。有一个容器定义了`wordpress:4.8-apache`镜像，并且`database-service`作为环境变量传递给应用程序。通过这个环境变量的帮助，WordPress连接到*步骤3*中部署的数据库。此外，定义了一个容器端口，端口号为`80`，以便我们可以在接下来的步骤中从浏览器中访问应用程序。
- en: 'Deploy the WordPress Deployment with the following command:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令部署WordPress Deployment：
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This command deploys the resource defined in the `wordpress.yaml` file:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令部署了在`wordpress.yaml`文件中定义的资源：
- en: '[PRE35]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a `wordpress-service.yaml` file on your local computer with the following
    content:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地计算机上创建一个`wordpress-service.yaml`文件，包含以下内容：
- en: '[PRE36]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This Service resource defines a Service abstraction over the WordPress instances.
    The Service will be used to connect to WordPress from the outside world via port
    `80`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Service资源定义了WordPress实例上的Service抽象。该Service将用于通过端口`80`从外部世界连接到WordPress。
- en: 'Deploy the `Service` resource with the following command:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令部署`Service`资源：
- en: '[PRE37]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This command deploys the resource defined in the `wordpress-service.yaml` file:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令部署了在`wordpress-service.yaml`文件中定义的资源：
- en: '[PRE38]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Check the status of all running Pods with the following command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查所有运行中的Pod的状态：
- en: '[PRE39]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This command lists all the Pods with their statuses, and there are one database
    and three WordPress Pods with the `Running` status:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令列出了所有Pod及其状态，有一个数据库和三个WordPress Pod处于`Running`状态：
- en: '![Figure 10.13: Pod listing'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.13：Pod列表'
- en: '](image/B15021_10_13.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_13.jpg)'
- en: 'Figure 10.13: Pod listing'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13：Pod列表
- en: 'Get the URL of `wordpress-service` by running the following command:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令获取`wordpress-service`的URL：
- en: '[PRE40]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This command lists the URL of the Service, accessible from the host machine:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令列出了可以从主机机器访问的Service的URL：
- en: '[PRE41]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Open the URL in your browser to access the setup screen of WordPress:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开URL以访问WordPress的设置屏幕：
- en: '![Figure 10.14: WordPress setup screen'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.14：WordPress设置屏幕'
- en: '](image/B15021_10_14.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_14.jpg)'
- en: 'Figure 10.14: WordPress setup screen'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14：WordPress设置屏幕
- en: The setup screen indicates that the WordPress instances are running and accessible
    via their Service. Furthermore, it shows that the `StatefulSet` database is also
    running and accessible via its Service by the WordPress instances.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 设置屏幕显示WordPress实例正在运行，并且可以通过它们的服务访问。此外，它显示`StatefulSet`数据库也正在运行，并且可以通过WordPress实例的服务访问。
- en: 'In this exercise, you have used different Kubernetes resources to define and
    install a complex application in Kubernetes. First, you deployed a `Statefulset`
    resource for installing MySQL in the cluster. Then, you deployed a `Service` resource
    to reach the database inside the cluster. Following that, you deployed a `Deployment`
    resource to install the WordPress application. Similarly, you created another
    `Service` to reach the WordPress application outside the cluster. You have created
    independently scalable and reliable microservices using different Kubernetes resources
    and connected them. Furthermore, you have learned how to check the status of `Pods`.
    In the following section, you will learn about the Kubernetes package manager:
    Helm.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经使用不同的Kubernetes资源来定义和安装Kubernetes中的复杂应用程序。首先，您部署了一个`Statefulset`资源来在集群中安装MySQL。然后，您部署了一个`Service`资源来在集群内部访问数据库。随后，您部署了一个`Deployment`资源来安装WordPress应用程序。类似地，您创建了另一个`Service`来在集群外部访问WordPress应用程序。您使用不同的Kubernetes资源创建了独立可伸缩和可靠的微服务，并将它们连接起来。此外，您已经学会了如何检查`Pods`的状态。在接下来的部分，您将了解Kubernetes软件包管理器：Helm。
- en: 'Kubernetes Package Manager: Helm'
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes软件包管理器：Helm
- en: Kubernetes applications consist of multiple containers, volumes, and networking
    resources due to the nature of cloud-native microservices architecture. The microservice
    architecture divides large applications into smaller chunks and thus results in
    numerous Kubernetes resources and a vast amount of configuration values.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 由于云原生微服务架构的特性，Kubernetes应用程序由多个容器、卷和网络资源组成。微服务架构将大型应用程序分成较小的块，因此会产生大量的Kubernetes资源和大量的配置值。
- en: Helm is the official Kubernetes package manager that collects the resources
    of applications as templates and fills them with the values provided. The essential
    advantage here is the accumulated community knowledge of installing the applications
    with the best practices. You can install an app with the most popular methods,
    even if you are working with it for the first time. Besides, working with Helm
    charts augments the developer experience.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是官方的Kubernetes软件包管理器，它将应用程序的资源收集为模板，并填充提供的值。这里的主要优势在于积累的社区知识，可以按照最佳实践安装应用程序。即使您是第一次使用，也可以使用最流行的方法安装应用程序。此外，使用Helm图表增强了开发人员的体验。
- en: For instance, installing and managing complex applications in Kubernetes becomes
    similar to downloading apps in Apple Store or Google Play Store, with fewer commands
    and configurations. In Helm terminology, a collection of resources for a single
    application is a **chart**. Charts can be used to deploy anything from a simple
    pod to a full web app stack with HTTP servers, databases, caches, and such when
    you work with the Helm package manager. The encapsulation of applications as charts
    makes it easier to deploy complicated applications.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Kubernetes中安装和管理复杂的应用程序就变得类似于在Apple Store或Google Play Store中下载应用程序，只需要更少的命令和配置。在Helm术语中，一个单个应用程序的资源集合被称为**chart**。当您使用Helm软件包管理器时，可以使用图表来部署从简单的pod到带有HTTP服务器、数据库、缓存等的完整Web应用程序堆栈。将应用程序封装为图表使得部署复杂的应用程序变得更容易。
- en: In addition, Helm has a chart repository with popular and stable applications
    that are packaged as charts and maintained by the Helm community. The stable Helm
    chart repository has a high variety of applications, including databases such
    as MySQL, PostgreSQL, CouchDB, and InfluxDB; CI/CD tools such as Jenkins, Concourse,
    and Drone; or monitoring tools such as Grafana, Prometheus, Datadog, and Fluentd.
    The chart repository not only makes it easier to install apps but also ensures
    that you are deploying the application with the latest, well-accepted methods
    in the Kubernetes community.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Helm还有一个图表存储库，其中包含流行和稳定的应用程序，这些应用程序被打包为图表，并由Helm社区维护。稳定的Helm图表存储库拥有各种各样的应用程序，包括MySQL、PostgreSQL、CouchDB和InfluxDB等数据库；Jenkins、Concourse和Drone等CI/CD工具；以及Grafana、Prometheus、Datadog和Fluentd等监控工具。图表存储库不仅使安装应用程序变得更加容易，还确保您使用Kubernetes社区中最新、广受认可的方法部署应用程序。
- en: 'Helm is a client tool, with its latest version being Helm 3\. You only need
    to install it on your local system, configure it for the chart repository, and
    then you can start deploying applications. Helm is a powerful package manager
    with its exhaustive set of commands, including the following:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是一个客户端工具，其最新版本为Helm 3。您只需要在本地系统上安装它，为图表存储库进行配置，然后就可以开始部署应用程序。Helm是一个功能强大的软件包管理器，具有详尽的命令集，包括以下内容：
- en: '`helm repo`: This command adds, lists, removes, updates, and indexes chart
    repositories to the local Helm installation.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm repo`：此命令向本地Helm安装添加、列出、移除、更新和索引图表存储库。'
- en: '`helm search`: This command searches for Helm charts in various repositories
    using user-provided keywords or chart names.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm search`：此命令使用用户提供的关键字或图表名称在各种存储库中搜索Helm图表。'
- en: '`helm install`: This command installs a Helm chart on the Kubernetes cluster.
    It is also possible to set variables with a value file or command-line parameters.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm install`：此命令在Kubernetes集群上安装Helm图表。还可以使用值文件或命令行参数设置变量。'
- en: '`helm list` or `helm ls`: These commands list the installed charts from the cluster.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm list`或`helm ls`：这些命令列出了从集群中安装的图表。'
- en: '`helm uninstall`: This command removes an installed chart from Kubernetes.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm uninstall`：此命令从Kubernetes中移除已安装的图表。'
- en: '`helm upgrade`: This command upgrades an installed chart with new values or
    new chart versions on the cluster.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm upgrade`：此命令使用新值或新的图表版本在集群上升级已安装的图表。'
- en: In the following exercise, you will install Helm, connect to a chart repository,
    and install applications on the cluster.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将安装Helm，连接到图表存储库，并在集群上安装应用程序。
- en: 'Exercise 10.04: Installing the MySQL Helm Chart'
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.04：安装MySQL Helm图表
- en: Helm charts are installed and managed by the official client tool, `helm`. You
    need to install the `helm` client tool locally to retrieve the charts from the
    chart repository and then install applications on the clusters. In this exercise,
    you will start working with Helm and install **MySQL** from its stable Helm chart.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Helm图表由官方客户端工具`helm`安装和管理。您需要在本地安装`helm`客户端工具，以从图表存储库检索图表，然后在集群上安装应用程序。在此练习中，您将开始使用Helm，并从其稳定的Helm图表中安装**MySQL**。
- en: 'To complete this exercise, perform the following steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此练习，请执行以下步骤：
- en: 'Run the following command in your terminal to download the latest version of
    the `helm` executable with the installation script:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令以下载带有安装脚本的`helm`可执行文件的最新版本：
- en: '[PRE42]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The script downloads the appropriate binary of `helm` for your operating system
    and makes it ready to use in the Terminal:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本将下载适用于您的操作系统的`helm`二进制文件，并使其在终端中可用。
- en: '![Figure 10.15: Installation of Helm'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.15：安装Helm'
- en: '](image/B15021_10_15.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_15.jpg)'
- en: 'Figure 10.15: Installation of Helm'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15：安装Helm
- en: 'Add the chart repository to `helm` by running the following command in your terminal:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行以下命令，将图表存储库添加到`helm`中：
- en: '[PRE43]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This command adds the URL of the chart repository to the locally installed
    `helm` instance:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将图表存储库的URL添加到本地安装的`helm`实例中：
- en: '[PRE44]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'List the charts in the `stable` repository from *Step 2* with the following command:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令列出*步骤2*中`stable`存储库中的图表：
- en: '[PRE45]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This command will list all the available charts in the repository:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将列出存储库中所有可用的图表：
- en: '![Figure 10.16: Chart repository listing'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.16：图表存储库列表'
- en: '](image/B15021_10_16.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_16.jpg)'
- en: 'Figure 10.16: Chart repository listing'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16：图表存储库列表
- en: 'Install the MySQL chart with the following command:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装MySQL图表：
- en: '[PRE46]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This command will install the MySQL Helm chart from the `stable` repository
    under the name `database` and print information on how to connect to the database:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将从`stable`存储库中安装MySQL Helm图表，并打印如何连接到数据库的信息：
- en: '![Figure 10.17: MySQL installation'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.17：MySQL安装'
- en: '](image/B15021_10_17.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_17.jpg)'
- en: 'Figure 10.17: MySQL installation'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17：MySQL安装
- en: The information in the output is valuable if you want to connect to the MySQL
    installation using the `mysql` client inside or outside the cluster.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要使用`mysql`客户端在集群内部或外部连接到MySQL安装，输出中的信息是有价值的。
- en: 'Check the status of the installation with the following command:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查安装的状态：
- en: '[PRE47]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We can see that there is an installation of `mysql-chart-1.6.2` with the status
    `deployed`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有一个名为`mysql-chart-1.6.2`的安装，状态为`deployed`：
- en: '![Figure 10.18: Helm installation status'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.18：Helm安装状态'
- en: '](image/B15021_10_18.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_18.jpg)'
- en: 'Figure 10.18: Helm installation status'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.18：Helm安装状态
- en: You can also use the `helm ls` command to check the application and chart versions,
    such as `5.7.28` and `mysql-1.6.2`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`helm ls`命令来检查应用程序和图表版本，例如`5.7.28`和`mysql-1.6.2`。
- en: 'Check for the Kubernetes resources related to the installation from *Step 4*
    with the following command:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查与*步骤4*中安装相关的Kubernetes资源：
- en: '[PRE48]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This command lists all the resources with the label `release = database`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出所有具有标签`release = database`的资源：
- en: '![Figure 10.19: Kubernetes resource listing'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.19：Kubernetes资源列表'
- en: '](image/B15021_10_19.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_19.jpg)'
- en: 'Figure 10.19: Kubernetes resource listing'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19：Kubernetes资源列表
- en: There are various resources listed since the installation of a production-grade
    MySQL instance is not straightforward and consists of multiple resources. Thanks
    to Helm, we do not need to configure each of these resources and connect them.
    In addition, listing with the label `release = database` is helpful to provide
    a troubleshooting overview when some parts of your Helm installation fail.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '由于安装生产级别的MySQL实例并不简单，并且由多个资源组成，因此列出了各种资源。多亏了Helm，我们不需要配置每个资源并连接它们。此外，使用标签`release
    = database`进行列出有助于在Helm安装的某些部分失败时提供故障排除概述。 '
- en: In this exercise, you have installed and configured the Kubernetes package manager,
    Helm, and installed applications using it. Helm is an essential tool if you are
    planning to use Kubernetes for production and need to manage complex applications.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经安装和配置了Kubernetes包管理器Helm，并使用它安装了应用程序。如果您计划在生产环境中使用Kubernetes并需要管理复杂的应用程序，Helm是一个必不可少的工具。
- en: In the following activity, you will configure and deploy the Panoramic Trekking
    App to the Kubernetes cluster.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的活动中，您将配置并部署全景徒步应用程序到Kubernetes集群。
- en: 'Activity 10.01: Installing the Panoramic Trekking App on Kubernetes'
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动10.01：在Kubernetes上安装全景徒步应用程序
- en: You have been assigned to create a Deployment of the Panoramic Trekking App
    on Kubernetes. You will take advantage of the three-tier architecture of the Panoramic
    Trekking App with state-of-the-art Kubernetes resources. You will install the
    database using Helm, and the backend with `nginx` using a Statefulset. Therefore,
    you will design it as a Kubernetes application and manage it with `kubectl` and
    `helm`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 您被指派在Kubernetes上创建全景徒步应用程序的部署。您将利用全景徒步应用程序的三层架构和最先进的Kubernetes资源。您将使用Helm安装数据库，并使用Statefulset和`nginx`安装后端。因此，您将将其设计为Kubernetes应用程序，并使用`kubectl`和`helm`进行管理。
- en: 'Perform the following steps to complete the exercise:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成练习：
- en: Install the database using the PostgreSQL Helm chart. Ensure that the `POSTGRES_PASSWORD`
    environment variable is set to `kubernetes`.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用PostgreSQL Helm图表安装数据库。确保`POSTGRES_PASSWORD`环境变量设置为`kubernetes`。
- en: Create a Statefulset with two containers for the Panoramic Trekking App backend
    and `nginx`. Ensure that you are using the Docker images, `packtworkshops/the-docker-workshop:chapter10-pta-web`
    and `packtworkshops/the-docker-workshop:chapter10-pta-nginx`, for the containers.
    In order to store the static files, you need to create a `volumeClaimTemplate`
    section and mount it to the `/Service/static/` paths of both containers. Finally,
    do not forget to publish port `80` of the `nginx` container.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为全景徒步应用程序的后端和`nginx`创建一个具有两个容器的Statefulset。确保使用Docker镜像`packtworkshops/the-docker-workshop:chapter10-pta-web`和`packtworkshops/the-docker-workshop:chapter10-pta-nginx`。为了存储静态文件，您需要创建一个`volumeClaimTemplate`部分，并将其挂载到两个容器的`/Service/static/`路径。最后，不要忘记发布`nginx`容器的端口`80`。
- en: Create a Kubernetes Service for the Panoramic Trekking App to connect to the
    Statefulset created in *Step 2*. Ensure that the `type` of Service is `LoadBalancer`.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为全景徒步应用程序创建一个Kubernetes服务，以连接到*步骤2*中创建的Statefulset。确保服务的`type`是`LoadBalancer`。
- en: 'With a successful deployment, obtain the IP of the Kubernetes Service created
    in *Step 3* and connect to the `$SERVICE_IP/admin` address in the browser:![Figure
    10.20: Admin login'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功部署后，获取*步骤3*中创建的Kubernetes服务的IP，并在浏览器中连接到`$SERVICE_IP/admin`地址：![图10.20：管理员登录
- en: '](image/B15021_10_20.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_20.jpg)'
- en: 'Figure 10.20: Admin login'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20：管理员登录
- en: 'Log in with the username `admin` and the password `changeme` and add new photos
    and countries:![Figure 10.21: Admin setup'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用用户名`admin`和密码`changeme`登录，并添加新的照片和国家：![图10.21：管理员设置
- en: '](image/B15021_10_21.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_21.jpg)'
- en: 'Figure 10.21: Admin setup'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21：管理员设置
- en: 'The Panoramic Trekking App will be available at the address `$SERVICE_IP/photo_viewer`
    in the browser:![Figure 10.22: Application view'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全景徒步应用程序将在浏览器中的地址`$SERVICE_IP/photo_viewer`上可用：![图10.22：应用程序视图
- en: '](image/B15021_10_22.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_22.jpg)'
- en: 'Figure 10.22: Application view'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.22：应用程序视图
- en: Note
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor345).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor345)找到。
- en: Summary
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on using Kubernetes to design, create, and manage containerized
    applications. Kubernetes is the up-and-coming container orchestrator in the market,
    with a high adoption rate and an active community. In this chapter, you have learned
    about its architecture and design, followed by the Kubernetes API and its access
    methods, and dove into the vital Kubernetes resources to create complex cloud-native
    applications.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了使用Kubernetes设计、创建和管理容器化应用程序。Kubernetes是市场上新兴的容器编排器，具有很高的采用率和活跃的社区。在本章中，您已经了解了其架构和设计，接着是Kubernetes
    API及其访问方法，并深入了解了创建复杂的云原生应用程序所需的关键Kubernetes资源。
- en: Every exercise in this chapter aimed to illustrate the Kubernetes design approach
    and its capabilities. With the Kubernetes resources and its official client tool,
    `kubectl`, it is possible to configure, deploy, and manage containerized applications.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的每个练习都旨在说明Kubernetes的设计方法和其能力。通过Kubernetes资源及其官方客户端工具`kubectl`，可以配置、部署和管理容器化应用程序。
- en: In the following chapter, you will learn about security in the Docker world.
    You will learn the security concepts for container runtimes, container images,
    and Linux environments, and how to securely run containers in Docker.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将了解Docker世界中的安全性。您将学习容器运行时、容器镜像和Linux环境的安全概念，以及如何在Docker中安全运行容器。
