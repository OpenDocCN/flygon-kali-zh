- en: Chapter 9. Introduction to the NumPy C-API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：NumPy C-API 简介
- en: NumPy is a general-purpose library, designed to address most of the needs of
    a developer of scientific applications. However, as the code base and coverage
    of an application increase, so does the computation, and sometimes users demand
    more specific operations and optimized code segments. We have shown how NumPy
    and Python have tools, such as f2py and Cython, to address these demands. These
    tools may be an excellent choice for rewriting your functions to a natively compiled
    code in order to provide extra speed. But there may be some cases (leveraging
    a C library, such as **NAG** , to write some analytics) where you may want to
    do something more radical such as create a new data structure specifically for
    your own library. This would require you to have access to low-level controls
    in the Python interpreter. In this chapter, we will be looking into how to do
    this using the C-API provided by Python and its extension, the NumPy C-API. The
    C-API itself is a very vast topic and may require a book on its own to fully cover
    it. Here, we will provide a brief introduction and examples to get you started
    with the NumPy C-API.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 是一个通用库，旨在满足科学应用开发人员的大多数需求。 但是，随着应用的代码库和覆盖范围的增加，计算也随之增加，有时用户需要更具体的操作和优化的代码段。
    我们已经展示了 NumPy 和 Python 如何具有诸如 F2PY 和 Cython 之类的工具来满足这些需求。 这些工具可能是将函数重写为本地编译代码以提高速度的绝佳选择。
    但是在某些情况下（利用 C 库，例如 **NAG** 编写一些分析），您可能想做一些更根本的事情，例如为您自己的库专门创建新的数据结构。 这将要求您有权访问
    Python 解释器中的低级控件。 在本章中，我们将研究如何使用 Python 及其扩展名 NumPy C-API 提供的 C-API 进行此操作。 C-API
    本身是一个非常广泛的主题，可能需要一本书才能完全涵盖它。 在这里，我们将提供简短的介绍和示例，以帮助您开始使用 NumPy C-API。
- en: 'Topics that will be covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及的主题是：
- en: The Python C-API and the NumPy C-API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python C-API 和 NumPy C-API
- en: The basic structure of an extension module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展模块的基本结构
- en: An introduction to some NumP-specific C-API functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些特定于 NumPy 的 C-API 函数的简介
- en: Creating functions using the C-API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 C-API 创建函数
- en: Creating a callable module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个可调用的模块
- en: Using a module through the Python interpreter and another module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Python 解释器和其他模块使用模块
- en: The Python and NumPy C-API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 和 NumPy C-API
- en: The Python implementation that we are using is a C-based implementation of the
    Python interpreter. NumPy is specifically for this C-based Python implementation.
    This implementation of Python comes with a C-API, which is the backbone of the
    interpreter and provides low-level control to its user. NumPy has further augmented
    this by providing a rich C-API.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的 Python 实现是 Python 解释器的基于 C 的实现。 NumPy 专用于此基于 C 的 Python 实现。 Python 的此实现带有
    C-API，它是解释器的基础，并向其用户提供低级控制。 NumPy 通过提供丰富的 C-API 进一步增强了这一功能。
- en: Writing functions in C/C++ can provide developers with the flexibility to leverage
    some of the advanced libraries available in these languages. However, the cost
    is apparent in terms of having to write too much boilerplate code around parsing
    input in order to construct return values. Additionally, developers have to take
    care while referencing/dereferencing objects since this could eventually create
    nasty bugs and memory leaks. There is also the problem of future compatibility
    of the code as the C-API keeps on evolving; hence, if a developer wants to migrate
    to a later version of Python, they may be up for a lot of maintenance work on
    these C-API-based extensions. Because of these difficulties, most developers choose
    to try other optimization techniques. such as Cython or F2PY, before exploring
    this path. However, there are cases where you would want to reuse some other existing
    libraries in C/C++, which could suit your specific purpose. In these cases, it
    might be a good idea to write wrappers over existing functions and expose your
    Python project.
  prefs: []
  type: TYPE_NORMAL
  zh: 用 C/C++ 编写函数可以为开发人员提供灵活性，以利用这些语言提供的一些高级库。 但是，就必须在解析输入周围编写太多样板代码以构造返回值而言，代价显而易见。
    此外，开发人员在引用/解引用对象时必须格外小心，因为这最终可能会导致讨厌的错误和内存泄漏。 随着 C-API 的不断发展，还存在代码未来兼容性的问题。 因此，如果开发人员想要迁移到更高版本的
    Python，则他们可能需要为这些基于 C-API 的扩展进行大量维护工作。 由于这些困难，大多数开发人员选择尝试其他优化技术。 （例如 Cython 或
    F2PY），然后再探索这条路径。 但是，在某些情况下，您可能想重用 C/C++ 中的其他现有库，这可能适合您的特定目的。 在这些情况下，最好为现有函数编写包装并公开
    Python 项目。
- en: We will next look at some example code and explain the key functions and macros
    as we move further along in this chapter. The code given here is compatible with
    the Python 2.X version and may not work for Python 3.X; however, the process of
    conversion should be similar.
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一些示例代码，并在本章继续介绍时解释其关键函数和宏。 此处提供的代码与 Python 2.X 版本兼容，可能不适用于 Python 3.X。
    但是，转换过程应该相似。
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: Developers can try using a tool called **cpychecker** to check for common mistakes
    while reference counting in a module. Visit  [http://gcc-python-plugin.readthedocs.org/en/latest/cpychecker.html](http://gcc-python-plugin.readthedocs.org/en/latest/cpychecker.html)
    for more details.
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以尝试使用称为 **cpychecker** 的工具来检查模块中的引用计数时的常见错误。 请访问[`gcc-python-plugin.readthedocs.org/en/latest/cpychecker.html`](http://gcc-python-plugin.readthedocs.org/en/latest/cpychecker.html)了解更多详细信息。
- en: The basic structure of an extension module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展模块的基本结构
- en: 'An extension module written in C will have the following parts:'
  prefs: []
  type: TYPE_NORMAL
  zh: 用 C 编写的扩展模块将包含以下部分：
- en: A header segment, where you include all your external libraries and `Python.h`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标头段，其中包含所有外部库和`Python.h`
- en: An initialization segment, where you define the module name and the functions
    in your C module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化段，您可以在其中定义模块名称和 C 模块中的函数
- en: A method structure array to define all the functions in your module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法结构数组，用于定义模块中的所有函数
- en: An implementation segment, where you define all the functions that you would
    like to expose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实现部分，您在其中定义要公开的所有函数
- en: The header segment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标头段
- en: 'Header snippets are quite standard, just like a normal C module. We need to
    include the `Python.h` header file to give our C code access to the internals
    of the C-API. This file is present in `<path_to_python>/include` . We will be
    using an array object in our example code, hence we have included the `numpy/arrayobject.h`
    header file as well. We don''t need to specify the full path of the header file
    here as the path resolution is taken care of in `setup.py` , which we will take
    a look at later:'
  prefs: []
  type: TYPE_NORMAL
  zh: 标题片段是非常标准的，就像普通的 C 模块一样。 我们需要包括`Python.h`头文件，以使我们的 C 代码可以访问 C-API 的内部。 该文件位于`<path_to_python>/include`中。
    我们将在示例代码中使用数组对象，因此我们也包含了`numpy/arrayobject.h`头文件。 我们不需要在此处指定头文件的完整路径，因为路径解析是在`setup.py`中处理的，我们将在后面进行介绍：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The initialization segment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化段
- en: 'The initialization segment starts with the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化段从以下内容开始：
- en: A call to a `PyMODINIT_FUNC` macro. This macro is defined in the Python header
    and will always be called before you start defining your module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`PyMODINIT_FUNC`宏。 此宏在 Python 标头中定义，并且在开始定义模块之前总是会被调用。
- en: The next line defines the initialization function and is called by the Python
    interpreter when the function is loaded. The function name has to be in the `init<module_name>`
    format, the name of the module and functions that your C code is going to expose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一行定义了初始化函数，并在加载该函数时由 Python 解释器调用。 函数名称必须为`init<module_name>`格式，C 代码将要公开的模块和函数的名称。
- en: 'The body of this function contains a call to `Py_InitModule3` , which defines
    the name of the module and the functions in it. The general structure of this
    function is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的主体包含对`Py_InitModule3`的调用，该调用定义模块的名称和模块中的函数。 该函数的一般结构如下：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The final call to `import_array()` is a NumPy-specific function, which is required
    if your functions are using Numpy Array objects. This ensures that the C-API is
    loaded so that the API table is available if your C++ code uses the C-API. Failure
    to call this function and use other NumPy API functions will most likely result
    in a segmentation fault error. You are advised to read about `import_array()`
    and `import_ufunc()` in the NumPy documentation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对`import_array()`的最终调用是特定于 NumPy 的函数，如果您的函数正在使用 Numpy 数组对象，则需要此函数。 这样可以确保加载
    C-API，以便如果您的 C++ 代码使用 C-API，则 API 表可用。 未能调用此函数和使用其他 NumPy API 函数将很可能导致分段错误错误。
    建议您阅读 NumPy 文档中的`import_array()`和`import_ufunc()`：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The method structure array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法结构数组
- en: 'In this segment, you will define the array of methods that your module is going
    to expose to Python. We have defined two functions here that square its argument.
    One takes a plain Python double value as input and the second method operates
    on Numpy Arrays. The `PyMethodDef` structure can be defined in C as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部分中，您将定义模块将要公开给 Python 的方法数组。 我们在这里定义了两个函数以求其平方。 一种方法将普通的 Python `double`值作为输入，第二种方法对
    Numpy 数组进行操作。 `PyMethodDef`结构可以在 C 中定义如下：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the description of the members of this structure:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是此结构的成员的描述：
- en: '`method_name` : The name of the function goes here. This will be the name by
    which the function will be exposed to the Python interpreter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method_name`：函数的名称在此处。 这将是函数向 Python 解释器公开的名称。'
- en: '`method_function` : This variable holds the name of the C function that is
    actually called when `method_name` is invoked in the Python interpreter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method_function`：此变量保存在 Python 解释器中调用`method_name`时实际调用的 C 函数的名称。'
- en: '`method_flags` : This tells the interpreter which of the three signatures our
    function is using. This flag usually has a value of `METH_VARARGS` . This flag
    can be combined with `METH_KEYWORDS` if you want to allow keyword arguments into
    your function. This can also have a value of `METH_NOARGS` , which would indicate
    that you do not want to accept any arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method_flags`：这告诉解释器我们的函数正在使用三个签名中的哪个。 该标志的值通常为`METH_VARARGS`。 如果要允许关键字参数进入函数，可以将该标志与`METH_KEYWORDS`组合。
    它也可以具有`METH_NOARGS`的值，这表明您不想接受任何参数。'
- en: '`method_docstring` : This is the docstring for the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method_docstring`：这是函数的文档字符串。'
- en: 'This structure needs to be terminated with a sentinel that consists of NULL
    and 0 as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该结构需要以一个由`NULL`和 0 组成的标记终止，如以下示例所示：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The implementation segment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现部分
- en: The implementation section is the most straightforward section. This is where
    the C definition of your methods will go. Here, we will study two functions that
    square their input values. The complexity of these functions is kept low so as
    to let you focus on the structure of the method.
  prefs: []
  type: TYPE_NORMAL
  zh: 实现部分是最直接的部分。 这就是方法的 C 定义所要去的地方。 在这里，我们将研究两个函数来平方它们的输入值。 这些函数的复杂度保持在较低水平，以便您专注于方法的结构。
- en: Creating an array squared function using Python C-API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python C-API 创建数组平方函数
- en: The Python function passes a reference to itself as the first argument, followed
    by real arguments given to the function. The `PyArg_ParseTuple` function is used
    to parse values from the Python function to local variables in the C function.
    In this function, we cast a value to a double, and hence we use `d` as the second
    argument. You can see a full list of strings that are accepted by this function
    at  [https://docs.python.org/2/c-api/arg.html](https://docs.python.org/2/c-api/arg.html)
    .
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数将对自身的引用作为第一个参数，然后是赋予该函数的真实参数。 `PyArg_ParseTuple`函数用于将 Python 函数中的值解析为
    C 函数中的局部变量。 在此函数中，我们将值强制转换为双精度，因此我们将`d`用作第二个参数。 您可以在[`docs.python.org/2/c-api/arg.html`](https://docs.python.org/2/c-api/arg.html)上查看此函数接受的字符串的完整列表。
- en: 'The final result of the computations is returned using `Py_Buildvalue` , which
    takes a similar type of format string to create a Python value from your answer.
    We use `f` here, which stands for float, to demonstrate that double and float
    are treated similarly:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Py_Buildvalue`返回计算的最终结果，它使用类似类型的格式字符串从您的答案中创建 Python 值。 我们在这里使用`f`表示浮点数，以证明对`double`和`float`的处理方式类似：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating an array squared function using NumPy C-API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NumPy C-API 创建数组平方函数
- en: 'In this section, we will create a function to square all the values of the
    NumPy Array. The aim here is to demonstrate how to get a NumPy Array in C and
    then iterate over it. In a real-world scenario, this can be done in an easier
    way using a map or by vectorizing a square function. We are using the same `PyArg_ParseTuple`
    function with the `O!` format string. This format string has a `(object) [typeobject,
    PyObject *]` signature and takes the Python type object as the first argument.
    Users should go through the official API doc to take a look at what other format
    strings are permissible and which one suits their needs:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个函数以对 NumPy 数组的所有值求平方。 这里的目的是演示如何在 C 语言中获取 NumPy 数组，然后对其进行迭代。 在现实世界中，可以使用映射或通过向量化平方函数以更简单的方式完成此操作。
    我们正在使用与`O!`格式字符串相同的`PyArg_ParseTuple`函数。 该格式字符串具有`(object) [typeobject, PyObject *]`签名，并以 Python 类型对象作为第一个参数。 用户应阅读官方 API 文档，以查看允许使用其他格式的字符串以及哪种字符串适合他们的需求：
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If the passed value does not have the same type, then a `TypeError` is raised.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递的值的类型不同，则引发`TypeError`。
- en: The following code snippet explain how to parse the argument using `PyArg_ParseTuple`
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段说明了如何使用`PyArg_ParseTuple`解析参数。
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next step is to create an array to store its output value and iterators
    in order to iterate on Numpy Arrays. Note that there is a `{handle failure}` code
    at each step when we create an object. This is to ensure that, if anything goes
    wrong, we can pinpoint the location of the faulty code via debugging:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个数组以存储其输出值和迭代器，以便在 Numpy 数组上进行迭代。 请注意，创建对象时，每个步骤都有一个`{handle failure}`代码。
    这是为了确保如果发生任何错误，我们可以通过调试来确定错误代码的位置：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After taking a look at the preceding boilerplate code, we finally come to the
    part where all the real action takes place. Those of you who are familiar with
    C++ will find the method of iteration to be similar to the iteration done over
    vectors. The `in_iternext` function that we have defined previously comes in handy
    here and is used to iterate over the Numpy Array. After our while loop, we make
    sure that we call `NpyIter_Deallocate` on both iterators and `Py_INCREF` on the
    output array; failing to call these functions is the most common type of mistake
    that causes memory leaks. Memory leak problems are mostly quite subtle and normally
    make an appearance when you have a long-running code (such as services or a daemon).
    To catch these, there is unfortunately no easier way than using a debugger and
    looking deeper. Sometimes, it helps to just write a couple of `printf` statements,
    which output the total memory usage:'
  prefs: []
  type: TYPE_NORMAL
  zh: 看了前面的样板代码之后，我们终于来到了发生所有实际动作的部分。 那些熟悉 C++ 的人会发现迭代方法与向量迭代相似。 我们之前定义的`in_iternext`函数在这里派上用场，用于迭代
    Numpy 数组。 在`while`循环之后，我们确保在两个迭代器上都调用了`NpyIter_Deallocate`，在输出数组上调用了`Py_INCREF`;
    未能调用这些函数是导致内存泄漏的最常见错误类型。 内存泄漏问题通常非常微妙，通常在具有长时间运行的代码（例如服务或守护程序）时才会出现。 要抓住这些问题，不幸的是，没有比使用调试器更深入的方法容易的方法了。
    有时，只需要编写几个`printf`语句即可输出总内存使用情况：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Building and installing the extension module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和安装扩展模块
- en: 'Once we have written the functions successfully, the next thing to do is build
    the module and use it in our Python modules. The `setup.py` file looks like the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
  zh: 成功编写函数后，下一步是构建模块并在我们的 Python 模块中使用它。 `setup.py`文件看起来像以下代码片段：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As we are using NumPy-specific headers, we need to have the `numpy.get_include`
    function in the `include_dirs` variable. To run this setup file, we will use a
    familiar command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用特定于 NumPy 的标头，因此我们需要在`include_dirs`变量中具有`numpy.get_include`函数。 要运行此安装文件，我们将使用一个熟悉的命令：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding command will create a `numpy_api_demo.pyd` file in the directory
    for us to use in the Python interpreter.
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将在目录中创建一个`numpy_api_demo.pyd`文件，供我们在 Python 解释器中使用。
- en: 'To test our module, we will open a Python interpreter test, and try to call
    these functions from the module exactly like we do for a module written in Python:'
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的模块，我们将打开一个 Python 解释器测试，并尝试像我们对用 Python 编写的模块所做的一样，从该模块调用这些函数：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced you to yet another way of optimizing or integrating
    C/C++ code using the C-API provided by Python and NumPy. We explained the basic
    structure of the code and the additional boilerplate code, which a developer has
    to write in order to create an extension module. Afterwards, we created two functions
    that calculated the square of a number and mapped the square function from the
    `math.h` library to a Numpy Array. The intention here was to familiarize you with
    how to leverage numerical libraries written in C/C++ to create your own modules
    with a minimal rewriting of code. The scope for writing C code is much wider than
    what is described here; however, we hope that this chapter has given you the confidence
    to leverage the C-API if the need arises.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您介绍了另一种使用 Python 和 NumPy 提供的 C-API 优化或集成 C/C++ 代码的方法。 我们解释了该代码的基本结构以及其他示例代码，开发人员必须编写这些代码才能创建扩展模块。
    之后，我们创建了两个函数，这些函数计算出一个数字的平方，并将该平方函数从`math.h`库映射到一个 Numpy 数组。 这里的目的是使您熟悉如何利用 C/C++
    编写的数字库，以最少的代码重写来创建自己的模块。 编写 C 代码的范围比这里描述的要广泛得多。 但是，我们希望本章使您有信心在需要时利用 C-API。
