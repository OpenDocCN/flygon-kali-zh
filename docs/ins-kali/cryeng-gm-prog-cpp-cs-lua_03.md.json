["```cs\n<Entity\n  Name=\"MyLuaEntity\"\n  Script=\"Scripts/Entities/Others/MyLuaEntity.lua\"\n/>\n```", "```cs\n  MyLuaEntity = { }\n```", "```cs\n  MyLuaEntity = {\n    Properties = {\n      myProperty = \"\",\n    },\n  }\n```", "```cs\n  function MyEntity:OnInit()\n  end\n```", "```cs\n  using CryEngine;\n\n  namespace CryGameCode\n  {\n    [Entity]\n    public class MyCSharpEntity : Entity\n    {\n    }\n  }\n```", "```cs\n  [Entity(Category = \"Others\")]\n```", "```cs\n  [EditorProperty]\n  public string MyProperty { get; set; }\n```", "```cs\n  [EditorProperty(Folder = \"MyCategory\")]\n```", "```cs\n  #include <IEntityClass.h>\n\n  class CMyEntityClass : public IEntityClass\n  {\n  };\n```", "```cs\n  IEntityClassRegistry::SEntityClassDesc classDesc;\n\n  classDesc.sName = \"MyEntityClass\";\n  classDesc.editorClassInfo.sCategory = \"MyCategory\";\n\n  IEntitySystem *pEntitySystem = gEnv->pEntitySystem;\n\n  IEntityClassRegistry *pClassRegistry = pEntitySystem->GetClassRegistry();\n\n  bool result = pClassRegistry->RegisterClass(new CMyEntityClass(classDesc));\n```", "```cs\n  class CMyEntityPropertyHandler : public IEntityPropertyHandler\n  {\n  };\n```", "```cs\n  function MyLuaEntity:Event_OnBooleanPort()\n  BroadcastEvent(self, \"MyBooleanOutput\");end\n\n  MyLuaEntity.FlowEvents =\n  {\n    Inputs =\n    {\n      MyBooleanPort = { MyLuaEntity.Event_OnBooleanPort, \"bool\" },\n    },\n    Outputs =\n    {\n      MyBooleanOutput = \"bool\",\n    },\n  }\n```", "```cs\n  using CryEngine.Flowgraph;\n\n  public class MyEntity : Entity { }\n\n  public class MyEntityNode : EntityFlowNode<MyEntity>\n  {\n    [Port]\n    public void Vec3Test(Vec3 input) { }\n\n    [Port]\n    public void FloatTest(float input) { }\n\n    [Port]\n    public void VoidTest()\n    {\n    }\n\n    [Port]\n    OutputPort<bool> BoolOutput { get; set; }\n  }\n```", "```cs\nREGISTER_FLOW_NODE(\"entity:MyCppEntity\", CMyEntityFlowNode);\n```", "```cs\n  #include \"stdafx.h\"\n\n  #include \"Nodes/G2FlowBaseNode.h\"\n\n  class CMyEntityFlowNode : public CFlowBaseNode<eNCT_Instanced>\n  {\n    enum EInput\n    {\n      EIP_InputPort,\n    };\n\n    enum EOutput\n    {\n      EOP_OutputPort\n    };\n\n  public:\n    CMyEntityFlowNode(SActivationInfo *pActInfo)\n    {\n    }\n\n    virtual IFlowNodePtr Clone(SActivationInfo *pActInfo)\n    {\n      return new CMyEntityFlowNode(pActInfo);\n    }\n\n    virtual void ProcessEvent(EFlowEvent evt, SActivationInfo *pActInfo)\n    {\n    }\n\n    virtual void GetConfiguration(SFlowNodeConfig &config)\n    {\n      static const SInputPortConfig inputs[] =\n      {\n        InputPortConfig_Void(\"Input\", \"Our first input port\"),\n        {0}\n      };\n      static const SOutputPortConfig outputs[] =\n      {\n        OutputPortConfig_Void(\"Output\", \"Our first output port\"),\n        {0}\n      };\n\n      config.pInputPorts = inputs;\n      config.pOutputPorts = outputs;\n      config.sDescription = _HELP(\"Entity flow node sample\");\n\n      config.nFlags |= EFLN_TARGET_ENTITY;\n    }\n\n    virtual void GetMemoryUsage(ICrySizer *s) const\n    {\n      s->Add(*this);\n    }\n  };\n\n  REGISTER_FLOW_NODE(\"entity:MyCppEntity\", CMyEntityFlowNode);\n```", "```cs\n  class CMyGameObjectExtension\n    : public CGameObjectExtensionHelper<CMyGameObjectExtension, IGameObjectExtension>\n    {\n    };\n```", "```cs\n  struct SMyGameObjectExtensionCreator\n    : public IGameObjectExtensionCreatorBase\n  {\n    virtual IGameObjectExtension *Create() { return new CMyGameObjectExtension(); }\n\n    virtual void GetGameObjectExtensionRMIData(void **ppRMI, size_t *nCount) { return CMyGameObjectExtension::GetGameObjectExtensionRMIData(ppRMI, nCount); }\n  };\n```", "```cs\nstatic SMyGameObjectExtensionCreator creator;\n  gEnv->pGameFramework->GetIGameObjectSystem()->RegisterExtension(\"MyGameObjectExtension\", &creator, myEntityClassDesc);\n```"]