- en: Chapter 9. Docker Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。Docker安全
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Setting Mandatory Access Control (MAC) with SELinux
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SELinux设置强制访问控制（MAC）
- en: Allowing writes to volume mounted from the host with SELinux ON
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在启用SELinux的情况下对从主机挂载的卷进行写入
- en: Removing capabilities to breakdown the power of a root user inside the container
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除能力以降低容器内部root用户的权限
- en: Sharing namespaces between the host and the container
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主机和容器之间共享命名空间
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Docker containers are not actually Sandbox applications, which means they are
    not recommended to run random applications on the system as root with Docker.
    You should always treat a container running a service/process as a service/process
    running on the host system and put all the security measures inside the container
    you put on the host system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器实际上并不是沙箱应用程序，这意味着不建议在系统上以root身份运行随机应用程序。您应该始终将运行服务/进程的容器视为在主机系统上运行的服务/进程，并在容器内部放置在主机系统上放置的所有安全措施。
- en: We saw in [Chapter 1](part0015.xhtml#aid-E9OE2 "Chapter 1. Introduction and
    Installation"), *Introduction and Installation*, how Docker uses namespaces for
    isolation. The six namespaces that Docker uses are Process, Network, Mount, Hostname,
    Shared Memory, and User. Not everything in Linux is namespaced, for example, SELinux,
    Cgroups, Devices (`/dev/mem`, `/dev/sd*`), and Kernel Modules. Filesystems under
    `/sys`, `/proc/sys`, `/proc/sysrq-trigger`, `/proc/irq`, `/proc/bus` are also
    not namespaced but they are mounted as read only by default with the libcontainer
    execution driver.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](part0015.xhtml#aid-E9OE2 "第1章。介绍和安装")中看到，*介绍和安装*，Docker如何使用命名空间进行隔离。Docker使用的六个命名空间是进程、网络、挂载、主机名、共享内存和用户。在Linux中，并非所有内容都有命名空间，例如SELinux、Cgroups、设备(`/dev/mem`、`/dev/sd*`)和内核模块。文件系统下的`/sys`、`/proc/sys`、`/proc/sysrq-trigger`、`/proc/irq`、`/proc/bus`也没有命名空间，但它们默认以只读方式挂载，使用libcontainer执行驱动程序。
- en: To make Docker a secure environment, a lot of work has been done in the recent
    past and more work is underway.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Docker成为一个安全的环境，最近已经做了很多工作，还有更多的工作正在进行中。
- en: 'As Docker images are the basic building blocks, it is very important that we
    choose the right base image to start with. Docker has the concept of official
    images, which are maintained by either Docker, the vendor or someone else. If
    you recall from [Chapter 2](part0022.xhtml#aid-KVCC1 "Chapter 2. Working with
    Docker Containers"), *Working with Docker Containers*, we can search images on
    Docker Hub using the following syntax:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于Docker镜像是基本构建块，因此非常重要的是我们选择正确的基础镜像开始。Docker有官方镜像的概念，这些镜像由Docker、供应商或其他人维护。如果您还记得[第2章](part0022.xhtml#aid-KVCC1
    "第2章。使用Docker容器")中的内容，*使用Docker容器*，我们可以使用以下语法在Docker Hub上搜索镜像：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, consider the following command :'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will see a column `OFFICIAL`, and if the images are official, you will see
    `[OK]` against that image in that column. There is an experimental feature added
    in Docker 1.3 ([http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/](http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/)),
    which does Digital Signal Verification of official images after pulling the image.
    If the image has been tampered with, the user will be notified, but it will not
    prevent the user from running it. At present, this feature works only with official
    images. More details about official images can be found at [https://github.com/docker-library/official-images](https://github.com/docker-library/official-images).
    The image signing and verification feature is not ready, so as of now, don't completely
    rely on it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一个`OFFICIAL`列，如果镜像是官方的，你将在该列中看到对应的`[OK]`。在Docker 1.3中添加了一个实验性功能（[http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/](http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/)），它在拉取镜像后对官方镜像进行数字信号验证。如果镜像被篡改，用户将收到通知，但不会阻止用户运行它。目前，此功能仅适用于官方镜像。有关官方镜像的更多详细信息，请访问[https://github.com/docker-library/official-images](https://github.com/docker-library/official-images)。镜像签名和验证功能尚未准备就绪，因此目前不要完全依赖它。
- en: In [Chapter 6](part0069.xhtml#aid-21PMQ1 "Chapter 6. Docker APIs and Language
    Bindings"), *Docker APIs and Language Bindings*, we saw how we can secure Docker
    remote API, when Docker daemon access is configured over TCP.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](part0069.xhtml#aid-21PMQ1 "第6章。Docker API和语言绑定")中，*Docker API和语言绑定*，我们看到了当Docker守护程序访问通过TCP配置时，我们如何可以保护Docker远程API。
- en: We can also consider turning off the default intercontainer communication over
    the network with `--icc=false` on the Docker host. Though containers can still
    communicate through links, which overrides the default DROP policy of iptables,
    they get set with the `--icc=false` option.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以考虑在Docker主机上使用`--icc=false`关闭默认的容器间网络通信。尽管容器仍然可以通过链接进行通信，覆盖iptables的默认DROP策略，但它们会使用`--icc=false`选项进行设置。
- en: We can also set Cgroups resource restrictions through, which we can prevent
    **Denial of Service** (**DoS**) attacks through system resource constraints.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以通过Cgroups资源限制来防止**拒绝服务**（**DoS**）攻击通过系统资源约束。
- en: Docker takes advantage of the special device, Cgroups that allows us to specify
    which device nodes can be used within the container. It blocks the processes from
    creating and using device nodes that could be used to attack the host.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker利用了特殊设备Cgroups，允许我们指定容器内可以使用哪些设备节点。它阻止进程创建和使用可能用于攻击主机的设备节点。
- en: Any device node precreated on the image cannot be used to talk to kernel because
    images are mounted with the `nodev` option.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在镜像上预先创建的任何设备节点都不能用于与内核通信，因为镜像是以`nodev`选项挂载的。
- en: 'The following are some guidelines (may not be complete), which one can follow
    to have a secure Docker environment:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些指南（可能不完整），可以遵循以确保安全的Docker环境：
- en: Run services as nonroot and treat the root in the container, as well as outside
    the container, as root.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以非root用户身份运行服务，并将容器内外的root视为root。
- en: Use images from trusted parties to run the container; avoid using the `-insecure-registry=[]`
    option.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自可信方的镜像来运行容器；避免使用`-insecure-registry=[]`选项。
- en: Don't run the random container from the Docker registry or anywhere else. Red
    Hat carries patches to add and block registries to give more control to enterprises
    ([http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/](http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/)).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要从Docker注册表或其他任何地方运行随机容器。Red Hat携带了补丁，以添加和阻止注册表，以便企业有更多控制权（[http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/](http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/)）。
- en: Have your host kernel up to date.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的主机内核是最新的。
- en: Avoid using `--privileged` whenever possible and drop container privileges as
    soon as possible.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量避免使用`--privileged`，并尽快放弃容器特权。
- en: Configure **Mandatory Access Control** (**MAC**) through SELinux or AppArmor.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过SELinux或AppArmor配置**强制访问控制**（**MAC**）。
- en: Collect logs for auditing.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集日志进行审计。
- en: Do regular auditing.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期进行审计。
- en: Run containers on hosts, which are specially designed to run containers only.
    Consider using Project Atomic, CoreOS, or similar solutions.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在专门设计仅运行容器的主机上运行容器。考虑使用Project Atomic、CoreOS或类似的解决方案。
- en: Mount the devices with the `--device` option rather than using the `--privileged`
    option to use devices inside the container.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`--device`选项挂载设备，而不是使用`--privileged`选项在容器内使用设备。
- en: Prohibit SUID and SGID inside the container.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁止容器内的SUID和SGID。
- en: Recently, Docker and the Center for Internet Security ([http://www.cisecurity.org/](http://www.cisecurity.org/))
    released a best practices guide for Docker security, which covers most of the
    preceding guidelines and more guidelines at [https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/](https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Docker和互联网安全中心（[http://www.cisecurity.org/](http://www.cisecurity.org/)）发布了Docker安全最佳实践指南，涵盖了大部分前述指南以及更多指南，网址为[https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/](https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/)。
- en: To set the context for some of the recipes in this chapter, let's try an experiment
    on the default installation on Fedora 21 with Docker installed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为本章中的一些示例设置上下文，让我们尝试在安装了Docker的Fedora 21上进行默认安装的实验。
- en: 'Disable SELinux using the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令禁用SELinux：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a user and add it to the default Docker group so that the user can run
    Docker commands without `sudo`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用户并将其添加到默认的Docker组中，以便用户可以在不使用`sudo`的情况下运行Docker命令：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Log in using the user we created earlier, start a container as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们之前创建的用户登录，启动容器如下：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'From the container chroot to `/host` and run the `shutdown` command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从容器chroot到`/host`并运行`shutdown`命令：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Introduction](../Images/image00408.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Introduction](../Images/image00408.jpeg)'
- en: As we can see, a user in the Docker group can shut down the host system. Docker
    currently does not have authorization control, so if you can communicate to the
    Docker socket, you are allowed to run any Docker command. It is similar to `/etc/sudoers`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，Docker组中的用户可以关闭主机系统。Docker目前没有授权控制，因此如果您可以与Docker套接字通信，就可以运行任何Docker命令。这类似于`/etc/sudoers`。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is really not good. Let's see how we can guard against this and more in
    the rest of the chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的不好。让我们看看在本章的其余部分中如何防范这种情况以及更多内容。
- en: Setting Mandatory Access Control (MAC) with SELinux
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SELinux设置强制访问控制（MAC）
- en: 'It is recommended that you set up some form of MAC on the Docker host either
    through SELinux or AppArmor, depending on the Linux distribution. In this recipe,
    we''ll see how to set up SELinux on a Fedora/RHEL/CentOS installed system. Let''s
    first look at what SELinux is:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在Docker主机上设置某种形式的MAC，可以是通过SELinux或AppArmor，具体取决于Linux发行版。在本教程中，我们将看到如何在安装了Fedora/RHEL/CentOS的系统上设置SELinux。让我们首先看看SELinux是什么：
- en: SELinux is a labeling system
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux是一个标签系统
- en: Every process has a label
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个进程都有一个标签
- en: Every file, directory, and system object has a label
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个文件、目录和系统对象都有一个标签
- en: Policy rules control access between labeled processes and labeled objects
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略规则控制标记进程和标记对象之间的访问
- en: The kernel enforces the rules
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核执行规则
- en: 'With Docker containers, we use two types of SELinux enforcement:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker容器中，我们使用两种类型的SELinux强制：
- en: '**Type enforcement**: This is used to protect the host system from container
    processes. Each container process is labeled `svirt_lxc_net_t` and each container
    file is labeled `svirt_sandbox_file_t`. The `svirt_lxc_net_t` type is allowed
    to manage any content labeled with `svirt_sandbox_file_t`. Container processes
    can only access/write container files.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型强制**：用于保护主机系统免受容器进程的影响。每个容器进程都被标记为`svirt_lxc_net_t`，每个容器文件都被标记为`svirt_sandbox_file_t`。`svirt_lxc_net_t`类型被允许管理任何标记为`svirt_sandbox_file_t`的内容。容器进程只能访问/写入容器文件。'
- en: '**Multi Category Security enforcement**: By setting type enforcement, all container
    processes will run with the `svirt_lxc_net_t` label and all content will be labeled
    with `svirt_sandbox_file_t`. However, only with these settings, we are not protecting
    one container from another because their labels are the same.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多类别安全强制**：通过设置类型强制，所有容器进程将以`svirt_lxc_net_t`标签运行，所有内容都将被标记为`svirt_sandbox_file_t`。然而，只有这些设置，我们无法保护一个容器免受另一个容器的影响，因为它们的标签是相同的。'
- en: We use **Multi Category Security** (**MCS**) enforcement to protect one container
    from another, which is based on **Multi Level Security** (**MLS**). When a container
    is launched, the Docker daemon picks a random MCS label, for example, `s0:c41,c717`
    and saves it with the container metadata. When any container process starts, the
    Docker daemon tells the kernel to apply the correct MCS label. As the MCS label
    is saved in the metadata, if the container restarts, it gets the same MCS label.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**多类别安全**（**MCS**）强制来保护一个容器免受另一个容器的影响，这是基于**多级安全**（**MLS**）的。当启动一个容器时，Docker守护程序会选择一个随机的MCS标签，例如`s0:c41,c717`，并将其保存在容器元数据中。当任何容器进程启动时，Docker守护程序告诉内核应用正确的MCS标签。由于MCS标签保存在元数据中，如果容器重新启动，它将获得相同的MCS标签。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: A Fedora/RHEL/CentOS host with the latest version of Docker installed, which
    can be accessed through a Docker client.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了最新版本的Docker的Fedora/RHEL/CentOS主机上，可以通过Docker客户端访问。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Fedora/RHEL/CentOS gets installed by default with SELinux in enforcing mode
    and the Docker daemon is set to start with SELinux. To check whether these conditions
    are being met, perform the following steps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora/RHEL/CentOS默认安装SELinux并设置为强制模式，并且Docker守护程序设置为与SELinux一起启动。要检查是否满足这些条件，请执行以下步骤。
- en: 'Run the following command to make sure SELinux is enabled:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以确保SELinux已启用：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the preceding command returns `enforcing`, then it's all good, else we need
    to change it by updating SELinux configuration file (`/etc/selinux/config`) and
    rebooting the system.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的命令返回`enforcing`，那就很好，否则我们需要通过更新SELinux配置文件（`/etc/selinux/config`）并重新启动系统来进行更改。
- en: 'Docker should be running with the `--selinux-enabled` option. You can check
    the `OPTIONS` section in the Docker daemon configuration (`/etc/sysconfig/docker`)
    file. Also, cross-check whether the Docker service has started with the SELinux
    option:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker应该使用`--selinux-enabled`选项运行。您可以在Docker守护程序配置（`/etc/sysconfig/docker`）文件的`OPTIONS`部分中检查。还要交叉检查Docker服务是否已启动并使用SELinux选项：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command assumes that you are not starting Docker in daemon mode
    manually.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令假定您没有手动以守护程序模式启动Docker。
- en: 'Let''s start a container (without the privileged option) after mounting a host
    directory as volume and try to create a file in that:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在挂载主机目录作为卷后启动容器（不使用特权选项），并尝试在其中创建一个文件：
- en: '![How to do it…](../Images/image00409.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](../Images/image00409.jpeg)'
- en: 'As expected, we see `Permission denied` because a container process with the
    `svirt_lxc_net_t` label cannot create files on the host''s filesystem. If we look
    at the SELinux logs (`/var/log/audit.log`) on the host, we will see messages similar
    to the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们看到`Permission denied`，因为具有`svirt_lxc_net_t`标签的容器进程无法在主机文件系统上创建文件。如果我们查看主机上的SELinux日志（`/var/log/audit.log`），我们将看到类似以下的消息：
- en: '![How to do it…](../Images/image00410.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](../Images/image00410.jpeg)'
- en: The `s0:c157,c350` label is the MCS label on the container.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`s0:c157,c350`标签是容器上的MCS标签。'
- en: How it works…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: SELinux sets both Type and Multi Category Security enforcement when the right
    options are set for SELinux and Docker. The Linux kernel enforces these enforcements.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当为SELinux和Docker设置正确的选项时，SELinux设置了类型和多类别安全强制执行。Linux内核执行这些强制执行。
- en: There's more…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If SELinux is in enforcing mode and the Docker daemon is configured to use SELinux,
    then we will not be able to shut down the host from the container, like we did
    earlier in this chapter:![There's more…](../Images/image00411.jpeg)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果SELinux处于强制执行模式，并且Docker守护程序配置为使用SELinux，则我们将无法像在本章前面那样从容器关闭主机：![还有更多...](../Images/image00411.jpeg)
- en: As we know, by default, all the containers will run with the `svirt_lxc_net_t`
    label, but we can also adjust SELinux labels for custom requirements. Visit the
    *Adjusting SELinux labels* section of [http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们知道，默认情况下，所有容器都将以`svirt_lxc_net_t`标签运行，但我们也可以根据自定义要求调整SELinux标签。访问[http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning)的*调整SELinux标签*部分。
- en: Setting up MLS with Docker containers is also possible. Visit the *Multi Level
    Security mode* section of [http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker容器设置MLS也是可能的。访问[http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning)的*多级安全模式*部分。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*The SELinux Coloring Book*; visit [https://people.redhat.com/duffy/selinux/selinux-coloring-book_A4-Stapled.pdf](https://people.redhat.com/duffy/selinux/selinux-coloring-book_A4-Stapled.pdf)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SELinux着色书*；访问[https://people.redhat.com/duffy/selinux/selinux-coloring-book_A4-Stapled.pdf](https://people.redhat.com/duffy/selinux/selinux-coloring-book_A4-Stapled.pdf)'
- en: Allowing writes to volume mounted from the host with SELinux ON
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许从启用SELinux的主机挂载的卷进行写入
- en: As we saw in the earlier recipe, when SELinux is configured, a nonprivileged
    container cannot access files on the volume created after mounting the directory
    from the host system. However, sometimes it is needed to allow access to host
    files from the container. In this recipe, we'll see how to allow access in such
    cases.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的示例中看到的，当SELinux配置时，非特权容器无法访问从主机系统挂载目录创建的卷上的文件。但是，有时需要允许容器从主机文件访问。在本示例中，我们将看到如何在这种情况下允许访问。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A Fedora/RHEL/CentOS host with the latest version of Docker installed, which
    can be accessed through a Docker client. Also, SELinux is set to enforcing mode
    and the Docker daemon is configured to use SELinux.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了最新版本的Docker的Fedora/RHEL/CentOS主机，可以通过Docker客户端访问。此外，SELinux设置为强制模式，并且Docker守护程序配置为使用SELinux。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Mount the volume with the `z` or `Z` option as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方式使用`z`或`Z`选项挂载卷：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![How to do it…](../Images/image00412.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](../Images/image00412.jpeg)'
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: While mounting the volume, Docker will relabel to the volume to allow access.
    From the man page of Docker run.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在挂载卷时，Docker将重新标记卷以允许访问。来自Docker运行的man页面。
- en: The `z` option tells Docker that the volume content will be shared between containers.
    Docker will label the content with a shared content label. The shared volume labels
    allow all containers to read/write content. The `Z` option tells Docker to label
    the content with a private unshared label. Private volumes can only be used by
    the current container.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`z`选项告诉Docker卷内容将在容器之间共享。Docker将使用共享内容标签标记内容。共享卷标签允许所有容器读/写内容。`Z`选项告诉Docker使用私有未共享标签标记内容。私有卷只能被当前容器使用。'
- en: See also
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Volume mounts* section at [http://opensource.com/business/14/9/security-for-docker](http://opensource.com/business/14/9/security-for-docker)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*卷挂载*部分在[http://opensource.com/business/14/9/security-for-docker](http://opensource.com/business/14/9/security-for-docker)'
- en: Removing capabilities to breakdown the power of a root user inside a container
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在容器内取消功能以分解根用户的权限
- en: 'In simple terms, with capabilities, we can breakdown the power of a root user.
    From the man page for *capabilities*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，通过功能，我们可以分解根用户的权限。来自*功能*的man页面：
- en: '*For the purpose of performing permission checks, traditional UNIX implementations
    distinguish two categories of processes: privileged processes (whose effective
    user ID is 0, referred to as superuser or root), and unprivileged processes (whose
    effective UID is nonzero). Privileged processes bypass all kernel permission checks,
    while unprivileged processes are subject to full permission checking based on
    the process''s credentials (usually: effective UID, effective GID, and supplementary
    group list).*'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*为了进行权限检查，传统的UNIX实现区分两类进程：特权进程（有效用户ID为0，称为超级用户或根用户）和非特权进程（有效UID为非零）。特权进程绕过所有内核权限检查，而非特权进程则根据进程的凭据（通常为：有效UID、有效GID和附加组列表）进行完整的权限检查。*'
- en: '>'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*Starting with kernel 2.2, Linux divides the privileges traditionally associated
    with superuser into distinct units, known as capabilities, which can be independently
    enabled and disabled. Capabilities are a per-thread attribute.*'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*从2.2内核开始，Linux将传统上与超级用户关联的特权分为不同的单元，称为功能，可以独立启用和禁用。功能是每个线程的属性。*'
- en: 'Some example capabilities are:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例功能包括：
- en: '`CAP_SYSLOG`: This modifies kernel printk behavior'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYSLOG`：这修改了内核的打印行为'
- en: '`CAP_NET_ADMIN`: This configures the network'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_NET_ADMIN`：这配置网络'
- en: '`CAP_SYS_ADMIN`: This helps you to catch all the capabilities'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_ADMIN`：这有助于捕获所有功能'
- en: There are only 32 slots available for capabilities in the kernel. There is one
    capability, `CAP_SYS_ADMIN`, that catches all capabilities; this is used whenever
    in doubt.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 内核中只有32个功能插槽可用。有一个功能`CAP_SYS_ADMIN`，它捕获所有功能；每当有疑问时使用。
- en: In version 1.2, Docker added some features to add or remove the capabilities
    for a container. It uses the `chown`, `dac_override`, `fowner`, `kill`, `setgid`,
    `setuid`, `setpcap`, `net_bind_service`, `net_raw`, `sys_chroot`, `mknod`, `setfcap`,
    and `audit_write` capabilities by default and removes the following capabilities
    for a container by default.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.2版本中，Docker添加了一些功能，用于为容器添加或删除功能。它默认使用`chown`、`dac_override`、`fowner`、`kill`、`setgid`、`setuid`、`setpcap`、`net_bind_service`、`net_raw`、`sys_chroot`、`mknod`、`setfcap`和`audit_write`功能，并默认删除容器的以下功能。
- en: '`CAP_SETPCAP`: This modifies the process capabilities'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SETPCAP`: 这修改进程功能'
- en: '`CAP_SYS_MODULE`: This inserts/removes the kernel modules'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_MODULE`: 这插入/删除内核模块'
- en: '`CAP_SYS_RAWIO`: This modifies the kernel memory'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_RAWIO`: 这修改内核内存'
- en: '`CAP_SYS_PACCT`: This configures process accounting'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_PACCT`: 这配置进程记账'
- en: '`CAP_SYS_NICE`: This modifies the priority of processes'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_NICE`: 这修改进程的优先级'
- en: '`CAP_SYS_RESOURCE`: This overrides the resource limits'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_RESOURCE`: 这覆盖资源限制'
- en: '`CAP_SYS_TIME`: This modifies the system clock'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_TIME`: 这修改系统时钟'
- en: '`CAP_SYS_TTY_CONFIG`: This configures `tty` devices'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_TTY_CONFIG`: 这配置`tty`设备'
- en: '`CAP_AUDIT_WRITE`: This writes the audit log'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_AUDIT_WRITE`: 这写入审计日志'
- en: '`CAP_AUDIT_CONTROL`: This configures the audit subsystem'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_AUDIT_CONTROL`: 这配置审计子系统'
- en: '`CAP_MAC_OVERRIDE`: This ignores the kernel MAC policy'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_MAC_OVERRIDE`: 这忽略内核MAC策略'
- en: '`CAP_MAC_ADMIN`: This configures MAC configuration'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_MAC_ADMIN`: 这配置MAC配置'
- en: '`CAP_SYSLOG`: This modifies kernel printk behavior'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYSLOG`: 这修改内核printk行为'
- en: '`CAP_NET_ADMIN`: This configures the network'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_NET_ADMIN`: 这配置网络'
- en: '`CAP_SYS_ADMIN`: This helps you catch all the containers'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_ADMIN`: 这有助于捕获所有容器'
- en: We need to be very careful what capabilities we remove, as applications can
    break if they don't have enough capabilities to run. To add and remove the capabilities
    for the container, you can use the `--cap-add` and `--cap-drop` options respectively.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要非常小心地删除功能，因为如果应用程序没有足够的功能来运行，可能会出现问题。要为容器添加和删除功能，可以分别使用`--cap-add`和`--cap-drop`选项。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A host with the latest version of Docker installed, which can be accessed through
    a Docker client.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了最新版本的Docker的主机，可以通过Docker客户端访问。
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To drop capabilities, run a command similar to the following:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除功能，运行类似以下命令：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To remove the `setuid` and `setgid` capabilities from the container so that
    it cannot run binaries, which have these bits set, run the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要从容器中删除`setuid`和`setgid`功能，以便它无法运行具有这些位设置的二进制文件，运行以下命令：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Similarly, to add capabilities, run a command similar to the following:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，要添加功能，运行类似以下命令：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To add all the capabilities and just drop `sys-admin`, run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加所有功能并仅删除`sys-admin`，运行以下命令：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Before starting the container, Docker sets up the capabilities for the root
    user inside the container, which affects the command execution for the container
    process.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动容器之前，Docker为容器内的根用户设置功能，这会影响容器进程的命令执行。
- en: There's more...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let''s revisit the example we saw at the beginning of this chapter, through
    which we saw the host system shut down through a container. Let SELinux be disabled
    on the host system; however, while starting the container, drop the `sys_choot`
    capability:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新访问我们在本章开头看到的例子，通过它我们看到主机系统通过容器关闭。让SELinux在主机系统上禁用；但是，在启动容器时，删除`sys_choot`功能：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![There''s more...](../Images/image00413.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](../Images/image00413.jpeg)'
- en: See also
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Dan Walsh's articles on opensource.com at [http://opensource.com/business/14/9/security-for-docker](http://opensource.com/business/14/9/security-for-docker).
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dan Walsh在[http://opensource.com/business/14/9/security-for-docker](http://opensource.com/business/14/9/security-for-docker)上的文章。
- en: The Docker 1.2 release notes at [http://blog.docker.com/2014/08/announcing-docker-1-2-0/](http://blog.docker.com/2014/08/announcing-docker-1-2-0/).
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://blog.docker.com/2014/08/announcing-docker-1-2-0/](http://blog.docker.com/2014/08/announcing-docker-1-2-0)上的Docker
    1.2发布说明。'
- en: There are efforts on to selectively disable system calls from container processes
    to provide tighter security. Visit the *Seccomp* section of [http://opensource.com/business/15/3/docker-security-future](http://opensource.com/business/15/3/docker-security-future).
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有努力在进行中，以有选择地禁用容器进程的系统调用，以提供更严格的安全性。访问[http://opensource.com/business/15/3/docker-security-future](http://opensource.com/business/15/3/docker-security-future)的*Seccomp*部分。
- en: Similar to custom namespaces and capabilities with version 1.6, Docker supports
    the `--cgroup-parent` flag to pass specific Cgroup to run containers. [https://docs.docker.com/v1.6/release-notes/](https://docs.docker.com/v1.6/release-notes/).
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与版本1.6中的自定义命名空间和功能类似，Docker支持`--cgroup-parent`标志，以传递特定的Cgroup来运行容器。[https://docs.docker.com/v1.6/release-notes/](https://docs.docker.com/v1.6/release-notes)。
- en: Sharing namespaces between the host and the container
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在主机和容器之间共享命名空间
- en: As we know, while starting the container, by default, Docker creates six different
    namespaces—Process, Network, Mount, Hostname, Shared Memory, and User for a container.
    In some cases, we might want to share a namespace between two or more containers.
    For example, in Kubernetes, all containers in a pod share the same network namespace.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，在启动容器时，默认情况下，Docker为容器创建六个不同的命名空间——进程、网络、挂载、主机名、共享内存和用户。在某些情况下，我们可能希望在两个或更多的容器之间共享命名空间。例如，在Kubernetes中，一个pod中的所有容器共享相同的网络命名空间。
- en: In some cases, we would want to share the namespaces of the host system with
    the containers. For example, we share the same network namespace between the host
    and the container to get near line speed inside the container. In this recipe,
    we will see how to share namespaces between the host and the container.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望与容器共享主机系统的命名空间。例如，我们在主机和容器之间共享相同的网络命名空间，以在容器内获得接近线速。在这个教程中，我们将看到如何在主机和容器之间共享命名空间。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A host with the latest version of Docker installed, which can be accessed through
    a Docker client.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了最新版本的Docker的主机，可以通过Docker客户端访问。
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To share the host network namespace with the container, run the following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要与容器共享主机网络命名空间，请运行以下命令：
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you see the network details inside the container, run the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在容器内查看网络详细信息，请运行以下命令：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You will see a result same as the host.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到与主机相同的结果。
- en: 'To share the host network, PID, and IPC namespaces with the container, run
    the following command:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要与容器共享主机网络、PID和IPC命名空间，请运行以下命令：
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Docker does not create separate namespaces for containers when such arguments
    are passed to the container.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递这些参数给容器时，Docker不会为容器创建单独的命名空间。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'For hosts that are built to run just containers, such as Project Atomic ([http://www.projectatomic.io/](http://www.projectatomic.io/)),
    which we saw in [Chapter 8](part0081.xhtml#aid-2D7TI1 "Chapter 8. Docker Orchestration
    and Hosting Platforms"), *Docker Orchestration and Hosting Platforms*, doesn''t
    have debugging tools such as `tcpdump` and `sysstat` on the host system. So we
    have created containers with those tools and have access to host resources. In
    such cases, sharing namespaces between the host and the container becomes handy.
    You can read more about it at the following links:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于专门用于运行容器的主机，比如Project Atomic ([http://www.projectatomic.io/](http://www.projectatomic.io/))，我们在[第8章](part0081.xhtml#aid-2D7TI1
    "第8章。Docker编排和托管平台")中看到的*Docker编排和托管平台*，在主机系统上没有像`tcpdump`和`sysstat`这样的调试工具。因此，我们创建了带有这些工具并可以访问主机资源的容器。在这种情况下，在主机和容器之间共享命名空间变得很方便。您可以在以下链接中了解更多信息：
- en: '[http://developerblog.redhat.com/2014/11/06/introducing-a-super-privileged-container-concept/](http://developerblog.redhat.com/2014/11/06/introducing-a-super-privileged-container-concept/)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://developerblog.redhat.com/2014/11/06/introducing-a-super-privileged-container-concept/](http://developerblog.redhat.com/2014/11/06/introducing-a-super-privileged-container-concept/)'
- en: '[http://developerblog.redhat.com/2015/03/11/introducing-the-rhel-container-for-rhel-atomic-host/](http://developerblog.redhat.com/2015/03/11/introducing-the-rhel-container-for-rhel-atomic-host/)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://developerblog.redhat.com/2015/03/11/introducing-the-rhel-container-for-rhel-atomic-host/](http://developerblog.redhat.com/2015/03/11/introducing-the-rhel-container-for-rhel-atomic-host/)'
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Dan Walsh's documentation on Docker Security at [http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丹·沃尔什在[http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning)上的Docker安全文档
