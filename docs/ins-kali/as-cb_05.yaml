- en: Chapter 5. Size Does Matter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。大小确实重要
- en: 'This chapter is about building apps that will be running on a wide variety
    of devices: phones, phablets, tablets, and TVs. We will connect to YouTube to
    get some data and videos to display.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于构建可以在各种设备上运行的应用程序：手机、平板、平板手机和电视。我们将连接到YouTube获取一些数据和视频来显示。
- en: Size and context actually do matter. We could of course scale up everything
    but that does not really make it a better app. Tablets offer more space than phones,
    and when it comes to user interaction, TV differs from a smart phone. How do we
    make the layout scale and look smooth on each device? How do we find the right
    approach for each type of device?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大小和上下文确实很重要。当然，我们可以将所有内容都放大，但这并不能真正使应用程序变得更好。平板提供的空间比手机更多，而在用户交互方面，电视与智能手机有所不同。我们如何使布局在每台设备上都能按比例缩放并看起来流畅？我们如何为每种类型的设备找到正确的方法？
- en: 'In this chapter, you will learn from the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Size and context
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小和上下文
- en: Phone, phablet, and tablet layouts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手机、平板和平板手机布局
- en: Media playback
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体播放
- en: TV and media centre
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电视和媒体中心
- en: Size and context
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大小和上下文
- en: Devices such as phones, phablets, tablets, and TVs come with screens of all
    sizes and shapes. How can we benefit from a larger screen or how can we provide
    smart navigation for smaller screens and maintain the same functionality and code
    within one app? That is what this first recipe is about.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 手机、平板、平板手机和电视等设备都配备了各种大小和形状的屏幕。我们如何从更大的屏幕中受益，或者如何为较小的屏幕提供智能导航，并在一个应用程序中保持相同的功能和代码？这就是这个第一个配方要解决的问题。
- en: What about the various kinds of devices? With the introduction of wearable devices,
    we saw that the user behavior for these types of devices is quite different. The
    same thing applies to TVs. As always, let's do first things first. Let's examine
    an app that runs on both a phone and tablet.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 各种设备怎么样？随着可穿戴设备的推出，我们发现这些类型设备的用户行为有很大不同。同样的情况也适用于电视。一如既往，让我们先做第一步。让我们检查一个可以在手机和平板上运行的应用程序。
- en: Phone, phablet, and tablet
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手机、平板和平板手机
- en: A well-known pattern for phones is the list or the recycler view that show you
    some details when you click on any of the rows. On a small screen, the app will
    navigate you to a different view. This pattern simply exists because of the lack
    of space on the screen of a phone. If you run the same app on a device that has
    sufficient space, we can show the list on the left-hand side of the screen and
    the details on the right-hand side.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 手机上一个众所周知的模式是列表或回收视图，当您点击任何行时，它会显示一些详细信息。在小屏幕上，应用程序会将您导航到不同的视图。这种模式之所以存在，是因为手机屏幕上的空间不足。如果您在具有足够空间的设备上运行相同的应用程序，我们可以在屏幕的左侧显示列表，右侧显示详细信息。
- en: Multiple layouts are what we need, combined with multiple fragments. If we do
    this, we can reduce the amount of code we need to write. We just do not want to
    repeat ourselves, do we?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 多个布局是我们需要的，再加上多个片段。如果我们这样做，我们可以减少需要编写的代码量。我们不想重复自己，对吧？
- en: Fragments are a powerful but also an often misunderstood component of Android
    development. Fragments are (little) pieces of functionality and most of the time
    do have their own layouts. Using fragment containers, a fragment may reside in
    multiple places and on multiple activity-related layouts. This is how we can reuse
    functionality and layouts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 片段是Android开发中功能强大但也经常被误解的组件。片段是（小）功能块，大多数时间都有自己的布局。使用片段容器，片段可以存在于多个位置和多个与活动相关的布局中。这就是我们如何重用功能和布局的方法。
- en: Fragments should be used carefully though. Without a proper strategy, an app
    that uses fragments can cause you a lot of trouble. Code within a fragment frequently
    refers to an activity. While this code may still be running, the fragment may
    be detached from the activity in between (for example, because the user has pressed
    the back button). This could result in a crash of your app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，片段应该谨慎使用。如果没有合适的策略，使用片段的应用程序可能会给您带来很多麻烦。片段中的代码经常会引用活动。虽然这些代码可能仍在运行，但片段可能在中间被从活动中分离出来（例如，因为用户按下了返回按钮）。这可能导致您的应用程序崩溃。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, you need to have Android Studio up and running, and
    a phone, phablet, and/or tablet device (physical ones are recommended as always;
    however, you can use Genymotion to create virtual ones).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，您需要安装并运行Android Studio，并且需要一部手机、平板和/或平板手机设备（一如既往，建议使用实体设备；但是您也可以使用Genymotion创建虚拟设备）。
- en: Since we will be using the YouTube Android API, you need to have the latest
    YouTube Android app installed on your device as well. Check on your device whether
    it is there, or install or update it using the Google Play app in case it is not
    on your device or an update for it is available.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用YouTube Android API，您需要在设备上安装最新的YouTube Android应用程序。检查您的设备上是否有该应用程序，如果没有或者有更新的话，可以使用Google
    Play应用程序进行安装或更新。
- en: Finally, you need to have a developer's account. In case you do not have one
    yet, you need to create one first from [http://developer.android.com/distribute/googleplay/start.html](http://developer.android.com/distribute/googleplay/start.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要一个开发者账户。如果您还没有一个，您需要首先从[http://developer.android.com/distribute/googleplay/start.html](http://developer.android.com/distribute/googleplay/start.html)创建一个。
- en: In addition to buying this book, getting yourself a developer's account is a
    very good investment, and I strongly recommend you to get one. You will need one
    in order to be able to submit your app to the Google Play store anyway!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了购买本书之外，为自己购买一个开发者账户是一个非常好的投资，我强烈建议您这样做。无论如何，您都需要一个才能将您的应用程序提交到Google Play商店中！
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see how we can create our own wearable app and make it run on a device:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建我们自己的可穿戴应用程序并在设备上运行：
- en: Start a new Android Studio project. Name your application `YouTubeMediaApp`
    and enter `packt.com` in the **Company Domain** field. Click on the **Next** button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的Android Studio项目。将您的应用程序命名为`YouTubeMediaApp`，并在**公司域**字段中输入`packt.com`。然后点击**下一步**按钮。
- en: In the following dialog, only check the **Phone and Tablet** option and click
    on the **Next** button.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接下来的对话框中，只选中**手机和平板电脑**选项，然后单击**下一步**按钮。
- en: In the next dialog, choose **Blank activity** and click on the **Next** button.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，选择**空白活动**，然后单击**下一步**按钮。
- en: In the **Customize the Activity** dialog, click on the **Finish** button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**自定义活动**对话框中，单击**完成**按钮。
- en: Android Studio will create the new project for you. From the **Project** view
    on the left-hand side of Android Studio, locate `build.gradle` within the `app`
    folder and open it.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio将为您创建新项目。在Android Studio左侧的**项目**视图中，找到`app`文件夹中的`build.gradle`并打开它。
- en: 'Open the `build.gradle` file within the `app` folder and add a dependency to
    the `dependencies` section for the YouTube services API. We are going to use this
    API to search for videos on YouTube:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹中的`build.gradle`文件中添加一个依赖项到`dependencies`部分，以使用YouTube服务API。我们将使用此API在YouTube上搜索视频：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Synchronize the project (click on the **Sync now** link or use the **Sync project
    with Gradle files** button from the toolbar).
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同步项目（单击**立即同步**链接或使用工具栏中的**同步项目与Gradle文件**按钮）。
- en: 'Open the `activity_main.xml` layout. Create a frame layout that will act as
    a container for the fragment that we want to display here later. We will give
    it a nice background color for demonstration purposes. Let''s pick orange:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`布局。创建一个框架布局，它将作为我们稍后要在此处显示的片段的容器。出于演示目的，我们将为其选择一个漂亮的背景颜色。让我们选择橙色：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a new layout and name it `fragment_list.xml`. Create a list view within
    a container. This list will contain the title and other information about the
    videos that we will find on YouTube:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新布局并命名为`fragment_list.xml`。在容器内创建一个列表视图。此列表将包含我们在YouTube上找到的视频的标题和其他信息：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add a new Java class, name it `ListFragment`, and click on the **OK** button
    to continue.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的Java类，命名为`ListFragment`，然后单击**确定**按钮继续。
- en: 'Make the new class a `Fragment` descendant and override the `onCreate` method.
    Create a private member for the list view and add a reference to the list view
    in the layout as shown in the following code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类设置为`Fragment`的子类，并重写`onCreate`方法。为列表视图创建一个私有成员，并按照以下代码在布局中添加对列表视图的引用：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Besides `ListActivity`, there is also a `ListFragment` class that you can descend
    from. For demo purposes, we will descend from `Fragment` class here and do some
    things ourselves.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`ListActivity`之外，还有一个`ListFragment`类，您可以从中继承。出于演示目的，我们将在这里从`Fragment`类继承并自行处理一些事情。
- en: 'While adding the correct import statements (using the *Alt* + *Enter* shortcut
    or otherwise) you will be able to choose which package to import. You can choose
    between the `android.app.Fragment` and `android.support.v4.app.Fragment` packages.
    The last one is for backward compatibility purposes only. Since we will be using
    the latest SDK for our app, choose this import statement if asked:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加正确的导入语句（使用*Alt* + *Enter*快捷键或其他方式）时，您将能够选择要导入的包。您可以在`android.app.Fragment`和`android.support.v4.app.Fragment`包之间进行选择。后者仅用于向后兼容。由于我们将为我们的应用程序使用最新的SDK，请在被询问时选择此导入语句：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add another private member for YouTube and a YouTube list and create a method
    named `loadVideos`. First, we will initialize the YouTube member:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为YouTube添加另一个私有成员和一个YouTube列表，并创建一个名为`loadVideos`的方法。首先，我们将初始化YouTube成员：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we will tell YouTube what we are looking for and what information we
    want the API to return. We need to wrap our code in a try catch construction as
    we do not know in advance whether we will be able to connect to YouTube. Add this
    to the end of the `loadVideos` method:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将告诉YouTube我们要寻找什么以及我们希望API返回什么信息。我们需要在`loadVideos`方法的末尾添加try catch结构，因为我们事先不知道是否能连接到YouTube。将以下内容添加到`loadVideos`方法的末尾：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To use the YouTube API, you must register your app first. To do so, navigate
    your browser to [https://console.developers.google.com/project](https://console.developers.google.com/project).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用YouTube API，您必须首先注册您的应用程序。要这样做，请将浏览器导航到[https://console.developers.google.com/project](https://console.developers.google.com/project)。
- en: Click on the **Create** a project button. Enter `YouTubeApp` as the project
    name and click on the **Create** button.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**创建**项目按钮。输入`YouTubeApp`作为项目名称，然后单击**创建**按钮。
- en: Once the project is created, the dashboard will be shown on the webpage. On
    the left-hand side, expand **APIs and auth** and click on **APIs**.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目创建后，仪表板将显示在网页上。在左侧，展开**API和身份验证**，然后单击**API**。
- en: On the right-hand side of the page, click on YouTube Data API. Click on the
    **Enable API** button.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面的右侧，单击YouTube数据API。单击**启用API**按钮。
- en: On the left-hand side again, click on **Credentials** just after APIs. Under
    Public API access, click on the **Create new Key** button.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在左侧，单击API之后的**凭据**。在公共API访问下，单击**创建新密钥**按钮。
- en: On the **Create new key** popup dialog box, click on the **Android key** button.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建新密钥**弹出对话框中，单击**Android密钥**按钮。
- en: Since this app is for demo purposes only, we do not need to look up the requested
    **SHA1** value. Just click on the **Create** button.![How to do it...](img/B04299_05_01.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于此应用仅用于演示目的，我们不需要查找所请求的**SHA1**值。只需单击**创建**按钮。
- en: Now, an API key will be created for you. Copy the value for API key.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将为您创建一个API密钥。复制API密钥的值。
- en: 'In the `AndroidManifest.xml` file, add a permission to access the Internet:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AndroidManifest.xml`文件中，添加一个访问互联网的权限：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Glue it together!
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将其粘合在一起！
- en: 'Now back in the `ListFragment` class, tell the API about your key that is just
    next to the `search` call on the YouTube object:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到`ListFragment`类，告诉API关于您的密钥，该密钥就在YouTube对象的`search`调用旁边：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new `VideoItem` class and add members to hold the requested information
    for each video. Note that we are using getters and setters here:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`VideoItem`类，并添加成员以保存每个视频的请求信息。请注意，我们在这里使用getter和setter：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a new layout and name it `adapter_video.xml`. Then, add text views to
    display the video information:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新布局并命名为`adapter_video.xml`。然后，添加文本视图以显示视频信息：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a new `VideoAdapter` class and make it an `ArrayAdapter` descendant
    that will be holding entries of the `VideoItem` type. A view holder will help
    us fill the text views with the properties of the listed `VideoItem` object:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`VideoAdapter`类，并使其成为`ArrayAdapter`的子类，用于保存`VideoItem`类型的条目。一个视图持有者将帮助我们用列出的`VideoItem`对象的属性填充文本视图：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now back to the `ListFragment` class. Add two more private members in it, one
    for the list of videos that we have found and one for the adapter that we have
    just created:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到`ListFragment`类。在其中再添加两个私有成员，一个用于我们找到的视频列表，一个用于我们刚刚创建的适配器：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a `search` method to the `ListFragment` class:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ListFragment`类中添加一个`search`方法：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Toward the end of the `loadVideos` method, add the implementation to call the
    `search` method and initialize the adapter:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`loadVideos`方法的末尾，添加调用`search`方法和初始化适配器的实现：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Tell the list view about the adapter and call the `notifyDataSetChanged` method
    of the adapter to inform that new entries are available to be shown. For this,
    we will use a `Runnable` instance that will be running on the UI thread:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉列表视图关于适配器，并调用适配器的`notifyDataSetChanged`方法，通知有新条目可供显示。为此，我们将使用一个在UI线程上运行的`Runnable`实例：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we will load the video information asynchronously, as we do want the app
    to be responsive while getting data from the Internet. Create a new thread and
    call `loadVideos` inside within the `run` method. Let''s assume we want to look
    at *Android development* videos:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将异步加载视频信息，因为我们希望应用在从互联网获取数据时能够响应。创建一个新线程，并在`run`方法内调用`loadVideos`。假设我们想要查看*Android开发*视频：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a new layout and name it `fragment_details.xml`. In this fragment, we
    will display a thumbnail and the description of a video that the user has selected
    from the list. Since we are here anyway, let''s add a play button as well. We
    will need it in the next recipe:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的布局并命名为`fragment_details.xml`。在此片段中，我们将显示用户从列表中选择的视频的缩略图和描述。既然我们已经在这里，我们也可以添加一个播放按钮。我们将在下一个步骤中需要它：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the `DetailsFragment` class:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`DetailsFragment`类：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the `showDetails` private method to `DetailsFragment` class. In this method,
    we will set the text for the description and create a new runnable instance to
    load the thumbnail for the video. Also, add the `setVideo` method and override
    the `onResume` method:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DetailsFragment`类中添加`showDetails`私有方法。在此方法中，我们将设置描述的文本，并创建一个新的runnable实例来加载视频的缩略图。还添加`setVideo`方法并重写`onResume`方法：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, add the `loadThumbnail` method to `DetailsFragment` class and the implementation
    to load the thumbnail image from the given URL:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`DetailsFragment`类中添加`loadThumbnail`方法和从给定URL加载缩略图图像的实现：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If the user selects an item from the list view in the `ListFragment` class,
    we need to tell `DetailFragment` to display the corresponding details. In the
    `onCreateView` method of the `ListFragment` class, add the onItemClick handler:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户在`ListFragment`类的列表视图中选择了一个项目，我们需要告诉`DetailFragment`显示相应的详情。在`ListFragment`类的`onCreateView`方法中，添加`onItemClick`处理程序：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `MainActivity` class, add two static members that will represent the
    tags for both the `ListFragment` and `DetailsFragment` classes:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中，添加两个静态成员，它们将代表`ListFragment`和`DetailsFragment`类的标签：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the `onVideoClicked` method in the `ListFragment` class. If `DetailsFragment`
    exists (there is a fragment out there with the `DETAILS` tag), it will call the
    `showDetails` method of `DetailsFragment`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ListFragment`类中创建`onVideoClicked`方法。如果`DetailsFragment`存在（有一个带有`DETAILS`标签的片段），它将调用`DetailsFragment`的`showDetails`方法：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We are almost done. In the `activity_main.xml` layout, we created a container
    for our fragment. Now we will add some code to show the content for `ListFragment`
    in that container. In the `MainActivity` class, add two private members for both
    the fragments:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们快要完成了。在`activity_main.xml`布局中，我们为片段创建了一个容器。现在我们将添加一些代码，以在该容器中显示`ListFragment`的内容。在`MainActivity`类中，为两个片段添加两个私有成员：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create `ListFragment` and add it to the container:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ListFragment`并将其添加到容器中：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Let's create another layout for the main activity but this time it will be one
    for the large screens, let's say tablets. To the `res`folder, add a new Android
    resource directory by right-clicking on the `res` item. Choose **layout** for
    **resource** **type**, name the directory `layout-large`, and click on the To
    button.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为主活动创建另一个布局，但这次是为大屏幕，比如平板电脑。在`res`文件夹中，通过右键单击`res`项目，添加一个新的Android资源目录。选择**layout**作为**资源类型**，将目录命名为`layout-large`，然后单击To按钮。
- en: 'Within the new `layout-large` directory, add a new layout and name it `activity_main`
    as well. A tablet device is big enough to hold both our fragments so for this
    layout, we will create two containers: one for the list and one for the details:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的`layout-large`目录中，添加一个新的布局并命名为`activity_main`。平板设备足够大，可以容纳我们的两个片段，因此对于此布局，我们将创建两个容器：一个用于列表，一个用于详情：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Modify the `onCreate` implementation for `MainActivity`. If the container is
    available, we will load the details fragment as well. Move the `commit` call to
    the end:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`MainActivity`的`onCreate`实现。如果容器可用，我们也将加载详情片段。将`commit`调用移到最后：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'One more thing, if you''ll allow me to explain. Well, a couple of things actually.
    If the app is running on a phone, we need to have some kind of navigation from
    the list fragment view to the details fragment view. Modify the `onVideoClicked`
    method in the `MainActivity` file so that in case it does not exist yet, the detail
    fragment will be created there:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一件事，如果你允许我解释。嗯，实际上有几件事。如果应用正在手机上运行，我们需要从列表片段视图导航到详情片段视图。修改`MainActivity`文件中的`onVideoClicked`方法，以便在那里创建详情片段：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The call to `addToBackStack` that we added in the previous step informs the
    fragment manager about all fragments being on stack, so we can provide a way of
    navigation. We need to tell our activity how to behave in case the back button
    is being pressed: do we want to leave the activity or do we want to pop a fragment
    from stack? We will override the `onBackPressed` method of the `MainActivity`,
    just like this:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在上一步中添加的`addToBackStack`调用通知片段管理器所有片段都在堆栈上，因此我们可以提供导航方式。我们需要告诉我们的活动在按下返回按钮时如何行为：我们想离开活动还是我们想从堆栈中弹出一个片段？我们将覆盖`MainActivity`的`onBackPressed`方法，就像这样：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: And we are done! We had some work to do but now we have got an app that will
    work on a phone with navigation and that will display both the fragments if there
    is sufficient space as is the case with a tablet.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！我们有一些工作要做，但现在我们有一个可以在具有导航的手机上运行并且如果有足够的空间将显示两个片段的应用程序，就像平板电脑一样。
- en: 'To see the differences, run the app on a smart phone and on a tablet as well.
    On a phone, it will look similar to the following screenshot. On a tablet (you
    can use Genymotion for that if you do not have one available) both the list and
    details are shown in a single view:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看差异，请在智能手机和平板电脑上运行应用程序。在手机上，它将类似于以下屏幕截图。在平板电脑上（如果您没有可用的平板电脑，可以使用Genymotion），列表和详细信息都显示在单个视图中：
- en: '![Glue it together!](img/B04299_05_02.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![粘合在一起！](img/B04299_05_02.jpg)'
- en: There's more...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The next recipe will show how to implement the functionality that allows us
    to watch the video that we have just found. After all, playing videos is what
    we want!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个教程将展示如何实现允许我们观看刚刚找到的视频的功能。毕竟，播放视频是我们想要的！
- en: Media playback
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体播放
- en: In the previous recipe, we retrieved search results from YouTube and displayed
    them in a list and detail fragment. The entries found represent videos, so it
    would be nice if we were able to play them as well in our app. Let's find a way
    to do this.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们从YouTube检索了搜索结果，并在列表和详细片段中显示了它们。找到的条目代表视频，因此如果我们能够在应用程序中播放它们，那将是很好的。让我们找到一种方法来做到这一点。
- en: Since we do know the video ID, it is not that difficult to compose a URL for
    it and load them in a web view; however, Google provides an easier solution for
    this and offers the YouTube Android Player API for this purpose. It has a couple
    of limitations but is interesting enough to explore.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道视频ID，因此很容易为其组合URL并在web视图中加载它们；但是，Google为此提供了更简单的解决方案，并为此提供了YouTube Android
    Player API。它有一些限制，但足够有趣。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, you need to complete the previous recipe as this
    one picks up where we left off. While I recommend you to test the app on a physical
    phone and tablet, you can, of course, use Genymotion as well.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要完成上一个教程，因为本教程从上一个教程结束的地方开始。虽然我建议您在物理手机和平板电脑上测试应用程序，但您当然也可以使用Genymotion。
- en: If you are using virtual devices, then Google apps (and the YouTube app on which
    the API and the player depend) will be missing, and the app will fail for that
    reason. You need to download and install them on the virtual device first.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用虚拟设备，那么谷歌应用程序（以及API和播放器所依赖的YouTube应用程序）将丢失，并且该应用程序将因此失败。您需要首先在虚拟设备上下载并安装它们。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s see how we can extend the app using the following steps, so it can play
    back a video for us:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过以下步骤扩展应用程序，以便为我们播放视频：
- en: Download the YouTube Player API from [https://developers.google.com/youtube/android/player/downloads](https://developers.google.com/youtube/android/player/downloads).
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://developers.google.com/youtube/android/player/downloads](https://developers.google.com/youtube/android/player/downloads)下载YouTube
    Player API。
- en: In the downloaded file, find the `YouTubeAndroidPlayerApi.jar` file in the `libs`
    folder and copy it.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下载的文件中，在`libs`文件夹中找到`YouTubeAndroidPlayerApi.jar`文件并复制它。
- en: Open the project from the previous recipe.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个教程中打开项目。
- en: Find the `libs` folder within the `app` module and paste the `YouTubeAndroidPlayerApi.jar`
    file.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`模块中的`libs`文件夹中找到`libs`文件夹，并粘贴`YouTubeAndroidPlayerApi.jar`文件。
- en: 'The dependencies in the `build.gradle` file may have already been prepared
    to include any files in the `lib` file; however if it is not, add the dependency:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`build.gradle`文件中的依赖项可能已经准备好包括`lib`文件中的任何文件；但是如果没有，添加依赖项：'
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Click on the Sync now link, or in case it does not appear, click on the **Sync
    project with Gradle files** button on the toolbar.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击立即同步链接，或者如果它没有出现，请单击工具栏上的**使用Gradle文件同步项目**按钮。
- en: 'In the `MainActivity` class, add a static tag for the player fragment that
    we are going to create. Also add the private member for `YouTubePlayerFragment`
    and a public member to store the YouTube player if the initialization succeeds:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中，添加一个用于将要创建的播放器片段的静态标签。还添加`YouTubePlayerFragment`的私有成员和一个公共成员来存储YouTube播放器，如果初始化成功的话：
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open `activity_main.xml` in the `layout-large` directory, change the height
    of the detail fragment to `300dp`, and add `YouTubePlayerFragment` to it. The
    preview might complain as it is not aware of how things should be rendered, but
    that is not really an issue as long as the package is being recognized, which
    will be the case if you have completed steps 5 and 6 successfully:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layout-large`目录中打开`activity_main.xml`，将详细片段的高度更改为`300dp`，并将`YouTubePlayerFragment`添加到其中。预览可能会抱怨，因为它不知道应该如何渲染，但只要包被识别，这并不是真正的问题，如果您已成功完成步骤5和6，那么包将被识别：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In `onCreateView`, just before `ft.commit`, find the container for the player
    fragment and initialize `YouTuberPlayer`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreateView`中，在`ft.commit`之前，找到播放器片段的容器并初始化`YouTuberPlayer`：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In `DetailFragment`, add an on click handler for the Play button in the `onCreateView`
    method, just before returning the view object:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DetailFragment`中，在`onCreateView`方法中为播放按钮添加一个点击处理程序，就在返回视图对象之前：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the `playVideo` method in `DetailFragment`. If the player fragment is
    there (on devices with large screens) and has been initialized, it will play the
    video; if it is not there (on devices with smaller screens), we will create a
    player fragment, initialize it, and add it to the stack:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“DetailFragment”中创建“playVideo”方法。如果播放器片段存在（在大屏幕设备上），并且已经初始化，它将播放视频；如果不存在（在小屏幕设备上），我们将创建一个播放器片段，初始化它，并将其添加到堆栈中：
- en: '[PRE35]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: And with that, we have added a simple but fully functional implementation to
    play the selected video.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经添加了一个简单但完全功能的实现来播放所选视频。
- en: There's more...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are many options available to play a video, such as fullscreen or in place,
    with or without buttons, and so on. Using Chrome Cast, media can also be sent
    to your TV or as we will see in the final recipe, we can create an app for an
    Android TV.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可用于播放视频，例如全屏或原位播放，带按钮或不带按钮等。使用Chrome Cast，媒体也可以发送到您的电视上，或者正如我们将在最后的食谱中看到的那样，我们可以为Android
    TV创建一个应用程序。
- en: TV and media centre
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电视和媒体中心
- en: Boring! Again there is nothing to see on the TV! At least not something that
    seems to be interesting enough. Smart TVs running on Android create a whole new
    interesting world for developers. Finally, we get the screen size we deserve!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 无聊！电视上又没有什么好看的！至少没有什么看起来足够有趣的东西。运行在Android上的智能电视为开发者创造了一个全新有趣的世界。最终，我们得到了我们应得的屏幕尺寸！
- en: However, it also comes with a different type of audience. Users interact with
    their phones and tablets to a very large extent. When it comes to watching TV,
    the focus is much more on consuming.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它也拥有不同类型的受众。用户与他们的手机和平板电脑的互动程度非常高。当涉及观看电视时，焦点更多地放在消费上。
- en: Well, what is there on the TV? Have a cup of tea and start watching the show.
    Occasionally, users might be interested in some interaction (a phenomenon that
    mostly appears as a second screen app since not anyone does own a smart TV already),
    but most of the time, TV watchers just want to lean back.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，电视上有什么？泡杯茶，开始观看节目。偶尔，用户可能对一些互动感兴趣（这种现象大多出现在第二屏应用程序中，因为并非每个人都拥有智能电视），但大多数时候，电视观众只是想靠在椅子上放松。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires Android Studio up and running and the latest SDKs installed.
    In this recipe, we will provide you a brief introduction to a TV app. In only
    a few steps, we will create a media centre app. Don't worry, you do not need to
    have an Android TV. We will create a virtual one.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱需要Android Studio正常运行和安装最新的SDK。在这个食谱中，我们将为您提供一个关于电视应用程序的简要介绍。只需几个步骤，我们就可以创建一个媒体中心应用程序。不用担心，您不需要拥有Android电视。我们将创建一个虚拟的电视。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see what we need to do to develop an Android TV app:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看开发Android TV应用程序需要做什么：
- en: Create a new project in Android Studio. Name it `PersonalTeeVee` and click on
    the Next button.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目。将其命名为“PersonalTeeVee”，然后点击“下一步”按钮。
- en: Select the TV option and click on the **Next** button.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择电视选项，然后点击“下一步”按钮。
- en: Choose Android TV Activity and click on Next.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Android TV Activity，然后点击下一步。
- en: Enter `TeeVeeActivity` in the **Activity Name** field and `Personal Tee Vee`
    in the **Title** field and click on the **Finish** button.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Activity Name”字段中输入“TeeVeeActivity”，在“Title”字段中输入“Personal Tee Vee”，然后点击“完成”按钮。
- en: Android Studio creates a phone and a TV module for you. Change the configuration
    to TV. You will see something as shown in the following figure:![How to do it...](img/B04299_05_04.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio为您创建了一个手机和一个电视模块。将配置更改为电视。您将看到如下图所示的内容：![如何做...](img/B04299_05_04.jpg)
- en: 'Check out the `AndroidManifest.xml` file in the tv module. Note the lean back
    feature requirement (which tells us that this is a TV app with fullscreen experience
    without any heavy interaction and basically is about consuming content such as
    watching a video). Also note that we do not require a touch screen. The TV screen
    is too far away to touch. Besides, nobody likes smears on their TV screens:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看电视模块中的“AndroidManifest.xml”文件。注意“lean back”功能要求（告诉我们这是一个全屏体验的电视应用程序，没有任何重型互动，基本上是关于消费内容，比如观看视频）。还要注意我们不需要触摸屏。电视屏幕离得太远了，无法触摸。此外，没有人喜欢电视屏幕上的污渍：
- en: '[PRE36]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: To test the TV app, we need to have a virtual TV device. Open the **AVD manager**
    option from the **Tools** | **Android** menu.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试电视应用程序，我们需要有一个虚拟电视设备。从“工具”|“Android”菜单中打开“AVD管理器”选项。
- en: Click on the **Create Virtual Device** button.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建虚拟设备”按钮。
- en: Select TV from the category list and choose a TV device (1080p or better). Click
    on the Next button.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从类别列表中选择电视，并选择一个电视设备（1080p或更高）。然后点击“下一步”按钮。
- en: Pick a system image. I chose, for example, **API level 22 x86**. Click on **Next**.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个系统镜像。例如，我选择了**API级别22 x86**。点击“下一步”。
- en: Modify the name of the AVD to whatever you think suits best and click on the
    **Finish** button. A new virtual TV device will be created for you.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改AVD的名称为您认为最合适的名称，然后点击“完成”按钮。将为您创建一个新的虚拟电视设备。
- en: Start your TV device by clicking on the play button. If it says that **Google
    Play Services has stopped**, you may ignore this message for now (although you
    will need it if you want to play a video).
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击播放按钮启动您的电视设备。如果它说**Google Play服务已停止**，您现在可以忽略这条消息（尽管如果您想播放视频，您将需要它）。
- en: Once the device is booted, run your TV app from Android Studio. By default,
    it looks like this:![How to do it...](img/B04299_05_05.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦设备启动，从Android Studio运行您的电视应用程序。默认情况下，它看起来像这样：![如何做...](img/B04299_05_05.jpg)
- en: Wow, this is a fully functional media centre app already!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，这已经是一个完全功能的媒体中心应用程序了！
- en: This was just a brief introduction to building an Android TV app. Play with
    it and tweak it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简短的介绍，介绍了如何构建Android TV应用程序。玩玩它，调整一下。
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'While the app in this recipe is dedicated to a TV, I see no reason why you
    couldn''t make it an app for any kind of device: phone, phablet, and TV. If you
    want, you can combine all the recipes in this chapter into a single app. That''s
    a nice challenge, isn''t it?'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个食谱中的应用程序专门用于电视，但我认为您没有理由不能将其制作成任何类型的设备的应用程序：手机、平板电脑和电视。如果您愿意，您可以将本章中的所有食谱合并为一个单一的应用程序。这是一个不错的挑战，不是吗？
- en: 'Besides YouTube, there are also interesting media-related APIs to investigate.
    On [www.programmableweb.com](http://www.programmableweb.com), for example, you
    can find some interesting APIs. Some of them are listed here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 除了YouTube之外，还有一些有趣的与媒体相关的API可以调查。例如，在[www.programmableweb.com](http://www.programmableweb.com)上，你可以找到一些有趣的API。以下是其中一些：
- en: '| API | Navigation |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| API | 导航 |'
- en: '| --- | --- |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| YouTube | http://www.programmableweb.com/api/youtube-live-streaming |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| YouTube | http://www.programmableweb.com/api/youtube-live-streaming |'
- en: '| Vimeo | http://www.programmableweb.com/api/vimeo |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| Vimeo | http://www.programmableweb.com/api/vimeo |'
- en: '| Hey! Spread | http://www.programmableweb.com/api/heyspread |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| Hey! Spread | http://www.programmableweb.com/api/heyspread |'
- en: '| Pirateplay | http://www.programmableweb.com/api/pirateplay |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| Pirateplay | http://www.programmableweb.com/api/pirateplay |'
- en: '| Tinysong | http://www.programmableweb.com/api/tinysong |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| Tinysong | http://www.programmableweb.com/api/tinysong |'
- en: '| TwitVid | http://www.programmableweb.com/api/twitvid |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| TwitVid | http://www.programmableweb.com/api/twitvid |'
- en: Well, now we know where to get media items from, how to play them, and how to
    automagically create a media centre app.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道从哪里获取媒体项目，如何播放它们，以及如何自动创建媒体中心应用程序了。
- en: 'Coming up next: let''s create some media ourselves by capturing some images.
    See you at the next chapter!'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来：让我们通过捕捉一些图像来创建一些媒体。下一章见！
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 6](ch06.html "Chapter 6. Capture and Share"), *Capture and Share*'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。捕捉和分享")，*捕捉和分享*'
