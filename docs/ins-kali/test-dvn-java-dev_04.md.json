["```java\n@Test\npublic class DirectionSpec {\n  public void whenGetFromShortNameNThenReturnDirectionN() {\n    Direction direction = Direction.getFromShortName('N');\n    assertEquals(direction, Direction.NORTH);\n  }\n\n  public void whenGetFromShortNameWThenReturnDirectionW() { \n    Direction direction = Direction.getFromShortName('W'); \n    assertEquals(direction, Direction.WEST); \n  } \n} \n```", "```java\npublic Point(int x, int y) {\n  this.x = x;\n  this.y = y;\n}\n```", "```java\npublic enum Direction {\n  NORTH(0, 'N),\n  EAST(1, 'E'),\n  SOUTH(2, 'S'),\n  WEST(3, 'W'), \n  NONE(4, 'X');\n}\n```", "```java\npublic Location(Point point, Direction direction) {\n  this.point = point;\n  this.direction = direction;\n}\n```", "```java\n@Test\npublic class ShipSpec {\n  public void whenInstantiatedThenLocationIsSet() {\n    Location location = new Location(new Point(21, 13), Direction.NORTH);\n    Ship ship = new Ship(location);\n    assertEquals(ship.getLocation(), location);\n  } \n} \n```", "```java\npublic class Ship {\n  private final Location location;\n\n  public Ship(Location location) {\n    this.location = location; \n  }\n\n  public Location getLocation() {\n    return location;\n  } \n}\n```", "```java\n@Test\npublic class ShipSpec {\n\n  private Ship ship;\n  private Location location;\n\n  @BeforeMethod\n  public void beforeTest() {\n    Location location = new Location(new Point(21, 13), Direction.NORTH);\n    ship = new Ship(location);\n  } \n\n  public void whenInstantiatedThenLocationIsSet() { \n    // Location location = new Location(new Point(21, 13), Direction.NORTH); \n    // Ship ship = new Ship(location); \n    assertEquals(ship.getLocation(), location); \n    } \n} \n```", "```java\npublic boolean forward() {\n  ...\n}\n```", "```java\npublic void givenNorthWhenMoveForwardThenYDecreases() {\n  ship.moveForward();\n  assertEquals(ship.getLocation().getPoint().getY(), 12);\n}\n\npublic void givenEastWhenMoveForwardThenXIncreases() {\n  ship.getLocation().setDirection(Direction.EAST);\n  ship.moveForward();\n  assertEquals(ship.getLocation().getPoint().getX(), 22);\n}\n```", "```java\npublic void whenMoveForwardThenForward() {\n  Location expected = location.copy();\n  expected.forward();\n  ship.moveForward();\n  assertEquals(ship.getLocation(), expected);\n}\n```", "```java\npublic boolean moveForward() { \n  return location.forward(); \n} \n```", "```java\npublic void whenMoveBackwardThenBackward() {\n  Location expected = location.copy();\n  expected.backward();\n  ship.moveBackward();\n  assertEquals(ship.getLocation(), expected);\n}\n```", "```java\npublic boolean moveBackward() {\n  return location.backward();\n}\n```", "```java\npublic void whenTurnLeftThenLeft() {\n  Location expected = location.copy();\n  expected.turnLeft();\n  ship.turnLeft();\n  assertEquals(ship.getLocation(), expected);\n}\n```", "```java\npublic void turnLeft() {\n  location.turnLeft();\n}\n```", "```java\npublic void whenTurnRightThenRight() {\n  Location expected = location.copy();\n  expected.turnRight();\n  ship.turnRight();\n  assertEquals(ship.getLocation(), expected);\n}\n```", "```java\npublic void turnRight() {\n  location.turnRight();\n}\n```", "```java\npublic void whenReceiveCommandsFThenForward() {\n  Location expected = location.copy();\n  expected.forward();\n  ship.receiveCommands(\"f\");\n  assertEquals(ship.getLocation(), expected);\n}\n```", "```java\npublic void receiveCommands(String commands) {\n  if (commands.charAt(0) == 'f') {\n    moveForward();\n  }\n}\n```", "```java\npublic void receiveCommands(String command) {\n  moveForward();\n}\n```", "```java\npublic void whenReceiveCommandsThenAllAreExecuted() {\n  Location expected = location.copy();\n  expected.turnRight();\n  expected.forward();\n  expected.turnLeft();\n  expected.backward();\n  ship.receiveCommands(\"rflb\");\n  assertEquals(ship.getLocation(), expected);\n}\n```", "```java\npublic void receiveCommands(String commands) {\n  for (char command : commands.toCharArray()) {\n    switch(command) {\n      case 'f':\n        moveForward();\n        break;\n      case 'b':\n        moveBackward();\n        break;\n      case 'l':\n        turnLeft();\n        break;\n      case 'r':\n        turnRight();\n        break;\n    }\n  }\n}\n```", "```java\npublic void whenInstantiatedThenPlanetIsStored() {\n  Point max = new Point(50, 50);\n  Planet planet = new Planet(max);\n  ship = new Ship(location, planet);\n  assertEquals(ship.getPlanet(), planet);\n}\n```", "```java\nprivate Planet planet;\npublic Planet getPlanet() {\n  return planet;\n}\n```", "```java\npublic Ship(Location location) {\n  this.location = location;\n}\npublic Ship(Location location, Planet planet) {\n  this.location = location;\n  this.planet = planet;\n}\n```", "```java\npublic class ShipSpec {\n...\n  private Planet planet;\n\n  @BeforeMethod\n  public void beforeTest() {\n    Point max = new Point(50, 50);\n    location = new Location(new Point(21, 13), Direction.NORTH);\n    planet = new Planet(max);\n    // ship = new Ship(location);\n    ship = new Ship(location, planet);\n  }\n\n  public void whenInstantiatedThenPlanetIsStored() {\n    // Point max = new Point(50, 50);\n    // Planet planet = new Planet(max);\n    // ship = new Ship(location, planet);\n    assertEquals(ship.getPlanet(), planet);\n  }\n}\n```", "```java\npublic class Ship {\n...\n  // public Ship(Location location) {\n  //   this.location = location;\n  // }\n  public Ship(Location location, Planet planet) {\n    this.location = location;\n    this.planet = planet;\n  }\n...\n}\n```", "```java\npublic void whenOverpassingEastBoundaryThenPositionIsReset() {\n  location.setDirection(Direction.EAST);\n  location.getPoint().setX(planet.getMax().getX());\n  ship.receiveCommands(\"f\");\n  assertEquals(location.getX(), 1);\n}\n```", "```java\npublic boolean moveForward() {\n  // return location.forward();\n  return location.forward(planet.getMax());\n}\n```"]