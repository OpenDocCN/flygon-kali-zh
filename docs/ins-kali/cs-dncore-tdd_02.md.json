["```cs\n public class Program\n {\n        public static void Main(string[] args)\n        {\n            BuildWebHost(args).Run();\n        }\n\n        public static IWebHost BuildWebHost(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup<Startup>()\n                .Build();\n    }\n```", "```cs\n public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Home/Error\");\n            }\n\n            app.UseStaticFiles();\n\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\n            });\n        }\n    }\n\n```", "```cs\ncurl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\nsudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\n```", "```cs\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-zesty-prod zesty main\" > /etc/apt/sources.list.d/dotnetdev.list\n```", "```cs\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.0.0\n```", "```cs\ncd /home/user/Documents/testapp\ndotnet new console\n```", "```cs\nsudo dpkg -i <package_name>.deb\nsudo apt-get install -f\n```", "```cs\nvar names = (\"John\", \"Doe\");\n```", "```cs\n(string firstName, string lastName) names = (\"John\", \"Doe\");\n```", "```cs\nprivate (string, string) GetNames()\n{\n    (string firstName, string lastName) names = (\"John\", \"Doe\");\n    return names;\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string firstName, lastName;\n        GetNames(out firstName, out lastName);\n    }\n    private static void GetNames(out string firstName, out string lastName)\n    {\n        firstName=\"John\";\n        lastName=\"Doe\";\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        GetNames(out string firstName, out string lastName);\n    }\n    private static void GetNames(out string firstName, out string lastName)\n    {\n        firstName=\"John\";\n        lastName=\"Doe\";\n    }\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        GetNames(out var firstName, out var lastName);\n    }\n    private static void GetNames(out string firstName, out string lastName)\n    {\n        firstName=\"John\";\n        lastName=\"Doe\";\n    }\n}\n```", "```cs\nstring dayOfWeek = \"Sunday\";\nref string day = ref dayOfWeek;\nConsole.WriteLine($\"day-{day}, dayOfWeek-{dayOfWeek}\");\nday = \"Monday\";\nConsole.WriteLine($\"day-{day}, dayOfWeek-{dayOfWeek}\");\ndayOfWeek = \"Tuesday\";\nConsole.WriteLine($\"day-{day}, dayOfWeek-{dayOfWeek}\");\n\n-----------------\nOutput:\n\nday: Sunday\ndayOfWeek:  Sunday\n\nday: Monday\ndayOfWeek:  Monday\n\nday: Tuesday\ndayOfWeek:  Tuesday\n```", "```cs\npublic ref string GetFifthDayOfWeek()\n{\n    string [] daysOfWeek= new string [7] {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};\n    return ref daysOfWeek[4];\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        GetNames(out var firstName, out var lastName); \n\n        void GetNames(out string firstName, out string lastName)\n        {\n            firstName=\"John\";\n            lastName=\"Doe\";\n        }\n    }\n}\n```", "```cs\npublic void ProcessLoan(Loan loan)\n{\n    if(loan is CarLoan carLoan)\n    {\n        // do something\n    }\n}\n```", "```cs\npublic void ProcessLoan(Loan loan)\n{\n    if(loan is var carLoan)\n    {\n        // do something\n    }\n}\n```", "```cs\npublic void ProcessLoan(Loan loan)\n{\n    if(loan is null)\n    {\n        // do something\n    }\n}\n```", "```cs\npublic void ProcessLoan(Loan loan)\n{\n    switch(loan)\n    {\n        case CarLoan carLoan:\n            // do something\n            break;\n        case HouseLoan houseLoan when (houseLoan.IsElligible==true):\n            //do something\n            break;\n        case null:\n            //throw some custom exception\n            break;\n        default:\n            // do something       \n    }\n}\n```", "```cs\nvar longDigit = 2_300_400_500_78;\n```", "```cs\nvar binaryValue = 0b11101011;\n```", "```cs\ncd /home/<user>/Documents/\nmkdir LoanApp\ncd LoanApp\ndotnet new mvc\n```"]