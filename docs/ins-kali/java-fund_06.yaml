- en: '*Chapter 6*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*'
- en: Data Structures, Arrays, and Strings
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构、数组和字符串
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this lesson, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本课程结束时，您将能够：
- en: Create and manipulate various data structures such as arrays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和操作各种数据结构，如数组
- en: Describe the fundamentals behind algorithms for programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述编程算法的基本原理
- en: Write simple sorting programs for arrays
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为数组编写简单的排序程序
- en: Input and perform operations on strings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入并对字符串执行操作
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: This is the last topic in our discussion on OOP. So far, we have already looked
    at classes and objects and how we can use classes as blueprints to create multiple
    objects. We saw how we can use methods to hold the logic of our classes and fields
    to hold the state. We've discussed how classes can inherit some properties from
    other classes to allow easy reusability of code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们关于OOP讨论的最后一个主题。到目前为止，我们已经看过类和对象，以及如何使用类作为蓝图来创建多个对象。我们看到了如何使用方法来保存我们类的逻辑和字段来保存状态。我们讨论了类如何从其他类继承一些属性，以便轻松地重用代码。
- en: We've also looked at polymorphism, or how a class can redefine the implementation
    of a method inherited from the superclass; and overloading, or how we can have
    more than one method using the same name, as long as they have different signatures.
    We've also discussed functions or methods.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看过多态性，或者一个类如何重新定义从超类继承的方法的实现；以及重载，或者我们如何可以有多个使用相同名称的方法，只要它们具有不同的签名。我们还讨论了函数或方法。
- en: We've looked at typecasting and interfaces in our previous lesson and how typecasting
    is a way for us to change an object from one type to another, as long as they
    are on the same hierarchy tree. We talked about upcasting and downcasting. Interfaces,
    on the other hand, are a way for us to define generic behaviors that our classes
    can provide specific implementations of their own.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一课中已经讨论了类型转换和接口，以及类型转换是我们将对象从一种类型更改为另一种类型的方法，只要它们在同一层次结构树上。我们谈到了向上转型和向下转型。另一方面，接口是我们定义通用行为的一种方式，我们的类可以提供自己的特定实现。
- en: In this section, we will look at a few common classes that come with Java. These
    are classes that you will find yourself using on a daily basis, and therefore
    it's important that you understand them. We will also talk about data structures
    and discuss common data structures that come with Java. Remember that Java is
    a wide language and that this list will not be exhaustive. Do find time to look
    at the official Java specification to learn more about the other classes you have
    at your disposal. Throughout this lesson, we will be introducing a topic, giving
    sample programs to illustrate the concepts, and then we'll finish with an exercise.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一些Java自带的常见类。这些是您每天都会使用的类，因此了解它们非常重要。我们还将讨论数据结构，并讨论Java自带的常见数据结构。请记住，Java是一种广泛的语言，这个列表并不是详尽无遗的。请抽出时间查看官方Java规范，以了解更多关于您可以使用的其他类的信息。在本课程中，我们将介绍一个主题，提供示例程序来说明概念，然后完成一个练习。
- en: Data Structures and Algorithms
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据结构和算法
- en: An algorithm is a set of instructions that should be followed to achieve an
    end goal. They are specific to computing, but we often talk about algorithms to
    accomplish a certain task in a computer program. When we write computer programs,
    we generally implement algorithms. For example, when we wish to sort an array
    or list of numbers, we usually come up with an algorithm to do so. It is a core
    concept in computer science and important for any good programmer to understand.
    We have algorithms for sorting, searching, graph problems, string processing,
    and many more. Java comes with a number of algorithms already implemented for
    you. However, we still have the scope to define our own.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 算法是一组指令，应该遵循以实现最终目标。它们是特定于计算的，但我们经常谈论算法来完成计算机程序中的某个任务。当我们编写计算机程序时，通常实现算法。例如，当我们希望对一组数字进行排序时，通常会想出一个算法来实现。这是计算机科学的核心概念，对于任何优秀的程序员来说都很重要。我们有用于排序、搜索、图问题、字符串处理等的算法。Java已经为您实现了许多算法。但是，我们仍然有机会定义自己的算法。
- en: A data structure is a way to store and organize data in order to facilitate
    access and modifications. An example of a data structure is an array used to hold
    several items of the same type or a map used to hold key-value pairs. No single
    data structure works well for all purposes, and so it is important to know their
    strengths and limitations. Java has a number of predefined data structures for
    storing and modifying different kinds of data types. We will also cover some of
    them in the coming sections.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构是一种存储和组织数据以便于访问和修改的方式。数据结构的一个示例是用于保存相同类型的多个项目的数组或用于保存键值对的映射。没有单一的数据结构适用于所有目的，因此了解它们的优势和局限性非常重要。Java有许多预定义的数据结构，用于存储和修改不同类型的数据。我们也将在接下来的部分中涵盖其中一些。
- en: Sorting different types of data is a common task in a computer program.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机程序中对不同类型的数据进行排序是一项常见任务。
- en: Arrays
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组
- en: 'We touched upon arrays in *Lesson 3*, *Control* *Flow*, when we were looking
    at looping, but it''s worth taking an even closer look because they are powerful
    tools. An array is a collection of ordered items. It is used to hold several items
    of the same type. An example of an array in Java could be `{1, 2, 3, 4, 5, 6,
    7}`, which is holding the integers 1 through 7\. The number of items in this array
    is 7\. An array can also hold strings or other objects as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第3课* *控制* *流*中提到了数组，当时我们正在讨论循环，但是值得更仔细地看一下，因为它们是强大的工具。数组是有序项目的集合。它用于保存相同类型的多个项目。Java中数组的一个示例可能是`{1,
    2, 3, 4, 5, 6, 7}`，其中保存了整数1到7。这个数组中的项目数是7。数组也可以保存字符串或其他对象，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can access an item from an array by using its index. An index is the location
    of the item in the array. Elements in an array are indexed from `0`. That is,
    the first number is at index `0`, the second number is at index `1`, the third
    number is at index `2`, and so on. In our first example array, the last number
    is at index `6`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用其索引来访问数组中的项。索引是数组中项的位置。数组中的元素从`0`开始索引。也就是说，第一个数字在索引`0`处，第二个数字在索引`1`处，第三个数字在索引`2`处，依此类推。在我们的第一个示例数组中，最后一个数字在索引`6`处。
- en: For us to be able to access an element from the array, we use `myArray[0]` to
    access the first item in `myArray`, `myArray[1]` to access the second item, and
    so on to `myArray[6]` to access the seventh item.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够访问数组中的元素，我们使用`myArray[0]`来访问`myArray`中的第一个项目，`myArray[1]`来访问第二个项目，依此类推，`myArray[6]`来访问第七个项目。
- en: Java allows us to define arrays of primitive types and objects such as reference
    types.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Java允许我们定义原始类型和引用类型等对象的数组。
- en: Arrays also have a size, which is the number of items in that array. In Java,
    when we create an array, we must specify its size. This size cannot be changed
    once the array has been created.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数组也有一个大小，即数组中的项数。在Java中，当我们创建一个数组时，必须指定其大小。一旦数组被创建，大小就不能改变。
- en: '![Figure 6.1: An empty array](img/C09581_Figure_06_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1：一个空数组](img/C09581_Figure_06_01.jpg)'
- en: 'Figure 6.1: An empty array'
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.1：一个空数组
- en: Creating and Initializing an Array
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建和初始化数组
- en: 'To create an array, you need to declare the name of the array, the type of
    elements it will contain, and its size as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个数组，您需要声明数组的名称、它将包含的元素的类型和其大小，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We use the square brackets `[ ]` to indicate an array. In this example, we are
    creating an array of integers that holds 10 items, indexed from 0 to 9\. We specify
    the number of items so that Java can reserve enough memory for the elements. We
    also use the `new` keyword to indicate a new array.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用方括号`[]`来表示数组。在这个例子中，我们正在创建一个包含10个项目的整数数组，索引从0到9。我们指定项目的数量，以便Java可以为元素保留足够的内存。我们还使用`new`关键字来指示一个新数组。
- en: 'For example, to declare array of 10 doubles, use this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要声明包含10个双精度数的数组，请使用以下方法：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To declare array of 10 Boolean values, use this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明包含10个布尔值的数组，请使用以下方法：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To declare array of 10 `Person` objects, use this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明包含10个`Person`对象的数组，请使用以下方法：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also create an array and at the same time declare the items in the
    array (initialization):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建一个数组，并在同一时间声明数组中的项（初始化）：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Accessing Elements
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问元素
- en: To access array elements, we use the index enclosed in square brackets. For
    example, to access the fourth element, we use `myArray[3]`, to access the tenth
    element, we use `myArray[9]`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问数组元素，我们使用方括号括起的索引。例如，要访问第四个元素，我们使用`myArray[3]`，要访问第十个元素，我们使用`myArray[9]`。
- en: 'Here''s an example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To get the length of the array, we use the `length` property. It returns an
    integer that is the number of items in the array:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数组的长度，我们使用`length`属性。它返回一个整数，即数组中的项数：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the array has no items, `length` will be 0\. We can use the `length` and
    a loop to insert items into the array.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组没有任何项，`length`将为0。我们可以使用`length`和循环将项插入数组中。
- en: 'Exercise 14: Creating an Array Using a Loop'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习14：使用循环创建数组
- en: It can be useful to use control flow commands to create long arrays. Here we
    will use a `for` loop to create an array of numbers from 0-9.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制流命令创建长数组可能很有用。在这里，我们将使用`for`循环创建一个从0到9的数字数组。
- en: 'Create a new class with `DataStr` as the class name and set up the `main` method
    as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`DataStr`的新类，并设置`main`方法如下：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create an array of integers of length 10 as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个长度为10的整数数组如下：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Initialize a `for` loop with a variable starting at zero, with loop incrementing
    one with each iteration and the condition being less than the array length:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个`for`循环，变量从零开始，每次迭代增加一个，条件是小于数组长度：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Insert item `i` into the array:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项`i`插入数组中：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use a similar loop construct to print out the loop:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类似的循环结构来打印循环：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The full code should look as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码应该如下所示：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Your output should be as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您的输出应该如下所示：
- en: '![Figure 6.2: Output of the DataStr class](img/C09581_Figure_06_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2：DataStr类的输出](img/C09581_Figure_06_02.jpg)'
- en: 'Figure 6.2: Output of the DataStr class'
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.2：DataStr类的输出
- en: In this exercise, we used the first `for` loop to insert items into `myArray`
    and the second to print out the items.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用第一个`for`循环将项目插入`myArray`中，使用第二个循环将项目打印出来。
- en: 'As we discussed previously, we can replace the second `for` loop with a `for-each`
    loop, which is much shorter and makes the code easier to read:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，我们可以用`for-each`循环替换第二个`for`循环，这样代码会更简洁，更易读：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Java does automatic bound checking for us - if you have created an array of
    size N and use an index whose value is less than 0 or greater than N-1, your program
    will terminate with an `ArrayOutOfBoundsException` exception.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Java会自动为我们进行边界检查-如果您创建了一个大小为N的数组，并使用值小于0或大于N-1的索引，您的程序将以`ArrayOutOfBoundsException`异常终止。
- en: 'Exercise 15: Searching for a Number in an Array'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习15：在数组中搜索一个数字
- en: 'In this exercise, you will check whether the number entered by the user is
    present in the array or not. To do this, perform the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将检查用户输入的数字是否存在于数组中。为此，请执行以下步骤：
- en: 'Define a new class called `NumberSearch` and include the `main` method in it:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`NumberSearch`的新类，并在其中包含`main`方法：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Ensure that you import this package at the top, which is for reading values
    from the input devices:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在顶部导入此包，用于从输入设备读取值：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Declare an array sample that store the integers 2, 4, 7, 98, 32, 77, 81, 62,
    45, 71:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为sample的数组，其中存储整数2、4、7、98、32、77、81、62、45、71：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Read a number from the user:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从用户那里读取一个数字：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check whether the `ele` variable matches any of the items in the array sample.
    To do this we iterate through the loop and check whether each element of the array
    matches the element entered by the user:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`ele`变量是否与数组样本中的任何项目匹配。为此，我们遍历循环，并检查数组的每个元素是否与用户输入的元素匹配：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Your output should be similar to this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您的输出应类似于此：
- en: '![Figure 6.3: Output of the NumberSearch class](img/C09581_Figure_06_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3：NumberSearch类的输出](img/C09581_Figure_06_03.jpg)'
- en: 'Figure 6.3: Output of the NumberSearch class'
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.3：NumberSearch类的输出
- en: 'Activity 21: Finding the Smallest Number in an Array'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动21：在数组中找到最小的数字
- en: In this activity, we will take an array of 20 unsorted numbers and loop through
    the array to find the smallest number.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将取一个包含20个未排序数字的数组，并循环遍历数组以找到最小的数字。
- en: 'The steps are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Create a class called `ExampleArray` and create the `main` method.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ExampleArray`的类，并创建`main`方法。
- en: 'Create an array made up of 20 floating points as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个由20个浮点数组成的数组，如下所示：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Create a `for-each` loop through the array and find the minimum element in the
    array.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过数组创建一个`for-each`循环，并找到数组中的最小元素。
- en: Print out the minimum float.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出最小的浮点数。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 335.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在335页找到。
- en: 'Activity 22: Calculator with Array of Operators'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动22：具有操作符数组的计算器
- en: In this activity you'll change your calculator to be more dynamic and make it
    easier to add new operators. For that, instead of making all possible operators
    a different field, you'll add them into an array and use a for-loop to determine
    what operator to use.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您将改变您的计算器，使其更加动态，并且更容易添加新的操作符。为此，您将不是将所有可能的操作符作为不同的字段，而是将它们添加到一个数组中，并使用for循环来确定要使用的操作符。
- en: 'To complete this activity you''ll need to:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此活动，您需要：
- en: Create a class `Operators` that will contain the logic of determining what operator
    to use based out of a String. In this class create a public constant field `default_operator`
    that is going to be an instance of the `Operators` class. Then create another
    constant field called `operators` of type array of `Operators` and initialize
    it with an instance of each of the operators you have.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Operators`的类，其中包含根据字符串确定要使用的操作符的逻辑。在这个类中创建一个名为`default_operator`的公共常量字段，它将是`Operators`类的一个实例。然后创建另一个名为`operators`的常量字段，类型为`Operators`数组，并用每个操作符的实例进行初始化。
- en: In the `Operators` class, add a public static method called `findOperator` that
    receives the operator as a String and return an instance of `Operators`. Inside
    it iterate over the possible operators array and, using the matches method for
    each operator, return the selected operator, or the default one if it didn't match
    any of them.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Operators`类中，添加一个名为`findOperator`的公共静态方法，它接收操作符作为字符串，并返回`Operators`的一个实例。在其中，遍历可能的操作符数组，并对每个操作符使用matches方法，返回所选操作符，如果没有匹配任何操作符，则返回默认操作符。
- en: 'Create a new `CalculatorWithDynamicOperator` class with three fields: `operand1`
    and `operator2` as double and `operator` of type `Operators`.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`CalculatorWithDynamicOperator`类，有三个字段：`operand1`和`operator2`为double类型，`operator`为`Operators`类型。
- en: 'Add a constructor that receives three parameters: operand1 and operand2 of
    type double and operator as a String. In the constructor, instead of having an
    if-else to select the operator, use the `Operators.findOperator` method to set
    the operator field.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个构造函数，接收三个参数：类型为double的operand1和operand2，以及类型为String的operator。在构造函数中，不要使用if-else来选择操作符，而是使用`Operators.findOperator`方法来设置操作符字段。
- en: Add a `main` method where you call the `Calculator` class multiple times and
    print the results.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`main`方法，在其中多次调用`Calculator`类并打印结果。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 336.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在336页找到。
- en: Two-Dimensional Arrays
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二维数组
- en: The arrays we have looked so far are referred to as one-dimensional because
    all the elements can be considered to be on one row. We can also declare arrays
    that have both columns and rows, just like a matrix or grid. Multidimensional
    arrays are arrays of one-dimensional arrays we saw earlier. That is, you can consider
    one of the rows as a one-dimensional array and then the columns are multiple one-dimensional
    arrays.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们看到的数组都被称为一维数组，因为所有元素都可以被认为在一行上。我们也可以声明既有列又有行的数组，就像矩阵或网格一样。多维数组是我们之前看到的一维数组的数组。也就是说，您可以将其中一行视为一维数组，然后列是多个一维数组。
- en: 'When describing a multidimensional array, we say the array is a M-by-N multidimensional
    array to denote that the array has M rows each of N length, for example, an array
    of 6 by 7:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 描述多维数组时，我们说数组是一个M乘N的多维数组，表示数组有M行，每行长度为N，例如，一个6乘7的数组：
- en: '![Figure 6.4: Graphical representation of a multi-dimensional array](img/C09581_Figure_06_04.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4：多维数组的图形表示](img/C09581_Figure_06_04.jpg)'
- en: 'Figure 6.4: Graphical representation of a multi-dimensional array'
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.4：多维数组的图形表示
- en: In java, to create a two-dimensional array, we use the double square brackets,
    `[M][N ]`. This notation creates a M-by-N array. We can then refer to an individual
    item in the array by using the notation `[ i ] [ j ]` to access the element in
    the *i**th* row and *j**th* column.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在java中，要创建一个二维数组，我们使用双方括号`[M][N]`。这种表示法创建了一个M行N列的数组。然后，我们可以使用`[i][j]`的表示法来访问数组中的单个项目，以访问第i行和第j列的元素。
- en: 'To create an 8-by-10 multidimensional array of doubles we do the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个8x10的双精度多维数组，我们需要执行以下操作：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Java initializes all the numeric types to zeros and the Booleans to false.
    We could also loop through the array and initialize each item manually to a value
    of our choice:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Java将所有数值类型初始化为零，布尔类型初始化为false。我们也可以循环遍历数组，并手动将每个项目初始化为我们选择的值：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Exercise 16: Printing a Simple Two-Dimensional Array'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习16：打印简单的二维数组
- en: 'To print a simple two-dimensional array, perform the following steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印一个简单的二维数组，请执行以下步骤：
- en: 'Set up the `main` method in a new class file known as `Twoarray`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`Twoarray`的新类文件中设置`main`方法：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Define the `arr` array by adding elements to the array:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向数组添加元素来定义`arr`数组：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a nested `for` loop. The outer `for` loop is to print the elements row-wise,
    and the inner `for` loop is to print the elements column-wise:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个嵌套的`for`循环。外部的`for`循环是按行打印元素，内部的`for`循环是按列打印元素：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the program. Your output should be similar to this:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。您的输出应该类似于这样：
- en: '![Figure 6.5: Output of the Twoarray class](img/C09581_Figure_06_05.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5：Twoarray类的输出](img/C09581_Figure_06_05.jpg)'
- en: 'Figure 6.5: Output of the Twoarray class'
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.5：Twoarray类的输出
- en: Most of the rest of the operations with arrays remain pretty much the same as
    with one-dimensional arrays. One important detail to remember is that in a multidimensional
    array, using `a[i]` returns a row that is a one-dimensional array. You have to
    use a second index to access the exact location you wish, `a[i][j]`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数与数组相关的操作与一维数组基本相同。要记住的一个重要细节是，在多维数组中，使用`a[i]`返回一个一维数组的行。您必须使用第二个索引来访问您希望的确切位置，`a[i][j]`。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Java also allows you to create higher-order dimensional arrays, but dealing
    with them becomes complex. This is because our human brain can easily comprehend
    three-dimensional arrays but higher-order ones become hard to visualize.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Java还允许您创建高阶维度的数组，但处理它们变得复杂。这是因为我们的大脑可以轻松理解三维数组，但更高阶的数组变得难以可视化。
- en: 'Exercise 17: Creating a Three-Dimensional Array'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习17：创建一个三维数组
- en: Here we will create a three-dimensional `(x,y,z)` array of integers and initialize
    each element to the product of its row, column, and depth (x * y * z) indices.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个三维`(x,y,z)`整数数组，并将每个元素初始化为其行、列和深度（x * y * z）索引的乘积。
- en: 'Create a new class called `Threearray` and set up the `main` method:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Threearray`的新类，并设置`main`方法：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Declare an `arr` array of dimension `[2][2][2]`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个维度为`[2][2][2]`的`arr`数组：
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Declare the variables for iteration:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明迭代的变量：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create three `for` loops nested within each other, in order to write values
    into the three-dimensional array:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个嵌套在彼此内部的`for`循环，以便将值写入三维数组：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Print the elements out of the array using the three `for` loops that are nested
    within each other:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用嵌套在彼此内部的三个`for`循环打印数组的元素：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The full code should look like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码应该是这样的：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output is as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.6: Output of the Threearray class](img/C09581_Figure_06_06.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6：Threearray类的输出](img/C09581_Figure_06_06.jpg)'
- en: 'Figure 6.6: Output of the Threearray class'
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.6：Threearray类的输出
- en: The Arrays Class in Java
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java中的Arrays类
- en: 'Java provides the `Arrays` class, which provides static methods we can use
    with our arrays. It is often easier to use this class because we have access to
    methods to sort, search, and much more. This class is available in the `java.util.Arrays`
    package, so before we work with it, place this line at the top of any file you
    want to use it:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Java提供了`Arrays`类，它提供了我们可以与数组一起使用的静态方法。通常更容易使用这个类，因为我们可以访问排序、搜索等方法。这个类在`java.util.Arrays`包中可用，所以在使用它之前，将这一行放在任何要使用它的文件的顶部：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the following code, we can see how to use the `Arrays` class and a few methods
    that we have at our disposal. All the methods are explained after the snippet:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们可以看到如何使用`Arrays`类和一些我们可以使用的方法。所有的方法都在代码片段后面解释：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This is the output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 6.7: Output of the ArraysExample class](img/C09581_Figure_06_07.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7：ArraysExample类的输出](img/C09581_Figure_06_07.jpg)'
- en: 'Figure 6.7: Output of the ArraysExample class'
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.7：ArraysExample类的输出
- en: In this program, we have three example uses of the `Arrays` class. In the first
    example, we see how we can use `Arrays.toString()` to easily print out the elements
    of an array without the need of the `for` loop we were using earlier. In the second
    example, we saw how we can use `Arrays.sort()` to quickly sort an array. If we
    were to implement such a method on our own, we would use many more lines and be
    prone to making a lot of errors in the process.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，我们有`Arrays`类的三个示例用法。在第一个示例中，我们看到如何使用`Arrays.toString()`轻松打印数组的元素，而不需要我们之前使用的`for`循环。在第二个示例中，我们看到如何使用`Arrays.sort()`快速对数组进行排序。如果我们要自己实现这样一个方法，我们将使用更多的行，并且在过程中容易出现很多错误。
- en: In the last example, we sort the arrays and then search for 7.0 by using `Arrays.binarySearch()`,
    which uses a searching algorithm called **binary search**.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个示例中，我们对数组进行排序，然后使用`Arrays.binarySearch()`搜索7.0，它使用一种称为**二分查找**的搜索算法。
- en: Note
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '`Arrays.sort()` uses an algorithm called double-pivot quicksort to sort large
    arrays. For smaller arrays, it uses a combination of Insertion sort and Merge
    sort. It is better to trust that `Arrays.sort()` is optimized to each use case
    instead of implementing your own sorting algorithm. `Arrays.binarySearch()` uses
    an algorithm called binary search to look for an item in the array. It first requires
    that the array be sorted, and that is why we called `Arrays.sort()` first. Binary
    search splits the sorted array into two equal halves recursively until it can
    no longer divide the array, at which point that value is the answer.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`Arrays.sort()`使用一种称为双轴快速排序的算法来对大数组进行排序。对于较小的数组，它使用插入排序和归并排序的组合。最好相信`Arrays.sort()`针对每种用例进行了优化，而不是实现自己的排序算法。`Arrays.binarySearch()`使用一种称为二分查找的算法来查找数组中的项。它首先要求数组已排序，这就是为什么我们首先调用`Arrays.sort()`。二分查找递归地将排序后的数组分成两个相等的部分，直到无法再分割数组为止，此时该值就是答案。'
- en: Insertion sort
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入排序
- en: 'Sorting is one of the fundamental applications of algorithms in computer science.
    Insertion sort is a classic example of a sorting algorithm, and although it is
    inefficient it is a good starting point when looking at arrays and the sorting
    problem. The steps in the algorithm are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 排序是计算机科学中算法的基本应用之一。插入排序是排序算法的一个经典示例，尽管它效率低下，但在查看数组和排序问题时是一个很好的起点。算法的步骤如下：
- en: Take the first element in the array and assume it is already sorted since it
    is only one.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取数组中的第一个元素，并假设它已经排序，因为它只有一个。
- en: Pick the second element in the array. Compare it with the first element. If
    it is greater that the first element, then the two items are already sorted. If
    it is smaller than the first element, swap the two elements so that they are sorted.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择数组中的第二个元素。将其与第一个元素进行比较。如果它大于第一个元素，则两个项目已经排序。如果它小于第一个元素，则交换两个元素，使它们排序。
- en: Take the third element. Compare it with the second element in the already sorted
    subarray. If smaller then swap the two. The compare it again with the first element.
    If it is smaller, then swap the two again so that it is the first. The three elements
    will now be sorted.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取第三个元素。将其与已排序子数组中的第二个元素进行比较。如果较小，则交换两者。然后再次将其与第一个元素进行比较。如果较小，则再次交换两者，使其成为第一个。这三个元素现在将被排序。
- en: Take the fourth element and repeat this process, swapping if it smaller than
    its left neighbor, otherwise leaving it where it is.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取第四个元素并重复此过程，如果它小于其左邻居，则交换，否则保持在原位。
- en: Repeat this process for the rest of the items in the array.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对数组中的其余项目重复此过程。
- en: The resultant array will be sorted.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果数组将被排序。
- en: Example
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: 'Take the array `[3, 5, 8, 1, 9]`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 取数组`[3, 5, 8, 1, 9]`：
- en: 'Let''s take the first element and assume it is sorted: `[3]`.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们取第一个元素并假设它已排序：`[3]`。
- en: 'Take the second element, 5\. Since it is greater than 3, we leave the array
    as it is: `[3, 5]`.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取第二个元素，5。由于它大于3，我们保持数组不变：`[3, 5]`。
- en: 'Take the third element, 8\. It is greater than 5, so there''s no swapping here
    either: `[3, 5, 8]`.'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取第三个元素，8。它大于5，所以这里也没有交换：`[3, 5, 8]`。
- en: 'Take the fourth element, 1\. Since it is smaller than 8, we swap 8 and 1 to
    have: `[3, 5, 1, 8]`.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取第四个元素，1。由于它小于8，我们交换8和1得到：`[3, 5, 1, 8]`。
- en: 'Since 1 is still smaller than 5, we swap the two again: `[3, 1, 5, 8]`.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于1仍然小于5，我们再次交换两者：`[3, 1, 5, 8]`。
- en: '1 is still smaller than 3\. We swap again: `[1, 3, 5, 8]`.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1仍然小于3。我们再次交换：`[1, 3, 5, 8]`。
- en: It is now the smallest.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在它是最小的。
- en: Take the last element, 9\. It is greater than 8, so there's no swapping.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取最后一个元素，9。它大于8，所以没有交换。
- en: 'The whole array is now sorted : `[1, 3, 5, 8, 9]`.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个数组现在已排序：`[1, 3, 5, 8, 9]`。
- en: 'Exercise 18: Implementing Insertion Sort'
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习18：实现插入排序
- en: In this exercise, we will implement the insertion sort.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将实现插入排序。
- en: 'Create a new class called `InsertionSort`, and inside this class, create the
    `main` method:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`InsertionSort`的新类，并在这个类中创建`main`方法：
- en: '[PRE34]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Inside our `main` method, create a sample array of random integers and pass
    it to our `sort` method. Use the following array, [1, 3, 354, 64, 364, 64, 3,
    4, 74, 2, 46]:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`main`方法中，创建一个随机整数样本数组，并将其传递给我们的`sort`方法。使用以下数组，[1, 3, 354, 64, 364, 64,
    3, 4, 74, 2, 46]：
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After calling `sort()` with our array, use a `foreach` loop to print each of
    the items in the sorted array with a space in a single line:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用我们的数组调用`sort()`后，使用`foreach`循环在单行中打印排序后数组中的每个项目并用空格分隔：
- en: '[PRE36]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create a public static method called `sort()` that takes an array of integers
    and returns `void`. This is the method that will have our sorting algorithm:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`sort()`的公共静态方法，该方法接受一个整数数组并返回`void`。这是我们排序算法的方法：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Inside the `sort` method, implement the algorithm illustrated earlier.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sort`方法中，实现前面说明的算法。
- en: 'Define the integer `num` as the length of the array in the `sort()` method:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sort()`方法中将整数`num`定义为数组的长度：
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a `for` loop that executes until `i` has reached the length of the array.
    Inside the loop, create the algorithm that compares the numbers: `k` will be an
    integer defined by the index `i`, and `j` will be index `i-1`. Add a `while` loop
    inside the `for` loop that switches the integers at `i` and `i-1` with the following
    conditions: `j` is greater or equal to `0` and the integer at index `j` is greater
    than `k`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`for`循环，直到`i`达到数组的长度为止。在循环内，创建比较数字的算法：`k`将是由索引`i`定义的整数，`j`将是索引`i-1`。在`for`循环内添加一个`while`循环，根据以下条件交换`i`和`i-1`处的整数：`j`大于或等于`0`，并且索引`j`处的整数大于`k`：
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The completed code looks as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的代码如下所示：
- en: '[PRE40]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output is as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.8: Output of the InsertionSort class](img/C09581_Figure_06_08.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8：InsertionSort类的输出](img/C09581_Figure_06_08.jpg)'
- en: 'Figure 6.8: Output of the InsertionSort class'
  id: totrans-192
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.8：InsertionSort类的输出
- en: Java makes it easy for us to deal with commonly used data structures such as
    lists, stacks, queues, and maps. It comes with the Java collections framework
    that provides easy-to-use APIs when dealing with such data structures. A good
    example is when we want to sort the elements in an array or want to search for
    a particular element in the array. Instead of rewriting such methods from scratch
    on our own, Java comes with methods that we can apply to our collections, as long
    as they conform to the requirements of the collections framework. The classes
    of the collections framework can hold objects of any type.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Java使我们能够处理常用的数据结构，如列表、堆栈、队列和映射变得容易。它配备了Java集合框架，提供了易于使用的API，用于处理这些数据结构。一个很好的例子是当我们想要对数组中的元素进行排序或者想要搜索数组中的特定元素时。我们可以应用于我们的集合的方法，只要它们符合集合框架的要求，而不是自己从头开始重写这些方法。集合框架的类可以保存任何类型的对象。
- en: We will now look at a common class in the collections framework called `ArrayList`.
    Sometimes we wish to store elements but are not sure of the number of items we
    are expecting. We need a data structure to which we can add as many items as we
    wish and remove some when we need to. The arrays we have seen so far require us
    to specify the number of items when creating it. After that, we cannot change
    the size of that array unless we create a whole new array. An ArrayList is a dynamic
    list that can grow and shrink as needed; they are created with an initial size
    and when we add or remove an item, the size is automatically enlarged or shrank
    as needed.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下集合框架中的一个常见类，称为`ArrayList`。有时我们希望存储元素，但不确定我们期望的项目数量。我们需要一个数据结构，可以向其中添加任意数量的项目，并在需要时删除一些。到目前为止，我们看到的数组在创建时需要指定项目的数量。之后，除非创建一个全新的数组，否则无法更改该数组的大小。ArrayList是一个动态列表，可以根据需要增长和缩小；它们是以初始大小创建的，当我们添加或删除一个项目时，大小会根据需要自动扩大或缩小。
- en: Creating an ArrayList and Adding Elements
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建ArrayList并添加元素
- en: 'When creating an `ArrayList`, you need to specify the type of objects to be
    stored. Array lists only support storage of reference types (that is, objects)
    and don''t support primitive types. However, since Java provides `add()` method
    with the object to be added as a parameter. ArrayList also has a method to get
    the number of items in the list called `size()`. The method returns an integer,
    which is the number of items in the list:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`ArrayList`时，您需要指定要存储的对象类型。数组列表仅支持引用类型（即对象）的存储，不支持原始类型。但是，由于Java提供了带有要添加的对象作为参数的`add()`方法。ArrayList还有一个方法来获取列表中的项目数，称为`size()`。该方法返回一个整数，即列表中的项目数：
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.9: Output of the Person class](img/C09581_Figure_06_09.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9：Person类的输出](img/C09581_Figure_06_09.jpg)'
- en: 'Figure 6.9: Output of the Person class'
  id: totrans-200
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.9：Person类的输出
- en: 'In the first example, we create an `ArrayList` of size 0 called `myArrayList`
    holding `Integer` types. In the second example, we create an `ArrayList` of size
    5 of `Integer` types. Although the initial size is 5, when we add more items,
    the list will increase in size automatically. In the last example, we create an
    `ArrayList` of `Person` objects. From these three examples, the following should
    be adhered to when creating an array list:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们创建了一个大小为0的`myArrayList`，其中包含`Integer`类型的`ArrayList`。在第二个示例中，我们创建了一个大小为5的`Integer`类型的`ArrayList`。尽管初始大小为5，但当我们添加更多项目时，列表将自动增加大小。在最后一个示例中，我们创建了一个`Person`对象的`ArrayList`。从这三个示例中，创建数组列表时应遵循以下规则：
- en: Import the `ArrayList` class from the `java.util` package.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`java.util`包中导入`ArrayList`类。
- en: Specify the data type of the objects between `<>`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<>`之间指定对象的数据类型。
- en: Specify the name of the list.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定列表的名称。
- en: Use the `new` keyword to create a new instance of `ArrayList`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`new`关键字创建`ArrayList`的新实例。
- en: 'Following are some ways to add elements to the ArrayList:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是向ArrayList添加元素的一些方法：
- en: '[PRE42]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the first example, we create a new `Integer` object and add it to the list.
    The new object will be appended to the end of the list. In the second line, we
    inserted 1 but because `ArrayList` accepts only objects, the JVM will `Person`
    class and appended it to the list. We might also wish to insert the element at
    a specific index instead of appending at the end of the list in the same class.
    Here we specify the index to insert the object and the object to be inserted:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们创建一个新的`Integer`对象并将其添加到列表中。新对象将附加到列表的末尾。在第二行中，我们插入了1，但由于`ArrayList`仅接受对象，JVM将`Person`类并将其附加到列表中。我们可能还希望在同一类中将元素插入到特定索引而不是在列表末尾附加。在这里，我们指定要插入对象的索引和要插入的对象：
- en: '[PRE43]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.10: Output after adding an element to the list](img/C09581_Figure_06_10.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10：添加元素到列表后的输出](img/C09581_Figure_06_10.jpg)'
- en: 'Figure 6.10: Output after adding an element to the list'
  id: totrans-212
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.10：添加元素到列表后的输出
- en: Note
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Inserting an object at an index less that 0 or greater than the size of the
    array list will result in an `IndexOutOfBoundsException` and your program will
    crash. Always check the size of the list before specifying the index to insert.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引小于0或大于数组列表大小的位置插入对象将导致`IndexOutOfBoundsException`，并且您的程序将崩溃。在指定要插入的索引之前，始终检查列表的大小。
- en: Replacing and Removing Elements
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换和删除元素
- en: '`ArrayList` also allows us to replace an element at a specified location with
    a new element. Append the following in the previous code and observe the output:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArrayList`还允许我们用新元素替换指定位置的元素。在上一个代码中添加以下内容并观察输出：'
- en: '[PRE44]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here''s the output:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 6.11: List after replacing the element](img/C09581_Figure_06_11.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11：替换元素后的列表](img/C09581_Figure_06_11.jpg)'
- en: 'Figure 6.11: List after replacing the element'
  id: totrans-220
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.11：替换元素后的列表
- en: Here we are replacing the element at index 2 with a new `Integer` object with
    a value of 3\. This method also throws `IndexOutOfBoundsException`if we try to
    replace the element at an index greater than the size of the list or an index
    below zero.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在索引2处的元素替换为值为3的新`Integer`对象。如果我们尝试替换列表大小大于的索引或小于零的索引，此方法还会抛出`IndexOutOfBoundsException`。
- en: 'If you also wish to remove a single element or all of the elements, ArrayList
    supports that too:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还希望删除单个元素或所有元素，ArrayList也支持：
- en: '[PRE45]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Here''s the output:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 6.12: List after clearing all elements](img/C09581_Figure_06_12.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12：清除所有元素后的列表](img/C09581_Figure_06_12.jpg)'
- en: 'Figure 6.12: List after clearing all elements'
  id: totrans-226
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.12：清除所有元素后的列表
- en: 'To get an element at a specific index, use the `get()` method, passing in the
    index. The method returns an object:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取特定索引处的元素，请使用`get()`方法，传入索引。该方法返回一个对象：
- en: '[PRE46]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output is as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.13: Output of the element at given index](img/C09581_Figure_06_13.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13：给定索引处元素的输出](img/C09581_Figure_06_13.jpg)'
- en: 'Figure 6.13: Output of the element at the given index'
  id: totrans-231
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.13：给定索引处元素的输出
- en: 'This method will also throw `IndexOutOfBoundsException` if the index passed
    is invalid. To avoid the exception, always check the size of the list first. Consider
    the following example:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递的索引无效，此方法还会抛出`IndexOutOfBoundsException`。为了避免异常，始终先检查列表的大小。考虑以下示例：
- en: '[PRE47]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![Figure 6.14: IndexOutOfBounds exception message ](img/C09581_Figure_06_14.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14：IndexOutOfBounds异常消息](img/C09581_Figure_06_14.jpg)'
- en: 'Figure 6.14: IndexOutOfBounds exception message'
  id: totrans-235
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.14：IndexOutOfBounds异常消息
- en: 'Exercise 19: Adding, Removing, and Replacing Elements in an Array'
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习19：在数组中添加、删除和替换元素
- en: 'Arrays are basic, but useful ways of storing information. In this exercise
    we will look at how to add and subtract elements in a list of students:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是存储信息的基本但有用的方式。在这个练习中，我们将看看如何在学生名单中添加和删除元素：
- en: 'Import the `ArrayList` and `List` class for `java.util`:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util`的`ArrayList`和`List`类：
- en: '[PRE48]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create a `public` class and the `main` method:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`public`类和`main`方法：
- en: '[PRE49]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Define the students `List` as new ArrayList that contains strings:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将学生`List`定义为包含字符串的新ArrayList：
- en: '[PRE50]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the names of four students:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加四个学生的名字：
- en: '[PRE51]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Print out the array and remove the last student:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印数组并删除最后一个学生：
- en: '[PRE52]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Print out the array:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印数组：
- en: '[PRE53]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Replace the first student (at index 0):'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 替换第一个学生（在索引0处）：
- en: '[PRE54]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Print out the array:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印数组：
- en: '[PRE55]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output is as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.15: Output of the StudentList class](img/C09581_Figure_06_15.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15：StudentList类的输出](img/C09581_Figure_06_15.jpg)'
- en: 'Figure 6.15: Output of the StudentList class'
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.15：StudentList类的输出
- en: Iterators
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代器
- en: The collections framework also provides iterators that we can use to loop through
    the elements of an `ArrayList`. Iterators are like pointers to the items in the
    list. We can use iterators to see if there is a next element in the list and then
    retrieve it. Consider iterators as loops for the collections framework. We can
    use the `array.iterator()` object with `hasNext()` to loop through an array.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 集合框架还提供了迭代器，我们可以使用它们来循环遍历`ArrayList`的元素。迭代器就像是列表中项目的指针。我们可以使用迭代器来查看列表中是否有下一个元素，然后检索它。将迭代器视为集合框架的循环。我们可以使用`array.iterator()`对象和`hasNext()`来循环遍历数组。
- en: 'Exercise 20: Iterating through an ArrayList'
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习20：遍历ArrayList
- en: 'In this exercise, we will create an `ArrayList` of the cities in the world
    and use an iterator to print out the cities in the whole `ArrayList` one at a
    time:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个世界上城市的`ArrayList`，并使用迭代器逐个打印整个`ArrayList`中的城市：
- en: 'Import the ArrayList and the `Iterator` packages:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入ArrayList和Iterator包：
- en: '[PRE56]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create a `public` class and the `main` method:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`public`类和`main`方法：
- en: '[PRE57]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create a new array and add the city names:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新数组并添加城市名称：
- en: '[PRE58]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Define an iterator containing strings:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个包含字符串的迭代器：
- en: '[PRE59]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Loop through the iterator with `hasNext()`, printing out each city with `next()`:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`hasNext()`循环迭代器，使用`next()`打印每个城市：
- en: '[PRE60]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The output is as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.16: Output of the Cities class](img/C09581_Figure_06_16.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16：Cities类的输出](img/C09581_Figure_06_16.jpg)'
- en: 'Figure 6.16: Output of the Cities class'
  id: totrans-273
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.16：Cities类的输出
- en: 'In this class, we created a new ArrayList holding strings. We then inserted
    a few names and created an iterator called `citiesIterator`. Classes in the collections
    framework support the `iterator()` method, which returns an iterator to use with
    the collection. The iterator has the `hasNext()` method, which returns true if
    there is another element in the list after where we currently are, and a `next()`
    method that returns that next object. `next()` returns an object instance and
    then implicitly downcasts it to a string because our `citiesIterator` was declared
    to hold string types: `Iterator<String> citiesIterator`.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们创建了一个包含字符串的新ArrayList。然后我们插入了一些名字，并创建了一个名为`citiesIterator`的迭代器。集合框架中的类支持`iterator()`方法，该方法返回一个用于集合的迭代器。迭代器有`hasNext()`方法，如果在我们当前位置之后列表中还有另一个元素，则返回true，并且`next()`方法返回下一个对象。`next()`返回一个对象实例，然后将其隐式向下转换为字符串，因为我们声明`citiesIterator`来保存字符串类型：`Iterator<String>
    citiesIterator`。
- en: '![Figure 6.17: Working of next()  and hasNext()](img/C09581_Figure_06_17.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17：next()和hasNext()的工作方式](img/C09581_Figure_06_17.jpg)'
- en: 'Figure 6.17: Working of next() and hasNext()'
  id: totrans-276
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.17：next()和hasNext()的工作方式
- en: 'Instead of using iterators for looping, we can also use a normal `for` loop
    to achieve the same goal:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用迭代器进行循环，我们还可以使用普通的`for`循环来实现相同的目标：
- en: '[PRE61]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The output is as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.18: Output of the Cities class using for loop](img/C09581_Figure_06_18.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18：使用for循环输出Cities类的输出](img/C09581_Figure_06_18.jpg)'
- en: 'Figure 6.18: Output of the Cities class using a for loop'
  id: totrans-281
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.18：使用for循环输出Cities类的输出
- en: Here, we are using the `size()` method to check the size of the list and `get()`
    to retrieve an element at a given index. There is no need to cast the object to
    string as Java already knows we are dealing with a list of strings.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`size()`方法来检查列表的大小，并使用`get()`来检索给定索引处的元素。无需将对象转换为字符串，因为Java已经知道我们正在处理一个字符串列表。
- en: 'Similarly, we can use a `for-each` loop, which is more concise but achieves
    the same goal:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用更简洁的`for-each`循环，但实现相同的目标：
- en: '[PRE62]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The output is as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.19: Output of the Cities class using for-each loop](img/C09581_Figure_06_18.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图6.19：使用for-each循环输出Cities类的输出](img/C09581_Figure_06_18.jpg)'
- en: 'Figure 6.19: Output of the Cities class using a for-each loop'
  id: totrans-287
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.19：使用for-each循环输出Cities类的输出
- en: 'Activity 23: Working with ArrayList'
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动23：使用ArrayList
- en: 'We have several students we wish to keep track in our program. However, we
    are not sure of the exact number currently but expect the number to change as
    more and more students use our program. We also wish to also be able to loop over
    our students and print their names. We will create an ArrayList of objects and
    use an iterator to loop over the ArrayList:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几个学生希望在我们的程序中跟踪。但是，我们目前不确定确切的数量，但预计随着越来越多的学生使用我们的程序，数量会发生变化。我们还希望能够循环遍历我们的学生并打印他们的名字。我们将创建一个对象的ArrayList，并使用迭代器来循环遍历ArrayList：
- en: 'These steps will help you complete the activity:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将帮助您完成该活动：
- en: Import `ArrayList` and `Iterator` from `java.util`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`java.util`导入`ArrayList`和`Iterator`。
- en: Create a new class called `StudentsArray`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`StudentsArray`的新类。
- en: In the `main` method, define an `ArrayList` of `Student` objects. Insert four
    student instances, instantiated with the different kinds of constructors we created
    earlier.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，定义一个`Student`对象的`ArrayList`。插入四个学生实例，用我们之前创建的不同类型的构造函数实例化。
- en: Create an iterator for your list and print the name of each student.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的列表创建一个迭代器，并打印每个学生的姓名。
- en: Finally, clear all the objects from the `ArrayList`.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从`ArrayList`中清除所有对象。
- en: 'The output will be as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.20: Output of the StudentsArray class'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.20：StudentsArray类的输出'
- en: '](img/C09581_Figure_06_20.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_20.jpg)'
- en: 'Figure 6.20: Output of the StudentsArray class'
  id: totrans-299
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.20：StudentsArray类的输出
- en: Note
  id: totrans-300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: ArrayList is an important class to know, as you will find yourself using it
    in your day-to-day life. The class has more capabilities not covered here, such
    as swapping two elements, sorting the items, and much more.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayList是一个重要的类，你会发现自己在日常生活中经常使用它。这个类有更多的功能，这里没有涵盖，比如交换两个元素，对项目进行排序等。
- en: Note
  id: totrans-302
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 338.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第338页找到。
- en: Strings
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: Java has the string data type, which is used to represent a sequence of characters.
    String is one of the fundamental data types in Java and you will encounter it
    in almost all programs.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: Java有字符串数据类型，用于表示一系列字符。字符串是Java中的基本数据类型之一，你几乎在所有程序中都会遇到它。
- en: A string is simply a sequence of characters. "Hello World", "London", and "Toyota"
    are all examples of strings in Java. Strings are objects in Java and not primitive
    types. They are immutable, that is, once they are created, they cannot be modified.
    Therefore, the methods we will consider in the following sections only create
    new string objects that contain the result of the operation but don't modify the
    original string object.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串只是一系列字符。"Hello World"，"London"和"Toyota"都是Java中字符串的例子。字符串在Java中是对象而不是原始类型。它们是不可变的，也就是说，一旦它们被创建，就不能被修改。因此，我们将在接下来的部分中考虑的方法只会创建包含操作结果的新字符串对象，而不会修改原始字符串对象。
- en: Creating a String
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个字符串
- en: 'We use double quotes to denote a string, compared to single quotes for a char:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用双引号表示字符串，而单引号表示字符：
- en: '[PRE63]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The output is as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.21: Output of the StringsDemo class'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.21：StringsDemo类的输出'
- en: '](img/C09581_Figure_06_21.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_21.jpg)'
- en: 'Figure 6.21: Output of the StringsDemo class'
  id: totrans-313
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.21：StringsDemo类的输出
- en: 'The `hello` object is now a string and is immutable. We can use delimiters
    in strings, such as `\n` to represent a newline, `\t` to present a tab, or `\r`
    to represent a return:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`hello`对象现在是一个字符串，是不可变的。我们可以在字符串中使用分隔符，比如`\n`表示换行，`\t`表示制表符，或者`\r`表示回车：'
- en: '[PRE64]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The output is as follows:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.22: Output using delimiters'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.22：使用分隔符的输出'
- en: '](img/C09581_Figure_06_22.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_22.jpg)'
- en: 'Figure 6.22: Output using delimiters'
  id: totrans-319
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.22：使用分隔符的输出
- en: We have a tab before `Hello` and then a newline before `World`, which prints
    `World` on the next line.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Hello`之前有一个制表符，然后在`World`之前有一个换行符，这会在下一行打印`World`。
- en: Concatenation
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'We can combine more than one string literal in a process commonly referred
    to as concatenation. We use the `+` symbol to concatenate two strings as follows:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将多个字符串文字组合在一起，这个过程通常被称为连接。我们使用`+`符号来连接两个字符串，如下所示：
- en: '[PRE65]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The output is as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE66]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Concatenation is often used when we want to substitute a value that will be
    calculated at runtime. The code will look as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要替换在运行时计算的值时，通常使用连接。代码如下所示：
- en: '[PRE67]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: In the first line, we get `userName` from a method that we haven't defined here.
    Then we print out a welcome message, substituting the `userName` with `userName`
    we got earlier.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们从一个我们在这里没有定义的方法中得到了`userName`。然后我们打印出一个欢迎消息，用`userName`替换了我们之前得到的`userName`。
- en: 'Concatenation is also important when we want to represent a string that spans
    more than one line:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要表示跨越多行的字符串时，连接也很重要：
- en: '[PRE68]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Here is the output:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 6.23: Concatenated string'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.23：连接的字符串'
- en: '](img/C09581_Figure_06_23.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_23.jpg)'
- en: 'Figure 6.23: Concatenated string'
  id: totrans-334
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.23：连接的字符串
- en: 'In addition to the `+` symbol, Java also provides the `concat()` method for
    concatenating two string literals:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`+`符号，Java还提供了`concat()`方法来连接两个字符串文字：
- en: '[PRE69]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Here is the output:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 6.24: Concatenated string using concat()'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.24：使用concat()连接的字符串'
- en: '](img/C09581_Figure_06_24.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_24.jpg)'
- en: 'Figure 6.24: Concatenated string using concat()'
  id: totrans-340
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.24：使用concat()连接的字符串
- en: String Length and Characters
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串长度和字符
- en: 'String provides the **length()** method to get the number of characters in
    a string. The number of characters is the count of all the valid java characters,
    including newlines, spaces, and tabs:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串提供了**length()**方法来获取字符串中的字符数。字符数是所有有效的java字符的计数，包括换行符、空格和制表符：
- en: '[PRE70]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Here is the output:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE71]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'To access a character at a given index, use the `charAt(i)`. This method takes
    the index of the character you want and returns a char of it:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问给定索引处的字符，请使用`charAt(i)`。这个方法接受你想要的字符的索引并返回一个char：
- en: '[PRE72]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Here is the output:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE73]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Calling `charAt(i)` with an index greater than the number of characters in
    the string or a negative number will cause your program to crash with the `StringIndexOutOfBoundsException`
    exception:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 使用大于字符串中字符数或负数的索引调用`charAt(i)`将导致您的程序崩溃，并出现`StringIndexOutOfBoundsException`异常：
- en: '[PRE74]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '![Figure 6.25: StringIndexOutOfBoundsException message'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.25：StringIndexOutOfBoundsException message'
- en: '](img/C09581_Figure_06_25.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_25.jpg)'
- en: 'Figure 6.25: `StringIndexOutOfBoundsException message`'
  id: totrans-354
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.25：`StringIndexOutOfBoundsException message`
- en: 'We can also convert a string to an array of chars by using the `getChars()`
    method. This method returns an array of chars that we can use. We can convert
    the whole string or part of the string:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`getChars()`方法将字符串转换为字符数组。此方法返回一个我们可以使用的字符数组。我们可以转换整个字符串或字符串的一部分：
- en: '[PRE75]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The output is as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.26: Characters array'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.26：字符数组'
- en: '](img/C09581_Figure_06_26.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_26.jpg)'
- en: 'Figure 6.26: Characters array'
  id: totrans-360
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.26：字符数组
- en: 'Activity 24: Input a String and Output Its Length and as an Array'
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动24：输入一个字符串并输出其长度和作为数组
- en: In order to check that names being inputted into a system aren't too long, we
    can use some of the features mentioned previously to count the length of a name.
    In this activity, you will write a program that will input a name and then export
    the length of the name and the first initial.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查输入到系统中的名称是否过长，我们可以使用之前提到的一些功能来计算名称的长度。在这个活动中，您将编写一个程序，将输入一个名称，然后导出名称的长度和第一个字母。
- en: 'The steps are as follows:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Import the `java.util.Scanner` package.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包。
- en: Create a public class called `nameTell` and a `main` method.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`nameTell`的公共类和一个`main`方法。
- en: Use the `Scanner` and `nextLine` to input a string at the prompt "`Enter your
    name:`".
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Scanner`和`nextLine`在提示"`输入您的姓名：`"处输入一个字符串。
- en: Count the length of the string and find the first character.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算字符串的长度并找到第一个字符。
- en: 'Print the output as follows:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印输出如下：
- en: '[PRE76]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The output will be as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 6.27: Output of the NameTell class'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.27：NameTell类的输出'
- en: '](img/C09581_Figure_06_27.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_27.jpg)'
- en: 'Figure 6.27: Output of the NameTell class'
  id: totrans-373
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.27：NameTell类的输出
- en: Note
  id: totrans-374
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 340.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第340页找到。
- en: 'Activity 25: Calculator Reads from Input'
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动25：计算器从输入中读取
- en: With all the calculator logic encapsulated we will write a command line calculator
    where you give the operator, the two operands and it will show you the result.
    A command line application like that starts with a while loop that never ends.
    Then reads the input from the user and makes decisions based on that.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有计算器逻辑封装起来，我们将编写一个命令行计算器，您可以在其中给出运算符、两个操作数，它将显示结果。这样的命令行应用程序以一个永不结束的while循环开始。然后从用户那里读取输入，并根据输入做出决定。
- en: 'For this activity you''ll write an application that has only two choices: exit
    or execute an operation. If the user types `Q` (or `q`), the application will
    exit the loop and finish. Anything else will be considered an operation. You''ll
    use the `Operators.findOperator` method to find and operator, then request to
    more inputs from the user. Each will be converted to a double (using `Double.parse`
    or `Scanner.nextDouble`). Operate on them using the Operator found and print the
    result to the console.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个活动，你将编写一个应用程序，只有两个选择：退出或执行操作。如果用户输入`Q`（或`q`），应用程序将退出循环并结束。其他任何内容都将被视为操作。您将使用`Operators.findOperator`方法来查找运算符，然后从用户那里请求更多输入。每个输入都将被转换为双精度（使用`Double.parse`或`Scanner.nextDouble`）。使用找到的运算符对它们进行操作，并将结果打印到控制台上。
- en: Because of the infinite loop, the application will start over, asking for another
    user action.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无限循环，应用程序将重新开始，要求另一个用户操作。
- en: 'To complete this activity you''ll have to:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个活动，您需要：
- en: Create a new class called `CommandLineCalculator` with a `main` method in it.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`CommandLineCalculator`的新类，其中包含一个`main`方法。
- en: Use an infinite loop to keep the application running until the user asks to
    exit.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无限循环使应用程序保持运行，直到用户要求退出。
- en: Collect the user input to decide which action to execute. If the action is `Q`
    or `q`, exit the loop.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集用户输入以决定要执行的操作。如果操作是`Q`或`q`，退出循环。
- en: If the action is anything else, find an operator and request two other inputs
    that will be the operands covering them to double.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果操作是其他任何内容，请找到一个运算符，并请求另外两个输入，它们将是操作数，将它们转换为双精度。
- en: Call the `operate` method on the Operator found and print the result to the
    console.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在找到的运算符上调用`operate`方法，并将结果打印到控制台上。
- en: Note
  id: totrans-386
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 341.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第341页找到。
- en: Conversion
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换
- en: Sometimes we might wish to convert a given type to a string so we can print
    it out, or we might want to convert a string to a given type. An example is when
    we wish to convert the string "`100`" to the integer `100`, or convert the integer
    `100` to string "`100`".
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可能希望将给定类型转换为字符串，以便我们可以打印它出来，或者我们可能希望将字符串转换为给定类型。例如，当我们希望将字符串"`100`"转换为整数`100`，或者将整数`100`转换为字符串"`100`"时。
- en: Concatenating a primitive data type to a string using the `+` operator will
    return a string representation of that item.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`+`运算符将原始数据类型连接到字符串将返回该项的字符串表示。
- en: 'For example, this is how to convert between an integer and a string:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是如何在整数和字符串之间转换的：
- en: '[PRE77]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The output is as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE78]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Here we used the `parseInt()` method to get the integer value of the string,
    and then used the `toString()` method to convert the integer back to a string.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用`parseInt()`方法获取字符串的整数值，然后使用`toString()`方法将整数转换回字符串。
- en: 'To convert an integer to a string, we concatenate it with an empty String "":'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 要将整数转换为字符串，我们将其与空字符串""连接：
- en: '[PRE79]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The output is as follows:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE80]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Note
  id: totrans-400
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Every object in Java has a string representation. Java provides the `toString()`
    method in the `Object` superclass, which we can override in our classes to provide
    a string representation of our classes. String representations are important when
    we want to print our class in string format.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: Java中的每个对象都有一个字符串表示。Java提供了`Object`超类中的`toString()`方法，我们可以在我们的类中重写它，以提供我们类的字符串表示。当我们想以字符串格式打印我们的类时，字符串表示很重要。
- en: Comparing Strings and Parts of Strings
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较字符串和字符串的部分
- en: The `String` class supports a number of methods for comparing strings and portions
    of strings.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`类支持许多用于比较字符串和字符串部分的方法。'
- en: 'Comparing two strings for equality:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串是否相等：
- en: '[PRE81]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The output is as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE82]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Return `true` if this string ends with or begins with a given substring:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个字符串以给定的子字符串结尾或开始，则返回`true`：
- en: '[PRE83]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The output is as follows:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE84]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: StringBuilder
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: StringBuilder
- en: We have stated that strings are immutable, that is, once they are declared they
    cannot be modified. However, sometimes we wish to modify a string. In such cases,
    we use the `StringBuilder` class. `StringBuilder` is just like a normal string
    except it is modifiable. `StringBuilder` also provides extra methods, such as
    `capacity()`, which returns the capacity allocated for it, and `reverse()`, which
    reverses the characters in it. StringBuilder also supports the same methods in
    the `String` class, such as `length()` and `toString()`.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经说明了字符串是不可变的，也就是说，一旦它们被声明，就不能被修改。然而，有时我们希望修改一个字符串。在这种情况下，我们使用`StringBuilder`类。`StringBuilder`就像普通字符串一样，只是它是可修改的。`StringBuilder`还提供了额外的方法，比如`capacity()`，它返回为其分配的容量，以及`reverse()`，它颠倒其中的字符。`StringBuilder`还支持`String`类中的相同方法，比如`length()`和`toString()`。
- en: 'Exercise 21: Working with StringBuilder'
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习21：使用StringBuilder
- en: 'This exercise will append three strings to create one, then print out its length,
    capacity, and reverse:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习将追加三个字符串以创建一个字符串，然后打印出它的长度、容量和反转：
- en: 'Create a public class called `StringBuilderExample`, then create a `main` method:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`StringBuilderExample`的公共类，然后创建一个`main`方法：
- en: '[PRE85]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Create a new `StringBuilder()` object called `stringbuilder`:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`StringBuilder()`对象，命名为`stringbuilder`：
- en: '[PRE86]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Append three phrases:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 追加三个短语：
- en: '[PRE87]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Print out the string using the `\n` as a line break:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`\n`作为换行打印出字符串：
- en: '[PRE88]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Find the length of the string and print it:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到字符串的长度并打印出来：
- en: '[PRE89]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Find the capacity of the string and print it:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到字符串的容量并打印出来：
- en: '[PRE90]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Reverse the string and print it out using the line break:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 颠倒字符串并使用换行打印出来：
- en: '[PRE91]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Here is the output:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Figure 6.28: Output of StringBuilder class'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.28：StringBuilder类的输出'
- en: '](img/C09581_Figure_06_28.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_28.jpg)'
- en: 'Figure 6.28: Output of StringBuilder class'
  id: totrans-433
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.28：StringBuilder类的输出
- en: In this exercise, we created a new instance of `StringBuilder` with the default
    capacity of 16\. We then inserted a few strings and then printed out the entire
    string. We also got the number of characters in the builder by using `length()`.
    We then got the capacity of `StringBuilder`. The capacity is the number of characters
    allocated for `StringBuilder`. It is usually higher than or equal to the length
    of the builder. We finally reversed all the characters in the builder and then
    print it out. In the last print out, we didn't use `stringBuilder.toString()`
    because Java implicitly does that for us.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用默认容量为16创建了一个`StringBuilder`的新实例。然后我们插入了一些字符串，然后打印出整个字符串。我们还通过`length()`获取了构建器中的字符数。然后我们得到了`StringBuilder`的容量。容量是为`StringBuilder`分配的字符数。它通常高于或等于构建器的长度。最后，我们颠倒了构建器中的所有字符，然后打印出来。在最后的打印输出中，我们没有使用`stringBuilder.toString()`，因为Java会隐式地为我们执行这个操作。
- en: 'Activity 26: Removing Duplicate Characters from a String'
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动26：从字符串中删除重复字符
- en: In order to create secure passkeys, we have decided that we need to create lines
    of strings that do not contain duplicate characters. In this activity, you will
    be creating a program that takes in a string, removes any duplicate characters,
    and then prints out the result.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建安全的密码，我们决定需要创建不包含重复字符的字符串行。在这个活动中，您将创建一个程序，它接受一个字符串，删除任何重复的字符，然后打印出结果。
- en: One way of doing this is to loop through all the characters of the string and
    for each character, we loop through the string again, checking if the character
    already exists. If we find a duplicate, we immediately remove it. This algorithm
    is a brute-force approach and not the best when it comes to running time. In fact,
    its running time is exponential.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是遍历字符串的所有字符，对于每个字符，再次遍历字符串，检查字符是否已经存在。如果找到重复的字符，立即将其删除。这种算法是一种蛮力方法，不是在运行时间方面最好的方法。事实上，它的运行时间是指数级的。
- en: 'These steps will help you complete the activity:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将帮助您完成这个活动：
- en: Create a new class named `Unique` and inside it create a `main` method. Leave
    it empty for now.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Unique`的新类，并在其中创建一个`main`方法。现在先留空。
- en: Create a new method `removeDups` called that takes and returns a string. This
    is where our algorithm will go. This method should be `public` and `static`.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`removeDups`的新方法，它接受并返回一个字符串。这就是我们的算法所在的地方。这个方法应该是`public`和`static`的。
- en: Inside the method, check whether the string is null, empty, or has a length
    of 1\. If any of these cases are true, then just return the original string since
    there checking is not needed.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法内部，检查字符串是否为null，空或长度为1。如果这些情况中有任何一个为真，则只需返回原始字符串，因为不需要进行检查。
- en: Create a string called `result` that is empty. This will be unique string to
    be returned.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`result`的空字符串。这将是要返回的唯一字符串。
- en: Create `for` loop from 0 to the length of the string passed into the method.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`for`循环，从0到传入方法的字符串的长度。
- en: Inside the `for` loop, get the character at the current index of the string.
    Name the variable `c`.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`for`循环内，获取字符串当前索引处的字符。将变量命名为`c`。
- en: Also create a boolean called `isDuplicate` and initialize it to `false`. When
    we encounter a duplicate, we will change it to `true`.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要创建一个名为`isDuplicate`的布尔变量，并将其初始化为`false`。当我们遇到重复时，我们将把它改为`true`。
- en: Create another nested `for` loop from 0 to the `length()` of result.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个嵌套的`for`循环，从0到结果的`length()`。
- en: Inside the `for` loop, also get the character at the current index of result.
    Name it `d`.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`for`循环内，还要获取结果当前索引处的字符。将其命名为`d`。
- en: Compare `c` and `d`. If they are equal, then set `isDuplicate` to true and `break`.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较`c`和`d`。如果它们相等，则将`isDuplicate`设置为true并`break`。
- en: Close the inner `for` loop and go inside the first `for` loop.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭内部的`for`循环并进入第一个`for`循环。
- en: Check if `isDuplicate` is `false`. If it is, then append `c` to result.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`isDuplicate`是否为`false`。如果是，则将`c`追加到结果中。
- en: Go outside the first `for` loop and return the result. That concludes our algorithm.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出第一个`for`循环并返回结果。这就完成了我们的算法。
- en: 'Go back to our empty `main` method. Create a few test strings of the following:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到我们空的`main`方法。创建以下几个测试字符串：
- en: '[PRE92]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Pass the strings to our method and print out the result returned from the method.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字符串传递给我们的方法，并打印出方法返回的结果。
- en: Check the result. Duplicate characters should be removed in the returned strings.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果。返回的字符串中应该删除重复的字符。
- en: 'The output should look like this:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是这样的：
- en: '![Figure 6.29: Expected output of Unique class'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.29：Unique类的预期输出'
- en: '](img/C09581_Figure_06_29.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C09581_Figure_06_29.jpg)'
- en: 'Figure 6.29: Expected output of Unique class'
  id: totrans-459
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.29：Unique类的预期输出
- en: Note
  id: totrans-460
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 342.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在第342页找到。
- en: Summary
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This lesson brings us to the end of our discussion on the core principles of
    object-oriented programming. In this lesson, we have looked at data types, algorithms,
    and strings.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 这节课将我们带到面向对象编程核心原则讨论的尽头。在这节课中，我们已经看过了数据类型、算法和字符串。
- en: We've seen how an array is an ordered collection of items of the same type.
    Arrays are declared with square brackets, `[ ]`, and their size cannot be modified.
    Java provides the `Arrays` class from the collections framework that has extra
    methods we can use on arrays.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了数组是相同类型项目的有序集合。数组用方括号`[ ]`声明，它们的大小不能被修改。Java提供了集合框架中的`Arrays`类，它有额外的方法可以用在数组上。
- en: We also saw the concept of `StringBuilder` class, which is basically a modifiable
    string. `stringbuilder` has `length` and `capacity` functions.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了`StringBuilder`类的概念，它基本上是一个可修改的字符串。`stringbuilder`有`length`和`capacity`函数。
