["```cs\nif (condition1)\n\u00a0\u00a0\u00a0\u00a0statement1;\nelse if(condition2)\n\u00a0\u00a0\u00a0\u00a0statement2;\nelse\n\u00a0\u00a0\u00a0\u00a0statement3;\n```", "```cs\nif (condition)\n{\n\u00a0\u00a0statement 1;\n\u00a0\u00a0statement 2;\n}\nelse\n{\n\u00a0\u00a0statement 3;\n\u00a0\u00a0statement 4;\n}\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Enter a positive integer\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var line = Console.ReadLine(); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int.TryParse(line, out int number);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (number % 2 == 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Even number\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Odd number\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nif (condition1)\n{\n\u00a0\u00a0if(condition2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement 1;\n\u00a0\u00a0if(condition3)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement 2;\n\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement 3;\n}\nelse\n{\n\u00a0\u00a0if(condition4)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement 4;\n\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement 5;\n}\n```", "```cs\nif(condition1)\n\u00a0\u00a0\u00a0\u00a0if(condition2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement1;\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement2;\n```", "```cs\nif(condition1)\n{\n\u00a0\u00a0\u00a0\u00a0if(condition2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement1;\n}\nelse\n{\n\u00a0\u00a0\u00a0\u00a0statement2;\n}\n```", "```cs\nswitch (expression)\n{\n\u00a0\u00a0case value1:\n\u00a0\u00a0\u00a0\u00a0statement 1;\n\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0case value2:\n\u00a0\u00a0\u00a0\u00a0statement 2;\n\u00a0\u00a0\u00a0\u00a0statement 3;\n\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0statement 4;\n\u00a0\u00a0\u00a0\u00a0break;\n}\n```", "```cs\nConsole.WriteLine(\"Enter number (1-10)\");\nvar line = Console.ReadLine();\nint.TryParse(line, out int number);\nswitch(number)\n{\n\u00a0\u00a0\u00a0case 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Smallest number\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0case 2: case 3: case 5: case 7:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Prime number\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0case 4: case 6: case 8:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Even number\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0case 9:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Odd number\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Not in the range\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n}\n```", "```cs\nfor(initializer; condition; iterator)\n{\n\u00a0\u00a0\u00a0\u00a0statement1;\n\u00a0\u00a0\u00a0\u00a0statement2;\n}\n```", "```cs\nfor(;;)\n{\n\u00a0\u00a0\u00a0\u00a0/* infinite loop, unless a break, goto, return, or throw\n\u00a0\u00a0\u00a0\u00a0executes */\n}\n```", "```cs\nfor (int i = 0; i <= 10; i++)\n{\n\u00a0\u00a0\u00a0\u00a0if (i % 2 == 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{i} is an even number\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{i} is an odd number\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nfor (int i = 1; i < 5; i++)\n{\n\u00a0\u00a0\u00a0for (int j = 1; j < 3; j++)\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"i = {i},j = {j}\");\n\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar arr = new int[3, 2] { { 1, 2, }, { 3, 4 }, { 5, 6 } };\nfor (int r = 0; r <= arr.GetUpperBound(0); r++)\n{\n\u00a0\u00a0\u00a0\u00a0for (int c = 0; c <= arr.GetUpperBound(1); c++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write($\"{arr[r, c]} \");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine();\n}\n```", "```cs\nwhile (condition)\n{\n\u00a0\u00a0\u00a0\u00a0statement1;\n\u00a0\u00a0\u00a0\u00a0statement2;\n}\n```", "```cs\ninitializer;\nwhile(condition)\n{\n\u00a0\u00a0\u00a0\u00a0statement1;\n\u00a0\u00a0\u00a0\u00a0statement2;\n\u00a0\u00a0\u00a0\u00a0iterator;\n}\n```", "```cs\nint i = 0;\nwhile (i <= 10)\n{\n\u00a0\u00a0\u00a0\u00a0if (i % 2 == 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{i} is an even number\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{i} is an odd number\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0i++;\n}\n```", "```cs\ndo\n{\n\u00a0\u00a0\u00a0\u00a0statement1;\n\u00a0\u00a0\u00a0\u00a0statement2;\n} while (condition);\n```", "```cs\nint i = 0;\ndo\n{\n\u00a0\u00a0\u00a0\u00a0if (i % 2 == 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{i} is an even number\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{i} is an odd number\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0i++;\n}\nwhile (i <= 10);\n```", "```cs\nforeach(datatype iterator in collection)\n{\n\u00a0\u00a0statement1;\n\u00a0\u00a0statement2;\n}\n```", "```cs\nstring[] languages = { \"Java\", \"C#\", \"Python\", \"C++\", \"JavaScript\" };\nforeach (string lang in languages)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(lang);\n}\n```", "```cs\nvar enumerator = languages.GetEnumerator();\nwhile(enumerator.MoveNext())\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(enumerator.Current);\n}\n```", "```cs\nSpan<int> arr = stackalloc int[]{ 1, 1, 2, 3, 5, 8 };\nforeach(ref int n in arr)\n{\n\u00a0\u00a0\u00a0\u00a0n *= 2;\n}\nforeach(ref readonly var n in arr)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(n);\n}\n```", "```cs\nfor (int i = 0; i <= 10; i++)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(i);\n\u00a0\u00a0\u00a0\u00a0if (i == 5)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n}\n```", "```cs\nfor (int i = 0; i <= 10; i++)\n{\n\u00a0\u00a0\u00a0\u00a0if (i % 2 == 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(i);\n}\n```", "```cs\nstatic int Fibonacci(int n)\n{\n\u00a0\u00a0\u00a0\u00a0if (n > 1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Fibonacci(n - 1) + Fibonacci(n - 2);\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return n;\n}\n```", "```cs\nfor (int i = 0; i <= 10; i++)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(i);\n\u00a0\u00a0\u00a0\u00a0if (i == 5)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto printmessage;\n\u00a0\u00a0\u00a0\u00a0}\n}\nprintmessage:\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"The goto statement is executed\");\n```", "```cs\nIEnumerable<int> GetNumbers()\n{\n\u00a0\u00a0\u00a0\u00a0var list = new List<int>();\n\u00a0\u00a0\u00a0\u00a0for (int i = 1; i <= 100; ++i)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list.Add(i);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return list;\n}\n```", "```cs\nvar numbers = GetNumbers().Take(5);\nConsole.WriteLine(string.Join(\",\", numbers));\n```", "```cs\nIEnumerable<int> GetNumbers()\n{\n\u00a0\u00a0\u00a0for (int i = 1; i <= 100; ++i)\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield return i;\n\u00a0\u00a0\u00a0}\n}\n```", "```cs\nIEnumerable<int> GetNumbers()\n{\n\u00a0\u00a0\u00a0\u00a0for (int i = 1; i <= 100; ++i)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(1000);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Produced: {i}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield return i;\n\u00a0\u00a0\u00a0\u00a0}\n}\nforeach(var i in GetNumbers().Take(5))\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Consumed: {i}\");\n}\n```", "```cs\ntry\n{\n\u00a0\u00a0\u00a0\u00a0Statement1;\n\u00a0\u00a0\u00a0\u00a0Statement2;\n} \ncatch (type)\n{\n\u00a0\u00a0\u00a0\u00a0// code for error handling\n}\nfinally\n{\n\u00a0\u00a0\u00a0\u00a0// code to always run at the end\n}\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int a = 10;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int b = a / 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (Exception ex)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(ex);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvoid FunctionThatThrows(object o)\n{\n\u00a0\u00a0\u00a0\u00a0if (o is null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentNullException(nameof(o));\n\u00a0\u00a0\u00a0\u00a0if (!(o is string))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentException(\"A string is expected\");\n\u00a0\u00a0\u00a0\u00a0// do something\n}\ntry\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"executing\");\n\u00a0\u00a0\u00a0\u00a0FunctionThatThrows(42);\n}\ncatch (ArgumentNullException e)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Null argument: {e.Message}\");\n}\ncatch (ArgumentException e)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Wrong argument: {e.Message}\");\n}\ncatch(Exception e)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Error: {e.Message}\");\n}\nfinally\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"done\");\n}\n```"]