- en: Developing a Simple To-Do List App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发一个简单的待办事项列表应用程序
- en: In this chapter, we will build a simple to-do list app that allows a user to
    add, update, and delete tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个简单的待办事项列表应用程序，允许用户添加、更新和删除任务。
- en: 'In the process, we will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们将学到以下内容：
- en: How to build a user interface in Android Studio
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Android Studio中构建用户界面
- en: Working with ListViews
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ListView
- en: How to work with Dialogs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用对话框
- en: Creating the project
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'Let''s start by creating a new project in Android Studio, with the name TodoList.
    Select Add No Activity on the Add an Activity to Mobile screen:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在Android Studio中创建一个新项目开始，名称为TodoList。在“为移动添加活动”屏幕上选择“添加无活动”：
- en: '![](img/d7dc52e6-5c32-4406-b43f-95c3eae36b1b.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7dc52e6-5c32-4406-b43f-95c3eae36b1b.png)'
- en: 'When the project creation is complete, create a Kotlin Activity by selecting
    File | New | Kotlin Activity, as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目创建完成后，通过选择“文件”|“新建”|“Kotlin活动”来创建一个Kotlin活动，如下面的屏幕截图所示：
- en: '![](img/b7306b18-f3e9-443b-86bc-e41d9015966d.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7306b18-f3e9-443b-86bc-e41d9015966d.png)'
- en: 'This will start a New Android Activitywizard**. **On the Add an Activity to
    Mobile screen, select Basic Activity, as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个新的Android Activitywizard**。在“为移动添加活动”屏幕上，选择“基本活动”，如下面的屏幕截图所示：
- en: '![](img/e9ea6e05-6b8a-4ec7-95bd-e4526da557ed.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9ea6e05-6b8a-4ec7-95bd-e4526da557ed.png)'
- en: 'Now, check Launcher Activity on the Customize the Activity screen, and click
    the Finish button:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在“自定义活动”屏幕上检查启动器活动，并单击“完成”按钮：
- en: '![](img/ac8da278-3877-4064-b59b-ec2f5d5681d1.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac8da278-3877-4064-b59b-ec2f5d5681d1.png)'
- en: Building your UI
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您的UI
- en: 'In Android, the code for your user interface is written in XML. You can build your
    UI by doing either of the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，用户界面的代码是用XML编写的。您可以通过以下任一方式构建您的UI：
- en: Using the Android Studio Layout Editor
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Android Studio布局编辑器
- en: Writing the XML code by hand
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动编写XML代码
- en: Let's go ahead and start designing our TodoList app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设计我们的TodoList应用程序。
- en: Using the Android Studio layout editor
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android Studio布局编辑器
- en: Android Studio provides a layout editor, which gives you the ability to build
    your layouts by dragging widgets into the visual editor. This will auto-generate
    the XML code for your UI.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供了一个布局编辑器，让您可以通过将小部件拖放到可视化编辑器中来构建布局。这将自动生成UI的XML代码。
- en: Open the `content_main.xml` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`content_main.xml`文件。
- en: 'Make sure the Design tab at the bottom of the screen is selected, as shown
    in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确保屏幕底部选择了“设计”选项卡，如下面的屏幕截图所示：
- en: '![](img/9a012a33-2153-4d95-8821-82b5caaeedc1.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a012a33-2153-4d95-8821-82b5caaeedc1.png)'
- en: To add a component to your layout, you just drag the item from the Palette on
    the left side of the screen. To find a component, either scroll through the items
    on the Palette, or click on the Palette search icon and search for the item you
    need.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要向布局添加组件，只需从屏幕左侧的Palette中拖动项目。要查找组件，可以滚动浏览Palette上的项目，或者单击Palette搜索图标并搜索所需的项目。
- en: If the Palette is not showing on your screen, select View | Tool Windows | Palette
    to display it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Palette没有显示在您的屏幕上，请选择“查看”|“工具窗口”|“Palette”以显示它。
- en: 'Go ahead and add a `ListView` to your view. When a view is selected, its attributes
    are displayed in the XML Attributes editor on the right side of the screen. The
    Attributes editor allows you to view and edit the attributes of the selected component.
    Go ahead and make the following changes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 继续在您的视图中添加`ListView`。当选择一个视图时，它的属性会显示在屏幕右侧的XML属性编辑器中。属性编辑器允许您查看和编辑所选组件的属性。继续进行以下更改：
- en: Set the ID as list_view
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将ID设置为list_view
- en: Change both the layout_width and layout_height attributes to match_parent
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将layout_width和layout_height属性都更改为match_parent
- en: '![](img/3f3148dd-16b3-4320-aad1-813bcbb587e2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f3148dd-16b3-4320-aad1-813bcbb587e2.png)'
- en: If the Attributes editor is not showing; select View | Tool Windows | Attributes to
    display it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果属性编辑器没有显示，请选择“查看”|“工具窗口”|“属性”以显示它。
- en: 'Now, select Text at the bottom of the editor window to view the generated XML
    code. You''ll notice that the XML code now has a `ListView` placed within the
    `ConstraintLayout`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在编辑器窗口底部选择“文本”以查看生成的XML代码。您会注意到XML代码现在在`ConstraintLayout`中放置了一个`ListView`：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A layout always has a root element. In the preceding code, `ConstraintLayout`
    is the root element.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 布局始终有一个根元素。在前面的代码中，`ConstraintLayout`是根元素。
- en: Instead of using the layout editor, you could have written the previous code
    yourself. The choice between using the layout editor or writing the XML code is
    up to you. You can use the option that you're most comfortable with. We'll continue
    to make additions to the UI as we go along.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择使用布局编辑器，也可以自己编写XML代码。使用布局编辑器还是编写XML代码的选择取决于您。您可以使用您最熟悉的选项。我们将继续随着进展对UI进行添加。
- en: 'Now, build and run your code. as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建并运行您的代码。如下面的屏幕截图所示：
- en: '![](img/5c177ec2-8f16-410f-8d0b-f04425ef94d6.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c177ec2-8f16-410f-8d0b-f04425ef94d6.png)'
- en: As you can see, the app currently doesn't have much to it. Let's go ahead and
    add a little more flesh to it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该应用目前并不完整。让我们继续添加更多内容。
- en: Since we'll use the `FloatingActionButton` as the button the user uses to add
    a new item to their to-do list, we need to change its icon to one that makes its
    purpose quite clear.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用`FloatingActionButton`作为用户用来向待办事项列表添加新项目的按钮，我们需要将其图标更改为一个清晰表明其目的的图标。
- en: 'Open the `activity_main.xml` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件：
- en: One of the attributes of the `android.support.design.widget.FloatingActionButton`
    is `app:srcCompat`. This is used to specify the icon for the **FloatingActionButton**.
    Change its value from `@android:drawable/ic_dialog_email` to `@android:drawable/ic_input_add`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.support.design.widget.FloatingActionButton`的一个属性是`app:srcCompat`。这用于指定**FloatingActionButton**的图标。将其值从`@android:drawable/ic_dialog_email`更改为`@android:drawable/ic_input_add`。'
- en: 'Build and run again. The **FloatingActionButton** at the bottom now looks like
    an Add icon, as shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建和运行。现在底部的**FloatingActionButton**看起来像一个添加图标，如下面的屏幕截图所示：
- en: '![](img/a51c3e2f-a232-4e4a-892e-2df78c06832a.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a51c3e2f-a232-4e4a-892e-2df78c06832a.png)'
- en: Adding functionality to the user interface
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户界面添加功能
- en: 'At the moment, when the user clicks on the Add button, a ticker shows at the
    bottom of the screen. This is because of the piece of code in the `onCreate()` method
    that defines and sets an `OnClickListener` to the `FloatingActionButton`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当用户单击“添加”按钮时，屏幕底部会显示一个滚动消息。这是因为`onCreate()`方法中的一段代码定义并设置了`FloatingActionButton`的`OnClickListener`：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is not ideal for our to-do list app. Let''s go ahead and create a new
    method in the `MainActivity` class that will handle the click event:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于我们的待办事项列表应用程序来说并不理想。让我们继续在`MainActivity`类中创建一个新方法来处理单击事件：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The method currently does nothing. We''ll add code to show the appropriate
    UI soon. Now, replace the code within the `setOnClickListener()` call with a call
    to the new method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法目前什么也不做。我们将很快添加代码来显示适当的UI。现在，用对新方法的调用替换`setOnClickListener()`调用中的代码：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding a new task
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新任务
- en: For adding a new task, we'll show the user an AlertDialog with an editable field.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新任务，我们将向用户显示一个带有可编辑字段的AlertDialog。
- en: 'Let''s start by building the UI for the dialog. Right-click the `res/layout`
    directory and select **New** | **Layout resource file**, as shown in the following
    screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为对话框构建UI开始。右键单击`res/layout`目录，然后选择**新建** | **布局资源文件**，如下面的屏幕截图所示：
- en: '![](img/01d394c9-1294-4b0c-bc42-6e7eabd9186c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01d394c9-1294-4b0c-bc42-6e7eabd9186c.png)'
- en: 'On the New Resource File window, change the Root element to `LinearLayout`
    and set the File name as `dialog_new_task`. Click OK to create the layout,  as
    shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在新资源文件窗口上，将根元素更改为`LinearLayout`，并将文件名设置为`dialog_new_task`。单击“确定”以创建布局，如下面的屏幕截图所示：
- en: '![](img/d6dd7588-d44b-4535-ad08-bf81dd560b12.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6dd7588-d44b-4535-ad08-bf81dd560b12.png)'
- en: 'Open the `dialog_new_task` layout and add an `EditText` view to the `LinearLayout`.
    The XML code in the layout should now look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`dialog_new_task`布局，并向`LinearLayout`添加一个`EditText`视图。布局中的XML代码现在应该如下所示：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The inputType attribute is used to specify what kind of data the field can
    take. By specifying this attribute, the user is shown an appropriate keyboard.
    For example, if the inputType is set to number, the numbers keyboard is displayed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputType`属性用于指定字段可以接受什么类型的数据。通过指定此属性，用户将显示适当的键盘。例如，如果`inputType`设置为数字，则显示数字键盘：'
- en: '![](img/a4a6bf8e-58dd-4b4c-9d09-cd8e9b8d97c6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4a6bf8e-58dd-4b4c-9d09-cd8e9b8d97c6.png)'
- en: 'Now, let''s go ahead and add a few string resources we''ll need for the next
    section. Open the `res/values/strings.xml` file and add the following lines of
    code to the `resources` tag:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续添加一些我们将在下一节中需要的字符串资源。打开`res/values/strings.xml`文件，并将以下代码添加到`resources`标记中：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `add_new_task_dialog_title` string will be used as the title of our dialog
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add_new_task_dialog_title`字符串将用作对话框的标题'
- en: The `save` string will be used as the text of a button on the dialog
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save`字符串将用作对话框上按钮的文本'
- en: The best way to use an `AlertDialog` is by encapsulating it in a `DialogFragment`.
    The `DialogFragment` takes away the burden of handling the dialog's life cycle
    events. It also makes it easy for you to reuse the dialog in other activities.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`AlertDialog`的最佳方法是将其封装在`DialogFragment`中。`DialogFragment`消除了处理对话框生命周期事件的负担。它还使您能够轻松地在其他活动中重用对话框。
- en: 'Create a new Kotlin class with the name `NewTaskDialogFragment`, and replace
    the class definition with the following lines of code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`NewTaskDialogFragment`的新Kotlin类，并用以下代码替换类定义：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s take a closer look at what this class does:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这个类做了什么：
- en: The class extends the `DialogFragment` class.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该类扩展了`DialogFragment`类。
- en: 'It declares an interface with the name `NewTaskDialogListener`, which declares
    two methods:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它声明了一个名为`NewTaskDialogListener`的接口，该接口声明了两种方法：
- en: '`onDialogPositiveClick(dialog: DialogFragment, task: String)`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDialogPositiveClick(dialog: DialogFragment, task: String)`'
- en: '`onDialogNegativeClick(dialog: DialogFragment)`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDialogNegativeClick(dialog: DialogFragment)`'
- en: It declares a variable of type `NewTaskDialogListener`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它声明了一个类型为`NewTaskDialogListener`的变量。
- en: 'It defines a method, `newInstance()`, in a companion object. By doing this,
    the method can be accessed without having to create an instance of the `NewTaskDialogFragment`
    class. The `newInstance()` method does the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在伴随对象中定义了一个`newInstance()`方法。通过这样做，可以在不必创建`NewTaskDialogFragment`类的实例的情况下访问该方法。`newInstance()`方法执行以下操作：
- en: It takes an `Int` parameter named `title`
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它接受一个名为`title`的`Int`参数
- en: It creates an instance of the `NewTaskDialogFragment` and passes the `title`
    as part of its arguments
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它创建了`NewTaskDialogFragment`的一个实例，并将`title`作为其参数的一部分传递
- en: It returns the new instance of the `NewTaskDialogFragment`
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回`NewTaskDialogFragment`的新实例
- en: 'It overrides the `onCreateDialog()` method. This method does the following:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它重写了`onCreateDialog()`方法。此方法执行以下操作：
- en: It attempts to retrieve the title argument passed
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它尝试检索传递的标题参数
- en: It instantiates an `AlertDialog` builder and assigns the retrieved title as
    the dialog's title
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化`AlertDialog`构建器，并将检索到的标题分配为对话框的标题
- en: It uses the `LayoutInflater` of the `DialogFragment` instance's parent activity
    to inflate the layout we created
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用`DialogFragment`实例的父活动的`LayoutInflater`来填充我们创建的布局
- en: Then, it sets the inflated view as the dialog's view
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，将充气的视图设置为对话框的视图
- en: 'Sets two buttons to the dialog: **Save** and **Cancel**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为对话框设置两个按钮：**保存**和**取消**
- en: When the **Save** button is clicked, the text in the `EditText` will be retrieved
    and passed to the `newTaskDialogListener` variable via the `onDialogPositiveClick()`
    method
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击“保存”按钮时，将检索`EditText`中的文本，并通过`onDialogPositiveClick()`方法将其传递给`newTaskDialogListener`变量
- en: In the `onAttach()` method, we attempt to assign the `Activity` object passed
    to the `newTaskDialogListener` variable created earlier. For this to work, the
    `Activity` object should implement the `NewTaskDialogListener` interface.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onAttach()`方法中，我们尝试将传递的`Activity`对象分配给前面创建的`newTaskDialogListener`变量。为使其工作，`Activity`对象应该实现`NewTaskDialogListener`接口。
- en: 'Now, open the `MainActivity` class. Change the class declaration to include
    implementation of the `NewTaskDialogListener`. Your class declaration should now
    look like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`MainActivity`类。更改类声明以包括`NewTaskDialogListener`的实现。您的类声明现在应该如下所示：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And, add implementations of the methods declared in the `NewTaskDialogListener`
    by adding the following methods to the `MainActivity` class:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 并通过向`MainActivity`类添加以下方法来添加`NewTaskDialogListener`中声明的方法的实现：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `showNewTaskUI()` method, add the following lines of code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`showNewTaskUI()`方法中，添加以下代码行：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding lines of code, the `newInstance()` method in `NewTaskDialogFragment`
    is called to generate an instance of the `NewTaskDialogFragment` class. The `show()`
    method of the `DialogFragment` is then called to display the dialog.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码行中，调用`NewTaskDialogFragment`中的`newInstance()`方法以生成`NewTaskDialogFragment`类的实例。然后调用`DialogFragment`的`show()`方法来显示对话框。
- en: 'Build and run. Now, when you click the Add button, you should see a dialog
    on your screen,  as shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。现在，当您单击添加按钮时，您应该在屏幕上看到一个对话框，如下截图所示：
- en: '![](img/31c08b76-8868-4b45-bd13-093c4a3cf4f5.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31c08b76-8868-4b45-bd13-093c4a3cf4f5.png)'
- en: 'As you may have noticed, nothing happens when you click the SAVE button. In
    the  `onDialogPositiveClick()` method, add the line of code shown here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，单击保存按钮时什么都没有发生。在`onDialogPositiveClick()`方法中，添加此处显示的代码行：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we may remember, this line of code displays a ticker at the bottom of the
    screen.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可能记得的那样，这行代码在屏幕底部显示一个滚动消息。
- en: Build and run. Now, when you click the SAVE button on the **New Task** dialog,
    a ticker shows at the bottom of the screen.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。现在，当您在**New Task**对话框上单击SAVE按钮时，屏幕底部会显示一个滚动消息。
- en: '![](img/9b29319d-b505-4e02-80a7-263b354db26a.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b29319d-b505-4e02-80a7-263b354db26a.png)'
- en: 'We''re currently not storing the task the user enters. Let''s create a collection
    variable to store any task the user adds. In the `MainActivity` class, add a new
    variable of type `ArrayList<String>`, and instantiate it with an empty `ArrayList`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前没有存储用户输入的任务。让我们创建一个集合变量来存储用户添加的任何任务。在`MainActivity`类中，添加一个类型为`ArrayList<String>`的新变量，并用空的`ArrayList`进行实例化：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `onDialogPositiveClick()` method, place the following lines of code
    at the beginning of the method definition:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onDialogPositiveClick()`方法中，在方法定义的开头放置以下代码行：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will add the task variable passed to the `todoListItems` data, and call
    `notifyDataSetChanged()` on the `listAdapter` to update the `ListView`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向`todoListItems`数据添加传递给`listAdapter`的任务变量，并调用`notifyDataSetChanged()`来更新`ListView`。
- en: Saving the data is great, but our `ListView` is still empty. Let's go ahead
    and rectify that.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 保存数据很好，但是我们的`ListView`仍然是空的。让我们继续纠正这一点。
- en: Displaying data in the ListView
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在ListView中显示数据
- en: To make changes to a UI element in the XML layout, you need to use the `findViewById()` method
    to retrieve the instance of the element in the corresponding `Activity` of your
    layout. This is usually done in the `onCreate()` method of the `Activity`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要对XML布局中的UI元素进行更改，您需要使用`findViewById()`方法来检索布局的`Activity`中元素的实例。这通常在`Activity`的`onCreate()`方法中完成。
- en: 'Open `MainActivity.kt`, and declare a new `ListView` instance variable at the
    top of the class:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity.kt`，并在类顶部声明一个新的`ListView`实例变量：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, instantiate the `ListView` variable with its corresponding element in
    the layout. Do this by adding the following line of code at the end of the `onCreate()` method:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用布局中相应元素的`ListView`变量进行实例化。通过在`onCreate()`方法的末尾添加以下一行代码来完成此操作：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To display data in a `ListView`, you need to create an `Adapter`, and give it
    the data to display and information on how to display that data. Depending on
    how you want the data displayed in your `ListView`, you can either use one of
    the existing Android Adapters, or create your own. For now, we'll use one of the
    simplest Android Adapters, `ArrayAdapter`. The `ArrayAdapter` takes an array or
    list of items, a layout ID, and displays your data based on the layout passed
    to it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ListView`中显示数据，您需要创建一个`Adapter`，并向其提供要显示的数据以及如何显示该数据的信息。根据您希望在`ListView`中显示数据的方式，您可以使用现有的Android
    Adapters之一，也可以创建自己的Adapter。现在，我们将使用最简单的Android Adapter之一，`ArrayAdapter`。`ArrayAdapter`接受一个数组或项目列表，一个布局ID，并根据传递给它的布局显示您的数据。
- en: 'In the `MainActivity` class, add a new variable, of type `ArrayAdapter`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中，添加一个新的变量，类型为`ArrayAdapter`：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the method shown here to the class:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 向类中添加此处显示的方法：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding lines of code, we create a simple `ArrayAdapter` and assign
    it to the `listView` as its `Adapter`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码行中，我们创建了一个简单的`ArrayAdapter`并将其分配给`listView`作为其`Adapter`。
- en: 'Now, add a call to the previous method in the `onCreate()` method:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`onCreate()`方法中添加对前一个方法的调用：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Build and run. Now, when you click the Add button, you''ll see your entry show
    up on the ListView, as shown in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。现在，当您单击添加按钮时，您将看到您的条目显示在ListView上，如下截图所示：
- en: '![](img/b73860ce-65bb-40f3-abc2-89165565c842.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b73860ce-65bb-40f3-abc2-89165565c842.png)'
- en: Updating/deleting a Todo item
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新/删除待办事项
- en: What if the user made a mistake entering the new task? We need to provide a
    way for them to be able to edit a list item, or completely delete that item. We
    can provide menu items that are only displayed when the user clicks an item. The
    menu items will give the user the opportunity to either edit or delete the item
    in question.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在输入新任务时出现错误怎么办？我们需要为他们提供一种能够编辑列表项或完全删除该项的方法。我们可以提供菜单项，仅在用户单击项目时显示。菜单项将为用户提供编辑或删除所选项的机会。
- en: If the user chooses the edit option, we will display our task dialog with the
    task field prefilled for the user to make the required changes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户选择编辑选项，我们将显示我们的任务对话框，并为用户填写任务字段以进行所需的更改。
- en: 'Let''s start by adding the following set of strings to the `strings.xml` resource
    file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先向`strings.xml`资源文件添加以下一组字符串：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The next thing we need to do is to add a menu to our UI.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在UI中添加一个菜单。
- en: Adding a menu
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加菜单
- en: 'Let''s start by creating the menu resource file. Right-click the `res` directory,
    and select New | Android resource file. Enter `to_do_list_menu` as the File name.
    Change the Resource type to Menu, and click OK, as shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建菜单资源文件。右键单击`res`目录，然后选择New | Android resource file。输入`to_do_list_menu`作为文件名。将资源类型更改为菜单，然后单击确定，如下面的屏幕截图所示：
- en: '![](img/3cb43c69-1053-4cae-b5a2-6808d8d04b79.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cb43c69-1053-4cae-b5a2-6808d8d04b79.png)'
- en: 'Replace the code in the `to_do_list_menu,xml` file with the lines of code shown
    as following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换`to_do_list_menu,xml`文件中的代码行：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding lines of code, we create two menu items, the `edit` and `delete`
    items. We also set the visibility of each of the menu items to `false`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码行中，我们创建了两个菜单项，`edit`和`delete`项。我们还将每个菜单项的可见性设置为`false`。
- en: 'Next, open the `MainActivity` class and add the following two new variables
    at the top of the class:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`MainActivity`类，并在类顶部添加以下两个新变量：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `showMenuItems` variable will be used to track the visibility state of the
    menu items, while the `selectedItem` variable stores the position of the currently
    selected list item.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`showMenuItems`变量将用于跟踪菜单项的可见状态，而`selectedItem`变量存储当前选定列表项的位置。'
- en: 'Then, override the `onCreateOptionsMenu()` method to enable the menu items
    if the `showMenuItems` variable is set to `true`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重写`onCreateOptionsMenu()`方法，如果`showMenuItems`变量设置为`true`，则启用菜单项：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, open the `MainActivity` class and add the method shown here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`MainActivity`类，并添加以下方法：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When this method is called, it assigns the parameter passed to it to the `selectedItem`
    variable and changes the value of `showMenuItems` to `true`. It then calls the
    `invalidateOptionsMenu()` method. The `invalidateOptionsMenu()` method informs
    the OS that changes have been made to the menu associated with the `Activity`.
    This causes the menu to be recreated.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用此方法时，它将分配传递给它的参数给`selectedItem`变量，并将`showMenuItems`的值更改为`true`。然后调用`invalidateOptionsMenu()`方法。`invalidateOptionsMenu()`方法通知操作系统已对`Activity`相关的菜单进行了更改。这将导致菜单被重新创建。
- en: 'Now, we need to implement an `ItemClickListener` for the `ListView`. In the `onCreate()` method,
    add the following lines of code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为`ListView`实现一个`ItemClickListener`。在`onCreate()`方法中，添加以下代码行：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In these lines of code, the `showUpdateTaskUI()` method is called when an item
    is clicked.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些代码行中，当单击项目时，将调用`showUpdateTaskUI()`方法。
- en: 'Build and run again. This time, when you click a list item, the menu items
    will appear, as shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建和运行。这次，当您单击列表项时，菜单项将显示出来，如下面的屏幕截图所示：
- en: '![](img/2cf76359-4b59-403e-b194-4f10618949b7.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cf76359-4b59-403e-b194-4f10618949b7.png)'
- en: Next, we need to update the `NewTaskDialogFragment` class to accept and process
    the selected task. Open the `NewTaskDialogFragment` class.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新`NewTaskDialogFragment`类以接受和处理所选任务。打开`NewTaskDialogFragment`类。
- en: 'Update the `newInstance()` method to take an extra parameter of type `String`,
    and pass that parameter as part of the `DialogFragment` arguments by using following
    code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`newInstance()`方法以接受`String`类型的额外参数，并通过以下代码将该参数作为`DialogFragment`参数的一部分传递：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Note:** The points of change are the ones labeled with the numbers.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**更改的地方标有数字。'
- en: 'Next, update the `onCreateDialog()` method to retrieve and display the text
    for the selected task, as shown in the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新`onCreateDialog()`方法以检索并显示所选任务的文本，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we need to implement functionality for when the user selects a menu item.
    This is done by overriding the `onOptionsItemSelected()` method:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现当用户选择菜单项时的功能。这是通过重写`onOptionsItemSelected()`方法来完成的：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding method, the ID of the selected menu item is checked against
    the IDs of the two menu items.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方法中，检查所选菜单项的ID与两个菜单项的ID是否匹配。
- en: 'If the selected menu item is the edit button:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所选菜单项是编辑按钮：
- en: A new instance of the `NewTaskDialogFragment` is generated and shown. In the
    call to generate the new instance, the selected task is retrieved and passed.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成并显示`NewTaskDialogFragment`的新实例。在生成新实例的调用中，检索并传递所选任务。
- en: 'If it is the `delete` button:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是`delete`按钮：
- en: The selected item is removed from the `todoListItems`
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所选项目从`todoListItems`中删除
- en: The `listAdapter` is notified of the data change
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知`listAdapter`数据已更改
- en: The `selectedItem` variable is reset to -1
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectedItem`变量被重置为-1'
- en: And, a ticker is shown notifying the user about the successful deletion
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且，将显示一个提示，通知用户删除成功删除
- en: As you may have noticed, in the call to the `show()` method takes a `String`
    as a second parameter. This parameter is the tag. The tag acts as a sort of ID
    used to differentiate between the different fragments managed by the `Activity`.
    We'll use the tag to decide which action to perform when the `onDialogPositiveClick()` method
    is called.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，在调用`show()`方法时，第二个参数是一个`String`。这个参数是标签。标签充当一种ID，用于区分`Activity`管理的不同片段。我们将使用标签来决定在调用`onDialogPositiveClick()`方法时执行哪些操作。
- en: 'Replace the `onDialogPositiveClick()` method with the method shown here:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下方法替换`onDialogPositiveClick()`方法：
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding lines of code, the following applies:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码行中，以下内容适用：
- en: 'If the dialog''s tag is `newtask`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果对话框的标签是`newtask`：
- en: The task variable is added to the `todoListItems` data and the `listAdapter` is
    notified to update the `ListView`
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务变量被添加到`todoListItems`数据中，并通知`listAdapter`更新`ListView`
- en: A ticker is also shown to inform the user that the task has successfully been
    added
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还会显示一个提示，通知用户任务已成功添加
- en: 'If the dialog''s tag is `updatetask`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果对话框的标签是`updatetask`：
- en: The selected item is replaced with the task variable in the `todoListItems` data
    set and the `listAdapter` is notified to update the `ListView`
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选定的项目用任务变量替换在`todoListItems`数据集中，并通知`listAdapter`更新`ListView`
- en: The `selectedItem` variable is reset to -1
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectedItem`变量被重置为-1'
- en: And, a ticker is also shown to inform the user that the task has been successfully
    changed
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，还会显示一个滚动消息通知用户任务已成功更改
- en: 'Build and run. Select a task and click the Edit menu item. This will pop up
    your Edit Task dialog with the selected task''s details already populated, as
    shown in the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。选择一个任务并点击编辑菜单项。这将弹出编辑任务对话框，并自动填充所选任务的详细信息，如下面的截图所示：
- en: '![](img/2ee0e7cf-f5d4-4785-ab26-c47f20307da4.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ee0e7cf-f5d4-4785-ab26-c47f20307da4.png)'
- en: 'Make changes to the task details and click on the SAVE button. This takes away
    the dialog, updates your `ListView` with the updated task, and displays a ticker
    with the message, Task updated successfully at the bottom of the screen, as shown
    in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对任务详情进行更改，然后点击保存按钮。这将关闭对话框，更新您的`ListView`以显示更新后的任务，并在屏幕底部显示一个消息为“任务成功更新”的滚动消息，如下面的截图所示：
- en: '![](img/20a2ea4c-717a-47f0-9ba3-ac870b49430a.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20a2ea4c-717a-47f0-9ba3-ac870b49430a.png)'
- en: 'Next, select a task and click the Delete menu item. This removes the selected
    task and displays a ticker with the message Task deleted successfully at the bottom
    of the screen, as shown in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择一个任务并点击删除菜单项。这将删除所选的任务，并在屏幕底部显示一个消息为“任务成功删除”的滚动消息，如下面的截图所示：
- en: '![](img/6d91962d-cf20-4d46-ba8a-fceeff7156b7.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d91962d-cf20-4d46-ba8a-fceeff7156b7.png)'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a simple TodoList app that allows a user to add new
    tasks, and edit or delete an already added task. In the process, we learned to
    use ListViews and Dialogs. With the current state of the TodoList app, the data
    resets itself whenever the app restarts. This is not ideal, since a user will
    most likely want to view their old tasks even after restarting the app.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个简单的TodoList应用程序，允许用户添加新任务，并编辑或删除已添加的任务。在这个过程中，我们学会了如何使用ListViews和Dialogs。在当前状态下，TodoList应用程序在重新启动时会重置数据。这并不理想，因为用户很可能希望在重新启动应用程序后查看他们的旧任务。
- en: In the next chapter, we will learn about the different datastore options available
    and how to use them to make our app more usable. We'll extend the TodoList app
    to persist the user's task into a database.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关不同的数据存储选项以及如何使用它们来使我们的应用程序更加可用。我们将扩展TodoList应用程序以将用户的任务持久化到数据库中。
