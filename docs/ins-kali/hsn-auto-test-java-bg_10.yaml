- en: The Importance of the final Keyword, Packages, and Modifiers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: final关键字、包和修饰符的重要性
- en: This is the final chapter in our book. Here, we will be dealing with some more
    important concepts that will help us write and execute better code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们书中的最后一章。在这里，我们将处理一些更重要的概念，这些概念将帮助我们编写和执行更好的代码。
- en: 'In this chapter, we will look at the following concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下概念：
- en: The final keyword
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: final关键字
- en: Packages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包
- en: Modifiers in Java
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java中的修饰符
- en: The final keyword
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: final关键字
- en: 'First, we will create a new class. If we declare any variable as `final`, that
    means the value cannot be changed again. Let''s consider the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个新类。如果我们将任何变量声明为`final`，那意味着该值不能再次更改。让我们考虑以下代码：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we have declared the integer value as `4`. This means we cannot
    change this value to another number. If we try to do that, it throws an error
    saying `Remove 'final' modifier of 'i'`. This keyword is useful if we want a value
    to be constant.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们已将整数值声明为`4`。这意味着我们不能将这个值更改为另一个数字。如果我们尝试这样做，它会抛出一个错误，说`Remove 'final'
    modifier of 'i'`。如果我们希望一个值是常量，这个关键字是有用的。
- en: If we mark a class as `final`, it will throw an error because when we change
    the access mode to `final`, we are not able to use that as a parent class. In
    other words, we will not be able to inherit our properties from it. If we want
    to inherit our properties, we need to change it back to `public`. The key logic
    for the final keyword is that, once written, we cannot override `final` methods.
    So these are unique and cannot be used again with the same name.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将一个类标记为`final`，它会抛出一个错误，因为当我们将访问模式更改为`final`时，我们无法将其用作父类。换句话说，我们将无法从中继承我们的属性。如果我们想要继承我们的属性，我们需要将其改回`public`。final关键字的关键逻辑是，一旦编写，我们就无法覆盖`final`方法。因此，这些是独一无二的，不能再次使用相同的名称。
- en: The `final` keyword can be used at the method level to make sure that the method
    is not overridden. It is used at the variable level to make sure we're not changing
    it, and it can also be used at the class level to ensure that we are not inheriting
    that parent class.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: final关键字可以用于方法级别，以确保该方法不被覆盖。它用于变量级别，以确保我们不会更改它，还可以用于类级别，以确保我们不会继承该父类。
- en: But remember not to confuse `final` and `finally`. `finally` is something that
    is related to `try...catch` exceptions. Once you execute the `try` or `catch`
    block, and preface any error, the controller will still come to this log and execute
    the code, no matter whether the script is pass or fail. `finally` is all about
    restricting access, such as we cannot use that, inherit that, or even change the
    values. We have explored packages, and how to import packages into other classes.
    We have explored the inheritance of interfaces, runtime polymorphism, strings,
    and many more. This is all about keywords.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是记住不要混淆`final`和`finally`。`finally`与`try...catch`异常有关。一旦执行`try`或`catch`块，并预先任何错误，控制器仍将来到此日志并执行代码，无论脚本是通过还是失败。`finally`是关于限制访问的，例如我们不能使用它，继承它，甚至更改值。我们已经探讨了包，以及如何将包导入其他类。我们已经探讨了接口的继承，运行时多态，字符串等等。这都是关键字。
- en: In the next section, we will learn about packages.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习有关包的知识。
- en: Packages
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包
- en: When scripts are written for each Java class, there is a pre-populated line
    that is present automatically. It is `package coreJava`. Since we have created
    a package in Java and placed all the Java classes into that `coreJava` package,
    we see it as `package coreJava`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当为每个Java类编写脚本时，会自动出现一个预填的行。它是`package coreJava`。由于我们在Java中创建了一个包，并将所有Java类放入了`coreJava`包中，我们将其视为`package
    coreJava`。
- en: Packages are nothing but a set of classes and interfaces. For example, Java
    comes with a few built-in packages, such as `java.length`; if we import this package,
    only then can we access a basic fundamental method, such as `public static void
    main`, integer, or array. All these classes come from this `java.lang` package.
    It is important to define the package name, because without it, we cannot access
    the classes present inside the package. This is because `java.lang` is a default
    package and it comes within the Java compiler itself.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 包只是一组类和接口。例如，Java自带了一些内置包，比如`java.length`；如果我们导入这个包，那么我们只能访问基本的基本方法，比如`public
    static void main`，整数或数组。所有这些类都来自`java.lang`包。定义包名很重要，因为没有它，我们无法访问包内的类。这是因为`java.lang`是一个默认包，它包含在Java编译器中。
- en: We have another package as well, `java.util`. We used this package when we worked
    on collections; we imported a `java.util` package. In order to work on `ArrayList`,
    this class is present in the `java.util` package. Therefore, if we remove `import
    java.util.ArrayList`, it throws an error because it does not belong to `java.lang`.
    All collection interfaces come from the `util` package.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有另一个包，`java.util`。我们在处理集合时使用了这个包；我们导入了一个`java.util`包。为了使用`ArrayList`，这个类存在于`java.util`包中。因此，如果我们移除`import
    java.util.ArrayList`，它会抛出一个错误，因为它不属于`java.lang`。所有集合接口都来自`util`包。
- en: 'But how do we know what keyword to use? The following screenshot displays what
    Eclipse will display if we hover the mouse:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们如何知道要使用什么关键字？以下屏幕截图显示了当我们将鼠标悬停在Eclipse上时Eclipse会显示什么：
- en: '![](img/e544ea6b-85b3-4d6d-9a42-d78acde26018.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e544ea6b-85b3-4d6d-9a42-d78acde26018.png)'
- en: Quick fixes drop down with suggestions to correct the code error
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 快速修复下拉菜单提供了纠正代码错误的建议
- en: 'We are importing the `java.util` package. And from that package, we are importing
    the `ArrayList` class. The syntax for it will be:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在导入`java.util`包。并且从该包中，我们正在导入`ArrayList`类。其语法将是：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the reason why we are using `ArrayList` in this Java class is because
    we know that `ArrayList` is in the `java.util` package. But we need not remember
    it when we are working with Eclipse. When you just hover the mouse, it suggests we
    import the package and we can just click on it. It will automatically import that
    particular test.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在这个Java类中使用`ArrayList`的原因是因为我们知道`ArrayList`在`java.util`包中。但是在使用Eclipse时，我们不需要记住它。当你只是悬停鼠标时，它会建议我们导入包，我们只需点击它。它将自动导入那个特定的测试。
- en: '`HashSet` imports the `HashSet` class from the same `util` package. If we go
    to `HashMap`, it brings `HashMap`. Thus, whenever we want to work on some tests,
    we need to import that package or class. `System.out.println()` also comes from
    one package only, but they come from `java.lang`, which is a built-in compiler.
    These are inbuilt inside the Java packages.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`HashSet`从同一个`util`包中导入了`HashSet`类。如果我们去`HashMap`，它会带来`HashMap`。因此，每当我们想要处理一些测试时，我们需要导入那个包或类。`System.out.println()`也只来自一个包，但它们来自`java.lang`，这是一个内置的编译器。这些都是Java包内置的。'
- en: At the same time, we can also define a user-defined Java package. In this case,
    all our test cases are in a different package called `coreJava`. If someone wants
    to use our classes, all they need to do is run `import coreJava.classname`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们也可以定义一个用户定义的Java包。在这种情况下，我们所有的测试用例都在一个名为`coreJava`的不同包中。如果有人想要使用我们的类，他们只需要运行`import
    coreJava.classname`。
- en: In the next section, we will look at the public modifier.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看一下public修饰符。
- en: Modifiers in Java
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java中的修饰符
- en: 'There are four types of access modifiers:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种类型的访问修饰符：
- en: '`public`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`'
- en: '`private`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private`'
- en: '`protected`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected`'
- en: '`default`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`'
- en: We will not discuss the theory here as you can find it on Google. We need a
    practical approach as to where exactly these access modifiers are used, or where
    exactly the packages are imported. Whenever we've created a method throughout
    this book, every time we just used `public` and wrote the method. The three other
    access modifiers work similarly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里讨论理论，因为你可以在Google上找到。我们需要一个实际的方法，来看看这些访问修饰符到底在哪里使用，或者包到底在哪里导入。每当我们在这本书中创建一个方法时，我们都只是使用`public`并写下这个方法。其他三种访问修饰符的工作方式也类似。
- en: Now let's try to understand how each of these access modifiers can help us.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们试着理解每种访问修饰符如何帮助我们。
- en: default
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: default
- en: If we do not mention any access modifier, our Java class automatically thinks
    it has a `default` access modifier. If it is `default`, that means you can access
    this method anywhere in your package. But if you go out of this package, then
    you cannot access this method. Even if we import the `package.classname` into
    our new package, we will not be able to access this method if we have not specified
    it as `public`. If you don't specify it, then by default it thinks it's a `default`
    access modifier. The `default` access modifier can be accessed anywhere in the
    package, but not outside it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有提及任何访问修饰符，我们的Java类会自动认为它有一个`default`访问修饰符。如果是`default`，那意味着你可以在你的包中的任何地方访问这个方法。但是如果你离开了这个包，那么你就无法访问这个方法。即使我们将`package.classname`导入到我们的新包中，如果我们没有将其指定为`public`，我们也无法访问这个方法。如果你不指定它，那么默认它认为它是一个`default`访问修饰符。`default`访问修饰符可以在包中的任何地方访问，但在包外部不能访问。
- en: 'In the *Packages* section, we imported this package and we tried to use it.
    As you can see in the following screenshot, there is an error showing up in line
    15:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Packages*部分，我们导入了这个包并尝试使用它。如下截图所示，第15行出现了一个错误：
- en: '![](img/d9dfca50-0720-409c-bd0f-5457b9af0d7a.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9dfca50-0720-409c-bd0f-5457b9af0d7a.png)'
- en: Quick fixes drop down with suggestions to correct the code error for default
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 快速修复下拉菜单提供了默认代码错误的建议
- en: 'If we don''t specify anything, we cannot access it, therefore it is the same
    as that of the default feature. This applies to variables as well:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不指定任何东西，我们就无法访问它，因此它与默认功能相同。这也适用于变量：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we can see, in the preceding code we have declared an integer. However, it
    will not be `public`; it is `default`. Thus, we cannot access the variable outside
    the package. If we import it, we will have access to the class but not the methods.
    If we want access, we have to write it as a `public`. So what does a `public`
    access modifier do?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在前面的代码中我们声明了一个整数。然而，它不会是`public`；它是`default`。因此，我们无法在包外访问这个变量。如果我们导入它，我们将可以访问这个类但不能访问方法。如果我们想要访问，我们必须将其写为`public`。那么`public`访问修饰符是什么作用呢？
- en: public
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: public
- en: On making the method or variable `public`, we will have access to it across
    all the packages. That means basically everywhere. There is no restriction for
    this package of this class. The error observed in the preceding screenshot is
    also goes once we make the method/variable `public`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法或变量设为`public`后，我们将可以在所有的包中访问它。这基本上意味着任何地方。对于这个类的这个包没有限制。在前面的截图中观察到的错误也会在我们将方法/变量设为`public`后消失。
- en: 'The following screenshot displays the `int` value after we made it `public`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将其设为`public`后，下面的截图显示了`int`值：
- en: '![](img/cd7b7481-22ae-445e-bfb6-22257a6f5ef9.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd7b7481-22ae-445e-bfb6-22257a6f5ef9.png)'
- en: Quick fixes drop down with suggestions to correct the code error for public
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 快速修复下拉菜单提供了默认代码错误的建议
- en: In the next class, we'll look at what `private` and `protected` access modifiers
    are. There are two more access modifiers after this one, let's see what they do.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个类中，我们将看一下`private`和`protected`访问修饰符是什么。在这之后还有两种访问修饰符，让我们看看它们的作用。
- en: private
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: private
- en: 'If we mark our method or variable as `private`, then we cannot access either
    of them outside the class. They cannot be accessed outside the package, or outside
    the same class. If we want to access this in our `ArraysDemo` example, we cannot
    do that. Even if we try to, it throws an error, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将我们的方法或变量标记为`private`，那么我们就无法在类外访问它们。它们不能在包外或同一个类外被访问。如果我们想在我们的`ArraysDemo`示例中访问它，我们无法这样做。即使我们尝试，它也会抛出一个错误，如下截图所示：
- en: '![](img/50710110-dc12-4e9a-8739-6c1ace39fac8.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50710110-dc12-4e9a-8739-6c1ace39fac8.png)'
- en: Quick fixes drop down with a suggestion to correct the code error for private
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 快速修复下拉菜单显示了一个建议，可以纠正私有代码错误
- en: This is so because, if we mark any method or variable as `private`, we cannot
    access it outside that particular class. Until and unless we change it to something
    else, it throws an error. This applies to the variable as well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为，如果我们将任何方法或变量标记为`private`，我们就无法在那个特定的类之外访问它。除非我们将它改为其他东西，否则会抛出错误。这也适用于变量。
- en: If you want a real-time scenario, let's say you are making a payment and buying
    a product; all the credit card details will go as `private` because they will
    not be accessed outside of that buy class. If they can be accessed, that's a security
    breach, right? So to make credit card details restricted to that particular class,
    the developers give the `private` variable to all the card details so other classes
    cannot use it. Even if they have used inheritance or are importing a package,
    they will not have access to those sensitive details. There are a lot of real-time
    scenarios; if you are working on test frameworks, there might be some variables
    which you should not change, and always keep it private.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个实时场景，比如你正在进行支付和购买产品；所有的信用卡细节都会被标记为`private`，因为它们不会在购买类之外被访问。如果它们可以被访问，那就是一个安全漏洞，对吧？所以为了让信用卡细节受限于那个特定的类，开发人员给所有的卡细节都加上了`private`变量，这样其他类就不能使用它。即使它们使用了继承或者导入了一个包，它们也无法访问这些敏感细节。有很多实时场景；如果你正在测试框架上工作，可能会有一些变量你不应该改变，并且总是保持它私有。
- en: protected
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: protected
- en: 'If we define a variable or method as `private`, we can access them in subclasses
    only. This means if we define it as `protected`; then, whichever class is inheriting
    the parent class, only those subclasses can have access to the method, and no
    other classes. This can be understood with the following code snippet:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将一个变量或方法定义为`private`，我们只能在子类中访问它们。这意味着如果我们将它定义为`protected`；那么，无论哪个类继承了父类，只有这些子类才能访问该方法，其他类都不能。这可以通过以下代码片段来理解：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The difference between `default` and `protected` is that in `default` we can
    access a class only within the same package of classes. Even `protected` can access
    all classes in the same package, except it has an additional feature. This additional
    feature says that, if we want to access it in other packages, only subclasses
    that inherit the properties of the parent class can access it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`default`和`protected`之间的区别在于，在`default`中我们只能在同一个类包内访问一个类。即使`protected`可以访问同一个包内的所有类，除了它还有一个额外的特性。这个额外的特性是，如果我们想在其他包中访问它，只有继承父类属性的子类才能访问它。'
- en: The same concept is applied to variables.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的概念也适用于变量。
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned concepts that help us understand the importance
    of packages, modifiers, and the `final` keyword in Java.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了帮助我们理解Java中包、修饰符和`final`关键字的重要性的概念。
- en: I hope you have a better understanding of these concepts now that you've read
    all the chapters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在已经阅读了所有章节，对这些概念有了更好的理解。
