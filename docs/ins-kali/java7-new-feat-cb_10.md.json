["```java\n    private static int numbers[] = new int[100000];\n\n    ```", "```java\n    private static class SumOfSquaresTask extends RecursiveTask<Long> {\n    private final int thresholdTHRESHOLD = 1000;\n    private int from;\n    private int to;\n    public SumOfSquaresTask(int from, int to) {\n    this.from = from;\n    this.to = to;\n    }\n    @Override\n    protected Long compute() {\n    long sum = 0L;\n    int mid = (to + from) >>> 1;\n    if ((to - from) < thresholdTHRESHOLD) {\n    for (int i = from; i < to; i++) {\n    sum += numbers[i] * numbers[i];\n    }\n    return sum;\n    }\n    else {\n    List<RecursiveTask<Long>> forks = new ArrayList<>();\n    SumOfSquaresTask task1 =\n    new SumOfSquaresTask(from, mid);\n    SumOfSquaresTask task2 =\n    new SumOfSquaresTask(mid, to);\n    forks.add(task1);\n    task1.fork();\n    forks.add(task2);\n    task2.fork();\n    for (RecursiveTask<Long> task : forks) {\n    sum += task.join();\n    }\n    return sum;\n    }\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    for (int i = 0; i < numbers.length; i++) {\n    numbers[i] = i;\n    }\n    long startTime;\n    long stopTime;\n    long sum = 0L;\n    startTime = System.currentTimeMillis();\n    for (int i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * numbers[i];\n    }\n    System.out.println(\"Sum of squares: \" + sum);\n    stopTime = System.currentTimeMillis();\n    System.out.println(\"Iterative solution time: \" + (stopTime - startTime));\n    ForkJoinPool forkJoinPool = new ForkJoinPool();\n    startTime = System.currentTimeMillis();\n    long result = forkJoinPool.invoke(new SumOfSquaresTask(0, numbers.length));\n    System.out.println(\"forkJoinPool: \" + forkJoinPool.toString());\n    stopTime = System.currentTimeMillis();\n    System.out.println(\"Sum of squares: \" + result);\n    System.out.println(\"Fork/join solution time: \" + (stopTime - startTime));\n    }\n\n    ```", "```java\nout.println(\"forkJoinPool: \" + forkJoinPool);\n\n```", "```java\n    private static abstract class Entity implements Runnable {\n    public abstract void run();\n    }\n\n    ```", "```java\n    private static class Player extends Entity {\n    private final static AtomicInteger idSource = new AtomicInteger();\n    private final int id = idSource.incrementAndGet();\n    public void run() {\n    System.out.println(toString() + \" started\");\n    try {\n    Thread.currentThread().sleep(\n    ThreadLocalRandom.current().nextInt(200, 600));\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    System.out.println(toString() + \" stopped\");\n    }\n    @Override\n    public String toString() {\n    return \"Player #\" + id;\n    }\n    }\n    private static class Zombie extends Entity {\n    private final static AtomicInteger idSource = new AtomicInteger();\n    private final int id = idSource.incrementAndGet();\n    public void run() {\n    System.out.println(toString() + \" started\");\n    try {\n    Thread.currentThread().sleep(\n    ThreadLocalRandom.current().nextInt(400, 800));\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    System.out.println(toString() + \" stopped\");\n    }\n    @Override\n    public String toString() {\n    return \"Zombie #\" + id;\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    new GamePhaserExample().execute();\n    }\n\n    ```", "```java\n    private void execute() {\n    List<Entity> entities = new ArrayList<>();\n    entities = new ArrayList<>();\n    entities.add(new Player());\n    entities.add(new Zombie());\n    entities.add(new Zombie());\n    entities.add(new Zombie());\n    gameEngine(entities);\n    }\n\n    ```", "```java\n    private void gameEngine(List<Entity> entities) {\n    final Phaser phaser = new Phaser(1);\n    for (final Entity entity : entities) {\n    synchronization barrier Phaserusingfinal String member = entity.toString();\n    System.out.println(member + \" joined the game\");\n    phaser.register();\n    new Thread() {\n    @Override\n    public void run() {\n    System.out.println(member +\n    \" waiting for the remaining participants\");\n    phaser.arriveAndAwaitAdvance(); // wait for remaining entities\n    System.out.println(member + \" starting run\");\n    entity.run();\n    }\n    }.start();\n    }\n    phaser.arriveAndDeregister(); //Deregister and continue\n    System.out.println(\"Phaser continuing\");\n    }\n\n    ```", "```java\nfinal int iterations = 3;\nfinal Phaser phaser = new Phaser(1) {\nprotected boolean onAdvance(int phase, int registeredParties) {\nSystem.out.println(\"Phase number \" + phase + \" completed\\n\")\nreturn phase >= iterations-1 || registeredParties == 0;\n}\n};\n\n```", "```java\nfor (final Entity entity : entities) {\nfinal String member = entity.toString();\nSystem.out.println(member + \" joined the game\");\nphaser.register();\nnew Thread() {\n@Override\npublic void run() {\ndo {\nSystem.out.println(member + \" starting run\");\nentity.run();\nSystem.out.println(member +\n\" waiting for the remaining participants during phase \" +\nphaser.getPhase());\nphaser.arriveAndAwaitAdvance(); // wait for remaining entities\n}\nwhile (!phaser.isTerminated());\n}\n}.start();\n}\n\n```", "```java\nwhile (!phaser.isTerminated()) {\nphaser.arriveAndAwaitAdvance();\n}\nSystem.out.println(\"Phaser continuing\");\n\n```", "```java\n    private static ConcurrentLinkedDeque<Item> deque = new ConcurrentLinkedDeque<>();\n    static class Item {\n    privateublic final String description;\n    privateublic final int itemId;\n    public Item() {\n    \"this(Default Item\";, 0)\n    }\n    public Item(String description, int itemId) {\n    this.description = description;\n    this.itemId = itemId;\n    }\n    }\n\n    ```", "```java\n    static class ItemProducer implements Runnable {\n    @Override\n    public void run() {\n    String itemName = \"\";\n    int itemId = 0;\n    try {\n    for (int x = 1; x < 8; x++) {\n    itemName = \"Item\" + x;\n    itemId = x;\n    deque.add(new Item(itemName, itemId));\n    System.out.println(\"New Item Added:\" + itemName + \" \" + itemId);\n    Thread.currentThread().sleep(250);\n    }\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    }\n    }\n\n    ```", "```java\n    static class ItemConsumer implements Runnable {\n    @Override\n    public void run() {\n    try {\n    Thread.currentThread().sleep(1000);\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    Item item;\n    while ((item = deque.pollFirst()) != null) {\n    {\n    generateOrder(item);\n    }\n    }\n    private void generateOrder(Item item) {\n    System.out.println(\"Part Order\");\n    System.out.println(\"Item description: \" + item.getDescriptiond());\n    System.out.println(\"Item ID # \" + item.getItemIdi());\n    System.out.println();\n    try {\n    Thread.currentThread().sleep(1000);\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    new Thread(new ItemProducer());.start()\n    new Thread(new ItemConsumer());.start()\n    }\n\n    ```", "```java\nItem[] items = (Item[]) deque.toArray();\n\n```", "```java\nItem[] items = deque.toArray(new Item[0]);\n\n```", "```java\n    private static LinkedTransferQueue<Item>\n    linkTransQ = new LinkedTransferQueue<>();\n    static class Item {\n    public final String description;\n    public final int itemId;\n    public Item() {\n    this(\"Default Item\", 0) ;\n    }\n    public Item(String description, int itemId) {\n    this.description = description;\n    this.itemId = itemId;\n    }\n    }\n\n    ```", "```java\n    static class ItemProducer implements Runnable {\n    @Override\n    public void run() {\n    try {\n    for (int x = 1; x < 8; x++) {\n    String itemName = \"Item\" + x;\n    int itemId = x;\n    linkTransQ.offer(new Item(itemName, itemId));\n    System.out.println(\"New Item Added:\" + itemName + \" \" + itemId);\n    Thread.currentThread().sleep(250);\n    if (linkTransQ.hasWaitingConsumer()) {\n    System.out.println(\"Hurry up!\");\n    }\n    }\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    }\n    }\n\n    ```", "```java\n    static class ItemConsumer implements Runnable {\n    @Override\n    public void run() {\n    try {\n    Thread.currentThread().sleep(1000);\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    while (true) {\n    try {\n    generateOrder(linkTransQ.take());\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n    }\n    }\n    private void generateOrder(Item item) {\n    System.out.println();\n    System.out.println(\"Part Order\");\n    System.out.println(\"Item description: \" + item.description());\n    System.out.println(\"Item ID # \" + item.itemId());\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    new Thread(new ItemProducer()).start();\n    new Thread(new ItemConsumer()).start();\n    }\n\n    ```", "```java\n    System.out.println(\"Five random integers\");\n    for(int i = 0; i<5; i++) {\n    System.out.println(ThreadLocalRandom.current(). nextInt());\n    }\n    System.out.println();\n    System.out.println(\"Random double number between 0.0 and 35.0\");\n    System.out.println(ThreadLocalRandom.current().nextDouble(35.0));\n    System.out.println();\n    System.out.println(\"Five random Long numbers between 1234567 and 7654321\");\n    for(int i = 0; i<5; i++) {\n    System.out.println(\n    ThreadLocalRandom.current().nextLong(1234567L, 7654321L));\n    }\n\n    ```"]