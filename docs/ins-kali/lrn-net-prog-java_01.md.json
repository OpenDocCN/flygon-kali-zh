["```java\n    InetAddress address = \n        InetAddress.getByName(\"www.packtpub.com\");\n    System.out.println(address);\n```", "```java\n    System.out.println(\"CanonicalHostName: \" \n        + address.getCanonicalHostName());\n    System.out.println(\"HostAddress: \" + \n        address.getHostAddress());\n    System.out.println(\"HostName: \" + address.getHostName());\n```", "```java\n    address.isReachable(10000);\n```", "```java\n    try {\n        URL url = new URL(\"http://www.google.com\");\n        URLConnection urlConnection = url.openConnection();\n        BufferedReader br = new BufferedReader(\n                new InputStreamReader(\n                    urlConnection.getInputStream()));\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n        br.close();\n    } catch (IOException ex) {\n        // Handle exceptions\n    }\n```", "```java\n    try {\n        URL url = new URL(\"http://www.google.com\");\n        URLConnection urlConnection = url.openConnection();\n        InputStream inputStream = urlConnection.getInputStream();\n        ReadableByteChannel channel = \n            Channels.newChannel(inputStream);\n        ByteBuffer buffer = ByteBuffer.allocate(64);\n        String line = null;\n        while (channel.read(buffer) > 0) {\n            System.out.println(new String(buffer.array()));\n            buffer.clear();\n        }\n        channel.close();\n    } catch (IOException ex) {\n        // Handle exceptions\n    }\n```", "```java\npublic class SimpleEchoServer {\n    public static void main(String[] args) {\n        System.out.println(\"Simple Echo Server\");\n        ...\n    }\n}\n```", "```java\n    try (ServerSocket serverSocket = new ServerSocket(6000)){\n        System.out.println(\"Waiting for connection.....\");\n        Socket clientSocket = serverSocket.accept();\n        System.out.println(\"Connected to client\");\n         ...\n    } catch (IOException ex) {\n        // Handle exceptions\n    }\n```", "```java\n    try (BufferedReader br = new BufferedReader(\n                new InputStreamReader(\n                clientSocket.getInputStream()));\n            PrintWriter out = new PrintWriter(\n                clientSocket.getOutputStream(), true)) {\n        ...\n        }\n    }\n```", "```java\n    String inputLine;\n    while ((inputLine = br.readLine()) != null) {\n        System.out.println(\"Server: \" + inputLine);\n        out.println(inputLine);\n    }\n```", "```java\npublic class SimpleEchoClient {\n    public static void main(String args[]) {\n        System.out.println(\"Simple Echo Client\");\n        ...\n    }\n}\n```", "```java\n    try {\n        System.out.println(\"Waiting for connection.....\");\n        InetAddress localAddress = InetAddress.getLocalHost();\n\n        try (Socket clientSocket = new Socket(localAddress, 6000);\n                    PrintWriter out = new PrintWriter(\n                        clientSocket.getOutputStream(), true);\n                    BufferedReader br = new BufferedReader(\n                        new InputStreamReader(\n                        clientSocket.getInputStream()))) {\n            ...\n        }\n    } catch (IOException ex) {\n        // Handle exceptions\n    }\n```", "```java\n    System.out.println(\"Connected to server\");\n    Scanner scanner = new Scanner(System.in);\n    while (true) {\n        System.out.print(\"Enter text: \");\n        String inputLine = scanner.nextLine();\n        if (\"quit\".equalsIgnoreCase(inputLine)) {\n            break;\n        }\n        out.println(inputLine);\n        String response = br.readLine();\n        System.out.println(\"Server response: \" + response);\n    }\n```", "```java\n    String inputLine;\n    while ((inputLine = br.readLine()) != null) {\n        System.out.println(\"Client request: \" + inputLine);\n        out.println(inputLine);\n    }\n```", "```java\n    Supplier<String> socketInput = () -> {\n        try {\n            return br.readLine();\n        } catch (IOException ex) {\n            return null;\n        }\n    };\n```", "```java\n    Stream<String> stream = Stream.generate(socketInput);\n    stream\n            .map(s -> {\n                System.out.println(\"Client request: \" + s);\n                out.println(s);\n                return s;\n            })\n            .allMatch(s -> s != null);\n```", "```java\n    while (true) {\n        System.out.print(\"Enter text: \");\n        String inputLine = scanner.nextLine();\n        if (\"quit\".equalsIgnoreCase(inputLine)) {\n            break;\n        }\n        out.println(inputLine);\n\n        String response = br.readLine();\n        System.out.println(\"Server response: \" + response);\n    }\n```", "```java\n    Supplier<String> scannerInput = () -> scanner.next();\n```", "```java\n    System.out.print(\"Enter text: \");\n    Stream.generate(scannerInput)\n        .map(s -> {\n            out.println(s);\n            System.out.println(\"Server response: \" + s);\n            System.out.print(\"Enter text: \");\n            return s;\n        })\n        .allMatch(s -> !\"quit\".equalsIgnoreCase(s));\n```", "```java\npublic class MulticastServer {\n    public static void main(String args[]) {\n        System.out.println(\"Multicast  Time Server\");\n        DatagramSocket serverSocket = null;\n        try {\n            serverSocket = new DatagramSocket();\n            ...\n            }\n        } catch (SocketException ex) {\n            // Handle exception\n        } catch (IOException ex) {\n            // Handle exception\n        }\n    }\n}\n```", "```java\n    while (true) {\n        String dateText = new Date().toString();\n        byte[] buffer = new byte[256];\n        buffer = dateText.getBytes();\n\n        InetAddress group = InetAddress.getByName(\"224.0.0.0\");\n        DatagramPacket packet;\n        packet = new DatagramPacket(buffer, buffer.length, \n            group, 8888);\n        serverSocket.send(packet);\n        System.out.println(\"Time sent: \" + dateText);\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException ex) {\n            // Handle exception\n        }\n    }\n```", "```java\npublic class MulticastClient {\n    public static void main(String args[]) {\n        System.out.println(\"Multicast  Time Client\");\n        try (MulticastSocket socket = new MulticastSocket(8888)) {\n            InetAddress group = \n                InetAddress.getByName(\"224.0.0.0\");\n            socket.joinGroup(group);\n            System.out.println(\"Multicast  Group Joined\");\n\n            byte[] buffer = new byte[256];\n            DatagramPacket packet = \n                new DatagramPacket(buffer, buffer.length);\n\n            for (int i = 0; i < 5; i++) {\n                socket.receive(packet);\n                String received = new String(packet.getData());\n                System.out.println(received.trim());\n            }\n\n            socket.leaveGroup(group);\n        } catch (IOException ex) {\n            // Handle exception\n        }\n        System.out.println(\"Multicast  Time Client Terminated\");\n    }\n}\n```", "```java\npublic class ThreadedEchoServer implements Runnable {\n    private static Socket clientSocket;\n\n    public ThreadedEchoServer(Socket clientSocket) {\n        this.clientSocket = clientSocket;\n    }\n    ...\n}\n```", "```java\n    public static void main(String[] args) {\n        System.out.println(\"Threaded Echo Server\");\n        try (ServerSocket serverSocket = new ServerSocket(6000)) {\n            while (true) {\n                System.out.println(\"Waiting for connection.....\");\n                clientSocket = serverSocket.accept();\n                ThreadedEchoServer tes = \n                    new ThreadedEchoServer(clientSocket);\n                new Thread(tes).start();\n            }\n\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n        System.out.println(\"Threaded Echo Server Terminating\");\n    }\n```", "```java\n    @Override\n    public void run() {\n        System.out.println(\"Connected to client using [\" \n            + Thread.currentThread() + \"]\");\n        try (BufferedReader br = new BufferedReader(\n                new InputStreamReader(\n                    clientSocket.getInputStream()));\n                PrintWriter out = new PrintWriter(\n                        clientSocket.getOutputStream(), true)) {\n            String inputLine;\n            while ((inputLine = br.readLine()) != null) {\n                System.out.println(\"Client request [\" \n                    + Thread.currentThread() + \"]: \" + inputLine);\n                out.println(inputLine);\n            }\n            System.out.println(\"Client [\" + Thread.currentThread() \n                + \" connection terminated\");\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n    }\n```", "```java\npublic class SSLServerSocket {\n\n    public static void main(String[] args) {\n        try {\n            SSLServerSocketFactory ssf =  (SSLServerSocketFactory) \n                SSLServerSocketFactory.getDefault();\n            ServerSocket serverSocket = \n                ssf.createServerSocket(8000);\n            System.out.println(\"SSLServerSocket Started\");\n            try (Socket socket = serverSocket.accept();\n                    PrintWriter out = new PrintWriter(\n                            socket.getOutputStream(), true);\n                    BufferedReader br = new BufferedReader(\n                        new InputStreamReader(\n                        socket.getInputStream()))) {\n                System.out.println(\"Client socket created\");\n                String line = null;\n                while (((line = br.readLine()) != null)) {\n                    System.out.println(line);\n                    out.println(line);\n                }\n                br.close();\n                System.out.println(\"SSLServerSocket Terminated\");\n            } catch (IOException ex) {\n                // Handle exceptions\n            }\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n    }\n}\n```", "```java\npublic class SSLClientSocket {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"SSLClientSocket Started\");\n        SSLSocketFactory sf = \n            (SSLSocketFactory) SSLSocketFactory.getDefault();\n        try (Socket socket = sf.createSocket(\"localhost\", 8000);\n                PrintWriter out = new PrintWriter(\n                       socket.getOutputStream(), true);\n                BufferedReader br = new BufferedReader(\n                       new InputStreamReader(\n                       socket.getInputStream()))) {\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n                System.out.print(\"Enter text: \");\n                String inputLine = scanner.nextLine();\n                if (\"quit\".equalsIgnoreCase(inputLine)) {\n                    break;\n                }\n                out.println(inputLine);\n                System.out.println(\"Server response: \" + \n                    br.readLine());\n            }\n            System.out.println(\"SSLServerSocket Terminated\");\n        }\n    }\n}\n```", "```java\n set path= C:\\Program Files\\Java\\jdk1.8.0_25\\bin;%path%\n\n```", "```java\nEnter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n [Unknown]:  First Last\nWhat is the name of your organizational unit?\n [Unknown]:  packt\nWhat is the name of your organization?\n [Unknown]:  publishing\nWhat is the name of your City or Locality?\n [Unknown]:  home\nWhat is the name of your State or Province?\n [Unknown]:  calm\nWhat is the two-letter country code for this unit?\n [Unknown]:  me\nIs CN=First Last, OU=packt, O=publishing, L=home, ST=calm, C=me correct?\n [no]:  y\n\nEnter key password for <mykey>\n (RETURN if same as keystore password):\n\n```", "```java\njava -Djavax.net.ssl.keyStore=keystore.jks -Djavax.net.ssl.keyStorePassword=123456 packt.SSLServerSocket\njava -Djavax.net.ssl.trustStore=keystore.jks -Djavax.net.ssl.trustStorePassword=123456 packt.SSLClientSocket\n```"]