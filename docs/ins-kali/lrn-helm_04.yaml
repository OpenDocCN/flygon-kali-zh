- en: '*Chapter 3*: Installing your First Helm Chart'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第3章*：安装您的第一个Helm图表'
- en: Earlier in this book, we referred to Helm as the "Kubernetes package manager"
    and compared it to an operating system's package manager. A package manager allows
    users to quickly and easily install applications of varying complexities and manages
    any dependencies that an application might have. Helm works in a similar fashion.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期，我们将Helm称为“Kubernetes软件包管理器”，并将其与操作系统的软件包管理器进行了比较。软件包管理器允许用户快速轻松地安装各种复杂性的应用程序，并管理应用程序可能具有的任何依赖关系。Helm以类似的方式工作。
- en: Users simply determine the application they want to deploy on Kubernetes and
    Helm does the rest of the work for them. A Helm chart—a packaging of Kubernetes
    resources—contains the logic and components required to install an application,
    allowing users to perform installations without needing to know the specific resources
    required. Users can also pass in parameters, called values, to a Helm chart to
    configure different aspects of the application without needing to know the specific
    details about the Kubernetes resources that are being configured. You will explore
    these features in this chapter by leveraging Helm as a package manager to deploy
    a WordPress instance onto Kubernetes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用户只需确定他们想要在Kubernetes上部署的应用程序，Helm会为他们完成其余的工作。Helm图表——Kubernetes资源的打包——包含安装应用程序所需的逻辑和组件，允许用户执行安装而无需知道具体所需的资源。用户还可以传递参数，称为值，到Helm图表中，以配置应用程序的不同方面，而无需知道正在配置的Kubernetes资源的具体细节。您将通过本章来利用Helm作为软件包管理器，在Kubernetes上部署WordPress实例，来探索这些功能。
- en: 'We will cover the following main topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Finding a WordPress chart on Helm Hub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Helm Hub上找到WordPress图表
- en: Creating the Kubernetes environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Kubernetes环境
- en: Additional installation notes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加安装说明
- en: Installing a WordPress chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装WordPress图表
- en: Accessing a WordPress application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问WordPress应用程序
- en: Upgrading a WordPress release
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级WordPress发布
- en: Rolling back a WordPress release
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚WordPress发布
- en: Uninstalling a WordPress release
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载WordPress发布
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will use the following software technologies:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用以下软件技术：
- en: '`minikube`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube`'
- en: '`kubectl`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: '`helm`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: We will assume that these components have already been installed on your system.
    For additional information on each of these tools, including installation and
    configuration, please refer to [*Chapter 2*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098),
    *Preparing a Kubernetes and Helm Environment*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设这些组件已经安装在您的系统上。有关这些工具的更多信息，包括安装和配置，请参阅[*第2章*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098)，*准备Kubernetes和Helm环境*。
- en: Understanding the WordPress application
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解WordPress应用程序
- en: In this chapter, you will use Helm to deploy **WordPress** on Kubernetes. WordPress
    is an open source **Content Management System** (**CMS**) used to create websites
    and blogs. Two different variants are available—[WordPress.com](http://WordPress.com)
    and [WordPress.org](http://WordPress.org). [WordPress.com](http://WordPress.com)
    is a **Software-As-A-Service** (**SaaS**) version of the CMS, meaning the WordPress
    application and its components are already hosted and managed by WordPress. In
    this case, users do not need to worry about installing their own WordPress instance
    as they can simply access instances that are already available. [WordPress.org](http://WordPress.org),
    on the other hand, is the self-hosted option. It requires users to deploy their
    own WordPress instances and requires expertise to maintain.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用Helm在Kubernetes上部署**WordPress**。WordPress是一个用于创建网站和博客的开源**内容管理系统**（**CMS**）。有两种不同的变体可用——[WordPress.com](http://WordPress.com)和[WordPress.org](http://WordPress.org)。[WordPress.com](http://WordPress.com)是CMS的**软件即服务**（**SaaS**）版本，这意味着WordPress应用程序及其组件已经由WordPress托管和管理。在这种情况下，用户不需要担心安装自己的WordPress实例，因为他们可以简单地访问已经可用的实例。另一方面，[WordPress.org](http://WordPress.org)是自托管选项。它要求用户部署自己的WordPress实例，并需要专业知识来维护。
- en: 'Since [WordPress.com](http://WordPress.com) is easier to start with, it may
    sound like the more desirable option. This SaaS version of WordPress, however,
    has many disadvantages over the self-hosted [WordPress.org](http://WordPress.org):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[WordPress.com](http://WordPress.com)更容易上手，可能听起来更加可取。然而，这个WordPress的SaaS版本与自托管的[WordPress.org](http://WordPress.org)相比有很多缺点：
- en: It does not provide as many features as [WordPress.org](http://WordPress.org).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不提供与[WordPress.org](http://WordPress.org)一样多的功能。
- en: It does not give users full control over their website.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不给用户对网站的完全控制。
- en: It requires users to pay for premium features.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它要求用户支付高级功能。
- en: It does not provide the ability to modify the backend code of a website.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不提供修改网站后端代码的能力。
- en: The self-hosted [WordPress.org](http://WordPress.org) variation, on the other
    hand, gives users complete control over their website and WordPress instances.
    It provides the full WordPress feature set, from installing plugins to modifying
    backend code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，自托管的[WordPress.org](http://WordPress.org)版本让用户完全控制他们的网站和WordPress实例。它提供完整的WordPress功能集，从安装插件到修改后端代码。
- en: 'A self-hosted WordPress instance requires users to deploy a few different components.
    First, WordPress needs a database to save the website and administrative data.
    [WordPress.org](http://WordPress.org) states that the database must be either
    **MySQL** or **MariaDB**, which serves as both the website''s location and the
    administrative portal. In Kubernetes, deploying these components means creating
    a variety of different resources:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管的WordPress实例需要用户部署一些不同的组件。首先，WordPress需要一个数据库来保存网站和管理数据。 [WordPress.org](http://WordPress.org)
    指出数据库必须是 **MySQL** 或 **MariaDB**，它既是网站的位置，也是管理门户。在Kubernetes中，部署这些组件意味着创建各种不同的资源：
- en: '`secrets` for database and admin console authentication'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于数据库和管理控制台身份验证的`secrets`
- en: A `ConfigMap` for externalized database configuration
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于外部化数据库配置的ConfigMap
- en: '`services` for networking'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务
- en: A `PersistentVolumeClaim` for database storage
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于数据库存储的`PersistentVolumeClaim`
- en: A `StatefulSet` for deploying the database in a stateful fashion
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于以有状态的方式部署数据库的StatefulSet
- en: A `Deployment` for deploying the frontend
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于部署前端的`Deployment`
- en: Creating these Kubernetes resources requires both WordPress and Kubernetes expertise.
    It requires WordPress expertise because the user needs to know the physical components
    that are required as well as how to configure them. Kubernetes expertise is required
    because users need to know how to express the WordPress requirements as Kubernetes
    resources. Given the complexity and number of resources that are required, deploying
    WordPress on Kubernetes can be a daunting task.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这些 Kubernetes 资源需要 WordPress 和 Kubernetes 方面的专业知识。需要 WordPress 方面的专业知识，因为用户需要了解所需的物理组件以及如何配置它们。需要
    Kubernetes 方面的专业知识，因为用户需要知道如何将 WordPress 的要求表达为 Kubernetes 资源。考虑到所需的资源的复杂性和数量，将
    WordPress 部署到 Kubernetes 上可能是一项艰巨的任务。
- en: The challenge presented by this task is a perfect use case for Helm. Rather
    than focus on creating and configuring each of the Kubernetes resources we have
    described, users can leverage Helm as a package manager to deploy and configure
    WordPress on Kubernetes without expertise. To begin, we'll explore a platform
    called **Helm Hub** to first find a WordPress Helm chart. After that, we'll deploy
    WordPress to your Kubernetes cluster using Helm and explore basic Helm features
    along the way.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这项任务带来的挑战是 Helm 的一个完美用例。用户可以利用 Helm 作为软件包管理器，在不需要专业知识的情况下，在 Kubernetes 上部署和配置
    WordPress，而不是专注于创建和配置我们已描述的每个 Kubernetes 资源。首先，我们将探索一个名为 **Helm Hub** 的平台，以找到
    WordPress Helm 图表。之后，我们将使用 Helm 在 Kubernetes 集群上部署 WordPress，并在此过程中探索基本的 Helm
    功能。
- en: Finding a WordPress chart
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找 WordPress 图表
- en: Helm Charts can be made available for consumption by being published to a chart
    repository. A chart repository is a location where packaged charts can be stored
    and shared. A repository is simply hosted as an HTTP server and can take the form
    of various implementations, including GitHub pages, an Amazon S3 bucket, or a
    simple web server such as Apache HTTPD.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 图表可以通过发布到图表存储库来供使用。图表存储库是存储和共享打包图表的位置。存储库只是作为 HTTP 服务器托管，并且可以采用各种实现形式，包括
    GitHub 页面、Amazon S3 存储桶或简单的 Web 服务器，如 Apache HTTPD。
- en: To be able to use existing charts that are stored in a repository, Helm needs
    to first be configured to a repository that it can use. This is accomplished by
    adding repositories using `helm repo add`. One challenge involved with adding
    repositories is that there are numerous different chart repositories available
    for consumption; it may be difficult to locate the particular repository that
    fits your use case. To make it easier to find chart repositories, the Helm community
    created a platform called Helm Hub.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用存储在存储库中的现有图表，Helm 首先需要配置到一个可以使用的存储库。这可以通过使用 `helm repo add` 来添加存储库来实现。添加存储库涉及的一个挑战是，有许多不同的图表存储库可供使用；可能很难找到适合您用例的特定存储库。为了更容易找到图表存储库，Helm
    社区创建了一个名为 Helm Hub 的平台。
- en: Helm Hub is a centralized location for upstream chart repositories. Powered
    by a community project called **Monocular**, Helm Hub is designed to aggregate
    all known public chart repositories and provide a search functionality. In this
    chapter, we will use the Helm Hub platform to search for WordPress Helm charts.
    Once an appropriate chart is found, we will add the repository that this chart
    belongs so that it can be installed, afterward.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Helm Hub 是上游图表存储库的集中位置。由一个名为 **Monocular** 的社区项目提供支持，Helm Hub 旨在汇总所有已知的公共图表存储库并提供搜索功能。在本章中，我们将使用
    Helm Hub 平台来搜索 WordPress Helm 图表。一旦找到合适的图表，我们将添加该图表所属的存储库，以便安装后续使用。
- en: To begin, interaction with Helm Hub can be accomplished either from the command
    line or from a web browser. When using the command line to search for Helm charts,
    the results that are returned provide a URL to Helm Hub, which can be used to
    find additional information on the chart and instructions on how to add its chart
    repository.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，可以通过命令行或Web浏览器与Helm Hub进行交互。当使用命令行搜索Helm图表时，返回的结果提供了Helm Hub的URL，可以用来查找有关图表的其他信息以及如何添加其图表存储库的说明。
- en: Let's follow this workflow to add a chart repository containing a WordPress
    chart.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照这个工作流程来添加一个包含WordPress图表的图表存储库。
- en: Searching for WordPress charts from the command line
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行搜索WordPress图表
- en: 'In general, Helm contains two different search commands to assist us in finding
    Helm charts:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Helm包含两个不同的搜索命令，以帮助我们找到Helm图表：
- en: 'To search for charts in Helm Hub or an instance of Monocular, use the following
    command:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在Helm Hub或Monocular实例中搜索图表，请使用以下命令：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To search repositories for a keyword in Charts, use the following command:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在图表中搜索关键字，请使用以下命令：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If repositories have not been added previously, users should run the `helm search
    hub` command to locate Helm charts available across all public chart repositories.
    After repositories are added, users can run `helm search repo` to search across
    these repositories.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果之前没有添加存储库，用户应该运行`helm search hub`命令来查找所有公共图表存储库中可用的Helm图表。添加存储库后，用户可以运行`helm
    search repo`来搜索这些存储库中的图表。
- en: 'Let''s search Helm Hub for any existing WordPress charts. Each chart in Helm
    Hub has a set of keywords that can be searched against. Execute the following
    command to locate charts containing the `wordpress` keyword:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Helm Hub中搜索任何现有的WordPress图表。Helm Hub中的每个图表都有一组关键字，可以针对其进行搜索。执行以下命令来查找包含`wordpress`关键字的图表：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Upon running this command, an output similar to the following should be displayed:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，应显示类似以下的输出：
- en: '![Figure 3.1 – The output from running helm search hub wordpress'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1–运行helm search hub wordpress的输出'
- en: '](image/Figure_3.1.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.1.jpg)'
- en: Figure 3.1 – The output from running `helm search hub wordpress`
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1–运行`helm search hub wordpress`的输出
- en: Each line of the output returned by this command is a chart from Helm Hub. The
    output will display the URL to each chart's Helm Hub page. It will also display
    the chart version, which is the latest version of the Helm chart, and the app
    version, which is the version of the application that the chart is defaulted to
    deploy. This command will also print a description of each chart, which will often
    state the application that the chart deploys.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回的每行输出都是来自Helm Hub的图表。输出将显示每个图表的Helm Hub页面的URL。它还将显示图表版本，这是Helm图表的最新版本，以及应用程序版本，这是图表默认部署的应用程序版本。该命令还将打印每个图表的描述，通常会说明图表部署的应用程序。
- en: As you may have noticed, some of the values returned are truncated. This is
    due to the fact that the default output of `helm search hub` is a table, causing
    the results to be returned in a table format. By default, columns wider than 50
    characters are truncated. This truncation can be avoided by specifying the `--max-col-width=0`
    flag.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，返回的一些值被截断了。这是因为`helm search hub`的默认输出是一个表，导致结果以表格格式返回。默认情况下，宽度超过50个字符的列会被截断。可以通过指定`--max-col-width=0`标志来避免这种截断。
- en: 'Try running the following command by including the `--max-col-width` flag to
    view the untruncated results in table format:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行以下命令，包括`--max-col-width`标志，以查看表格格式中未截断的结果：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The result, in table format, will display each field in full, including the
    URLs and descriptions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结果以表格格式显示每个字段的完整内容，包括URL和描述。
- en: 'The URLs are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: URL如下：
- en: '[https://hub.helm.sh/charts/bitnami/wordpress](https://hub.helm.sh/charts/bitnami/wordpress)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://hub.helm.sh/charts/bitnami/wordpress](https://hub.helm.sh/charts/bitnami/wordpress)'
- en: '[https://hub.helm.sh/charts/presslabs/wordpress-site](https://hub.helm.sh/charts/presslabs/wordpress-site)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://hub.helm.sh/charts/presslabs/wordpress-site](https://hub.helm.sh/charts/presslabs/wordpress-site)'
- en: '[https://hub.helm.sh/charts/presslabs/wordpress-operator](https://hub.helm.sh/charts/presslabs/wordpress-operator)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://hub.helm.sh/charts/presslabs/wordpress-operator](https://hub.helm.sh/charts/presslabs/wordpress-operator)'
- en: 'The descriptions are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 描述如下：
- en: '`Web publishing platform for building blogs and websites.`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`用于构建博客和网站的网络发布平台。`'
- en: '`A Helm chart for deploying a WordPress site on Presslabs Stack`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`用于在Presslabs Stack上部署WordPress站点的Helm图表`'
- en: '`Presslabs WordPress Operator Helm Chart`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Presslabs WordPress Operator Helm Chart`'
- en: Alternatively, users can pass the `--output` flag and specify either a `yaml`
    or `json` output, which will print the search results in full.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，用户可以传递`--output`标志，并指定`yaml`或`json`输出，这将以完整形式打印搜索结果。
- en: 'Try running the previous command again with the `--output yaml` flag:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行上一个命令，带上`--output yaml`标志：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result will be in YAML format, similar to the output shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将以YAML格式显示，类似于此处显示的输出：
- en: '![](image/Figure_3.2.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_3.2.jpg)'
- en: Figure 3.2 – The output for `helm search hub wordpress--output yaml`
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 - `helm search hub wordpress--output yaml`的输出
- en: For this example, we will choose to install the first chart that was returned
    in the preceding sample output. To learn more about this chart and how it is insta[lled,
    we can go to https://hub.helm.sh/chart](https://hub.helm.sh/charts/bitnami/wordpress)s/bitnami/wordpress,
    which will help us view the chart from Helm Hub.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将选择安装在前面示例输出中返回的第一个图表。要了解有关此图表及其安装方式的更多信息，我们可以转到[https://hub.helm.sh/charts/bitnami/wordpress](https://hub.helm.sh/charts/bitnami/wordpress)，这将帮助我们从Helm
    Hub查看图表。
- en: The resulting content will be explored in the next section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的内容将在下一节中探讨。
- en: Viewing the WordPress chart in a browser
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在浏览器中查看WordPress图表
- en: Using `helm search hub` is the fastest way of searching for charts on Helm Hub.
    However, it does not provide all of the details needed for the installation. Namely,
    users need to know a chart's repository URL in order to add its repository and
    install the chart. A chart's Helm Hub page can provide this URL, along with other
    installation details.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`helm search hub`是在Helm Hub上搜索图表的最快方法。但是，它并不提供安装所需的所有细节。换句话说，用户需要知道图表的存储库URL，以便添加其存储库并安装图表。图表的Helm
    Hub页面可以提供此URL，以及其他安装细节。
- en: 'Once you have pasted the WordPress chart''s URL into a browser window, a page
    similar to the following should be displayed:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将WordPress图表的URL粘贴到浏览器窗口后，应显示类似以下内容的页面：
- en: '![Figure 3.3 – A WordPress Helm chart from Helm Hub'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 - 来自Helm Hub的WordPress Helm图表'
- en: '](image/Figure_3.3.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.3.jpg)'
- en: Figure 3.3 – A WordPress Helm chart from Helm Hub
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 - 来自Helm Hub的WordPress Helm图表
- en: The WordPress chart's page from Helm Hub provides many details, including the
    maintainer of the chart (**Bitnami**, which is a company that provides software
    packages that are deployable to different environments) and a brief introduction
    on the chart (stating that this chart will deploy a WordPress instance to Kubernetes
    along with a Bitnami MariaDB chart as a dependency). The web page also provides
    installation details, including the chart's supported values, used to configure
    the installation, along with Bitnami's chart repository URL. These installation
    details give users the ability to add this repository and install the WordPress
    chart.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Helm Hub上的WordPress图表页面提供了许多详细信息，包括图表的维护者（**Bitnami**，这是一家提供可部署到不同环境的软件包的公司）以及有关图表的简要介绍（说明此图表将在Kubernetes上部署一个WordPress实例，并将Bitnami
    MariaDB图表作为依赖项）。该网页还提供了安装详细信息，包括用于配置安装的图表支持的值，以及Bitnami的图表存储库URL。这些安装详细信息使用户能够添加此存储库并安装WordPress图表。
- en: 'On the right-hand side of the page, you should see a section labeled **Add
    bitnami repository.** This section contains the command that can be used to add
    the Bitnami chart repository. Let''s look at how to use it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面的右侧，您应该会看到一个名为**添加bitnami存储库**的部分。该部分包含可用于添加Bitnami图表存储库的命令。让我们看看如何使用它：
- en: 'Run the following command in your command line:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中运行以下命令：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Verify that the chart has been added by running `helm repo list`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`helm repo list`来验证图表是否已添加：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can do a little more now that we have added the repository.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了存储库，我们可以做更多事情。
- en: 'Run the following command to view charts from locally configured repositories
    that contain the `bitnami` keyword:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来查看包含`bitnami`关键字的本地配置存储库中的图表：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A shortened list of the results returned is shown in the following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了返回的结果的缩短列表：
- en: '![Figure 3.4 – The output for helm search repo –output yaml'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 - helm search repo --output yaml的输出'
- en: '](image/Image86715.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Image86715.jpg)'
- en: Figure 3.4 – The output for `helm search repo bitnami --output yaml`
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 - `helm search repo bitnami --output yaml`的输出
- en: Similar to the `helm search hub` command, the `helm search repo` command takes
    a keyword as an argument. Using `bitnami` as a keyword will return all the charts
    under the `bitnami` repository, as well as charts outside of that repository that
    may also contain the `bitnami` keyword.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与`helm search hub`命令类似，`helm search repo`命令接受关键字作为参数。使用`bitnami`作为关键字将返回`bitnami`存储库下的所有图表，以及可能还包含`bitnami`关键字的存储库外的图表。
- en: 'To ensure that you now have access to the WordPress chart, run the following
    `helm search repo` command with the `wordpress` argument:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您现在可以访问WordPress图表，请使用`wordpress`参数运行以下`helm search repo`命令：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will display the WordPress chart that you found on Helm Hub and
    observed in your browser:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示您在Helm Hub上找到并在浏览器中观察到的WordPress图表：
- en: '![Figure 3.5 – The output for helm search repo wordpress'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5 - helm search repo wordpress的输出'
- en: '](image/Figure_3.5.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.5.jpg)'
- en: Figure 3.5 – The output for `helm search repo wordpress`
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 - `helm search repo wordpress`的输出
- en: 'The value in the `NAME` field before the slash (`/`) indicates the name of
    the repository containing the Helm chart that was returned. The latest version
    of the WordPress chart from the `bitnami` repository, as of the time of writing,
    is version `8.1.0`. This is the version that will be used for the installation.
    Previous versions can be observed by passing the `--versions` flag to the `search`
    command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠（`/`）前的`NAME`字段中的值表示返回的Helm图表所在的存储库的名称。截至撰写本文时，`bitnami`存储库中WordPress图表的最新版本是`8.1.0`。这是将用于安装的版本。通过向`search`命令传递`--versions`标志可以观察以前的版本：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should then see a new line for each version of the available WordPress
    charts:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该看到每个可用WordPress图表的每个版本的新行：
- en: '![Figure 3.6 – The version lists for WordPress charts on the bitnami repository'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6 - bitnami存储库上WordPress图表的版本列表'
- en: '](image/Figure_3.6.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.6.jpg)'
- en: Figure 3.6 – The version lists for WordPress charts on the bitnami repository
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 - bitnami存储库上WordPress图表的版本列表
- en: Now that a WordPress chart has been identified and the chart's repository has
    been added, we will explore how you can use the command line to find out more
    about the chart to prepare for installation in the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经确定了WordPress图表，并且已经添加了图表的存储库，我们将探讨如何使用命令行来了解有关图表的更多信息，以准备在下一节中进行安装。
- en: Showing the WordPress chart information from the command line
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行显示WordPress图表信息
- en: 'You can find a lot of important details about a Helm chart on its Helm Hub
    page. Once a chart''s repository is added locally, this information (and more)
    can also be viewed from the command line with the four `helm show` subcommands
    described in the following list:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在其Helm Hub页面上找到有关Helm图表的许多重要细节。一旦图表存储库被本地添加，这些信息（以及更多）也可以通过以下列表中描述的四个`helm
    show`子命令从命令行中查看：
- en: 'This command shows the chart''s metadata (or chart definition):'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个命令显示了图表的元数据（或图表定义）：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command shows the chart''s `README` file:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个命令显示了图表的`README`文件：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This command shows the chart''s values:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个命令显示了图表的值：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command shows the chart''s definition, README files, and values:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个命令显示了图表的定义、README文件和值：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's use these commands with the Bitnami WordPress chart. In each of these
    commands, the chart should be referenced as `bitnami/wordpress`. Note that we
    will be passing the `--version` flag to retrieve information about version `8.1.0`
    of this chart. If this flag is omitted, information from the latest version of
    the chart will be returned.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这些命令与Bitnami WordPress图表。在这些命令中，图表应该被引用为`bitnami/wordpress`。请注意，我们将传递`--version`标志来检索关于此图表版本`8.1.0`的信息。如果省略此标志，将返回图表最新版本的信息。
- en: 'Run the `helm show chart` command to retrieve the metadata for the chart:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`helm show chart`命令来检索图表的元数据：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result of this command will be the **chart definition** of the WordPress
    chart. A chart definition describes information such as the chart''s version,
    its dependencies, keywords, and maintainers:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的结果将是WordPress图表的**图表定义**。图表定义描述了图表的版本、依赖关系、关键字和维护者等信息：
- en: '![Figure 3.7 – The wordpress chart definition'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7 - wordpress图表定义'
- en: '](image/Figure_3.7.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.7.jpg)'
- en: Figure 3.7 – The WordPress chart definition
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 - WordPress图表定义
- en: 'Run the `helm show readme` command to view the chart''s README file from the
    command line:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`helm show readme`命令来从命令行查看图表的README文件：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The results of this command may look familiar, as a chart''s README file is
    also displayed on its Helm Hub page. Leveraging this option from the command line
    provides a quick way to view the README file without having to open a browser:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的结果可能看起来很熟悉，因为图表的README文件也显示在其Helm Hub页面上。利用这个选项从命令行提供了一种快速查看README文件的方式，而不必打开浏览器：
- en: '![Figure 3.8 – The wordpress chart’s README file shown in the command line'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8 - 在命令行中显示的wordpress图表的README文件'
- en: '](image/Figure_3.8.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.8.jpg)'
- en: Figure 3.8 – The WordPress chart's README file shown in the command line
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 - 在命令行中显示的WordPress图表的README文件
- en: We use `helm show values` to inspect a chart's values. Values serve as parameters
    that users can provide in order to customize a chart installation. We will run
    this command later on in this chapter in the *Creating a values file for configuration*
    section when we install the chart.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`helm show values`来检查图表的值。值作为用户可以提供的参数，以便定制图表安装。在本章的*为配置创建一个values文件*部分中，当我们安装图表时，我们将稍后运行此命令。
- en: Finally, `helm show all` aggregates all of the information from the previous
    three commands together. Use this command if you want to inspect all of a chart's
    details at once.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`helm show all`将前三个命令的所有信息汇总在一起。如果您想一次检查图表的所有细节，请使用此命令。
- en: Now that we have found and inspected a WordPress chart, let's set up a Kubernetes
    environment that we can later install this chart to.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经找到并检查了一个WordPress图表，让我们设置一个Kubernetes环境，以便稍后安装这个图表。
- en: Creating a Kubernetes environment
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Kubernetes环境
- en: To create a Kubernetes environment in this chapter, we will use Minikube. We
    learned how to install Minikube in [*Chapter 2*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098),
    *Preparing a Kubernetes and Helm Environment*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本章中创建一个Kubernetes环境，我们将使用Minikube。我们在[*第2章*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098)中学习了如何安装Minikube，*准备Kubernetes和Helm环境*。
- en: 'Let''s follow these steps to set up Kubernetes:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤设置Kubernetes：
- en: 'Start your Kubernetes cluster by running the following command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令启动您的Kubernetes集群：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After a short amount of time, you should see a line in the output that resembles
    the following:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过短暂的时间，您应该在输出中看到一行类似于以下内容的内容：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: "Once the Minikube cluster is up and running, create a dedicated namespace for\
    \ this chapter's exercise. Run the following command to create a namespace \L\
    called `chapter3`:"
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Minikube集群启动并运行，为本章的练习创建一个专用命名空间。运行以下命令创建一个名为`chapter3`的命名空间：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that the cluster setup is complete, let's begin the process of installing
    the WordPress chart to your Kubernetes cluster.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在集群设置已经完成，让我们开始安装WordPress图表到您的Kubernetes集群。
- en: Installing the WordPress chart
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装WordPress图表
- en: Installing a Helm chart is a simple process that can begin with the inspection
    of a chart's values. In the next section, we will inspect the values that are
    available on the WordPress chart and describe how to create a file that allows
    customizing the installation. Finally, we will install the chart and access the
    WordPress application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Helm图表是一个简单的过程，可以从检查图表的值开始。在下一节中，我们将检查WordPress图表上可用的值，并描述如何创建一个允许自定义安装的文件。最后，我们将安装图表并访问WordPress应用程序。
- en: Creating a values file for configuration
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为配置创建一个values文件
- en: You can override the values defined in charts by providing a YAML-formatted
    `values` file. In order to properly create a `values` file, you need to inspect
    the supported values that the chart provides. This can be done by running the
    `helm show values` command, as explained earlier.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过提供一个YAML格式的`values`文件来覆盖图表中定义的值。为了正确创建一个`values`文件，您需要检查图表提供的支持的值。这可以通过运行`helm
    show values`命令来完成，如前所述。
- en: 'Run the following command to inspect the WordPress chart''s values:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令检查WordPress图表的值：
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result of this command should be a long list of possible values that you
    can set, many of which already have default values set:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的结果应该是一个可能值的长列表，其中许多已经设置了默认值：
- en: '![](image/Figure_3.9.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_3.9.jpg)'
- en: Figure 3.9 – A list of values generated by running `helm show values`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 - 运行`helm show values`生成的值列表
- en: The preceding output shows the beginning of the WordPress chart's values. Many
    of these properties already have defaults set, meaning these values will represent
    how the chart is configured if they are not overridden. For example, if the `image`
    value is not overridden in a `values` file, the image used by the WordPress chart
    will use the `bitnami/wordpress` container image from the docker.io registry against
    the `5.3.2-debian-9-r0` tag.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的输出显示了WordPress图表数值的开始。这些属性中的许多已经有默认设置，这意味着如果它们没有被覆盖，这些数值将代表图表的配置方式。例如，如果在`values`文件中没有覆盖`image`数值，WordPress图表使用的图像将使用来自docker.io注册表的`bitnami/wordpress`容器图像，标签为`5.3.2-debian-9-r0`。
- en: Lines in the chart's values that begin with a hash sign (`#`) are comments.
    Comments can be used to explain a value or a block of values, or they can be used
    to comment values in order to unset them. An example of unsetting values by commenting
    them is shown in the `global` YAML stanza at the top of the preceding output.
    Each of these values will be unset by default unless set explicitly by the user.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图表数值中以井号(`#`)开头的行是注释。注释可以用来解释一个数值或一组数值，也可以用来注释数值以取消设置它们。在先前输出的顶部的`global` YAML段中显示了通过注释取消设置数值的示例。除非用户显式设置，否则这些数值默认情况下将被取消设置。
- en: 'If we explore the `helm show values` output further, we can find values that
    pertain to configuring the WordPress blog''s metadata:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步探索`helm show values`的输出，我们可以找到与配置WordPress博客元数据相关的数值：
- en: '![](image/Figure_3.10.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_3.10.jpg)'
- en: Figure 3.10 – The values returned by running the `helm show values` command
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 - 运行`helm show values`命令返回的数值
- en: 'These values appear to be important for configuring a WordPress blog. Let''s
    override them by creating a `values` file. Create a new file on your machine called
    `wordpress-values.yaml`. In that file, enter the following content:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数值似乎对配置WordPress博客很重要。让我们通过创建一个`values`文件来覆盖它们。在你的机器上创建一个名为`wordpress-values.yaml`的新文件。在文件中输入以下内容：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Feel free to get more creative with these values if you''d like. Continuing
    down the list of values from `helm show values`, there is one more important value
    that should be added to the `values` file before starting the installation, as
    shown:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以更有创意地使用这些数值。继续从`helm show values`中列出的数值列表中，还有一个重要的数值应该在开始安装之前添加到`values`文件中，如下所示：
- en: '![Figure 3.11 – The LoadBalancer value returned after running helm show values'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.11 - 运行helm show values后返回的LoadBalancer数值'
- en: '](image/Figure_3.11.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.11.jpg)'
- en: Figure 3.11 – The LoadBalancer value returned after running `helm show values`
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 - 运行`helm show values`后返回的LoadBalancer数值
- en: As described in the comments, this value states that if we are working with
    Minikube, we'll need to change the default `LoadBalancer` type to `NodePort`.
    A `LoadBalancer` service type in Kubernetes is used to provision a load balancer
    from a public cloud provider. While this value can be supported by leveraging
    the `minikube tunnel` command, setting this value to `NodePort` will instead allow
    you to directly access the WordPress application against a local port, instead
    of having to make use of the `minikube tunnel` command.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如注释所述，这个数值说明如果我们使用Minikube，我们需要将默认的`LoadBalancer`类型更改为`NodePort`。在Kubernetes中，`LoadBalancer`服务类型用于从公共云提供商中提供负载均衡器。虽然可以通过利用`minikube
    tunnel`命令来支持这个数值，但将这个数值设置为`NodePort`将允许您直接访问本地端口的WordPress应用，而不必使用`minikube tunnel`命令。
- en: 'Add this value to your `wordpress-values.yaml` file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个数值添加到你的`wordpress-values.yaml`文件中：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once this value is added to your `values` file, your complete `values` file
    should look as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个数值被添加到你的`values`文件中，你的完整的`values`文件应该如下所示：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now that the `values` file is complete, let's run the installation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`values`文件已经完成，让我们开始安装。
- en: Running the installation
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行安装
- en: 'We use `helm install` to install a Helm chart. The standard syntax is as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`helm install`来安装Helm图表。标准语法如下：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `NAME` parameter is the name you would like to give your Helm release. A
    **release** captures the Kubernetes resources that were installed with a chart
    and tracks an application's life cycle. We will explore how releases work throughout
    this chapter.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAME`参数是您想要给Helm发布的名称。**发布**捕获了使用图表安装的Kubernetes资源，并跟踪应用程序的生命周期。我们将在本章中探讨发布如何工作。'
- en: The `CHART` parameter is the name of the Helm chart that is installed. Charts
    from a repository can be installed by following the `<repo name>/<chart name>`
    form.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHART`参数是安装的Helm图表的名称。可以通过遵循`<repo name>/<chart name>`的形式安装存储库中的图表。'
- en: The `flags` option in `helm install` allows you to further customize the installation.
    `flags` allow users to define and override values, specify the namespace to work
    against, and more. The list of flags can be viewed by running `helm install --help`.
    We can pass `--help` to other commands as well to view their usage and supported
    options.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm install`中的`flags`选项允许您进一步自定义安装。`flags`允许用户定义和覆盖值，指定要处理的命名空间等。可以通过运行`helm
    install --help`来查看标志列表。我们也可以将`--help`传递给其他命令，以查看它们的用法和支持的选项。'
- en: 'Now, with a proper understanding of the `helm install` usage, run the following
    command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于`helm install`的使用有了适当的理解，运行以下命令：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This command will install a new release called `wordpress` using the `bitnami/wordpress`
    Helm chart. It will use the values defined in the `wordpress-values.yaml` file
    to customize the installation, and the chart will be installed in the `chapter3`
    namespace. It will also deploy the `8.1.0` version, as defined by the `--version`
    flag. Helm will install the latest version of the Helm chart without this flag.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将使用`bitnami/wordpress` Helm图表安装一个名为`wordpress`的新发布。它将使用`wordpress-values.yaml`文件中定义的值来自定义安装，并且图表将安装在`chapter3`命名空间中。它还将部署`8.1.0`版本，如`--version`标志所定义。没有此标志，Helm将安装Helm图表的最新版本。
- en: 'If the chart installation is successful, you should see the following output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图表安装成功，您应该看到以下输出：
- en: '![Figure 3.12 – The output of a successful WordPress chart installation'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.12–成功安装WordPress图表的输出'
- en: '](image/Figure_3.12.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.12.jpg)'
- en: Figure 3.12 – The output of a successful WordPress chart installation
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12–成功安装WordPress图表的输出
- en: This output displays information about the installation, including the name
    of the release, the time it was deployed, the namespace it was installed to, the
    status of the deployment (which is `deployed`), and the revision number (which
    is set to `1` since this was the initial installation of the release).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出显示有关安装的信息，包括发布的名称、部署时间、安装的命名空间、部署状态（为`deployed`）和修订号（由于这是发布的初始安装，因此设置为`1`）。
- en: The output also displays a list of notes related to the installation. Notes
    are used to provide users with additional information about their installation.
    In the case of the WordPress chart, these notes provide information about how
    to access and authenticate the WordPress application. While these notes appear
    directly after installation, they can be retrieved at any time with the `helm
    get notes` command, as explained in the next section.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 输出还显示了与安装相关的注释列表。注释用于为用户提供有关其安装的其他信息。在WordPress图表的情况下，这些注释提供了有关如何访问和验证WordPress应用程序的信息。尽管这些注释直接在安装后出现，但可以随时使用`helm
    get notes`命令检索，如下一节所述。
- en: With your first Helm installation complete, let's inspect the release to observe
    the resources and configurations that were applied.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 完成第一次Helm安装后，让我们检查发布以观察应用的资源和配置。
- en: Inspecting your release
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查您的发布
- en: One of the easiest ways to inspect a release and verify its installation is
    to list all the Helm releases in a given namespace. For this, Helm provides the
    `list` subcommand.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 检查发布并验证其安装的最简单方法之一是列出给定命名空间中的所有Helm发布。为此，Helm提供了`list`子命令。
- en: 'Run the following command to view the list of releases in the `chapter3` namespace:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以查看`chapter3`命名空间中的发布列表：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see only one release in this namespace, as shown:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该只在此命名空间中看到一个发布，如下所示：
- en: '![Figure 3.13 – The output from the helm list command that lists the Helm releases'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.13 - 列出Helm发布的helm list命令的输出'
- en: '](image/Figure_3.13.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.13.jpg)'
- en: Figure 3.13 – The output from the `helm list` command that lists the Helm releases
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13 - 列出Helm发布的`helm list`命令的输出
- en: 'The `list` subcommand provides the following information:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`子命令提供以下信息：'
- en: The release name
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布名称
- en: The release namespace
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布命名空间
- en: The latest revision number of the release
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布的最新修订号
- en: A timestamp of the latest revision
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新修订的时间戳
- en: The release status
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布状态
- en: The chart name
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表名称
- en: The application version
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序版本
- en: Note that the status, chart name, and application version are truncated from
    the preceding output.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，状态、图表名称和应用程序版本从前面的输出中被截断。
- en: 'While the `list` subcommand is useful for providing high-level release information,
    there are additional items that users might want to know about a particular release.
    Helm provides the `get` subcommand to provide more information about a release.
    The following list describes the commands that can be used to provide a set of
    detailed release information:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`list`子命令对于提供高级发布信息很有用，但用户可能想要了解特定发布的其他信息。Helm提供了`get`子命令来提供有关发布的更多信息。以下列表描述了可用于提供一组详细发布信息的命令：
- en: 'To get all the hooks for a named release, run the following command:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取命名发布的所有钩子，请运行以下命令：
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To get the manifest for a named release, run the following command:'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取命名发布的清单，请运行以下命令：
- en: '[PRE27]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To get the notes for a named release, run the following command:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取命名发布的注释，请运行以下命令：
- en: '[PRE28]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To get the values for a named release, run the following command:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取命名发布的值，请运行以下命令：
- en: '[PRE29]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To get all the information about a named release, run the following command:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取有关命名发布的所有信息，请运行以下命令：
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The first command from the preceding list, `helm get hooks`, is used to display
    the hooks for a given release. Hooks will be explored in more detail in [*Chapter
    5*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265), *Building Your First Helm
    Chart* and [*Chapter 6*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292), *Testing
    Helm Charts*, when you learn about building and testing Helm charts. For now,
    hooks can be thought of as the actions that Helm performs during certain phases
    of an application's life cycle.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 前面列表中的第一个命令`helm get hooks`用于显示给定发布的钩子。在[*第5章*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265)
    *构建您的第一个Helm图表*和[*第6章*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292) *测试Helm图表*中，您将了解有关构建和测试Helm图表时更详细地探讨钩子。目前，钩子可以被视为Helm在应用程序生命周期的某些阶段执行的操作。
- en: 'Run the following command to view the hooks that are included in this release:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以查看包含在此发布中的钩子：
- en: '[PRE31]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the output, you will find two Kubernetes Pod manifests with the following
    annotation:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，您将找到两个带有以下注释的Kubernetes Pod清单：
- en: '[PRE32]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This annotation denotes a hook that is run during the execution of the `test`
    subcommand, which we will explore in greater detail in [*Chapter 6*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292),
    *Testing Helm Charts*. These test hooks provide a mechanism for chart developers
    to confirm that a chart is functioning as designed and can be safely ignored by
    end users.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 此注释表示在执行`test`子命令期间运行的钩子，我们将在[*第6章*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292)中更详细地探讨，*测试Helm图表*。这些测试钩子为图表开发人员提供了一种确认图表是否按设计运行的机制，并且可以被最终用户安全地忽略。
- en: Since both of the hooks included in this chart are for testing purposes, let's
    move on to the next command from the preceding list to continue with the release
    inspection.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此图表中包含的两个钩子都是用于测试目的，让我们继续进行前面列表中的下一个命令，以继续进行发布检查。
- en: 'The `helm get manifest` command can be used to get a list of the Kubernetes
    resources that were created as part of the installation. Run this command as shown
    in the following example:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm get manifest`命令可用于获取作为安装的一部分创建的Kubernetes资源列表。请按照以下示例运行此命令：'
- en: '[PRE33]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After you run this command, you''ll see the following Kubernetes manifests:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您将看到以下Kubernetes清单：
- en: Two s`ecrets` manifests.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个`s`ecrets`清单。
- en: Two `ConfigMaps` manifests (the first is used to configure the WordPress application,
    while the second is used for testing, which is performed by chart developers and
    so can be ignored).
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个`ConfigMaps`清单（第一个用于配置WordPress应用程序，而第二个用于测试，由图表开发人员执行，因此可以忽略）。
- en: One `PersistentVolumeClaim` manifest.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`PersistentVolumeClaim`清单。
- en: Two `services` manifests.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个`services`清单。
- en: One `Deployment` manifest.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Deployment`清单。
- en: One `StatefulSet` manifest.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`StatefulSet`清单。
- en: 'From this output, you can observe where your values had an effect when configuring
    the Kubernetes resources. One example to note is within the WordPress service
    whose `type` has been set to `NodePort`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 从此输出中，您可以观察到在配置Kubernetes资源时您的值产生了影响。一个要注意的例子是WordPress服务中的`type`已设置为`NodePort`：
- en: '![Figure 3.14 – Setting type to NodePort'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.14 - 将类型设置为NodePort'
- en: '](image/Figure_3.14.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.14.jpg)'
- en: Figure 3.14 – Setting `type` to `NodePort`
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14 - 将`type`设置为`NodePort`
- en: 'You can also observe the other values that we set for the WordPress user. These
    values are defined as environment variables in the WordPress deployment, as shown:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以观察我们为WordPress用户设置的其他值。这些值在WordPress部署中被定义为环境变量，如下所示：
- en: '![Figure 3.15 – Values set as environment variables'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.15 - 值设置为环境变量'
- en: '](image/Figure_3.15.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.15.jpg)'
- en: Figure 3.15 – Values set as environment variables
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15 - 值设置为环境变量
- en: Most of the default values provided by the chart were left untouched. Those
    defaults have been applied to the Kubernetes resources and can be observed through
    the `helm get manifest` command. If these values had been changed, the Kubernetes
    resources would be configured differently.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图表提供的大多数默认值都保持不变。这些默认值已应用于Kubernetes资源，并可以通过`helm get manifest`命令观察到。如果这些值已更改，则Kubernetes资源将以不同的方式配置。
- en: 'Let''s move on to the next `get` command. The `helm get notes` command is used
    to display the notes from a Helm release. As you may recall, the release notes
    were displayed when the WordPress chart was installed. These notes provide important
    information about accessing the application and they can be displayed again by
    running the following command:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一个`get`命令。`helm get notes`命令用于显示Helm发布的注释。您可能还记得，安装WordPress图表时显示了发布说明。这些说明提供了有关访问应用程序的重要信息，可以通过运行以下命令再次显示：
- en: '[PRE34]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `helm get values` command is useful for recalling the values that were
    used for a given release. Run the following command to view the values that were
    provided in the `wordpress` release:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm get values`命令对于回忆为给定发布使用的值非常有用。运行以下命令以查看在`wordpress`发布中提供的值：'
- en: '[PRE35]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The results of this command should look familiar as they should match the values
    specified in the `wordpress-values.yaml` file:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的结果应该看起来很熟悉，因为它们应该与`wordpress-values.yaml`文件中指定的值匹配：
- en: '![Figure 3.16 – ser-supplied values in the wordpress release'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.16 - wordpress发布中的用户提供的值'
- en: '](image/Figure_3.16.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.16.jpg)'
- en: Figure 3.16 –User-supplied values in the wordpress release
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16 - wordpress发布中的用户提供的值
- en: 'While recalling the user-supplied values is useful, it may be necessary in
    some cases to return all of the values used by a release, including the defaults.
    This can be accomplished by passing in an additional `--all` flag, as shown:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然回忆用户提供的值很有用，但在某些情况下，可能需要返回发布使用的所有值，包括默认值。这可以通过传递额外的`--all`标志来实现，如下所示：
- en: '[PRE36]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'For this chart, the output will be lengthy. The first few values are shown
    in the following output:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此图表，输出将会很长。以下输出显示了前几个值：
- en: '![Figure 3.17 – A subset of all the values for the wordpress release'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.17 - wordpress发布的所有值的子集'
- en: '](image/Figure_3.17.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.17.jpg)'
- en: Figure 3.17 – A subset of all the values for the wordpress release
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17 - wordpress发布的所有值的子集
- en: 'Finally, Helm provides a `helm get all` command, which can be used to aggregate
    all of the information from the various `helm get` commands:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Helm提供了一个`helm get all`命令，可以用来聚合各种`helm get`命令的所有信息：
- en: '[PRE37]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Aside from the commands provided by Helm, the `kubectl` CLI can also be used
    to inspect an installation more closely. For example, instead of getting all of
    the Kubernetes resources created by the installation, `kubectl` can be used to
    narrow the scope down to just one type of resource, such as a deployment. To ensure
    that the resources returned belong to the Helm release, a label defined on the
    deployment can be provided to the `kubectl` command that denotes the name of the
    release. Helm charts often add an `app` label to their Kubernetes resources. Use
    the `kubectl` CLI to retrieve the deployments that contain this label by running
    the following command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Helm提供的命令之外，`kubectl` CLI也可以用于更仔细地检查安装。例如，可以使用`kubectl`来缩小范围，仅查看一种类型的资源，如部署，而不是获取安装创建的所有Kubernetes资源。为了确保返回的资源属于Helm发布，可以在部署上定义一个标签，并将其提供给`kubectl`命令，以表示发布的名称。Helm图表通常会在它们的Kubernetes资源上添加一个`app`标签。使用`kubectl`
    CLI通过运行以下命令来检索包含此标签的部署：
- en: '[PRE38]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You''ll find that the following deployment exists in the `chapter3` namespace:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现以下部署存在于`chapter3`命名空间中：
- en: '![Figure 3.18 – The wordpress deployment in the chapter3 namespace'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.18 - 章节3命名空间中的wordpress部署'
- en: '](image/Figure_3.18.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.18.jpg)'
- en: Figure 3.18 – The wordpress deployment in the `chapter3` namespace
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18 - `chapter3`命名空间中的wordpress部署
- en: Additional installation notes
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他安装说明
- en: Soon, we will explore the WordPress application that we just installed. First,
    there are several areas of consideration that should be mentioned before leaving
    behind the topic of installation.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，我们将探索刚刚安装的WordPress应用程序。首先，在离开安装主题之前，应该提到几个需要考虑的领域。
- en: The -n flag
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: -n标志
- en: The `-n` flag can be used instead of the `--namespace` flag to reduce the typing
    effort when entering commands. This holds true for the `upgrade` and `rollback`
    commands, which we will describe later in this chapter. From here on, we will
    use the `-n` flag when we denote the namespace that Helm should interact with.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`-n`标志代替`--namespace`标志，以减少输入命令时的输入工作量。这对于稍后将在本章中描述的`upgrade`和`rollback`命令也适用。从现在开始，我们将在表示Helm应该与之交互的命名空间时使用`-n`标志。
- en: The HELM_NAMESPACE environment variable
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境变量HELM_NAMESPACE
- en: You can also set an environment variable to denote the namespace that Helm should
    interact with.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以设置一个环境变量来表示Helm应该与之交互的命名空间。
- en: 'Let''s look at how we can set this environment variable on various operating
    systems:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在各种操作系统上设置这个环境变量：
- en: 'You can set the variable on macOS and Linux as follows:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在macOS和Linux上设置变量如下：
- en: '[PRE39]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Windows users can set this environment variable by running this command in
    PowerShell:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows用户可以通过在PowerShell中运行以下命令来设置此环境变量：
- en: '[PRE40]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This variable''s value can be verified by running the `helm env` command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行`helm env`命令来验证此变量的值：
- en: '[PRE41]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You should see the `HELM_NAMESPACE` variable in the resulting output. By default,
    the variable is set to `default`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在结果输出中看到`HELM_NAMESPACE`变量。默认情况下，该变量设置为`default`。
- en: In this book, we will not rely on the `HELM_NAMESPACE` variable but will instead
    pass in the `-n` flag alongside each command so that it is clearer which namespace
    we intend to work with. Providing the `-n` flag is also the best way that the
    namespace for Helm can be specified, as it ensures that we are targetting the
    namespace that we expect.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们不会依赖`HELM_NAMESPACE`变量，而是会在每个命令旁边传递`-n`标志，以便更清楚地指出我们打算使用哪个命名空间。提供`-n`标志也是指定Helm命名空间的最佳方式，因为它确保我们正在针对预期的命名空间。
- en: Choosing between --set and --values
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在--set和--values之间进行选择
- en: 'For the `install`, `upgrade`, and `rollback` commands, you can choose one of
    two ways to pass values to your chart:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`install`，`upgrade`和`rollback`命令，您可以选择两种方式之一来传递值给您的图表：
- en: 'To pass a value in from the command line, use the following command:'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从命令行中传递值，请使用以下命令：
- en: '[PRE42]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To specify values in a YAML file or URL, use the following command:'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在YAML文件或URL中指定值，请使用以下命令：
- en: '[PRE43]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In this book, we will treat the `--values` flag as the preferred method of configuring
    chart values. The reason for this is that it is easier to configure multiple values
    in this fashion. Maintaining a `values` file will also allow us to save these
    assets in a **Source Code Management** (**SCM**) system, such as `git`, which
    allows installations to be more easily reproducible. Take note that sensitive
    values, such as passwords, should never be stored in a source-control repository.
    We will cover the topic of security in [*Chapter 9*](B15458_09_Final_JM_ePub.xhtml#_idTextAnchor416),
    *Helm Security Considerations*. For the time being, it is important to remember
    not to push `secrets` into a source control repository. When secrets need to be
    provided in a chart, the recommended approach is to use the `--set` flag explicitly.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将把`--values`标志视为配置图表值的首选方法。原因是这种方式更容易配置多个值。维护一个`values`文件还将允许我们将这些资产保存在**源代码管理**（**SCM**）系统中，例如`git`，这样可以更容易地重现安装过程。请注意，诸如密码之类的敏感值不应存储在源代码控制存储库中。我们将在[*第9章*](B15458_09_Final_JM_ePub.xhtml#_idTextAnchor416)中涵盖安全性问题，*Helm安全性考虑*。目前，重要的是要记住不要将`secrets`推送到源代码控制存储库中。当需要在图表中提供secrets时，建议的方法是明确使用`--set`标志。
- en: The `--set` flag is used to pass values directly from the command line. This
    is an acceptable method for values that are simple, as well as for when there
    are few values that need to be configured. Once again, using the `--set` flag
    is not the preferred approach as it limits the ability to make the installation
    more reproducible. It is also much more difficult to configure complex values
    in this fashion, such as values in the form of lists or complex maps. There are
    other related flags, such as `--set-file` and `--set-string`; the `--set-file`
    flag is used to pass along a file that has configured values in a `key1=val1`
    and `key2=val2` format, while the `--set-string` flag is used to set all the values
    provided in a `key1=val1` and `key2=val2` format as strings.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`--set`标志用于直接从命令行传递值。这是一个可接受的方法，适用于简单的值，以及需要配置的少量值。再次强调，使用`--set`标志并不是首选方法，因为它限制了使安装更具可重复性的能力。以这种方式配置复杂值也更加困难，例如列表或复杂映射形式的值。还有其他相关的标志，如`--set-file`和`--set-string`；`--set-file`标志用于传递一个具有`key1=val1`和`key2=val2`格式的配置值的文件，而`--set-string`标志用于将提供的所有值设置为字符串的`key1=val1`和`key2=val2`格式。'
- en: With this explanation out of the way, let's explore the WordPress application
    that we just installed.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 解释到此为止，让我们来探索刚刚安装的WordPress应用程序。
- en: Accessing the WordPress application
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问WordPress应用程序
- en: 'The WordPress chart''s release notes provide four commands that you can run
    to access your WordPress application. Run the four commands listed here:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress图表的发布说明提供了四个命令，您可以运行这些命令来访问您的WordPress应用程序。运行此处列出的四个命令：
- en: 'For macOS or Linux, run the following:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS或Linux，请运行以下命令：
- en: '[PRE44]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For Windows PowerShell, run the following:'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows PowerShell，请运行以下命令：
- en: '[PRE45]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: After defining the two environment variables based on a series of `kubectl`
    queries, the resulting `echo` commands will reveal the URLs to access WordPress.
    The first URL is to view the home page and is where visitors would access your
    site. The second URL is to reach the admin console, which is used by website administrators
    to configure and manage the site content.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 根据一系列`kubectl`查询定义了两个环境变量后，结果的`echo`命令将显示访问WordPress的URL。第一个URL是查看主页的URL，访问者将通过该URL访问您的网站。第二个URL是到达管理控制台的URL，网站管理员用于配置和管理站点内容。
- en: 'Paste the first URL into a browser and you should be presented with a page
    that appears similar to the content displayed here:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 将第一个URL粘贴到浏览器中，您应该会看到一个与此处显示的内容类似的页面：
- en: '![Figure 3.19 – The WordPress blog page'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.19 – WordPress博客页面'
- en: '](image/Figure_3.19.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.19.jpg)'
- en: Figure 3.19 – The WordPress blog page
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19 – WordPress博客页面
- en: Several portions of this page may look familiar to you. First, notice that at
    the top-left corner of the screen the title of the blog is called **Learn Helm**!
    Not only does this bear a resemblance to the title of this book, but it is also
    the string you gave the `wordpressBlogName` value previously during installation.
    You can also see this value included in the copyright statement at the bottom
    of the page, **© 2020 Learn Helm!**.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 本页的几个部分可能会让你感到熟悉。首先，请注意屏幕左上角的博客标题为**学习 Helm**！这不仅与本书的标题相似，而且也是您在安装过程中先前提供的`wordpressBlogName`值。您还可以在页面底部的版权声明中看到这个值，**©
    2020 学习 Helm！**。
- en: Another value that affected the customization of the home page is `wordpressUsername`.
    Notice that the author of the **Hello world!** post that is included is **helm-user**.
    This is the name of the user that was provided to the `wordpressUsername` value
    and would appear differently if an alternative username was provided.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 影响主页定制的另一个值是`wordpressUsername`。请注意，包括的**Hello world!**帖子的作者是**helm-user**。这是提供给`wordpressUsername`值的用户的名称，如果提供了替代用户名，它将显示不同。
- en: 'The other link provided in the previous set of commands is for the admin console.
    Paste the link from the second `echo` command into a browser and you should be
    presented with the following screen:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一组命令中提供的另一个链接是管理控制台。将第二个`echo`命令中的链接粘贴到浏览器中，您将看到以下屏幕：
- en: '![Figure 3.20: The WordPress admin console login page'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.20：WordPress管理控制台登录页面'
- en: '](image/Figure_3.20.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.20.jpg)'
- en: 'Figure 3.20: The WordPress admin console login page'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20：WordPress管理控制台登录页面
- en: 'To log in to the admin console, enter the `wordpressUsername` and `wordpressPassword`
    values that you provided during the installation. These values can be seen by
    reviewing your local `wordpress-values.yaml` file. They can also be retrieved
    by running the following commands instructed by the WordPress chart''s notes:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录到管理控制台，请输入安装过程中提供的`wordpressUsername`和`wordpressPassword`值。这些值可以通过查看本地的`wordpress-values.yaml`文件来查看。它们也可以通过运行WordPress图表注释中指定的以下命令来检索：
- en: '[PRE46]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Once authenticated, the admin console dashboard is displayed, as shown:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 验证后，管理控制台仪表板将显示如下：
- en: '![Figure 3.21 – The WordPress admin console page'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.21 – WordPress管理控制台页面'
- en: '](image/Figure_3.21.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.21.jpg)'
- en: Figure 3.21 – The WordPress admin console page
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21 – WordPress管理控制台页面
- en: 'If you''re in charge of managing this WordPress site, this is where you can
    configure your site, write posts, and manage plugins. If you click on the top-right
    link that says **Howdy, helm-user**, you will be directed to the `helm-user` profile
    page. From there, you can see several of the other values that you provided during
    the installation, as shown:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您负责管理这个WordPress网站，这就是您可以配置您的网站、撰写文章和管理插件的地方。如果您点击右上角的链接，上面写着**你好，helm-user**，您将被引导到`helm-user`个人资料页面。从那里，您可以看到安装过程中提供的其他值，如下所示：
- en: '![Figure 3.22 – The WordPress profile page'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.22 – WordPress个人资料页面'
- en: '](image/Figure_3.22.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.22.jpg)'
- en: Figure 3.22 – The WordPress profile page
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22 – WordPress个人资料页面
- en: The **First Name**, **Last Name**, and **Email** fields refer to their corresponding
    `wordpressFirstname`, `wordpressLastname`, and `wordpressEmail` Helm values.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**名字**、**姓氏**和**电子邮件**字段分别指代它们对应的`wordpressFirstname`、`wordpressLastname`和`wordpressEmail`
    Helm值。'
- en: Feel free to continue exploring your WordPress instance. Once complete, continue
    to the next section to learn how to perform an upgrade on a Helm release.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 随时继续探索您的WordPress实例。完成后，继续下一节，了解如何对Helm版本执行升级。
- en: Upgrading the WordPress release
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级WordPress版本
- en: Upgrading a release refers to the process of modifying the values that a release
    was installed with or upgrading to a newer version of the chart. In this section,
    we will upgrade the WordPress release by configuring additional values around
    the WordPress replica and resource requirements.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 升级版本是指修改安装版本的值或升级到图表的新版本的过程。在本节中，我们将通过配置围绕WordPress副本和资源需求的附加值来升级WordPress版本。
- en: Modifying the Helm values
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改Helm值
- en: It is common for Helm charts to expose values to configure the number of instances
    of an application and their related set of resources. The following screenshots
    illustrate several portions of the `helm show values` command that relate to the
    values used for this purpose.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Helm图表通常会公开值来配置应用程序的实例数量及其相关的资源集。以下截图展示了与此目的相关的`helm show values`命令的几个部分。
- en: 'The first value, `replicaCount`, is straightforward to set. Since `replica`
    is a Kubernetes term that describes the number of Pods needed to deploy an application,
    it''s implied that `replicaCount` is used to specify the number of application
    instances that are deployed as part of a release:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值`replicaCount`设置起来很简单。由于`replica`是一个描述部署应用程序所需的Pod数量的Kubernetes术语，因此可以推断出`replicaCount`用于指定作为发布的一部分部署的应用程序实例的数量：
- en: '![Figure 3.23 – replicaCount in the helm show values command'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.23 - `helm show values`命令中的replicaCount'
- en: '](image/Figure_3.23.png)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.23.png)'
- en: Figure 3.23 – `replicaCount` in the `helm show values` command
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23 - `helm show values`命令中的`replicaCount`
- en: 'Add the following line to your `wordpress-values.yaml` file to increase the
    number of replicas from `1` to `2`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到您的`wordpress-values.yaml`文件中，将副本数从`1`增加到`2`：
- en: '[PRE47]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The second value that we need to define refers to a set of values under the
    `resources` YAML stanza:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义的第二个值是`resources` YAML部分下的一组值：
- en: '![Figure 3.24 – The values under the resources stanza'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.24 - 资源部分的值'
- en: '](image/Figure_3.24.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.24.jpg)'
- en: Figure 3.24 – The values under the resources stanza
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 - 资源部分的值
- en: 'Values can be indented, as in the `resources` stanza, to provide a logical
    grouping. Under the `resources` stanza is a `requests` stanza, which is used to
    configure the `memory` and `cpu` values that Kubernetes will allocate to the WordPress
    application. Let''s modify these values during the upgrade by decreasing the memory
    request to `256Mi` (256 mebibytes) and the `cpu` request to `100m` (100 millicores).
    Add these modifications to the `wordpress-values.yaml` file, as shown:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 值可以缩进，就像`resources`部分一样，以提供逻辑分组。在`resources`部分下是一个`requests`部分，用于配置Kubernetes将分配给WordPress应用程序的`memory`和`cpu`值。让我们在升级过程中修改这些值，将内存请求减少到`256Mi`（256
    mebibytes），将`cpu`请求减少到`100m`（100 millicores）。将这些修改添加到`wordpress-values.yaml`文件中，如下所示：
- en: '[PRE48]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'After defining these two new values, your entire `wordpress-values.yaml` file
    will appear as follows:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了这两个新值后，您的整个`wordpress-values.yaml`文件将如下所示：
- en: '[PRE49]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Once the `values` file has been updated with these new values, you can run the
    `helm upgrade` command to upgrade the release, as we will discuss in the next
    section.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`values`文件使用这些新值进行了更新，您可以运行`helm upgrade`命令来升级发布，我们将在下一节讨论。
- en: Running the upgrade
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行升级
- en: 'The `helm upgrade` command is almost identical to `helm install` in basic syntax,
    as you can see in the following example:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm upgrade`命令在基本语法上几乎与`helm install`相同，如下例所示：'
- en: '[PRE50]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: While `helm install` expects you to provide a name for a new release, `helm
    upgrade` expects you to provide the name of an already-existing release that should
    be upgraded.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`helm install`希望您为新发布提供一个名称，但`helm upgrade`希望您提供应该升级的已存在发布的名称。
- en: 'Values defined in a `values` file can be provided using the `--values` flag,
    identical to that of the `helm install` command. Run the following command to
    upgrade the WordPress release with a new set of values:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在`values`文件中定义的值可以使用`--values`标志提供，与`helm install`命令相同。运行以下命令，使用一组新值升级WordPress发布：
- en: '[PRE51]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Once the command is executed, you should see an output similar to that of `helm
    install` depicted in an earlier section:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行命令，您应该看到类似于`helm install`的输出，如前面的部分所示：
- en: '![Figure 3.25 – The output for helm upgrade'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.25 - `helm upgrade`的输出'
- en: '](image/Figure_3.25.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.25.jpg)'
- en: Figure 3.25 – The output for `helm upgrade`
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 - `helm upgrade`的输出
- en: 'You should also see the `wordpress` Pods restarting with by running the following
    command:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该通过运行以下命令看到`wordpress` Pods正在重新启动：
- en: '[PRE52]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In Kubernetes, new Pods are created when a deployment is modified. The same
    behavior can be observed in Helm. The values that were added during the upgrade
    introduced a configuration change of the WordPress deployment and new WordPress
    Pods were created, as a result, with the updated configuration. These changes
    can be observed using the same `helm get` `manifest` and `kubectl get` `deployment`
    commands that were used earlier after the installation.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，当部署被修改时，会创建新的Pod。在Helm中也可以观察到相同的行为。在升级过程中添加的值引入了WordPress部署的配置更改，并且创建了新的WordPress
    Pods，因此使用更新后的配置。这些更改可以使用之前安装后使用的相同的`helm get` `manifest`和`kubectl get` `deployment`命令来观察。
- en: In the next section, we'll perform a couple more upgrades to demonstrate how
    values can sometimes behave differently during an upgrade.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将进行更多的升级操作，以演示值在升级过程中有时可能会有不同的行为。
- en: Reusing and resetting values during an upgrade
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在升级过程中重用和重置值
- en: The `helm upgrade` command includes two additional flags that are used to manipulate
    values that are not present in the `helm install` command.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm upgrade`命令包括两个额外的标志，用于操作在`helm install`命令中不存在的值。'
- en: 'Let''s look at these flags now:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看这些标志：
- en: '`--reuse-values`: When upgrading, reuse the last release''s values.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--reuse-values`：在升级时重用上一个发布的值。'
- en: '`--reset-values`: When upgrading, reset the values to the chart defaults.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--reset-values`：在升级时，将值重置为图表默认值。'
- en: 'If an upgrade is performed without providing values with the `--set` or `--values`
    flags, the `--reuse-values` flag is added by default. In other words, the same
    values that were used by the previous release will be used again during the upgrade
    if no values are provided:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在升级时没有使用`--set`或`--values`标志提供值，则默认添加`--reuse-values`标志。换句话说，如果没有提供值，升级期间将再次使用先前发布使用的相同值：
- en: 'Run another `upgrade` command without specifying any values:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`upgrade`命令，而不指定任何值：
- en: '[PRE53]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Run the `helm get values` command to inspect the values used in the upgrade:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`helm get values`命令来检查升级中使用的值：
- en: '[PRE54]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Notice that the values displayed are identical to the previous upgrade:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，显示的值与先前的升级是相同的：
- en: '![Figure 3.26 – The output of the helm get values'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.26 - `helm get values`的输出'
- en: '](image/Figure_3.26.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.26.jpg)'
- en: Figure 3.26 – The output of the `helm get values`
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 - `helm get values`的输出
- en: Different behavior can be observed when values are provided from the command
    line during an upgrade. If values are passed via the `--set` or `--values` flags,
    all of the chart's values that are not provided are reset to default.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 当在升级过程中通过命令行提供值时，可以观察到不同的行为。如果通过`--set`或`--values`标志传递值，则所有未提供的图表值都将重置为默认值。
- en: 'Run another upgrade by providing a single value with `--set`:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '通过使用`--set`提供单个值再次进行升级： '
- en: '[PRE55]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'After the upgrade, run the `helm get values` command:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级后，运行`helm get values`命令：
- en: '[PRE56]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The output will declare that the only user-supplied value was the value for
    `replicaCount`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将声明，唯一由用户提供的值是`replicaCount`的值：
- en: '![Figure 3.27 – The output for replicaCount'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.27 - `replicaCount`的输出'
- en: '](image/Figure_3.27.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.27.jpg)'
- en: Figure 3.27 – The output for `replicaCount`
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27 - `replicaCount`的输出
- en: When at least one value is provided during an upgrade, Helm automatically applies
    the `--reset-values` flag. This causes all of the values to be set back to their
    default values, except for the individual properties provided with the `--set`
    or `--values` flags.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级过程中，如果至少提供了一个值，Helm会自动应用`--reset-values`标志。这会导致所有值都被设置回它们的默认值，除了使用`--set`或`--values`标志提供的单个属性。
- en: Users can manually provide the `--reset-values` or `--reuse-values` flags to
    explicitly determine the behavior of values during an upgrade. Use the `--reset-values`
    flag if you would like the next upgrade to reset each value to its default before
    overriding it from the command line. Provide the `--reuse-values` flag if you
    would like to reuse each of the values from a previous revision while setting
    different values from the command line. To help simplify the management of values
    during an upgrade, try to keep your values in a file that can be used to declaratively
    set values for each upgrade.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以手动提供`--reset-values`或`--reuse-values`标志，明确确定升级过程中值的行为。如果您希望下一次升级在从命令行覆盖值之前将每个值重置为默认值，请使用`--reset-values`标志。如果您希望在从命令行设置不同值的同时重用先前修订的每个值，请提供`--reuse-values`标志。为了简化升级过程中值的管理，请尝试将值保存在一个文件中，该文件可用于声明性地为每次升级设置值。
- en: If you have been following along with each of the commands provided in this
    chapter, you should now have four revisions of the WordPress release. This fourth
    revision is not quite in the way we want the application to be configured, as
    it only specifies the `replicaCount` value because most of the values were set
    back to their defaults. In the next section, we will explore how the WordPress
    release can be rolled back to the stable version that contains the set of desired
    values.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一直在本章中使用提供的每个命令，现在应该有WordPress发布的四个修订版本。这第四个修订版本并不完全符合我们希望配置应用程序的方式，因为大多数值都被设置回默认值，只指定了`replicaCount`值。在下一节中，我们将探讨如何将WordPress发布回滚到包含所需值集的稳定版本。
- en: Rolling back the WordPress release
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回滚WordPress发布
- en: While moving forward is preferred, there are some occasions where it makes more
    sense to return to a previous version of the application. The `helm rollback`
    command exists to satisfy this use case. Let's roll back the WordPress release
    to a previous state.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管向前推进是首选，但有些情况下，回到应用程序的先前版本更有意义。`helm rollback`命令存在是为了满足这种情况。让我们将WordPress发布回滚到先前的状态。
- en: Inspecting the WordPress history
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查WordPress历史
- en: Every Helm release has a history of **revisions**. A revision is used to track
    the values, Kubernetes resources, and chart version that were used in a particular
    release version. A new revision is created when a chart is installed, upgraded,
    or rolled back. Revision data is saved in Kubernetes secrets by default (other
    options are ConfigMap or local memory, determined by the `HELM_DRIVER` environment
    variable). This allows your Helm release to be managed and interacted with by
    different users on the Kubernetes cluster, provided they have the **Role-Based
    Access Control** (**RBAC**) that allows them to view or modify resources in your
    namespace.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Helm发布都有一个**修订**历史。修订用于跟踪特定发布版本中使用的值、Kubernetes资源和图表版本。当安装、升级或回滚图表时，将创建新的修订。修订数据默认保存在Kubernetes秘密中（其他选项是ConfigMap或本地内存，由`HELM_DRIVER`环境变量确定）。这允许不同用户在Kubernetes集群上管理和交互您的Helm发布，前提是他们具有允许他们查看或修改命名空间中的资源的**基于角色的访问控制**（**RBAC**）。
- en: 'The revision secrets can be observed by using `kubectl` to get the secrets
    from the `chapter3` namespace:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`kubectl`从`chapter3`命名空间获取秘密来观察修订秘密：
- en: '[PRE57]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This will return all of the secrets, but you should see these four in the output:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回所有的秘密，但您应该在输出中看到这四个：
- en: '[PRE58]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Each of these secrets corresponds with an entry of the release''s revision
    history, which can be viewed by running the `helm history` command:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这些秘密中的每一个都对应于发布的修订历史的条目，可以通过运行`helm history`命令来查看：
- en: '[PRE59]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This command will display a table of each revision, similar to the following
    (some columns have been omitted for readability):'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将显示每个修订的表格，类似于以下内容（为了可读性，某些列已被省略）：
- en: '[PRE60]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In this output, each revision has a number, along with the time it was updated,
    the status, the chart, the app version of the upgrade, and the description of
    the upgrade. Revisions that have a status of `superseded` were upgraded. The revision
    that says `deployed` is the currently-deployed revision. Other statuses include
    `pending` and `pending_upgrade`, which means the installation or upgrade is currently
    in progress. `failed` refers to a particular revision that has failed to install
    or be upgraded and `unknown` corresponds to a revision that had an unknown state.
    It's unlikely you will ever encounter a release with a state of `unknown`.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在此输出中，每个修订都有一个编号，以及更新时间、状态、图表、升级的应用程序版本和升级的描述。状态为`superseded`的修订已经升级。状态为`deployed`的修订是当前部署的修订。其他状态包括`pending`和`pending_upgrade`，表示安装或升级当前正在进行中。`failed`指的是特定修订未能安装或升级，`unknown`对应于具有未知状态的修订。你不太可能遇到状态为`unknown`的发布。
- en: 'The `helm get` commands described previously can be used against a revision
    number by specifying the `--revision` flag. For this rollback, let''s determine
    the release that had the full set of desired values. As you may recall, the current
    revision, `revision 4`, only contains the `replicaCount` value, but `revision
    3` should contain the desired values. This can be verified by running the `helm
    get values` command with the `--revision` flag:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 先前描述的`helm get`命令可以通过指定`--revision`标志针对修订号使用。对于此回滚，让我们确定具有完整所需值集的发布。您可能还记得，当前修订`修订4`只包含`replicaCount`值，但`修订3`应该包含所需的值。可以通过使用`--revision`标志运行`helm
    get values`命令来验证这一点：
- en: '[PRE61]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The full list of values is presented by inspecting this revision:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查此修订，可以呈现完整的值列表：
- en: '![Figure 3.28 – The output of checking a specific revision'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.28 - 检查特定修订的输出'
- en: '](image/Figure_3.28.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.28.jpg)'
- en: Figure 3.28 – The output of checking a specific revision
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.28 - 检查特定修订的输出
- en: It is possible to run the other `helm get` commands against a revision number
    to perform a further inspection. If necessary, the `helm get manifest` command
    can also be executed against `revision 3` to check the state of the Kubernetes
    resources that would be restored.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 可以针对修订号运行其他`helm get`命令进行进一步检查。如果需要，还可以针对`修订3`执行`helm get manifest`命令来检查将要恢复的Kubernetes资源的状态。
- en: In the next section, we will execute the rollback.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将执行回滚。
- en: Running the rollback
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行回滚
- en: 'The `helm rollback` command has the following syntax:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm rollback`命令具有以下语法：'
- en: '[PRE62]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Users provide the name of the release and the desired revision number to roll
    a Helm release back to a previous point in time. Run the following command to
    execute the rollback of WordPress to `revision 3`:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 用户提供发布的名称和要回滚到的期望修订号，以将Helm发布回滚到以前的时间点。运行以下命令来执行将WordPress回滚到`修订3`：
- en: '[PRE63]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `rollback` subcommand provides a simple output, printing the following
    message:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`rollback`子命令提供了一个简单的输出，打印以下消息：'
- en: '[PRE64]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This rollback can be observed in the release history by running the `helm`
    `history` command:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行`helm` `history`命令在发布历史中观察到此回滚：
- en: '[PRE65]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In the release history, you will notice that a fifth revision was added with
    a status of `deployed` and a description of `Rollback to 3`. When an application
    is rolled back, it adds a new revision to the release history. This is not to
    be confused with an upgrade. The highest revision number simply denotes the currently
    deployed release. Be sure to check a revision's description to determine whether
    it was created by an upgrade or a rollback.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布历史中，您会注意到添加了第五个状态为`deployed`的修订版本，并且描述为`回滚到3`。当应用程序回滚时，它会向发布历史中添加一个新的修订版本。这不应与升级混淆。最高的修订版本号仅表示当前部署的发布。请务必检查修订版本的描述，以确定它是由升级还是回滚创建的。
- en: 'You can get this release''s values to ensure that the rollback now uses the
    desired values by running `helm get values` again:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过再次运行`helm get values`来获取此发布的值，以确保回滚现在使用所需的值：
- en: '[PRE66]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The output will show the values from the latest stable release:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示最新稳定发布的值：
- en: '![Figure 3.29 – The values from the latest stable release'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.29 - 来自最新稳定发布的值'
- en: '](image/Figure_3.29.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.29.jpg)'
- en: Figure 3.29 – The values from the latest stable release
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.29 - 来自最新稳定发布的值
- en: You may notice that we did not explicitly set the chart version or the release's
    values in the `rollback` subcommand. This is because the `rollback` subcommand
    is not designed to accept these inputs; it is designed to roll back a chart to
    a previous revision and leverage that revision's chart version and values. Note
    that the `rollback` subcommand should not be part of everyday Helm practices and
    that it should be reserved only for emergencies where the current state of an
    application is unstable and must be reverted to a previously stable point.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，在`rollback`子命令中，我们没有明确设置图表版本或发布的值。这是因为`rollback`子命令不是设计为接受这些输入；它是设计为将图表回滚到先前的修订版本并利用该修订版本的图表版本和值。请注意，`rollback`子命令不应成为日常Helm实践的一部分，它应该仅用于应急情况，其中应用程序的当前状态不稳定并且必须恢复到先前的稳定点。
- en: If you have successfully rolled back the WordPress release, you are nearing
    the end of this chapter's exercise. The final step is to remove the WordPress
    application from the Kubernetes cluster by leveraging the `uninstall` subcommand,
    which we will describe in the next section.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功回滚了WordPress发布，那么您即将完成本章的练习。最后一步是通过利用`uninstall`子命令从Kubernetes集群中删除WordPress应用程序，我们将在下一节中描述。
- en: Uninstalling the WordPress release
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卸载WordPress发布
- en: Uninstalling a Helm release means deleting the Kubernetes resources that it
    manages. In addition, the `uninstall` command deletes the release's history. While
    this is often what we want, specifying the `--keep-history` flag will instruct
    Helm to retain the release history.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载Helm发布意味着删除它管理的Kubernetes资源。此外，`uninstall`命令还会删除发布的历史记录。虽然这通常是我们想要的，但指定`--keep-history`标志将指示Helm保留发布历史记录。
- en: 'The syntax for the `uninstall` command is very simple:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`uninstall`命令的语法非常简单：'
- en: '[PRE67]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Uninstall the WordPress release by running the `helm uninstall` command:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`helm uninstall`命令卸载WordPress发布：
- en: '[PRE68]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Once uninstalled, you will see the following message:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载后，您将看到以下消息：
- en: '[PRE69]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'You will also notice that the `wordpress` release no longer exists in the `chapter3`
    namespace:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到`wordpress`发布现在不再存在于`chapter3`命名空间中：
- en: '[PRE70]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The output will be an empty table. You can also confirm that the release is
    no longer present by attempting to use `kubectl` to get the WordPress deployments:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是一个空表。您还可以通过尝试使用`kubectl`来获取WordPress部署来确认该发布不再存在：
- en: '[PRE71]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: As expected, there are no more WordPress deployments available.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，不再有WordPress部署可用。
- en: '[PRE72]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'You will, however, notice that there is still a `PersistentVolumeClaim` command
    available in the namespace:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您会注意到在命名空间中仍然有一个`PersistentVolumeClaim`命令可用：
- en: '![Figure 3.30 – Output showing PersistentVolumeClaim'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.30 - 显示PersistentVolumeClaim的输出'
- en: '](image/Figure_3.30.jpg)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.30.jpg)'
- en: Figure 3.30 – Output showing `PersistentVolumeClaim`
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.30 - 显示`PersistentVolumeClaim`的输出
- en: 'This `PersistentVolumeClaim` resources was not deleted because it was created
    in the background by a `StatefulSet`. In Kubernetes, the `PersistentVolumeClaim`
    resources that are created by a `StatefulSet` are not automatically removed if
    the `StatefulSet` is deleted. During the `helm uninstall` process, the `StatefulSet`
    was deleted but the associated `PersistentVolumeClaim` was not. This is what we
    would expect. The `PersistentVolumeClaim` resource can be deleted manually with
    the following command:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`PersistentVolumeClaim`资源没有被删除，因为它是由`StatefulSet`在后台创建的。在Kubernetes中，如果删除了`StatefulSet`，则由`StatefulSet`创建的`PersistentVolumeClaim`资源不会自动删除。在`helm
    uninstall`过程中，`StatefulSet`被删除，但相关的`PersistentVolumeClaim`没有被删除。这是我们所期望的。可以使用以下命令手动删除`PersistentVolumeClaim`资源：
- en: '[PRE73]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Now that we've installed and uninstalled Wordpress, let's clean up your Kubernetes
    environment so that we have a clean setup for the exercises we will carry out
    in later chapters of this book.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并卸载了WordPress，让我们清理一下您的Kubernetes环境，以便在本书后面的章节中进行练习时有一个干净的设置。
- en: Cleaning up your environment
  id: totrans-433
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理您的环境
- en: 'To clean up your Kubernetes environment, you can remove this chapter''s namespace
    by running the following command:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 要清理您的Kubernetes环境，可以通过运行以下命令删除本章的命名空间：
- en: '[PRE74]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'After the `chapter3` namespace is deleted, you can also stop the Minikube VM:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`chapter3`命名空间后，您还可以停止Minikube虚拟机：
- en: '[PRE75]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This will shut down the VM but will retain its state so that you can quickly
    begin working again in the next exercise.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 这将关闭虚拟机，但将保留其状态，以便您可以在下一个练习中快速开始工作。
- en: Summary
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to install a Helm chart and manage its life
    cycle. We began by searching Helm Hub for a WordPress chart to install. After
    locating a chart, the repository containing the chart was added by following the
    instructions from its Helm Hub page. We then proceeded to inspect the WordPress
    chart to create a set of values that overrides their defaults. These values were
    saved to a `values` file, which was then provided during the installation.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何安装Helm图表并管理其生命周期。我们首先在Helm Hub上搜索要安装的WordPress图表。在找到图表后，按照其Helm Hub页面上的说明添加了包含该图表的存储库。然后，我们开始检查WordPress图表，以创建一组覆盖其默认值的数值。这些数值被保存到一个`values`文件中，然后在安装过程中提供。
- en: After the chart was installed, we used `helm upgrade` to upgrade the release
    by providing additional values. We performed a rollback after this with `helm
    rollback` to restore the chart to a previous state. Finally, we removed the WordPress
    release at the end of the exercise with `helm uninstall`.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 图表安装后，我们使用`helm upgrade`通过提供额外的数值来升级发布。然后我们使用`helm rollback`进行回滚，将图表恢复到先前的状态。最后，在练习结束时使用`helm
    uninstall`删除了WordPress发布。
- en: This chapter taught you how to leverage Helm as an end user and chart consumer.
    You used Helm as a package manager to install a Kubernetes application to your
    cluster. You also managed the life cycle of the application by performing upgrades
    and a rollback. Understanding this workflow is essential to managing installations
    with Helm.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 本章教会了您如何作为最终用户和图表消费者利用Helm。您使用Helm作为包管理器将Kubernetes应用程序安装到集群中。您还通过执行升级和回滚来管理应用程序的生命周期。了解这个工作流程对于使用Helm管理安装是至关重要的。
- en: In the next chapter, we will explore the concept and structure of a Helm chart
    in greater detail to begin learning how charts can be created.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地探讨Helm图表的概念和结构，以开始学习如何创建图表。
- en: Further reading
  id: totrans-444
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about adding repositories locally, inspecting charts, and using
    the four life cycle commands used throughout this chapter (`install`, `upgrade`,
    `rollback`, and `uninstall`), go to [https://helm.sh/docs/intro/using_helm/](https://helm.sh/docs/intro/using_helm/).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关本地添加存储库、检查图表以及使用本章中使用的四个生命周期命令（`install`、`upgrade`、`rollback`和`uninstall`）的更多信息，请访问[https://helm.sh/docs/intro/using_helm/](https://helm.sh/docs/intro/using_helm/)。
- en: Questions
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Helm Hub? How can a user interact with it to find charts and chart repositories?
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm Hub是什么？用户如何与其交互以查找图表和图表存储库？
- en: What is the difference between the `helm get` and `helm show` sets of commands?
    When would you use one set of commands over the other?
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm get`和`helm show`命令集之间有什么区别？在何时使用其中一个命令集而不是另一个？'
- en: What is the difference between the `--set` and `--values` flags in the `helm
    install` and `helm upgrade` commands? What are the benefits of using one over
    the other?
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm install`和`helm upgrade`命令中的`--set`和`--values`标志有什么区别？使用其中一个的好处是什么？'
- en: What command can be used to provide the list of revisions for a release?
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令可用于提供发布的修订列表？
- en: What happens by default when you upgrade a release without providing any values?
    How does this behavior differ to when you do provide values for an upgrade?
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级发布时默认情况下会发生什么，如果不提供任何值？这种行为与提供升级值时有何不同？
- en: Imagine you have five revisions of a release. What would the `helm history`
    command show after you roll back the release to `revision 3`?
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您有五个发布的修订版本。在将发布回滚到“修订版本3”后，`helm history`命令会显示什么？
- en: Imagine you want to view all of the releases deployed to a Kubernetes namespace.
    What command should you run?
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您想查看部署到Kubernetes命名空间的所有发布。您应该运行什么命令？
- en: Imagine you run `helm repo add` to add a chart repository. What command can
    you run to list all of the charts under that repository?
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您运行`helm repo add`来添加一个图表存储库。您可以运行什么命令来列出该存储库下的所有图表？
