- en: Chapter 3. Creating and Utilizing Custom Entities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 创建和利用自定义实体
- en: The CryENGINE entity system provides the means for creating everything from
    simple physicalized objects to complex weather simulation managers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE实体系统提供了创建从简单的物理对象到复杂的天气模拟管理器的一切的手段。
- en: 'In this chapter we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将：
- en: Elaborate on the basic concept and implementation of the entity system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细介绍实体系统的基本概念和实现
- en: Create our first custom entity in Lua, C#, and C++
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Lua、C#和C++中创建我们的第一个自定义实体
- en: Learn about the game object system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解游戏对象系统
- en: Introducing the entity system
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍实体系统
- en: The entity system exists to spawn and manage entities in the game world. Entities
    are logical containers, allowing drastic changes in behavior at runtime. For example,
    an entity can change its model, position, and orientation at any point in the
    game.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 实体系统存在是为了在游戏世界中生成和管理实体。实体是逻辑容器，允许在运行时进行行为上的重大改变。例如，实体可以在游戏的任何时刻改变其模型、位置和方向。
- en: Consider this; every item, weapon, vehicle, and even player that you have interacted
    with in the engine is an entity. The entity system is one of the most important
    modules present in the engine, and is dealt regularly by programmers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下；你在引擎中与之交互的每个物品、武器、车辆，甚至玩家都是实体。实体系统是引擎中最重要的模块之一，经常由程序员处理。
- en: The entity system, accessible via the `IEntitySystem` interface, manages all
    entities in the game. Entities are referenced to using the `entityId` type definition,
    which allows 65536 unique entities at any given time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`IEntitySystem`接口访问的实体系统管理游戏中的所有实体。实体使用`entityId`类型定义进行引用，允许在任何给定时间有65536个唯一实体。
- en: If an entity is marked for deletion, for example, `IEntity::Remove(bool bNow
    = false)`, the entity system will delete this prior to updating at the start of
    the next frame. If the `bNow` parameter is set to true, the entity will be removed
    right away.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实体被标记为删除，例如`IEntity::Remove(bool bNow = false)`，实体系统将在下一帧开始更新之前删除它。如果`bNow`参数设置为true，则实体将立即被移除。
- en: Entity classes
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体类
- en: Entities are simply instances of an entity class, represented by the `IEntityClass`
    interface. Each entity class is assigned a name that identifies it, for example,
    SpawnPoint.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实体只是实体类的实例，由`IEntityClass`接口表示。每个实体类都被分配一个标识其的名称，例如，SpawnPoint。
- en: Classes can be registered via `IEntityClassRegistry::RegisterClass`, or via
    `IEntityClassRegistry::RegisterStdClass` to use the default `IEntityClass` implementation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 类可以通过`IEntityClassRegistry::RegisterClass`注册，或者通过`IEntityClassRegistry::RegisterStdClass`注册以使用默认的`IEntityClass`实现。
- en: Entities
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体
- en: The `IEntity` interface is used to access the entity implementation itself.
    The core implementation of `IEntity` is contained within `CryEntitySystem.dll`,
    and cannot be modified. Instead, we are able to extend entities using game object
    extensions (have a look at the *Game object extensions* section in this chapter)
    and custom entity classes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEntity`接口用于访问实体实现本身。`IEntity`的核心实现包含在`CryEntitySystem.dll`中，不能被修改。相反，我们可以使用游戏对象扩展（查看本章中的*游戏对象扩展*部分）和自定义实体类来扩展实体。'
- en: entityId
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: entityId
- en: Each entity instance is assigned a unique identifier, which persists for the
    duration of the game session.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个实体实例都被分配一个唯一的标识符，该标识符在游戏会话的持续时间内保持不变。
- en: EntityGUID
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: EntityGUID
- en: Besides the `entityId` parameter, entities are also given globally unique identifiers,
    which unlike `entityId` can persist between game sessions, in the case of saving
    games and more.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`entityId`参数外，实体还被赋予全局唯一标识符，与`entityId`不同，这些标识符可以在游戏会话之间持续存在，例如在保存游戏等情况下。
- en: Game objects
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏对象
- en: When entities need extended functionality, they can utilize game objects and
    game object extensions. This allows for a larger set of functionality that can
    be shared by any entity.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当实体需要扩展功能时，它们可以利用游戏对象和游戏对象扩展。这允许更多的功能可以被任何实体共享。
- en: Game objects allow the handling of binding entities to the network, serialization,
    per-frame updates, and the ability to utilize existing (or create new) game object
    extensions such as Inventory and AnimatedCharacter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏对象允许处理将实体绑定到网络、序列化、每帧更新以及利用现有（或创建新的）游戏对象扩展，如库存和动画角色。
- en: Typically in CryENGINE development, game objects are only necessary for more
    important entity implementations, such as actors. The actor system is explained
    more in depth in [Chapter 5](ch05.html "Chapter 5. Creating Custom Actors"), *Creating
    Custom Actors*, along with the `IActor` game object extension.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在CryENGINE开发中，游戏对象通常只对更重要的实体实现（如演员）是必要的。演员系统在[第5章](ch05.html "第5章. 创建自定义演员")中有更详细的解释，以及`IActor`游戏对象扩展。
- en: The entity pool system
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体池系统
- en: The entity pool system allows "pooling" of entities, allowing efficient control
    of entities that are currently being processed. This system is commonly accessed
    via flowgraph, and allows the disabling /enabling groups of entities at runtime
    based on events.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实体池系统允许对实体进行“池化”，从而有效地控制当前正在处理的实体。这个系统通常通过流图访问，并允许根据事件在运行时基于事件禁用/启用实体组。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Pools are also used for entities that need to be created and released frequently,
    for example, bullets.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 池还用于需要频繁创建和释放的实体，例如子弹。
- en: Once an entity has been marked as handled by the pool system, it will be hidden
    in the game by default. Until the entity has been prepared, it will not exist
    in the game world. It is also ideal to free the entity once it is no longer needed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实体被池系统标记为已处理，它将默认隐藏在游戏中。在实体准备好之前，它不会存在于游戏世界中。一旦不再需要，最好释放实体。
- en: For example, if you have a group of AI that only needs to be activated when
    the player reaches a predefined checkpoint trigger, this can be set up using `AreaTrigger`
    (and its included flownode) and the `Entity:EntityPool` flownode.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果有一组AI只需要在玩家到达预定义的检查点触发器时被激活，可以使用`AreaTrigger`（及其包含的流节点）和`Entity:EntityPool`流节点来设置。
- en: Creating a custom entity
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义实体
- en: Now that we've learned the basics of the entity system, it's time to create
    our first entity. For this exercise, we'll be demonstrating the ability to create
    an entity in Lua, C#, and finally C++.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了实体系统的基础知识，是时候创建我们的第一个实体了。在这个练习中，我们将演示在Lua、C#和最后C++中创建实体的能力。
- en: Creating an entity using Lua
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Lua创建实体
- en: 'Lua entities are fairly simple to set up, and revolve around two files: the
    entity definition, and the script itself. To create a new Lua entity, we''ll first
    have to create the entity definition in order to tell the engine where the script
    is located:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Lua实体相当简单设置，并围绕两个文件展开：实体定义和脚本本身。要创建新的Lua实体，我们首先必须创建实体定义，以告诉引擎脚本的位置：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Simply save this file as `MyLuaEntity.ent` in the `Game/Entities/` directory,
    and the engine will search for the script at `Scripts/Entities/Others/MyLuaEntity.lua`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将此文件保存为`MyLuaEntity.ent`，放在`Game/Entities/`目录中，引擎将在`Scripts/Entities/Others/MyLuaEntity.lua`中搜索脚本。
- en: 'Now we can move on to creating the Lua script itself! To start, create the
    script at the path set previously and add an empty table with the same name as
    your entity:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续创建Lua脚本本身！首先，在之前设置的路径创建脚本，并添加一个与实体同名的空表：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When parsing the script, the first thing the engine does is search for a table
    with the same name as the entity, as you defined it in the `.ent` definition file.
    This main table is where we can store variables, Editor properties, and other
    engine information.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析脚本时，引擎首先搜索与实体相同名称的表，就像您在`.ent`定义文件中定义的那样。这个主表是我们可以存储变量、编辑器属性和其他引擎信息的地方。
- en: 'For example, we can add our own property by adding a string variable:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过添加一个字符串变量来添加我们自己的属性：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to create property categories by adding subtables within the
    Properties table. This is useful for organizational purposes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在属性表中添加子表来创建属性类别。这对于组织目的很有用。
- en: 'With the changes done, you should see the following screenshot when spawning
    an instance of your class in the Editor, via **RollupBar** present to the far
    right of the Editor by default:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 完成更改后，当在编辑器中生成类的实例时，您应该看到以下屏幕截图，通过**RollupBar**默认情况下位于编辑器的最右侧：
- en: '![Creating an entity using Lua](img/5909_03_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用Lua创建实体](img/5909_03_01.jpg)'
- en: Common Lua entity callbacks
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见的Lua实体回调
- en: 'The script system provides a set of callbacks that can be utilized to trigger
    specific logic on entity events. For example, the `OnInit` function is called
    on the entity when it is initialized:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本系统提供了一组回调，可以用于触发实体事件上的特定逻辑。例如，`OnInit`函数在实体初始化时被调用：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating an entity in C#
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C#中创建实体
- en: The third-party extension, **CryMono** allows the creation of entities in .NET,
    which leads us to demonstrate the capability of creating our very own entity in
    C#.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方扩展**CryMono**允许在.NET中创建实体，这使我们能够演示在C#中创建我们自己的实体的能力。
- en: To start, open the `Game/Scripts/Entities` directory, and create a new file
    called `MyCSharpEntity.cs`. This file will contain our entity code, and will be
    compiled at runtime when the engine is launched.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开`Game/Scripts/Entities`目录，并创建一个名为`MyCSharpEntity.cs`的新文件。这个文件将包含我们的实体代码，并且在引擎启动时将在运行时编译。
- en: Now, open the script (`MyCSharpEntity.cs`) IDE of your choice. We'll be using
    Visual Studio in order to provide **IntelliSense** and code highlighting.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开您选择的脚本（`MyCSharpEntity.cs`）IDE。我们将使用Visual Studio来提供**IntelliSense**和代码高亮。
- en: Once opened, let's create a basic skeleton entity. We'll need to add a reference
    to the CryENGINE namespace, in which the most common CryENGINE types are stored.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开，让我们创建一个基本的骨架实体。我们需要添加对CryENGINE命名空间的引用，其中存储了最常见的CryENGINE类型。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, save the file and start the Editor. Your entity should now appear in **RollupBar**,
    inside the **Default** category. Drag **MyEntity** into the viewport in order
    to spawn it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存文件并启动编辑器。您的实体现在应该出现在**RollupBar**中的**默认**类别中。将**MyEntity**拖到视口中以生成它：
- en: '![Creating an entity in C#](img/5909_03_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![在C#中创建实体](img/5909_03_02.jpg)'
- en: We use the entity attribute (`[Entity]`) as a way of providing additional information
    for the entity registration progress, for example, using the `Category` property
    will result in using a custom Editor category, instead of **Default**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用实体属性（`[Entity]`）作为为实体注册进度提供额外信息的一种方式，例如，使用`Category`属性将导致使用自定义编辑器类别，而不是**默认**。
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Adding Editor properties
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加编辑器属性
- en: Editor properties allow the level designer to supply parameters to the entity,
    perhaps to indicate the size of a trigger area, or to specify an entity's default
    health value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器属性允许关卡设计师为实体提供参数，也许是为了指示触发区域的大小，或者指定实体的默认健康值。
- en: 'In CryMono, this can be done by decorating supported types (have a look at
    the following code snippet) with the `EditorProperty` attribute. For example,
    if we want to add a new `string` property:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在CryMono中，可以通过使用`EditorProperty`属性来装饰支持的类型（查看以下代码片段）。例如，如果我们想添加一个新的`string`属性：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now when you start the Editor and drag **MyCSharpEntity** into the viewport,
    you should see **MyProperty** appear in the lower part of **RollupBar**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您启动编辑器并将**MyCSharpEntity**拖到视口中时，您应该看到**MyProperty**出现在**RollupBar**的下部。
- en: The `MyProperty` string variable in C# will be automatically updated when the
    user edits this via the Editor. Remember that Editor properties will be saved
    with the level, allowing the entity to use Editor properties defined by the level
    designer even in pure game mode.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: C#中的`MyProperty`字符串变量将在用户通过编辑器编辑时自动更新。请记住，编辑器属性将与关卡一起保存，允许实体在纯游戏模式中使用关卡设计师定义的编辑器属性。
- en: '![Adding Editor properties](img/5909_03_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![添加编辑器属性](img/5909_03_03.jpg)'
- en: Property folders
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性文件夹
- en: 'As with Lua scripts, it is possible for CryMono entities to place Editor properties
    in folders for organizational purposes. In order to create folders, you can utilize
    the `Folder` property of the `EditorProperty` attribute as shown:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与Lua脚本一样，CryMono实体可以将编辑器属性放置在文件夹中以进行组织。为了创建文件夹，您可以使用`EditorProperty`属性的`Folder`属性，如下所示：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You now know how to create entities with custom Editor properties using CryMono!
    This is very useful when creating simple gameplay elements for level designers
    to place and modify at runtime, without having to reach for the nearest programmer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何使用CryMono创建具有自定义编辑器属性的实体！这在为关卡设计师创建简单的游戏元素并在运行时进行放置和修改时非常有用，而无需寻找最近的程序员。
- en: Creating an entity in C++
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C++中创建实体
- en: Creating an entity in C++ is slightly more complex than making one using Lua
    or C#, and can be done differently based on what the entity is required for. For
    this example, we'll be detailing the creation of a custom entity class by implementing
    `IEntityClass`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中创建实体比使用Lua或C#更复杂，可以根据实体所需的内容进行不同的操作。在本例中，我们将详细介绍通过实现`IEntityClass`来创建自定义实体类。
- en: Creating a custom entity class
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义实体类
- en: Entity classes are represented by the `IEntityClass` interface, which we will
    derive from and register via `IEntityClassRegistry::RegisterClass(IEntityClass
    *pClass)`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类由`IEntityClass`接口表示，我们将从中派生并通过`IEntityClassRegistry::RegisterClass(IEntityClass
    *pClass)`进行注册。
- en: To start off, let's create the header file for our entity class. Right-click
    on your project in Visual Studio, or any of its filters, and go to **Add** | **New
    Item** in the context menu. When prompted, create your header file (`.h`). We'll
    be calling `CMyEntityClass`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为我们的实体类创建头文件。在Visual Studio中右键单击项目或其任何筛选器，并转到上下文菜单中的**添加** | **新项目**。在提示时，创建您的头文件（.h）。我们将称之为`CMyEntityClass`。
- en: 'Now, open the generated `MyEntityClass.h` header file, and create a new class
    which derives from `IEntityClass`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开生成的`MyEntityClass.h`头文件，并创建一个从`IEntityClass`派生的新类：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that we have the class set up, we'll need to implement the pure virtual
    methods we inherit from `IEntityClass` in order for our class to compile successfully.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经设置了类，我们需要实现从`IEntityClass`继承的纯虚拟方法，以便我们的类能够成功编译。
- en: 'For most of the methods, we can simply return a null pointer, zero, or an empty
    string. However, there are a couple of methods which we have to handle for the
    class to function:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数方法，我们可以简单地返回空指针、零或空字符串。但是，有一些方法我们必须处理才能使类正常运行：
- en: '`Release()`: This is called when the class should be released, should simply
    perform "delete this;" to destroy the class'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Release()`: 当类应该被释放时调用，应该简单执行"delete this;"来销毁类'
- en: '`GetName()`: This should return the name of the class'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetName()`: 这应该返回类的名称'
- en: '`GetEditorClassInfo()`: This should return the `ClassInfo` struct, containing
    Editor category, helper, and icon strings to the Editor'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetEditorClassInfo()`: 这应该返回包含编辑器类别、帮助和图标字符串的`ClassInfo`结构到编辑器'
- en: '`SetEditorClassInfo()`: This is called when something needs to update the Editor
    `ClassInfo` explained just now.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SetEditorClassInfo()`: 当需要更新刚才解释的编辑器`ClassInfo`时调用'
- en: '`IEntityClass` is the bare minimum for an entity class, and does not support
    Editor properties yet (we will cover this a bit further later).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEntityClass`是实体类的最低限度，尚不支持编辑器属性（稍后我们将稍后介绍）。'
- en: 'To register an entity class, we need to call `IEntityClassRegistry::RegisterClass`.
    This has to be done prior to the `IGameFramework::CompleteInit` call in `CGameStartup`.
    We''ll be doing it inside `GameFactory.cpp`, in the `InitGameFactory` function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册实体类，我们需要调用`IEntityClassRegistry::RegisterClass`。这必须在`IGameFramework::CompleteInit`调用之前完成。我们将在`GameFactory.cpp`中的`InitGameFactory`函数中执行：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Implementing a property handler
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现属性处理程序
- en: In order to handle Editor properties, we'll have to extend our `IEntityClass`
    implementation with a new implementation of `IEntityPropertyHandler`. The property
    handler is responsible for handling the setting, getting, and serialization of
    properties.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理编辑器属性，我们将不得不通过新的`IEntityPropertyHandler`实现来扩展我们的`IEntityClass`实现。属性处理程序负责处理属性的设置、获取和序列化。
- en: Start by creating a new header file named `MyEntityPropertyHandler.h`. Following
    is the bare minimum implementation of `IEntityPropertyHandler`. In order to properly
    support properties, you'll need to implement `SetProperty` and `GetProperty`,
    as well as `LoadEntityXMLProperties` (the latter being required to read property
    values from the `Level` XML).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个名为`MyEntityPropertyHandler.h`的新头文件。以下是`IEntityPropertyHandler`的最低限度实现。为了正确支持属性，您需要实现`SetProperty`和`GetProperty`，以及`LoadEntityXMLProperties`（后者需要从`Level`
    XML中读取属性值）。
- en: 'Then create a new class which derives from `IEntityPropertyHandler`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个从`IEntityPropertyHandler`派生的新类：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In order for the new class to compile, you''ll need to implement the pure virtual
    methods defined in `IEntityPropertyHandler`. Methods crucial for the property
    handler to work properly can be seen as shown:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使新类编译，您需要实现`IEntityPropertyHandler`中定义的纯虚拟方法。关键的方法可以如下所示：
- en: '`LoadEntityXMLProperties`: This is called by the Launcher when a level is being
    loaded, in order to read property values of entities saved by the Editor'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoadEntityXMLProperties`: 当加载关卡时，启动器会调用此方法，以便读取编辑器保存的实体的属性值'
- en: '`GetPropertyCount`: This should return the number of properties registered
    with the class'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetPropertyCount`: 这应该返回注册到类的属性数量'
- en: '`GetPropertyInfo`: This is called to get the property information at the specified
    index, most importantly when the Editor gets the available properties'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetPropertyInfo`: 这是在编辑器获取可用属性时调用的，应该返回指定索引处的属性信息'
- en: '`SetProperty`: This is called to set the property value for an entity'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SetProperty`: 这是用来设置实体的属性值的'
- en: '`GetProperty`: This is called to get the property value of an entity'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetProperty`: 这是用来获取实体的属性值的'
- en: '`GetDefaultProperty`: This is called to retrieve the default property value
    at the specified index'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetDefaultProperty`：调用此方法以检索指定索引处的默认属性值'
- en: To make use of the new property handler, create an instance of it (passing the
    requested properties to its constructor) and return the newly created handler
    inside `IEntityClass::GetPropertyHandler()`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用新的属性处理程序，创建一个实例（将请求的属性传递给其构造函数）并在`IEntityClass::GetPropertyHandler()`中返回新创建的处理程序。
- en: We now have a basic entity class implementation, which can be easily extended
    to support Editor properties. This implementation is very extensible, and can
    be used for vast amount of purposes, for example, the C# script seen later has
    simply automated this process, lifting the responsibility of so much code from
    the programmer.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了一个基本的实体类实现，可以很容易地扩展以支持编辑器属性。这种实现非常灵活，可以用于各种用途，例如，稍后看到的C#脚本只是简单地自动化了这个过程，减轻了程序员的很多代码责任。
- en: Entity flownodes
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体流节点
- en: In the previous chapter, we covered the flowgraph system, as well as the creation
    of flownodes. You may have noticed that when right-clicking inside a graph, one
    of the context options is **Add Selected Entity**. This functionality allows you
    to select an entity inside a level, and then add its entity flownode to the flowgraph.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了流图系统以及流节点的创建。您可能已经注意到，在图表内右键单击时，上下文选项之一是**添加所选实体**。此功能允许您在级别内选择一个实体，然后将其实体流节点添加到流图中。
- en: By default, the entity flownode doesn't contain any ports, and will therefore
    be mostly useless as shown to the right.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，实体流节点不包含任何端口，因此在右侧显示时基本上没有用处。
- en: However, we can easily create our own entity flownode that targets the entity
    we selected in all three languages.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以很容易地创建自己的实体流节点，以在所有三种语言中都针对我们选择的实体。
- en: '![Entity flownodes](img/5909_03_04.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![实体流节点](img/5909_03_04.jpg)'
- en: Creating an entity flownode in Lua
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Lua中创建实体流节点
- en: 'By extending the entity we created in the *Creating an entity using Lua* section,
    we can add its very own entity flownode:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展我们在*使用Lua创建实体*部分中创建的实体，我们可以添加其自己的实体流节点：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Creating an entity flownode in Lua](img/5909_03_05.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![在Lua中创建一个实体流节点](img/5909_03_05.jpg)'
- en: We just created an entity flownode for our `MyLuaEntity` class. If you start
    the Editor, spawn your entity, select it and then click on **Add Selected Entity**
    in your flowgraph, you should see the node appearing.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们的`MyLuaEntity`类创建了一个实体流节点。如果您启动编辑器，生成您的实体，然后在流图中单击**添加所选实体**，您应该会看到节点出现。
- en: Creating an entity flownode using C#
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用C#创建实体流节点
- en: 'Creating an entity flownode in C# is very simple due to being almost exactly
    identical in implementation as the regular flownodes. To create a new flownode
    for your entity, simply derive from `EntityFlowNode<T>`, where `T` is your entity
    class name:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于实现几乎与常规流节点完全相同，因此在C#中创建实体流节点非常简单。要为您的实体创建一个新的流节点，只需从`EntityFlowNode<T>`派生，其中`T`是您的实体类名称：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Creating an entity flownode using C#](img/5909_03_06.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用C#创建实体流节点](img/5909_03_06.jpg)'
- en: We just created an entity flownode in C#. This allows us to easily use what
    we learned from the previous chapter and utilize `TargetEntity` in our new node's
    logic.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在C#中创建了一个实体流节点。这使我们可以轻松地使用我们从上一章学到的内容，并在新节点的逻辑中利用`TargetEntity`。
- en: Creating an entity flownode in C++
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C++中创建实体流节点
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This section assumes that you read *Creating a custom node in C++* section from
    [Chapter 2](ch02.html "Chapter 2. Visual Scripting with Flowgraph"), *Visual Scripting
    with Flowgraph*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假定您已阅读了[第2章](ch02.html "第2章。流图的可视化脚本")中的*在C++中创建自定义节点*部分。
- en: In short, entity flownodes are identical in implementation to regular nodes.
    The difference being the way the node is registered, as well as the prerequisite
    for the entity to support `TargetEntity` (refer to the previous chapter for more
    information).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，实体流节点在实现上与常规节点相同。不同之处在于节点的注册方式，以及实体支持`TargetEntity`的先决条件（有关更多信息，请参阅上一章）。
- en: Registering the entity node
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册实体节点
- en: 'We utilize same methods for registering entity nodes as before, the only difference
    being that the category has to be entity, and the node name has to be the same
    as the entity it belongs to:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与以前注册实体节点相同的方法，唯一的区别是类别必须是实体，节点名称必须与其所属的实体相同：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The final code
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最终代码
- en: 'Finally, from what we''ve learned now and in the previous chapter, we can easily
    create our first entity flownode in C++:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，根据我们现在和上一章学到的知识，我们可以很容易地在C++中创建我们的第一个实体流节点：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Game objects
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏对象
- en: As mentioned at the start of the chapter, game objects are used when more advanced
    functionality is required of an entity, for example, if an entity needs to be
    bound to the network.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在本章开头提到的，当实体需要绑定到网络时，游戏对象用于需要更高级功能的实体。
- en: There are two ways of implementing game objects, one being by registering the
    entity directly via `IGameObjectSystem::RegisterExtension` (and thereby having
    the game object automatically created on entity spawn), and the other is by utilizing
    the `IGameObjectSystem::CreateGameObjectForEntity` method to create a game object
    for an entity at runtime.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种实现游戏对象的方法，一种是通过`IGameObjectSystem::RegisterExtension`直接注册实体（从而在实体生成时自动创建游戏对象），另一种是通过利用`IGameObjectSystem::CreateGameObjectForEntity`方法在运行时为实体创建游戏对象。
- en: Game object extensions
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏对象扩展
- en: It is possible to extend game objects by creating extensions, allowing the developer
    to hook into a number of entity and game object callbacks. This is, for example,
    how actors are implemented by default, something we'll be covering in [Chapter
    5](ch05.html "Chapter 5. Creating Custom Actors"), *Creating Custom Actors*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建扩展来扩展游戏对象，可以让开发人员钩入多个实体和游戏对象回调。例如，这就是演员默认实现的方式，我们将在[第5章](ch05.html "第5章。创建自定义演员")中进行介绍，*创建自定义演员*。
- en: We will be creating our game object extension in C++. The CryMono entity we
    created earlier in the chapter was made possible by a custom game object extension
    contained in `CryMono.dll`, and it is currently not possible to create further
    extensions via C# or Lua.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在C++中创建我们的游戏对象扩展。我们在本章前面创建的CryMono实体是由`CryMono.dll`中包含的自定义游戏对象扩展实现的，目前不可能通过C#或Lua创建更多的扩展。
- en: Creating a game object extension in C++
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在C++中创建游戏对象扩展
- en: CryENGINE provides a helper class template for creating a game object extension,
    called `CGameObjectExtensionHelper`. This helper class is used to avoid duplicating
    common code that is necessary for most game object extensions, for example, basic
    RMI functionality (we'll cover them in [Chapter 8](ch08.html "Chapter 8. Multiplayer
    and Networking"), *Multiplayer and Networking*).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE提供了一个辅助类模板用于创建游戏对象扩展，称为`CGameObjectExtensionHelper`。这个辅助类用于避免重复常见代码，这些代码对于大多数游戏对象扩展是必要的，例如基本的RMI功能（我们将在[第8章](ch08.html
    "第8章 多人游戏和网络")中介绍，*多人游戏和网络*）。
- en: To properly implement `IGameObjectExtension`, simply derive from the `CGameObjectExtensionHelper`
    template, specifying the first template argument as the class you're writing (in
    our case, `CMyEntityExtension`) and the second as `IGameObjectExtension` you're
    looking to derive from.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确实现`IGameObjectExtension`，只需从`CGameObjectExtensionHelper`模板派生，指定第一个模板参数为你正在编写的类（在我们的例子中为`CMyEntityExtension`），第二个参数为你要派生的`IGameObjectExtension`。
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Normally, the second argument is `IGameObjectExtension`, but it can be different
    for specific implementations such as `IActor` (which in turn derives from `IGameObjectExtension`).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，第二个参数是`IGameObjectExtension`，但对于特定的实现，比如`IActor`（它又从`IGameObjectExtension`派生而来），可能会有所不同。
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that you''ve derived from `IGameObjectExtension`, you''ll need to implement
    all its pure virtual methods to spare yourself from a bunch of unresolved externals.
    Most can be overridden with empty methods that return nothing or false, while
    more important ones have been listed as shown:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经从`IGameObjectExtension`派生出来，你需要实现所有它的纯虚方法，以避免一堆未解析的外部。大多数可以用空方法重写，返回空或false，而更重要的方法已经列出如下：
- en: 'Init: This is called to initialize the extension. Simply perform `SetGameObject(pGameObject)`;
    and then return true.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Init: 这是用来初始化扩展的。只需执行`SetGameObject(pGameObject)`；然后返回true。'
- en: '`NetSerialize`: This is called to serialize things over the network. This will
    be covered in [Chapter 8](ch08.html "Chapter 8. Multiplayer and Networking"),
    *Multiplayer and Networking*, but for now, it will simply return true.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NetSerialize`: 这是用来在网络上序列化东西的。这将在[第8章](ch08.html "第8章 多人游戏和网络")中介绍，*多人游戏和网络*，但现在它只会简单地返回true。'
- en: 'You''ll also need to implement `IGameObjectExtensionCreatorBase` in a new class
    that will serve as an extension factory for your entity. When the extension is
    about to be activated, our factory''s `Create()` method will be called in order
    to obtain the new extension instance:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在一个新的类中实现`IGameObjectExtensionCreatorBase`，这个类将作为你实体的扩展工厂。当扩展即将被激活时，我们工厂的`Create()`方法将被调用以获取新的扩展实例：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that you''ve created both your game object extension implementation, as
    well as the game object creator, simply register the extension:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了你的游戏对象扩展实现，以及游戏对象创建者，只需注册扩展：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By passing the entity class description to `IGameObjectSystem::RegisterExtension`,
    you're telling it to create a dummy entity class for you. If you have already
    done so, simply pass the last parameter `pEntityCls` as `NULL` to make it use
    the class you registered before.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将实体类描述传递给`IGameObjectSystem::RegisterExtension`，你告诉它为你创建一个虚拟实体类。如果你已经这样做了，只需将最后一个参数`pEntityCls`传递为`NULL`，以便它使用你之前注册的类。
- en: Activating our extension
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活我们的扩展
- en: In order to activate your game object extension, you'll need to call `IGameObject::ActivateExtension`
    after the entity is spawned. One way to do this is using the entity system sink,
    `IEntitySystemSink`, and listening to the `OnSpawn` events.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激活你的游戏对象扩展，你需要在实体生成后调用`IGameObject::ActivateExtension`。一种方法是使用实体系统接收器`IEntitySystemSink`，并监听`OnSpawn`事件。
- en: We've now registered our own game object extension. When the entity is spawned,
    our entity system sink's `OnSpawn` method will be called, allowing us to create
    an instance of our game object extension.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经注册了我们自己的游戏对象扩展。当实体生成时，我们的实体系统接收器的`OnSpawn`方法将被调用，允许我们创建我们的游戏对象扩展的实例。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how the core entity system is implemented and
    exposed and created our own custom entity.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了核心实体系统的实现和暴露，并创建了我们自己的自定义实体。
- en: You should now be aware of the process of creating accompanying flownodes for
    your entities, and be aware of the working knowledge surrounding game objects
    and their extensions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该了解为你的实体创建附加的流程节点，并了解围绕游戏对象及其扩展的工作知识。
- en: We'll be covering existing game object extensions and entity implementations
    in latter chapters, for example, by creating our very own actor and implementing
    basic AI.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中介绍现有的游戏对象扩展和实体实现，例如，通过创建我们自己的角色并实现基本的AI。
- en: If you want to get more familiar with the entity system, why not try and create
    a slightly more complex entity on your own?
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更熟悉实体系统，为什么不试着自己创建一个稍微复杂的实体呢？
- en: In the next chapter, we'll be covering the game rules system.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍游戏规则系统。
