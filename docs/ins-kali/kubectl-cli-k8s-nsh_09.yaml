- en: '*Chapter 6*: Debugging an Application'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：调试应用程序'
- en: There are times when you need to debug an application to troubleshoot production-related
    issues. So far in this book, we have learned how to install, update, and delete
    an application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您需要调试应用程序以解决与生产相关的问题。到目前为止，在本书中，我们已经学会了如何安装、更新和删除应用程序。
- en: In this chapter, we are going to cover application debugging by using `kubectl
    describe` to show the resolved object configuration and desired state before the
    actual events in the pod. Then we are going to check pod logs for errors, and
    finally, executing in a container (executing into a container means getting shell
    access in the running container) and running a command there.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用`kubectl describe`来进行应用程序调试，以显示解析后的对象配置和期望状态，然后再实际事件发生前检查pod日志中的错误，最后，在容器中执行命令（在运行的容器中执行命令意味着在运行的容器中获取shell访问）并在那里运行命令。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Describing a pod
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述一个pod
- en: Checking pod logs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查pod日志
- en: Executing a command in a running container
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行的容器中执行命令
- en: Describing a pod
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述一个pod
- en: 'In the previous chapter, we deleted a running application. For this chapter,
    then, let''s install another one. For the purpose of debugging an application,
    we are going to use the `bitnami/postgresql` Docker image from Docker Hub ([https://hub.docker.com/r/bitnami/postgresql](https://hub.docker.com/r/bitnami/postgresql))
    and we are going to install an application using the `deployment-postgresql.yaml`
    file:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们删除了一个正在运行的应用程序。因此，在本章中，让我们安装另一个。为了调试应用程序，我们将使用Docker Hub（[https://hub.docker.com/r/bitnami/postgresql](https://hub.docker.com/r/bitnami/postgresql)）上的`bitnami/postgresql`
    Docker镜像，并使用`deployment-postgresql.yaml`文件安装应用程序：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install the PostgreSQL deployment, run the following commands:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装PostgreSQL部署，请运行以下命令：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Oops, what happened there? By running the `$ kubectl get pods` command we are
    seeing an `ErrImagePull` error. Let''s look into it. In *Chapter 1*, *Introducing
    and Installing kubectl*, we learned about the `kubectl describe` command; let''s
    use it to check the pod status. To describe the PostgreSQL pod, run the following
    command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，发生了什么？通过运行`$ kubectl get pods`命令，我们看到了一个`ErrImagePull`错误。让我们来看看。在*第1章*，*介绍和安装kubectl*中，我们学习了`kubectl
    describe`命令；让我们使用它来检查pod状态。要描述PostgreSQL pod，请运行以下命令：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get the following output of `Events` after running the preceding command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前述命令后，我们得到了以下`Events`的输出：
- en: '![Figure 6.1 – The output for the describe command'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 - 描述命令的输出'
- en: '](image/B16411_06_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_06_001.jpg)'
- en: Figure 6.1 – The output for the describe command
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - 描述命令的输出
- en: In the preceding screenshot, as the output of `kubectl pod describe` is quite
    big, we are only showing the `Events` part, which we need to check to troubleshoot
    the issue.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，由于`kubectl pod describe`的输出非常大，我们只显示了我们需要检查以解决问题的`Events`部分。
- en: 'Right here, we see why it fails to pull the image:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里，我们看到为什么无法拉取镜像：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Looking at the preceding error, we can see that we have referenced the wrong
    tag for the `postgresql` Docker image. Let''s change it to `10.13.0` in the `deployment-postgresql.yaml`
    file and run `kubectl apply` again. To update the `postgresql` deployment, run
    the following commands:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 看着前面的错误，我们可以看到我们引用了错误的标签`postgresql` Docker镜像。让我们在`deployment-postgresql.yaml`文件中将其更改为`10.13.0`，然后再次运行`kubectl
    apply`。要更新`postgresql`部署，请运行以下命令：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We are seeing a new pod, `postgresql-56dcb95567-8rdmd`, which is crashing too.
    To check this `postgresql` pod, run the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了一个新的pod，`postgresql-56dcb95567-8rdmd`，它也崩溃了。要检查这个`postgresql` pod，请运行以下命令：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We get the following output after running the preceding command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前述命令后，我们得到了以下输出：
- en: '![Figure 6.2 – Checking the postgresql pod with fixed Docker tag'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 - 检查带有固定Docker标签的postgresql pod'
- en: '](image/B16411_06_002.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_06_002.jpg)'
- en: Figure 6.2 – Checking the postgresql pod with fixed Docker tag
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 - 检查带有固定Docker标签的postgresql pod
- en: Hmm, this time, `Events` does not list much information as to why the `postgresql`
    pod is in the `CrashLoopBackOff` state, as the `bitnami/postgresql:10.13.0` image
    was pulled successfully.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这一次，“Events”没有列出关于为什么`postgresql` pod处于`CrashLoopBackOff`状态的太多信息，因为`bitnami/postgresql:10.13.0`镜像已成功拉取。
- en: Let's learn what to do about this issue in the next section by checking the
    pod's logs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中学习如何处理这个问题，通过检查pod的日志。
- en: Checking pod logs
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查pod日志
- en: When `kubectl describe pod` does not show any information about an error, we
    can use another `kubectl` command, that is, `logs`. The `kubectl logs` command
    allows us to print container logs, and we can also view them in real time as well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当`kubectl describe pod`没有显示任何关于错误的信息时，我们可以使用另一个`kubectl`命令，即`logs`。`kubectl
    logs`命令允许我们打印容器日志，并且我们也可以实时查看它们。
- en: Tip
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can use `kubectl logs` with a flag to print the logs for the previous instance
    of the container in a pod if it exists:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在的话，您可以使用带有标志的`kubectl logs`来打印容器在pod中的先前实例的日志：
- en: '`$ kubectl logs -p some_pod`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ kubectl logs -p some_pod`'
- en: 'Now, let''s check out this command on the crashing `postgresql` pod and try
    to find out what is going on with it – why it is failing. To get the pods list
    and check the pod logs, run the following commands:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在崩溃的`postgresql` pod上检查这个命令，并尝试找出它失败的原因。要获取pod列表并检查pod日志，请运行以下命令：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output for the preceding commands is shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 6.3 – Getting error logs for the postgresql pod'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 - 获取postgresql pod的错误日志'
- en: '](image/B16411_06_003.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_06_003.jpg)'
- en: Figure 6.3 – Getting error logs for the postgresql pod
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 - 获取postgresql pod的错误日志
- en: Aha! As you can see from the preceding screenshot, the `postgresql` pod is failing
    as it needs the `POSTGRESQL_PASSWORD` environment variable to be set with some
    password, or the `ALLOW_EMPTY_PASSWORD` environment variable set to `yes`, which
    will allow the container to be started with the blank password.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！正如您从上面的截图中所看到的，`postgresql` pod失败了，因为它需要设置`POSTGRESQL_PASSWORD`环境变量为一些密码，或者将`ALLOW_EMPTY_PASSWORD`环境变量设置为`yes`，这将允许容器以空密码启动。
- en: 'Let''s update the `deployment-postgresql.yaml` file with the `POSTGRESQL_PASSWORD`
    environment variable set with some password:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一些密码更新`deployment-postgresql.yaml`文件中的`POSTGRESQL_PASSWORD`环境变量设置：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To update the `postgresql` deployment, run the following commands:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新`postgresql`部署，请运行以下命令：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see in the preceding code block, the `postgresql` deployment was
    updated, a new pod was created successfully, and the pod that was crashing has
    been terminated.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的代码块中所看到的，`postgresql`部署已经更新，成功创建了一个新的pod，并且崩溃的pod已经被终止。
- en: Important note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Best practices do not recommend storing passwords directly in deployments and
    other Kubernetes templates, but storing them in Kubernetes Secrets instead.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践不建议直接在部署和其他Kubernetes模板中存储密码，而是应该将它们存储在Kubernetes Secrets中。
- en: 'Now let''s see what the `postgresql` pod logs show in real time. To check the
    pod logs in real time, run the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实时查看`postgresql` pod日志。要实时检查pod日志，请运行以下命令：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 6.4 – Reviewing the logs for postgresql'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 - 查看postgresql日志'
- en: '](image/B16411_06_004.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_06_004.jpg)'
- en: Figure 6.4 – Reviewing the logs for postgresql
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 - 查看postgresql日志
- en: Nice, the PostgreSQL deployment is up and running and is ready to accept connections.
    By leaving that command running, we can review the logs in real time when we need
    to see what is going on in the PostgreSQL container.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，PostgreSQL部署已经启动并准备好接受连接。通过保持该命令运行，我们可以在需要查看PostgreSQL容器中发生了什么时，实时查看日志。
- en: Executing a command in a running container
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在运行的容器中执行命令
- en: So, we have learned how to troubleshoot pods with `pod describe` and `logs`,
    but there might be some cases when you want to do even more advanced troubleshooting,
    such as checking some config files or running some commands in the container.
    These things can be done using the `kubectl exec` command, which will allow `exec`
    into the container and have an interactive session in the container or run your
    commands as well.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经学会了如何使用`pod describe`和`logs`来排除故障，但在某些情况下，您可能希望进行更高级的故障排除，例如检查一些配置文件或在容器中运行一些命令。这些操作可以使用`kubectl
    exec`命令完成，该命令将允许`exec`进入容器并在容器中进行交互会话或运行您的命令。
- en: 'Let''s see how to get the `postgresql.conf` file content using the `kubectl
    exec` command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`kubectl exec`命令获取`postgresql.conf`文件的内容：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding command will show the `postgresql.conf` file content so you can
    check the PostgreSQL settings, which in this case, are set by default.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将显示`postgresql.conf`文件的内容，以便您可以检查PostgreSQL的设置，这些设置在这种情况下是默认设置。
- en: Next, let's `exec` into the `postgresql` pod, open a shell, and then run the
    `psql` command to check for available databases.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们`exec`进入`postgresql` pod，打开一个shell，然后运行`psql`命令来检查可用的数据库。
- en: 'To execute into the `postgresql` pod please run the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入`postgresql` pod，请运行以下命令：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output for the preceding command is shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上面命令的输出显示在下面的屏幕截图中：
- en: '![Figure 6.5 – Execute into the postgresql pod'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 - 进入postgresql pod'
- en: '](image/B16411_06_005.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_06_005.jpg)'
- en: Figure 6.5 – Execute into the postgresql pod
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 - 进入postgresql pod
- en: As you see in the preceding screenshot, we used `exec` to get into the `postgresql`
    pod using the `bash` shell, then we ran `psql –Upostgres` to log in to the `postgresql`
    instance, before checking for available databases with `\l`. This is a nice example
    of how to use the interactive `exec` command and run different commands inside
    of a container.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的屏幕截图中所看到的，我们使用`exec`进入`postgresql` pod，使用`bash` shell，然后运行`psql -Upostgres`登录`postgresql`实例，然后使用`\l`检查可用的数据库。这是一个很好的例子，说明了如何使用交互式`exec`命令并在容器内运行不同的命令。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to describe the pod, check logs, and troubleshoot
    issues, and also covered how to create a Kubernetes deployment from scratch for
    the `postgresql` Docker image.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何描述pod，检查日志和故障排除，并且还介绍了如何从头开始为`postgresql` Docker镜像创建Kubernetes部署。
- en: The troubleshooting skills of using `kubectl describe`, `logs`, and `exec` are
    very useful and allow you to know what is happening in an application pod. These
    techniques can be used to help you to fix any issues you encounter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl describe`，`logs`和`exec`的故障排除技能非常有用，可以让您了解应用程序pod中发生了什么。这些技术可以帮助您解决遇到的任何问题。
- en: In the next chapter, we're going to learn how to extend `kubectl` with plugins.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用插件扩展`kubectl`。
