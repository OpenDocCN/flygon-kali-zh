- en: Chapter 4. Connecting NumPy with the Rest of the World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：将 NumPy 与世界的其他地方连接
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下秘籍：
- en: Using the buffer protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓冲区协议
- en: Using the array interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数组接口
- en: Exchanging data with MATLAB and Octave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 MATLAB 和 Octave 交换数据
- en: Installing RPy2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 RPy2
- en: Interfacing with R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 R 交互
- en: Installing JPype
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 JPype
- en: Sending a NumPy array to JPype
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 NumPy 数组发送到 JPype
- en: Installing Google App Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装谷歌应用引擎
- en: Deploying the NumPy code on the Google Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在谷歌云上部署 NumPy 代码
- en: Running the NumPy code in a PythonAnywhere web console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PythonAnywhere Web 控制台中运行 NumPy 代码
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is about interoperability. We have to keep reminding ourselves
    that NumPy is not alone in the scientific (Python) software ecosystem. Working
    together with SciPy and matplotlib is pretty easy. Protocols also exist for interoperability
    with other Python packages. Outside of the Python ecosystem languages such as
    Java, R, C, and Fortran are pretty popular. We will go into the details of exchanging
    data with these environments.
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于互操作性的。 我们必须不断提醒自己，NumPy 在科学（Python）软件生态系统中并不孤单。 与 SciPy 和 Matplotlib 一起工作非常容易。
    还存在用于与其他 Python 包互操作性的协议。 在 Python 生态系统之外，Java，R，C 和 Fortran 等语言非常流行。 我们将详细介绍与这些环境交换数据的细节。
- en: Also, we will discuss how to get our NumPy code on the cloud. This is a continuously
    evolving technology in a fast-moving space. Many options are available for you,
    of which Google App Engine and PythonAnywhere will be covered.
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将讨论如何在云上获取 NumPy 代码。 这是在快速移动的空间中不断发展的技术。 您可以使用许多选项，其中包括谷歌应用引擎和 PythonAnywhere。
- en: Using the buffer protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用缓冲区协议
- en: C-based Python objects have a so-called **buffer interface**. Python objects
    can expose their data for direct access without the need to copy it. The buffer
    protocol enables us to communicate with other pieces of Python software such as
    the **Python Imaging Library** (**PIL**).
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 C 的  Python 对象具有所谓的**缓冲区接口**。 Python 对象可以公开其数据以进行直接访问，而无需复制它们。 缓冲区协议使我们能够与其他
    Python 软件进行通信，例如 **Python 图像库**（**PIL**）。
- en: We will see an example of saving a PIL image from a NumPy array.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一个从 NumPy 数组保存 PIL 图像的示例。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: Install PIL and SciPy if necessary. Check out the *See also* section of this
    recipe for instructions.
  prefs: []
  type: TYPE_NORMAL
  zh: 如有必要，请安装 PIL 和 SciPy。 有关说明，查阅本秘籍的“另见”部分。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The complete code for this recipe is in the `buffer.py` file in this book''s
    code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该秘籍的完整代码在本书代码包的`buffer.py`文件中：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First we need a NumPy array to play with:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个 NumPy 数组来玩：
- en: 'In previous chapters, we saw how to load the sample image of Lena Söderberg.
    Create an array filled with zeros and populate the alpha channel with the image
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了如何加载 Lena 的样例图像。 创建一个填充零的数组，并使用图像数据填充 alpha 通道：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Use the PIL API to save the data as an RGBA image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 PIL API 将数据另存为 RGBA 图像：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Modify the data array by getting rid of the image data and making the image
    red. Save the image with the PIL API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过去除图像数据并使图像变为红色来修改数据数组。 使用 PIL API 保存图像：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the before image:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是之前的图片：
- en: '![How to do it...](img/0945_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_04_01.jpg)'
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In computer graphics, the position of the origin is different than in the usual
    Cartesian coordinate system you know from high-school mathematics. The origin
    is in the top-left corner of the screen, canvas, or image, and the *y* axis goes
    down (see [http://en.wikipedia.org/wiki/2D_computer_graphics#Non-standard_orientation_of_the_coordinate_system](http://en.wikipedia.org/wiki/2D_computer_graphics#Non-standard_orientation_of_the_coordinate_system)).
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机图形中，原点的位置与您从高中数学中知道的通常的直角坐标系不同。 原点位于屏幕，画布或图像的左上角，*y* 轴向下（[`en.wikipedia.org/wiki/2D_computer_graphics#Non-standard_orientation_of_the_coordinate_system`](http://en.wikipedia.org/wiki/2D_computer_graphics#Non-standard_orientation_of_the_coordinate_system)）。
- en: 'The data of the PIL image object has changed by the magic of the buffer interface,
    and therefore, we see the following image:'
  prefs: []
  type: TYPE_NORMAL
  zh: PIL 图像对象的数据由于缓冲接口的作用而发生了变化，因此，我们看到以下图像：
- en: '![How to do it...](img/0945_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_04_02.jpg)'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We created a PIL image from a buffer—a NumPy array. After changing the buffer,
    we saw the changes being reflected in the image object. We did this without copying
    the PIL image object; instead, we directly accessed and modified its data to make
    a red image out of the picture of the model. With a few simple changes, the code
    should work with other PIL-based libraries, such as Pillow.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从缓冲区（一个 NumPy 数组）创建了一个 PIL 图像。 更改缓冲区后，我们看到更改反映在图像对象中。 我们这样做时没有复制 PIL 图像对象；
    相反，我们直接访问并修改了其数据，以使模型的图片显示红色图像。 通过一些简单的更改，代码就可以与其他基于 PIL 的库一起使用，例如 Pillow。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing PIL* in [Chapter 2](ch02.xhtml "Chapter 2. Advanced Indexing and
    Array Concepts"), *Advanced Indexing and Array Concepts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二章，“高级索引和数组概念”中的“安装 PIL”
- en: '*Installing SciPy* in [Chapter 2](ch02.xhtml "Chapter 2. Advanced Indexing
    and Array Concepts"), *Advanced Indexing and Array Concepts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二章，“高级索引和数组概念”中的“安装 SciPy”
- en: The Python buffer protocol is described at [http://docs.python.org/2/c-api/buffer.html](http://docs.python.org/2/c-api/buffer.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`docs.python.org/2/c-api/buffer.html`](http://docs.python.org/2/c-api/buffer.html)中介绍了 Python 缓冲区协议。'
- en: Using the array interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数组接口
- en: The array interface is a yet another mechanism used to communicate with other
    Python applications. This protocol, as its name suggests, is only applicable to
    array-like objects. A demonstration is in order. Let's use PIL again, but without
    saving files.
  prefs: []
  type: TYPE_NORMAL
  zh: 数组接口是用于与其他 Python 应用通信的另一种机制。 顾名思义，该协议仅适用于类似数组的对象。 进行了示范。 让我们再次使用 PIL，但不保存文件。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: We'll reuse part of the code from the previous recipe, so the prerequisites
    are similar. We will skip the first step of the previous recipe here, and assume
    that it is already known.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用先前秘籍中的部分代码，因此前提条件是相似的。 在这里，我们将跳过上一秘籍的第一步，并假定它已经为人所知。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The code for this recipe is in the `array_interface.py` file in this book''s
    code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该秘籍的代码在本书代码包的`array_interface.py`文件中：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following steps will allow us to explore the array interface:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将使我们能够探索数组接口：
- en: 'The PIL Image object has an `__array_interface__` attribute. Let''s inspect
    its content. The value of this attribute is a Python dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PIL `Image`对象具有`__array_interface__`属性。 让我们检查它的内容。 此属性的值是 Python 字典：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code prints the following information:'
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码显示以下信息：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `ndarray` NumPy class has an `__array_interface__` attribute as well. We
    can convert the PIL image into a NumPy array with the `asarray()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NumPy `ndarray`类也具有`__array_interface__`属性。 我们可以使用`asarray()`函数将 PIL 图像转换成 NumPy
    数组：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The shape and data type of the array are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的形状和数据类型如下：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, the shape has not changed.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，形状没有改变。
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: The array interface or protocol lets us share data between array-like Python
    objects. Both NumPy and PIL provide such an interface.
  prefs: []
  type: TYPE_NORMAL
  zh: 数组接口或协议使我们可以在类似数组的 Python 对象之间共享数据。 NumPy 和 PIL 都提供了这样的接口。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Using the buffer protocol* in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的“使用缓冲区协议”
- en: The array interface is described in detail at [http://docs.scipy.org/doc/numpy/reference/arrays.interface.html](http://docs.scipy.org/doc/numpy/reference/arrays.interface.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组接口在[`docs.scipy.org/doc/numpy/reference/arrays.interface.html`](http://docs.scipy.org/doc/numpy/reference/arrays.interface.html)中进行了详细描述。
- en: Exchanging data with MATLAB and Octave
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 MATLAB 和 Octave 交换数据
- en: MATLAB and its open source alternative, Octave, are popular mathematical applications.
    The `scipy.io` package has the `savemat()` function, which allows you to store
    NumPy arrays in a `.mat` file as a value of a Python dictionary.
  prefs: []
  type: TYPE_NORMAL
  zh: MATLAB 及其开放源代码 Octave 是流行的数学应用。 `scipy.io`包具有`savemat()`函数，该函数允许您将 NumPy 数组存储为`.mat`文件作为
    Python 字典的值。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: Installing MATLAB or Octave is beyond the scope of this book. The Octave website
    has some pointers for installing at [http://www.gnu.org/software/octave/download.html](http://www.gnu.org/software/octave/download.html).
    Check out the *See also* section of this recipe, for instructions on installing
    SciPy, if necessary.
  prefs: []
  type: TYPE_NORMAL
  zh: 安装  MATLAB 或 Octave 超出了本书的范围。 Octave 网站位于[`www.gnu.org/software/octave/download.html`](http://www.gnu.org/software/octave/download.html)上有一些安装的指南。
    如有必要，检查本秘籍的“另见”部分，来获取安装 SciPy 的说明。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The complete code for this recipe is in the `octave.py` file in this book''s
    code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该秘籍的完整代码在本书代码包的`octave.py`文件中：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once you have installed MATLAB or Octave, you need to follow the subsequent
    steps to store NumPy arrays:'
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 MATLAB 或 Octave，就需要按照以下步骤存储 NumPy 数组：
- en: Create a NumPy array and call `savemat()` to store the array in a `.mat` file.
    This function has two parameters—a file name and a dictionary containing variable
    names and values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 NumPy 数组，然后调用`savemat()`将其存储在`.mat`文件中。 此函数有两个参数——文件名和包含变量名和值的字典。
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Navigate to the directory where you created the file. Load the file and check
    the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到创建文件的目录。 加载文件并检查数组：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing* *SciPy* in [Chapter 2](ch02.xhtml "Chapter 2. Advanced Indexing
    and Array Concepts"), *Advanced* *Indexing and Array Concepts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二章，“高级索引和数组概念”中的“安装 SciPy”
- en: The SciPy documentation for the `savemat()` function at [http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.io.savemat.html](http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.io.savemat.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`savemat()`函数的 SciPy 文档位于[`docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.io.savemat.html`](http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.io.savemat.html)'
- en: Installing RPy2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 RPy2
- en: '**R** is a popular scripting language used in statistics and data analysis.
    **RPy2** is an interface between R and Python. We will install RPy2 in this recipe.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**R** 是一种流行的脚本语言，用于统计和数据分析。 **RPy2** 是 R 和 Python 之间的接口。 我们将在此秘籍中安装 RPy2。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'If you want to install RPy2 choose one of the following options:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要安装 RPy2，请选择以下选项之一：
- en: 'Installing with `pip` or `easy_install`: RPy2 is available on PYPI, so we can
    install it with this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`pip`或`easy_install`进行安装：RPy2 在 PYPI 上可用，因此我们可以使用以下命令进行安装：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以使用以下命令：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Installing from source**: We can install RPy2 from the `tar.gz` source:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从源代码安装**：我们可以从`tar.gz`源安装 RPy2：'
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The R programming language homepage at [http://www.r-project.org/](http://www.r-project.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R 编程语言主页位于[`www.r-project.org`](http://www.r-project.org/)'
- en: The RPy2 project page is at [http://rpy.sourceforge.net/](http://rpy.sourceforge.net/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RPy2 项目页面位于[`rpy.sourceforge.net`](http://rpy.sourceforge.net/)'
- en: Interfacing with R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 R 交互
- en: RPy2 can only be used to call R from Python, and not the other way around. We
    will import some sample R datasets and plot the data of one of them.
  prefs: []
  type: TYPE_NORMAL
  zh: RPy2 只能用作从 Python 调用 R，而不能相反。 我们将导入一些样本 R 数据集并绘制其中之一的数据。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: Install RPy2 if necessary. See the previous recipe.
  prefs: []
  type: TYPE_NORMAL
  zh: 如有必要，请安装 RPy2。 请参阅先前的秘籍。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The complete code for this recipe is in the `rdatasets.py` file in this book''s
    code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该秘籍的完整代码在本书代码包的`rdatasets.py`文件中：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `motorcars` dataset is described at [https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html).
    Let''s start by loading this sample R dataset:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`motorcars`数据集在[`stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html)中进行了描述。
    让我们从加载此样本 R 数据集开始：'
- en: 'Load a dataset into an array with the RPy2 `importr()` function. This function
    can import `R` packages. In this example, we will import the datasets R package.
    Create a NumPy array from the `mtcars` dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 RPy2 `importr()`函数将数据集加载到数组中。 此函数可以导入`R`包。 在此示例中，我们将导入数据集 R 包。 从`mtcars`数据集创建一个
    NumPy 数组：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Plot the dataset with matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制数据集：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The data contains **miles per gallon** (**mpg**) and **weight** (**wt**) values
    in lb/1000\. The following screenshot shows the data, which is a two-dimensional
    array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包含**英里每加仑**（`mpg`）和**重量**（`wt`）值，单位为千分之一磅。 以下屏幕快照显示了数据，它是一个二维数组：
- en: '![How to do it...](img/0945_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_04_03.jpg)'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing* *matplotlib* in [Chapter 1](ch01.xhtml "Chapter 1. Winding Along
    with IPython"), *Winding Along with IPython*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一章“使用 IPython”中的“安装 Matplotlib”
- en: Installing JPype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 JPype
- en: '**Jython** is the default interoperability solution for Python and Java. However,
    Jython runs on the **Java virtual machine** (**JVM**). Therefore, it cannot access
    NumPy modules, which are mostly written in C. **JPype** is an open source project
    that tries to solve this problem. The interfacing occurs on the native level between
    Python and JVM. Let''s install JPype.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jython** 是用于 Python 和 Java 的默认互操作性解决方案。 但是，Jython 在 **Java 虚拟机**（**JVM**）上运行。
    因此，它无法访问主要用 C 语言编写的 NumPy 模块。 **JPype** 是一个开放源代码项目，试图解决此问题。 接口发生在 Python 和 JVM
    之间的本机级别上。 让我们安装 JPype。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: Download JPype from [http://sourceforge.net/projects/jpype/files/](http://sourceforge.net/projects/jpype/files/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[`sourceforge.net/projects/jpype/files`](http://sourceforge.net/projects/jpype/files/)下载 JPype。
- en: 'Unpack it and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开压缩包，然后运行以下命令：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Sending a NumPy array to JPype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 NumPy 数组发送到 JPype
- en: In this recipe, we will start a JVM and send a NumPy array to it. We will print
    the received array using standard Java calls. Obviously, you will need to have
    Java installed.
  prefs: []
  type: TYPE_NORMAL
  zh: 在此秘籍中，我们将启动 JVM 并向其发送 NumPy 数组。 我们将使用标准 Java 调用打印接收到的数组。 显然，您将需要安装 Java。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The complete code for this recipe is in the `hellojpype.py` file in this book''s
    code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该秘籍的完整代码在本书代码包的`hellojpype.py`文件中：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'First, we need to start the JVM from JPype:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要从 JPype 启动 JVM：
- en: 'Start the JVM from JPype; JPype is conveniently able to find the default JVM
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 JPype 启动 JVM； JPype 可以方便地找到默认的 JVM 路径：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Just because of tradition, let''s print `"hello world"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅出于传统原因，让我们打印`"hello world"`：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a NumPy array, convert it into a Python list, and pass it to JPype.
    Now it''s easy to print the array elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 NumPy 数组，将其转换为 Python 列表，然后将其传递给 JPype。 现在很容易打印数组元素：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After we are done, let''s shut down the JVM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们关闭 JVM：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Only one JVM can run at a time in JPype. If we forget to shut down the JVM,
    it could lead to unexpected errors. The program output is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: JPype 中一次只能运行一个  JVM。 如果我们忘记关闭 JVM，则可能导致意外错误。 程序输出如下：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: JPype allows us to start up and shut down a JVM. It provides wrappers for standard
    Java API calls. As we saw in this example, we can pass Python lists to be transformed
    into Java arrays by the JArray wrapper. JPype uses the **Java Native Interface**
    (**JNI**), which is a bridge between native C code and Java. Unfortunately, using
    JNI hurts performance, so you have to be mindful of that fact.
  prefs: []
  type: TYPE_NORMAL
  zh: JPype 允许我们启动和关闭 JVM。 它为标准 Java API 调用提供了包装器。 如本例所示，我们可以传递要由 JArray 包装器转换为 Java
    数组的 Python 列表。 JPype 使用 **Java 本机接口**（**JNI**），这是本机 C 代码和 Java 之间的桥梁。 不幸的是，使用
    JNI 会损害性能，因此您必须注意这一事实。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing JPype* in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的“安装 JPype”
- en: The JPype homepage at [http://jpype.sourceforge.net/](http://jpype.sourceforge.net/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'JPype 主页位于[`jpype.sourceforge.net`](http://jpype.sourceforge.net/)'
- en: Installing Google App Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装谷歌应用引擎
- en: '**Google App Engine** (**GAE**) enables you to build web applications on the
    Google Cloud. Since 2012, there is official support for NumPy; you need a Google
    account to use GAE.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**谷歌应用引擎**（**GAE**）使您可以在谷歌云上构建 Web 应用。 自 2012 年以来，  是
    NumPy 的官方支持； 您需要一个谷歌帐户才能使用 GAE。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The first step is to download GAE:'
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是下载 GAE：
- en: Download GAE for your operating system from [https://developers.google.com/appengine/downloads](https://developers.google.com/appengine/downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从[`evelopers.google.com/appengine/downloads`](https://developers.google.com/appengine/downloads)下载适用于您的操作系统的 GAE。'
- en: From this page, you can download documentation and the GAE Eclipse plugin as
    well. If you are developing with Eclipse, you should definitely install it.
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从此页面下载文档和 GAE Eclipse 插件。 如果使用 Eclipse 开发，则一定要安装它。
- en: The development environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发环境。
- en: GAE comes with a development environment that simulates the production cloud.
    At the time of writing this book, GAE officially supported only Python 2.5 and
    2.7\. GAE will try to find Python on your system; however, it may be necessary
    to set that yourself, for instance, if you have multiple Python versions. You
    can set this setting in the **Preferences** dialog of the launcher application.
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 带有一个模拟生产云的开发环境。 在撰写本书时，GAE 正式仅支持 Python 2.5 和 2.7。 GAE 将尝试在您的系统上找到 Python；
    但是，例如，如果您有多个 Python 版本，则可能需要自行设置。 您可以在启动器应用的**首选项**对话框中设置此设置。
- en: 'There are two important scripts in the SDK:'
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 中有两个重要的脚本：
- en: '`dev_appserver.py`: The development server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev_appserver.py`：开发服务器'
- en: '`appcfg.py`: Deploys on the cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appcfg.py`：部署在云上'
- en: On Windows and Mac, there is a GAE launcher application. The launcher has **Run**
    and **Deploy** buttons that do the same actions as the aforementioned scripts.
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 和 Mac 上，有一个 GAE 启动器应用。 启动器具有**运行**和**部署**按钮，它们执行与上述脚本相同的操作。
- en: '![How to do it...](img/0945_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_04_04.jpg)'
- en: Deploying the NumPy code on the Google Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在谷歌云上部署 NumPy 代码
- en: Deploying GAE applications is pretty easy. For NumPy, an extra configuration
    step is required, but that will take only minutes.
  prefs: []
  type: TYPE_NORMAL
  zh: 部署  GAE 应用非常容易。 对于  NumPy，需要额外的配置步骤，但这仅需几分钟。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s create a new application:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的应用：
- en: 'Create a new application with the launcher (**File** | **New Application**).
    Name it `numpycloud`. This will create a folder with the same name containing
    the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启动器创建一个新应用（**文件 | 新应用**）。 命名为`numpycloud`。 这将创建一个包含以下文件的同名文件夹：
- en: '`app.yaml`: A YAML application configuration file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.yaml`：YAML 应用配置文件'
- en: '`favicon.ico`: An icon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`favicon.ico`：一个图标'
- en: '`index.yaml`: An autogenerated file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.yaml`：自动生成的文件'
- en: '`main.py`: The main entry point for the web application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.py`：Web 应用的主要入口点'
- en: Add NumPy to the libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 NumPy 添加到库中。
- en: 'First we need to let GAE know that we want to use NumPy. Add the following
    lines to the `app.yaml` configuration file in the libraries section:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要让 GAE 知道我们要使用 NumPy。 将以下行添加到库部分中的`app.yaml`配置文件中：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is not the latest NumPy version, but it is the latest version currently
    supported by GAE. The configuration file should have the following contents:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是最新的 NumPy 版本，但它是 GAE 当前支持的最新版本。 配置文件应具有以下内容：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To demonstrate that we can use NumPy code, let''s modify the `main.py` file.
    There is a `MainHandler` class with a handler method for GET requests. Replace
    this method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了演示我们可以使用 NumPy 代码，让我们修改`main.py`文件。 有一个`MainHandler`类，带有用于 GET 请求的处理器方法。 用以下代码替换此方法：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We will have the following code in the end:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将提供以下代码：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you click on the **Browse** button in the GAE launcher (on Linux, run `dev_appserver.py`
    with the project root as its argument), you should see a web page in your default
    browser with the following text:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您单击**在 GAE 启动器中浏览**按钮（在 Linux 上，以项目根为参数运行`dev_appserver.py`），则您应该在默认浏览器中看到一个包含以下文字的网页：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: GAE is free depending on how much of the resources are used. You can create
    up to 10 web applications. GAE takes the sandboxing approach, which means that
    NumPy was not available for a while, but now it is, as demonstrated in this recipe.
  prefs: []
  type: TYPE_NORMAL
  zh: GAE 是免费的，具体取决于使用了多少资源。 您最多可以创建 10 个 Web 应用。 GAE 采用沙盒方法，这意味着 NumPy 暂时无法使用，但现在可以使用，如本秘籍所示。
- en: Running the NumPy code in a PythonAnywhere web console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PythonAnywhere Web 控制台中运行 NumPy 代码
- en: In [Chapter 1](ch01.xhtml "Chapter 1. Winding Along with IPython"), *Winding
    Along with IPython*, we already saw a PythonAnywhere console in action, without
    having an account. This recipe will require you to have an account, but don't
    worry—it's free, at least if you don't need too many resources.
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章，“使用 IPython”中，我们已经看到了运行 PythonAnywhere 控制台的过程，而没有任何权限。 此秘籍将需要您有一个帐户，但不要担心——它是免费的，如果您不需要太多资源，至少是免费的。
- en: Signing up is a pretty straightforward process and will not be covered here.
    NumPy has already been installed along with a long list of other Python software.
    For a complete list, see [https://www.pythonanywhere.com/batteries_included/](https://www.pythonanywhere.com/batteries_included/).
  prefs: []
  type: TYPE_NORMAL
  zh: 注册是一个非常简单的过程，此处将不涉及。 NumPy 已经与其他 Python 软件一起安装。 有关完整列表，请参见[`www.pythonanywhere.com/batteries_included`](https://www.pythonanywhere.com/batteries_included/)。
- en: We will set up a simple script that gets price data from Google Finance every
    minute, and performs simple statistics with the prices using NumPy.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将建立一个简单的脚本，该脚本每分钟从 Google 财经获取价格数据，并使用 NumPy 对价格进行简单的统计。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: Once we have signed up, we can log in and take a look at the **PythonAnywhere**
    dashboard.
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们签名后，我们可以登录并查看 **PythonAnywhere** 信息中心。
- en: '![How to do it...](img/0945_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_04_05.jpg)'
- en: 'Write the code. The complete code for this example is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码。 此示例的完整代码如下：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Most of this is standard Python, except the bits where we grow a NumPy array
    containing prices and calculate the mean and standard deviation of the prices.
    A URL is used to download price data in JSON format from Google Finance given
    a stock ticker such as AAPL. This URL could change, of course.
  prefs: []
  type: TYPE_NORMAL
  zh: 除我们在其中生长包含价格的 NumPy 数组并计算价格的均值和标准差的位以外，大多数都是标准 Python。 如果有股票代号，例如`AAPL`，则可以使用
    URL 从谷歌财经下载 JSON 格式的价格数据。 该 URL 当然可以更改。
- en: Next we parse the JSON with regular expressions to extract a price. This price
    is added to a NumPy array. We compute the mean and standard deviation for the
    prices. The price is printed with a timestamp bottom and top, based on the standard
    deviation multiplied by some factor to be specified by us.
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用正则表达式解析 JSON 以提取价格。 此价格已添加到 NumPy 数组中。 我们计算价格的均值和标准差。 价格是根据标准差乘以我们指定的某个因素后在时间戳的顶部和底部打印出来的。
- en: Upload the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传代码。
- en: After we are done with the code on our local machine, we can upload the script
    to PythonAnywhere. Go to the dashboard and click on the **Files** tab. Upload
    the script from the widget at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地计算机上完成代码后，我们可以将脚本上传到 PythonAnywhere。 转到仪表板，然后单击**文件**选项卡。 从页面底部的小部件上传脚本。
- en: To run the code, click on the **Consoles** tab and then on the **Bash** link.
    PythonAnywhere should create a bash console for us right away. We can now run
    our program for AAPL with a one standard deviation band, as shown in the following
    screenshot:![How to do it...](img/0945_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行代码，请单击**控制台**选项卡，然后单击 **Bash** 链接。 PythonAnywhere 应该立即为我们创建一个 Bash 控制台。 现在，我们可以在一个标准差范围内运行`AAPL`程序，如以下屏幕截图所示：![操作步骤](img/0945_04_06.jpg)
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: PythonAnywhere is perfect if you want to run NumPy code on a remote server,
    especially if you need your program to execute at scheduled times. For the free
    account at least, it's not so convenient to do interactive work, since there is
    a certain lag whenever you enter text in the web console.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在远程服务器上运行 NumPy 代码，则 PythonAnywhere 是完美的选择，尤其是当您需要程序在计划的时间执行时。 至少对于免费帐户而言，进行交互式工作并不那么方便，因为每当您在
    Web 控制台中输入文本时都会有一定的滞后。
- en: However, as we saw, it is possible to create and test a program locally, and
    upload it to PythonAnywhere. This frees resources on your local machine as well.
    We can do fancy things such as sending e-mails based on the stock price or scheduling
    our scripts to be activated during trading hours. By the way, this is also possible
    with Google App Engine, but it is done the Google way, so you will need to learn
    about their API.
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，正如我们所看到的，可以在本地创建和测试程序，并将其上传到 PythonAnywhere。 这也会释放本地计算机上的资源。 我们可以做一些花哨的事情，例如根据股价发送电子邮件或安排在交易时间内激活脚本  。
    顺便说说，使用谷歌应用引擎也可以做到这一点，但是它是通过谷歌方式完成的，因此您需要了解其 API。
