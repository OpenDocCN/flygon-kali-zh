- en: Chapter 5. Understanding the Game Loop and Frame Rate
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。了解游戏循环和帧率
- en: The game loop is the operational body of a game, and the frame rate is the consequence.
    A game cannot be made without a defined game loop, and the performance cannot
    be judged without measuring the frame rate.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环是游戏的运行主体，帧率是其结果。没有定义游戏循环，游戏就无法制作；没有测量帧率，性能就无法判断。
- en: These two aspects of game development are common throughout any game development
    project. However, the scalability and nature of the game loop vary across different
    devices, and there might be different scales to measure frame rates across different
    platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发的这两个方面在任何游戏开发项目中都是通用的。然而，游戏循环的可伸缩性和性质在不同设备上有所不同，不同平台上可能有不同的帧率测量标准。
- en: For native development, the game loop is created and maintained by developers
    only. However, in most game engines, the loop is already defined with all the
    necessary controls and scope.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于原生开发，游戏循环由开发人员自行创建和维护。然而，在大多数游戏引擎中，循环已经定义了所有必要的控制和范围。
- en: 'We will have a detailed look at these two most important parts of game development
    through the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下主题详细了解游戏开发中最重要的这两个部分：
- en: Introduction to the game loop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏循环介绍
- en: Creating a sample game loop using the Android SDK
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Android SDK创建示例游戏循环
- en: Game life cycle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏生命周期
- en: Game update and user interface
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏更新和用户界面
- en: Interrupt handling
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中断处理
- en: General idea of a game state machine
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏状态机的一般概念
- en: The FPS system
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FPS系统
- en: Hardware dependency
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件依赖
- en: Balance between performance and memory
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能和内存之间的平衡
- en: Controlling FPS
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制FPS
- en: Introduction to the game loop
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏循环介绍
- en: The game loop is the core cycle in which user input, game update, and rendering
    are executed sequentially. This loop ideally runs once per frame. So, the game
    loop is the most important part of running a game with frame rate control.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环是核心循环，依次执行用户输入、游戏更新和渲染。这个循环理想情况下每帧运行一次。因此，游戏循环是运行帧率控制游戏最重要的部分。
- en: 'A typical game loop has three steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的游戏循环有三个步骤：
- en: User input
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入
- en: Game update
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏更新
- en: Rendering![Introduction to the game loop](img/B05069_05_01.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染！[游戏循环介绍](img/B05069_05_01.jpg)
- en: A simple game loop
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的游戏循环
- en: User input
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户输入
- en: This section checks the UI system of the game for any external input that has
    been given to the game. It sets the required changes to be made in the game for
    the next update. On a different hardware platform, this portion of the game loop
    varies the most. It is always a best practice to create common functionality for
    different input types to make a standard.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本节检查游戏的UI系统是否接收到了外部输入。它设置了游戏在下一次更新时需要进行的更改。在不同的硬件平台上，游戏循环的这部分变化最大。为不同的输入类型创建通用功能是一种最佳实践，以确保标准化。
- en: The input system is not considered as part of the game loop; however, user-given
    input detection is part of the game loop. This system continuously monitors the
    input system, whether an event has occurred or not.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 输入系统不被视为游戏循环的一部分；然而，用户输入检测是游戏循环的一部分。该系统不断监视输入系统，无论是否发生事件。
- en: A user can trigger any event at any point of time during gameplay when an active
    game loop is running. Normally, there are queues maintained by the input system.
    Each queue represents different types of possible input events, such as touch,
    key press, sensor reading, and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当活动游戏循环运行时，用户可以在游戏过程中的任何时间触发任何事件。通常，输入系统维护着队列。每个队列代表不同类型的可能输入事件，如触摸、按键、传感器读数等。
- en: 'The user input monitor checks those queues at a particular interval following
    the loop sequence. If it finds any event in the queue, it makes the required changes
    that will have an impact on the next update call in the game loop:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入监视器按照循环顺序在特定间隔内检查这些队列。如果在队列中发现任何事件，它会进行必要的更改，这将影响游戏循环中下一次更新的调用：
- en: '![User input](img/B05069_05_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![用户输入](img/B05069_05_02.jpg)'
- en: User input working principle
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入工作原理
- en: Game update
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏更新
- en: The complete game state is managed and maintained by the game update section
    of the game loop. This section is also responsible for running the game logic,
    changes in game states, loading/unloading assets, and setting the rendering pipeline.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环的游戏更新部分管理和维护完整的游戏状态。该部分还负责运行游戏逻辑、游戏状态的更改、加载/卸载资源以及设置渲染管线。
- en: The game control is usually managed by the game update section. Usually, the
    main game manager works at the top level of this game update section. We discussed
    game program structure in the previous section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏控制通常由游戏更新部分管理。通常，主游戏管理器在游戏更新部分的顶层工作。我们在前一节讨论了游戏程序结构。
- en: Any game runs a particular state at a time. The state can be updated by either
    user input or any automated AI algorithm. All AI algorithms work on the game update
    cycle frame by frame.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何游戏一次只能运行一个特定状态。状态可以通过用户输入或任何自动化的AI算法进行更新。所有AI算法都是逐帧地在游戏更新周期上运行的。
- en: State update
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态更新
- en: As stated earlier, the state can be updated from game update. The state is also
    initiated and destroyed by the game update. Initialization and destruction happens
    once per state, and state update can be called once per game cycle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，状态可以从游戏更新中进行更新。状态也是由游戏更新初始化和销毁的。初始化和销毁每个状态只发生一次，状态更新可以在每个游戏周期中调用一次。
- en: '![State update](img/B05069_05_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![状态更新](img/B05069_05_03.jpg)'
- en: State update call flow
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 状态更新调用流程
- en: Rendering frames
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染帧
- en: The rendering section inside a game loop is responsible for setting the rendering
    pipeline. No update or AI algorithm runs on this section of the game loop.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环中的渲染部分负责设置渲染管线。在游戏循环的这一部分中不会运行任何更新或AI算法。
- en: There was time when a developer had full control over the rendering pipeline.
    The developer could manipulate and set each and every vertex. The modern age game
    development system has not much to do with this rendering system. The graphics
    library takes care of all the control of the rendering system. However, at a very
    high level, a developer can only set the order and quantity of rendering vertices.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一段时间，开发者对渲染管线有完全控制。开发者可以操纵并设置每一个顶点。现代游戏开发系统与这种渲染系统没有太多关系。图形库负责渲染系统的所有控制。然而，在非常高的层面上，开发者只能设置渲染顶点的顺序和数量。
- en: Rendering is one of the most important roles when it comes to frame rate control,
    keeping other continuous processes constant. Display and memory operations take
    the most time to execute from the processing point of view.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在帧速率控制方面，渲染是最重要的角色之一，保持其他连续进程的稳定性。从处理的角度来看，显示和内存操作需要最长的执行时间。
- en: 'Typical Android graphics rendering follows the OpenGL pipeline:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的Android图形渲染遵循OpenGL管线：
- en: '![Rendering frames](img/B05069_05_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![渲染帧](img/B05069_05_04.jpg)'
- en: Creating a sample game loop using the Android SDK
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android SDK创建一个示例游戏循环
- en: Android SDK development starts with an activity, and the game runs on single
    or multiple views. Most of the time, it is considered to have a single view to
    run gameplay.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK开发从一个活动开始，游戏在单个或多个视图上运行。大多数情况下，考虑使用单个视图来运行游戏。
- en: Unfortunately, the Android SDK does not provide a predefined game loop. However,
    the loop can be created in many ways, but the basic mechanism remains the same.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Android SDK没有提供预定义的游戏循环。然而，循环可以以许多种方式创建，但基本机制保持不变。
- en: In the Android SDK library, the `View` class contains an abstract method `OnDraw()`
    in which every possible rendering call is queued. This method is called upon any
    change in the drawing, which invalidates the previous rendering pipeline.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android SDK库中，`View`类包含一个抽象方法`OnDraw()`，其中每个可能的渲染调用都排队等候。这个方法在绘图发生任何改变时被调用，这会使之前的渲染管线无效。
- en: 'The logic is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑如下：
- en: '![Creating a sample game loop using the Android SDK](img/B05069_05_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android SDK创建一个示例游戏循环](img/B05069_05_05.jpg)'
- en: 'Let''s have a look at a basic game loop created with Android `View`. Here,
    a custom view is extended from the Android `View`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个使用Android `View`创建的基本游戏循环。在这里，一个自定义视图是从Android `View`扩展而来的：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the current age of Android game development, developers use `SurfaceView`
    instead of `View`. `SurfaceView` is inherited from `View` and more optimized for
    games made with Canvas. In this case, a customized view is extended from `SurfaceView`
    and implements the `SurfaceHolder.Callback` interface. In this scenario, three
    methods are overridden:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的Android游戏开发时代，开发者使用`SurfaceView`而不是`View`。`SurfaceView`继承自`View`，并且更适用于使用Canvas制作的游戏。在这种情况下，一个定制视图是从`SurfaceView`扩展并实现`SurfaceHolder.Callback`接口。在这种情况下，重写了三种方法：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While developing a game, the developer need not change the surface each time.
    That's the reason the `surfaceChanged` method should have an empty body to function
    as a basic game loop.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发游戏时，开发者不需要每次更改表面。这就是`surfaceChanged`方法应该有一个空体来作为基本游戏循环的原因。
- en: 'We need to create a customized game thread and override the `run()` method:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个定制的游戏线程并重写`run()`方法：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we are set to start the newly created game loop from the customized `SurfaceView`
    class:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备从定制的`SurfaceView`类开始新创建的游戏循环：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There can be many approaches to implementing a game loop. However, the basic
    approach follows either of the two ways mentioned here. Some developers prefer
    to implement the game thread inside the game view. Handling input is another important
    part of the game loop. We will discuss this topic later in this chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 实现游戏循环可以有很多方法。然而，基本方法遵循这里提到的两种方式之一。一些开发者更喜欢在游戏视图内部实现游戏线程。处理输入是游戏循环的另一个重要部分。我们将在本章后面讨论这个话题。
- en: 'Another part of this game loop is **frames per second** (**FPS**) management.
    One of the most common mechanisms is to use `Thread.sleep()` for such a calculated
    time that the loop executes at a fixed rate. Some developers create two types
    of update mechanism: one based on FPS and another based on per frame without delay.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环的另一个部分是**每秒帧数**（**FPS**）管理。最常见的机制之一是使用`Thread.sleep()`来计算循环以固定速率执行的时间。一些开发者创建了两种更新机制：一种基于FPS，另一种基于每帧无延迟。
- en: Mostly, physics-based games need an update mechanism that follows a real-time
    interval to function uniformly across all devices.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数基于物理的游戏需要一个更新机制，以便在所有设备上以统一的实时间隔运行。
- en: For small-scale development, few developers in the industry follow the first
    approach but do not follow typical looping. This system invalidates the current
    draw based on the required action. In this scenario, the game loop is not dependent
    on fixed FPS.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小规模开发，行业中有一些开发者采用第一种方法，但不遵循典型的循环。这种系统根据所需的动作使当前绘制无效。在这种情况下，游戏循环不依赖于固定的FPS。
- en: Game life cycle
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏生命周期
- en: The Android game life cycle is almost similar to any other application's life
    cycle, other than the game loop mechanism. Mostly, the application state changes
    with external interference. States can be manipulated otherwise, where games have
    algorithms or artificial intelligence that is capable of interfering with the
    main game cycle.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Android游戏生命周期几乎与任何其他应用程序的生命周期相似，除了游戏循环机制。大多数情况下，应用程序状态会随着外部干扰而改变。状态也可以通过其他方式进行操作，游戏具有能够干扰主游戏循环的算法或人工智能。
- en: An Android game is initialized with an activity. The `onCreate()` method is
    used for initialization. Then, the game thread starts and enters the game loop.
    The game loop can then be interrupted by an external interrupt.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Android游戏是通过活动初始化的。`onCreate()`方法用于初始化。然后，游戏线程启动并进入游戏循环。游戏循环可以被外部中断打断。
- en: In the case of game development, it is always a good practice to save the current
    game state and pause the loop and threads properly. On resuming the game, it should
    be easy to return to the last state.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏开发中，始终要保存当前游戏状态并正确暂停循环和线程。在恢复游戏时，应该很容易返回到上一个状态。
- en: Game update and user interface
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏更新和用户界面
- en: 'We have already covered a few update and interface mechanisms previously. A
    running game state can be changed by user input or internal AI algorithms:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前涵盖了一些更新和接口机制。运行中的游戏状态可以通过用户输入或内部AI算法来改变：
- en: '![Game update and user interface](img/B05069_05_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![游戏更新和用户界面](img/B05069_05_06.jpg)'
- en: Mostly, game update is called once per frame or once after a fixed time interval.
    Either way, an algorithm does its job to change the game state. You have learned
    about user input queues. On each game loop cycle, the input queues are being checked.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，游戏更新每帧调用一次，或者在固定时间间隔后调用一次。无论哪种方式，算法都会改变游戏状态。您已经了解了用户输入队列。在每个游戏循环周期中，都会检查输入队列。
- en: 'For example, a mobile game loop with a touch interface works as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，具有触摸界面的移动游戏循环的工作方式如下：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s have a look at the input queue system with the same approach:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们以相同的方式来看待输入队列系统：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The same process can be repeated for the `SurfaceView` game loop approach as
    well.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的过程也可以用于`SurfaceView`游戏循环方法。
- en: Interrupt handling
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中断处理
- en: The game loop is a continuous process. Whenever an interrupt occurs, it is necessary
    to pause every running thread and save the current state of the game to ensure
    that it resumes properly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环是一个持续的过程。每当发生中断时，有必要暂停每个运行的线程并保存游戏的当前状态，以确保它能够正确恢复。
- en: 'In Android, any interrupt triggers from `onPause()`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，任何中断都会触发`onPause()`：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we need to change the class where the actual game loop is running.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要更改实际运行游戏循环的类。
- en: 'First, declare a Boolean to indicate whether the game is paused or not. Then,
    put a check in the game loop. After that, create a static method to deal with
    this variable:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，声明一个布尔值来指示游戏是否暂停。然后，在游戏循环中进行检查。之后，创建一个处理这个变量的静态方法：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: General idea of a game state machine
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏状态机的一般概念
- en: A game state machine runs within the update cycle of the game loop. A game state
    machine is the mechanism of binding all the game states together. In old techniques,
    this was a typical linear control flow. However, in modern development processes,
    it can be parallel control running in multiple threads. In the old architecture
    of game development, it was encouraged to have only one game thread. Developers
    used to avoid parallel processing as it was vulnerable to game loop and timer
    management. However, even in modern development, many developers still prefer
    to use a single thread for game development whenever possible. With the help of
    various tools and advanced scripting language, most game developers now use a
    virtual parallel processing system.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏状态机在游戏循环的更新周期内运行。游戏状态机是将所有游戏状态绑定在一起的机制。在旧的技术中，这是典型的线性控制流。然而，在现代开发过程中，它可以是在多个线程中并行运行的控制流。在游戏开发的旧架构中，鼓励只有一个游戏线程。开发人员过去会避免并行处理，因为它容易受到游戏循环和定时器管理的影响。然而，即使在现代开发中，许多开发人员仍然在可能的情况下更喜欢使用单个线程进行游戏开发。借助各种工具和高级脚本语言的帮助，大多数游戏开发人员现在都使用虚拟并行处理系统。
- en: One of the processes of a simple game state machine is to create a common state
    interface and override it for each game state. In this way, it becomes easy to
    manage the state inside the game loop.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 简单游戏状态机的一个过程是创建一个公共状态接口，并为每个游戏状态重写它。这样，在游戏循环内管理状态就变得容易了。
- en: 'Let''s see a loop of a simple game state machine manager. This manager should
    conduct four main functionalities:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的游戏状态机管理器的循环。该管理器应该执行四个主要功能：
- en: Creating the state
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建状态
- en: Updating the state
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新状态
- en: Rendering the state
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染状态
- en: Changing the state
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变状态
- en: 'An example implementation might look like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 示例实现可能如下所示：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In some cases, developers pass the input signal to a particular state through
    the state manager as well.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，开发人员还会通过状态管理器将输入信号传递到特定状态。
- en: The FPS system
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FPS系统
- en: In the case of game development and gaming industry, FPS matters a lot. The
    game quality measurement depends heavily on the FPS count. In simple words, the
    higher the FPS of the game, the better. The FPS of a game is dependent on the
    processing time for instructions and rendering.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏开发和游戏行业中，FPS非常重要。游戏质量的衡量取决于FPS计数。简单来说，游戏的FPS越高，越好。游戏的FPS取决于指令和渲染的处理时间。
- en: 'It takes some time to execute the game loop once. Let''s have a look at a sample
    implementation of FPS management inside a game loop:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 执行游戏循环需要一些时间。让我们看一下游戏循环内FPS管理的示例实现：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, we first noted the time before execution (`startTime`)
    of the loop and then noted down the time after the execution (`endTime`). We then
    calculated the time taken for execution (`delta`). We already know the amount
    of time (`interval`) it should take to maintain a maximum frame rate. So, for
    the remaining time, we put the game thread to sleep before it executes again.
    This can be applied to a different game loop system as well.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们首先记录了循环执行之前的时间（`startTime`），然后记录了循环执行之后的时间（`endTime`）。然后我们计算了执行所需的时间（`delta`）。我们已经知道应该花费多少时间（`interval`）来保持最大帧率。因此，在剩余的时间里，我们让游戏线程在再次执行之前进入休眠状态。这也可以应用于不同的游戏循环系统。
- en: 'While using `SurfaceView`, we can declare the FPS system inside the game loop
    in the `run()` method:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`SurfaceView`时，我们可以在`run()`方法中的游戏循环内声明FPS系统：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this process, we capped the FPS count and tried to execute the game loop
    on the predefined FPS. A major drawback in this system is this mechanism massively
    depends on hardware configuration. For a slow hardware system, which is incapable
    of running the loop on the predefined FPS, this system has no effect. This is
    because the interval time is mostly zero or less than zero, so there is no per
    frame cycle.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们限制了FPS计数，并尝试在预定义的FPS上执行游戏循环。这个系统的一个主要缺点是这种机制在很大程度上取决于硬件配置。对于无法在预定义的FPS上运行循环的慢硬件系统，这个系统没有效果。这是因为间隔时间大多为零或小于零，因此没有每帧周期。
- en: Hardware dependency
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件依赖
- en: We have discussed earlier that hardware configuration plays a major role in
    the FPS system. If the hardware is not capable of running a certain set of instructions
    with a certain frequency, then it is not possible for any developer to run a game
    on the target FPS.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过硬件配置在FPS系统中起着重要作用。如果硬件无法以特定频率运行一组指令，那么任何开发人员都无法在目标FPS上运行游戏。
- en: 'Let''s list the tasks that take most of the processing time for a game:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出游戏中占用大部分处理时间的任务：
- en: Display or rendering
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示或渲染
- en: Memory load/unload operations
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存加载/卸载操作
- en: Logical operations
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑操作
- en: Display or rendering
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示或渲染
- en: Display processing depends mostly on the graphics processor and what all needs
    to be displayed. When it comes to interaction with the hardware, the process becomes
    slow. Rendering each and every pixel with shader manipulation and mapping takes
    time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 显示处理主要取决于图形处理器和需要显示的内容。当涉及与硬件的交互时，处理变慢。使用着色器操作和映射渲染每个像素都需要时间。
- en: There were times when running a game with a frame rate of 12 was difficult.
    However, in the modern world, a superb display quality game needs to be run on
    a frame rate of 60\. It is only a matter of hardware quality.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有时候以12帧的帧率运行游戏是困难的。然而，在现代世界，一个出色的显示质量游戏需要以60帧的帧率运行。这只是硬件质量的问题。
- en: A large display requires a good amount of cache memory. So, for example, hardware
    with a large and dense display and with low cache memory is incapable of maintaining
    a good display quality.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 大屏幕需要大量的缓存内存。例如，硬件具有大而密集的显示屏，但缓存内存较少，无法保持良好的显示质量。
- en: Memory load/unload operations
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存加载/卸载操作
- en: Memory is a hardware component of a system. Again, it takes more time to interact
    with the memory component. From a developer's perspective, it takes time when
    we allocate memory, deallocate memory, and read or write an operation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 内存是系统的硬件组件。再次强调，与内存组件交互需要更多时间。从开发人员的角度来看，当我们分配内存、释放内存和进行读写操作时，需要时间。
- en: 'From the game development perspective, four types of memory are the most important:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从游戏开发的角度来看，有四种类型的内存最重要：
- en: Heap memory
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆内存
- en: Stack memory
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈内存
- en: Register memory
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寄存器内存
- en: ROM
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只读存储器（ROM）
- en: Heap memory
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 堆内存
- en: Heap memory is user-defined manually managed memory. This memory has to be allocated
    manually and freed manually as well. In the case of Android, the garbage collector
    is responsible for freeing memory, which is flagged as non-referenced. This memory
    location is the slowest in the random access memory category.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 堆内存是用户手动管理的内存。这个内存必须手动分配和手动释放。在Android的情况下，垃圾收集器负责释放被标记为非引用的内存。这个内存位置是随机存取内存类别中最慢的。
- en: Stack memory
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 堆栈内存
- en: This segment of memory is used for elements that are declared inside a method.
    Allocation and deallocation of this memory segment is automatically done by the
    program interpreter. This memory segment works only for local members.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这段内存用于在方法内声明的元素。程序解释器会自动分配和释放这个内存段。这个内存段仅适用于本地成员。
- en: Register memory
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寄存器内存
- en: Register memory is the fastest of all. Register memory is used to store data
    for the current process and frequently used data. Game developers can achieve
    a higher frame rate in the case of devices where the register memory is better
    and faster.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 寄存器内存是最快的。寄存器内存用于存储当前进程和频繁使用的数据。在寄存器内存更好和更快的设备上，游戏开发人员可以实现更高的帧率。
- en: ROM
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只读存储器（ROM）
- en: '**Read-only memory** (**ROM**) is permanent memory. Especially in game development,
    a huge chunk of assets is stored in the ROM. It takes maximum time during the
    load/unload operation of those assets. A program needs to load the necessary data
    onto the RAM from the ROM. So, having faster ROM helps achieve better FPS during
    the load/unload operation.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 只读存储器（ROM）是永久存储器。特别是在游戏开发中，大量的资源存储在ROM中。在加载/卸载这些资源时需要最长的时间。程序需要从ROM中将必要的数据加载到RAM中。因此，拥有更快的ROM有助于在加载/卸载操作期间获得更好的FPS。
- en: Logical operations
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑操作
- en: Developers should define the instructions in such a way that they can use hardware
    in the most efficient way. In technical terms, each and every instruction goes
    in stacks in a binary instruction form. The processor executes one instruction
    in one clock cycle.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员应该以最有效的方式定义指令，以便利用硬件。从技术角度来看，每条指令以二进制指令形式进入堆栈。处理器在一个时钟周期内执行一条指令。
- en: 'For example, let''s have a look at a badly constructed logical instruction:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看一个构造不好的逻辑指令：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Calling `length` and using a post increment operator every time increases the
    instructions to the processor, which eventually increases the execution time.
    Now, look at this code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用`length`并使用后增量运算符都会增加处理器的指令，最终增加执行时间。现在，看看这段代码：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code executed the same task; however, the processing overhead is reduced
    a lot in this approach. The only compromise this code made is blocking memory
    for one integer variable and saving a lot of nested tasks related to `length`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码执行了相同的任务；然而，在这种方法中，处理开销大大减少了。这段代码所做的唯一妥协是阻塞了一个整数变量的内存，并保存了与`length`相关的许多嵌套任务。
- en: Processors with a better clock speed can execute the task faster, which directly
    implies better FPS. However, managing the task amount depends on the developer,
    as is shown in the previous example.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 时钟速度更快的处理器可以更快地执行任务，这直接意味着更好的FPS。然而，任务量的管理取决于开发人员，就像前面的例子所示。
- en: Every processor has a mathematical processing unit. The power of the processor
    varies from one processor to another. So, developers always need to check the
    mathematical expression to know whether it can be simplified or not.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 每个处理器都有一个数学处理单元。处理器的性能因处理器而异。因此，开发人员总是需要检查数学表达式，以了解它是否可以简化。
- en: Balance between performance and memory
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能和内存之间的平衡
- en: As you learned earlier, memory operation takes a lot time. However, developers
    always have a limited memory. So, it is extremely necessary to have a balance
    between performance and memory.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您之前学到的，内存操作需要很长时间。然而，开发人员总是有限的内存。因此，在性能和内存之间保持平衡是非常必要的。
- en: Loading or unloading any asset from ROM to RAM takes time, so it is recommended
    that you do not do such operations for games that depend on FPS. This operation
    affects FPS significantly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从ROM加载或卸载任何资产到RAM都需要时间，因此建议您不要为依赖FPS的游戏执行此类操作。这种操作会显著影响FPS。
- en: Suppose a game requires a lot of assets while running one game state and the
    target device has a limited heap available. In such a case, the developer should
    group assets. Small assets can be loaded in the game running the state only in
    required cases.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个游戏在运行一个游戏状态时需要大量资产，而目标设备可用的堆有限。在这种情况下，开发人员应该对资产进行分组。只有在必要的情况下，才能在运行状态的游戏中加载小资产。
- en: Sometimes, many developers preload all the assets and use it from cache. This
    approach makes the gameplay smoother and faster. However, loading assets in a
    cache that is not required for that particular game state may crash the game if
    an interrupt occurs. The Android OS is fully authorized to clear memory occupied
    by inactive or minimized applications. When an interrupt occurs, the game goes
    to the minimized state. If a new application requires memory and free memory is
    not available, then the Android OS kills inactive apps and frees the memory for
    a new application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，许多开发人员预加载所有资产并从缓存中使用。这种方法使游戏玩起来更加流畅和快速。然而，如果在不需要的特定游戏状态下加载缓存中的资产，可能会在发生中断时导致游戏崩溃。Android操作系统完全有权清除不活动或最小化应用程序所占用的内存。当发生中断时，游戏进入最小化状态。如果新应用程序需要内存而没有空闲内存可用，那么Android操作系统会终止不活动的应用程序并为新应用程序释放内存。
- en: So, it is always a good practice to break the set of assets into parts according
    to game states.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据游戏状态，将资产集分成部分总是一个很好的做法。
- en: Controlling FPS
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制FPS
- en: 'We have already seen some ways of defining the FPS system. We have already
    discussed the major drawback of the system as well. So, we can manipulate the
    game loop according to the real-time FPS generated in the current game loop cycle:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些定义FPS系统的方法。我们也已经讨论了该系统的主要缺点。因此，我们可以根据当前游戏循环周期中生成的实时FPS来操纵游戏循环：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s have a look at the hybrid FPS system where we cap the maximum FPS
    to 60\. Otherwise, the game can be manipulated through actual FPS:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下混合FPS系统，我们将最大FPS限制为60。否则，游戏可能会通过实际FPS进行操纵：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The game loop is mainly a logical approach for game development. In many cases,
    developers do not opt for such a mechanism. Some games may be typically interactive
    and have no algorithm that runs continuously. In such cases, the game loop may
    not be needed. Game states can be updated as per input given to the gaming system.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环主要是游戏开发的逻辑方法。在许多情况下，开发人员不选择这种机制。有些游戏可能是典型的互动游戏，没有连续运行的算法。在这种情况下，可能不需要游戏循环。游戏状态可以根据输入更新到游戏系统。
- en: However, an exception cannot be an example. That is why it is an industrial
    approach to follow a game loop to maintain a development standard irrespective
    of game design.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，例外不能成为例证。这就是为什么遵循游戏循环以保持开发标准是一种工业方法，而不管游戏设计如何。
- en: You learned about the game loop and game state management here. Developers are
    free to invent and execute game loops in different ways. There are many game engines
    that have different ways to control game loop and manage game states. The idea
    and concept of game loop and state management may change as per the game requirement.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您在这里了解了游戏循环和游戏状态管理。开发人员可以自由地以不同的方式发明和执行游戏循环。许多游戏引擎具有不同的控制游戏循环和管理游戏状态的方式。游戏循环和状态管理的理念和概念可能会根据游戏需求而改变。
- en: However, developers should always keep in mind that the technique they are using
    should not affect the game performance and FPS. Besides that, developers need
    to maintain the readability and flexibility of code. Some approaches may consume
    more memory and run faster and vice versa. Android has various sets of hardware
    configuration, so there might not be the same processing and memory support on
    all hardware. Finally, balancing between memory and performance is the key to
    creating better games.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，开发人员应始终牢记，他们使用的技术不应影响游戏性能和FPS。此外，开发人员需要保持代码的可读性和灵活性。某些方法可能会消耗更多内存并运行得更快，反之亦然。Android具有各种硬件配置，因此可能不是所有硬件上都具有相同的处理和内存支持。最终，在内存和性能之间取得平衡是创造更好游戏的关键。
- en: We will have a deep look at performance and memory management in later chapters.
    We will try to look at these segments of game development from different perspectives,
    such as 2D/3D games, VR games, optimization techniques, and more.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中深入研究性能和内存管理。我们将尝试从不同的角度来看待游戏开发的这些部分，比如2D/3D游戏、VR游戏、优化技术等。
