["```cs\npublic class Singleton {\n    private static Singleton _instance;\n\n    protected Singleton() { }\n\n    public static Singleton Instance() {\n        return _instance ?? (_instance = new Singleton());\n    }\n}\n```", "```cs\nvar instance1 = Singleton.Instance();\nvar instance2 = Singleton.Instance();\n\nif (instance1.Equals(instance2))\n    Console.WriteLine(\"Instance 1 and instance 2 are the same instance of Singleton.\");\n```", "```cs\npublic abstract class Product {}\n```", "```cs\npublic class ConcreteProduct : Product {}\n```", "```cs\npublic abstract class Creator {\n    public abstract Product FactoryMethod();\n}\n```", "```cs\npublic class ConcreteCreator : Creator {\n    public override Product FactoryMethod() {\n        return new ConcreteProduct();\n    }\n}\n```", "```cs\nvar creator = new ConcreteCreator();\nvar product = creator.FactoryMethod();\nConsole.WriteLine($\"Product Type: {product.GetType().Name}\");\n```", "```cs\npublic abstract class AbstractFactory {\n    public abstract AbstractProductA CreateProductA();\n    public abstract AbstractProductB CreateProductB();\n}\n```", "```cs\npublic abstract class AbstractProductA {\n    public abstract void Operation(AbstractProductB productB);\n}\n```", "```cs\npublic abstract class AbstractProductB {\n    public abstract void Operation(AbstractProductA productA);\n}\n```", "```cs\npublic class ProductA : AbstractProductA {\n    public override void Operation(AbstractProductB productB) {\n        Console.WriteLine(\"ProductA.Operation(ProductB)\");\n    }\n}\n```", "```cs\npublic class ProductB : AbstractProductB {\n    public override void Operation(AbstractProductA productA) {\n        Console.WriteLine(\"ProductB.Operation(ProductA)\");\n    }\n}\n```", "```cs\npublic class ConcreteProduct : AbstractFactory {\n    public override AbstractProductA CreateProductA() {\n        return new ProductA();\n    }\n\n    public override AbstractProductB CreateProductB() {\n        return new ProductB();\n    }\n}\n```", "```cs\npublic class Client\n{\n    private readonly AbstractProductA _abstractProductA;\n    private readonly AbstractProductB _abstractProductB;\n\n    public Client(AbstractFactory factory) {\n        _abstractProductA = factory.CreateProductA();\n        _abstractProductB = factory.CreateProductB();\n    }\n\n    public void Run() {\n        _abstractProductA.Operation(_abstractProductB);\n        _abstractProductB.Operation(_abstractProductA);\n    }\n}\n```", "```cs\nAbstractFactory factory = new ConcreteProduct();\nClient client = new Client(factory);\nclient.Run();\n```", "```cs\npublic abstract class Prototype {\n    public string Id { get; private set; }\n\n    public Prototype(string id) {\n        Id = id;\n    }\n\n    public abstract Prototype Clone();\n}\n```", "```cs\npublic class ConcretePrototype : Prototype {\n    public ConcretePrototype(string id) : base(id) { }\n\n    public override Prototype Clone() {\n        return (Prototype) this.MemberwiseClone();\n    }\n}\n```", "```cs\nvar prototype = new ConcretePrototype(\"Clone 1\");\nvar clone = (ConcretePrototype)prototype.Clone();\nConsole.WriteLine($\"Clone Id: {clone.Id}\");\n```", "```cs\npublic class Product {\n    private List<string> _parts;\n\n    public Product() {\n        _parts = new List<string>();\n    }\n\n    public void Add(string part) {\n        _parts.Add(part);\n    }\n\n    public void PrintPartsList() {\n        var sb = new StringBuilder();\n        sb.AppendLine(\"Parts Listing:\");\n        foreach (var part in _parts)\n            sb.AppendLine($\"- {part}\");\n        Console.WriteLine(sb.ToString());\n    }\n}\n```", "```cs\npublic abstract class Builder\n{\n    public abstract void BuildSection1();\n    public abstract void BuildSection2();\n    public abstract Product GetProduct();\n}\n```", "```cs\npublic class ConcreteBuilder : Builder {\n    private Product _product;\n\n    public ConcreteBuilder() {\n        _product = new Product();\n    }\n\n    public override void BuildSection1() {\n        _product.Add(\"Section 1\");\n    }\n\n    public override void BuildSection2() {\n        _product.Add((\"Section 2\"));\n    }\n\n    public override Product GetProduct() {\n        return _product;\n    }\n}\n```", "```cs\npublic class Director\n{\n    public void Build(Builder builder)\n    {\n        builder.BuildSection1();\n        builder.BuildSection2();\n    }\n}\n```", "```cs\nvar director = new Director();\nvar builder = new ConcreteBuilder();\ndirector.Build(builder);\nvar product = builder.GetProduct();\nproduct.PrintPartsList();\n```", "```cs\nprivate static DateTime _startTime;\nprivate static long _durationPlus;\nprivate static long _durationSb;\n```", "```cs\npublic static void UsingThePlusOperator()\n{\n    _startTime = DateTime.Now;\n    var text = string.Empty;\n    for (var x = 1; x <= 10000; x++)\n    {\n        text += $\"Line: {x}, I must not be a lazy programmer, and should continually develop myself!\\n\";\n    }\n    _durationPlus = (DateTime.Now - _startTime).Ticks;\n    Console.WriteLine($\"Duration (Ticks) Using Plus Operator: {_durationPlus}\");\n}\n```", "```cs\npublic static void UsingTheStringBuilder()\n{\n    _startTime = DateTime.Now;\n    var sb = new StringBuilder();\n    for (var x = 1; x <= 10000; x++)\n    {\n        sb.AppendLine(\n            $\"Line: {x}, I must not be a lazy programmer, and should continually develop myself!\"\n        );\n    }\n    _durationSb = (DateTime.Now - _startTime).Ticks;\n    Console.WriteLine($\"Duration (Ticks) Using StringBuilder: {_durationSb}\");\n}\n```", "```cs\npublic static void PrintTimeDifference()\n{\n    var difference = _durationPlus - _durationSb;\n    Console.WriteLine($\"That's a time difference of {difference} ticks.\");\n    Console.WriteLine($\"{difference} ticks = {TimeSpan.FromTicks(difference)} seconds.\\n\\n\");\n}\n```", "```cs\nStringConcatenation.UsingThePlusOperator();\nStringConcatenation.UsingTheStringBuilder();\nStringConcatenation.PrintTimeDifference();\n```", "```cs\nvar report = new Report();\nreport.AddHeader();\nreport.AddLastYearsSalesTotalsForAllRegions();\nreport.AddLastYearsSalesTotalsByRegion();\nreport.AddFooter();\nreport.GenerateOutput();\n```", "```cs\npublic abstract class Implementor {\n    public abstract void Operation();\n}\n```", "```cs\npublic class Abstraction {\n    protected Implementor implementor;\n\n    public Implementor Implementor {\n        set => implementor = value;\n    }\n\n    public virtual void Operation() {\n        implementor.Operation();\n    }\n}\n```", "```cs\npublic class RefinedAbstraction : Abstraction {\n    public override void Operation() {\n        implementor.Operation();\n    }\n}\n```", "```cs\npublic class ConcreteImplementor : Implementor {\n    public override void Operation() {\n        Console.WriteLine(\"Concrete operation executed.\");\n    }\n}\n```", "```cs\nvar abstraction = new RefinedAbstraction();\nabstraction.Implementor = new ConcreteImplementor();\nabstraction.Operation();\n```", "```cs\npublic interface IComponent {\n    void PrintName();\n}\n```", "```cs\npublic class Leaf : IComponent {\n    private readonly string _name;\n\n    public Leaf(string name) {\n        _name = name;\n    }\n\n    public void PrintName() {\n        Console.WriteLine($\"Leaf Name: {_name}\");\n    }\n}\n```", "```cs\npublic class Composite : IComponent {\n    private readonly string _name;\n    private readonly List<IComponent> _components;\n\n    public Composite(string name) {\n        _name = name;\n        _components = new List<IComponent>();\n    }\n\n    public void Add(IComponent component) {\n        _components.Add(component);\n    }\n\n    public void PrintName() {\n        Console.WriteLine($\"Composite Name: {_name}\");\n        foreach (var component in _components) {\n            component.PrintName();\n        }\n    }\n}\n```", "```cs\nvar root = new Composite(\"Classification of Animals\");\nvar invertebrates = new Composite(\"+ Invertebrates\");\nvar vertebrates = new Composite(\"+ Vertebrates\");\n\nvar warmBlooded = new Leaf(\"-- Warm-Blooded\");\nvar coldBlooded = new Leaf(\"-- Cold-Blooded\");\nvar withJointedLegs = new Leaf(\"-- With Jointed-Legs\");\nvar withoutLegs = new Leaf(\"-- Without Legs\");\n\ninvertebrates.Add(withJointedLegs);\ninvertebrates.Add(withoutLegs);\n\nvertebrates.Add(warmBlooded);\nvertebrates.Add(coldBlooded);\n\nroot.Add(invertebrates);\nroot.Add(vertebrates);\n\nroot.PrintName();\n```", "```cs\npublic class SubsystemOne {\n    public void PrintName() {\n        Console.WriteLine(\"SubsystemOne.PrintName()\");\n    }\n}\n\npublic class SubsystemOne {\n    public void PrintName() {\n        Console.WriteLine(\"SubsystemOne.PrintName()\");\n    }\n}\n```", "```cs\npublic class Facade {\n    private SubsystemOne _subsystemOne = new SubsystemOne();\n    private SubsystemTwo _subsystemTwo = new SubsystemTwo();\n\n    public void SubsystemOneDoWork() {\n        _subsystemOne.PrintName();\n    }\n\n    public void SubsystemTwoDoWork() {\n        _subsystemTwo.PrintName();\n    }\n}\n```", "```cs\nvar facade = new Facade();\nfacade.SubsystemOneDoWork();\nfacade.SubsystemTwoDoWork();\n```", "```cs\npublic abstract class Flyweight {\n    public abstract void Operation(string extrinsicState);\n}\n```", "```cs\npublic class ConcreteFlyweight : Flyweight\n{\n    public override void Operation(string extrinsicState)\n    {\n        Console.WriteLine($\"ConcreteFlyweight: {extrinsicState}\");\n    }\n}\n```", "```cs\npublic class FlyweightFactory {\n    private readonly Hashtable _flyweights = new Hashtable();\n\n    public FlyweightFactory()\n    {\n        _flyweights.Add(\"FlyweightOne\", new ConcreteFlyweight());\n        _flyweights.Add(\"FlyweightTwo\", new ConcreteFlyweight());\n        _flyweights.Add(\"FlyweightThree\", new ConcreteFlyweight());\n    }\n\n    public Flyweight GetFlyweight(string key) {\n        return ((Flyweight)_flyweights[key]);\n    }\n}\n```", "```cs\npublic class Client\n{\n    private const string ExtrinsicState = \"Arbitary state can be anything you require!\";\n\n    private readonly FlyweightFactory _flyweightFactory = new FlyweightFactory();\n\n    public void ProcessFlyweights()\n    {\n        var flyweightOne = _flyweightFactory.GetFlyweight(\"FlyweightOne\");\n        flyweightOne.Operation(ExtrinsicState);\n\n        var flyweightTwo = _flyweightFactory.GetFlyweight(\"FlyweightTwo\");\n        flyweightTwo.Operation(ExtrinsicState);\n\n        var flyweightThree = _flyweightFactory.GetFlyweight(\"FlyweightThree\");\n        flyweightThree.Operation(ExtrinsicState);\n    }\n}\n```", "```cs\nvar flyweightClient = new StructuralDesignPatterns.Flyweight.Client();\nflyweightClient.ProcessFlyweights();\n```"]