["```js\nattachInterrupt(0, count_pulse, RISING); \n\n```", "```js\n**Function for counting pulses:** \n\nvoidcount_pulse() \n{ \npulse++; \n} \n\n```", "```js\nint pin = 2; \nvolatile unsigned int pulse; \nconstintpulses_per_litre = 450; \n\nvoid setup() \n{ \nSerial.begin(9600); \n\npinMode(pin, INPUT); \nattachInterrupt(0, count_pulse, RISING); \n} \n\nvoid loop() \n{ \npulse=0; \ninterrupts(); \ndelay(1000); \nnoInterrupts(); \n\nSerial.print(\"Pulses per second: \"); \nSerial.println(pulse); \n} \n\nvoidcount_pulse() \n{ \npulse++; \n} \n\n```", "```js\n            int pin = 2; \n            volatile unsigned int pulse; \n            constintpulses_per_litre = 450; \n\n            void setup() \n            { \n              Serial.begin(9600); \n\n              pinMode(pin, INPUT); \n              attachInterrupt(0, count_pulse, RISING); \n            } \n\n    ```", "```js\n          void loop() \n          { \n            pulse = 0; \n            interrupts(); \n            delay(1000); \n            noInterrupts(); \n\n            Serial.print(\"Pulses per second: \"); \n            Serial.println(pulse); \n\n            Serial.print(\"Water flow rate: \"); \n            Serial.print(pulse * 1000/pulses_per_litre); \n            Serial.println(\" milliliters per second\"); \n            delay(1000); \n          } \n          void count_pulse() \n          { \n            pulse++; \n          } \n\n    ```", "```js\nint pin = 2; \nvolatile unsigned int pulse; \nfloat volume = 0; \nfloatflow_rate =0; \nconstintpulses_per_litre = 450; \n\n```", "```js\nvoid setup() \n{ \nSerial.begin(9600); \npinMode(pin, INPUT); \nattachInterrupt(0, count_pulse, RISING); \n} \n\n```", "```js\nvoid loop() \n{ \npulse=0; \ninterrupts(); \ndelay(1000); \nnoInterrupts(); \n\n```", "```js\nSerial.print(\"Pulses per second: \"); \nSerial.println(pulse); \n\nflow_rate = pulse * 1000/pulses_per_litre; \n\n```", "```js\nSerial.print(\"Water flow rate: \"); \nSerial.print(flow_rate); \nSerial.println(\" milliliters per second\"); \n\nvolume = volume + flow_rate * 0.1; \n\n```", "```js\nSerial.print(\"Volume: \"); \nSerial.print(volume); \nSerial.println(\" milliliters\"); \n} \n\n```", "```js\nVoid count_pulse() \n{ \n  pulse++; \n} \n\n```", "```js\n#include <LiquidCrystal.h> \n\n```", "```js\nint pin = 2; \nvolatile unsigned int pulse; \nfloat volume = 0; \nfloatflow_rate = 0; \nconstintpulses_per_litre = 450; \n\n```", "```js\n// initialize the library with the numbers of the interface pins \nLiquidCrystallcd(12, 11, 6, 5, 4, 3); \n\n```", "```js\nvoid setup() \n{ \n  Serial.begin(9600); \n  pinMode(pin, INPUT); \n  attachInterrupt(0, count_pulse, RISING); \n\n```", "```js\n  // set up the LCD's number of columns and rows:  \n  lcd.begin(16, 2); \n  // Print a message to the LCD. \n  lcd.print(\"Welcome...\"); \n  delay(1000); \n} \n\n```", "```js\nvoid loop() \n{ \n  pulse = 0; \n\n  interrupts(); \n  delay(1000); \n  noInterrupts(); \n\n```", "```js\n  lcd.setCursor(0, 0); \n  lcd.print(\"Pulses/s: \"); \n  lcd.print(pulse); \n\n  flow_rate = pulse*1000/pulses_per_litre; \n\n```", "```js\n  lcd.setCursor(0, 1); \n  lcd.print(flow_rate,2);//display only 2 decimal places \n  lcd.print(\" ml\"); \n\n```", "```js\n  volume = volume + flow_rate * 0.1; \n  lcd.setCursor(8, 1); \n  lcd.print(volume, 2);//display only 2 decimal places \n  lcd.println(\" ml \"); \n} \n\n```", "```js\nvoid count_pulse() \n{ \n pulse++; \n} \n\n```", "```js\nvoid setup(){ \n  Serial.begin(9600); \n} \n\nvoid loop() \n{ \n  float vol; \n  int sensorValue = analogRead(A0); \n  vol=(float)sensorValue/1024*5.0; \n  Serial.println(vol,1); \n  Serial.print(\"Concentration of gas= \"); \n  Serial.println(sensorValue); \n  delay(2000); \n} \n\n```", "```js\nint readings=0; \nvoid setup(){ \nSerial.begin(9600); \n} \n\nvoid loop(){ \nlectura=analogRead(A1); \nSerial.print(\"Level of alcohol= \"); \nSerial.println(readings); \ndelay(1000); \n} \n\n```", "```js\nint ledPin = 13;             \nint inputPin= 2; \nint val = 0;                    \n\n```", "```js\nvoid setup() { \npinMode(ledPin, OUTPUT);       \npinMode(inputPin, INPUT);      \nSerial.begin(9600); \n} \n\n```", "```js\nvoid loop(){ \nval = digitalRead(inputPin); \nSerial.print(\"val : \");   \nSerial.println(val); \ndigitalWrite(ledPin, HIGH);  // turn LED ON \n\n```", "```js\nif (val == HIGH) {             \n  Serial.print(\"NO Fire detected \"); \n  digitalWrite(ledPin, LOW); // turn LED OFF \n} \nelse{ \n  Serial.print(\"Fire DETECTED \"); \n  digitalWrite(ledPin, HIGH);   \n  } \n} \n\n```", "```js\nint value;   \n\nvoid setup() { \nSerial.begin(9600); \n}  \n\n```", "```js\nvoid loop(){   \nSerial.print(\"Humidity sensor value:\"); \nValue = analogRead(0);   \nSerial.print(value);   \n\n```", "```js\nif (Value<= 300)   \nSerial.println(\" Very wet\");   \nif ((Value > 300) and (Value<= 700))   \nSerial.println(\" Wet, do not water\");    \nif (Value> 700)   \nSerial.println(\" Dry, you need to water\");  \ndelay(1000);  \n} \n\n```", "```js\nconst int buttonPin = 2;     // the number of the input sensor pin \nconst int ledPin =  13;      // the number of the LED pin \n\n```", "```js\n// variables will change: \nintbuttonState = 0;         // variable for reading the pushbutton status \n\n```", "```js\nvoid setup() { \n  // initialize the LED pin as an output: \npinMode(ledPin, OUTPUT); \n  // initialize the pushbutton pin as an input: \npinMode(buttonPin, INPUT); \nSerial.begin(9600); \n} \n\n```", "```js\nvoid loop() { \n  // read the state of the pushbutton value: \nbuttonState = digitalRead(buttonPin); \n\n```", "```js\nif (buttonState == HIGH) { \nSerial.println(buttonState); \nSerial.println(\"The recipient is fulled\"); \ndigitalWrite(ledPin, HIGH); \ndelay(1000); \n  } \n\n```", "```js\nelse { \ndigitalWrite(ledPin, LOW); \nSerial.println(buttonState); \nSerial.println(\"The recipient is empty\"); \ndelay(1000); \n  } \n} \n\n```", "```js\n#include \"DHT.h\" \n#define DHTPIN 7  \n#define DHTTYPE DHT11 \n\n```", "```js\nDHT dht(DHTPIN, DHTTYPE); \n\n```", "```js\nvoid setup() \n{ \nSerial.begin(9600); \ndht.begin(); \n} \n\n```", "```js\nvoid loop() \n{ \n  float temp = dht.readTemperature(); \n  float hum = dht.readHumidity(); \n  float sensor = analogRead(0); \n  float light = sensor / 1024 * 100; \n\n```", "```js\n  Serial.print(\"Temperature: \"); \n  Serial.print(temp); \n  Serial.println(\" C\"); \n  Serial.print(\"Humidity: \"); \n  Serial.print(hum); \n  Serial.println(\"%\"); \n  Serial.print(\"Light: \"); \n  Serial.print(light); \n  Serial.println(\"%\"); \n  delay(700); \n} \n\n```", "```js\n#include <Wire.h> \n#include <LiquidCrystal_I2C.h> \n#include \"DHT.h\" \n#define DHTPIN 7  \n#define DHTTYPE DHT11 \n\n```", "```js\nLiquidCrystal_I2C lcd(0x3F,16,2); \nDHT dht(DHTPIN, DHTTYPE); \n\n```", "```js\nvoid setup() \n{ \nlcd.init(); \nlcd.backlight(); \nlcd.setCursor(1,0); \nlcd.print(\"Hello !!!\"); \nlcd.setCursor(1,1); \nlcd.print(\"Starting ...\"); \n\n```", "```js\ndht.begin(); \ndelay(2000); \nlcd.clear(); \n} \n\n```", "```js\nvoid loop() \n{ \n  float temp = dht.readTemperature(); \n  float hum = dht.readHumidity(); \n  float sensor = analogRead(0); \n  float light = sensor / 1024 * 100; \n\n```", "```js\n  lcd.setCursor(0,0); \n  lcd.print(\"Temp:\"); \n  lcd.print(temp,1); \n  lcd.print((char)223); \n  lcd.print(\"C\"); \n  lcd.setCursor(0,1); \n  lcd.print(\"Hum:\"); \n  lcd.print(hum); \n  lcd.print(\"%\"); \n  lcd.setCursor(11,1); \n  //lcd.print(\"L:\"); \n  lcd.print(light); \n  lcd.print(\"%\"); \n  delay(700); \n} \n\n```", "```js\n**int sensor = 8;**\n**void setup() {**\n**Serial.begin(9600);**\n**pinMode(sensor,INPUT);**\n**}**\n**void loop(){**\n**// Readind the sensor**\n**int state = digitalRead(sensor);**\n**Serial.print(\"Detecting sensor: \");**\n**Serial.println(state);**\n**delay(100);**\n**}**\n\n```", "```js\nvoid setup() { \n  pinMode(sensor, INPUT_PULLUP); \n  Serial.begin(9600); \n} \n\n```", "```js\nvoid loop() { \nstate = digitalRead(sensor); \n\n```", "```js\n  if (state == LOW){ \n    Serial.println(\"Door Close\"); \n  } \n  if (state == HIGH){ \n    Serial.println(\"Door Open\"); \n  } \n} \n\n```", "```js\n#include <Adafruit_Fingerprint.h> \n#include <SoftwareSerial.h> \n\n```", "```js\nuint8_t id; \nuint8_tgetFingerprintEnroll(); \n\n```", "```js\nSoftwareSerialmySerial(2, 3); \nAdafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial); \n\n```", "```js\n//Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial1); \n\n```", "```js\nvoid setup()   \n{ \n  while (!Serial); \n  delay(500); \n\n```", "```js\n  Serial.begin(9600); \n  Serial.println(\"Adafruit Fingerprint sensor enrollment\"); \n  // set the data rate for the sensor serial port \n  finger.begin(57600); \n\n```", "```js\n  if (finger.verifyPassword()) { \n  Serial.println(\"Found fingerprint sensor!\"); \n  } else { \n    Serial.println(\"Did not find fingerprint sensor :(\"); \n    while (1); \n    } \n  } \n  uint8_treadnumber(void) { \n  uint8_tnum = 0; \n  booleanvalidnum = false;  \n  while (1) { \n    while (! Serial.available()); \n      char c = Serial.read(); \n      if (isdigit(c)) { \n        num *= 10; \n        num += c - '0'; \n        validnum = true; \n        } else if (validnum) { \n          returnnum; \n        } \n      } \n    } \n\n```", "```js\nvoid loop()                     // run over and over again \n{ \nSerial.println(\"Ready to enroll a fingerprint! Please Type in the ID # you want to save this finger as...\"); \nid = readnumber(); \nSerial.print(\"Enrolling ID #\"); \nSerial.println(id); \n\nwhile (!  getFingerprintEnroll() ); \n} \n\n```", "```js\nuint8_tgetFingerprintEnroll() { \nint p = -1; \nSerial.print(\"Waiting for valid finger to enroll as #\"); Serial.println(id); \nwhile (p != FINGERPRINT_OK) { \n    p = finger.getImage(); \nswitch (p) { \ncase FINGERPRINT_OK: \nSerial.println(\"Image taken\"); \nbreak; \ncase FINGERPRINT_NOFINGER: \nSerial.println(\".\"); \nbreak; \ncase FINGERPRINT_PACKETRECIEVEERR: \nSerial.println(\"Communication error\"); \nbreak; \ncase FINGERPRINT_IMAGEFAIL: \nSerial.println(\"Imaging error\"); \nbreak; \ndefault: \nSerial.println(\"Unknown error\"); \nbreak; \n    } \n  } \n\n```", "```js\n  p = finger.image2Tz(1); \nswitch (p) { \ncase FINGERPRINT_OK: \nSerial.println(\"Image converted\"); \nbreak; \ncase FINGERPRINT_IMAGEMESS: \nSerial.println(\"Image too messy\"); \nreturn p; \ncase FINGERPRINT_PACKETRECIEVEERR: \nSerial.println(\"Communication error\"); \nreturn p; \ncase FINGERPRINT_FEATUREFAIL: \nSerial.println(\"Could not find fingerprint features\"); \nreturn p; \ncase FINGERPRINT_INVALIDIMAGE: \n\n```", "```js\nreturn p; \ndefault: \nSerial.println(\"Unknown error\"); \nreturn p; \n  } \n\n```", "```js\nSerial.println(\"Remove finger\"); \ndelay(2000); \n  p = 0; \nwhile (p != FINGERPRINT_NOFINGER) { \np = finger.getImage(); \n  } \nSerial.print(\"ID \"); Serial.println(id); \np = -1; \nSerial.println(\"Place same finger again\"); \nwhile (p != FINGERPRINT_OK) { \n    p = finger.getImage(); \nswitch (p) { \ncase FINGERPRINT_OK: \nSerial.println(\"Image taken\"); \nbreak; \ncase FINGERPRINT_NOFINGER: \nSerial.print(\".\"); \nbreak; \ncase FINGERPRINT_PACKETRECIEVEERR: \nSerial.println(\"Communication error\"); \nbreak; \ncase FINGERPRINT_IMAGEFAIL: \nSerial.println(\"Imaging error\"); \nbreak; \ndefault: \nSerial.println(\"Unknown error\"); \nbreak; \n    } \n  } \n\n```", "```js\n  p = finger.image2Tz(2); \nswitch (p) { \ncase FINGERPRINT_OK: \nSerial.println(\"Image converted\"); \nbreak; \ncase FINGERPRINT_IMAGEMESS: \nSerial.println(\"Image too messy\"); \nreturn p; \ncase FINGERPRINT_PACKETRECIEVEERR: \nSerial.println(\"Communication error\"); \nreturn p; \ncase FINGERPRINT_FEATUREFAIL: \nSerial.println(\"Could not find fingerprint features\"); \nreturn p; \ncase FINGERPRINT_INVALIDIMAGE: \nSerial.println(\"Could not find fingerprint features\"); \nreturn p; \ndefault: \nSerial.println(\"Unknown error\"); \nreturn p; \n  } \n\n```", "```js\nSerial.print(\"Creating model for #\");  Serial.println(id); \n\n  p = finger.createModel(); \nif (p == FINGERPRINT_OK) { \nSerial.println(\"Prints matched!\"); \n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) { \nSerial.println(\"Communication error\"); \nreturn p; \n  } else if (p == FINGERPRINT_ENROLLMISMATCH) { \nSerial.println(\"Fingerprints did not match\"); \nreturn p; \n  } else { \nSerial.println(\"Unknown error\"); \nreturn p; \n  }    \n\n```", "```js\nSerial.print(\"ID \"); Serial.println(id); \n  p = finger.storeModel(id); \nif (p == FINGERPRINT_OK) { \nSerial.println(\"Stored!\"); \n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) { \nSerial.println(\"Communication error\"); \nreturn p; \n  } else if (p == FINGERPRINT_BADLOCATION) { \nSerial.println(\"Could not store in that location\"); \nreturn p; \n  } else if (p == FINGERPRINT_FLASHERR) { \nSerial.println(\"Error writing to flash\"); \nreturn p; \n  } else { \nSerial.println(\"Unknown error\"); \nreturn p; \n}    \n} \n\n```"]