- en: Chapter 26. Advanced UI with Navigation Drawer and Fragment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第26章。使用导航抽屉和Fragment的高级UI
- en: In this chapter, we will see what is (arguably) the most advanced UI. The `NavigationView,`
    or navigation drawer (because of the way it slides out its content), can be created
    simply by choosing it as a template when you create a new project. We will do
    just that, and then we will examine the auto-generated code and learn how to interact
    with it. We will then use everything we know about the `Fragment` class to populate
    each of the "drawers" with different behaviors and views. Then, in the next chapter,
    we will learn about databases to add some new functionality to each `Fragment`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到（可以说是）最先进的UI。`NavigationView`或导航抽屉（因为它滑出内容的方式），可以通过在创建新项目时选择它作为模板来简单创建。我们将这样做，然后我们将检查自动生成的代码并学习如何与其交互。然后，我们将使用我们对`Fragment`类的所有了解来填充每个“抽屉”具有不同行为和视图。然后，在下一章中，我们将学习数据库，为每个`Fragment`添加一些新功能。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下主题：
- en: Introducing the `NavigationView` widget
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入`NavigationView`小部件
- en: Getting started with the Age Database app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用年龄数据库应用
- en: Implementing a `NavigationView` using the project template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用项目模板实现`NavigationView`
- en: Adding multiple `Fragment` instances and layouts to `NavigationView`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向`NavigationView`添加多个`Fragment`实例和布局
- en: Let's take a look at this extremely cool UI pattern.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个非常酷的UI模式。
- en: Introducing the NavigationView
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入NavigationView
- en: 'What''s so great about the `NavigationView`? Well the first thing that might
    catch your eye is that it can be made to look extremely stylish. Look at this
    following screenshot, which shows off a `NavigationView` in action in the Google
    Play app:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavigationView`有什么好处？可能首先吸引您注意的是它可以看起来非常时尚。看看下面的截图，展示了Google Play应用中`NavigationView`的运行情况：'
- en: '![Introducing the NavigationView](img/B12806_26_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![引入NavigationView](img/B12806_26_01.jpg)'
- en: To be honest, right from the outset, ours is not going to be as fancy as the
    one in the Google Play app. However, the same functionality will be present in
    our app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，从一开始，我们的应用不会像Google Play应用中的那样花哨。但是我们的应用中将具有相同的功能。
- en: What else is neat about this UI is the way that it slides to hide or reveal
    itself when required. It is because of this behavior that it can be a significant
    size, making it extremely flexible regarding the options that can be added to
    it and, when the user is finished with it, it completely disappears—like a drawer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个UI的另一个亮点是它在需要时滑动隐藏或显示自己的方式。正是因为这种行为，它可以是一个相当大的尺寸，使得它在添加选项时非常灵活，并且当用户完成后，它会完全消失，就像一个抽屉一样。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I suggest trying the Google Play app now and seeing how it works, if you haven't
    already.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有尝试过，我建议现在尝试一下Google Play应用，看看它是如何工作的。
- en: You can slide your thumb or finger from the left-hand edge of the screen and
    the drawer will slowly slide out. You can, of course, slide it away again in the
    opposite direction.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从屏幕的左边缘滑动拇指或手指，抽屉将慢慢滑出。当然，您也可以向相反方向再次滑动它。
- en: While the navigation drawer is open, the rest of the screen is slightly dimmed
    (as seen in the previous screenshot), helping the user to focus on the navigation
    options offered.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 导航抽屉打开时，屏幕的其余部分会略微变暗（如前一个截图所示），帮助用户专注于提供的导航选项。
- en: You can also tap anywhere off the navigation drawer while it is open, and it
    will slide itself away, leaving the entire screen clear for the rest of the layout.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在抽屉打开时，您还可以点击抽屉之外的任何地方，它将自行滑开，为布局的其余部分留出整个屏幕。
- en: The drawer can also be opened by tapping on the menu icon in the top-left corner.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过点击左上角的菜单图标打开抽屉。
- en: We can also tweak and refine the behavior of the navigation drawer, as we will
    see toward the end of the chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以调整和完善导航抽屉的行为，这将在本章末尾看到。
- en: Examining the Age Database app
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查年龄数据库应用
- en: In this chapter, we will focus on creating the `NavigationView` and populating
    it with four `Fragment` classes and their respective layouts. In the next chapter,
    we will learn about, and implement, the database functionality.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于创建`NavigationView`并用四个`Fragment`类及其各自的布局填充它。在下一章中，我们将学习并实现数据库功能。
- en: 'Here is what our `NavigationView` looks like in all its glory. Note that many
    of the options, and most of the appearance and decoration, is provided by default
    when using the `NavigationView` Activity template:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们`NavigationView`的全貌。请注意，当使用`NavigationView`活动模板时，默认情况下提供了许多选项和大部分外观和装饰：
- en: '![Examining the Age Database app](img/B12806_26_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![检查年龄数据库应用](img/B12806_26_02.jpg)'
- en: The four main options are what we will add to the UI. They are **Insert**, **Delete**,
    **Search**, and **Results**. The layouts are shown, and their purposes described,
    next.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 四个主要选项是我们将添加到UI中的。它们是**Insert**，**Delete**，**Search**和**Results**。接下来将展示布局并描述它们的目的。
- en: Insert
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入
- en: 'The first screen allows the user to insert a person''s name and their associated
    age into the database:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个屏幕允许用户将一个人的姓名和相关年龄插入到数据库中：
- en: '![Insert](img/B12806_26_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![插入](img/B12806_26_03.jpg)'
- en: This simple layout has two `EditText` widgets and a button. The user will enter
    a name and an age, and then click the **INSERT** button to add them to the database.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的布局有两个`EditText`小部件和一个按钮。用户将输入姓名和年龄，然后点击**INSERT**按钮将它们添加到数据库中。
- en: Delete
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除
- en: 'This screen is even simpler. The user will enter a name in the `EditText` widget
    and click the button:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕甚至更简单。用户将在`EditText`小部件中输入姓名，然后点击按钮：
- en: '![Delete](img/B12806_26_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![删除](img/B12806_26_04.jpg)'
- en: If the name entered is present in the database, then the entry (name and age)
    will be deleted.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的姓名存在于数据库中，则该条目（姓名和年龄）将被删除。
- en: Search
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索
- en: 'This layout is much the same as the previous layout, but has a different purpose:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局与上一个布局大致相同，但目的不同：
- en: '![Search](img/B12806_26_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![搜索](img/B12806_26_05.jpg)'
- en: The user will enter a name into the `EditText` and then click the button. If
    the name is present in the database, then it will be displayed along with the
    matching age.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将在`EditText`中输入姓名，然后点击按钮。如果数据库中存在该姓名，那么它将显示出来，并显示匹配的年龄。
- en: Results
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果
- en: 'This screen shows all the entries in the entire database:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕显示了整个数据库中的所有条目：
- en: '![Results](img/B12806_26_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![结果](img/B12806_26_06.jpg)'
- en: Let's get started with the app and the navigation drawer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用应用和导航抽屉。
- en: Starting the Age Database project
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Age Database项目
- en: 'Create a new project in Android Studio. Call it `Age Database`, use the **Navigation
    Drawer Activity** template, and leave all the other settings as we have throughout
    the book. Before we do anything else, it is well worth running the app on an emulator
    to see how much has been auto-generated as part of this template, as can be seen
    in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目。将其命名为`Age Database`，使用**Navigation Drawer Activity**模板，并将所有其他设置保持与本书中一致。在做其他任何事情之前，值得在模拟器上运行应用程序，看看作为模板的一部分自动生成了多少，如下面的截图所示：
- en: '![Starting the Age Database project](img/B12806_26_07.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![启动Age Database项目](img/B12806_26_07.jpg)'
- en: 'At first glance, it is just a plain old layout with a `TextView`. But, swipe
    from the left edge, or press the menu button, and the navigation drawer reveals
    itself:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，它只是一个普通的布局，带有一个`TextView`。但是，从左边缘滑动，或者按菜单按钮，导航抽屉就会显示出来。
- en: '![Starting the Age Database project](img/B12806_26_08.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![启动Age Database项目](img/B12806_26_08.jpg)'
- en: Now, we can modify the options and insert a `Fragment` instance (with a layout)
    for each option. To understand how it works, let's examine the auto-generated
    code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以修改选项，并为每个选项插入一个`Fragment`实例（带有布局）。要理解它是如何工作的，让我们来看看自动生成的代码。
- en: Exploring the auto-generated code and assets
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索自动生成的代码和资源
- en: 'In the `drawable` folder, there are some icons, as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`drawable`文件夹中，有一些图标，如下面的截图所示：
- en: '![Exploring the auto-generated code and assets](img/B12806_26_09.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![探索自动生成的代码和资源](img/B12806_26_09.jpg)'
- en: These are the usual icons, but also the ones that appear in the menu of the
    navigation drawer. We will not take the trouble to change these, but if you want
    to personalize the icons in your app, it should be plain by the end of this exploration
    how to do so.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是通常的图标，也是出现在导航抽屉菜单中的图标。我们不会费心去更改它们，但如果你想个性化你的应用中的图标，通过本次探索最终应该清楚如何做到。
- en: 'Next, open the `res/menu` folder. Notice that there is an extra file titled
    `activity_main_drawer.xml`. This next code is an excerpt from this file, so we
    can discuss its contents:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`res/menu`文件夹。请注意，那里有一个额外的文件，名为`activity_main_drawer.xml`。下面的代码是从这个文件中摘录出来的，所以我们可以讨论它的内容：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice there are four `item` tags within a `group` tag. Now, notice how the
    `title` tags from top to bottom (`Import`, `Gallery`, `Slideshow`, and `Tools`)
    exactly correspond to the first four text options in the menu of the auto-generated
    navigation drawer. Also, notice that within each `item` tag there is an `id` tag,
    so we can refer to them in our Kotlin code, as well as an `icon` tag, which corresponds
    to one of the icons in the `drawable` folder we have just seen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`group`标签中有四个`item`标签。现在，请注意从上到下的`title`标签（`Import`，`Gallery`，`Slideshow`和`Tools`）与自动生成的导航抽屉菜单中的前四个文本选项完全对应。另外，请注意在每个`item`标签中都有一个`id`标签，这样我们就可以在Kotlin代码中引用它们，还有一个`icon`标签，对应着我们刚刚看到的`drawable`文件夹中的图标之一。
- en: Also, look in the `layout` folder at the `nav_header_main.xml` file, which contains
    the layout for the header of the drawer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请查看`layout`文件夹中的`nav_header_main.xml`文件，其中包含了抽屉的头部布局。
- en: The rest of the files are as we have come to expect, but there are a few more
    key points to note in the Kotlin code. These are in the `MainActivity.kt` file.
    Open it up now and we will look at them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的文件都如我们所料，但在Kotlin代码中还有一些要注意的关键点。这些都在`MainActivity.kt`文件中。现在打开它，我们来看看它们。
- en: 'The first is the extra code in the `onCreate` function that handles various
    aspects of our UI. Look at this additional code, and then we can discuss it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是`onCreate`函数中处理我们UI各个方面的额外代码。看看这段额外的代码，然后我们可以讨论它：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code gets a reference to a `DrawerLayout,` which corresponds to the layout
    we have just seen. The code also creates a new instance of `ActionBarDrawerToggle`,
    which allows the controlling or toggling of the drawers. The final line of code
    sets a listener on the `NavigationView`. Now, Android will call a special function
    every time the user interacts with the navigation drawer. This special function
    I refer to is `onNavigationItemSelected`. We will see this auto-generated function
    in a minute.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码获取了一个`DrawerLayout`的引用，它对应着我们刚刚看到的布局。代码还创建了一个`ActionBarDrawerToggle`的新实例，它允许控制或切换抽屉。代码的最后一行在`NavigationView`上设置了一个监听器。现在，每当用户与导航抽屉交互时，Android都会调用一个特殊的函数。我所指的这个特殊函数是`onNavigationItemSelected`。我们将在一分钟内看到这个自动生成的函数。
- en: 'Next, look at the `onBackPressed` function:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，看一下`onBackPressed`函数：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is an overridden function of the `Activity` class and it handles what happens
    when the user presses the back button on their device. The code closes the drawer
    if it is open and, if it is not, simply calls `super.onBackPressed`. This means
    that the back button will close the drawer if it is open or use the default behavior
    if it was already closed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Activity`类的一个重写函数，它处理用户在设备上按返回按钮时发生的情况。如果抽屉打开，代码会关闭它；如果抽屉没有打开，代码会简单地调用`super.onBackPressed`。这意味着如果抽屉打开，按返回按钮会关闭抽屉；如果抽屉已经关闭，会使用默认行为。
- en: 'Now, look at the `onNavigationItemSelected` function, which is key to the functionality
    of this app:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看一下`onNavigationItemSelected`函数，这对应着应用功能的关键部分：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the `when` block branches correspond to the `id` values contained
    in the `activity_main_drawer.xml` file. This is where we will respond to the user
    selecting options in our navigation drawer menu. Currently, the `when` code does
    nothing. We will change it to load a specific `Fragment`, along with its related
    layout, into the main view. This will mean that our app will have entirely separate
    functionality and a separate UI, depending on the user's choice from the menu—as
    described when we discussed the MVC pattern in [Chapter 24](ch24.html "Chapter 24. Design
    Patterns, Multiple Layouts, and Fragments"), *Design Patterns, Multiple Layouts,
    and Fragments*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`when`块分支对应于`activity_main_drawer.xml`文件中包含的`id`值。这是我们将响应用户在导航抽屉菜单中选择选项的地方。目前，`when`代码什么也不做。我们将更改它以加载特定的`Fragment`以及其相关的布局到主视图中。这意味着我们的应用将根据用户从菜单中的选择具有完全不同的功能和独立的UI，就像我们在[第24章](ch24.html
    "第24章。设计模式、多个布局和片段")中讨论MVC模式时所描述的那样，*设计模式、多个布局和片段*。
- en: Let's code the `Fragment` classes and their layouts, and then we can come back
    and write the code to use them in the `onNavigationItemSelected` function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写`Fragment`类和它们的布局，然后我们可以回来编写代码，使用它们在`onNavigationItemSelected`函数中。
- en: Coding the Fragment classes and their layouts
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写片段类及其布局
- en: We will create the four classes, including the code that loads the layout as
    well as the actual layouts, but we won't put any of the database functionality
    into the Kotlin code until we have learned about Android databases in the next
    chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建四个类，包括加载布局的代码以及实际的布局，但是在学习了Android数据库之后，我们不会将任何数据库功能放入Kotlin代码中。
- en: Once we have our four classes and their layouts, we will see how to load them
    from the navigation drawer menu. By the end of the chapter, we will have a fully
    working navigation drawer that lets the user swap between fragments, but the fragments
    won't do anything until the next chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有了四个类和它们的布局后，我们将学习如何从导航抽屉菜单中加载它们。在本章结束时，我们将拥有一个完全可用的导航抽屉，让用户在片段之间切换，但是在下一章之前，这些片段不会有任何功能。
- en: Creating the empty files for the classes and layouts
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为类和布局创建空文件
- en: Create four layout files with vertical `LinearLayout` as their parent view by
    right-clicking on the `layout` folder and selecting **New** | **Layout resource
    file**. Name the first file `content_insert`, the second `content_delete`, the
    third `content_search`, and the fourth `content_results`. All the other options
    can be left at their defaults.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击`layout`文件夹并选择**新建** | **布局资源文件**来创建四个布局文件，它们的父视图都是垂直的`LinearLayout`。将第一个文件命名为`content_insert`，第二个为`content_delete`，第三个为`content_search`，第四个为`content_results`。其他选项可以保持默认值。
- en: 'You should now have four new layout files containing `LinearLayout` parents,
    as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该有四个新的布局文件，其中包含`LinearLayout`父视图，如下截图所示：
- en: '![Creating the empty files for the classes and layouts](img/B12806_26_10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![为类和布局创建空文件](img/B12806_26_10.jpg)'
- en: Let's code the Kotlin classes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写Kotlin类。
- en: Coding the classes
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写类
- en: Create four new classes by right-clicking the folder that contains the `MainActivity.kt`
    file and selecting **New** | **Kotlin File/Class**. Name them `InsertFragment`,
    `DeleteFragment`, `SearchFragment`, and `ResultsFragment`. It should be plain
    from the names which fragments will show which layouts.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击包含`MainActivity.kt`文件的文件夹并选择**新建** | **Kotlin文件/类**来创建四个新类。将它们命名为`InsertFragment`、`DeleteFragment`、`SearchFragment`和`ResultsFragment`。从名称上就可以看出哪些片段将显示哪些布局。
- en: Next, let's add some code to each class to make the classes inherit from `Fragment`
    and load their associated layout.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为每个类添加一些代码，使这些类从`Fragment`继承并加载它们相关的布局。
- en: 'Open `InsertFragment.kt` and edit it to contain the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`InsertFragment.kt`并编辑它，使其包含以下代码：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open `DeleteFragment.kt` and edit it so that it contains the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`DeleteFragment.kt`并编辑它，使其包含以下代码：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `SearchFragment.kt` and edit it so that it contains the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`SearchFragment.kt`并编辑它，使其包含以下代码：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open `ResultsFragment.kt` and edit it so that it contains the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`ResultsFragment.kt`并编辑它，使其包含以下代码：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each class is completely devoid of functionality, except that in the `onCreateView`
    function, the appropriate layout is loaded from the associated layout file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类完全没有功能，除了在`onCreateView`函数中，从相关的布局文件加载适当的布局。
- en: Let's add the UI to the layout files we created earlier.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为之前创建的布局文件添加UI。
- en: Designing the layouts
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计布局
- en: As we saw at the start of the chapter, all the layouts are simple. Getting your
    layouts identical to mine is not essential but, as always, the `id` attribute
    values must be the same or the Kotlin code we write in the next chapter won't
    work.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头所看到的，所有的布局都很简单。让你的布局与我的完全相同并不是必要的，但是，如同往常一样，`id`属性值必须相同，否则我们在下一章中编写的Kotlin代码将无法工作。
- en: Designing content_insert.xml
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_insert.xml
- en: Drag two **Plain Text** widgets from the **Text** category of the palette onto
    the layout. Remember that **Plain Text** widgets are `EditText` instances. Now,
    drag a **Button** onto the layout after the two **EditText**/**Plain Text** widgets.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从**文本**类别的调色板中拖动两个**纯文本**小部件到布局中。记住**纯文本**小部件是`EditText`实例。现在，在两个**EditText**/**纯文本**小部件之后，拖动一个**按钮**到布局中。
- en: 'Configure the widgets according to this table:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个表格配置小部件：
- en: '| Widget | Attribute and value |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 属性和值 |'
- en: '| --- | --- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Top edit text | id = `editName` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 顶部编辑文本 | id = `editName` |'
- en: '| Top edit text | text = `Name` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 顶部编辑文本 | 文本 = `姓名` |'
- en: '| Second edit text | id = `editAge` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 第二个编辑文本 | id = `editAge` |'
- en: '| Second edit text | text = `Age` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 第二个编辑文本 | 文本 = `年龄` |'
- en: '| Button | id = `btnInsert` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | id = `btnInsert` |'
- en: '| Button | text = `Insert` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 文本 = `插入` |'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的布局在Android Studio的设计视图中应该是这样的：
- en: '![Designing content_insert.xml](img/B12806_26_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![设计content_insert.xml](img/B12806_26_11.jpg)'
- en: Designing content_delete.xml
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_delete.xml
- en: 'Drag a **Plain Text**/**EditText** widget onto the layout with a **Button**
    below it. Configure the widgets according to the following table:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将**普通文本**/**EditText**小部件拖放到布局上方，下方是一个**按钮**。根据以下表格配置小部件：
- en: '| Widget | Attribute value |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 属性值 |'
- en: '| --- | --- |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| EditText | id = `editDelete` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| EditText | id = `editDelete` |'
- en: '| EditText | text = `Name` |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| EditText | 文本 = `名称` |'
- en: '| Button | id = `btnDelete` |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | id = `btnDelete` |'
- en: '| Button | text = `Delete` |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 文本 = `删除` |'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在Android Studio的设计视图中的布局应该看起来的样子：
- en: '![Designing content_delete.xml](img/B12806_26_12.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![设计content_delete.xml](img/B12806_26_12.jpg)'
- en: Designing content_search.xml
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_search.xml
- en: 'Drag a **Plain Text**/**EditText** widget, followed by a **Button** and then
    a regular **TextView**, onto the layout, and then configure the widgets according
    to the following table:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将**普通文本**/**EditText**小部件拖放到布局上方，然后是一个**按钮**，然后是一个常规的**TextView**，然后根据以下表格配置小部件：
- en: '| Widget | Attribute value |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 属性值 |'
- en: '| --- | --- |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| EditText | id = `editSearch` |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| EditText | id = `editSearch` |'
- en: '| EditText | text = `Name` |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| EditText | 文本 = `名称` |'
- en: '| Button | id = `btnSearch` |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | id = `btnSearch` |'
- en: '| Button | text = `Search` |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 文本 = `搜索` |'
- en: '| TextView | id = `textResult` |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| TextView | id = `textResult` |'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在Android Studio的设计视图中的布局应该看起来的样子：
- en: '![Designing content_search.xml](img/B12806_26_13.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![设计content_search.xml](img/B12806_26_13.jpg)'
- en: Designing content_results.xml
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_results.xml
- en: Drag a single `TextView` (not **Plain Text**/**EditText** this time) onto the
    layout. We will see in the next chapter how to add an entire list to this single
    `TextView`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个`TextView`（这次不是**普通文本**/**EditText**）拖放到布局中。在下一章中，我们将看到如何将整个列表添加到这个单个`TextView`中。
- en: 'Configure the widget according to the following table:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下表格配置小部件：
- en: '| Widget | Attribute value |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 属性值 |'
- en: '| --- | --- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| TextView | id = `textResults` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| TextView | id = `textResults` |'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在Android Studio的设计视图中的布局应该看起来的样子：
- en: '![Designing content_results.xml](img/B12806_26_14.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![设计content_results.xml](img/B12806_26_14.jpg)'
- en: Now, we can use the classes based on the `Fragment` class, and their layouts.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用基于`Fragment`类和它们的布局的类。
- en: Using the Fragment classes and their layouts
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`Fragment`类及其布局
- en: This stage has three steps. First, we need to edit the menu of the navigation
    drawer to reflect the options the user has. Next, we need a `View` instance in
    the layout to hold whatever the active `Fragment` instance is, and finally, we
    need to add code to `MainActivity.kt` to switch between the different `Fragment`
    instances when the user taps on the menu of the navigation drawer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段有三个步骤。首先，我们需要编辑导航抽屉的菜单，以反映用户的选项。接下来，我们需要在布局中添加一个`View`实例，以容纳当前活动的`Fragment`实例，最后，我们需要在`MainActivity.kt`中添加代码，以在用户点击导航抽屉菜单时在不同的`Fragment`实例之间切换。
- en: Editing the navigation drawer menu
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑导航抽屉菜单
- en: 'Open the `activity_main_drawer.xml` file in the `res/menu` folder of the project
    explorer. Edit the code within the `group` tags that we saw earlier to reflect
    our menu options of **Insert**, **Delete**, **Search**, and **Results**:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目资源管理器的`res/menu`文件夹中打开`activity_main_drawer.xml`文件。编辑`group`标签中的代码，以反映我们的**插入**、**删除**、**搜索**和**结果**菜单选项：
- en: '[PRE8]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Now would be a good time to add new icons to the `drawable` folder and edit
    the preceding code to refer to them if you wanted to use your own icons.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个很好的时机，可以向`drawable`文件夹添加新的图标，并编辑前面的代码以引用它们，如果您想使用自己的图标。
- en: Adding a holder to the main layout
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向主布局添加一个占位符
- en: 'Open the `content_main.xml` file in the layout folder and add this highlighted
    XML code just before the closing tag of the `ConstraintLayout`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局文件夹中打开`content_main.xml`文件，并在`ConstraintLayout`的闭合标签之前添加以下突出显示的XML代码：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we have a `FrameLayout` with an `id` attribute of `fragmentHolder` that
    we can get a reference to and load all our `Fragment` instance layouts into.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个`id`属性为`fragmentHolder`的`FrameLayout`，我们可以引用并将所有`Fragment`实例的布局加载到其中。
- en: Coding the MainActivity.kt file
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写MainActivity.kt文件
- en: 'Open the `MainActivity` file and edit the `onNavigationItemSelected` function
    to handle all the different menu options the user can choose from:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity`文件，并编辑`onNavigationItemSelected`函数，以处理用户可以选择的所有不同菜单选项：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's go through the code we just added. Most of the code should look familiar.
    For each of our menu options, we create a new `Fragment` instance of the appropriate
    type and insert it into our `FrameLayout` with an `id` value of `fragmentHolder`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们刚刚添加的代码。大部分代码应该看起来很熟悉。对于我们的每个菜单选项，我们创建一个相应类型的新`Fragment`实例，并将其插入到`id`值为`fragmentHolder`的`FrameLayout`中。
- en: The `transaction.addToBackStack` function call means that the chosen `Fragment`
    will be remembered in order with any others. The result of this is that if the
    user chooses the **Insert** fragment, then the **Results** fragment and then taps
    the back button, the app will return the user to the **Insert** fragment.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`transaction.addToBackStack`函数调用意味着所选的`Fragment`将按顺序与其他`Fragment`一起被记住。这样做的结果是，如果用户选择**插入**片段，然后选择**结果**片段，然后点击返回按钮，应用程序将把用户返回到**插入**片段。'
- en: You can now run the app and use the navigation drawer menu to flip between all
    our different `Fragment` instances. They will look just as they did in the images
    at the start of this chapter, but they don't have any functionality yet.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以运行应用程序，并使用导航抽屉菜单在所有不同的`Fragment`实例之间切换。它们看起来就像本章开头的图片一样，但它们还没有任何功能。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how straightforward it is to have an attractive and
    pleasing UI and, although our `Fragment` instances don't have any functionality
    yet, they are set up ready to go once we have learned about databases.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了拥有一个吸引人和令人愉悦的UI是多么简单，尽管我们的`Fragment`实例还没有任何功能，但一旦我们学会了数据库，它们就已经准备就绪了。
- en: In the next chapter, we will learn about databases in general, and the specific
    database that Android apps can use, before we add the functionality to our `Fragment`
    classes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于数据库的一般知识，以及Android应用程序可以使用的特定数据库，在我们为`Fragment`类添加功能之前。
