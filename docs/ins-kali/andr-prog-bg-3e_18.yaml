- en: '*Chapter 18*: Localization'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第18章*：本地化'
- en: This chapter is quick and simple and what we will learn to do here can make
    your app accessible to millions more potential users. We will see how to add additional
    languages. We will also see how adding text the correct way via string resources
    benefits us when it comes to adding multiple languages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容简洁明了，我们将学习的内容可以使您的应用程序对数百万潜在用户更加可访问。我们将看到如何添加额外的语言。我们还将看到通过字符串资源以正确的方式添加文本在添加多种语言时对我们的好处。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Making the Note to Self app multilingual by adding the Spanish and German languages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过添加西班牙语和德语语言使“Note to Self”应用程序多语言化
- en: Learning how to use string resources more fully
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更全面地学习如何使用字符串资源
- en: Let's get started.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2018](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2018).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中的代码文件[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2018](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2018)。
- en: Making the Note to Self app accessible for Spanish and German speakers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使“Note to Self”应用程序对西班牙语和德语使用者可访问
- en: First, we need to add some folders to our project – one for each new language.
    The text is classed as a `res` folder. Follow these steps to add Spanish and German
    support to the project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要向我们的项目添加一些文件夹 - 每种新语言一个文件夹。这些文本被归类为`res`文件夹。按照以下步骤向项目添加西班牙语和德语支持。
- en: Important Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: While the source files for this project are provided in the [*Chapter 18*](B16773_18_ePub_RK.xhtml#_idTextAnchor320)
    folder, they are just for reference. You need to go through the processes described
    next to achieve multilingual functionality.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然此项目的源文件位于[*第18章*](B16773_18_ePub_RK.xhtml#_idTextAnchor320)文件夹中，但它们仅供参考。您需要按照下面描述的流程来实现多语言功能。
- en: Adding Spanish language support
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加西班牙语支持
- en: 'Follow the next steps to add Spanish language support:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加西班牙语支持：
- en: Right-click on the `values-es`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`values-es`。
- en: Left-click **OK**.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左键单击**确定**。
- en: Now we need to add a file in which we can place all our Spanish translations.
    Right-click on `strings.xml` in the `values-es` in the **Directory name** field.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加一个文件，我们可以把所有的西班牙语翻译放在里面。在**目录名称**字段中，右键单击`values-es`中的`strings.xml`。
- en: Left-click **OK**.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左键单击**确定**。
- en: At this stage, we have a new folder for Spanish translations with a `strings.xml`
    file inside for the string resources. Let's do the same for the German language.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们有一个新的文件夹，用于西班牙语翻译，里面有一个`strings.xml`文件，用于字符串资源。让我们也为德语做同样的事情。
- en: Adding German language support
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加德语语言支持
- en: 'Follow these steps to add German language support:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加德语语言支持：
- en: Right-click on the `values-de`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`values-de`。
- en: Left-click **OK**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左键单击**确定**。
- en: Now we need to add a file in which we can place all our German translations.
    Right-click on `strings.xml` in the `values-de` in the **Directory name** field.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加一个文件，我们可以把所有的德语翻译放在里面。在**目录名称**字段中，右键单击`values-de`中的`strings.xml`。
- en: Left-click **OK**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左键单击**确定**。
- en: 'This is what the `strings.xml` folder looks like. You are probably wondering
    where the `strings.xml` folder came from as it doesn''t correspond to the structure
    we seemed to be creating in the previous steps. Android Studio is helping us (apparently)
    to organize our files and folders as is required by the Android operating system.
    You can, however, see the Spanish and German files indicated by their country-specific
    extensions, **es** and **de**, respectively:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`strings.xml`文件夹的样子。您可能想知道`strings.xml`文件夹是从哪里来的，因为它与我们似乎在之前的步骤中创建的结构不符。Android
    Studio正在帮助我们（显然）组织我们的文件和文件夹，以符合Android操作系统的要求。但是，您可以看到西班牙语和德语文件，分别由它们的特定于国家的扩展**es**和**de**指示：
- en: '![Figure 18.1 – strings.xml folder'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.1 - strings.xml文件夹'
- en: '](img/Figure_18.1_B16773.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.1_B16773.jpg)'
- en: Figure 18.1 – strings.xml folder
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.1 - strings.xml文件夹
- en: Now we can add the translations to the files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以向文件添加翻译。
- en: Adding the string resources
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加字符串资源
- en: As we know, the `strings.xml` file contains the words that the app will display
    – words such as "important," "to do," "idea," and more. By having a `strings.xml`
    file for each language we want to support, we can then leave Android to choose
    the appropriate text depending on the language settings of the user.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，`strings.xml`文件包含应用程序将显示的单词 - 诸如“重要”，“待办事项”，“想法”等。通过为我们想要支持的每种语言都有一个`strings.xml`文件，我们可以让Android根据用户的语言设置选择适当的文本。
- en: As you go through the following, notice that although we place the translation
    of whatever word we are translating as the value, the `name` attribute remains
    the same. If you think about it, this is logical because it is the `name` attribute
    that we refer to in our layout files.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在您进行以下操作时，请注意，尽管我们将要翻译的单词的翻译放在值中，但`name`属性保持不变。如果您仔细想想，这是合乎逻辑的，因为我们在布局文件中引用的是`name`属性。
- en: 'Let''s provide the translations, see what we have achieved, and then come back
    and discuss what we will do about the text in our Java code. The simplest way
    to achieve this code is to copy and paste the code from the original `strings.xml`
    file and then edit the values of each of the `name` attributes:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提供翻译，看看我们取得了什么成就，然后回来讨论我们将如何处理Java代码中的文本。实现此代码的最简单方法是从原始的`strings.xml`文件中复制并粘贴代码，然后编辑每个`name`属性的值：
- en: 'Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the **(es)** postfix. Edit the file to look like this:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击打开`strings.xml`文件。确保选择带有**(es)**后缀的文件。编辑文件使其看起来像这样：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the `strings.xml` files, then the missing resources will be taken from
    the default file.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击打开`strings.xml`文件。确保选择与`strings.xml`文件相邻的文件，然后缺少的资源将从默认文件中获取。
- en: What we have done is provided two translations. Android knows which translation
    is for which language because of the folders they are placed in. Furthermore,
    we have used a `name` attribute) to refer to the translations. Look back at the
    previous code and you will see that the same identifier is used for both translations
    as well as in the original `strings.xml` file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是提供了两种翻译。Android知道哪种翻译是为哪种语言，因为它们所放置的文件夹。此外，我们使用了一个`name`属性来引用翻译。回顾一下以前的代码，您会看到相同的标识符用于两种翻译以及原始的`strings.xml`文件。
- en: 'You can even localize to different versions of a language, for example, US
    or UK English. The complete list of codes can be found here: [http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android](http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android).
    You can even localize resources such as images and sound. Find out more about
    this here: [http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以将本地化到不同版本的语言，例如美国或英国英语。完整的代码列表可以在这里找到：[http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android](http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android)。您甚至可以本地化资源，如图像和声音。在这里了解更多信息：[http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html)。
- en: The translations were copy and pasted from Google Translate, so it is very likely
    that some of the translations are far from correct. Doing translation on the cheap
    like this can be an effective way to get an app with a basic set of string resources
    onto the devices of users who speak different languages to yourself. Once you
    start needing any depth of translation, perhaps in the case of the lines of a
    story-driven game or a social media app, you will certainly benefit from having
    the translation done by a human professional.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些翻译是从谷歌翻译复制并粘贴而来的，因此很可能有些翻译与正确的相去甚远。像这样廉价地进行翻译可能是将具有基本字符串资源集的应用程序放入使用不同语言的用户设备的有效方式。一旦您开始需要任何深度的翻译，也许在叙事驱动的游戏或社交媒体应用的情况下，您肯定会受益于由人类专业人员进行的翻译。
- en: The purpose of this exercise is to show how Android works, not how to translate.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的目的是展示Android的工作原理，而不是如何翻译。
- en: Note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: My sincere apologies to any Spanish or German speakers who can likely see the
    limitations of the translations provided here.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可能看到这里提供的翻译的局限性的任何西班牙语或德语使用者，我表示诚挚的歉意。
- en: Now that we have the translations, we can see them in action, up to a point.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了翻译，我们可以看到它们在一定程度上起作用。
- en: Running Note to Self in German or Spanish
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在德语或西班牙语中运行Note to Self
- en: 'Run the app to see whether it is working as normal. Now we can change the localization
    settings to see it in Spanish. Different devices vary slightly in how to do this,
    but the Pixel 3 emulator options are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序以查看它是否正常工作。现在我们可以更改本地化设置以在西班牙语中查看它。不同的设备在如何执行此操作上略有不同，但Pixel 3模拟器的选项如下：
- en: Choose **Settings** | **System** | **Languages and input** | **Add a language**.
    Next, select **Español** and you will then be able to switch between Spanish and
    English from a list.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**设置** | **系统** | **语言和输入** | **添加语言**。接下来，选择**Español**，然后您将能够在列表中在西班牙语和英语之间切换。
- en: Left-click and drag **Español (Estados Unidos)** so that it is at the top of
    the list.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左键单击并拖动**Español (Estados Unidos)**，使其位于列表顶部。
- en: Congratulations, your emulator is now defaulting to Spanish. Once you are done
    with this chapter, you can drag your preferred language back to the top of the
    list.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您的模拟器现在默认为西班牙语。完成本章后，您可以将首选语言拖回到列表顶部。
- en: 'Now you can run the app in the usual way. Here are some screenshots of the
    app running in Spanish. I have photoshopped a couple of screenshots side by side
    to show different screens of the Note to Self app:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以以通常的方式运行应用程序。以下是应用程序以西班牙语运行的一些屏幕截图。我用Photoshop将一些屏幕截图并排放置，以展示Note to Self应用程序的不同屏幕：
- en: '![Figure 18.2 – The app running in Spanish'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.2 - 应用程序以西班牙语运行'
- en: '](img/Figure_18.2_B16773.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.2_B16773.jpg)'
- en: Figure 18.2 – The app running in Spanish
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.2 - 应用程序以西班牙语运行
- en: In the screenshots, you can clearly see that our app is translated to Spanish,
    mainly. Obviously, the text that the user enters will be in whatever language
    they speak; that is not a flaw of our app. However, look at the screenshots closely
    and notice that I have pointed out a couple of places where the text is still
    in English. We still have some untranslated text in each of our dialog windows.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕截图中，您可以清楚地看到我们的应用程序主要是用西班牙语翻译的。显然，用户输入的文本将是他们所说的任何语言；这不是我们应用程序的缺陷。然而，仔细看屏幕截图，注意我指出了一些文本仍然是英文的地方。我们的每个对话框窗口中仍然有一些未翻译的文本。
- en: This is because the text is contained within our Java code directly. As we have
    seen, it is easy to use string resources in multiple languages and then refer
    to them in our layouts, but how do we refer to string resources from our Java
    code?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为文本直接包含在我们的Java代码中。正如我们所见，使用多种语言的字符串资源然后在我们的布局中引用它们是很容易的，但是我们如何从我们的Java代码中引用字符串资源呢？
- en: Making the translations work in Java code
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使翻译在Java代码中起作用
- en: The first thing to do is create the resources in each of the three `strings.xml`
    files. Here are the two resources that need adding to the three different files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是在三个`strings.xml`文件中创建资源。以下是需要添加到三个不同文件中的两个资源。
- en: 'In `strings.xml` (without any country postfix), add these two resources within
    the `<resources></resources>` tags:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`strings.xml`（没有任何国家后缀），在`<resources></resources>`标签中添加这两个资源：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In `strings.xml` with the `<resources></resources>` tags:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`strings.xml`中使用`<resources></resources>`标签：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In `strings.xml` with the `<resources></resources>` tags:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`strings.xml`中使用`<resources></resources>`标签：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we need to edit some Java code to refer to a resource instead of a hardcoded
    string.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要编辑一些Java代码，以引用资源而不是硬编码的字符串。
- en: 'Open the `DialogNewNote.java` file and find this line of code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`DialogNewNote.java`文件并找到这行代码：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Edit it as shown next to use the string resource we just added instead of the
    hardcoded text:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑如下所示，使用我们刚刚添加的字符串资源而不是硬编码的文本：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The new code uses the chained `getResources.getString` methods to replace the
    previously hardcoded `"Add a new note"` text. Look closely and you will see that
    the argument sent to the `getString` method is the `R.string.add_new_note` string
    identifier.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码使用了链式`getResources.getString`方法来替换先前硬编码的`"Add a new note"`文本。仔细看，你会发现发送给`getString`方法的参数是`R.string.add_new_note`字符串标识符。
- en: The `R.string` code refers to the string resources in the `res` folder and `add_new_note`
    is our identifier. Android will then be able to decide which version (default,
    Spanish, or German) is appropriate based on the locale of the device on which
    the app is running.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.string`代码指的是`res`文件夹中的字符串资源，`add_new_note`是我们的标识符。Android将能够根据应用所在设备的语言环境决定使用哪个版本（默认、西班牙语或德语）。'
- en: We have one more hardcoded string to change.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个硬编码的字符串需要更改。
- en: 'Open the `DialogShowNote.java` file and find this line of code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`DialogShowNote.java`文件并找到这行代码：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Edit it as shown next to use the string resource we just added instead of the
    hardcoded text:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑如下所示，使用我们刚刚添加的字符串资源而不是硬编码的文本：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The new code again uses the chained `getResources.getString` methods to replace
    the previously hardcoded `"Your note"` text. Again, the argument sent to `getString`
    is the string identifier, in this case, `R.string.your_note`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码再次使用了链式`getResources.getString`方法来替换先前硬编码的`"Your note"`文本。同样，发送给`getString`的参数是字符串标识符，这次是`R.string.your_note`。
- en: 'Android can now decide which version (default, Spanish, or German) is appropriate
    based upon the locale of the device on which the app is running. The next screenshot
    shows that the **New note** screen now has the opening text in the appropriate
    language:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Android现在可以根据应用所在设备的语言环境决定使用哪个版本（默认、西班牙语或德语）。下一张截图显示了**新建笔记**界面现在以适当的语言显示开头文本：
- en: '![Figure 18.3 – New note screen'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.3 – 新建笔记界面'
- en: '](img/Figure_18.3_B16773.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.3_B16773.jpg)'
- en: Figure 18.3 – New note screen
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3 – 新建笔记界面
- en: You can add as many string resources as you like. As a reminder from [*Chapter
    3*](B16773_03_ePub_RK.xhtml#_idTextAnchor064), *Exploring Android Studio and the
    Project Structure*, note that using string resources is the recommended way to
    add any text to all projects. The tutorials in this book (apart from Note to Self)
    will tend to hardcode them to make a more compact tutorial.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加任意多个字符串资源。作为[*第3章*](B16773_03_ePub_RK.xhtml#_idTextAnchor064)中的提醒，*探索Android
    Studio和项目结构*，请注意，使用字符串资源是向所有项目添加任何文本的推荐方式。本书中的教程（除了《自言自语》）将倾向于硬编码它们，以便制作更紧凑的教程。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have seen how we can cater to regions of the world that speak a different
    language to us. We can now go global with our apps, as well as adding more flexible
    string resources instead of hardcoding all the text.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何满足世界上说不同语言的地区。我们现在可以让我们的应用全球化，同时添加更灵活的字符串资源，而不是硬编码所有文本。
- en: In the next chapter, we will see how we can add cool animations to our apps
    using animations and interpolators.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用动画和插值器为我们的应用添加酷炫的动画效果。
