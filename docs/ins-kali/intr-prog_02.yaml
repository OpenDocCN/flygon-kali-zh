- en: Java Virtual Machine (JVM) on Your Computer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的计算机上安装Java虚拟机（JVM）
- en: This book will be your guide to achieving an intermediate level of Java programming
    skills. Programming is not just about knowing the language syntax. It is also
    about the tools and sources of information necessary to write, compile, and execute
    a program or run a whole software system. The first step on this road is to learn
    the important components of Java, including **Java Development Kit** (**JDK**)
    and **Java Virtual Machine** (**JVM**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将指导您达到中级Java编程技能。编程不仅仅是了解语言语法。它还涉及编写、编译和执行程序或运行整个软件系统所需的工具和信息来源。这条路上的第一步是学习Java的重要组件，包括**Java开发工具包**（**JDK**）和**Java虚拟机**（**JVM**）。
- en: This chapter will introduce Java as a language and a tool, and establish the
    most important terminology. It will also describe the motivation behind Java's
    creation, cover its history, editions, versions, and technologies, and outline
    Java's marketing position and main areas of application. Then, a sequence of practical
    steps will walk readers through the process of Java installation and configuration
    on their computers, and introduce the main Java commands.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍Java作为一种语言和工具，并建立最重要的术语。它还将描述Java创建背后的动机，涵盖其历史、版本、版本和技术，并概述Java的营销位置和主要应用领域。然后，一系列实际步骤将引导读者完成在其计算机上安装和配置Java，并介绍主要的Java命令。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is Java?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Java？
- en: Java platforms, editions, versions, and technologies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java平台、版本、版本和技术
- en: Java SE Development Kit (JDK) installation and configuration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE开发工具包（JDK）的安装和配置
- en: Main Java commands
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要的Java命令
- en: Exercise – JDK tools and utilities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习- JDK工具和实用程序
- en: What is Java?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Java？
- en: Since this book is written for beginners, we will assume that you know almost
    nothing about Java. But even if you do know something, or even a lot, it is always
    helpful to review the basics, even if it's just so you can feel good about yourself
    by appreciating how much you have mastered already. So, we will start by defining
    the terms Java, JVM, compilation, bytecode, and more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书是为初学者编写的，我们将假设你对Java几乎一无所知。但即使你知道一些，甚至很多，回顾基础知识也总是有帮助的，即使只是让你通过欣赏自己已经掌握了多少而感到自豪。因此，我们将从定义Java、JVM、编译、字节码等术语开始。
- en: Basic terms
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本术语
- en: When talking about Java, people use Java, JVM, JDK, SDK, and Java platform as
    synonyms. The legal definition treats Java as *Sun's trademark for a set of technologies*,
    but we typically do not think about Java as a trademark. Most often, when somebody
    says Java, they mean a programming language that is used by humans to express
    sets of instructions (programs) that can be executed by a computer (not directly,
    but after the program is compiled/transformed into code that a computer understands).
    The human-readable Java program is called **source code**, and the computer-readable
    program (after all transformations) is called **binary code**, because it is expressed
    only using 1 and 0.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论Java时，人们将Java、JVM、JDK、SDK和Java平台视为同义词。法律定义将Java视为*Sun公司一套技术的商标*，但我们通常不会将Java视为商标。最常见的情况是，当有人说Java时，他们指的是一种由人类用来表达一系列指令（程序）的编程语言，这些指令可以由计算机执行（不是直接执行，而是在程序被编译/转换为计算机理解的代码之后）。人类可读的Java程序称为**源代码**，经过所有转换后的计算机可读程序称为**二进制代码**，因为它只使用1和0来表示。
- en: You can find the complete **Java Language Specification** (description) at [https://docs.oracle.com/javase/specs/](https://docs.oracle.com/javase/specs/).
    It is much more accessible than one might expect, and it can be helpful even for
    a novice, especially if one uses it as a reference document. Do not feel discouraged
    by the formal language of the first few sections. Read what you can and come back
    later, as your understanding of Java grows and the motivation for deeper and more
    precise definitions increases.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.oracle.com/javase/specs/](https://docs.oracle.com/javase/specs/)找到完整的**Java语言规范**（描述）。它比人们预期的要容易得多，即使对于新手来说，它也可能会有所帮助，特别是如果将其用作参考文档。不要因为前几节的正式语言而感到泄气。尽量阅读你能理解的部分，并在理解Java的过程中回来，以及对更深入和更精确的定义的动力增加时再来阅读。
- en: JVM is a program that translates byte code of Java `.class` files into binary
    machine code and sends it to a microprocessor for execution.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JVM是一个程序，它将Java`.class`文件的字节码翻译成二进制机器码，并将其发送到微处理器执行。
- en: Have you noticed that there are two similar terms, *bytecode* and *byte code*?
    In conversation, the difference is hardly noticeable, so people use them interchangeably.
    But there is a difference. *Byte code* (or *Byte Code*, to be precise) is a language
    that can be executed by a special program called JVM. By contrast, *bytecode* is
    the format (each instruction occupies one byte, thus the name) of the instructions
    generated by the Java compiler (another program) that reads the human-readable
    source code and transforms it into Byte Code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到有两个类似的术语，*bytecode*和*byte code*？在对话中，这两者的区别几乎是不可察觉的，所以人们可以互换使用它们。但是它们是有区别的。*Byte
    code*（或*Byte Code*，更准确地说）是一种可以由名为JVM的特殊程序执行的语言。相比之下，*bytecode*是由Java编译器（另一个程序）生成的指令的格式（每个指令占用一个字节，因此得名），该编译器读取人类可读的源代码并将其转换为Byte
    Code。
- en: Bytecode is a binary code expressed in the format JVM understands. JVM then
    reads (loads, using a program called **class loader**) bytecodes, transforms the
    instructions into binary code (instructions in a format a particular computer
    microprocessor, where JVM is running, understands), and passes the result to the
    CPU, a microprocessor that executes it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Bytecode是以JVM理解的格式表达的二进制代码。然后，JVM读取（加载，使用名为**类加载器**的程序）字节码，将指令转换为二进制代码（JVM正在运行的特定计算机微处理器理解的格式中的指令），并将结果传递给CPU，即执行它的微处理器。
- en: A class is a file (with the extension `.class`) produced by the Java compiler
    (from the source code in a file with the same name and the extension `.java`).
    There are more than a dozen JVM implementations, created by different companies,
    but we will be focusing on Oracle JVM's implementation, which is called **HotSpot**.
    In [Chapter 11](e8c37d86-291d-4500-84ea-719683172477.xhtml), *JVM Processes and
    Garbage Collection*, we will look more closely at JVM's functionality, architecture,
    and processes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类是由Java编译器生成的文件（扩展名为.class），从具有相同名称和扩展名为.java的源代码文件中生成。有十多种JVM实现，由不同公司创建，但我们将重点关注Oracle
    JVM的实现，称为HotSpot。在第11章，JVM进程和垃圾收集中，我们将更仔细地查看JVM的功能、架构和进程。
- en: On the same page as the Java Language Specification ([https://docs.oracle.com/javase/specs](https://docs.oracle.com/javase/specs)),
    you can find the Java Virtual Machine Specification. We recommend that you use
    it as a source of references for the terminology and for the understanding of
    JVM functionality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java语言规范（https://docs.oracle.com/javase/specs）的同一页上，您可以找到Java虚拟机规范。我们建议您将其用作术语和理解JVM功能的参考来源。
- en: JDK is a collection of software tools and supporting libraries that allow for
    the creation and execution of Java language programs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JDK是一组软件工具和支持库，允许创建和执行Java语言程序。
- en: Since Java 9, applets (components that can be executed in a browser) are not
    supported anymore, so we will not talk much about them. An application is a Java
    program that can be (after compilation) executed on a computer where JVM is installed.
    So, JDK includes at minimum a compiler, JVM, and **Java Class Library** (JCL)—a
    collection of ready-to-use procedures that can be called by an application. But
    in reality, it has many other tools and utilities that can help you to compile,
    execute, and monitor a Java application. The subset of JDK that includes JVM,
    JCL, class loader, and supporting files allows the execution (running) of bytecode.
    Such a combination is called the **Java Runtime Environment** (**JRE**). Each
    Java application is executed in a separate JVM instance (copy) that has its own
    allocated computer memory, so two Java applications cannot talk to each other
    directly, but only via the network (web-services and similar means).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自Java 9以来，不再支持小程序（可以在浏览器中执行的组件），因此我们将不再详细讨论它们。应用程序是可以（编译后）在安装了JVM的计算机上执行的Java程序。因此，JDK至少包括编译器、JVM和Java类库（JCL）-一组可供应用程序调用的即用程序。但实际上，它还有许多其他工具和实用程序，可以帮助您编译、执行和监视Java应用程序。包含JVM、JCL、类加载器和支持文件的JDK子集允许执行（运行）字节码。这样的组合称为Java运行时环境（JRE）。每个Java应用程序都在单独的JVM实例（副本）中执行，该实例具有自己分配的计算机内存，因此两个Java应用程序不能直接交流，而只能通过网络（Web服务和类似手段）进行交流。
- en: '**Software Development Kit** (**SDK**) is a collection of software tools and
    supporting libraries that allow the creation of an application using a certain
    programming language. SDK for Java is called JDK.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发工具包（SDK）是一组软件工具和支持库，允许使用特定编程语言创建应用程序。Java的SDK称为JDK。
- en: So, when people use SDK in reference to JDK, they are correct, but not precise.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当人们在提到JDK时使用SDK时，他们是正确的，但不够精确。
- en: The Java platform is composed of a compiler, JVM, supporting libraries, and
    other tools from JDK.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台由编译器、JVM、支持库和其他工具组成。
- en: The supporting libraries in the preceding definitions are Java standard libraries,
    also called **JCL**, and are necessary for executing bytecode. If a program requires
    some other libraries (not included in JCL), they have to be added at compilation
    time (see [Chapter 3](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml), *Your Development
    Environment Setup*, which describes how to do it) and included in the generated
    bytecode. Java platform can be one of the four:  **Java Platform Standard Edition**
    (**Java SE**), **Java Platform Enterprise Edition** (**Java EE**), **Java Platform Micro
    Edition** (**Java ME**), or **Java Card**. There used to be the JavaFX Platform,
    too, but it has been merged into Java SE since Java 8\. We will talk about the
    differences in the next section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述定义中的支持库是Java标准库，也称为JCL，并且对于执行字节码是必需的。如果程序需要一些其他库（不包括在JCL中），则它们必须在编译时添加（参见第3章，您的开发环境设置，描述了如何执行此操作），并包含在生成的字节码中。Java平台可以是以下四种之一：Java平台标准版（Java
    SE）、Java平台企业版（Java EE）、Java平台微型版（Java ME）或Java Card。以前还有JavaFX平台，但自Java 8以来已合并到Java
    SE中。我们将在下一节讨论差异。
- en: Open JDK is a free and open source implementation of Java SE.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Open JDK是Java SE的免费开源实现。
- en: These are the most basic terms. Other terms will be introduced as needed throughout the
    book, in the corresponding contexts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是最基本的术语。其他术语将根据需要在本书的相应上下文中介绍。
- en: History and popularity
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史和流行度
- en: Java was first released in 1995 by Sun Microsystems. It was derived from C and
    C++, but did not allow users to manipulate computer memory on a very low level,
    which is the source of many difficulties, including memory leak related issues,
    that C and C++ programmers experience if they are not very careful about it. Java
    stood out due to its simplicity, portability, interoperability, and safety net,
    which allowed it to become one of the most popular programming languages. It is
    estimated that as of 2017, there are close to 20 million programmers in the world
    (close to 4 million of them are in the US), and approximately half of them use
    Java. And there are good reasons to believe that the need for software developers,
    including Java developers, will only grow in the future. So, studying Java looks
    like a step towards a stable career. And learning Java is not actually very difficult.
    We will show you how to do it; just continue reading, thinking, and trying all
    the suggestions in practice on your computer.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Java于1995年首次由Sun Microsystems发布。它源自C和C++，但不允许用户在非常低的层次上操纵计算机内存，这是许多困难的根源，包括内存泄漏相关的问题，如果C和C++程序员对此不太小心的话，他们会遇到。Java因其简单性、可移植性、互操作性和安全性而脱颖而出，这使其成为最受欢迎的编程语言之一。据估计，截至2017年，全球有近2000万程序员（其中近400万在美国），其中大约一半使用Java。有充分的理由相信，未来对软件开发人员的需求，包括Java开发人员，只会增长。因此，学习Java看起来是迈向稳定职业的一步。而学习Java实际上并不是非常困难。我们将向您展示如何做到这一点；只需继续阅读、思考，并在计算机上实践所有建议。
- en: 'Java was conceived as a facility that allows users to *write once, run anywhere*
    – that is another term to explain and understand. It means that compiled Java
    code can run on all computers with operating systems that support Java, without
    the need for recompilation. As you understand already, *support Java* means that
    for each operating system, an interpreter exists that can transform bytecode into
    binary code. That''s how *run anywhere* is implemented: anywhere where a Java
    interpreter is available.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Java被构想为一种允许用户*一次编写，到处运行*的工具-这是另一个解释和理解的术语。这意味着编译后的Java代码可以在支持Java的所有计算机上运行，而无需重新编译。正如您已经了解的那样，*支持Java*意味着对于每个操作系统，都存在一个可以将字节码转换为二进制代码的解释器。这就是*到处运行*的实现方式：只要有Java解释器可用的地方。
- en: After the concept proved to be popular and Java was firmly established as one
    of the major players among other object-oriented languages, Sun Microsystems made
    much of its JVM free and open source software, governed by the GNU **General Public
    License** (**GPL**). In 2007, Sun Microsystems made all of its JVM's core code
    available under free and open source distribution terms, except for a small portion
    of code to which Sun did not have the copyright. In 2010, Oracle acquired Sun Microsystems
    and declared itself *a steward of Java technology with a relentless commitment
    to fostering a community of participation and transparency*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在概念被证明受欢迎并且Java牢固地确立为其他面向对象语言中的主要参与者之一后，Sun Microsystems将其大部分JVM作为自由和开源软件，并受GNU**通用公共许可证**（**GPL**）管理。2007年，Sun
    Microsystems将其所有JVM的核心代码都以自由和开源的分发条款提供，除了一小部分Sun没有版权的代码。2010年，甲骨文收购了Sun Microsystems，并宣布自己是*Java技术的管理者，致力于培育参与和透明度的社区*。
- en: Today, Java is used in many areas, most prominently in Android programming and
    other mobile applications, in various embedded systems (various chips and specialized
    computers), desktop **Graphical User Interface** (**GUI**) development, and a
    huge variety of web applications, including network applications and web services.
    Java is also widely used for scientific applications, including the rapidly expanding
    areas of machine learning and artificial intelligence.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Java在许多领域中被广泛使用，最突出的是在Android编程和其他移动应用程序中，在各种嵌入式系统（各种芯片和专用计算机）、桌面**图形用户界面**（**GUI**）开发以及各种网络应用程序，包括网络应用程序和网络服务。Java也广泛用于科学应用程序，包括快速扩展的机器学习和人工智能领域。
- en: Principles
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原则
- en: 'There were five primary goals in the creation of the Java language, according
    to *Design Goals of the Java* *^(TM) Programming Language* ([http://www.oracle.com/technetwork/java/intro-141325.html](http://www.oracle.com/technetwork/java/intro-141325.html)).
    The Java language had to be:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*Java编程语言的设计目标*（[http://www.oracle.com/technetwork/java/intro-141325.html](http://www.oracle.com/technetwork/java/intro-141325.html)），在创建Java语言时有五个主要目标。Java语言必须是：
- en: '**Object-oriented and familiar**: This meant that it had to look like C++,
    but without unnecessary complexities (we will discuss the term object-oriented in
    [Chapter 2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml), *Java Language Basics*)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象和熟悉**：这意味着它必须看起来像C++，但没有不必要的复杂性（我们将在[第2章](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml)中讨论面向对象的术语，*Java语言基础*）'
- en: '**Architecture-neutral and portable**: This meant the ability to use JVM as
    the environment that isolates the language (source code) from the knowledge of
    each particular operating system (often called the platform)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构中立和可移植**：这意味着能够使用JVM作为将语言（源代码）与每个特定操作系统的知识（通常称为平台）隔离的环境'
- en: '**High performance**: It should work on par with the leading programming languages
    of the time'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：它应该与当时领先的编程语言一样工作'
- en: '**Interpreted**: It can be moved to an executing phase without linking (creating
    a single executable file from multiple `.class` files), thus allowing a quicker
    write-compile-execute cycle (modern JVMs, though, are optimized to keep the binary
    version of the often used `.class` files, to avoid repeating interpretation)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释性**：它可以在不链接的情况下移至执行阶段（从多个`.class`文件创建单个可执行文件），从而允许更快的编写-编译-执行循环（尽管现代JVM经过优化，以保持经常使用的`.class`文件的二进制版本，以避免重复解释）'
- en: '**Multithreaded**: It should allow several concurrent execution jobs (threads),
    such as downloading an image and processing other user commands and data at the
    same time'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多线程**：它应该允许多个并发执行作业（线程），例如同时下载图像和处理其他用户命令和数据'
- en: '**Dynamic**: Linking should happen during execution'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态：链接应该在执行期间发生
- en: '**Secure**: It had to be well protected from an unauthorized modification at
    runtime'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全：它必须在运行时受到良好的保护，以防未经授权的修改
- en: The result proved these goals to be well-defined and fruitful, because Java
    became one of the main languages of the internet era.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结果证明这些目标是明确定义的和富有成效的，因为Java成为了互联网时代的主要语言。
- en: Java platforms, editions, versions, and technologies
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java平台、版本、版本和技术
- en: In everyday discussions, some programmers use these terms interchangeably, but
    there is a difference between Java platforms, editions, versions, and technologies.
    This section is focuses on explaining it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在日常讨论中，一些程序员会交替使用这些术语，但是Java平台、版本、版本和技术之间是有区别的。本节将重点解释这一点。
- en: Platforms and editions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台和版本
- en: 'We hear the term *platform* almost every day. Its meaning changes depending
    on the context, but in the most general sense, it means a device or environment
    that allows someone to do something. It serves as a foundation, an environment,
    a platform. In the information technology realm, a platform provides an operating
    environment where a software program can be developed and executed. An operating
    system is a typical example of a platform. Java has its own operating environment,
    which comes, as we have mentioned in the previous sections, in four platforms
    (and six editions):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎每天都会听到“平台”这个术语。它的含义取决于上下文，但在最一般的意义上，它指的是一个允许某人做某事的设备或环境。它作为一个基础、一个环境、一个平台。在信息技术领域，平台提供了一个操作环境，软件程序可以在其中开发和执行。操作系统是平台的典型例子。Java有自己的操作环境，正如我们在前面的部分中提到的，它有四个平台（和六个版本）：
- en: '**Java Platform Standard Edition** (**Java SE**): This is the edition most
    people mean when they say Java. It includes JVM, JCL, and other tools and utilities
    that allow for the development and deployment of Java applications on desktops
    and servers. In this book, we are going to stay within the boundaries of this
    edition, and will mention the other editions only in this section.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java平台标准版（Java SE）：当人们说Java时，他们指的是这个版本。它包括JVM、JCL和其他工具和实用程序，允许在桌面和服务器上开发和部署Java应用程序。在本书中，我们将在这个版本的范围内进行讨论，并且只在本节中提到其他版本。
- en: '**Java Platform Enterprise Edition** (**Java EE**): This is composed of Java
    SE, servers (computer programs that provide services to the applications), enhanced
    libraries, code samples, tutorials, and other documentation for developing and deploying large-scale,
    multitiered, and secure network applications.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java平台企业版（Java EE）：由Java SE、服务器（提供应用程序服务的计算机程序）、增强库、代码示例、教程和其他文档组成，用于开发和部署大规模、多层次和安全的网络应用程序。
- en: '**Java Platform Micro Edition** (**Java ME**): This is a small-footprint (using
    little resources) subset of Java SE, with some specialized class libraries for
    developing and deploying Java applications for embedded and mobile devices – phones,
    personal digital assistants, TV set-top boxes, printers, sensors, and so on. There
    is also a variation of Java ME for Android programming (with its own JVM implementation),
    developed by Google. It is called **Android SDK**.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java平台微型版（Java ME）：这是Java SE的一个小型（使用少量资源）子集，具有一些专门的类库，用于开发和部署嵌入式和移动设备的Java应用程序，比如手机、个人数字助理、电视机顶盒、打印机、传感器等。还有一个针对Android编程的Java
    ME变体（具有自己的JVM实现），由Google开发。它被称为Android SDK。
- en: '**Java Card**: This is the smallest of the Java platforms, for developing and
    deploying Java applications onto small embedded devices, such as smart cards.
    It comes in two editions (quotes are taken from the official Oracle documentation
    found at [http://www.oracle.com/technetwork/java/embedded/javacard/documentation/javacard-faq-1970428.html#3](http://www.oracle.com/technetwork/java/embedded/javacard/documentation/javacard-faq-1970428.html#3)):'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Card：这是Java平台中最小的一个，用于开发和部署Java应用程序到小型嵌入式设备，比如智能卡。它有两个版本（引用自官方Oracle文档，网址为[http://www.oracle.com/technetwork/java/embedded/javacard/documentation/javacard-faq-1970428.html#3](http://www.oracle.com/technetwork/java/embedded/javacard/documentation/javacard-faq-1970428.html#3)）：
- en: '**Java Card Classic Edition**, which<q>targets smart cards as deployed today
    on all vertical markets, based on ISO7816 and ISO14443 communication.</q>'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Card Classic Edition，它针对的是当今所有垂直市场上部署的智能卡，基于ISO7816和ISO14443通信。
- en: '**Java Card Connected Edition**, which is developed <q>to support a web application
    model, with servlets running on the card, and TCP/IP as basic protocol</q> and
    <q>runs on high-end secure microcontrollers, typically based on a 32-bit processor
    and supporting a high-speed communication interface like USB</q>.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Card Connected Edition，这是为了支持一个Web应用程序模型而开发的，其中servlet在卡上运行，TCP/IP作为基本协议，并且在高端安全微控制器上运行，通常基于32位处理器，并支持像USB这样的高速通信接口。
- en: Versions
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本
- en: 'Since its first release in 1996, Java has evolved through nine major versions:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 自1996年首次发布以来，Java已经发展了九个主要版本：
- en: JDK 1.0 (January 23, 1996)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 1.0（1996年1月23日）
- en: JDK 1.1 (February 19, 1997)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 1.1（1997年2月19日）
- en: J2SE 1.2 (December 8, 1998)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: J2SE 1.2（1998年12月8日）
- en: J2SE 1.3 (May 8, 2000)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: J2SE 1.3（2000年5月8日）
- en: J2SE 1.4 (February 6, 2002)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: J2SE 1.4（2002年2月6日）
- en: J2SE 5.0 (September 30, 2004)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: J2SE 5.0（2004年9月30日）
- en: Java SE 6 (December 11, 2006)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 6（2006年12月11日）
- en: Java SE 7 (July 28, 2011)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 7（2011年7月28日）
- en: Java SE 8 (March 18, 2014)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 8（2014年3月18日）
- en: Java SE 9 (September 21, 2017)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 9（2017年9月21日）
- en: Java SE 10 (March 20, 2018)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 10（2018年3月20日）
- en: There are several suggestions regarding changing the Java versioning scheme.
    Since Java 10, a new time-based versioning `$YEAR.$MONTH` of JDK has been introduced.
    Also, a new Java version is planned to be released every six months, in March
    and in September of each year. So, Java 11 will be released in September 2018,
    with JVM version 18.9\. We will show you how to display which JDK version you
    are using shortly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 关于更改Java版本方案有几个建议。自Java 10以来，JDK引入了新的基于时间的版本`$YEAR.$MONTH`。此外，计划每年3月和9月发布一个新的Java版本。因此，Java
    11将于2018年9月发布，JVM版本为18.9。我们将很快向您展示如何显示您正在使用的JDK版本。
- en: Technologies
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术
- en: 'The word technology is overloaded. Programmers use it for almost anything.
    If you look at Oracle''s list of Java technologies ([https://www.oracle.com/java/technologies/index.html](https://www.oracle.com/java/technologies/index.html)),
    you will find the following list:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 技术这个词被滥用了。程序员几乎用它来表示任何东西。如果您查看甲骨文的Java技术列表（[https://www.oracle.com/java/technologies/index.html](https://www.oracle.com/java/technologies/index.html)），您将找到以下列表：
- en: '**Embedded**, whichincludes all of the previously listed Java platforms except
    for Java EE, with some modifications, usually with a smaller footprint and other
    optimizations'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式**，包括以前列出的除了Java EE之外的所有Java平台，通常经过一些修改，通常具有更小的占用空间和其他优化'
- en: '**Java SE**, whichcovers Java SE and Java SE Advanced, which includes Java
    SE and some monitoring and management tools for an enterprise level (larger than
    just a development computer) installation'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java SE**，包括Java SE和Java SE Advanced，其中包括Java SE和一些用于企业级（不仅仅是开发计算机）安装的监控和管理工具'
- en: '**Java EE**, as described previously'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java EE**，如前所述'
- en: '**Cloud**, whichincludes cloud-based reliable, scalable, and elastic services'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云**，包括基于云的可靠、可扩展和弹性的服务'
- en: 'But in the Oracle glossary ([http://www.oracle.com/technetwork/java/glossary-135216.html](http://www.oracle.com/technetwork/java/glossary-135216.html)),
    the following technologies are added to the list:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但在Oracle词汇表（[http://www.oracle.com/technetwork/java/glossary-135216.html](http://www.oracle.com/technetwork/java/glossary-135216.html)）中，以下技术被添加到列表中：
- en: '**JavaSpaces**: A technology that provides distributed persistence'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaSpaces**：提供分布式持久性的技术'
- en: '**Jini Technology**: An **Application Programming Interface** (**API**) that
    enables the networking of devices and services automatically'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jini技术**：一种**应用程序编程接口**（**API**），可以自动连接设备和服务'
- en: 'Elsewhere, on the front page of the Oracle Java 10 documentation ([https://docs.oracle.com/javase/10](https://docs.oracle.com/javase/10)),
    client technologies are listed as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他地方，在Oracle Java 10文档的首页（[https://docs.oracle.com/javase/10](https://docs.oracle.com/javase/10)），客户端技术列如下：
- en: '![](img/0f75d553-ab94-43fe-97be-59330e69902a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f75d553-ab94-43fe-97be-59330e69902a.png)'
- en: Meanwhile, in the Oracle Java tutorial ([https://docs.oracle.com/javase/tutorial/getStarted/intro/cando.html](https://docs.oracle.com/javase/tutorial/getStarted/intro/cando.html)), **Java
    Web Start** and **Java Plug-In** are mentioned as deployment technologies <q>for
    deploying your applications to end users.</q>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，在Oracle Java教程（[https://docs.oracle.com/javase/tutorial/getStarted/intro/cando.html](https://docs.oracle.com/javase/tutorial/getStarted/intro/cando.html)）中，**Java
    Web Start**和**Java Plug-In**被提及为部署技术，<q>用于将您的应用程序部署到最终用户。</q>
- en: However, the biggest list of Java technologies that Oracle provides is on the
    page dedicated to the Technology Network ([http://www.oracle.com/technetwork/java/index.html](http://www.oracle.com/technetwork/java/index.html)).
    In addition to Java SE, Java SE Advanced and Suite, Java Embedded, Java EE, Java
    FX, and Java Card, there are also listed **Java TV**, **Java DB**, and **Developer
    Tools**. If you go to the Java SE or Java EE pages, under the Technologies tab,
    you will find more than two dozens APIs, and various software components listed
    as technologies, too. So, one should not be surprised to find anywhere any kind
    of list of Java technologies.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，甲骨文提供的最大的Java技术列表在专门用于技术网络的页面上（[http://www.oracle.com/technetwork/java/index.html](http://www.oracle.com/technetwork/java/index.html)）。除了Java
    SE、Java SE Advanced和Suite、Java嵌入式、Java EE、Java FX和Java Card之外，还列出了**Java TV**、**Java
    DB**和**开发工具**。如果您转到Java SE或Java EE页面，在“技术”选项卡下，您会发现超过两打的API，以及各种软件组件也列为技术。因此，人们不应该感到惊讶在任何地方找到任何种类的Java技术列表。
- en: It seems that anything related to Java has been called a technology at least
    once, somewhere. To avoid further confusion, from now on, in this book, we will
    try to avoid using word technology.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎与Java有关的任何东西都至少被称为技术一次。为了避免进一步的混淆，从现在开始，在本书中，我们将尽量避免使用技术这个词。
- en: Java SE Development Kit (JDK) installation and configuration
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java SE开发工具包（JDK）安装和配置
- en: From now on, every time we talk about Java, we mean Java SE version 10\. We
    will refer to it as Java 10, or Java, or JDK, used as synonyms, unless otherwise
    specified.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，每当我们谈论Java时，我们指的是Java SE 10版。我们将把它称为Java 10，或Java，或JDK，除非另有说明。
- en: Where to start
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从哪里开始
- en: Before you can do any Java development on your computer, you will need JDK installed
    and configured. In order to do this, search the internet for the JDK download and
    select any link that starts with [https://www.oracle.com/](https://www.oracle.com/).
    The best, as of this writing, should be [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的计算机上进行任何Java开发之前，您需要安装和配置JDK。为了做到这一点，搜索互联网以获取JDK下载，并选择任何以[https://www.oracle.com/](https://www.oracle.com/)开头的链接。截至目前，最好的链接应该是[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)。
- en: 'If you follow the preceding link, you will see this section:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照上述链接，您将看到这个部分：
- en: '![](img/9b51d6bc-b626-4ca3-a965-d102a78ee09d.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b51d6bc-b626-4ca3-a965-d102a78ee09d.png)'
- en: Let us call this page *Page1*, for further references. Now, you can click the
    Download link under JDK. The other two download links offer JRE, which, as you
    know already, only allows you to run already compiled Java programs; we need to
    write a program, compile it into bytecode, and then run it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称这个页面为*Page1*，以供以后参考。现在，您可以点击JDK下的下载链接。其他两个下载链接提供了JRE，正如您已经知道的，它只允许您运行已经编译的Java程序；我们需要编写一个程序，将其编译成字节码，然后运行它。
- en: The page with Java installers
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有Java安装程序的页面
- en: 'After you click, you will see a page (*Page2*) with this section:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 点击后，您将看到一个页面（*Page2*）有这个部分：
- en: '![](img/b9d20525-9bb2-4d9a-a75d-dab18a26a376.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9d20525-9bb2-4d9a-a75d-dab18a26a376.png)'
- en: These are the Java installers for different **operating systems** (**OS**).
    You need to choose the one that fits your OS and click the corresponding link
    (do not forget to click Accept License Agreement using the radio button; if in
    doubt, read the license agreement via the link Oracle Binary Code License Agreement
    for Java SE). For Linux, there are two installers – one in Red Hat Package Manager
    Format (`.rpm`), and one that is just an archived (`.tar`) and compressed (`.gz`)
    version. Also, noticed that in this list, there are only installers for 64-bit
    operating systems. As of this writing, it is not clear yet if the 32-bit version
    is to be dropped officially, although it was available as an early access build.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是不同**操作系统**（**OS**）的Java安装程序。您需要选择适合您操作系统的程序，并单击相应的链接（不要忘记使用单选按钮点击接受许可协议；如果有疑问，通过链接Oracle
    Binary Code License Agreement for Java SE阅读许可协议）。对于Linux，有两个安装程序 - 一个是Red Hat
    Package Manager格式（`.rpm`），另一个只是一个存档（`.tar`）和压缩（`.gz`）版本。还要注意，在此列表中，只有64位操作系统的安装程序。截至目前，尚不清楚32位版本是否会被正式弃用，尽管它作为早期访问版本可用。
- en: Select the installer that you need, and download it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您需要的安装程序，并下载它。
- en: How to install
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何安装
- en: 'Now is the time to install Java, which basically consists of the following
    four steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是安装Java的时候，基本上包括以下四个步骤：
- en: Expand the installer
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展安装程序
- en: Create directories
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建目录
- en: Copy files into these directories
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件复制到这些目录中
- en: Make the Java executables accessible without typing the full path
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使Java可执行文件无需输入完整路径
- en: To find the detailed installation instructions, go back to *Page1* and click
    on the Installation Instructions link. Find the link for your operating system
    and follow the provided steps, but choose only those that are related to JDK.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到详细的安装说明，返回*Page1*并点击安装说明链接。找到适用于您操作系统的链接，并按照提供的步骤进行操作，但只选择与JDK相关的步骤。
- en: 'Eventually, you will come to the point when you are able to run the command
    `java -version`, which will display the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您将能够运行`java -version`命令，它将显示以下内容：
- en: '![](img/0e2ef525-125a-441b-8eac-2eef6fc60824.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e2ef525-125a-441b-8eac-2eef6fc60824.png)'
- en: As you can see, it shows the version for Java as 10.0.1, and for JRE and JVM
    as 18.3 (build 10.0.1). It is not clear yet if future versions of Java, JRE, and
    JVM are going to follow the same format.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它显示Java的版本为10.0.1，JRE和JVM的版本为18.3（构建10.0.1）。目前还不清楚未来的Java、JRE和JVM版本是否会遵循相同的格式。
- en: Anyway, if the `java -version` command displays the version you tried to install,
    it means that you have installed Java correctly and can now enjoy working with
    it. From now on, every time a new version comes out, you are going to be prompted
    to upgrade, and you can do it by just clicking the provided link. Alternatively,
    you can go to the page with the installers (*Page2*), download the corresponding
    installer, launch it, and repeat the process already familiar to you.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，如果`java -version`命令显示您尝试安装的版本，这意味着您已经正确安装了Java，现在可以享受与之一起工作。从现在开始，每当有新版本发布时，您都会收到升级提示，您只需点击提供的链接即可进行升级。或者，您可以转到安装程序页面（*Page2*），下载相应的安装程序，启动它，并重复您已经熟悉的过程。
- en: In practice, though, programmers do not upgrade their Java installation every
    time. They keep their development version the same as the Java in their production
    environment (in order to avoid potential incompatibility). If they would like
    to play with a new version before upgrading the production, they might have two
    versions of Java installed on their computer, in parallel. In [Chapter 3](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml),
    *Your Development Environment Setup*, you will learn how to do this, and how to
    switch between them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，程序员并不会每次都升级他们的Java安装。他们会保持开发版本与生产环境中的Java版本相同（以避免潜在的不兼容性）。如果他们想在升级生产环境之前尝试新版本，他们可能会在计算机上安装两个版本的Java，并行使用。在[第3章](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml)中，*您的开发环境设置*，您将学习如何做到这一点，以及如何在它们之间切换。
- en: Main Java commands
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要的Java命令
- en: In the previous section, you saw one example of a Java command, the one that
    displays the JVM version. By the way, the command `java` starts the JVM, and is
    used to run bytecodes of the compiled Java programs (we will demonstrate how to
    do this in detail in [Chapter 4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml),
    *Your First Java Project*).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，您看到了一个Java命令的示例，显示了JVM版本。顺便说一句，命令`java`启动了JVM，并用于运行编译后的Java程序的字节码（我们将在[第4章](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml)中详细演示如何做到这一点，*您的第一个Java项目*）。
- en: The JVM execution command
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JVM执行命令
- en: 'Now, if you only run `java`, the output will display the short version of help.
    Since it is quite long, we will show it in several parts. Here is the first section:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您只运行`java`，输出将显示帮助的简短版本。由于它相当长，我们将分几部分显示。这是第一部分：
- en: '![](img/87e0ce48-eb94-46dc-8449-d9cb351d6ac3.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87e0ce48-eb94-46dc-8449-d9cb351d6ac3.png)'
- en: 'It shows three ways to run JVM:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了三种运行JVM的方式：
- en: To execute a class, a `.class` file that contains bytecode
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行一个类，一个包含字节码的`.class`文件
- en: To execute a jar file, a file with the extension `.jar` that contains `.class`
    files (may be even the whole application) in a ZIP format, which also includes
    a Java-specific manifest file
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行一个jar文件，一个带有扩展名`.jar`的文件，其中包含以ZIP格式的`.class`文件（甚至可能是整个应用程序），还包括一个特定于Java的清单文件
- en: To execute the main class in a module (a group of `.class` files and other resources
    that is better structured than a `.jar` file), typically an application, or a
    part of it
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行模块中的主类（一组`.class`文件和其他资源，比`.jar`文件更好地结构化），通常是应用程序或其一部分
- en: 'As you can see, in each of the preceding commands, a main class has to be supplied
    explicitly. It is the `.class` file that has to be executed first. It acts as
    the main entrance into the application, and starts the chain of loading other
    classes (as they are needed) to run the application. An example of such a command
    would be:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在上述每个命令中，都必须显式提供一个主类。它是必须首先执行的`.class`文件。它充当应用程序的主入口，并启动加载其他类（在需要时）以运行应用程序的链。这样的命令示例是：
- en: '```java'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: java MyGreatApplication
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: java MyGreatApplication
- en: '```'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In fact, this means that there is a file, `MyGreatApplication.class`, in the
    current directory, but we should not specify the file extension. Otherwise, JVM
    will look for the file `MyGreatApplication.class.class`, which it will not find,
    of course, and fail to run anything.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着当前目录中有一个名为`MyGreatApplication.class`的文件，但我们不应指定文件扩展名。否则，JVM将寻找文件`MyGreatApplication.class.class`，当然找不到，也无法运行任何内容。
- en: In this book, we are not going to use any of these commands explicitly, and
    will leave it up to the editor to run it behind the scenes, because a modern editor
    does not just help write and modify the source code; it can also compile and execute
    the written code. That's why it is called not just the editor, but the **Integrated
    Development Environment** (**IDE**).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们不会显式使用这些命令中的任何一个，并且将其留给编辑器在幕后运行，因为现代编辑器不仅帮助编写和修改源代码；它还可以编译和执行编写的代码。这就是为什么它不仅被称为编辑器，而是**集成开发环境**（**IDE**）。
- en: Nevertheless, we will continue to overview all of the `java` command options,
    so you will have an idea what is going behind the scenes in your IDE. To enjoy
    car driving, one does not need to know the details of the engine's inner workings,
    but it is helpful to have some idea about the principles of its operation. Besides,
    as your professional level grows and the applications you work on grow too and
    have to handle many requests, you will need to adjust the JVM configuration, so
    here is the first sneak peek under the hood.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们将继续概述所有`java`命令选项，这样你就会知道在你的IDE背后发生了什么。要享受驾车乐趣，不需要了解引擎的内部工作细节，但了解其运作原理是有帮助的。此外，随着你的专业水平的提高和你所工作的应用程序的增长，你将需要调整JVM配置，因此这是第一次在幕后偷看。
- en: 'Here is the next section of the output of the `java` command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`java`命令输出的下一部分：
- en: '![](img/b6f9936b-a8d5-4edc-8a84-7a918271ae38.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6f9936b-a8d5-4edc-8a84-7a918271ae38.png)'
- en: In the preceding screenshot, you can see two deprecated options followed by
    options related to classpath and module path. The last two are very important
    options. They allow the specifying of the location of the classes your application
    consists of, and the location of the libraries your application uses. The latter
    can be classes written by you or third-party libraries.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到两个已弃用的选项，后面是与类路径和模块路径相关的选项。最后两个选项非常重要。它们允许指定应用程序所在位置的类和应用程序使用的库的位置。后者可以是你编写的类或第三方库。
- en: The concept of modules is out of the scope of this book, but module path is
    used very similarly to the classpath. The classpath option tells JVM where to
    look for the classes, while the module path tells JVM about the location of the
    modules. It is possible to use both in the same command line.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的概念超出了本书的范围，但模块路径的使用方式与类路径非常相似。类路径选项告诉JVM在哪里查找类，而模块路径告诉JVM模块的位置。可以在同一命令行中同时使用两者。
- en: 'For example, let us assume that you have the file `MyGreatApplication.class`
    (which contains the bytecode of your program, `MyGreatApplication.java`) stored
    in the directory `dir2`, which is a subdirectory of the directory `dir1`, and
    your terminal window currently shows the content of the directory `dir1`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个名为`MyGreatApplication.class`的文件（其中包含你的程序的字节码`MyGreatApplication.java`），存储在`dir2`目录中，这是`dir1`目录的子目录，你的终端窗口当前显示的是`dir1`目录的内容：
- en: '![](img/b9813eaf-2def-48f2-9e64-c8dbce1e73e1.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9813eaf-2def-48f2-9e64-c8dbce1e73e1.png)'
- en: 'As you can see, there is another directory, `dir3`, which we created to store
    another file, `SomeOtherProgram.class`, that is used by your application. We also
    put in `dir4` a library of other supporting `.class` files, collected in `SomeLibrary.jar`.
    The command line to run your application then looks like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，还有另一个目录`dir3`，我们创建它来存储另一个文件`SomeOtherProgram.class`，这是你的应用程序使用的。我们还在`dir4`中放入了其他支持的`.class`文件库，这些文件被收集在`SomeLibrary.jar`中。然后运行你的应用程序的命令行如下：
- en: '```java'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: java -cp dir2:dir3:dir4/SomeLibrary.jar  MyGreatApplication //on Unix
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: java -cp dir2:dir3:dir4/SomeLibrary.jar  MyGreatApplication //on Unix
- en: java -cp dir2;dir3;dir4\SomeLibrary.jar  MyGreatApplication //on Windows
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: java -cp dir2;dir3;dir4\SomeLibrary.jar  MyGreatApplication //on Windows
- en: '```'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Alternatively, we can put `SomeOtherProgram.class` and  `MyGreatApplication.class` in
    `some.jar` or a `some.zip` file, and place it in `dir5`. Then, the command will
    take one of the following forms:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将`SomeOtherProgram.class`和`MyGreatApplication.class`放入`some.jar`或`some.zip`文件，并将其放在`dir5`中。然后，命令将采用以下形式之一：
- en: '```java'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: java -cp dir4/SomeLibrary.jar:dir5/some.zip MyGreatApplication //Unix
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: java -cp dir4/SomeLibrary.jar:dir5/some.zip MyGreatApplication //Unix
- en: java -cp dir4/SomeLibrary.jar:dir5/some.jar MyGreatApplication //Unix
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: java -cp dir4/SomeLibrary.jar:dir5/some.jar MyGreatApplication //Unix
- en: java -cp dir4\SomeLibrary.jar;dir5\some.zip MyGreatApplication //Windows
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: java -cp dir4\SomeLibrary.jar;dir5\some.zip MyGreatApplication //Windows
- en: java -cp dir4\SomeLibrary.jar;dir5\some.jar MyGreatApplication //Windows
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: java -cp dir4\SomeLibrary.jar;dir5\some.jar MyGreatApplication //Windows
- en: '```'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Instead of `-cp`, we could use the options `-classpath` or `--class-path`. They
    are just three different conventions, so that people used to one of them can write
    a command line intuitively. None of the styles are better or worse than the others,
    although each of us has preferences and opinions. If neither of the classpath
    options is used, JVM looks for classes only in the current directory. Some of
    the classes (standard libraries) are always located in certain directories of
    Java installation, so there is no need to list them with a classpath option. We
    will talk about setting the classpath in more detail in [Chapter 3](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml),
    *Your Development Environment Setup*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`-cp`选项，也可以使用`-classpath`或`--class-path`选项。它们只是三种不同的约定，以便习惯于其中一种的人可以直观地编写命令行。这些风格中没有一个比其他更好或更差，尽管我们每个人都有偏好和意见。如果没有使用任何classpath选项，JVM只会在当前目录中查找类。一些类（标准库）总是位于Java安装的某些目录中，因此无需使用classpath选项列出它们。我们将在[第3章](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml)中更详细地讨论设置classpath。
- en: 'The next section of the `java` command output lists options that allow for
    validating that everything is set correctly before actually executing the application:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`java`命令输出的下一部分列出了一些选项，允许在实际执行应用程序之前验证一切是否设置正确：'
- en: '![](img/2d68305f-2660-4ee9-83a2-67aa2bd588e4.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d68305f-2660-4ee9-83a2-67aa2bd588e4.png)'
- en: 'Since modules are outside of the scope of this book, we are skipping these
    and moving on to the next section of the output:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块超出了本书的范围，我们将跳过这些内容，继续输出的下一部分：
- en: '![](img/dfd31045-7e5c-4c9e-b7f8-c960ae35dc06.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfd31045-7e5c-4c9e-b7f8-c960ae35dc06.png)'
- en: The `-D` option allows for setting a parameter with a value that is accessible
    to the application. It is often used to pass some values or flags to the application,
    which the application can use to change its behavior. If more information needs
    to be passed, then the `.properties` file is used (with many flags and various
    values), while the location of the property file is passed with the option `-D`.
    It is completely up to the programmer what has to be in the `.properties` file
    or in the value passed with the option `-D`. But there are best practices related
    to the application configuration, which also depend on the particular framework
    or libraries you are using. You will learn them over time, and these practices
    are beyond the beginner programmer course.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D` 选项允许设置一个可供应用程序访问的带有值的参数。它经常用于向应用程序传递一些值或标志，应用程序可以用来改变其行为。如果需要传递更多信息，那么就使用`.properties`文件（带有许多标志和各种值），而属性文件的位置则通过`-D`选项传递。完全取决于程序员，`.properties`文件或通过`-D`选项传递的值应该是什么。但是与应用程序配置相关的最佳实践也取决于您使用的特定框架或库。您将随着时间学会它们，这些实践超出了初学者程序员课程。'
- en: The `-verbose` option provides more information (than we have seen on these
    screenshots) and some specific data, depending on the flags `class`, `module`,
    `gc`, or `jni`, where **gc** stands for **garbage collector**, which will be discussed
    in [Chapter 11](e8c37d86-291d-4500-84ea-719683172477.xhtml), *JVM Processes and
    Garbage Collection*. For the other flags, you can read the official Oracle documentation,
    but chances are, you will not use them anytime soon.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`-verbose` 选项提供了更多信息（比我们在这些截图中看到的）和一些特定的数据，取决于标志`class`、`module`、`gc`或`jni`，其中**gc**代表**垃圾收集器**，将在[第11章](e8c37d86-291d-4500-84ea-719683172477.xhtml)中讨论。对于其他标志，您可以阅读官方的Oracle文档，但很可能您不会很快使用它们。'
- en: The `-version` option displays the version of Java that is installed. This is
    very useful from day one, because it allows for checking, at any time, what version
    of Java is currently in use. In the previous section, we demonstrated how to do
    it, and the output it produces. When a new version of Java is released, many programmers
    install it in parallel with the one they are currently using, and switch between
    them, either to learn new features or to start writing code for a new version,
    while maintaining the old code written for the old version. You will learn how
    to have two versions of Java installed on the same computer, and how to switch
    between them, in [Chapter 3](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml), *Your
    Development Environment Setup*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`-version` 选项显示已安装的Java版本。这在第一天就非常有用，因为它允许随时检查当前使用的Java版本。在前面的部分中，我们演示了如何做到这一点，以及它产生的输出。当发布新版本的Java时，许多程序员会与他们当前使用的版本并行安装它，并在它们之间切换，无论是为了学习新功能还是为了开始为新版本编写代码，同时保留为旧版本编写的旧代码。您将学会如何在同一台计算机上安装两个版本的Java，并在[第3章](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml)中，*您的开发环境设置*中学会如何在它们之间切换。'
- en: We will skip the module-related options.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将跳过与模块相关的选项。
- en: The rest of the options in the preceding screenshot are related to the help.
    The options `-?`, `-h`, `-help`, and `--help` display what we are showing in these
    screenshots, and the options `-X` and `--help-extra` provide additional information.
    You can try all of them on your own.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中的其余选项与帮助相关。选项`-?`、`-h`、`-help`和`--help`显示了我们在这些截图中展示的内容，而选项`-X`和`--help-extra`提供了额外的信息。您可以自己尝试所有这些选项。
- en: 'The last section of the help output looks as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助输出的最后一部分如下：
- en: '![](img/c0b12db1-c3f7-45da-9dea-6608a94380c2.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0b12db1-c3f7-45da-9dea-6608a94380c2.png)'
- en: We will not discuss these options. Just note how to use the long option (with
    two hyphens) explained in the last preceding line.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不讨论这些选项。只需注意如何使用上一行中解释的长选项（带有两个连字符）。
- en: The compilation command
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译命令
- en: As mentioned earlier, a program written in Java is called a source code, and
    is stored in a `.java` file. The compilation command `javac` reads it and creates
    a corresponding `.class` file with Java Byte Code.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，用Java编写的程序称为源代码，并存储在`.java`文件中。编译命令`javac`读取它，并创建相应的带有Java字节码的`.class`文件。
- en: 'Let us run the command `javac` without specifying a `.java` file. It will show
    help. Let us review it in sections:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行`javac`命令，而不指定`.java`文件。它将显示帮助信息。让我们分部分地进行审查：
- en: '![](img/e6ec3374-6a59-4980-a82b-b21297711b17.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6ec3374-6a59-4980-a82b-b21297711b17.png)'
- en: 'The help tells us that this command has the following format:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助告诉我们，这个命令的格式如下：
- en: '```java'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: javac <options> <source files>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: javac <options> <source files>
- en: '```'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To compile just a few files, one can list them in the command line after options
    (if the file is not in the current directory, one has to prepend the filename
    with an absolute or relative path). Listed files are separated by colons (`:`)
    for Oracle Solaris, or semicolons (`;`) for Windows, and can be directories, `.jar`
    files, or `.zip` files. It is also possible to list all source files in a file
    and provide this filename using the `@filename` option (see the preceding screenshot).
    But do not try to remember all of this. You will rarely (if ever) run the commands `java` or `javac` explicitly.
    You will probably use an IDE that will do it for you (see [Chapter 3](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml),
    *Your Development Environment Setup*). That is also the reason we are going to
    skip most of the options listed in the preceding screenshot and will mention only
    two of them: `--class-path` (or `-classpath`, or `-cp`), which specifies where
    to find the `.class` files required by the currently compiled code, and  `-d`,
    which indicates where to put the created `.class` files.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译一些文件，可以在选项后的命令行中列出它们（如果文件不在当前目录中，必须使用绝对或相对路径前置文件名）。 列出的文件在Oracle Solaris中用冒号（`:`）分隔，在Windows中用分号（`;`）分隔，可以是目录、`.jar`文件或`.zip`文件。
    还可以列出文件中的所有源文件，并使用`@filename`选项提供此文件名（请参阅前面的屏幕截图）。 但不要试图记住所有这些。 您很少（如果有的话）会显式运行`java`或`javac`命令。
    您可能会使用一个IDE为您执行（请参阅[第3章](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml)，*您的开发环境设置*）。
    这也是我们将跳过前面屏幕截图中列出的大多数选项并仅提到其中两个选项的原因：`--class-path`（或`-classpath`或`-cp`），它指定当前编译代码所需的`.class`文件的位置，和`-d`，它指示创建`.class`文件的位置。
- en: 'Here is the next section of `javac` help:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`javac`帮助的下一部分：
- en: '![](img/a1407f79-99c0-4b2a-b893-f77b46ebf783.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1407f79-99c0-4b2a-b893-f77b46ebf783.png)'
- en: The only option from the preceding screenshot that we will mention here is `--help`
    (or `-help`), which provides the same help message that we are going through now.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在此提到前面屏幕截图中的唯一选项是`--help`（或`-help`），它提供了我们现在正在浏览的相同帮助消息。
- en: 'Finally, the last section of `javac` help is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`javac`帮助的最后一部分如下：
- en: '![](img/b406bf77-f4fa-46d0-9655-02f290994bc9.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b406bf77-f4fa-46d0-9655-02f290994bc9.png)'
- en: 'We have already described the option `--source-path` (or `-sourcepath`). The
    option `-verbose` asks the compiler to provide a more detailed report about what
    it is doing, while the option `--version` (or `-version`) displays the JDK version:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经描述了选项`--source-path`（或`-sourcepath`）。 选项`-verbose`要求编译器提供更详细的报告，说明它正在做什么，而选项`--version`（或`-version`）显示JDK版本：
- en: '![](img/dab1a888-24c1-4bcb-b3a1-9b098ae8b5bf.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dab1a888-24c1-4bcb-b3a1-9b098ae8b5bf.png)'
- en: Command jcmd and other commands
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令jcmd和其他命令
- en: There are more than a dozen other Java commands (tools and utilities) that you
    will only start using probably after several years of professional programming,
    if at all. They are all described in the Oracle Java documentation online. Just
    search the Java utilities and tools.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 还有十几个其他的Java命令（工具和实用程序），您可能只有在专业编程几年后才会开始使用，如果有的话。 它们都在Oracle Java在线文档中有描述。
    只需搜索Java实用程序和工具。
- en: 'Among them, we find only one command that is very useful from day one of Java
    programming. It is the command `jcmd`. If you run it, it displays all of the Java
    processes (JVM instances) that are running on your computer. In this example,
    you can see three Java processes, with the process IDs 3408, 3458, and 3454:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，我们只找到一个从Java编程的第一天起就非常有用的命令`jcmd`。 如果运行它，它会显示计算机上正在运行的所有Java进程（JVM实例）。 在此示例中，您可以看到三个Java进程，进程ID分别为3408、3458和3454：
- en: '![](img/67653ba6-e839-41af-bf2c-d41b31ad5ebe.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67653ba6-e839-41af-bf2c-d41b31ad5ebe.png)'
- en: Process 3408 runs the Maven server (your IDE will typically start it). Process
    3458 is our running of `jcmd`. And process 3454 is an editor (IDE) IntelliJ IDEA
    that is running the small demo application `com.packt.javapath.App`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 进程3408运行Maven服务器（您的IDE通常会启动它）。 进程3458是我们运行`jcmd`。 进程3454是一个编辑器（IDE）IntelliJ
    IDEA，正在运行小型演示应用程序`com.packt.javapath.App`。
- en: This way, you can always check to see if there is a runaway Java process on
    your computer. If you would like to stop it, you can use a Task Manager, or the
    command `kill`, which requires PID.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您可以随时检查您的计算机上是否有一个失控的Java进程。 如果您想要停止它，可以使用任务管理器，或者需要PID的`kill`命令。
- en: Knowledge of PID is also needed when you would like to monitor your Java application.
    We will talk about that in [Chapter 11](e8c37d86-291d-4500-84ea-719683172477.xhtml),
    *JVM Processes and Garbage Collection*.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要监视您的Java应用程序时，也需要了解PID。 我们将在[第11章](e8c37d86-291d-4500-84ea-719683172477.xhtml)，*JVM进程和垃圾收集*中讨论这一点。
- en: With this, we complete our overview of Java commands. As we already mentioned,
    your IDE will use all of these commands behind the scenes, so you will probably
    never use them unless you do production support (which is several years out, after
    you start learning Java). But we feel that you need to know them, so that you
    can connect the dots of the Java development process.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一点，我们完成了对Java命令的概述。 正如我们已经提到的，您的IDE将在幕后使用所有这些命令，因此您可能永远不会使用它们，除非您进行生产支持（这是在您开始学习Java几年后）。
    但我们认为您需要了解它们，这样您就可以连接Java开发过程的各个方面。
- en: Exercise – JDK tools and utilities
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 - JDK工具和实用程序
- en: On your computer, find the Java installation directory, and list all of the
    commands (tools and utilities)—the executables—present there.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的计算机上，找到Java安装目录，并列出所有命令（工具和实用程序） - 执行文件 - 存在那里。
- en: You are in the right spot if you see `java` and `javac` among other executables.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在其他可执行文件中看到`java`和`javac`，则您就在正确的位置。
- en: Answer
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'Here is the list of all of the executables installed with Java 10.0.1:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是安装在Java 10.0.1中的所有可执行文件的列表：
- en: '![](img/39770b16-82b4-4a03-ba59-841621ebbb14.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39770b16-82b4-4a03-ba59-841621ebbb14.png)'
- en: One of the ways to find this directory is to look at the value of the environment
    variable `PATH`. For example, on a Mac computer, Java is installed in the directory `/Library/Java/JavaVirtualMachines/jdk-10.jdk/Contents/Home/bin`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 找到这个目录的一种方法是查看环境变量`PATH`的值。例如，在Mac电脑上，Java安装在目录`/Library/Java/JavaVirtualMachines/jdk-10.jdk/Contents/Home/bin`中。
- en: The Oracle documentation that describes the JVM installation location can be
    found at  [https://www.java.com/en/download/help/version_manual.xml](https://www.java.com/en/download/help/version_manual.xml).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 描述JVM安装位置的Oracle文档可以在[https://www.java.com/en/download/help/version_manual.xml](https://www.java.com/en/download/help/version_manual.xml)找到。
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned the most important Java related terms—JVM,
    JDK, SDK, Java platform, and others, covering the main phases of a Java program's
    life cycle, from source code to bytecode to execution. You also learned about
    Java's history, the motivation behind its creation, its editions, and its versions.
    The practical steps and advice provided have helped you to install Java on your
    computer and exercise its main commands, `java`, `javac`, and `jcmd`. For more
    details, you were referred to the official Oracle documentation. The ability to
    find and understand this documentation is a prerequisite for a successful career
    as a Java programmer, so we recommend that you follow all of the provided links
    and do some related searching on the internet, so that you feel comfortable finding
    good sources of information.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了最重要的与Java相关的术语——JVM、JDK、SDK、Java平台等，涵盖了Java程序生命周期的主要阶段，从源代码到字节码再到执行。您还了解了Java的历史、创建背后的动机、版本和版本。提供的实际步骤和建议帮助您在计算机上安装Java并运行其主要命令`java`、`javac`和`jcmd`。有关更多详细信息，您被引用到官方的Oracle文档。找到并理解这些文档的能力是成为Java程序员成功的先决条件，因此我们建议您跟随所有提供的链接，并在互联网上进行一些相关搜索，以便您能够轻松找到良好的信息来源。
- en: In the next chapter, we will dive into Java as a programming language, and will
    cover the basics. This will become a foundation (or a jumping board, if you will)
    for the following chapters. If you are new to Java, we recommend that you continue
    reading without skipping, because each chapter is built on knowledge from the
    previous one. Even if you have some Java exposure, it is always helpful to review
    the basics again. *Repetitio est mater studiorum* (*Repetition is the mother of
    study/learning*), says a Latin proverb.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Java作为一种编程语言，并涵盖基础知识。这将成为接下来章节的基础（或者说是一个跳板）。如果您是Java的新手，我们建议您继续阅读而不要跳过，因为每一章都建立在前一章的知识基础上。即使您对Java有一些了解，重新复习基础知识也总是有帮助的。拉丁谚语说：“Repetitio
    est mater studiorum”（重复是学习之母）。
