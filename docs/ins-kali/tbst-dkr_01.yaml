- en: Chapter 1. Understanding Container Scenarios and an Overview of Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 理解容器场景和Docker概述
- en: Docker is one of the most recent successful open source projects which provides
    the packaging, shipping, and running of any application as lightweight containers.
    We can actually compare Docker containers to shipping containers that provide
    a standard, consistent way of shipping any application. Docker is a fairly new
    project and with the help of this book it will be easy to troubleshoot some of
    the common problems which Docker users face while installing and using Docker
    containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是最近最成功的开源项目之一，它提供了任何应用程序的打包、运输和运行，作为轻量级容器。我们实际上可以将Docker容器比作提供标准、一致的运输任何应用程序的集装箱。Docker是一个相当新的项目，借助本书的帮助，将很容易解决Docker用户在安装和使用Docker容器时遇到的一些常见问题。
- en: 'In this chapter, the emphasis will be on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点将放在以下主题上：
- en: Decoding containers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解码容器
- en: Diving into Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入Docker
- en: The advantages of Docker containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker容器的优势
- en: Docker lifecycle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker生命周期
- en: Docker design patterns
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker设计模式
- en: Unikernels
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单内核
- en: Decoding containers
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解码容器
- en: Containerization is an alternative to a virtual machine, which involves the
    encapsulation of applications and providing it with its own operating environment.
    The basic foundation for containers is **Linux Containers** (**LXC**) which is
    a user space interface for Linux kernel containment features. With the help of
    powerful API and simple tools, it lets Linux users create and manage application
    containers. LXC containers are in-between `chroot` and a fully-fledged virtual
    machine. Another key difference between containerization and traditional hypervisors
    is that containers share the Linux kernel used by the operating system running
    the host machine, thus multiple containers running in the same machine use the
    same Linux kernel. It gives the advantage of being fast with almost zero performance
    overhead compared to VMs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化是虚拟机的一种替代方案，它涉及封装应用程序并为其提供自己的操作环境。容器的基本基础是Linux容器（LXC），它是Linux内核封装特性的用户空间接口。借助强大的API和简单的工具，它让Linux用户创建和管理应用程序容器。LXC容器介于`chroot`和完整的虚拟机之间。容器化和传统的虚拟化程序之间的另一个关键区别是，容器共享主机机器上运行的操作系统使用的Linux内核，因此在同一台机器上运行的多个容器使用相同的Linux内核。与虚拟机相比，它具有快速的优势，几乎没有性能开销。
- en: Major use cases of containers are listed in the following sections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的主要用例列在以下各节中。
- en: OS containers
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统容器
- en: OS containers can be easily imagined as a **Virtual Machine** (**VM**) but unlike
    a VM they share the kernel of the host operating system but provide user space
    isolation. Similar to a VM, dedicated resources can be assigned to containers
    and we can install, configure, and run different applications, libraries, and
    so on, just as you would run on any VM. OS containers are helpful in case of scalability
    testing where a fleet of containers can be deployed easily with different flavors
    of distros, which is much less expensive compared to the deployment of VMs. Containers
    are created from templates or images that determine the structure and contents
    of the container. It allows you to create a container with the identical environment,
    same package version, and configuration across all containers mostly used in the
    case of development environment setups.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统容器可以很容易地想象成一个虚拟机（VM），但与VM不同的是，它们共享主机操作系统的内核，但提供用户空间隔离。与VM类似，可以为容器分配专用资源，并且可以安装、配置和运行不同的应用程序、库等，就像在任何VM上运行一样。在可伸缩性测试的情况下，操作系统容器非常有用，可以轻松部署一系列具有不同发行版的容器，与部署VM相比成本要低得多。容器是从模板或镜像创建的，这些模板或镜像确定了容器的结构和内容。它允许您在所有容器中创建具有相同环境、相同软件包版本和配置的容器，主要用于开发环境设置的情况。
- en: 'There are various container technologies such as LXC, OpenVZ, Docker, and BSD
    jails which are suitable for OS containers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种容器技术，如LXC、OpenVZ、Docker和BSD jails，适用于操作系统容器：
- en: '![OS containers](graphics/image_01_001.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![操作系统容器](graphics/image_01_001.jpg)'
- en: An OS-based container
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 基于操作系统的容器
- en: Application containers
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用容器
- en: Application containers are designed to run a single service in the package,
    while OS containers which were explained previously, can support multiple processes.
    Application containers are attracting a lot of attraction after the launch of
    Docker and Rocket.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 应用容器旨在在一个包中运行单个服务，而先前解释过的操作系统容器可以支持多个进程。自Docker和Rocket推出后，应用容器受到了很多关注。
- en: Whenever a container is launched, it runs a single process. This process runs
    an application process, but in the case of OS containers it runs multiple services
    on the same OS. Containers usually have a layered approach as in the case of Docker
    containers, which helps with reduced duplication and increased re-use. Containers
    can be started with a base image common to all components and then we can go on
    adding layers in the file system that are specific to the component. A layered
    file system helps to rollback changes as we can simply switch to old layers if
    required. The `run` command which is specified in Dockerfile adds a new layer
    for the container.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每当启动一个容器时，它都会运行一个进程。这个进程运行一个应用程序进程，但在操作系统容器的情况下，它在同一个操作系统上运行多个服务。容器通常采用分层方法，就像Docker容器一样，这有助于减少重复和增加重用。容器可以从所有组件共同的基本镜像开始启动，然后我们可以在文件系统中添加特定于组件的层。分层文件系统有助于回滚更改，因为如果需要，我们可以简单地切换到旧层。在Dockerfile中指定的`run`命令为容器添加了一个新层。
- en: 'The main purpose of application containers is to package different components
    of the application in separate containers. The different components of the application
    are packaged separately in containers then they interact with help of APIs and
    services. The distributed multi-component system deployment is the basic implementation
    of microservice architecture. In the preceding approach, a developer gets the
    freedom to package the application as per their requirement and the IT team gets
    the privilege to deploy the container on multiple platforms in order to scale
    the system both horizontally as well as vertically:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应用容器的主要目的是将应用程序的不同组件打包到单独的容器中。应用程序的不同组件被单独打包到容器中，然后它们通过API和服务进行交互。分布式多组件系统部署是微服务架构的基本实现。在前述方法中，开发人员可以根据自己的需求打包应用程序，IT团队可以在多个平台上部署容器，以实现系统的水平和垂直扩展：
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A hypervisor is a **Virtual Machine Monitor** (**VMM**), used to allow multiple
    operating systems to run and share the hardware resources from the host. Each
    virtual machine is termed as a guest machine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Hypervisor是一个**虚拟机监视器**（**VMM**），用于允许多个操作系统在主机上运行和共享硬件资源。每个虚拟机被称为一个客户机。
- en: '![Application containers](graphics/image_01_002.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![应用容器](graphics/image_01_002.jpg)'
- en: Docker layers
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Docker层
- en: 'The following simple example explains the difference between application containers
    and OS containers:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简单示例解释了应用容器和操作系统容器之间的区别：
- en: 'Let''s consider the example of web three-tier architecture. We have a database
    tier such as **MySQL** or **Nginx** for load balancing and the application tier
    is **Node.js**:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下Web三层架构的例子。我们有一个数据库层，比如**MySQL**或**Nginx**用于负载均衡，应用层是**Node.js**：
- en: '![Application containers](graphics/image_01_003.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![应用容器](graphics/image_01_003.jpg)'
- en: An OS container
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个操作系统容器
- en: 'In the case of an OS container, we can pick up by default Ubuntu as the base
    container and install services MySQL, nginx, and Node.js using Dockerfile. This
    type of packaging is good for a testing or development setup where all the services
    are packaged together and can be shipped and shared across developers. But deploying
    this architecture for production cannot be done with OS containers as there is
    no consideration of data scalability and isolation. Application containers help
    to meet this use case as we can scale the required component by deploying more
    application-specific containers and it also helps to meet load balancing and recovery
    use cases. For the previous three-tier architecture, each of the services will
    be packaged into separate containers in order to fulfill the architecture deployment
    use case:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作系统容器的情况下，我们可以默认选择Ubuntu作为基本容器，并使用Dockerfile安装服务MySQL，nginx和Node.js。这种打包适用于测试或开发设置，其中所有服务都打包在一起，并可以在开发人员之间共享和传送。但是，将此架构部署到生产环境中不能使用操作系统容器，因为没有考虑数据可扩展性和隔离性。应用容器有助于满足这种用例，因为我们可以通过部署更多的应用程序特定容器来扩展所需的组件，并且还有助于满足负载均衡和恢复用例。对于前述的三层架构，每个服务将被打包到单独的容器中，以满足架构部署的用例：
- en: '![Application containers](graphics/image_01_004.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![应用容器](graphics/image_01_004.jpg)'
- en: Application containers scaled up
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 应用容器的扩展
- en: 'The main differences between OS and application containers are:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统和应用容器之间的主要区别是：
- en: '| **OS Container** | **Application Container** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **操作系统容器** | **应用容器** |'
- en: '| Meant to run multiple services on the same OS container | Meant to run a
    single service |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 旨在在同一操作系统容器上运行多个服务 | 旨在运行单个服务 |'
- en: '| Natively, no layered filesystem | Layered filesystem |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 本地，没有分层文件系统 | 分层文件系统 |'
- en: '| Example: LXC, OpenVZ, BSD Jails | Example: Docker, Rocket |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 示例：LXC，OpenVZ，BSD Jails | 示例：Docker，Rocket |'
- en: Diving into Docker
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入Docker
- en: Docker is a container implementation that has gathered enormous interest in
    recent years. It neatly bundles various Linux kernel features and services such
    as namespaces, cgroups, SELlinux, AppArmor profiles, and so on, with Union file
    systems such as AUFS and BTRFS to make modular images. These images provide highly
    configurable virtualized environments for applications and follow the write-once-run-anywhere
    principle. An application can be as simple as running a process to having highly
    scalable and distributed processes working together.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个容器实现，在近年来引起了巨大的兴趣。它整齐地捆绑了各种Linux内核特性和服务，如命名空间、cgroups、SELinux、AppArmor配置文件等，以及Union文件系统，如AUFS和BTRFS，以制作模块化的镜像。这些镜像为应用程序提供了高度可配置的虚拟化环境，并遵循一次编写，随处运行的原则。一个应用程序可以简单到运行一个进程，也可以是高度可扩展和分布式的进程共同工作。
- en: 'Docker is gaining a lot of traction in the industry because of its performance
    savvy and universally replicable architecture, meanwhile providing the following
    four cornerstones of modern application development:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Docker因其性能敏锐和普遍可复制的架构而在行业中获得了很多关注，同时提供了现代应用开发的以下四个基石：
- en: Autonomy
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自治
- en: Decentralization
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去中心化
- en: Parallelism
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行性
- en: Isolation
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离
- en: Furthermore, wide-scale adaptation of Thoughtworks's microservices architecture
    or **Lots of Small Applications** (**LOSA**) is further bringing potential to
    Docker technology. As a result, big companies such as Google, VMware, and Microsoft
    have already ported Docker to their infrastructure, and the momentum is continued
    with the launch of myriad of Docker start-ups namely Tutum, Flocker, Giantswarm,
    and so on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Thoughtworks的微服务架构或**大量小应用**（LOSA）的广泛采用进一步为Docker技术带来潜力。因此，谷歌、VMware和微软等大公司已经将Docker移植到他们的基础设施上，并且随着Tutum、Flocker、Giantswarm等众多Docker初创公司的推出，这种势头还在持续。
- en: 'Since Docker containers replicate their behavior anywhere, be it your development
    machine, a bare-metal server, virtual machine, or data center, application designers
    can focus their attention on development, while operational semantics are left
    to DevOps. This makes team workflow modular, efficient, and productive. Docker
    is not to be confused with VM, even though they are both virtualization technologies.
    Where Docker shares an OS, meanwhile providing a sufficient level of isolation
    and security to applications running in containers, it later completely abstracts
    out OS and gives strong isolation and security guarantees. But Docker''s resource
    footprint is minuscule in comparison to VM, and hence preferred for economy and
    performance. However, it still cannot completely replace VM, and the usage of
    container is complementary to VM technology:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker容器可以在任何地方复制其行为，无论是在开发机器、裸机服务器、虚拟机还是数据中心，应用程序设计者可以将注意力集中在开发上，而操作语义留给DevOps。这使得团队工作流程模块化、高效和高产。Docker不应与VM混淆，尽管它们都是虚拟化技术。Docker共享操作系统，同时为运行在容器中的应用程序提供足够的隔离和安全性，然后完全抽象出操作系统并提供强大的隔离和安全性保证。但是与VM相比，Docker的资源占用量微不足道，因此更受经济和性能的青睐。然而，它仍然不能完全取代VM，容器的使用是VM技术的补充：
- en: '![Diving into Docker](graphics/image_01_005.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![深入Docker](graphics/image_01_005.jpg)'
- en: VM and Docker architecture
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: VM和Docker架构
- en: Advantages of Docker containers
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker容器的优势
- en: 'Following are some of the advantages of using Docker containers in microservice
    architecture:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在微服务架构中使用Docker容器的一些优势：
- en: '**Rapid application deployment**: With minimal runtime, containers can be deployed
    quickly because of the reduced size as only the application is packaged.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速应用部署**：由于尺寸减小，容器可以快速部署，因为只有应用程序被打包。'
- en: '**Portability**: An application with its operating environment (dependencies)
    can be bundled together into a single Docker container that is independent from
    the OS version or deployment model. The Docker containers can be easily transferred
    to another machine that runs Docker container and executed without any compatibility
    issues. Windows support is also going to be part of future Docker releases.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：一个应用及其操作环境（依赖项）可以捆绑到一个单独的Docker容器中，独立于操作系统版本或部署模型。Docker容器可以轻松地转移到另一台运行Docker容器的机器上，并且在没有任何兼容性问题的情况下执行。Windows支持也将成为未来Docker版本的一部分。'
- en: '**Easily Shareable**: Pre-built container images can be easily shared with
    the help of public repositories as well as hosted private repositories for internal
    use.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易共享**：预构建的容器镜像可以通过公共存储库以及用于内部使用的托管私有存储库轻松共享。'
- en: '**Lightweight footprint**: Even the Docker images are very small and have a
    minimal footprint to deploy a new application with the help of containers.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻量级占用空间**：即使Docker镜像非常小，也具有最小的占用空间，可以使用容器轻松部署新应用程序。'
- en: '**Reusability**: Successive versions of Docker containers can be easily built
    as well as rolled back to previous versions easily whenever required. It makes
    them noticeably lightweight as components from the pre-existing layers can be
    reused.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用性**：Docker容器的连续版本可以轻松构建，并且可以在需要时轻松回滚到先前的版本。它们因为可以重用来自现有层的组件而变得明显轻量级。'
- en: Docker lifecycle
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker生命周期
- en: 'These are some of the basic steps involved in the lifecycle of a Docker container:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Docker容器生命周期中涉及的一些基本步骤：
- en: 'Build the Docker image with the help of Dockerfile which contains all the commands
    required to be packaged. It can run in the following way:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包含打包所需的所有命令的Dockerfile构建Docker镜像。可以以以下方式运行：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Tag name can be added in following way:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 标签名称可以以以下方式添加：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If Dockerfile exists at a different path then the Docker `build` command can
    be executed by providing `-f` flag:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Dockerfile存在于不同的路径，则可以通过提供`-f`标志来执行Docker `build`命令：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After the image creation, in order to deploy the container `Docker run` can
    be used. The running containers can be checked with the help of the `Docker ps` command,
    which lists the currently active containers. There are two more commands to be
    discussed:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建镜像之后，可以使用`Docker run`来部署容器。可以使用`Docker ps`命令来检查正在运行的容器，该命令列出当前活动的容器。还有两个要讨论的命令：
- en: '`Docker pause`: This command uses cgroups freezer to suspend all the processes
    running in a container. Internally it uses the SIGSTOP signal. Using this command
    process can be easily suspended and resumed whenever required.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Docker pause`：此命令使用cgroups冻结器来暂停容器中运行的所有进程。在内部，它使用SIGSTOP信号。使用此命令，进程可以在需要时轻松暂停和恢复。'
- en: '`Docker start`: This command is used to start one or more stopped containers.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Docker start`：此命令用于启动一个或多个已停止的容器。'
- en: After the usage of container is done, it can either be stopped or killed; the
    `Docker stop:` command will gracefully stop the running container by sending the
    SIGTERM and then SIGKILL command. In this case, the container can still be listed
    by using `Docker ps -a` command. `Docker kill` will kill the running container
    by sending SIGKILL to the main process running inside the container.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用容器后，可以将其停止或杀死；`Docker stop`命令将通过发送SIGTERM然后SIGKILL命令优雅地停止运行的容器。在这种情况下，仍然可以使用`Docker
    ps -a`命令列出容器。`Docker kill`将通过向容器内部运行的主进程发送SIGKILL来杀死运行的容器。
- en: If there are some changes made to the container while it is running, which are
    likely to be preserved, a container can be converted back to an image by using
    the `Docker commit` after the container has been stopped:![Docker lifecycle](graphics/image_01_006.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在容器运行时对容器进行了一些更改，这些更改可能会被保留，可以在容器停止后使用`Docker commit`将容器转换回镜像：
- en: The Docker lifecycle
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Docker生命周期
- en: Docker design patterns
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker设计模式
- en: 'Listed here are eight Docker design patterns with examples. Dockerfile is the
    base structure from which we define a Docker image, it contains all the commands
    to assemble an image. Using the `Docker build` command, we can create an automated
    build that executes all the preceding mentioned command-line instructions to create
    an image:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了八个Docker设计模式及其示例。Dockerfile是我们定义Docker镜像的基本结构，它包含了组装镜像的所有命令。使用`Docker build`命令，我们可以创建一个自动化构建，执行所有前面提到的命令行指令来创建一个镜像：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Design patterns listed here can help in creating Docker images that persist
    in volumes and provide various other flexibility so that they can be recreated
    or replaced easily at any time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的设计模式可以帮助创建在卷中持久存在的Docker镜像，并提供各种灵活性，以便可以随时轻松地重新创建或替换它们。
- en: Base image sharing
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础镜像共享
- en: 'For creating a web-based application or blog, we can create a base image which
    can be shared and help to deploy the application with ease. This pattern helps
    out as it tries to package all the required services on top of one base image,
    so that this web application blog image can be reused anywhere:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建基于web的应用程序或博客，我们可以创建一个基础镜像，可以共享并帮助轻松部署应用程序。这种模式有助于将所有所需的服务打包到一个基础镜像之上，以便这个web应用程序博客镜像可以在任何地方重复使用：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding Dockerfile shows the standard way of creating an application-based
    image.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的Dockerfile显示了创建基于应用程序的镜像的标准方式。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: A Docker image is a zipped file which is a snapshot of all the configuration
    parameters as well as the changes made in the base image (kernel of the OS).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像是一个压缩文件，是基础镜像中所有配置参数以及所做更改的快照（操作系统的内核）。
- en: It installs some specific tools (Ruby tools rake and bundler) on top of the
    Debian base image. It creates a new user, adds it to the container image, and
    specifies the working directory by mounting `"/home"` directory from the host,
    which is explained in detail in the next section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它在Debian基础镜像上安装了一些特定工具（Ruby工具rake和bundler）。它创建了一个新用户，将其添加到容器镜像中，并通过从主机挂载`"/home"`目录来指定工作目录，这在下一节中有详细说明。
- en: Shared volume
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 共享卷
- en: 'Sharing the volume at host level allows other containers to pick up the shared
    content that they require. This helps in faster rebuilding of the Docker image
    or when adding, modifying, or removing dependencies. For example, if we are creating
    the homepage deployment of the previously mentioned blog, the only directory required
    to be shared is the `/home/vkohli/src/repos/homepage` directory with this web
    app container through the Dockerfile in the following way:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机级别共享卷允许其他容器获取它们所需的共享内容。这有助于更快地重建Docker镜像，或者在添加、修改或删除依赖项时。例如，如果我们正在创建前面提到的博客的主页部署，唯一需要共享的目录是`/home/vkohli/src/repos/homepage`目录，通过以下方式通过Dockerfile与这个web应用容器共享：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For creating the development version of the blog we can share the folder `/home/vkohli/src/repos/blog`
    where all the related developer files can reside. And for creating the dev-version
    image we can take the base image from the pre-created `devbase`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建博客的开发版本，我们可以共享`/home/vkohli/src/repos/blog`文件夹，其中所有相关的开发者文件可以驻留。并且为了创建开发版本镜像，我们可以从预先创建的`devbase`中获取基础镜像：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Development tools container
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发工具容器
- en: 'For development purposes, we have separate dependencies in development and
    production environments which easily get co-mingled at some point. Containers
    can be helpful in differentiating the dependencies by packaging them separately.
    As shown in the following code, we can derive the development tools container
    image from the base image and install development dependencies on top of it even
    allowing an `ssh` connection so that we can work upon the code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发目的，我们在开发和生产环境中有不同的依赖关系，这些依赖关系很容易在某个时候混合在一起。容器可以通过将它们分开打包来帮助区分依赖关系。如下所示，我们可以从基本映像中派生开发工具容器映像，并在其上安装开发依赖，甚至允许`ssh`连接，以便我们可以处理代码：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As can be seen in the preceding code, basic tools such as `wget`, `curl`, and
    `tcpdump` are installed which are required during development. Even SSHD service
    is installed which allows an `ssh` connection into the development container.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，安装了基本工具，如`wget`、`curl`和`tcpdump`，这些工具在开发过程中是必需的。甚至安装了SSHD服务，允许在开发容器中进行`ssh`连接。
- en: Test environment containers
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试环境容器
- en: 'Testing the code in different environments always eases the process and helps
    find more bugs in isolation. We can create a Ruby environment in a separate container
    to spawn a new Ruby shell and use it to test the code base:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的环境中测试代码总是有助于简化流程，并有助于在隔离中发现更多的错误。我们可以创建一个Ruby环境在一个单独的容器中生成一个新的Ruby shell，并用它来测试代码库。
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the Dockerfile listed, we are using the base image as `devbase` and with
    the help of just one command `docker run` can easily create a new environment
    by using the image created from this Dockerfile to test the code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在列出的Dockerfile中，我们使用`devbase`作为基本映像，并借助一个`docker run`命令，可以轻松地使用从该Dockerfile创建的映像创建一个新的环境来测试代码。
- en: The build container
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建容器
- en: 'We have build steps involved in the application that are sometimes expensive.
    In order to overcome this we can create a separate build container which can use
    the dependencies needed during the build process. The following Dockerfile can
    be used to run a separate build process:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序中涉及一些耗费时间的构建步骤。为了克服这一点，我们可以创建一个单独的构建容器，该容器可以使用构建过程中所需的依赖项。以下Dockerfile可用于运行单独的构建过程：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`/build` directory is the shared directory that can be used to provide the
    compiled binaries, also we can mount the `/build/source` directory in the container
    to provide updated dependencies. Thus by using build container we can decouple
    the build process and the final packaging part in separate containers. It still
    encapsulates both the process and dependencies by breaking the preceding process
    into separate containers.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`/build`目录是共享目录，可用于提供已编译的二进制文件，还可以将容器中的`/build/source`目录挂载到提供更新的依赖项。因此，通过使用构建容器，我们可以将构建过程和最终打包过程分离开来。它仍然通过将前面的过程分解为单独的容器来封装过程和依赖关系。'
- en: The installation container
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装容器
- en: The purpose of this container is to package the installation steps in separate
    containers. Basically, it is in order to provide the deployment of containers
    in a production environment.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该容器的目的是将安装步骤打包到单独的容器中。基本上，这是为了在生产环境中部署容器。
- en: 'A sample Dockerfile to package the installation script inside a Docker image
    is shown as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了将安装脚本打包到Docker映像中的示例Dockerfile：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `installer.sh` can contain the specific installation command to deploy containers
    in a production environment and also provide the proxy setup with DNS entry in
    order to have the cohesive environment deployed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`installer.sh` 可以包含特定的安装命令，在生产环境中部署容器，并提供代理设置和DNS条目，以便部署一致的环境。'
- en: The service-in-a-box container
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务容器
- en: 'In order to deploy the complete application in a container, we can bundle multiple
    services to provide the complete deployment container. In this case we bundle
    web app, API service, and database together in one container. It helps to ease
    the pain of interlinking various separate containers:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在一个容器中部署完整的应用程序，我们可以捆绑多个服务以提供完整的部署容器。在这种情况下，我们将Web应用程序、API服务和数据库捆绑在一个容器中。这有助于简化各种独立容器之间的互联的痛苦。
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Infrastructure containers
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施容器
- en: 'As we have talked about container usage in a development environment, there
    is one big category missing-the usage of a container for infrastructure services
    such as proxy setup which provides a cohesive environment in order to provide
    the access to an application. In the following mentioned Dockerfile example, we
    can see that `haproxy` is installed and links to its configuration file are provided:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在开发环境中讨论过的容器使用，还有一个重要的类别缺失-用于基础设施服务的容器的使用，比如代理设置，它提供了一个连贯的环境，以便提供对应用程序的访问。在下面提到的Dockerfile示例中，我们可以看到安装了`haproxy`并提供了其配置文件的链接：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `haproxy.cfg` file is the configuration file responsible for authenticating
    a user:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`haproxy.cfg`文件是负责对用户进行身份验证的配置文件：'
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Unikernels
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unikernels
- en: 'Unikernels compile source code into a custom operating system that includes
    only the functionality required by the application logic producing a specialized
    single address space machine image, eliminating unnecessary code. Unikernels are built
    using the *library operating system*, which has the following benefits compared
    to a traditional OS:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Unikernels将源代码编译成一个包括应用逻辑所需功能的自定义操作系统，生成一个专门的单地址空间机器映像，消除了不必要的代码。Unikernels是使用*库操作系统*构建的，与传统操作系统相比具有以下优点：
- en: '**Fast boot time**: Unikernels make provisioning highly dynamic and can boot
    in less than a second'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速启动时间：Unikernels使得配置高度动态化，并且可以在不到一秒的时间内启动
- en: '**Small footprint**: Unikernel code base is smaller than the traditional OS
    equivalents and pretty much as easy to manage'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小的占地面积：Unikernel代码库比传统的操作系统等效代码库要小，而且管理起来也同样容易
- en: '**Improved security**: As unnecessary code is not deployed, the attack surface
    is drastically reduced'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高安全性：由于不部署不必要的代码，攻击面大大减少
- en: '**Fine-grained optimization**: Unikernels are constructed using compile tool
    chains and are optimized for device drivers and application logic to be used'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精细化优化：Unikernels是使用编译工具链构建的，并且针对设备驱动程序和应用逻辑进行了优化
- en: 'Unikernels match very well with the microservices architecture as both source
    code and generated binaries can be easily version-controlled and are compact enough
    to be rebuilt. Whereas on the other side, modifying VMs is not permitted and changes
    can only be made to source code, which is time-consuming and hectic. For example,
    if the application doesn''t require disk access and a display facility. Unikernels
    can help to remove this unnecessary device driver and display functionality from
    the kernel. Thus, the production system becomes minimalistic only packaging the
    application code, runtime environment, and OS facilities which is the basic concept
    of immutable application deployment where a new image is constructed if any application
    change is required in production servers:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Unikernels与微服务架构非常匹配，因为源代码和生成的二进制文件都可以很容易地进行版本控制，并且足够紧凑，可以重新构建。而另一方面，修改虚拟机是不允许的，只能对源代码进行修改，这是耗时且繁琐的。例如，如果应用程序不需要磁盘访问和显示功能。Unikernels可以帮助从内核中删除这些不必要的设备驱动程序和显示功能。因此，生产系统变得极简，只打包应用代码、运行时环境和操作系统设施，这是不可变应用部署的基本概念，如果在生产服务器上需要进行任何应用程序更改，则会构建一个新的映像：
- en: '![Unikernels](graphics/image_01_007.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Unikernels](graphics/image_01_007.jpg)'
- en: The transition from a traditional container to Unikernel-based containers
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从传统容器过渡到基于Unikernel的容器
- en: Containers and Unikernels are a best fit for each other. Recently, the Unikernel
    system has become part of Docker and the collaboration of both these technologies
    will be seen soon in the next Docker release. As explained in the preceding diagram,
    the first one shows the traditional way of packaging one VM supporting multiple
    Docker containers. The next step shows a 1:1 map (one container per VM) which
    allows each application to be self-contained and gives better resource usage,
    but creating a separate VM for each container adds an overhead. In the last step,
    we can see the collaboration of Unikernels with the current existing Docker tools
    and ecosystem, where a container will get the kernel low-library environment specific
    to its need.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 容器和Unikernels是彼此的最佳选择。最近，Unikernel系统已成为Docker的一部分，这两种技术的合作很快将在下一个Docker版本中看到。如前图所示，第一个显示了支持多个Docker容器的传统打包方式。下一步显示了一对一的映射（一个容器对应一个VM），这允许每个应用程序是自包含的，并且能更好地利用资源，但为每个容器创建一个单独的VM会增加开销。在最后一步中，我们可以看到Unikernels与当前现有的Docker工具和生态系统的合作，其中一个容器将获得特定于其需求的内核低库环境。
- en: Adoption of Unikernels in the Docker toolchain will accelerate the progress
    of Unikernels and it will be widely used and understood as a packaging model and
    runtime framework, making Unikernels another type of container. After the Unikernels
    abstraction for Docker developers, we will be able to choose either to use a traditional
    Docker container or the Unikernel container in order to create the production
    environment.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Unikernels在Docker工具链中的采用将加速Unikernels的进展，并且它将被广泛使用和理解为一种打包模型和运行时框架，使Unikernels成为另一种类型的容器。在为Docker开发人员提供Unikernels抽象之后，我们将能够选择是使用传统的Docker容器还是Unikernel容器来创建生产环境。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we studied the basic containerization concept with the help
    of application and OS-based containers. The differences between them explained
    in this chapter will clearly help developers to choose the containerization approach
    which fits perfectly for their system. We have thrown some light on the Docker
    technology, its advantages, and the lifecycle of a Docker container. The eight
    Docker design patterns explained in this chapter clearly show the way to implement
    Docker containers in a production environment. At the end of the chapter, the
    Unikernels concept was introduced which is the future of where the containerization
    domain is moving. In the next chapter, we will be starting with Docker installation
    troubleshooting issues and its deep dive resolutions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过应用程序和基于操作系统的容器的帮助下学习了基本的容器化概念。本章中解释的它们之间的区别将清楚地帮助开发人员选择适合其系统的容器化方法。我们对Docker技术、其优势以及Docker容器的生命周期进行了一些介绍。本章中解释的八种Docker设计模式清楚地展示了在生产环境中实现Docker容器的方法。在本章结束时，介绍了Unikernels的概念，这是容器化领域未来发展的方向。在下一章中，我们将开始讨论Docker安装故障排除问题及其深入解决方案。
