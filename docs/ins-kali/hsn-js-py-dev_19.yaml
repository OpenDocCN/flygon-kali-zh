- en: Enter Webpack
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 进入Webpack
- en: So, you now have beautiful frontend and backend code. Great! It looks so pretty
    sitting there on your laptop… so what's the next step? Publishing it to the world!
    It sounds easy, but when we have advanced JavaScript usage, such as with React,
    there are a couple more steps we might want to take to ensure our code is running
    at peak efficiency, all dependencies are resolved, and everything is compatible
    with modern technologies. Additionally, download size is a major consideration,
    so let's explore webpack, a tool to help mitigate these concerns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在你有了漂亮的前端和后端代码。太棒了！它看起来在你的笔记本上如此漂亮……那么下一步是什么？将它发布到世界上！听起来很容易，但当我们有像React这样的高级JavaScript使用时，我们可能还想采取一些额外步骤，以确保我们的代码以最高效率运行，所有依赖项都得到解决，并且一切都与现代技术兼容。此外，下载大小是一个重要考虑因素，所以让我们探讨一下webpack，这是一个帮助解决这些问题的工具。
- en: 'We will cover the following points in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下几点：
- en: The need for bundling and modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捆绑和模块的需求
- en: Using webpack
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用webpack
- en: Deployment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be prepared to work with the code provided in the `Chapter-16` directory of
    the repository: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-16](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-16).
    As we'll be working with command-line tools, also have your terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好使用存储库的`Chapter-16`目录中提供的代码：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-16](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-16)。因为我们将使用命令行工具，还要准备好你的终端或命令行shell。我们需要一个现代浏览器和一个本地代码编辑器。
- en: The need for bundling and modules
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捆绑和模块的需求
- en: 'Ideally, everything will work seamlessly on a website, without the need for
    any additional steps to be taken. You take your source files, drop them on a web
    server, and voilà: a site. However, this isn''t always the case. For example,
    with React, we need to run `npm run build` to generate an output distribution
    directory for our project. We might also have other types of non-source files,
    such as SASS or TypeScript, which need to be converted into native file formats
    that the browser can understand.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，一切都会在网站上无缝运行，无需采取任何额外步骤。你拿起你的源文件，放在一个web服务器上，然后：一个网站。然而，情况并非总是如此。例如，对于React，我们需要运行`npm
    run build`来为我们的项目生成一个输出分发目录。我们可能还有其他类型的非源文件，比如SASS或TypeScript，需要转换成浏览器可以理解的原生文件格式。
- en: 'So, what is a *module*? There''s the concept of **modular programming**, which
    takes large programs and separates them by concern and encapsulation (scope) into
    smaller, contained chunks called modules. The ideas behind modular programming
    are many: scope, abstraction, logical design, testing, and debugging. Similarly,
    a bundle is a chunk of code that a browser can easily use, usually constructed
    from one or more modules.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，*模块*是什么？有**模块化编程**的概念，它将大型程序按照关注点和封装（作用域）分离成更小、更独立的模块。模块化编程背后的思想有很多：作用域、抽象、逻辑设计、测试和调试。同样，一个捆绑是浏览器可以轻松使用的一块代码，通常由一个或多个模块构成。
- en: 'Now here''s the fun part: *we''ve already worked with modules*! Let''s take
    a look at some Node.js code we wrote in [Chapter 11](cc19c3b4-fb3d-402d-8931-581def8a75e4.xhtml), *What
    is Node.js?:*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分：*我们已经使用过模块*！让我们来看看我们在[第11章](cc19c3b4-fb3d-402d-8931-581def8a75e4.xhtml)中编写的一些Node.js代码，*什么是Node.js？：*
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On that very first line, we''re using a module called `readline`, which, if
    you recall from our program, will be used to take user input from the command
    line. We''ve also used them in React—any time we''ve needed to use `npm install`,
    we''re using the concept of modules. So why is this important? Let''s consider
    a standard `create-react-app` installation from scratch:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们使用了一个叫做`readline`的模块，如果你还记得我们的程序，它将被用来从命令行接收用户输入。我们在React中也使用了它们——每当我们需要使用`npm
    install`时，我们都在使用模块的概念。那么这为什么重要呢？让我们考虑从头开始标准的`create-react-app`安装：
- en: 'Use `npx` to create a new React project: `npx create-react-app sample-project`.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npx`创建一个新的React项目：`npx create-react-app sample-project`。
- en: 'Navigate into the directory and install the dependencies: `cd sample-project
    ; npm install`.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入目录并安装依赖项：`cd sample-project ; npm install`。
- en: Start the project with `npm start`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm start`启动项目。
- en: 'If you remember, this gives us a very interesting start page:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，这给我们一个非常有趣的起始页面：
- en: '![](assets/321bf6f9-5ab4-4f32-80a8-923a814c5cbd.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/321bf6f9-5ab4-4f32-80a8-923a814c5cbd.png)'
- en: Figure 16.1 – The React start page
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – React起始页面
- en: 'What are we really getting when we run `npm install`? Let''s take a look at
    our file structure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`npm install`时，我们到底得到了什么？让我们看看我们的文件结构：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Simple enough so far. However, in this listing, I''ve purposely excluded the
    `node_modules` directory. This has 18 files. Try running this command at the root
    directory of our project, which does not exclude that directory: `tree`. Enjoy
    watching the flurry of lines—32,418 files! Where did all of those come from? Our
    friend, `npm install`!'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止还算简单。然而，在这个清单中，我故意排除了`node_modules`目录。这个目录有18个文件。尝试在我们项目的根目录运行这个命令，不排除那个目录：`tree`。享受观看繁忙的行数——32,418个文件！这些都是从哪里来的？是我们的朋友`npm
    install`！
- en: package.json
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: package.json
- en: 'Our project''s structure is controlled, in part, by our `package.json` file
    to manage dependencies. Most bundlers, such as webpack, will leverage the information
    in this file to create our dependency graphs and bite-sized modules. Let''s take
    a look at it:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目结构在一定程度上由我们的`package.json`文件控制以管理依赖项。大多数捆绑工具，比如webpack，将利用这个文件中的信息来创建我们的依赖图和一小块一小块的模块。让我们来看看它：
- en: '*package.json*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*package.json*'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is a standard, basic package file; it only contains six dependencies:
    half for testing and half for React. Now, here''s the fun part: each of those
    dependencies in turn has its own dependencies, which is how we end up with 32,400
    files in our `node_modules` directory alone. By using modules, we don''t have
    to hand-construct or manage dependencies; we can follow the DRY principles and
    leverage existing code that others (or we) have written in the form of modules.
    As we discussed when comparing Python and Node.js, `npm install` is similar to
    `pip install` in that we use packages in our Python program with the `import`
    keyword, while we use `require` in Node.js.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准的基本包文件；它只包含六个依赖项：一半用于测试，一半用于React。现在，有趣的部分是：每个依赖项又有自己的依赖项，这就是为什么我们在`node_modules`目录中单独有32,400个文件。通过使用模块，我们不必手动构建或管理依赖项；我们可以遵循DRY原则，并利用其他人（或我们自己）以模块形式编写的现有代码。正如我们在比较Python和Node.js时讨论的那样，`npm
    install`类似于Python中的`pip install`，我们在Python程序中使用`import`关键字来使用包，而在Node.js中我们使用`require`。
- en: When we use `npm install` to install a new package into our project, it will
    add an entry into `package.json`. This is a file where you'll want to be very
    careful if you make any edits. In general, you shouldn't need to make too many
    changes, and you especially should avoid making substantial changes to the dependencies.
    Leverage the `install` command for that.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`npm install`将一个新的包安装到我们的项目中时，它会在`package.json`中添加一个条目。这是一个文件，如果你进行任何编辑，你需要非常小心。一般来说，你不应该需要做太多更改，尤其是应该避免对依赖项进行实质性的更改。利用`install`命令来完成这些。
- en: Build pipelines
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建流水线
- en: 'Let''s take a look at what happens when we prepare our React project for deployment.
    Run `npm run build` and observe the output. You should see an output similar to
    the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们准备将React项目部署时会发生什么。运行`npm run build`并观察输出。你应该会看到类似以下的输出：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you take a look inside your build directory, you''ll see nicely minified
    JavaScript files, packaged for efficient deployment. Here''s the fun part: `npm
    run build` *from* `create-react-app` *uses webpack under the hood!* The `create-react-app`
    setup handles these pieces for us. It''s a bit tricky to modify the innards of
    the `create-react-app` webpack setup, so let''s now look at using webpack directly
    beyond the use case of React.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看构建目录，你会看到精简的JavaScript文件，打包好以便高效部署。有趣的部分在于：`create-react-app` *使用webpack进行构建*！`create-react-app`设置处理了这些部分。修改`create-react-app`的内部webpack设置有点棘手，所以现在让我们来看看如何在React的用例之外直接使用webpack。
- en: Using webpack
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用webpack
- en: 'Now, webpack is one of many modular tools that can be used in your program.
    Additionally, unlike React scripts, it has use outside of React: it can be used
    as a bundler for many different types of applications. To get our hands dirty,
    let''s create a small, useless sample project:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，webpack是许多模块化工具之一，可以在你的程序中使用。此外，与React脚本不同，它在React之外也有用途：它可以用作许多不同类型应用的打包工具。让我们动手创建一个小的、无用的示例项目：
- en: 'Create a new directory and navigate into it: `mkdir webpack-example ; cd webpack-example`.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的目录并进入其中：`mkdir webpack-example ; cd webpack-example`。
- en: 'We''ll be using NPM, so we need to initialize it. We''ll also accept the defaults:
    `npm init -y`.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用NPM，所以我们需要初始化它。我们也会接受默认值：`npm init -y`。
- en: 'We have to then install webpack: `npm install webpack webpack-cli --save-dev`.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要安装webpack：`npm install webpack webpack-cli --save-dev`。
- en: Note that we're using `--save-dev` here because we don't need webpack to be
    built into our production-level files. By using dev dependencies, we can help
    reduce our bundle size, a factor that can slow down applications if it bloats.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里使用`--save-dev`，因为我们不需要将webpack构建到我们的生产级文件中。通过使用开发依赖，我们可以帮助减少我们的捆绑大小，这是一个可能会拖慢应用程序的因素。
- en: 'If you look in the `node_modules` directory here, you''ll see that we''ve already
    installed over 3.5 thousand files from our dependencies. Our project is fairly
    boring as it stands: we don''t have any content! Let''s fix that and make some
    files, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这里的`node_modules`目录中查看，你会看到我们已经从依赖中安装了超过3.5千个文件。我们的项目目前相当无聊：没有任何内容！让我们修复这个问题，创建一些文件，如下所示：
- en: '*src/index.html*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*src/index.html*'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*src/index.js*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*src/index.js*'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So far, very exciting and useful, right? If you open our index page in a browser,
    you''ll see what you would expect in the console. We''ll now introduce webpack
    into the mix:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，非常令人兴奋和有用，对吧？如果你在浏览器中打开我们的首页，你会看到控制台中的预期内容。现在，让我们将webpack引入其中：
- en: 'Change the `package.json` `scripts` node to the following:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`package.json`的`scripts`节点更改为以下内容：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run `npm run dev`. You should see an output like this:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm run dev`。你应该会看到类似这样的输出：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now go ahead and look in your newly created `dist` directory:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在去查看你新创建的`dist`目录：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you open `main.js`, you'll find it looks *quite* different than our `index.js`!
    That's webpack doing some under-the-hood work to make our first steps into modularization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开`main.js`，你会发现它看起来与我们的`index.js`*非常*不同！这是webpack在幕后做一些模块化的工作。
- en: 'Wait. We went from one line of code to 100\. Why on earth is this better? Well,
    for this simple of an example it may not be, but humor me for a while longer.
    Let''s try `npm run build` and compare the output: `main.js` is now one line,
    minified.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。我们从一行代码变成了100行。为什么这样做更好呢？对于这样简单的例子来说可能并不是，但请再给我一点时间。让我们尝试`npm run build`并比较输出：`main.js`现在是一行，被精简了。
- en: 'Taking a look at our `package.json` file, we''ll see a few noteworthy pieces
    apart from the script node we manipulated:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的`package.json`文件，除了我们操作的脚本节点之外，还有一些值得注意的部分：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We see a `"main"` node that specifies an `index.js` to be used for our main
    entry point, or where webpack begins looking to catalog its dependencies.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到一个`"main"`节点指定了一个`index.js`作为我们的主入口点，或者说webpack开始查找其依赖的地方。
- en: 'There are three main concepts that are important to understand when using webpack:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用webpack时，有三个重要的概念需要理解：
- en: '**Entry**: The place where webpack starts its work.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**入口**：webpack开始工作的地方。'
- en: '**Output**: The place where webpack will spit out its finished product. If
    we look at the output of the preceding test, we''ll see `main.js  3.79 KiB   
    main  [emitted]  main`. Instead of the phrase "spits out," webpack much more elegantly
    defines it as "emitting" its bundles.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**：webpack将输出其完成的产品的地方。如果我们查看前面测试的输出，我们会看到`main.js 3.79 KiB main [emitted]
    main`。webpack更加优雅地将其定义为“emitting”其捆绑包，而不是“spits out”这个短语。'
- en: '**Loaders**: As mentioned, webpack can be used for a variety of different purposes;
    however, by default, webpack only really processes JavaScript and JSON files.
    So, we use *loaders* to do more work. We''ll use one in a minute to manipulate
    the `index.html` file.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载器**：如前所述，webpack可以用于各种不同的目的；然而，默认情况下，webpack只处理JavaScript和JSON文件。因此，我们使用*加载器*来做更多的工作。我们将在一分钟内使用一个加载器来操作`index.html`文件。'
- en: 'The concepts of mode and plugins are also important, though a bit more self-explanatory:
    mode, as we saw when we added our scripts to `package.json`, defines whether we
    want development, production, or "none" for our environment optimizations. There''s
    more to mode than that, but for now, we won''t go crazy—webpack is quite complex,
    so a surface-level understanding is a good place to begin. Plugins basically do
    what loaders can''t. We''ll keep it simple, though, and now we''ll add a loader
    that understands HTML files. Brace yourself… the output isn''t *quite* what you''re
    thinking it will be:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 模式和插件的概念也很重要，尽管有点更容易理解：模式，正如我们在`package.json`中添加脚本时所看到的，定义了我们是否希望对我们的环境进行开发、生产或“无”优化。模式比这更复杂，但现在我们不会变得疯狂——webpack相当复杂，因此对其有一个表面理解是一个很好的开始。插件基本上做着加载器无法做的事情。尽管我们会保持简单，现在我们将添加一个能够理解HTML文件的加载器。准备好……输出并不是你所想象的那样：
- en: Run `npm install html-loader --save-dev`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm install html-loader --save-dev`。
- en: We've now arrived at the point where we need a configuration file, so create
    `webpack.config.js`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经到了需要一个配置文件的地步，所以创建`webpack.config.js`。
- en: 'Enter this inside `webpack.config.js`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`webpack.config.js`中输入以下内容：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Modify `index.js`, as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`index.js`如下：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Modify `index.html` by changing the script tag as follows: `<script src="../dist/main.js"></script>`.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改`index.html`，将脚本标签更改为以下内容：
- en: Re-run `npm run dev` and then open that page in a browser.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行`npm run dev`，然后在浏览器中打开该页面。
- en: 'If we look at our console, we''ll see our HTML! Woo! Everything''s pretty much
    there, except our `<script>` tag says `"[Object object]"` in the `src`. Now you
    should be asking yourself: "what on earth did we just accomplish?".'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看控制台，我们会看到我们的HTML！哇！几乎所有的东西都在那里，除了我们的`<script>`标签在`src`中显示为`"[Object object]"`。现在你应该问自己：“我们刚刚完成了什么？”。
- en: 'As it turns out, a loader *isn''t* what we want! It''s a common mistake to
    work with loaders when you want plugins, and vice versa. Let''s now unwind what
    we did and install an HTML plugin that *will* do what we expect: insert `index.html`
    into the `dist` directory with an optimized `main.js` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，加载器*不是*我们想要的！当你想要插件时，却使用加载器，反之亦然，这是一个常见的错误。现在让我们撤销我们所做的，并安装一个*会*做我们期望的HTML插件：将`index.html`插入`dist`目录，并优化`main.js`文件：
- en: 'We don''t actually want or need the HTML loader for this task: `npm uninstall
    html-loader`.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际上，我们并不想要或需要HTML加载器来完成这个任务：`npm uninstall html-loader`。
- en: 'Install the right plugin: `npm install html-webpack-plugin --save-dev`.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装正确的插件：`npm install html-webpack-plugin --save-dev`。
- en: 'Completely replace the contents of `webpack.config.js` with this configuration:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全用这个配置替换`webpack.config.js`的内容：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Modify `index.js` back to its original one line: `console.log(''hello'')`.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`index.js`修改回原始的一行：`console.log('hello')`。
- en: Remove the `<script>` tag from `src/index.html`. It will be built for us.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src/index.html`中删除`<script>`标签。它将为我们构建。
- en: Execute `npm run dev`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`npm run dev`。
- en: Finally, open `dist/index.html` in a browser.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在浏览器中打开`dist/index.html`。
- en: 'That should be more to your liking and what you would expect by using webpack.
    Now, however, this is a very basic example, so let''s see whether we can do something
    fancier. Edit the files as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该更符合你的喜好，也是你使用webpack所期望的。然而，这只是一个非常基本的例子，所以让我们看看是否可以做一些更花哨的事情。编辑文件如下：
- en: '*src/index.html*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*src/index.html*'
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*src/index.js*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*src/index.js*'
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For this example, we''re using Highcharts, a charting library. This is their
    boilerplate example, taken directly from their site; I haven''t done anything
    fancy with it except modified line 1 to `import Highcharts from ''highcharts''`.
    That implies we''re going to use a module, so let''s install it—`npm install highcharts`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了Highcharts，一个图表库。这是他们的样板例子，直接从他们的网站上取出；我没有对它做任何花哨的事情，除了修改第一行为`import
    Highcharts from 'highcharts'`。这意味着我们将使用一个模块，所以让我们安装它——`npm install highcharts`：
- en: 'Add this script to your `package.json` `scripts` node: `"watch": "webpack --watch
    -- mode development"`.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将此脚本添加到你的`package.json`的`scripts`节点中：`"watch": "webpack --watch -- mode development"`。'
- en: Run `npm run watch`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm run watch`。
- en: 'Load `dist/index.html` in the browser:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中加载`dist/index.html`：
- en: '![](assets/545d6bee-e61b-4a14-9ece-2c6a2a77a748.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/545d6bee-e61b-4a14-9ece-2c6a2a77a748.png)'
- en: Figure 16.2 – Webpack with Highcharts
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 - 使用Highcharts的Webpack
- en: Much more interesting, don't you think? Also, take a moment to look at the `index_bundle.js`
    file and note the much larger file and minified code. If you edit a file in `src`,
    with `watch`, webpack will repackage the files on the fly for you. If you're using
    a live server that does hot reloads, such as with Visual Studio Code, it'll also
    refresh the page for you—handy for rapid development!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣，不是吗？还有，花点时间看看`index_bundle.js`文件，并注意更大的文件和缩小的代码。如果你用`watch`编辑`src`中的文件，webpack会即时为你重新打包文件。如果你使用支持热重载的实时服务器，比如Visual
    Studio Code，它也会为你刷新页面——对于快速开发很方便！
- en: It's time to finally try what we've been building. Let's try building our project
    for deployment next.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候尝试我们一直在构建的东西了。让我们尝试为部署构建我们的项目。
- en: Deploying our project
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署我们的项目
- en: 'We''ve done a lot of development work so far, and now it''s time to try a production
    build of our project. Run `npm run build` and, well, it''s not quite so happy,
    is it? You should get some warnings like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经做了很多开发工作，现在是时候尝试对我们的项目进行生产构建了。运行`npm run build`，嗯，它并不是那么开心，是吧？你应该会收到一些像这样的警告：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So, what is this trying to tell us? Remember when I was talking about bundle
    size impacting performance? Let's try to optimize this so that we no longer get
    these messages. We'll investigate a few development techniques to do this.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这是在告诉我们什么？还记得我说过捆绑大小会影响性能吗？让我们尝试优化一下，这样我们就不会再收到这些消息了。我们将研究一些开发技术来做到这一点。
- en: Chunking
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块
- en: 'Simply put, chunking is the method of taking large files and splitting them
    apart into smaller chunks. We can do this part easily by adding this to our `webpack.config.js` file
    after our plugins node:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，块是将大文件拆分成较小块的方法。我们可以通过在我们的`webpack.config.js`文件的插件节点之后添加这个部分来轻松完成这一部分：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, go ahead and build; it''ll be a *little* happier:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续构建；它会*稍微*开心一点：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It's still going to complain, unfortunately. We shaved 1.74 KB into a separate
    file, but we still have our `vendors` bundle sitting at 262 KB. If you look in
    `dist`, you'll now see the two `js` files as well as two `<script>` tags in the
    HTML.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，它仍然会抱怨。我们将1.74 KB削减到一个单独的文件中，但我们仍然有一个262 KB的`vendors`捆绑包。如果你在`dist`中查看，现在你会看到两个`js`文件以及HTML中的两个`<script>`标签。
- en: The reason it's not splitting it further is that the vendor (Highcharts) bundle
    is pretty self-contained already, so we need to explore other ways to accomplish
    what we need. If we had a lot of our own code, however, it would probably be splitting
    it further into multiple chunks.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 它之所以不进一步拆分是因为供应商（Highcharts）捆绑包已经相当自包含，所以我们需要探索其他方法来实现我们的需求。然而，如果我们有很多自己的代码，可能会进一步将其拆分为多个块。
- en: So, what's our next option? We tweak the optimization!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们的下一个选择是什么？我们调整优化！
- en: 'Try this one on for size:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 试试这个：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you note, the options in this are much more explicit, including a maximum
    size for the chunks, reusing existing vendor chunks, and a minimum number of chunks.
    Let's try it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到，这里的选项更加明确，包括块的最大大小，重用现有的供应商块，以及最小数量的块。让我们试试看。
- en: No change, right?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 没有变化，对吧？
- en: 'Let''s try something different: modify `index.js` to use promises and **webpack
    hints** to break the Highcharts dependency into its own bundle:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些不同的东西：修改`index.js`以使用promises和**webpack提示**来将Highcharts依赖项拆分为自己的捆绑包：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Our output from `npm run build` should now look more like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`npm run build`的输出现在应该更像这样：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Well… that *still* didn't do what we wanted! While we have a separate chunk
    for Highcharts, it's still a large, monolithic file. So, what do we do?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯...这*仍然*没有达到我们想要的效果！虽然我们为Highcharts有一个单独的块，但它仍然是一个庞大的、单一的文件。那么，我们该怎么办？
- en: Surrender
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 投降
- en: Raise the white flag. Admit defeat.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 举起白旗。承认失败。
- en: Almost.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎。
- en: 'Here''s where each vendor package may differ and each import will be unique;
    what we want to do is try to find the *smallest chunk* of our vendor library that
    suits our needs. In this case, importing all of Highcharts is creating a massive
    file. However, let''s take a look at `node_modules/highcharts`. Inside the `es-modules`
    directory, there''s an interesting file: `highcharts.src.js`. This is a more modular
    file of what we want, so let''s try importing it instead of the whole library
    at once:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每个供应商包可能不同，每个导入都将是独特的；我们想做的是尝试找到适合我们需求的*最小块*的供应商库。在这种情况下，导入所有Highcharts正在创建一个庞大的文件。然而，让我们看看`node_modules/highcharts`。在`es-modules`目录中，有一个有趣的文件：`highcharts.src.js`。这是我们想要的更模块化的文件，所以让我们尝试导入它而不是一次导入整个库：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now see what happens if we use `npm run build`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看如果我们使用`npm run build`会发生什么：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Aha! Much nicer! So, in this case, the answer was obtuse. Highcharts bundling
    can be unwound in order to add only specific pieces of the code. This *will not*
    work in all cases, especially where the source is not included; however, this
    is a course of approach for us at this time: pare down the included packages to
    the smallest needed set. Remember when we selectively included parts of libraries
    in React? The same idea holds true here.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！好多了！所以，在这种情况下，答案是晦涩的。Highcharts捆绑可以被解开，以便只添加代码的特定部分。这在所有情况下*都不会*起作用，特别是在源代码未包含的情况下；然而，这是我们目前的一种方法：将包含的包裁减到最小需要的集合。还记得我们在React中有选择地包含库的部分吗？这里的想法也是一样的。
- en: Deployment, finished
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署，完成
- en: Now what do we do? All you really have to do is take the contents of your `dist`
    directory and put it on a web server for the world to see! Let your hard work
    be shown.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们该怎么办？你真正需要做的就是将你的`dist`目录的内容放在一个Web服务器上供全世界查看！让你的辛勤工作展现出来。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Webpack is our friend. It modularizes, minifies, chunks, and makes our code
    more efficient, as well as warning us when certain pieces aren't properly optimized.
    There are ways to silence these alerts, but in general, it's a good idea to listen
    to them and at least *try* to resolve them.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是我们的朋友。它模块化，最小化，分块，并使我们的代码更有效，同时在某些部分没有得到适当优化时警告我们。有方法可以消除这些警报，但总的来说，倾听它们并至少*尝试*解决它们是一个好主意。
- en: 'One burning question, though, that remains unanswered: doesn''t increasing
    the number of files downloaded increase the load time? This is a common misconception
    that''s hung around from the early days of the web: more files == more load time.
    The fact is, however, that multiple browsers can open many non-blocking streams
    simultaneously, allowing for a *more* efficient download than one huge file. Is
    this a solution for all multiple files? No: a CSS image sprite, for example, is
    still a more efficient use of image resources. For performance, we must toe a
    fine line on how to provide the best user experience, while combining that with
    the best developer experience. Entire books are written on this topic alone, so
    I won''t try to give you all the answers. I''ll just leave you with this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个仍然没有答案的燃烧问题是：增加下载文件的数量会增加加载时间吗？这是一个常见的误解，它始于互联网早期：更多的文件==更长的加载时间。然而，事实是，多个浏览器可以同时打开许多非阻塞流，从而比一个巨大的文件实现更高效的下载。这是所有多个文件的解决方案吗？不是：例如，CSS图像精灵仍然是更有效地使用图像资源。为了性能，我们必须在提供最佳用户体验的同时，与最佳开发者体验相结合。整本书都是关于这个主题的，所以我不会试图给你所有的答案。我只会留下这个：
- en: Optimize, optimize, optimize.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 优化，优化，优化。
- en: 'In the next chapter, we''ll deal with a very important topic for all parts
    of programming: security.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将处理编程的所有部分都非常重要的一个主题：安全性。
