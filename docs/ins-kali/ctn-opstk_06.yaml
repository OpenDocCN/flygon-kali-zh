- en: Zun – Container Management in OpenStack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zun - OpenStack中的容器管理
- en: In this chapter, we will learn about the OpenStack project for managing containers,
    Zun. Zun is the only solution available in OpenStack that allows its users to
    manage their application containers, backed by different technologies with the
    goodness of other OpenStack components such as Cinder, Glance, and Neutron. Zun
    provides a strong platform for running containerized applications on top of OpenStack
    IaaS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解用于管理容器的OpenStack项目Zun。Zun是OpenStack中唯一可用的解决方案，允许用户管理其应用程序容器，支持不同技术，并结合了其他OpenStack组件（如Cinder、Glance和Neutron）的优点。Zun为在OpenStack
    IaaS上运行容器化应用程序提供了强大的平台。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to Zun
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zun简介
- en: Concepts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概念
- en: Key features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键特性
- en: Components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: Walk-through
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演练
- en: Zun DevStack installation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zun DevStack安装
- en: Managing containers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理容器
- en: Introduction to Zun
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zun简介
- en: Zun is an OpenStack service started in the Mitaka cycle developed by the members
    of the Magnum team. A decision was made at the OpenStack Austin Summit in 2016
    to create a new project to allow for the management of containers and let the
    Magnum Container Infrastructure Management service manage only the infrastructure
    for running containers. The result was the Zun project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Zun是在Mitaka周期由Magnum团队成员开发的OpenStack服务。在2016年的OpenStack Austin Summit上做出了一个决定，创建一个新项目来允许管理容器，并让Magnum容器基础设施管理服务仅管理运行容器的基础设施。结果就是Zun项目。
- en: Zun is a container management service for OpenStack that provides APIs to manage
    containers abstracted by different technologies at the backend. Zun supports Docker
    as the container runtime tool. Today, Zun integrates with many OpenStack services
    such as Neutron for networking, Glance for managing container images, and Cinder
    for providing volume to the containers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Zun是OpenStack的容器管理服务，提供API来管理后端使用不同技术抽象的容器。Zun支持Docker作为容器运行时工具。目前，Zun与许多OpenStack服务集成，如用于网络的Neutron，用于管理容器镜像的Glance，以及为容器提供卷的Cinder。
- en: 'Zun has various add-ons over Docker, which makes it a powerful solution for
    container management. Here is a list of some of the salient features of Zun:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Zun相比Docker有各种附加功能，使其成为容器管理的强大解决方案。以下是Zun一些显著特点的列表：
- en: Provides a standard API for the complete life cycle management of containers
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为容器的完整生命周期管理提供标准API
- en: Provides KeyStone-based multi-tenant security and auth management
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供基于KeyStone的多租户安全性和认证管理
- en: Supports Docker with runc and clear container for managing containers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持使用runc和clear container管理容器的Docker
- en: The support of clear container provides higher security by packing an individual
    container in a VM with a small footprint
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将单个容器打包到具有小占地面积的虚拟机中，支持clear container提供更高的安全性
- en: Supports Cinder to provide volume for containers
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Cinder为容器提供卷
- en: Kuryr-based networking for container-level isolation
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Kuryr的容器级隔离网络
- en: Supports container orchestration via Heat
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Heat支持容器编排
- en: Container composition known as capsules lets user run multiple containers with
    related resources as a single unit
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器组合，称为capsules，允许用户将多个具有相关资源的容器作为单个单元运行
- en: Supports the SR-IOV feature that enables the sharing of a physical PCIe device
    to be shared across VMs and containers
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持SR-IOV功能，可实现将物理PCIe设备跨虚拟机和容器共享
- en: Supports interactive sessions with containers
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持与容器进行交互式会话
- en: Zun allows users to run heavy workloads with dedicated resources by exposing
    CPU sets
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zun允许用户通过暴露CPU集来运行具有专用资源的重型工作负载。
- en: Concepts
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念
- en: In the following sections, we will look at the various objects available in
    the Zun system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看看Zun系统中可用的各种对象。
- en: Containers
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: The container is the most important resource in Zun. A container in Zun represents
    any application container run by the users. A container object stores information
    such as the image, command, workdir, host, and so on. Zun is an extendable solution;
    it can support other container runtime tools as well. It has a driver-based implementation
    for each tool. The Docker driver in Zun manages containers via Docker. Containers
    in Zun support many advanced operations including CRUD operations such as create,
    start, stop, pause, delete, update, kill, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Zun中，容器是最重要的资源。Zun中的容器代表用户运行的任何应用程序容器。容器对象存储信息，如镜像、命令、工作目录、主机等。Zun是一个可扩展的解决方案；它也可以支持其他容器运行时工具。它为每个工具实现了基于驱动程序的实现。Zun中的Docker驱动程序通过Docker管理容器。Zun中的容器支持许多高级操作，包括CRUD操作，如创建、启动、停止、暂停、删除、更新、终止等。
- en: Images
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像
- en: Images in Zun are container images. These images are managed either by Docker
    Hub or Glance. Users can download the image and save them to Glance prior to container
    creation to save time. An image object stores information such as the image name,
    tag, size, and so on. Operations supported for images are upload, download, update,
    and search images.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Zun中的镜像是容器镜像。这些镜像由Docker Hub或Glance管理。用户可以在创建容器之前下载镜像并将其保存到Glance以节省时间。镜像对象存储信息，如镜像名称、标签、大小等。支持的操作包括上传、下载、更新和搜索镜像。
- en: Services
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: A service in Zun represents the `zun-compute` service. Zun can have multiple
    instances of `zun-compute` services running to support scalability. This object
    is used to establish the state of the compute services running in the Zun cluster.
    A service stores information such as the state, enabled or disabled, last known
    time, and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Zun中的服务代表`zun-compute`服务。Zun可以运行多个`zun-compute`服务实例以支持可伸缩性。该对象用于建立在Zun集群中运行的计算服务的状态。服务存储信息，如状态、启用或禁用、上次已知时间等。
- en: Hosts
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机
- en: A host in Zun represents the compute node's resources. The compute node is the
    physical machine where the containers run. This is used to establish the list
    of available, used resources in Zun. A host object in Zun stores useful information
    about a compute node such as total memory, free memory, total number of running,
    stopped, or paused containers, total CPUs, free CPUs, and so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Zun中的主机代表计算节点的资源。计算节点是容器运行的物理机器。这用于建立Zun中可用资源和已使用资源的列表。Zun中的主机对象存储有关计算节点的有用信息，如总内存、空闲内存、运行、停止或暂停容器的总数、总CPU、空闲CPU等。
- en: Capsules
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 胶囊
- en: A capsule in Zun represents a composition unit which contains multiple containers
    and other related resources. Containers in a capsule share resources among themselves
    and are tightly coupled to work together as a single unit. A capsule object stores
    information such as the container list, CPU, memory, and so on.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Zun中的胶囊代表包含多个容器和其他相关资源的组合单元。胶囊中的容器彼此共享资源，并紧密耦合以作为单个单元一起工作。胶囊对象存储信息，如容器列表、CPU、内存等。
- en: Container drivers
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器驱动程序
- en: Zun is designed to be an extendable solution for managing containers on top
    of OpenStack. Zun supports Docker to manage containers. It aims to support multiple
    other tools in the future as well, such as Rocket. To support this, Zun has a
    collection of container drivers, which can be implemented with many other runtime
    tools and made available as solutions with Zun. Users can choose to manage their
    containers with their choice of tool.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Zun旨在成为OpenStack顶部容器管理的可扩展解决方案。Zun支持Docker来管理容器。它还旨在未来支持多种其他工具，如Rocket。为了支持这一点，Zun有一系列容器驱动程序，可以与许多其他运行时工具实现，并作为Zun的解决方案提供。用户可以选择使用他们选择的工具来管理他们的容器。
- en: Image drivers
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像驱动程序
- en: We have learned that Zun can support multiple container runtime tools to manage
    containers. Similarly, it supports multiple image drivers for the managing of
    container images such as Glance driver and Docker driver. The image driver is
    also configurable; users can choose any of the available solutions for their use
    case.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解到Zun可以支持多个容器运行时工具来管理容器。同样，它支持多个镜像驱动程序来管理容器镜像，如Glance驱动程序和Docker驱动程序。镜像驱动程序也是可配置的；用户可以根据其用例选择任何可用的解决方案。
- en: Network drivers
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络驱动程序
- en: The ability to communicate between two containers and between a container and
    VM is provided by the network driver in Zun. Zun has a Kuryr driver for managing
    all of the network resources for containers. It supports operations such as creating
    and deleting a network, connecting to and disconnecting a container from a network,
    and so on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Zun中的网络驱动程序提供了两个容器之间以及容器与虚拟机之间的通信能力。Zun有一个Kuryr驱动程序来管理所有容器的网络资源。它支持创建和删除网络、连接和断开容器与网络的连接等操作。
- en: Key features
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键特性
- en: Zun has many advanced features in addition to the basic management of containers.
    In this section, we will talk about some of the advanced features present in Zun.
    There are many other features in progress, such as SRIOV networking, PCIe devices,
    and so on, which are referred to in the Zun documentation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Zun除了基本的容器管理之外，还具有许多高级功能。在本节中，我们将讨论Zun中的一些高级功能。还有许多其他功能正在进行中，例如SRIOV网络、PCIe设备等，这些在Zun文档中有所提及。
- en: Cinder integration
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cinder集成
- en: Zun supports the attaching of persistent storage to the containers which exist
    even after the container exits. This storage can be used to store large amounts
    of data outside the host, which is more reliable if the host goes down. This support
    is enabled in Zun via Cinder. Users can mount and unmount Cinder volumes to their
    containers. The users first need to create the volume in Cinder and then provide
    the volume while creating the container.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Zun支持将持久存储附加到容器中，即使容器退出后仍然存在。这种存储可以用来存储大量数据，超出主机范围，如果主机宕机，这种存储更加可靠。这种支持是通过Cinder在Zun中实现的。用户可以挂载和卸载Cinder卷到他们的容器中。用户首先需要在Cinder中创建卷，然后在创建容器时提供卷。
- en: Container composition
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器组合
- en: Zun supports the creation of multiple containers as a single unit. This unit
    is known as a capsule in Zun. This concept is very similar to pods in Kubernetes.
    A capsule contains multiple containers and all of the related resources such as
    network and storage, tightly coupled. All of the containers in a capsule are scheduled
    on the same host and share resources such as the Linux namespaces, CGroups, and
    so on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Zun支持将多个容器作为单个单元创建。这个单元在Zun中被称为capsule。这个概念与Kubernetes中的pod非常相似。一个capsule包含多个容器和所有相关的资源，如网络和存储，紧密耦合。capsule中的所有容器都被调度到同一主机上，并共享资源，如Linux命名空间、CGroups等。
- en: Kuryr networking
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kuryr网络
- en: A container created by Zun can interact with the VMs created by Nova. This feature
    is provided by `Kuryr-libnetwork`. It interacts with Neutron to create the necessary
    network resources for the container and provides a communication path for other
    OpenStack resources.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Zun创建的容器可以与Nova创建的虚拟机进行交互。这一功能由`Kuryr-libnetwork`提供。它与Neutron进行交互，为容器创建必要的网络资源，并为其他OpenStack资源提供通信路径。
- en: Container sandbox
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器沙盒
- en: Zun has a collection of sandbox containers. A sandbox is a container that has
    all of the IaaS resources associated with it, such as ports, IP addresses, volumes,
    and so on. The aim of the sandbox is to decouple the overhead of managing these
    IaaS resources from the application containers. A sandbox can manage single or
    multiple containers and provide all of the needed resources.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Zun有一系列沙盒容器。沙盒是一个具有与之关联的所有IaaS资源的容器，例如端口，IP地址，卷等。沙盒的目的是将管理这些IaaS资源的开销与应用容器分离。沙盒可以管理单个或多个容器，并提供所有所需的资源。
- en: CPU sets
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CPU集
- en: Zun allows its users to run a high-performance container with dedicated resources.
    Zun exposes its host capabilities to the users, and users can specify the required
    CPU while creating a container.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Zun允许用户运行具有专用资源的高性能容器。 Zun向用户公开其主机功能，用户可以在创建容器时指定所需的CPU。
- en: The scheduler filters a node with the available resource and provisions the
    container on that node. The host information is updated in the database to reflect
    the updated resources.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 调度程序会筛选具有可用资源的节点，并在该节点上为容器提供资源。主机信息将在数据库中更新，以反映更新后的资源。
- en: Components
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: 'The diagram in the *Zun WebSocket proxy* section shows the architecture of
    Zun. Zun has two binaries: `zun-api` and `zun-compute`. These two services together
    carry the whole life cycle of container management of containers. These services
    interact with other OpenStack services such as Glance for the container images,
    Cinder for providing volume to the containers, and Neutron for the connectivity
    between containers and the outside world. The request for containers is finally
    communicated to the Docker services running on the compute node. Docker then creates
    the container for the users.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '* Zun WebSocket代理 *部分中的图表显示了Zun的架构。 Zun有两个二进制文件：`zun-api`和`zun-compute`。这两个服务共同承载容器管理的整个生命周期。这些服务与其他OpenStack服务进行交互，例如Glance用于容器图像，Cinder用于为容器提供卷，Neutron用于容器与外部世界之间的连接。对容器的请求最终传达给在计算节点上运行的Docker服务。然后Docker为用户创建容器。'
- en: zun-api
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: zun-api
- en: '`zun-api` is a WSGI server that serves the users'' API requests. For every
    resource in Zun, there are separate handlers:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`zun-api`是一个WSGI服务器，用于为用户的API请求提供服务。对于Zun中的每个资源，都有单独的处理程序：'
- en: Container
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器
- en: Host
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机
- en: Images
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像
- en: Zun services
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zun服务
- en: Each of the controllers handle a request for specific resources. They validate
    the request for permissions, validate the OpenStack resources including validating
    if the image is present in Docker Hub or Glance, and create a DB object for the
    resource with the input data. The request is forwarded to the compute manager.
    Upon receiving a response from the `zun-compute` service, the `zun-api` service
    returns the response to the user.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控制器处理特定资源的请求。它们验证权限请求，验证OpenStack资源，包括验证图像是否存在于Docker Hub或Glance，并为具有输入数据的资源创建DB对象。请求将转发给计算管理器。在从`zun-compute`服务接收到响应后，`zun-api`服务将响应返回给用户。
- en: Zun scheduler
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zun调度程序
- en: The scheduler in Zun is not an RPC service. It is a simple Python class which
    applies a filter on the compute nodes and picks up the appropriate node for serving
    the request. The compute manager then passes the request to the selected `zun-compute`
    via an RPC call. The call to `zun-compute` can be synchronous or asynchronous
    depending on the processing time taken by each of the operations. For example,
    the list calls can be synchronous as they are not time-consuming, whereas the
    create requests can be asynchronous.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Zun中的调度程序不是RPC服务。它是一个简单的Python类，对计算节点应用过滤器，并选择适当的节点来处理请求。然后，计算管理器通过RPC调用将请求传递给所选的`zun-compute`。对`zun-compute`的调用可以是同步或异步的，具体取决于每个操作所花费的处理时间。例如，列表调用可以是同步的，因为它们不耗时，而创建请求可以是异步的。
- en: zun-compute
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: zun-compute
- en: The `zun-compute` service is the main component of the Zun system. It performs
    most of the backend operations, hiding all the complexities. `zun-compute` selects
    an appropriate driver for serving each request and creates the related resources
    for containers, such as network resources. It then passes the request to the driver
    with all the required information. `zun-compute` talks to multiple projects for
    various resources such as Glance for the container images and Neutron for the
    network resources.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`zun-compute`服务是Zun系统的主要组件。它执行大部分后端操作，隐藏了所有复杂性。`zun-compute`为每个请求选择适当的驱动程序，并为容器创建相关资源，如网络资源。然后，它将带有所有必要信息的请求传递给驱动程序。`zun-compute`与多个项目进行交流，获取各种资源，例如从Glance获取容器镜像，从Neutron获取网络资源。'
- en: Zun WebSocket proxy
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zun WebSocket代理
- en: 'Zun has a WebSocket proxy service for running containers in interactive mode.
    This service establishes a secure connection with the container to run any commands
    inside it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Zun具有用于以交互模式运行容器的WebSocket代理服务。该服务与容器建立安全连接，以在其中运行任何命令：
- en: '![](../images/00021.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00021.jpeg)'
- en: Walk-through
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Walk-through
- en: In this section, we will walk you through how a container is created in Zun
    and how the request flows from the user to the Docker which creates the container.
    Zun interacts with multiple other OpenStack services for resources needed for
    the container.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为您介绍在Zun中如何创建容器以及用户请求如何从用户传递到创建容器的Docker。Zun与其他多个OpenStack服务进行交互，以获取容器所需的资源。
- en: 'The request flow for creating a container in Zun is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Zun中创建容器的请求流程如下：
- en: The user sends a REST API call to the `zun-api` service for creating a cluster
    via a CLI or Horizon, with the authentication token received from KeyStone.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户通过CLI或Horizon向`zun-api`服务发送REST API调用以创建集群，并使用从KeyStone接收的身份验证令牌。
- en: '`zun-api` receives the request and sends the request for the validation of
    token and access permission to KeyStone.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-api`接收请求，并向KeyStone发送令牌和访问权限的验证请求。'
- en: KeyStone validates the token and sends updated authentications headers with
    roles and permissions.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KeyStone验证令牌，并发送带有角色和权限的更新身份验证标头。
- en: '`zun-api` then parses some parameters from the request, such as the security
    group, memory, and runtime, and validates them.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-api`然后从请求中解析一些参数，例如安全组、内存和运行时，并对其进行验证。'
- en: The requested network is created by `zun-api`. `zun-api` sends a request to
    Neutron to ensure the requested network or port is usable. If not, `zun-api` sends
    another request to Neutron to search the available network and creates a new Docker
    network for the container.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-api`创建了请求的网络。`zun-api`向Neutron发送请求，以确保请求的网络或端口可用。如果不可用，`zun-api`将向Neutron发送另一个请求，以搜索可用网络并为容器创建新的Docker网络。'
- en: '`zun-api` then checks whether the requested image is available or not. If the
    image is not found, the request fails with `400` HTTP status.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-api`然后检查请求的镜像是否可用。如果未找到镜像，则请求将以`400` HTTP状态失败。'
- en: '`zun-api` generates a name for the container if not provided in the request.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果请求中未提供容器的名称，`zun-api`会为容器生成一个名称。
- en: '`zun-api` then creates a database object for the container.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`zun-api`为容器创建数据库对象。
- en: '`zun-api` sends the request to the compute API manager. The compute manager
    looks for the destination compute node from the scheduler.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-api`将请求发送到计算API管理器。计算管理器从调度程序中查找目标计算节点。'
- en: '`zun-api` then sends the RPC asynchronous call request to `zun-compute`, selected
    in the previous step, to process the request further.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`zun-api`将异步调用请求发送到在上一步中选择的`zun-compute`以进一步处理请求。
- en: '`zun-compute` picks the request from the message queue.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-compute`从消息队列中获取请求。'
- en: '`zun-compute` sets the `task_state` of the container to `IMAGE_PULLING` and
    stores the entry in the database.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-compute`将容器的`task_state`设置为`IMAGE_PULLING`并将条目存储在数据库中。'
- en: '`zun-compute` calls the image driver to download the image.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`zun-compute`调用图像驱动程序下载图像。'
- en: After the image is downloaded successfully, the `task_state` is now set to `CONTAINER_CREATING`
    in the database.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功下载图像后，数据库中的`task_state`现在设置为`CONTAINER_CREATING`。
- en: Now, `zun-compute` claims the resources required for the container and updates
    the compute node resource table with the required information.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`zun-compute`声明容器所需的资源，并更新计算节点资源表中的所需信息。
- en: Finally, the request to the Docker is sent to create the container with all
    of the required parameters.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，向Docker发送请求以使用所有必需的参数创建容器。
- en: The Docker driver creates the container, sets the status to `CREATED` and `status_reason`
    to `None`, and saves the container object in the database.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker驱动程序创建容器，将状态设置为`CREATED`，`status_reason`设置为`None`，并将容器对象保存在数据库中。
- en: The `task_state` is set to `None` upon successful completion of the container.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器成功完成后，`task_state`设置为`None`。
- en: There are periodic tasks in Zun which sync the container status in the Zun database
    at a specific time interval.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Zun中有定期任务，在特定时间间隔内同步Zun数据库中的容器状态。
- en: Zun DevStack installation
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zun DevStack安装
- en: 'We will now look at how to install a development setup of Zun using DevStack:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看看如何使用DevStack安装Zun的开发设置：
- en: 'Create a root directory for DevStack if needed:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如有需要，创建DevStack的根目录：
- en: '[PRE0]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To clone DevStack repository, do the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要克隆DevStack存储库，请执行以下操作：
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, create a minimal `local.conf` for running the DevStack setup. We will
    enable the following plugins to create a Zun setup:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个最小的`local.conf`来运行DevStack设置。我们将启用以下插件来创建Zun设置：
- en: '`devstack-plugin-container`: This plugin installs Docker'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devstack-plugin-container`：此插件安装Docker'
- en: '`kuryr-libnetwork`: This is the Docker libnetwork driver that uses Neutron
    to provide networking services'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kuryr-libnetwork`：这是使用Neutron提供网络服务的Docker libnetwork驱动程序'
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, run DevStack:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行DevStack：
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a new shell and source the DevStack `openrc` script to use Zun CLI:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的shell并源自DevStack `openrc`脚本以使用Zun CLI：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s verify the Zun installation by looking at the service list:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过查看服务列表来验证Zun的安装：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s look at the host-list, which also shows the compute nodes being registered
    for use in Zun:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下主机列表，其中还显示了在Zun中注册供使用的计算节点：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can see that we have one compute node, which is the host machine itself.
    Now, let''s also look at the available resources in the host:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有一个计算节点，即主机本身。现在，让我们也看看主机中可用的资源：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can see that the `zun-compute` service is running. The current setup only
    installs one compute service; you can install a multi-node Zun setup also. Please
    refer to [https://github.com/openstack/zun/blob/master/doc/source/contributor/quickstart.rst](https://github.com/openstack/zun/blob/master/doc/source/contributor/quickstart.rst)
    for more details.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`zun-compute`服务正在运行。当前设置只安装了一个计算服务；您也可以安装多节点Zun设置。请参考[https://github.com/openstack/zun/blob/master/doc/source/contributor/quickstart.rst](https://github.com/openstack/zun/blob/master/doc/source/contributor/quickstart.rst)
    获取更多详细信息。
- en: Managing containers
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理容器
- en: Now that we have a Zun setup running, we will try to do some operations on containers
    in this section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个运行中的Zun设置，我们将在本节尝试对容器进行一些操作。
- en: 'We will now create a container in Zun. But before that, let''s check the Docker
    status:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在Zun中创建一个容器。但在此之前，让我们检查一下Docker的状态：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can see that no container exists now. Now, let''s create the container:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到现在没有容器存在。现在，让我们创建容器：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s look at the Zun list to check the container status:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们查看Zun列表以检查容器状态：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can see that the container is in a creating state. Let''s check the container
    in Docker as well:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到容器处于创建状态。让我们也在Docker中检查一下容器：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s start the container and look at the logs:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动容器并查看日志：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s do some advanced operations with the container. We will now create an
    interactive container with Zun:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对容器进行一些高级操作。我们现在将使用Zun创建一个交互式容器：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s delete the container:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们删除容器：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will now look at some commands to see how images are managed in Zun. Download
    an Ubuntu image:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将查看一些命令，以了解在Zun中如何管理镜像。下载一个Ubuntu镜像：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s look at the list of images in Zun now:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下Zun中的镜像列表：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the OpenStack container management service,
    Zun. We looked into the different objects in Zun. Then, we also learned about
    the components and the architecture of Zun. The chapter also provided a detailed
    overview of the workflow of a user request to manage containers in Zun. Then,
    we looked at how to install a development setup in Zun using DevStack, and we
    did a hands-on exercise using Zun CLI to create a container and start and stop
    various other operations on containers. In the next chapter, we will learn about
    Kuryr, which provides the networking resources to containers using Neutron.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了OpenStack容器管理服务Zun。我们深入研究了Zun中的不同对象。然后，我们还了解了Zun的组件和架构。本章还详细介绍了用户请求在Zun中管理容器的工作流程。然后，我们看了如何使用DevStack在Zun中安装开发设置，并使用Zun
    CLI进行了实际操作，创建了一个容器，并对容器进行了启动和停止等其他操作。在下一章中，我们将学习Kuryr，它使用Neutron为容器提供网络资源。
