- en: Chapter 15. Handling Data and Generating Random Numbers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。处理数据和生成随机数
- en: We are making good progress. We have a rounded knowledge of both the Android
    UI options and the basics of Kotlin. In the previous few chapters, we started
    bringing these two areas together and we manipulated the UI, including some new
    widgets, using Kotlin code. However, while building the Note to self app, we have
    stumbled upon a couple of blanks in our knowledge. In this chapter, we will fill
    in the first of these blanks, and then, in the next chapter, we will use this
    new information to progress with the app. We currently have no way of managing
    large amounts of related data. Aside from declaring, initializing, and managing
    dozens, hundreds, or even thousands of properties or instances, how will we let
    the users of our app have more than one note? We will also take a quick diversion
    to learn about random numbers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取得了很好的进展。我们对Android UI选项和Kotlin的基础知识有了一个全面的了解。在前几章中，我们开始将这两个领域结合起来，并使用Kotlin代码操作UI，包括一些新的小部件。然而，在构建自我备忘录应用程序时，我们在知识上遇到了一些空白。在本章中，我们将填补这些空白中的第一个，然后在下一章中，我们将使用这些新信息来继续应用程序。我们目前没有办法管理大量相关数据。除了声明、初始化和管理数十、数百甚至数千个属性或实例之外，我们如何让我们的应用程序用户拥有多个备忘录？我们还将快速了解一下随机数。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Random numbers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机数
- en: Arrays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: A simple array mini-app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的数组迷你应用
- en: A dynamic array mini-app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个动态数组迷你应用
- en: Ranges
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围
- en: ArrayLists
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArrayLists
- en: Hashmaps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希映射
- en: First, let's learn about the `Random` class.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们了解一下`Random`类。
- en: A random diversion
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个随机的转移
- en: Sometimes, we will want a random number in our apps and, for these occasions,
    Kotlin provides us with the `Random` class. There are many possible uses for this
    class, such as if our app wants to show a random tip-of-the-day, or a game that
    has to choose between scenarios, or a quiz that asks random questions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们会在我们的应用程序中需要一个随机数，对于这些情况，Kotlin为我们提供了`Random`类。这个类有很多可能的用途，比如如果我们的应用程序想要显示每日随机提示，或者一个需要在不同场景之间选择的游戏，或者一个随机提问的测验。
- en: The `Random` class is part of the Android API and is fully compatible in our
    Android apps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Random`类是Android API的一部分，在我们的Android应用程序中完全兼容。'
- en: 'Let''s take a look at how to create random numbers. All the hard work is done
    for us by the `Random` class. First, we need to create a `Random` object, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建随机数。`Random`类已经为我们做好了所有的工作。首先，我们需要创建一个`Random`对象，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we use our new object''s `nextInt` function to generate a random number
    between a certain range. The following line of code generates the random number
    using our `randGenerator` object and stores the result in the `ourRandomNumber`
    variable:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用我们新对象的`nextInt`函数来生成一个在某个范围内的随机数。以下代码行使用我们的`randGenerator`对象生成随机数，并将结果存储在`ourRandomNumber`变量中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The number that we enter for the range starts from zero. So, the preceding
    line will generate a random number between 0 and 9\. If we want a random number
    between 1 and 10, we just add the increment operator on the end of the same line
    of code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入的范围开始于零。因此，前一行将生成一个在0和9之间的随机数。如果我们想要一个在1和10之间的随机数，我们只需在同一行的代码末尾添加增量运算符：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can also use the `Random` object to obtain other types of random numbers
    using `nextLong`, `nextFloat`, and `nextDouble`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`Random`对象使用`nextLong`、`nextFloat`和`nextDouble`获取其他类型的随机数。
- en: Handling large amounts of data with arrays
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数组处理大量数据
- en: 'You might be wondering what happens when we have an app with lots of variables
    to keep track of. What about our Note to self app with 100 notes, or a high-score
    table in a game with the top 100 scores? We can declare and initialize 100 separate
    variables as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想知道当我们有很多变量需要跟踪时会发生什么。我们的自我备忘录应用程序有100条备忘录，或者游戏中的高分榜有前100名的分数？我们可以声明和初始化100个单独的变量，如下所示：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or, by using the high scores example we might use something like the following
    code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，通过使用高分示例，我们可以使用以下代码：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Immediately, this code can seem unwieldy, but what about when someone gets
    a new top score, or if we want to let our users sort the order that their notes
    are displayed in? Using the high scores scenario, we must shift the scores in
    every variable down one place. This is the beginning of a nightmare, as shown
    in the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，这段代码可能看起来笨拙，但是当有人获得新的最高分，或者我们想让我们的用户排序他们的备忘录显示顺序时，会怎样？使用高分榜场景，我们必须将每个变量中的分数向下移动一个位置。这是一个噩梦的开始，如下代码所示：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There must be a better way of doing this. When we have a whole array of variables,
    what we need is a Kotlin **array**. An array is an object that holds up to a predetermined,
    fixed-maximum number of elements. Each element is a variable with a consistent
    type.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 肯定有更好的方法。当我们有一整个数组的变量时，我们需要的是一个Kotlin **数组**。数组是一个对象，最多可以容纳预定的固定最大数量的元素。每个元素都是一个具有一致类型的变量。
- en: 'The following code declares an array that can hold `Int` type variables; such
    as a high-score table or a series of exam grades:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码声明了一个可以容纳`Int`类型变量的数组；例如高分榜或一系列考试成绩：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can also declare arrays of other types, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以声明其他类型的数组，如下所示：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each of these arrays will need to have a fixed-maximum amount of allocated
    storage space before it is used. Just as we have done with other objects, we must
    initialize arrays before we use them, and we can do so as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这些数组之前，每个数组都需要有一个固定的最大分配存储空间。就像我们对其他对象所做的那样，我们必须在使用数组之前对其进行初始化，我们可以这样做：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code allocates up to a maximum of `100` storage spaces of the
    appropriate type. Think of a long aisle of 100 consecutive storage spaces in our
    variable warehouse. The spaces will probably be labeled `myIntArray[0]`, `myIntArray[1]`,
    and `myIntArray[2]`, with each space holding a single `Int` value. The slightly
    surprising thing here is that the storage spaces start off at zero, not 1\. Therefore,
    in a 100-*wide* array, the storage spaces will run from 0 to 99\.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码分配了最多`100`个适当类型的存储空间。想象一下，我们的变量仓库中有100个连续的存储空间。这些空间可能被标记为`myIntArray[0]`，`myIntArray[1]`和`myIntArray[2]`，每个空间都包含一个`Int`值。这里稍微令人惊讶的是，存储空间从零开始，而不是1。因此，在一个100宽的数组中，存储空间将从0到99。
- en: 'We can initialize some of these storage spaces as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以初始化一些存储空间如下：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, note that we can only ever put the predeclared type into an array
    and that the type that an array holds can never change, as demonstrated in the
    following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请注意，我们只能将预声明的类型放入数组中，并且数组保存的类型永远不会改变，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So, when we have an array of `Int` types, what are each of these `Int` variables
    called and how do we access the values stored in them? The array notation syntax
    replaces the name of the variable. Additionally, we can do anything with a variable
    in an array that we can do with a regular variable with a name; this is demonstrated
    as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们有一个`Int`类型的数组时，每个`Int`变量被称为什么，我们如何访问其中存储的值？数组表示法语法替换了变量的名称。此外，我们可以对数组中的变量进行与常规变量相同的操作；如下所示：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code assigns the value 123 to the 4th position in the array.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将值123分配给数组中的第4个位置。
- en: 'Here is another example of using an array just like a normal variable:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用数组的另一个示例，就像使用普通变量一样：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding code subtracts the value stored in the 5th position of the array
    from the value stored in the 10th position of the array and assigns the answer
    to the 11th position of the array.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码从数组的第5个位置中减去数组的第10个位置中存储的值，并将答案赋给数组的第11个位置。
- en: 'We can also assign the value from an array to a regular variable of the same
    type, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将数组中的值赋给相同类型的常规变量，如下所示：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note, however, that `myNamedInt` is a separate and distinct variable and any
    changes to it do not affect the value that is stored in the `IntArray` reference.
    It has its own space in the warehouse and is otherwise unconnected to the array.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请注意，`myNamedInt`是一个独立的变量，对它的任何更改都不会影响存储在`IntArray`引用中的值。它在仓库中有自己的空间，与数组没有其他联系。
- en: 'In the previous examples, we did not examine any Strings or objects. Strings,
    in fact, are objects and when we want to make arrays of objects, we deal with
    them slightly differently; take a look at the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们没有检查任何字符串或对象。实际上，字符串是对象，当我们想要创建对象数组时，我们会稍微不同地处理它们；看一下下面的代码：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code declares an array of String objects that can hold up to five
    objects. Remember that arrays start from 0, so the valid positions are 0 to 4
    inclusively. If you attempt to use an invalid position, you will get an **ArrayIndexOutOfBoundsException**
    error. If the compiler notices the error, then the code will not compile; however,
    if the compiler cannot spot the error and it happens while the app is executing,
    then the app will crash.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码声明了一个String对象数组，最多可以容纳五个对象。请记住，数组从0开始，因此有效的位置是从0到4。如果尝试使用无效的位置，则会收到**ArrayIndexOutOfBoundsException**错误。如果编译器注意到错误，则代码将无法编译；但是，如果编译器无法发现错误，并且在应用程序执行时发生错误，则应用程序将崩溃。
- en: The only way we can avoid this problem is to know the rule – that arrays start
    at 0 and go up to their length minus 1\. So `someArray[9]` is the tenth position
    in the array. We can also use clear readable code where it is easy to evaluate
    what we have done and spot problems more easily.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以避免这个问题的唯一方法是知道规则-数组从0开始，直到它们的长度减1。因此，`someArray[9]`是数组中的第十个位置。我们还可以使用清晰易读的代码，这样更容易评估我们所做的事情并更容易发现问题。
- en: 'You can also initialize the contents of an array at the same time as declaring
    the array, as shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在声明数组的同时初始化数组的内容，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code uses the `arrayOf` built-in Kotlin function to initialize
    the array.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用内置的Kotlin函数`arrayOf`来初始化数组。
- en: The ways in which you can declare and initialize arrays are extremely flexible
    in Kotlin. We are not close to covering all the ways in which we can use arrays
    and, even by the end of the book, we still won't have covered everything. Let's
    dig a little deeper, however.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，您可以声明和初始化数组的方式非常灵活。我们还没有接近覆盖我们可以使用数组的所有方式，即使在书的最后，我们仍然不会覆盖所有内容。然而，让我们深入一点。
- en: Arrays are objects
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组是对象
- en: Think of an array variable as an address to a group of variables of a given
    type. For instance, using a warehouse analogy, `someArray` can be an aisle number.
    So, `someArray[0]` and `someArray[1]` are the aisle numbers followed by the position
    number in the aisle.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组变量视为给定类型的一组变量的地址。例如，使用仓库类比，`someArray`可以是过道编号。因此，`someArray[0]`和`someArray[1]`是过道编号，后跟过道中的位置编号。
- en: 'Because arrays are also objects, they have functions and properties that we
    can use, as can be seen in the following example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因为数组也是对象，它们具有我们可以使用的函数和属性，如下面的示例所示：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, we assigned the length (that is, size) of `someArray`
    to the `Int` variable called `howBig`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将`someArray`的长度（即大小）分配给名为`howBig`的`Int`变量。
- en: 'We can even declare an array of arrays. This is an array where another array
    lurks in each of its positions; this is shown as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以声明一个数组的数组。这是一个数组，其中每个位置都隐藏着另一个数组；如下所示：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding `Log` code will output the following text to the logcat window:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`Log`代码将在logcat窗口中输出以下文本：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let's use some arrays in a real app to try and gain an understanding of how
    to use them in real code and what they might be used for.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一个真实的应用程序中使用一些数组，试着理解如何在真实代码中使用它们以及它们可能被用来做什么。
- en: A simple mini-app array example
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的迷你应用程序数组示例
- en: Let's make a simple working array example. You can get the completed code for
    this project in the downloadable code bundle. It can be found in the `Chapter15/Simple
    Array Example/MainActivity.kt` file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个简单的工作数组示例。您可以在可下载的代码包中找到此项目的完整代码。它可以在`Chapter15/Simple Array Example/MainActivity.kt`文件中找到。
- en: Create a project with an **Empty Activity** project template and call it `Simple
    Array Example`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个**Empty Activity**项目模板的项目，并将其命名为`Simple Array Example`。
- en: First, we declare our array, allocate five spaces, and initialize values to
    each of the elements. Then, we output each of the values to the **logcat** window.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明我们的数组，分配了五个空间，并为每个元素初始化了值。然后，我们将每个值输出到**logcat**窗口。
- en: This is slightly different to the earlier examples that we have seen because
    we declare the size at the same time as we declare the array itself.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前看到的例子略有不同，因为我们在声明数组的同时声明了大小。
- en: 'Add the following code to the `onCreate` function just after the call to `setContentView`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setContentView`调用后的`onCreate`函数中添加以下代码：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we add each of the elements of the array together, just as we do with
    ordinary `Int` type variables. Notice that when we add the array elements together,
    we are doing so over multiple lines for clarity. Add the code that we have just
    discussed to `MainActivity.kt`, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将数组的每个元素相加，就像我们对普通的`Int`类型变量一样。请注意，当我们将数组元素相加时，我们为了清晰起见在多行上这样做。将我们刚刚讨论的代码添加到`MainActivity.kt`中，如下所示：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the example and note the output in the logcat window. Remember that nothing
    will happen on the emulator display as all the output will be sent to the logcat
    window in Android Studio; here is the output:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例，并注意logcat窗口中的输出。请记住，在模拟器显示上不会发生任何事情，因为所有输出都将发送到Android Studio中的logcat窗口；以下是输出：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We declare an array called `ourArray` to hold `Int` values, and then allocate
    space for up to five values of that type.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明一个名为`ourArray`的数组来保存`Int`值，然后为该类型的最多五个值分配空间。
- en: Next, we assign a value to each of the five spaces in `ourArray`. Remember that
    the first space is `ourArray[0]`, and the last space is `ourArray[4]`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为`ourArray`的五个空间分配一个值。记住第一个空间是`ourArray[0]`，最后一个空间是`ourArray[4]`。
- en: Next, we simply print the value in each array location to the logcat window
    and, from the output, we can see they hold the value that we initialized them
    to be in the previous step. Then, we add together each of the elements in `ourArray`
    and initialize their value to the `answer` variable. We then print `answer` to
    the logcat window and we can see that indeed, all the values are added together
    as though they are ordinary `Int` types (which they are), just stored in a different
    manner.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们简单地将每个数组位置的值打印到logcat窗口中，从输出中我们可以看到它们保存了我们在上一步中初始化的值。然后，我们将`ourArray`中的每个元素相加，并将它们的值初始化为`answer`变量。然后，我们将`answer`打印到logcat窗口中，我们可以看到确实，所有的值都被相加在一起，就像它们是普通的`Int`类型一样（它们确实是），只是以不同的方式存储。
- en: Getting dynamic with arrays
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数组进行动态操作
- en: As we discussed at the beginning of this section, if we need to declare and
    initialize each element of an array individually, there isn't a huge benefit to
    using an array over regular variables. Let's take a look at an example of declaring
    and initializing arrays dynamically.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本节开头讨论的，如果我们需要单独声明和初始化数组的每个元素，那么使用数组并没有比使用普通变量带来很大的好处。让我们看一个动态声明和初始化数组的例子。
- en: A dynamic array example
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态数组示例
- en: You can get the working project for this example in the download bundle. It
    can be found in the `Chapter15/Dynamic Array Example/MainActivity.kt` file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下载包中找到此示例的工作项目。它可以在`Chapter15/Dynamic Array Example/MainActivity.kt`文件中找到。
- en: Create a project with an **Empty Activity** template and call it `Dynamic Array
    Example`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个**Empty Activity**模板的项目，并将其命名为`Dynamic Array Example`。
- en: 'Type the following code just after the call to `setContentView` in the `onCreate`
    function. See if you can work out what the output will be before we discuss and
    analyze the code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreate`函数中的`setContentView`调用后，输入以下代码。在我们讨论和分析代码之前，看看你能否猜出输出结果是什么：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the example app. Remember that nothing will happen on screen as all the
    output will be sent to our logcat window in Android Studio; here is the output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例应用程序。请记住，屏幕上不会发生任何事情，因为所有输出都将发送到我们在Android Studio中的logcat窗口；以下是输出：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '994 iterations of the loop have been removed for the sake of brevity:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，循环的994次迭代已被删除：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'First, we declared and allocated an array called `ourArray` to hold up to 1,000
    `Int` values. Notice that this time, we performed the two steps in a single line
    of code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明并分配了一个名为`ourArray`的数组，以保存最多1,000个`Int`值。请注意，这次我们在一行代码中执行了两个步骤：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we used a `for` loop that was set to loop 1,000 times:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用了一个设置为循环1,000次的`for`循环：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We initialized the spaces in the array, from 0 to 999, with the value of `i`
    multiplied by 5, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化数组中的空间，从0到999，其值为`i`乘以5，如下所示：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, to demonstrate the value of `i` and the value held in each position of
    the array, we output the value of `i` followed by the value held in the corresponding
    position in the array, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了演示`i`的值以及数组中每个位置的值，我们输出`i`的值，然后是数组对应位置的值，如下所示：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: All this happened 1,000 times, producing the output that we have seen. Of course,
    we have yet to use this technique in a real-world app, but we will use it soon
    to make our Note to self app hold an almost infinite number of notes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都发生了1,000次，产生了我们所看到的输出。当然，我们还没有在真实的应用程序中使用这种技术，但我们很快将使用它来使我们的自我备忘录应用程序保存几乎无限数量的备忘录。
- en: ArrayLists
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArrayLists
- en: An `ArrayList` object is like a normal array, but on steroids. It overcomes
    some of the shortfalls of arrays, such as having to predetermine its size. It
    adds several useful functions to make its data easy to manage and it is used by
    many classes in the Android API. This last point means that we need to use `ArrayList`
    if we want to use certain parts of the API. In [Chapter 16](ch16.html "Chapter 16. Adapters
    and Recyclers"), *Adapters and Recyclers*, we will put `ArrayList` to work for
    real. First the theory.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArrayList`对象就像普通数组，但功能更强大。它克服了数组的一些缺点，比如必须预先确定其大小。它添加了几个有用的函数来使其数据易于管理，并被Android
    API中的许多类使用。这最后一点意味着如果我们想要使用API的某些部分，我们需要使用`ArrayList`。在[第16章](ch16.html "第16章。适配器和回收器")中，*适配器和回收器*，我们将真正地让`ArrayList`发挥作用。首先是理论。'
- en: 'Let''s take a look at some code that uses `ArrayList`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些使用`ArrayList`的代码：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the preceding code, we declared and initialized a new `ArrayList` object
    called `myList`. We can also do this in a single step, as demonstrated by the
    following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们声明并初始化了一个名为`myList`的新`ArrayList`对象。我们也可以在一步中完成这个操作，就像下面的代码所示：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'So far, this is not particularly interesting, so let''s take a look at what
    we can actually do with `ArrayList`. Let''s use a `String ArrayList` object this
    time:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这并不特别有趣，所以让我们看看我们实际上可以用`ArrayList`做些什么。这次我们使用一个`String ArrayList`对象：
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the previous code, we saw that we can use some useful functions of the `ArrayList`
    class on our `ArrayList` object; these functions are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们看到我们可以在`ArrayList`对象上使用`ArrayList`类的一些有用的函数；这些函数如下：
- en: We can add an item (`myList.add`)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以添加一个条目（`myList.add`）
- en: We can add an entry at a specific location (`myList.add(x, value)`)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在特定位置添加一个条目（`myList.add(x, value)`）
- en: We can check whether the `ArrayList` instance is empty (`myList.isEmpty ()`)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以检查`ArrayList`实例是否为空（`myList.isEmpty()`）
- en: We can see how big the `ArrayList` instance is (`myList.size`)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以看到`ArrayList`实例的大小（`myList.size`）
- en: We can get the current position of a given item (`myList.indexOf...`)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以获取给定条目的当前位置（`myList.indexOf...`）
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are even more functions in the `ArrayList` class, but what we have seen
    so far is enough to complete this book.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArrayList`类中甚至有更多的函数，但是到目前为止我们已经看到的足以完成这本书了。'
- en: 'With all this functionality, all we need now is a way to handle `ArrayList`
    instances dynamically. This is what the condition of an enhanced `for` loop looks
    like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有了所有这些功能，我们现在只需要一种方法来动态处理`ArrayList`实例。这就是增强`for`循环的条件的样子：
- en: '[PRE32]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The previous example will iterate (step through) all the items in `myList` one
    at a time. At each step, `s` will hold the current `String` entry.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子将逐个遍历`myList`中的所有项目。在每一步中，`s`将保存当前的`String`条目。
- en: 'So, this code will print all of our eminent programmers from the previous section''s
    `ArrayList` code sample to the logcat window, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这段代码将把我们上一节`ArrayList`代码示例中的所有杰出程序员打印到logcat窗口中，如下所示：
- en: '[PRE33]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The way that this works is that the `for` loop iterates through each `String`
    in the `ArrayList` and assigns the current `String` entry to `s`. Then, for each
    in turn, `s` is used in the `Log…` function call. The previous loop will create
    the following output to the logcat window:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是`for`循环遍历`ArrayList`中的每个`String`，并将当前的`String`条目分配给`s`。然后，依次对每个`s`使用`Log…`函数调用。前面的循环将在logcat窗口中创建以下输出：
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `for` loop has output all the names. The reason that Richard Stallman is
    in between Donald Knuth and Rasmus Lerdof is because we inserted him at a specific
    position, (1), which is the second position in the `ArrayList`. An `insert` function
    call does not delete any existing entries but shifts their position instead.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环已经输出了所有的名字。Richard Stallman之所以在Donald Knuth和Rasmus Lerdof之间是因为我们在特定位置（1）插入了他，这是`ArrayList`中的第二个位置。`insert`函数调用不会删除任何现有的条目，而是改变它们的位置。'
- en: There's an incoming news flash!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个新的新闻快讯！
- en: Arrays and ArrayLists are polymorphic
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组和ArrayLists是多态的
- en: We already know that we can put objects into arrays and `ArrayList` objects.
    However, being polymorphic means that they can handle objects of multiple distinct
    types as long as they have a common parent type – all within the same array or
    `ArrayList`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道我们可以将对象放入数组和`ArrayList`对象中。然而，多态意味着它们可以处理多个不同类型的对象，只要它们有一个共同的父类型 - 都在同一个数组或`ArrayList`中。
- en: In [Chapter 10, Object-Oriented Programming,](ch10.html "Chapter 10. Object-Oriented
    Programming") we learned that polymorphism means many forms. But what does it
    mean to us in the context of arrays and `ArrayList`?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章，面向对象编程](ch10.html "第10章。面向对象编程")中，我们学到多态意味着多种形式。但在数组和`ArrayList`的上下文中，对我们意味着什么呢？
- en: In its simplest form, it means that any subclass can be used as part of the
    code that uses the super-class.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最简单的形式中，它意味着任何子类都可以作为使用超类的代码的一部分。
- en: For example, if we have an array of `Animals`, we can put any object that is
    a subclass of `Animal` in the `Animals` array, such as `Cat` and `Dog`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个`Animals`数组，我们可以把任何`Animal`子类对象放在`Animals`数组中，比如`Cat`和`Dog`。
- en: 'This means we can write code that is simpler, easier to understand, and easier
    to change:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以编写更简单、更易于理解和更易于更改的代码：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Also, we can write code for the super-class and rely on the fact that no matter
    how many times it is subclassed, within certain parameters, the code will still
    work. Let''s continue our previous example as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以为超类编写代码，并依赖于这样一个事实，即无论它被子类化多少次，在一定的参数范围内，代码仍然可以工作。让我们继续我们之前的例子如下：
- en: '[PRE36]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: All that we have just discussed is true for `ArrayLists` as well.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚讨论的一切对于`ArrayLists`也是真实的。
- en: Hashmaps
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希映射
- en: Kotlin `HashMap`s are interesting; they are a type of cousin to `ArrayList`.
    They encapsulate useful data storage techniques that would otherwise be quite
    technical for us to code successfully ourselves. It is worth looking at `HashMap`
    before getting back to the Note to self app.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin的`HashMap`很有趣；它们是`ArrayList`的一种表亲。它们封装了一些有用的数据存储技术，否则对我们来说可能会相当技术性。在回到自己的笔记应用之前，值得看一看`HashMap`。
- en: Suppose that we want to store the data of lots of characters from a role-playing
    game and each different character is represented by an object of the `Character`
    type.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要存储角色扮演游戏中许多角色的数据，每个不同的角色由`Character`类型的对象表示。
- en: We could use some of the Kotlin tools that we already know about, such as arrays
    or `ArrayList`. However, with `HashMap`, we can give a unique key or identifier
    to each `Character` object, and access any such object using that same key or
    identifier.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一些我们已经了解的Kotlin工具，比如数组或`ArrayList`。然而，使用`HashMap`，我们可以为每个`Character`对象提供一个唯一的键或标识符，并使用相同的键或标识符访问任何这样的对象。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The term "hash" comes from the process of turning our chosen key or identifier
    into something used internally by the `HashMap` class. The process is called **hashing**.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '"哈希"一词来自于将我们选择的键或标识符转换为`HashMap`类内部使用的东西的过程。这个过程被称为**哈希**。'
- en: Any of our `Character` instances can then be accessed with our chosen key or
    identifier. A good candidate for a key or identifier in the `Character` class
    scenario is the character's name.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的键或标识符可以访问任何`Character`实例。在`Character`类的情况下，一个好的键或标识符候选者是角色的名字。
- en: Each key or identifier has a corresponding object; in this case, of the `Character`
    instance. This is known as a **key-value pair**.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个键或标识符都有一个相应的对象；在这种情况下，是`Character`实例。这被称为**键值对**。
- en: We simply give `HashMap` a key and it gives us the corresponding object. There
    is no need to worry about which index we stored our characters, such as Geralt,
    Ciri, or Triss; simply pass the name to `HashMap` and it will do the work for
    us.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需给`HashMap`一个键，它就会给我们相应的对象。我们不需要担心我们存储了角色的哪个索引，比如Geralt、Ciri或Triss；只需将名字传递给`HashMap`，它就会为我们完成工作。
- en: Let's take a look at some examples. You don't need to type any of this code;
    simply get familiar with how it works.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子。你不需要输入任何代码；只需熟悉它的工作原理。
- en: 'We can declare a new `HashMap` instance to hold keys and `Character` instances
    like as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以声明一个新的`HashMap`实例来保存键和`Character`实例，如下所示：
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The previous code assumes that we have coded a class called `Character`. We
    can then initialize the `HashMap` instance as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码假设我们已经编写了一个名为`Character`的类。然后我们可以初始化`HashMap`实例如下：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can then add a new key and its associated object as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以添加一个新的键及其关联的对象，如下所示：
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tip
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: All the example code assumes that we can somehow give the `Character` instances
    their unique properties to reflect their internal differences elsewhere.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例代码都假设我们可以以某种方式给`Character`实例赋予它们的唯一属性，以反映它们在其他地方的内部差异。
- en: 'We can then retrieve an entry from the `HashMap` instance as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以按如下方式从`HashMap`实例中检索条目：
- en: '[PRE40]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Alternatively, we can use the `Character` class''s functions directly:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以直接使用`Character`类的函数：
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The previous code calls the hypothetical `drawSilverSword` and `openFastTravelPortal`
    functions on the `Character` class instance stored in the `HashMap` instance.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码调用了假设的`drawSilverSword`和`openFastTravelPortal`函数，这些函数是存储在`HashMap`实例中的`Character`类实例的假设函数。
- en: Armed with this new toolkit of arrays, `ArrayList`, `HashMap`, and the fact
    that they are polymorphic, we can move on to learn about some more Android classes
    that we will soon use to enhance our Note to self app.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些新的工具包，如数组、`ArrayList`、`HashMap`，以及它们的多态性，我们可以继续学习一些更多的Android类，很快我们将用它们来增强我们的备忘录应用。
- en: The Note to self app
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备忘录应用
- en: Despite all we have learned, we are not quite ready to apply a solution to the
    Note to self app. We could update our code to store lots of `Note` instances in
    an `ArrayList`, but before we do, we also need a way to display the contents of
    our `ArrayList` in the UI. It won't look good to throw the whole thing in a `TextView`
    instance.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经学到了很多，但我们还没有准备好将解决方案应用到备忘录应用中。我们可以更新我们的代码，将大量的`Note`实例存储在`ArrayList`中，但在这之前，我们还需要一种方法来在UI中显示`ArrayList`的内容。把整个东西放在`TextView`实例中看起来不好。
- en: The solution is **adapters**, and a special UI layout called `RecyclerView`.
    We will get to them in the next chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 答：解决方案是**适配器**和一个名为`RecyclerView`的特殊UI布局。我们将在下一章中介绍它们。
- en: Frequently asked questions
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Q) How can a computer that can only make real calculations possibly generate
    a genuinely random number?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 问：一个只能进行真实计算的计算机如何可能生成真正的随机数？
- en: 'A) In reality, a computer cannot create a number that is truly random, but
    the `Random` class uses a **seed** that produces a number that will stand up as
    genuinely random under close statistical scrutiny. To find out more about seeds
    and generating random numbers, look at the following article: [https://en.wikipedia.org/wiki/Random_number_generation](https://en.wikipedia.org/wiki/Random_number_generation).'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 问：实际上，计算机无法创建真正随机的数字，但`Random`类使用一个**种子**，产生一个在严格的统计检验下被认为是真正随机的数字。要了解更多关于种子和生成随机数的信息，请查看以下文章：[https://en.wikipedia.org/wiki/Random_number_generation](https://en.wikipedia.org/wiki/Random_number_generation)。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to use simple Kotlin arrays to store substantial
    amounts of data provided that it is of the same type. We also used `ArrayList`,
    which is like an array with lots of extra features. Furthermore, we discovered
    that both arrays and `ArrayList` are polymorphic, which means that a single array
    (or `ArrayList`) can hold multiple different objects as long as they are all derived
    from the same parent class.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何使用简单的Kotlin数组来存储大量数据，只要它们是相同类型的数据。我们还使用了`ArrayList`，它类似于一个带有许多额外功能的数组。此外，我们发现数组和`ArrayList`都是多态的，这意味着一个数组（或`ArrayList`）可以容纳多个不同的对象，只要它们都是从同一个父类派生的。
- en: We also learned about the `HashMap` class, which is also a data storage solution,
    but which allows access in different ways.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解了`HashMap`类，它也是一种数据存储解决方案，但允许以不同的方式访问。
- en: In the next chapter, we will learn about `Adapter` and `RecyclerView` to put
    the theory into practice and enhance our Note to self app.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于`Adapter`和`RecyclerView`，将理论付诸实践，并增强我们的备忘录应用。
