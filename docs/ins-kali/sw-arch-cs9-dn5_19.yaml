- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Using Tools to Write Better Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工具编写更好的代码
- en: As we saw in *Chapter 17*, *Best Practices in Coding C# 9*, coding can be considered
    an art, but writing understandable code is surely more like philosophy. In that
    chapter, we discussed practices that you, as a software architect, need to observe
    for your developers. In this chapter, we will describe the techniques and tools
    for code analysis, so that you have well-written code for your projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*第17章*中看到的，*C# 9编码的最佳实践*，编码可以被视为一种艺术，但编写易懂的代码更像是哲学。在那一章中，我们讨论了作为软件架构师需要遵守的实践。在本章中，我们将描述代码分析的技术和工具，以便您为项目编写出良好的代码。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Identifying well-written code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别写得好的代码
- en: Understanding the tools that can be used in the process to make things easier
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解可以在过程中使用的工具，以使事情变得更容易
- en: Applying extension tools to analyze code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用扩展工具来分析代码
- en: Checking the final code after analysis
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分析后检查最终代码
- en: Use case—Implementing code inspection before publishing the application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例——在发布应用程序之前实施代码检查
- en: By the end of the chapter, you will be able to define which tools you are going
    to incorporate into your software development life cycle in order to facilitate
    code analysis.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够确定要将哪些工具纳入软件开发生命周期，以便简化代码分析。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires the Visual Studio 2019 free Community Edition or better.
    You will find the sample code for this chapter at [https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5/tree/master/ch19](https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5/tree/master/ch19).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要使用Visual Studio 2019免费的Community Edition或更高版本。您可以在[https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5/tree/master/ch19](https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5/tree/master/ch19)找到本章的示例代码。
- en: Identifying well-written code
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别写得好的代码
- en: It is not easy to define whether code is well-written. The best practices described
    in *Chapter 17*, *Best Practices in Coding C# 9*, can certainly guide you as a
    software architect to define a standard for your team. But even with a standard,
    mistakes will happen, and you will probably find them only after the code is in
    production. The decision to refactor code in production just because it does not
    follow all the standards you define is not an easy one to take, especially if
    the code in question is working properly. Some people conclude that well-written
    code is simply code that works well in production. However, this can surely cause
    damage to the software's life since developers can be inspired by that non-standard
    code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 很难定义代码是否写得好。*第17章*中描述的最佳实践肯定可以指导您作为软件架构师为团队定义标准。但即使有了标准，错误也会发生，而且您可能只会在代码投入生产后才发现它们。因为代码不符合您定义的所有标准而决定在生产中重构代码并不是一个容易的决定，特别是如果涉及的代码正常运行。有些人得出结论，写得好的代码就是在生产中正常运行的代码。然而，这肯定会对软件的生命周期造成损害，因为开发人员可能会受到那些非标准代码的启发。
- en: For this reason, you – as a software architect – need to find ways to enforce
    adherence to the coding standard you've defined. Luckily, nowadays, we have many
    options for tools that can help us with this task. They are regarded as the automation
    of static code analysis. This technique is seen as a great opportunity to improve
    the software developed and to help developers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为软件架构师，您需要找到方法来强制执行您定义的编码标准。幸运的是，如今我们有许多工具可以帮助我们完成这项任务。它们被视为静态代码分析的自动化。这种技术被视为改进开发的软件和帮助开发人员的重大机会。
- en: The reason your developers will evolve with code analysis is that you start
    to disseminate knowledge between them during code inspections. The tools that
    we have now have the same purpose. Better than that, with Roslyn, they do this
    task while you are writing the code. Roslyn is the compiler platform for .NET,
    and it enables you to develop some tools for analyzing code. These analyzers can
    check style, quality, design, and other issues.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您的开发人员将通过代码分析而进步的原因是，您开始在代码检查期间在他们之间传播知识。我们现在拥有的工具也有同样的目的。更好的是，通过Roslyn，它们可以在您编写代码时执行此任务。Roslyn是.NET的编译器平台，它使您能够开发一些用于分析代码的工具。这些分析器可以检查样式、质量、设计和其他问题。
- en: 'For instance, look at the following code. It does not make any sense, but you
    can still see that there are some mistakes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看下面的代码。它毫无意义，但您仍然可以看到其中存在一些错误：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The idea of this code is to show you the power of some tools to improve the
    code you are delivering. Let us study each of them in the next section, including
    how to set them up.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的目的是向您展示一些工具的威力，以改进您正在交付的代码。让我们在下一节中研究每一个工具，包括如何设置它们。
- en: Understanding and applying tools that can evaluate C# code
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和应用可以评估C#代码的工具
- en: The evolution of code analysis in Visual Studio is continuous. This means that
    Visual Studio 2019 certainly has more tools for this purpose than Visual Studio
    2017, and so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中代码分析的演变是持续的。这意味着Visual Studio 2019肯定比Visual Studio 2017等版本具有更多用于此目的的工具。
- en: 'One of the issues that you (as a software architect) need to deal with is the
    *coding style of the team*. This certainly results in a better understanding of
    the code. For instance, if you go to **Visual Studio Menu**, **Tools->Options**,
    and then, in the left-hand menu, you go to **Text Editor -> C#**, you will find
    ways to set up how to deal with different code style patterns, and a bad coding
    style is even indicated as an error in the **Code Style** option, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您（作为软件架构师）需要处理的问题之一是*团队的编码风格*。这肯定会导致对代码的更好理解。例如，如果您转到**Visual Studio菜单**，**工具->选项**，然后在左侧菜单中转到**文本编辑器->C#**，您将找到设置如何处理不同代码样式模式的方法，而糟糕的编码风格甚至被指定为**代码样式**选项中的错误，如下所示：
- en: '![](img/B16756_19_01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_01.png)'
- en: 'Figure 19.1: Code Style options'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1：代码样式选项
- en: The preceding screenshot suggests that **Avoid unused parameters** was considered
    an error.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图表明**避免未使用的参数**被视为错误。
- en: 'After this change, the result of the compilation of the same code presented
    at the beginning of the chapter is different, as you can see in the following
    screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种改变之后，与本章开头呈现的相同代码的编译结果是不同的，您可以在以下截图中看到：
- en: '![](img/B16756_19_02.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_02.png)'
- en: 'Figure 19.2: Code Style result'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.2：代码样式结果
- en: You can export your coding style configuration and attach it to your project
    so that it will follow the rules you have defined.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以导出您的编码样式配置并将其附加到您的项目，以便它遵循您定义的规则。
- en: 'Another good tool that Visual Studio 2019 provides is **Analyze and Code Cleanup**.
    With this tool, you can set up some code standards that can clean up your code.
    For instance, in the following screenshot, it was set to remove unnecessary code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2019提供的另一个好工具是**分析和代码清理**。使用此工具，您可以设置一些代码标准，以清理您的代码。例如，在下面的截图中，它被设置为删除不必要的代码：
- en: '![](img/B16756_19_03.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_03.png)'
- en: 'Figure 19.3: Configure Code Cleanup'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.3：配置代码清理
- en: 'The way you run code cleanup is by selecting it with the help of a right-click
    in the **Solution Explorer** area, over the project where you want to run it.
    After that, this process will run in all the code files you have:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码清理的方法是通过在**解决方案资源管理器**区域中右键单击选择它，然后在要运行它的项目上运行。之后，此过程将在您拥有的所有代码文件中运行：
- en: '![](img/B16756_19_04.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_04.png)'
- en: 'Figure 19.4: Run Code Cleanup'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.4：运行代码清理
- en: 'After solving the errors indicated by the Code Style and Code Cleanup tools,
    the sample code we are working on has some minimal simplifications, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决了代码样式和代码清理工具指示的错误之后，我们正在处理的示例代码有一些最小的简化，如下所示：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is worth mentioning that the preceding code has many improvements that still
    need to be addressed. Visual Studio enables you to add additional tools for the
    IDE by installing extensions to it. These tools can help you to improve your code
    quality, since some of them were built to perform code analysis. This section
    will list some free options so that you can decide the one that best fits your
    needs. There are certainly other options and even paid ones. The idea here is
    not to indicate a specific tool but to give you an idea of their abilities.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，前面的代码有许多改进仍需要解决。Visual Studio允许您通过安装扩展来为IDE添加附加工具。这些工具可以帮助您提高代码质量，因为其中一些是为执行代码分析而构建的。本节将列出一些免费选项，以便您可以决定最适合您需求的选项。当然还有其他选项，甚至是付费选项。这里的想法不是指示特定的工具，而是给您一个对它们能力的概念。
- en: 'To install these extensions, you will need to find the **Extensions** menu
    in Visual Studio 2019\. Here is a screenshot of the **Manage Extensions** option:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这些扩展，您需要在Visual Studio 2019中找到**扩展**菜单。以下是**管理扩展**选项的截图：
- en: '![](img/B16756_19_05.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_05.png)'
- en: 'Figure 19.5: Extensions in Visual Studio 2019'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.5：Visual Studio 2019中的扩展
- en: There are many other cool extensions that can improve the productivity and quality
    of your code and solution. Do a search for them in this manager.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他很酷的扩展可以提高您的代码和解决方案的生产力和质量。在此管理器中搜索它们。
- en: After you have selected the extension that will be installed, you will need
    to restart Visual Studio. Most of them are easy to identify after installation
    since they modify the behavior of the IDE. Among them, Microsoft Code Analysis
    2019 and SonarLint for Visual Studio 2019 can be considered good ones, and they
    will be discussed in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要安装的扩展后，您需要重新启动Visual Studio。大多数扩展在安装后很容易识别，因为它们修改了IDE的行为。其中，Microsoft Code
    Analysis 2019和SonarLint for Visual Studio 2019可以被认为是不错的工具，并将在下一节中讨论。
- en: Applying extension tools to analyze code
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用扩展工具来分析代码
- en: 'Although the sample code delivered after the Code Style and Code Cleanup tools
    is better than the code we presented at the beginning of the chapter, it is clearly
    far removed from the best practices discussed in *Chapter 17*, *Best Practices
    in Coding C# 9*. In the next sections, you will be able to check the behavior
    of two extensions that can help you evolve this code: Microsoft Code Analysis
    2019, and SonarLint for Visual Studio 2019.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在代码样式和代码清理工具之后交付的示例代码比我们在本章开头呈现的代码要好，但显然远远不及*第17章*中讨论的最佳实践。在接下来的章节中，您将能够检查两个扩展的行为，这些扩展可以帮助您改进这段代码：Microsoft
    Code Analysis 2019和SonarLint for Visual Studio 2019。
- en: Using Microsoft Code Analysis 2019
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Microsoft Code Analysis 2019
- en: This extension is provided by Microsoft DevLabs and is an upgrade to the FxCop
    rules that we used to automate in the past. It can also be added to a project
    as a NuGet package, so it can become a part of the application CI build. Basically,
    it has more than 100 rules for detecting problems in the code as you type it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展由Microsoft DevLabs提供，是对我们过去自动化的FxCop规则的升级。它也可以作为NuGet包添加到项目中，因此可以成为应用程序CI构建的一部分。基本上，它有超过100个规则，用于在您输入代码时检测代码中的问题。
- en: 'For instance, just by enabling the extension and rebuilding the small sample
    we are using in this chapter, Code Analysis found a new issue to solve, as you
    can see in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，仅通过启用扩展并重新构建我们在本章中使用的小样本，代码分析就发现了一个新的问题需要解决，如下截图所示：
- en: '![](img/B16756_19_06.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_06.png)'
- en: 'Figure 19.6: Code Analysis usage'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.6：代码分析用法
- en: It is worth mentioning that we discussed the usage of empty `try-catch` statements
    as an anti-pattern in *Chapter 17*, *Best Practices in Coding C# 9*. So, it would
    be good for the health of the code if this kind of problem could be exposed in
    this way.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，我们在*第17章*中讨论了空的`try-catch`语句的使用作为反模式。因此，如果能以这种方式暴露这种问题，对代码的健康将是有益的。
- en: Applying SonarLint for Visual Studio 2019
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用SonarLint for Visual Studio 2019
- en: 'SonarLint is an open source initiative from the Sonar Source community to detect
    bugs and quality issues while you code. There is support for C#, VB.NET, C, C++,
    and JavaScript. The great thing about this extension is that it comes with explanations
    for resolving detected issues, and that is why we say developers learn how to
    code well while using these tools. Check out the following screenshot with the
    analysis undertaken in the sample code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SonarLint是Sonar Source社区的开源倡议，用于在编码时检测错误和质量问题。它支持C#、VB.NET、C、C++和JavaScript。这个扩展的好处是它提供了解决检测到的问题的解释，这就是为什么我们说开发人员在使用这些工具时学会了如何编写良好的代码。查看以下屏幕截图，其中包含对样本代码进行的分析：
- en: '![](img/B16756_19_07.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_07.png)'
- en: 'Figure 19.7: SonarLint usage'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.7：SonarLint使用
- en: We can verify that this extension is able to point out mistakes and, as promised,
    there is an explanation for each warning. This is useful not only for detecting
    problems, but also for training developers in good coding practices.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证此扩展能够指出错误，并且如承诺的那样，对每个警告都有解释。这不仅有助于检测问题，还有助于培训开发人员掌握良好的编码实践。
- en: Checking the final code after analysis
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在分析后检查最终代码
- en: 'Following the analysis of the two extensions, we have finally solved all the
    issues presented. We can check the final code, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析了两个扩展之后，我们终于解决了所有出现的问题。我们可以检查最终代码，如下所示：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the preceding code is not only easier to understand, but it
    is safer and is able to consider different paths of programming since the default
    for `switch-case` was programmed. This pattern was discussed in *Chapter 17*,
    *Best Practices in Coding C# 9*, too, which concludes that best practices can
    be easily followed by using one (or all) of the extensions mentioned in this chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，前面的代码不仅更容易理解，而且更安全，并且能够考虑编程的不同路径，因为`switch-case`的默认值已经编程。这种模式也在*第17章*
    *C# 9编码最佳实践*中讨论过，因此可以轻松地通过使用本章中提到的一个（或全部）扩展来遵循最佳实践。
- en: Use case – Evaluating C# code before publishing an application
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例-在发布应用程序之前评估C#代码
- en: In *Chapter 3*, *Documenting Requirements with Azure DevOps*, we created the
    WWTravelClub repository in the platform. As we saw there, Azure DevOps enables
    continuous integration, and this can be useful. In this section, we will discuss
    more reasons as to why the DevOps concept and the Azure DevOps platform are so
    useful.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3章* *使用Azure DevOps记录需求*中，我们在平台上创建了WWTravelClub存储库。正如我们在那里看到的，Azure DevOps支持持续集成，这可能很有用。在本节中，我们将讨论DevOps概念和Azure
    DevOps平台之所以如此有用的更多原因。
- en: For now, the only thing we would like to introduce is the possibility of analyzing
    code after it is committed by the developers, but has not yet been published.
    Nowadays, in a SaaS world for application life cycle tools, this is only possible
    thanks to some of the SaaS code analysis platforms that we have. This use case
    will use Sonar Cloud.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们想介绍的唯一一件事是，在开发人员提交代码后，但尚未发布时分析代码的可能性。如今，在面向应用程序生命周期工具的SaaS世界中，这仅仅是由于我们拥有一些SaaS代码分析平台才可能实现的。此用例将使用Sonar
    Cloud。
- en: 'Sonar Cloud is free for open source code and can analyze code stored in GitHub,
    Bitbucket, and Azure DevOps. The user needs a registration for these platforms.
    As soon as you log in, assuming your code is stored in Azure DevOps, you can follow
    the steps described in the following article to create the connection between
    your Azure DevOps and Sonar Cloud: [https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Sonar Cloud对于开源代码是免费的，并且可以分析存储在GitHub、Bitbucket和Azure DevOps中的代码。用户需要在这些平台上注册。一旦您登录，假设您的代码存储在Azure
    DevOps中，您可以按照以下文章中描述的步骤创建您的Azure DevOps和Sonar Cloud之间的连接：[https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)。
- en: 'After setting up the connection between your project in Azure DevOps and Sonar
    Cloud, you will have a build pipeline like the one that follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置Azure DevOps中项目与Sonar Cloud之间的连接后，您将拥有一个类似以下的构建管道：
- en: '![](img/B16756_19_08.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_08.png)'
- en: 'Figure 19.8: Sonar Cloud configuration in the Azure build pipeline'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.8：Azure构建管道中的Sonar Cloud配置
- en: 'It is worth mentioning that C# projects do not have a GUID number, and this
    is required by Sonar Cloud. You can easily generate one using this link ([https://www.guidgenerator.com/](https://www.guidgenerator.com/)),
    and it will need to be placed as in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，C#项目没有GUID号码，而Sonar Cloud需要这个。您可以使用此链接（[https://www.guidgenerator.com/](https://www.guidgenerator.com/)）轻松生成一个，并且需要将其放置在以下屏幕截图中：
- en: '![](img/B16756_19_09.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_09.png)'
- en: 'Figure 19.9: SonarQube project GUID'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.9：SonarQube项目GUID
- en: 'As soon as you finish the build, the result of the code analysis will be presented
    in Sonar Cloud, as can be seen in the following screenshot. If you want to navigate
    down to this project, you can visit [https://sonarcloud.io/dashboard?id=WWTravelClubNet50](https://sonarcloud.io/dashboard?id=WWTravelClubNet50):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，代码分析的结果将在Sonar Cloud中呈现，如下屏幕截图所示。如果您想浏览此项目，可以访问[https://sonarcloud.io/dashboard?id=WWTravelClubNet50](https://sonarcloud.io/dashboard?id=WWTravelClubNet50)：
- en: '![](img/B16756_19_10.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_19_10.png)'
- en: 'Figure 19.10: Sonar Cloud results'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.10：Sonar Cloud结果
- en: Also, by this time, the code analyzed is not yet in the release, so this can
    be really useful for getting the next step of quality before releasing your system.
    You can use this approach as a reference for automating code analysis during committal.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，经过分析的代码尚未发布，因此在发布系统之前，这对于获得下一个质量步骤非常有用。您可以将此方法用作在提交期间自动化代码分析的参考。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter presented tools that can be used to apply the best practices of
    coding described in *Chapter 17*, *Best Practices in Coding C# 9*. We looked at
    the Roslyn compiler, which enables code analysis at the same time the developer
    is coding, and we looked at a use case, evaluating C# code prior to publishing
    an application, which implements code analysis during the Azure DevOps building
    process using Sonar Cloud.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了可以用来应用*C# 9编码最佳实践*中描述的最佳编码实践的工具。我们看了Roslyn编译器，它使开发人员在编码的同时进行代码分析，并且我们看了一个用例，即在发布应用程序之前评估C#代码，该应用程序在Azure
    DevOps构建过程中实现代码分析使用Sonar Cloud。
- en: As soon as you apply everything you have learned in this chapter to your projects,
    the code analysis will give you the opportunity to improve the quality of the
    code you are delivering to your customer. This is a very important part of your
    role as a software architect.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将本章学到的一切应用到您的项目中，代码分析将为您提供改进您交付给客户的代码质量的机会。这是作为软件架构师角色中非常重要的一部分。
- en: In the next chapter, you will be deploying your application with Azure DevOps.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将使用Azure DevOps部署您的应用程序。
- en: Questions
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can software be described as well-written code?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件如何被描述为写得很好的代码？
- en: What is Roslyn?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Roslyn？
- en: What is code analysis?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是代码分析？
- en: What is the importance of code analysis?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码分析的重要性是什么？
- en: How does Roslyn help in code analysis?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Roslyn如何帮助进行代码分析？
- en: What are Visual Studio extensions?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Visual Studio扩展？
- en: What are the extension tools presented for code analysis?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为代码分析提供的扩展工具有哪些？
- en: Further reading
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are some websites where you will find more information on the topics
    covered in this chapter:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些网站，您将在其中找到有关本章涵盖的主题的更多信息：
- en: '[https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis20)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis20)'
- en: '[https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019)'
- en: '[https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers)'
- en: '[https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup](https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup](https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup)'
- en: '[https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)'
- en: '[https://www.guidgenerator.com/](https://www.guidgenerator.com/)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.guidgenerator.com/](https://www.guidgenerator.com/)'
