["```js\n yarn recommend\n```", "```js\n yarn retrain\n```", "```js\n...\n\u00a0\u00a0\u00a0\u00a0const nItem = (moviesDF[\"item_id\"]).max()\n\u00a0\u00a0\u00a0\u00a0const nUser = (moviesDF[\"user_id\"]).max()\n\u00a0\u00a0\u00a0\u00a0const moviesIdTrainTensor = (moviesDF[\"item_id\"]).tensor\n\u00a0\u00a0\u00a0\u00a0const userIdTrainTensor = (moviesDF[\"user_id\"]).tensor\n\u00a0\u00a0\u00a0\u00a0const targetData = (moviesDF[\"rating\"]).tensor\n\u00a0\u00a0\u00a0\u00a0return {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trainingData: [moviesIdTrainTensor, userIdTrainTensor],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0targetData,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nItem,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nUser\n\u00a0\u00a0\u00a0\u00a0}\n...\n```", "```js\n    ...\n    const itemInput = tf.layers.input({ name: \"itemInput\", shape: [1] })\n    const userInput = tf.layers.input({ name: \"userInput\", shape: [1] })\n    ...\n    ```", "```js\n    ...\n    const mergedOutput = tf.layers.dot({ axes: 0}).apply([itemEmbedding, userEmbedding])\n    const flatten = tf.layers.flatten().apply(mergedOutput)\n    const denseOut = tf.layers.dense({ units: 1, activation: \"sigmoid\", kernelInitializer: \"leCunUniform\" }).apply(flatten)\n    ...\n    ```", "```js\n    ...\n    const model = tf.model({ inputs: [itemInput, userInput],\u00a0\u00a0outputs: denseOut })\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0model.compile({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optimizer: tf.train.adam(LEARNING_RATE),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loss: tf.losses.meanSquaredError\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ...\n    ```", "```js\n...\nawait model.fit(trainingData, targetData, {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0batchSize: 128,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0epochs: 5,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0validationSplit: 0.1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0callbacks: {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onEpochEnd: async (epoch, logs) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const progressUpdate = `EPOCH (${epoch + 1}): Train MSE: ${Math.sqrt(logs.loss)}, Val MSE:\u00a0\u00a0${Math.sqrt(logs.val_loss)}\\n`\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(progressUpdate);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0});\n...\n```", "```js\n...\nawait model.save(`file://${path.join(__dirname, \"movie_recommendation_model\")}`)\n...\n```", "```js\nyarn train \n```", "```js\nnode train.js\n```", "```js\n    ...\n    const moviesDF = await dfd.read_csv(moviesDataPath)\n    const uniqueMoviesId = moviesDF[\"item_id\"].unique().values\n    const uniqueMoviesIdTensor = tf.tensor(uniqueMoviesId)\n    ...\n    ```", "```js\n    ...\n    const userToRecommendForTensor = tf.fill([uniqueMoviesIdTensor.shape[0]], userId)\n    ...\n    ```", "```js\n    ...\n    const model = await loadModel()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const ratings = model.predict([uniqueMoviesIdTensor,\n    \u00a0\u00a0\u00a0userToRecommendForTensor])\n    ...\n    ```", "```js\n    ...\n    const recommendationDf = new dfd.DataFrame({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0item_id: uniqueMoviesId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ratings: ratings.arraySync()\n    \u00a0\u00a0\u00a0\u00a0\u00a0})\n    ... \n    ```", "```js\n    ...\n    \u00a0\u00a0\u00a0\u00a0const topRecommendationsDF = recommendationDf\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.sort_values({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0by: \"ratings\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ascending: false\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.head(top) //return only the top rows\n    ...\n    ```", "```js\n    ...\n    const movieDetailsDF = await getMovieDetails(topRecommendationsDF[\"movie_id\"].values)\n    ...\n    ```", "```js\nrecommend(196, 10) // Recommend 10 movies for user with id 196\n```", "```js\n[\n\u00a0\u00a0'Remains of the Day, The (1993)',\n\u00a0\u00a0'Star Trek: First Contact (1996)',\n\u00a0\u00a0'Kolya (1996)',\n\u00a0\u00a0'Men in Black (1997)',\n\u00a0\u00a0'Hunt for Red October, The (1990)',\n\u00a0\u00a0'Sabrina (1995)',\n\u00a0\u00a0'L.A. Confidential (1997)',\n\u00a0\u00a0'Jackie Brown (1997)',\n\u00a0\u00a0'Grease (1978)',\n\u00a0\u00a0'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1963)'\n]\n```"]