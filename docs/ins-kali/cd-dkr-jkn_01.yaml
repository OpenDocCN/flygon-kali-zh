- en: Introducing Continuous Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍持续交付
- en: The common problem faced by most developers is how to release the implemented
    code quickly and safely. The delivery process used traditionally is, however,
    a source of pitfalls and usually leads to the disappointment of both developers
    and clients. This chapter presents the idea of the Continuous Delivery approach
    and provides the context for the rest of the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员面临的常见问题是如何快速而安全地发布已实施的代码。然而，传统上使用的交付流程是一个陷阱的来源，通常会导致开发人员和客户的失望。本章介绍了持续交付方法的概念，并为本书的其余部分提供了背景。
- en: 'This chapter covers the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下要点：
- en: Introducing the traditional delivery process and its drawbacks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍传统的交付流程及其缺点
- en: Describing the idea of Continuous Delivery and the benefits it brings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述持续交付的概念及其带来的好处
- en: Comparing how different companies deliver their software
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较不同公司如何交付其软件
- en: Explaining the automated deployment pipeline and its phases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释自动化部署流水线及其阶段
- en: Classifying different types of tests and their place in the process
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对不同类型的测试及其在流程中的位置进行分类
- en: Pointing out the prerequisites to the successful Continuous Delivery process
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指出成功的持续交付流程的先决条件
- en: Presenting tools that will be used throughout the book
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍本书中将使用的工具
- en: Showing the complete system that will be built throughout the book
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示本书中将构建的完整系统
- en: What is Continuous Delivery?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是持续交付？
- en: 'The most accurate definition of the Continuous Delivery is stated by Jez Humble
    and reads as follows: "Continuous Delivery is the ability to get changes of all
    types—including new features, configuration changes, bug fixes, and experiments—into
    production, or into the hands of users, safely and quickly in a sustainable way."
    That definition covers the key points.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付的最准确定义由Jez Humble提出，如下所述：“持续交付是能够以可持续的方式将各种类型的变更，包括新功能、配置变更、错误修复和实验，安全快速地投入生产或交付给用户的能力。”该定义涵盖了关键点。
- en: To understand it better, let's imagine a scenario. You are responsible for the
    product, let's say, the email client application. Users come to you with a new
    requirement—they want to sort emails by size. You decide that the development
    will take around one week. When can the user expect to use the feature? Usually,
    after the development is done, you hand over the completed feature first to the
    QA team and then to the operations team, which takes additional time ranging from
    days to months. Therefore, even though the development took only one week, the
    user receives it in a couple of months! The Continuous Delivery approach addresses
    that issue by automating manual tasks so that the user could receive a new feature
    as soon as it's implemented.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，让我们想象一个场景。你负责产品，比如说电子邮件客户端应用程序。用户向你提出一个新的需求——他们希望按大小对邮件进行排序。你决定开发需要大约一周的时间。用户可以在什么时候期待使用这个功能呢？通常，在开发完成后，你首先将已完成的功能交给质量保证团队，然后再交给运维团队，这需要额外的时间，从几天到几个月不等。因此，即使开发只花了一周的时间，用户也要在几个月后才能收到！持续交付方法通过自动化手动任务来解决这个问题，使用户能够在实施新功能后尽快收到。
- en: To present better what to automate and how, let's start by describing the delivery
    process that is currently used for most software systems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地展示要自动化的内容和方式，让我们从描述目前大多数软件系统使用的交付流程开始。
- en: The traditional delivery process
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统的交付流程
- en: The traditional delivery process, as the name suggests, has been in place for
    many years now and is implemented in most IT companies. Let's define how it works
    and comment on its shortcomings.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的交付流程，顾名思义，已经存在多年，并在大多数IT公司中实施。让我们定义一下它的工作原理，并评论其缺点。
- en: Introducing the traditional delivery process
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍传统交付过程
- en: 'Any delivery process begins with the requirements defined by a customer and
    ends up with the release on the production. The differences are in between. Traditionally,
    it looks as presented in the following release cycle diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 任何交付过程都始于客户定义的需求，并以在生产环境上发布结束。差异在于中间。传统上，它看起来如下发布周期图表所示：
- en: '![](assets/08f78945-6823-4b83-990b-109618b5dbbf.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/08f78945-6823-4b83-990b-109618b5dbbf.png)'
- en: 'The release cycle starts with the requirements provided by the **Product Owner**,
    who represents the **Customer** (stakeholders). Then there are three phases, during
    which the work is passed between different teams:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 发布周期始于**产品负责人**提供的需求，他代表**客户**（利益相关者）。然后有三个阶段，在这些阶段中，工作在不同的团队之间传递：
- en: '**Development**: Here, the developers (sometimes together with business analysts)
    work on the product. They often use Agile techniques (Scrum or Kanban) to increase
    the development velocity and to improve the communication with the client. Demo
    sessions are organized to obtain a customer''s quick feedback. All good development
    techniques (like test-driven development or extreme programming practices) are
    welcome. After the implementation is completed, the code is passed to the QA team.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发**：在这里，开发人员（有时与业务分析师一起）致力于产品。他们经常使用敏捷技术（Scrum或Kanban）来提高开发速度并改善与客户的沟通。演示会议被组织起来以获得客户的快速反馈。所有良好的开发技术（如测试驱动开发或极限编程实践）都受到欢迎。实施完成后，代码传递给质量保证团队。'
- en: '**Quality Assurance**: This phase is usually called **User Acceptance Testing**
    (**UAT**) and it requires a code freeze on the trunk codebase, so that no new
    development would break the tests. The QA team performs a suite of **Integration
    Testing**, **Acceptance Testing**, and **Non-functional Testing** (performance,
    recovery, security, and so on). Any bug that is detected goes back to the development
    team, so developers usually also have their hands full of work. After the UAT
    phase is completed, the QA team approves the features that are planned for the
    next release.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量保证**：这个阶段通常被称为**用户验收测试**（**UAT**），它需要对主干代码库进行代码冻结，以防止新的开发破坏测试。质量保证团队执行一系列**集成测试**，**验收测试**和**非功能测试**（性能，恢复，安全等）。检测到的任何错误都会返回给开发团队，因此开发人员通常也有很多工作要做。完成UAT阶段后，质量保证团队批准了下一个发布计划的功能。'
- en: '**Operations**: The last phase, usually the shortest one, means passing the
    code to the **Operations** team, so that they can perform the release and monitor
    the production. If anything goes wrong, they contact developers to help with the
    production system.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营**：最后一个阶段，通常是最短的一个阶段，意味着将代码传递给**运营**团队，以便他们可以执行发布并监控生产。如果出现任何问题，他们会联系开发人员帮助处理生产系统。'
- en: 'The length of the release cycle depends on the system and the organization,
    but it usually ranges from a week to a few months. The longest I''ve heard about
    was one year.The longest I worked with was quarterly-based and each part took
    as follows: development-1.5 months, UAT-1 month and 3 weeks, release (and strict
    production monitoring)-1 week.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 发布周期的长度取决于系统和组织，但通常范围从一周到几个月不等。我听说过最长的是一年。我工作过的最长周期是季度为基础，每个部分的时间分配如下：开发-1.5个月，UAT-1个月和3周，发布（严格的生产监控）-1周。
- en: The traditional delivery process is widely used in the IT industry and it's
    probably not the first time you've read about such an approach. Nevertheless,
    it has a number of drawbacks. Let's look at them explicity to understand why we
    need to strive for something better.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 传统交付过程在IT行业广泛使用，这可能不是你第一次读到这样的方法。尽管如此，它有许多缺点。让我们明确地看一下它们，以了解为什么我们需要努力追求更好的东西。
- en: Shortcomings of the traditional delivery process
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统交付过程的缺点
- en: 'The most significant shortcomings of the traditional delivery process include
    the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 传统交付过程的最显著缺点包括以下内容：
- en: '**Slow delivery**: Here, the customer receives the product long after the requirements
    were specified. It results in the unsatisfactory time to market and delays of
    the customer''s feedback.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交付速度慢**：在这里，客户在需求规定之后很长时间才收到产品。这导致了不满意的上市时间和客户反馈的延迟。'
- en: '**Long feedback cycle**: The feedback cycle is not only related to customers,
    but also to developers. Imagine that you accidentally created a bug and you learn
    about it during the UAT phase. How long does it take to fix something you worked
    on two months ago? Even minor bugs can consume weeks.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长反馈周期**：反馈周期不仅与客户有关，还与开发人员有关。想象一下，你意外地创建了一个错误，而你在UAT阶段才得知。修复你两个月前工作的东西需要多长时间？即使是小错误也可能需要几周的时间。'
- en: '**Lack of automation**: Rare releases don''t encourage the automation, which
    leads to unpredictable releases.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏自动化**：稀少的发布不鼓励自动化，这导致了不可预测的发布。'
- en: '**Risky hotfixes**: Hotfixes can''t usually wait for the full UAT phase, so
    they tend to be tested differently (the UAT phase is shortened) or not tested
    at all.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**风险的紧急修复**：紧急修复通常不能等待完整的UAT阶段，因此它们往往会以不同的方式进行测试（UAT阶段缩短）或者根本不进行测试。'
- en: '**Stress**: Unpredictable releases are stressful for the operations team. What''s
    more, the release cycle is usually tightly scheduled which imposes an additional
    stress on developers and testers.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压力**：不可预测的发布对运营团队来说是有压力的。而且，发布周期通常安排得很紧，这给开发人员和测试人员增加了额外的压力。'
- en: '**Poor communication**: Work passed from one team to another represents the
    waterfall approach, in which people start to care only about their part, rather
    than the complete product. In case anything goes wrong, that usually leads to
    the blaming game instead of cooperation.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沟通不畅**：工作从一个团队传递到另一个团队代表了瀑布式方法，人们开始只关心自己的部分，而不是整个产品。如果出了什么问题，通常会导致责备游戏，而不是合作。'
- en: '**Shared responsibility**: No team takes the responsibility for the product
    from A to Z. For developers: "done" means that requirements are implemented. For
    testers: "done" means that the code is tested. For operations: "done" means that
    the code is released.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共同责任**：没有团队从头到尾对产品负责。对于开发人员来说，“完成”意味着需求已经实现。对于测试人员来说，“完成”意味着代码已经测试过。对于运营人员来说，“完成”意味着代码已经发布。'
- en: '**Lower job satisfaction**: Each phase is interesting for a different team,
    but other teams need to support the process. For example, the development phase
    is interesting for developers but, during two other phases, they still need to
    fix bugs and support the release, which usually is not interesting for them at
    all.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作满意度降低**：每个阶段对不同的团队来说都很有趣，但其他团队需要支持这个过程。例如，开发阶段对开发人员来说很有趣，但在另外两个阶段，他们仍然需要修复错误并支持发布，这通常对他们来说一点都不有趣。'
- en: These drawbacks represent just a tip of the iceberg of the challenges related
    to the traditional delivery process. You may already feel that there must be a
    better way to develop the software and this better way is, obviously, the Continuous
    Delivery approach.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缺点只是传统交付过程相关挑战的冰山一角。你可能已经感觉到一定有更好的方法来开发软件，而这种更好的方法显然就是持续交付的方法。
- en: Benefits of Continuous Delivery
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付的好处
- en: “How long would it take your organization to deploy a change that involves just
    one single line of code? Do you do this on a repeatable, reliable basis?" These
    are the famous questions from Mary and Tom Poppendieck (authors of *Implementing
    Lean Software Development*), which have been quoted many times by Jez Humble and
    other authors. Actually, the answer to these questions is the only valid measurement
    of the health of your delivery process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “你的组织需要多长时间来部署只涉及一行代码的更改？你是否能够重复、可靠地做到这一点？”这些是Mary和Tom Poppendieck（《实施精益软件开发》的作者）的著名问题，被Jez
    Humble和其他作者多次引用。实际上，对这些问题的回答是衡量交付流程健康的唯一有效标准。
- en: To be able to deliver continuously, and not to spend a fortune on the army of
    operations teams working 24/7, we need automation. That is why, in short, Continuous
    Delivery is all about changing each phase of the traditional delivery process
    into a sequence of scripts, called the automated deployment pipeline or the Continuous
    Delivery pipeline. Then, if no manual steps are required, we can run the process
    after every code change and, therefore, deliver the product continuously to the
    users.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够持续交付，而不需要花费大量资金雇佣24/7工作的运维团队，我们需要自动化。简而言之，持续交付就是将传统交付流程的每个阶段转变为一系列脚本，称为自动化部署管道或持续交付管道。然后，如果不需要手动步骤，我们可以在每次代码更改后运行流程，因此持续向用户交付产品。
- en: 'Continuous Delivery lets us get rid of the tedious release cycle and, therefore,
    brings the following benefits:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付让我们摆脱了繁琐的发布周期，因此带来了以下好处：
- en: '**Fast delivery**: Time to market is significantly reduced as customers can
    use the product as soon as the development is completed. Remember, the software
    delivers no revenue until it is in the hands of its users.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速交付**：市场推出时间大大缩短，因为客户可以在开发完成后立即使用产品。请记住，软件在用户手中之前不会产生收入。'
- en: '**Fast feedback cycle**: Imagine you created a bug in the code, which goes
    into the production the same day. How much time does it take to fix something
    you worked on the same day? Probably not much. This, together with the quick rollback
    strategy, is the best way to keep the production stable.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速反馈循环**：想象一下，你在代码中创建了一个bug，当天就进入了生产环境。修复当天工作的东西需要多长时间？可能不多。这与快速回滚策略一起，是保持生产稳定的最佳方式。'
- en: '**Low-risk releases**: If you release on a daily basis, then the process becomes
    repeatable and therefore much safer. As the saying goes, "If it hurts, do it more
    often."'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低风险发布**：如果每天发布，那么流程变得可重复，因此更安全。俗话说，“如果疼，就多做几次。”'
- en: '**Flexible release options**: In case you need to release immediately, everything
    is already prepared, so there is no additional time/cost associated with the release
    decision.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的发布选项**：如果需要立即发布，一切都已准备就绪，因此发布决策不会带来额外的时间/成本。'
- en: Needless to say, we could achieve all the benefits simply by eliminating all
    delivery phases and proceeding with the development directly on the production.
    It would, however, cause the quality to decline. Actually, the whole difficulty
    of introducing Continuous Delivery is the concern that the quality would decrease
    together with eliminating manual steps. In this book, we will show how to approach
    it in a safe manner and explain why, contrary to common beliefs, the products
    delivered continuously have fewer bugs and are better adjusted to the customer's
    needs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不用说，我们可以通过消除所有交付阶段并直接在生产环境上进行开发来实现所有好处。然而，这会导致质量下降。实际上，引入持续交付的整个困难在于担心质量会随着消除手动步骤而下降。在本书中，我们将展示如何以安全的方式处理这个问题，并解释为什么与常见观念相反，持续交付的产品bug更少，更适应客户的需求。
- en: Success stories
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成功案例
- en: My favorite story on Continuous Delivery was told by Rolf Russell at one of
    his talks. It goes as follows. In 2005, Yahoo acquired Flickr and it was a clash
    of two cultures in the developer's world. Flickr, by that time, was a company
    with the start-up approach in mind. Yahoo, on the contrary, was a huge corporation
    with strict rules and the safety-first attitude. Their release processes differed
    a lot. While Yahoo used the traditional delivery process, Flickr released many
    times a day. Every change implemented by developers went on the production the
    same day. They even had a footer at the bottom of their page showing the time
    of the last release and the avatars of the developers who did the changes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的持续交付故事是Rolf Russell在其中一次演讲中讲述的。故事如下。2005年，雅虎收购了Flickr，这是开发者世界中两种文化的冲突。当时的Flickr是一家以初创公司方法为主的公司。相反，雅虎是一家拥有严格规定和安全至上态度的大型公司。他们的发布流程有很大不同。雅虎使用传统的交付流程，而Flickr每天发布多次。开发人员实施的每个更改都在当天上线。他们甚至在页面底部有一个页脚，显示最后一次发布的时间以及进行更改的开发人员的头像。
- en: 'Yahoo deployed rarely and each release brought a lot of changes well tested
    and prepared. Flickr worked in very small chunks, each feature was divided into
    small incremental parts and each part was deployed quickly to the production.
    The difference is presented in the following diagram:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 雅虎很少部署，每次发布都带来了很多经过充分测试和准备的更改。Flickr以非常小的块工作，每个功能都被分成小的增量部分，并且每个部分都快速部署到生产环境。差异如下图所示：
- en: '![](assets/10797d6c-4806-4dcf-b5f2-4f3cfdc41eae.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/10797d6c-4806-4dcf-b5f2-4f3cfdc41eae.png)'
- en: You can imagine what happened when the developers from two companies met. Yahoo
    obviously treated Flickr's colleagues as junior irresponsible developers, "a bunch
    of software cowboys who don't know what they are doing." So, the first thing they
    wanted to change was to add a QA team and the UAT phase into Flickr's delivery
    process. Before they applied the change, however, Flickr's developers had only
    one wish. They asked to evaluate the most reliable products in the whole Yahoo
    company. What a surprise when it happened that of all the software in Yahoo, Flickr
    had the lowest downtime. The Yahoo team didn't understand it at first, but let
    Flickr stay with their current process anyway. After all, they were engineers,
    so the evaluation result was conclusive. Only after some time, they realized that
    the Continuous Delivery process can be beneficial for all products in Yahoo and
    they started to gradually introduce it everywhere.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想象当两家公司的开发人员相遇时会发生什么。雅虎显然把Flickr的同事当作不负责任的初级开发人员，“一群不知道自己在做什么的软件牛仔。”因此，他们想要改变的第一件事是将QA团队和UAT阶段加入Flickr的交付流程。然而，在应用更改之前，Flickr的开发人员只有一个愿望。他们要求评估整个雅虎公司中最可靠的产品。当发生这种情况时，令人惊讶的是，雅虎所有软件中，Flickr的停机时间最短。雅虎团队起初不理解，但还是让Flickr保持他们当前的流程。毕竟，他们是工程师，所以评估结果是确凿的。只是过了一段时间，他们意识到持续交付流程对雅虎的所有产品都有益处，他们开始逐渐在所有地方引入它。
- en: 'The most important question of the story remains-how was it possible that Flickr
    was the most reliable system? Actually, the reason for that fact was what we already
    mentioned in the previous sections. A release is less risky if:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 故事中最重要的问题是-Flickr如何成为最可靠的系统？实际上，这个事实的原因已经在前面的部分提到过。如果一个发布是少量风险的话：
- en: The delta of code changes is small
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码更改的增量很小
- en: The process is repeatable
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个过程是可重复的。
- en: That is why, even though the release itself is a difficult activity, it is much
    safer when done frequently.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么，即使发布本身是一项困难的活动，但频繁进行发布时要安全得多。
- en: 'The story of Yahoo and Flickr is only an example of many successful companies
    for which the Continuous Delivery process proved to be right. Some of them even
    proudly share details from their systems, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 雅虎和Flickr的故事只是许多成功公司的一个例子，对于这些公司来说，持续交付流程被证明是正确的。其中一些甚至自豪地分享了他们系统的细节，如下：
- en: '**Amazon**: In 2011, they announced reaching 11.6 seconds (on average) between
    deployments'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊**：2011年，他们宣布在部署之间平均达到11.6秒'
- en: '**Facebook**: In 2013, they announced deployment of code changes twice a day'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook**：2013年，他们宣布每天部署代码更改两次'
- en: '**HubSpot**: In 2013, they announced deployment 300 times a day'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HubSpot**：2013年，他们宣布每天部署300次'
- en: '**Atlassian**: In 2016, they published a survey stating that 65% of their customers
    practice continuous delivery'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atlassian**：2016年，他们发布了一项调查，称他们65%的客户实践持续交付'
- en: You can read more about the research on the Continuous Delivery process and
    individual case studies at [https://continuousdelivery.com/evidence-case-studies/](https://continuousdelivery.com/evidence-case-studies/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://continuousdelivery.com/evidence-case-studies/](https://continuousdelivery.com/evidence-case-studies/)阅读有关持续交付流程和个案研究的更多研究。
- en: Keep in mind that the statistics get better every day. However, even without
    any numbers, just imagine a world in which every line of code you implement goes
    safely into the production. Clients can react quickly and adjust their requirements,
    developers are happy because they don't have to solve that many bugs, managers
    are satisfied because they always know what is the current state of work. After
    all, remember, the only true measure of progress is the released software.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，统计数据每天都在变得更好。然而，即使没有任何数字，想象一下每行代码您实现都安全地进入生产的世界。客户可以迅速做出反应并调整他们的需求，开发人员很高兴，因为他们不必解决那么多的错误，经理们很满意，因为他们总是知道当前的工作状态。毕竟，记住，唯一真正的进展度量是发布的软件。
- en: The automated deployment pipeline
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化部署流水线
- en: We already know what the Continuous Delivery process is and why we use it. In
    this section, we describe how to implement it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道持续交付流程是什么，以及为什么我们使用它。在这一部分，我们将描述如何实施它。
- en: 'Let''s start by emphasizing that each phase in the traditional delivery process
    is important. Otherwise, it would never have been created in the first place.
    No one wants to deliver software without testing it first! The role of the UAT
    phase is to detect bugs and to ensure that what developers created is what the
    customer wanted. The same applies to the operations team—the software must be
    configured, deployed to the production, and monitored. That''s out of the question.
    So, how do we automate the process so that we preserve all the phases? That is
    the role of the automated deployment pipeline, which consists of three stages
    as presented in the following diagram:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先强调传统交付流程中的每个阶段都很重要。否则，它根本不会被创建。没有人想在没有测试的情况下交付软件！UAT阶段的作用是检测错误，并确保开发人员创建的内容是客户想要的。运维团队也是如此——软件必须配置、部署到生产环境并进行监控。这是毋庸置疑的。那么，我们如何自动化这个过程，以便保留所有阶段？这就是自动化部署流水线的作用，它由以下图表中呈现的三个阶段组成：
- en: '![](assets/afeccaf6-be79-485d-bba8-beb5f782b675.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/afeccaf6-be79-485d-bba8-beb5f782b675.png)'
- en: The automated deployment pipeline is a sequence of scripts that is executed
    after every code change committed to the repository. If the process is successful,
    it ends up with the deployment to the production environment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化部署流水线是一系列脚本，每次提交到存储库的代码更改后都会执行。如果流程成功，最终会部署到生产环境。
- en: 'Each step corresponds to a phase in the traditional delivery process as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个步骤对应传统交付流程中的一个阶段，如下所示：
- en: '**Continuous Integration**: This checks to make sure that the code written
    by different developers integrates together'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成：这个阶段检查不同开发人员编写的代码是否能够整合在一起
- en: '**Automated Acceptance Testing**: This replaces the manual QA phase and checks
    if the features implemented by developers meet the client''s requirements'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动验收测试：这取代了手动的QA阶段，并检查开发人员实现的功能是否符合客户的要求
- en: '**Configuration Management**: This replaces the manual operations phase-configures
    the environment and deploys the software'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理：这取代了手动操作阶段-配置环境并部署软件。
- en: Let's take a deeper look at each phase to understand what is its responsibility
    and what steps it includes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解每个阶段的责任和包括哪些步骤。
- en: Continuous Integration
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: The Continuous Integration phase provides the first feedback to developers.
    It checks out the code from the repository, compiles it, runs unit tests, and
    verifies the code quality. If any step fails, the pipeline execution is stopped
    and the first thing the developers should do is fix the Continuous Integration
    build. The essential aspect of the phase is time; it must be executed in a timely
    manner. For example, if this phase took an hour to complete then the developers
    would commit the code faster, which would result in the constantly failing pipeline.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成阶段为开发人员提供了第一次反馈。它从代码库检出代码，编译代码，运行单元测试，并验证代码质量。如果任何步骤失败，管道执行将停止，开发人员应该做的第一件事是修复持续集成构建。这个阶段的关键是时间；它必须及时执行。例如，如果这个阶段需要一个小时才能完成，那么开发人员会更快地提交代码，这将导致持续失败的管道。
- en: The Continuous Integration pipeline is usually the starting point. Setting it
    up is simple because everything is done within the development team and no agreement
    with the QA and operations teams is necessary.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成管道通常是起点。设置它很简单，因为一切都在开发团队内部完成，不需要与QA和运维团队达成协议。
- en: Automated acceptance testing
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动验收测试
- en: The automated acceptance testing phase is a suite of tests written together
    with the client (and QAs) that is supposed to replace the manual UAT stage. It
    acts as a quality gate to decide whether a product is ready for the release or
    not. If any of the acceptance tests fail, then the pipeline execution is stopped
    and no further steps are run. It prevents movement to the Configuration Management
    phase and therefore the release.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 自动验收测试阶段是与客户（和QA）一起编写的一套测试，旨在取代手动的UAT阶段。它作为一个质量门，决定产品是否准备发布。如果任何验收测试失败，那么管道执行将停止，不会运行进一步的步骤。它阻止了进入配置管理阶段，因此也阻止了发布。
- en: The whole idea of automating the acceptance phase is to build the quality into
    the product instead of verifying it later. In other words, when a developer completes
    the implementation, the software is delivered already together with acceptance
    tests which verify that the software is what the client wanted. That is a large
    shift in thinking about testing software. There is no longer a single person (or
    team) who approves the release, but everything depends on passing the acceptance
    test suite. That is why creating this phase is usually the most difficult part
    of the Continuous Delivery process. It requires a close cooperation with the client
    and creating tests at the beginning (not at the end) of the process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化验收阶段的整个理念是将质量构建到产品中，而不是在后期进行验证。换句话说，当开发人员完成实现时，软件已经与验收测试一起交付，这些测试验证了软件是否符合客户的要求。这是对测试软件思维的一个重大转变。不再有一个人（或团队）批准发布，一切都取决于通过验收测试套件。这就是为什么创建这个阶段通常是持续交付过程中最困难的部分。它需要与客户的密切合作，并在过程的开始（而不是结束）创建测试。
- en: Introducing automated acceptance tests is especially challenging in the case
    of legacy systems. We describe more on that topic in [Chapter 9](f45afa10-c8a5-4252-bc14-8bc8bbcda5c9.xhtml),
    *Advanced Continuous Delivery*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在遗留系统的情况下，引入自动化验收测试尤其具有挑战性。我们在[第9章](f45afa10-c8a5-4252-bc14-8bc8bbcda5c9.xhtml)
    *高级持续交付*中对这个主题进行了更详细的描述。
- en: There is usually a lot of confusion about the types of tests and their place
    in the Continuous Delivery process. It's also often unclear how to automate each
    type, what should be the coverage, and what should be the role of the QA team
    in the whole development process. Let's clarify it using the Agile testing matrix
    and the testing pyramid.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关于测试类型及其在持续交付过程中的位置通常存在很多混淆。也经常不清楚如何自动化每种类型，应该有多少覆盖范围，以及QA团队在整个开发过程中应该扮演什么角色。让我们使用敏捷测试矩阵和测试金字塔来澄清这一点。
- en: The Agile testing matrix
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷测试矩阵
- en: 'Brian Marick, in a series of his blog posts, made a classification of software
    tests in a form of the so-called agile testing matrix. It places tests in two
    dimensions: business or technology facing and support programmers or critique
    the product. Let''s have a look at that classification:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Brian Marick在他的一系列博客文章中，以所谓的敏捷测试矩阵的形式对软件测试进行了分类。它将测试放置在两个维度上：业务或技术面向和支持程序员或批评产品。让我们来看看这个分类：
- en: '![](assets/8f120904-9296-452a-a8dd-75dc8059ff6d.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8f120904-9296-452a-a8dd-75dc8059ff6d.png)'
- en: 'Let''s comment briefly on each type of test:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要评论一下每种类型的测试：
- en: '**Acceptance Testing (automated)**: These are tests that represent functional
    requirements seen from the business perspective. They are written in the form
    of stories or examples by clients and developers to agree on how the software
    should work.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试（自动化）**：这些测试代表了从业务角度看到的功能需求。它们以故事或示例的形式由客户和开发人员编写，以达成关于软件应该如何工作的一致意见。'
- en: '**Unit Testing (automated)**: These are tests that help developers to provide
    the high-quality software and minimize the number of bugs.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试（自动化）**：这些测试帮助开发人员提供高质量的软件并最小化错误数量。'
- en: '**Exploratory Testing (manual)**: This is the manual black-box testing, which
    tries to break or improve the system.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索性测试（手动）**：这是手动的黑盒测试，试图破坏或改进系统。'
- en: '**Non-functional Testing (automated)**: These are tests that represent system
    properties related to the performance, scalability, security, and so on.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非功能性测试（自动化）**：这些测试代表了与性能、可扩展性、安全性等相关的系统属性。'
- en: 'This classification answers one of the most important questions about the Continuous
    Delivery process: what is the role of a QA in the process?'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分类回答了持续交付过程中最重要的问题之一：QA在过程中的角色是什么？
- en: Manual QAs perform the exploratory testing, so they play with the system, try
    to break it, ask questions, think about improvements. Automation QAs help with
    nonfunctional and acceptance testing, for example, they write code to support
    load testing. In general, QAs don't have their special place in the delivery process,
    but rather a role in the development team.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 手动QA执行探索性测试，因此他们与系统一起玩耍，试图破坏它，提出问题，思考改进。自动化QA帮助进行非功能性和验收测试，例如，他们编写代码来支持负载测试。总的来说，QA在交付过程中并没有他们特别的位置，而是在开发团队中扮演着一个角色。
- en: In the automated Continuous Delivery process, there is no longer a place for
    manual QAs who perform repetitive tasks.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化的持续交付过程中，不再有执行重复任务的手动QA的位置。
- en: You may look at the classification and wonder why you see no integration tests
    there. Where are they up to Brian Marick and where to put them in the Continuous
    Delivery pipeline?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到分类，想知道为什么你在那里看不到集成测试。Brian Marick在哪里，以及将它们放在持续交付管道的哪里？
- en: To explain it well, we first need to mention that the meaning of an integration
    test differs depending on the context. For (micro) service architecture, they
    usually mean exactly the same as the acceptance testing, as services are small
    and need nothing more than unit and acceptance tests. If you build a modular application,
    then by integration tests we usually mean component tests that bind multiple modules
    (but not the whole application) and test them together. In that case, integration
    tests place themselves somewhere between acceptance and unit tests. They are written
    in a similar way as acceptance tests, but are usually more technical and require
    mocking not only external services, but also internal modules. Integration tests,
    similar to unit tests, represent the "code" point of view, while acceptance tests
    represent the "user" point of view. Concerning the Continuous Delivery pipeline,
    integration tests are simply implemented as a separate phase in the process.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释清楚，我们首先需要提到，集成测试的含义取决于上下文。对于（微）服务架构，它们通常意味着与验收测试完全相同，因为服务很小，不需要除单元测试和验收测试之外的其他测试。如果构建了模块化应用程序，那么通过集成测试，我们通常指的是绑定多个模块（但不是整个应用程序）并一起测试它们的组件测试。在这种情况下，集成测试位于验收测试和单元测试之间。它们的编写方式与验收测试类似，但通常更加技术化，并且需要模拟不仅是外部服务，还有内部模块。集成测试与单元测试类似，代表了“代码”视角，而验收测试代表了“用户”视角。关于持续交付流水线，集成测试只是作为流程中的一个单独阶段实施。
- en: The testing pyramid
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试金字塔
- en: The previous section explained what each test type represents in the process,
    but mentioned nothing about how many tests we should develop. So, what should
    be the code coverage in case of unit testing? What about acceptance testing?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节解释了过程中每种测试类型代表的含义，但没有提到我们应该开发多少测试。那么，在单元测试的情况下，代码覆盖率应该是多少呢？验收测试呢？
- en: 'To answer these questions, Mike Cohn, in his book *Succeeding with Agile: Software
    Development Using Scrum*, created a so-called testing pyramid. Let''s look at
    the diagram to understand it well.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这些问题，迈克·科恩在他的书《敏捷成功：使用Scrum进行软件开发》中创建了所谓的测试金字塔。让我们看一下图表，以便更好地理解它。
- en: '![](assets/f7a6cd1f-e677-49d1-8646-bca9f764282f.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7a6cd1f-e677-49d1-8646-bca9f764282f.png)'
- en: When we move up the pyramid, the tests become slower and more expensive to create.
    They often require touching user interface and hiring a separate test automation
    team. That is why acceptance tests should not target 100% coverage. On the contrary,
    they should be feature-oriented and verify only selected test scenarios. Otherwise,
    we would spend a fortune on the test development and maintenance, and our Continuous
    Delivery pipeline build would take ages to execute.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向金字塔顶部移动时，测试变得更慢，创建起来更昂贵。它们通常需要触及用户界面，并雇佣一个单独的测试自动化团队。这就是为什么验收测试不应该以100%的覆盖率为目标。相反，它们应该以特性为导向，仅验证选定的测试场景。否则，我们将在测试开发和维护上花费巨资，我们的持续交付流水线构建将需要很长时间来执行。
- en: The case is different at the bottom of the pyramid. Unit tests are cheap and
    fast, so we should strive for 100% code coverage. They are written by developers
    and providing them should be a standard procedure for any mature team.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在金字塔底部情况就不同了。单元测试便宜且快速，因此我们应该努力实现100%的代码覆盖率。它们由开发人员编写，并且为他们提供应该是任何成熟团队的标准程序。
- en: I hope that the agile testing matrix and the testing pyramid clarified the role
    and the importance of acceptance testing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望敏捷测试矩阵和测试金字塔澄清了验收测试的角色和重要性。
- en: Let's move to the last phase of the Continuous Delivery process, configuration
    management.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转向持续交付流程的最后阶段，配置管理。
- en: Configuration management
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管理
- en: The configuration management phase is responsible for tracking and controlling
    changes in the software and its environment. It concerns taking care of preparing
    and installing the necessary tools, scaling the number of service instances and
    their distribution, infrastructure inventory, and all tasks related to the application
    deployment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理阶段负责跟踪和控制软件及其环境中的变化。它涉及准备和安装必要的工具，扩展服务实例的数量和分布，基础设施清单，以及与应用部署相关的所有任务。
- en: Configuration management is a solution to the problems posed by manually deploying
    and configuring applications on the production. Such common practice results in
    an issue whereby we no longer knows where each service is running and with what
    properties. Configuration management tools (such as Ansible, Chef, or Puppet)
    enable storing configuration files in the version control system and tracking
    every change that was made on the production servers.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理是解决手动在生产环境部署和配置应用程序带来的问题的解决方案。这种常见做法导致一个问题，即我们不再知道每个服务在哪里运行以及具有什么属性。配置管理工具（如Ansible、Chef或Puppet）能够在版本控制系统中存储配置文件，并跟踪在生产服务器上所做的每一次更改。
- en: An additional effort to replace manual tasks of the operations team is to take
    care of application monitoring. That is usually done by streaming logs and metrics
    of the running systems to a common dashboard, which is monitored by developers
    (or the DevOps team, as explained in the next section).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 取代运维团队手动任务的额外努力是负责应用程序监控。通常通过将运行系统的日志和指标流式传输到一个共同的仪表板来完成，该仪表板由开发人员（或者在下一节中解释的DevOps团队）监控。
- en: Prerequisites to Continuous Delivery
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 持续交付的先决条件
- en: 'The rest of the book is dedicated to technical details on how to implement
    a successful Continuous Delivery pipeline. The success of the process, however,
    depends not only on the tools we present throughout the book. In this section,
    we take a holistic look at the whole process and define the Continuous Delivery
    requirements in three areas:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分致力于如何实施成功的持续交付流水线的技术细节。然而，该过程的成功不仅取决于本书中介绍的工具。在本节中，我们全面审视整个过程，并定义了三个领域的持续交付要求：
- en: Your organization's structure and its impact on the development process
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1. 组织结构及其对开发过程的影响
- en: Your products and their technical details
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4. 产品及其技术细节
- en: Your development team and the practices you use
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 6. 开发团队及其使用的实践
- en: Organizational prerequisites
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 组织先决条件
- en: 'The way your organization works has a high impact on the success of introducing
    the Continuous Delivery process. It''s a bit similar to introducing Scrum. Many
    organizations would like to use the Agile process, but they don''t change their
    culture. You can''t use Scrum in your development team unless the organization''s
    structure is adjusted to that. For example, you need a product owner, stakeholders,
    and management that understands that no requirement changes are possible during
    the sprint. Otherwise, even with good will, you won''t make it. The same applies
    to the Continuous Delivery process; it requires an adjustment of how the organization
    is structured. Let''s have a look at three aspects: the DevOps culture, a client
    in the process, and business decisions.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 组织的工作方式对引入持续交付流程的成功有很大影响。这有点类似于引入Scrum。许多组织希望使用敏捷流程，但他们不改变他们的文化。除非组织结构进行了调整，否则你无法在开发团队中使用Scrum。例如，你需要一个产品负责人、利益相关者和理解在冲刺期间不可能进行任何需求更改的管理层。否则，即使有良好的意愿，你也无法成功。持续交付流程也是如此；它需要调整组织结构。让我们来看看三个方面：DevOps文化、流程中的客户和业务决策。
- en: DevOps culture
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. DevOps文化
- en: A long time ago, when software was written by individuals or microteams, there
    was no clear separation between the development, quality assurance, and operations.
    A person developed the code, tested it, and then put it into the production. If
    anything went wrong, the same person investigated the issue, fixed it, and redeployed
    to the production. The way the development is organized now changed gradually,
    when systems became larger and development teams grew. Then, engineers started
    to become specialized in one area. That made perfect sense, because specialization
    caused a boost in the productivity. However, the side effect was the communication
    overhead. It is especially visible if developers, QAs, and operations are under
    separate departments in the organization, sit in different buildings, or are outsourced
    to different countries. Such organization structure is no good for the Continuous
    Delivery process. We need something better, we need to adapt the so-called DevOps
    culture.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，当软件是由个人或微型团队编写时，开发、质量保证和运营之间没有明确的分离。一个人开发代码，测试它，然后将其投入生产。如果出了问题，同一个人调查问题，修复它，然后重新部署到生产环境。现在组织开发的方式逐渐改变，当系统变得更大，开发团队增长时。然后，工程师开始专门从事某个领域。这是完全有道理的，因为专业化会导致生产力的提升。然而，副作用是沟通开销。特别是如果开发人员、质量保证和运营在组织中处于不同的部门，坐在不同的建筑物中，或者外包到不同的国家。这种组织结构对持续交付流程不利。我们需要更好的东西，我们需要适应所谓的DevOps文化。
- en: 'DevOps culture means, in a sense, coming back to the roots. A single person
    or a team is responsible for all three areas, as presented in the following diagram:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种意义上，DevOps文化意味着回归到根本。一个人或一个团队负责所有三个领域，如下图所示：
- en: '![](assets/2121ef45-ffa9-46d9-adb9-94c98b8b4d1b.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/2121ef45-ffa9-46d9-adb9-94c98b8b4d1b.png)
- en: The reason why it's possible to move to the DevOps model without losing on the
    productivity is the automation. Most of the tasks related to the quality assurance
    and operations are moved to the automated delivery pipeline and can be therefore
    managed by the development team.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 能够转向DevOps模式而不损失生产力的原因是自动化。与质量保证和运营相关的大部分任务都被移至自动化交付流程，因此可以由开发团队管理。
- en: A DevOps team doesn't necessarily need to consist only of developers. A very
    common scenario in many organization's under transformation is to create teams
    with four developers, one QA, and one person from operations. They need, however,
    to work closely together (sit in one area, have stand-ups together, work on the
    same product).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps团队不一定只需要由开发人员组成。在许多正在转型的组织中，一个常见的情景是创建由四名开发人员、一个质量保证人员和一个运营人员组成的团队。然而，他们需要密切合作（坐在一起，一起开会，共同开发同一个产品）。
- en: The culture of small DevOps teams affects the software architecture. Functional
    requirements have to be well separated into (micro) services or modules, so that
    each team can take care of an independent part.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 小型DevOps团队的文化影响软件架构。功能需求必须被很好地分离成（微）服务或模块，以便每个团队可以独立处理一个部分。
- en: 'The impact of the organization''s structure on the software architecture was
    already observed in 1967 and formulated as Conway''s Law: "Any organization that
    designs a system (defined broadly) will produce a design whose structure is a
    copy of the organization''s communication structure."'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 组织结构对软件架构的影响已经在1967年观察到，并被规定为康威定律：“任何设计系统（广义定义）的组织都将产生一个结构与组织沟通结构相同的设计。”
- en: Client in the process
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端在流程中
- en: The role of a client (or a product owner) slightly changes during the Continuous
    Delivery adoption. Traditionally, clients are involved in defining requirements,
    answering questions from developers, attending demos, and taking part in the UAT
    phase to agree if what was built is what they had in mind.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续交付采用过程中，客户（或产品负责人）的角色略有变化。传统上，客户参与定义需求，回答开发人员的问题，参加演示，并参与用户验收测试阶段，以确定构建的是否符合他们的意图。
- en: In Continuous Delivery, there is no UAT, and a client is essential in the process
    of writing acceptance tests. For some clients, who already wrote their requirements
    in a testable manner, it is not a big shift. For the others, it means a change
    in a way of thinking to make requirements more technical-oriented.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续交付中，没有用户验收测试，客户在编写验收测试的过程中至关重要。对于一些已经以可测试的方式编写需求的客户来说，这并不是一个很大的转变。对于其他人来说，这意味着改变思维方式，使需求更加技术导向。
- en: In the Agile environment, some teams don't even accept user stories (requirements)
    without acceptance tests attached. Such techniques, even though they may sound
    too strict, often lead to better development productivity.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷环境中，一些团队甚至不接受没有验收测试的用户故事（需求）。即使这些技术可能听起来太严格，但通常会导致更好的开发生产力。
- en: Business decisions
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务决策
- en: In most companies, the business has an impact on the release schedule. After
    all, the decision what features are delivered, and when, is related to different
    departments of the company (for example, marketing) and can be strategic for the
    enterprise. That is why the release scheduling has to be reapproached and discussed
    between the business and the development teams.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数公司中，业务对发布计划有影响。毕竟，决定交付哪些功能以及何时交付与公司的不同部门（例如营销）相关，并且对企业具有战略意义。这就是为什么发布计划必须在业务和开发团队之间重新审视和讨论。
- en: Obviously, there are techniques such as feature toggles or manual pipeline steps,
    which help with releasing features at the specified time. We will describe them
    later in the book. To be precise, the term Continuous Delivery is not the same
    as Continuous Deployment. The former means that each commit to the repository
    is automatically released to the production. Continuous Delivery is less strict
    and means that each commit ends up with a release candidate, so it allows the
    last step (release to the production) to be manual.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，有一些技术，如功能切换或手动流水线步骤，有助于在指定时间发布功能。我们将在书中稍后描述它们。准确地说，持续交付这个术语并不等同于持续部署。前者意味着每次提交到存储库都会自动发布到生产环境。持续交付要求较少严格，意味着每次提交都会产生一个发布候选版本，因此允许最后一步（发布到生产环境）是手动的。
- en: In the rest of the book, we will use the terms Continuous Delivery and Continuous
    Deployment interchangeably.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将互换使用持续交付和持续部署这两个术语。
- en: Technical and development prerequisites
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术和开发先决条件
- en: 'From the technical side, there are a few requirements to keep in mind. We will
    discuss them throughout the book, so let''s only mention them here without going
    into detail:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术方面来看，有一些要求需要牢记。我们将在整本书中讨论它们，所以在这里只是简单提一下而不详细讨论：
- en: '**Automated build, test, package, and deploy operations**: All operations need
    to be possible to automate. If we deal with the system that is non-automatable,
    for example, due to security reasons or its complexity, then it''s impossible
    to create a fully automated delivery pipeline.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动构建、测试、打包和部署操作**：所有操作都需要能够自动化。如果我们处理的系统无法自动化，例如由于安全原因或其复杂性，那么就不可能创建完全自动化的交付流程。'
- en: '**Quick pipeline execution**: The pipeline must be executed in a timely manner,
    preferably in 5-15 minutes. If our pipeline execution takes hours or days, then
    it won''t be possible to run it after every commit to the repository.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速流水线执行**：流水线必须及时执行，最好在5-15分钟内。如果我们的流水线执行需要几个小时或几天，那么就不可能在每次提交到仓库后运行它。'
- en: '**Quick failure recovery**: A possibility of the quick rollback or system recovery
    is a must. Otherwise, we risk the production health due to frequent releases.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速故障恢复**：快速回滚或系统恢复的可能性是必须的。否则，由于频繁发布，我们会冒着生产健康的风险。'
- en: '**Zero-downtime deployment**: The deployment cannot have any downtime since
    we release many times a day.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零停机部署**：部署不能有任何停机时间，因为我们每天发布多次。'
- en: '**Trunk-based development**: Developers must check in regularly into one master
    branch. Otherwise, if everyone develops in their own branches, the integration
    is rare and therefore the releases are rare, which is exactly the opposite of
    what we want to achieve.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于主干的开发**：开发人员必须定期签入主分支。否则，如果每个人都在自己的分支上开发，集成很少，因此发布也很少，这恰恰与我们想要实现的相反。'
- en: We will write more on these prerequisites and how to address them throughout
    the book. Keeping that in mind, let's move to the last section of this chapter
    and introduce what system we plan to build in this book and what tools we will
    use for that purpose.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整本书中更多地讨论这些先决条件以及如何解决它们。记住这一点，让我们转到本章的最后一节，介绍我们计划在本书中构建的系统以及我们将用于此目的的工具。
- en: Building the Continuous Delivery process
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建持续交付过程
- en: We introduced the idea, benefits, and prerequisites with regards to the Continuous
    Delivery process. In this section, we describe the tools that will be used throughout
    the book and their place in the complete system.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了持续交付过程的理念、好处和先决条件。在本节中，我们描述了将在整本书中使用的工具及其在完整系统中的位置。
- en: 'If you''re interested more in the idea of the Continuous Delivery process,
    then have a look at an excellent book by Jez Humble and David Farley, *Continuous
    Delivery: Reliable Software Releases through Build, Test, and Deployment Automation*.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对持续交付过程的想法更感兴趣，那么可以看看杰兹·汉布尔和大卫·法利的一本优秀书籍，《持续交付：通过构建、测试和部署自动化实现可靠的软件发布》。
- en: Introducing tools
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍工具
- en: First of all, the specific tool is always less important than understanding
    its role in the process. In other words, any tool can be replaced with another
    one which plays the same role. For example, Jenkins can be replaced with Atlassian
    Bamboo and Chief can be used instead of Ansible. That is why each chapter begins
    with the general description of why such a tool is necessary and what its role
    is in the whole process. Then, the exact tool is described with comparison to
    its substitutes. That form gives you the flexibility to choose the right one for
    your environment.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，具体的工具总是比理解其在流程中的作用更不重要。换句话说，任何工具都可以用另一个扮演相同角色的工具替换。例如，Jenkins可以用Atlassian
    Bamboo替换，Chief可以用Ansible替换。这就是为什么每一章都以为什么需要这样的工具以及它在整个流程中的作用的一般描述开始。然后，具体的工具会与其替代品进行比较描述。这种形式给了你选择适合你环境的正确工具的灵活性。
- en: Another approach could be to describe the Continuous Delivery process on the
    level of ideas; however, I strongly believe that giving an exact example with
    the code extract, something that readers can run by themselves, results in a much
    better understanding of the concept.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法可能是在思想层面上描述持续交付过程；然而，我坚信用代码提取的确切示例，读者可以自行运行，会更好地理解这个概念。
- en: There are two ways to read this book. The first is to read and understand the
    concepts of the Continuous Delivery process. The second is to create your own
    environment and execute all scripts while reading to understand the details.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种阅读本书的方式。第一种是阅读和理解持续交付流程的概念。第二种是创建自己的环境，并在阅读时执行所有脚本，以理解细节。
- en: Let's have a quick look at the tools we will use throughout the book. In this
    section, however, it is only a brief introduction of each technology and much
    more detail is presented as this book goes on.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下本书中将使用的工具。然而，在本节中，这只是对每种技术的简要介绍，随着本书的进行，会呈现更多细节。
- en: Docker ecosystem
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker生态系统
- en: Docker, as the clear leader of the containerization movement, has dominated
    the software industry in the recent years. It allows the packaging of an application
    in the environment-agnostic image and therefore treats servers as a farm of resources,
    rather than machines that must be configured for each application. Docker was
    a clear choice for this book because it perfectly fits the (micro) service world
    and the Continuous Delivery process.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Docker作为容器化运动的明确领导者，在近年来主导了软件行业。它允许将应用程序打包成与环境无关的镜像，因此将服务器视为资源的集群，而不是必须为每个应用程序配置的机器。Docker是本书的明确选择，因为它完全适合（微）服务世界和持续交付流程。
- en: 'Together with Docker comes additional technologies, which are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Docker一起出现的还有其他技术，如下所示：
- en: '**Docker Hub**: This is a registry for Docker images'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Hub**：这是Docker镜像的注册表'
- en: '**Docker Compose**: This is a tool to define multicontainer Docker applications'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Compose**：这是一个定义多容器Docker应用程序的工具'
- en: '**Docker Swarm**: This is a clustering and scheduling tool'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Swarm**：这是一个集群和调度工具'
- en: Jenkins
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins
- en: Jenkins is by far the most popular automation server on the market. It helps
    to create Continuous Integration and Continuous Delivery pipelines and, in general,
    any other automated sequence of scripts. Highly plugin-oriented, it has a great
    community which constantly extends it with new features. What's more, it allows
    to write the pipeline as code and supports distributed build environments.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins绝对是市场上最受欢迎的自动化服务器。它有助于创建持续集成和持续交付流水线，以及一般的任何其他自动化脚本序列。高度插件化，它有一个伟大的社区，不断通过新功能扩展它。更重要的是，它允许将流水线编写为代码，并支持分布式构建环境。
- en: Ansible
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible
- en: 'Ansible is an automation tool that helps with software provisioning, configuration
    management, and application deployment. It is trending faster than any other configuration
    management engine and can soon overtake its two main competitors: Chef and Puppet.
    It uses agentless architecture and integrates smoothly with Docker.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一个自动化工具，可帮助进行软件供应、配置管理和应用部署。它的趋势比任何其他配置管理引擎都要快，很快就可以超过它的两个主要竞争对手：Chef和Puppet。它使用无代理架构，并与Docker无缝集成。
- en: GitHub
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub
- en: GitHub is definitely the number one of all hosted version control systems. It
    provides a very stable system, a great web-based UI, and a free service for public
    repositories. Having said that, any source control management service or tool
    will work with Continuous Delivery, no matter if it's in the cloud or self-hosted
    and if it's based on Git, SVN, Mercurial, or any other tool.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub绝对是所有托管版本控制系统中的第一名。它提供了一个非常稳定的系统，一个出色的基于Web的用户界面，以及免费的公共存储库服务。话虽如此，任何源代码控制管理服务或工具都可以与持续交付一起使用，无论是在云端还是自托管，无论是基于Git、SVN、Mercurial还是其他任何工具。
- en: Java/Spring Boot/Gradle
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java/Spring Boot/Gradle
- en: Java has been the most popular programming language for years. That is why it
    is being used for most code examples in this book. Together with Java, most companies
    develop with the Spring framework, so we used it to create a simple web service
    needed to explain some concepts. Gradle is used as a build tool. It's still less
    popular than Maven, however, trending much faster. As always, any programming
    language, framework, or build tool can be exchanged and the Continuous Delivery
    process would stay the same, so don't worry if your technology stack is different.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Java一直是最受欢迎的编程语言。这就是为什么在本书中大多数代码示例都使用Java。与Java一起，大多数公司使用Spring框架进行开发，因此我们使用它来创建一个简单的Web服务，以解释一些概念。Gradle用作构建工具。它仍然比Maven不那么受欢迎，但发展速度更快。与往常一样，任何编程语言、框架或构建工具都可以替换，持续交付流程将保持不变，所以如果您的技术栈不同，也不用担心。
- en: The other tools
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他工具
- en: Cucumber was chosen arbitrarily as the acceptance testing framework. Other similar
    solutions are Fitnesse and JBehave. For the database migration we use Flyway,
    but any other tool would do, for example, Liquibase.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随意选择了Cucumber作为验收测试框架。其他类似的解决方案有Fitnesse和JBehave。对于数据库迁移，我们使用Flyway，但任何其他工具也可以，例如Liquibase。
- en: Creating a complete Continuous Delivery system
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建完整的持续交付系统
- en: You can look at how this book is organized from two perspectives.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从两个角度看待本书的组织方式。
- en: 'The first one is based on the steps of the automated deployment pipeline. Each
    chapter takes you closer to the complete Continuous Delivery process. If you look
    at the names of the chapters, some of them are even named like the pipeline phases:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个角度是基于自动部署流水线的步骤。每一章都让您更接近完整的持续交付流程。如果您看一下章节的名称，其中一些甚至命名为流水线阶段的名称：
- en: Continuous Integration pipeline
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成流水线
- en: Automated acceptance testing
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动验收测试
- en: Configuration management with Ansible
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible进行配置管理
- en: The rest of the chapters give the introduction, summary, or additional information
    complementary to the process.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 其余章节提供了介绍、总结或与流程相关的附加信息。
- en: There is also a second perspective to the content of this book. Each chapter describes
    one piece of the environment, which in turn is well prepared for the Continuous
    Delivery process. In other words, the book presents, step by step, technology
    by technology, how to build a complete system. To help you get the feeling of
    what we plan to build throughout the book, let's now have a look at how the system
    will evolve in each chapter.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的内容还有第二个视角。每一章描述了环境的一个部分，这个环境又为持续交付流程做好了充分的准备。换句话说，本书逐步展示了如何逐步构建一个完整系统的技术。为了帮助您了解我们计划在整本书中构建的系统，现在让我们来看看每一章中系统将如何发展。
- en: Don't worry if you don't understand the concepts and the terminology at this
    point. We explain everything from scratch in the corresponding chapters.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您目前不理解概念和术语，不用担心。我们将在相应的章节中从零开始解释一切。
- en: Introducing Docker
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Docker
- en: 'In [Chapter 2](aa58c16d-41c0-4364-9eae-26b60a05c510.xhtml), *Introducing Docker*,
    we start from the center of our system and build a working application packaged
    as a Docker image. The output of this chapter is presented in the following diagram:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](aa58c16d-41c0-4364-9eae-26b60a05c510.xhtml)中，*介绍Docker*，我们从系统的中心开始构建一个打包为Docker镜像的工作应用程序。本章的输出如下图所示：
- en: '![](assets/360f4181-be46-4ca6-b481-53ba5e352a1a.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/360f4181-be46-4ca6-b481-53ba5e352a1a.png)'
- en: A dockerized application (web service) is run as a container on a **Docker Host**
    and is reachable as it would run directly on the host machine. That is possible
    thanks to port forwarding (port publishing in the Docker's terminology).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一个docker化的应用程序（Web服务）作为一个容器在**Docker主机**上运行，并且可以像直接在主机上运行一样访问。这得益于端口转发（在Docker术语中称为端口发布）。
- en: Configuring Jenkins
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Jenkins
- en: 'In [Chapter 3](f46b0c80-7f67-476c-9a17-8f1238f0b359.xhtml), *Configuring Jenkins*,
    we prepare the Jenkins environment. Thanks to the support of multiple agent (slave)
    nodes, it is able to handle the heavy concurrent load. The result is presented
    in the following diagram:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](f46b0c80-7f67-476c-9a17-8f1238f0b359.xhtml)中，*配置Jenkins*，我们准备了Jenkins环境。多个代理（从）节点的支持使其能够处理大量并发负载。结果如下图所示：
- en: '![](assets/1098463d-b149-49b8-b80d-b08a6df6e053.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1098463d-b149-49b8-b80d-b08a6df6e053.png)'
- en: The **Jenkins** master accepts a build request, but the execution is started
    at one of the **Jenkins Slave** (agent) machines. Such an approach provides horizontal
    scaling of the Jenkins environment.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jenkins**主节点接受构建请求，但执行是在一个**Jenkins从节点**（代理）机器上启动的。这种方法提供了Jenkins环境的水平扩展。'
- en: Continuous Integration Pipeline
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成流水线
- en: 'In [Chapter 4](a07d252d-3812-45ad-a567-1c70dae74d9d.xhtml), *Continuous Integration
    Pipeline*, we show how to create the first phase of the Continuous Delivery pipeline,
    the commit stage. The output of this chapter is the system presented in the following
    diagram:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](a07d252d-3812-45ad-a567-1c70dae74d9d.xhtml)中，*持续集成流水线*，我们展示了如何创建持续交付流水线的第一阶段，即提交阶段。本章的输出是下图所示的系统：
- en: '![](assets/47bc7bc5-8cf0-4d4e-bdc9-f3b7e6b48221.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/47bc7bc5-8cf0-4d4e-bdc9-f3b7e6b48221.png)'
- en: The application is a simple web service written in Java with the Spring Boot
    framework. Gradle is used as a build tool and GitHub as the source code repository.
    Every commit to GitHub automatically triggers the Jenkins build, which uses Gradle
    to compile Java code, run unit tests, and perform additional checks (code coverage,
    static code analysis, and so on). After the Jenkins build is completed, a notification
    is sent to the developers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序是使用Spring Boot框架编写的简单的Java Web服务。Gradle用作构建工具，GitHub用作源代码仓库。对GitHub的每次提交都会自动触发Jenkins构建，该构建使用Gradle编译Java代码，运行单元测试，并执行其他检查（代码覆盖率，静态代码分析等）。Jenkins构建完成后，会向开发人员发送通知。
- en: After this chapter, you will be able to create a complete Continuous Integration
    pipeline.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章之后，您将能够创建一个完整的持续集成流水线。
- en: Automated acceptance testing
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动验收测试
- en: 'In [Chapter 5](881f1493-1456-4c5b-bdc0-b87595433366.xhtml), *Automated Acceptance
    Testing*, we finally merge the two technologies from the book title: *Docker*
    and *Jenkins*. It results in the system presented in the following diagram:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](881f1493-1456-4c5b-bdc0-b87595433366.xhtml)中，*自动验收测试*，我们最终合并了书名中的两种技术：*Docker*和*Jenkins*。结果如下图所示：
- en: '![](assets/2ca2ff1f-0162-4b35-9b90-06f686b53022.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ca2ff1f-0162-4b35-9b90-06f686b53022.png)'
- en: 'The additional elements in the diagram are related to the automated acceptance
    testing stage:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的附加元素与自动验收测试阶段有关：
- en: '**Docker Registry**: After the Continuous Integration phase, the application
    is packaged first into a JAR file and then as a Docker image. That image is then
    pushed to the **Docker Registry**, which acts as a storage for dockerized applications.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Registry**：在持续集成阶段之后，应用程序首先被打包成一个JAR文件，然后作为一个Docker镜像。然后将该镜像推送到**Docker
    Registry**，它充当了docker化应用程序的存储库。'
- en: '**Docker Host**: Before performing the acceptance test suite, the application
    has to be started. Jenkins triggers a **Docker Host** machine to pull the dockerized
    application from the **Docker Registry** and starts it.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker主机**：在执行验收测试套件之前，应用程序必须启动。Jenkins触发一个**Docker主机**机器从**Docker Registry**拉取docker化的应用程序并启动它。'
- en: '**Docker Compose**: If the complete application consists of more than one Docker
    container (for example, two web services: Application 1 using Application 2),
    then **Docker Compose** helps to run them together.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Compose**：如果完整的应用程序由多个Docker容器组成（例如，两个Web服务：使用应用程序2的应用程序1），那么**Docker
    Compose**有助于将它们一起运行。'
- en: '**Cucumber**: After the application is started on the **Docker Host**, Jenkins
    runs a suite of acceptance tests written in the **Cucumber** framework.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cucumber**：应用程序在**Docker主机**上启动后，Jenkins运行了一套用**Cucumber**框架编写的验收测试。'
- en: Configuration management with Ansible/Continuous Delivery pipeline
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible/持续交付流水线的配置管理
- en: 'In the next two chapters, that is, [Chapter 6](75a4971b-4eb7-45cb-a3ac-81a7d5ca79b2.xhtml),
    *Configuration Management with Ansible* and Chapter 7, *Continuous Delivery Pipeline*,
    we complete the Continuous Delivery pipeline. The output is the environment presented
    in the following diagram:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，即[第6章](75a4971b-4eb7-45cb-a3ac-81a7d5ca79b2.xhtml)，*使用Ansible进行配置管理*和第7章，*持续交付流水线*，我们完成了持续交付流水线。输出是下图所示的环境：
- en: '![](assets/6b7eeee2-d286-4b43-a91c-d2066e375a83.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6b7eeee2-d286-4b43-a91c-d2066e375a83.png)'
- en: Ansible takes care of the environments and enables the deployment of the same
    applications on multiple machines. As a result, we deploy the application to the
    staging environment, run the acceptance testing suite, and finally release the
    application to the production environment, usually in many instances (on multiple
    Docker Host machines).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible负责环境，并使得同一应用程序可以部署到多台机器上。因此，我们将应用程序部署到暂存环境，运行验收测试套件，最后将应用程序发布到生产环境，通常是在多个实例上（在多个Docker主机上）。
- en: Clustering with Docker Swarm/Advanced Continuous Delivery
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Swarm进行集群/高级持续交付
- en: 'In [Chapter 8](05fbbfd9-ff58-4ee8-be5d-90cb291f6320.xhtml), *Clustering with
    Docker Swarm*, we replace single hosts in each of the environments with clusters
    of machines. [Chapter 9](f45afa10-c8a5-4252-bc14-8bc8bbcda5c9.xhtml), *Advanced
    Continuous Delivery*, additionally adds databases to the Continuous Delivery process.
    The final environment created in this book is presented in the following diagram:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](05fbbfd9-ff58-4ee8-be5d-90cb291f6320.xhtml)中，*使用Docker Swarm进行集群*，我们用机器集群替换了每个环境中的单个主机。[第9章](f45afa10-c8a5-4252-bc14-8bc8bbcda5c9.xhtml)，*高级持续交付*，此外还将数据库添加到了持续交付流程中。本书中创建的最终环境如下图所示：
- en: '![](assets/4e76ac56-d89b-4e6f-8ea0-47a7bc1083ef.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4e76ac56-d89b-4e6f-8ea0-47a7bc1083ef.png)'
- en: Staging and production environments are equipped with Docker Swarm clusters
    and therefore multiple instances of the application are run on the cluster. We
    don't have to think anymore on which exact machine our applications are deployed.
    All we care about is the number of their instances. The same applies to Jenkins
    slaves, they are also run on a cluster. The last improvement is the automatic
    management of the database schemas using Flyway migrations integrated into the
    delivery process.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 暂存和生产环境配备有Docker Swarm集群，因此应用程序的多个实例在集群上运行。我们不再需要考虑我们的应用程序部署在哪台精确的机器上。我们只关心它们的实例数量。Jenkins从属也是在集群上运行。最后的改进是使用Flyway迁移自动管理数据库模式，这已经整合到交付流程中。
- en: I hope you are already excited by what we plan to build throughout this book.
    We will approach it step by step, explaining every detail and all the possible
    options in order to help you understand the procedures and tools. After reading
    this book, you will be able to introduce or improve the Continuous Delivery process
    in your projects.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你已经对我们在本书中计划构建的内容感到兴奋。我们将逐步进行，解释每一个细节和所有可能的选项，以帮助你理解程序和工具。阅读本书后，你将能够在你的项目中引入或改进持续交付流程。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have introduced the Continuous Delivery process starting
    from the idea, discussing the prerequisites, to end up with tools that are used
    in the rest of the book. The key takeaway from this chapter is as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了从想法开始的持续交付过程，讨论了先决条件，并介绍了本书其余部分使用的工具。本章的关键要点如下：
- en: The delivery process used currently in most companies has significant shortcomings
    and can be improved using modern tools for automation
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前大多数公司使用的交付流程存在重大缺陷，可以通过现代自动化工具进行改进
- en: 'The Continuous Delivery approach provides a number of benefits, of which the
    most significant ones are: fast delivery, fast feedback cycle, and low-risk releases'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付方法提供了许多好处，其中最重要的是：快速交付、快速反馈周期和低风险发布
- en: 'The Continuous Delivery pipeline consists of three stages: Continuous Integration,
    automated acceptance testing, and configuration management'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付流水线包括三个阶段：持续集成、自动验收测试和配置管理
- en: Introducing Continuous Delivery usually requires a change in the organization's
    culture and structure
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入持续交付通常需要组织文化和结构的变革。
- en: The most important tools in the context of Continuous Delivery are Docker, Jenkins,
    and Ansible
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在持续交付的背景下，最重要的工具是Docker、Jenkins和Ansible
- en: In the next chapter, we introduce Docker and present how to build a dockerized
    application.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Docker，并介绍如何构建一个Docker化的应用程序。
