- en: '*Chapter 1*: Installing and Setting Up Cypress'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：安装和设置Cypress'
- en: 'Cypress is an end-to-end test automation framework built and engineered for
    modern web applications. It focuses on eliminating inconsistencies in tests by
    ensuring that you can write, debug, and run tests on the browser without needing
    additional configuration or additional packages. Cypress works as a standalone
    application and can be installed on macOS, Unix/Linux, and Windows operating systems
    either using Hyphenate applications or command-line tools. Cypress was mainly
    built for developers who write their applications using JavaScript because it
    can be used to test all applications that run on a browser. In this chapter, we
    are going to cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress是一个为现代Web应用程序构建和设计的端到端测试自动化框架。它专注于通过确保您可以在浏览器上编写、调试和运行测试而无需额外的配置或额外的包来消除测试中的不一致性。Cypress作为一个独立的应用程序工作，并且可以在macOS、Unix/Linux和Windows操作系统上使用连字符应用程序或命令行工具进行安装。Cypress主要是为使用JavaScript编写他们的应用程序的开发人员构建的，因为它可以用来测试在浏览器上运行的所有应用程序。在本章中，我们将涵盖以下主题：
- en: Installing Cypress on Windows
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上安装Cypress
- en: Installing Cypress on macOS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上安装Cypress
- en: Installing Cypress via direct download
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过直接下载安装Cypress
- en: Opening the Cypress test runner
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开Cypress测试运行器
- en: Switching Cypress browsers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换Cypress浏览器
- en: Adding npm scripts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加npm脚本
- en: Running Cypress tests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Cypress测试
- en: By the end of this chapter, you will understand how to properly set up Cypress
    on both Windows and Mac operating systems and how to run Cypress tests. You will
    also understand how npm scripts can be used to automate the process of running
    tests and opening the test runner.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将了解如何在Windows和Mac操作系统上正确设置Cypress以及如何运行Cypress测试。您还将了解如何使用npm脚本来自动化运行测试和打开测试运行器的过程。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Cypress can be installed as a standalone application on your computer and can
    be run on a machine that has at least 2 GB of RAM and that meets any of the following
    operating system requirements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress可以作为一个独立的应用程序安装在您的计算机上，并且可以在至少有2GB RAM并满足以下任一操作系统要求的机器上运行：
- en: macOS 10.9 and above (64-bit only)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 10.9及以上版本（仅64位）
- en: Linux Ubuntu 12.04 and above, Fedora 21, and Debian 8 (64-bit only)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux Ubuntu 12.04及以上版本，Fedora 21和Debian 8（仅64位）
- en: Windows 7 and above
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 7及以上
- en: In order to use Cypress on one of the operating systems listed here, Node.js
    8 or above must be installed first. Node.js is a JavaScript runtime environment
    that allows JavaScript code to be run outside the browser. Installing Node.js
    installs npm, which allows us to install JavaScript packages from [https://www.npmjs.com/](https://www.npmjs.com/).
    npm is the default package manager for Node.js, and users can either use it or
    use third-party package managers such as Yarn. In this section, we will install
    Cypress on both macOS and Windows operating systems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这里列出的操作系统之一上使用Cypress，必须首先安装Node.js 8或更高版本。Node.js是一个JavaScript运行时环境，允许在浏览器之外运行JavaScript代码。安装Node.js会安装npm，它允许我们从[https://www.npmjs.com/](https://www.npmjs.com/)安装JavaScript包。npm是Node.js的默认包管理器，用户可以使用它或使用第三方包管理器，如Yarn。在本节中，我们将在macOS和Windows操作系统上安装Cypress。
- en: Installing Cypress on Windows
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Cypress
- en: In this section, we will install Cypress and Node.js on Windows operating systems
    so that we can run our tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Windows操作系统上安装Cypress和Node.js，以便我们可以运行我们的测试。
- en: Downloading and installing Node.js
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装Node.js
- en: 'The following steps will guide you through the installation of Node.js:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您完成安装Node.js：
- en: Visit the official Node.js website ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问官方Node.js网站（[https://nodejs.org/en/download/](https://nodejs.org/en/download/)）。
- en: Select the Windows installer option.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Windows安装程序选项。
- en: Download the installer package.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载安装程序包。
- en: Install the Node.js package by following the instructions on the Node.js website.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照Node.js网站上的说明安装Node.js包。
- en: Next, let's initialize the project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们初始化项目。
- en: Initializing the project
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化项目
- en: 'As a best practice, Cypress is installed in the directory where the project
    is located; that way, we can be sure that the Cypress tests belong to the project.
    In our case, we will create a folder inside `Documents` and call it `cypress-tests`,
    then navigate to that directory when installing Cypress. We can use the following
    commands in a Windows PowerShell terminal to create the `cypress-tests` directory
    and navigate to it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最佳实践，Cypress安装在项目所在的目录中；这样，我们可以确保Cypress测试属于项目。在我们的情况下，我们将在`Documents`内创建一个名为`cypress-tests`的文件夹，然后在安装Cypress时导航到该目录。我们可以在Windows
    PowerShell终端中使用以下命令来创建`cypress-tests`目录并导航到该目录：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After these commands are run successfully, we will then launch PowerShell and
    navigate to the directory that we just created with the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 成功运行这些命令后，我们将启动PowerShell并导航到我们刚刚创建的目录，使用以下命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After creating the directory, we will then initialize an empty JavaScript project
    by running the following command in PowerShell:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建目录后，我们将通过在PowerShell中运行以下命令来初始化一个空的JavaScript项目：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a default `package.json` file that will be used to define our
    project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个默认的`package.json`文件，用于定义我们的项目。
- en: Installing Cypress on Windows
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装Cypress
- en: 'We will now install Cypress using npm in our project directory with the following
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下命令在我们的项目目录中使用npm安装Cypress：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After running this command, you should be able to see the installation of Cypress
    and the installation's progress. This approach installs Cypress as a `dev` dependency
    for our empty project.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您应该能够看到Cypress的安装和安装进度。这种方法将Cypress安装为我们空项目的`dev`依赖项。
- en: For the macOS installation, please refer to the next main section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有关macOS安装，请参阅下一节主要部分。
- en: Recap – Installing Cypress on Windows
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-在Windows上安装Cypress
- en: In this section, we learned how to install Cypress on the Windows operating
    system. We also learned how to use PowerShell to add Cypress to a project and
    also how to initialize an empty project. In the next section, we will look at
    how to install Cypress on macOS.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在Windows操作系统上安装Cypress。我们还学会了如何使用PowerShell向项目添加Cypress，以及如何初始化一个空项目。在下一节中，我们将看看如何在macOS上安装Cypress。
- en: Installing Cypress on MacOS
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MacOS上安装Cypress
- en: In this section, I will be using a macOS machine to install both Cypress and
    Node.js. By the end of this section, you will have learned how to initialize an
    empty JavaScript project and also how to add the Cypress testing framework to
    macOS. We will also dive into how we can use either npm, Yarn, or direct Cypress
    downloads in our projects.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将使用macOS机器来安装Cypress和Node.js。在本节结束时，您将学会如何初始化一个空的JavaScript项目，以及如何将Cypress测试框架添加到macOS中。我们还将深入探讨如何在我们的项目中使用npm、Yarn或直接Cypress下载。
- en: Installing Node.js
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: 'The following steps will guide you through the installation of Node.js:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您安装Node.js：
- en: Visit the official Node.js website ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问官方Node.js网站（[https://nodejs.org/en/download/](https://nodejs.org/en/download/)）。
- en: Select the macOS installer option.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择macOS安装程序选项。
- en: Download the installer package.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载安装程序包。
- en: Install the Node.js package following the instructions on the Node.js website.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照Node.js网站上的说明安装Node.js包。
- en: Next, let's initialize the project.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们初始化项目。
- en: Initializing the project
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化项目
- en: 'To install Cypress, we need to navigate to the project folder and install it
    where we want the Cypress tests to be located. In our case, we will create a folder
    inside `Documents` and call it `cypress-tests`, then navigate to that directory
    when installing Cypress using our terminal. We will then launch our terminal application
    and navigate to the directory that we just created using the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Cypress，我们需要导航到项目文件夹，并在我们希望Cypress测试位于的位置进行安装。在我们的情况下，我们将在“文档”中创建一个名为“cypress-tests”的文件夹，然后在安装Cypress时使用我们的终端导航到该目录。然后，我们将启动我们的终端应用程序，并使用以下命令导航到我们刚刚创建的目录：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After creating the directory, we will then initialize an empty JavaScript project
    by running the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建目录后，我们将通过运行以下命令初始化一个空的JavaScript项目：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will create a default `package.json` file that will be used to define our
    project.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个默认的“package.json”文件，用于定义我们的项目。
- en: Installing Cypress on Mac
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Mac上安装Cypress
- en: 'To install Cypress, we will use the npm package manager that Node.js comes
    packaged with. To achieve this, we need to run the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Cypress，我们将使用Node.js捆绑的npm包管理器。为了实现这一点，我们需要运行以下命令：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After running this command, you should be able to see the installation of Cypress
    in the `package.json` file and the installation progress on the command line.
    This approach installs Cypress as a `dev` dependency for our empty project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您应该能够在“package.json”文件中看到Cypress的安装进度，并在命令行上看到安装进度。这种方法将Cypress安装为我们空项目的“dev”依赖项。
- en: For an alternative package manager that you can use with both Windows and macOS,
    you can use Yarn. We'll see how to install Cypress using Yarn in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Windows和macOS都可以使用的替代包管理器，您可以使用Yarn。我们将在下一节中看到如何使用Yarn安装Cypress。
- en: Installing Cypress using Yarn
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Yarn安装Cypress
- en: 'In both Windows and macOS, you can choose an alternative package manager. One
    of the available alternatives is the Yarn package manager. Just like npm, you
    first need to download the Yarn package manager using the macOS Homebrew package
    manager by running the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows和macOS中，您可以选择另一种包管理器。可用的替代方案之一是Yarn包管理器。与npm一样，您首先需要使用macOS Homebrew包管理器下载Yarn包管理器，方法是运行以下命令：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Just like npm, Yarn does the job of managing dependencies for your project and
    can be used as a project manager. An advantage that Yarn has over npm is that
    it is able to cache downloaded packages in such a way that it does not need to
    re-download the dependencies, therefore leading to better utilization of resources.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就像npm一样，Yarn可以管理项目的依赖关系，并且可以用作项目管理器。Yarn比npm的一个优势是它能够以一种不需要重新下载依赖项的方式缓存已下载的包，因此更好地利用资源。
- en: 'After the installation of Yarn, we can use it to install packages as we would
    with npm by running the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Yarn后，我们可以使用它来安装包，就像我们使用npm一样，方法是运行以下命令：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have one final installation method, which is via direct download. This will
    be covered in the next section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有最后一种安装方法，即通过直接下载。这将在下一节中介绍。
- en: Installing Cypress via direct download
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过直接下载安装Cypress
- en: We can install Cypress for Windows, Linux, or macOS via direct download. This
    approach is recommended if you do not need to install the dependencies that come
    with Cypress or if you are only trying Cypress out. It is important to note that
    although this is the quickest way to install Cypress, this version does not come
    with features such as the ability to record tests to the dashboard.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过直接下载在Windows、Linux或macOS上安装Cypress。如果您不需要安装Cypress附带的依赖项，或者只是尝试Cypress，这种方法是推荐的。重要的是要注意，尽管这是安装Cypress的最快方式，但这个版本不具备诸如记录测试到仪表板的功能。
- en: 'The following steps will guide you through the installation of Cypress via
    direct download:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您通过直接下载安装Cypress：
- en: Navigate to [https://cypress.io](https://cypress.io).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://cypress.io](https://cypress.io)。
- en: Select the **Download Now** link.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**立即下载**链接。
- en: Cypress will automatically download as it will automatically detect the operating
    system of the user downloading the .zip file. You should then extract the zip
    file and run Cypress without installing any other dependencies.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress将自动下载，因为它将自动检测下载.zip文件的用户的操作系统。然后，您应该解压缩zip文件并在不安装任何其他依赖项的情况下运行Cypress。
- en: Recap – Installing Cypress on macOS
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-在macOS上安装Cypress
- en: In this section, we learned how to install the Cypress test framework on macOS
    using npm and also how to initialize an empty JavaScript project that will utilize
    the Cypress tests. We also learned how to use the Yarn package manager to install
    Cypress and how to directly download Cypress into our project without using any
    package managers. In the next section, we will look at how to open the Cypress
    test framework.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用npm在macOS上安装Cypress测试框架，以及如何初始化一个将利用Cypress测试的空JavaScript项目。我们还学习了如何使用Yarn软件包管理器安装Cypress，以及如何在不使用任何软件包管理器的情况下直接下载Cypress到我们的项目中。在下一节中，我们将看看如何打开Cypress测试框架。
- en: Opening Cypress
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开Cypress
- en: Installing Cypress is the first step on the journey of writing end-to-end tests;
    now, we need to learn how to use the tools that Cypress provides to run the tests
    using both the graphical user interface and the dashboards. There are four ways
    to run the Cypress executable that has been installed on your machine. After opening
    Cypress, you should then see the Cypress test runner. No matter which way you
    open Cypress, the test runner dashboard that you are presented with is the same.
    The following sections detail the different ways to open and run Cypress.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Cypress是编写端到端测试旅程的第一步；现在，我们需要学习如何使用Cypress提供的工具来使用图形用户界面和仪表板运行测试。有四种方法可以运行已在您的计算机上安装的Cypress可执行文件。打开Cypress后，您应该看到Cypress测试运行器。无论以哪种方式打开Cypress，您所看到的测试运行器仪表板都是相同的。以下部分详细介绍了打开和运行Cypress的不同方法。
- en: Running with Npx
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Npx运行
- en: 'npx is used to execute npm package binaries and comes with all npm versions
    from version 5.2\. Npx can also be installed using npm from `npmjs.com`. To run
    Cypress using npx, you need to run the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: npx用于执行npm包二进制文件，并且从版本5.2开始，所有npm版本都带有npx。也可以使用npm从`npmjs.com`安装npx。要使用npx运行Cypress，您需要运行以下命令：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running with Yarn
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Yarn运行
- en: 'If Cypress was installed using Yarn, you can then open Cypress using the following
    command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用Yarn安装了Cypress，您可以使用以下命令打开Cypress：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Running with the node modules path
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用node模块路径运行
- en: Cypress can also be run by referencing the root path of the installation on
    the node modules. This can either be by using the full path to the `node_modules`
    bin where the Cypress executable is located or by using the npm bin shortcut,
    as shown in the following sections.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress也可以通过引用node模块上的安装根路径来运行。这可以通过使用`node_modules` bin中Cypress可执行文件的完整路径或使用npm
    bin快捷方式来实现，如下节所示。
- en: Launching Cypress using the full path
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用完整路径启动Cypress
- en: 'This method of launching Cypress references the installed Cypress executable
    located in `node_modules` and works by running the executable to open Cypress:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这种启动Cypress的方法引用了`node_modules`中安装的Cypress可执行文件，并通过运行可执行文件来打开Cypress：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Launching Cypress using the shortcut
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用快捷方式启动Cypress
- en: 'Just like launching Cypress using the full path, this method launches Cypress
    in the same way but instead of referencing the full path, it uses the npm bin
    variable to locate the default location of the `node_modules` bin folder:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用完整路径启动Cypress一样，这种方法以相同的方式启动Cypress，但是它不是引用完整路径，而是使用npm bin变量来定位`node_modules`
    bin文件夹的默认位置：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Desktop application launch
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桌面应用程序启动
- en: If you downloaded your application as a desktop application, you can open Cypress
    by navigating to the location of the unzipped Cypress folder and clicking the
    Cypress executable that is present in the folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将应用程序下载为桌面应用程序，您可以通过导航到解压后的Cypress文件夹的位置，并单击该文件夹中存在的Cypress可执行文件来打开Cypress。
- en: Now that we have successfully opened Cypress via our preferred method, we will
    look at how we can choose alternative browsers in Cypress if we do not wish to
    use the default browser that comes packaged with Cypress.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功通过我们喜欢的方法打开了Cypress，我们将看看如果我们不想使用Cypress捆绑的默认浏览器，我们如何在Cypress中选择替代浏览器。
- en: Recap – Opening Cypress
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-打开Cypress
- en: In this section, we learned how to open the Cypress test framework dashboard
    and also how to run Cypress in different ways, including running the Cypress dashboard
    using *npx*, *Yarn*, or with the *node_modules* path. In the next section, we
    will learn how to switch the browsers of tests running in Cypress.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何打开Cypress测试框架仪表板，以及如何以不同的方式运行Cypress，包括使用*npx*、*Yarn*或*node_modules*路径运行Cypress仪表板。在下一节中，我们将学习如何切换在Cypress中运行的测试的浏览器。
- en: Switching browsers
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换浏览器
- en: Cypress comes with Electron as the default browser on installation, but it can
    also integrate with other compatible browsers that contain the **Chromium project**,
    with the exception of Firefox. Currently, Cypress supports Firefox browsers Chrome
    browsers, Chromium, and Edge browsers. When launching Cypress, it will automatically
    find all the compatible browsers on the running machine and you will be able to
    switch between any of the browsers at any time using the test runner. To switch
    from one browser to another, you will need to click on the browser button at the
    top right and choose an alternative browser from the drop-down link.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在安装时默认使用Electron作为浏览器，但它也可以与其他兼容的浏览器集成，这些浏览器包含**Chromium项目**，除了Firefox。目前，Cypress支持Firefox浏览器、Chrome浏览器、Chromium和Edge浏览器。启动Cypress时，它将自动查找运行机器上的所有兼容浏览器，您可以随时使用测试运行器在这些浏览器之间切换。要从一个浏览器切换到另一个浏览器，您需要点击右上角的浏览器按钮，并从下拉链接中选择替代浏览器。
- en: 'Cypress tests can also be run or opened on different browsers using the command
    line, and this can be achieved by specifying the browser while opening the Cypress
    test runner or running the Cypress tests. All Chromium-based browsers, Edge, and
    Firefox can be launched using the command line with the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress测试也可以通过命令行在不同的浏览器上运行或打开，可以通过在打开Cypress测试运行器或运行Cypress测试时指定浏览器来实现。所有基于Chromium的浏览器、Edge和Firefox都可以使用以下命令在命令行中启动：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `browser-name` specified in the command can either be Edge, Chrome, or
    Firefox. To specify the path of the browser that Cypress should launch, you can
    choose to run the browser name with the executable binary of the browser instead
    of the name of the browser, as shown here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 命令中指定的`browser-name`可以是Edge、Chrome或Firefox。要指定Cypress应启动的浏览器的路径，您可以选择使用浏览器的可执行二进制文件而不是浏览器的名称来运行浏览器名称，如下所示：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Being able to switch browsers in Cypress ensures that a user can run their test
    suite on different devices and verify that the output from different browsers
    is consistent throughout the test suite. Switching browsers on Cypress also ensures
    that the verification of tests can take place and that all elements visible or
    actions that can be performed on one browser can be performed on another browser.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在Cypress中切换浏览器可以确保用户可以在不同设备上运行其测试套件，并验证不同浏览器的输出在整个测试套件中是一致的。在Cypress上切换浏览器还可以确保测试的验证可以进行，并且所有元素可见或可以在一个浏览器上执行的操作也可以在另一个浏览器上执行。
- en: Let's use the knowledge we've gained so far to try out a practical exercise
    with Cypress.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用到目前为止所学到的知识来尝试使用Cypress进行实际练习。
- en: Exercise
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'To combine the knowledge of opening Cypress and switching browsers, have a
    go at the following steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 结合打开Cypress和切换浏览器的知识，尝试以下步骤：
- en: Navigate to the folder we created while initializing Cypress.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们在初始化Cypress时创建的文件夹。
- en: Run all the default tests that Cypress autogenerated when it was launched.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Cypress启动时自动生成的所有默认测试。
- en: Switch the browsers on the test runner.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试运行器上切换浏览器。
- en: Rerun the tests with a different browser.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不同的浏览器重新运行测试。
- en: Now that we have learned how to run Cypress tests in different browsers, in
    the next section, we will explore how we can automate the process of running tests
    using npm scripts.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何在不同的浏览器中运行Cypress测试，在接下来的部分中，我们将探讨如何使用npm脚本自动化运行测试的过程。
- en: Recap – Switching browsers
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾 - 切换浏览器
- en: In this section, we learned the different browsers that Cypress supports and
    how to switch different Cypress browsers either using the command line or using
    the Cypress dashboard. We also went through a simple exercise to help us understand
    how Cypress browser switching works and also how we run our tests using Cypress.
    In the next section, we will look at adding npm scripts to our `package.json`
    file to automate some of the Cypress tasks.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了Cypress支持的不同浏览器以及如何切换不同的Cypress浏览器，无论是使用命令行还是使用Cypress仪表板。我们还进行了一个简单的练习，以帮助我们了解Cypress浏览器切换的工作原理，以及如何使用Cypress运行我们的测试。在下一节中，我们将学习如何将npm脚本添加到我们的`package.json`文件中，以自动化一些Cypress任务。
- en: Adding npm scripts
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加npm脚本
- en: '`scripts` is a `package.json` property that gives a user the ability to run
    commands via the command line in JavaScript applications. npm scripts can be used
    to add environment variables to the properties of an application, package applications
    into production-ready bundles, run tests, or automate any other activity in JavaScript
    applications. npm scripts can either be used as defined by `npmjs.com` or customized
    based on the user''s preferences and applications. In this section, we will learn
    how to write npm scripts to run our Cypress tests, to open our Cypress tests,
    and even to combine different npm scripts to achieve different results.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`scripts`是`package.json`的属性，它使用户能够通过JavaScript应用程序的命令行运行命令。npm脚本可用于向应用程序的属性添加环境变量，将应用程序打包成生产就绪的捆绑包，运行测试，或自动化JavaScript应用程序中的任何其他活动。npm脚本可以根据用户的偏好和应用程序进行自定义，也可以按照`npmjs.com`定义的方式使用。在本节中，我们将学习如何编写npm脚本来运行我们的Cypress测试，打开我们的Cypress测试，甚至组合不同的npm脚本以实现不同的结果。'
- en: Opening a Cypress command script
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开Cypress命令脚本
- en: 'To create a `scripts` command to open Cypress, you need to write the script
    name then add the command that npm will run when the script is executed. In this
    case, our command to open Cypress will be embedded in a script called `open`.
    We can achieve this by adding the following command to the `scripts` object in
    `package.json`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`scripts`命令来打开Cypress，您需要编写脚本名称，然后添加npm在执行脚本时将运行的命令。在这种情况下，我们打开Cypress的命令将嵌入到一个名为`open`的脚本中。我们可以通过将以下命令添加到`package.json`中的`scripts`对象来实现这一点：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To run the `open` command, you simply need to run the `npm run open` command,
    and the test runner should open on the default browser selected in the Cypress
    test runner.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`open`命令，您只需运行`npm run open`命令，测试运行器应该会在Cypress测试运行器中选择的默认浏览器上打开。
- en: Recap – Adding npm scripts
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾 - 添加npm脚本
- en: In this section, we learned what npm scripts are and how to add them to the
    `package.json` file. We also learned how we can run the npm scripts that we have
    added to our `package.json` file to execute and automate tasks in our projects.
    Next, we'll learn how to run tests in Cypress.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了什么是npm脚本以及如何将它们添加到`package.json`文件中。我们还学会了如何运行我们已经添加到`package.json`文件中的npm脚本，以执行和自动化项目中的任务。接下来，我们将学习如何在Cypress中运行测试。
- en: Running Cypress tests
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Cypress测试
- en: 'In this section, we will focus on how we can run Cypress tests on the browser.
    To do this, we will write test scripts that can run the tests similarly to opening
    Cypress scripts:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点放在如何在浏览器上运行Cypress测试。为此，我们将编写测试脚本，可以像打开Cypress脚本一样运行测试：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding scripts will be used to run tests either in the Chrome browser
    or in the Firefox browser depending on what command the user runs on their command-line
    terminal. To execute the tests, you can either run `npm run test:chrome` to run
    the tests in Chrome or `npm run test:firefox` to execute the tests in Firefox.
    The first section of the command instructs Cypress to run the tests in headless
    mode, while the second section instructs Cypress which browser to run the tests
    in. Running Cypress tests is not limited to only Chrome and Firefox and can be
    extended to any browsers that Cypress supports, with the option to customize the
    run script's name as you desire.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的脚本将用于在Chrome浏览器或Firefox浏览器中运行测试，具体取决于用户在命令行终端上运行的命令。要执行测试，您可以运行`npm run test:chrome`在Chrome中运行测试，或者`npm
    run test:firefox`在Firefox中执行测试。命令的第一部分指示Cypress以无头模式运行测试，而第二部分指示Cypress在哪个浏览器中运行测试。运行Cypress测试不仅限于Chrome和Firefox，并且可以扩展到Cypress支持的任何浏览器，还可以根据需要自定义运行脚本的名称。
- en: Combining Cypress commands using scripts
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脚本组合Cypress命令
- en: 'The `scripts` object in `package.json` gives you the flexibility to combine
    commands to create advanced commands that can carry out different functions, such
    as passing an environment variable to the tests being run, or even instructing
    Cypress to run different tests depending on the variable that has been passed.
    Combining Cypress commands ensures that we write short reusable statements that
    we can then use to construct a command that performs multiple functions when run.
    In the following example, we will use the `scripts` object to write a command
    to open Cypress, set the port, set the environment, and set the browser to either
    Chrome or Firefox depending on the command that we choose to run:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`中的`scripts`对象为您提供了灵活性，可以组合命令以创建可以执行不同功能的高级命令，例如将环境变量传递给正在运行的测试，甚至指示Cypress根据传递的变量运行不同的测试。组合Cypress命令确保我们编写短小的可重用语句，然后可以用来构建执行多个功能的命令。在下面的示例中，我们将使用`scripts`对象编写一个命令来打开Cypress，设置端口，设置环境，并根据我们选择运行的命令设置浏览器为Chrome或Firefox：'
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding scripts can run Cypress tests in two browsers. The scripts also
    assist in the identification of the environment to run the tests as specified
    by the `–env` variable. The last two scripts combine a series of scripts that
    run Cypress, attach an environment variable, and select the browser on which to
    run the tests, something that makes the scripts functionality of `package.json`
    very useful when it comes to writing Cypress commands to be executed in the test
    suite. To run the tests in Firefox, we simply run the `npm run test:uat:firefox`
    command for UAT or `test:dev:firefox` for the `dev` environment. You can also
    run Chrome tests with `test:uat:chrome` for UAT tests in Chrome and `test:dev:chrome`
    for the `dev` environment tests.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的脚本可以在两个浏览器中运行Cypress测试。这些脚本还有助于确定要根据`-env`变量运行测试的环境。最后两个脚本组合了一系列运行Cypress的脚本，附加了一个环境变量，并选择了要在其上运行测试的浏览器，这使得`package.json`中的脚本功能在编写要在测试套件中执行的Cypress命令时非常有用。要在Firefox中运行测试，我们只需运行`npm
    run test:uat:firefox`命令进行UAT测试，或者`test:dev:firefox`进行`dev`环境的测试。您还可以使用`test:uat:chrome`在Chrome中运行UAT测试，或者`test:dev:chrome`进行`dev`环境的测试。
- en: Important note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To run tests in different environments, you need to have configurations for
    running the tests in the different environments already set up in the project.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要在不同的环境中运行测试，您需要在项目中已经设置好在不同环境中运行测试的配置。
- en: Recap – Running Cypress tests
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-运行Cypress测试
- en: In this section, we looked at how to execute our tests in Cypress. We also looked
    at different ways for our npm scripts to execute our tests by passing environment
    variables and changing parameters such as the browser in the scripts to run our
    tests. We also learned how to combine multiple Cypress commands to run our tests
    and therefore reduce the amount of code that we need to write.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看了如何在Cypress中执行我们的测试。我们还看了不同的方法，通过传递环境变量和更改脚本中的参数来执行我们的测试的npm脚本。我们还学会了如何组合多个Cypress命令来运行我们的测试，从而减少我们需要编写的代码量。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about installing Cypress both on Windows and on
    Mac operating systems. With both installations, we covered installing Cypress
    as a downloaded application or via the command line. We also covered using either
    the default package manager that comes with Node.js (npm) or third-party dependency
    managers such as Yarn. We learned how to utilize the test runner to run our tests
    and also how to automate our scripts in `package.json` to help us run our tests
    effectively. To test our knowledge, we also had an exercise where we practiced
    running tests in different Cypress browsers.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在Windows和Mac操作系统上安装Cypress。在两种安装中，我们涵盖了作为下载应用程序或通过命令行安装Cypress。我们还涵盖了使用Node.js（npm）自带的默认包管理器或第三方依赖管理器（如Yarn）。我们学会了如何利用测试运行器来运行我们的测试，以及如何在`package.json`中自动化我们的脚本，以帮助我们有效地运行测试。为了测试我们的知识，我们还进行了一个练习，练习在不同的Cypress浏览器中运行测试。
- en: In the next chapter, we will be diving into the differences between Selenium
    and Cypress and why Cypress should be the preferred choice. We will be building
    further on the understanding of Cypress that we have gained in this chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Selenium和Cypress之间的区别，以及为什么Cypress应该是首选。我们将进一步建立在本章中所获得的对Cypress的理解基础上。
