["```java\n        <dependency> \n            <groupId>org.springframework.boot</groupId> \n            <artifactId>spring-boot-starter-test</artifactId> \n            <scope>test</scope> \n        </dependency> \n```", "```java\n        <dependency> \n            <groupId>info.cukes</groupId> \n            <artifactId>cucumber-spring</artifactId> \n            <version>1.2.5</version> \n            <scope>test</scope> \n        </dependency> \n        <dependency> \n            <groupId>info.cukes</groupId> \n            <artifactId>cucumber-junit</artifactId> \n            <version>1.2.5</version> \n            <scope>test</scope> \n        </dependency> \n```", "```java\n@RunWith(Cucumber.class) \n@CucumberOptions(features = \"src/test/resources\") \npublic class CucumberTest { \n\n} \n```", "```java\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) \n@ContextConfiguration \npublic class CucumberTestSteps { \n\n    @Autowired \n    private TestRestTemplate restTemplate; \n\n    private ResponseEntity<Product> productResponse; \n    private ResponseEntity<String> errResponse; \n\n    @Given(\"(.*) Service is running\") \n    public void checkServiceRunning(String serviceName) { \n         ResponseEntity<String> healthResponse = restTemplate.getForEntity(\"/health\",String.class, new HashMap<>()); \n         Assert.assertEquals(HttpStatus.OK, healthResponse.getStatusCode()); \n    } \n\n    @When(\"get (.*) service is called with existing product id (\\d+)$\") \n    public void callService(String serviceName, int prodId) throws Throwable { \n         productResponse = this.restTemplate.getForEntity(\"/\"+serviceName+\"/\" + prodId, Product.class, new HashMap<>()); \n    } \n\n    @Then(\"I should get a response with HTTP status code (.*)\") \n    public void shouldGetResponseWithHttpStatusCode(int statusCode) { \n         Assert.assertEquals(statusCode, productResponse.getStatusCodeValue()); \n    } \n\n    @And(\"return Product details with name (.*) and category (\\d+)$\") \n    public void theResponseShouldContainTheMessage(String prodName, int categoryId) { \n         Product product = productResponse.getBody() ; \n         Assert.assertEquals(prodName, product.getName()); \n         Assert.assertEquals(categoryId, product.getCatId());       \n    } \n```", "```java\n<plugin> \n   <groupId>org.jacoco</groupId> \n   <artifactId>jacoco-maven-plugin</artifactId> \n   <version>0.7.9</version> \n</plugin> \n```", "```java\n<executions> \n   <execution> \n         <id>pre-unit-test</id> \n         <goals> \n               <goal>prepare-agent</goal> \n         </goals> \n         <configuration> \n               <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile> \n               <propertyName>surefireArgLine</propertyName> \n         </configuration> \n   </execution> \n   <execution> \n         <id>post-unit-test</id> \n         <phase>test</phase> \n         <goals> \n               <goal>report</goal> \n         </goals> \n         <configuration> \n               <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile> \n   <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory> \n         </configuration> \n   </execution> \n</executions> \n```", "```java\n<plugin> \n   <groupId>org.apache.maven.plugins</groupId> \n   <artifactId>maven-surefire-plugin</artifactId> \n   <configuration> \n         <!-- Sets the VM argument line used when unit tests are run. --> \n         <argLine>${surefireArgLine}</argLine> \n         <excludes> \n               <exclude>**/IT*.java</exclude> \n         </excludes>        \n   </configuration> \n</plugin> \n```", "```java\n2 Scenarios ([32m2 passed[0m) \n8 Steps ([32m8 passed[0m) \n0m0.723s \nTests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 26.552 sec - in com.mycompany.product.CucumberTest......Results :Tests run: 10, Failures: 0, Errors: 0, Skipped: 0[INFO] [INFO] --- jacoco-maven-plugin:0.7.9:report (post-unit-test) @ product ---[INFO] Loading execution data file D:AppswkNeonch5-producttargetcoverage-reportsjacoco-ut.exec[INFO] Analyzed bundle 'product' with 6 classes \n```"]