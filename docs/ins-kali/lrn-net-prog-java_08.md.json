["```java\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n```", "```java\n    SecretKey secretKey = keyGenerator.generateKey();\n```", "```java\n    public static String encrypt(\n            String plainText, SecretKey secretKey) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            byte[] plainTextBytes = plainText.getBytes();\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            byte[] encryptedBytes = \n                cipher.doFinal(plainTextBytes);\n            Base64.Encoder encoder = Base64.getEncoder();\n            String encryptedText = \n                encoder.encodeToString(encryptedBytes);\n            return encryptedText;\n        } catch (NoSuchAlgorithmException|NoSuchPaddingException | \n                InvalidKeyException | IllegalBlockSizeException | \n                BadPaddingException ex) {\n            // Handle exceptions\n        }\n        return null;\n    }\n```", "```java\n    public static String decrypt(String encryptedText, \n            SecretKey secretKey) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            Base64.Decoder decoder = Base64.getDecoder();\n            byte[] encryptedBytes = decoder.decode(encryptedText);\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            byte[] decryptedBytes = \n                cipher.doFinal(encryptedBytes);\n            String decryptedText = new String(decryptedBytes);\n            return decryptedText;\n        } catch (NoSuchAlgorithmException|NoSuchPaddingException | \n                InvalidKeyException | IllegalBlockSizeException | \n                BadPaddingException ex) {\n            // Handle exceptions\n        }\n        return null;\n    }\n```", "```java\npublic class AsymmetricKeyUtility {\n\n    public static void savePrivateKey(PrivateKey privateKey) {\n        ...\n    }\n\n    public static PrivateKey getPrivateKey() {\n        ...\n    }\n\n    public static void savePublicKey(PublicKey publicKey) {\n        ...\n    }\n\n    public static PublicKey getPublicKey() {\n        ...\n    }\n\n    public static byte[] encrypt(PublicKey publicKey, \n            String message) { \n        ...\n    }    \n\n    public static String decrypt(PrivateKey privateKey, \n        byte[] encodedData) { \n        ...\n    }\n\n    public static void main(String[] args) {\n        ...\n    }\n}\n```", "```java\n    public static void main(String[] args) {\n        try {\n            KeyPairGenerator keyPairGenerator = \n                KeyPairGenerator.getInstance(\"RSA\");\n            keyPairGenerator.initialize(1024);\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\n            PrivateKey privateKey = keyPair.getPrivate();\n            PublicKey publicKey = keyPair.getPublic();\n            ...\n        } catch (NoSuchAlgorithmException ex) {\n            // Handle exceptions\n        }\n```", "```java\n            savePrivateKey(privateKey);\n            savePublicKey(publicKey);\n```", "```java\n            privateKey = getPrivateKey();\n            publicKey = getPublicKey();\n```", "```java\n            String message = \"The message\";\n            System.out.println(\"Message: \" + message);\n            byte[] encodedData = encrypt(publicKey,message);\n            System.out.println(\"Decrypted Message: \" + \n                    decrypt(privateKey,encodedData));\n```", "```java\n    public static byte[] encrypt(PublicKey publicKey, String message) { \n        byte[] encodedData = null;\n        try {\n            Cipher cipher = Cipher.getInstance(\"RSA \");\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n            byte[] encryptedBytes = \n                cipher.doFinal(message.getBytes());\n            encodedData = Base64.getEncoder().withoutPadding()\n                .encode(encryptedBytes);\n        } catch (NoSuchAlgorithmException|NoSuchPaddingException | \n                InvalidKeyException | IllegalBlockSizeException | \n                BadPaddingException ex) {\n            // Handle exceptions\n        }\n        return encodedData;\n    }\n```", "```java\n    public static String decrypt(PrivateKey privateKey, \n            byte[] encodedData) { \n        String message = null;\n        try {\n            Cipher cipher = Cipher.getInstance(\"RSA \");\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n            byte[] decodedData = \n                Base64.getDecoder().decode(encodedData);\n            byte[] decryptedBytes = cipher.doFinal(decodedData); \n            message = new String(decryptedBytes);\n        } catch (NoSuchAlgorithmException|NoSuchPaddingException | \n                InvalidKeyException | IllegalBlockSizeException | \n                BadPaddingException ex) {\n            // Handle exceptions\n        }\n        return message;\n    }\n```", "```java\n    public static void savePrivateKey(PrivateKey privateKey) {\n        try {\n            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = \n                new PKCS8EncodedKeySpec(privateKey.getEncoded());\n            FileOutputStream fos = \n                new FileOutputStream(\"private.key\");\n            fos.write(pkcs8EncodedKeySpec.getEncoded());\n            fos.close();\n        } catch (FileNotFoundException ex) {\n            // Handle exceptions\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n    }\n```", "```java\n    public static PrivateKey getPrivateKey() {\n        try {\n            File privateKeyFile = new File(\"private.key\");\n            FileInputStream fis = \n                new FileInputStream(\"private.key\");\n            byte[] encodedPrivateKey = \n                new byte[(int) privateKeyFile.length()];\n            fis.read(encodedPrivateKey);\n            fis.close();\n            PKCS8EncodedKeySpec privateKeySpec = \n                new PKCS8EncodedKeySpec(encodedPrivateKey);\n            KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n            PrivateKey privateKey = \n                keyFactory.generatePrivate(privateKeySpec);\n            return privateKey;\n        } catch (FileNotFoundException ex) {\n            // Handle exceptions\n        } catch (IOException | NoSuchAlgorithmException | \n                 InvalidKeySpecException ex) {\n            // Handle exceptions\n        } \n        return null;\n    }\n```", "```java\n    public static void savePublicKey(PublicKey publicKey) {\n        try {\n            X509EncodedKeySpec x509EncodedKeySpec = \n                new X509EncodedKeySpec(publicKey.getEncoded());\n            FileOutputStream fos = \n                new FileOutputStream(\"public.key\");\n            fos.write(x509EncodedKeySpec.getEncoded());\n            fos.close();\n        } catch (FileNotFoundException ex) {\n            // Handle exceptions\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n    }\n\n    public static PublicKey getPublicKey() {\n        try {\n            File publicKeyFile = new File(\"public.key\");\n            FileInputStream fis = \n                new FileInputStream(\"public.key\");\n            byte[] encodedPublicKey = \n                new byte[(int) publicKeyFile.length()];\n            fis.read(encodedPublicKey);\n            fis.close();\n            X509EncodedKeySpec publicKeySpec = \n                new X509EncodedKeySpec(encodedPublicKey);\n            KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n            PublicKey publicKey = \n                keyFactory.generatePublic(publicKeySpec);\n            return publicKey;\n        } catch (FileNotFoundException ex) {\n            // Handle exceptions\n        } catch (IOException | NoSuchAlgorithmException | \n                 InvalidKeySpecException ex) {\n            // Handle exceptions\n        } \n        return null;\n    }\n```", "```java\n C:\\Some Directory>set path=C:\\Program Files\\Java\\jdk1.8.0_25\\bin;%path%\n\n```", "```java\n C:\\Some Directory>keytool -genkey -alias mykeystore -keystore keystore.jks\n\n```", "```java\nEnter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n [Unknown]:  some name\nWhat is the name of your organizational unit?\n [Unknown]:  development\nWhat is the name of your organization?\n [Unknown]:  mycom.com\nWhat is the name of your City or Locality?\n [Unknown]:  some city\nWhat is the name of your State or Province?\n [Unknown]:  some state\nWhat is the two-letter country code for this unit?\n [Unknown]:  jv\n\n```", "```java\nIs CN=some name, OU=development, O=mycom.com, L=some city, ST=some state, C=jv correct?\n [no]:  yes\n\n```", "```java\nEnter key password for <mykeystore>\n (RETURN if same as keystore password):\n\n```", "```java\nkeytool -list -v -keystore keystore.jks -alias mykeystore\n\n```", "```java\nEnter keystore password:\nAlias name: mykeystore\nCreation date: Oct 22, 2015\nEntry type: PrivateKeyEntry\nCertificate chain length: 1\nCertificate[1]:\nOwner: CN=some name, OU=development, O=mycom.com, L=some city, ST=some state, C=jv\nIssuer: CN=some name, OU=development, O=mycom.com, L=some city, ST=some state, C=jv\nSerial number: 39f2e11e\nValid from: Thu Oct 22 18:11:21 CDT 2015 until: Wed Jan 20 17:11:21 CST 2016\nCertificate fingerprints:\n MD5:  64:44:64:27:85:99:01:22:49:FC:41:DA:F7:A8:4C:35\n SHA1: 48:57:3A:DB:1B:16:92:E6:CC:90:8B:D3:A7:A3:89:B3:9C:9B:7C:BB\n SHA256: B6:B2:22:A0:64:61:DB:53:33:04:78:77:38:AF:D2:A0:60:37:A6:CB:3F:\n3C:47:CC:30:5F:02:86:8F:68:84:7D\n Signature algorithm name: SHA1withDSA\n Version: 3\n\nExtensions:\n\n#1: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 07 D9 51 BE A7 48 23 34   5F 8E C6 F9 88 C0 36 CA  ..Q..H#4_.....6.\n0010: 27 8E 04 22                                        '..\"\n]\n]\n\n```", "```java\nkeytool -genkeypair -alias mykeystore -keystore keystore.jks -keypass password -storepass password -dname \"cn=some name, ou=development, o=mycom.com, l=some city, st=some state c=jv\n\n```", "```java\nkeytool -genkeypair -alias server -keyalg RSA -keysize 1024 -storetype jceks -validity 365 -keypass password -keystore serverkeystore.jck -storepass password -dname \"cn=localhost, ou=Department, o=MyComp Inc, l=Some City, st=JV c=US\n\n```", "```java\nkeytool -genkeypair -alias client -keyalg RSA -keysize 1024 -storetype jceks -validity 365 -keypass password -keystore clientkeystore.jck -storepass password -dname \"cn=localhost, ou=Department, o=MyComp Inc, l=Some City, st=JV c=US\n\n```", "```java\nkeytool -export -alias client -storetype jceks -keystore clientkeystore.jck -storepass password -file client.crt\n\n```", "```java\nkeytool -export -alias server -storetype jceks -keystore serverkeystore.jck -storepass password -file server.crt\n\n```", "```java\nkeytool -importcert -alias server -file server.crt -keystore clienttruststore.jck -keypass password -storepass storepassword\n\n```", "```java\nOwner: CN=localhost, OU=Department, O=MyComp Inc, L=Some City, ST=\"JV c=US\"\nIssuer: CN=localhost, OU=Department, O=MyComp Inc, L=Some City, ST=\"JV c=US\"\nSerial number: 2d924315\nValid from: Tue Oct 20 19:26:00 CDT 2015 until: Wed Oct 19 19:26:00 CDT 2016\nCertificate fingerprints:\n MD5:  9E:3D:0E:D7:02:7A:F5:23:95:1E:24:B0:55:A9:F7:95\n SHA1: 69:87:CE:EE:11:59:8F:40:A8:14:DA:D3:92:D0:3F:B6:A9:5A:7B:53\n SHA256: BF:C1:7B:6D:D0:39:67:2D:1C:68:27:79:31:AA:B8:70:2B:FD:1C:85:18:\nEC:5B:D7:4A:48:03:FA:F1:B8:CD:4E\n Signature algorithm name: SHA256withRSA\n Version: 3\n\nExtensions:\n\n#1: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: D3 63 C9 60 6D 04 49 75   FB E8 F7 90 30 1D C6 C1  .c.`m.Iu....0...\n0010: 10 DF 00 CF                                        ....\n]\n]\n\nTrust this certificate? [no]:  yes\nCertificate was added to keystore\n\n```", "```java\nkeytool -importcert -alias client -file client.crt -keystore servertruststore.jck -keypass password -storepass password\n\n```", "```java\nOwner: CN=localhost, OU=Department, O=MyComp Inc, L=Some City, ST=\"JV c=US\"\nIssuer: CN=localhost, OU=Department, O=MyComp Inc, L=Some City, ST=\"JV c=US\"\nSerial number: 5d5f3c40\nValid from: Tue Oct 20 19:27:31 CDT 2015 until: Wed Oct 19 19:27:31 CDT 2016\nCertificate fingerprints:\n MD5:  0E:FE:B3:EB:1B:D2:AD:32:9C:BC:FB:43:40:85:C1:A7\n SHA1: 90:14:1E:17:DF:51:79:0B:1E:A3:EC:38:6B:BA:A6:F4:6F:BF:B6:D2\n SHA256: 7B:3E:D8:2C:04:ED:E5:52:AE:B4:00:A8:63:A1:13:A7:E1:8E:59:63:E8:\n86:38:D8:09:55:EA:3A:7C:F7:EC:4B\n Signature algorithm name: SHA256withRSA\n Version: 3\n\nExtensions:\n\n#1: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: D9 53 34 3B C0 11 F8 75   0F 18 4E 18 23 A2 47 FE  .S4;...u..N.#.G.\n0010: E6 F5 C1 AF                                        ....\n]\n]\n\nTrust this certificate? [no]:  yes\nCertificate was added to keystore\n\n```", "```java\npublic class SymmetricKeyStoreCreation {\n\n    private static KeyStore createKeyStore(String fileName, \n            String pw) {\n        ...\n    }\n\n    public static void main(String[] args) {\n        ...\n    }\n}\n```", "```java\n    private static KeyStore createKeyStore(String fileName, \n            String password) {\n        try {\n            File file = new File(fileName);\n\n            final KeyStore keyStore = \n                KeyStore.getInstance(\"JCEKS\");\n            if (file.exists()) {\n                keyStore.load(new FileInputStream(file), \n                    password.toCharArray());\n            } else {\n                keyStore.load(null, null);\n                keyStore.store(new FileOutputStream(fileName), \n                    password.toCharArray());\n            }\n            return keyStore;\n        } catch (KeyStoreException | IOException | \n                NoSuchAlgorithmException | \n                CertificateException ex) {\n            // Handle exceptions\n        }\n        return null;\n    }\n```", "```java\n    public static void main(String[] args) {\n        try {\n            final String keyStoreFile = \"secretkeystore.jks\";\n            KeyStore keyStore = createKeyStore(keyStoreFile, \n                \"keystorepassword\");\n            KeyGenerator keyGenerator = \n                KeyGenerator.getInstance(\"AES\");\n            SecretKey secretKey = keyGenerator.generateKey();\n            ...\n        } catch (Exception ex) {\n            // Handle exceptions\n        }\n    }\n```", "```java\n            KeyStore.SecretKeyEntry keyStoreEntry\n                    = new KeyStore.SecretKeyEntry(secretKey);\n            KeyStore.PasswordProtection keyPassword = \n                new  KeyStore.PasswordProtection(\n                        \"keypassword\".toCharArray());\n```", "```java\n            keyStore.setEntry(\"secretKey\", keyStoreEntry, \n                keyPassword);\n```", "```java\n            keyStore.store(new FileOutputStream(keyStoreFile),\n                    \"keystorepassword\".toCharArray());\n```", "```java\npublic class SymmetricEchoServer {\n    private static Cipher cipher;\n\n    public static String decrypt(String encryptedText, \n        SecretKey secretKey) {\n        ...\n    }\n\n    private static SecretKey getSecretKey() {\n        ...\n    }\n\n    public static void main(String[] args) {\n        ...\n    }\n}\n```", "```java\n    private static SecretKey getSecretKey() {\n        SecretKey keyFound = null;\n        try {\n            File file = new File(\"secretkeystore.jks\");\n            final KeyStore keyStore = \n                KeyStore.getInstance(\"JCEKS\");\n            keyStore.load(new FileInputStream(file),\n                    \"keystorepassword\".toCharArray());\n            KeyStore.PasswordProtection keyPassword = \n                new KeyStore.PasswordProtection(\n                        \"keypassword\".toCharArray());\n            KeyStore.Entry entry = \n                keyStore.getEntry(\"secretKey\", keyPassword);\n            keyFound = \n                ((KeyStore.SecretKeyEntry) entry).getSecretKey();\n        } catch (KeyStoreException | IOException | \n                NoSuchAlgorithmException | \n                CertificateException ex) {\n            // Handle exceptions\n        } catch (UnrecoverableEntryException ex) {\n            // Handle exceptions;\n        } \n        return keyFound;\n    }\n```", "```java\n            String decryptedText = decrypt(inputLine, \n                getSecretKey());\n```", "```java\n    public static void main(String[] args) {\n        System.out.println(\"Simple Echo Server\");\n        try (ServerSocket serverSocket = new ServerSocket(6000)) {\n            System.out.println(\"Waiting for connection.....\");\n\n            Socket clientSocket = serverSocket.accept();\n            System.out.println(\"Connected to client\");\n\n            try (BufferedReader br = new BufferedReader(\n                new InputStreamReader(\n                    clientSocket.getInputStream()));\n                    PrintWriter out = new PrintWriter(\n                        clientSocket.getOutputStream(), true)) {\n                String inputLine;\n                while ((inputLine = br.readLine()) != null) {\n                    String decryptedText = \n                        decrypt(inputLine, getSecretKey());\n                    System.out.println(\"Client request: \" + \n                        decryptedText);\n                    out.println(decryptedText;\n                }\n\n            } catch (IOException ex) {\n                // Handle exceptions\n            } catch (Exception ex) {\n                // Handle exceptions\n            }\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n        System.out.println(\"Simple Echo Server Terminating\");\n    }\n```", "```java\npublic class SymmetricEchoClient {\n    private static Cipher cipher;\n\n    public static String encrypt(String plainText, \n            SecretKey secretKey) {\n        ...\n    }\n\n        ...\n    }\n\n    public static void main(String args[]) {\n        ...\n    } \n}\n```", "```java\n            String encryptedText = encrypt(inputLine, \n                getSecretKey());\n```", "```java\n    public static void main(String args[]) {\n        System.out.println(\"Simple Echo Client\");\n\n        try (Socket clientSocket\n                = new Socket(InetAddress.getLocalHost(), 6000);\n                PrintWriter out = new PrintWriter(\n                        clientSocket.getOutputStream(), true);\n                BufferedReader br = new BufferedReader(\n                        new InputStreamReader(\n                                clientSocket.getInputStream()))) {\n            System.out.println(\"Connected to server\");\n            Scanner scanner = new Scanner(System.in);\n\n            while (true) {\n                System.out.print(\"Enter text: \");\n                String inputLine = scanner.nextLine();\n                if (\"quit\".equalsIgnoreCase(inputLine)) {\n                    break;\n                }\n                String encryptedText = \n                    encrypt(inputLine, getSecretKey());\n                System.out.println(\n                    \"Encrypted Text After Encryption: \"\n                    + encryptedText);\n                out.println(encryptedText);\n\n                String response = br.readLine();\n                System.out.println(\n                    \"Server response: \" + response);\n            }\n        } catch (IOException ex) {\n            // Handle exceptions\n        } catch (Exception ex) {\n            // Handle exceptions\n        }\n    }\n```", "```java\npublic class AsymmetricEchoServer {\n\n    public static void main(String[] args) {\n        System.out.println(\"Simple Echo Server\");\n        try (ServerSocket serverSocket = new ServerSocket(6000)) {\n            System.out.println(\"Waiting for connection.....\");\n            Socket clientSocket = serverSocket.accept();\n            System.out.println(\"Connected to client\");\n            ...\n\n        } catch (IOException | NoSuchAlgorithmException | \n                 NoSuchPaddingException ex) {\n            // Handle exceptions\n        }\n        System.out.println(\"Simple Echo Server Terminating\");\n    }\n}\n```", "```java\n            try (DataInputStream in = new DataInputStream(\n                    clientSocket.getInputStream());\n                    PrintWriter out = new PrintWriter(\n                         clientSocket.getOutputStream(), true);) {\n                byte[] inputLine = new byte[171];\n                ...\n                }\n            } catch (IOException ex) {\n                // Handle exceptions\n            } catch (Exception ex) {\n                // Handle exceptions\n            }\n```", "```java\n                PrivateKey privateKey = \n                    AsymmetricKeyUtility.getPrivateKey();\n```", "```java\n                while (true) {\n                    int length = in.read(inputLine);\n                    String buffer = AsymmetricKeyUtility.decrypt(\n                        privateKey, inputLine);\n                    System.out.println(\n                        \"Client request: \" + buffer);\n\n                    if (\"quit\".equalsIgnoreCase(buffer)) {\n                        break;\n                    }\n                    out.println(buffer);\n```", "```java\npublic class AsymmetricEchoClient {\n\n    public static void main(String args[]) {\n        System.out.println(\"Simple Echo Client\");\n\n        try (Socket clientSocket\n                = new Socket(InetAddress.getLocalHost(), 6000);\n                DataOutputStream out = new DataOutputStream(\n                        clientSocket.getOutputStream());\n                BufferedReader br = new BufferedReader(\n                        new InputStreamReader(\n                                clientSocket.getInputStream()));\n                DataInputStream in = new DataInputStream(\n                        clientSocket.getInputStream())) {\n            System.out.println(\"Connected to server\");\n            ...\n            }\n        } catch (IOException ex) {\n            // Handle exceptions\n        } catch (Exception ex) {\n            // Handle exceptions\n        }\n    }\n}\n```", "```java\n            Scanner scanner = new Scanner(System.in);\n            PublicKey publicKey = \n                AsymmetricKeyUtility.getPublicKey();\n```", "```java\n            while (true) {\n                System.out.print(\"Enter text: \");\n                String inputLine = scanner.nextLine();\n\n                byte[] encodedData = \n                    AsymmetricKeyUtility.encrypt(\n                        publicKey, inputLine);\n                System.out.println(encodedData);\n\n                out.write(encodedData);\n                if (\"quit\".equalsIgnoreCase(inputLine)) {\n                    break;\n                }\n                String message = br.readLine();\n                System.out.println(\"Server response: \" + message);\n```", "```java\npublic class SSLServer {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"SSL Server Started\");\n        Security.addProvider(new Provider());\n        System.setProperty(\"javax.net.ssl.keyStore\", \n            \"keystore.jks\");\n        System.setProperty(\"javax.net.ssl.keyStorePassword\", \n            \"password\");\n        ...\n\n    }\n\n}\n```", "```java\n        SSLServerSocketFactory sslServerSocketfactory =\n            (SSLServerSocketFactory) \n            SSLServerSocketFactory.getDefault();\n        SSLServerSocket sslServerSocket = (SSLServerSocket) \n                sslServerSocketfactory.createServerSocket(5000);\n        System.out.println(\"Waiting for a connection\");\n        SSLSocket sslSocket = \n            (SSLSocket) sslServerSocket.accept();\n        System.out.println(\"Connection established\");\n```", "```java\n        PrintWriter pw = \n            new PrintWriter(sslSocket.getOutputStream(), true);\n        BufferedReader br = new BufferedReader(\n            new InputStreamReader(sslSocket.getInputStream()));\n```", "```java\n        String inputLine;\n        while ((inputLine = br.readLine()) != null) {\n            pw.println(inputLine);\n            if (\"quit\".equalsIgnoreCase(inputLine)) {\n                break;\n            }\n            System.out.println(\"Receiving: \" + inputLine);\n        }\n```", "```java\npublic class SSLClient {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"SSL Client Started\");\n        Security.addProvider(new Provider());\n        System.setProperty(\"javax.net.ssl.trustStore\", \n            \"keystore.jks\");\n        System.setProperty(\"javax.net.ssl.trustStorePassword\", \n            \"password\");\n\n        SSLSocketFactory sslsocketfactory = (SSLSocketFactory) \n            SSLSocketFactory.getDefault();\n        SSLSocket sslSocket = (SSLSocket) \n            sslsocketfactory.createSocket(\"localhost\", 5000);\n        System.out.println(\n            \"Connection to SSL Server Established\");\n\n        PrintWriter pw = \n            new PrintWriter(sslSocket.getOutputStream(), true);\n        BufferedReader in = new BufferedReader(\n            new InputStreamReader(sslSocket.getInputStream()));\n\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            System.out.print(\"Enter a message: \");\n            String message = scanner.nextLine();\n            pw.println(message);\n            System.out.println(\"Sending: \" + in.readLine());\n            if (\"quit\".equalsIgnoreCase(message)) {\n                break;\n            }\n        }\n        pw.close();\n        in.close();\n        sslSocket.close();\n    }\n}\n```", "```java\n    MessageDigest messageDigest =\n        MessageDigest.getInstance(\"SHA-256\");\n    messageDigest.update(message.getBytes());\n```", "```java\npublic class SHAHashingExample {\n\n    public static void main(String[] args) throws Exception {\n        SHAHashingExample example = new SHAHashingExample();\n        String message = \"This is a simple text message\";\n        byte hashValue[] = example.getHashValue(message);\n        example.displayHashValue(hashValue);\n    }\n\n    public void displayHashValue(byte hashValue[]) {\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < hashValue.length; i++) {\n            builder.append(Integer.toString((hashValue[i] & 0xff) \n                + 0x100, 16).substring(1));\n        }\n        System.out.println(\"Hash Value: \" + builder.toString());\n    }\n\n    public byte[] getHashValue(String message) {\n        try {\n            MessageDigest messageDigest = \n                MessageDigest.getInstance(\"SHA-256\");\n            messageDigest.update(message.getBytes());\n            return messageDigest.digest();\n        } catch (NoSuchAlgorithmException ex) {\n            // Handle exceptions\n        }\n        return null;\n    }\n}\n```"]