["```cs\nint[] intArray = \n{ \n  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, \n  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29, \n  30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49 \n}; \n\n```", "```cs\npublic partial class Program \n{  \n  public static void ExtractArray() \n  { \n    IEnumerable<int> extractedData = \n      System.Linq.Enumerable.Where \n      (intArray, i => i.IsPrime()); \n    Console.WriteLine \n      (\"Prime Number from 0 - 49 are:\"); \n    foreach (int i in extractedData) \n      Console.Write(\"{0} \\t\", i); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic static class ExtensionMethods \n{ \n  public static bool IsPrime(this int i) \n  { \n    if ((i % 2) == 0) \n    { \n      return i == 2; \n    } \n    int sqrt = (int)Math.Sqrt(i); \n    for (int t = 3; t <= sqrt; t = t + 2) \n    { \n      if (i % t == 0) \n      { \n        return false; \n      } \n    } \n    return i != 1; \n  } \n} \n\n```", "```cs\nIEnumerable<int> extractedData = \n  System.Linq.Enumerable.Where \n    (intArray, i => i.IsPrime()); \n\n```", "```cs\nIEnumerable<int> extractedData = \n  intArray.Where(i => i.IsPrime()); \n\n```", "```cs\npublic partial class Program \n{ \n  public static void ExtractArrayWithMethodSyntax() \n  { \n    IEnumerable<int> extractedData = \n       intArray.Where(i => i.IsPrime()); \n    Console.WriteLine(\"Prime Number from 0 - 49 are:\"); \n    foreach (int i in extractedData) \n      Console.Write(\"{0} \\t\", i); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void DeferredExecution() \n  { \n    List memberList = new List() \n    { \n      new Member \n      { \n        ID = 1, \n        Name = \"Eddie Morgan\", \n        Gender = \"Male\", \n        MemberSince = new DateTime(2016, 2, 10) \n      }, \n      new Member \n      { \n        ID = 2, \n        Name = \"Millie Duncan\", \n        Gender = \"Female\", \n        MemberSince = new DateTime(2015, 4, 3) \n      }, \n      new Member \n      { \n        ID = 3, \n        Name = \"Thiago Hubbard\", \n        Gender = \"Male\", \n        MemberSince = new DateTime(2014, 1, 8) \n      }, \n      new Member \n      { \n        ID = 4, \n        Name = \"Emilia Shaw\", \n        Gender = \"Female\", \n        MemberSince = new DateTime(2015, 11, 15) \n      } \n    }; \n    IEnumerable<Member> memberQuery = \n      from m in memberList \n      where m.MemberSince.Year > 2014 \n      orderby m.Name \n      select m; \n      memberList.Add(new Member \n      { \n        ID = 5, \n        Name = \"Chloe Day\", \n        Gender = \"Female\", \n        MemberSince = new DateTime(2016, 5, 28) \n      }); \n    foreach (Member m in memberQuery) \n    { \n      Console.WriteLine(m.Name); \n    } \n  } \n} \n\n```", "```cs\npublic class Member \n{ \n  public int ID { get; set; } \n  public string Name { get; set; } \n  public string Gender { get; set; } \n  public DateTime MemberSince { get; set; } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void NonDeferred() \n  { \n    List<int> intList = new List<int> \n    { \n      0,  1,  2,  3,  4,  5,  6,  7,  8,  9 \n    }; \n    IEnumerable<int> queryInt = intList.Select(i => i * 2); \n    int queryIntCount = queryInt.Count(); \n    List<int> queryIntCached = queryInt.ToList(); \n    int queryIntCachedCount = queryIntCached.Count(); \n    intList.Clear(); \n    Console.WriteLine( \n      String.Format( \n        \"Enumerate queryInt.Count {0}.\", queryIntCount)); \n    foreach (int i in queryInt) \n    { \n      Console.WriteLine(i); \n    } \n    Console.WriteLine(String.Format( \n      \"Enumerate queryIntCached.Count {0}.\",\n      queryIntCachedCount)); \n    foreach (int i in queryIntCached) \n    { \n      Console.WriteLine(i); \n    } \n  } \n} \n\n```", "```cs\nIEnumerable<int> queryInt = \n  intList.Select(i => i * 2); \nint queryIntCount = queryInt.Count(); \n\n```", "```cs\nIEnumerable<int> queryInt = \n  intList \n    .Select(i => i * 2); \n    .Count(); \n\n```", "```cs\nIEnumerable<Member> memberQuery = \n  from m in memberList \n  where m.MemberSince.Year > 2014 \n  orderby m.Name \n  select m; \n\n```", "```cs\nIEnumerable<Member> memberQuery = \n  memberList \n  .Where(m => m.MemberSince.Year > 2014) \n  .OrderBy(m => m.Name) \n  .Select(m => m); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void UsingExtensionMethod() \n  { \n    IEnumerable<string> query = names \n      .Where(n => n.Length > 4) \n      .OrderBy(n => n[0]) \n      .Select(n => n.ToUpper()); \n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static List<string> names = new List<string> \n  { \n    \"Howard\", \"Pat\", \n    \"Jaclyn\", \"Kathryn\", \n    \"Ben\", \"Aaron\", \n    \"Stacey\", \"Levi\", \n    \"Patrick\", \"Tara\", \n    \"Joe\", \"Ruby\", \n    \"Bruce\", \"Cathy\", \n    \"Jimmy\", \"Kim\", \n    \"Kelsey\", \"Becky\", \n    \"Scott\", \"Dick\" \n  }; \n} \n\n```", "```cs\nIEnumerable<string> query =  \n  names \n  .Where(n => n.Length > 4) \n  .OrderBy(n => n[0]) \n  .Select(n => n.ToUpper()); \n\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource>( \n  this IEnumerable<TSource> source, \n  Func<TSource, bool> predicate \n) \n\npublic static IEnumerable<TSource> OrderBy<TSource, TKey>( \n  this IEnumerable<TSource> source, \n  Func<TSource, TKey> keySelector \n) \n\npublic static IEnumerable<TResult> Select<TSource, TResult>( \n  this IEnumerable<TSource> source, \n  Func<TSource, TResult> selector \n) \n\n```", "```cs\nIEnumerable<string> query = Enumerable.Select(\n  Enumerable.OrderBy(Enumerable.Where(names, n => n.Length > 4),\n  n => n[0]), n => n.ToUpper());\n```", "```cs\npublic partial class Program \n{ \n  private static void UsingStaticMethod() \n  { \n    IEnumerable<string> query = \n     Enumerable.Select( \n      Enumerable.OrderBy( \n       Enumerable.Where( \n        names, n => n.Length > 4),  \n         n => n[0]), n => n.ToUpper()); \n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void InvokingQueryExpression() \n  { \n    IEnumerable<string> query = \n      from n in names \n      where n.Length > 4 \n      orderby n[0] \n      select n.ToUpper(); \n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void SimplyTakeAndSkipOperator() \n  { \n    IEnumerable<int> queryTake = \n       intList.Take(10); \n    Console.WriteLine(\"Take operator\"); \n    foreach (int i in queryTake) \n    { \n      Console.Write(String.Format(\"{0}\\t\", i)); \n    } \n    Console.WriteLine(); \n    IEnumerable<int> querySkip = intList.Skip(10); \n    Console.WriteLine(\"Skip operator\"); \n    foreach (int i in querySkip) \n    { \n      Console.Write(String.Format(\"{0}\\t\", i)); \n    } \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \nstatic List<int> intList = new List<int> \n  { \n    0,  1,  2,  3,  4, \n    5,  6,  7,  8,  9, \n    10, 11, 12, 13, 14, \n    15, 16, 17, 18, 19 \n  }; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void NoTakeSkipOperator() \n  { \n    IEnumerable<int> intCollection = \n       Enumerable.Range(1, 1000000); \n    IEnumerable<int> hugeQuery = \n        intCollection \n      .Where(h => h % 2 == 0 && h % 7 == 0); \n    foreach (int x in hugeQuery) \n    { \n      Console.WriteLine(x); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void TakeAndSkipOperator() \n  { \n    IEnumerable<int> intCollection = \n       Enumerable.Range(1, 1000000); \n    IEnumerable<int> hugeQuery = \n       intCollection \n         .Where(h => h % 2 == 0 && h % 7 == 0); \n    int pageSize = 10; \n    for (int i = 0; i < hugeQuery.Count()/ pageSize; i++) \n    { \n      IEnumerable<int> paginationQuery =hugeQuery \n        .Skip(i * pageSize) \n        .Take(pageSize); \n      foreach (int x in paginationQuery) \n      { \n        Console.WriteLine(x); \n      } \n      Console.WriteLine( \n         \"Press Enter to continue, \" + \n           \"other key will stop process!\"); \n      if (Console.ReadKey().Key != ConsoleKey.Enter) \n        break; \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void TakeWhileAndSkipWhileOperators() \n  { \n    int[] intArray = { 10, 4, 27, 53, 2, 96, 48 }; \n    IEnumerable<int> queryTakeWhile = \n       intArray.TakeWhile(n => n < 50); \n    Console.WriteLine(\"TakeWhile operator\"); \n    foreach (int i in queryTakeWhile) \n    { \n      Console.Write(String.Format(\"{0}\\t\", i)); \n    } \n    Console.WriteLine(); \n    IEnumerable<int> querySkipWhile = \n       intArray.SkipWhile(n => n < 50); \n    Console.WriteLine(\"SkipWhile operator\"); \n    foreach (int i in querySkipWhile) \n    { \n      Console.Write(String.Format(\"{0}\\t\", i)); \n    } \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void DistinctOperator() \n  { \n    string words = \"TheQuickBrownFoxJumpsOverTheLazyDog\"; \n       IEnumerable <char> queryDistinct = words.Distinct(); \n    string distinctWords = \"\"; \n    foreach (char c in queryDistinct) \n    { \n      distinctWords += c.ToString(); \n    } \n    Console.WriteLine(distinctWords); \n  } \n} \n\n```", "```cs\nIEnumerable<Member> memberQuery = \n  from m in memberList \n  where m.MemberSince.Year > 2014 \n  orderby m.Name \n  select m; \n\n```", "```cs\nIEnumerable<RecentMember> memberQuery = \n  from m in memberList \n  where m.MemberSince.Year > 2014 \n  orderby m.Name \n  select new RecentMember{ \n    FirstName = m.Name.GetFirstName(), \n    LastName = m.Name.GetLastName(), \n    Gender = m.Gender, \n    MemberSince = m.MemberSince, \n    Status = \"Valid\" \n}; \n\n```", "```cs\npublic class RecentMember \n{ \n  public string FirstName { get; set; } \n  public string LastName { get; set; } \n  public string Gender { get; set; } \n  public DateTime MemberSince { get; set; } \n  public string Status { get; set; } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void SelectOperator() \n  { \n    List<Member> memberList = new List<Member>() \n    { \n      new Member \n      { \n        ID = 1, \n        Name = \"Eddie Morgan\", \n        Gender = \"Male\", \n        MemberSince = new DateTime(2016, 2, 10) \n      }, \n      new Member \n      { \n        ID = 2, \n        Name = \"Millie Duncan\", \n        Gender = \"Female\", \n        MemberSince = new DateTime(2015, 4, 3) \n      }, \n      new Member \n      { \n        ID = 3, \n        Name = \"Thiago Hubbard\", \n        Gender = \"Male\", \n        MemberSince = new DateTime(2014, 1, 8) \n      }, \n      new Member \n      { \n        ID = 4, \n        Name = \"Emilia Shaw\", \n        Gender = \"Female\", \n        MemberSince = new DateTime(2015, 11, 15) \n      } \n    }; \n    IEnumerable<RecentMember> memberQuery = \n      from m in memberList \n      where m.MemberSince.Year > 2014 \n      orderby m.Name \n      select new RecentMember{ \n        FirstName = m.Name.GetFirstName(), \n        LastName = m.Name.GetLastName(), \n        Gender = m.Gender, \n        MemberSince = m.MemberSince, \n        Status = \"Valid\" \n      }; \n    foreach (RecentMember rm in memberQuery) \n    { \n      Console.WriteLine( \n         \"First Name  : \" + rm.FirstName); \n      Console.WriteLine( \n         \"Last Name   : \" + rm.LastName); \n      Console.WriteLine( \n         \"Gender      : \" + rm.Gender); \n      Console.WriteLine \n         (\"Member Since: \" + rm.MemberSince.ToString(\"dd/MM/yyyy\")); \n      Console.WriteLine( \n         \"Status      : \" + rm.Status); \n      Console.WriteLine(); \n    } \n  } \n} \n\n```", "```cs\nIEnumerable<RecentMember> memberQuery = \n   memberList \n  .Where(m => m.MemberSince.Year > 2014) \n  .OrderBy(m => m.Name) \n  .Select(m => new RecentMember \n{ \n  FirstName = m.Name.GetFirstName(), \n  LastName = m.Name.GetLastName(), \n  Gender = m.Gender, \n  MemberSince = m.MemberSince, \n  Status = \"Valid\" \n}); \n\n```", "```cs\npublic partial class Program \n{ \n  public static void SelectManyOperator() \n  { \n    List<string> numberTypes = new List<string>() \n    { \n      \"Multiplied by 2\", \n      \"Multiplied by 3\" \n    }; \n    List<int> numbers = new List<int>() \n    { \n      6, 12, 18, 24 \n    }; \n    IEnumerable<NumberType> query = \n       numbers.SelectMany( \n          num => numberTypes,  \n          (n, t) =>new NumberType \n          { \n            TheNumber = n, \n            TheType = t \n          }); \n    foreach (NumberType nt in query) \n    { \n      Console.WriteLine(String.Format( \n         \"Number: {0,2} - Types: {1}\", \n           nt.TheNumber, \n             nt.TheType)); \n    } \n  } \n} \n\n```", "```cs\npublic class NumberType \n{ \n  public int TheNumber { get; set; } \n  public string TheType { get; set; } \n} \n\n```", "```cs\npublic static IEnumerable<TResult> SelectMany<TSource, TResult>( \n  this IEnumerable<TSource> source, \n  Func<TSource, IEnumerable<TResult>> selector) \n{ \n  foreach (TSource element in source) \n  foreach (TResult subElement in selector (element)) \n  yield return subElement; \n} \n\n```", "```cs\nIEnumerable<NumberType> query = \n  from n in numbers \n  from t in numberTypes \n  select new NumberType \n{ \n  TheNumber = n, \n  TheType = t \n}; \n\n```", "```cs\npublic partial class Program \n{ \n  public static void JoinOperator() \n  { \n    Course hci = new Course{ \n      Title = \"Human Computer Interaction\", \n      CreditHours = 3}; \n    Course iis = new Course{ \n      Title = \"Information in Society\", \n      CreditHours = 2}; \n    Course modr = new Course{ \n      Title = \"Management of Digital Records\", \n      CreditHours = 3}; \n    Course micd = new Course{ \n      Title = \"Moving Image Collection Development\", \n      CreditHours = 2}; \n    Student carol = new Student{ \n      Name = \"Carol Burks\", \n      CourseTaken = modr}; \n    Student river = new Student{ \n      Name = \"River Downs\", \n      CourseTaken = micd}; \n    Student raylee = new Student{ \n      Name = \"Raylee Price\", \n      CourseTaken = hci}; \n    Student jordan = new Student{ \n      Name = \"Jordan Owen\", \n      CourseTaken = modr}; \n    Student denny = new Student{ \n      Name = \"Denny Edwards\", \n      CourseTaken = hci}; \n    Student hayden = new Student{ \n      Name = \"Hayden Winters\", \n      CourseTaken = iis}; \n    List<Course> courses = new List<Course>{\n      hci, iis, modr, micd};\n    List<Student> students = new List<Student>{\n      carol, river, raylee, jordan, denny, hayden}; \n    var query = courses.Join( \n      students, \n      course => course, \n      student => student.CourseTaken, \n      (course, student) => \n        new {StudentName = student.Name, \n          CourseTaken = course.Title }); \n    foreach (var item in query) \n    { \n      Console.WriteLine( \n        \"{0} - {1}\", \n        item.StudentName, \n        item.CourseTaken); \n    } \n  } \n} \n\n```", "```cs\npublic class Student \n{ \n  public string Name { get; set; } \n  public Course CourseTaken { get; set; } \n} \npublic class Course \n{ \n  public string Title { get; set; } \n  public int CreditHours { get; set; } \n} \n\n```", "```cs\nvar query = \nfrom c in courses \njoin s in students on c.Title equals s.CourseTaken.Title \nselect new { \n  StudentName = s.Name, \n  CourseTaken = c.Title }; \n\n```", "```cs\npublic partial class Program \n{ \n  public static void GroupJoinOperator() \n  { \n    Course hci = new Course{ \n      Title = \"Human Computer Interaction\", \n      CreditHours = 3}; \n\n    Course iis = new Course{ \n      Title = \"Information in Society\", \n      CreditHours = 2}; \n\n    Course modr = new Course{ \n      Title = \"Management of Digital Records\", \n      CreditHours = 3}; \n\n    Course micd = new Course{ \n      Title = \"Moving Image Collection Development\", \n      CreditHours = 2}; \n\n    Student carol = new Student{ \n      Name = \"Carol Burks\", \n      CourseTaken = modr}; \n\n    Student river = new Student{ \n      Name = \"River Downs\", \n      CourseTaken = micd}; \n\n    Student raylee = new Student{ \n      Name = \"Raylee Price\", \n      CourseTaken = hci}; \n\n    Student jordan = new Student{ \n      Name = \"Jordan Owen\", \n      CourseTaken = modr}; \n\n    Student denny = new Student{ \n      Name = \"Denny Edwards\", \n      CourseTaken = hci}; \n\n    Student hayden = new Student{ \n      Name = \"Hayden Winters\", \n      CourseTaken = iis}; \n\n    List<Course> courses = new List<Course>{ \n      hci, iis, modr, micd}; \n\n    List<Student> students = new List<Student>{ \n      carol, river, raylee, jordan, denny, hayden}; \n\n    var query = courses.GroupJoin( \n      students, \n      course => course, \n      student => student.CourseTaken, \n      (course, studentCollection) => \n      new{ \n        CourseTaken = course.Title, \n        Students =  \n        studentCollection \n        .Select(student => student.Name) \n      }); \n\n      foreach (var item in query) \n      { \n        Console.WriteLine(\"{0}:\", item.CourseTaken); \n        foreach (string stdnt in item.Students) \n        { \n          Console.WriteLine(\"  {0}\", stdnt); \n        } \n      } \n    } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void OrderByOperator() \n  { \n    IEnumerable<string> query = \n      nameList.OrderBy(n => n); \n\n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static List<string> nameList = new List<string>() \n  { \n    \"Blair\", \"Lane\", \"Jessie\", \"Aiden\", \n    \"Reggie\", \"Tanner\", \"Maddox\", \"Kerry\" \n  }; \n} \n\n```", "```cs\nIEnumerable<string> query = \n  nameList.OrderBy(n => n); \n\n```", "```cs\nIEnumerable<string> query = \n  from n in nameList \n  orderby n \n  select n; \n\n```", "```cs\npublic partial class Program \n{ \n  public static void OrderByOperatorWithComparer() \n  { \n    IEnumerable<string> query = \n      nameList.OrderBy( \n       n => n,  \n      new LastCharacterComparer()); \n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\npublic class LastCharacterComparer : IComparer<string> \n{ \n  public int Compare(string x, string y) \n  { \n    return string.Compare( \n     x[x.Length - 1].ToString(), \n      y[y.Length - 1].ToString()); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void OrderByThenByOperator() \n  { \n    IEnumerable<string> query = nameList \n      .OrderBy(n => n.Length) \n      .ThenBy(n => n); \n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\nIEnumerable<string> query = \n  from n in nameList \n  orderby n.Length, n \n  select n; \n\n```", "```cs\npublic partial class Program \n{ \n  public static void OrderByThenByOperatorWithComparer() \n  { \n    IEnumerable<string> query = nameList \n      .OrderBy(n => n.Length) \n      .ThenBy(n => n, new LastCharacterComparer()); \n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void OrderByDescendingOperator() \n  { \n    IEnumerable<string> query = \n      from n in nameList \n      orderby n descending \n      select n; \n    foreach (string s in query) \n    { \n      Console.WriteLine(s); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void GroupingByFileNameExtension() \n  { \n    IEnumerable<string> fileList =  \n      Directory.EnumerateFiles( \n        @\"G:\\packages\", \"*.*\",  \n        SearchOption.AllDirectories); \n    IEnumerable<IGrouping<string, string>> query = \n      fileList.GroupBy(f => \n      Path.GetFileName(f)[0].ToString()); \n    foreach (IGrouping<string, string> g in query) \n    { \n      Console.WriteLine(); \n      Console.WriteLine( \n         \"File start with the letter: \" +  \n           g.Key); \n      foreach (string filename in g) \n      Console.WriteLine( \n         \"...\" + Path.GetFileName(filename)); \n     } \n  } \n} \n\n```", "```cs\nIEnumerable<IGrouping<string, string>> query = \n  from f in fileList \n  group f by Path.GetFileName(f)[0].ToString(); \n\n```", "```cs\npublic partial class Program \n{ \n  public static void GroupingByInto() \n  { \n    IEnumerable<string> fileList = \n      Directory.EnumerateFiles( \n        @\"G:\\packages\", \"*.*\", \n        SearchOption.AllDirectories); \n    IEnumerable<IGrouping<string, string>> query = \n      from f in fileList \n      group f  \n        by Path.GetFileName(f)[0].ToString() \n        into g \n      orderby g.Key \n      select g; \n    foreach (IGrouping<string, string> g in query) \n    { \n      Console.WriteLine( \n        \"File start with the letter: \" + g.Key); \n      //foreach (string filename in g) \n      Console.WriteLine(           \"...\" + Path.GetFileName(filename)); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void ConcatUnionOperator() \n  { \n    IEnumerable<int> concat = sequence1.Concat(sequence2); \n    IEnumerable<int> union = sequence1.Union(sequence2); \n    Console.WriteLine(\"Concat\"); \n    foreach (int i in concat) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n    Console.WriteLine(\"Union\"); \n    foreach (int i in union) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static int[] sequence1 = { 1, 2, 3, 4, 5, 6 }; \n  static int[] sequence2 = { 3, 4, 5, 6, 7, 8 }; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void IntersectExceptOperator() \n  { \n    IEnumerable<int> intersect = sequence1.Intersect(sequence2); \n    IEnumerable<int> except1 = sequence1.Except(sequence2); \n    IEnumerable<int> except2 = sequence2.Except(sequence1); \n    Console.WriteLine(\"Intersect of Sequence\"); \n    foreach (int i in intersect) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n    Console.WriteLine(\"Except1\"); \n    foreach (int i in except1) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n    Console.WriteLine(\"Except2\"); \n    foreach (int i in except2) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void OfTypeCastSimple() \n  { \n    ArrayList arrayList = new ArrayList(); \n    arrayList.AddRange(new int[] { 1, 2, 3, 4, 5 }); \n\n    IEnumerable<int> sequenceOfType = arrayList.OfType<int>(); \n    IEnumerable<int> sequenceCast = arrayList.Cast<int>(); \n\n    Console.WriteLine( \n      \"OfType of arrayList\"); \n    foreach (int i in sequenceOfType) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n\n    Console.WriteLine( \n      \"Cast of arrayList\"); \n    foreach (int i in sequenceCast) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void OfTypeCastComplex() \n  { \n    ArrayList arrayList = new ArrayList(); \n    arrayList.AddRange( \n      new int[] { 1, 2, 3, 4, 5 }); \n\n    arrayList.AddRange( \n       new string[] {\"Cooper\", \"Shawna\", \"Max\"}); \n    IEnumerable<int> sequenceOfType = \n       arrayList.OfType<int>(); \n    IEnumerable<int> sequenceCast = \n       arrayList.Cast<int>(); \n\n    Console.WriteLine( \n      \"OfType of arrayList\"); \n    foreach (int i in sequenceOfType) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n\n    Console.WriteLine( \n       \"Cast of arrayList\"); \n    foreach (int i in sequenceCast) \n    { \n      Console.Write(\"..\" + i); \n    } \n    Console.WriteLine(); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void FirstLastOperator() \n  { \n    Console.WriteLine( \n      \"First Operator: {0}\", \n      numbers.First()); \n    Console.WriteLine( \n      \"First Operator with predicate: {0}\", \n      numbers.First(n => n % 3 == 0)); \n    Console.WriteLine( \n      \"Last Operator: {0}\", \n      numbers.Last()); \n    Console.WriteLine( \n      \"Last Operator with predicate: {0}\", \n      numbers.Last(n => n % 4 == 0)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static int[] numbers = { \n    1, 2, 3, \n    4, 5, 6, \n    7, 8, 9 \n  }; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void FirstOrDefaultOperator() \n  { \n    Console.WriteLine( \n      \"First Operator with predicate: {0}\", \n      numbers.First(n => n % 10 == 0)); \n    Console.WriteLine( \n      \"First Operator with predicate: {0}\", \n      numbers.FirstOrDefault(n => n % 10 == 0)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void SingleOperator() \n  { \n    Console.WriteLine( \n      \"Single Operator for number can be divided by 7: {0}\", \n      numbers.Single(n => n % 7 == 0)); \n    Console.WriteLine( \n      \"Single Operator for number can be divided by 2: {0}\", \n      numbers.Single(n => n % 2 == 0)); \n\n    Console.WriteLine( \n      \"SingleOrDefault Operator: {0}\", \n      numbers.SingleOrDefault(n => n % 10 == 0)); \n\n    Console.WriteLine( \n      \"SingleOrDefault Operator: {0}\", \n      numbers.SingleOrDefault(n => n % 3 == 0)); \n  } \n} \n\n```", "```cs\nConsole.WriteLine( \n  \"Single Operator for number can be divided by 2: {0}\", \n  numbers.Single(n => n % 2 == 0)); \n\n```", "```cs\nConsole.WriteLine( \n  \"SingleOrDefault Operator: {0}\", \n  numbers.SingleOrDefault(n => n % 3 == 0)); \n\n```", "```cs\npublic partial class Program \n{ \n  public static void ElementAtOperator() \n  { \n    Console.WriteLine( \n      \"ElementAt Operator: {0}\", \n      numbers.ElementAt(5)); \n\n    //Console.WriteLine( \n      //\"ElementAt Operator: {0}\", \n      //numbers.ElementAt(11)); \n\n    Console.WriteLine( \n      \"ElementAtOrDefault Operator: {0}\", \n      numbers.ElementAtOrDefault(11)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void DefaultIfEmptyOperator() \n  { \n    List<int> numbers = new List<int>(); \n\n    //Console.WriteLine( \n      //\"DefaultIfEmpty Operator: {0}\", \n      //numbers.DefaultIfEmpty()); \n\n    foreach (int number in numbers.DefaultIfEmpty()) \n    { \n      Console.WriteLine( \n        \"DefaultIfEmpty Operator: {0}\", number); \n    } \n  } \n} \n\n```"]