["```java\ndrawPoint(0, 0); //Not actual syntax (but very close)\n```", "```java\ndrawPoint(1920, 1080); //Not actual syntax (but very close)\n```", "```java\ndrawLine(0,0,1920, 1080); //Not actual syntax (but very close)\n```", "```java\nImageView ourView = (ImageView) findViewById(R.id.imageView);\n```", "```java\nBitmap ourBitmap = Bitmap.createBitmap(300,600, Bitmap.Config.ARGB_8888);\n```", "```java\nCanvas ourCanvas = new Canvas(ourBitmap);\n```", "```java\nPaint paint = new Paint();\n```", "```java\nourCanvas.drawPoint(0, 0, paint);//How simple is that?\n```", "```java\n    //Get a reference to our ImageView in the layout\n    ImageView ourFrame = (ImageView) findViewById(R.id.imageView);\n\n    //Create a bitmap object to use as our canvas\n    Bitmap ourBitmap = Bitmap.createBitmap(300,600, Bitmap.Config.ARGB_8888);\n    Canvas ourCanvas = new Canvas(ourBitmap);\n\n    //A paint object that does our drawing, on our canvas\n    Paint paint = new Paint();\n    ```", "```java\n    //Set the background color\n    ourCanvas.drawColor(Color.BLACK);\n\n    //Change the color of the virtual paint brush\n    paint.setColor(Color.argb(255, 255, 255, 255));\n\n    //Now draw a load of stuff on our canvas\n    ourCanvas.drawText(\"Score: 42 Lives: 3 Hi: 97\", 10, 10, paint);\n    ourCanvas.drawLine(10, 50, 200, 50, paint);\n    ourCanvas.drawCircle(110, 160, 100, paint);\n    ourCanvas.drawPoint(10, 260, paint);\n\n    //Now put the canvas in the frame\n      ourFrame.setImageBitmap(ourBitmap);\n    ```", "```java\nImageView ourFrame = (ImageView) findViewById(R.id.imageView);\n```", "```java\nBitmap ourBitmap = Bitmap.createBitmap(300,600, Bitmap.Config.ARGB_8888);\nCanvas ourCanvas = new Canvas(ourBitmap);\n```", "```java\nPaint paint = new Paint();\n```", "```java\nourCanvas.drawColor(Color.BLACK);\n```", "```java\npaint.setColor(Color.argb(255, 255, 255, 255));\n```", "```java\nourCanvas.drawText(\"Score: 42 Lives: 3 Hi: 97\", 10, 10, paint);\n```", "```java\nourCanvas.drawLine(10, 50, 200, 50, paint);\n```", "```java\nourCanvas.drawCircle(110, 160, 100, paint);\n```", "```java\nourCanvas.drawPoint(10, 260, paint);\n```", "```java\nourFrame.setImageBitmap(ourBitmap);\n```", "```java\npublic class MainActivity extends Activity implements View.OnTouchListener{\n```", "```java\n@Override\npublic boolean onTouchEvent(MotionEvent motionEvent) {\n  float x = motionEvent.getX();\n  float y = motionEvent.getY();\n  //do something with the x and y values\n  return false;\n}\n```", "```java\nPackage name and various import statements\nMainActivity class starts{\n    Declare some member variables\n    OnCreate method{\n      Initialization and setup\n    }\n    SquashCourtView class{\n      Constructor\n      Multiple methods of SquashCourtView\n    }\n    Some Android lifecycle method overrides\n}\n```", "```java\n    android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\">\n    ```", "```java\n    package com.packtpub.retrosquash.app;\n\n    import android.app.Activity;\n    import android.content.Context;\n    import android.content.res.AssetFileDescriptor;\n    import android.content.res.AssetManager;\n    import android.graphics.Canvas;\n    import android.graphics.Color;\n    import android.graphics.Paint;\n    import android.graphics.Point;\n    import android.media.AudioManager;\n    import android.media.SoundPool;\n    import android.os.Bundle;\n    import android.view.Display;\n    import android.view.KeyEvent;\n    import android.view.MotionEvent;\n    import android.view.SurfaceHolder;\n    import android.view.SurfaceView;\n    import java.io.IOException;\n    import java.util.Random;\n    ```", "```java\n    public class MainActivity extends Activity {\n\n        Canvas canvas;\n        SquashCourtView squashCourtView;\n\n        //Sound\n        //initialize sound variables\n        private SoundPool soundPool;\n        int sample1 = -1;\n        int sample2 = -1;\n        int sample3 = -1;\n        int sample4 = -1;\n\n        //For getting display details like the number of pixels\n        Display display;\n        Point size;\n        int screenWidth;\n        int screenHeight;\n\n        //Game objects\n        int racketWidth;\n        int racketHeight;\n        Point racketPosition;\n\n        Point ballPosition;\n        int ballWidth;\n\n        //for ball movement\n        boolean ballIsMovingLeft;\n        boolean ballIsMovingRight;\n        boolean ballIsMovingUp;\n        boolean ballIsMovingDown;\n\n        //for racket movement\n        boolean racketIsMovingLeft;\n        boolean racketIsMovingRight;\n\n        //stats\n        long lastFrameTime;\n        int fps;\n        int score;\n        int lives;\n    ```", "```java\n    protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            squashCourtView = new SquashCourtView(this);\n            setContentView(squashCourtView);\n\n            //Sound code\n            soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);\n            try {\n                //Create objects of the 2 required classes\n                AssetManager assetManager = getAssets();\n                AssetFileDescriptor descriptor;\n\n                //create our three fx in memory ready for use\n                descriptor = assetManager.openFd(\"sample1.ogg\");\n                sample1 = soundPool.load(descriptor, 0);\n\n                descriptor = assetManager.openFd(\"sample2.ogg\");\n                sample2 = soundPool.load(descriptor, 0);\n\n                descriptor = assetManager.openFd(\"sample3.ogg\");\n                sample3 = soundPool.load(descriptor, 0);\n\n                descriptor = assetManager.openFd(\"sample4.ogg\");\n                sample4 = soundPool.load(descriptor, 0);\n\n            } catch (IOException e) {\n                //catch exceptions here\n            }\n    ```", "```java\n            //Could this be an object with getters and setters\n            //Don't want just anyone changing screen size.\n            //Get the screen size in pixels\n            display = getWindowManager().getDefaultDisplay();\n            size = new Point();\n            display.getSize(size);\n            screenWidth = size.x;\n            screenHeight = size.y;\n\n            //The game objects\n            racketPosition = new Point();\n            racketPosition.x = screenWidth / 2;\n            racketPosition.y = screenHeight - 20;\n            racketWidth = screenWidth / 8;\n            racketHeight = 10;\n\n            ballWidth = screenWidth / 35;\n            ballPosition = new Point();\n            ballPosition.x = screenWidth / 2;\n            ballPosition.y = 1 + ballWidth;\n\n            lives = 3;\n\n        }\n    ```", "```java\n//For getting display details like the number of pixels\nDisplay display;\nPoint size;\nint screenWidth;\nint screenHeight;\n```", "```java\n//Game objects\nint racketWidth;\nint racketHeight;\nPoint racketPosition;\n\nPoint ballPosition;\nint ballWidth;\n```", "```java\n//for ball movement\nboolean ballIsMovingLeft;\nboolean ballIsMovingRight;\nboolean ballIsMovingUp;\nboolean ballIsMovingDown;\n\n//for racket movement\n boolean racketIsMovingLeft;\n boolean racketIsMovingRight;\n```", "```java\nsquashCourtView = new SquashCourtView(this);\nsetContentView(squashCourtView);\n\n```", "```java\ndisplay = getWindowManager().getDefaultDisplay();\nsize = new Point();\ndisplay.getSize(size);\nscreenWidth = size.x;\nscreenHeight = size.y;\n```", "```java\nracketPosition = new Point();\n```", "```java\nracketPosition.x = screenWidth / 2;\n```", "```java\nracketPosition.y = screenHeight - 20;\n```", "```java\nracketWidth = screenWidth / 8;\n```", "```java\nracketHeight = 10;\n```", "```java\nballWidth = screenWidth / 35;\n```", "```java\nballPosition = new Point();\n```", "```java\nballPosition.x = screenWidth / 2;\n```", "```java\nballPosition.y = 1 + ballWidth;\n```", "```java\nlives = 3;\n```", "```java\n    class SquashCourtView extends SurfaceView implements Runnable {\n            Thread ourThread = null;\n            SurfaceHolder ourHolder;\n            volatile boolean playingSquash;\n            Paint paint;\n\n            public SquashCourtView(Context context) {\n                super(context);\n                ourHolder = getHolder();\n                paint = new Paint();\n                ballIsMovingDown = true;\n\n                //Send the ball in random direction\n                Random randomNumber = new Random();\n                int ballDirection = randomNumber.nextInt(3);\n                switch (ballDirection) {\n                    case 0:\n                        ballIsMovingLeft = true;\n                        ballIsMovingRight = false;\n                        break;\n\n                    case 1:\n                        ballIsMovingRight = true;\n                        ballIsMovingLeft = false;\n                        break;\n\n                    case 2:\n                        ballIsMovingLeft = false;\n                        ballIsMovingRight = false;\n                        break;\n                }\n\n            }\n    ```", "```java\n    @Override\n            public void run() {\n                while (playingSquash) {\n                    updateCourt();\n                    drawCourt();\n                    controlFPS();\n\n                }\n\n            }\n    ```", "```java\n    public void updateCourt() {\n                if (racketIsMovingRight) {\n                    racketPosition.x = racketPosition.x + 10;\n                }\n\n                if (racketIsMovingLeft) {\n                    racketPosition.x = racketPosition.x - 10;\n                }\n\n                //detect collisions\n\n                //hit right of screen\n                if (ballPosition.x + ballWidth > screenWidth) {\n                    ballIsMovingLeft = true;\n                    ballIsMovingRight = false;\n                    soundPool.play(sample1, 1, 1, 0, 0, 1);\n                }\n\n                //hit left of screen\n                if (ballPosition.x < 0) {\n                    ballIsMovingLeft = false;\n                    ballIsMovingRight = true;\n                    soundPool.play(sample1, 1, 1, 0, 0, 1);\n                }\n    ```", "```java\n    //Edge of ball has hit bottom of screen\n                if (ballPosition.y > screenHeight - ballWidth) {\n                    lives = lives - 1;\n                    if (lives == 0) {\n                        lives = 3;\n                        score = 0;\n                        soundPool.play(sample4, 1, 1, 0, 0, 1);\n                    }\n                    ballPosition.y = 1 + ballWidth;//back to top of screen\n\n                    //what horizontal direction should we use\n                    //for the next falling ball\n                    Random randomNumber = new Random();\n                    int startX = randomNumber.nextInt(screenWidth - ballWidth) + 1;\n                    ballPosition.x = startX + ballWidth;\n\n                    int ballDirection = randomNumber.nextInt(3);\n                    switch (ballDirection) {\n                        case 0:\n                            ballIsMovingLeft = true;\n                            ballIsMovingRight = false;\n                            break;\n\n                        case 1:\n                            ballIsMovingRight = true;\n                            ballIsMovingLeft = false;\n                            break;\n\n                        case 2:\n                            ballIsMovingLeft = false;\n                            ballIsMovingRight = false;\n                            break;\n                    }\n                }\n    ```", "```java\n    //we hit the top of the screen\n                if (ballPosition.y <= 0) {\n                    ballIsMovingDown = true;\n                    ballIsMovingUp = false;\n                    ballPosition.y = 1;\n                    soundPool.play(sample2, 1, 1, 0, 0, 1);\n                }\n\n                //depending upon the two directions we should\n                //be moving in adjust our x any positions\n                if (ballIsMovingDown) {\n                    ballPosition.y += 6;\n                }\n\n                if (ballIsMovingUp) {\n                    ballPosition.y -= 10;\n                }\n\n                if (ballIsMovingLeft) {\n                    ballPosition.x -= 12;\n                }\n\n                if (ballIsMovingRight) {\n                    ballPosition.x += 12;\n                }\n    ```", "```java\n    //Has ball hit racket\n                if (ballPosition.y + ballWidth >= (racketPosition.y - racketHeight / 2)) {\n                    int halfRacket = racketWidth / 2;\n                    if (ballPosition.x + ballWidth > (racketPosition.x - halfRacket)\n                        && ballPosition.x - ballWidth < (racketPosition.x + halfRacket)) {\n                        //rebound the ball vertically and play a sound\n                        soundPool.play(sample3, 1, 1, 0, 0, 1);\n                        score++;\n                        ballIsMovingUp = true;\n                        ballIsMovingDown = false;\n                        //now decide how to rebound the ball horizontally\n                        if (ballPosition.x > racketPosition.x) {\n                            ballIsMovingRight = true;\n                            ballIsMovingLeft = false;\n\n                        } else {\n                            ballIsMovingRight = false;\n                            ballIsMovingLeft = true;\n                        }\n\n                    }\n                }\n            }\n    }\n    ```", "```java\nclass SquashCourtView extends SurfaceView implements Runnable {\n        Thread ourThread = null;\n        SurfaceHolder ourHolder;\n        volatile boolean playingSquash;\n        Paint paint;\n```", "```java\n        public SquashCourtView(Context context) {\n            super(context);\n            ourHolder = getHolder();\n            paint = new Paint();\n```", "```java\n            ballIsMovingDown = true;\n\n            //Send the ball in random direction\n            Random randomNumber = new Random();\n            int ballDirection = randomNumber.nextInt(3);\n            switch (ballDirection) {\n                case 0:\n                    ballIsMovingLeft = true;\n                    ballIsMovingRight = false;\n                    break;\n\n                case 1:\n                    ballIsMovingRight = true;\n                    ballIsMovingLeft = false;\n                    break;\n\n                case 2:\n                    ballIsMovingLeft = false;\n                    ballIsMovingRight = false;\n                    break;\n            }\n\n        }\n```", "```java\n@Override\n        public void run() {\n            while (playingSquash) {\n                updateCourt();\n                drawCourt();\n                controlFPS();\n\n            }\n\n        }\n```", "```java\npublic void updateCourt() {\n            if (racketIsMovingRight) {\n                racketPosition.x = racketPosition.x + 10;\n            }\n\n            if (racketIsMovingLeft) {\n                racketPosition.x = racketPosition.x - 10;\n            }\n```", "```java\n            //detect collisions\n\n            //hit right of screen\n            if (ballPosition.x + ballWidth > screenWidth) {\n                ballIsMovingLeft = true;\n                ballIsMovingRight = false;\n                soundPool.play(sample1, 1, 1, 0, 0, 1);\n            }\n\n            //hit left of screen\n            if (ballPosition.x < 0) {\n                ballIsMovingLeft = false;\n                ballIsMovingRight = true;\n                soundPool.play(sample1, 1, 1, 0, 0, 1);\n            }\n```", "```java\n//Edge of ball has hit bottom of screen\nif (ballPosition.y > screenHeight - ballWidth) {\n```", "```java\n   lives = lives - 1;\n   if (lives == 0) {\n```", "```java\n          lives = 3;\n          score = 0;\n          soundPool.play(sample4, 1, 1, 0, 0, 1);\n       }\n```", "```java\nballPosition.y = 1 + ballWidth;//back to top of screen\n//what horizontal direction should we use\n//for the next falling ball\nRandom randomNumber = new Random();\nint startX = randomNumber.nextInt(screenWidth - ballWidth) + 1;\n                ballPosition.x = startX + ballWidth;\n\n                int ballDirection = randomNumber.nextInt(3);\n                switch (ballDirection) {\n                    case 0:\n                        ballIsMovingLeft = true;\n                        ballIsMovingRight = false;\n                        break;\n\n                    case 1:\n                        ballIsMovingRight = true;\n                        ballIsMovingLeft = false;\n                        break;\n\n                    case 2:\n                        ballIsMovingLeft = false;\n                        ballIsMovingRight = false;\n                        break;\n                }\n            }\n```", "```java\n//we hit the top of the screen\n            if (ballPosition.y <= 0) {\n                ballIsMovingDown = true;\n                ballIsMovingUp = false;\n                ballPosition.y = 1;\n                soundPool.play(sample2, 1, 1, 0, 0, 1);\n            }\n```", "```java\n            //depending upon the two directions we should be\n            //moving in adjust our x any positions\n            if (ballIsMovingDown) {\n                ballPosition.y += 6;\n            }\n\n            if (ballIsMovingUp) {\n                ballPosition.y -= 10;\n            }\n\n            if (ballIsMovingLeft) {\n                ballPosition.x -= 12;\n            }\n\n            if (ballIsMovingRight) {\n                ballPosition.x += 12;\n            }\n```", "```java\nif (ballPosition.y + ballWidth >= (racketPosition.y - racketHeight / 2)) {\n```", "```java\nint halfRacket = racketWidth / 2;\n```", "```java\nif (ballPosition.x + ballWidth > (racketPosition.x - halfRacket)\n  && ballPosition.x - ballWidth < (racketPosition.x + halfRacket)) {\n```", "```java\n//rebound the ball vertically and play a sound\n                    soundPool.play(sample3, 1, 1, 0, 0, 1);\n                    score++;\n                    ballIsMovingUp = true;\n                    ballIsMovingDown = false;\n```", "```java\n                    //now decide how to rebound the ball horizontally\n                    if (ballPosition.x > racketPosition.x) {\n                        ballIsMovingRight = true;\n                        ballIsMovingLeft = false;\n\n                    } else {\n                        ballIsMovingRight = false;\n                        ballIsMovingLeft = true;\n                    }\n\n                }\n            }\n        }\n```", "```java\n    public void drawCourt() {\n\n                if (ourHolder.getSurface().isValid()) {\n                    canvas = ourHolder.lockCanvas();\n                    //Paint paint = new Paint();\n                    canvas.drawColor(Color.BLACK);//the background\n                    paint.setColor(Color.argb(255, 255, 255, 255));\n                    paint.setTextSize(45);\n                    canvas.drawText(\"Score:\" + score + \" Lives:\" + lives + \" fps:\" + fps, 20, 40, paint);\n\n                    //Draw the squash racket\n                    canvas.drawRect(racketPosition.x - (racketWidth / 2),\n                      racketPosition.y - (racketHeight / 2), racketPosition.x + (racketWidth / 2),\n                          racketPosition.y + racketHeight, paint);\n\n                    //Draw the ball\n                    canvas.drawRect(ballPosition.x, ballPosition.y,\n                            ballPosition.x + ballWidth, ballPosition.y + ballWidth, paint);\n\n                    ourHolder.unlockCanvasAndPost(canvas);\n                }\n\n            }\n    ```", "```java\n    public void controlFPS() {\n                long timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n                long timeToSleep = 15 - timeThisFrame;\n                if (timeThisFrame > 0) {\n                    fps = (int) (1000 / timeThisFrame);\n                }\n                if (timeToSleep > 0) {\n\n                    try {\n                        ourThread.sleep(timeToSleep);\n                    } catch (InterruptedException e) {\n                    }\n\n                }\n\n                lastFrameTime = System.currentTimeMillis();\n            }\n    ```", "```java\n    public void pause() {\n                playingSquash = false;\n                try {\n                    ourThread.join();\n                } catch (InterruptedException e) {\n                }\n\n            }\n\n            public void resume() {\n                playingSquash = true;\n                ourThread = new Thread(this);\n                ourThread.start();\n            }\n    ```", "```java\n    @Override\n            public boolean onTouchEvent(MotionEvent motionEvent) {\n\n                switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\n                    case MotionEvent.ACTION_DOWN:\n\n                        if (motionEvent.getX() >= screenWidth / 2) {\n                            racketIsMovingRight = true;\n                            racketIsMovingLeft = false;\n                        } else {\n                            racketIsMovingLeft = true;\n                            racketIsMovingRight = false;\n                        }\n\n                        break;\n\n                    case MotionEvent.ACTION_UP:\n                        racketIsMovingRight = false;\n                        racketIsMovingLeft = false;\n                        break;\n                }\n                return true;\n            }\n\n        }\n    ```", "```java\npublic void drawCourt() {\n\n            if (ourHolder.getSurface().isValid()) {\n                canvas = ourHolder.lockCanvas();\n                //Paint paint = new Paint();\n```", "```java\n       canvas.drawColor(Color.BLACK);//the background\n```", "```java\n        paint.setColor(Color.argb(255, 255, 255, 255));\n```", "```java\n                paint.setTextSize(45);\n```", "```java\n  canvas.drawText(\"Score:\" + score + \" Lives:\" + lives + \" fps:\" +fps, 20, 40, paint);\n```", "```java\n//Draw the squash racket\n  canvas.drawRect(racketPosition.x - (racketWidth / 2),\n                  racketPosition.y - (racketHeight / 2), \n                  racketPosition.x + (racketWidth / 2),\n                  racketPosition.y + racketHeight, paint);\n```", "```java\n                //Draw the ball\n                canvas.drawRect(ballPosition.x, ballPosition.y,\n                  ballPosition.x + ballWidth, ballPosition.y + ballWidth, paint);\n```", "```java\n                ourHolder.unlockCanvasAndPost(canvas);\n            }\n\n        }\n```", "```java\npublic void controlFPS() {\nlong timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n```", "```java\nlong timeToSleep = 15 - timeThisFrame; \n```", "```java\n            if (timeThisFrame > 0) {\n                fps = (int) (1000 / timeThisFrame);\n            }\n```", "```java\n            if (timeToSleep > 0) {\n\n                try {\n                    ourThread.sleep(timeToSleep);\n                } catch (InterruptedException e) {\n                }\n\n            }\n```", "```java\n            lastFrameTime = System.currentTimeMillis();\n        }\n```", "```java\npublic void pause() {\n            playingSquash = false;\n            try {\n                ourThread.join();\n            } catch (InterruptedException e) {\n            }\n\n        }\n\n        public void resume() {\n            playingSquash = true;\n            ourThread = new Thread(this);\n            ourThread.start();\n        }\n```", "```java\n@Override\n    public boolean onTouchEvent(MotionEvent motionEvent) {\n\n    switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\n```", "```java\n    case MotionEvent.ACTION_DOWN:\n```", "```java\n    if (motionEvent.getX() >= screenWidth / 2) {\n        racketIsMovingRight = true;\n        racketIsMovingLeft = false;\n```", "```java\n                } else {\n                    racketIsMovingLeft = true;\n                    racketIsMovingRight = false;\n                }\n\n                    break;\n```", "```java\n                case MotionEvent.ACTION_UP:\n                    racketIsMovingRight = false;\n                    racketIsMovingLeft = false;\n                    break;\n            }\n            return true;\n        }\n\n    }\n```", "```java\n    @Override\n        protected void onStop() {\n            super.onStop();\n\n            while (true) {\n                squashCourtView.pause();\n                break;\n            }\n\n            finish();\n        }\n    ```", "```java\n    @Override\n        protected void onPause() {\n            super.onPause();\n            squashCourtView.pause();\n        }\n    ```", "```java\n    @Override\n        protected void onResume() {\n            super.onResume();\n            squashCourtView.resume();\n        }\n    ```", "```java\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\n                squashCourtView.pause();\n                finish();\n                return true;\n            }\n            return false;\n        }\n    ```"]