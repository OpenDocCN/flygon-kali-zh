["```cs\nusing Microsoft.AspNetCore.Builder; \nusing Microsoft.AspNetCore.Hosting; \nusing Microsoft.Extensions.Configuration; \nusing Microsoft.Extensions.DependencyInjection; \n```", "```cs\npublic class Startup \n{ \n    public Startup(IConfiguration configuration) \n    { \n        Configuration = configuration; \n    } \n\n    public IConfiguration Configuration { get; } \n\n    // This method gets called by the runtime. Use this method to add \n      services to the container. \n    public void ConfigureServices(IServiceCollection services) \n    { \n        services.AddMvc(); \n    } \n\n    // This method gets called by the runtime. Use this method\n     to configure the HTTP request pipeline. \n    public void Configure(IApplicationBuilder app, IHostingEnvironment \n    env) \n    { \n        if (env.IsDevelopment()) \n        { \n            app.UseDeveloperExceptionPage(); \n            app.UseBrowserLink(); \n        } \n        else \n        { \n            app.UseExceptionHandler(\"/Home/Error\"); \n        } \n\n        app.UseStaticFiles(); \n\n        app.UseMvc(routes => \n        { \n            routes.MapRoute( \n                name: \"default\", \n                template: \"{controller=Home}/{action=Index}/{id?}\"); \n        }); \n    } \n} \n```", "```cs\npublic class InformationModel \n{         \n    public string OperatingSystem { get; set; } \n    public string InfoTitle { get; set; } \n    public string FrameworkDescription { get; set; } \n    public string OSArchitecture { get; set; } \n    public string ProcessArchitecture { get; set; } \n    public string Memory { get; set; } \n    public string IPAddressString { get; set; } \n    public string WeatherBy { get; set; } \n    public string CurrentTemperature { get; set; } \n    public string CurrentIcon { get; set; } \n    public string DailySummary { get; set; } \n    public string CurrentCity { get; set; } \n    public string UnitOfMeasure { get; set; } \n} \n```", "```cs\nusing DarkSky.Models; \nusing DarkSky.Services; \nusing Microsoft.AspNetCore.Hosting; \nusing Microsoft.AspNetCore.Mvc; \nusing Newtonsoft.Json; \nusing System.Globalization; \nusing System.IO; \nusing System.Net.Http; \nusing System.Runtime.InteropServices; \nusing System.Threading.Tasks; \nusing static System.Math; \n```", "```cs\npublic string PublicIP { get; set; } = \"IP Lookup Failed\"; \npublic double Long { get; set; } \npublic double Latt { get; set; } \npublic string City { get; set; } \npublic string CurrentWeatherIcon { get; set; } \npublic string WeatherAttribution { get; set; } \npublic string CurrentTemp { get; set; } = \"undetermined\"; \npublic string DayWeatherSummary { get; set; } \npublic string TempUnitOfMeasure { get; set; } \nprivate readonly IHostingEnvironment _hostEnv; \n\npublic InformationController(IHostingEnvironment hostingEnvironment) \n{ \n    _hostEnv = hostingEnvironment; \n} \n```", "```cs\npublic IActionResult GetInfo() \n{ \n\n}\n```", "```cs\npublic class LocationInfo \n{ \n    public string ip { get; set; }  \n    public string city { get; set; }  \n    public string region { get; set; }  \n    public string region_code { get; set; } \n    public string country { get; set; } \n    public string country_name { get; set; } \n    public string postal { get; set; } \n    public double latitude { get; set; } \n    public double longitude { get; set; }  \n    public string timezone { get; set; }  \n    public string asn { get; set; }  \n    public string org { get; set; }          \n} \n```", "```cs\nprivate async Task GetLocationInfo() \n{ \n    var httpClient = new HttpClient(); \n    string json = await \n     httpClient.GetStringAsync(\"https://ipapi.co/json\"); \n    LocationInfo info = JsonConvert.DeserializeObject<LocationInfo>\n    (json); \n\n    PublicIP = info.ip; \n    Long = info.longitude; \n    Latt = info.latitude; \n    City = info.city; \n}\n```", "```cs\nprivate DarkSkyService.OptionalParameters GetUnitOfMeasure() \n{ \n    bool blnMetric = RegionInfo.CurrentRegion.IsMetric; \n    DarkSkyService.OptionalParameters optParms = new \n     DarkSkyService.OptionalParameters(); \n    if (blnMetric) \n    { \n        optParms.MeasurementUnits = \"si\"; \n        TempUnitOfMeasure = \"C\"; \n    } \n    else \n    { \n        optParms.MeasurementUnits = \"us\"; \n        TempUnitOfMeasure = \"F\"; \n    } \n    return optParms; \n} \n```", "```cs\nprivate string GetCurrentWeatherIcon(Icon ic) \n{ \n    string iconFilename = string.Empty; \n\n    switch (ic) \n    { \n        case Icon.ClearDay: \n            iconFilename = \"Sun.svg\"; \n            break; \n\n        case Icon.ClearNight: \n            iconFilename = \"Moon.svg\"; \n            break; \n\n        case Icon.Cloudy: \n            iconFilename = \"Cloud.svg\"; \n            break; \n\n        case Icon.Fog: \n            iconFilename = \"Cloud-Fog.svg\"; \n            break; \n\n        case Icon.PartlyCloudyDay: \n            iconFilename = \"Cloud-Sun.svg\"; \n            break; \n\n        case Icon.PartlyCloudyNight: \n            iconFilename = \"Cloud-Moon.svg\"; \n            break; \n\n        case Icon.Rain: \n            iconFilename = \"Cloud-Rain.svg\"; \n            break; \n\n        case Icon.Snow: \n            iconFilename = \"Snowflake.svg\"; \n            break; \n\n         case Icon.Wind: \n            iconFilename = \"Wind.svg\"; \n            break; \n         default: \n            iconFilename = \"Thermometer.svg\"; \n            break; \n    } \n    return iconFilename; \n} \n```", "```cs\nprivate async Task GetWeatherInfo() \n{ \n    string apiKey = \"YOUR_API_KEY_HERE\"; \n    DarkSkyService weather = new DarkSkyService(apiKey);             \n    DarkSkyService.OptionalParameters optParms =\n     GetUnitOfMeasure(); \n    var foreCast = await weather.GetForecast(Latt, Long, optParms); \n\n    string iconFilename = \n     GetCurrentWeatherIcon(foreCast.Response.Currently.Icon); \n    string svgFile = Path.Combine(_hostEnv.ContentRootPath, \n     \"climacons\", iconFilename); \n    CurrentWeatherIcon = System.IO.File.ReadAllText($\"{svgFile}\"); \n\n    WeatherAttribution = foreCast.AttributionLine; \n    DayWeatherSummary = foreCast.Response.Daily.Summary; \n    if (foreCast.Response.Currently.Temperature.HasValue) \n        CurrentTemp = \n     Round(foreCast.Response.Currently.Temperature.Value, \n      0).ToString(); \n} \n```", "```cs\npublic IActionResult GetInfo() \n{ \n    Models.InformationModel model = new Models.InformationModel(); \n    model.OperatingSystem = RuntimeInformation.OSDescription; \n    model.FrameworkDescription = \n     RuntimeInformation.FrameworkDescription; \n    model.OSArchitecture = \n     RuntimeInformation.OSArchitecture.ToString(); \n    model.ProcessArchitecture = \n     RuntimeInformation.ProcessArchitecture.ToString(); \n\n    string title = string.Empty; \n    string OSArchitecture = string.Empty; \n\n    if (model.OSArchitecture.ToUpper().Equals(\"X64\")) { \n     OSArchitecture = \"64-bit\"; } else { OSArchitecture = \n     \"32-bit\"; } \n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n     title \n     = $\"Windows {OSArchitecture}\"; } \n    else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX)) { \n     title = $\"OSX {OSArchitecture}\"; } \n    else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux)) { \n     title = $\"Linux {OSArchitecture}\"; } \n\n    GetLocationInfo().Wait(); \n    model.IPAddressString = PublicIP; \n\n    GetWeatherInfo().Wait(); \n    model.CurrentIcon = CurrentWeatherIcon; \n    model.WeatherBy = WeatherAttribution; \n    model.CurrentTemperature = CurrentTemp; \n    model.DailySummary = DayWeatherSummary; \n    model.CurrentCity = City; \n    model.UnitOfMeasure = TempUnitOfMeasure; \n\n    model.InfoTitle = title; \n    return View(model); \n}\n```", "```cs\n@model SystemInfo.Models.InformationModel \n\n@{ \n    ViewData[\"Title\"] = \"GetInfo\"; \n} \n\n<h2> \n    System Information for: @Html.DisplayFor(model => model.InfoTitle)          \n</h2> \n\n<div> \n\n    <hr /> \n    <dl class=\"dl-horizontal\"> \n        <dt> \n            Operating System \n        </dt>         \n        <dd> \n            @Html.DisplayFor(model => model.OperatingSystem)             \n        </dd> \n        <dt> \n            Framework Description \n        </dt> \n        <dd> \n            @Html.DisplayFor(model => model.FrameworkDescription) \n        </dd> \n        <dt> \n            Process Architecture \n        </dt> \n        <dd> \n            @Html.DisplayFor(model => model.ProcessArchitecture) \n        </dd>         \n        <dt> \n            Public IP \n        </dt> \n        <dd> \n            @Html.DisplayFor(model => model.IPAddressString) \n        </dd>        \n\n    </dl> \n</div> \n\n<h2> \n    Current Location: @Html.DisplayFor(model => model.CurrentCity) \n</h2> \n<div> \n    <div style=\"float:left\">@Html.Raw(Model.CurrentIcon)</div><div><h3>@Model.CurrentTemperature&deg;@Model.UnitOfMeasure</h3></div> \n</div> \n\n<div> \n    <h4>@Html.DisplayFor(model => model.DailySummary)</h4> \n</div> \n<div> \n    Weather Info: @Html.DisplayFor(model => model.WeatherBy) \n</div> \n```", "```cs\n<h2> \n    System Information for: Windows 64-bit          \n</h2> \n\n<div> \n\n    <hr /> \n    <dl class=\"dl-horizontal\"> \n        <dt> \n            Operating System \n        </dt>         \n        <dd> \n            Microsoft Windows 10.0.14393              \n        </dd> \n        <dt> \n            Framework Description \n        </dt> \n        <dd> \n            .NET Core 4.6.00001.0 \n        </dd> \n        <dt> \n            Process Architecture \n        </dt> \n        <dd> \n            X64 \n        </dd>         \n        <dt> \n            Public IP \n        </dt> \n        <dd> \n            13.90.213.135 \n        </dd>        \n\n    </dl> \n</div> \n```", "```cs\nsudo apt-get install curl\n```", "```cs\ncurl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\n```", "```cs\n    sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\n```", "```cs\nsudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\n```", "```cs\n    sudo apt-get update\n```", "```cs\n    sudo apt-get install dotnet-sdk-2.0.0\n```", "```cs\n    dotnet --version  \n```", "```cs\n    mkdir testapp\n    cd testapp  \n```", "```cs\n    dotnet new razor\n```", "```cs\n    dotnet run  \n```", "```cs\n    dotnet restore  \n```", "```cs\ndotnet run\n```"]