["```java\ninterface Mapper<V, M> { // (1)\n  M map(V value); // (2)\n}\n\n// (3)\t\npublic static <V, M> List<M> map(List<V> list, Mapper<V, M> mapper) {\n  List<M> mapped = new ArrayList<M>(list.size()); // (4)\n  for (V v : list) {\n    mapped.add(mapper.map(v)); // (5)\n  }\n  return mapped; // (6)\n}\n```", "```java\nList<Integer> mapped = map(numbers, new Mapper<Integer, Integer>() {\n  @Override\n  public Integer map(Integer value) {\n    return value * value; // actual mapping\n  }\n});\n```", "```java\nList<Integer> mapped = map(numbers, value -> value * value);\n```", "```java\ninterface Program {\n  default String fromChapter() {\n    return \"Two\";\n  }\n}\n```", "```java\nMapper<Integer, Integer> square = (value) -> value * value;\n```", "```java\nMapper<Integer, Integer> square = (Integer value) -> value * value;\n```", "```java\nMapper<Integer, Integer> square = (value) -> value * value;\n// and\nMapper<Integer, Integer> square = (value) -> {\n return value * value;\n};\n\n```", "```java\nMapper<Integer, Integer> square = (value) -> {\n  System.out.println(\"Calculating the square of \" + value);\n  return value * value;\n};\n```", "```java\ninterface Action<V> {\n  void act(V value);\n}\n```", "```java\npublic static <V> void act(List<V> list, Action<V> action) {\n  for (V v : list) {\n    action.act(v);\n  }\n}\n```", "```java\nact(list, value -> System.out.println(value));\n```", "```java\nact(list, System.out::println);\n```", "```java\n    Consumer<String> print = System.out::println;\n    ```", "```java\n    Function<Integer, String> toStr = (value) -> (value + \"!\");\n    List<String> string = map(integers, toStr);\n    ```", "```java\n    Predicate<Integer> odd = (value) -> value % 2 != 0;\n    ```", "```java\nAction0 // Action with no parameters\nAction1<T1> // Action with one parameter\nAction2<T1,T2> // Action with two parameters\nAction9<T1,T2,T3,T4,T5,T6,T7,T8,T9> // Action with nine parameters\nActionN // Action with arbitrary number of parameters\n```", "```java\nConnectableObservable<String> input = CreateObservable.from(System.in);\n\nObservable<Double> a = varStream(\"a\", input);\nObservable<Double> b = varStream(\"b\", input);\n\nreactiveSum(a, b); // The difference\n\ninput.connect();\n```", "```java\npublic static Observable<Double> varStream(\n  final String name, Observable<String> input) {\n    final Pattern pattern =     Pattern.compile(\n      \"\\\\s*\" + name + \"\\\\s*[:|=]\\\\s*(-?\\\\d+\\\\.?\\\\d*)$\"\n    );\n    return input\n    .map(pattern::matcher) // (1)\n .filter(m -> m.matches() && m.group(1) != null) // (2)\n .map(matcher -> matcher.group(1)) // (3)\n .map(Double::parseDouble); // (4)\n  }\n)\n```", "```java\npublic static void reactiveSum(\n  Observable<Double> a,\n  Observable<Double> b) {\n    Observable\n      .combineLatest(a, b, (x, y) -> x + y) // (1)\n .subscribe( // (2)\n sum -> System.out.println(\"update : a + b = \" + sum),\n error -> {\n System.out.println(\"Got an error!\");\n error.printStackTrace();\n },\n () -> System.out.println(\"Exiting...\")\n );\n}\n```", "```java\nPredicate<Integer> even = (number) -> number % 2 == 0;\nint i = 50;\nwhile((i--) > 0) {\n  System.out.println(\"Is five even? - \" + even.test(5));\n}\n```", "```java\nPredicate<Integer> impureEven = (number) -> {\n  System.out.println(\"Printing here is side effect!\");\n  return number % 2 == 0;\n};\n```", "```java\npublic static <T, R> int highSum(\n  Function<T, Integer> f1,\n  Function<R, Integer> f2,\n  T data1,\n  R data2) {\n    return f1.apply(data1) + f2.apply(data2);\n  }\n)\n```", "```java\nhighSum(v -> v * v, v -> v * v * v, 3, 2);\n```", "```java\nFunction<String, Integer> strToInt = s -> Integer.parseInt(s);\n\nhighSum(strToInt, strToInt, \"4\",  \"5\");\n```", "```java\npublic static Function<String, String> greet(String greeting) {\n  return (String name) -> greeting + \" \" + name + \"!\";\n}\n```", "```java\nSystem.out.println(greet(\"Hello\").apply(\"world\"));\n// Prints 'Hellow world!'\n\nSystem.out.println(greet(\"Goodbye\").apply(\"cruel world\"));\n// Prints 'Goodbye cruel world!'\n\nFunction<String, String> howdy = greet(\"Howdy\");\n\nSystem.out.println(howdy.apply(\"Tanya\"));\nSystem.out.println(howdy.apply(\"Dali\"));\n// These two print 'Howdy Tanya!' and 'Howdy Dali'\n```", "```java\nObservable mapped = observable.map(someFunction);\n```"]