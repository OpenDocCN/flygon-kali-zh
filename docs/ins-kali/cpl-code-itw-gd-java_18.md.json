["```java\npublic static void print(int n) {\n\u00a0\u00a0for (int i = 1; i <= n; i++) {\n\u00a0\u00a0\u00a0\u00a0if (((i % 5) == 0) && ((i % 7) == 0)) { // multiple of 5&7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"fizzbuzz\");\n\u00a0\u00a0\u00a0\u00a0} else if ((i % 5) == 0) { // multiple of 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"fizz\");\n\u00a0\u00a0\u00a0\u00a0} else if ((i % 7) == 0) { // multiple of 7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"buzz\");\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(i); // not a multiple of 5 or 7\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```java\nprivate static final String HUNDREDTHS[]\n = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \n\u00a0\u00a0\u00a0\u00a0\"DC\", \"DCC\", \"DCCC\", \"CM\"};\nprivate static final String TENS[]\n = {\"\", \"X\", \"XX\", \"XXX\", \n\u00a0\u00a0\u00a0\u00a0\"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nprivate static final String ONES[]\n = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \n\u00a0\u00a0\u00a0\u00a0\"VI\", \"VII\", \"VIII\", \"IX\"};\npublic static String convert(int n) {\n\u00a0\u00a0String roman = \"\";\n\u00a0\u00a0// Step 1\n\u00a0\u00a0while (n >= 1000) {\n\u00a0\u00a0\u00a0\u00a0roman = roman + 'M';\n\u00a0\u00a0\u00a0\u00a0n -= 1000;\n\u00a0\u00a0}\n\u00a0\u00a0// Step 2\n\u00a0\u00a0roman = roman + HUNDREDTHS[n / 100];\n\u00a0\u00a0n = n % 100;\n\u00a0\u00a0// Step 3\n\u00a0\u00a0roman = roman + TENS[n / 10];\n\u00a0\u00a0n = n % 10;\n\u00a0\u00a0// Step 4\n\u00a0\u00a0roman = roman + ONES[n];\n\u00a0\u00a0return roman;\n}\n```", "```java\nprivate static final int DOORS = 100;\npublic static int[] visitToggle() {\n\u00a0\u00a0// 0 - closed door\n\u00a0\u00a0// 1 - opened door\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0int[] doors = new int[DOORS];\n\u00a0\u00a0for (int i = 0; i <= (DOORS - 1); i++) {\n\u00a0\u00a0\u00a0\u00a0doors[i] = 0;\n\u00a0\u00a0}\n\u00a0\u00a0for (int i = 0; i <= (DOORS - 1); i++) {\n\u00a0\u00a0\u00a0\u00a0for (int j = 0; j <= (DOORS - 1); j++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((j + 1) % (i + 1) == 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (doors[j] == 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0doors[j] = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0doors[j] = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0}\n\u00a0\u00a0return doors;\n}\n```", "```java\npublic static int kth(int k) {\n\u00a0\u00a0int count3 = 0;\n\u00a0\u00a0int count5 = 0;\n\u00a0\u00a0int count7 = 0;\n\u00a0\u00a0List<Integer> list = new ArrayList<>();\n\u00a0\u00a0list.add(1);\n\u00a0\u00a0while (list.size() <= k + 1) {\n\u00a0\u00a0\u00a0\u00a0int m = min(min(list.get(count3) * 3, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list.get(count5) * 5), list.get(count7) * 7);\n\u00a0\u00a0\u00a0\u00a0list.add(m);\n\u00a0\u00a0\u00a0\u00a0if (m == list.get(count3) * 3) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count3++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if (m == list.get(count5) * 5) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count5++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if (m == list.get(count7) * 7) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count7++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0return list.get(k - 1);\n}\n```", "```java\npublic static int decoding(char[] digits, int n) {\n\u00a0\u00a0// base cases \n\u00a0\u00a0if (n == 0 || n == 1) {\n\u00a0\u00a0\u00a0\u00a0return 1;\n\u00a0\u00a0}\n\u00a0\u00a0// if the digits[] starts with 0 (for example, '0212')\n\u00a0\u00a0if (digits == null || digits[0] == '0') {\n\u00a0\u00a0\u00a0\u00a0return 0;\n\u00a0\u00a0}\n\u00a0\u00a0int count = 0;\n\u00a0\u00a0// If the last digit is not 0 then last \n\u00a0\u00a0// digit must add to the number of words \n\u00a0\u00a0if (digits[n - 1] > '0') {\n\u00a0\u00a0\u00a0\u00a0count = decoding(digits, n - 1);\n\u00a0\u00a0}\n\u00a0\u00a0// If the last two digits represents a number smaller \n\u00a0\u00a0// than or equal to 26 then consider last two digits \n\u00a0\u00a0// and call decoding()\n\u00a0\u00a0if (digits[n - 2] == '1'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| (digits[n - 2] == '2' && digits[n - 1] < '7')) {\n\u00a0\u00a0\u00a0\u00a0count += decoding(digits, n - 2);\n\u00a0\u00a0}\n\u00a0\u00a0return count;\n}\n```", "```java\npublic static int decoding(char digits[]) {\n\u00a0\u00a0// if the digits[] starts with 0 (for example, '0212')\n\u00a0\u00a0if (digits == null || digits[0] == '0') {\n\u00a0\u00a0\u00a0\u00a0return 0;\n\u00a0\u00a0}\n\u00a0\u00a0int n = digits.length;\n\u00a0\u00a0// store results of sub-problems \n\u00a0\u00a0int count[] = new int[n + 1];\n\u00a0\u00a0count[0] = 1;\n\u00a0\u00a0count[1] = 1;\n\u00a0\u00a0for (int i = 2; i <= n; i++) {\n\u00a0\u00a0\u00a0\u00a0count[i] = 0;\n\u00a0\u00a0\u00a0\u00a0// If the last digit is not 0 then last digit must \n\u00a0\u00a0\u00a0\u00a0// add to the number of words \n\u00a0\u00a0\u00a0\u00a0if (digits[i - 1] > '0') {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count[i] = count[i - 1];\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// If the second last digit is smaller than 2 and \n\u00a0\u00a0\u00a0\u00a0// the last digit is smaller than 7, then last \n\u00a0\u00a0\u00a0\u00a0// two digits represent a valid character \n\u00a0\u00a0\u00a0\u00a0if (digits[i - 2] == '1' || (digits[i - 2] == '2' \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&& digits[i - 1] < '7')) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count[i] += count[i - 2];\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0return count[n];\n}\n```", "```java\npublic static void find() {\n\u00a0\u00a0for (int i = 1000; i < 2499; i++) {\n\u00a0\u00a0\u00a0\u00a0int p = i;\n\u00a0\u00a0\u00a0\u00a0int q = i * 4;\n\u00a0\u00a0\u00a0\u00a0String m = String.valueOf(p);\n\u00a0\u00a0\u00a0\u00a0String n = new StringBuilder(String.valueOf(q))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.reverse().toString();\n\u00a0\u00a0\u00a0\u00a0p = Integer.parseInt(m);\n\u00a0\u00a0\u00a0\u00a0q = Integer.parseInt(n);\n\u00a0\u00a0\u00a0\u00a0if (p == q) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"\\n\\nFound: \" + p + \" : \" + (q * 4));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```java\npublic static boolean overlap(Point r1lt, Point r1rb, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Point r2lt, Point r2rb) {\n\u00a0\u00a0// r1 is totally to the right of r2 or vice versa\n\u00a0\u00a0if (r1lt.x > r2rb.x || r2lt.x > r1rb.x) {\n\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0}\n\u00a0\u00a0// r1 is totally above r2 or vice versa\n\u00a0\u00a0if (r1rb.y > r2lt.y || r2rb.y > r1lt.y) {\n\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0}\n\u00a0\u00a0return true;\n}\n```", "```java\npublic static boolean overlap(Point r1lt, Point r1rb, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Point r2lt, Point r2rb) {\n\u00a0\u00a0return (r1lt.x <= r2rb.x && r1rb.x >= r2lt.x\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&& r1lt.y >= r2rb.y && r1rb.y <= r2lt.y);\n}\n```", "```java\npublic static String multiply(String a, String b) {\n\u00a0\u00a0int lenA = a.length();\n\u00a0\u00a0int lenB = b.length();\n\u00a0\u00a0if (lenA == 0 || lenB == 0) {\n\u00a0\u00a0\u00a0\u00a0return \"0\";\n\u00a0\u00a0}\n\u00a0\u00a0// the result of multiplication is stored in reverse order \n\u00a0\u00a0int c[] = new int[lenA + lenB];\n\u00a0\u00a0// indexes to find positions in result\n\u00a0\u00a0int idx1 = 0;\n\u00a0\u00a0int idx2 = 0;\n\u00a0\u00a0// loop 'a' right to left\n\u00a0\u00a0for (int i = lenA - 1; i >= 0; i--) {\n\u00a0\u00a0\u00a0\u00a0int carry = 0;\n\u00a0\u00a0\u00a0\u00a0int n1 = a.charAt(i) - '0';\n\u00a0\u00a0\u00a0\u00a0// used to shift position to left after every \n\u00a0\u00a0\u00a0\u00a0// multiplication of a digit in 'b' \n\u00a0\u00a0\u00a0\u00a0idx2 = 0;\n\u00a0\u00a0\u00a0\u00a0// loop 'b' from right to left\n\u00a0\u00a0\u00a0\u00a0for (int j = lenB - 1; j >= 0; j--) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// current digit of second number \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int n2 = b.charAt(j) - '0';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// multiply with current digit of first number \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int sum = n1 * n2 + c[idx1 + idx2] + carry;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// carry of the next iteration\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0carry = sum / 10;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c[idx1 + idx2] = sum % 10;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0idx2++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// store carry \n\u00a0\u00a0\u00a0\u00a0if (carry > 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c[idx1 + idx2] += carry;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// shift position to left after every \n\u00a0\u00a0\u00a0\u00a0// multiplication of a digit in 'a' \n\u00a0\u00a0\u00a0\u00a0idx1++;\n\u00a0\u00a0}\n\u00a0\u00a0// ignore '0's from the right \n\u00a0\u00a0int i = c.length - 1;\n\u00a0\u00a0while (i >= 0 && c[i] == 0) {\n\u00a0\u00a0\u00a0\u00a0i--;\n\u00a0\u00a0}\n\u00a0\u00a0// If all were '0's - means either both or \n\u00a0\u00a0// one of 'a' or 'b' were '0' \n\u00a0\u00a0if (i == -1) {\n\u00a0\u00a0\u00a0\u00a0return \"0\";\n\u00a0\u00a0}\n\u00a0\u00a0String result = \"\";\n\u00a0\u00a0while (i >= 0) {\n\u00a0\u00a0\u00a0\u00a0result += (c[i--]);\n\u00a0\u00a0}\n\u00a0\u00a0return result;\n}\n```", "```java\npublic static void findNextGreater(int arr[]) {\n\u00a0\u00a0int min = -1;\n\u00a0\u00a0int len = arr.length;\n\u00a0\u00a0int prevDigit = arr[arr.length - 1];\n\u00a0\u00a0int currentDigit;\n\u00a0\u00a0// Step 1: Start from the rightmost digit and find the \n\u00a0\u00a0// first digit that is smaller than the digit next to it. \n\u00a0\u00a0for (int i = len - 2; i >= 0; i--) {\n\u00a0\u00a0\u00a0\u00a0currentDigit = arr[i];\n\u00a0\u00a0\u00a0\u00a0if (currentDigit < prevDigit) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0min = i;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0// If 'min' is -1 then there is no such digit. \n\u00a0\u00a0// This means that the digits are in descending order. \n\u00a0\u00a0// There is no greater number with same set of digits \n\u00a0\u00a0// as the given one.\n\u00a0\u00a0if (min == -1) {\n\u00a0\u00a0\u00a0\u00a0System.out.println(\"There is no greater number with \"\n\u00a0\u00a0\u00a0\u00a0\u00a0+ \"same set of digits as the given one.\");\n\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0// Steps 2 and 3: Swap 'min' with 'len-1'\n\u00a0\u00a0\u00a0\u00a0swap(arr, min, len - 1);\n\u00a0\u00a0\u00a0\u00a0// Step 4: Sort in ascending order all the digits \n\u00a0\u00a0\u00a0\u00a0// to the right side of the swapped 'len-1'\n\u00a0\u00a0\u00a0\u00a0reverse(arr, min + 1, len - 1);\n\u00a0\u00a0\u00a0\u00a0// print the result\n\u00a0\u00a0\u00a0\u00a0System.out.print(\"The next greater number is: \");\n\u00a0\u00a0\u00a0\u00a0for (int i : arr) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.print(i);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\nprivate static void reverse(int[] arr, int start, int end) {\n\u00a0\u00a0while (start < end) {\n\u00a0\u00a0\u00a0\u00a0swap(arr, start, end);\n\u00a0\u00a0\u00a0\u00a0start++;\n\u00a0\u00a0\u00a0\u00a0end--;\n\u00a0\u00a0}\n}\nprivate static void swap(int[] arr, int i, int j) {\n\u00a0\u00a0int aux = arr[i];\n\u00a0\u00a0arr[i] = arr[j];\n\u00a0\u00a0arr[j] = aux;\n}\n```", "```java\npublic static boolean isDivisible(int n) {\n\u00a0\u00a0int t = n;\n\u00a0\u00a0while (n > 0) {\n\u00a0\u00a0\u00a0\u00a0int k = n % 10;\n\u00a0\u00a0\u00a0\u00a0if (k != 0 && t % k != 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0n /= 10;\n\u00a0\u00a0}\n\u00a0\u00a0return true;\n}\n```", "```java\npublic static int breakit(int width, int height, int nTiles) {\n\u00a0\u00a0if (width <= 0 || height <= 0 || nTiles <= 0) {\n\u00a0\u00a0\u00a0\u00a0return -1;\n\u00a0\u00a0}\n\u00a0\u00a0// case 1\n\u00a0\u00a0if (width * height < nTiles) {\n\u00a0\u00a0\u00a0\u00a0return -1;\n\u00a0\u00a0}\n\u00a0\u00a0// case 4\n\u00a0\u00a0if (width * height == nTiles) {\n\u00a0\u00a0\u00a0\u00a0return 0;\n\u00a0\u00a0} \n\u00a0\u00a0// cases 5 and 6\n\u00a0\u00a0if ((nTiles % width == 0 && (nTiles / width) < height)\n\u00a0\u00a0\u00a0\u00a0\u00a0|| (nTiles % height == 0 && (nTiles / height) < width)) {\n\u00a0\u00a0\u00a0\u00a0return 1;\n\u00a0\u00a0}\n\u00a0\u00a0// case 7\n\u00a0\u00a0for (int i = 1; i <= Math.sqrt(nTiles); i++) {\n\u00a0\u00a0\u00a0\u00a0if (nTiles % i == 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int a = i;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int b = nTiles / i;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((a <= width && b <= height)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| (a <= height && b <= width)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0// cases 2 and 3\n\u00a0\u00a0return -1;\n}\n```", "```java\npublic static float findAngle(int hour, int min) {\n\u00a0\u00a0float angle = (float) Math.abs(((30f * hour) \n\u00a0\u00a0\u00a0\u00a0+ (0.5f * min)) - (6f * min));\n\u00a0\u00a0return angle > 180f ? (360f - angle) : angle;\n}\n```", "```java\npublic static void triplet(int arr[]) {\n\u00a0\u00a0int len = arr.length;\n\u00a0\u00a0// Step1\n\u00a0\u00a0for (int i = 0; i < len; i++) {\n\u00a0\u00a0\u00a0\u00a0arr[i] = arr[i] * arr[i];\n\u00a0\u00a0}\n\u00a0\u00a0// Step 2\n\u00a0\u00a0Arrays.sort(arr);\n\u00a0\u00a0// Steps 3, 4, and 5\n\u00a0\u00a0for (int i = len - 1; i >= 2; i--) {\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0int b = 0;\n\u00a0\u00a0\u00a0\u00a0int c = i - 1;\n\u00a0\u00a0\u00a0\u00a0// Step 6\n\u00a0\u00a0\u00a0\u00a0while (b < c) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Step 6c\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (arr[b] + arr[c] == arr[i]) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"Triplet: \" + Math.sqrt(arr[b]) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \", \" + Math.sqrt(arr[c]) + \", \" \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ Math.sqrt(arr[i]));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c--;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Steps 6a and 6b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (arr[b] + arr[c] < arr[i]) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c--;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```java\npublic static int time(int k, int floors[]) {\n\u00a0\u00a0int aux;\n\u00a0\u00a0for (int i = 0; i < floors.length - 1; i++) {\n\u00a0\u00a0\u00a0\u00a0for (int j = i + 1; j < floors.length; j++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (floors[i] < floors[j]) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0aux = floors[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0floors[i] = floors[j];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0floors[j] = aux;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0// iterate the groups and update \n\u00a0\u00a0// the time needed for each group \n\u00a0\u00a0int time = 0;\n\u00a0\u00a0for (int i = 0; i < floors.length; i += k) {\n\u00a0\u00a0\u00a0\u00a0time += (2 * floors[i]);\n\u00a0\u00a0}\n\u00a0\u00a0return time;\n}\n```"]