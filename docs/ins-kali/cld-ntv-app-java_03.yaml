- en: Introduction to Cloud-Native
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生简介
- en: The advent of cloud computing and the ubiquity of mobile devices have led to
    the rise of consumer-facing companies (such as Amazon, Netflix, Uber, Google,
    and Airbnb) that have redefined the entire customer experience. These companies
    have built their applications (both web and mobile interfaces) on the cloud, using
    features or services that allow them to scale up or down based on demand, be available
    at all times, and be ready to handle failures at all levels.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的出现和移动设备的普及导致了消费者面向公司（如亚马逊、Netflix、优步、谷歌和Airbnb）的崛起，它们重新定义了整个客户体验。这些公司在云上构建了它们的应用程序（包括Web和移动界面），利用功能或服务，使它们能够根据需求进行扩展或缩减，随时可用，并准备好处理各个层面的故障。
- en: Traditional enterprises are looking at these consumer-facing companies and want
    to adopt some of their best practices. They do this to help scale up their rapidly
    evolving enterprise applications, allowing them to take advantage of the elasticity
    and scalability of the cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 传统企业正在关注这些面向消费者的公司，并希望采纳它们的一些最佳实践。他们这样做是为了帮助扩展他们快速发展的企业应用程序，使它们能够利用云的弹性和可伸缩性。
- en: 'Before we dive deep into cloud-native, let''s see what this chapter holds.
    We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解云原生之前，让我们看看这一章节包含什么。本章将涵盖以下主题：
- en: Why go cloud-native?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要采用云原生？
- en: What is cloud-native?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是云原生？
- en: Intro to the 12-factor app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12要素应用简介
- en: Why move from monolithic applications to distributed microservice-based applications?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要从单片应用迁移到基于分布式微服务的应用程序？
- en: The advantages of building a distributed microservice-based application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建基于分布式微服务的应用程序的优势
- en: Why go cloud-native?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要采用云原生？
- en: 'Let''s have a look at the following points to understand why we need to go
    cloud-native:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下几点，以了解为什么我们需要采用云原生：
- en: The first wave of cloud adoption was about cost savings and business agility
    (especially around infrastructure provisioning and cheap storage). With increasing
    cloud adoption, enterprises started discovering **Infrastructure as a Service**
    (**IaaS**) and **Platform as a Service** (**PaaS**) services and their utilization
    in building applications that leverage the elasticity and scalability of the cloud,
    all the while embracing the inherent failures of the cloud platform.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云采用的第一波浪潮是关于成本节约和业务敏捷性（特别是基础设施供应和廉价存储）。随着云的不断普及，企业开始发现基础设施即服务（IaaS）和平台即服务（PaaS）服务以及它们在构建应用程序中的利用，这些应用程序利用了云的弹性和可伸缩性，同时接受了云平台固有的故障。
- en: A lot of enterprises are adopting greenfield design and development of microservices
    in the area of digital initiatives. When dealing with the **Internet of Things**
    (**IoT**), mobile devices, SaaS integration, and online business models, enterprises
    are working with niche players in the market. These new age business models are
    being designed and developed as a system of innovation on the enterprise end.
    The models are iterated rapidly to identify and bubble up the customer's needs,
    their preferences, what works, and what does not work.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多企业正在数字化倡议领域采用绿地设计和微服务的开发。在处理物联网（IoT）、移动设备、SaaS集成和在线业务模式时，企业正在与市场上的利基玩家合作。这些新时代的商业模式被设计和开发为企业端的创新系统。这些模型被迅速迭代，以识别和挖掘客户的需求、他们的偏好、什么有效，什么无效。
- en: Enterprises are also developing digital services based on their product lines.
    The products are enhanced with IoT to enable them to emit data about the products'
    performance. The data is collated and analyzed for patterns such as predictive
    maintenance, usage models, and external factors. The data from customers is collated
    and aggregated to build newer models for product enhancements and new features.
    A lot of these new digital services use the cloud-native model.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业还在基于其产品线开发数字服务。产品通过物联网得到增强，使其能够发出有关产品性能的数据。这些数据被汇总和分析，以发现预测性维护、使用模式和外部因素等模式。来自客户的数据被汇总和聚合，以构建产品增强和新功能的新模型。许多这些新数字服务使用云原生模型。
- en: These modern digital solutions use APIs from various providers, such as Google
    Maps for location, Facebook/Google for authentication, and Facebook/Twitter for
    social collaborations. Mashing all these APIs with the features and functionality
    of enterprise business allows them to build a unique proposition for the customer.
    All of this integration is happening at the API level. The mobile application
    is not meant for tens of hundreds of users, but tens of millions of users. This
    means that, as the load increases, the underlying application functionality should
    be able to scale up to provide a seamless experience to the customer.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些现代数字解决方案使用来自各种提供商的API，例如用于位置的谷歌地图，用于身份验证的Facebook/谷歌，以及用于社交协作的Facebook/Twitter。将所有这些API与企业业务的功能和功能结合起来，使它们能够为客户构建独特的建议。所有这些集成都是在API级别进行的。移动应用程序不是为数十亿用户而设计的，而是为数百万用户而设计的。这意味着随着负载的增加，底层应用程序功能应该能够扩展，以为客户提供无缝的体验。
- en: One way to scale up the resources for the enterprise is to do the heavy lifting
    in terms of service/environment provisioning as the load goes up or in case of
    failures. Another way is to offload the heavy lifting of the underlying services
    to the cloud platform provider. This is the sweet spot where building cloud-native
    applications that make use of the cloud provider's platform services allows the
    enterprise to offload the key aspects of scalability and focus on value generation
    parts.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业扩展资源的一种方式是在负载增加或出现故障时进行服务/环境供应的繁重工作。另一种方式是将底层服务的繁重工作转移到云平台提供商。这是构建云原生应用程序的甜蜜点，利用云提供商的平台服务使企业能够卸载可伸缩性的关键方面，并专注于价值生成部分。
- en: What is cloud-native?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是云原生？
- en: When applications are designed and architected to take advantage of the underlying
    IaaS and PaaS services supported by the cloud computing platform, they are called
    **cloud-native applications**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序被设计和架构以利用云计算平台支持的基础IaaS和PaaS服务时，它们被称为云原生应用。
- en: This means building reliable system applications, such as five nines (99.999%),
    that run on a three nines (99.9%) infrastructure and application components. We
    need to design our application components to deal with failures. To handle such
    failures, we need a structured approach for scalability and availability. To support
    the entire scale of applications, all the pieces need to be automated.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着构建可靠的系统应用，如五个九（99.999%），在三个九（99.9%）的基础设施和应用组件上运行。我们需要设计我们的应用组件来处理故障。为了处理这样的故障，我们需要一个结构化的可扩展性和可用性方法。为了支持应用程序的整个规模，所有部分都需要自动化。
- en: Cloud adoption typically happens in a series of steps, where the enterprise
    starts exploring the services before they start building cloud-native applications.
    The adoption starts with the movement of Dev/Test environments to the cloud, where
    rapid provisioning is the **key ask** from the business and developer community.
    Once the enterprise is past the environment provisioning stage, the next step/models
    in which the enterprise applications are migrated to the cloud-native model will
    be discussed in the following sections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 云采用通常是一系列步骤，企业在开始构建云原生应用之前开始探索服务。采用始于将Dev/Test环境迁移到云中，业务和开发人员社区对快速配置是关键需求。一旦企业度过环境配置阶段，下一步/模型是企业应用迁移到云原生模型，将在以下部分讨论。
- en: Lift and shift
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 举起和转移
- en: Traditionally, enterprises started on their cloud computing journey with IaaS
    services. They did a lift and shift of the business application workloads from
    on-premises data centers and moved to the equivalent rented capacity on the cloud
    computing platform. This is the first wave of adoption of cloud computing platforms,
    where enterprises are shifted from a capital expenditure model to an operating
    expenditure model.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，企业开始其云计算之旅是通过IaaS服务。他们将业务应用工作负载从本地数据中心转移到云计算平台上的相应租用容量。这是云计算平台采用的第一波浪潮，企业从资本支出模式转变为运营支出模式。
- en: IaaS, as the names suggests, is focused on infrastructure—compute nodes, network,
    and storage. In this model, enterprises can take advantage of the elasticity of
    the cloud, where compute nodes can be added or removed based on the incoming demand
    or load. The **virtual machine** (**VM**) abstracts out the underlying hardware
    and provides the ability to scale the number of VMs up or down with just a few
    clicks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS，顾名思义，专注于基础设施——计算节点、网络和存储。在这种模式下，企业可以利用云的弹性，根据需求或负载来增加或减少计算节点。虚拟机（VM）抽象出底层硬件，并提供了通过几次点击来扩展或缩减VM数量的能力。
- en: 'Enterprises typically make use of IaaS in the first wave because of the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 企业通常在第一波浪潮中使用IaaS，原因如下：
- en: '**Variability of resources**: The ability to add/remove resources at will,
    which in turn allows more business agility'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源的可变性：随意添加/删除资源的能力，从而实现更多的业务敏捷性
- en: '**Utility model**: IaaS provides basic resources that are rented out on an
    hourly basis, allowing more predictability and an opex model'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用模型：IaaS提供按小时租用的基本资源，更具可预测性和运营支出模式
- en: Going native
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原生应用
- en: 'Once the enterprises start becoming comfortable with the IaaS, the next wave
    of adoption comes in terms of adoption of PaaS as part of the application workloads.
    In this stage, the enterprises start discovering services with the following benefits:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦企业开始对IaaS感到满意，下一波采用的浪潮就是采用PaaS作为应用工作负载的一部分。在这个阶段，企业开始发现具有以下好处的服务：
- en: '**Platform services replacement**: This involves the identification of potential
    platform features of the enterprise, lifting and shifting the workload, and replacing
    it with equivalent platform services from the cloud provider. For example:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台服务替换：这涉及识别企业的潜在平台特性，举起和转移工作负载，并用云提供商的等效平台服务替换。例如：
- en: Replacing application messaging systems with queuing systems provided by the
    cloud provider (such as AWS SQS)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用云提供商提供的排队系统（如AWS SQS）替换应用消息系统
- en: Replacing data stores or **relational database management systems** (**RDMBS**)
    with equivalent managed data services (such as AWS RDS)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用等效的托管数据服务（如AWS RDS）替换数据存储或关系数据库管理系统（RDMBS）
- en: Replacing security or directory services with a managed directory or security
    services (such as AWS Directory and AWS IAM)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用托管目录或安全服务（如AWS Directory和AWS IAM）替换安全或目录服务
- en: These services allow the enterprise to do away with all the operational efforts,
    such as data store backup, availability, scalability, and redundancy, and replace
    them with a managed service that provides all these features
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些服务使企业摆脱所有运营工作，如数据存储备份、可用性、可扩展性和冗余，并用提供所有这些功能的托管服务替换它们
- en: '**Application services replacement**: Enterprises discover new services that
    can replace their own platform or utility services. For example:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用服务替换：企业发现可以替换其自有平台或实用服务的新服务。例如：
- en: Replacing build and release services or products with equivalent DevOps services
    from the cloud provider (such as AWS CodePipeline, AWS CodeCommit, or AWS CodeDeploy)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用云提供商的等效DevOps服务（如AWS CodePipeline、AWS CodeCommit或AWS CodeDeploy）替换构建和发布服务或产品
- en: Replacing application services or products with equivalent application platform
    services (such as AWS API Gateway, AWS SWF, and AWS SES)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用等效的应用平台服务（如AWS API Gateway、AWS SWF和AWS SES）替换应用服务或产品
- en: Replacing analytics workload services with equivalent application analytics
    services (such as AWS Data Pipeline and AWS EMR)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用等效的应用分析服务（如AWS Data Pipeline和AWS EMR）替换分析工作负载服务
- en: Once the applications start adopting the platform services, the applications
    start abstracting out features or functionalities provided by **commercial off-the-shelf**
    (**COTS**) products (such as messaging, notification, security, workflow, and
    API Gateway) and replacing them with equivalent feature platform services. For
    example, instead of hosting and running the messaging IaaS, movement to an equivalent
    platform service means moving to a model where you pay only for the number of
    messages sent, without incurring any additional operational costs. This model
    brings significant savings, as you move from renting and operating the product
    to a model where the product is rented only for the time it is utilized.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序开始采用平台服务，应用程序开始抽象出**商业现成**（**COTS**）产品提供的功能或功能（如消息传递、通知、安全、工作流和API网关），并用等效的功能平台服务替换它们。例如，不再托管和运行消息传递IaaS，转向等效的平台服务意味着转向一种模式，您只支付发送的消息数量，而不会产生任何额外的运营成本。这种模式带来了显著的节省，因为您从租用和运营产品转向了仅在利用时租用产品的模式。
- en: Going serverless
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 走向无服务器
- en: Once the enterprise has adopted the PaaS to build the application, the next
    step is to abstract out the application logic as a series of smaller functions
    and deploy them. These functions are invoked as a reaction to an event from the
    user or agent, which results in these functions computing the incoming events
    and giving a result back. This is the highest level of abstraction, where the
    application has been divided into a series of functions and these functions are
    deployed independently of each other. The functions communicate with each other
    using asynchronous communication models. Cloud computing platforms provide features
    such as AWS Lambda and Azure Functions for going serverless.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦企业采用PaaS构建应用程序，下一步就是将应用程序逻辑抽象为一系列较小的函数并部署它们。这些函数作为对用户或代理的事件的反应而被调用，这导致这些函数计算传入的事件并返回结果。这是最高级别的抽象，应用程序已被划分为一系列函数，这些函数独立部署。这些函数使用异步通信模型相互通信。云计算平台提供了AWS
    Lambda和Azure Functions等功能，用于实现无服务器化。
- en: Cloud-native and microservices
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生和微服务
- en: To enable the adoption of the IaaS and PaaS services, a change in how the applications
    are designed and architected needs to be made.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现IaaS和PaaS服务的采用，需要对应用程序的设计和架构进行改变。
- en: 'The model of designing enterprise applications on a base platform (read: application
    server) meant that the heavy lifting of the application''s scalability and availability
    was the responsibility of the platform. Enterprise developers would focus on using
    the standardized JEE patterns and developing components (Presentation, Business,
    Data, and Integration) to build fully functional and transactional applications.
    The extent to which the application could be scaled was limited by the abilities
    (node clustering and distributed caching) of the underlying platform:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础平台（即：应用服务器）上设计企业应用程序的模式意味着应用程序的可伸缩性和可用性的重要工作是平台的责任。企业开发人员将专注于使用标准化的JEE模式和开发组件（展示、业务、数据和集成）来构建完全功能和事务性的应用程序。应用程序的可伸缩性受到底层平台能力（节点集群和分布式缓存）的限制：
- en: '![](img/f53ab4c9-06ae-4c48-b412-f2b2da4d6fe1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f53ab4c9-06ae-4c48-b412-f2b2da4d6fe1.png)'
- en: Monolithic application
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单片应用程序
- en: 'A business application built as a monolithic application is typically characterized
    by the following factors:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为单片应用程序构建的业务应用程序通常具有以下特征：
- en: The entire application logic is packaged into a single EAR file
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个应用程序逻辑被打包成一个单独的EAR文件
- en: The application reuse is derived by sharing JARs
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的重用是通过共享JAR文件实现的
- en: Application changes are planned months in advance, typically in a big push once
    a quarter
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的更改通常提前数月计划，通常是每个季度进行一次大规模推动
- en: There is one database that encompasses the entire schema for the application
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个数据库包含了整个应用程序的架构
- en: There are thousands of test cases that signify the amount of regression
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有成千上万的测试用例表示回归的数量
- en: The application design, development, and deployment requires coordination among
    multiple teams and significant management
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的设计、开发和部署需要多个团队之间的协调和重大的管理
- en: 'With the advent of social interactions and mobile users, the scale of application
    users and data started increasing exponentially. Enterprises soon found that the
    platform was becoming a bottleneck in terms of the following issues:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随着社交互动和移动用户的出现，应用程序用户和数据的规模开始呈指数级增长。企业很快发现，平台在以下问题方面成为了瓶颈：
- en: '**Business agility**: The operational cost of managing the application platform
    and making constant changes to the features/functionalities was getting hampered
    because of the monolithic nature of the application. Even for a small feature
    change, the entire cycle of regression tests and deployment across server clusters
    was eating into the overall speed of innovation.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务敏捷性**：由于应用程序的单片结构，管理应用程序平台和不断更改功能/功能的运营成本受到了阻碍。即使是一个小的功能更改，整个回归测试和在服务器集群上的部署周期也在影响创新的整体速度。'
- en: The mobile revolution meant that the problem was not just at the channel layers,
    but also percolated down to the integration and systems of record layers. Unless
    enterprises fixed the problem across these layers, the ability to innovate and
    be competitive in the market would be under threat.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 移动革命意味着问题不仅仅存在于渠道层，而且还渗透到集成和记录系统层。除非企业跨越这些层面解决问题，否则在市场上创新和竞争的能力将受到威胁。
- en: '**Cost**: To handle the increased demand, the IT Operations team were adding
    new server instances to handle the load. However, with each new instance, the
    complexity was increasing along with license costs (that depended on the number
    of cores). Unlike the Facebooks of the world, enterprise cost per user was increasing
    with every user acquisition.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本**：为了满足增加的需求，IT运营团队不断添加新的服务器实例来处理负载。然而，随着每个新实例的增加，复杂性和许可成本（取决于核心数）也在增加。与世界上的Facebook不同，企业每用户成本随着每个用户的获取而增加。'
- en: At this time, enterprises started looking at open source products and how modern
    applications are getting built in consumer-facing companies serving millions of
    users, handling petabytes of data, and deploying to the cloud.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，企业开始关注开源产品以及消费者面向公司如何构建现代应用程序，为数百万用户提供服务，处理PB级数据，并部署到云端。
- en: Consumer-facing companies encounter these hurdles early in their life cycle.
    Lots of innovation led to the design and development of new open source products,
    as well as design patterns for cloud computing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 面向消费者的公司在其生命周期的早期就遇到了这些障碍。大量的创新导致了新的开源产品的设计和开发，以及云计算的设计模式。
- en: In this context, the whole premise of **service-oriented architecture** (**SOA**)
    was looked at and enterprises investigated how the application architecture could
    adopt principles of designing autonomous services that are isolated, discrete,
    and could be integrated and composed with other services. This has led to the
    rise of the microservices model, which adapts and integrates very well with the
    cloud services model, where everything is available as a service and as an HTTP
    endpoint.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，**面向服务的架构**（SOA）的整个前提被重新审视，企业调查了应用架构如何采用设计自治服务的原则，这些服务是隔离的、离散的，并且可以与其他服务集成和组合。这导致了微服务模型的兴起，它与云服务模型非常适配和整合，其中一切都作为服务和HTTP端点可用。
- en: Microservices is a specialization of and implementation approach for service-oriented
    architectures (SOA) used to build flexible, independently deployable software
    systems
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是用于构建灵活、可独立部署的软件系统的面向服务架构（SOA）的专业化和实现方法
- en: – Wikipedia
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '- 维基百科'
- en: 'Microservices are designed and developed, keeping in mind that a business application
    can be built by composing these services. The microservices are designed around
    the following principles:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是设计和开发的，考虑到一个业务应用可以通过组合这些服务来构建。微服务围绕以下原则设计：
- en: '**Single-responsibility principle**: Each microservice implements only one
    business responsibility from the bounded domain context. From a software point
    of view, the system needs to be decomposed into multiple components where each
    component becomes a microservice. Microservices have to be lightweight, in order
    to facilitate smaller memory footprints and faster startup times.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一责任原则**：每个微服务只实现有界域上下文中的一个业务责任。从软件角度来看，系统需要分解为多个组件，其中每个组件都成为一个微服务。微服务必须轻量级，以便实现更小的内存占用和更快的启动时间。'
- en: '**Share nothing**: Microservices are autonomous, self-contained, stateless,
    and manage the service state (memory/storage) through container-based encapsulation
    models. The private data is managed by a service and there is no contention on
    the data from any other service. Stateless microservices scale better and start
    faster than stateful ones, as there is no state to be backed up on shutdown or
    activated on startup.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无共享**：微服务是自治的、自包含的、无状态的，并通过基于容器的封装模型管理服务状态（内存/存储）。私有数据由一个服务管理，没有其他服务对数据的争用。无状态的微服务比有状态的微服务更容易扩展和启动更快，因为在关闭时没有状态需要备份或在启动时激活。'
- en: '**Reactive**: This is applicable for microservices with concurrent loads or
    longer response times. Asynchronous communication and the callback model allow
    optimal utilization of the resources, resulting in better availability and increased
    throughput of the microservices.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反应式**：这适用于具有并发负载或较长响应时间的微服务。异步通信和回调模型允许资源的最佳利用，从而提高微服务的可用性和吞吐量。'
- en: '**Externalized configuration**: This externalizes the configurations in the
    config server, so that it can be maintained in hierarchical structure, per environment.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部化配置**：这将配置外部化到配置服务器中，以便可以按环境维护它们的分层结构。'
- en: '**Consistent**: Services should be written in a consistent style, as per the
    coding standards and naming convention guidelines.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：服务应该按照编码标准和命名约定指南以一致的风格编写。'
- en: '**Resilient**: Services should handle exceptions arising from technical reasons
    (connectivity and runtime), and business reasons (invalid inputs) and not crash.
    Patterns, such as circuit breakers and bulk headers, help isolate and contain
    failures.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**韧性**：服务应该处理由技术原因（连接和运行时）和业务原因（无效输入）引起的异常，并且不会崩溃。诸如断路器和批量标头之类的模式有助于隔离和遏制故障。'
- en: '**Good citizens**: Microservices should report their usage statistics, the
    number of times they are accessed, their average response time, and so on through
    the JMX API or the HTTP API.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**良好的公民**：微服务应通过JMX API或HTTP API报告它们的使用统计信息，它们被访问的次数，它们的平均响应时间等。'
- en: '**Versioned**: Microservices may need to support multiple versions for different
    clients, until all clients migrate to higher versions. There should be a clear
    version strategy in terms of supporting new features and bug fixing.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本化**：微服务可能需要支持不同客户的多个版本，直到所有客户迁移到更高版本。在支持新功能和修复错误方面，应该有明确的版本策略。'
- en: '**Independent deployment**: Each of the microservices should be independently
    deployable, without compromising the integrity of the application:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立部署**：每个微服务都应该可以独立部署，而不会损害应用程序的完整性：'
- en: '![](img/72b4e6bd-7d1f-4014-a53a-d6901cb5c139.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72b4e6bd-7d1f-4014-a53a-d6901cb5c139.png)'
- en: Moving from a monolithic to a microservices-based application
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从单片到基于微服务的应用程序的转变
- en: The microservices' design, development, and deployment considerations are covered
    in detail in the subsequent chapters. We will see how to build services for an
    e-commerce product. I am sure everyone is quite familiar with e-commerce and will
    understand the product requirements easily.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的设计、开发和部署考虑在后续章节中详细介绍。我们将看到如何为电子商务产品构建服务。我相信每个人都对电子商务非常熟悉，并且会很容易理解产品需求。
- en: The 12-factor app
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12要素应用
- en: 'In order to build a distributed, microservices-based application that can be
    deployed across cloud providers, engineers at Heroku came up with 12 factors that
    need to be implemented by any modern cloud-native application:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建一个可以在云提供商之间部署的分布式、基于微服务的应用程序，Heroku的工程师提出了需要由任何现代云原生应用程序实施的12个因素：
- en: '**Single codebase**: The application must have one codebase, tracked in revision
    control for every application (read: microservice) that can be deployed multiple
    times (development, test, staging, and production environments). Two microservices
    do not share the same codebase. This model allows the flexibility to change and
    deploy services without impacting other parts of the application.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一代码库**：应用程序必须有一个代码库，每个应用程序（即：微服务）都可以在多个环境（开发、测试、暂存和生产环境）中部署。两个微服务不共享相同的代码库。这种模式允许灵活更改和部署服务，而不会影响应用程序的其他部分。'
- en: '**Dependencies**: The application must explicitly declare its code dependencies
    and add them to the application or microservice. The dependencies are packaged
    as part of the microservice JAR/WAR file. This helps isolate dependencies across
    microservices and reduce any side effects through multiple versions of the same
    JAR.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖关系**：应用程序必须明确声明其代码依赖关系，并将它们添加到应用程序或微服务中。这些依赖关系被打包为微服务JAR/WAR文件的一部分。这有助于隔离微服务之间的依赖关系，并减少同一JAR的多个版本带来的任何副作用。'
- en: '**Config**: The application configuration data is moved out of the application
    or microservice and externalized through a configuration management tool. The
    application or microservice will pick up the configuration based on the environment
    in which it is running, allowing the same deployment unit to be propagated across
    the environments.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：应用程序配置数据被移出应用程序或微服务，并通过配置管理工具进行外部化。应用程序或微服务将根据其运行的环境选择配置，从而允许相同的部署单元在各个环境中传播。'
- en: '**Backing services**: All external resources, access should be an addressable
    URL. For example, SMTP URL, database URL, service HTTP URL, queue URL, and TCP
    URL. This allows URLs to be externalized to the config and managed for every environment.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后备服务**：所有外部资源访问都应该是可寻址的URL。例如，SMTP URL、数据库URL、服务HTTP URL、队列URL和TCP URL。这允许URL被外部化到配置中，并为每个环境进行管理。'
- en: '**Build, release, and run**: The entire process of building, releasing, and
    running is treated as three separate steps. This means that, as part of the build,
    the application is built as an immutable entity. This immutable entity will pick
    the relevant configuration to run the process based on the environment (development,
    testing, staging, or production).'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建、发布和运行**：整个构建、发布和运行过程被视为三个独立的步骤。这意味着作为构建的一部分，应用程序被构建为一个不可变的实体。这个不可变的实体将根据环境（开发、测试、暂存或生产）选择相关的配置来运行进程。'
- en: '**Processes**: The microservice is built on and follows the shared-nothing
    model. This means the services are stateless and the state is externalized to
    either a cache or a data store. This allows seamless scalability and allows load
    balance or proxy to send requests to any of the instances of the service.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程**：微服务建立在并遵循共享无状态模型。这意味着服务是无状态的，状态被外部化到缓存或数据存储中。这允许无缝扩展，并允许负载均衡或代理将请求发送到服务的任何实例。'
- en: '**Port binding**: The microservice is built within a container. The service
    will export and bind all its interfaces through ports (including HTTP).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口绑定**：微服务是在容器内构建的。服务将通过端口（包括HTTP）导出和绑定所有其接口。'
- en: '**Concurrency**: The microservice process is scaled out, meaning that, to handle
    increased traffic, more microservice processes are added to the environment. Within
    the microservice process, one can make use of the reactive model to optimize the
    resource utilization.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发性**：微服务进程是按比例扩展的，这意味着为了处理增加的流量，会向环境中添加更多的微服务进程。在微服务进程内部，可以利用反应式模型来优化资源利用率。'
- en: '**Disposability**: The idea is to build a microservice as immutable with a
    single responsibility to, in turn, maximize robustness with faster boot-up times.
    Immutability also lends to the service disposability.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可处置性**：构建微服务的想法是将其作为不可变的，具有单一职责，以最大程度地提高鲁棒性和更快的启动时间。不可变性也有助于服务的可处置性。'
- en: '**Dev/prod parity**: The environments across the application life cycle—DEV,
    TEST, STAGING, and PROD—are kept as similar as possible to avoid any surprises later.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发/生产一致性**：应用程序生命周期中的环境（DEV、TEST、STAGING和PROD）尽量保持相似，以避免后续出现任何意外。'
- en: '**Logs**: Within the immutable microservice instance, the logs generated as
    part of the service processing are candidates for state. These logs should be
    treated as event streams and pushed out to a log aggregator infrastructure.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：在不可变的微服务实例中，作为服务处理的一部分生成的日志是状态的候选者。这些日志应被视为事件流，并推送到日志聚合基础设施。'
- en: '**Admin processes**: The microservice instances are long-running processes
    that continue unless they are killed or replaced with newer versions. All other
    admin and management tasks are treated as one-off processes:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理进程**：微服务实例是长时间运行的进程，除非它们被终止或替换为更新版本。所有其他管理和管理任务都被视为一次性进程：'
- en: '![](img/19bbfa55-0a53-4117-8985-c5c180400105.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19bbfa55-0a53-4117-8985-c5c180400105.png)'
- en: 12-factor app
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 12要素应用
- en: Applications that follow the 12 factors make no assumptions about the external
    environment, allowing them to be deployed on any cloud provider platform. This
    allows the same set of tools/processes/scripts to be run across environments and
    deploy distributed microservices applications in a consistent manner.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循12要素的应用程序不对外部环境做任何假设，这使它们可以部署在任何云提供商平台上。这允许在各种环境中运行相同的工具/流程/脚本，并以一致的方式部署分布式微服务应用程序。
- en: Microservices-enabling service ecosystem
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务启用的服务生态系统
- en: In order to successfully run microservices, there are certain enabling components/services
    that are needed. These enabling services can be tagged as PaaS that are needed
    to support the building, releasing, deployment, and running of the microservices.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功运行微服务，需要一些必要的启用组件/服务。这些启用服务可以被标记为PaaS，用于支持微服务的构建、发布、部署和运行。
- en: 'In the case of the cloud-native model, these services are available as PaaS
    services from the cloud provider itself:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在云原生模型的情况下，这些服务可以作为云提供商自身的PaaS服务提供：
- en: '**Service discovery**: When the application is decomposed into a microservices
    model, a typical application may be composed of hundreds of microservices. With
    each microservice running multiple instances, we soon have thousands of microservice
    instances running. In order to discover the service endpoint, it is pertinent
    to have a service registry that can be queried to discover all of the instances
    of the microservice. In addition, the service registry tracks the heartbeat of
    every service instance to make sure that all services are up and running.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务发现**：当应用程序被分解为微服务模型时，一个典型的应用程序可能由数百个微服务组成。每个微服务运行多个实例，很快就会有成千上万个微服务实例在运行。为了发现服务端点，有必要有一个可以查询的服务注册表，以发现所有微服务实例。此外，服务注册表跟踪每个服务实例的心跳，以确保所有服务都正常运行。'
- en: 'Further, the service registry helps in load balancing the requests across the
    service instances. We can have two models for load balancing:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，服务注册表有助于在服务实例之间实现负载均衡请求。我们可以有两种负载均衡模型：
- en: 'Client-side load balancing:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端负载均衡：
- en: A service consumer asks the registry for a service instance
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务消费者向注册表请求服务实例
- en: The service registry returns with the list of services where the service is
    running
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务注册表返回服务运行的服务列表
- en: 'Server-side load balancing:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端负载均衡：
- en: The service endpoint is hidden by Nginx, API Gateway, or another reverse proxy
    from the consumer
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务端点被Nginx、API网关或其他反向代理隐藏
- en: 'Typical products in this space are Consul and Zookeeper:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个领域的典型产品有Consul和Zookeeper：
- en: '![](img/66a2ed6f-2799-421e-9bcf-2a56a9b53a21.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66a2ed6f-2799-421e-9bcf-2a56a9b53a21.png)'
- en: The service registry
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 服务注册表
- en: '**Config server**: The microservice needs to be initialized with multiple parameters
    (for example, database URL, queue URL, functional parameters, and dependency flags).
    Managing properties in file or environment variables beyond a certain number can
    become unwieldy. To manage these properties across environments, all such configurations
    are managed externally in a configuration server. At boot time, microservices
    will load the properties by invoking the API on the config server.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置服务器**：微服务需要用多个参数初始化（例如，数据库URL、队列URL、功能参数和依赖标志）。在文件或环境变量中管理超过一定数量的属性可能变得难以控制。为了跨环境管理这些属性，所有这些配置都在配置服务器上进行外部管理。在启动时，微服务将通过调用配置服务器上的API加载属性。'
- en: 'Microservices also make use of listeners to listen for any changes to the properties
    on the config server. Any runtime change of properties can be picked up immediately
    by the microservices. The properties are typically categorized at multiple levels:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务还使用监听器来监听配置服务器上属性的任何更改。微服务可以立即捕获属性的运行时更改。这些属性通常被分类为多个级别：
- en: '**Service-specific properties**: Hold all properties tied to the microservice'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特定于服务的属性**：保存与微服务相关的所有属性'
- en: '**Shared properties**: Hold properties that might be shared between services'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享属性**：保存可能在服务之间共享的属性'
- en: '**Common properties**: Hold properties that are common across services'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共属性**：保存在服务之间共同的属性'
- en: 'The config server can back up these properties in a source-control system.
    Typical products in this space are Consul, Netflix Archaius, and Spring Cloud
    Config server:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器可以将这些属性备份到源代码控制系统中。这个领域的典型产品有Consul、Netflix Archaius和Spring Cloud Config服务器：
- en: '![](img/f4fd4652-eb3e-4dcb-b7bc-e1f3bf68b0b7.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4fd4652-eb3e-4dcb-b7bc-e1f3bf68b0b7.png)'
- en: The config server
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器
- en: '**Service management/monitoring**: An average business application typically
    tends to get decomposed into about 400 microservices. Even if we ran two to three
    instances of these microservices, we would be talking about managing over 1,000 
    instances of our microservices. Without an automated model, managing/monitoring
    these services becomes an operational challenge. The following are the key metrics
    that need to be managed and monitored:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务管理/监控**：一个普通的业务应用程序通常会被分解成大约400个微服务。即使我们运行了两到三个实例的这些微服务，我们也将需要管理超过1,000个微服务实例。如果没有自动化模型，管理/监控这些服务将成为一个运营挑战。以下是需要被管理和监控的关键指标：'
- en: '**Service health**: Each service needs to publish its health status. These
    need to be managed/tracked to identify slow or dead services.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务健康**：每个服务都需要发布其健康状态。这些需要被管理/跟踪以识别慢或死亡的服务。'
- en: '**Service metrics**: Each service also publishes throughput metrics data, such
    as the number of HTTP requests/responses, the request/response size, and the response
    latency.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务指标**：每个服务还发布吞吐量指标数据，如HTTP请求/响应的数量、请求/响应大小和响应延迟。'
- en: '**Process info**: Each service will publish JVM metrics data (like heap utilization,
    the number of threads, and the process state) typically available as part of the
    Java VisualVM.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程信息**：每个服务将发布JVM指标数据（如堆利用率、线程数和进程状态），通常作为Java VisualVM的一部分。'
- en: '**Log events as stream**: Each service can also publish log events as a set
    of streaming events.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作为流记录事件**：每个服务也可以将日志事件发布为一组流事件。'
- en: All of this information is pulled from the services and tied together to manage
    and monitor the application services landscape. Two types of analysis—event correlation
    and correction decisions—need to be done. Alerts and actuation services are built
    as part of the service monitoring systems. For example, if a certain number of
    service instances need to be maintained and the number reduces (service not available
    due to health check) then an actuation service can take the event as an indicator
    to add another instance of the same service.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些信息都是从服务中提取出来的，并结合在一起来管理和监控应用服务的景观。需要进行两种类型的分析——事件相关性和纠正决策。警报和执行服务是作为服务监控系统的一部分构建的。例如，如果需要维护一定数量的服务实例，而数量减少（由于健康检查导致服务不可用），那么执行服务可以将该事件视为添加另一个相同服务实例的指示器。
- en: 'Further, in order to track the service call flow through the microservices
    model, there is third-party software available that can help create a request
    identified and track how the service call flows through the microservices. This
    software typically deploys agents onto the containers, which weave them into the
    services and track the service metrics:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了跟踪服务调用流程通过微服务模型，有第三方软件可用于帮助创建请求标识并跟踪服务调用如何通过微服务流动。这种软件通常会将代理部署到容器上，将它们编织到服务中并跟踪服务指标：
- en: '![](img/38d5af25-d188-4fc3-8b4d-c7bb2f3e5f65.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38d5af25-d188-4fc3-8b4d-c7bb2f3e5f65.png)'
- en: Service metrics
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 服务指标
- en: '**Container management/orchestration**: Another key infrastructure piece of
    the microservice environment is container management and orchestration. The services
    are typically bundled in a container and deployed in a PaaS environment. The environment
    can be based on an OpenShift model, a Cloud Foundry model, or a pure VM-based
    model, depending whether they are deployed on a private or a public cloud. To
    deploy and manage the dependencies between the containers, there is a need for
    container management and orchestration software. Typically, it should be able
    to understand the interdependencies between the containers and deploy the containers
    as an application. For example, if the application has four pieces—one for UI,
    two for business services, and one for data store—then all of these containers
    should be tagged together and deployed as a single unit with interdependencies
    and the right order of instantiation injected.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器管理/编排**：微服务环境的另一个关键基础设施部分是容器管理和编排。服务通常打包在容器中，并部署在PaaS环境中。环境可以基于OpenShift模型、Cloud
    Foundry模型或纯VM模型，具体取决于它们是部署在私有云还是公共云上。为了部署和管理容器之间的依赖关系，需要容器管理和编排软件。通常，它应该能够理解容器之间的相互依赖关系，并将容器部署为一个应用程序。例如，如果应用程序有四个部分——一个用于UI，两个用于业务服务，一个用于数据存储——那么所有这些容器应该被标记在一起，并作为一个单元部署，注入相互依赖和正确的实例化顺序。'
- en: '**Log aggregation**: 1 of the 12 factors is treating logs as event streams.
    The containers are meant to be stateless. The log statements are typically stateful
    events that need to be persisted beyond the life of the containers. As a result,
    all logs from the containers are treated as event streams that can be pushed/pulled
    onto a centralized log repository. All the logs are aggregated and various models
    can be run on these logs for various alerts. One can track security and failure
    events through these logs, which can feed into the service management/monitoring
    system for further actions:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志聚合**：12个因素之一是将日志视为事件流。容器应该是无状态的。日志语句通常是需要在容器的生命周期之外持久化的有状态事件。因此，来自容器的所有日志都被视为可以推送/拉取到集中日志存储库的事件流。所有日志都被聚合，可以对这些日志运行各种模型以获取各种警报。人们可以通过这些日志跟踪安全和故障事件，这些事件可以反馈到服务管理/监控系统以进行进一步的操作：'
- en: '![](img/0f67dc59-ae15-4183-bdf8-04f99e7c4aea.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f67dc59-ae15-4183-bdf8-04f99e7c4aea.png)'
- en: Log aggregation
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 日志聚合
- en: '**API Gateway/management**: The services are meant to be simple and follow
    the single responsibility model. The question arises: who will handle other concerns,
    such as service authentication, service metering, service throttling, service
    load balancing, and service freemium/premium models? This is where the API Gateway
    or management software comes into the picture. The API Gateway handles all such
    concerns on behalf of the microservice. The API Gateway provides multiple options
    for managing the service endpoints and can also provide transformation, routing,
    and mediation capabilities. The API Gateway is more lightweight, compared to the
    typical enterprise service bus.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API网关/管理**：服务应该是简单的，并遵循单一责任模型。问题是：谁来处理其他关注点，比如服务认证、服务计量、服务限流、服务负载平衡和服务免费/付费模型？这就是API网关或管理软件出现的地方。API网关代表微服务处理所有这些关注点。API网关提供了多种管理服务端点的选项，还可以提供转换、路由和调解能力。与典型的企业服务总线相比，API网关更轻量级。'
- en: '![](img/fbc8c9bf-8bcc-4edd-844e-7b39dff07a53.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbc8c9bf-8bcc-4edd-844e-7b39dff07a53.png)'
- en: API Management Gateway
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: API管理网关
- en: '**DevOps**: Another key aspect is the continuous integration/deployment pipeline,
    coupled with the automated operations that need to set up the microservice-based
    applications. As the developer writes code, it goes through a series of steps
    that need to be automated and mapped with gating criteria to allow the release
    of regression-tested code:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevOps**：另一个关键方面是持续集成/部署管道，以及需要设置基于微服务的应用程序的自动化操作。开发人员编写代码时，它经历一系列需要自动化的步骤，并与门控标准进行映射，以允许发布经过回归测试的代码：'
- en: '![](img/91ab3f51-789e-4385-9251-8e3c182239cc.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91ab3f51-789e-4385-9251-8e3c182239cc.png)'
- en: Development life cycle
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 开发生命周期
- en: Microservice adoption
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务采用
- en: Microservice adoption within an enterprise is driven by a common theme of digital
    transformation, whether they are looking to re-architect the existing monolithic
    applications in the system of innovations to increase business agility and reduce
    technical debt, or to develop greenfield applications that allow them to rapidly
    innovate and experiment with different business models.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 企业内的微服务采用受到数字转型的共同主题的推动，无论他们是要重新架构现有的单片应用程序以增加业务敏捷性和减少技术债务，还是要开发允许他们快速创新和尝试不同业务模式的全新应用程序。
- en: Monolithic transformation
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体转型
- en: Enterprises have been running channel applications built on JEE principles running
    on clusters of application servers. These applications have accumulated a lot
    of technical debt over the years and have become a major issue—large, unwieldy,
    and resistant to constant change.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 企业一直在运行基于JEE原则构建的通道应用程序，运行在应用服务器集群上。这些应用程序多年来积累了大量技术债务，并成为一个主要问题——庞大、笨重，难以不断变化。
- en: With the increase in competition in the business environment and the proliferation
    of the channels, businesses are looking for faster innovation and to provide seamless
    customer experience. On the other hand, they do not want to throw away the existing
    investment in the existing applications.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 随着商业环境竞争的加剧和渠道的增加，企业正在寻求更快的创新，并提供无缝的客户体验。另一方面，他们不希望放弃现有应用程序的投资。
- en: In this scenario, enterprises are undertaking multiple programs to re-factor
    and re-architect the existing applications into modern, distributed, microservice-based
    models that provide the currency of rapid iteration and are future-proof.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，企业正在进行多个项目，将现有应用程序重构和重新架构为现代、分布式、基于微服务的模型，以提供快速迭代的货币化，并具有未来的保障。
- en: 'Enterprises are attacking this problem in a two-prong manner:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 企业正在以双管齐下的方式解决这个问题：
- en: Setting the base platform that provides the core ecosystem as a set of services
    to deploy and run the microservices. These services include Configuration Management,
    Service Discovery, Elastic Compute, Container Management, Security, Management
    and Monitoring, DevOps pipeline, and more. Enterprises typically weigh in between
    using the public cloud and setting up a private cloud. The choice of cloud platform
    depends on the industry in question and the maturity of the enterprise strategy.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立提供核心生态系统作为一组服务来部署和运行微服务的基础平台。这些服务包括配置管理、服务发现、弹性计算、容器管理、安全、管理和监控、DevOps管道等。企业通常在使用公共云和建立私有云之间权衡。云平台的选择取决于所涉及的行业和企业战略的成熟度。
- en: The second approach is to chip at the monolithic application, one functional
    piece at a time, and migrate the core business logic to the microservice model.
    The GUI part is separately migrated to an SPA model using frameworks such as AngularJS
    and ReactJS. For example, a lot of e-commerce enterprises have moved their catalogue
    and search services to elastic cloud providers. Only when the customer clicks
    the checkout do they bring the customer to the in-house data center.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二种方法是逐步削减整体应用程序，一次一个功能模块，将核心业务逻辑迁移到微服务模型。GUI部分则单独迁移到使用AngularJS和ReactJS等框架的SPA模型。例如，许多电子商务企业已将其目录和搜索服务迁移到弹性云提供商。只有当客户点击结账时，他们才将客户带到内部数据中心。
- en: Once the enterprise has set up the ecosystem with respect to platform services,
    the ability to add more microservice-based functionality becomes easy, providing
    the required impetus in terms of business agility and innovation.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦企业建立了关于平台服务的生态系统，增加更多基于微服务的功能变得容易，为业务敏捷性和创新提供所需的推动力。
- en: We will cover digital transformation in more detail in [Chapter 12](b1d89d14-e64f-4346-9a73-b2a3b24d2b4f.xhtml),
    *Digital Transformation*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第12章](b1d89d14-e64f-4346-9a73-b2a3b24d2b4f.xhtml)中更详细地介绍数字转型，“数字转型”。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered what cloud-native programming is and why to go for
    it. We saw what the various adoption models for enterprises, when it comes to
    cloud-native applications, are. We covered the 12 factors for distributed applications,
    along with the usage of microservice-based design for cloud-native enablement.
    We covered the enablement ecosystem for building microservices-based applications.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了什么是云原生编程以及为什么要选择它。我们看到了企业在云原生应用方面的各种采用模型。我们介绍了分布式应用的12个因素，以及微服务设计在云原生启用中的使用。我们介绍了构建基于微服务的应用程序的启用生态系统。
- en: As we progress through the book, we will cover how to design, build, and run
    your cloud-native application. We will also cover cloud-native application development
    using two cloud provider platforms—AWS and Azure. We will make use of their platform
    services to build a cloud-native application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在本书中的进展，我们将介绍如何设计，构建和运行您的云原生应用程序。我们还将介绍使用两个云提供商平台（AWS和Azure）进行云原生应用程序开发。我们将利用它们的平台服务来构建云原生应用程序。
- en: We will also cover operational aspects of the cloud-native application—DevOps,
    deployment, monitoring, and management. Lastly, we will cover how to transform
    existing monolithic applications into modern distributed cloud-native applications.
    In the next chapter, we will dive right into creating our first cloud-native application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍云原生应用程序的运营方面——DevOps、部署、监控和管理。最后，我们将介绍如何将现有的单片应用程序转变为现代分布式云原生应用程序。在下一章中，我们将直接开始创建我们的第一个云原生应用程序。
