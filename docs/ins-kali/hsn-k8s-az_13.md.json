["```\n    az aks nodepool scale --cluster-name handsonaks \\\n    \u00a0\u00a0-g rg-handsonaks --name agentpool--node-count 1\n    ```", "```\n    EXISTINGAKSNAME=\"handsonaks\"\n    NEWAKSNAME=\"handsonaks-aad\"\n    RGNAME=\"rg-handsonaks\"\n    LOCATION=\"westus2\"\n    TENANTID=$(az account show --query tenantId -o tsv)\n    ```", "```\n    # Get SP from existing cluster and create new password\n    RBACSP=$(azaks show -n $EXISTINGAKSNAME -g $RGNAME \\\n    \u00a0\u00a0--query servicePrincipalProfile.clientId -o tsv)\n    RBACSPPASSWD=$(openssl rand -base64 32)\n    az ad sp credential reset --name $RBACSP \\\n    \u00a0\u00a0--password $RBACSPPASSWD --append\n    ```", "```\n    serverApplicationId=$(az ad app create \\\n    \u00a0\u00a0\u00a0\u00a0--display-name \"${NEWAKSNAME}Server\" \\\n    \u00a0\u00a0\u00a0\u00a0--identifier-uris \"https://${NEWAKSNAME}Server\" \\\n    \u00a0\u00a0\u00a0\u00a0--query appId -o tsv)\n    ```", "```\n    az ad app update --id $serverApplicationId --set groupMembershipClaims=All\n    az ad sp create --id $serverApplicationId\n    serverApplicationSecret=$(az ad sp credential reset \\\n    \u00a0\u00a0\u00a0\u00a0--name $serverApplicationId \\\n    \u00a0\u00a0\u00a0\u00a0--credential-description \"AKSPassword\" \\\n    \u00a0\u00a0\u00a0\u00a0--query password -o tsv)\n    ```", "```\n    az ad app permission add \\\n    --id $serverApplicationId \\\n    \u00a0\u00a0\u00a0\u00a0--api 00000003-0000-0000-c000-000000000000 \\\n    \u00a0\u00a0\u00a0\u00a0--api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope \\\n    \u00a0\u00a0\u00a0\u00a006da0dbc-49e2-44d2-8312-53f166ab848a=Scope \\\n    \u00a0\u00a0\u00a0\u00a07ab1d382-f21e-4acd-a863-ba3e13f7da61=Role\n    az ad app permission grant --id $serverApplicationId\\\n    \u00a0\u00a0\u00a0\u00a0--api 00000003-0000-0000-c000-000000000000\n    ```", "```\n    clientApplicationId=$(az ad app create \\\n    \u00a0\u00a0\u00a0\u00a0--display-name \"${NEWAKSNAME}Client\" \\\n    \u00a0\u00a0\u00a0\u00a0--native-app \\\n    \u00a0\u00a0\u00a0\u00a0--reply-urls \"https://${NEWAKSNAME}Client\" \\\n    \u00a0\u00a0\u00a0\u00a0--query appId -o tsv)\n    az ad sp create --id $clientApplicationId\n    oAuthPermissionId=$(az ad app show --id $serverApplicationId\\\n    --query \"oauth2Permissions[0].id\" -o tsv)\n    az ad app permission add --id $clientApplicationId \\\n    --api$serverApplicationId --api-permissions \\\n    $oAuthPermissionId=Scope\n    az ad app permission grant --id $clientApplicationId\\\n    --api $serverApplicationId\n    ```", "```\n    azaks create \\\n    \u00a0\u00a0\u00a0\u00a0--resource-group $RGNAME \\\n    \u00a0\u00a0\u00a0\u00a0--name $NEWAKSNAME \\\n    \u00a0\u00a0\u00a0\u00a0--location $LOCATION\n    \u00a0\u00a0\u00a0\u00a0--node-count 2 \\\n    \u00a0\u00a0\u00a0\u00a0--node-vm-size Standard_D1_v2 \\\n    \u00a0\u00a0\u00a0\u00a0--generate-ssh-keys \\\n    \u00a0\u00a0\u00a0\u00a0--aad-server-app-id $serverApplicationId \\\n    \u00a0\u00a0\u00a0\u00a0--aad-server-app-secret $serverApplicationSecret \\\n    \u00a0\u00a0\u00a0\u00a0--aad-client-app-id $clientApplicationId \\\n    \u00a0\u00a0\u00a0\u00a0--aad-tenant-id $TENANTID \\\n    \u00a0\u00a0\u00a0\u00a0--service-principal $RBACSP \\\n    \u00a0\u00a0\u00a0\u00a0--client-secret $RBACSPPASSWD\n    ```", "```\n    az ad group show -g 'kubernetes-admins' --query objectId -o tsv\n    ```", "```\n    az aks get-credentials -n handsonaksad -g rg-handsonaks --admin\n    ```", "```\n    kubectl create ns no-access\n    kubectl create ns delete-access\n    ```", "```\n    kubectl create -f azure-vote.yaml -n no-access\n    kubectl create -f azure-vote.yaml -n delete-access\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: rbac.authorization.k8s.io/v1\n    2\u00a0\u00a0\u00a0kind: ClusterRole\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: readOnly\n    5\u00a0\u00a0\u00a0rules:\n    6\u00a0\u00a0\u00a0- apiGroups: [\"\"]\n    7\u00a0\u00a0\u00a0\u00a0\u00a0resources: [\"pods\"]\n    8\u00a0\u00a0\u00a0\u00a0\u00a0verbs: [\"get\", \"watch\", \"list\"]\n    ```", "```\n    kubectl create -f clusterRole.yaml\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: rbac.authorization.k8s.io/v1\n    2\u00a0\u00a0\u00a0kind: ClusterRoleBinding\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: readOnlyBinding\n    5\u00a0\u00a0\u00a0roleRef:\n    6\u00a0\u00a0\u00a0\u00a0\u00a0kind: ClusterRole\n    7\u00a0\u00a0\u00a0\u00a0\u00a0name: readOnly\n    8\u00a0\u00a0\u00a0\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n    9\u00a0\u00a0\u00a0subjects:\n    10\u00a0\u00a0- kind: Group\n    11\u00a0\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n    12\u00a0\u00a0\u00a0name: \"<group-id>\"\n    ```", "```\n    kubectl create -f clusterRoleBinding.yaml\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: rbac.authorization.k8s.io/v1\n    2\u00a0\u00a0\u00a0kind: Role\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: deleteRole\n    5\u00a0\u00a0\u00a0\u00a0\u00a0namespace: delete-access\n    6\u00a0\u00a0\u00a0rules:\n    7\u00a0\u00a0\u00a0- apiGroups: [\"\"]\n    8\u00a0\u00a0\u00a0\u00a0\u00a0resources: [\"pods\"]\n    9\u00a0\u00a0\u00a0\u00a0\u00a0verbs: [\"delete\"]\n    ```", "```\n    kubectl create -f role.yaml\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: rbac.authorization.k8s.io/v1\n    2\u00a0\u00a0\u00a0kind: RoleBinding\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: deleteBinding\n    5\u00a0\u00a0\u00a0\u00a0\u00a0namespace: delete-access\n    6\u00a0\u00a0\u00a0roleRef:\n    7\u00a0\u00a0\u00a0\u00a0\u00a0kind: Role\n    8\u00a0\u00a0\u00a0\u00a0\u00a0name: deleteRole\n    9\u00a0\u00a0\u00a0\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n    10\u00a0\u00a0subjects:\n    11\u00a0\u00a0- kind: User\n    12\u00a0\u00a0\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n    13\u00a0\u00a0\u00a0\u00a0name: \"<user e-mail address>\"\n    ```", "```\n    kubectl create -f roleBinding.yaml\n    ```", "```\n    az aks get-credentials -n handsonaksaad -g rg-handsonaks\n    ```", "```\n    kubectl get nodes\n    ```", "```\n    kubectl get pods -n no-access\n    kubectl get pods -n delete-access\n    ```", "```\n    kubectl delete pod --all -n no-access\n    kubectl delete pod --all -n delete-access\n    ```", "```\naz aks delete -n handsonaksaad -g rg-handsonaks\naz aks get-credentials -n handsonaks -g rg-handsonaks\naz aks nodepool scale --cluster-name handsonaks \\\n\u00a0\u00a0-g rg-handsonaks --name agentpool --node-count 2\n```", "```\n    echo https://my-secret-url-location.topsecret.com \\\n    > secreturl.txt\n    ```", "```\n    echo 'superSecretToken' > secrettoken.txt\n    ```", "```\n    kubectl create secret generic myapi-url-token \\\n    --from-file=./secreturl.txt --from-file=./secrettoken.txt\n    ```", "```\n    secret/myapi-url-token created\n    ```", "```\n    kubectl get secrets\n    ```", "```\n    kubectl describe secrets/myapi-url-token\n    ```", "```\n    kubectl get -o yaml secrets/myapi-url-token\n    ```", "```\n    echo 'c3VwZXJTZWNyZXRUb2tlbgo=' | base64 -d\n    ```", "```\n    echo 'aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K'| base64 -d\n    ```", "```\n    echo 'superSecretToken' | base64\n    ```", "```\n    c3VwZXJTZWNyZXRUb2tlbgo=\n    ```", "```\n    echo 'https://my-secret-url-location.topsecret.com' | base64\n    ```", "```\n    aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: v1\n    2\u00a0\u00a0\u00a0kind: Secret\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: myapiurltoken-yaml\n    5\u00a0\u00a0\u00a0type: Opaque\n    6\u00a0\u00a0\u00a0data:\n    7\u00a0\u00a0\u00a0\u00a0\u00a0url: aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K\n    8\u00a0\u00a0\u00a0\u00a0\u00a0token: c3VwZXJTZWNyZXRUb2tlbgo=\n    ```", "```\n    kubectl create -f myfirstsecret.yaml\n    ```", "```\n    kubectl get secrets\n    ```", "```\nkubectl create secret generic myapiurltoken-literal \\\n--from-literal=token='superSecretToken' \\\n--from-literal=url=https://my-secret-url-location.topsecret.com\n```", "```\nkubectl get secrets\n```", "```\nkubectl create secret docker-registry <secret-name> \\\n--docker-server=<your- registry-server> \\\n--docker-username=<your-name> \\\n--docker-password=<your-pword> --docker-email=<your-email>\n```", "```\nkubectl create secret tls <secret-name> --key <ssl.key> --cert <ssl.crt>\n```", "```\n    1\u00a0\u00a0\u00a0apiVersion: v1\n    2\u00a0\u00a0\u00a0kind: Pod\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: secret-using-env\n    5\u00a0\u00a0\u00a0spec:\n    6\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    7\u00a0\u00a0\u00a0\u00a0\u00a0- name: nginx\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: nginx\n    9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0env:\n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: SECRET_URL\n    11\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0valueFrom:\n    12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretKeyRef:\n    13\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: myapi-url-token\n    14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key: secreturl.txt\n    15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: SECRET_TOKEN\n    16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0valueFrom:\n    17\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretKeyRef:\n    18\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: myapi-url-token\n    19\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key: secrettoken.txt\n    20\u00a0\u00a0\u00a0\u00a0restartPolicy: Never\n    ```", "```\n    kubectl create -f pod-with-env-secrets.yaml\n    ```", "```\n    kubectl exec -it secret-using-env sh\n    echo $SECRET_URL\n    echo $SECRET_TOKEN\n    ```", "```\n1\u00a0\u00a0\u00a0apiVersion: v1\n2\u00a0\u00a0\u00a0kind: Pod\n3\u00a0\u00a0\u00a0metadata:\n4\u00a0\u00a0\u00a0\u00a0\u00a0name: secret-using-volume\n5\u00a0\u00a0\u00a0spec:\n6\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n7\u00a0\u00a0\u00a0\u00a0\u00a0- name: nginx\n8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: nginx\n9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: secretvolume\n11\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: \"/etc/secrets\"\n12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly: true\n13\u00a0\u00a0\u00a0\u00a0volumes:\n14\u00a0\u00a0\u00a0\u00a0- name: secretvolume\n15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secret:\n16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretName: myapi-url-token\n```", "```\n    kubectl create -f pod-with-vol-secret.yaml\n    ```", "```\n    kubectl exec -it secret-using-volume bash\n    cd /etc/secrets/ \n    cat secreturl.txt\n    cat /etc/secrets/secrettoken.txt \n    ```", "```\n    kubectl describe pod secret-using-env | grep Node\n    ```", "```\n    kubectl describe pod secret-using-env | grep 'docker://'\n    ```", "```\n    INSTANCE=<provide instance number>\n    DOCKERID=<provide Docker ID>\n    VMSS=$(az vmss list --query '[].name' -o tsv)\n    RGNAME=$(az vmss list --query '[].resourceGroup' -o tsv)\n    az vmss run-command invoke -g $RGNAME -n $VMSS --command-id \\\n    RunShellScript --instance-id $INSTANCE --scripts \\\n    \"docker inspect -f '{{ .Config.Env }}' $DOCKERID\" \\\n    -o yaml| grep SECRET\n    ```", "```\nkubectl delete pod --all\nkubectl delete secret myapi-url-token \\\nmyapiurltoken-literal myapiurltoken-yaml\n```", "```\n    kubectl create -f kv-flexvol-installer.yaml\n    ```", "```\n    APPID=$(az ad app create \\\n    \u00a0\u00a0\u00a0\u00a0--display-name \"flex\" \\\n    \u00a0\u00a0\u00a0\u00a0--identifier-uris \"https://flex\" \\\n    \u00a0\u00a0\u00a0\u00a0--query appId -o tsv)\n    az ad sp create --id $APPID\n    APPPASSWD=$(az ad sp credential reset \\\n    \u00a0\u00a0\u00a0\u00a0--name $APPID \\\n    \u00a0\u00a0\u00a0\u00a0--credential-description \"KeyVault\" \\\n    \u00a0\u00a0\u00a0\u00a0--query password -o tsv)\n    ```", "```\n    kubectl create secret generic kvcreds \\\n    --from-literal=clientid=$APPID \\\n    --from-literal=clientsecret=$APPPASSWD --type=azure/kv\n    ```", "```\n    KVNAME=handsonaks-kv\n    az keyvault set-policy -n $KVNAME --key-permissions \\\n    \u00a0\u00a0get --spn $APPID\n    az keyvault set-policy -n $KVNAME --secret-permissions \\\n    \u00a0\u00a0get --spn $APPID\n    az keyvault set-policy -n $KVNAME --certificate-permissions \\\n    \u00a0\u00a0get --spn $APPID\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: v1\n    2\u00a0\u00a0\u00a0kind: Pod\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: nginx-secret-flex\n    5\u00a0\u00a0\u00a0spec:\n    6\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    7\u00a0\u00a0\u00a0\u00a0\u00a0- name: nginx\n    8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: nginx\n    9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: test\n    11\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: /etc/secret/\n    12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly: true\n    13\u00a0\u00a0\u00a0\u00a0volumes:\n    14\u00a0\u00a0\u00a0\u00a0- name: test\n    15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flexVolume:\n    16\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0driver: \"azure/kv\"\n    17\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretRef:\n    18\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: kvcreds\n    19\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0options:\n    20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyvaultname: <keyvault name>\n    21\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyvaultobjectnames: k8s-secret-demo\n    22\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyvaultobjecttypes: secret\n    23\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tenantid: \"<tenant ID>\"\n    ```", "```\n    kubectl create -f pod_secret_flex.yaml\n    ```", "```\n    kubectl exec -it nginx-secret-flex bash\n    cd /etc/secret\n    cat k8s-secret-demo\n    ```", "```\nkubectl delete -f pod_secret_flex.yaml\nkubectl delete -f kv-flexvol-installer.yaml\nkubectl delete secret kvcreds\n```", "```\n    cd ~\n    curl -L https://istio.io/downloadIstio | sh -\n    ```", "```\n    ls | grep istio \n    ```", "```\n    export PATH=\"$PATH:~/istio-<release-number>/bin\"\n    ```", "```\n    istioctl verify-install\n    ```", "```\n    istioctl manifest apply --set profile=demo\n    ```", "```\n    kubectl get svc -n istio-system\n    ```", "```\n    kubectl label namespace default istio-injection=enabled\n    ```", "```\n    kubectl create -f bookinfo.yaml\n    ```", "```\n    kubectl get pods\n    ```", "```\n    kubectl describe pods/productpage-v1-<pod-ID>\n    ```", "```\n    kubectl create ns foo\n    kubectl apply -f <(istioctl kube-inject \\\n    -f httpbin.yaml) -n foo \n    kubectl apply -f <(istioctl kube-inject \\\n    -f sleep.yaml) -n foo\n    kubectl create ns bar\n    kubectl apply -f <(istioctl kube-inject \\\n    -f httpbin.yaml) -n bar\n    kubectl apply -f <(istioctl kube-inject \\\n    -f sleep.yaml) -n bar\n    kubectl create ns legacy\n    kubectl apply -f httpbin.yaml -n legacy \n    kubectl apply -f sleep.yaml -n legacy\n    ```", "```\n    bash test_mtls.sh\n    ```", "```\n    kubectl get policies.authentication.istio.io \\\n    --all-namespaces\n    kubectl get meshpolicies.authentication.istio.io\n    ```", "```\n    kubectl get destinationrules.networking.istio.io \\\n    --all-namespaces -o yaml | grep \"host:\"\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: authentication.istio.io/v1alpha1\n    2\u00a0\u00a0\u00a0kind: MeshPolicy\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: default\n    5\u00a0\u00a0\u00a0spec:\n    6\u00a0\u00a0\u00a0\u00a0\u00a0peers:\n    7\u00a0\u00a0\u00a0\u00a0\u00a0- mtls: {}\n    ```", "```\n    kubectl apply -f mtls_policy.yaml\n    ```", "```\n    bash test_mtls.sh\n    ```", "```\n    1\u00a0\u00a0\u00a0apiVersion: networking.istio.io/v1alpha3\n    2\u00a0\u00a0\u00a0kind: DestinationRule\n    3\u00a0\u00a0\u00a0metadata:\n    4\u00a0\u00a0\u00a0\u00a0\u00a0name: default\n    5\u00a0\u00a0\u00a0\u00a0\u00a0namespace: istio-system\n    6\u00a0\u00a0\u00a0spec:\n    7\u00a0\u00a0\u00a0\u00a0\u00a0host: \"*.local\"\n    8\u00a0\u00a0\u00a0\u00a0\u00a0trafficPolicy:\n    9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tls:\n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mode: ISTIO_MUTUAL\n    ```", "```\nkubectl create -f destinationRule.yaml\n```", "```\nbash test_mtls.sh\n```", "```\nistioctl manifest generate --set profile=demo | kubectl delete -f -\nfor NS in \"foo\" \"bar\" \"legacy\"\ndo\nkubectl delete -f sleep.yaml -n $NS\nkubectl delete -f httpbin.yaml -n $NS\ndone\nkubectl delete -f bookinfo.yaml\n```"]