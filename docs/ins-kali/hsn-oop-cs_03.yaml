- en: Implementation of OOP in C#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在C#中实现面向对象编程
- en: In the previous chapter, we looked at classes, objects, and the four principles
    of OOP. In this chapter, we will learn about some C# language features that make
    the language an OOP language. Without knowing these concepts, writing object-oriented
    code with C# programming could be difficult, or will prevent you from using it
    to its full potential. In [Chapter 2](aa24810a-3609-442e-b26b-3b742d0ddc2f.xhtml),
    *Hello OOP - Classes and Objects,* we learned that abstraction, inheritance, encapsulation,
    and polymorphism are the four basic principles of OOP, but we haven't yet learned
    how the C# language can be used to fulfill these principles. We are going to discuss
    this topic in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们看了类、对象和面向对象编程的四个原则。在本章中，我们将学习一些使C#语言成为面向对象编程语言的语言特性。如果不了解这些概念，使用C#编程写面向对象的代码可能会很困难，或者会阻止你充分发挥其潜力。在[第2章](aa24810a-3609-442e-b26b-3b742d0ddc2f.xhtml)，*Hello
    OOP - Classes and Objects*中，我们学到了抽象、继承、封装和多态是面向对象编程的四个基本原则，但我们还没有学习C#语言如何实现这些原则。我们将在本章讨论这个话题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Interfaces
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口
- en: The abstract class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类
- en: The partial class
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分类
- en: The sealed class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封闭类
- en: Tuples
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组
- en: Properties
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: Access specifiers for classes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类的访问修饰符
- en: Interfaces
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口
- en: A class is a blueprint, which means it contains the members and methods that
    the instantiated objects will have. An **interface** can also be categorized as
    a blueprint, but unlike a class, an interface doesn't have any method implementation.
    Interfaces are more like a guideline for classes that implement the interface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类是一个蓝图，这意味着它包含了实例化对象将具有的成员和方法。**接口**也可以被归类为蓝图，但与类不同，接口没有任何方法实现。接口更像是实现接口的类的指南。
- en: 'The main features of interfaces in C# are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: C#中接口的主要特点如下：
- en: Interfaces can't have a method body; they can only have the method signature.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口不能有方法体；它们只能有方法签名。
- en: Interfaces can have methods, properties, events, and indexes.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口可以有方法、属性、事件和索引。
- en: An interface can't be instantiated, so no object of an interface can be created.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口不能被实例化，因此不能创建接口的对象。
- en: One class can extend multiple interfaces.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个类可以扩展多个接口。
- en: 'One of the major uses of an interface is dependency injection. By using interfaces,
    you can reduce the dependencies in a system. Let''s look at an example of an interface:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接口的一个主要用途是依赖注入。通过使用接口，可以减少系统中的依赖关系。让我们看一个接口的例子：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding example, we can see that we have one interface, called `IBankAccount`, that
    has two members: `Debit` and `Credit`. Both of these methods have no implementations
    in the interface. In the interface, the method signatures are more like guidelines
    or requirements for the classes that will implement this interface. If any class
    implements this interface, then the class has to implement the method body. This
    is a great use of the OOP concept of inheritance. The class will have to give
    an implementation of the methods that are mentioned in the interface. If the class
    doesn''t implement any of the methods of the interface, the compiler will throw
    an error that the class has not implemented all the methods of the interface.
    By language design, if an interface is implemented by a class, all the members
    of the interface must be taken care of in the class. Consequently, in the preceding
    code, the `BankAccount` class has implemented the `IBankAccount` interface and
    this is why the two methods, `Debit` and `Credit`, have to be implemented.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以看到我们有一个接口，名为`IBankAccount`，它有两个成员：`Debit`和`Credit`。这两个方法在接口中没有实现。在接口中，方法签名更像是实现这个接口的类的指南或要求。如果任何类实现了这个接口，那么这个类必须实现方法体。这是面向对象编程概念继承的一个很好的用法。类将不得不给出在接口中提到的方法的实现。如果类没有实现接口的任何方法，编译器将抛出一个错误，表示类没有实现接口的所有方法。按照语言设计，如果一个类实现了一个接口，那么这个类的所有成员都必须在类中得到处理。因此，在前面的代码中，`BankAccount`类实现了`IBankAccount`接口，这就是为什么`Debit`和`Credit`这两个方法必须被实现的原因。
- en: The abstract class
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象类
- en: An **abstract class** is a special kind of class that comes with the C# programming
    language. This class has similar functionalities to an interface. For example,
    an abstract class can have methods without implementation and with implementation.
    Consequently, when a class implements an abstract class, the class has to override
    the **abstract methods** of the abstract class. One of the main characteristics
    of an abstract class is that it can't be instantiated. An abstract class can only
    be used for inheritance. It might or might not have abstract methods and assessors.
    Sealed and abstract modifiers can't be placed in the same class, as they have
    completely separate meanings.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**抽象类**是C#编程语言中的一种特殊类。这个类与接口有类似的功能。例如，抽象类可以有带有和不带有实现的方法。因此，当一个类实现一个抽象类时，这个类必须重写抽象类的**抽象方法**。抽象类的一个主要特征是它不能被实例化。抽象类只能用于继承。它可能有也可能没有抽象方法和访问器。封闭和抽象修饰符不能放在同一个类中，因为它们有完全不同的含义。'
- en: 'Let''s take a look at an example of an abstract class:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个抽象类的例子：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, we saw that the `Dog` class is implementing the `Animal`
    class, and as the `Animal` class has an abstract method called `Move()`, the `Dog`
    class must override it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们看到`Dog`类实现了`Animal`类，而`Animal`类有一个名为`Move()`的抽象方法，`Dog`类必须重写它。
- en: 'If we try to instantiate the abstract class, the compiler will throw an error,
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试实例化抽象类，编译器将抛出一个错误，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The partial class
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分类
- en: You can split a class, a struct, or an interface into smaller portions that
    can be placed in different code files. If you want to do this, you have to use
    the keyword **partial**. Even though the code is in separate code files, when
    complied, they will be treated as one class altogether. There are many benefits
    of partial classes. One benefit is that different developers can work on different
    code files at a time. Another benefit is that if you are using autogenerated code
    and you want to extend some functionality of that autogenerated code, you can
    use a partial class in a separate file. Consequently, you are not directly touching
    the autogenerated code, but adding new functionality in the class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将一个类、结构体或接口分割成可以放在不同代码文件中的较小部分。如果要这样做，必须使用关键字**partial**。即使代码在单独的代码文件中，编译时它们将被视为一个整体类。部分类有许多好处。一个好处是不同的开发人员可以同时在不同的代码文件上工作。另一个好处是，如果您正在使用自动生成的代码，并且想要扩展该自动生成的代码的某些功能，可以在单独的文件中使用部分类。因此，您不是直接触及自动生成的代码，而是在类中添加新功能。
- en: The partial class has a few requirements, one of which is that all classes must
    have the keyword `partial` in their signatures. All the partial classes also have
    to have the same name, but the file names can be different. The partial classes
    also have to have the same accessibility, such as public, private, and so on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 部分类有一些要求，其中之一是所有类必须在其签名中有关键字`partial`。所有部分类还必须具有相同的名称，但文件名可以不同。部分类还必须具有相同的可访问性，如public、private等。
- en: 'The following is an example of a partial class:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是部分类的示例：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As shown in the preceding code, you can create many partial classes of a class.
    This will increase the readability of your code, and your code organization will
    be more structured.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，您可以创建一个类的许多部分类。这将增加代码的可读性，使代码组织更加结构化。
- en: The sealed class
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密封类
- en: One of the principles of OOP is inheritance, but sometimes you may need to restrict
    inheritance in your code for the sake of your application's architecture. C# provides
    a keyword called `sealed`. If this keyword is placed before a class's signature,
    the class is considered a **sealed class**. If a class is sealed, that particular
    class can't be inherited by other classes. If any class tries to inherit a sealed
    class, the compiler will throw an error. Structs can also be sealed, and in that
    case, no class can inherit that struct.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的原则之一是继承，但有时您可能需要限制代码中的继承，以符合应用程序的架构。C#提供了一个名为`sealed`的关键字。如果在类的签名之前放置这个关键字，该类被视为**密封类**。如果一个类是密封的，那个特定的类就不能被其他类继承。如果任何类尝试继承一个密封类，编译器将抛出一个错误。结构体也可以是密封的，在这种情况下，没有类可以继承该结构体。
- en: 'Let''s look at an example of a sealed class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个密封类的示例：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example, we can see how we can create a sealed class. Just
    using the `sealed` keyword before the `class` keyword makes the class a sealed
    class. In the preceding example, we created an `Animal` sealed class, and in the
    `main` method, we instantiated the class and used it. This is now working fine.
    However, if we try to create a `Dog` class that will inherit the `Animal` class,
    as in the following code, then the compiler will throw an error, saying that the
    sealed `Animal` class can''t be inherited:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到如何创建一个密封类。只需在`class`关键字之前使用`sealed`关键字即可使类成为密封类。在前面的示例中，我们创建了一个`Animal`密封类，在`main`方法中，我们实例化了该类并使用了它。现在一切都运行正常。然而，如果我们尝试创建一个将继承`Animal`类的`Dog`类，如下面的代码所示，那么编译器将抛出一个错误，说密封的`Animal`类不能被继承：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is a screenshot of what the compiler will show:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译器将显示的屏幕截图：
- en: '![](img/6f52ff92-f316-4553-b8e9-d224d8e367c9.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f52ff92-f316-4553-b8e9-d224d8e367c9.png)'
- en: Tuples
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: A **tuple** is a data structure that holds a set of data. Tuples are mainly
    helpful when you want to group data and use it. Normally, a C# method can only
    return one value. By using a tuple, it is possible to return multiple values from
    a method. The `Tuple` class is available under the `System.Tuple` namespace. A
    tuple can be created using the `Tuple<>` constructor or by an abstract method
    named `Create` that comes with the `Tuple` class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**元组**是一种保存一组数据的数据结构。当您想要对数据进行分组和使用时，元组通常很有帮助。通常，C#方法只能返回一个值。通过使用元组，可以从方法中返回多个值。`Tuple`类位于`System.Tuple`命名空间下。可以使用`Tuple<>`构造函数或`Tuple`类附带的名为`Create`的抽象方法来创建元组。'
- en: 'You can fix any data type in a tuple and access it using `Item1`, `Item2`,
    and so on. Let''s look at an example to get a better idea of this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以固定元组中的任何数据类型，并使用`Item1`、`Item2`等进行访问。让我们看一个例子，以更好地理解这一点：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s take a look at how to return a tuple from a method by using the following
    code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过以下代码从方法中返回一个元组：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Properties
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性
- en: 'For security reasons, all the fields of a class shouldn''t be exposed to the
    outside world. Consequently, exposing private fields is done by properties in
    C#, which are members of that class. Underneath the properties are special methods
    that are called **accessors**. A property contains two accessors: `get` and `set`.
    The `get` accessor gets values from the field while the `set` accessor sets values
    to the field. There is a special keyword for a property, named `value`. This represents
    the value of a field.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，类的所有字段不应该暴露给外部世界。因此，在C#中通过属性来暴露私有字段，这些属性是该类的成员。属性下面是称为**访问器**的特殊方法。属性包含两个访问器：`get`和`set`。`get`访问器从字段获取值，而`set`访问器将值设置到字段。属性有一个特殊的关键字，名为`value`。这代表了字段的值。
- en: By using access modifiers, properties can have different access levels. A property
    can be `public`, `private`, `read only`, `open for read and write`, and `write
    only`. If only the `set` accessor is implemented, this means that the `only write`
    permission is given. If both `set` and `get` accessors are implemented, this means
    that both `read` and `write` permissions are open for that property.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用访问修饰符，属性可以具有不同的访问级别。属性可以是 `public`、`private`、`read only`、`open for read
    and write` 和 `write only`。如果只实现了 `set` 访问器，这意味着只有写入权限。如果同时实现了 `set` 和 `get` 访问器，这意味着该属性对读和写都是开放的。
- en: C# provides a smart way of writing `setter` and `getter` methods. If you create
    a property in C#, you don't have to manually write `setter` and `getter` methods
    for a particular field. Consequently, the common practice in C# is to create properties
    in a class, rather than creating fields and `setter` and `getter` methods for
    those fields.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: C# 提供了一种聪明的方式来编写 `setter` 和 `getter` 方法。如果你在 C# 中创建一个属性，你不需要为特定字段手动编写 `setter`
    和 `getter` 方法。因此，在 C# 中的常见做法是在类中创建属性，而不是为这些字段创建字段和 `setter` 和 `getter` 方法。
- en: 'Let''s take a look at how to create property in C#, as shown in the following
    code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在 C# 中创建属性，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Animal` class has two properties: `Name` and `Age`. Both the properties
    have `Public` access modifiers as well as `setter` and `getter` methods. This
    means that both properties are open for `read` and `write` operations. The convention
    is that properties should be in camel case.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Animal` 类有两个属性：`Name` 和 `Age`。这两个属性都有 `Public` 访问修饰符以及 `setter` 和 `getter`
    方法。这意味着这两个属性都对读和写操作是开放的。约定是属性应该使用驼峰命名法。'
- en: 'If you want to modify your `set` and `get` methods, you can do so in the following
    way:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想修改你的 `set` 和 `get` 方法，你可以这样做：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding example, we are not using the shortcut of creating `setters`
    and `getters` for the `Name` property. We have extensively written what the `set`
    and `get` methods should do. If you look closely, you will see the `name` field
    in lowercase. This means that when you create a property in camel case, a field with
    the same name is created internally, but in Pascal case. The `value` is a special
    keyword that actually represents the value of that property.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们没有使用为 `Name` 属性创建 `setter` 和 `getter` 的快捷方式。我们广泛地写了 `set` 和 `get`
    方法应该做什么。如果你仔细看，你会看到 `name` 字段是小写的。这意味着当你使用驼峰命名法创建属性时，一个同名的字段会在内部创建，但是是以帕斯卡命名法。`value`
    是一个特殊关键字，实际上代表了该属性的值。
- en: Properties are working behind the scenes in the background, which makes the
    code much cleaner and easier to use. It's very much recommended that you use properties
    instead of local fields.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 属性在后台工作，这使得代码更加清晰和易于使用。强烈建议您使用属性而不是本地字段。
- en: Access specifiers for classes
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类的访问修饰符
- en: '**Access specifiers**, or **access modifiers**, are some reserved keywords
    that determine the accessibility of a class, method, property, or other entity.
    The object-oriented principle of encapsulation is achieved by using these access
    specifiers in C#. In total, there are five access specifiers. Let''s take a look
    at what these are and what the differences are between them.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问修饰符**，或者**访问修饰符**，是一些保留关键字，用于确定类、方法、属性或其他实体的可访问性。在 C# 中，使用这些访问修饰符实现了面向对象的封装原则。总共有五个访问修饰符。让我们看看这些是什么，它们之间的区别是什么。'
- en: Public
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共
- en: 'The **p****ublic** access specifier means that there is no limitation to access
    the entity being modified. If a class or member is set as `public`, it can be
    accessed by other classes or programs in the same assembly, other assemblies,
    and even other programs that are installed in the operating system that the program
    is running in. Normally, the starting point of an application or main method is
    set as `public`, meaning that it can be accessed by others. To make a class `public`,
    you just need to put a `public` keyword before the keyword class, as shown in
    the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共**访问修饰符意味着对正在修改的实体没有限制。如果将类或成员设置为 `public`，则可以被同一程序集中的其他类或程序、其他程序集甚至安装在运行该程序的操作系统中的其他程序访问。通常，应用程序的起点或主方法被设置为
    `public`，这意味着它可以被其他人访问。要使类为 `public`，只需在关键字 class 前面放置一个 `public` 关键字，如下面的代码所示：'
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding `Animal` class can be accessed by any other class, and as the
    member `Name` is also public, it can also be accessed from any location.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的 `Animal` 类可以被任何其他类访问，而且由于成员 `Name` 也是公共的，它也可以从任何位置访问。
- en: Private
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有
- en: The **private** specifier is the most secure access specifier available in the
    C# programming language. By setting a class or member of a class as `private`,
    you are determining that the class or the member won't be allowed to be accessed
    by other classes. The scope of a `private` member is within the class. For example,
    if you create a `private` field, that field can't be accessed outside the class.
    That `private` field can only be used internally in that class.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**私有**修饰符是 C# 编程语言中最安全的访问修饰符。通过将类或类的成员设置为 `private`，你确定该类或成员将不允许其他类访问。`private`
    成员的范围在类内。例如，如果你创建一个 `private` 字段，那个字段就不能在类外部被访问。那个 `private` 字段只能在该类内部使用。'
- en: 'Let''s look at an example of a class with a `private` field:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个带有 `private` 字段的类的例子：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, as the `GetName()` method and the `private` field `name` are in the same
    class, the method can access the field. However, if another method outside of
    the `Animal` class tries to access the `name` field, it won't be able to.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，由于 `GetName()` 方法和 `private` 字段 `name` 在同一个类中，该方法可以访问该字段。但是，如果 `Animal`
    类之外的另一个方法尝试访问 `name` 字段，它将无法访问。
- en: 'For example, in the following code, the `Main` method is trying to set the
    `private` field name, which is not permissible:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下代码中，`Main` 方法正在尝试设置 `private` 字段 name，这是不允许的：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Internal
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部
- en: If you set `internal` as an access specifier, this means that the entity is
    only accessible within the same assembly. All the classes in the assembly can
    access this class or member. When you build a project in .NET, it creates an assembly
    file, either `dll` or `exe`. There could be many assemblies in one solution, and
    internal members are only accessible by the classes on those particular assemblies.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`internal`设置为访问限定符，这意味着该实体只能在同一程序集内访问。程序集中的所有类都可以访问该类或成员。在.NET中构建项目时，它会创建一个程序集文件，可以是`dll`或`exe`。一个解决方案中可能有多个程序集，而内部成员只能被那些特定程序集中的类访问。
- en: 'Let''s look at an example of this, as shown in the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例，如下所示的代码：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Protected
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受保护的
- en: '**Protected** members are accessible by the class itself, as well as the child
    classes that inherit the class. Other than that, no other class can access a protected
    member. The protected access modifier is very useful when inheritance takes place.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的成员可以被类本身访问，以及继承该类的子类。除此之外，没有其他类可以访问受保护的成员。受保护的访问修饰符在继承发生时非常有用。
- en: 'Let''s learn how to use this by looking at the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下代码来学习如何使用这个：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Protected internal
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受保护的内部
- en: A **protected internal **is a combination of a protected access modifier and
    an internal access modifier. A member whose access modifier is `protected internal`
    can be accessed by all classes in the same assembly, as well as by any class that
    inherits it, regardless of the assembly. For example, say that you have a class
    named `Animal` in an assembly called `Assembly1.dll`. In the `Animal` class, there
    is a protected internal method called `GetName`. Any other class in `Assembly1.dll`
    can access the `GetName` method. Now, suppose there is another assembly named
    `Assembly2.dll`. In `Assembly2.dll`, there is a class named `Dog` that extends
    the `Animal` class. As `GetName` is a protected internal, even though the `Dog`
    class is in a separate assembly, it can still access the `GetName` method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**受保护的内部**是受保护的访问修饰符和内部访问修饰符的组合。其访问修饰符为`protected internal`的成员可以被同一程序集中的所有类访问，以及任何继承它的类，无论程序集如何。例如，假设您在名为`Assembly1.dll`的程序集中有一个名为`Animal`的类。在`Animal`类中，有一个受保护的内部方法叫做`GetName`。`Assembly1.dll`中的任何其他类都可以访问`GetName`方法。现在，假设还有另一个名为`Assembly2.dll`的程序集。在`Assembly2.dll`中，有一个名为`Dog`的类，它扩展了`Animal`类。由于`GetName`是受保护的内部，即使`Dog`类在一个单独的程序集中，它仍然可以访问`GetName`方法。'
- en: 'Let''s look at the following example to get a clearer understanding of this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例来更清楚地理解这一点：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at class hierarchies and some other features that
    make the C# programming language an OOP language. Knowing these concepts is essential
    for a C# developer. By knowing class hierarchies, you can design your system so
    that it is decoupled and flexible. You need to know how to use inheritance in
    your application to get the best of OOP. The interface, abstract class, sealed
    class, and partial class will give you good control of your application. When
    working in a team, defining the class hierarchies properly will help you to maintain
    code quality and security.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了类层次结构和一些其他特性，使C#编程语言成为面向对象的语言。了解这些概念对于C#开发人员至关重要。通过了解类层次结构，您可以设计系统，使其解耦且灵活。您需要知道如何在应用程序中使用继承来充分发挥面向对象的优势。接口、抽象类、密封类和部分类将帮助您更好地控制应用程序。在团队中工作时，正确定义类层次结构将有助于您维护代码质量和安全性。
- en: Knowing about tuples and properties will improve your code cleanness and make
    your life much easier when developing the application. Access specifiers are implementations
    of the OOP concept of encapsulation. It is important to be familiar with these
    concepts. You need to know which piece of code should be available publicly, which
    should be private, and which should be protected. If you misuse these access specifiers,
    you might end up in a situation where your application will have security holes
    and code repetition.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 了解元组和属性将提高您的代码清晰度，并在开发应用程序时使您的生活更加轻松。访问限定符是封装的面向对象编程概念的实现。熟悉这些概念非常重要。您需要知道哪些代码片段应该是公开的，哪些应该是私有的，哪些应该是受保护的。如果滥用这些访问限定符，您可能会陷入应用程序存在安全漏洞和代码重复的境地。
- en: In the next chapter, we will discuss the important and interesting topic of
    object collaboration.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论对象协作的重要和有趣的主题。
