["```ts\nenum SnippetKey {\n    CONTACT_ITEM_SNIPPET,\n    OTHER_SNIPPET,\n}\n\ninterface ISnippetService {\n    storeSnippet(key: SnippetKey, value: string): void;\n    retrieveSnippet(key: SnippetKey): string;\n}\n```", "```ts\nclass SnippetService implements ISnippetService {\n    public storeSnippet(key: SnippetKey, value: string) {\n    }\n    public retrieveSnippet(key: SnippetKey) {\n        return \"\";\n    }\n}\n```", "```ts\ndescribe(\"/tscode/tests/services/SnippetServiceTests.ts\", () => {\n    it(\"should store a snippet\", () => {\n        var snippetService = new SnippetService();\n        snippetService.storeSnippet(\n            SnippetKey.CONTACT_ITEM_SNIPPET, \"contact_snippet\");\n        expect(\n            snippetService.retrieveSnippet(\n                SnippetKey.CONTACT_ITEM_SNIPPET)\n        ).toBe(\"contact_snippet\");\n    });\n});\n```", "```ts\nclass SnippetService implements ISnippetService {\n    private snippetArray: string[] = new Array();\n    public storeSnippet(key: SnippetKey, value: string) {\n        this.snippetArray[key] = value;\n    }\n    public retrieveSnippet(key: SnippetKey) {\n        if (!this.snippetArray[key]) {\n            throw new Error(\n                \"SnippetService no snippet with key :\" + key);\n        }\n        return this.snippetArray[key];\n    }\n}\n```", "```ts\ninterface IInterfaceChecker {\n    methodNames?: string[];\n    propertyNames?: string[];\n    className: string;\n}\n```", "```ts\ninterface IHasIdProperty {\n    id: number;\n}\n```", "```ts\nclass IIHasIdProperty implements IInterfaceChecker {\n    propertyNames: string[] = [\"id\"];\n    className: string = \"IIHasIdProperty\";\n}\n```", "```ts\nclass PropertyOne implements IHasIdProperty  {\n    id = 1;\n}\n```", "```ts\nclass TypeScriptTinyIoC {\n    static registeredClasses: any[] = new Array();\n    public static register(\n        targetObject: any,\n        targetInterface: { new (): IInterfaceChecker; }): void {\n    }\n\n    public static resolve(\n        targetInterface: { new (): IInterfaceChecker; }): any {\n    }\n    public static clearAll() {}\n}\n```", "```ts\nit(\"should resolve instance of IIProperty to PropertyOne\", () => {\n    var propertyInstance = new PropertyOne();\n    TypeScriptTinyIoC.register(propertyInstance, IIHasIdProperty);\n\n    var iProperty: IHasIdProperty = \n        TypeScriptTinyIoC.resolve(IIHasIdProperty);\n    expect(iProperty.id).toBe(1);\n});\n```", "```ts\nTypeScriptTinyIoC.register(propertyOneInstance,\n    new IIHasIdProperty());\n```", "```ts\nTypeScriptTinyIoC.register(propertyOneInstance, IIHasIdProperty);\n```", "```ts\npublic static register(\n    targetObject: any,\n    targetInterface: { new (): IInterfaceChecker; })\n{\n    var interfaceChecker = new InterfaceChecker();\n    var targetClassName = new targetInterface();\n    if (interfaceChecker.implementsInterface(\n        targetObject, targetInterface)) {\n        this.registeredClasses[targetObject.className]\n            = targetObject;\n    } else {\n        throw new Error(\n            \"TypeScriptTinyIoC cannot register instance of \"\n            + targetClassName.className);\n    }\n}\n```", "```ts\npublic static resolve(\n    targetInterface: { new (): IInterfaceChecker; })\n{\n    var targetClassName = new targetInterface();\n    if (this.registeredClasses[targetClassName.className]) {\n        return this.registeredClasses[targetClassName.className];\n    } else {\n        throw new Error(\n            \"TypeScriptTinyIoC cannot find instance of \"\n            + targetClassName.className);\n    }\n}\n```", "```ts\npublic static clearAll() {\n    this.registeredClasses = new Array();\n}\n```", "```ts\ninterface ISnippetService {\n    storeSnippet(key: SnippetKey, value: string): void;\n    retrieveSnippet(key: SnippetKey): string;\n}\n```", "```ts\nclass IISnippetService implements IInterfaceChecker {\n    methodNames: string[] = [\"storeSnippet\", \"retrieveSnippet\"];\n    className:\u00a0string\u00a0=\u00a0\"IISnippetService\";\n}\n```", "```ts\nrequire.config(\n    {\n        // existing code \n        paths: {\n            // existing code\n            'tinyioc': '/tscode/app/TypeScriptTinyIoC',\n            'snippetservice': '/tscode/app/services/SnippetService'\n        },\n        shim: {\n          // existing code\n        }\n    }\n);\n\nrequire(\n    ['jasmine-boot', 'tinyioc', 'snippetservice',\n    'text!/tscode/app/views/ContactItemView.html'],\n     (jb, tinyioc, snippetservice, contactItemSnippet) => {\n        var snippetService = new SnippetService();\n        snippetService.storeSnippet( SnippetKey.CONTACT_ITEM_SNIPPET, contactItemSnippet);\n        TypeScriptTinyIoC.register(snippetService, IISnippetService);\n        require(specs, () => {\n             (<any>window).onload();\n        });\n    }\n);\n```", "```ts\nconstructor(options?: any) {\n    var snippetService: ISnippetService =\n        TypeScriptTinyIoC.resolve(IISnippetService);\n    var contactItemSnippet = snippetService.retrieveSnippet(\n        SnippetKey.CONTACT_ITEM_SNIPPET);\n\n    this.className = \"contact-item-view\";\n    this.events = <any>{ 'click': this.onClicked };\n    this.template = _.template(contactItemSnippet);\n\n    super(options);\n}\n```", "```ts\nclass SnippetServiceRetrieveThrows implements ISnippetService {\n    storeSnippet(key: SnippetKey, value: string) {}\n\n    retrieveSnippet(key: SnippetKey) {\n        throw new Error(\"Error in retrieveSnippet\");\n    }\n}\n```", "```ts\nbeforeAll(() => {\n    var errorService = new SnippetServiceRetrieveThrows();\n    TypeScriptTinyIoC.register(errorService, IISnippetService);\n});\n\nit(\"should handle an error on constructor\", () => {\n    var contactModel = new cm.ContactModel(\n      { Name: 'testName', EmailAddress: 'testEmailAddress' });\n\n    var contactItemView = new ccv.ContactItemView(\n      { model: contactModel });\n    var html = contactItemView.render().$el.html();\n    expect(html).toContain('error');\n\n});\n```", "```ts\nvar contactItemSnippet = \"\";\nvar snippetService: ISnippetService =\n    TypeScriptTinyIoC.resolve(IISnippetService);\ntry {\n    contactItemSnippet = snippetService.retrieveSnippet(\n        SnippetKey.CONTACT_ITEM_SNIPPET);\n} catch (err) {\n    contactItemSnippet = \n     \"There was an error loading CONTACT_ITEM_SNIPPET\";\n}\n```", "```ts\ninterface IErrorEvent {\n    Message: string;\n    Description: string;\n}\n\nexport class IIErrorEvent implements IInterfaceChecker {\n    propertyNames: string [] = [\"Message\", \"Description\"];\n    className: string = \"IIErrorEvent\";\n}\n```", "```ts\ninterface IErrorEvent_Handler {\n    handle_ErrorEvent(event: IErrorEvent);\n}\n\nexport class IIErrorEvent_Handler implements IInterfaceChecker {\n    methodNames: string[] = [\"handle_ErrorEvent\"];\n    className: string\u00a0=\u00a0\"IIErrorEvent_Handler\";\n}\n```", "```ts\nexport class ErrorEvent implements IErrorEvent {\n    Message: string;\n    Description:\u00a0string;\n    constructor(message:\u00a0string,\u00a0description:\u00a0string)\u00a0{\n        this.Message = message;\n        this.Description = description;\n    }\n}\n```", "```ts\nclass EventHandlerTests_ErrorHandler\n    implements IErrorEvent_Handler {\n    handle_ErrorEvent(event: IErrorEvent) {\n    }\n}\n```", "```ts\nclass EventHandlerList {\n    eventHandlers: any[] = new Array();\n    registerHandler(handler: any,\n        interfaceType: { new (): IInterfaceChecker }) {\n    }\n}\n```", "```ts\nimport iee = require(\"../app/events/ErrorEvent\");\n\nclass EventHandlerTests_ErrorHandler\n    implements iee.IErrorEvent_Handler {\n    handle_ErrorEvent(event: iee.IErrorEvent) {\n    }\n}\n\ndescribe(\"/tests//EventHandlerTests.ts\", () => {\n\n    var testHandler: EventHandlerTests_ErrorHandler;\n    beforeEach(() => {\n        testHandler = new EventHandlerTests_ErrorHandler();\n    });\n\n    it(\"should register an event Handler\", () => {\n        var eventHandlerList = new EventHandlerList();\n        eventHandlerList.registerHandler(testHandler,\n            iee.IIErrorEvent_Handler);\n\n        expect(eventHandlerList.eventHandlers.length).toBe(1);\n    });\n});\n```", "```ts\nclass EventHandlerList {\n    eventHandlers: any[] = new Array();\n    registerHandler(handler: any,\n        interfaceType: { new (): IInterfaceChecker }) {\n\n        var interfaceChecker = new InterfaceChecker();\n        if (interfaceChecker.implementsInterface(\n            handler, interfaceType)) {\n            this.eventHandlers.push(handler);\n        } else {\n            var interfaceExpected = new interfaceType();\n            throw new Error(\n                \"EventHandlerList cannot register handler of \"\n                + interfaceExpected.className);\n        }\n    }\n}\n```", "```ts\nclass No_ErrorHandler {\n}\n\nit(\"should throw an error with the correct className\", () => {\n    var eventHandlerList = new EventHandlerList();\n    expect(() => {\n        eventHandlerList.registerHandler(new No_ErrorHandler(),\n            iee.IIErrorEvent_Handler);\n    }).toThrow(new Error(\n        \"EventHandlerList cannot register handler of IIErrorEvent_Handler\"\n        ));\n});\n```", "```ts\nclass EventHandlerList {\n    handleEventMethod: string;\n    constructor(handleEventMethodName: string) {\n        this.handleEventMethod = handleEventMethodName;\n    }\n\n    raiseEvent(event: any) {\n    }\n}\n```", "```ts\nclass EventHandlerTests_ErrorHandler\n    implements iee.IErrorEvent_Handler {\n    LastEventFired: iee.IErrorEvent;\n    handle_ErrorEvent(event: iee.IErrorEvent) {\n        this.LastEventFired = event;\n    }\n}\n```", "```ts\nit(\"should fire an event\", () => {\n    var eventHandlerList = new\n        EventHandlerList('handle_ErrorEvent');\n    eventHandlerList.registerHandler(testHandler,\n        iee.IIErrorEvent_Handler);\n    eventHandlerList.raiseEvent(\n        new iee.ErrorEvent(\"test\", \"test\"));\n    expect(testHandler.LastEventFired.Message).toBe(\"test\");\n});\n```", "```ts\nraiseEvent(event: any) {\n    var i, len = 0;\n    for (i = 0, len = this.eventHandlers.length; i < len; i++) {\n        var handler = this.eventHandlers[i];\n        handler[this.handleEventMethod](event);\n    }\n}\n```", "```ts\npublic static registerHandler(\n    handler: any,\n    handlerInterface: { new (): IInterfaceChecker },\n    eventInterface: { new (): IInterfaceChecker }) {\n}\n```", "```ts\nstatic raiseEvent(event: any,\n    eventInterface: { new (): IInterfaceChecker }) {\n}\n```", "```ts\nit(\"should register an event handler with\nTypeScriptTinyIoC and fire an event\", () => {\n    TypeScriptTinyIoC.registerHandler(testHandler,\n        iee.IIErrorEvent_Handler, iee.IIErrorEvent);\n    TypeScriptTinyIoC.raiseEvent(\n        new iee.ErrorEvent(\"test\", \"test\"),\n        iee.IIErrorEvent);\n    expect(testHandler.LastEventFired.Message).toBe(\"test\");\n});\n```", "```ts\nstatic events: EventHandlerList[] = new Array<EventHandlerList>();\npublic static registerHandler(\n    handler: any,\n    handlerInterface: { new (): IInterfaceChecker },\n    eventInterface: { new (): IInterfaceChecker }) {\n\n    var eventInterfaceInstance = new eventInterface();\n    var handlerInterfaceInstance = new handlerInterface();\n\n    var handlerList = \n        this.events[eventInterfaceInstance.className];\n    if (handlerList) {\n        handlerList.registerHandler(handler, handlerInterface);\n    } else {\n        handlerList = new EventHandlerList(\n            handlerInterfaceInstance.methodNames[0]);\n        handlerList.registerHandler(handler, handlerInterface);\n        this.events[eventInterfaceInstance.className] =\n            handlerList;\n    }\n}\n```", "```ts\nstatic raiseEvent(event: any,\n    eventInterface: { new (): IInterfaceChecker }) {\n\n    var eventChecker = new InterfaceChecker();\n    if (eventChecker.implementsInterface(event, eventInterface)) {\n        var eventInterfaceInstance = new eventInterface();\n        var handlerList = \n            this.events[eventInterfaceInstance.className];\n        if (handlerList) {\n            handlerList.raiseEvent(event);\n        }\n    }\n\n}\n```", "```ts\nonClicked() {\n    this.$el.flip({\n        direction: 'tb',\n        speed : 200\n    });\n    var errorEvent = new iee.ErrorEvent(\n        \"Dummy error message\", this.model.Name);\n    TypeScriptTinyIoC.raiseEvent(errorEvent, iee.IIErrorEvent);\n}\n```", "```ts\nimport iee = require(\"tscode/app/events/ErrorEvent\");\n\nexport class ContactViewApp implements iee.IErrorEvent_Handler {\n    constructor() {\n        TypeScriptTinyIoC.registerHandler(this,\n            iee.IIErrorEvent_Handler,\u00a0iee.IIErrorEvent);\n    }\n    run() {\n\n    }\n\n    contactCollectionLoaded(model, response, options) {\n\n    }\n    contactCollectionError(model, response, options) {\n\n    }\n    handle_ErrorEvent(event: iee.IErrorEvent) {\n        $.notify(\"Error : \" + event.Message\n            + \"\\n\" + event.Description);\n    }\n}\n```"]