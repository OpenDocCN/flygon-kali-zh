["```cs\n     using\n\n     System.Numerics; \n\n    ```", "```cs\n    WriteLine(\"Working with large integers:\"\n\n    );\n    WriteLine(\"-----------------------------------\"\n\n    );\n    ulong\n\n     big = ulong\n\n    .MaxValue;\n    WriteLine($\"\n\n    {big,\n\n    40\n\n    :N0}\n\n    \"\n\n    );\n    BigInteger bigger =\n      BigInteger.Parse(\"123456789012345678901234567890\"\n\n    );\n    WriteLine($\"\n\n    {bigger,\n\n    40\n\n    :N0}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Working with large integers:\n    ----------------------------------------\n                  18,446,744,073,709,551,615\n     123,456,789,012,345,678,901,234,567,890 \n\n    ```", "```cs\n(a + bi) + (c + di) = (a + c) + (b + d)i \n\n```", "```cs\n    WriteLine(\"Working with complex numbers:\"\n\n    );\n    Complex c1 = new\n\n    (real: 4\n\n    , imaginary: 2\n\n    );\n    Complex c2 = new\n\n    (real: 3\n\n    , imaginary: 7\n\n    );\n    Complex c3 = c1 + c2;\n    // output using default ToString implementation\n\n    WriteLine($\"\n\n    {c1}\n\n     added to \n\n    {c2}\n\n     is \n\n    {c3}\n\n    \"\n\n    );\n    // output using custom format\n\n    WriteLine(\"{0} + {1}i added to {2} + {3}i is {4} + {5}i\"\n\n    ,\n      c1.Real, c1.Imaginary, \n      c2.Real, c2.Imaginary,\n      c3.Real, c3.Imaginary); \n\n    ```", "```cs\n    Working with complex numbers:\n    (4, 2) added to (3, 7) is (7, 9)\n    4 + 2i added to 3 + 7i is 7 + 9i \n\n    ```", "```cs\n     string\n\n     city = \"London\"\n\n    ;\n    WriteLine($\"\n\n    {city}\n\n     is \n\n    {city.Length}\n\n     characters long.\"\n\n    ); \n\n    ```", "```cs\n    London is 6 characters long. \n\n    ```", "```cs\n    WriteLine($\"First char is \n\n    {city[\n\n    0\n\n    ]}\n\n     and third is \n\n    {city[\n\n    2\n\n    ]}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    First char is L and third is n. \n\n    ```", "```cs\n     string\n\n     cities = \"Paris,Tehran,Chennai,Sydney,New York,Medell\u00edn\"\n\n    ; \n    string\n\n    [] citiesArray = cities.Split(','\n\n    );\n    WriteLine($\"There are \n\n    {citiesArray.Length}\n\n     items in the array.\"\n\n    );\n    foreach\n\n     (string\n\n     item in\n\n     citiesArray)\n    {\n      WriteLine(item);\n    } \n\n    ```", "```cs\n    There are 6 items in the array.\n    Paris \n    Tehran \n    Chennai\n    Sydney\n    New York\n    Medell\u00edn \n\n    ```", "```cs\n     string\n\n     fullName = \"Alan Jones\"\n\n    ;\n    int\n\n     indexOfTheSpace = fullName.IndexOf(' '\n\n    );\n    string\n\n     firstName = fullName.Substring(\n      startIndex: 0\n\n    , length: indexOfTheSpace);\n    string\n\n     lastName = fullName.Substring(\n      startIndex: indexOfTheSpace + 1\n\n    );\n    WriteLine($\"Original: \n\n    {fullName}\n\n    \"\n\n    );\n    WriteLine($\"Swapped: \n\n    {lastName}\n\n    , \n\n    {firstName}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Original: Alan Jones\n    Swapped: Jones, Alan \n\n    ```", "```cs\n     string\n\n     company = \"Microsoft\"\n\n    ;\n    bool\n\n     startsWithM = company.StartsWith(\"M\"\n\n    ); \n    bool\n\n     containsN = company.Contains(\"N\"\n\n    );\n    WriteLine($\"Text: \n\n    {company}\n\n    \"\n\n    );\n    WriteLine($\"Starts with M: \n\n    {startsWithM}\n\n    , contains an N: \n\n    {containsN}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Text: Microsoft\n    Starts with M: True, contains an N: False \n\n    ```", "```cs\n     string\n\n     recombined = string\n\n    .Join(\" => \"\n\n    , citiesArray); \n    WriteLine(recombined); \n\n    ```", "```cs\n    Paris => Tehran => Chennai => Sydney => New York => Medell\u00edn \n\n    ```", "```cs\n     string\n\n     fruit = \"Apples\"\n\n    ; \n    decimal\n\n     price =  0.39\n\n    M; \n    DateTime when\n\n     = DateTime.Today;\n    WriteLine($\"Interpolated:  \n\n    {fruit}\n\n     cost \n\n    {price:C}\n\n     on \n\n    {\n\n    when\n\n    :dddd}\n\n    .\"\n\n    ); \n    WriteLine(string\n\n    .Format(\"string.Format: {0} cost {1:C} on {2:dddd}.\"\n\n    ,\n      arg0: fruit, arg1: price, arg2: when\n\n    )); \n\n    ```", "```cs\n    Interpolated:  Apples cost \u00a30.39 on Thursday. \n    string.Format: Apples cost \u00a30.39 on Thursday. \n\n    ```", "```cs\nWriteLine(\"WriteLine: {0} cost {1:C} on {2:dddd}.\"\n\n,\n  arg0: fruit, arg1: price, arg2: when\n\n); \n\n```", "```cs\n    WriteLine(\"Earliest date/time value is: {0}\"\n\n    ,\n      arg0: DateTime.MinValue);\n    WriteLine(\"UNIX epoch date/time value is: {0}\"\n\n    ,\n      arg0: DateTime.UnixEpoch);\n    WriteLine(\"Date/time value Now is: {0}\"\n\n    ,\n      arg0: DateTime.Now);\n    WriteLine(\"Date/time value Today is: {0}\"\n\n    ,\n      arg0: DateTime.Today); \n\n    ```", "```cs\n    Earliest date/time value is: 01/01/0001 00:00:00\n    UNIX epoch date/time value is: 01/01/1970 00:00:00\n    Date/time value Now is: 23/04/2021 14:14:54\n    Date/time value Today is: 23/04/2021 00:00:00 \n\n    ```", "```cs\n    DateTime christmas = new\n\n    (year: 2021\n\n    , month: 12\n\n    , day: 25\n\n    );\n    WriteLine(\"Christmas: {0}\"\n\n    ,\n      arg0: christmas); // default format\n\n    WriteLine(\"Christmas: {0:dddd, dd MMMM yyyy}\"\n\n    ,\n      arg0: christmas); // custom format\n\n    WriteLine(\"Christmas is in month {0} of the year.\"\n\n    ,\n      arg0: christmas.Month);\n    WriteLine(\"Christmas is day {0} of the year.\"\n\n    ,\n      arg0: christmas.DayOfYear);\n    WriteLine(\"Christmas {0} is on a {1}.\"\n\n    ,\n      arg0: christmas.Year,\n      arg1: christmas.DayOfWeek); \n\n    ```", "```cs\n    Christmas: 25/12/2021 00:00:00\n    Christmas: Saturday, 25 December 2021\n    Christmas is in month 12 of the year.\n    Christmas is day 359 of the year.\n    Christmas 2021 is on a Saturday. \n\n    ```", "```cs\n    DateTime beforeXmas = christmas.Subtract(TimeSpan.FromDays(12\n\n    ));\n    DateTime afterXmas = christmas.AddDays(12\n\n    );\n    WriteLine(\"12 days before Christmas is: {0}\"\n\n    ,\n      arg0: beforeXmas);\n    WriteLine(\"12 days after Christmas is: {0}\"\n\n    ,\n      arg0: afterXmas);\n    TimeSpan untilChristmas = christmas - DateTime.Now;\n    WriteLine(\"There are {0} days and {1} hours until Christmas.\"\n\n    ,\n      arg0: untilChristmas.Days,\n      arg1: untilChristmas.Hours);\n    WriteLine(\"There are {0:N0} hours until Christmas.\"\n\n    ,\n      arg0: untilChristmas.TotalHours); \n\n    ```", "```cs\n    12 days before Christmas is: 13/12/2021 00:00:00\n    12 days after Christmas is: 06/01/2022 00:00:00\n    There are 245 days and 9 hours until Christmas.\n    There are 5,890 hours until Christmas. \n\n    ```", "```cs\n    DateTime kidsWakeUp = new\n\n    (\n      year: 2021\n\n    , month: 12\n\n    , day: 25\n\n    , \n      hour: 6\n\n    , minute: 30\n\n    , second: 0\n\n    );\n    WriteLine(\"Kids wake up on Christmas: {0}\"\n\n    ,\n      arg0: kidsWakeUp);\n    WriteLine(\"The kids woke me up at {0}\"\n\n    ,\n      arg0: kidsWakeUp.ToShortTimeString()); \n\n    ```", "```cs\n    Kids wake up on Christmas: 25/12/2021 06:30:00\n    The kids woke me up at 06:30 \n\n    ```", "```cs\n    WriteLine(\"Current culture is: {0}\"\n\n    ,\n      arg0: CultureInfo.CurrentCulture.Name);\n    string\n\n     textDate = \"4 July 2021\"\n\n    ;\n    DateTime independenceDay = DateTime.Parse(textDate);\n    WriteLine(\"Text: {0}, DateTime: {1:d MMMM}\"\n\n    ,\n      arg0: textDate,\n      arg1: independenceDay);\n    textDate = \"7/4/2021\"\n\n    ;\n    independenceDay = DateTime.Parse(textDate);\n    WriteLine(\"Text: {0}, DateTime: {1:d MMMM}\"\n\n    ,\n      arg0: textDate,\n      arg1: independenceDay);\n    independenceDay = DateTime.Parse(textDate,\n      provider: CultureInfo.GetCultureInfo(\"en-US\"\n\n    ));\n    WriteLine(\"Text: {0}, DateTime: {1:d MMMM}\"\n\n    ,\n      arg0: textDate,\n      arg1: independenceDay); \n\n    ```", "```cs\n    Current culture is: en-GB\n    Text: 4 July 2021, DateTime: 4 July\n    Text: 7/4/2021, DateTime: 7 April\n    Text: 7/4/2021, DateTime: 4 July \n\n    ```", "```cs\n     for\n\n     (int\n\n     year = 2020\n\n    ; year < 2026\n\n    ; year++)\n    {\n      Write($\"\n\n    {year}\n\n     is a leap year: \n\n    {DateTime.IsLeapYear(year)}\n\n    . \"\n\n    );\n      WriteLine(\"There are {0} days in February {1}.\"\n\n    ,\n        arg0: DateTime.DaysInMonth(year: year, month: 2\n\n    ), arg1: year);\n    }\n    WriteLine(\"Is Christmas daylight saving time? {0}\"\n\n    ,\n      arg0: christmas.IsDaylightSavingTime());\n    WriteLine(\"Is July 4th daylight saving time? {0}\"\n\n    ,\n      arg0: independenceDay.IsDaylightSavingTime()); \n\n    ```", "```cs\n    2020 is a leap year: True. There are 29 days in February 2020.\n    2021 is a leap year: False. There are 28 days in February 2021.\n    2022 is a leap year: False. There are 28 days in February 2022.\n    2023 is a leap year: False. There are 28 days in February 2023.\n    2024 is a leap year: True. There are 29 days in February 2024.\n    2025 is a leap year: False. There are 28 days in February 2025.\n    Is Christmas daylight saving time? False\n    Is July 4th daylight saving time? True \n\n    ```", "```cs\n    DateOnly queensBirthday = new\n\n    (year: 2022\n\n    , month: 4\n\n    , day: 21\n\n    );\n    WriteLine($\"The Queen's next birthday is on \n\n    {queensBirthday}\n\n    .\"\n\n    );\n    TimeOnly partyStarts = new\n\n    (hour: 20\n\n    , minute: 30\n\n    );\n    WriteLine($\"The Queen's party starts at \n\n    {partyStarts}\n\n    .\"\n\n    );\n    DateTime calendarEntry = queensBirthday.ToDateTime(partyStarts);\n    WriteLine($\"Add to your calendar: \n\n    {calendarEntry}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    The Queen's next birthday is on 21/04/2022.\n    The Queen's party starts at 20:30.\n    Add to your calendar: 21/04/2022 20:30:00. \n\n    ```", "```cs\n     using\n\n     System.Text.RegularExpressions; \n\n    ```", "```cs\n    Write(\"Enter your age: \"\n\n    ); \n    string\n\n    ? input = ReadLine();\n    Regex ageChecker = new\n\n    (@\"\\d\"\n\n    ); \n    if\n\n     (ageChecker.IsMatch(input))\n    {\n      WriteLine(\"Thank you!\"\n\n    );\n    }\n    else\n\n    {\n      WriteLine($\"This is not a valid age: \n\n    {input}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Enter your age: 34 \n    Thank you! \n\n    ```", "```cs\n    Enter your age: carrots\n    This is not a valid age: carrots \n\n    ```", "```cs\n    Enter your age: bob30smith \n    Thank you! \n\n    ```", "```cs\n    Regex ageChecker = new\n\n    (@\"^\n\n    **\\d$\"**\n\n    ); \n\n    ```", "```cs\n    Regex ageChecker = new\n\n    (@\"^\n\n    **\\d+$\"**\n\n    ); \n\n    ```", "```cs\n \"Monsters, Inc.\"\n\n,\"I, Tonya\"\n\n,\"Lock, Stock and Two Smoking Barrels\" \n\n```", "```cs\n     string\n\n     films = \"\\\"Monsters, Inc.\\\",\\\"I, Tonya\\\",\\\"Lock, Stock and Two Smoking Barrels\\\"\"\n\n    ;\n    WriteLine($\"Films to split: \n\n    {films}\n\n    \"\n\n    );\n    string\n\n    [] filmsDumb = films.Split(','\n\n    );\n    WriteLine(\"Splitting with string.Split method:\"\n\n    ); \n    foreach\n\n     (string\n\n     film in\n\n     filmsDumb)\n    {\n      WriteLine(film);\n    } \n\n    ```", "```cs\n    WriteLine();\n    Regex csv = new\n\n    (\n      \"(?:^|,)(?=[^\\\"]|(\\\")?)\\\"?((?(1)[^\\\"]*|[^,\\\"]*))\\\"?(?=,|$)\"\n\n    );\n    MatchCollection filmsSmart = csv.Matches(films);\n    WriteLine(\"Splitting with regular expression:\"\n\n    ); \n    foreach\n\n     (Match film in\n\n     filmsSmart)\n    {\n      WriteLine(film.Groups[2\n\n    ].Value);\n    } \n\n    ```", "```cs\n    Splitting with string.Split method: \n    \"Monsters\n     Inc.\" \n    \"I\n     Tonya\" \n    \"Lock\n     Stock and Two Smoking Barrels\" \n    Splitting with regular expression: \n    Monsters, Inc.\n    I, Tonya\n    Lock, Stock and Two Smoking Barrels \n\n    ```", "```cs\n namespace\n\n System.Collections\n\n{\n  public\n\n interface\n\n ICollection\n\n : IEnumerable\n\n  {\n    int\n\n Count { get\n\n; }\n    bool\n\n IsSynchronized { get\n\n; }\n    object\n\n SyncRoot { get\n\n; }\n    void\n\nCopyTo\n\n(\n\nArray array, \n\nint\n\n index\n\n)\n\n;\n  }\n} \n\n```", "```cs\n int\n\n howMany = passengers.Count; \n\n```", "```cs\n namespace\n\n System.Collections\n\n{\n  public\n\n interface\n\n IEnumerable\n\n  {\n    IEnumerator \n\nGetEnumerator\n\n()\n\n;\n  }\n}\nnamespace\n\n System.Collections\n\n{\n  public\n\n interface\n\n IEnumerator\n\n  {\n    object\n\n Current { get\n\n; }\n    bool\n\nMoveNext\n\n()\n\n;\n    void\n\nReset\n\n()\n\n;\n  }\n} \n\n```", "```cs\n foreach\n\n (Passenger p in\n\n passengers)\n{\n  // perform an action on each passenger\n\n} \n\n```", "```cs\n namespace\n\n System.Collections.Generic\n\n{\n  public\n\n interface\n\n ICollection\n\n<T\n\n> : IEnumerable\n\n<T\n\n>, IEnumerable\n\n  {\n    int\n\n Count { get\n\n; }\n    bool\n\n IsReadOnly { get\n\n; }\n    void\n\nAdd\n\n(\n\nT item\n\n)\n\n;\n    void\n\nClear\n\n()\n\n;\n    bool\n\nContains\n\n(\n\nT item\n\n)\n\n;\n    void\n\nCopyTo\n\n(\n\nT[] array, \n\nint\n\n index\n\n)\n\n;\n    bool\n\nRemove\n\n(\n\nT item\n\n)\n\n;\n  }\n} \n\n```", "```cs\nList<string\n\n> names = new\n\n();\nnames.EnsureCapacity(10\n\n_000);\n// load ten thousand names into the list \n\n```", "```cs\n namespace\n\n System.Collections.Generic\n\n{\n  [DefaultMember(\n\n\"Item\"\n\n)\n\n] // aka this indexer\n\n  public\n\n interface\n\n IList\n\n<T\n\n> : ICollection\n\n<T\n\n>, IEnumerable\n\n<T\n\n>, IEnumerable\n\n  {\n    T this\n\n[int\n\n index] { get\n\n; set\n\n; }\n    int\n\nIndexOf\n\n(\n\nT item\n\n)\n\n;\n    void\n\nInsert\n\n(\n\nint\n\n index, T item\n\n)\n\n;\n    void\n\nRemoveAt\n\n(\n\nint\n\n index\n\n)\n\n;\n  }\n} \n\n```", "```cs\n namespace\n\n System.Collections.Generic\n\n{\n  [DefaultMember(\n\n\"Item\"\n\n)\n\n] // aka this indexer\n\n  public\n\n interface\n\n IDictionary\n\n<TKey\n\n, TValue\n\n>\n    : ICollection\n\n<KeyValuePair\n\n<TKey\n\n, TValue\n\n>>,\n      IEnumerable\n\n<KeyValuePair\n\n<TKey\n\n, TValue\n\n>>, IEnumerable\n\n  {\n    TValue this\n\n[TKey key] { get\n\n; set\n\n; }\n    ICollection<TKey> Keys { get\n\n; }\n    ICollection<TValue> Values { get\n\n; }\n    void\n\nAdd\n\n(\n\nTKey key, TValue \n\nvalue\n\n)\n\n;\n    bool\n\nContainsKey\n\n(\n\nTKey key\n\n)\n\n;\n    bool\n\nRemove\n\n(\n\nTKey key\n\n)\n\n;\n    bool\n\nTryGetValue\n\n(\n\nTKey key, [MaybeNullWhen(\n\nfalse\n\n)] \n\nout\n\n TValue \n\nvalue\n\n)\n\n;\n  }\n} \n\n```", "```cs\n namespace\n\n System.Collections.Generic\n\n{\n  public\n\n readonly\n\n struct\n\n KeyValuePair<TKey, TValue>\n  {\n    public\n\nKeyValuePair\n\n(\n\nTKey key, TValue \n\nvalue\n\n)\n\n;\n    public\n\n TKey Key { get\n\n; }\n    public\n\n TValue Value { get\n\n; }\n    [EditorBrowsable(EditorBrowsableState.Never)\n\n]\n    public\n\nvoid\n\nDeconstruct\n\n(\n\nout\n\n TKey key, \n\nout\n\n TValue \n\nvalue\n\n)\n\n;\n    public\n\noverride\n\nstring\n\nToString\n\n()\n\n;\n  }\n} \n\n```", "```cs\n     static\n\n    void\n\n    Output\n\n    (\n\n    string\n\n     title, IEnumerable<\n\n    string\n\n    > collection\n\n    )\n\n    {\n      WriteLine(title);\n      foreach\n\n     (string\n\n     item in\n\n     collection)\n      {\n        WriteLine($\"  \n\n    {item}\n\n    \"\n\n    );\n      }\n    } \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkingWithLists\n\n    ()\n\n    {\n      // Simple syntax for creating a list and adding three items\n\n      List<string\n\n    > cities = new\n\n    (); \n      cities.Add(\"London\"\n\n    ); \n      cities.Add(\"Paris\"\n\n    ); \n      cities.Add(\"Milan\"\n\n    );\n      /* Alternative syntax that is converted by the compiler into\n\n         the three Add method calls above\n\n      List<string> cities = new()\n\n        { \"London\", \"Paris\", \"Milan\" };\n\n      */\n\n      /* Alternative syntax that passes an \n\n         array of string values to AddRange method\n\n      List<string> cities = new(); \n\n      cities.AddRange(new[] { \"London\", \"Paris\", \"Milan\" });\n\n      */\n\n      Output(\"Initial list\"\n\n    , cities);\n      WriteLine($\"The first city is \n\n    {cities[\n\n    0\n\n    ]}\n\n    .\"\n\n    ); \n      WriteLine($\"The last city is \n\n    {cities[cities.Count - \n\n    1\n\n    ]}\n\n    .\"\n\n    );\n      cities.Insert(0\n\n    , \"Sydney\"\n\n    );\n      Output(\"After inserting Sydney at index 0\"\n\n    , cities); \n      cities.RemoveAt(1\n\n    ); \n      cities.Remove(\"Milan\"\n\n    );\n      Output(\"After removing two cities\"\n\n    , cities);\n    } \n\n    ```", "```cs\n    WorkingWithLists(); \n\n    ```", "```cs\n    Initial list\n      London\n      Paris\n      Milan\n    The first city is London. \n    The last city is Milan.\n    After inserting Sydney at index 0\n      Sydney\n      London\n      Paris\n      Milan\n    After removing two cities\n      Sydney\n      Paris \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkingWithDictionaries\n\n    ()\n\n    {\n      Dictionary<string\n\n    , string\n\n    > keywords = new\n\n    ();\n      // add using named parameters\n\n      keywords.Add(key: \"int\"\n\n    , value\n\n    : \"32-bit integer data type\"\n\n    );\n      // add using positional parameters\n\n      keywords.Add(\"long\"\n\n    , \"64-bit integer data type\"\n\n    ); \n      keywords.Add(\"float\"\n\n    , \"Single precision floating point number\"\n\n    );\n      /* Alternative syntax; compiler converts this to calls to Add method\n\n      Dictionary<string, string> keywords = new()\n\n      {\n\n        { \"int\", \"32-bit integer data type\" },\n\n        { \"long\", \"64-bit integer data type\" },\n\n        { \"float\", \"Single precision floating point number\" },\n\n      }; */\n\n      /* Alternative syntax; compiler converts this to calls to Add method\n\n      Dictionary<string, string> keywords = new()\n\n      {\n\n        [\"int\"] = \"32-bit integer data type\",\n\n        [\"long\"] = \"64-bit integer data type\",\n\n        [\"float\"] = \"Single precision floating point number\", // last comma is optional\n\n      }; */\n\n      Output(\"Dictionary keys:\"\n\n    , keywords.Keys);\n      Output(\"Dictionary values:\"\n\n    , keywords.Values);\n      WriteLine(\"Keywords and their definitions\"\n\n    );\n      foreach\n\n     (KeyValuePair<string\n\n    , string\n\n    > item in\n\n     keywords)\n      {\n        WriteLine($\"  \n\n    {item.Key}\n\n    : \n\n    {item.Value}\n\n    \"\n\n    );\n      }\n      // lookup a value using a key\n\n      string\n\n     key = \"long\"\n\n    ;\n      WriteLine($\"The definition of \n\n    {key}\n\n     is \n\n    {keywords[key]}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n     // WorkingWithLists();\n\n    WorkingWithDictionaries(); \n\n    ```", "```cs\n    Dictionary keys:\n      int\n      long\n      float\n    Dictionary values:\n      32-bit integer data type\n      64-bit integer data type\n      Single precision floating point number\n    Keywords and their definitions\n      int: 32-bit integer data type\n      long: 64-bit integer data type\n      float: Single precision floating point number\n    The definition of long is 64-bit integer data type \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkingWithQueues\n\n    ()\n\n    {\n      Queue<string\n\n    > coffee = new\n\n    ();\n      coffee.Enqueue(\"Damir\"\n\n    ); // front of queue\n\n      coffee.Enqueue(\"Andrea\"\n\n    );\n      coffee.Enqueue(\"Ronald\"\n\n    );\n      coffee.Enqueue(\"Amin\"\n\n    );\n      coffee.Enqueue(\"Irina\"\n\n    ); // back of queue\n\n      Output(\"Initial queue from front to back\"\n\n    , coffee);\n      // server handles next person in queue\n\n      string\n\n     served = coffee.Dequeue();\n      WriteLine($\"Served: \n\n    {served}\n\n    .\"\n\n    );\n      // server handles next person in queue\n\n      served = coffee.Dequeue();\n      WriteLine($\"Served: \n\n    {served}\n\n    .\"\n\n    );\n      Output(\"Current queue from front to back\"\n\n    , coffee);\n      WriteLine($\"\n\n    {coffee.Peek()}\n\n     is next in line.\"\n\n    );\n      Output(\"Current queue from front to back\"\n\n    , coffee);\n    } \n\n    ```", "```cs\n    Initial queue from front to back\n      Damir\n      Andrea\n      Ronald\n      Amin\n      Irina\n    Served: Damir.\n    Served: Andrea.\n    Current queue from front to back\n      Ronald\n      Amin\n      Irina\n    Ronald is next in line.\n    Current queue from front to back\n      Ronald\n      Amin\n      Irina \n\n    ```", "```cs\n     static\n\n    void\n\n    OutputPQ\n\n    <\n\n    TElement\n\n    , \n\n    TPriority\n\n    >(\n\n    string\n\n     title,\n\n      IEnumerable<(TElement Element, TPriority Priority\n\n    )> collection)\n\n    {\n      WriteLine(title);\n      foreach\n\n     ((TElement, TPriority) item in\n\n     collection)\n      {\n        WriteLine($\"  \n\n    {item.Item1}\n\n    : \n\n    {item.Item2}\n\n    \"\n\n    );\n      }\n    } \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkingWithPriorityQueues\n\n    ()\n\n    {\n      PriorityQueue<string\n\n    , int\n\n    > vaccine = new\n\n    ();\n      // add some people\n\n      // 1 = high priority people in their 70s or poor health\n\n      // 2 = medium priority e.g. middle aged\n\n      // 3 = low priority e.g. teens and twenties\n\n      vaccine.Enqueue(\"Pamela\"\n\n    , 1\n\n    );  // my mum (70s)\n\n      vaccine.Enqueue(\"Rebecca\"\n\n    , 3\n\n    ); // my niece (teens)\n\n      vaccine.Enqueue(\"Juliet\"\n\n    , 2\n\n    );  // my sister (40s)\n\n      vaccine.Enqueue(\"Ian\"\n\n    , 1\n\n    );     // my dad (70s)\n\n      OutputPQ(\"Current queue for vaccination:\"\n\n    , vaccine.UnorderedItems);\n      WriteLine($\"\n\n    {vaccine.Dequeue()}\n\n     has been vaccinated.\"\n\n    );\n      WriteLine($\"\n\n    {vaccine.Dequeue()}\n\n     has been vaccinated.\"\n\n    );\n      OutputPQ(\"Current queue for vaccination:\"\n\n    , vaccine.UnorderedItems);\n      WriteLine($\"\n\n    {vaccine.Dequeue()}\n\n     has been vaccinated.\"\n\n    );\n      vaccine.Enqueue(\"Mark\"\n\n    , 2\n\n    ); // me (40s)\n\n      WriteLine($\"\n\n    {vaccine.Peek()}\n\n     will be next to be vaccinated.\"\n\n    );\n      OutputPQ(\"Current queue for vaccination:\"\n\n    , vaccine.UnorderedItems);\n    } \n\n    ```", "```cs\n    Current queue for vaccination:\n      Pamela: 1\n      Rebecca: 3\n      Juliet: 2\n      Ian: 1\n    Pamela has been vaccinated.\n    Ian has been vaccinated.\n    Current queue for vaccination:\n      Juliet: 2\n      Rebecca: 3\n    Juliet has been vaccinated.\n    Mark will be next to be vaccinated.\n    Current queue for vaccination:\n      Mark: 2\n      Rebecca: 3 \n\n    ```", "```cs\n    ImmutableList<string\n\n    > immutableCities = cities.ToImmutableList();\n    ImmutableList<string\n\n    > newList = immutableCities.Add(\"Rio\"\n\n    );\n    Output(\"Immutable list of cities:\"\n\n    , immutableCities); \n    Output(\"New list of cities:\"\n\n    , newList); \n\n    ```", "```cs\n    Immutable list of cities:\n      Sydney\n      Paris\n    New list of cities:\n      Sydney\n      Paris\n      Rio \n\n    ```", "```cs\n void\n\nProcessCollection\n\n<\n\nT\n\n>(\n\nIEnumerable<T> collection\n\n)\n\n{\n  // process the items in the collection,\n\n  // perhaps using a foreach statement\n\n} \n\n```", "```cs\n void\n\nProcessCollection\n\n<\n\nT\n\n>(\n\n**List<T>**\n\n collection\n\n)\n\n{\n  // process the items in the collection,\n\n  // perhaps using a foreach statement\n\n} \n\n```", "```cs\n int\n\n index = 3\n\n;\nPerson p = people[index]; // fourth person in array\n\nchar\n\n letter = name[index]; // fourth letter in name \n\n```", "```cs\n // two ways to define the same index, 3 in from the start \n\nIndex i1 = new\n\n(value\n\n: 3\n\n); // counts from the start \n\nIndex i2 = 3\n\n; // using implicit int conversion operator\n\n// two ways to define the same index, 5 in from the end\n\nIndex i3 = new\n\n(value\n\n: 5\n\n, fromEnd: true\n\n); \nIndex i4 = ^5\n\n; // using the caret operator \n\n```", "```cs\nRange r1 = new\n\n(start: new\n\n Index(3\n\n), end: new\n\n Index(7\n\n));\nRange r2 = new\n\n(start: 3\n\n, end: 7\n\n); // using implicit int conversion\n\nRange r3 = 3..7\n\n; // using C# 8.0 or later syntax\n\nRange r4 = Range.StartAt(3\n\n); // from index 3 to last index\n\nRange r5 = 3.\n\n.; // from index 3 to last index\n\nRange r6 = Range.EndAt(3\n\n); // from index 0 to index 3\n\nRange r7 = ..3\n\n; // from index 0 to index 3 \n\n```", "```cs\n     string\n\n     name = \"Samantha Jones\"\n\n    ;\n    // Using Substring\n\n    int\n\n     lengthOfFirst = name.IndexOf(' '\n\n    );\n    int\n\n     lengthOfLast = name.Length - lengthOfFirst - 1\n\n    ;\n    string\n\n     firstName = name.Substring(\n      startIndex: 0\n\n    ,\n      length: lengthOfFirst);\n    string\n\n     lastName = name.Substring(\n      startIndex: name.Length - lengthOfLast,\n      length: lengthOfLast);\n    WriteLine($\"First name: \n\n    {firstName}\n\n    , Last name: \n\n    {lastName}\n\n    \"\n\n    );\n    // Using spans\n\n    ReadOnlySpan<char\n\n    > nameAsSpan = name.AsSpan();\n    ReadOnlySpan<char\n\n    > firstNameSpan = nameAsSpan[0.\n\n    .lengthOfFirst]; \n    ReadOnlySpan<char\n\n    > lastNameSpan = nameAsSpan[^lengthOfLast..^0\n\n    ];\n    WriteLine(\"First name: {0}, Last name: {1}\"\n\n    , \n      arg0: firstNameSpan.ToString(),\n      arg1: lastNameSpan.ToString()); \n\n    ```", "```cs\n    First name: Samantha, Last name: Jones \n    First name: Samantha, Last name: Jones \n\n    ```", "```cs\n     using\n\n     System.Net; // IPHostEntry, Dns, IPAddress \n\n    ```", "```cs\n    Write(\"Enter a valid web address: \"\n\n    ); \n    string? url = ReadLine();\n    if\n\n     (string\n\n    .IsNullOrWhiteSpace(url))\n    {\n      url = \"https://stackoverflow.com/search?q=securestring\"\n\n    ;\n    }\n    Uri uri = new\n\n    (url);\n    WriteLine($\"URL: \n\n    {url}\n\n    \"\n\n    ); \n    WriteLine($\"Scheme: \n\n    {uri.Scheme}\n\n    \"\n\n    ); \n    WriteLine($\"Port: \n\n    {uri.Port}\n\n    \"\n\n    ); \n    WriteLine($\"Host: \n\n    {uri.Host}\n\n    \"\n\n    ); \n    WriteLine($\"Path: \n\n    {uri.AbsolutePath}\n\n    \"\n\n    ); \n    WriteLine($\"Query: \n\n    {uri.Query}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Enter a valid web address:\n    URL: https://stackoverflow.com/search?q=securestring \n    Scheme: https\n    Port: 443\n    Host: stackoverflow.com \n    Path: /search\n    Query: ?q=securestring \n\n    ```", "```cs\n    IPHostEntry entry = Dns.GetHostEntry(uri.Host); \n    WriteLine($\"\n\n    {entry.HostName}\n\n     has the following IP addresses:\"\n\n    ); \n    foreach\n\n     (IPAddress address in\n\n     entry.AddressList)\n    {\n      WriteLine($\"  \n\n    {address}\n\n     (\n\n    {address.AddressFamily}\n\n    )\"\n\n    );\n    } \n\n    ```", "```cs\n    stackoverflow.com has the following IP addresses: \n      151.101.193.69 (InterNetwork)\n      151.101.129.69 (InterNetwork)\n      151.101.1.69 (InterNetwork)\n      151.101.65.69 (InterNetwork) \n\n    ```", "```cs\n     using\n\n     System.Net.NetworkInformation; // Ping, PingReply, IPStatus \n\n    ```", "```cs\n     try\n\n    {\n      Ping ping = new\n\n    ();\n      WriteLine(\"Pinging server. Please wait...\"\n\n    );\n      PingReply reply = ping.Send(uri.Host);\n      WriteLine($\"\n\n    {uri.Host}\n\n     was pinged and replied: \n\n    {reply.Status}\n\n    .\"\n\n    );\n      if\n\n     (reply.Status == IPStatus.Success)\n      {\n        WriteLine(\"Reply from {0} took {1:N0}ms\"\n\n    , \n          arg0: reply.Address,\n          arg1: reply.RoundtripTime);\n      }\n    }\n    catch (Exception ex)\n    {\n      WriteLine($\"\n\n    {ex.GetType().ToString()}\n\n     says \n\n    {ex.Message}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Pinging server. Please wait...\n    stackoverflow.com was pinged and replied: Success.\n    Reply from 151.101.193.69 took 18ms took 136ms \n\n    ```", "```cs\n    Enter a valid web address: http://google.com\n    URL: http://google.com\n    Scheme: http\n    Port: 80\n    Host: google.com\n    Path: /\n    Query: \n    google.com has the following IP addresses:\n      2a00:1450:4009:807::200e (InterNetworkV6)\n      216.58.204.238 (InterNetwork)\n    Pinging server. Please wait...\n    google.com was pinged and replied: Success.\n    Reply from 2a00:1450:4009:807::200e took 24ms \n\n    ```", "```cs\n // an assembly-level attribute\n\n[assembly: AssemblyTitle(\n\n\"Working with Reflection\"\n\n)\n\n]\n// a type-level attribute\n\n[Serializable\n\n] \npublic\n\n class\n\n Person\n\n{\n  // a member-level attribute \n\n  [Obsolete(\n\n\"Deprecated: use Run instead.\"\n\n)\n\n] \n  public\n\nvoid\n\nWalk\n\n()\n\n  {\n... \n\n```", "```cs\n     using\n\n     System.Reflection; // Assembly \n\n    ```", "```cs\n    WriteLine(\"Assembly metadata:\"\n\n    );\n    Assembly? assembly = Assembly.GetEntryAssembly();\n    if\n\n     (assembly is\n\n     null\n\n    )\n    {\n      WriteLine(\"Failed to get entry assembly.\"\n\n    );\n      return\n\n    ;\n    }\n    WriteLine($\"  Full name: \n\n    {assembly.FullName}\n\n    \"\n\n    ); \n    WriteLine($\"  Location: \n\n    {assembly.Location}\n\n    \"\n\n    );\n    IEnumerable<Attribute> attributes = assembly.GetCustomAttributes(); \n    WriteLine($\"  Assembly-level attributes:\"\n\n    );\n    foreach\n\n     (Attribute a in\n\n     attributes)\n    {\n      WriteLine($\"   \n\n    {a.GetType()}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Assembly metadata:\n      Full name: WorkingWithReflection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n      Location: /Users/markjprice/Code/Chapter08/WorkingWithReflection/bin/Debug/net6.0/WorkingWithReflection.dll\n      Assembly-level attributes:\n        System.Runtime.CompilerServices.CompilationRelaxationsAttribute\n        System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\n        System.Diagnostics.DebuggableAttribute\n        System.Runtime.Versioning.TargetFrameworkAttribute\n        System.Reflection.AssemblyCompanyAttribute\n        System.Reflection.AssemblyConfigurationAttribute\n        System.Reflection.AssemblyFileVersionAttribute\n        System.Reflection.AssemblyInformationalVersionAttribute\n        System.Reflection.AssemblyProductAttribute\n        System.Reflection.AssemblyTitleAttribute \n\n    ```", "```cs\n    AssemblyInformationalVersionAttribute? version = assembly\n      .GetCustomAttribute<AssemblyInformationalVersionAttribute>(); \n    WriteLine($\"  Version: \n\n    {version?.InformationalVersion}\n\n    \"\n\n    );\n    AssemblyCompanyAttribute? company = assembly\n      .GetCustomAttribute<AssemblyCompanyAttribute>();\n    WriteLine($\"  Company: \n\n    {company?.Company}\n\n    \"\n\n    ); \n\n    ```", "```cs\n     Version: 1.0.0\n      Company: WorkingWithReflection \n\n    ```", "```cs\n    [assembly: AssemblyCompany(\n\n    \"Packt Publishing\"\n\n    )\n\n    ] \n    [assembly: AssemblyInformationalVersion(\n\n    \"1.3.0\"\n\n    )\n\n    ] \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n\n     **<Version>**\n\n    **6.3.12**\n\n    **</Version>**\n\n     **<Company>Packt Publishing</Company>**\n\n      </PropertyGroup>\n    </Project> \n\n    ```", "```cs\n     Version: 6.3.12\n      Company: Packt Publishing \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, \n\n      AllowMultiple = true)\n\n    ]\n    public\n\n     class\n\n     CoderAttribute\n\n     : Attribute\n\n    {\n      public\n\n     string\n\n     Coder { get\n\n    ; set\n\n    ; }\n      public\n\n     DateTime LastModified { get\n\n    ; set\n\n    ; }\n      public\n\n    CoderAttribute\n\n    (\n\n    string\n\n     coder, \n\n    string\n\n     lastModified\n\n    )\n\n      {\n        Coder = coder;\n        LastModified = DateTime.Parse(lastModified);\n      }\n    } \n\n    ```", "```cs\n     using\n\n     System.Runtime.CompilerServices; // CompilerGeneratedAttribute\n\n    using\n\n     Packt.Shared; // CoderAttribute \n\n    ```", "```cs\n     class\n\n     Animal\n\n    {\n      [Coder(\n\n    \"Mark Price\"\n\n    , \n\n    \"22 August 2021\"\n\n    )\n\n    ]\n      [Coder(\n\n    \"Johnni Rasmussen\"\n\n    , \n\n    \"13 September 2021\"\n\n    )\n\n    ] \n      public\n\n    void\n\n    Speak\n\n    ()\n\n      {\n        WriteLine(\"Woof...\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n    WriteLine(); \n    WriteLine($\"* Types:\"\n\n    );\n    Type[] types = assembly.GetTypes();\n    foreach\n\n     (Type type in\n\n     types)\n    {\n      WriteLine();\n      WriteLine($\"Type: \n\n    {type.FullName}\n\n    \"\n\n    ); \n      MemberInfo[] members = type.GetMembers();\n      foreach\n\n     (MemberInfo member in\n\n     members)\n      {\n        WriteLine(\"{0}: {1} ({2})\"\n\n    ,\n          arg0: member.MemberType,\n          arg1: member.Name,\n          arg2: member.DeclaringType?.Name);\n        IOrderedEnumerable<CoderAttribute> coders = \n          member.GetCustomAttributes<CoderAttribute>()\n          .OrderByDescending(c => c.LastModified);\n        foreach\n\n     (CoderAttribute coder in\n\n     coders)\n        {\n          WriteLine(\"-> Modified by {0} on {1}\"\n\n    ,\n            coder.Coder, coder.LastModified.ToShortDateString());\n        }\n      }\n    } \n\n    ```", "```cs\n    * Types:\n    ...\n    Type: Animal\n    Method: Speak (Animal)\n    ->\n\n     Modified by Johnni Rasmussen on 13/09/2021\n\n    ->\n\n     Modified by Mark Price on 22/08/2021\n\n    Method: GetType (Object)\n    Method: ToString (Object)\n    Method: Equals (Object)\n    Method: GetHashCode (Object)\n    Constructor: .ctor (Program)\n    ...\n    Type: <Program>$+<>c\n    Method: GetType (Object)\n    Method: ToString (Object)\n    Method: Equals (Object)\n    Method: GetHashCode (Object)\n    Constructor: .ctor (<>c)\n    Field: <>9 (<>c)\n    Field: <>9__0_0 (<>c) \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"SixLabors.ImageSharp\"\n\n     Version=\"1.0.3\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     using\n\n     SixLabors.ImageSharp;\n    using\n\n     SixLabors.ImageSharp.Processing; \n\n    ```", "```cs\n     string\n\n     imagesFolder = Path.Combine(\n      Environment.CurrentDirectory, \"images\"\n\n    );\n    IEnumerable<string\n\n    > images =\n      Directory.EnumerateFiles(imagesFolder);\n    foreach\n\n     (string\n\n     imagePath in\n\n     images)\n    {\n      string\n\n     thumbnailPath = Path.Combine(\n        Environment.CurrentDirectory, \"images\"\n\n    ,   \n        Path.GetFileNameWithoutExtension(imagePath)\n        + \"-thumbnail\"\n\n     + Path.GetExtension(imagePath));\n      using\n\n     (Image image = Image.Load(imagePath))\n      {\n        image.Mutate(x => x.Resize(image.Width / 10\n\n    , image.Height / 10\n\n    ));   \n        image.Mutate(x => x.Grayscale());\n        image.Save(thumbnailPath);\n      }\n    }\n    WriteLine(\"Image processing complete. View the images folder.\"\n\n    ); \n\n    ```", "```cs\n     using\n\n     System.Globalization; // CultureInfo \n\n    ```", "```cs\n    CultureInfo globalization = CultureInfo.CurrentCulture; \n    CultureInfo localization = CultureInfo.CurrentUICulture;\n    WriteLine(\"The current globalization culture is {0}: {1}\"\n\n    ,\n      globalization.Name, globalization.DisplayName);\n    WriteLine(\"The current localization culture is {0}: {1}\"\n\n    ,\n      localization.Name, localization.DisplayName);\n    WriteLine();\n    WriteLine(\"en-US: English (United States)\"\n\n    ); \n    WriteLine(\"da-DK: Danish (Denmark)\"\n\n    ); \n    WriteLine(\"fr-CA: French (Canada)\"\n\n    ); \n    Write(\"Enter an ISO culture code: \"\n\n    );  \n    string\n\n    ? newCulture = ReadLine();\n    if\n\n     (!string\n\n    .IsNullOrEmpty(newCulture))\n    {\n      CultureInfo ci = new\n\n    (newCulture); \n      // change the current cultures\n\n      CultureInfo.CurrentCulture = ci;\n      CultureInfo.CurrentUICulture = ci;\n    }\n    WriteLine();\n    Write(\"Enter your name: \"\n\n    ); \n    string\n\n    ? name = ReadLine();\n    Write(\"Enter your date of birth: \"\n\n    ); \n    string\n\n    ? dob = ReadLine();\n    Write(\"Enter your salary: \"\n\n    ); \n    string\n\n    ? salary = ReadLine();\n    DateTime date = DateTime.Parse(dob);\n    int\n\n     minutes = (int\n\n    )DateTime.Today.Subtract(date).TotalMinutes; \n    decimal\n\n     earns = decimal\n\n    .Parse(salary);\n    WriteLine(\n      \"{0} was born on a {1:dddd}, is {2:N0} minutes old, and earns {3:C}\"\n\n    ,\n      name, date, minutes, earns); \n\n    ```", "```cs\n    Enter an ISO culture code: en-GB \n    Enter your name: Alice\n    Enter your date of birth: 30/3/1967 \n    Enter your salary: 23500\n    Alice was born on a Thursday, is 25,469,280 minutes old, and earns\n    \u00a323,500.00 \n\n    ```", "```cs\n    Enter an ISO culture code: da-DK \n    Enter your name: Mikkel\n    Enter your date of birth: 12/3/1980 \n    Enter your salary: 340000\n    Mikkel was born on a onsdag, is 18.656.640 minutes old, and earns 340.000,00 kr. \n\n    ```", "```cs\nThe default regular expression checks for at least one digit.\nEnter a regular expression (or press ENTER to use the default): ^[a-z]+$ \nEnter some input: apples\napples matches ^[a-z]+$? True\nPress ESC to end or any key to try again.\nEnter a regular expression (or press ENTER to use the default): ^[a-z]+$ \nEnter some input: abc123xyz\nabc123xyz matches ^[a-z]+$? False\nPress ESC to end or any key to try again. \n\n```"]