["```java\n@FunctionalInterface\ninterface A {\n  void method1();\n  default void method2(){}\n  static void method3(){}\n}\n\n@FunctionalInterface\ninterface B extends A {\n  default void method4(){}\n}\n\n@FunctionalInterface\ninterface C extends B {\n  void method1();\n}\n\n//@FunctionalInterface  //compilation error\ninterface D extends C {\n  void method5();\n}\n```", "```java\n@FunctionalInterface\ninterface Runnable { \n  void run(); \n} \n@FunctionalInterface\ninterface Callable<V> { \n  V call() throws Exception; \n}\n```", "```java\nFunction<Integer, Double> multiplyByTen = new Function<Integer, Double>(){\n  public Double apply(Integer i){\n    return i * 10.0;\n  }\n};\n```", "```java\nSystem.out.println(multiplyByTen.apply(1)); //prints: 10.0\n```", "```java\nvoid useFunc(Function<Integer, Double> processingFunc, int input){\n  System.out.println(processingFunc.apply(input));\n}\n```", "```java\nuseFunc(multiplyByTen, 10);     //prints: 100.00\n\n```", "```java\nFunction<Integer, Double> createMultiplyBy(double num){\n  Function<Integer, Double> func = new Function<Integer, Double>(){\n    public Double apply(Integer i){\n      return i * num;\n    }\n  };\n  return func;\n}\n```", "```java\nFunction<Integer, Double> multiplyByFive = createMultiplyBy(5);\nSystem.out.println(multiplyByFive.apply(1)); //prints: 5.0\nuseFunc(multiplyByFive, 10);                 //prints: 50.0\n\n```", "```java\nConsumer<Double> printResult = new Consumer<Double>() {\n  public void accept(Double d) {\n    System.out.println(\"Result=\" + d);\n  }\n};\nprintResult.accept(10.0);         //prints: Result=10.0\n\n```", "```java\nConsumer<Double> createPrintingFunc(String prefix, String postfix){\n  Consumer<Double> func = new Consumer<Double>() {\n    public void accept(Double d) {\n      System.out.println(prefix + d + postfix);\n    }\n  };\n  return func;\n}\n```", "```java\nConsumer<Double> printResult = createPrintingFunc(\"Result=\", \" Great!\");\nprintResult.accept(10.0);    //prints: Result=10.0 Great!\n\n```", "```java\nvoid processAndConsume(int input, \n                       Function<Integer, Double> processingFunc, \n                                          Consumer<Double> consumer){\n  consumer.accept(processingFunc.apply(input));\n}\n```", "```java\nFunction<Integer, Double> multiplyByFive = createMultiplyBy(5);\nConsumer<Double> printResult = createPrintingFunc(\"Result=\", \" Great!\");\nprocessAndConsume(10, multiplyByFive, printResult); //Result=50.0 Great! \n```", "```java\nSupplier<Integer> createSuppplier(int num){\n  Supplier<Integer> func = new Supplier<Integer>() {\n    public Integer get() { return num; }\n  };\n  return func;\n}\n```", "```java\nvoid supplyProcessAndConsume(Supplier<Integer> input, \n                             Function<Integer, Double> process, \n                                      Consumer<Double> consume){\n  consume.accept(processFunc.apply(input.get()));\n}\n```", "```java\nSupplier<Integer> supply7 = createSuppplier(7);\nFunction<Integer, Double> multiplyByFive = createMultiplyBy(5);\nConsumer<Double> printResult = createPrintingFunc(\"Result=\", \" Great!\");\nsupplyProcessAndConsume(supply7, multiplyByFive, printResult); \n                                            //prints: Result=35.0 Great!\n\n```", "```java\nPredicate<Integer> createTestSmallerThan(int num){\n  Predicate<Integer> func = new Predicate<Integer>() {\n    public boolean test(Integer d) {\n      return d < num;\n    }\n  };\n  return func;\n}\n```", "```java\nvoid supplyDecideProcessAndConsume(Supplier<Integer> input, \n                                  Predicate<Integer> test, \n                                   Function<Integer, Double> process, \n                                            Consumer<Double> consume){\n  int in = input.get();\n  if(test.test(in)){\n    consume.accept(process.apply(in));\n  } else {\n    System.out.println(\"Input \" + in + \n                     \" does not pass the test and not processed.\");\n  }\n}\n```", "```java\nSupplier<Integer> input = createSuppplier(7);\nPredicate<Integer> test = createTestSmallerThan(5);\nFunction<Integer, Double> multiplyByFive = createMultiplyBy(5);\nConsumer<Double> printResult = createPrintingFunc(\"Result=\", \" Great!\");\nsupplyDecideProcessAndConsume(input, test, multiplyByFive, printResult);\n             //prints: Input 7 does not pass the test and not processed.\n```", "```java\nSupplier<Integer> input = createSuppplier(3)\n```", "```java\nResult=15.0 Great!\n```", "```java\nFunction<Double, Long> f1 = d -> Double.valueOf(d / 2.).longValue();\nFunction<Long, String> f2 = l -> \"Result: \" + (l + 1);\nFunction<Double, String> f3 = f1.andThen(f2);\nSystem.out.println(f3.apply(4.));            //prints: 3\n\n```", "```java\nFunction<Integer, Double> createMultiplyBy(double num){\n  Function<Integer, Double> func = new Function<Integer, Double>(){\n    public Double apply(Integer i){\n      return i * num;\n    }\n  };\n  return func; \n```", "```java\nprivate static Function<Double, Long> createSubtractInt(int num){\n  Function<Double, Long> func = new Function<Double, Long>(){\n    public Long apply(Double dbl){\n      return Math.round(dbl - num);\n    }\n  };\n  return func;\n}\n\n```", "```java\nFunction<Integer, Double> multiplyByFive = createMultiplyBy(5);\nSystem.out.println(multiplyByFive.apply(2));  //prints: 10.0\n\nFunction<Double, Long> subtract7 = createSubtractInt(7);\nSystem.out.println(subtract7.apply(11.0));   //prints: 4\n\nlong r = multiplyByFive.andThen(subtract7).apply(2);\nSystem.out.println(r);                          //prints: 3\n\n```", "```java\nboolean r = subtract7.compose(multiplyByFive).apply(2);\nSystem.out.println(r);                          //prints: 3         \n\n```", "```java\nConsumer<Double> createPrintingFunc(String prefix, String postfix){\n  Consumer<Double> func = new Consumer<Double>() {\n    public void accept(Double d) {\n      System.out.println(prefix + d + postfix);\n    }\n  };\n  return func;\n}\n```", "```java\nConsumer<Double> print21By = createPrintingFunc(\"21 by \", \"\");\nConsumer<Double> equalsBy21 = createPrintingFunc(\"equals \", \" by 21\");\nprint21By.andThen(equalsBy21).accept(2d);  \n//prints: 21 by 2.0 \n//        equals 2.0 by 21\n\n```", "```java\nPredicate<Double> testSmallerThan(double limit){\n  Predicate<Double> func = new Predicate<Double>() {\n    public boolean test(Double num) {\n      System.out.println(\"Test if \" + num + \" is smaller than \" + limit);\n      return num < limit;\n    }\n  };\n  return func;\n}\n```", "```java\nPredicate<Double> testBiggerThan(double limit){\n  Predicate<Double> func = new Predicate<Double>() {\n    public boolean test(Double num) {\n      System.out.println(\"Test if \" + num + \" is bigger than \" + limit);\n      return num > limit;\n    }\n  };\n  return func;\n}\n```", "```java\nPredicate<Double> isSmallerThan20 = testSmallerThan(20d);\nSystem.out.println(isSmallerThan20.test(10d));\n     //prints: Test if 10.0 is smaller than 20.0\n     //        true\n\nPredicate<Double> isBiggerThan18 = testBiggerThan(18d);\nSystem.out.println(isBiggerThan18.test(10d));\n    //prints: Test if 10.0 is bigger than 18.0\n    //        false\n\nboolean b = isSmallerThan20.and(isBiggerThan18).test(10.);\nSystem.out.println(b);\n    //prints: Test if 10.0 is smaller than 20.0\n    //        Test if 10.0 is bigger than 18.0\n    //        false\n\nb = isSmallerThan20.or(isBiggerThan18).test(10.);\nSystem.out.println(b);\n    //prints: Test if 10.0 is smaller than 20.0\n    //        true\n\n```", "```java\nFunction<Integer, Integer> id = Function.identity();\nSystem.out.println(id.apply(4));          //prints: 4\n\n```", "```java\nFunction<Double, Double> multiplyByFive = Function.identity();\nSystem.out.println(multiplyByFive.apply(2.));  //prints: 2.0\n\nFunction<Double, Long> subtract7 = createSubtractInt(7);\nSystem.out.println(subtract7.apply(11.0));    //prints: 4\n\nlong r = multiplyByFive.andThen(subtract7).apply(2.);\nSystem.out.println(r);                       //prints: -5\n\n```", "```java\nFunction<Integer, Double> createMultiplyBy(double num){\n  Function<Integer, Double> func = i -> i * num;\n  return func;\n}\nConsumer<Double> createPrintingFunc(String prefix, String postfix){\n  Consumer<Double> func = d -> System.out.println(prefix + d + postfix);\n  return func;\n}\nSupplier<Integer> createSuppplier(int num){\n  Supplier<Integer> func = () -> num;\n  return func;\n}\nPredicate<Integer> createTestSmallerThan(int num){\n  Predicate<Integer> func = d -> d < num;\n  return func;\n}\n```", "```java\nvoid supplyDecideProcessAndConsume(Supplier<Integer> input, \n                                   Predicate<Integer> test, \n                                   Function<Integer, Double> process, \n                                            Consumer<Double> consume){\n  int in = input.get();\n  if(test.test(in)){\n    consume.accept(process.apply(in));\n  } else {\n    System.out.println(\"Input \" + in + \n                 \" does not pass the test and not processed.\");\n  }\n}\n```", "```java\nSupplier<Integer> input = createSuppplier(7);\nPredicate<Integer> test = createTestSmallerThan(5);\nFunction<Integer, Double> multiplyByFive = createMultiplyBy(5);\nConsumer<Double> printResult = createPrintingFunc(\"Result=\", \" Great!\");\nsupplyDecideProcessAndConsume(input, test, multiplyByFive, printResult);\n```", "```java\nSupplier<Integer> input = () -> 7;\nPredicate<Integer> test = d -> d < 5.;\nFunction<Integer, Double> multiplyByFive = i -> i * 5.;;\nConsumer<Double> printResult = \n                     d -> System.out.println(\"Result=\" + d + \" Great!\");\nsupplyDecideProcessAndConsume(input, test, multiplyByFive, printResult); \n\n```", "```java\nsupplyDecideProcessAndConsume(() -> 7, d -> d < 5, i -> i * 5., \n                    d -> System.out.println(\"Result=\" + d + \" Great!\")); \n\n```", "```java\nint x = 7;\n//x = 3;       //compilation error\nint y = 5;\ndouble z = 5.;\nsupplyDecideProcessAndConsume(() -> x, d -> d < y, i -> i * z,\n            d -> { //x = 3;      //compilation error\n                   System.out.println(\"Result=\" + d + \" Great!\"); } );\n\n```", "```java\nclass A {\n  private int x;\n  public int getX(){ return this.x; }\n  public void setX(int x){ this.x = x; }\n}\nvoid localVariable2(){\n  A a = new A();\n  a.setX(7);\n  a.setX(3);\n  int y = 5;\n  double z = 5.;\n  supplyDecideProcessAndConsume(() -> a.getX(), d -> d < y, i -> i * z,\n               d -> { a.setX(5);\n    System.out.println(\"Result=\" + d + \" Great!\"); } );\n}\n```", "```java\nclass ThisDemo {\n  private String field = \"ThisDemo.field\";\n  public void useAnonymousClass() {\n    Consumer<String> consumer = new Consumer<>() {\n      private String field = \"AnonymousClassConsumer.field\";\n      public void accept(String s) {\n        System.out.println(this.field);\n      }\n    };\n    consumer.accept(this.field);\n  }\n  public void useLambdaExpression() {\n    Consumer<String> consumer = consumer = s -> {\n      System.out.println(this.field);\n    };\n    consumer.accept(this.field);\n  }\n\n}\n```", "```java\nThisDemo d = new ThisDemo();\nd.useAnonymousClass();   //prints: AnonymousClassConsumer.field\nd.useLambdaExpression(); //prints: ThisDemo.field\n\n```", "```java\nsupplyDecideProcessAndConsume(() -> 7, d -> d < 5, i -> i * 5., \n                    d -> System.out.println(\"Result=\" + d + \" Great!\")); \n```", "```java\npublic class Helper {\n  public double calculateResult(int i){\n    // Maybe many lines of code here\n    return i* 5;\n  }\n  public static void printResult(double d){\n    // Maybe many lines of code here\n    System.out.println(\"Result=\" + d + \" Great!\");\n  }\n}\n```", "```java\npublic class Lambdas {\n  public void methodReference() {\n    Supplier<Integer> input = () -> generateInput();\n    Predicate<Integer> test = d -> checkValue(d);\n    Function<Integer, Double> multiplyByFive = \n                                  i -> new Helper().calculateResult(i);\n    Consumer<Double> printResult = d -> Helper.printResult(d);\n    supplyDecideProcessAndConsume(input, test, \n                                           multiplyByFive, printResult);\n  }\n  private int generateInput(){\n    // Maybe many lines of code here\n    return 7;\n  }\n  private static boolean checkValue(double d){\n    // Maybe many lines of code here\n    return d < 5;\n  }\n}\n```", "```java\nsupplyDecideProcessAndConsume(() -> generateInput(), d -> checkValue(d), \n            i -> new Helper().calculateResult(i), Helper.printResult(d));\n```", "```java\nSupplier<Integer> input = this::generateInput;\nPredicate<Integer> test = Lambdas::checkValue;\nFunction<Integer, Double> multiplyByFive = new Helper()::calculateResult;;\nConsumer<Double> printResult = Helper::printResult;\nsupplyDecideProcessAndConsume(input, test, multiplyByFive, printResult);\n\n```", "```java\nsupplyDecideProcessAndConsume(this::generateInput, Lambdas::checkValue, \n                    new Helper()::calculateResult, Helper::printResult);\n\n```", "```java\nSupplier<A> supplier = () -> new A();\n\n```", "```java\nSupplier<A> supplier = A::new;\n\n```"]