["```kt\npublic class MainActivity extends CardboardActivity implements IRenderBox {\n    private static final String TAG = \"Gallery360\";\n    CardboardView cardboardView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        cardboardView = (CardboardView) findViewById(R.id.cardboard_view);\n        cardboardView.setRenderer(new RenderBox(this, this));\n        setCardboardView(cardboardView);\n    }\n    @Override\n    public void setup() {\n\n    }\n    @Override\n    public void preDraw() {\n        // code run beginning each frame\n    }\n    @Override\n    public void postDraw() {\n        // code run end of each frame\n    }\n}\n```", "```kt\n    public void setup() {\n        new Transform()\n            .setLocalPosition(0,0,-7)\n            .setLocalRotation(45,60,0)\n            .addComponent(new Cube(true));\n    }\n```", "```kt\n    final int DEFAULT_BACKGROUND = R.drawable.sample360;\n\n    Sphere photosphere;\n\n    @Override\n    public void setup() {\n        setupBackground();\n    }\n\n    void setupBackground() {\n        photosphere = new Sphere(DEFAULT_BACKGROUND, false);\n        new Transform()\n            .setLocalScale(Camera.Z_FAR * 0.99f, -Camera.Z_FAR * 0.99f, Camera.Z_FAR * 0.99f)\n            .addComponent(photosphere);\n    }\n```", "```kt\npublic class Plane extends RenderObject {\n}\n```", "```kt\n    public static final float[] COORDS = new float[] {\n            -1.0f, 1.0f, 0.0f,\n            1.0f, 1.0f, 0.0f,\n            -1.0f, -1.0f, 0.0f,\n            1.0f, -1.0f, 0.0f\n    };\n    public static final float[] TEX_COORDS = new float[] {\n            0.0f, 1.0f,\n            1.0f, 1.0f,\n            0f, 0f,\n            1.0f, 0f,\n    };\n    public static final float[] COLORS = new float[] {\n            0.5f, 0.5f, 0.5f, 1.0f,\n            0.5f, 0.5f, 0.5f, 1.0f,\n            0.5f, 0.5f, 0.5f, 1.0f,\n            0.5f, 0.5f, 0.5f, 1.0f\n    };\n    public static final float[] NORMALS = new float[] {\n            0.0f, 0.0f, -1.0f,\n            0.0f, 0.0f, -1.0f,\n            0.0f, 0.0f, -1.0f,\n            0.0f, 0.0f, -1.0f\n    };\n    public static final short[] INDICES = new short[] {\n            0, 1, 2,\n            1, 3, 2\n    };\n```", "```kt\n    public static FloatBuffer vertexBuffer;\n    public static FloatBuffer colorBuffer;\n    public static FloatBuffer normalBuffer;\n    public static FloatBuffer texCoordBuffer;\n    public static ShortBuffer indexBuffer;\n    public static final int numIndices = 6;\n\n    public Plane(){\n        super();\n        allocateBuffers();\n    }\n\n    public static void allocateBuffers(){\n        //Already allocated?\n        if (vertexBuffer != null) return;\n        vertexBuffer   = allocateFloatBuffer(COORDS);\n        texCoordBuffer = allocateFloatBuffer(TEX_COORDS);\n        colorBuffer    = allocateFloatBuffer(COLORS);\n        normalBuffer   = allocateFloatBuffer(NORMALS);\n        indexBuffer    = allocateShortBuffer(INDICES);\n    }\n```", "```kt\n    public Plane(int textureId, boolean lighting) {\n        super();\n        allocateBuffers();\n        if (lighting) {\n            createDiffuseMaterial(textureId);\n        } else {\n            createUnlitTexMaterial(textureId);\n        }\n    }\n\n    public Plane createDiffuseMaterial(int textureId) {\n        DiffuseLightingMaterial mat = new DiffuseLightingMaterial(textureId);\n        mat.setBuffers(vertexBuffer, normalBuffer, texCoordBuffer, indexBuffer, numIndices);\n        material = mat;\n        return this;\n    }\n\n    public Plane createUnlitTexMaterial(int textureId) {\n        UnlitTexMaterial mat = new UnlitTexMaterial(textureId);\n        mat.setBuffers(vertexBuffer, texCoordBuffer, indexBuffer, numIndices);\n        material = mat;\n        return this;\n    }\n```", "```kt\n    Plane screen;\n\n    public void setup() {\n        setupBackground();\n        setupScreen();\n    }\n\n    void setupScreen() {\n        screen = new Plane(R.drawable.sample360, false);\n        new Transform()\n                .setLocalScale(4, 4, 1)\n                .setLocalPosition(0, 0, -5)\n                .setLocalRotation(0, 0, 180)\n                .addComponent(screen);\n    }\n```", "```kt\n    void setupScreen() {\n        Transform screenRoot = new Transform()\n                .setLocalScale(4, 4, 1)\n                .setLocalRotation(0, 0, 180)\n                .setLocalPosition(0, 0, -5);\n\n        screen = new Plane(R.drawable.sample360, false);\n\n        new Transform()\n                .setParent(screenRoot, false)\n                .addComponent(screen);\n    }\n```", "```kt\nuniform mat4 u_MVP;\n\nattribute vec4 a_Position;\nattribute vec2 a_TexCoordinate;\n\nvarying vec3 v_Position;\nvarying vec2 v_TexCoordinate;\n\nvoid main() {\n   // pass through the texture coordinate\n   v_TexCoordinate = a_TexCoordinate;\n\n   // final point in normalized screen coordinates\n   gl_Position = u_MVP * a_Position;\n}\n```", "```kt\nprecision mediump float;\nuniform sampler2D u_Texture; \n\nvarying vec3 v_Position; \nvarying vec2 v_TexCoordinate;\nuniform vec4 u_Color;\nuniform float u_Width;\n\nvoid main() {\n    // send the color from the texture straight out unless in // border area\n    if(\n        v_TexCoordinate.x > u_Width\n        && v_TexCoordinate.x < 1.0 - u_Width\n        && v_TexCoordinate.y > u_Width\n        && v_TexCoordinate.y < 1.0 - u_Width\n    ){\n        gl_FragColor = texture2D(u_Texture, v_TexCoordinate);\n    } else {\n        gl_FragColor = u_Color;\n    }\n}\n```", "```kt\nfloat scale = 1.0 / (1 - u_Width * 2);\nVec2 offset = vec(\n    v_TexCoordinate.x * scale \u2013 u_Width,\n    v_TexCoordinate.x * scale \u2013 u_Width);\ngl_FragColor = texture2D(u_Texture, offset);\n```", "```kt\npublic class BorderMaterial extends Material {\n    private static final String TAG = \"bordermaterial\";\n\n}\n```", "```kt\n    int textureId;\n    public float borderWidth = 0.1f;\n    public float[] borderColor = new float[]{0, 0, 0, 1}; // black\n    static int program = -1; //Initialize to a totally invalid value for setup state\n    static int positionParam;\n    static int texCoordParam;\n    static int textureParam;\n    static int MVPParam;\n    static int colorParam;\n    static int widthParam;\n\n    FloatBuffer vertexBuffer;\n    FloatBuffer texCoordBuffer;\n    ShortBuffer indexBuffer;\n    int numIndices;\n```", "```kt\n    public BorderMaterial() {\n        super();\n        setupProgram();\n    }\n\n    public static void setupProgram() {\n        //Already setup?\n        if (program > -1) return;\n        //Create shader program\n        program = createProgram(R.raw.border_vertex, R.raw.border_fragment);\n\n        //Get vertex attribute parameters\n        positionParam = GLES20.glGetAttribLocation(program, \"a_Position\");\n        texCoordParam = GLES20.glGetAttribLocation(program, \"a_TexCoordinate\");\n\n        //Enable them (turns out this is kind of a big deal ;)\n        GLES20.glEnableVertexAttribArray(positionParam);\n        GLES20.glEnableVertexAttribArray(texCoordParam);\n\n        //Shader-specific parameters\n        textureParam = GLES20.glGetUniformLocation(program, \"u_Texture\");\n        MVPParam = GLES20.glGetUniformLocation(program, \"u_MVP\");\n        colorParam = GLES20.glGetUniformLocation(program, \"u_Color\");\n        widthParam = GLES20.glGetUniformLocation(program, \"u_Width\");\n        RenderBox.checkGLError(\"Border params\");\n    }\n```", "```kt\npublic void setBuffers(FloatBuffer vertexBuffer, FloatBuffer texCoordBuffer, ShortBuffer indexBuffer, int numIndices){\n        //Associate VBO data with this instance of the material\n        this.vertexBuffer = vertexBuffer;\n        this.texCoordBuffer = texCoordBuffer;\n        this.indexBuffer = indexBuffer;\n        this.numIndices = numIndices;\n    }\n```", "```kt\n    public void setTexture(int textureHandle) {\n        textureId = textureHandle;\n    }\n```", "```kt\n    @Override\n    public void draw(float[] view, float[] perspective) {\n        GLES20.glUseProgram(program);\n\n        // Set the active texture unit to texture unit 0.\n        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);\n\n        // Bind the texture to this unit.\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);\n\n        // Tell the texture uniform sampler to use this texture in // the shader by binding to texture unit 0.\n        GLES20.glUniform1i(textureParam, 0);\n\n        Matrix.multiplyMM(modelView, 0, view, 0, RenderObject.model, 0);\n        Matrix.multiplyMM(modelViewProjection, 0, perspective, 0, modelView, 0);\n        // Set the ModelViewProjection matrix for eye position.\n        GLES20.glUniformMatrix4fv(MVPParam, 1, false, modelViewProjection, 0);\n\n        GLES20.glUniform4fv(colorParam, 1, borderColor, 0);\n        GLES20.glUniform1f(widthParam, borderWidth);\n\n        //Set vertex attributes\n        GLES20.glVertexAttribPointer(positionParam, 3, GLES20.GL_FLOAT, false, 0, vertexBuffer);\n        GLES20.glVertexAttribPointer(texCoordParam, 2, GLES20.GL_FLOAT, false, 0, texCoordBuffer);\n\n        GLES20.glDrawElements(GLES20.GL_TRIANGLES, numIndices, GLES20.GL_UNSIGNED_SHORT, indexBuffer);\n\n        RenderBox.checkGLError(\"Border material draw\");\n    }\n```", "```kt\n    public static void destroy(){\n        program = -1;\n    }\n```", "```kt\n    public void setupBorderMaterial(BorderMaterial material){\n        this.material = material;\n        material.setBuffers(vertexBuffer, texCoordBuffer,         indexBuffer, numIndices);\n    }\n```", "```kt\n    void setupScreen() {\n        //...\n        Screen = new Plane();\n        BorderMaterial screenMaterial = new BorderMaterial();\n        screenMaterial.setTexture(RenderBox.loadTexture( R.drawable.sample360));\n        screen.setupBorderMaterial(screenMaterial);\n        //...\n\n}\n```", "```kt\npublic class Image {\n    final static String TAG = \"image\";\n    String path;\n    public Image(String path) {\n        this.path = path;\n    }\n    public static boolean isValidImage(String path){\n        String extension = getExtension(path);\n        if(extension == null)\n            return false;\n        switch (extension){\n            case \"jpg\":\n                return true;\n            case \"jpeg\":\n                return true;\n            case \"png\":\n                return true;\n        }\n        return false;\n    }\n    static String getExtension(String path){\n        String[] split = path.split(\"\\\\.\");\n        if(split== null || split.length < 2)\n            return null;\n        return split[split.length - 1].toLowerCase();\n    }\n}\n```", "```kt\n    final List<Image> images = new ArrayList<>();\n\n    int loadImageList(String path) {\n        File f = new File(path);\n        File[] file = f.listFiles();\n        if (file==null)\n            return 0;\n        for (int i = 0; i < file.length; i++) {\n            if (Image.isValidImage(file[i].getName())) {\n                Image img = new Image(path + \"/\" + file[i].getName());\n                images.add(img);\n            }\n        }\n        return file.length;\n    }\n```", "```kt\n    final String imagesPath = \"/storage/emulated/0/DCIM/Camera\";\n\n    public void setup() {\n        \u2026\n\n        loadImageList(imagesPath);\n    }\n```", "```kt\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n```", "```kt\n    int textureHandle;\n```", "```kt\n    public void loadTexture(CardboardView cardboardView) {\n        if (textureHandle != 0)\n            return;\n        final Bitmap bitmap = BitmapFactory.decodeFile(path);\n        if (bitmap == null){\n            throw new RuntimeException(\"Error loading bitmap.\");\n        }\n        textureHandle = bitmapToTexture(bitmap);\n    }\n```", "```kt\n    public static int bitmapToTexture(Bitmap bitmap){\n        final int[] textureHandle = new int[1];\n\n        GLES20.glGenTextures(1, textureHandle, 0);\n        RenderBox.checkGLError(\"Bitmap GenTexture\");\n\n        if (textureHandle[0] != 0) {\n            // Bind to the texture in OpenGL\n            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[0]);\n\n            // Set filtering\n            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);\n            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);\n\n            // Load the bitmap into the bound texture.\n            GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);\n        }\n        if (textureHandle[0] == 0){\n            throw new RuntimeException(\"Error loading texture.\");\n        }\n\n        return textureHandle[0];\n    }\n```", "```kt\n    public void show(CardboardView cardboardView, Plane screen) {\n        loadTexture(cardboardView);\n        BorderMaterial material = (BorderMaterial) screen.getMaterial();\n        material.setTexture(textureHandle);\n    }\n```", "```kt\n    public void setup() {\n        setupBackground();\n        setupScreen();\n        loadImageList(imagesPath);\n        showImage(images.get(0));\n    }\n\n    void showImage(Image image) {\n        image.show(cardboardView, screen);\n    }\n```", "```kt\n    Quaternion rotation;\n```", "```kt\n    void calcRotation(Plane screen){\n        rotation = new Quaternion();\n\n        // use Exif tags to determine orientation, only available // in jpg (and jpeg)\n        String ext = getExtension(path);\n        if (ext.equals(\"jpg\") || ext.equals(\"jpeg\")) {\n\n            try {\n                ExifInterface exif = new ExifInterface(path);\n                switch (exif.getAttribute(ExifInterface.TAG_ORIENTATION)) {\n                    // Correct orientation, but flipped on the // horizontal axis\n                    case \"2\":\n                        rotation = new Quaternion().setEulerAngles(180, 0, 0);\n                        break;\n                    // Upside-down\n                    case \"3\":\n                        rotation = new Quaternion().setEulerAngles(0, 0, 180);\n                        break;\n                    // Upside-Down & Flipped along horizontal axis\n                    case \"4\":\n                        rotation = new Quaternion().setEulerAngles(180, 0, 180);\n                        break;\n                    // Turned 90 deg to the left and flipped\n                    case \"5\":\n                        rotation = new Quaternion().setEulerAngles(0, 180, 90);\n                        break;\n                    // Turned 90 deg to the left\n                    case \"6\":\n                        rotation = new Quaternion().setEulerAngles(0, 0, -90);\n                        break;\n                    // Turned 90 deg to the right and flipped\n                    case \"7\":\n                        rotation = new Quaternion().setEulerAngles(0, 180, 90);\n                        break;\n                    // Turned 90 deg to the right\n                    case \"8\":\n                        rotation = new Quaternion().setEulerAngles(0, 0, 90);\n                        break;\n                    //Correct orientation--do nothing\n                    default:\n                        break;\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        screen.transform.setLocalRotation(rotation);\n    }\n```", "```kt\n    public void show(CardboardView cardboardView, Plane screen) {\n        loadTexture(cardboardView);\n        BorderMaterial material = (BorderMaterial) screen.getMaterial();\n        material.setTexture(textureHandle);\n        calcRotation(screen);\n    }\n```", "```kt\n    int height, width;\n```", "```kt\n    public void loadTexture(CardboardView cardboardView) {\n        if (textureHandle != 0)\n            return;\n        BitmapFactory.Options options = new BitmapFactory.Options();\n        final Bitmap bitmap = BitmapFactory.decodeFile(path, options);\n        if (bitmap == null){\n            throw new RuntimeException(\"Error loading bitmap.\");\n        }\n        width = options.outWidth;\n        height = options.outHeight;\n        textureHandle = bitmapToTexture(bitmap);\n    }\n```", "```kt\n    public void show(CardboardView cardboardView, Plane screen) {\n        loadTexture(cardboardView);\n        BorderMaterial material = (BorderMaterial) screen.getMaterial();\n        material.setTexture(textureHandle);\n        calcRotation(screen);\n        calcScale(screen);\n    }\n\n    void calcScale(Plane screen) {\n        if (width > 0 && width > height) {\n            screen.transform.setLocalScale(1, (float) height / width, 1);\n        } else if(height > 0) {\n            screen.transform.setLocalScale((float) width / height, 1, 1);\n        }\n    }\n```", "```kt\n    static int MAX_TEXTURE_SIZE = 2048;\n\n    void setupMaxTextureSize() {\n        //get max texture size\n        int[] maxTextureSize = new int[1];\n        GLES20.glGetIntegerv(GLES20.GL_MAX_TEXTURE_SIZE, maxTextureSize, 0);\n        MAX_TEXTURE_SIZE = maxTextureSize[0];\n        Log.i(TAG, \"Max texture size = \" + MAX_TEXTURE_SIZE);\n    }\n```", "```kt\n    public void loadTexture(CardboardView cardboardView, int sampleSize) {\n        if (textureHandle != 0)\n            return;\n        BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inSampleSize = sampleSize;\n        final Bitmap bitmap = BitmapFactory.decodeFile(path, options);\n        if(bitmap == null){\n            throw new RuntimeException(\"Error loading bitmap.\");\n        }\n        width = options.outWidth;\n        height = options.outHeight;\n        textureHandle = bitmapToTexture(bitmap);\n    }\n```", "```kt\n    public void loadFullTexture(CardboardView cardboardView) {\n        // search for best size\n        int sampleSize = 1;\n        BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        do {\n            options.inSampleSize = sampleSize;\n            BitmapFactory.decodeFile(path, options);\n            sampleSize *= 2;\n        } while (options.outWidth > MainActivity.MAX_TEXTURE_SIZE || options.outHeight > MainActivity.MAX_TEXTURE_SIZE);\n        sampleSize /= 2;\n        loadTexture(cardboardView, sampleSize);\n    }\n```", "```kt\n    public void show(CardboardView cardboardView, Plane screen) {\n        loadFullTexture(cardboardView);\n        BorderMaterial material = (BorderMaterial) screen.getMaterial();\n        ...\n```", "```kt\n    public boolean isPhotosphere;\n\n    public Image(String path) {\n        this.path = path;\n        isPhotosphere = path.toLowerCase().contains(\"pano\");\n    }\n```", "```kt\n    int bgTextureHandle;\n```", "```kt\n    void setupBackground() {\n        photosphere = new Sphere(DEFAULT_BACKGROUND, false);\n        new Transform()\n                .setLocalScale(Camera.Z_FAR * 0.99f,-Camera.Z_FAR * 0.99f, Camera.Z_FAR * 0.99f)\n                .addComponent(photosphere);\n        UnlitTexMaterial mat = (UnlitTexMaterial) photosphere.getMaterial();\n        bgTextureHandle = mat.getTexture();\n    }\n```", "```kt\n    void showImage(Image image) {\n        UnlitTexMaterial bgMaterial = (UnlitTexMaterial) photosphere.getMaterial();\n        image.loadFullTexture(cardboardView);\n        if (image.isPhotosphere) {\n            bgMaterial.setTexture(image.textureHandle);\n            screen.enabled = false;\n        } else {\n            bgMaterial.setTexture(bgTextureHandle);\n            screen.enabled = true;\n            image.show(cardboardView, screen);\n        }\n    }\n```", "```kt\n         showImage(images.get(images.size()-1));\n```", "```kt\n    void setupScreen() {\n        Transform screenRoot = new Transform()\n                .setLocalScale(4, 4, 1)\n                .setLocalRotation(0, -90, 0)\n                .setLocalPosition(-5, 0, 0);\n                ...\n```", "```kt\n    public void showThumbnail(CardboardView cardboardView, Plane thumb) {\n        loadTexture(cardboardView, 4);\n        BorderMaterial material = (BorderMaterial) thumb.getMaterial();\n        material.setTexture(textureHandle);\n        calcRotation(thumb);\n        calcScale(thumb);\n    }\n```", "```kt\npublic class Thumbnail {\n    final static String TAG = \"Thumbnail\";\n\n    public Plane plane;\n    public Image image;\n    CardboardView cardboardView;\n\n    public Thumbnail(CardboardView cardboardView) {\n        this.cardboardView = cardboardView;\n    }\n}\n```", "```kt\n    public void setImage(Image image) {\n        this.image = image;\n        // Turn the image into a GPU texture\n        image.loadTexture(cardboardView, 4);\n        // TODO: wait until texture binding is done\n        // show it\n        image.showThumbnail(cardboardView, plane);\n    }\n```", "```kt\n    public void setVisible(boolean visible) {\n        plane.enabled = visible;\n    }\n```", "```kt\n    final int GRID_X = 5;\n    final int GRID_Y = 3;\n\n    final List<Thumbnail> thumbnails = new ArrayList<>();\n```", "```kt\n    void setupThumbnailGrid() {\n        int count = 0;\n        for (int i = 0; i < GRID_Y; i++) {\n            for (int j = 0; j < GRID_X; j++) {\n                if (count < images.size()) {\n                    Thumbnail thumb = new \n                        Thumbnail(cardboardView);\n                    thumbnails.add(thumb);\n\n                    Transform image = new Transform();\n                    image.setLocalPosition(-4 + j * 2.1f, 3 - i * 3, -5);\n                    Plane imgPlane = new Plane();\n                    thumb.plane = imgPlane;\n                    imgPlane.enabled = false;\n                    BorderMaterial material = new BorderMaterial();\n                    imgPlane.setupBorderMaterial(material);\n                    image.addComponent(imgPlane);\n                }\n                count++;\n            }\n        }\n    }\n```", "```kt\n    void updateThumbnails() {\n        int count = 0;\n        for (Thumbnail thumb : thumbnails) {\n            if (count < images.size()) {\n                thumb.setImage(images.get(count));\n                thumb.setVisible(true);\n            } else {\n                thumb.setVisible(false);\n            }\n            count++;\n        }\n    }\n```", "```kt\n    public void setup() {\n        setupMaxTextureSize();\n        setupBackground();\n        setupScreen();\n        loadImageList(imagesPath);\n        setupThumbnailGrid();\n        updateThumbnails();\n    }\n```", "```kt\nfor(int j = 0; j < 3; j++) { //Repeat image list\n    for (int i = 0; i < file.length; i++) {\n        if (Image.isValidImage(file[i].getName())) {\n            ...\n```", "```kt\n    final float[] selectedColor = new float[]{0, 0.5f, 0.5f, 1};\n    final float[] invalidColor = new float[]{0.5f, 0, 0, 1};\n    final float[] normalColor = new float[]{0, 0, 0, 1};\n    Thumbnail selectedThumbnail = null;\n```", "```kt\n    void selectObject() {\n        selectedThumbnail = null;\n        for (Thumbnail thumb : thumbnails) {\n            if (thumb.image == null)\n                return;\n            Plane plane = thumb.plane;\n            BorderMaterial material = (BorderMaterial) plane.getMaterial();\n            if (plane.isLooking) {\n                selectedThumbnail = thumb;\n                material.borderColor = selectedColor;\n            } else {\n                material.borderColor = normalColor;\n            }\n        }\n    }\n```", "```kt\n    @Override\n    public void postDraw() {\n        selectObject();\n    }\n```", "```kt\n    @Override\n    public void onCardboardTrigger() {\n        if (selectedThumbnail != null) {\n            showImage(selectedThumbnail.image);\n        }\n    }\n```", "```kt\n    void showImage(final Image image) {\n        cardboardView.queueEvent(new Runnable() {\n            @Override\n            public void run() {\n\n                UnlitTexMaterial bgMaterial = (UnlitTexMaterial) photosphere.getMaterial();\n                image.loadFullTexture(cardboardView);\n                if (image.isPhotosphere) {\n                    Log.d(TAG, \"!!! is photosphere\");\n                    bgMaterial.setTexture(image.textureHandle);\n                    screen.enabled = false;\n                } else {\n                    bgMaterial.setTexture(bgTextureHandle);\n                    screen.enabled = true;\n                    image.show(cardboardView, screen);\n                }\n\n            }\n        });\n    }\n```", "```kt\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\n```", "```kt\n    private Vibrator vibrator;\n```", "```kt\n    vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n```", "```kt\n       vibrator.vibrate(25);\n```", "```kt\npublic class Triangle extends RenderObject {\n\n    /*\n    Special triangle for border shader\n\n    *   0/3 (0,1,0)/(0,1,0) (0,1)/(1,1)\n              /|\\\n             / | \\\n            *--*--*\n            1  2  4\n     */\n\n    private static final float YAW_LIMIT = 0.15f;\n    private static final float PITCH_LIMIT = 0.15f;\n    public static final float[] COORDS = new float[] {\n            0f, 1.0f, 0.0f,\n            -1.0f, -1.0f, 0.0f,\n            0.0f, -1.0f, 0.0f,\n            0f, 1.0f, 0.0f,\n            1.0f, -1.0f, 0.0f,\n    };\n    public static final float[] TEX_COORDS = new float[] {\n            0f, 1f,\n            0f, 0f,\n            0.5f, 0f,\n            1f, 1f,\n            1f, 0f\n    };\n    public static final float[] COLORS = new float[] {\n            0.5f, 0.5f, 0.5f, 1.0f,\n            0.5f, 0.5f, 0.5f, 1.0f,\n            0.5f, 0.5f, 0.5f, 1.0f,\n            0.5f, 0.5f, 0.5f, 1.0f,\n            0.5f, 0.5f, 0.5f, 1.0f\n    };\n    public static final float[] NORMALS = new float[] {\n            0.0f, 0.0f, -1.0f,\n            0.0f, 0.0f, -1.0f,\n            0.0f, 0.0f, -1.0f,\n            0.0f, 0.0f, -1.0f,\n            0.0f, 0.0f, -1.0f\n    };\n    public static final short[] INDICES = new short[] {\n            1, 0, 2,\n            2, 3, 4\n    };\n\n    private static FloatBuffer vertexBuffer;\n    private static FloatBuffer colorBuffer;\n    private static FloatBuffer normalBuffer;\n    private static FloatBuffer texCoordBuffer;\n    private static ShortBuffer indexBuffer;\n    static final int numIndices = 6;\n\n    static boolean setup;\n}\n```", "```kt\n    public Triangle(){\n        super();\n        allocateBuffers();\n    }\n\n    public static void allocateBuffers(){\n        //Already allocated?\n        if (vertexBuffer != null) return;\n        vertexBuffer = allocateFloatBuffer(COORDS);\n        texCoordBuffer = allocateFloatBuffer(TEX_COORDS);\n        colorBuffer = allocateFloatBuffer(COLORS);\n        normalBuffer = allocateFloatBuffer(NORMALS);\n        indexBuffer = allocateShortBuffer(INDICES);\n    }\n```", "```kt\n    public void setupBorderMaterial(BorderMaterial material){\n        this.material = material;\n        material.setBuffers(vertexBuffer, texCoordBuffer, indexBuffer, numIndices);\n    }\n```", "```kt\n    Triangle up, down;\n    BorderMaterial upMaterial, downMaterial;\n    boolean upSelected, downSelected;\n```", "```kt\n    void setupScrollButtons() {\n        up = new Triangle();\n        upMaterial = new BorderMaterial();\n        up.setupBorderMaterial(upMaterial);\n        new Transform()\n            .setLocalPosition(0,6,-5)\n            .addComponent(up);\n\n        down = new Triangle();\n        downMaterial = new BorderMaterial();\n        down.setupBorderMaterial(downMaterial);\n        new Transform()\n            .setLocalPosition(0,-6,-5)\n            .setLocalRotation(0,0,180)\n            .addComponent(down);\n    }\n```", "```kt\n    public void setup() {\n        setupMaxTextureSize();\n        setupBackground();\n        setupScreen();\n        loadImageList(imagesPath);\n        setupThumbnailGrid();\n        setupScrollButtons();\n        updateThumbnails();\n    }\n```", "```kt\n    void selectObject() {\n        ...\n\n        if (up.isLooking) {\n            upSelected = true;\n            upMaterial.borderColor = selectedColor;\n        } else {\n            upSelected = false;\n            upMaterial.borderColor = normalColor;\n        }\n\n        if (down.isLooking) {\n            downSelected = true;\n            downMaterial.borderColor = selectedColor;\n        } else {\n            downSelected = false;\n            downMaterial.borderColor = normalColor;\n        }\n    }\n```", "```kt\n    static int thumbOffset = 0;\n```", "```kt\n    void updateThumbnails() {\n        int count = thumbOffset;\n        for (Thumbnail thumb : thumbnails) {\n        . . .\n```", "```kt\n    public void onCardboardTrigger() {\n        if (selectedThumbnail != null) {\n            vibrator.vibrate(25);\n            showImage(selectedThumbnail.image);\n        }\n        if (upSelected) {\n            // scroll up\n            thumbOffset -= GRID_X;\n            if (thumbOffset < 0) {\n                thumbOffset = images.size() - GRID_X;\n            }\n            vibrator.vibrate(25);\n            updateThumbnails();\n        }\n        if (downSelected) {\n            // scroll down\n            if (thumbOffset < images.size()) {\n                thumbOffset += GRID_X;\n            } else {\n                thumbOffset = 0;\n            }\n            vibrator.vibrate(25);\n            updateThumbnails();\n        }\n    }\n```", "```kt\n    void updateThumbnails() {\n        cardboardView.queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                ...\n```", "```kt\n        public static boolean loadLock = false;\n```", "```kt\n    public static boolean cancelUpdate = false;\n    static boolean gridUpdateLock = false;\n```", "```kt\n    void showImage(final Image image) {\n        new Thread() {\n            @Override\n            public void run() {\n              UnlitTexMaterial bgMaterial = (UnlitTexMaterial) photosphere.getMaterial();\n                ...\n            }\n        }.start();\n    }\n```", "```kt\n    void updateThumbnails() {\n gridUpdateLock = true;\n new Thread() {\n @Override\n public void run() {\n                int count = thumbOffset;\n                for (Thumbnail thumb : thumbnails) {\n if (cancelUpdate)\n return;\n                    if (count < images.size()) {\n                        thumb.setImage(images.get(count));\n                        thumb.setVisible(true);\n                    } else {\n                        thumb.setVisible(false);\n                    }\n                    count++;\n                }\n cancelUpdate = false;\n gridUpdateLock = false;\n }\n }.start();\n    }\n```", "```kt\n    public void loadTexture(CardboardView cardboardView, int sampleSize) {\n        if (textureHandle != 0)\n            return;\n        BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inSampleSize = sampleSize;\n        final Bitmap bitmap = BitmapFactory.decodeFile(path, options);\n        if(bitmap == null){\n            throw new RuntimeException(\"Error loading bitmap.\");\n        }\n        width = options.outWidth;\n        height = options.outHeight;\n\n loadLock = true;\n cardboardView.queueEvent(new Runnable() {\n @Override\n public void run() {\n if (MainActivity.cancelUpdate)\n return;\n                             textureHandle = bitmapToTexture(bitmap);\n                             bitmap.recycle();\n loadLock = false;\n }\n }\n        });\n while (loadLock){\n try {\n Thread.sleep(100);\n } catch (InterruptedException e) {\n e.printStackTrace();\n }\n }\n    }\n```", "```kt\n    public void setImage(Image image) {\n        this.image = image;\n        // Turn the image into a GPU texture\n        image.loadTexture(cardboardView, 4);\n // wait until texture binding is done\n try {\n while (Image.loadLock) {\n if (MainActivity.cancelUpdate)\n return;\n Thread.sleep(10);\n }\n } catch (InterruptedException e) {\n e.printStackTrace();\n }\n        // show it\n        . . .\n    }\n```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        cancelUpdate = false;\n        //...\n    }\n\n    @Override\n    protected void onStart(){\n        super.onStart();\n        cancelUpdate = true;\n    }\n    @Override\n    protected void onResume(){\n        super.onResume();\n        cancelUpdate = false;\n    }\n    @Override\n    protected void onPause(){\n        super.onPause();\n        cancelUpdate = true;\n    }\n```", "```kt\n        if (gridUpdateLock) {\n            vibrator.vibrate(new long[]{0,50,30,50}, -1);\n            return;\n        }\n```", "```kt\n            if (plane.isLooking) {\n                selectedThumbnail = thumb;\n                if(gridUpdateLock)\n                    material.borderColor = invalidColor;\n                else\n                    material.borderColor = selectedColor;\n\n           ...\n```", "```kt\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <data android:mimeType=\"image/*\" />\n</intent-filter>\n```", "```kt\n    void showUriImage(final Uri uri) {\n        Log.d(TAG, \"intent data \" + uri.getPath());\n        File file = new File(uri.getPath());\n        if(file.exists()){\n            Image img = new Image(uri.getPath());\n            showImage(img);\n        } else {\n            String[] filePathColumn = {MediaStore.Images.Media.DATA};\n            Cursor cursor = getContentResolver().query(uri, filePathColumn, null, null, null);\n            if (cursor == null)\n                return;\n            if (cursor.moveToFirst()) {\n                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);\n                String yourRealPath = cursor.getString(columnIndex);\n                Image img = new Image(yourRealPath);\n                showImage(img);\n           }\n           // else report image not found error?\n           cursor.close();\n\n    }\n```", "```kt\n    public void setup() {\n        BorderMaterial.destroy();\n        setupMaxTextureSize();\n        setupBackground();\n        setupScreen();\n        loadImageList(imagesPath);\n        setupThumbnailGrid();\n        setupScrollButtons();\n        Uri intentUri = getIntent().getData();\n        if (intentUri != null) {\n            showUriImage(intentUri);\n        }\n        updateThumbnails();\n    }\n```", "```kt\n      static boolean setupComplete = false;\n\n      boolean interfaceVisible = true;\n      OrientationEventListener orientationEventListener;\n      int orientThreshold = 10;\n      boolean orientFlip = false;\n      long tiltTime;\n      int tiltDamper = 250;\n```", "```kt\n    void toggleGridMenu() {\n        interfaceVisible = !interfaceVisible;\n        if (up != null)\n            up.enabled = !up.enabled;\n        if (down != null)\n            down.enabled = !down.enabled;\n        int texCount = thumbOffset;\n        for (Thumbnail thumb : thumbnails) {\n            if (texCount < images.size() && thumb != null) {\n                thumb.setVisible(interfaceVisible);\n            }\n            texCount++;\n        }\n    }\n```", "```kt\n    void setupOrientationListener() {\n        orientationEventListener = new OrientationEventListener(this, SensorManager.SENSOR_DELAY_NORMAL) {\n            @Override\n            public void onOrientationChanged(int orientation) {\n                if(gridUpdateLock || !setupComplete)\n                    return;\n           if(System.currentTimeMillis() - tiltTime > tiltDamper) {\n                    if(Math.abs(orientation) < orientThreshold || Math.abs(orientation - 180) < orientThreshold){   //\"close enough\" to portrait mode\n                        if(!orientFlip) {\n                            Log.d(TAG, \"tilt up! \" + orientation);\n                            vibrator.vibrate(25);\n                            toggleGridMenu();\n                        }\n                        orientFlip = true;\n                    }\n                    if(Math.abs(orientation - 90) < orientThreshold || Math.abs(orientation - 270) < orientThreshold) {    //\"close enough\" to landscape mode\n                        orientFlip = false;\n                    }\n                          tiltTime = System.currentTimeMillis();\n                }\n            }\n        };\n        if(orientationEventListener.canDetectOrientation())\n            orientationEventListener.enable();\n    }\n```", "```kt\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        setupOrientationListener();\n    }\n```", "```kt\n    void updateThumbnails() {\n        . . .\n                cancelUpdate = false;\n                gridUpdateLock = false;\n setupComplete = true;\n\n```", "```kt\n    @Override\n    protected void onDestroy(){\n        super.onDestroy();\n        orientationEventListener.disable();\n    }\n```", "```kt\n    public Sphere sphere;\n```", "```kt\n    public void setImage(Image image) {\n        // ...\n        // show it\n        if (image.isPhotosphere) {\n            UnlitTexMaterial material = (UnlitTexMaterial) sphere.getMaterial();\n            material.setTexture(image.textureHandle);\n        } else {\n            image.showThumbnail(cardboardView, plane);\n        }\n    }\n```", "```kt\n    public void setVisible(boolean visible) {\n        if(visible) {\n            if(image.isPhotosphere){\n                plane.enabled = false;\n                sphere.enabled = true;\n            } else{\n                plane.enabled = true;\n                sphere.enabled = false;\n            }\n        } else {\n            plane.enabled = false;\n            sphere.enabled = false;\n        }\n    }\n```", "```kt\n                    . . . \n                    image.addComponent(imgPlane);\n\n                    Transform sphere = new Transform();\n                    sphere.setLocalPosition(-4 + j * 2.1f, 3 - i * 3, -5);\n                    sphere.setLocalRotation(180, 0, 0);\n                    sphere.setLocalScale(normalScale, normalScale, normalScale);\n                    Sphere imgSphere = new Sphere(R.drawable.bg, false);\n                    thumb.sphere = imgSphere;\n                    imgSphere.enabled = false;\n                    sphere.addComponent(imgSphere);\n```", "```kt\n    final float selectedScale = 1.25f;\n    final float normalScale = 0.85f;\n```", "```kt\n    void selectObject() {\n        float deltaTime = Time.getDeltaTime();\n        selectedThumbnail = null;\n        for (Thumbnail thumb : thumbnails) {\n            if (thumb.image == null)\n                return;\n            if(thumb.image.isPhotosphere) {\n                Sphere sphere = thumb.sphere;\n                if (sphere.isLooking) {\n                    selectedThumbnail = thumb;\n                    if (!gridUpdateLock)\n                        sphere.transform.setLocalScale(selectedScale, selectedScale, selectedScale);\n                } else {\n                    sphere.transform.setLocalScale(normalScale, normalScale, normalScale);\n                }\n                sphere.transform.rotate(0, 10 * deltaTime, 0);\n            } else {\n                Plane plane = thumb.plane;\n                //...\n            }\n        }\n        //. . .\n```"]