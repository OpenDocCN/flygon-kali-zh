- en: Chapter 6. Building a Web Monitor and Controlling Devices from a Dashboard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。从仪表板构建Web监视器和控制设备
- en: 'In this chapter, we will talk about a very important part of this book, creating
    a web page that can control different kinds of devices from a dashboard. In an
    automated home there are different kinds of devices that could be controlled,
    for example: lamps, doors or windows, washing machines, and so on.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论本书非常重要的一部分，即创建一个可以从仪表板控制不同类型设备的网页。在自动化的家庭中，有不同类型的设备可以被控制，例如：灯、门或窗户、洗衣机等等。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Configuring MySQL database server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置MySQL数据库服务器
- en: Installing phpMyAdmin for administrating databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PhpMyAdmin以管理数据库
- en: Datalogger with MySQL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有MySQL的数据记录器
- en: Dimming a LED
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调光LED
- en: Controlling the speed of a DC motor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制直流电机的速度
- en: Controlling lights with electrical circuits
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用电路控制灯光
- en: Controlling door locks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制门锁
- en: Controlling watering plants
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制浇水的植物
- en: Remote access from anywhere to your Raspberry Pi Zero
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从任何地方远程访问您的Raspberry Pi Zero
- en: Controlling lights and measuring current consumption
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制灯光和测量电流消耗
- en: Controlling and monitoring Arduino, Wi-Fi and Ethernet shields, connected devices,
    and sensors from the Raspberry Pi Zero
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Raspberry Pi Zero控制和监视Arduino、Wi-Fi和以太网shield、连接的设备和传感器
- en: Configuring MySQL database server
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置MySQL数据库服务器
- en: In this section, you will learn how to configure MySQL server in order to create
    a database and integrate everything in your dashboard, for recording data in a
    database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何配置MySQL服务器，以创建数据库并将所有内容集成到您的仪表板中，以记录数据库中的数据。
- en: Installing MySQL
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装MySQL
- en: 'Our Raspberry Pi Zero is being configured like a web server. In this section,
    we will install MySQL database server with the following command, so we can receive
    connections from clients, display data stored in a database, and use queries in
    SQL:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Raspberry Pi Zero正在配置为Web服务器。在本节中，我们将使用以下命令安装MySQL数据库服务器，以便我们可以接收来自客户端的连接，显示存储在数据库中的数据，并在SQL中使用查询：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Installing MySQL](graphics/B05170_06_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![安装MySQL](graphics/B05170_06_01.jpg)'
- en: 'In the middle of the process it will ask you for the password of the `root`
    user:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在过程中它会要求您输入`root`用户的密码：
- en: '![Installing MySQL](graphics/B05170_06_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![安装MySQL](graphics/B05170_06_02.jpg)'
- en: 'After the installation is complete, connect to MySQL and type the following
    command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，连接到MySQL并键入以下命令：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Installing MySQL](graphics/B05170_06_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![安装MySQL](graphics/B05170_06_03.jpg)'
- en: 'Type the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 键入以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Installing MySQL](graphics/B05170_06_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![安装MySQL](graphics/B05170_06_04.jpg)'
- en: 'Here we can see databases of the system that are now installed in the server:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到现在安装在服务器上的系统数据库：
- en: '![Installing MySQL](graphics/B05170_06_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![安装MySQL](graphics/B05170_06_05.jpg)'
- en: Installing MySQL driver for PHP
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为PHP安装MySQL驱动程序
- en: It's important to install our driver to communicate PHP5 with MySQL database
    server, to do that we will need MySQL driver for PHP to access MySQL database,
    execute this command to install `PHP-MySQL` Driver.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是安装我们的驱动程序以使PHP5与MySQL数据库服务器通信，为此我们需要MySQL驱动程序以访问MySQL数据库，执行此命令以安装`PHP-MySQL`驱动程序。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Testing PHP and MySQL
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试PHP和MySQL
- en: 'In this section, we will make a simple page to test PHP and MySQL with the
    following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用以下命令创建一个简单的页面来测试PHP和MySQL：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Testing PHP and MySQL](graphics/B05170_06_06.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![测试PHP和MySQL](graphics/B05170_06_06.jpg)'
- en: 'The following screenshot has the script that has the code to access the database,
    connect to the server, and get the data from it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了包含访问数据库的代码、连接到服务器并从中获取数据的脚本：
- en: '![Testing PHP and MySQL](graphics/B05170_06_07.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![测试PHP和MySQL](graphics/B05170_06_07.jpg)'
- en: 'To test the page and connection between PHP and MySQL, type the IP address
    of your Raspberry Pi: `http://192.168.1.105/hellodb.php` . The page that should
    similar to the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试页面和PHP与MySQL之间的连接，请键入您的Raspberry Pi的IP地址：`http://192.168.1.105/hellodb.php`。页面应该类似于以下屏幕截图：
- en: '![Testing PHP and MySQL](graphics/B05170_06_08.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![测试PHP和MySQL](graphics/B05170_06_08.jpg)'
- en: Installing PhpMyAdmin for administrating databases
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PhpMyAdmin以管理数据库
- en: 'In this section, we will talk about how to configure your PhpMyAdmin to administrate
    your database from a remote panel. It''s important that we install the client
    and the module PHP5 in the Apache server, so type the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何配置您的PhpMyAdmin以从远程面板管理您的数据库。重要的是我们在Apache服务器中安装客户端和模块PHP5，因此键入以下命令：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next we will install the `phpmyadmin` package with the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下命令安装`phpmyadmin`软件包：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the following screenshot, we can see the configuration of the server; in
    this case, we need to select **apache2**:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到服务器的配置；在这种情况下，我们需要选择**apache2**：
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_09.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![为管理数据库安装PhpMyAdmin](graphics/B05170_06_09.jpg)'
- en: 'We choose the apache2 server:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择apache2服务器：
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_10.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![为管理数据库安装PhpMyAdmin](graphics/B05170_06_10.jpg)'
- en: 'After that we can select the database:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之后我们可以选择数据库：
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_11.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![为管理数据库安装PhpMyAdmin](graphics/B05170_06_11.jpg)'
- en: 'We choose the option **<No>**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择**<No>**选项：
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_12.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![为管理数据库安装PhpMyAdmin](graphics/B05170_06_12.jpg)'
- en: Configuring the Apache server
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Apache服务器
- en: 'It''s necessary that we make the configuration of the file  `apache2.conf`.
    First go to the Terminal on your Pi:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对文件`apache2.conf`进行配置。首先转到您的Pi上的终端：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following screen, we need to add the code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，我们需要添加代码：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Configuring the Apache server](graphics/B05170_06_13.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![配置Apache服务器](graphics/B05170_06_13.jpg)'
- en: 'We include the following line in the bottom of the file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在文件底部包含以下行：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Configuring the Apache server](graphics/B05170_06_14.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![配置Apache服务器](graphics/B05170_06_14.jpg)'
- en: We have finally finished installing our Apache server, and we are now ready
    for the next step.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于完成了安装我们的Apache服务器，现在我们已经准备好进行下一步了。
- en: Entering to the phpMyAdmin remote panel
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入phpMyAdmin远程面板
- en: 'After we have configured the server we will enter the phpMyAdmin remote panel,
    we need to open our favorite web browser and type the IP Address of our Raspberry
    Pi: `http://(Raspberry Pi Address)/phpmyadmin`, which will show the following
    screen:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置了服务器之后，我们将进入phpMyAdmin远程面板，我们需要打开我们喜欢的网络浏览器，并输入我们的树莓派的IP地址：`http://(树莓派地址)/phpmyadmin`，这将显示以下屏幕：
- en: '![Entering to the phpMyAdmin remote panel](graphics/B05170_06_15.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![进入phpMyAdmin远程面板](graphics/B05170_06_15.jpg)'
- en: Showing the Arduinobd database
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示Arduinobd数据库
- en: 'The following screenshot shows the database created in the server:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在服务器中创建的数据库：
- en: '![Showing the Arduinobd database](graphics/B05170_06_16.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![显示Arduinobd数据库](graphics/B05170_06_16.jpg)'
- en: 'The following screenshot shows the table **measurements**, columns, **id**,
    **temperature** and **humidity**:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了表**measurements**，列**id**，**temperature**和**humidity**：
- en: '![Showing the Arduinobd database](graphics/B05170_06_17.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![显示Arduinobd数据库](graphics/B05170_06_17.jpg)'
- en: Sending data from Arduino and the Ethernet shield to the web server
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Arduino和以太网盾发送数据到Web服务器
- en: We use an Arduino and the Ethernet Shield connected to the network, Arduino
    sends data to the web server published in the Raspberry Pi Zero.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Arduino和连接到网络的以太网盾，Arduino将数据发送到树莓派Zero上发布的Web服务器。
- en: 'You can now either copy the code inside a file called `arduino_xaamp_mysql.ino`,
    or just get the complete code from the code folder of this book:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将代码复制到名为`arduino_xaamp_mysql.ino`的文件中，或者只需从本书的代码文件夹中获取完整的代码：
- en: 'We enter the Ip address of the Arduino UNO:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入Arduino UNO的IP地址：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We configure the IPAddress of our Raspberry Pi Zero:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置了我们的树莓派Zero的IP地址：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We need to connect to the web server:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要连接到Web服务器：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These lines define the HTTP request from the remote server:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行定义了从远程服务器发出的HTTP请求：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The rest of the code is shown in the following lines:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码显示在以下行中：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Make an HTTP request:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 发出HTTP请求：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Thes lines define how the instance of the client can read the response:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行定义了客户端实例如何读取响应：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the server''s disconnected, stop the client:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器断开连接，停止客户端：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Repeat every second:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 每秒重复一次：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here we can see the hardware that we used:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到我们使用的硬件：
- en: '![Sending data from Arduino and the Ethernet shield to the web server](graphics/B05170_06_18.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![从Arduino和以太网盾发送数据到Web服务器](graphics/B05170_06_18.jpg)'
- en: Datalogger with MySQL
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有MySQL的数据记录器
- en: In the following section, we will build a Datalogger that will record the data
    temperature and humidity in the server so that we can get data whenever we want
    and display it in a web page.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将构建一个数据记录器，它将记录服务器中的温度和湿度数据，以便我们随时可以获取数据并在网页中显示。
- en: Programming the script software
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程脚本软件
- en: In the following code, we have a script that will communicate with the Arduino
    board, and it is installed in the server.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们有一个将与Arduino板通信的脚本，并且它已安装在服务器上。
- en: 'You can now either copy the code inside a file called `datalogger1.php`, or
    just get the complete code from the folder for this project:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将代码复制到名为`datalogger1.php`的文件中，或者只需从本项目的文件夹中获取完整的代码：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Testing the connection
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试连接
- en: 'After we have installed the file of the script, we need to open a web browser
    in your computer and type the IP address of your  `Raspberry Pi/datalogger1.php?temp=70&hum=100`
    , the link will look like as **(http://192.168.1.108/datalogger1.php?temp=70&hum=100)**:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了脚本文件后，我们需要在您的计算机上打开一个网络浏览器，并输入您的树莓派的IP地址 `Raspberry Pi/datalogger1.php?temp=70&hum=100`，链接看起来像
    **(http://192.168.1.108/datalogger1.php?temp=70&hum=100)**：
- en: '![Testing the connection](graphics/B05170_06_19.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![测试连接](graphics/B05170_06_19.jpg)'
- en: 'The following screenshot shows the results of the data saved on the database:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了保存在数据库中的数据的结果：
- en: '![Testing the connection](graphics/B05170_06_20.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![测试连接](graphics/B05170_06_20.jpg)'
- en: 'The following screenshot shows the table of the data:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了数据表格：
- en: '![Testing the connection](graphics/B05170_06_21.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![测试连接](graphics/B05170_06_21.jpg)'
- en: Data queries from the database
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库查询数据
- en: It's important to have data recorded and to make some queries to have the data
    show in the web page.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 记录数据并进行一些查询以在网页中显示数据非常重要。
- en: Software for the scripts
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本软件
- en: 'Here we have the scripts that we used to show the data in the page:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有我们用来在页面中显示数据的脚本：
- en: 'You can now either copy the code inside a file called `query1.php`, or just
    get the complete code from the folder for this project:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将代码复制到名为`query1.php`的文件中，或者只需从本项目的文件夹中获取完整的代码：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the following screenshot we have the data:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们有数据：
- en: '![Software for the scripts](graphics/B05170_06_22.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![脚本软件](graphics/B05170_06_22.jpg)'
- en: Scripts for specific data to be displayed
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定数据的脚本以显示
- en: 'In the following lines we see that we can make some SQL queries to have information
    of specific values and get the values from the temperature and humidity:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几行中，我们可以看到我们可以进行一些SQL查询，以获取特定数值的信息，并从温度和湿度中获取数值：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Query for recording temperature
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询记录温度
- en: 'In this section, we will create a query to get temperature measurements. We
    call the server reference to the `localhost`, in this case it is the Raspberry
    Pi zero device, the user, and the name of the database:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个查询以获取温度测量值。我们将服务器引用称为`localhost`，在本例中是树莓派零设备，用户和数据库的名称：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result of the queries is shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 查询结果显示在以下截图中：
- en: '![Query for recording temperature](graphics/B05170_06_23.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![查询记录温度](graphics/B05170_06_23.jpg)'
- en: Controlling and dimming a LED
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制和调光LED
- en: In this section, we will discuss a project that can be applied to a home automation.
    We will dim an LED of DC, this can done to a lamp in a house. The LED will change
    its brightness, and we connect the LED to the **GPIO18** of the Raspberry Pi in
    series with a resistor of *330* ohms.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一个可以应用于家庭自动化的项目。我们将调暗直流LED，这可以应用于房子里的灯。LED将改变亮度，并且我们将LED连接到树莓派的**GPIO18**，并串联一个*330*欧姆的电阻。
- en: Software requirements
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件要求
- en: 'First we need to install the `pigpio` package. In the Terminal, type the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装`pigpio`包。在终端中，键入以下内容：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then unzip the package:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后解压包：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After that, navigate to the unzipped folder with the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，使用以下内容导航到解压后的文件夹：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Type the following to execute the command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 键入以下内容执行命令：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally install the file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后安装文件：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Testing the LED
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试LED
- en: 'In this section, we will test the sensor with a script in **Node.js**:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用**Node.js**脚本测试传感器：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can already test this code, navigate into the folder of this project with
    a Terminal on the Pi, and type the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以测试这段代码，使用Pi上的终端导航到此项目的文件夹，并键入以下内容：
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will install the required `node.js` module to control the LED. Then, type
    the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装所需的`node.js`模块来控制LED。然后，键入以下内容：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This is the final result:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终结果：
- en: '![Testing the LED](graphics/B05170_06_24.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![测试LED](graphics/B05170_06_24.jpg)'
- en: Controlling the LED from an interface
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从界面控制LED
- en: In this section, we will control the LED from a web page. For which we will
    use HTML to make the interface with the user, using `node.js`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从网页控制LED。为此，我们将使用HTML与用户进行界面交互，使用`node.js`。
- en: 'Let''s take a look at the Node.js files that are included in the following
    code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码中包含的Node.js文件：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It''s now finally time to test our application! First, grab all the code from
    this book''s repository and navigate to the folder of the project like before.
    Then, install `express` with the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在终于是时候测试我们的应用程序了！首先，从本书的存储库中获取所有代码，并像以前一样导航到项目的文件夹。然后，使用以下命令安装`express`：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When this is done, start the server with the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，使用以下命令启动服务器：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can now test the project, open the web browser in your computer, and type
    the link - `http://(Raspberry PI)/set?dutyCycle=20`, and we can see that the LED
    changes with the value.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以测试项目，打开计算机上的网络浏览器，并输入链接- `http://（树莓派PI）/set?dutyCycle=20`，我们可以看到LED随数值变化。
- en: 'Then open your web browser with `http://192.168.1.108:3000` and you should
    see the control in a basic web page:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后用`http://192.168.1.108:3000`打开您的网络浏览器，您应该在一个基本的网页上看到控制：
- en: '![Controlling the LED from an interface](graphics/B05170_06_25.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![从界面控制LED](graphics/B05170_06_25.jpg)'
- en: Controlling the speed of a DC motor
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制直流电机的速度
- en: It's common to have a window or a garage door in a house. We need to automate
    these kinds of devices, so that we can move these objects with a DC motor. In
    this section, we will see how to connect a DC motor to the Raspberry Pi. To do
    this, we will use a L293D circuit to control the motor.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在房子里通常会有窗户或车库门。我们需要自动化这些类型的设备，以便我们可以使用直流电机移动这些物体。在本节中，我们将看到如何将直流电机连接到树莓派。为此，我们将使用L293D电路来控制电机。
- en: 'First we will see how to connect the motor to our Raspberry Pi Zero board.
    In the following diagram, we can see the pins out of the LD293 chip:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看到如何将电机连接到我们的树莓派Zero板上。在下图中，我们可以看到LD293芯片的引脚：
- en: '![Controlling the speed of a DC motor](graphics/B05170_06_26.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![控制直流电机的速度](graphics/B05170_06_26.jpg)'
- en: 'We basically need to connect the components of the circuit, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们需要连接电路的组件，如下所示：
- en: '**GPIO14** of the Raspberry Pi to pin **1A**'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的**GPIO14**连接到引脚**1A**
- en: '**GPIO15** of the Raspberry Pi to pin **2A**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的**GPIO15**连接到引脚**2A**
- en: '**GPIO18** of the Raspberry Pi to pin **1**, **2EN**'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的**GPIO18**连接到引脚**1**，**2EN**
- en: '**DC** motor to pin **1Y** and **2Y**'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DC**电机连接到引脚**1Y**和**2Y**'
- en: '**5V** of the Raspberry Pi to **VCC1**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的**5V**连接到**VCC1**
- en: '**GND** of the Raspberry Pi to **GND**'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的**GND**连接到**GND**
- en: Adapter regulator to **VCC2** and **GND**
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适配器调节器连接到**VCC2**和**GND**
- en: 'The following image shows the results:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了结果：
- en: '![Controlling the speed of a DC motor](graphics/B05170_06_27.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![控制直流电机的速度](graphics/B05170_06_27.jpg)'
- en: 'We will now test the speed of the DC motor from 0 to the highest speed:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将测试直流电机的速度从0到最高速度：
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here we have the code for this application to control the DC motor using the
    interface in a web page:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有这个应用程序的代码，可以使用网页界面来控制直流电机：
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We see the interface of the user in the following code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在以下代码中看到用户界面：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To test the application, you need to open the web browser in your computer
    with the link, `http://192.168.1.108:3000`, and then you need to replace the IP
    Address of your Pi. Here we have the interface for this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，您需要在计算机上打开网络浏览器，链接为`http://192.168.1.108:3000`，然后您需要替换您的Pi的IP地址。这是我们的界面：
- en: '![Controlling the speed of a DC motor](graphics/B05170_06_28.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![控制直流电机的速度](graphics/B05170_06_28.jpg)'
- en: Controlling Lights with electrical circuits
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用电气电路控制灯
- en: In the following sections, you will find ideas on how to dive into more projects
    that control other devices in the house.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将找到更多控制房屋其他设备的项目想法。
- en: Electrical appliances
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电器设备
- en: 'In houses we have electrical appliances, for example, lamps, washing machines,
    heaters, and other appliances that we only need to turn on or off. In this section,
    we will learn how to control a lamp connected to the Raspberry Pi Zero, using
    electrical circuits for interfacing the signal. We will use an **optocoupler**
    such as MOC3011, and a **Triac.** The following figure shows the circuit of the
    application:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在房子里，我们有电器设备，例如灯，洗衣机，加热器和其他我们只需要打开或关闭的设备。在本节中，我们将学习如何使用电气电路来控制连接到树莓派Zero的灯，以及如何使用光耦合器（如MOC3011）和三角形。以下图显示了应用程序的电路：
- en: '![Electrical appliances](graphics/B05170_06_29.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![电器设备](graphics/B05170_06_29.jpg)'
- en: 'Here we have the final project connected to the Raspberry pi Zero:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有连接到Raspberry Pi Zero的最终项目：
- en: '![Electrical appliances](graphics/B05170_06_30.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![电器设备](graphics/B05170_06_30.jpg)'
- en: 'Here we have the JavaScript code for controlling the device:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有用于控制设备的JavaScript代码：
- en: '[PRE37]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We need an interface that can control the lamp from the web page in the HTML
    language:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个可以通过HTML语言的网页控制灯的界面：
- en: '[PRE38]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After entering the web browser, we will see the following interface:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 进入网络浏览器后，我们将看到以下界面：
- en: '![Electrical appliances](graphics/B05170_06_31.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![电器设备](graphics/B05170_06_31.jpg)'
- en: Other appliances
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他家用电器
- en: In this section, we will show other applications that you can consider creating
    and controlling, and then use them in the home or different areas.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将展示其他应用程序，您可以考虑创建和控制，然后在家里或不同的区域使用它们。
- en: Control a door lock
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制门锁
- en: 'In this section, we will see other appliances that can be controlled from an
    interface and connected to the Raspberry pi. In the house we can control a door
    lock from a web interface:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到其他可以从界面控制并连接到Raspberry Pi的家用电器。在家里，我们可以通过Web界面控制门锁：
- en: '![Control a door lock](graphics/B05170_06_32.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![控制门锁](graphics/B05170_06_32.jpg)'
- en: Control watering plants
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制浇水设备
- en: 'Another appliance that we can control is watering plants with a Plastic Water
    Solenoid Valve - 12V, connected to the Raspberry Pi:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以控制的另一个家用电器是连接到Raspberry Pi的塑料水电磁阀-12V的浇水设备：
- en: '![Control watering plants](graphics/B05170_06_33.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![控制浇水设备](graphics/B05170_06_33.jpg)'
- en: With this project we can make an automated watering system, add a humidity sensor,
    and program the time that the plants of the garden will be watered.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个项目，我们可以制作一个自动浇水系统，添加一个湿度传感器，并设置花园植物的浇水时间。
- en: Remote access from anywhere to your Raspberry Pi Zero
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从任何地方远程访问您的Raspberry Pi Zero
- en: 'If we want access to our Raspberry Pi from outside our network, we need to
    do the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从网络外部访问我们的Raspberry Pi，我们需要执行以下操作：
- en: Check if our modem has a public IP address
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查我们的调制解调器是否有公共IP地址
- en: Investigate the address that we'll be using in our browser
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查我们将在浏览器中使用的地址
- en: Type [http://whatismyipaddress.com/](http://whatismyipaddress.com/) in our browser![Remote
    access from anywhere to your Raspberry Pi Zero](graphics/B05170_06_34.jpg)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的浏览器中输入[http://whatismyipaddress.com/](http://whatismyipaddress.com/)![从任何地方远程访问您的Raspberry
    Pi Zero](graphics/B05170_06_34.jpg)
- en: IP provided by the ISP are genteraly dynamic IP which changes after some time.
    In our cases we need to have static addresses which does not change occasionally.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: ISP提供的IP通常是动态IP，会随时间变化。在我们的情况下，我们需要具有不时更改的静态地址。
- en: How to access our modem to configure it
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问我们的调制解调器进行配置
- en: Access our modem via the Ip address (gateway) and go to the port addressing
    part. Configure port *80* that points to our web server (put the IP address of
    our account), this IP address is the one that automatically assigns the DHCP server
    of our system.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 通过IP地址（网关）访问我们的调制解调器，并转到端口寻址部分。配置指向我们的Web服务器的端口*80*（输入我们帐户的IP地址），此IP地址是我们系统的DHCP服务器自动分配的IP地址。
- en: 'Here we have some ports that can be forwarded from the modem-router:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可以从调制解调器-路由器转发的端口：
- en: '![How to access our modem to configure it](graphics/B05170_06_35.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![如何访问我们的调制解调器进行配置](graphics/B05170_06_35.jpg)'
- en: 'To get the gateway IP address, type the `ipconfig` command, you need to have
    admin rights. After this, type `http://gatewayip_addres` in the web browser of
    your `router.1`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取网关IP地址，请输入`ipconfig`命令，您需要具有管理员权限。之后，在您的`router.1`的网络浏览器中输入`http://gatewayip_addres`：
- en: '![How to access our modem to configure it](graphics/B05170_06_36.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![如何访问我们的调制解调器进行配置](graphics/B05170_06_36.jpg)'
- en: 'This is an example of what you''d see if you had a Linksys router, yours may
    be a different interface:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在Linksys路由器上看到的示例，您的界面可能不同：
- en: '![How to access our modem to configure it](graphics/B05170_06_37.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![如何访问我们的调制解调器进行配置](graphics/B05170_06_37.jpg)'
- en: 'To open a port we need to configure our router to give permissions for entering
    from outside, so we need to give permission in our router:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开一个端口，我们需要配置我们的路由器以允许从外部进入，因此我们需要在我们的路由器中给予权限：
- en: '![How to access our modem to configure it](graphics/B05170_06_38.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![如何访问我们的调制解调器进行配置](graphics/B05170_06_38.jpg)'
- en: 'This screenshot shows the final results, how to open a port number 3000, and
    the name of the application node:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕截图显示了最终结果，如何打开端口号3000，以及应用程序节点的名称：
- en: '![How to access our modem to configure it](graphics/B05170_06_39_Updated.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![如何访问我们的调制解调器进行配置](graphics/B05170_06_39_Updated.jpg)'
- en: Configuring Dynamic DNS
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置动态DNS
- en: We need to configure a domain name service so we can access our web server by
    typing the name of our domain (it is very difficult to learn the IP addresses
    of the web pages). That's why **Domain Name Servers (DNS)** were created. Follow
    the next section to create a domain.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要配置域名服务，这样我们就可以通过输入我们域名的名称来访问我们的Web服务器（学习网页的IP地址非常困难）。这就是为什么创建了**域名服务器（DNS)**。请按照下一节创建域名。
- en: You may want to access your IoT control panels away from home. In that case,
    your web server will need to become a host on the Internet.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望从家外访问您的物联网控制面板。在这种情况下，您的Web服务器将需要成为互联网上的主机。
- en: This is not a straightforward thing since it's behind the router in your home.
    Your ISP generally does not give you a static public IP address because most users
    are simply accessing the web, not serving web pages.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一件简单的事情，因为它在您家中的路由器后面。您的ISP通常不会给您一个静态的公共IP地址，因为大多数用户只是访问网络，而不是提供网页服务。
- en: Therefore, the public side of your router is given an IP address that can change
    from time to time. If you browse to `<whatsmyip...>`, you will see what your public
    IP is currently.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您的路由器的公共一侧会被分配一个可能会不时更改的IP地址。如果您浏览`<whatsmyip...>`，您将看到您当前的公共IP是什么。
- en: Tomorrow it could be different. For setting up external access, you can do one
    of two things. If you want to simulate having a static IP, you can use a service
    such as Dynamic DNS. If you just want to "try out" external access, you can open
    a port on your router
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 明天可能会不同。要设置外部访问，您可以选择以下两种方法之一。如果您想模拟具有静态IP，可以使用动态DNS等服务。如果您只是想“尝试”外部访问，可以在路由器上打开一个端口
- en: 'Benefits of having Dynamic DNS:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 动态DNS的好处：
- en: One solution is to install a client that will allow the public IP to make it
    fixed. The client function (software that is installed on a computer), maintains
    communication with the site [www.no-ip.org](http://www.no-ip.com).
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种解决方案是安装一个客户端，允许公共IP固定。客户端功能（安装在计算机上的软件）与网站[www.no-ip.org](http://www.no-ip.com)保持通信。
- en: When the IP address of our modem changes, the client takes that IP change.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们的调制解调器的IP地址发生变化时，客户端会接受该IP变化。
- en: 'This allows our domain name to always point to our public IP address. The software
    that is installed is called: No-IP DUC.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样我们的域名就可以始终指向我们的公共IP地址。安装的软件称为：No-IP DUC。
- en: Creating an account at No-ip.org
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在No-ip.org创建一个账户
- en: 'In the following screenshot we can see the Enhance dynamic DNS setting up:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到增强动态DNS设置：
- en: '![Creating an account at No-ip.org](graphics/B05170_06_40.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![在No-ip.org创建一个账户](graphics/B05170_06_40.jpg)'
- en: Controlling lights and measuring current consumption
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制灯光和测量电流消耗
- en: 'Now in this section we will explain how to control and monitor your current
    consumption when the light is on or off. Using your Arduino Wi-Fi shield from
    a web page, we will monitor this variable. When the light is off it looks as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在本节中，我们将解释如何在灯开启或关闭时控制和监控您的电流消耗。通过Web页面使用您的Arduino Wi-Fi shield，我们将监控此变量。当灯关闭时，它看起来如下：
- en: '![Controlling lights and measuring current consumption](graphics/B05170_06_41.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![控制灯光和测量电流消耗](graphics/B05170_06_41.jpg)'
- en: 'When the light is on it looks as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当灯开启时，它看起来如下：
- en: '![Controlling lights and measuring current consumption](graphics/B05170_06_42.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![控制灯光和测量电流消耗](graphics/B05170_06_42.jpg)'
- en: You can now either copy the code inside a file called `Controlling_lights_Current_Consumption.ino`,
    or just get the complete code from the folder of this book.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将代码复制到名为`Controlling_lights_Current_Consumption.ino`的文件中，或者只需从本书的文件夹中获取完整的代码。
- en: 'Define variables and functions to monitor and control:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 定义监控和控制的变量和函数：
- en: '[PRE39]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Import libraries to use:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 导入库以使用：
- en: '[PRE40]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Configure the relay to activate:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 配置继电器以激活：
- en: '[PRE41]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Variables to calculate the current:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 计算电流的变量：
- en: '[PRE42]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We define the pins for configuring the module:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义用于配置模块的引脚：
- en: '[PRE43]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We create the instance:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建实例：
- en: '[PRE44]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We define the SSID and the password of your network:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义您网络的SSID和密码：
- en: '[PRE45]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We configure the port of the server:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置服务器的端口：
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Instance of the server:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的实例：
- en: '[PRE47]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Variables that are used:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的变量：
- en: '[PRE48]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Publish the variables that are used:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 发布使用的变量：
- en: '[PRE49]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Set the relay pin that is the output:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 设置继电器引脚为输出：
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Calibrate the current sensor:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 校准电流传感器：
- en: '[PRE51]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We declare the id and the name of the device:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明设备的id和名称：
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In this part, we check if the device is connected:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们检查设备是否已连接：
- en: '[PRE53]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In this part, we define the request for communication:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们定义了通信请求：
- en: '[PRE54]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Lets''s start the server:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动服务器：
- en: '[PRE55]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We read the sensors:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取传感器：
- en: '[PRE56]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We make the calculus of the current and acquire the signals:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行电流计算并获取信号：
- en: '[PRE57]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We define incoming requests:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义传入请求：
- en: '[PRE58]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We display the IP Address configuration:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显示IP地址配置：
- en: '[PRE59]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Function of the current sensor that calculates the average of certain measurements
    and returns the current calculus:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 电流传感器的功能，计算特定测量的平均值并返回电流计算：
- en: '[PRE60]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Building the interface to control and monitor
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建控制和监控界面
- en: 'Here we have the code for displaying the interface that controls the lights
    and monitoring the current with the sensor:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有用于显示控制灯光和监控传感器电流的界面的代码：
- en: Installing Jade for Node.js
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为Node.js安装Jade
- en: 'It''s important to configure the Jade interface applied in this project. To
    do that we just type the following command:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中使用Jade界面很重要。为此，我们只需输入以下命令：
- en: '[PRE61]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'If it''s necessary, we type the following command in case your system requires
    that update:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们可以在系统需要更新时输入以下命令：
- en: '[PRE62]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Interface for controlling and monitoring
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于控制和监控的界面
- en: 'First, we define the header of the page and add the HTML tag:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义页面的标题并添加HTML标签：
- en: '[PRE63]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We define the links for the functions for jQuery and Bootstrap:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为jQuery和Bootstrap的功能定义链接：
- en: '[PRE64]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We display the buttons to control in the web page:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在网页上显示控制按钮：
- en: '[PRE65]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Display the power and light level:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 显示功率和光照水平：
- en: '[PRE66]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now we will run the application, as we can see in the following screenshot.
    The server is open on port 3000, when it starts to send the request to the board,
    type the address on your web browser: `http://localhost:3000`. It shows the web
    page with both buttons and the device is connected and is online:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将运行应用程序，如下截图所示。服务器在端口3000上打开，当它开始向板发送请求时，在Web浏览器中键入地址：`http://localhost:3000`。它显示了带有两个按钮的网页，设备已连接并在线：
- en: '![Interface for controlling and monitoring](graphics/B05170_06_43.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![用于控制和监控的界面](graphics/B05170_06_43.jpg)'
- en: 'Click on the blue **On** button to activate the light on the board, after some
    seconds we can see that the power increases:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 单击蓝色**开**按钮以激活板上的灯，几秒钟后我们可以看到功率增加：
- en: '![Interface for controlling and monitoring](graphics/B05170_06_44.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![用于控制和监控的界面](graphics/B05170_06_44.jpg)'
- en: 'Click on the red **Off** button, after some seconds the power goes down until
    *0 W*, this means that everything is working perfectly well:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 单击红色**关**按钮，几秒钟后功率下降直到*0 W*，这意味着一切都运行正常：
- en: '![Interface for controlling and monitoring](graphics/B05170_06_45.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![用于控制和监控的界面](graphics/B05170_06_45.jpg)'
- en: Controlling and monitoring Arduino, Wi-Fi, and Ethernet shields on connected
    devices and sensors
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在连接设备和传感器上控制和监控Arduino、Wi-Fi和以太网shield
- en: In previous sections, we saw how to control and monitor our Arduino boards from
    a web page using `node.js` running on a computer in Windows. In this section,
    we will use our fantastic Raspberry Pi Zero with Node.js installed on it and run
    the JavaScript application inside the board.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中，我们看到如何使用在Windows计算机上运行的`node.js`从网页控制和监视我们的Arduino板。在本节中，我们将使用我们神奇的树莓派Zero，在其上安装了Node.js，并在板上运行JavaScript应用程序。
- en: I have seen the potential of the board instead of using a personal computer
    installed as a web server, with this experience making this projects I want tell
    that the application is more efficient using our Raspberry Pi Zero running on
    it.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经看到了使用树莓派Zero而不是使用个人计算机安装为Web服务器的潜力，通过这种经验制作这些项目，我想说应用程序在树莓派Zero上运行更有效。
- en: 'We will see how to control more than one device in a single dashboard using
    different devices, such as the following:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何在单个仪表板中使用不同设备控制多个设备，例如以下设备：
- en: Wi-Fi shield
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi盾
- en: ESP8266 module
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESP8266模块
- en: Ethernet shield
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网盾
- en: Building the code to control and monitor devices from a single interface
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建控制和监视设备的代码，从单一界面进行监控
- en: You can now either copy the code inside a file called `app.js`, or just get
    the complete code from the folder for this project.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以将代码复制到名为`app.js`的文件中，或者只需从此项目的文件夹中获取完整的代码。
- en: 'Configure the outputs of the devices connected in the system:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 配置系统中连接的设备的输出：
- en: '[PRE67]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Start the function to control:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 启动控制功能：
- en: '[PRE68]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: We make the `GET` request with the `aREST` API for `ON:`
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`aREST` API进行`ON`的`GET`请求：
- en: '[PRE69]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: We make the `GET` request with the `ARESt` API for `OFF:`
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ARESt` API进行`OFF`的`GET`请求：
- en: '[PRE70]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: We make the same thing for the ESP8266 connected device `ON:`
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对连接的ESP8266设备进行相同的操作`ON`：
- en: '[PRE71]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: We make the same thing for the ESP8266 connected device `OFF:`
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对连接的ESP8266设备进行相同的操作`OFF`：
- en: '[PRE72]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Get the data from the sensors temperature and humidity:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 从传感器温度和湿度获取数据：
- en: '[PRE73]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'This code refresh the page every 10000 sec:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码每10000秒刷新页面一次：
- en: '[PRE74]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Adding the devices to monitor and control
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加要监视和控制的设备
- en: I can see that the system is very stable; we need to add the devices that will
    be monitored from the Raspberry Pi Zero with the following application in JavaScript
    snippet.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以看到系统非常稳定；我们需要添加将从树莓派Zero监视的设备，使用以下JavaScript片段中的应用程序。
- en: 'We create the express module and the necessary libraries:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建express模块和必要的库：
- en: '[PRE75]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'We define the port that will be opened:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义将要打开的端口：
- en: '[PRE76]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'We configure the Jade engine for the HTML web page:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为HTML网页配置Jade引擎：
- en: '[PRE77]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We make the public directory to access on it:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建公共目录以便访问：
- en: '[PRE78]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Interface for the server instructions to be executed:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 执行服务器指令的界面：
- en: '[PRE79]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'We declare the arrest file with the rest request:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用rest请求声明逮捕文件：
- en: '[PRE80]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'This code defines the devices that will be controlled and monitored, we can
    add the ones that we want:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码定义将被控制和监视的设备，我们可以添加想要的设备：
- en: '[PRE81]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'We set up the server on port 3000 and listen to the web browser clients:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在端口3000上设置服务器并监听Web浏览器客户端：
- en: '[PRE82]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'If everything is perfectly configured, we test the application by typing the
    following command:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都配置完美，我们通过输入以下命令来测试应用程序：
- en: '[PRE83]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: This installs the Jade platform and recognizes the `aREST` API from Raspberry
    Pi Zero.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Jade平台并识别来自树莓派Zero的`aREST` API。
- en: 'If something is necessary to update, type the following command:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要更新某些内容，请输入以下命令：
- en: '[PRE84]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'To update the `arrest express`, type the following command:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新`arrest express`，请输入以下命令：
- en: '[PRE85]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'It''s very important to install this package to include the arrest API:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 安装此软件包非常重要，以包括逮捕API：
- en: '[PRE86]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'To run the application, go to the folder where the application is and type
    the following command:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，请转到应用程序所在的文件夹，并输入以下命令：
- en: '[PRE87]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'In the following screenshot, we see that the server is opening port 3000:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们看到服务器正在打开端口3000：
- en: '![Adding the devices to monitor and control](graphics/B05170_06_46.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![添加要监视和控制的设备](graphics/B05170_06_46.jpg)'
- en: 'For the final test, we need to type the IP address of the Raspberry Pi that
    it has in that moment into your favorite web browser: `http://IP_Address_of_Raspberry_Pi_Zero/port`.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的测试中，我们需要在您喜欢的网络浏览器中输入树莓派此刻的IP地址：`http://IP_Address_of_Raspberry_Pi_Zero/port`。
- en: 'In the following screenshot, we can see the control and monitor data dashboard
    from the Raspberry Pi Zero, published on different devices on a single web page,
    that''s something interesting to do, such that a remote system and control panel:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到来自树莓派Zero的控制和监视数据仪表板，发布在单个网页上的不同设备上，这是一件有趣的事情，可以远程系统和控制面板：
- en: '![Adding the devices to monitor and control](graphics/B05170_06_47.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![添加要监视和控制的设备](graphics/B05170_06_47.jpg)'
- en: Finally, we finish by showing the control and monitor system, using different
    devices in a single data dashboard; we conclude that we can have more than one
    device in a web page for the Internet of Things.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过在单个数据仪表板中使用不同设备来展示控制和监视系统；我们得出结论，物联网可以在一个网页中拥有多个设备。
- en: Summary
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to integrate and build a dashboard for monitoring
    and controlling using Raspberry Pi Zero with Arduino and the technologies seen
    in previous chapters. This chapter gave to you the basics and the necessary tools
    that can help you to create your own system of Internet of Things for different
    applications and areas that can be developed for these kinds of systems by applying
    all the tools, web server, database server, devices connected, and setting up
    your router to control your Raspberry Pi from anywhere in the world.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用树莓派Zero与Arduino和之前章节中介绍的技术集成和构建监控仪表板。本章为您提供了基础知识和必要工具，可以帮助您创建自己的物联网系统，用于不同应用和领域，通过应用所有工具、Web服务器、数据库服务器、连接的设备，并设置路由器来控制您的树莓派，从世界各地的任何地方。
- en: In the next chapter, you will build very nice devices for the Internet of Things;
    you will learn how to make different mini home domotics projects.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将为物联网构建非常好的设备；您将学习如何制作不同的迷你家庭自动化项目。
