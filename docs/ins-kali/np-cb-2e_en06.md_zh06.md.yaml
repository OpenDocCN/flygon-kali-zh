- en: Chapter 6. Special Arrays and Universal Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：特殊数组和通用函数
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下秘籍：
- en: Creating a universal function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建通用函数
- en: Finding Pythagorean triples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找勾股三元组
- en: Performing string operations with `chararray`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`chararray`执行字符串操作
- en: Creating a masked array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个遮罩数组
- en: Ignoring negative and extreme values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略负值和极值
- en: Creating a scores table with a `recarray` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`recarray`函数创建一个得分表
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is about special arrays and universal functions. These are topics
    that you may not encounter every day, but they are still important enough to mention
    here. **Universal functions (Ufuncs)** work on arrays element by element, or on
    scalars. Ufuncs accept a set of scalars as the input and produce a set of scalars
    as the output. Universal functions can typically be mapped onto their mathematical
    counterparts such as addition, subtraction, division, multiplication, and so on.
    The special arrays mentioned here are all subclasses of the basic NumPy array
    object, and offer additional functionality.
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于特殊数组和通用函数的。 这些是您每天可能不会遇到的主题，但是它们仍然很重要，因此在此需要提及。**通用函数（Ufuncs）**逐个元素或标量地作用于数组。
    通用函数接受一组标量作为输入，并产生一组标量作为输出。 通用函数通常可以映射到它们的数学对等物上，例如加法，减法，除法，乘法等。 这里提到的特殊数组是基本
    NumPy 数组对象的所有子类，并提供其他功能。
- en: Creating a universal function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建通用函数
- en: We can create a universal function from a Python function with the `frompyfunc()`
    NumPy function.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`frompyfunc()` NumPy 函数从 Python 函数创建通用函数。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The following steps help us create a universal function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤可帮助我们创建通用函数：
- en: 'Define a simple Python function that doubles the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个简单的 Python 函数以使输入加倍：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the universal function with `frompyfunc()`. Specify the number of input
    arguments and the number of objects (both are equal to `1`) returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`frompyfunc()`创建通用函数。 指定输入参数的数目和返回的对象数目（均等于`1`）：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The code prints the following output when executed:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码在执行时输出以下输出：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We defined a Python function that doubles the numbers it receives. Actually,
    we can also have strings as the input, as that is legal in Python. We created
    a universal function from this Python function with the `frompyfunc()` NumPy function.
    A universal function is a NumPy class with special features such as broadcasting
    and element-by-element processing as applicable to NumPy arrays. Many NumPy functions
    are, in fact, universal functions, but were written in C.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个 Python 函数，该函数会将接收到的数字加倍。 实际上，我们也可以将字符串作为输入，因为这在 Python 中是合法的。 我们使用`frompyfunc()`
    NumPy 函数从此 Python 函数创建了一个通用函数。 通用函数是 NumPy 类，具有特殊功能，例如广播和适用于 NumPy 数组的逐元素处理。 实际上，许多
    NumPy 函数都是通用函数，但是都是用 C 编写的。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation of the `frompyfunc()` NumPy function is at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.frompyfunc.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.frompyfunc.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frompyfunc()` NumPy 函数的文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.frompyfunc.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.frompyfunc.html)'
- en: Finding Pythagorean triples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找勾股三元组
- en: For this tutorial, you may need to read the Wikipedia page about **Pythagorean
    triple** ([http://en.wikipedia.org/wiki/Pythagorean_triple](http://en.wikipedia.org/wiki/Pythagorean_triple)).
    A Pythagorean triple is a set of three natural numbers, a < b < c, for which ![Finding
    Pythagorean triples](img/0945OS_06_04.jpg).
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，您可能需要阅读有关**勾股三元组**的维基百科页面（[`en.wikipedia.org/wiki/Pythagorean_triple`](http://en.wikipedia.org/wiki/Pythagorean_triple)）。
    勾股三元组是一组三个自然数，即`a < b < c`，为此，![查找勾股三元组](img/0945OS_06_04.jpg)。
- en: 'Here is an example of Pythagorean triples: ![Finding Pythagorean triples](img/0945OS_06_05.jpg).'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是勾股三元组的示例：![查找勾股三元组](img/0945OS_06_05.jpg)。
- en: Pythagorean triples are closely related to the **Pythagorean Theorem**, which
    you have probably learned in high-school geometry.
  prefs: []
  type: TYPE_NORMAL
  zh: 勾股三元组与**勾股定理**密切相关，您可能在中学几何学过的。
- en: 'Pythagorean triples represent the three sides of a right triangle and therefore
    obey the Pythagorean Theorem. Let''s find the Pythagorean triple that has a components
    sum of 1,000\. We will do this using Euclid''s formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 勾股三元组代表直角三角形的三个边，因此遵循勾股定理。 让我们找到一个分量总数为 1,000 的勾股三元组。 我们将使用欧几里得公式进行此操作：
- en: '![Finding Pythagorean triples](img/0945OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![查找勾股三元组](img/0945OS_06_01.jpg)'
- en: In this example, we will see universal functions in action.
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将看到通用函数的运行。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: Euclid's formula defines the `m` and `n` indices.
  prefs: []
  type: TYPE_NORMAL
  zh: 欧几里得公式定义了`m`和`n`索引。
- en: 'Create arrays to hold these indices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下索引的数组：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The second step is to calculate the numbers `a`, `b`, and `c` of the Pythagorean
    triples using Euclid''s formula. Use the `outer()` function to get the Cartesian
    products, difference, and sums:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是使用欧几里得公式计算勾股三元组的数量`a`，`b`和`c`。 使用`outer()`函数获得笛卡尔积，差和和：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we have a number of arrays containing `a`, `b`, and `c` values. However,
    we still need to find the values that conform to the problem''s condition. Find
    the index of those values with the `where()` NumPy function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有许多包含`a`，`b`和`c`值的数组。 但是，我们仍然需要找到符合问题条件的值。 使用`where()` NumPy 函数查找这些值的索引：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check the solution with the `numpy.testing` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`numpy.testing`模块检查解决方案：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code is from the `triplets.py` file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码来自本书代码包中的`triplets.py`文件：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: Universal functions are not real functions, but objects representing functions.
    Ufuncs have the `outer()` method, which we saw in action. Many of NumPy's standard
    universal functions are implemented in C, and are therefore faster than regular
    Python code. Ufuncs support element-by-element processing and type casting, which
    means fewer loops.
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数不是真实函数，而是表示函数的对象。 通用函数具有`outer()`方法，我们已经在实践中看到它。 NumPy 的许多标准通用函数都是用 C 实现的  ，因此比常规的
    Python 代码要快。 通用函数支持逐元素处理和类型转换，这意味着更少的循环。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for the `outer()` universal function at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.outer.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.outer.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outer()`通用函数的文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.outer.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.outer.html)'
- en: Performing string operations with chararray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`chararray`执行字符串操作
- en: 'NumPy has a specialized `chararray` object that holds strings. It is a subclass
    of `ndarray` and has special string methods. We will download text from the Python
    website and use those methods. The advantages of `chararray` over a normal array
    of strings are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 具有保存字符串的专用`chararray`对象。 它是`ndarray`的子类，并具有特殊的字符串方法。 我们将从 Python 网站下载文本并使用这些方法。
    `chararray`相对于普通字符串数组的优点如下：
- en: Whitespace of array elements is automatically trimmed on indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引时会自动修剪数组元素的空白
- en: Whitespace at the ends of strings is also trimmed by comparison operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串末尾的空格也被比较运算符修剪
- en: Vectorized string operations are available, so loops are not needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量化字符串操作可用，因此不需要循环
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s create the character array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建字符数组：
- en: 'Create the character array as a view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建字符数组作为视图：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Expand tabs to spaces with the `expandtabs()` function. This function accepts
    the tab size as an argument. The value is `8` if not specified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`expandtabs()`函数将制表符扩展到空格。 此函数接受制表符大小作为参数。 如果未指定，则值为`8`：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Split lines with the `splitlines()` function into separate lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`splitlines()`函数将行分割成几行：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the complete code for this example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此示例的完整代码：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We saw the specialized `chararray` class in action. It offers several vectorized
    string operations and convenient behavior regarding whitespace.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了专门的`chararray`类在起作用。 它提供了一些向量化的字符串操作以及有关空格的便捷行为。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for the specialized `chararray` class is at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.chararray.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.chararray.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chararray`类的文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.chararray.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.chararray.html)'
- en: Creating a masked array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建遮罩数组
- en: '**Masked arrays** can be used to ignore missing or invalid data items. A `MaskedArray`
    class from the `numpy.ma` module is a subclass of `ndarray`, with a mask. We will
    use the Lena Söderberg image as the data source and pretend that some of this
    data is corrupt. Finally, we will plot the original image, log values of the original
    image, the masked array, and log values thereof.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**遮罩数组**可用于忽略丢失或无效的数据项。 `numpy.ma`模块中的`MaskedArray`类是`ndarray`的子类，带有遮罩。 我们将使用
    Lena 图像作为数据源，并假装其中一些数据已损坏。 最后，我们将绘制原始图像，原始图像的对数值，遮罩数组及其对数值。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s create the masked array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建被屏蔽的数组：
- en: 'To create a masked array, we need to specify a mask. Create a random mask with
    values that are either `0` or `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个遮罩数组，我们需要指定一个遮罩。 创建一个随机遮罩，其值为`0`或`1`：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Using the mask from the previous step, create a masked array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上一步中的遮罩，创建一个遮罩数组：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the complete code for this masked array tutorial:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此遮罩数组教程的完整代码：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is a screenshot that shows the resulting images:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示结果图像的屏幕截图：
- en: '![How to do it...](img/0945OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945OS_06_02.jpg)'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We applied a random mask to NumPy arrays. This had the effect of ignoring the
    data that corresponds to the mask. You can find a range of masked array operations
    in the `numpy.ma` module. In this tutorial, we only demonstrated how to create
    a masked array.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 NumPy 数组应用了随机的遮罩。 这具有忽略对应于遮罩的数据的效果。 您可以在`numpy.ma` 模块中找到一系列遮罩数组操作  。 在本教程中，我们仅演示了如何创建遮罩数组。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for the `numpy.ma` module is at [http://docs.scipy.org/doc/numpy/reference/maskedarray.html](http://docs.scipy.org/doc/numpy/reference/maskedarray.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.ma`模块的文档位于[`docs.scipy.org/doc/numpy/reference/maskedarray.html`](http://docs.scipy.org/doc/numpy/reference/maskedarray.html)'
- en: Ignoring negative and extreme values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽略负值和极值
- en: Masked arrays are useful when we want to ignore negative values, for instance,
    when taking the logarithm of array values. Another use case for masked arrays
    is excluding extreme values. This works based on upper and lower bounds for extreme
    values.
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想忽略负值时，例如当取数组值的对数时，屏蔽的数组很有用。 遮罩数组的另一个用例是排除极值。 这基于极限值的上限和下限。
- en: We will apply these techniques to stock price data. We will skip the steps for
    downloading data, as they were already covered in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这些技术应用于股票价格数据。 我们将跳过前面几章已经介绍的下载数据的步骤。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will take the logarithm of an array that contains negative numbers:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用包含负数的数组的对数：
- en: 'Create an array containing numbers divisible by three:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数组，该数组包含可被三除的数字：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, create an array with the ones that have the same size as the price data
    array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用与价格数据数组大小相同的数组创建一个数组：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Set every third number to be negative, with the help of the indexing tricks
    you learned in [Chapter 2](ch02.xhtml "Chapter 2. Advanced Indexing and Array
    Concepts"), *Advanced Indexing and Array Concepts*.
  prefs: []
  type: TYPE_NORMAL
  zh: 借助您在第二章，“高级索引和数组概念”中学习的索引技巧，将每个第三个数字设置为负数。
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, take the logarithm of this array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，取该数组的对数：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This should print the following output for AAPL:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该为`AAPL`打印以下输出：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s define extreme values as being one standard deviation below the mean,
    or one standard deviation above the mean (this is just for demonstration purposes).
    Write the following code to mask extreme values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将极值定义为低于平均值的一个标准差，或高于平均值的一个标准差（这仅用于演示目的）。 编写以下代码以屏蔽极值：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This code prints the first ten elements:'
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码显示前十个元素：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Plot the original price data, the data after taking the logarithm, the exponent
    back again, and finally the data after applying the standard-deviation-based mask.
    The following screenshot shows the result (for this run):'
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制原始价格数据，绘制对数后的数据，再次绘制指数，最后绘制基于标准差的遮罩后的数据。 以下屏幕截图显示了结果（此运行）：
- en: '![How to do it...](img/0945OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945OS_06_03.jpg)'
- en: 'The complete program for this tutorial is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的完整程序如下：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: Functions in the `numpy.ma` module mask array elements, which we regard as illegal.
    For instance, negative values are not allowed for the `log()` and `sqrt()` functions.
    A masked value is like a `NULL` or `None` value in databases and programming.
    All operations with a masked value result in a masked value.
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.ma`模块中的函数掩盖了数组元素，我们认为这些元素是非法的。 例如，`log()`和`sqrt()`函数不允许使用负值。 屏蔽值类似于数据库和编程中的`NULL`或`None`值。
    具有屏蔽值的所有操作都将导致屏蔽值。'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for the `numpy.ma` module is at [http://docs.scipy.org/doc/numpy/reference/maskedarray.html](http://docs.scipy.org/doc/numpy/reference/maskedarray.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.ma`模块的文档位于[`docs.scipy.org/doc/numpy/reference/maskedarray.html`](http://docs.scipy.org/doc/numpy/reference/maskedarray.html)'
- en: Creating a scores table with a recarray function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`recarray`函数创建得分表
- en: The `recarray` class is a subclass of `ndarray`. These arrays can hold records
    as in a database, with different data types. For instance, we can store records
    about employees, containing numerical data such as salary and strings such as
    the employee name.
  prefs: []
  type: TYPE_NORMAL
  zh: '`recarray`类是`ndarray`的子类。 这些数组可以像数据库中一样保存记录，具有不同的数据类型。 例如，我们可以存储有关员工的记录，其中包含诸如薪水之类的数字数据和诸如员工姓名之类的字符串。'
- en: Modern economic theory tells us that investing boils down to optimizing risk
    and reward. Risk is represented by the **standard deviation of log returns** (see
    [http://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_and_logarithmic_return](http://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_and_logarithmic_return)).
    Reward, on the other hand, is represented by the average of log returns. We can
    come up with a relative score, where a high score means low risk and high reward.
    This is just theoretical and untested, so do not take it too seriously. We will
    calculate the scores for several stocks and store them together with the stock
    symbol using a table format in a NumPy `recarray()` function.
  prefs: []
  type: TYPE_NORMAL
  zh: 现代经济理论告诉我们，投资归结为优化风险和回报。 风险是由对数回报的**标准差**表示的（见[`en.wikipedia.org/wiki/Rate_of_return#Arithmetic_and_logarithmic_return`](http://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_and_logarithmic_return)）。
    另一方面，奖励由对数回报的平均值表示。 我们可以拿出相对分数，高分意味着低风险和高回报。 这只是理论上的，未经测试，所以不要太在意。 我们将计算几只股票的得分，并将它们与股票代号一起使用
    NumPy `recarray()`函数中的表格格式存储。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s start by creating the record array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建记录数组开始：
- en: 'Create a record array with a symbol, standard deviation score, mean score,
    and overall score for each record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个记录创建一个包含符号，标准差得分，平均得分和总得分的记录数组：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To keep things simple, initialize the scores in a loop based on the log returns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了简单起见，请根据对数收益在循环中初始化得分：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, we can access elements using the field names we defined in the
    previous step.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们可以使用在上一步中定义的字段名称来访问元素。
- en: 'We now have some numbers, but they are difficult to compare with each other.
    Normalize the scores so that we can combine them later. Here, normalizing means
    making sure that the scores add up to one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有一些数字，但是它们很难相互比较。 归一化分数，以便我们以后可以将它们合并。 在这里，归一化意味着确保分数加起来为：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The overall score will just be the average of the intermediate scores. Sort
    the records on the overall score to produce a ranking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总体分数将只是中间分数的平均值。 对总分上的记录进行排序以产生排名：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following is the complete code for this example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'The following is the complete code for this example:'
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This program produces the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序产生以下输出：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The score is normalized, so the values are between `0` and `1`, and we try to
    get the optimal return and risk combinations using the definitions from the start
    of the recipe. According to the output, `VZ` has the highest score, and therefore
    is the best investment. Of course, this is just a NumPy demo with little data,
    so don't consider this a recommendation.
  prefs: []
  type: TYPE_NORMAL
  zh: 分数已归一化，因此值介于`0`和`1`之间，我们尝试从秘籍开始使用定义获得最佳收益和风险组合 。 根据输出，`VZ`得分最高，因此是最好的投资。 当然，这只是一个
    NumPy 演示，数据很少，所以不要认为这是推荐。
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We computed scores for several stocks, and stored them in a `recarray` NumPy
    object. This array enables us to mix data of different data types, in this case,
    stock symbols and numerical scores. Record arrays allow us to access fields as
    array members, for example, `arr.field`. This tutorial covered the creation of
    a record array. You can find more record-array-related functions in the `numpy.recarray`
    module.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算了几只股票的得分，并将它们存储在`recarray` NumPy 对象中。 这个数组使我们能够混合不同数据类型的数据，在这种情况下，是股票代码和数字得分。
    记录数组使我们可以将字段作为数组成员访问，例如`arr.field`。 本教程介绍了记录数组的创建。 您可以在`numpy.recarray`模块中找到更多与记录数组相关的功能。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for the `numpy.recarray` module is at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.recarray`模块的文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html)'
