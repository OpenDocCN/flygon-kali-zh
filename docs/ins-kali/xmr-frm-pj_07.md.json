["```cs\nusing Chat.Events;\nusing Chat.Messages;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace Chat.Services\n{\n    public interface IChatService\n    {        \n        bool IsConnected { get; }\n\n        Task CreateConnection();\n        Task SendMessage(Message message);\n        Task Dispose();\n    }     \n}\n```", "```cs\nusing Chat.Messages;\nusing System;\nnamespace Chat.Events\n{\n    public class NewMessageEventArgs : EventArgs\n    {\n        public Message Message { get; private set; }\n\n        public NewMessageEventArgs(Message message)\n        {\n            Message = message;\n        }\n    } \n}\n```", "```cs\npublic interface IChatService\n{\n event EventHandler<NewMessageEventArgs> NewMessage;\n\n    bool IsConnected { get; }\n\n    Task CreateConnection();\n    Task SendMessage(Message message);\n    Task Dispose();\n} \n```", "```cs\npublic class ConnectionInfo\n{\n   public string Url { get; set; }\n   public string AccessToken { get; set; }\n} \n```", "```cs\nusing Chat.Events;\nusing Chat.Messages;\nusing Microsoft.AspNetCore.SignalR.Client;\nusing Newtonsoft.Json;\nusing System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class ChatService : IChatService\n{\n    private HttpClient httpClient;\n    private HubConnection hub;\n    private SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1, 1);     \n\n    public event EventHandler<NewMessageEventArgs> NewMessage;\n    public bool IsConnected { get; set; }\n\n    public async Task CreateConnection() \n    {\n    }\n\n    public async Task SendMessage(Message message) \n    {\n    }\n\n    public async Task Dispose()\n    {\n    } \n}\n```", "```cs\npublic async Task CreateConnection()\n{\n    await semaphoreSlim.WaitAsync();\n\n if(httpClient == null)\n { \n httpClient = new HttpClient();\n }\n\n var result = await     httpClient.GetStringAsync(\"https://{theNameOfTheFunctionApp}.azurewebsites.net/api/GetSignalRInfo\");\n\n var info = JsonConvert.DeserializeObject<Models.ConnectionInfo>\n    (result); \n}\n```", "```cs\nvar connectionBuilder = new HubConnectionBuilder();\nconnectionBuilder.WithUrl(info.Url, (Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionOptions obj) =>\n    {\n        obj.AccessTokenProvider = () => Task.Run(() => \n        info.AccessToken);\n    });\n\nhub = connectionBuilder.Build();\nhub.On<object>(\"newMessage\", (message) =>\n{\n     var json = message.ToString();\n     var obj = JsonConvert.DeserializeObject<Message>(json);\n     var msg = (Message)JsonConvert.DeserializeObject(json, \n     obj.TypeInfo);\n     NewMessage?.Invoke(this, new NewMessageEventArgs(msg));\n});\n\nawait hub.StartAsync();\n\nIsConnected = true;\nsemaphoreSlim.Release();\n```", "```cs\npublic async Task SendMessage(Message message)\n{\n    var json = JsonConvert.SerializeObject(message);\n\n    var content = new StringContent(json, Encoding.UTF8, \n    \"application/json\");\n\n    await \n    httpClient.PostAsync\n(\"https://{TheNameOfTheFunctionApp}.azurewebsites.net/api/messages\"\ncontent);\n} \n```", "```cs\npublic async Task Dispose()\n{\n    await semaphoreSlim.WaitAsync();\n\n    if(hub != null)\n    {\n        await hub.StopAsync();\n        await hub.DisposeAsync();\n    }\n\n    httpClient = null;\n\n    IsConnected = false;\n\n    semaphoreSlim.Release();\n} \n```", "```cs\nusing Autofac;\n\npublic class Resolver\n{\n     private static IContainer container;\n\n     public static void Initialize(IContainer container)\n{\n          Resolver.container = container;\n     }\n\n     public static T Resolve<T>()\n     {\n          return container.Resolve<T>();\n     }\n} \n```", "```cs\nusing Autofac;\nusing Chat.Chat;\nusing System;\nusing System.Reflection;\n\npublic class Bootstrapper\n{\n     public static void Init()\n     {\n            var builder = new ContainerBuilder();\n\n             builder.RegisterType<ChatService>().As<IChatService>\n             ().SingleInstance();\n\n             var currentAssembly = Assembly.GetExecutingAssembly();\n\n             builder.RegisterAssemblyTypes(currentAssembly)\n                      .Where(x => x.Name.EndsWith(\"View\", \n                      StringComparison.Ordinal));\n\n             builder.RegisterAssemblyTypes(currentAssembly)\n                     .Where(x => x.Name.EndsWith(\"ViewModel\", \n                     StringComparison.Ordinal));\n\n             var container = builder.Build();\n\n             Resolver.Initialize(container); \n     }\n} \n```", "```cs\npublic App()\n{\n    InitializeComponent();\n    Bootstrapper.Init();\n    MainPage = new MainPage();\n} \n```", "```cs\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing Xamarin.Forms;\n\npublic abstract class ViewModel : INotifyPropertyChanged\n{\n     public static INavigation Navigation { get; set; }\n     public static string User { get; set; } \n\n     public event PropertyChangedEventHandler PropertyChanged; \n     protected void Set<T>(ref T field, T newValue, \n                           [CallerMemberName] string propertyName = \n                           null)\n     {\n          if (!EqualityComparer<T>.Default.Equals(field, newValue))\n          {\n               field = newValue;\n               PropertyChanged?.Invoke(this, new \n               PropertyChangedEventArgs(propertyName));\n          }\n     }\n} \n```", "```cs\n using System.Windows.Input;\n using Chat.Views;\n using Xamarin.Forms;\n\n namespace Chat.ViewModels\n {\n     public class MainViewModel : ViewModel\n     {\n         public string Username { get; set; }\n\n         public ICommand Start => new Command(() =>\n         {\n             User = Username;\n\n             var chatView = Resolver.Resolve<ChatView>();\n             Navigation.PushAsync(chatView);\n         });\n     }\n }\n\n```", "```cs\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <ContentPage  \n\n              x:Class=\"Chat.Views.MainView\" Title=\"Welcome\">\n     <Grid>\n <Grid.RowDefinitions>\n <RowDefinition Height=\"*\" />\n <RowDefinition Height=\"2*\" />\n </Grid.RowDefinitions>\n <Image Source=\"chat.png\" VerticalOptions=\"Center\" \n                                  HorizontalOptions=\"Center\" />\n <StackLayout Grid.Row=\"1\" Padding=\"10\" Spacing=\"20\">\n <Entry Text=\"{Binding Username}\" \n             Placeholder=\"Enter a username\" />\n <Button Text=\"Start\" Command=\"{Binding Start}\" />\n </StackLayout>\n </Grid>\n </ContentPage> \n```", "```cs\nusing Chat.ViewModels;\nusing Xamarin.Forms;\nusing Xamarin.Forms.PlatformConfiguration.iOSSpecific;\nusing Xamarin.Forms.Xaml;\n\npublic partial class MainView : ContentPage\n{\n         public MainView(MainViewModel viewModel)\n         {\n             InitializeComponent();\n\n             On<Xamarin.Forms.PlatformConfiguration.iOS>\n             ().SetUseSafeArea(true);\n\n             BindingContext = viewModel;\n         }\n     } \n```", "```cs\npublic App()\n{\n    InitializeComponent();\n    Boostrapper.Init();\n\n var mainView = Resolver.Resolve<MainView>();\n var navigationPage = new NavigationPage(mainView);\n ViewModel.Navigation = navigationPage.Navigation;\n MainPage = navigationPage;\n} \n```", "```cs\n using System;\n using System.Collections.ObjectModel;\n using System.IO;\n using System.Linq;\n using System.Threading.Tasks;\n using System.Windows.Input;\n using Acr.UserDialogs;\n using Chat.Messages;\n using Chat.Services;\n using Plugin.Media;\n using Plugin.Media.Abstractions;\n using Xamarin.Forms;\n\n namespace Chat.ViewModels\n {\n     public class ChatViewModel : ViewModel\n     {\n         private readonly IChatService chatService;\n         public ObservableCollection<Message> Messages { get; \n         private set; }\n\n         public ChatViewModel(IChatService chatService)\n         {\n             this.chatService = chatService;\n\n             Messages = new ObservableCollection<Message>();\n\n             Task.Run(async() =>\n             {\n                 if(!chatService.IsConnected)\n                 {\n                     await chatService.CreateConnection();\n                 }\n\n                 await chatService.SendMessage(new \n                 UserConnectedMessage(User));\n             });\n         }\n    }\n}\n```", "```cs\nprivate string text;\npublic string Text\n{\n    get => text;\n    set => Set(ref text, value);\n} \n```", "```cs\nprivate void ChatService_NewMessage(object sender, Events.NewMessageEventArgs e)\n{\n    Device.BeginInvokeOnMainThread(() =>\n    {\n        if (!Messages.Any(x => x.Id == e.Message.Id))\n        {\n            Messages.Add(e.Message);\n        }\n    });\n} \n```", "```cs\npublic ChatViewModel(IChatService chatService)\n{\n    this.chatService = chatService;\n\n    Messages = new ObservableCollection<Message>();\n\n    chatService.NewMessage += ChatService_NewMessage;\n\n    Task.Run(async() =>\n    {\n        if(!chatService.IsConnected)\n        {\n            await chatService.CreateConnection();\n        }\n\n        await chatService.SendMessage(new UserConnectedMessage(User));\n    });\n} \n```", "```cs\npublic class LocalSimpleTextMessage : SimpleTextMessage\n{\n    public LocalSimpleTextMessage(SimpleTextMessage message)\n    {\n        Id = message.Id;\n        Text = message.Text;\n        Timestamp = message.Timestamp;\n        Username = message.Username;\n        TypeInfo = message.TypeInfo;\n    }\n}\n```", "```cs\npublic ICommand Send => new Command(async()=> \n{\n    var message = new SimpleTextMessage(User)\n    {\n        Text = this.Text\n    };\n\n    Messages.Add(new LocalSimpleTextMessage(message));\n\n    await chatService.SendMessage(message);\n\n    Text = string.Empty;\n}); \n```", "```cs\nprotected override void OnCreate(Bundle savedInstanceState)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n\n    base.OnCreate(savedInstanceState);\n\n    UserDialogs.Init(this);\n\n    global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n    LoadApplication(new App());\n}\n```", "```cs\npublic override void OnRequestPermissionsResult(int requestCode, string[] permissions, Android.Content.PM.Permission[] grantResults)\n{\n   Plugin.Permissions.PermissionsImplementation.Current.OnRequestPermissionsResult(requestCode, permissions, grantResults);\n} \n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <external-files-path name=\"my_images\" path=\"Pictures\" />\n    <external-files-path name=\"my_movies\" path=\"Movies\" />\n</paths>\n```", "```cs\n<manifest  android:versionCode=\"1\" android:versionName=\"1.0\" package=\"xfb.Chat\">\n<uses-sdk android:minSdkVersion=\"21\" android:targetSdkVersion=\"27\" />\n     <application android:label=\"Chat.Android\">\n      <provider \n      android:name=\"android.support.v4.content.FileProvider\"   \n      android:authorities=\"${applicationId}.fileprovider\" \n      android:exported=\"false\" android:grantUriPermissions=\"true\">\n <meta-data android:name=\"android.support.FILE_PROVIDER_PATHS\" \n      android:resource=\"@xml/file_paths\"></meta-data>\n </provider>\n     </application>\n </manifest> \n```", "```cs\n<key>NSPhotoLibraryUsageDescription</key>\n<string>This app needs access to photos.</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>This app needs access to the photo gallery.</string>\n```", "```cs\nprivate byte[] ReadFully(Stream input)\n{\n    byte[] buffer = new byte[16 * 1024];\n    using (MemoryStream ms = new MemoryStream())\n    {\n        int read;\n        while ((read = input.Read(buffer, 0, buffer.Length)) > 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        return ms.ToArray();\n    }\n} \n```", "```cs\npublic ICommand Photo => new Command(async() =>\n{\n    var options = new PickMediaOptions();\n    options.CompressionQuality = 50;\n\n    var photo = await CrossMedia.Current.PickPhotoAsync();\n\n    UserDialogs.Instance.ShowLoading(\"Uploading photo\");\n\n    var stream = photo.GetStream();\n    var bytes = ReadFully(stream);\n\n    var base64photo = Convert.ToBase64String(bytes);\n\n    var message = new PhotoMessage(User)\n    {\n        Base64Photo = base64photo,\n        FileEnding = photo.Path.Split('.').Last()\n    };\n\n    Messages.Add(message);\n    await chatService.SendMessage(message);\n\n    UserDialogs.Instance.HideLoading();\n}); \n```", "```cs\nusing System;\nusing System.Globalization;\nusing Xamarin.Forms;\nusing System.IO;\n\nnamespace Chat.Converters\n{\n    public class Base64ToImageConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, \n                              object parameter, CultureInfo culture)\n        {\n            var base64string = (string)value;\n            var bytes = \n            System.Convert.FromBase64String(base64string);\n            var stream = new MemoryStream(bytes);\n            return ImageSource.FromStream(() => stream);\n        }\n\n        public object ConvertBack(object value, Type targetType,\n                                  object parameter, CultureInfo \n                                  culture)\n        {\n            throw new NotImplementedException();\n        }\n    }\n} \n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage  \n\n             x:Class=\"Chat.Views.ChatView\">\n    <ContentPage.Resources>\n        <!-- TODO Add resources -->\n    </ContentPage.Resources>\n    <ScrollView>\n        <Grid x:Name=\"MainGrid\">\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"*\" />\n                <RowDefinition Height=\"1\" />\n                <RowDefinition>\n                    <RowDefinition.Height>\n                        <OnPlatform x:TypeArguments=\"GridLength\">\n                            <On Platform=\"iOS\" Value=\"50\" />\n                            <On Platform=\"Android\" Value=\"100\" />\n                        </OnPlatform>\n                    </RowDefinition.Height>\n                </RowDefinition>\n            </Grid.RowDefinitions>\n\n            <!-- TODO Add ListView -->\n\n            <BoxView Grid.Row=\"1\" HeightRequest=\"1\" \n            BackgroundColor=\"#33000000\" />\n            <Grid Grid.Row=\"2\" Padding=\"10\">\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"30\" />\n                    <ColumnDefinition Width=\"*\" />\n                    <ColumnDefinition Width=\"30\" />\n                </Grid.ColumnDefinitions>\n                <!-- TODO Add buttons and entry controls -->\n\n             </Grid>\n         </Grid>\n     </ScrollView>\n </ContentPage> \n```", "```cs\n        <ResourceDictionary>\n            <selectors:ChatMessageSelector \n            x:Key=\"SelectMessageTemplate\" />\n            <converters:Base64ToImageConverter x:Key=\"ToImage\" />\n        </ResourceDictionary>\n```", "```cs\n<ListView x:Name=\"MessageList\" ItemsSource=\"{Binding Messages}\" \n ItemTemplate=\"{StaticResource SelectMessageTemplate}\" \n HasUnevenRows=\"true\" SeparatorVisibility=\"None\">\n   <ListView.Resources>\n     <ResourceDictionary>\n       <!-- Resources go here later on --> \n     </ResourceDictionary>\n   </ListView.Resources>\n</ListView>\n```", "```cs\n<DataTemplate x:Key=\"SimpleText\">\n    <ViewCell IsEnabled=\"false\">\n        <Grid Padding=\"10\">\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"*\" />\n                <ColumnDefinition Width=\"*\" />\n            </Grid.ColumnDefinitions>\n            <Frame StyleClass=\"remoteMessage\" HasShadow=\"false\">\n                <StackLayout>\n                 <Label Text=\"{Binding Username}\" \n                  StyleClass=\"chatHeader\" />\n                 <Label Text=\"{Binding Text}\" StyleClass=\"chatText\" />\n                </StackLayout>\n            </Frame>\n        </Grid>\n    </ViewCell>\n</DataTemplate>\n```", "```cs\n<DataTemplate x:Key=\"LocalSimpleText\">\n    <ViewCell IsEnabled=\"false\">\n        <Grid Padding=\"10\">\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"*\" />\n                <ColumnDefinition Width=\"*\" />\n            </Grid.ColumnDefinitions>\n            <Frame Grid.Column=\"1\" StyleClass=\"localMessage\" \n            HasShadow=\"false\">\n                <StackLayout>\n                  <Label Text=\"{Binding Username}\" \n                  StyleClass=\"chatHeader\" />\n                  <Label Text=\"{Binding Text}\" StyleClass=\"chatText\" />\n                </StackLayout>\n            </Frame>\n        </Grid>\n    </ViewCell>\n</DataTemplate> \n```", "```cs\n<DataTemplate x:Key=\"UserConnected\">\n    <ViewCell IsEnabled=\"false\">\n        <StackLayout Padding=\"10\" BackgroundColor=\"#33000000\" \n        Orientation=\"Horizontal\">\n            <Label Text=\"{Binding Username}\" StyleClass=\"chatHeader\" \n            VerticalOptions=\"Center\" />\n            <Label Text=\"connected\" StyleClass=\"chatText\" \n            VerticalOptions=\"Center\" />\n        </StackLayout>\n    </ViewCell>\n</DataTemplate>\n```", "```cs\n<DataTemplate x:Key=\"Photo\">\n    <ViewCell IsEnabled=\"false\">\n        <Grid Padding=\"10\">\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"*\" />\n                <ColumnDefinition Width=\"*\" />\n            </Grid.ColumnDefinitions>\n            <StackLayout>\n                <Label Text=\"{Binding Username}\" \n                 StyleClass=\"chatHeader\" />\n                <Image Source=\"{Binding Url}\" Aspect=\"AspectFill\" \n                HeightRequest=\"150\" HorizontalOptions=\"Fill\" />\n            </StackLayout>\n        </Grid>\n    </ViewCell>\n</DataTemplate>\n```", "```cs\n<DataTemplate x:Key=\"LocalPhoto\">\n    <ViewCell IsEnabled=\"false\">\n        <Grid Padding=\"10\">\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"*\" />\n                <ColumnDefinition Width=\"*\" />\n            </Grid.ColumnDefinitions>\n            <StackLayout Grid.Column=\"1\">\n                <Label Text=\"{Binding Username}\" \n                StyleClass=\"chatHeader\" />\n                <Image Source=\"{Binding Base64Photo, Converter=\n                {StaticResource ToImage}}\" \n                Aspect=\"AspectFill\" HeightRequest=\"150\" \n                HorizontalOptions=\"Fill\" />\n            </StackLayout>\n        </Grid>\n    </ViewCell>\n</DataTemplate>\n```", "```cs\nusing Chat.Messages;\nusing Xamarin.Forms;\n\nnamespace Chat.Selectors\n{\n    public class ChatMessagesSelector : DataTemplateSelector\n    {\n        protected override DataTemplate OnSelectTemplate(object \n        item, BindableObject container)\n        {\n            var list = (ListView)container;\n\n            if(item is LocalSimpleTextMessage)\n            {\n                return   \n            (DataTemplate)list.Resources[\"LocalSimpleText\"];\n            }\n            else if(item is SimpleTextMessage)\n            {\n                return (DataTemplate)list.Resources[\"SimpleText\"];\n            }\n            else if(item is UserConnectedMessage)\n            {\n                return \n            (DataTemplate)list.Resources[\"UserConnected\"];\n            }\n            else if(item is PhotoUrlMessage)\n            {\n                return (DataTemplate)list.Resources[\"Photo\"];\n            }\n            else if (item is PhotoMessage)\n            {\n                return (DataTemplate)list.Resources[\"LocalPhoto\"];\n            }\n\n            return null;\n        }\n    }\n}\n```", "```cs\n<ImageButton Source=\"photo.png\" Command=\"{Binding Photo}\"\n             VerticalOptions=\"Center\" HorizontalOptions=\"Center\" />\n             <Entry Text=\"{Binding Text}\" Grid.Column=\"1\" \n             ReturnCommand=\"{Binding Send}\" />\n<ImageButton Grid.Column=\"2\" Source=\"send.png\" \n             Command=\"{Binding Send}\" \n             VerticalOptions=\"Center\" HorizontalOptions=\"Center\" />\n```", "```cs\nusing System.Linq;\nusing Chat.ViewModels;\nusing Xamarin.Forms;\nusing Xamarin.Forms.PlatformConfiguration.iOSSpecific;\n\nnamespace Chat.Views\n{\n    public partial class ChatView : ContentPage\n    {\n        private ChatViewModel viewModel;\n\n        public ChatView()\n        {\n            InitializeComponent();\n        }\n    }\n}\n```", "```cs\nprivate void Messages_CollectionChanged(object sender, \n            System.Collections.Specialized.NotifyCollectionChangedEventArgs e)\n{\n    MessageList.ScrollTo(viewModel.Messages.Last(), \n    ScrollToPosition.End, true);\n}\n```", "```cs\n public ChatView(ChatViewModel viewModel)\n {\n     this.viewModel = viewModel;\n\n     InitializeComponent();\n     On<Xamarin.Forms.PlatformConfiguration.iOS>\n     ().SetUseSafeArea(true);\n\n viewModel.Messages.CollectionChanged += \n     Messages_CollectionChanged;\n BindingContext = viewModel;\n }\n```", "```cs\nprotected override void OnAppearing()\n{\n    base.OnAppearing();\n    var safeArea = On<Xamarin.Forms.PlatformConfiguration.iOS>\n    ().SafeAreaInsets();\n    MainGrid.HeightRequest = this.Height - safeArea.Top - \n    safeArea.Bottom;\n} \n```", "```cs\nbutton {\n background-color: #A4243B;\n color: white;\n}\n\n.chatHeader {\n color: white;\n font-style: bold;\n font-size: small;\n}\n\n.chatText {\n color: white;\n font-size: small;\n}\n\n.remoteMessage {\n background-color: #F04D6A;\n padding: 10;\n}\n\n.localMessage {\n background-color: #24A43B;\n padding: 10;\n}\n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Application  \n\n             x:Class=\"Chat.App\">\n    <Application.Resources>\n        <StyleSheet Source=\"/Css/Styles.css\" />\n        <ResourceDictionary>\n <Style TargetType=\"NavigationPage\">\n <Setter Property=\"BarBackgroundColor\" Value=\"#273E47\" />\n <Setter Property=\"BarTextColor\" Value=\"White\" />\n </Style>\n </ResourceDictionary>\n    </Application.Resources>\n</Application> \n```", "```cs\nprotected override void OnSleep()\n{\n    var chatService = Resolver.Resolve<IChatService>();\n    chatService.Dispose();\n}\n\nprotected override void OnResume()\n{\n    Task.Run(async() =>\n    {\n        var chatService = Resolver.Resolve<IChatService>();\n\n        if (!chatService.IsConnected)\n        {\n            await chatService.CreateConnection();\n        }\n    });\n\n    Page view = null;\n\n    if(ViewModel.User != null)\n    {\n        view = Resolver.Resolve<ChatView>();\n    }\n    else\n    {\n        view = Resolver.Resolve<MainView>();\n    }\n\n    var navigationPage = new NavigationPage(view);\n    MainPage = navigationPage;\n} \n```"]