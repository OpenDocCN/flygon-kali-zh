["```java\nvar i = 42;       //int\nvar s = \"42\";     //String\nvar list1 = new ArrayList();          //ArrayList of Objects;\nvar list2 = new ArrayList<String>();  //ArrayList of Strings\n```", "```java\nMap<Integer, List<String>> idToNames = new HashMap<>();\n//...\nfor(Map.Entry<Integer, List<String>> e: idToNames.entrySet()){\n    List<String> names = e.getValue();\n    //...\n}\n```", "```java\nvar idToNames = new HashMap<Integer, List<String>>();\n//...\nfor(var e: idToNames.entrySet()){\n    var names = e.getValue();\n    //...\n}\n```", "```java\nvar names = getNames();\n```", "```java\ninterface A {\n    void m();\n}\n\nstatic class AImpl implements A {\n    public void m(){}\n    public void f(){}\n}\n```", "```java\nA a = new AImpl();\na.m();\n//a.f();  //does not compile\n\n```", "```java\nvar a = new AImpl();\na.m();\na.f();\n\n```", "```java\nvar a = (A) new AImpl();\na.m();\n//a.f();  //does not compile\n```", "```java\nvar i = 1; \nvar a = new int[2];\nvar l = List.of(1, 2); \nvar c = \"x\".getClass(); \nvar o = new Object() {}; \nvar x = (CharSequence & Comparable<String>) \"x\";\n```", "```java\nvar e;                 // no initializer\nvar g = null;          // null type\nvar f = { 6 };         // array initializer\nvar g = (g = 7);       // self reference is not allowed\nvar b = 2, c = 3.0;    // multiple declarators re not allowed\nvar d[] = new int[4];  // extra array dimension brackets\nvar f = () -> \"hello\"; // lambda requires an explicit target-type\n```", "```java\nfor(var i = 0; i < 10; i++){\n    //...\n}\n```", "```java\nvar idToNames = new HashMap<Integer, List<String>>();\n//...\nfor(var e: idToNames.entrySet()){\n    var names = e.getValue();\n    //...\n}\n```", "```java\ninterface A {\n void m();\n}\n\nvar aImpl = new A(){\n @Override\n public void m(){\n //...\n }\n};\n```", "```java\nvar var = 1;\n```", "```java\npublic void var(int i){\n    //...\n}\n```", "```java\npackage com.packt.cookbook.var;\n```", "```java\nBiFunction<Double, Integer, Double> f = (Double x, Integer y) -> x / y;\nSystem.out.println(f.apply(3., 2));    //prints: 1.5\n```", "```java\nBiFunction<Double, Integer, Double> f = (x, y) -> x / y;\nSystem.out.println(f.apply(3., 2));     //prints: 1.5\n```", "```java\nBiFunction<Double, Integer, Double> f = (var x, var y) -> x / y;\nSystem.out.println(f.apply(3., 2));       //prints: 1.5\n\n```", "```java\nimport org.jetbrains.annotations.NotNull;\n...\nBiFunction<Double, Integer, Double> f = \n (@NotNull var x, @NotNull var y) -> x / y;\nSystem.out.println(f.apply(3., 2));        //prints: 1.5\n```", "```java\nBiFunction<Double, Integer, Double> f = (x, y) -> x / y;\nSystem.out.println(f.apply(null, 2));    \n\n```", "```java\nBiFunction<Double, Integer, Double> f4 = \n           (@NotNull var x, @NotNull var y) -> x / y;\nDouble j = 3.;\nInteger i = 2;\nSystem.out.println(f4.apply(j, i)); \n```", "```java\nException in thread \"main\" java.lang.IllegalArgumentException: \nArgument for @NotNull parameter 'x' of com/packt/cookbook/ch17_new_way/b_lambdas/Chapter15Var.lambda$main$4 must not be null\n```", "```java\nBiFunction<SomeReallyLongClassName, \n  AnotherReallyLongClassName, Double> f4 = \n    (@NotNull SomeReallyLongClassName x, \n     @NotNull AnotherReallyLongClassName y) -> x.doSomething(y);\n\n```", "```java\nBiFunction<SomeReallyLongClassName, \n   AnotherReallyLongClassName, Double> f4 = \n      (@NotNull x, @NotNull y) -> x.doSomething(y);\n```", "```java\nBiFunction<SomeReallyLongClassName, \n   AnotherReallyLongClassName, Double> f4 = \n      (@NotNull var x, @NotNull var y) -> x.doSomething(y);\n```"]