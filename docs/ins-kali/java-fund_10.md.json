["```java\n    public class Operations\n    {\n    ```", "```java\n        public static void main(String[] args) {\n            System.out.println(\"The sum of 3 + 4 is \" + (3 + 4));\n            System.out.println(\"The product of 3 + 4 is \" + (3 * 4));\n        }\n    }\n    ```", "```java\n    The sum of 3 + 4 is 7\n    The product of 3 + 4 is 12\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    public class ReadScanner\n    {\n        static Scanner sc = new Scanner(System.in);\n      public static void main(String[] args) {\n        System.out.print(\"Enter a number: \");\n        int a = sc.nextInt();\n        System.out.print(\"Enter 2nd number: \");\n        int b = sc.nextInt();\n        System.out.println(\"The sum is \" + (a + b) + \".\");\n        }\n    }\n    ```", "```java\n    Enter a number: 12                                                                                                             \n    Enter 2nd number: 23\n    The sum is 35\\.  \n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    public class StockChangeCalculator{\n    static Scanner sc = new Scanner(System.in);\n    public static void main(String[] args) {\n        System.out.print(\"Enter the stock symbol: \");\n        String symbol = sc.nextLine();\n        System.out.printf(\"Enter %s's day 1 value: \", symbol);\n        double day1 = sc.nextDouble();\n        System.out.printf(\"Enter %s's day 2 value: \", symbol);\n        double day2 = sc.nextDouble();\n        double percentChange = 100 * (day2 - day1) / day1;\n        System.out.printf(\"%s has changed %.2f%% in one day.\", symbol, percentChange);\n    }\n    }\n    ```", "```java\n    Enter the stock symbol: AAPL                                                                                                             \n    Enter AAPL's day 1 value: 100                                                                                                           \n    Enter AAPL's day 2 value: 91.5                                                                                                           \n    AAPL has changed -8.50% in one day.\n    ```", "```java\n    import java.util.Scanner;\n    {\n    public class Input{\n    static Scanner sc = new Scanner(System.in);\n    \u00a0 \u00a0 public static void main(String[] args) \n    {\n    ```", "```java\n    System.out.print(\"Enter student name: \");\n    String name = sc.nextLine();\n    ```", "```java\n    System.out.print(\"Enter Name of the University: \");\n    String uni = sc.nextLine();\n    ```", "```java\n    System.out.print(\"Enter Age: \");\n    int age = sc.nextInt();\n    ```", "```java\n    System.out.println(\"Here is your ID\");\n    System.out.println(\"*********************************\");\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"University: \" + uni);\n    System.out.println(\"Age: \" + age);\n    System.out.println(\"*********************************\");\n    \u00a0\u00a0 \u00a0}\n    } \n    }\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    public class PeachCalculator{\n    static Scanner sc = new Scanner(System.in);\n    public static void main(String[] args) {\n        System.out.print(\"Enter the number of peaches picked: \");\n        int numberOfPeaches = sc.nextInt();\n        int numberOfFullBoxes = numberOfPeaches / 20;\n        int numberOfPeachesLeft = numberOfPeaches - numberOfFullBoxes * 20;\n        System.out.printf(\"We have %d full boxes and %d peaches left.\", numberOfFullBoxes, numberOfPeachesLeft);\n    }\n    }\n    ```", "```java\n    Enter the number of peaches picked: 55\n    We have 2 full boxes and 15 peaches left.\n    ```", "```java\n    public class Salary {\n       public static void main(String args[]) { \n    ```", "```java\n    int workerhours = 10; \n    double salary = 0;\n    ```", "```java\n    if (workerhours <= 8 ) \n    salary = workerhours*10;\n    ```", "```java\n    else if((workerhours > 8) && (workerhours < 12)) \n    salary = 8*10 + (workerhours - 8) * 12;\n    ```", "```java\n    else\n        salary = 160;\n    System.out.println(\"The worker's salary is \" + salary);\n    }\n    }\n    ```", "```java\n    public class TempSystem\n    {\n        public static void main(String[] args) {\n            String temp = \"Low\";\n            String weatherWarning;\n    ```", "```java\n    switch (temp) { \n            case \"High\": \n                weatherWarning = \"It's hot outside, do not forget sunblock.\"; \n                break; \n            case \"Low\": \n                weatherWarning = \"It's cold outside, do not forget your coat.\"; \n                break; \n            case \"Humid\": \n                weatherWarning = \"The weather is humid, open your windows.\"; \n                break;\n    ```", "```java\n    default: \n      weatherWarning = \"The weather looks good. Take a walk outside\"; \n      break;\n    ```", "```java\n    } \n            System.out.println(weatherWarning); \n        }\n    }\n    ```", "```java\n    It's cold outside, do not forget your coat.\n    ```", "```java\n    public class TempSystem\n    {\n        public static void main(String[] args) {\n            String temp = \"Low\";\n            String weatherWarning;\n                switch (temp) { \n            case \"High\": \n                weatherWarning = \"It's hot outside, do not forget sunblock.\"; \n                break; \n            case \"Low\": \n                weatherWarning = \"It's cold outside, do not forget your coat.\"; \n                break; \n            case \"Humid\": \n                weatherWarning = \"The weather is humid, open your windows.\"; \n                break; \n\n            default: \n                weatherWarning = \"The weather looks good. Take a walk outside\"; \n                break; \n            } \n            System.out.println(weatherWarning); \n        }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    public class PeachBoxCounter\n    {\n    static Scanner sc = new Scanner(System.in);\n    public static void main(String[] args) {\n    System.out.print(\"Enter the number of peaches picked: \");\n    int numberOfPeaches = sc.nextInt();\n    for (int numShipped = 0; numShipped < numberOfPeaches; numShipped += 20)      {\n    System.out.printf(\"shipped %d peaches so far\\n\", numShipped);\n    }\n    }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    public class PeachBoxCounters{\n    static Scanner sc = new Scanner(System.in);\n    public static void main(String[] args) {\n        System.out.print(\"Enter the number of peaches picked: \");\n        int numberOfPeaches = sc.nextInt();\n        int numberOfBoxesShipped = 0;\n        while (numberOfPeaches >= 20) {\n            numberOfPeaches -= 20;\n            numberOfBoxesShipped += 1;\n            System.out.printf(\"%d boxes shipped, %d peaches remaining\\n\", \n                    numberOfBoxesShipped, numberOfPeaches);\n        }\n    }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    public class Theater {\n    public static void main(String[] args)\n    ```", "```java\n    {\n    int total = 10, request = 0, remaining = 10;\n    ```", "```java\n    while (remaining>=0)\n    {\n    System.out.println(\"Enter the number of tickets\");\n    Scanner in = new Scanner(System.in);\n    request = in.nextInt();\n    ```", "```java\n    if(request <= remaining)\n    {\n    System.out.println(\"Your \" + request +\" tickets have been procced. Please pay and enjoy the show.\");\n    remaining = remaining - request;\n    request = 0;\n    }\n    ```", "```java\n    else\n    {\n    System.out.println(\"Sorry your request could not be processed\");\n    break;\n    }\n    }\n    }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    public class PeachBoxCount{    \n    static Scanner sc = new Scanner(System.in);\n    public static void main(String[] args) {\n        int numberOfBoxesShipped = 0;\n        int numberOfPeaches = 0;\n        while (true) {\n            System.out.print(\"Enter the number of peaches picked: \");\n            int incomingNumberOfPeaches = sc.nextInt();\n            if (incomingNumberOfPeaches == 0) {\n                break;\n            }\n            numberOfPeaches += incomingNumberOfPeaches;\n            while (numberOfPeaches >= 20) {\n                numberOfPeaches -= 20;\n                numberOfBoxesShipped += 1;\n                System.out.printf(\"%d boxes shipped, %d peaches remaining\\n\",\n                        numberOfBoxesShipped, numberOfPeaches);\n            }\n        }\n    }\n    }\n    ```", "```java\n    public class Animal {\n\n    }\n    ```", "```java\n    public class Animal {\n            int legs;\n            int ears;\n            int eyes;\n            String family;\n            String name;\n\n        }\n    ```", "```java\n    public class Animal {\n            int legs;\n            int ears;\n            int eyes;\n            String family;\n            String name;\n            public Animal(){\n                this(4, 2,2);\n            }\n            public Animal(int legs, int ears, int eyes){\n                this.legs = legs;\n                this.ears = ears;\n                this.eyes = ears;\n            }\n    }\n    ```", "```java\n    public class Animal {\n        int legs;\n        int ears;\n        int eyes;\n        String family;\n        String name;\n        public Animal(){\n            this(4, 2,2);\n        }\n        public Animal(int legs, int ears, int eyes){\n            this.legs = legs;\n            this.ears = ears;\n            this.eyes = ears;\n        }\n        public String getFamily() {\n            return family;\n        }\n        public void setFamily(String family) {\n            this.family = family;\n        }\n        public String getName() {\n            return name;\n        }\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n    ```", "```java\n    public class Animals {\n\n           public static void main(String[] args){\n\n           }\n    }\n    ```", "```java\n    public class Animals {\n            public static void main(String[] args){\n                Animal cow = new Animal();\n                Animal goat = new Animal();\n            }\n    }\n    ```", "```java\n    Animal duck = new Animal(2, 2, 2);\n    ```", "```java\n    public class Animals {\n        public static void main(String[] args){\n            Animal cow = new Animal();\n            Animal goat = new Animal();\n            Animal duck = new Animal(2, 2, 2);\n            cow.setName(\"Cow\");\n            cow.setFamily(\"Bovidae\");\n            goat.setName(\"Goat\");\n            goat.setFamily(\"Bovidae\");\n            duck.setName(\"Duck\");\n            duck.setFamily(\"Anatidae\");\n\n            System.out.println(cow.getName());\n            System.out.println(goat.getName());\n            System.out.println(duck.getFamily());\n        }\n    }\n    ```", "```java\n    Cow\n    Goat\n    Anatide\n    ```", "```java\n    public class Calculator {\n    ```", "```java\n    private final double operand1;\n    private final double operand2;\n    private final String operator;\n    public Calculator(double operand1, double operand2, String operator){\n    this.operand1 = operand1;\n    this.operand2 = operand2;\n    this.operator = operator;\n    }\n    ```", "```java\n    public double operate() {\n    if (this.operator.equals(\"-\")) {\n    return operand1 - operand2;\n    } else if (this.operator.equals(\"x\")) {\n    return operand1 * operand2;\n    } else if (this.operator.equals(\"/\")) {\n    return operand1 / operand2;\n    } else {\n    // If operator is sum or unknown, return sum\n    return operand1 + operand2;\n    }\n    }\n    ```", "```java\n    public static void main (String [] args) {\n            System.out.println(\"1 + 1 = \" + new Calculator(1, 1, \"+\").operate());\n            System.out.println(\"4 - 2 = \" + new Calculator(4, 2, \"-\").operate());\n            System.out.println(\"1 x 2 = \" + new Calculator(1, 2, \"x\").operate());\n            System.out.println(\"10 / 2 = \" + new Calculator(10, 2, \"/\").operate());\n        }\n    }\n    ```", "```java\n    public class Operator {\n        public final String operator;\n        public Operator() {\n            this(\"+\");\n        }\n        public Operator(String operator) {\n            this.operator = operator;\n        }\n        public boolean matches(String toCheckFor) {\n            return this.operator.equals(toCheckFor);\n        }\n        public double operate(double operand1, double operand2) {\n            return operand1 + operand2;\n        }\n    }\n    ```", "```java\n    public class Subtraction extends Operator {\n        public Subtraction() {\n            super(\"-\");\n        }\n        @Override\n        public double operate(double operand1, double operand2) {\n            return operand1 - operand2;\n        }\n    }\n    ```", "```java\n    public class Multiplication extends Operator {\n        public Multiplication() {\n            super(\"x\");\n        }\n        @Override\n        public double operate(double operand1, double operand2) {\n            return operand1 * operand2;\n        }\n    }\n    ```", "```java\n    public class Division extends Operator {\n        public Division() {\n            super(\"/\");\n        }\n        @Override\n        public double operate(double operand1, double operand2) {\n            return operand1 / operand2;\n        }\n    }\n    ```", "```java\n    public class CalculatorWithFixedOperators {\n        public static void main (String [] args) {\n            System.out.println(\"1 + 1 = \" + new CalculatorWithFixedOperators(1, 1, \"+\").operate());\n            System.out.println(\"4 - 2 = \" + new CalculatorWithFixedOperators(4, 2, \"-\").operate());\n            System.out.println(\"1 x 2 = \" + new CalculatorWithFixedOperators(1, 2, \"x\").operate());\n            System.out.println(\"10 / 2 = \" + new CalculatorWithFixedOperators(10, 2, \"/\").operate());\n        }\n        private final double operand1;\n        private final double operand2;\n        // The current operator\n        private final Operator operator;\n        // All possible operations\n        private final Division division = new Division();\n        private final Multiplication multiplication = new Multiplication();\n        private final Operator sum = new Operator();\n        private final Subtraction subtraction = new Subtraction();\n        public CalculatorWithFixedOperators(double operand1, double operand2, String operator) {\n            this.operand1 = operand1;\n            this.operand2 = operand2;\n            if (subtraction.matches(operator)) {\n                this.operator = subtraction;\n            } else if (multiplication.matches(operator)) {\n                this.operator = multiplication;\n            } else if (division.matches(operator)) {\n                this.operator = division;\n            } else {\n                this.operator = sum;\n            }\n        }\n        public double operate() {\n            return operator.operate(operand1, operand2);\n        }\n    }\n    ```", "```java\n     public class Cat extends Animal {\n    ```", "```java\n    //Fields specific to the Cat family\n    String owner;\n    int numberOfTeeth;\n    int age;\n    ```", "```java\n    public static void main(String[] args){\n    Cat myCat = new Cat();\n    //Since Cat inherits from Animal, we have access to it's methods and fields\n    //We don't need to redefine these methods and fields\n    myCat.setFamily(\"Cat\");\n    myCat.setName(\"Puppy\");\n    myCat.ears = 2;\n    myCat.legs = 4;\n    myCat.eyes = 2;\n    System.out.println(myCat.getFamily());\n    System.out.println(myCat.getName());\n    System.out.println(myCat.ears);\n    System.out.println(myCat.legs);\n    System.out.println(myCat.eyes);\n    }\n    }\n    ```", "```java\n    Cat\n    Puppy\n    2\n    4\n    2\n    ```", "```java\n    public class Cow implements AnimalBehavior, AnimalListener {\n    String sound;\n    String movementType;\n    ```", "```java\n    @Override\n    public void move() {\n        this.movementType = \"Walking\";\n        this.onAnimalMoved();\n    }\n    @Override\n    public void makeSound() {\n        this.sound = \"Moo\";\n        this.onAnimalMadeSound();\n    }\n    ```", "```java\n    public interface AnimalListener {\n       void onAnimalMoved();\n       void onAnimalMadeSound();\n    }\n    ```", "```java\n    @Override\n       public void onAnimalMoved() {\n           System.out.println(\"Animal moved: \" + this.movementType);\n       }\n    @Override\n    public void onAnimalMadeSound() {\n        System.out.println(\"Sound made: \" + this.sound);\n    }\n    ```", "```java\n    public static void main(String[] args){\n       Cow myCow = new Cow();\n       myCow.move();\n       myCow.makeSound();\n    }\n    }\n    ```", "```java\n    Animal moved: Walking\n    Sound made: Moo\n    ```", "```java\n    import java.util.Random;\n    ```", "```java\n    public class EmployeeLoader {\n    ```", "```java\n    private static Random random = new Random(15);\n    ```", "```java\n    public static Employee getEmployee() {\n            int nextNumber = random.nextInt(4);\n            switch(nextNumber) {\n                case 0:\n                    // A sales person with total sales between 5000 and 1550000\n                    double grossSales = random.nextDouble() * 150000 + 5000;\n                    return new SalesWithCommission(grossSales);\n                case 1:\n                    return new Manager();\n                case 2:\n                    return new Engineer();\n                case 3:\n                    return new Sales();\n                default:\n                    return new Manager();\n            }\n        }\n    ```", "```java\n    public class SalesWithCommission extends Sales implements Employee {\n        private final double grossSales;\n        public SalesWithCommission(double grossSales) {\n            this.grossSales = grossSales;\n        }\n        public double getCommission() {\n            return grossSales * 0.15;\n        }\n    }\n    ```", "```java\n    public class ShowSalaryAndCommission {\n        public static void main (String [] args) {\n            for (int i = 0; i < 10; i++) {\n                Employee employee = EmployeeLoader.getEmployee();\n                System.out.println(\"--- \" + employee.getClass().getName());\n                System.out.println(\"Net Salary: \" + employee.getNetSalary());\n                System.out.println(\"Tax: \" + employee.getTax());\n                if (employee instanceof SalesWithCommission) {\n                    // Cast to sales with commission\n                    SalesWithCommission sales = (SalesWithCommission) employee;\n                    System.out.println(\"Commission: \" + sales.getCommission());\n                }\n            }\n        }\n    }\n    ```", "```java\n    public class AnimalTest {\n       public static void  main(String[] args){\n       }\n    }\n    ```", "```java\n    Cat cat = new Cat();\n    Cow cow = new Cow();\n    ```", "```java\n    System.out.println(cat.owner);\n    ```", "```java\n    Animal animal = (Animal)cat;\n    System.out.println(animal.owner);\n    ```", "```java\n    System.out.println(cow.sound);\n    ```", "```java\n    Animal animal1 = (Animal)cow;\n    ```", "```java\n    Cat cat1 = (Cat)animal;\n    System.out.println(cat1.owner);\n    ```", "```java\n    public class AnimalTest {\n       public static void  main(String[] args){\n           Cat cat = new Cat();\n           Cow cow = new Cow();\n           System.out.println(cat.owner);\n\n           Animal animal = (Animal)cat;\n           //System.out.println(animal.owner);\n           System.out.println(cow.sound);\n           //Animal animal1 = (Animal)cow;\n           Cat cat1 = (Cat)animal;\n           System.out.println(cat1.owner);\n       }\n    }\n    ```", "```java\n    public abstract class Patient {\n    }\n    ```", "```java\n    public abstract String getPersonType();\n    ```", "```java\n    public class Doctor extends Patient {\n    }\n    ```", "```java\n    @Override\n    public String getPersonType() {\n       return \"Arzt\";\n    }\n    ```", "```java\n    public class People extends Patient{\n       @Override\n       public String getPersonType() {\n           return \"Kranke\";\n       }\n    }\n    ```", "```java\n    public class HospitalTest {\n       public static void main(String[] args){\n\n       }\n    }\n    ```", "```java\n    Doctor doctor = new Doctor();\n    People people = new People();\n    ```", "```java\n    String str = doctor.getPersonType();\n    String str1 = patient.getPersonType();\n    System.out.println(str);\n    System.out.println(str1);\n    ```", "```java\n    public abstract class GenericEmployee implements Employee {\n        private final double grossSalary;\n        public GenericEmployee(double grossSalary) {\n            this.grossSalary = grossSalary;\n        }\n        public double getGrossSalary() {\n            return grossSalary;\n        }\n        @Override\n        public double getNetSalary() {\n            return grossSalary - getTax();\n        }\n    }\n    ```", "```java\n    public class GenericEngineer extends GenericEmployee {\n        public GenericEngineer(double grossSalary) {\n            super(grossSalary);\n        }\n        @Override\n        public double getTax() {\n            return (22.0/100) * getGrossSalary();\n        }\n    }\n    ```", "```java\n    public class GenericManager extends GenericEmployee {\n        public GenericManager(double grossSalary) {\n            super(grossSalary);\n        }\n        @Override\n        public double getTax() {\n            return (28.0/100) * getGrossSalary();\n        }\n    }\n    ```", "```java\n    public class GenericSales extends GenericEmployee {\n        public GenericSales(double grossSalary) {\n            super(grossSalary);\n        }\n        @Override\n        public double getTax() {\n            return (19.0/100) * getGrossSalary();\n        }\n    }\n    ```", "```java\n    public class GenericSalesWithCommission extends GenericEmployee {\n        private final double grossSales;\n        public GenericSalesWithCommission(double grossSalary, double grossSales) {\n            super(grossSalary);\n            this.grossSales = grossSales;\n        }\n        public double getCommission() {\n            return grossSales * 0.15;\n        }\n        @Override\n        public double getTax() {\n            return (19.0/100) * getGrossSalary();\n        }\n    }\n    ```", "```java\n    public static Employee getEmployeeWithSalary() {\n            int nextNumber = random.nextInt(4);\n            // Random salary between 70,000 and 70,000 + 50,000\n            double grossSalary = random.nextDouble() * 50000 + 70000;\n            switch(nextNumber) {\n                case 0:\n                    // A sales person with total sales between 5000 and 1550000\n                    double grossSales = random.nextDouble() * 150000 + 5000;\n                    return new GenericSalesWithCommission(grossSalary, grossSales);\n                case 1:\n                    return new GenericManager(grossSalary);\n                case 2:\n                    return new GenericEngineer(grossSalary);\n                case 3:\n                    return new GenericSales(grossSalary);\n                default:\n                    return new GenericManager(grossSalary);\n            }\n        }\n    }\n    ```", "```java\n    public class UseAbstractClass {\n        public static void main (String [] args) {\n            for (int i = 0; i < 10; i++) {\n                Employee employee = EmployeeLoader.getEmployeeWithSalary();\n                System.out.println(\"--- \" + employee.getClass().getName());\n                System.out.println(\"Net Salary: \" + employee.getNetSalary());\n                System.out.println(\"Tax: \" + employee.getTax());\n                if (employee instanceof GenericSalesWithCommission) {\n                    // Cast to sales with commission\n                    GenericSalesWithCommission sales = (GenericSalesWithCommission) employee;\n                    System.out.println(\"Commission: \" + sales.getCommission());\n                }\n            }\n        }\n    }\n    ```", "```java\n    public class ExampleArray {\n      public static void main(String[] args) {\n      }\n    }\n    ```", "```java\n    double[] array = {14.5, 28.3, 15.4, 89.0, 46.7, 25.1, 9.4, 33.12, 82, 11.3, 3.7, 59.99, 68.65, 27.78, 16.3, 45.45, 24.76, 33.23, 72.88, 51.23};\n    ```", "```java\n    double min = array[0];\n    ```", "```java\n    for (doublefloat f : array) {\n    }\n    ```", "```java\n    if (f < min)\n    min = f;\n    }\n    ```", "```java\n    System.out.println(\"The lowest number in the array is \" + min);\n    }\n    }\n    ```", "```java\n    public class ExampleArray {\n            public static void main(String[] args) {\n                double[] array = {14.5, 28.3, 15.4, 89.0, 46.7, 25.1, 9.4, 33.12, 82, 11.3, 3.7, 59.99, 68.65, 27.78, 16.3, 45.45, 24.76, 33.23, 72.88, 51.23};\n                double min = array[0];\n                for (double f : array) {\n                    if (f < min)\n                        min = f;\n                }\n                System.out.println(\"The lowest number in the array is \" + min);\n            }\n    }\n    ```", "```java\n    public class Operators {\n        public static final Operator DEFAULT_OPERATOR = new Operator();\n        public static final Operator [] OPERATORS = {\n            new Division(),\n            new Multiplication(),\n            DEFAULT_OPERATOR,\n            new Subtraction(),\n        };\n    ```", "```java\n    public static Operator findOperator(String operator) {\n            for (Operator possible : OPERATORS) {\n                if (possible.matches(operator)) {\n                    return possible;\n                }\n            }\n            return DEFAULT_OPERATOR;\n        }\n    }\n    ```", "```java\n    public class CalculatorWithDynamicOperator {\n        private final double operand1;\n        private final double operand2;\n        // The current operator\n        private final Operator operator;\n    ```", "```java\n    public CalculatorWithDynamicOperator(double operand1, double operand2, String operator) {\n            this.operand1 = operand1;\n            this.operand2 = operand2;\n            this.operator = Operators.findOperator(operator);\n        }\n        public double operate() {\n            return operator.operate(operand1, operand2);\n        }\n    ```", "```java\n    public static void main (String [] args) {\n            System.out.println(\"1 + 1 = \" + new CalculatorWithDynamicOperator(1, 1, \"+\").operate());\n            System.out.println(\"4 - 2 = \" + new CalculatorWithDynamicOperator(4, 2, \"-\").operate());\n            System.out.println(\"1 x 2 = \" + new CalculatorWithDynamicOperator(1, 2, \"x\").operate());\n            System.out.println(\"10 / 2 = \" + new CalculatorWithDynamicOperator(10, 2, \"/\").operate());\n        }\n    }\n    ```", "```java\n    import java.util.ArrayList;\n    import java.util.Iterator;\n    ```", "```java\n    public class StudentsArray extends Student{\n    ```", "```java\n    public static void main(String[] args){\n           ArrayList<Student> students = new ArrayList<>();\n           Student james = new Student();\n           james.setName(\"James\");\n           Student mary = new Student();\n           mary.setName(\"Mary\");\n           Student jane = new Student();\n           jane.setName(\"Jane\");\n           Student pete = new Student();\n           pete.setName(\"Pete\");\n           students.add(james);\n           students.add(mary);\n           students.add(jane);\n           students.add(pete);\n    ```", "```java\n           Iterator studentsIterator = students.iterator();\n           while (studentsIterator.hasNext()){\n               Student student = (Student) studentsIterator.next();\n               String name = student.getName();\n               System.out.println(name);\n           }    \n    ```", "```java\n           students.clear();\n       }\n    }\n    ```", "```java\n    import java.util.ArrayList;\n    import java.util.Iterator;\n    public class StudentsArray extends Student{\n       public static void main(String[] args){\n           ArrayList<Student> students = new ArrayList<>();\n           Student james = new Student();\n           james.setName(\"James\");\n           Student mary = new Student();\n           mary.setName(\"Mary\");\n           Student jane = new Student();\n           jane.setName(\"Jane\");\n           students.add(james);\n           students.add(mary);\n           students.add(jane);\n           Iterator studentsIterator = students.iterator();\n           while (studentsIterator.hasNext()){\n               Student student = (Student) studentsIterator.next();\n               String name = student.getName();\n               System.out.println(name);\n           }\n\n           students.clear();\n       }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    public class NameTell\n    {\n      public static void main(String[] args)\n      {\n    ```", "```java\n    System.out.print(\"Enter your name:\");\n    Scanner sc = new Scanner(System.in);\n    String name = sc.nextLine();\n    ```", "```java\n    int num = name.length();\n    char c = name.charAt(0);\n    ```", "```java\n    System.out.println(\"\\n Your name has \" + num + \" letters including spaces.\");\n    System.out.println(\"\\n The first letter is: \" + c);\n      }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    public class CommandLineCalculator {\n        public static void main (String [] args) throws Exception {\n            Scanner scanner = new Scanner(System.in);\n    ```", "```java\n    while (true) {\n                printOptions();\n                String option = scanner.next();\n                if (option.equalsIgnoreCase(\"Q\")) {\n                    break;\n                }\n    ```", "```java\n    System.out.print(\"Type first operand: \");\n                double operand1 = scanner.nextDouble();\n                System.out.print(\"Type second operand: \");\n                double operand2 = scanner.nextDouble();\n                Operator operator = Operators.findOperator(option);\n                double result = operator.operate(operand1, operand2);\n                System.out.printf(\"%f %s %f = %f\\n\", operand1, operator.operator, operand2, result);\n                System.out.println();\n            }\n        }\n    ```", "```java\n      private static void printOptions() {\n            System.out.println(\"Q (or q) - To quit\");\n            System.out.println(\"An operator. If not supported, will use sum.\");\n            System.out.print(\"Type your option: \");\n        }\n    }\n    ```", "```java\n    public class Unique {\n    ```", "```java\n    public static String removeDups(String string){\n    ```", "```java\n    if (string == null)\n               return string;\n           if (string == \"\")\n               return string;\n           if (string.length() == 1)\n               return string;\n    ```", "```java\n    String result = \"\";\n    ```", "```java\n    for (int i = 0; i < string.length() ; i++){\n               char c = string.charAt(i);\n               boolean isDuplicate = false;\n    ```", "```java\n    for (int j = 0; j < result.length(); j++){\n                   char d = result.charAt(j);\n                   if (c  == d){ //duplicate found\n                       isDuplicate = true;\n                       break;\n                   }\n               }\n               if (!isDuplicate)\n                   result += \"\"+c;\n           }\n           return result;\n       }\n    ```", "```java\n    public static void main(String[] args){\n           String a = \"aaaaaaa\";\n           String b = \"aaabbbbb\";\n           String c = \"abcdefgh\";\n           String d = \"Ju780iu6G768\";\n           System.out.println(removeDups(a));\n           System.out.println(removeDups(b));\n           System.out.println(removeDups(c));\n           System.out.println(removeDups(d));\n       }\n    }\n    ```", "```java\npublic class Unique {\n   public static String removeDups(String string){\n       if (string == null)\n           return string;\n       if (string == \"\")\n           return string;\n       if (string.length() == 1)\n           return string;\n      String result = \"\";\n       for (int i = 0; i < string.length() ; i++){\n           char c = string.charAt(i);\n           boolean isDuplicate = false;\n           for (int j = 0; j < result.length(); j++){\n               char d = result.charAt(j);\n               if (c  == d){ //duplicate found\n                   isDuplicate = true;\n                   break;\n               }\n           }\n           if (!isDuplicate)\n               result += \"\"+c;\n       }\n       return result;\n   }\npublic static void main(String[] args){\n       String a = \"aaaaaaa\";\n       String b = \"aaabbbbb\";\n       String c = \"abcdefgh\";\n       String d = \"Ju780iu6G768\";\n       System.out.println(removeDups(a));\n       System.out.println(removeDups(b));\n       System.out.println(removeDups(c));\n       System.out.println(removeDups(d));\n   }\n}\n```", "```java\n    public class UseInitialCapacity {\n      public static final void main (String [] args) throws Exception {\n      }\n    }\n    ```", "```java\n    private static final int INITIAL_CAPACITY = 5;\n    ```", "```java\n    private static User[] resizeArray(User[] users, int newCapacity) {\n      User[] newUsers = new User[newCapacity];\n      int lengthToCopy = newCapacity > users.length ? users.length : newCapacity;\n      System.arraycopy(users, 0, newUsers, 0, lengthToCopy);\n      return newUsers;\n    }\n    ```", "```java\n    public static User[] loadUsers(String pathToFile) throws Exception {\n      User[] users = new User[INITIAL_CAPACITY];\n      BufferedReader lineReader = new BufferedReader(new FileReader(pathToFile));\n      try (CSVReader reader = new CSVReader(lineReader)) {\n        String [] row = null;\n        while ( (row = reader.readRow()) != null) {\n          // Reached end of the array\n          if (users.length == reader.getLineCount()) {\n            // Increase the array by INITIAL_CAPACITY\n            users = resizeArray(users, users.length + INITIAL_CAPACITY);\n          }\n          users[users.length - 1] = User.fromValues(row);\n        } // end of while\n\n        // If read less rows than array capacity, trim it\n        if (reader.getLineCount() < users.length - 1) {\n          users = resizeArray(users, reader.getLineCount());\n        }\n      } // end of try\n\n      return users;\n    }\n    ```", "```java\n    User[] users = loadUsers(args[0]);\n    System.out.println(users.length);\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    ```", "```java\n    27\n    ```", "```java\n    public CSVReader(BufferedReader reader, boolean ignoreFirstLine) throws IOException {\n      this.reader = reader;\n      if (ignoreFirstLine) {\n        reader.readLine();\n      }\n    }\n    ```", "```java\n    public CSVReader(BufferedReader reader) throws IOException {\n      this(reader, true);\n    }\n    ```", "```java\n    public class CalculateAverageSalary {\n      public static void main (String [] args) throws Exception {\n      }\n    }\n    ```", "```java\n    private static Vector loadWages(String pathToFile) throws Exception {\n      Vector result = new Vector();\n      FileReader fileReader = new FileReader(pathToFile);\n      BufferedReader bufferedReader = new BufferedReader(fileReader);\n      try (CSVReader csvReader = new CSVReader(bufferedReader, false)) {\n        String [] row = null;\n        while ( (row = csvReader.readRow()) != null) {\n          if (row.length == 15) { // ignores empty lines\n            result.add(Integer.parseInt(row[2].trim()));\n          }\n        }\n      }\n      return result;\n    }\n    ```", "```java\n    Vector wages = loadWages(args[0]);\n    long start = System.currentTimeMillis();\n    ```", "```java\n    int totalWage = 0;\n    int maxWage = 0;\n    int minWage = Integer.MAX_VALUE;\n    ```", "```java\n    for (Object wageAsObject : wages) {\n      int wage = (int) wageAsObject;\n      totalWage += wage;\n      if (wage > maxWage) {\n        maxWage = wage;\n      }\n      if (wage < minWage) {\n        minWage = wage;\n      }\n    }\n    ```", "```java\n    System.out.printf(\"Read %d rows in %dms\\n\", wages.size(), System.currentTimeMillis() - start);\n    System.out.printf(\"Average, Min, Max: %d, %d, %d\\n\", totalWage / wages.size(), minWage, maxWage);\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.util.Vector;\n    ```", "```java\n    Read 32561 rows in 198ms\n    Average, Min, Max: 57873, 12285, 1484705\n    ```", "```java\n    public class IterateOnUsersVector {\n      public static void main(String [] args) throws IOException {\n      }\n    }\n    ```", "```java\n    Vector users = UsersLoader.loadUsersInVector(args[0]);\n    ```", "```java\n    for (Object userAsObject : users) {\n      User user = (User) userAsObject;\n      System.out.printf(\"%s - %s\\n\", user.name, user.email);\n    }\n    ```", "```java\n    import java.io.IOException;\n    import java.util.Vector;\n    ```", "```java\n    Bill Gates - william.gates@microsoft.com\n    Jeff Bezos - jeff.bezos@amazon.com\n    Marc Benioff - marc.benioff@salesforce.com\n    Bill Gates - william.gates@microsoft.com\n    Jeff Bezos - jeff.bezos@amazon.com\n    Sundar Pichai - sundar.pichai@google.com\n    Jeff Bezos - jeff.bezos@amazon.com\n    Larry Ellison - lawrence.ellison@oracle.com\n    Marc Benioff - marc.benioff@salesforce.com\n    Larry Ellison - lawrence.ellison@oracle.com\n    Jeff Bezos - jeff.bezos@amazon.com\n    Bill Gates - william.gates@microsoft.com\n    Sundar Pichai - sundar.pichai@google.com\n    Jeff Bezos - jeff.bezos@amazon.com\n    Sundar Pichai - sundar.pichai@google.com\n    Marc Benioff - marc.benioff@salesforce.com\n    Larry Ellison - lawrence.ellison@oracle.com\n    Marc Benioff - marc.benioff@salesforce.com\n    Jeff Bezos - jeff.bezos@amazon.com\n    Marc Benioff - marc.benioff@salesforce.com\n    Bill Gates - william.gates@microsoft.com\n    Sundar Pichai - sundar.pichai@google.com\n    Larry Ellison - lawrence.ellison@oracle.com\n    Bill Gates - william.gates@microsoft.com\n    Larry Ellison - lawrence.ellison@oracle.com\n    Jeff Bezos - jeff.bezos@amazon.com\n    Sundar Pichai - sundar.pichai@google.com\n    ```", "```java\n    public class GroupWageByEducation {\n      public static void main (String [] args) throws Exception {\n      }\n    }\n    ```", "```java\n    private static Hashtable<String, Vector<Integer>> loadWages(String pathToFile) throws Exception {\n      Hashtable<String, Vector<Integer>> result = new Hashtable<>();\n      return result;\n    }\n    ```", "```java\n    FileReader fileReader = new FileReader(pathToFile);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n    try (CSVReader csvReader = new CSVReader(bufferedReader, false)) {\n      String [] row = null;\n      while ( (row = csvReader.readRow()) != null) {\n        if (row.length == 15) {\n        }\n      }\n    }\n    ```", "```java\n    String education = row[3].trim();\n    int wage = Integer.parseInt(row[2].trim());\n    ```", "```java\n    // Get or create the vector with the wages for the specified education\n    Vector<Integer> wages = result.getOrDefault(education, new Vector<>());\n    wages.add(wage);\n    // Ensure the vector will be in the hashtable next time\n    result.put(education, wages);\n    ```", "```java\n    Hashtable<String,Vector<Integer>> wagesByEducation = loadWages(args[0]);\n    ```", "```java\n    for (Entry<String, Vector<Integer>> entry : wagesByEducation.entrySet()) {\n      Vector<Integer> wages = entry.getValue();\n      int totalWage = 0;\n      int maxWage = 0;\n      int minWage = Integer.MAX_VALUE;\n    }\n    ```", "```java\n    for (Integer wage : wages) {\n      totalWage += wage;\n      if (wage > maxWage) {\n        maxWage = wage;\n      }\n      if (wage < minWage) {\n        minWage = wage;\n      }\n    }\n    ```", "```java\n    System.out.printf(\"%d records found for education %s\\n\", wages.size(), entry.getKey());\n    System.out.printf(\"\\tAverage, Min, Max: %d, %d, %d\\n\", totalWage / wages.size(), minWage, maxWage);\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.util.Hashtable;\n    import java.util.Map.Entry;\n    import java.util.Vector;\n    ```", "```java\n    1067 records found for education Assoc-acdm\n            Average, Min, Max: 193424, 19302, 1455435\n    433 records found for education 12th\n            Average, Min, Max: 199097, 23037, 917220\n    1382 records found for education Assoc-voc\n            Average, Min, Max: 181936, 20098, 1366120\n    5355 records found for education Bachelors\n            Average, Min, Max: 188055, 19302, 1226583\n    51 records found for education Preschool\n            Average, Min, Max: 235889, 69911, 572751\n    10501 records found for education HS-grad\n            Average, Min, Max: 189538, 19214, 1268339\n    168 records found for education 1st-4th\n            Average, Min, Max: 239303, 34378, 795830\n    333 records found for education 5th-6th\n            Average, Min, Max: 232448, 32896, 684015\n    576 records found for education Prof-school\n            Average, Min, Max: 185663, 14878, 747719\n    514 records found for education 9th\n            Average, Min, Max: 202485, 22418, 758700\n    1723 records found for education Masters\n            Average, Min, Max: 179852, 20179, 704108\n    933 records found for education 10th\n            Average, Min, Max: 196832, 21698, 766115\n    413 records found for education Doctorate\n            Average, Min, Max: 186698, 19520, 606111\n    7291 records found for education Some-college\n            Average, Min, Max: 188742, 12285, 1484705\n    646 records found for education 7th-8th\n            Average, Min, Max: 188079, 20057, 750972\n    1175 records found for education 11th\n            Average, Min, Max: 194928, 19752, 806316\n    ```", "```java\n    import java.util.Comparator;\n    public class ByIdComparator implements Comparator<User> {\n      public int compare(User first, User second) {\n        if (first.id < second.id) {\n          return -1;\n        }\n        if (first.id > second.id) {\n          return 1;\n        }\n        return 0;\n      }\n    }\n    ```", "```java\n    import java.util.Comparator;\n    public class ByEmailComparator implements Comparator<User> {\n      public int compare(User first, User second) {\n        return first.email.toLowerCase().compareTo(second.email.toLowerCase());\n      }\n    }\n    ```", "```java\n    import java.util.Comparator;\n    public class ByNameComparator implements Comparator<User> {\n      public int compare(User first, User second) {\n        return first.name.toLowerCase().compareTo(second.name.toLowerCase());\n      }\n    }\n    ```", "```java\n    public class SortUsers {\n      public static void main (String [] args) throws IOException {\n        Hashtable<String, User> uniqueUsers = UsersLoader.loadUsersInHashtableByEmail(args[0]);\n      }\n    }\n    ```", "```java\n    Vector<User> users = new Vector<>(uniqueUsers.values());\n    ```", "```java\n    Scanner reader = new Scanner(System.in);\n    System.out.print(\"What field you want to sort by: \");\n    String input = reader.nextLine();\n    ```", "```java\n    Comparator<User> comparator;\n    switch(input) {\n      case \"id\":\n        comparator = newByIdComparator();\n        break;\n      case \"name\":\n        comparator = new ByNameComparator();\n        break;\n      case \"email\":\n        comparator = new ByEmailComparator();\n        break;\n      default:\n        System.out.printf(\"Sorry, invalid option: %s\\n\", input);\n        return;\n    }\n    ```", "```java\n    System.out.printf(\"Sorting by %s\\n\", input);\n    Collections.sort(users, comparator);\n    ```", "```java\n    for (User user : users) {\n      System.out.printf(\"%d - %s, %s\\n\", user.id, user.name, user.email);\n    }\n    ```", "```java\n    import java.io.IOException;\n    import java.util.Collections;\n    import java.util.Comparator;\n    import java.util.Hashtable;\n    import java.util.Scanner;\n    import java.util.Vector;\n    ```", "```java\n5 unique users found.\nWhat field you want to sort by: email\nSorting by email\n30 - Jeff Bezos, jeff.bezos@amazon.com\n50 - Larry Ellison, lawrence.ellison@oracle.com\n20 - Marc Benioff, marc.benioff@salesforce.com\n40 - Sundar Pichai, sundar.pichai@google.com\n10 - Bill Gates, william.gates@microsoft.com\n```", "```java\n    public class SimpleObjLinkedList {\n    ```", "```java\n    static class Node {\n    Object data;\n    Node next;\n    Node(Object d) {\n    data = d;\n    next = null;\n    }\n    Node getNext() {\n    return next;\n    }\n    void setNext(Node node) {\n    next = node;\n    }\n    Object getData() {\n    return data;\n    }\n    }\n    ```", "```java\n    public String toString() {\n    String delim = \",\";\n    StringBuffer stringBuf = new StringBuffer();\n    if (head == null)\n    return \"LINKED LIST is empty\";    \n    Node currentNode = head;\n    while (currentNode != null) {\n    stringBuf.append(currentNode.getData());\n    currentNode = currentNode.getNext();\n    if (currentNode != null)\n    stringBuf.append(delim);\n    }\n    return stringBuf.toString();\n    }\n    ```", "```java\n    // appends the specified element to the end of this list.    \n    public void add(Object element) {\n    // create a new node\n    Node newNode = new Node(element);\n    //if head node is empty, create a new node and assign it to Head\n    //increment index and return\n    if (head == null) {\n    head = newNode;\n    return;\n    }\n    Node currentNode = head;\n    // starting at the head node\n    // move to last node\n    while (currentNode.getNext() != null) {\n    currentNode = currentNode.getNext();\n    }\n    // set the new node as next node of current\n    currentNode.setNext(newNode);\n    }\n    ```", "```java\n    public Object get(int index) {\n    // Implement the logic returns the element\n    // at the specified position in this list.\n    if (head == null || index < 0)\n    return null;        \n    if (index == 0){\n    return head.getData();\n    }    \n    Node currentNode = head.getNext();\n    for (int pos = 0; pos < index; pos++) {\n    currentNode = currentNode.getNext();\n    if (currentNode == null)\n    return null;\n    }\n    return currentNode.getData();\n    }\n    ```", "```java\n    public boolean remove(int index) {\n    if (index < 0)\n    return false;\n    if (index == 0)\n    {\n    head = null;\n    return true;\n    }\n    Node currentNode = head;\n    for (int pos = 0; pos < index-1; pos++) {\n    if (currentNode.getNext() == null)\n    return false;\n    currentNode = currentNode.getNext();\n    }    \n    currentNode.setNext(currentNode.getNext().getNext());\n    return true;\n    }\n    ```", "```java\n    Node head;    \n        public static void main(String[] args) {\n            SimpleObjLinkedList list = new SimpleObjLinkedList();\n            list.add(\"INPUT-1\");\n            list.add(\"INPUT-2\");\n            list.add(\"INPUT-3\");\n            list.add(\"INPUT-4\");\n            list.add(\"INPUT-5\");\n            System.out.println(list);\n            System.out.println(list.get(2));\n            list.remove(3);\n            System.out.println(list);\n    }\n    }\n    ```", "```java\n    [INPUT-1 ,INPUT-2 ,INPUT-3 ,INPUT-4 ,INPUT-5 ]\n    INPUT-3\n    [INPUT-1 ,INPUT-2 ,INPUT-3 ,INPUT-5 ]\n    ```", "```java\n        /**\n         * As per BST, the left most node will be lowest of the all. iterate all the\n         * left nodes until we reach empty left and get the value of it root.\n         * @return int lowestValue\n         */\n        public int getLow() {\n            Node current = parent;\n            while (current.left != null) {\n                current = current.left;\n            }\n            return current.data;\n        }\n    ```", "```java\n        /**\n         * As per BST, the right most node will be highest of the all. iterate all\n         * the right nodes until we reach empty right and get the value of it root.\n         * @return int highestValue\n         */\n        public int getHigh() {\n            Node current = parent;\n            while (current.right != null) {\n                current = current.right;\n            }\n            return current.data;\n        }\n    ```", "```java\n    /**\n         * Main program to demonstrate the BST functionality.\n         * - Adding nodes\n         * - finding High and low \n         * - Traversing left and right\n         * @param args\n         */\n        public static void main(String args[]) {\n            BinarySearchTree bst = new BinarySearchTree();\n            // adding nodes into the BST\n            bst.add(32);\n            bst.add(50);\n            bst.add(93);\n            bst.add(3);\n            bst.add(40);\n            bst.add(17);\n            bst.add(30);\n            bst.add(38);\n            bst.add(25);\n            bst.add(78);\n            bst.add(10);\n            //printing lowest and highest value in BST\n            System.out.println(\"Lowest value in BST :\" + bst.getLow());\n            System.out.println(\"Highest value in BST :\" + bst.getHigh());\n        }\n    ```", "```java\n    Lowest value in BST :3\n    Highest value in BST :93\n    ```", "```java\n        public enum DeptEnum {\n        BE(\"BACHELOR OF ENGINEERING\", 1), BCOM(\"BACHELOR OF COMMERCE\", 2), BSC(\"BACHELOR OF SCIENCE\",\n                3), BARCH(\"BACHELOR OF ARCHITECTURE\", 4), DEFAULT(\"BACHELOR\", 0);\n        private String acronym;\n        private int deptNo;\n        DeptEnum(String accr, int deptNo) {\n            this.accronym = acr;\n            this.deptNo = deptNo;\n        }\n    ```", "```java\n        public String getAcronym() {\n            return acronym;\n        }\n        public int getDeptNo() {\n            return deptNo;\n        }\n    ```", "```java\n    public static void main(String[] args) {\n    // Fetching the Enum using Enum name as string\n    DeptEnum env = DeptEnum.valueOf(\"BE\");\n    System.out.println(env.getAcronym() + \" : \" + env.getDeptNo());\n    // Printing all the values of Enum\n    for (DeptEnum e : DeptEnum.values()) {\n    System.out.println(e.getAcronym() + \" : \" + e.getDeptNo());    }\n    // Compare the two enums using the the equals() method or using //the == operator.                \n    System.out.println(DeptEnum.BE == DeptEnum.valueOf(\"BE\"));\n    }\n    }\n    ```", "```java\n    BACHELOR OF ENGINEERING : 1\n    BACHELOR OF ENGINEERING : 1\n    BACHELOR OF COMMERCE : 2\n    BACHELOR OF SCIENCE : 3\n    BACHELOR OF ARCHITECTURE : 4\n    BACHELOR : 0\n    True\n    ```", "```java\n    public enum App {\n    \u00a0\u00a0 \u00a0BE(\"BACHELOR OF ENGINEERING\", 1), BCOM(\"BACHELOR OF COMMERCE\", 2), BSC(\"BACHELOR OF SCIENCE\", 3), BARCH(\"BACHELOR OF ARCHITECTURE\", 4), DEFAULT(\"BACHELOR\", 0);\n    ```", "```java\n    \u00a0\u00a0 \u00a0private String accronym;\n    \u00a0\u00a0 \u00a0private int deptNo;\n    ```", "```java\n    \u00a0\u00a0 \u00a0App(String accr, int deptNo) {\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0this.accronym = accr;\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0this.deptNo = deptNo;\n    \u00a0\u00a0 \u00a0}\n    ```", "```java\n    \u00a0\u00a0 \u00a0public String getAccronym() {\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return accronym;\n    \u00a0\u00a0 \u00a0}\n    \u00a0\u00a0 \u00a0public int getDeptNo() {\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return deptNo;\n    \u00a0\u00a0 \u00a0}\n    ```", "```java\n    \u00a0\u00a0 \u00a0//reverse lookup\u00a0\n    \u00a0\u00a0 \u00a0public static App get(String accr) {\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0for (App e : App.values()) {\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0if (e.getAccronym().equals(accr))\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return e;\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return App.DEFAULT;\n    \u00a0\u00a0 \u00a0}\n    ```", "```java\n    \u00a0\u00a0 \u00a0public static void main(String[] args) {\n\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0// Fetching Enum with value of Enum (reverse lookup)\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0App noEnum = App.get(\"BACHELOR OF SCIENCE\");\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(noEnum.accronym + \" : \" + noEnum.deptNo);\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0// Fetching Enum with value of Enum (reverse lookup)\n\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(App.get(\"BACHELOR OF SCIENCE\").name());\n    \u00a0\u00a0 \u00a0}\n    }\n    ```", "```java\n    BACHELOR OF SCIENCE : 3\n    BSC\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    import java.util.Scanner;\n    public class Adder {\n    ```", "```java\n       public static void main(String[] args) {\n           Scanner input = new Scanner(System.in);\n           int total = 0;\n           for (int i = 0; i < 3; i++) {\n               System.out.print(\"Enter a whole number: \");\n    ```", "```java\n               boolean isValid = false;\n               while (!isValid) {\n                   if (input.hasNext()) {\n                       String line = input.nextLine();\n                       try {\n                           int newVal = Integer.parseInt(line);\n                           isValid = true;\n                           total += newVal;\n    ```", "```java\n    } catch (NumberFormatException e) {\n                           System.out.println(\"Please provide a valid whole number\");\n                       }\n                   }\n               }\n           }\n    ```", "```java\n    System.out.println(\"Total is \" + total);\n       }\n    }\n    ```", "```java\n    Enter a whole number: 10\n    Enter a whole number: 11\n    Enter a whole number: 12\n    Total is 33\n    ```", "```java\n    Enter a whole number: 10\n    Enter a whole number: hello\n    Please provide a valid whole number\n    11.1\n    Please provide a valid whole number\n    11\n    Enter a whole number: 12\n    Total is 33\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    class TooYoungException extends Exception {\n       int age;\n       String name;\n       TooYoungException(int age, String name) {\n           this.age = age;\n           this.name = name;\n       }\n    }\n    ```", "```java\n    public class RollerCoasterWithAge {\n       public static void main(String[] args) {\n           Scanner input = new Scanner(System.in);\n           while (true) {\n               System.out.print(\"Enter name of visitor: \");\n               String name = input.nextLine().trim();\n               if (name.length() == 0) {\n                   break;\n               }\n    ```", "```java\n               try {\n                   System.out.printf(\"Enter %s's age: \", name);\n                   int age = input.nextInt();\n                   input.nextLine();\n                   if (age < 15) {\n                       throw new TooYoungException(age, name);\n                   }\n                   System.out.printf(\"%s is riding the roller coaster.\\n\", name);\n    ```", "```java\n               } catch (TooYoungException e) {\n                   System.out.printf(\"%s is %d years old, which is too young to ride.\\n\", e.name, e.age);\n               }\n           }\n       }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    class TooYoungException extends Exception {\n       int age;\n       String name;\n       TooYoungException(int age, String name) {\n           this.age = age;\n           this.name = name;\n       }\n    }\n    ```", "```java\n    class TooShortException extends Exception {\n       int height;\n       String name;\n       TooShortException(int height, String name) {\n           this.height = height;\n           this.name = name;\n       }\n    }\n    ```", "```java\n    public class RollerCoasterWithAgeAndHeight {\n       public static void main(String[] args) {\n           Scanner input = new Scanner(System.in);\n           while (true) {\n               System.out.print(\"Enter name of visitor: \");\n               String name = input.nextLine().trim();\n               if (name.length() == 0) {\n                   break;\n               }\n    ```", "```java\n               try {\n                   System.out.printf(\"Enter %s's age: \", name);\n                   int age = input.nextInt();\n                   input.nextLine();\n                   if (age < 15) {\n                       throw new TooYoungException(age, name);\n                   }\n                   System.out.printf(\"Enter %s's height: \", name);\n                   int height = input.nextInt();\n                   input.nextLine();\n                   if (height < 130) {\n                       throw new TooShortException(height, name);\n                   }\n                   System.out.printf(\"%s is riding the roller coaster.\\n\", name);\n               } \n    ```", "```java\n    catch (TooYoungException e) {\n                   System.out.printf(\"%s is %d years old, which is too young to ride.\\n\", e.name, e.age);\n               } catch (TooShortException e) {\n                   System.out.printf(\"%s is %d cm tall, which is too short to ride.\\n\", e.name, e.height);\n               }\n           }\n       }\n    }\n    ```", "```java\n    import java.util.Scanner;\n    ```", "```java\n    class TooYoungException extends Exception {\n       int age;\n       String name;\n       TooYoungException(int age, String name) {\n           this.age = age;\n           this.name = name;\n       }\n    }\n    ```", "```java\n    class TooShortException extends Exception {\n       int height;\n       String name;\n       TooShortException(int height, String name) {\n           this.height = height;\n           this.name = name;\n       }\n    }\n    ```", "```java\n    public class Main {\n       public static void main(String[] args) {\n           Scanner input = new Scanner(System.in);\n           while (true) {\n               System.out.print(\"Enter name of visitor: \");\n               String name = input.nextLine().trim();\n               if (name.length() == 0) {\n                   break;\n               }\n    ```", "```java\n               try {\n                   System.out.printf(\"Enter %s's age: \", name);\n                   int age = input.nextInt();\n                   input.nextLine();\n                   if (age < 15) {\n                       throw new TooYoungException(age, name);\n                   }\n                   System.out.printf(\"Enter %s's height: \", name);\n                   int height = input.nextInt();\n                   input.nextLine();\n                   if (height < 130) {\n                       throw new TooShortException(height, name);\n                   }\n                   System.out.printf(\"%s is riding the roller coaster.\\n\", name);\n               } \n    ```", "```java\n    catch (TooYoungException e) {\n                   System.out.printf(\"%s is %d years old, which is too young to ride.\\n\", e.name, e.age);\n               } \n    ```", "```java\n    catch (TooShortException e) {\n                   System.out.printf(\"%s is %d cm tall, which is too short to ride.\\n\", e.name, e.height);\n               } \n    ```", "```java\n    finally {\n                   System.out.printf(\"Escorting %s outside the premises.\\n\", name);\n               }\n           }\n       }\n    }\n    ```"]