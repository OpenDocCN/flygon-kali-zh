["```\n{\n  \"AWSEBDockerrunVersion\": 2,\n  \"volumes\": [\n    {\n      \"name\": \"public\",\n      \"host\": {\"sourcePath\": \"/tmp/public\"}\n    }\n  ],\n  \"containerDefinitions\": [\n    {\n      \"name\": \"todobackend\",\n      \"image\": \"385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\",\n      \"essential\": true,\n      \"memoryReservation\": 395,\n      \"mountPoints\": [\n        {\n          \"sourceVolume\": \"public\",\n          \"containerPath\": \"/public\"\n        }\n      ],\n      \"environment\": [\n        {\"name\":\"DJANGO_SETTINGS_MODULE\",\"value\":\"todobackend.settings_release\"}\n      ],\n      \"command\": [\n        \"uwsgi\",\n        \"--http=0.0.0.0:8000\",\n        \"--module=todobackend.wsgi\",\n        \"--master\",\n        \"--die-on-term\",\n        \"--processes=4\",\n        \"--threads=2\",\n        \"--check-static=/public\"\n      ],\n      \"portMappings\": [\n        {\n          \"hostPort\": 80,\n          \"containerPort\": 8000\n        }\n      ]\n    },\n    {\n      \"name\": \"collectstatic\",\n      \"image\": \"385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\",\n      \"essential\": false,\n      \"memoryReservation\": 5,\n      \"mountPoints\": [\n        {\n          \"sourceVolume\": \"public\",\n          \"containerPath\": \"/public\"\n        }\n      ],\n      \"environment\": [\n        {\"name\":\"DJANGO_SETTINGS_MODULE\",\"value\":\"todobackend.settings_release\"}\n      ],\n      \"command\": [\n        \"python3\",\n        \"manage.py\",\n        \"collectstatic\",\n        \"--no-input\"\n      ]\n    }\n  ]\n}\n```", "```\ntodobackend-aws/eb> zip -9 -r app.zip . -x .DS_Store\nadding: Dockerrun.aws.json (deflated 69%)\n```", "```\n> aws iam remove-user-from-group --user-name justin.menga --group-name Users\n```", "```\n[profile docker-in-aws]\nsource_profile = docker-in-aws\nrole_arn = arn:aws:iam::385605022855:role/admin\nrole_session_name=justin.menga\nregion = us-east-1\n# mfa_serial = arn:aws:iam::385605022855:mfa/justin.menga\n```", "```\n> pip3 install awsebcli --user\nCollecting awsebcli\n...\n...\nInstalling collected packages: awsebcli\nSuccessfully installed awsebcli-3.14.2\n> eb --version\nEB CLI 3.14.2 (Python 3.6.5)\n```", "```\ntodobackend/eb> eb init --profile docker-in-aws\n\nSelect a default region\n1) us-east-1 : US East (N. Virginia)\n2) us-west-1 : US West (N. California)\n3) us-west-2 : US West (Oregon)\n4) eu-west-1 : EU (Ireland)\n5) eu-central-1 : EU (Frankfurt)\n6) ap-south-1 : Asia Pacific (Mumbai)\n7) ap-southeast-1 : Asia Pacific (Singapore)\n8) ap-southeast-2 : Asia Pacific (Sydney)\n9) ap-northeast-1 : Asia Pacific (Tokyo)\n10) ap-northeast-2 : Asia Pacific (Seoul)\n11) sa-east-1 : South America (Sao Paulo)\n12) cn-north-1 : China (Beijing)\n13) cn-northwest-1 : China (Ningxia)\n14) us-east-2 : US East (Ohio)\n15) ca-central-1 : Canada (Central)\n16) eu-west-2 : EU (London)\n17) eu-west-3 : EU (Paris)\n(default is 3): 1\n\nSelect an application to use\n1) todobackend\n2) [ Create new Application ]\n(default is 2): 1\nCannot setup CodeCommit because there is no Source Control setup, continuing with initialization\n```", "```\ntodobackend-aws/eb> cat .gitignore >> ../.gitignore todobackend-aws/eb> rm .gitignore \n```", "```\n> eb status\nEnvironment details for: Todobackend-env\n  Application name: todobackend\n  Region: us-east-1\n  Deployed Version: todobackend-source\n  Environment ID: e-amv5i5upx4\n  Platform: arn:aws:elasticbeanstalk:us-east-1::platform/multicontainer Docker running on 64bit Amazon Linux/2.11.0\n  Tier: WebServer-Standard-1.0\n  CNAME: Todobackend-env.p6z6jvd24y.us-east-1.elasticbeanstalk.com\n  Updated: 2018-07-14 23:23:28.931000+00:00\n  Status: Ready\n  Health: Red\n> eb list\n* Todobackend-env\n> eb open\n> eb logs \nRetrieving logs...\n============= i-0f636f261736facea ==============\n-------------------------------------\n/var/log/ecs/ecs-init.log\n-------------------------------------\n2018-07-14T22:41:24Z [INFO] pre-start\n2018-07-14T22:41:25Z [INFO] start\n2018-07-14T22:41:25Z [INFO] No existing agent container to remove.\n2018-07-14T22:41:25Z [INFO] Starting Amazon Elastic Container Service Agent\n\n-------------------------------------\n/var/log/eb-ecs-mgr.log\n-------------------------------------\n2018-07-14T23:20:37Z \"cpu\": \"0\",\n2018-07-14T23:20:37Z \"containers\": [\n...\n...\n```", "```\n> eb ssh --setup\nWARNING: You are about to setup SSH for environment \"Todobackend-env\". If you continue, your existing instances will have to be **terminated** and new instances will be created. The environment will be temporarily unavailable.\nTo confirm, type the environment name: Todobackend-env\n\nSelect a keypair.\n1) admin\n2) [ Create new KeyPair ]\n(default is 1): 1\nPrinting Status:\nPrinting Status:\nINFO: Environment update is starting.\nINFO: Updating environment Todobackend-env's configuration settings.\nINFO: Created Auto Scaling launch configuration named: awseb-e-amv5i5upx4-stack-AWSEBAutoScalingLaunchConfiguration-8QN6BJJX43H\nINFO: Deleted Auto Scaling launch configuration named: awseb-e-amv5i5upx4-stack-AWSEBAutoScalingLaunchConfiguration-JR6N80L37H2G\nINFO: Successfully deployed new configuration to environment.\n```", "```\n> eb ssh -e \"ssh -i ~/.ssh/admin.pem\"\nINFO: Attempting to open port 22.\nINFO: SSH port 22 open.\nINFO: Running ssh -i ~/.ssh/admin.pem ec2-user@34.239.245.78\nThe authenticity of host '34.239.245.78 (34.239.245.78)' can't be established.\nECDSA key fingerprint is SHA256:93m8hag/EtCPb5i7YrYHUXFPloaN0yUHMVFFnbMlcLE.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '34.239.245.78' (ECDSA) to the list of known hosts.\n _____ _ _ _ ____ _ _ _\n| ____| | __ _ ___| |_(_) ___| __ ) ___ __ _ _ __ ___| |_ __ _| | | __\n| _| | |/ _` / __| __| |/ __| _ \\ / _ \\/ _` | '_ \\/ __| __/ _` | | |/ /\n| |___| | (_| \\__ \\ |_| | (__| |_) | __/ (_| | | | \\__ \\ || (_| | | <\n|_____|_|\\__,_|___/\\__|_|\\___|____/ \\___|\\__,_|_| |_|___/\\__\\__,_|_|_|\\_\\\n Amazon Linux AMI\n\nThis EC2 instance is managed by AWS Elastic Beanstalk. Changes made via SSH\nWILL BE LOST if the instance is replaced by auto-scaling. For more information\non customizing your Elastic Beanstalk environment, see our documentation here:\nhttp://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html\n```", "```\n[ec2-user@ip-172-31-20-192 ~]$ docker ps\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.37/containers/json: dial unix /var/run/docker.sock: connect: permission denied\n```", "```\ntodobackend/eb> mkdir .ebextensions todobackend/eb> touch .ebextensions/init.config\n```", "```\ncommands:\n  01_add_ec2_user_to_docker_group:\n    command: usermod -aG docker ec2-user\n    ignoreErrors: true\n```", "```\ntodobackend-aws/eb> rm app.zip\ntodobackend-aws/eb> eb deploy\nUploading todobackend/app-180715_195517.zip to S3\\. This may take a while.\nUpload Complete.\nINFO: Environment update is starting.\nINFO: Deploying new version to instance(s).\nINFO: Stopping ECS task arn:aws:ecs:us-east-1:385605022855:task/dd2a2379-1b2c-4398-9f44-b7c25d338c67.\nINFO: ECS task: arn:aws:ecs:us-east-1:385605022855:task/dd2a2379-1b2c-4398-9f44-b7c25d338c67 is STOPPED.\nINFO: Starting new ECS task with awseb-Todobackend-env-amv5i5upx4:3.\nINFO: ECS task: arn:aws:ecs:us-east-1:385605022855:task/d9fa5a87-1329-401a-ba26-eb18957f5070 is RUNNING.\nINFO: New application version was deployed to running EC2 instances.\nINFO: Environment update completed successfully.\n```", "```\n[ec2-user@ip-172-31-20-192 ~]$ docker ps --format \"{{.ID}}: {{.Image}}\"\n63183a7d3e67: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\n45bf3329a686: amazon/amazon-ecs-agent:latest\n```", "```\ncommands:\n  01_add_ec2_user_to_docker_group:\n    command: usermod -aG docker ec2-user\n    ignoreErrors: true\n 02_docker_volumes:\n command: |\n mkdir -p /tmp/public\n chown -R 1000:1000 /tmp/public\n```", "```\n#!/bin/bash\nset -e -o pipefail\n\n# Inject AWS Secrets Manager Secrets\n# Read space delimited list of secret names from SECRETS environment variable\necho \"Processing secrets [${SECRETS}]...\"\nread -r -a secrets <<< \"$SECRETS\"\nfor secret in \"${secrets[@]}\"\ndo\n  vars=$(aws secretsmanager get-secret-value --secret-id $secret \\\n    --query SecretString --output text \\\n    | jq -r 'to_entries[] | \"export \\(.key)='\\''\\(.value)'\\''\"')\n  eval $vars\ndone\n\n# Inject runtime environment variables\nif [ -f /init/environment ]\nthen\n echo \"Processing environment variables from /init/environment...\"\n export $(cat /init/environment | xargs)\nfi\n\n# Run application\nexec \"$@\"\n```", "```\nMYSQL_HOST=abc.xyz.com\nMYSQL_USERNAME=todobackend\n...\n...\n```", "```\n{\n  \"AWSEBDockerrunVersion\": 2,\n  \"volumes\": [\n    {\n      \"name\": \"public\",\n      \"host\": {\"sourcePath\": \"/tmp/public\"}\n    },\n {\n \"name\": \"init\",\n \"host\": {\"sourcePath\": \"/tmp/init\"}\n }\n  ],\n  \"containerDefinitions\": [\n    {\n      \"name\": \"todobackend\",\n      \"image\": \"385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\",\n      \"essential\": true,\n      \"memoryReservation\": 395,\n      \"mountPoints\": [\n        {\n          \"sourceVolume\": \"public\",\n          \"containerPath\": \"/public\"\n        },\n{\n \"sourceVolume\": \"init\",\n \"containerPath\": \"/init\"\n }\n      ],\n      \"environment\": [\n```", "```\n{\"name\":\"DJANGO_SETTINGS_MODULE\",\"value\":\"todobackend.settings_release\"}\n      ],\n   ...\n   ...\n```", "```\n> sudo jq '.plugins.rds.env' -r \\ \n /opt/elasticbeanstalk/deploy/configuration/containerconfiguration\n{\n  \"RDS_PORT\": \"3306\",\n  \"RDS_HOSTNAME\": \"aa2axvguqnh17c.cz8cu8hmqtu1.us-east-1.rds.amazonaws.com\",\n  \"RDS_USERNAME\": \"todobackend\",\n  \"RDS_DB_NAME\": \"ebdb\",\n  \"RDS_PASSWORD\": \"some-super-secret\"\n}\n```", "```\ncommands:\n  01_add_ec2_user_to_docker_group:\n    command: usermod -aG docker ec2-user\n    ignoreErrors: true\n  02_docker_volumes:\n    command: |\n      mkdir -p /tmp/public\n mkdir -p /tmp/init\n      chown -R 1000:1000 /tmp/public\n chown -R 1000:1000 /tmp/init\n\ncontainer_commands:\n 01_rds_settings:\n command: |\n config=/opt/elasticbeanstalk/deploy/configuration/containerconfiguration\n environment=/tmp/init/environment\n echo \"MYSQL_HOST=$(jq '.plugins.rds.env.RDS_HOSTNAME' -r $config)\" >> $environment\n echo \"MYSQL_USER=$(jq '.plugins.rds.env.RDS_USERNAME' -r $config)\" >> $environment\n echo \"MYSQL_PASSWORD=$(jq '.plugins.rds.env.RDS_PASSWORD' -r $config)\" >> $environment\n echo \"MYSQL_DATABASE=$(jq '.plugins.rds.env.RDS_DB_NAME' -r $config)\" >> $environment\n chown -R 1000:1000 $environment\n```", "```\ncommands:\n  01_add_ec2_user_to_docker_group:\n    command: usermod -aG docker ec2-user\n    ignoreErrors: true\n  02_docker_volumes:\n    command: |\n      mkdir -p /tmp/public\n      mkdir -p /tmp/init\n      chown -R 1000:1000 /tmp/public\n      chown -R 1000:1000 /tmp/init\n\ncontainer_commands:\n  01_rds_settings:\n    command: |\n      config=/opt/elasticbeanstalk/deploy/configuration/containerconfiguration\n      environment=/tmp/init/environment\n      echo \"MYSQL_HOST=$(jq '.plugins.rds.env.RDS_HOSTNAME' -r $config)\" >> $environment\n      echo \"MYSQL_USER=$(jq '.plugins.rds.env.RDS_USERNAME' -r $config)\" >> $environment\n      echo \"MYSQL_PASSWORD=$(jq '.plugins.rds.env.RDS_PASSWORD' -r $config)\" >> $environment\n      echo \"MYSQL_DATABASE=$(jq '.plugins.rds.env.RDS_DB_NAME' -r $config)\" >> $environment\n      chown -R 1000:1000 $environment\n  02_migrate:\n command: |\n echo \"python3 manage.py migrate --no-input\" >> /tmp/init/commands\n chown -R 1000:1000 /tmp/init/commands\n leader_only: true\n```", "```\n#!/bin/bash\nset -e -o pipefail\n\n# Inject AWS Secrets Manager Secrets\n# Read space delimited list of secret names from SECRETS environment variable\necho \"Processing secrets [${SECRETS}]...\"\nread -r -a secrets <<< \"$SECRETS\"\nfor secret in \"${secrets[@]}\"\ndo\n  vars=$(aws secretsmanager get-secret-value --secret-id $secret \\\n    --query SecretString --output text \\\n    | jq -r 'to_entries[] | \"export \\(.key)='\\''\\(.value)'\\''\"')\n  eval $vars\ndone\n\n# Inject runtime environment variables\nif [ -f /init/environment ]\nthen\n  echo \"Processing environment variables from /init/environment...\"\n  export $(cat /init/environment | xargs)\nfi # Inject runtime init commands\nif [ -f /init/commands ]\nthen\n  echo \"Processing commands from /init/commands...\"\n  source /init/commands\nfi\n\n# Run application\nexec \"$@\"\n```", "```\n> docker ps --format \"{{.ID}}: {{.Image}}\"\n45b8cdac0c92: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend\n45bf3329a686: amazon/amazon-ecs-agent:latest\n> docker logs 45b8cdac0c92\nProcessing secrets []...\nProcessing environment variables from /init/environment...\nProcessing commands from /init/commands...\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions, todo\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying sessions.0001_initial... OK\n  Applying todo.0001_initial... OK\n[uwsgi-static] added check for /public\n*** Starting uWSGI 2.0.17 (64bit) on [Sun Jul 15 11:18:06 2018] ***\n```", "```\n> aws iam add-user-to-group --user-name justin.menga --group-name Users\n```", "```\n[profile docker-in-aws]\nsource_profile = docker-in-aws\nrole_arn = arn:aws:iam::385605022855:role/admin\nrole_session_name=justin.menga\nregion = us-east-1\nmfa_serial = arn:aws:iam::385605022855:mfa/justin.menga \n```"]