["```js\n3 + 5\n```", "```js\na > b\n```", "```js\n// Unary operator examples (one operand)\n-a\n!a\n\n// Binary operator examples (two operands)\na == b\na >= b\n\n// Ternary operator examples (three operands)\na ? b : c\n```", "```js\nfoo + + baz - - bar\n```", "```js\nfoo + (+baz) - (-bar)\n```", "```js\nconst a = { valueOf() { return 3; } };\nconst b = { valueOf() { return 5; } };\n\na + b; // => 8\na * b; // => 15\n```", "```js\n1 + 2 * 3 / 4 - 5;\n```", "```js\n(\n  1 +\n  (\n    (2 * 3)\n    / 4\n  )\n) - 5;\n```", "```js\ntypeof 1 + 2; // => \"number2\"\n```", "```js\n(typeof 1) + 2;\n```", "```js\ntypeof (1 + 2); // => \"number\"\n```", "```js\nfunction calculateRenderedWidth(width, horizontalPadding, scale) {\n  return (width + (2 * horizontalPadding)) * scale;\n}\n```", "```js\nfunction calculateRenderedWidth(width, horizontalPadding, scale) {\n  return ((width + (2 * horizontalPadding)) * scale);\n}\n```", "```js\nfunction calculateRenderedWidth(width, horizontalPadding, scale) {\n  const leftAndRightPadding = 2 * horizontalPadding;\n  const widthWithPadding = width + leftAndRightPadding;\n  const scaledWidth = widthWithPadding * scale;\n  return scaledWidth;\n}\n```", "```js\n1 + NaN; // => NaN\n1 / NaN; // => NaN\n1 * NaN; // => NaN\n-NaN;    // => NaN\n+NaN;    // => NaN\n// etc.\n```", "```js\n1 + 2; // => 3\n```", "```js\n'a' + 'b'; // => \"ab\"\n```", "```js\n123 + 'abc'; => \"123abc\"\n'abc' + 123; => \"abc123\"\n```", "```js\n[123] + 123; // => \"123123\"\n```", "```js\n555 - 100; // => 455\n```", "```js\n'5' - '3'; // => 2\n'5' - 3;   // => 2\n5 - '3';   // => 2\n```", "```js\n[5] - [3]; // => 2\n```", "```js\nString([5]); // => \"5\"\nString([3]); // => \"3\"\n```", "```js\nNumber(\"5\"); // => 5\nNumber(\"3\"); // => 3\n```", "```js\n10 / 2; // => 5\n```", "```js\n10 / 0;  // => Infinity\n10 / -0; // => -Infinity\n0 / 0;   // => NaN\n```", "```js\n1000 / Infinity; // => 0\n-1000 / Infinity; // => -0\nInfinity / Infinity; // => NaN\n```", "```js\nfunction safeDivision(a, b) {\n  const result = a / b;\n  if (!isFinite(result)) {\n    throw Error(`Division of ${a} by ${b} is unsafe`);\n  }\n  return result;\n}\n\nsafeDivision(1, 0); // ! Throws \"Division of 1 by 0 is unsafe\"\nsafeDivision(6, 2); // => 3\n```", "```js\n5 * 25; // => 125\n```", "```js\n100 * Infinity; // => Infinity\n-100 * Infinity; // => -Infinity\n```", "```js\n0 * Infinity; // => NaN\n-Infinity * -0; // => NaN\n```", "```js\n10 % 5; // => 0\n10 % 4; // => 2\n10 % 3; // => 1\n10 % 2; // => 0\n```", "```js\nInfinity % Infinity; // => NaN\nInfinity % 2; // => NaN\nNaN % 1; // => NaN\n1000 % 0; // => NaN\n```", "```js\n1000 % Infinity; // => 1000\n0.03 % Infinity; // => 0.03\n```", "```js\nfunction isEvenNumber(number) {\n  return number % 2 === 0;\n}\n\nisEvenNumber(0); // => true\nisEvenNumber(1); // => false\nisEvenNumber(2); // => true\nisEvenNumber(3); // => false\n```", "```js\n10 ** 2; // => 100\n10 ** 3; // => 1,000\n10 ** 4; // => 10,000\n```", "```js\n1000 ** 0;     // => 1\n0 ** 0;        // => 1\nInfinity ** 0; // => 1\nNaN ** 0;      // => 1\n```", "```js\n+2 ** 2;\n// SyntaxError: Unary operator used immediately\n// before exponentiation expression. Parenthesis\n// must be used to disambiguate operator precedence\n```", "```js\n+'42'; // => 42\n+({ valueOf() { return 42; } });\n```", "```js\n+({ toString() { return 'not a number'; } }); // => NaN\n```", "```js\n+({ toString() { return '12345'; } }); // => 12345\n```", "```js\n+['5e3']; // => 5000\n\n// Equivalent to:\nNumber(String(['5e3'])); // => 5000\n```", "```js\nnumber + +someObject\n```", "```js\nnumber + (+someObject)\n```", "```js\nnumber + Number(someObject)\n```", "```js\n-55;    // => -55\n-(-55); // => 55\n-'55';  // => -55\n```", "```js\nnumber - -otherNumber\n```", "```js\nnumber - (-otherNumber)\n```", "```js\n!1;    // => false\n!true; // => false\n!'hi;  // => false\n\n!0;    // => true\n!'';   // => true\n!true; // => false\n```", "```js\n!false;     // => true\n!'';        // => true\n!null;      // => true\n!undefined; // => true\n!NaN;       // => true\n!0n;        // => true\n!0;         // => true\n```", "```js\nif (!isNotEnabled) {\n  // ...\n}\n```", "```js\nif (isEnabled) {\n  // ...\n}\n```", "```js\n0 && 1; // => 0\n1 && 2; // => 2\n```", "```js\nfunction and(a, b) {\n  if (a) return b;\n  return a;\n}\n```", "```js\nif (true && 1) {\n  // Both `true` and `1` are truthy!\n}\n```", "```js\nfunction getFavoriteDrink(user) {\n  return user && user.favoriteDrink;\n}\n```", "```js\ngetFavoriteDrink({ favoriteDrink: 'Coffee' }); // => 'Coffee'\ngetFavoriteDrink({ favoriteDrink: null }); // => null\ngetFavoriteDrink(null); // => null\n```", "```js\ngetFavoriteDrink({ favoriteDrink: 0 }); // => 0\ngetFavoriteDrink(0); // => 0\ngetFavoriteDrink(NaN); // => NaN\n```", "```js\nif (isFeatureEnabled) {\n  renderFeature();\n}\n```", "```js\nisFeatureEnabled && renderFeature();\n```", "```js\n0 || 1; // => 1\n2 || 0; // => 2\n3 || 4; // => 3\n```", "```js\ntrue || thisWillNotExecute();\nfalse || thisWillExecute();\n```", "```js\nfunction or(a, b) {\n  if (a) return a;\n  return b;\n}\n```", "```js\nconst nameOfUser = user.getName() || user.getSurname() || \"Unknown\";\n```", "```js\n100 == 100;     // => true\nnull == null;   // => true\n'abc' == 'abc'; // => true\n123n == 123n;   // => true\n```", "```js\n[123] == [123]; // => false\n/123/ == /123/; // => false\n({}) == ({});   // => false\n```", "```js\nNumber(a) === Number(b)\n```", "```js\n123 == '123';  // => true\n'123' == 123;  // => true\n'1e3' == 1000; // => true\n```", "```js\nfalse == ''; // => true\n// Explanation: Number(false) is `0` and Number('') is `0`\n\ntrue == '1'; // => true\n// Explanation: Number(true) is `1` and Number('1') is `1`\n\ntrue == 'hello'; // => false\n// Explanation: Number(true) is `1` and Number('hello') is `NaN`\n\nfalse == 'hello'; // => false\n// Explanation: Number(false) is `0` and Number('hello') is `NaN`\n```", "```js\nnew Number(1) == 1; // => true\nnew Number().valueOf(); // => 1\n({ valueOf() { return 555; }) == 555; // => true\n```", "```js\n1 === 1;       // => true\nnull === null; // => true\n'hi' === 'hi'; // => true\n```", "```js\nNaN === NaN; // => false\n```", "```js\n'123' === 123; // => false\n```", "```js\nconst me = { name: 'James' };\nme === me; // => true\nme !== me; // => false\n```", "```js\nnew Number(3) === 3; // => false\n```", "```js\nNumber('123') === 123; // => true\n```", "```js\nABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz\n```", "```js\nconst intA = 'A'.charCodeAt(0); // => 65\nconst intB = 'B'.charCodeAt(0); // => 66\nintB > intA; // => true\n```", "```js\n\"AAA\" > \"AAB\"\n\"AAB\" > \"AAC\"\n```", "```js\n'coff' < 'coffee'; // => true\n```", "```js\n'A' < 'a'; // => true\n'Z' < 'z'; // => true\n'Adam' < 'adam'; // => true\n```", "```js\n'[' < ']'; // => true\n'_' < 'a'; // => true\n```", "```js\n'\u0e44\u0e01\u0e48' < '\u0e44\u0e02\u0e48'; // => true (\"chicken\" comes before \"egg\")\n'\u0e01'.charCodeAt(0); // => 3585\n'\u0e02'.charCodeAt(0); // => 3586\n```", "```js\n'\u00c2'; // => \u00c2\n'A\\u0302'; // => A\u0302\n```", "```js\n'\u00c2' > 'A\\u0302'; // => true\n```", "```js\n123 < 456; // => true\n```", "```js\nInfinity > 123; // => true\nInfinity >= Infinity; // => true\nInfinity > Infinity; // => false\n\nNaN >= NaN; // => false\nNaN > 3; // => false\nNaN < 3; // => false\n```", "```js\n// Therefore this:\n[123] < 456;\n\n// Is equivalent to this:\nNumber(String([123])) < 456\n```", "```js\nconst component = new Component();\ncomponent instanceof Component; \n```", "```js\nclass Super {}\nclass Child extends Super {}\n\nnew Super() instanceof Super; // => true\nnew Child() instanceof Child; // => true\nnew Child() instanceof Super; // => true\n```", "```js\n1 instanceof {}; // => TypeError: Right-hand side of 'instanceof' is not callable\n```", "```js\n[1, 2, 3] instanceof Array; // => true\n```", "```js\n'foo' in { foo: 123 }; // => true\n```", "```js\nconst object = {\n  'Array,coerced,into,String': 123\n};\n\n['Array', 'coerced', 'into', 'String'] in object; // => true\n```", "```js\n'0' in [1]; // => true\n0 in { '0': 'foo' }; // => true\n```", "```js\n'map' in [];     // => true\n'forEach' in []; // => true\n'concat' in [];  // => true\n```", "```js\n['wow'].hasOwnProperty('map'); // => false\n['wow'].hasOwnProperty(0);     // => true\n['wow'].hasOwnProperty('0');   // => true\n```", "```js\nfunction cautiousHasOwnProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\n```", "```js\nvalue = 1;\nvalue.property = 1;\nvalue['property'] = 1;\n```", "```js\n[name, hobby] = ['Pikachu', 'Eating Ketchup'];\nname;  // => \"Pikachu\"\nhobby: // => \"Eating Ketchup\"\n```", "```js\nvalue += 5\n```", "```js\nvalue = value + 5\n```", "```js\nsomeValue = someOtherValue;\n```", "```js\nprocessStep(nextValue += currentValue);\n```", "```js\nnextValue += currentValue;\nprocessStep(nextValue);\n```", "```js\nlet a;\n(a = 1); // => 1\n(a += 2); // => 3\n(a *= 2); // => 6\n```", "```js\nfor (let i = 0, l = arr.length; i < l; i += 1) { }\n//       \\___/  \\____________/         \\____/\n//         |          |                  |\n//    Assignment  Assignment       Additive Assignment\n```", "```js\nlet n = 0;\n\n++n; // => 1 (the newly incremented value)\nn;   // => 1 (the newly incremented value)\n\n--n; // => 0 (the newly decremented value)\nn;   // => 0 (the newly decremented value)\n```", "```js\nn += Number(n);\n```", "```js\nlet n = 'foo';\n++n; // => NaN\nn;   // => NaN\n```", "```js\nlet n = 0;\n\nn++; // => 0 (the old value)\nn;   // => 1 (the newly incremented value)\n\nn--; // => 1 (the old value)\nn;   // => 0 (the newly decremented value)\n```", "```js\nfor (let i = 0; i < array.length; i++) { ...}\nfor (let i = 0; i < array.length; ++i) { ...}\n```", "```js\nconst array = ['a', 'b', 'c'];\n\nlet i = -1;\nwhile (++i < array.length) { console.log(i); } Logs: 0, 1, 2\n\nlet x = -1;\nwhile (x++ < array.length) { console.log(x); } // Logs: 0, 1, 2, 3\n```", "```js\nlet position = { x: 123, y: 456 };\nlet { x, y } = position;\nx; // => 123\ny; // => 456\n```", "```js\nlet message = { body: 'Dear Customer...' };\n\n// Accessing `body` and assigning to a different name (`theBody`): \nconst { body: theBody } = message;\ntheBody; // => \"Dear Customer...\"\n\n// Accessing `body` and assigning to the same name (`body`):\nconst { body } = message;\nbody; // => \"Dear Customer...\"\n```", "```js\nlet [a, b, c] = [1, 2, 3];\na; // => 1\nb; // => 2\nc; // => 3\n```", "```js\nlet [a, b, c, ...others] = [1, 2, 3, 4, 5, 6, 7];\nothers; // => [4, 5, 6, 7];\n```", "```js\nlet { name, ...otherThings } = {\n name: 'James', hobby: 'JS', location: 'Europe'\n};\nname; // => \"James\"\notherThings; // => { hobby: \"JS\", location: \"Europe\" }\n```", "```js\nlet city = {\n  suburb: {\n    inhabitants: ['alice', 'steve', 'claire']\n  }\n};\n```", "```js\nlet { suburb: { inhabitants } } = city;\ninhabitants; // => [\"alice\", ...]\n```", "```js\nlet {\n  suburb: {\n    inhabitants: [firstInhabitant, ...otherInhabitants]\n  }\n} = city;\n\nfirstInhabitant; // => \"alice\"\notherInhabitants: // => [\"steve\", \"claire\"]\n```", "```js\nlet firstInhabitant = city.suburb.inhabitants[0];\n```", "```js\nconst [{someProperty:{someOtherProperty:[{foo:baz}]}}] = X;\n```", "```js\nconst baz = X[0].someProperty.someOtherProperty[0].foo;\n```", "```js\nconst street = {\n  name: 'Marshal St.'\n};\n\nstreet.name; // => \"Marshal St.\"\n```", "```js\nconst myMathConstants = { \u03c0: Math.PI };\nmyMathConstants.\u03c0; // => 3.14...\n```", "```js\nsomeObject[\"somePropertyName\"]\n```", "```js\nsomeObject[ computeSomethingHere() ]\n```", "```js\nobject[1];\nobject['a property name with whitespace'];\nobject['{[property.name.with.odd.punctuation]}'];\n```", "```js\ndelete object.property;\ndelete object[property];\n```", "```js\nconst foo = { baz: 123; };\n\nfoo.baz;        // => 123\ndelete foo.baz; // => true\nfoo.baz;        // => undefined\n'baz' in foo;   // => undefined\n```", "```js\nconst foo = {};\nObject.defineProperty(foo, 'baz', {\n  value: 123,\n  configurable: false\n});\n\nfoo.baz; // => 123\ndelete foo.baz; // => false\nfoo.baz; // => 123\n'baz' in foo; // => true\n```", "```js\n'use strict';\nlet foo = 1;\ndelete foo; // ! SyntaxError\n```", "```js\nvoid 1; // => undefined\nvoid null; // => undefined\nvoid [1, 2, 3]; // => undefined\n```", "```js\nfunction Thing() {} \nnew Thing(); // => Instance of Thing\n```", "```js\n// Conventional Constructor Definition:\nfunction Example1() {\n  this.value = 123;\n}\n\nExample1.prototype.constructor === Example1; // => true\nObject.getPrototypeOf(new Example1()) === Example1.prototype; // => true\nnew Example1().value === 123; // => true\n\n// Class Definition:\nclass Example2 {\n  constructor() { this.value = 123; }\n}\n\nExample2.prototype.constructor === Example2; // => true\nObject.getPrototypeOf(new Example2()) === Example2.prototype; // => true\nnew Example2().value === 123; // => true\n```", "```js\nconst Thing = () => {};\nnew Thing(); // ! TypeError: Thing is not a constructor\n```", "```js\nconst thing = new (function() {\n  this.name = 'Anonymous';\n});\n\nthing.name; // => \"Anonymous\"\n```", "```js\n// Both equivalent:\nnew Thing;\nnew Thing();\n```", "```js\nfunction Component() {\n  this.width = 200;\n  this.height = 200;\n}\n\nnew Component().width; // => 200\nnew Component.width; // => ! TypeError: Component.width is not a constructor\n(new Component).width; // => 200\n```", "```js\n// Bad (non-idiomatic) names for Constructors:\nnew dropdownComponent;\nnew the_dropdown_component;\nnew componentDropdown;\nnew CreateDropdownComponent;\n\n// Good (idiomatic) names for Constructors:\nnew Dropdown;\nnew DropdownComponent;\n```", "```js\nfunction addPersonWithHobbies(name, ...hobbies) {\n  name; // => \"Kirk\"\n  hobbies; // => [\"Collecting Antiques\", \"Playing Chess\", \"Drinking\"]\n}\n\naddPersonWithHobbies(\n 'Kirk',\n 'Collecting Antiques',\n 'Playing Chess',\n 'Drinking'\n);\n```", "```js\nfunction doThings(a, ...things, c, d, e) {}\n// ! SyntaxError: Rest parameter must be last formal parameter\n```", "```js\n// Deconstruction:\nlet [a, b, c, ...otherLetters] = ['a', 'b', 'c', 'd', 'e', 'f'];\na; // => \"a\"\nb; // => \"b\"\nc; // => \"c\"\notherLetters; // => [\"d\", \"e\", \"f\"]\n\n// Reconstruction:\nlet reconstructedArray = [a, b, c, ...otherLetters];\nreconstructedArray; // => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n```", "```js\nlet [...characters] = 'Hello';\ncharacters; // => [\"H\", \"e\", \"l\", \"l\", \"o\"]\n```", "```js\n// Deconstruction:\nconst {name, ...attributes} = {\n  name: 'Nissan Skyline',\n  engineSize: '2500cc',\n  year: 2009\n};\nname; // => \"Nissan Skyline\"\nattributes; // => { engineSize: \"2500cc\", year: 2009 }\n\n// Reconstruction:\nconst skyline = {name, ...attributes};\nskyline; // => { name: \"Nissan Skyline\", engineSize: \"2500cc\", year: 2009 }\n```", "```js\nlet {...stuff} = null; // => TypeError\n```", "```js\nfor (let i = 0; i < length; i++, x++, y++) {\n  // ...\n}\n```", "```js\ni++;\nx++;\ny++;\n```", "```js\nconst processThings = () => (firstThing(), secondThing());\n```", "```js\nconst processThings = () => {\n  firstThing();\n  return secondThing();\n};\n```", "```js\n(1);             // => 1\n([1, 2, 3]);     // => [1, 2, 3]\n(false && true); // => false\n((1 + 2) * 3);   // => 9\n(()=>{});        // => (A function)\n```", "```js\n// The order of operations is dictated\n// by each operator's precedence:\n1 + 2 * 3 - 5; \n\n// Here, we are forcing the order:\n(1 + 2) * (3 - 5);\n```", "```js\nfunction getComponentWidth(component) {\n  return (\n    component.getInnerWidth() +\n    component.getLeftPadding() +\n    component.getRightPadding()\n  );\n}\n```", "```js\n// WARNING: this won't work\nreturn\n  component.getInnerWidth() +\n  component.getLeftPadding() +\n  component.getRightPadding();\n```", "```js\n// Clear to humans; clear to the parser:\nreturn (\n  component.getInnerWidth() +\n  component.getLeftPadding() +\n  component.getRightPadding()\n);\n```", "```js\n00000000 00000000 00000000 11111010\n```", "```js\n1 1 1 1 1 0 1 0\n+ + + + + + + +\n| | | | | | | +---> 0 * 001 = 000\n| | | | | | +-----> 1 * 002 = 002\n| | | | | +-------> 0 * 004 = 000\n| | | | +---------> 1 * 008 = 008\n| | | +-----------> 1 * 016 = 016 \n| | +-------------> 1 * 032 = 032\n| +---------------> 1 * 064 = 064\n+-----------------> 1 * 128 = 128\n=================================\n                        SUM = 250\n```", "```js\nconst a = 250;  // 11111010\nconst b = 20;   // 00010100\na & b; // => 16 // 00010000\n```"]