- en: '1: Containers from 30,000 feet'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1：从3万英尺高空看容器
- en: Containers are definitely a *thing*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 容器绝对是一种“东西”。
- en: In this chapter we’ll get into things like; why do we have containers, what
    do they do for us, and where can we use them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将深入讨论一些问题：为什么我们需要容器，它们对我们有什么作用，以及我们在哪里可以使用它们。
- en: The bad old days
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 糟糕的旧日子
- en: Applications run businesses. If applications break, businesses break. Sometimes
    they even go bust. These statements get truer every day!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序推动业务。如果应用程序出现故障，业务也会出现故障。有时甚至会破产。这些说法每天都更加真实！
- en: Most applications run on servers. And in the past, we could only run one application
    per server. The open-systems world of Windows and Linux just didn’t have the technologies
    to safely and securely run multiple applications on the same server.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序在服务器上运行。在过去，我们只能在一台服务器上运行一个应用程序。Windows和Linux的开放系统世界没有技术能够安全地在同一台服务器上运行多个应用程序。
- en: So, the story usually went something like this… Every time the business needed
    a new application, IT would go out and buy a new server. And most of the time
    nobody knew the performance requirements of the new application! This meant IT
    had to make guesses when choosing the model and size of servers to buy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，故事通常是这样的……每当业务需要一个新的应用程序时，IT部门就会去购买一台新的服务器。而大多数情况下，没有人知道新应用程序的性能要求！这意味着在选择要购买的服务器型号和大小时，IT部门必须进行猜测。
- en: As a result, IT did the only thing it could do — it bought big fast servers
    with lots of resiliency. After all, the last thing anyone wanted, including the
    business, was under-powered servers. Under-powered servers might be unable to
    execute transactions, which might result in lost customers and lost revenue. So,
    IT usually bought big. This resulted in huge numbers of servers operating as low
    as 5-10% of their potential capacity. **A tragic waste of company capital and
    resources!**
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，IT部门只能做一件事——购买具有很强韧性的大型服务器。毕竟，任何人都不想要的最后一件事，包括企业在内，就是服务器性能不足。性能不足的服务器可能无法执行交易，这可能导致失去客户和收入。因此，IT部门通常会购买大型服务器。这导致大量服务器的潜在容量只有5-10%左右。**这是对公司资本和资源的悲剧性浪费！**
- en: Hello VMware!
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你好，VMware！
- en: Amid all of this, VMware, Inc. gave the world a gift — the virtual machine (VM).
    And almost overnight, the world changed into a much better place! We finally had
    a technology that would let us safely and securely run multiple business applications
    on a single server. Cue wild celebrations!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一切之中，VMware公司给世界带来了一份礼物——虚拟机（VM）。几乎一夜之间，世界变成了一个更美好的地方！我们终于有了一种技术，可以让我们在单个服务器上安全地运行多个业务应用程序。庆祝活动开始了！
- en: This was a game changer! IT no longer needed to procure a brand new oversized
    server every time the business asked for a new application. More often than not,
    they could run new apps on existing servers that were sitting around with spare
    capacity.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了游戏规则！IT部门不再需要在业务要求新应用程序时每次都采购全新的超大型服务器。往往情况是，他们可以在现有的服务器上运行新的应用程序，这些服务器原本还有剩余的容量。
- en: All of a sudden, we could squeeze massive amounts of value out of existing corporate
    assets, such as servers, resulting in a lot more bang for the company’s buck ($).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 突然之间，我们可以从现有的企业资产中挤出大量的价值，比如服务器，这样公司的投资就能得到更大的回报。
- en: VMwarts
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 虚拟机的缺点
- en: But… and there’s always a *but!* As great as VMs are, they’re far from perfect!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是……总会有一个“但是”！虚拟机虽然很棒，但远非完美！
- en: The fact that every VM requires its own dedicated OS is a major flaw. Every
    OS consumes CPU, RAM and storage that could otherwise be used to power more applications.
    Every OS needs patching and monitoring. And in some cases, every OS requires a
    license. All of this is a waste of op-ex and cap-ex.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个虚拟机都需要专用的操作系统是一个重大缺陷。每个操作系统都会消耗CPU、RAM和存储空间，否则这些资源本可以用来运行更多的应用程序。每个操作系统都需要打补丁和监控。而且在某些情况下，每个操作系统都需要许可证。所有这些都是运营支出和资本支出的浪费。
- en: The VM model has other challenges too. VMs are slow to boot, and portability
    isn’t great — migrating and moving VM workloads between hypervisors and cloud
    platforms is harder than it needs to be.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: VM模型也面临其他挑战。虚拟机启动速度慢，可移植性不佳——在不同的虚拟化平台和云平台之间迁移和移动虚拟机工作负载比预期的更困难。
- en: Hello Containers!
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你好，容器！
- en: For a long time, the big web-scale players, like Google, have been using container
    technologies to address the shortcomings of the VM model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，像谷歌这样的大型网络规模的参与者一直在使用容器技术来解决虚拟机模型的缺陷。
- en: 'In the container model, the container is roughly analogous to the VM. The major
    difference is that every container does not require its own full-blown OS. In
    fact, all containers on a single host share a single OS. This frees up huge amounts
    of system resources such as CPU, RAM, and storage. It also reduces potential licensing
    costs and reduces the overhead of OS patching and other maintenance. Net result:
    savings on the cap-ex and op-ex fronts.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器模型中，容器大致类似于虚拟机。主要区别在于每个容器不需要自己的完整操作系统。事实上，单个主机上的所有容器共享一个操作系统。这释放了大量的系统资源，如CPU、RAM和存储。它还减少了潜在的许可成本，并减少了操作系统补丁和其他维护的开销。最终结果：在资本支出和运营支出方面节省了开支。
- en: Containers are also fast to start and ultra-portable. Moving container workloads
    from your laptop, to the cloud, and then to VMs or bare metal in your data center,
    is a breeze.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 容器启动也很快，而且具有超高的可移植性。将容器工作负载从笔记本电脑移动到云端，然后再移动到虚拟机或裸金属在数据中心中都非常容易。
- en: Linux containers
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux容器
- en: Modern containers started in the Linux world, and are the product of an immense
    amount of work from a wide variety of people, over a long period of time. Just
    as one example, Google LLC has contributed many container-related technologies
    to the Linux kernel. Without these, and other contributions, we wouldn’t have
    modern containers today.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现代容器起源于Linux世界，是许多人长期努力工作的成果。举一个例子，Google LLC为Linux内核贡献了许多与容器相关的技术。没有这些以及其他的贡献，我们今天就不会有现代容器。
- en: Some of the major technologies that enabled the massive growth of containers
    in recent years include; **kernel namespaces**, **control groups**, **union filesystems**,
    and of course **Docker**. To re-emphasize what was said earlier — the modern container
    ecosystem is deeply indebted to the many individuals and organizations that laid
    the strong foundations that we currently build on. Thank you!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来推动容器大规模增长的一些主要技术包括：**内核命名空间**、**控制组**、**联合文件系统**，当然还有**Docker**。再次强调之前所说的——现代容器生态系统深受许多个人和组织的影响，他们为我们当前所建立的坚实基础做出了巨大贡献。谢谢！
- en: Despite all of this, containers remained complex and outside of the reach of
    most organizations. It wasn’t until Docker came along that containers were effectively
    democratized and accessible to the masses.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，容器仍然复杂，并且超出了大多数组织的范围。直到Docker出现，容器才真正实现了民主化，并且为大众所能接触。
- en: '* There are many operating system virtualization technologies similar to containers
    that pre-date Docker and modern containers. Some even date back to System/360
    on the Mainframe. BSD Jails and Solaris Zones are some other well-known examples
    of Unix-type container technologies. However, in this book we are restricting
    our conversation and comments to *modern containers* that have been made popular
    by Docker.'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* 有许多类似于容器的操作系统虚拟化技术，早于Docker和现代容器。有些甚至可以追溯到主机上的System/360。BSD Jails和Solaris
    Zones是一些其他众所周知的Unix类型容器技术的例子。然而，在本书中，我们将限制我们的讨论和评论在Docker所推广的*现代容器*上。'
- en: Hello Docker!
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你好，Docker！
- en: We’ll talk about Docker in a bit more detail in the next chapter. But for now,
    it’s enough to say that Docker was the magic that made Linux containers usable
    for mere mortals. Put another way, Docker, Inc. made containers simple!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章更详细地讨论Docker。但现在，可以说Docker是使Linux容器对普通人可用的魔法。换句话说，Docker，Inc.让容器变得简单！
- en: Windows containers
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows容器
- en: Over the past few years, Microsoft Corp. has worked extremely hard to bring
    Docker and container technologies to the Windows platform.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，微软公司非常努力地将Docker和容器技术带到Windows平台上。
- en: At the time of writing, Windows containers are available on the Windows 10 and
    Windows Server 2016 platforms. In achieving this, Microsoft has worked closely
    with Docker, Inc. and the community.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Windows容器可用于Windows 10和Windows Server 2016平台。在实现这一点时，微软与Docker，Inc.和社区密切合作。
- en: The core Windows kernel technologies required to implement containers are collectively
    referred to as *Windows Containers*. The user-space tooling to work with these
    *Windows Containers* is Docker. This makes the Docker experience on Windows almost
    exactly the same as Docker on Linux. This way developers and sysadmins familiar
    with the Docker toolset from the Linux platform will feel at home using Windows
    containers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实现容器所需的Windows核心内核技术统称为*Windows容器*。用于处理这些*Windows容器*的用户空间工具是Docker。这使得Windows上的Docker体验几乎与Linux上的Docker完全相同。这样，熟悉来自Linux平台的Docker工具集的开发人员和系统管理员将感到在使用Windows容器时如同在家一样。
- en: '**This revision of the book includes Linux and Windows examples for many of
    the lab exercises cited throughout the book.**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**本书的修订版本包括了许多实验练习的Linux和Windows示例。**'
- en: Windows containers vs Linux containers
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows容器与Linux容器
- en: It’s vital to understand that a running container shares the kernel of the host
    machine it is running on. This means that a containerized app designed to run
    on a host with a Windows kernel will not run on a Linux host. This means that
    you can think of it like this at a high level — Windows containers require a Windows
    Host, and Linux containers require a Linux host. However, it’s not that simple…
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，运行的容器共享其所在主机的内核。这意味着设计为在具有Windows内核的主机上运行的容器化应用程序将无法在Linux主机上运行。这意味着您可以在高层次上这样考虑——Windows容器需要Windows主机，而Linux容器需要Linux主机。然而，事情并不那么简单…
- en: At the time of writing, it is possible to run Linux containers on Windows machines.
    For example, *Docker for Windows* (a product offering from Docker, Inc. designed
    for Windows 10) can switch modes between *Windows containers* and *Linux containers*.
    This is an area that is developing fast and you should consult the Docker documentation
    for the latest.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，可以在Windows机器上运行Linux容器。例如，*Docker for Windows*（Docker，Inc.为Windows 10设计的产品）可以在*Windows容器*和*Linux容器*之间切换模式。这是一个发展迅速的领域，您应该查阅Docker文档以获取最新信息。
- en: What about Mac containers?
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac容器呢？
- en: There is currently no such thing as Mac containers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有Mac容器这样的东西。
- en: However, you can run Linux containers on your Mac using *Docker for Mac*. This
    works by seamlessly running your containers inside of a lightweight Linux VM on
    your Mac. It’s extremely popular with developers, who can easily develop and test
    their Linux containers on their Mac.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以使用*Docker for Mac*在Mac上运行Linux容器。这通过在Mac上无缝运行您的容器在轻量级Linux虚拟机内实现。这在开发人员中非常受欢迎，他们可以轻松地在Mac上开发和测试他们的Linux容器。
- en: What about Kubernetes
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes呢？
- en: Kubernetes is an open-source project out of Google that has quickly emerged
    as the leading orchestrator of containerized apps. That’s just a fancy way of
    saying *Kubernetes is an important piece of software that helps us deploy our
    containerized apps and keep them running*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是Google的一个开源项目，迅速成为容器化应用程序的主要编排器。这只是一种花哨的说法，*Kubernetes是一个重要的软件，帮助我们部署我们的容器化应用程序并使其保持运行*。
- en: At the time of writing, Kubernetes uses Docker as its default container runtime
    — the piece of Kubernetes that starts and stops containers, as well as pulls images
    etc. However, Kubernetes has a pluggable container runtime interface called the
    CRI. This makes it easy to swap-out Docker for a different container runtime.
    In the future, Docker might be replaced by `containerd` as the default container
    runtime in Kubernetes. More on `containerd` later in the book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Kubernetes使用Docker作为其默认容器运行时 - Kubernetes的一部分，用于启动和停止容器，以及拉取镜像等。然而，Kubernetes具有可插拔的容器运行时接口，称为CRI。这使得很容易将Docker替换为不同的容器运行时。在未来，Docker可能会被`containerd`替换为Kubernetes中的默认容器运行时。本书后面会更多介绍`containerd`。
- en: The important thing to know about Kubernetes, at this stage, is that it’s a
    higher-level platform than Docker, and it currently uses Docker for its low-level
    container-related operations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，关于Kubernetes需要知道的重要事情是，它是一个比Docker更高级的平台，目前使用Docker进行其低级容器相关操作。
- en: '![](images/figure1-1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](images/figure1-1.png)'
- en: Check out my Kubernetes book and my **Getting Started with Kubernetes** [video
    training course](https://app.pluralsight.com/library/courses/getting-started-kubernetes/)
    for more info on Kubernetes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我的Kubernetes书和我的**Getting Started with Kubernetes** [视频培训课程](https://app.pluralsight.com/library/courses/getting-started-kubernetes/)，了解更多关于Kubernetes的信息。
- en: Chapter Summary
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节总结
- en: We used to live in a world where every time the business wanted a new application,
    we had to buy a brand-new server for it. Then VMware came along and enabled IT
    departments to drive more value out of new and existing company IT assets. But
    as good as VMware and the VM model is, it’s not perfect. Following the success
    of VMware and hypervisors came a newer more efficient and lightweight virtualization
    technology called containers. But containers were initially hard to implement
    and were only found in the data centers of web giants that had Linux kernel engineers
    on staff. Then along came Docker Inc. and suddenly container virtualization technologies
    were available to the masses.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾经生活在这样一个世界中，每当业务需要一个新的应用程序时，我们就必须为其购买全新的服务器。然后VMware出现了，使IT部门能够从新的和现有的公司IT资产中获得更多价值。但是，尽管VMware和虚拟机模型很好，但并不完美。在VMware和虚拟化技术的成功之后，出现了一种更新更高效、轻量级的虚拟化技术，称为容器。但最初容器很难实现，并且只在拥有Linux内核工程师的网络巨头的数据中心中找到。然后Docker
    Inc.出现了，突然之间容器虚拟化技术就面向大众了。
- en: Speaking of Docker… let’s go find who, what, and why Docker is!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 说到Docker...让我们去找出Docker是谁、是什么以及为什么！
