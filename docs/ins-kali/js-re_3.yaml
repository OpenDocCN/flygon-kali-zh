- en: Chapter 3. Special Characters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。特殊字符
- en: In this chapter, we will be taking a look at some special characters and some
    more advanced techniques that will help us create more detailed **Regex** patterns.
    We will also slowly transition from using our Regex testing environment, and go
    back to using standard JavaScript to build more *complete* real-world examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一些特殊字符和一些更高级的技术，这些将帮助我们创建更详细的**正则表达式**模式。我们还将慢慢过渡到使用标准JavaScript来构建更*完整*的真实世界示例，而不是使用我们的正则表达式测试环境。
- en: Before we get ahead of ourselves, there are still a couple things we can learn
    using our current setup, starting with some constraints.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们超前之前，我们还有一些事情可以使用我们当前的设置来学习，首先是一些约束。
- en: 'In this chapter ,we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Defining boundaries for a Regex
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为正则表达式定义边界
- en: Defining nongreedy quantifiers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义非贪婪量词
- en: Defining Regex with groups
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分组定义正则表达式
- en: Nonvisual constraints
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非可视约束
- en: Until now, all the constraints we have been putting on our patterns had to do
    with characters that could or couldn't be displayed, but Regex provides a number
    of positional constraints, which allow you to filter out some false positives.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们对模式施加的所有约束都与可以显示或不显示的字符有关，但是正则表达式提供了许多位置约束，允许您过滤掉一些误报。
- en: Matching the beginning and end of an input
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配输入的开头和结尾
- en: 'The first such set is the *start* and *end* of string matchers. Using the (`^`)
    *caret character* to match the start of a string and the (`$`) dollar sign to
    match the end, we can force a pattern to be positioned in these locations, for
    example, you can add the dollar sign at the end of a word to make sure that it
    is the last thing in the provided string. In the next example, I used the `/^word|word$/g`
    pattern to match an occurrence of `word`, which either starts or ends a string.
    The following image exemplifies the match of the regular expression when given
    a **Text** input:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个这样的集合是*开始*和*结束*的字符串匹配器。使用(`^`) *插入符号*来匹配字符串的开头和(`$`)美元符号来匹配结尾，我们可以强制模式定位在这些位置，例如，您可以在单词的末尾添加美元符号，以确保它是提供的字符串中的最后一件事。在下一个例子中，我使用了`/^word|word$/g`模式来匹配`word`的出现，它可以是字符串的开头或结尾。下面的图片展示了给定**文本**输入时正则表达式的匹配：
- en: '![Matching the beginning and end of an input](img/2258OS_03_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![匹配输入的开头和结尾](img/2258OS_03_01.jpg)'
- en: Using both the start and end character together assure that your pattern is
    the only thing in the string. For example if you have a `/world/` pattern, it
    will match both the `world` string as well as any other string which merely contains
    `world` in it, such as `hello world`. However, if you wanted to make sure that
    the string only contains `world`, you can modify the pattern to be `/^world$/`.
    This means that Regex will attempt to find the pattern which, both, begins the
    string and ends it. This, of course, will only happen if it is the only thing
    in the string.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 同时使用开始和结束字符可以确保您的模式是字符串中唯一的内容。例如，如果您有一个`/world/`模式，它将匹配`world`字符串以及任何其他仅包含`world`的字符串，例如`hello
    world`。但是，如果您想确保字符串只包含`world`，您可以修改模式为`/^world$/`。这意味着正则表达式将尝试找到既开始字符串又结束字符串的模式。当然，这只会发生在它是字符串中的唯一内容时。
- en: 'This is the default behavior but it is worth mentioning that this isn''t always
    the case. In the previous chapter, we saw the `m` or multiline flag, and what
    this flag does is that it makes the caret character match not only the beginning
    of the string but also the beginning of any line. The same goes for the dollar
    sign: it will match the end of each line instead of the end of the entire string.
    So, it really comes down to what you need in a given situation.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认行为，但值得一提的是，情况并非总是如此。在前一章中，我们看到了`m`或多行标志，这个标志的作用是使插入符号不仅匹配字符串的开头，还匹配任何行的开头。美元符号也是如此：它将匹配每行的结尾，而不是整个字符串的结尾。因此，这实际上取决于您在特定情况下的需求。
- en: Matching word boundaries
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配单词边界
- en: '**Word boundaries** are very similar to the **string boundaries** we just saw,
    except that they work in the context of a single word. For example, we want to
    match `can`, but this refers to `can` alone, and not `can` from `candy`. We saw
    in the previous example, if you just type a pattern, such as `/can/g`, you will
    get matches for `can` even if it''s a part of another word, for example, in a
    situation where the user typed `candy`. Using a backslash (`\b`) character, we
    can denote a word boundary (either in the beginning or at the end), so that we
    can fix this problem using a pattern similar to `/\bcan\b/g`, as shown here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**单词边界**与我们刚刚看到的**字符串边界**非常相似，只是它们在单词的上下文中起作用。例如，我们想匹配`can`，但这指的是单独的`can`，而不是`candy`中的`can`。我们在前面的例子中看到，如果您只输入一个模式，比如`/can/g`，即使它是另一个单词的一部分，也会匹配`can`，例如，在用户输入`candy`的情况下。使用反斜杠(`\b`)字符，我们可以表示一个单词边界（在开头或结尾），这样我们就可以使用类似`/\bcan\b/g`的模式来解决这个问题，如下所示：'
- en: '![Matching word boundaries](img/2258OS_03_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![匹配单词边界](img/2258OS_03_02.jpg)'
- en: Matching nonword boundaries
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配非单词边界
- en: 'Paired with the `\b` character, we have the `\B` symbol, which is its inverse.
    Similar to what we have seen on multiple occasions, a capital symbol usually refers
    to the opposite functionality, and is no exception. The uppercase version will
    put a constraint on the pattern that limits it from being at the edge of word.
    Now, we''ll run the same example text, except with `/can\B/g`, which will swap
    the matches; this is because the `n` in `can` is at its boundary:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与`\b`字符配对的是`\B`符号，它是其相反的。与我们在多个场合看到的类似，大写符号通常指相反的功能，并且也不例外。大写版本将对限制模式的约束放在单词边缘。现在，我们将运行相同的示例文本，只是用`/can\B/g`，这将交换匹配；这是因为`can`中的`n`处于其边界：
- en: '![Matching nonword boundaries](img/2258OS_03_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![匹配非单词边界](img/2258OS_03_03.jpg)'
- en: Matching a whitespace character
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配空白字符
- en: 'You can match a whitespace character using the backslash `s` character, and
    it matches things such as spaces and tabs. It is similar to a word boundary, but
    it does have some distinctions. First of all, a word boundary matches the end
    of a word even if it is the last word in a pattern, unlike the whitespace character,
    which would require an extra space. So, `/foo\b/` would match `foo`. However,
    `/foo\s/` would not, because there is no following space character at the end
    of the string. Another difference is that a boundary matcher will count something
    similar to a period or dash as an actual boundary, though the whitespace character
    will only match a string if there is a whitespace:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以使用反斜杠`s`字符匹配空白字符，并且它匹配诸如空格和制表符之类的内容。它类似于单词边界，但有一些区别。首先，单词边界匹配单词的结尾，即使它是模式中的最后一个单词，而空白字符则需要额外的空格。因此，`/foo\b/`将匹配`foo`。但是，`/foo\s/`不会，因为字符串末尾没有后续空格字符。另一个区别是边界匹配器将计算类似句号或破折号之类的内容作为实际边界，而空白字符只有在有空格时才匹配字符串： '
- en: '![Matching a whitespace character](img/2258OS_03_04.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![匹配空白字符](img/2258OS_03_04.jpg)'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: It's worth mentioning that the whitespace character has an `\S` inverse matcher,
    which will match anything but a whitespace character.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，空白字符具有一个`\S`反向匹配器，它将匹配除空白字符之外的任何内容。
- en: Defining nongreedy quantifiers
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义非贪婪量词
- en: 'In the previous section, we had a look at multipliers, where you can specify
    that a pattern should be repeated a certain number of times. By default, JavaScript
    will try and match the largest number of characters possible, which means that
    it will be a **greedy match**. Let''s say we have a pattern similar to `/\d{1,4}/`
    that will match any text and has between one and four numbers. By default, if
    we use `124582948`, it will return `1245`, as it will take the maximum number
    of options (greedy approach). However, if we want, we can add the (`?`) question
    mark operator to tell JavaScript not to use greedy matching and instead return
    the minimum number of characters as possible:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看了看乘法器，您可以指定一个模式应该重复一定次数。默认情况下，JavaScript会尝试匹配尽可能多的字符，这意味着它将是一个贪婪匹配。假设我们有一个类似`/\d{1,4}/`的模式，它将匹配任何文本，并且有1到4个数字。默认情况下，如果我们使用`124582948`，它将返回`1245`，因为它将采用最大数量的选项（贪婪方法）。但是，如果我们想要，我们可以添加（`?`）问号运算符，告诉JavaScript不要使用贪婪匹配，而是尽可能返回最少数量的字符：
- en: '![Defining nongreedy quantifiers](img/2258OS_03_05.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![定义非贪婪量词](img/2258OS_03_05.jpg)'
- en: 'Greedy matching is something that makes it difficult to find bugs in your code.
    Consider the following example text:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 贪婪匹配是使在代码中查找错误变得困难的东西。考虑以下示例文本：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we wanted to extract the class, you might think of writing a pattern in
    this way:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要提取类，您可能会考虑以这种方式编写模式：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The problem here is that the `*` character will attempt to match as many characters
    as possible, so instead of getting `container` like we wanted, we would get `"container"
    id="main"`. Since the dot character will match anything, the regular expression
    will match from the first quotation mark before the `class` word to the closing
    quotation mark right before the `id` word. To fix this, we can use the ungreedy
    question mark and change the pattern to `/class=".*?"/`. This will cause it to
    stop at the minimum required match, which is when we reach the first quotation
    mark:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是`*`字符将尝试匹配尽可能多的字符，所以我们不会得到像我们想要的`container`，而是会得到`"container" id="main"`。由于点字符将匹配任何内容，正则表达式将从`class`单词之前的第一个引号匹配到`id`单词之前的右引号。为了解决这个问题，我们可以使用非贪婪问号并将模式更改为`/class=".*?"/`。这将导致它在达到第一个引号时停止，这是最小要求的匹配：
- en: '![Defining nongreedy quantifiers](img/2258OS_03_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![定义非贪婪量词](img/2258OS_03_06.jpg)'
- en: Matching groups in Regex
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在正则表达式中匹配组
- en: The last main topic that I have left out until now is **groups**. However, in
    order to work with groups, we have to move back into a JavaScript console, as
    this will provide the actual results object that we will need to look at.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我到目前为止留下的最后一个主题是**组**。但是，为了使用组，我们必须回到JavaScript控制台，因为这将提供我们需要查看的实际结果对象。
- en: 'Groups show how we can extract data from the input provided. Without groups,
    you can check whether there is a match, or if a given input text follows a specific
    pattern. However, you can''t take advantage of vague definitions to extract relevant
    content. The syntax is fairly simple: you wrap the pattern you want inside brackets,
    and then this part of the expression will be extracted in its own property.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 组显示了我们如何从提供的输入中提取数据。没有组，您可以检查是否有匹配，或者给定的输入文本是否遵循特定模式。但是，您无法利用模糊的定义来提取相关内容。语法非常简单：您将要提取的模式包装在括号内，然后表达式的这部分将被提取到自己的属性中。
- en: Grouping characters together to create a clause
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将字符分组以创建从句
- en: Let's start with something basic—a person's name—in standard JavaScript. If
    you had a string with someone's name, you would probably split it by the space
    character and check whether there are two or three components in it. In case there
    are two, the first would consist of the first name and the second would consist
    of the last name; however, if there are three components, then the second component
    would include the middle name and the third would include the last name.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些基本的东西开始——标准JavaScript中的人名。如果您有一个包含某人姓名的字符串，您可能会按空格字符拆分它，并检查其中是否有两个或三个组件。如果有两个，第一个将包括名字，第二个将包括姓氏；但是，如果有三个组件，那么第二个组件将包括中间名，第三个将包括姓氏。
- en: 'Instead of imposing a condition like this, we can create a simple pattern as
    shown:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与强加条件不同，我们可以创建一个简单的模式，如下所示：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first group contains a mandatory non-space word. The plus sign will again
    multiply the pattern indefinitely. Next, we want a space with a second word; this
    time, I've used the asterisk to denote that it could be of length zero, and after
    this, we have another space, though, this time, it's optional.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组包含一个必需的非空单词。加号将再次无限制地增加模式。接下来，我们想要一个带有第二个单词的空格；这次，我使用了星号来表示它的长度可以为零，并且在此之后，我们有另一个空格，尽管这次是可选的。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If there is no middle name, there won't be a second space, followed by a word
    boundary. This is because the space is optional, but we still want to make sure
    that a new word is present, followed by the final word.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有中间名，就不会有第二个空格，后面跟着一个单词边界。这是因为空格是可选的，但我们仍然希望确保存在一个新单词，然后是最后一个单词。
- en: 'Now, open up a JavaScript console (in Chrome) and create a variable for this
    pattern:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开JavaScript控制台（在Chrome中）并为此模式创建一个变量：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, try running the `exec` command on this pattern with different names,
    with and without a middle name, and take a look at this resulting output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，尝试对此模式使用不同的名称运行`exec`命令，有中间名和没有中间名，并查看结果输出：
- en: '![Grouping characters together to create a clause](img/2258OS_03_07.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![将字符分组在一起以创建从句](img/2258OS_03_07.jpg)'
- en: 'Whether the string has a middle name or not, it will have the three patterns
    that we can assign to variables, therefore, we can use something else instead
    of this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 无论字符串是否有中间名，它都将具有我们可以分配给变量的三个模式，因此，我们可以使用其他东西来代替这个：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can remove the conditional statements (`if`-`else`) from the preceding code
    and write the code something similar to this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从前面的代码中删除条件语句（`if`-`else`），并编写类似于此的代码：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the middle name is left out, our expression will still have the group, it
    will just be an empty string.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略中间名，我们的表达式仍将具有该组，只是一个空字符串。
- en: Another thing worth mentioning is that the indexes of the groups start at `1`,
    so the first group is in the result `1` index, and the result `0` index holds
    the entire match.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得一提的事情是，组的索引从`1`开始，因此第一组在结果`1`索引中，结果`0`索引保存整个匹配。
- en: Capture and noncapture groups
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捕获和非捕获组
- en: 'In the first chapter, we saw an example where we wanted to parse some kind
    of **XML** tokens, and we said that we needed an extra constraint where the closing
    tag had to match the opening tag for it to be valid. So, for example, this should
    be parsed:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们看到了一个示例，我们想要解析某种**XML**标记，并且我们说我们需要一个额外的约束条件，即关闭标记必须与开放标记匹配才能有效。因此，例如，这应该被解析：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, this should not be parsed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，这不应该被解析：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since the closing tag doesn't match the opening tag, the way to reference previous
    groups in your pattern is by using a backslash character, followed by the group's
    index number. As an example, let's write a small script that will accept a line
    delimited series of **XML** tags, and then convert it into a JavaScript object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于闭合标签与开放标签不匹配，引用模式中先前组的方法是使用反斜杠字符，后跟组的索引号。例如，让我们编写一个小脚本，该脚本将接受一系列以**XML**标签分隔的行，然后将其转换为JavaScript对象。
- en: 'To start with, let''s create an input string:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个输入字符串：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we have four properties, but the last property does not have a valid
    closing tag, so it should not be picked up. Next, we will cycle through this pattern
    and set the properties of a `data` object:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有四个属性，但是最后一个属性没有有效的闭合标签，所以不应该被捕获。接下来，我们将循环遍历这个模式，并设置一个`data`对象的属性：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we output data in a console, you will see that we do, in fact, get three
    valid properties:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在控制台中输出数据，您将看到我们实际上获得了三个有效属性：
- en: '![Capture and noncapture groups](img/2258OS_03_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![捕获和非捕获组](img/2258OS_03_08.jpg)'
- en: However, let's take a moment to examine the pattern; we look for some opening
    tags with a name inside them, and we then pick up all the characters, except for
    an opening triangle brace using a negated range. After this, we look for a closing
    tag using a (`\1`) back reference to make sure it matches. You may have also realized
    that we needed to escape the forward slash, so it wouldn't think we were closing
    the Regexp pattern.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，让我们花一点时间来检查这个模式；我们寻找一些带有名称的开放标签，然后捡起除了使用否定范围的开放三角括号之外的所有字符。之后，我们使用（`\1`）反向引用来查找闭合标签以确保其匹配。您可能还意识到我们需要转义斜杠，以便它不会认为我们正在关闭Regexp模式。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A backreference, when added to the end of a regular expression pattern, allows
    you to back reference a sub-pattern within a pattern, so that the value of the
    sub-pattern is remembered and used as part of the matching. For example, `/(no)\1/`
    matches `nono` in `nono`. `\1` and is replaced with the value of the first sub-pattern
    within a pattern, or with (`no`), so as to form the final pattern.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当将反向引用添加到正则表达式模式的末尾时，允许您在模式内部引用子模式，以便记住子模式的值并将其用作匹配的一部分。例如，`/(no)\1/`在`nono`中匹配`nono`。`\1`将被替换为模式内的第一个子模式的值，或者(`no`)，从而形成最终模式。
- en: All the groups we have seen so far have been **capture groups**, and they tell
    Regexp to extract this portion of the pattern into its own variable. However,
    there are other groups or uses for brackets that can be made to achieve even more
    functionality, the first of these is a non capture group.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的所有组都是**捕获组**，它们告诉Regexp将模式的这一部分提取到自己的变量中。但是，还有其他组或括号的用途可以实现更多的功能，其中之一是非捕获组。
- en: Matching non capture groups
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 匹配非捕获组
- en: 'A **non capture group** groups a part of a pattern but it does not actually
    extract this data into the results array, or use it in back referencing. One benefit
    of this is that it allows you to use character modifiers on full sections in your
    pattern. For example, if we want to get a pattern that repeats `world` indefinitely,
    we can write it as this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**非捕获组**将模式的一部分分组，但实际上不会将这些数据提取到结果数组中，也不会在反向引用中使用它。其中一个好处是它允许您在模式中的完整部分上使用字符修饰符。例如，如果我们想要获得一个无限重复`world`的模式，我们可以将其写成这样：'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will match `world` as well as `worldworldworld` and so on. The syntax for
    a noncapture group is similar to a standard group, except that you start it with
    a question mark and a (`?:`) colon. Grouping it allows us to consider the entire
    thing as a single object, and use modifiers, which usually only work on individual
    characters.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将匹配`world`以及`worldworldworld`等等。非捕获组的语法类似于标准组，只是你要用问号和（`?:`）冒号开始。对它进行分组使我们能够将整个内容视为单个对象，并使用修饰符，这些修饰符通常只适用于单个字符。
- en: 'The other most common use for noncapture groups (which can be done in capture
    groups as well) works in conjunction with a pipe character. A pipe character allows
    you to insert multiple options one after the other inside your pattern, for example,
    in a situation where we want to match either `yes` or `no`, we can create this
    pattern:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 非捕获组的另一个最常见用途（也可以在捕获组中完成）是与管道字符一起使用。管道字符允许您在模式中依次插入多个选项，例如，在我们想要匹配`yes`或`no`的情况下，我们可以创建这个模式：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Most of the time, though, this set of options will only be a small piece of
    your pattern. For example, if we are parsing log messages, we may want to extract
    the log level and the message. The log level can be one of only a few options
    (such as `debug`, `info`, `error`, and so on), but the message will always be
    there. Now, you can write a pattern instead of this one:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数情况下，这组选项只会是模式的一小部分。例如，如果我们正在解析日志消息，我们可能想要提取日志级别和消息。日志级别只能是几个选项之一（例如`debug`、`info`、`error`等），但消息总是存在的。现在，您可以编写一个模式而不是这个：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can extract the common part into its own noncapture group:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将共同部分提取到自己的非捕获组中：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By doing this we remove a lot of the duplicate code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们消除了大量重复的代码。
- en: Matching lookahead groups
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配前瞻组
- en: The last sets of groups you can have in your code are **lookahead** groups.
    These groups allow us to set a constraint on a pattern, but not really include
    this constraint in an actual match. With noncapture groups, JavaScript will not
    create a special index for a section, although, it will include it in the full
    results (the result's first element). With lookahead groups, we want to be able
    to make sure there is or isn't some text after our match, but we don't want this
    text in the results.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码中可以有的最后一组组是**前瞻**组。这些组允许我们对模式设置约束，但实际上并不包括这个约束在实际匹配中。使用非捕获组时，JavaScript不会为某个部分创建特殊索引，尽管它会将其包含在完整结果中（结果的第一个元素）。使用前瞻组，我们希望能够确保在我们的匹配后面有或没有一些文本，但我们不希望这些文本出现在结果中。
- en: 'For example, let''s say we have some input text and we want to parse out all
    .com domain names. We might not necessarily want `.com` in the match, just the
    actual domain name. In this case, we can create this pattern:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一些输入文本，我们想要解析出所有.com域名。我们可能并不一定希望在匹配中包含`.com`，只是实际的域名。在这种情况下，我们可以创建这个模式：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The group with the `?=` character will mean that we want it to have this text
    at the end of our pattern, but we don''t actually want to include it; we also
    have to escape the period since it is a special character. Now, we can use this
    pattern to extract the domains:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`?=`字符的组意味着我们希望它在我们的模式末尾有这个文本，但实际上我们不想包括它；我们还必须转义句号，因为它是一个特殊字符。现在，我们可以使用这个模式来提取域：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can assume that we have a variable text similar to this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以假设我们有一个类似的变量文本：
- en: '![Matching lookahead groups](img/2258OS_03_09.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![匹配前瞻组](img/2258OS_03_09.jpg)'
- en: Using a negative lookahead
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用负向前瞻
- en: 'Finally, if we wanted to use a **negative lookahead**, as in a lookahead group
    that makes sure that the included text does not follow a pattern, we can simply
    use an exclamation point instead of an equal to sign:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们想要使用**负向前瞻**，就像一个前瞻组确保包含的文本不遵循某种模式，我们可以简单地使用感叹号代替等号：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will match all the words that do not end in a period, that is, it will
    pull out the names from this text:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将匹配所有不以句号结尾的单词，也就是说，它将从这段文本中提取出名称：
- en: '![Using a negative lookahead](img/2258OS_03_10.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![使用负向前瞻](img/2258OS_03_10.jpg)'
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to work with greedy and nongreedy matches. We
    also learned how to use groups to create more complex regular expressions. While
    learning how to group a Regex, we also learned about capturing groups, non-capturing
    groups, and lookahead groups.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何处理贪婪和非贪婪匹配。我们还学习了如何使用组来创建更复杂的正则表达式。在学习如何对Regex进行分组时，我们还学习了捕获组、非捕获组和前瞻组。
- en: In the next chapter, we will implement everything we've learned so far in this
    book and create a real-world example to match and validate information inputted
    by a user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将实现我们在本书中学到的一切，并创建一个真实世界的示例来匹配和验证用户输入的信息。
