["```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var i = 42;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var pt = new Point2D(1, 2); // value type\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var engine = new Engine();\u00a0\u00a0// reference type\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var engine = new Engine(\"M270 Turbo\", 1600, 75.0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Generation of engine: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{GC.GetGeneration(engine)}\"); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Estimated heap size: {GC.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetTotalMemory(false)}\"); \n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Object\n{\n\u00a0\u00a0\u00a0\u00a0protected virtual void Finalize() {}\n}\n```", "```cs\nclass ResourceWrapper\n{\n\u00a0\u00a0\u00a0\u00a0// constructor\n\u00a0\u00a0\u00a0\u00a0ResourceWrapper() \n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// construct the object\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// finalizer\n\u00a0\u00a0\u00a0\u00a0~ResourceWrapper()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// release unmanaged resources\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass ResourceWrapper\n{\n\u00a0\u00a0\u00a0\u00a0protected override void Finalize()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// release unmanaged resources\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0finally\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0base.Finalize();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic class HandleWrapper\n{\n\u00a0\u00a0\u00a0\u00a0[DllImport(\"kernel32.dll\", SetLastError=true)]\n\u00a0\u00a0\u00a0\u00a0static extern bool CloseHandle(IntPtr hHandle);\n\u00a0\u00a0\u00a0\u00a0public IntPtr Handle { get; private set; }\n\n\u00a0\u00a0\u00a0\u00a0public HandleWrapper(IntPtr ptr)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Handle = ptr;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0~HandleWrapper()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(Handle != default)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CloseHandle(Handle);\n\u00a0\u00a0\u00a0\u00a0} \n}\n```", "```cs\npublic class MyResource : IDisposable\n{\n\u00a0\u00a0\u00a0\u00a0private bool disposed = false;\n\u00a0\u00a0\u00a0\u00a0protected virtual void Dispose(bool disposing)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!disposed)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (disposing)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// dispose managed objects\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// free unmanaged resources\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// set large fields to null.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0disposed = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0~MyResource()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Dispose(false);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Dispose()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Dispose(true);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GC.SuppressFinalize(this);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic class Engine : IDisposable {}\npublic class Car : IDisposable\n{\n\u00a0\u00a0\u00a0\u00a0private Engine engine;\n\u00a0\u00a0\u00a0\u00a0public Car(Engine e)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine = e;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0#region IDisposable Support\n\u00a0\u00a0\u00a0\u00a0private bool disposed = false;\n\u00a0\u00a0\u00a0\u00a0protected virtual void Dispose(bool disposing)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!disposed)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (disposing)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine?.Dispose();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0disposed = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Dispose()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Dispose(true);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0#endregion\n}\n```", "```cs\npublic class HandleWrapper : IDisposable\n{\n\u00a0\u00a0\u00a0\u00a0[DllImport(\"kernel32.dll\", SetLastError = true)]\n\u00a0\u00a0\u00a0\u00a0static extern bool CloseHandle(IntPtr hHandle);\n\u00a0\u00a0\u00a0\u00a0public IntPtr Handle { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public HandleWrapper(IntPtr ptr)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Handle = ptr;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private bool disposed = false; // To detect redundant calls\n\u00a0\u00a0\u00a0\u00a0protected virtual void Dispose(bool disposing)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!disposed)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (disposing)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// nothing to dispose\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (Handle != default)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CloseHandle(Handle);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0disposed = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0~HandleWrapper()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Dispose(false);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Dispose()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Dispose(true);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GC.SuppressFinalize(this);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nCar car = null;\ntry\n{\n\u00a0\u00a0\u00a0\u00a0car = new Car(new Engine());\n\u00a0\u00a0\u00a0\u00a0// use the car here\n}\nfinally\n{\n\u00a0\u00a0\u00a0\u00a0car?.Dispose();\n}\n```", "```cs\nusing (ResourceType resource = expression) statement\n```", "```cs\n{\n\u00a0\u00a0\u00a0\u00a0ResourceType resource = expression;\n\u00a0\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0finally {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resource.Dispose();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n// value types\n((IDisposable)resource).Dispose();\n// nullable value types or reference types\nif (resource != null) \n\u00a0\u00a0\u00a0\u00a0((IDisposable)resource).Dispose();\n// dynamic\nif (((IDisposable)resource) != null) \n\u00a0\u00a0\u00a0\u00a0((IDisposable)resource).Dispose();\n```", "```cs\nusing (Car car = new Car(new Engine()))\n{\n\u00a0\u00a0\u00a0\u00a0// use the car here\n}\n```", "```cs\nusing (Car car1 = new Car(new Engine()),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0car2 = new Car(new Engine()))\n{\n\u00a0\u00a0\u00a0\u00a0// use car1 and car2 here\n}\n```", "```cs\nusing (var car1 = new Car(new Engine()))\nusing (var car2 = new Car(new Engine()))\n{\n\u00a0\u00a0\u00a0\u00a0// use car1 and car2 here\n}\n```", "```cs\nusing Car car = new Car(new Engine());\n// use the car here\n```", "```cs\nint MessageBox(HWND hWnd, LPCTSTR lpText,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LPCTSTR lpCaption, UINT uType);\n```", "```cs\nstatic class WindowsAPI\n{\n\u00a0\u00a0\u00a0\u00a0[DllImport(\"user32.dll\")]\n\u00a0\u00a0\u00a0\u00a0public static extern int MessageBox(IntPtr hWnd, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string lpText, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string lpCaption, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint uType);\n}\n```", "```cs\nstatic class WindowsAPI\n{\n\u00a0\u00a0\u00a0\u00a0public static class MessageButtons\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_OK = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_OKCANCEL = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_YESNOCANCEL = 3;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_YESNO = 4; \n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public static class MessageIcons\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_ICONERROR = 0x10;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_ICONQUESTION = 0x20;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_ICONWARNING = 0x30;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int MB_ICONINFORMATION = 0x40;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public static class MessageResult\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int IDOK = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int IDYES = 6;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public const int IDNO = 7;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var result = WindowsAPI.MessageBox(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IntPtr.Zero, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Is this book helpful?\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Question\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WindowsAPI.MessageButtons.MB_YESNO | \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WindowsAPI.MessageIcons.MB_ICONQUESTION);\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(result == WindowsAPI.MessageResult.IDYES)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// time to learn more\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nBOOL GetUserName(LPSTR lpBuffer, LPDWORD pcbBuffer);\n```", "```cs\n[DllImport(\"advapi32.dll\", SetLastError = true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CharSet = CharSet.Unicode)]\npublic static extern bool GetUserName(StringBuilder lpBuffer,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ref uint nSize);\n```", "```cs\nuint size = 0;\nvar result = WindowsAPI.GetUserName(null, ref size);\nif(!result &&\n\u00a0\u00a0\u00a0Marshal.GetLastWin32Error() ==\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WindowsAPI.ErrorCodes.ERROR_INSUFFICIENT_BUFFER)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Requires buffer size: {size}\");\n\u00a0\u00a0\u00a0\u00a0StringBuilder buffer = new StringBuilder((int)size);\n\u00a0\u00a0\u00a0\u00a0result = WindowsAPI.GetUserName(buffer, ref size);\n\u00a0\u00a0\u00a0\u00a0if(result)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"User name: {buffer.ToString()}\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n    unsafe struct Node\n    {\n    \u00a0\u00a0\u00a0\u00a0public int value;\n    \u00a0\u00a0\u00a0\u00a0public Node* left;\n    \u00a0\u00a0\u00a0\u00a0public Node* right;\n    }\n    ```", "```cs\n    struct Node\n    {\n    \u00a0\u00a0\u00a0\u00a0public int Value;\n    \u00a0\u00a0\u00a0\u00a0public unsafe Node* Left;\n    \u00a0\u00a0\u00a0\u00a0public unsafe Node* Right;\n    }\n    unsafe void Increment(int* value)\n    {\n    \u00a0\u00a0\u00a0\u00a0*value += 1;\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n    \u00a0\u00a0\u00a0\u00a0int value = 42;\n    \u00a0\u00a0\u00a0\u00a0unsafe\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int* p = &value;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*p += 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine(value); // prints 43\n     }\n    ```", "```cs\nstatic void Main(string[] args)\n{\n\u00a0\u00a0\u00a0\u00a0int value = 42;\n\u00a0\u00a0\u00a0\u00a0Increment(&value);\u00a0\u00a0\u00a0\u00a0\u00a0// error\n\u00a0\u00a0\u00a0\u00a0unsafe\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Increment(&value); // OK\n\u00a0\u00a0\u00a0\u00a0}\n }\n```", "```cs\nint* a;\nint * a;\nint *a;\nint* a, *b; // define two variables of type pointer to int\n```", "```cs\nint* a, b; // define two variables of type pointer to int\n```", "```cs\nclass Color\n{\n\u00a0\u00a0\u00a0\u00a0public byte Alpha;\n\u00a0\u00a0\u00a0\u00a0public byte Red;\n\u00a0\u00a0\u00a0\u00a0public byte Green;\n\u00a0\u00a0\u00a0\u00a0public byte Blue;\n\u00a0\u00a0\u00a0\u00a0public Color(byte a, byte r, byte g, byte b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Alpha = a;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Red = r;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Green = g;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Blue = b;\n\u00a0\u00a0\u00a0\u00a0}\n}\nstatic void SetTransparency(Color color, double value)\n{\n\u00a0\u00a0\u00a0\u00a0unsafe\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fixed (byte* alpha = &color.Alpha)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*alpha = (byte)(value * 255);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n    static unsafe void AllocArrayExample(int size)\n    {\n    \u00a0\u00a0\u00a0\u00a0int* arr = stackalloc int[size];\n    \u00a0\u00a0\u00a0\u00a0for (int i = 1; i <= size; ++i)\n    \u00a0\u00a0\u00a0\u00a0arr[i] = i;\n    }\n    ```", "```cs\n    static void SizeOfExample()\n    {\n    \u00a0\u00a0\u00a0\u00a0unsafe\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Pointer size: {sizeof(int*)}\");\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```"]