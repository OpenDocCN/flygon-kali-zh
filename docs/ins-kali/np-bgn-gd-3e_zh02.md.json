["```py\nIn: a = arange(5)\nIn: a.dtype\nOut: dtype('int64')\n\n```", "```py\nIn [4]: a\nOut[4]: array([0, 1, 2, 3, 4])\nIn: a.shape\nOut: (5,)\n\n```", "```py\n    In: m = array([arange(2), arange(2)])\n    In: m\n    Out:\n    array([[0, 1],\n     [0, 1]])\n\n    ```", "```py\n    In: m.shape\n    Out: (2, 2)\n\n    ```", "```py\nIn [1]: help(array)\n\n```", "```py\nIn [2]: array?\n\n```", "```py\nIn: a = array([[1,2],[3,4]])\nIn: a\nOut:\narray([[1, 2],\n [3, 4]])\n\n```", "```py\nIn: a[0,0]\nOut: 1\nIn: a[0,1]\nOut: 2\nIn: a[1,0]\nOut: 3\nIn: a[1,1]\nOut: 4\n\n```", "```py\nIn: finfo(float16)\nOut: finfo(resolution=0.0010004, min=-6.55040e+04, max=6.55040e+04, dtype=float16)\n\n```", "```py\nIn: float64(42)\nOut: 42.0\nIn: int8(42.0)\nOut: 42\nIn: bool(42)\nOut: True\nIn: bool(0)\nOut: False\nIn: bool(42.0)\nOut: True\nIn: float(True)\nOut: 1.0\nIn: float(False)\nOut: 0.0\n\n```", "```py\nIn: arange(7, dtype=uint16)\nOut: array([0, 1, 2, 3, 4, 5, 6], dtype=uint16)\n\n```", "```py\nIn: a.dtype.itemsize\nOut: 8\n\n```", "```py\nIn: arange(7, dtype='f')\nOut: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.], dtype=float32)\n\n```", "```py\nIn: arange(7, dtype='D')\nOut: array([ 0.+0.j,  1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  5.+0.j,  6.+0.j])\n\n```", "```py\n    In: dtype(float)\n    Out: dtype('float64')\n\n    ```", "```py\n    In: dtype('f')\n    Out: dtype('float32')\n\n    ```", "```py\n    In: dtype('d')\n    Out: dtype('float64')\n\n    ```", "```py\n    In: dtype('f8')\n    Out: dtype('float64')\n\n    ```", "```py\nIn: sctypeDict.keys()\nOut: [0, \u2026\n 'i2',\n 'int0']\n\n```", "```py\nIn: t = dtype('Float64')\nIn: t.char\nOut: 'd'\n\n```", "```py\nIn: t.type\nOut: <type 'numpy.float64'>\n\n```", "```py\nIn: t.str\nOut: '<f8'\n\n```", "```py\n    In: t = dtype([('name', str_, 40), ('numitems', int32), ('price', float32)])\n    In: t\n    Out: dtype([('name', '|S40'), ('numitems', '<i4'), ('price', '<f4')])\n\n    ```", "```py\n    In: t['name']\n    Out: dtype('|S40')\n\n    ```", "```py\nIn: itemz = array([('Meaning of life DVD', 42, 3.14), ('Butter', 13, 2.72)], dtype=t)\nIn: itemz[1]\nOut: ('Butter', 13, 2.7200000286102295)\n\n```", "```py\nIn: a = arange(9)\nIn: a[3:7]\nOut: array([3, 4, 5, 6])\n\n```", "```py\nIn: a[:7:2]\nOut: array([0, 2, 4, 6])\n\n```", "```py\nIn: a[::-1]\nOut: array([8, 7, 6, 5, 4, 3, 2, 1, 0])\n\n```", "```py\n    In: b = arange(24).reshape(2,3,4)\n    In: b.shape\n    Out: (2, 3, 4)\n    In: b\n    Out:\n    array([[[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11]],\n     [[12, 13, 14, 15],\n     [16, 17, 18, 19],\n     [20, 21, 22, 23]]])\n\n    ```", "```py\n    In: b[0,0,0]\n    Out: 0\n\n    ```", "```py\n    In: b[:,0,0]\n    Out: array([ 0, 12])\n\n    ```", "```py\n    In: b[0]\n    Out:\n    array([[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11]])\n\n    ```", "```py\n    In: b[0, :, :]\n    Out:\n    array([[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11]])\n\n    ```", "```py\n    In: b[0, ...]\n    Out:\n    array([[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11]])\n\n    ```", "```py\n    In: b[0,1]\n    Out: array([4, 5, 6, 7])\n\n    ```", "```py\n    In: b[0,1,::2]\n    Out: array([4, 6])\n\n    ```", "```py\n    In: b[...,1]\n    Out:\n    array([[ 1,  5,  9],\n     [13, 17, 21]])\n\n    ```", "```py\n    In: b[:,1]\n    Out:\n    array([[ 4,  5,  6,  7],\n     [16, 17, 18, 19]])\n\n    ```", "```py\n    In: b[0,:,1]\n    Out: array([1, 5, 9])\n\n    ```", "```py\n    In: b[0,:,-1]\n    Out: array([ 3,  7, 11])\n\n    ```", "```py\n    In: b[0,::-1, -1]\n    Out: array([11,  7,  3])\n\n    ```", "```py\n    In: b[0,::2,-1]\n    Out: array([ 3, 11])\n\n    ```", "```py\n    In: b[::-1]\n    Out:\n    array([[[12, 13, 14, 15],\n     [16, 17, 18, 19],\n     [20, 21, 22, 23]],\n     [[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11]]])\n\n    ```", "```py\n    In: b\n    Out:\n    array([[[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11]],\n     [[12, 13, 14, 15],\n     [16, 17, 18, 19],\n     [20, 21, 22, 23]]])\n    In: b.ravel()\n    Out:\n    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n     17, 18, 19, 20, 21, 22, 23])\n\n    ```", "```py\n    In: b.flatten()\n    Out:\n    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n     17, 18, 19, 20, 21, 22, 23])\n\n    ```", "```py\n    In: b.shape = (6,4)\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11],\n     [12, 13, 14, 15],\n     [16, 17, 18, 19],\n     [20, 21, 22, 23]])\n\n    ```", "```py\n    In: b.transpose()\n    Out:\n    array([[ 0,  4,  8, 12, 16, 20],\n     [ 1,  5,  9, 13, 17, 21],\n     [ 2,  6, 10, 14, 18, 22],\n     [ 3,  7, 11, 15, 19, 23]])\n\n    ```", "```py\n    In: b.resize((2,12))\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n     [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n    ```", "```py\nIn: a = arange(9).reshape(3,3)\nIn: a\nOut:\narray([[0, 1, 2],\n [3, 4, 5],\n [6, 7, 8]])\nIn: b = 2 * a\nIn: b\nOut:\narray([[ 0,  2,  4],\n [ 6,  8, 10],\n [12, 14, 16]])\n\n```", "```py\n    In: hstack((a, b))\n    Out:\n    array([[ 0,  1,  2,  0,  2,  4],\n     [ 3,  4,  5,  6,  8, 10],\n     [ 6,  7,  8, 12, 14, 16]])\n\n    ```", "```py\n    In: concatenate((a, b), axis=1)\n    Out:\n    array([[ 0,  1,  2,  0,  2,  4],\n     [ 3,  4,  5,  6,  8, 10],\n     [ 6,  7,  8, 12, 14, 16]])\n\n    ```", "```py\n    In: vstack((a, b))\n    Out:\n    array([[ 0,  1,  2],\n     [ 3,  4,  5],\n     [ 6,  7,  8],\n     [ 0,  2,  4],\n     [ 6,  8, 10],\n     [12, 14, 16]])\n\n    ```", "```py\n    In: concatenate((a, b), axis=0)\n    Out:\n    array([[ 0,  1,  2],\n     [ 3,  4,  5],\n     [ 6,  7,  8],\n     [ 0,  2,  4],\n     [ 6,  8, 10],\n     [12, 14, 16]])\n\n    ```", "```py\n    In: dstack((a, b))\n    Out:\n    array([[[ 0,  0],\n     [ 1,  2],\n     [ 2,  4]],\n     [[ 3,  6],\n     [ 4,  8],\n     [ 5, 10]],\n     [[ 6, 12],\n     [ 7, 14],\n     [ 8, 16]]])\n\n    ```", "```py\n    In: oned = arange(2)\n    In: oned\n    Out: array([0, 1])\n    In: twice_oned = 2 * oned\n    In: twice_oned\n    Out: array([0, 2])\n    In: column_stack((oned, twice_oned))\n    Out:\n    array([[0, 0],\n     [1, 2]])\n\n    ```", "```py\n    In: column_stack((a, b))\n    Out:\n    array([[ 0,  1,  2,  0,  2,  4],\n     [ 3,  4,  5,  6,  8, 10],\n     [ 6,  7,  8, 12, 14, 16]])\n    In: column_stack((a, b)) == hstack((a, b))\n    Out:\n    array([[ True,  True,  True,  True,  True,  True],\n     [ True,  True,  True,  True,  True,  True],\n     [ True,  True,  True,  True,  True,  True]], dtype=bool)\n\n    ```", "```py\n    In: row_stack((oned, twice_oned))\n    Out:\n    array([[0, 1],\n     [0, 2]])\n\n    ```", "```py\n    In: row_stack((a, b))\n    Out:\n    array([[ 0,  1,  2],\n     [ 3,  4,  5],\n     [ 6,  7,  8],\n     [ 0,  2,  4],\n     [ 6,  8, 10],\n     [12, 14, 16]])\n    In: row_stack((a,b)) == vstack((a, b))\n    Out:\n    array([[ True,  True,  True],\n     [ True,  True,  True],\n     [ True,  True,  True],\n     [ True,  True,  True],\n     [ True,  True,  True],\n     [ True,  True,  True]], dtype=bool)\n\n    ```", "```py\n    In: a\n    Out:\n    array([[0, 1, 2],\n     [3, 4, 5],\n     [6, 7, 8]])\n    In: hsplit(a, 3)\n    Out:\n    [array([[0],\n     [3],\n     [6]]),\n     array([[1],\n     [4],\n     [7]]),\n     array([[2],\n     [5],\n     [8]])]\n\n    ```", "```py\n    In: split(a, 3, axis=1)\n    Out:\n    [array([[0],\n     [3],\n     [6]]),\n     array([[1],\n     [4],\n     [7]]),\n     array([[2],\n     [5],\n     [8]])]\n\n    ```", "```py\n    In: vsplit(a, 3)\n    Out: [array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]\n\n    ```", "```py\n    In: split(a, 3, axis=0)\n    Out: [array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]\n\n    ```", "```py\n    In: c = arange(27).reshape(3, 3, 3)\n    In: c\n    Out:\n    array([[[ 0,  1,  2],\n     [ 3,  4,  5],\n     [ 6,  7,  8]],\n     [[ 9, 10, 11],\n     [12, 13, 14],\n     [15, 16, 17]],\n     [[18, 19, 20],\n     [21, 22, 23],\n     [24, 25, 26]]])\n    In: dsplit(c, 3)\n    Out:\n    [array([[[ 0],\n     [ 3],\n     [ 6]],\n     [[ 9],\n     [12],\n     [15]],\n     [[18],\n     [21],\n     [24]]]),\n     array([[[ 1],\n     [ 4],\n     [ 7]],\n     [[10],\n     [13],\n     [16]],\n     [[19],\n     [22],\n     [25]]]),\n     array([[[ 2],\n     [ 5],\n     [ 8]],\n     [[11],\n     [14],\n     [17]],\n     [[20],\n     [23],\n     [26]]])]\n\n    ```", "```py\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n     [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n    In: b.ndim\n    Out: 2\n\n    ```", "```py\n    In: b.size\n    Out: 24\n\n    ```", "```py\n    In: b.itemsize\n    Out: 8\n\n    ```", "```py\n    In: b.nbytes\n    Out: 192\n    In: b.size * b.itemsize\n    Out: 192\n\n    ```", "```py\n    In: b.resize(6,4)\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3],\n     [ 4,  5,  6,  7],\n     [ 8,  9, 10, 11],\n     [12, 13, 14, 15],\n     [16, 17, 18, 19],\n     [20, 21, 22, 23]])\n    In: b.T\n    Out:\n    array([[ 0,  4,  8, 12, 16, 20],\n     [ 1,  5,  9, 13, 17, 21],\n     [ 2,  6, 10, 14, 18, 22],\n     [ 3,  7, 11, 15, 19, 23]])\n\n    ```", "```py\n    In: b.ndim\n    Out: 1\n    In: b.T\n    Out: array([0, 1, 2, 3, 4])\n\n    ```", "```py\n    In: b = array([1.j + 1, 2.j + 3])\n    In: b\n    Out: array([ 1.+1.j,  3.+2.j])\n\n    ```", "```py\n    In: b.real\n    Out: array([ 1.,  3.])\n\n    ```", "```py\n    In: b.imag\n    Out: array([ 1.,  2.])\n\n    ```", "```py\n    In: b.dtype\n    Out: dtype('complex128')\n    In: b.dtype.str\n    Out: '<c16'\n\n    ```", "```py\n    In: b = arange(4).reshape(2,2)\n    In: b\n    Out:\n    array([[0, 1],\n     [2, 3]])\n    In: f = b.flat\n    In: f\n    Out: <numpy.flatiter object at 0x103013e00>\n    In: for item in f: print item\n     .....:\n    0\n    1\n    2\n    3\n\n    ```", "```py\n    In: b.flat[2]\n    Out: 2\n\n    ```", "```py\n    In: b.flat[[1,3]]\n    Out: array([1, 3])\n\n    ```", "```py\n    In: b.flat = 7\n    In: b\n    Out:\n    array([[7, 7],\n     [7, 7]])\n\n    ```", "```py\n    In: b.flat[[1,3]] = 1\n    In: b\n    Out:\n    array([[7, 1],\n     [7, 1]])\n\n    ```", "```py\n    In: b\n    Out: array([ 1.+1.j,  3.+2.j])\n    In: b.tolist()\n    Out: [(1+1j), (3+2j)]\n\n    ```", "```py\n    In: b\n    Out: array([ 1.+1.j,  3.+2.j])\n    In: b.astype(int)\n    /usr/local/bin/ipython:1: ComplexWarning: Casting complex values to real discards the imaginary part\n     #!/usr/bin/python\n    Out: array([1, 3])\n\n    ```", "```py\n    In: b.astype('complex')\n    Out: array([ 1.+1.j,  3.+2.j])\n\n    ```"]