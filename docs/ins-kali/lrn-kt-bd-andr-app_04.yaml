- en: Classes and Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和对象
- en: In this chapter, we will continue to work on our TicTacToe game whilst learning
    about classes and objects in Kotlin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续在学习Kotlin中的类和对象的同时继续开发我们的TicTacToe游戏。
- en: 'By the end of the chapter, we will have:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将有：
- en: Learned about classes and objects in Kotlin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kotlin中学习了类和对象
- en: Worked on part of the logic for the game
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为游戏的一部分逻辑工作
- en: Structure of a class
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类的结构
- en: 'Just like Java, classes in Kotlin are declared using the `class` keyword. The
    basic structure of a class consists of:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Java一样，在Kotlin中，使用`class`关键字声明类。类的基本结构包括：
- en: The `class` keyword
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class`关键字'
- en: The name of the class
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类的名称
- en: The header
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页眉
- en: The body of the class enclosed in curly braces
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类的主体用大括号括起来
- en: The header can consist of a primary constructor, a parent class if applicable,
    and an interface to implement if applicable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 页眉可以由主构造函数、父类（如果适用）和要实现的接口（如果适用）组成。
- en: Of all four parts, only the first two are compulsory. If the class has no body,
    you can skip the curly braces.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在四个部分中，只有前两个是强制的。如果类没有主体，您可以跳过大括号。
- en: Constructors
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构造函数
- en: Just like in Java, a class can have multiple constructors but, in Kotlin, the
    primary constructor can be added as part of the header of the class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Java中一样，类可以有多个构造函数，但是在Kotlin中，主构造函数可以作为类的页眉的一部分添加。
- en: 'As an example, let''s add a constructor to the `HelloKotlin` class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们向`HelloKotlin`类添加一个构造函数：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the previous code, the `HelloKotlin` class has a primary constructor that
    takes a string called `message`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，`HelloKotlin`类具有一个主构造函数，该构造函数接受一个名为`message`的字符串。
- en: 'Since the constructor does not have any modifiers, we can rid it of the `constructor`
    keyword altogether:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于构造函数没有任何修饰符，因此我们可以完全摆脱`constructor`关键字：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In Kotlin, secondary constructors have to call the primary constructor. Let''s
    take a look at the code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，次要构造函数必须调用主构造函数。让我们看一下代码：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A few things to note about the secondary constructor:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于次要构造函数的一些注意事项：
- en: It does not take any parameters.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不接受任何参数。
- en: It calls the primary constructor with a default message.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用默认消息调用主构造函数。
- en: It does not make use of the curly braces. This is because it has no body and
    therefore has no use for the curly braces. If we add a body, we'll be required
    to make use of the curly braces.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不使用大括号。这是因为它没有主体，因此不需要大括号。如果我们添加一个主体，我们将需要使用大括号。
- en: What if the `displayKotlinMessage()` method wants to make use of the `message`
    parameter passed in the constructor?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`displayKotlinMessage()`方法想要使用构造函数中传递的`message`参数，该怎么办？
- en: 'There are two ways to go about this. You can create a field in `HelloKotlin`
    and initialize it with the `message` parameter passed:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以解决这个问题。您可以在`HelloKotlin`中创建一个字段，并使用传递的`message`参数进行初始化：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also add the appropriate keyword to the `message` parameter to make
    it a field of the class as well:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以向`message`参数添加适当的关键字，使其成为类的字段：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s take the changes we''ve made for a spin. In the `onCreate()` method
    in the `MainActivity` class, let''s replace the `HelloKotlin` initialization:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一下我们所做的更改。在`MainActivity`类的`onCreate()`方法中，让我们替换`HelloKotlin`初始化：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ll replace it with an initialization that passes a message as well:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其替换为一个初始化，该初始化还传递了一条消息：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/cfb906c5-b284-4f86-846e-1f1ea1bb9db6.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfb906c5-b284-4f86-846e-1f1ea1bb9db6.png)'
- en: The message passed is shown at the bottom when we click on the FloatingActionButton.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 单击FloatingActionButton时，传递的消息将显示在底部。
- en: Data classes
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类
- en: When building apps, most of the time we require classes whose only function
    is to store data. In Java, we usually use a POJO for this. In Kotlin, there's
    a special class for that known as the **data class**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应用程序时，我们大多数时候需要的是仅用于存储数据的类。在Java中，我们通常使用POJO。在Kotlin中，有一个称为**数据类**的特殊类。
- en: Let's say we want to keep a scoreboard for our TicTacToe game. How will we store
    the data for each game session?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想为我们的TicTacToe游戏保留一个记分牌。我们将如何存储每个游戏会话的数据？
- en: 'In Java, we''ll create a POJO that will store data about the game session (the
    board at the end of the game and the winner of that game):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，我们将创建一个POJO，用于存储有关游戏会话的数据（游戏结束时的板和游戏的获胜者）：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In Kotlin, this is greatly simplified to:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，这大大简化为：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The previous single line of code does the same thing as the previous 26 lines
    of Java code. It declares a `Game` class that takes two parameters in its primary
    constructor. As stated earlier, the `getters` and `setters` are not needed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行代码与前面的26行Java代码执行相同的操作。它声明了一个`Game`类，该类在其主构造函数中接受两个参数。正如前面所述，不需要`getters`和`setters`。
- en: 'The data class in Kotlin also comes with a number of other methods:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin中的数据类还带有许多其他方法：
- en: '`equals()`/`hashCode()` pair'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals()`/`hashCode()`对'
- en: '`toString()`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toString()`'
- en: '`copy()`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy()`'
- en: If you've ever written any Java code, you should be familiar with `equals()`,
    `hashCode()`, and `toString()`. Let's go ahead and discuss `copy()`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经编写过任何Java代码，您应该熟悉`equals()`、`hashCode()`和`toString()`。让我们继续讨论`copy()`。
- en: 'The `copy()` method comes in handy when you want to create a copy of an object
    but with part of its data altered, for example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要创建对象的副本，但部分数据已更改时，`copy()`方法非常方便，例如：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code snippet:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中：
- en: We declare a data class called `Student`. It takes three parameters in its primary
    constructor: `name`, `classRoomNo`, and `studentId`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们声明了一个名为`Student`的数据类。它在其主构造函数中接受三个参数：`name`、`classRoomNo`和`studentId`。
- en: 'The `anna` variable is an instance of the `Student` with the following properties:
    `name:Anna`, `classRoomNo:5`, and `studentId:1`.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`anna`变量是`Student`的一个实例，具有以下属性：`name:Anna`、`classRoomNo:5`和`studentId:1`。'
- en: The variable `joseph` is created from copying `anna` and changing two of the
    properties—`name` and `studentId`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量`joseph`是通过复制`anna`并更改两个属性——`name`和`studentId`而创建的。
- en: Objects
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象
- en: 'Before we delve into a discussion about objects, let''s make some additions
    to the TicTacToe game. Let''s initialize our views. Add the following lines of
    code to the `onCreate()` method in the `MainActivity` class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论对象之前，让我们对TicTacToe游戏进行一些添加。让我们初始化我们的视图。将以下代码添加到`MainActivity`类中的`onCreate()`方法：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following methods to the `MainActivity` class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下方法添加到`MainActivity`类中：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In one and two, we initialize `turnTextView` and `tableLayout` with their corresponding
    views in the XML layout.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一和二中，我们使用XML布局中对应的视图初始化`turnTextView`和`tableLayout`。
- en: 'In `startNewGame()`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`startNewGame()`中：
- en: We re-initialize `turn`
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们重新初始化`turn`
- en: We set `turnTextView` to show the value of `turn`
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`turnTextView`设置为显示`turn`的值
- en: We reset all the values of `gameBoard`
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们重置了`gameBoard`的所有值
- en: We reset all the cells of the `tableLayout` to an empty string
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`tableLayout`的所有单元格重置为空字符串
- en: 'In `cellClickListener()`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cellClickListener()`中：
- en: We set the value of `turn` to a specific element of `gameBoard` based on the
    parameters passed to `cellClickListener()`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们根据传递给`cellClickListener()`的参数将`turn`的值设置为`gameBoard`的特定元素
- en: We also change the value of the corresponding cell on the `tableLayout` to `turn`
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将`tableLayout`上对应单元格的值更改为`turn`
- en: We change the value of `turn` to the next player, depending on the previous
    value of `turn`
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们根据`turn`的先前值将`turn`的值更改为下一个玩家
- en: We change the value shown on `turnTextView` to the new value of `turn`
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`turnTextView`上显示的值更改为`turn`的新值
- en: We need to call `cellClickListener()` every time any of the cells are clicked.
    To do this, we need to add a click listener to each one of them. In Android, we
    use the `View.OnClickListener`. Since `View.OnClickListener` is an interface,
    we normally create a class that implements its methods and set that class as our
    click listener.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每次单元格被点击时，我们需要调用`cellClickListener()`。为此，我们需要为每个单元格添加一个点击侦听器。在Android中，我们使用`View.OnClickListener`。由于`View.OnClickListener`是一个接口，我们通常创建一个实现其方法的类，并将该类设置为我们的点击侦听器。
- en: 'Both Java and Kotlin have a way of simplifying this. In Java, you can get around
    it by using an **Anonymous Inner Class**. An Anonymous Inner Class allows you
    to declare and create an instance of a class at the same time:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Java和Kotlin都有简化此过程的方法。在Java中，您可以通过使用**匿名内部类**来绕过它。匿名内部类允许您同时声明和创建类的实例：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we declare and create an instance of a class that implements
    the `View.OnClickListener` interface.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们声明并创建了一个实现`View.OnClickListener`接口的类的实例。
- en: In Kotlin, this is done using **Object Expressions**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，这是使用**对象表达式**完成的。
- en: 'Place the following lines of code in the body of the `if (setClickListener)` statement
    in the `startNewGame()` method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`startNewGame()`方法中`if(setClickListener)`语句的主体中：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Kotlin allows us to further simplify the previous lines of code. We'll discuss
    this in [Chapter 6](57bf460e-81b3-4efe-9a42-d783a0d15b12.xhtml), *Functions and
    Lambdas*, when we talk about **Lambdas**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin允许我们进一步简化先前的代码行。我们将在[第6章](57bf460e-81b3-4efe-9a42-d783a0d15b12.xhtml)中讨论这一点，*函数和Lambda*，当我们谈论**Lambda**时。
- en: 'Build and run. Now, when you click on any of the cells, the text in it will
    change to that of the `turnTextView` and the `turnTextView` value will also change
    to that of the next player:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。现在，当您点击任何单元格时，其中的文本将更改为`turnTextView`的文本，并且`turnTextView`的值也将更改为下一个玩家的值：
- en: '![](img/da55dc44-f34e-4334-9a05-80533dcae777.png)               ![](img/a841870d-23cd-4b56-9c44-a4dd9e6b791e.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da55dc44-f34e-4334-9a05-80533dcae777.png) ![](img/a841870d-23cd-4b56-9c44-a4dd9e6b791e.png)'
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about classes, data classes, and object expressions,
    while initializing our views and adding extra logic to our game app.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了类、数据类和对象表达式，同时初始化了我们的视图并为我们的游戏应用程序添加了额外的逻辑。
- en: In the next chapter, we will delve into the topic of type checks and null safety
    and why these features of Kotlin make it one of the safest languages.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入讨论类型检查和空安全性，以及为什么Kotlin的这些特性使其成为最安全的语言之一。
