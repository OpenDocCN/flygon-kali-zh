- en: Assets and Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产和资源
- en: So far, in this book, we have covered layouts, design, and the libraries and
    tools that support them. We then went on to explore developing for different screen
    sizes, shapes, and densities, as well as other form factors. This is the last
    chapter in the UI development module where we will look at how Android Studio
    manages various assets and resources, such as icons and other drawables.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经涵盖了布局、设计以及支持它们的库和工具。然后我们继续探讨为不同的屏幕尺寸、形状和密度以及其他形态因素进行开发。这是UI开发模块中的最后一章，我们将看看Android
    Studio如何管理各种资产和资源，如图标和其他可绘制图形。
- en: Android Studio is very accommodating when it comes to including drawables in
    our projects and, particularly, when it comes to vector graphics, which are invaluable
    to an Android developer, as they scale nicely across different screen sizes and
    densities, and this is catered for with a very valuable tool, the vector asset
    studio. Along with this, there is an asset studio to generate and configure bitmap
    images.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及将可绘制图标包含在我们的项目中时，Android Studio非常包容，特别是在涉及矢量图形时，这对于Android开发人员非常宝贵，因为它们可以很好地适应不同的屏幕尺寸和密度，这是通过一个非常有价值的工具——矢量资产工作室来实现的。除此之外，还有一个资产工作室用于生成和配置位图图像。
- en: Vector drawables are widely used for in-app icons and in components such as
    menus, tabs, and the notification area and are also very flexible when it comes
    to animating icons and transforming them from one icon to another icon, a very
    useful space-saving function on small screens.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量可绘制图标广泛用于应用程序图标和组件，如菜单、选项卡和通知区域，并且在对图标进行动画和从一个图标转换为另一个图标时也非常灵活，在小屏幕上非常有用的节省空间的功能。
- en: 'In this chapter, you will learn to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学会以下内容：
- en: Creating icons with asset studios
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用资源工作室创建图标
- en: Building adaptive icons
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自适应图标
- en: Creating material launcher icons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建材料启动器图标
- en: Using a material icon plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用材料图标插件
- en: Creating vector assets
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建矢量资产
- en: Importing vector assets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入矢量资产
- en: Animating icons
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图标动画
- en: Viewing dynamic layouts with plugins
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件查看动态布局
- en: Extracting prominent colors from an image
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从图像中提取显著颜色
- en: Asset Studio
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产工作室
- en: There are very few, if any, apps that do not employ some forms of icons and
    even if these are only launcher and, action icons, the correct choices and design
    make the difference between a successful UI and a confusing one.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎没有任何应用程序不使用某种形式的图标，即使这些只是启动器和操作图标，正确的选择和设计也决定了成功的UI和令人困惑的UI之间的区别。
- en: Although it is not essential, Google is very keen that we use material design
    icons. This is an attempt to create a uniform user experience across the platform
    to counter the perception that iOS offers a more consistent feel. This is unsurprising,
    as iOS is a closed system that places a lot of restrictions on the developer.
    Google, on the other hand, prefers to offer a far more creative freedom to developers.
    In the past, this has led Apple devices to gain a reputation for being generally
    slicker than Android and, to counter this, Google introduced material design guidelines,
    which have gone on to far exceed original expectations and can now be found on
    many other platforms, including iOS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这并非必需，但Google非常希望我们使用材料设计图标。这是为了在整个平台上创建统一的用户体验，以抵消iOS提供更一致感觉的认知。这并不奇怪，因为iOS是一个对开发人员施加了很多限制的封闭系统。另一方面，Google更愿意为开发人员提供更多的创造自由。过去，这导致苹果设备获得了比Android更为流畅的声誉，为了抵消这一点，Google推出了材料设计指南，这些指南远远超出了最初的预期，现在可以在许多其他平台上找到，包括iOS。
- en: As would be expected, Android Studio provides tools to assist us in incorporating
    these design features and drawables. This comes in the form of Asset Studio. This
    facilitates the creation and configuration of all manner of icons, from brightly
    colored detailed launcher icons to fully customized and scalable vector graphic
    action and notification icons. Along with API level 26, Android introduced Adaptive
    Icons that can display as different shapes on different devices and perform simple
    animations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，Android Studio提供了工具来帮助我们整合这些设计特性和可绘制图标。这就是资源工作室的形式。这有助于创建和配置各种图标，从色彩鲜艳的详细启动器图标到完全定制和可伸缩的矢量图形操作和通知图标。随着API级别26，Android引入了自适应图标，可以在不同设备上显示为不同形状并执行简单的动画。
- en: 'Asset Studio comes with two separate interfaces: one for general images and
    one for vector graphics. We will look at the first of these in the next section.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 资源工作室具有两个单独的界面：一个用于一般图像，一个用于矢量图形。我们将在下一节中看到第一个。
- en: Image Asset Studio
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像资产工作室
- en: When creating images for different screen configurations, we often have to create
    several versions of the same image and this is usually not a great deal of work.
    When it comes to icons, on the other hand, we may have several individual icons
    and dozens of versions, making resizing and scaling them a tedious process. Fortunately,
    Android Studio provides a neat solution to this in the form of Image Asset Studio.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在为不同的屏幕配置创建图像时，我们经常必须创建相同图像的几个版本，这通常不是一件大事。另一方面，当涉及到图标时，我们可能有几个单独的图标和数十个版本，使得调整大小和缩放它们变得繁琐。幸运的是，Android
    Studio提供了一个简洁的解决方案，即图像资产工作室。
- en: Device manufacturers are perhaps even more concerned with creating a consistent
    look and feel across their models. This is particularly apparent when it comes
    to the way launcher icons are displayed on their home screens. An ideal situation
    would be if developers could design a single icon and manufacturers could then
    fit that into a uniform shape, such as a square or circle, depending on its location
    on a device and the manufacturer's own design ideals.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设备制造商可能更关心在其型号之间创建一致的外观和感觉。当涉及到启动器图标在其主屏幕上的显示方式时，这尤为明显。理想的情况是，开发人员可以设计一个单一的图标，然后制造商可以将其放入统一的形状中，例如方形或圆形，具体取决于其在设备上的位置和制造商自己的设计理念。
- en: 'Image Asset Studio achieves this by creating a two-layered icon that uses our
    original imagery and a plain background layer that a mask can be applied to in
    order to create the desired overall shape, often one of the three following images:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图像资产工作室通过创建一个使用我们原始图像和一个纯色背景层的双层图标来实现这一点，可以对其应用蒙版以创建所需的整体形状，通常是以下三个图像之一：
- en: '![](img/57e21fe8-da87-44d0-9670-6f448e910fec.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57e21fe8-da87-44d0-9670-6f448e910fec.png)'
- en: Adaptive icons
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 自适应图标
- en: 'The Image Asset Studio can be opened by selecting New | Image Asset from your
    project''s drawable context menu:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过从项目的可绘制上下文菜单中选择“新建|图像资产”来打开图像资产工作室：
- en: '![](img/d11bba09-ec4b-48cf-8586-b6735f08a1d8.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d11bba09-ec4b-48cf-8586-b6735f08a1d8.png)'
- en: Asset Studio
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 资产工作室
- en: 'There are several stages to create icons that will work across the widest range
    of devices and API levels, and these stages are represented by the following three
    tabs in the wizard: Foreground Layer, Background Layer, and Legacy. There are
    some valuable features included in each of these tabs, which will be outlined
    in the next section.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建能够在最广泛的设备和API级别上运行的图标有几个阶段，这些阶段由向导中的以下三个选项卡表示：前景层、背景层和传统。每个选项卡中都包含一些有价值的功能，将在下一节中概述。
- en: Layered icons
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层图标
- en: 'The foreground layer is where we apply our imagery. This can be our own artwork,
    in the case of a launcher icon, or clip art/text, if we are creating action icons.
    The wizard automatically generates an icon for each possible usage, including
    a Play Store icon, which involves creating an entirely new asset. The Show Safe
    Zone feature is, without doubt, the most useful of the preview features, as it
    displays a bounding circle that our asset should not extend beyond if our icon
    is to display correctly on all devices and platforms. The Resize: control allows
    us to quickly ensure that none of our icons extend beyond this zone.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前景层是我们应用图像的地方。这可以是我们自己的艺术品，如果我们正在创建操作图标，也可以是剪贴画/文本。向导会自动生成每种可能用途的图标，包括Play商店图标，这涉及创建一个全新的资产。“显示安全区域”功能无疑是预览功能中最有用的功能，因为它显示了一个边界圆圈，如果我们的图标要在所有设备和平台上正确显示，我们的资产不应该超出这个区域。调整大小：控件允许我们快速确保我们的图标没有超出这个区域。
- en: 'Selecting Trim: as a scaling option will remove any excess pixels before creating
    the finished icon, meaning that redundant transparent pixels are removed from
    the top layer, often significantly reducing its file size.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择修剪：作为缩放选项将在创建完成的图标之前删除任何多余的像素，这意味着顶层的多余透明像素将被删除，通常会显著减小文件大小。
- en: The background layer of an adaptive icon needs to be large enough to allow any
    trimming required to create the shapes and sizes shown in the preceding image.
    The default `ic_launcher_background.xml` produces a vector graphic describing
    a grid. This is very helpful when it comes to positioning and sizing our artwork,
    but it is not intended for use in a completed application. Google recommends that
    you use plain backgrounds with no borders or external shadows and, although Material
    guidelines allow some internal shading, the simplest solution is to use a color
    rather than an image for the background layer. This also allows us to select a
    prominent color from our theme, further promoting our brand.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 自适应图标的背景层需要足够大，以允许对其进行修剪，以创建前面图像中显示的形状和大小。默认的`ic_launcher_background.xml`生成描述网格的矢量图形。这在定位和调整我们的艺术品时非常有帮助，但不适用于已完成的应用程序。Google建议您使用没有边框或外部阴影的纯色背景，尽管Material指南允许一些内部阴影，但最简单的解决方案是使用颜色而不是图像作为背景层。这还允许我们从我们的主题中选择一个突出的颜色，进一步推广我们的品牌。
- en: '![](img/2d18238f-a8b7-42c3-bdcc-dfd16b44248e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d18238f-a8b7-42c3-bdcc-dfd16b44248e.png)'
- en: Asset background selection
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 资产背景选择
- en: The preceding image uses an icon from the clip art selection, which demonstrates
    nicely the purpose of the guidelines when it comes to designing our own.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图像使用了剪贴画选择的图标，这很好地展示了在设计我们自己的图标时指南的目的。
- en: The source image can only be selected when editing the foreground layer, regardless
    of the tab you are working on.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在编辑前景层时才能选择源图像，无论您正在使用哪个选项卡。
- en: The legacy tab allows us to ensure that our icons will still work on devices
    that run API level 25 and lower and provides us with all the design features that
    devices running these earlier versions need, such as the elongated rectangular
    icon that suited many of these devices.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 传统选项卡使我们能够确保我们的图标仍然可以在运行API级别25及更低版本的设备上运行，并为运行这些较早版本的设备提供所需的所有设计功能，例如适合许多这些设备的细长矩形图标。
- en: '![](img/eb4cbc81-2154-4ca8-a0b5-9e0121e8a6a7.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb4cbc81-2154-4ca8-a0b5-9e0121e8a6a7.png)'
- en: Editing legacy icons
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑传统图标
- en: Many developers are also accomplished artists and will be more than comfortable
    to design launcher icons from scratch. For these readers, it is important to know
    that the specified dimensions of launcher icons have changed since the inception
    of API level 26\. Although icons had been designed for a `48 x 48 px` grid, they
    must now be `108 x 108 px`, with the central `72 x 72 px` representing the portion
    that must remain visible at all times. However, there is no guarantee what manufacturers
    in the future may do with these guidelines and, as always, it is advisable to
    test all assets against as many real devices as possible.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员也是优秀的艺术家，他们将非常乐意从头开始设计启动器图标。对于这些读者来说，重要的是要知道，自API级别26开始，启动器图标的指定尺寸已经发生了变化。尽管图标是为`48
    x 48 px`的网格设计的，但现在必须是`108 x 108 px`，中心的`72 x 72 px`代表了必须始终可见的部分。但是，无法保证未来的制造商会如何遵循这些指南，因此建议尽可能多地针对所有设备进行测试。
- en: The guidelines given here are not only useful to ensure our imagery is not unnecessarily
    clipped, but also to cater for the pulse and jiggle animations now included by
    many manufacturers. These are often used to indicate the success or failure of
    an attempted user interaction.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出的指南不仅有助于确保我们的图像不会被不必要地裁剪，还有助于满足许多制造商现在包含的脉冲和摇摆动画。这些动画通常用于指示尝试的用户交互的成功或失败。
- en: 'It is not, of course, strictly necessary to use the built-in asset studio to
    create adaptive icons, and once the basics are grasped, we can, of course, design
    and include our own directly as an XML. This can be done using the `android:roundIcon`
    identifier in a manifest file, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，创建自适应图标并不是严格必要的，一旦掌握了基础知识，我们当然可以直接设计和包含我们自己的XML。这可以在清单文件中使用`android:roundIcon`标识符来完成，如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Adaptive icons can then be added to any XML layout using the `adaptive-icon`
    attribute, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 自适应图标可以使用`adaptive-icon`属性添加到任何XML布局中，如下所示：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although the set of included action icons is comprehensive, it is always good
    to have as much choice as possible, and a much larger and constantly updated collection
    can be found at [material.io/icons/](http://material.io/icons/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管包含的动作图标集很全面，但尽可能多的选择总是好的，可以在[material.io/icons/](http://material.io/icons/)找到一个更大更不断更新的集合。
- en: '![](img/615b0235-0a87-4edb-b1ca-4b6d884a081c.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/615b0235-0a87-4edb-b1ca-4b6d884a081c.png)'
- en: Material icons
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 材料图标
- en: The Image Asset Studio is great for generating the small, in-app icons that
    we use on tabs, action bars, and so on, but it is limited when it comes to launcher
    icons, which should be bright and colorful and, in material terms, 3D. For this
    reason, launcher icons deserve a small section of their own.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图像资产工具非常适合生成我们在选项卡、操作栏等上使用的小型应用内图标，但在创建启动器图标时受到限制，启动器图标应该是明亮、多彩的，并且在材料方面是3D的。因此，启动器图标值得拥有自己的小节。
- en: Launcher icon tools
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动器图标工具
- en: Generally speaking, launcher icons are created using an external editor and,
    as we shall see, there are Studio plugins to assist us in creating stylish Android
    icons. One of the best tools is an online, alternative, and enhanced version of
    Asset Studio itself. It was created by the Google designer Roman Nurik and can
    be found on GitHub at [romannurik.github.io/AndroidAssetStudio](http://romannurik.github.io/AndroidAssetStudio).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，启动器图标是使用外部编辑器创建的，正如我们将看到的，有Studio插件可以帮助我们创建时尚的Android图标。其中一个最好的工具是Asset
    Studio本身的在线、替代和增强版本。它是由谷歌设计师Roman Nurik创建的，可以在GitHub上找到[romannurik.github.io/AndroidAssetStudio](http://romannurik.github.io/AndroidAssetStudio)。
- en: This online version offers over half a dozen different icon generators, including
    features not included in the native version as well as a neat icon animator. The
    launcher icon generator is of interest here, as it allows us to set material features
    not offered in the IDE such as elevation, shadow, and scoring.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个在线版本提供了半打不同的图标生成器，包括原生版本中没有的功能，以及一个整洁的图标动画。这里感兴趣的是启动器图标生成器，因为它允许我们设置IDE中没有提供的材料特性，如高程、阴影和评分。
- en: One of the best things about this editor is the way it displays the material
    design icon keylines.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个编辑器最好的地方之一是它显示了材料设计图标的关键线。
- en: '![](img/74245e77-6b10-488e-8fea-59e8729fc068.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74245e77-6b10-488e-8fea-59e8729fc068.png)'
- en: Launcher icon keylines
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 启动器图标关键线
- en: The design of what Google call *product* icons is beyond the scope of this book,
    but Google has some very interesting guidelines on the matter, which can be found
    at [material.io/guidelines/style/icons](https://material.io/guidelines/style/icons.html).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌称之为*产品*图标的设计超出了本书的范围，但谷歌在这个问题上有一些非常有趣的指南，可以在[material.io/guidelines/style/icons](https://material.io/guidelines/style/icons.html)找到。
- en: However, when you configure your launcher icons, you will need some kind of
    external graphics editor at some point. There are some tools that can help us
    integrate Android Studio with these editors.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当您配置启动器图标时，您将需要某种外部图形编辑器。有一些工具可以帮助我们将Android Studio与这些编辑器集成。
- en: 'The Android Material Design Icon Generator is a fantastic plugin from JetBrains
    and does precisely what its title suggests. It does not need to be downloaded,
    as it can be found in the plugin repository. If you want to use it with another
    IDE, it can be downloaded from the following URL:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Android Material Design图标生成器是来自JetBrains的一个很棒的插件，它正是其标题所暗示的。它不需要下载，因为它可以在插件存储库中找到。如果您想在另一个IDE中使用它，可以从以下URL下载：
- en: '[github.com/konifar/android-material-design-icon-generator-plugin](http://github.com/konifar/android-material-design-icon-generator-plugin)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com/konifar/android-material-design-icon-generator-plugin](http://github.com/konifar/android-material-design-icon-generator-plugin)'
- en: 'If you are new to Android Studio plugins, perform the following simple steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Android Studio插件的新手，请执行以下简单步骤：
- en: Open the settings dialog from File | Settings....
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件|设置中打开设置对话框....
- en: Open the Plugins dialog and click on Browse repositories....
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开插件对话框，然后单击浏览存储库....
- en: Type Material into the search box and select and install the plugin.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中键入材料，然后选择并安装插件。
- en: '![](img/190a2f6a-e708-443d-b5e1-ac1f7d0d5bec.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/190a2f6a-e708-443d-b5e1-ac1f7d0d5bec.png)'
- en: The plugins repository
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 插件存储库
- en: Restart Android Studio.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Android Studio。
- en: The plugin can now be opened from most New... submenus or with *Ctrl* + *Alt*
    + *M*. The icon generator is simple, but offers all the important functions, such
    as being able to create both bitmap and vector images and a choice of all density
    groupings, as well as color and size selectors.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以从大多数New...子菜单或*Ctrl* + *Alt* + *M*打开插件。图标生成器很简单，但提供了所有重要的功能，比如能够创建位图和矢量图像以及所有密度分组的选择，以及颜色和大小选择器。
- en: '![](img/41b24384-4dc0-43e1-b9e8-5689197f2637.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41b24384-4dc0-43e1-b9e8-5689197f2637.png)'
- en: The Android Material Design Icon Generator plugin
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Android Material Design图标生成器插件
- en: The icon generator also has a handy link to the ever growing GitHub material
    design icon repository.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图标生成器还有一个方便的链接到不断增长的GitHub材料设计图标存储库。
- en: Sympli is a sophisticated, but expensive, design tool that works with the graphics
    editor of your choice and Android Studio via a Studio plugin. It generates icons
    and other assets automatically and is designed to be used among teams. It can
    be found at [sympli.io](https://sympli.io/).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Sympli是一个复杂但昂贵的设计工具，可以与您选择的图形编辑器和Android Studio一起使用。它可以自动生成图标和其他资产，并设计用于团队使用。它可以在[sympli.io](https://sympli.io/)找到。
- en: Although not a Studio plugin as such, there is a handy Python script on GitHub
    that GIMP users can find at [github.com/ncornette/gimp-android-xdpi](https://github.com/ncornette/gimp-android-xdpi).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是Studio插件本身，但GitHub上有一个方便的Python脚本，GIMP用户可以在[github.com/ncornette/gimp-android-xdpi](https://github.com/ncornette/gimp-android-xdpi)找到。
- en: Simply download the script and save it in your GIMP `plug-ins` folder as `gimpfu_android_xdpi.py`.
    It can then be accessed from the image's Filter menu.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 只需下载脚本并将其保存在GIMP的`plug-ins`文件夹中，命名为`gimpfu_android_xdpi.py`。然后可以从图像的滤镜菜单中访问它。
- en: '![](img/146fe493-a3f5-46fc-bdc0-1d27c930fccc.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/146fe493-a3f5-46fc-bdc0-1d27c930fccc.png)'
- en: Automatic icon generation
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成图标
- en: As you can see in the preceding screenshot, this plugin provides all the main
    choices we need to make when converting a single image into a set of icons.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，此插件提供了将单个图像转换为一组图标时需要做出的所有主要选择。
- en: Being able to create and configure icons using these tools is useful and time
    saving, but there are many times when we will not use bitmaps for our icons at
    all, and instead use vector graphics, which only require an image for all densities.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些工具创建和配置图标非常有用，也节省时间，但有很多时候我们根本不会使用位图作为我们的图标，而是使用矢量图形，它只需要一个图像来适配所有密度。
- en: Vector graphics load more slowly than raster images, but, once loaded, are a
    little faster. Very large vector images load slowly, so they should be avoided.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量图形加载比光栅图像慢，但一旦加载，速度会快一点。非常大的矢量图像加载速度慢，因此应该避免使用。
- en: Vector drawables are cached as correctly sized bitmaps at runtime. If you want
    to display the same drawable at different sizes, create a vector graphic for each.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量图形在运行时以正确大小的位图进行缓存。如果要以不同大小显示相同的可绘制对象，请为每个创建一个矢量图形。
- en: For those who fancy creating vector images from scratch, there are some very
    useful free tools.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些喜欢从头开始创建矢量图像的人来说，有一些非常有用的免费工具。
- en: Method Draw is an online **Scaleable Vector Graphics** (**SVG**) editor that
    offers a simple, but very functional, set of tools to generate simple vector images,
    such as those we want for our action and notification icons. Creations can be
    downloaded as `.svg` files and imported directly into Studio. It can be found
    at `editor.method.ac`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Method Draw是一个在线**可缩放矢量图形**（**SVG**）编辑器，提供了一组简单但非常实用的工具，用于生成简单的矢量图像，比如我们想要用于操作和通知图标的图像。创作可以下载为`.svg`文件并直接导入到Studio中。它可以在`editor.method.ac`找到。
- en: If you want a more sophisticated tool, Boxy SVG Editor is available on the Chrome
    Web Store, but it works offline and offers features similar to packages such as
    Inkscape or Sketch.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更复杂的工具，Boxy SVG Editor可以在Chrome Web Store上找到，但它可以离线使用，并提供类似于Inkscape或Sketch的功能。
- en: Vector Asset Studio
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矢量资源工作室
- en: The vector graphics asset studio performs the same function as the raster graphics
    version, but it is more fun to work with. When dealing with preset icons, it is
    even simpler to use a sibling that requires nothing more than the selection of
    the material icon.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量图形资源工作室执行与光栅图形版本相同的功能，但更有趣。处理预设图标时，甚至可以更简单地使用一个只需要选择材料图标的兄弟。
- en: '![](img/83f83504-d68e-477d-ba45-e614ba9f62c0.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83f83504-d68e-477d-ba45-e614ba9f62c0.png)'
- en: Vector Asset Studio
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量资源工作室
- en: 'Once created, an asset like this is saved in XML as a `VectorDrawable` class:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，这样的资源将以`VectorDrawable`类的XML格式保存：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Android vector drawables are a similar, and somewhat simplified, version of
    the SVG format, familiarly associated with `.svg` files. As with raster assets,
    it is very easy to use existing icons. Only when we want to modify these or create
    our own does it become interesting.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Android矢量图形与SVG格式类似，有点简化，通常与`.svg`文件相关联。与光栅资源一样，使用现有图标非常容易。只有当我们想要修改这些图标或创建自己的图标时，才变得有趣。
- en: Of course, it is not necessary to learn SVG or even understand the `pathData`
    of a `VectorDrawable`, but it is good to understand a little of the process and
    some of the tools at our disposal.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，学习SVG或者理解`VectorDrawable`的`pathData`并不是必要的，但了解一点这个过程和我们可以使用的一些工具是有好处的。
- en: Vector drawables
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矢量图形
- en: 'The vector studio allows us to import SVG files and convert them into VectorDrawables.
    There are many ways to obtain vector graphics, and many graphic editors can convert
    from other formats. There are also some very good online tools to convert other
    formats to SVG:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量工作室允许我们导入SVG文件并将其转换为VectorDrawables。有许多获取矢量图形的方法，许多图形编辑器可以从其他格式转换。还有一些非常好的在线工具可以将其他格式转换为SVG：
- en: '[image.online-convert.com/convert-to-svg](http://image.online-convert.com/convert-to-svg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[image.online-convert.com/convert-to-svg](http://image.online-convert.com/convert-to-svg)'
- en: 'And JetBrains plugin is also available from:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains插件也可以从以下位置获得：
- en: '[plugins.jetbrains.com/plugin/8103-svg2vectordrawable](https://plugins.jetbrains.com/plugin/8103-svg2vectordrawable)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[plugins.jetbrains.com/plugin/8103-svg2vectordrawable](https://plugins.jetbrains.com/plugin/8103-svg2vectordrawable)'
- en: 'It is unlikely that you will do much when you write your own SVG objects, but
    it is useful to see how the process operates, as these steps demonstrate:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写自己的SVG对象时，你可能不会做太多事情，但了解这个过程是有用的，因为这些步骤展示了这些：
- en: 'Save the following code as a `.svg` file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码保存为`.svg`文件：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Open an Android Studio project and then navigate to the vector studio.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android Studio项目，然后转到矢量工作室。
- en: Select Local File and then the SVG file created in the preceding code.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择本地文件，然后选择前面代码中创建的SVG文件。
- en: 'Click on Next and Finish to convert to the following `VectorDrawable`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“下一步”和“完成”以转换为以下`VectorDrawable`：
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is usually a good idea to color vector icons black and color them using the
    `tint` property. This way, one icon can be reused with different themes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常将矢量图标着色为黑色，并使用`tint`属性进行着色是一个好主意。这样，一个图标可以在不同的主题下重复使用。
- en: 'The SVG `<polygon>` is easy to understand, as it is a simple list of points
    defining the corners of the shape. The `android:pathData` string, on the other
    hand, is a little more cryptic. It is most easily explained as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SVG`<polygon>`很容易理解，因为它是定义形状角的简单点列表。另一方面，`android:pathData`字符串有点更加神秘。最容易解释的方式如下：
- en: '`M` is move'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M`是移动'
- en: '`100,10`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`100,10`'
- en: '`l` line to'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`线到'
- en: '`-60,188`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`-60,188`'
- en: '`l` line to'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`线到'
- en: '`150,-120`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`150,-120`'
- en: '`l` line to'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`线到'
- en: '`-180,0`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`-180,0`'
- en: '`l` line to'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`线到'
- en: '`150,120 z`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`150,120 z`'
- en: '`(end path)`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: （结束路径）
- en: The preceding format uses caps to indicate absolute positions and lowercase
    to indicate relative ones. We can also create vertical and horizontal lines with
    `V`(`v`) and `H`(`h`), respectively.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的格式使用大写字母表示绝对位置，小写字母表示相对位置。我们还可以使用`V`（`v`）和`H`（`h`）创建垂直和水平线。
- en: 'It is actually not necessary to include the final coordinate if the path end
    qualifier, z, is provided. Also, a character can be omitted if it is the same
    as the one before, as is the case with the `line-to` command previousl; consider
    the following string:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 不必在路径结束限定符z提供的情况下包括最终坐标。此外，如果字符与之前的字符相同，则可以省略一个字符，就像以前的“line-to”命令一样；考虑以下字符串：
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding string could be written as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的字符串可以写成如下形式：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that there are two sets of image dimensions, as you might expect--`viewportWidth`
    and `viewportHeight`; that refer to the canvas size of the original SVG image.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有两组图像尺寸，正如您所期望的那样--`viewportWidth`和`viewportHeight`；它们指的是原始SVG图像的画布大小。
- en: It may seem unnecessary to concern ourselves with the vector data itself, as
    this is generated by the asset studio; but, as we shall see next, when it comes
    to animated icons (as well as other animated vector graphics), an understanding
    of the inner structure of a vector drawable can be very useful.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 关于矢量数据本身似乎是无关紧要的，因为这是由资源工作室生成的；但是，正如我们将在下面看到的，当涉及到动画图标（以及其他动画矢量图形）时，对矢量可绘制的内部结构的理解是非常有用的。
- en: Animated icons
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画图标
- en: Everyone with an Android device will be familiar with the animated icon. Perhaps
    the best known example is the way the hamburger icon transforms into an arrow
    and vice versa when a navigation drawer is opened and closed. The use of vector
    graphics makes this process remarkably simple. Provided that both the icons have
    the same number of points, any icon can be transformed into any other.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 每个使用Android设备的人都会熟悉动画图标。也许最著名的例子是当导航抽屉打开和关闭时，汉堡图标如何变换为箭头，反之亦然。矢量图形的使用使得这个过程非常简单。只要这两个图标具有相同数量的点，任何图标都可以转换为任何其他图标。
- en: Using space efficiently is essential on a mobile device, and animating action
    icons not only looks good, but also saves space and, if applied intelligently,
    will convey meaning to the user as well.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动设备上有效地使用空间是至关重要的，而动画化操作图标不仅看起来不错，而且还节省空间，并且如果应用得当，还会向用户传达意义。
- en: Vector images are easily transformed from one to another by mapping points on
    the original image onto the target image. This is done with the `AnimatedVectorDrawable`
    class.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量图像可以通过将原始图像上的点映射到目标图像上而轻松地从一个图像转换为另一个图像。这是通过`AnimatedVectorDrawable`类完成的。
- en: There are several methods of animating these drawables. Firstly, we can apply
    a number of predefined animations, such as rotation and translation. We can also
    use built-in interpolation techniques to *morph* from one drawable to another,
    regardless of the number of points. We will take a look at both of these techniques.
    However, first, we will examine how to use the image paths to control the animation,
    as this gives us the most control.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以对这些可绘制进行动画处理。首先，我们可以应用许多预定义的动画，比如旋转和平移。我们还可以使用内置的插值技术来*变形*从一个可绘制到另一个，而不管点的数量。我们将研究这两种技术。然而，首先，我们将研究如何使用图像路径来控制动画，因为这给了我们最大的控制权。
- en: 'The following image represents an arrow icon animating from pointing left,
    to pointing right:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像表示一个箭头图标从左指向右的动画：
- en: '![](img/6a7d7807-59fe-497e-8189-986b2cc9c1cc.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a7d7807-59fe-497e-8189-986b2cc9c1cc.png)'
- en: An animated arrow icon.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一个动画箭头图标。
- en: The following steps demonstrate how to create such an animated vector drawable.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了如何创建这样一个动画矢量可绘制。
- en: 'Begin by storing the paths to the two arrows as strings, as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将两个箭头的路径存储为字符串，如下所示：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As both paths are recorded as strings, we only need to define one vector drawable--call
    it `ic_arrow_left.xml`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于两条路径都记录为字符串，我们只需要定义一个矢量可绘制--称之为`ic_arrow_left.xml`：
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the `res/animator`  folder and the `arrow_animation.xml` file, inside
    it:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`res/animator`文件夹和`arrow_animation.xml`文件，放在其中：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can use this to create our animated drawable, `ic_arrow_animated.xml`:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用这个来创建我们的动画可绘制，`ic_arrow_animated.xml`：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To see this in action, use the following Java snippet:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看这个动画效果，请使用以下Java代码片段：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By animating a vector's path, we can easily create new animations by reordering
    our points.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 通过动画化矢量的路径，我们可以通过重新排列我们的点轻松地创建新的动画。
- en: The key to this process is the `ObjectAnimator` class in the `arrow_animation` file.
    This class is far more powerful than it might seem here. In this example, we selected
    the `pathData` property to animate, but we could have animated almost any property
    we choose. In fact, any numerical property, including colors, can be animated
    this way.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的关键是`arrow_animation`文件中的`ObjectAnimator`类。这个类比它在这里看起来的要强大得多。在这个例子中，我们选择了要动画化的`pathData`属性，但我们几乎可以动画化我们选择的任何属性。事实上，任何数值属性，包括颜色，都可以用这种方式进行动画化。
- en: The object animator provides an opportunity to create imaginative new animations,
    but only for extant properties. However, what if we want to animate a value that
    we defined or, perhaps, a variable, reflecting some app-specific data? In these
    circumstances, we can take advantage of the ValueAnimator, from which the ObjectAnimator
    is descended.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对象动画提供了创造富有想象力的新动画的机会，但只适用于现有属性。但是，如果我们想要动画化我们定义的值或者可能是反映一些特定应用程序数据的变量，该怎么办呢？在这种情况下，我们可以利用ValueAnimator，从中派生出ObjectAnimator。
- en: 'Roman Nurik''s online asset studio also has a powerful and easy-to-use animated
    icon generator , which can be found at:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Roman Nurik的在线资源工作室还有一个功能强大且易于使用的动画图标生成器，可以在以下网址找到：
- en: '[romannurik.github.io/AndroidIconAnimator](http://romannurik.github.io/AndroidIconAnimator)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[romannurik.github.io/AndroidIconAnimator](http://romannurik.github.io/AndroidIconAnimator)'
- en: Using path data, this way offers a very flexible animation framework, particularly
    when we want to morph one icon into another, as it changes its function, as is
    often seen with toggle action such as play/pause. However, this is not our only
    option, as there are ready-made animations that we can apply to our vector assets
    and ways to transform icons into others that do not share the same number of points.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用路径数据，这种方式提供了一个非常灵活的动画框架，特别是当我们想要将一个图标变形为另一个图标时，因为它改变了它的功能，通常在切换操作中经常看到，比如播放/暂停。然而，这并不是我们唯一的选择，因为有现成的动画可以应用到我们的矢量资产上，以及将图标转换为其他图标的方法，这些图标并不具有相同数量的点。
- en: Other animations
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他动画
- en: Morphing path data is one of the the most fun ways to animate icons (and other
    drawables), but sometimes we just need a simple symmetrical motion, such as rotation
    and translation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 变形路径数据是动画图标（和其他可绘制对象）的最有趣的方式之一，但有时我们只需要一个简单的对称运动，比如旋转和平移。
- en: 'The following example demonstrates how to apply one of these animation types:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何应用这些动画类型之一：
- en: 'Select a vector drawable of your choice and save its `pathData` as a string.
    Here, we have taken the data from the asset studio using the `ic_first_page_black_24dp`
    icon:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您喜欢的矢量可绘制对象，并将其`pathData`保存为字符串。在这里，我们使用`ic_first_page_black_24dp`图标从资源工作室获取数据。
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/51ba20b3-18b6-437e-a642-5027584ccb5f.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51ba20b3-18b6-437e-a642-5027584ccb5f.png)'
- en: the ic_first_page_black_24dp icon
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ic_first_page_black_24dp图标
- en: 'As before, create an XML asset for this; here, we will call it `ic_first_page.xml`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与以前一样，为此创建一个XML资源；在这里，我们将其称为`ic_first_page.xml`：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once again, create an object animator, call it `rotation.xml` this time, and
    complete it as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次创建一个对象动画器，这次称为`rotation.xml`，并完成如下：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we can create the animated version of the icon, as we did before, by setting
    a target. Here, the file is called `ic_animated_page.xml`, and it looks like this:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以创建图标的动画版本，就像以前一样，设置一个目标。在这里，文件名为`ic_animated_page.xml`，看起来像这样：
- en: '[PRE15]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The animation can be called by first adding it to our layout, as we would do
    with any other icon, and calling it from code like this:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画可以通过首先将其添加到我们的布局中，就像我们对任何其他图标所做的那样，并从代码中调用它来调用：
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The biggest difference here, apart from the animation type, is the inclusion
    of our `<path>` within a `<group>`. This is normally used for when there is more
    than one target, but, in this case, it is because it allows us to set a pivot
    point for the rotation with `vectorX/Y`. It also has equivalent settings for `scaleX/Y`,
    `translateX/Y`, and `rotate`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 除了动画类型之外，这里最大的不同之处在于我们的`<path>`包含在`<group>`中。这通常用于当有多个目标时，但在这种情况下，是因为它允许我们使用`vectorX/Y`为旋转设置一个中心点。它还具有`scaleX/Y`、`translateX/Y`和`rotate`的等效设置。
- en: To change an icon's transparency, set `alpha` in `<vector>`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改图标的透明度，在`<vector>`中设置`alpha`。
- en: Having to build a project to test simple graphical features, such as these animated
    icons, can be very time-consuming. Jimu Mirror is a layout preview plugin that
    displays animations and other moving components. It connects via a device or emulator,
    and through a sophisticated hot-swapping process, layouts can be edited and retested
    within seconds. Jimu is not open source, but is not overly expensive and is available
    on a free trial. It can be downloaded from [www.jimumirror.com](http://www.jimumirror.com).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 不得不构建一个项目来测试简单的图形特性，比如这些动画图标，可能非常耗时。Jimu Mirror是一个布局预览插件，可以显示动画和其他移动组件。它通过设备或模拟器连接，并通过一个复杂的热交换过程，可以在几秒钟内编辑和重新测试布局。Jimu不是开源的，但价格不是很昂贵，并且可以免费试用。它可以从[www.jimumirror.com](http://www.jimumirror.com)下载。
- en: The focus of this chapter is primarily to examine how Android Studio and associated
    tools can facilitate the generation of application icons. This has led us to take
    a look at Android drawables in general, both bitmaps and vector graphics. We explored
    other drawables briefly, earlier in the book, and now that we looked more deeply
    into the matter, now is a good time to revisit these drawables.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点主要是检查Android Studio和相关工具如何促进应用程序图标的生成。这使我们能够总体上了解Android可绘制对象，包括位图和矢量图形。我们在本书的前面简要地探讨了其他可绘制对象，现在我们更深入地研究了这个问题，现在是重新审视这些可绘制对象的好时机。
- en: General drawables
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般的可绘制对象
- en: We saw earlier how to convert a black icon into a color to match our app or
    current activity using tinting. With other images, there are times when they take
    up a considerable amount of the screen, and we want to apply the reverse and have
    our icons colored so that they match our graphics. Fortunately, Android provides
    a support library to extract prominent and dominant colors from any bitmap.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到了如何使用着色将黑色图标转换为与我们的应用程序或当前活动相匹配的颜色。对于其他图像，有时它们占据了屏幕的相当大部分，我们希望应用相反的效果，使我们的图标着色以匹配我们的图形。幸运的是，Android提供了一个支持库，可以从任何位图中提取突出和主导颜色。
- en: The palette library
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调色板库
- en: Applying our own themes to our apps can produce very stylish-looking interfaces,
    especially when we are dealing with text, icons, and images we created ourselves
    to suit the app. Many apps incorporate the user's own images and, in these cases,
    there is no way of knowing in advance how to select a pleasing design. The **palette
    support library** provides us with this functionality, allowing fine control over
    text, icon, and background coloring.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们自己的主题应用到我们的应用程序可以产生非常时尚的界面，特别是当我们处理我们自己为应用程序创建的文本、图标和图像时。许多应用程序都包含用户自己的图像，在这些情况下，事先无法知道如何选择令人愉悦的设计。**调色板支持库**为我们提供了这种功能，允许对文本、图标和背景颜色进行精细控制。
- en: 'The following steps demonstrate how to extract the prominent colors from a
    bitmap drawable:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了如何从位图可绘制对象中提取突出的颜色：
- en: Start a new Android Studio project and open the Project Structure dialog from
    the `File` menu or *Ctrl* + *Alt* + *Shift* + *S*.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的Android Studio项目，并从“文件”菜单或*Ctrl* + *Alt* + *Shift* + *S*打开“项目结构”对话框。
- en: Open the Dependency tab from your app Module and add a Library dependency from
    the + icon in the top-right corner, using the search tool to find the library.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序模块中打开依赖选项卡，并从右上角的+图标中添加库依赖项，使用搜索工具查找库。
- en: '![](img/954defd3-33a5-43dc-84ec-7867eb1057f0.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/954defd3-33a5-43dc-84ec-7867eb1057f0.png)'
- en: Library dependency selector
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 库依赖项选择器
- en: 'This will add the following line to your `build.gradle` file:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在您的`build.gradle`文件中添加以下行：
- en: '[PRE17]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a layout with a large image view and at least two text views. Call these
    text views `text_view_vibrant` and `text_view_muted`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有大图像视图和至少两个文本视图的布局。将这些文本视图命名为`text_view_vibrant`和`text_view_muted`。
- en: 'Open your main Java activity and add the following fields:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的主Java活动并添加以下字段：
- en: '[PRE18]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Associate the preceding `TextViews` with their XML counterparts, as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前述的`TextViews`与它们的XML对应项关联，如下所示：
- en: '[PRE19]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Assign the bitmap declared in step 5:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配在步骤5中声明的位图：
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, add the following clause to extract prominent vivid and muted colors
    from the image:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加以下条款以从图像中提取突出的鲜艳和柔和的颜色：
- en: '[PRE21]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/21cb6ae8-5d1e-40cc-9534-da97d4dba86d.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21cb6ae8-5d1e-40cc-9534-da97d4dba86d.png)'
- en: Extracted colors
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的颜色
- en: The preceding method outlined is effective but crude. There is a lot more that
    can be done with the palette library, and we need to know quite a few things to
    be able to take best advantage of it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 前面概述的方法是有效但粗糙的。调色板库还有很多功能，我们需要了解很多东西才能充分利用它。
- en: The use of a `default_color` by the palette is needed, as the extraction of
    these colors is not always possible and sometimes fails. This often happens with
    *washed out* images with very few colors and also with highly irregular images
    with little definition. Somewhat ironically, the scan can also fail when presented
    with over-saturated graphics with many colors and with very regular patterns where
    no color, if any, dominates.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 调色板使用`default_color`是必要的，因为提取这些颜色并不总是可能的，有时会失败。这经常发生在*褪色*的图像和颜色很少的图像以及定义很少的高度不规则的图像上。有些讽刺的是，当呈现过饱和的图形和颜色很多的非常规则的图案时，扫描也可能失败，因为没有颜色（如果有的话）会支配。
- en: One very important point when extracting these palettes is that working with
    large bitmaps can present a serious drain on device resources and all work with
    bitmaps should not, where possible, be performed on the current thread. The preceding
    example took no account of this, but the library has a listener class that allows
    us to perform these tasks asynchronously.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取这些调色板时非常重要的一点是，使用大位图可能会严重消耗设备资源，所有与位图的工作在可能的情况下不应在当前线程上执行。前面的示例没有考虑到这一点，但库中有一个监听器类，允许我们异步执行这些任务。
- en: 'Consider the following example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE22]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use the following listener, instead of the preceding one, to react once the
    bitmap is generated:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下监听器，而不是前面的监听器，以在生成位图后做出反应：
- en: '[PRE23]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding example, we extracted just two colors, using `Palette.getVibrantColor()`
    and `Palette.getMutedColor()`. These often suit our purposes very well, but if
    they do not, there are lighter and darker versions of each, and these can be accessed
    using getters, such as `getDarkVibrantColor()` or `getLightMutedColor()`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们只提取了两种颜色，使用`Palette.getVibrantColor()`和`Palette.getMutedColor()`。这些通常非常适合我们的目的，但如果不适合，还有每种颜色的浅色和深色版本，可以使用getter来访问，比如`getDarkVibrantColor()`或`getLightMutedColor()`。
- en: The palette library has more features than we have space for here, such as being
    able to select text coloring to match analyzed images, and as it is not exclusive
    to Android Studio, it is likely that readers switching from other IDEs will already
    be familiar with it.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 调色板库的功能比我们在这里介绍的要多，比如能够选择与分析图像匹配的文本颜色，而且它并不是Android Studio专属的，因此从其他IDE切换过来的读者可能已经熟悉它。
- en: The Studio features we have covered in this book show how useful the IDE is
    when it comes to developing layouts and UIs, but, of course, this is just half
    the story. No matter how well put together our layouts are, they are as good as
    useless without logic behind them, and this is where Android Studio really starts
    to come into its own.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中介绍的Studio功能展示了IDE在开发布局和UI时的实用性，但当然，这只是故事的一半。无论我们的布局多么完美，如果没有逻辑支持，它们就毫无用处，这就是Android
    Studio真正开始发挥作用的地方。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Not only in this chapter, but also in the previous three chapters, we saw how
    Android Studio makes the designing and testing of our graphical layouts over a
    wide range of devices and factors both simple and intuitive. Having been specifically
    designed for Android's eccentricities, Studio is also the first to integrate new
    design features, such as the constraint layout, which has revolutionized designing
    of visual activities.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅在本章，而且在前面的三章中，我们看到了Android Studio如何使得在各种设备和因素上设计和测试我们的图形布局变得简单而直观。Studio专门为Android的特点而设计，也是第一个集成新设计功能的工具，比如约束布局，这彻底改变了视觉活动的设计。
- en: The chapters done till now have covered all the fundamental design considerations
    catered for by the IDE and hopefully introduced the reader to the wealth of features
    that simplify and clarify this often complex process.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，已经涵盖了IDE所考虑的所有基本设计问题，并希望向读者介绍了简化和澄清这个常常复杂过程的丰富功能。
- en: In the next chapter, we will begin the process of bringing these designs to
    life as we see how Android Studio facilitates the often complex processes of coding,
    testing, and debugging our applications. These essential processes often overlap
    and most developers will find themselves having to revisit each as they fine-tune
    their work. Android Studio guides developers through and around this course, enabling
    them to track and evaluate as they go.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始将这些设计变为现实，看看Android Studio如何简化编码、测试和调试应用程序的复杂过程。这些基本过程经常重叠，大多数开发人员会发现自己不得不在微调工作时重新访问每个过程。Android
    Studio引导开发人员在这个过程中前后穿梭，使他们能够在进行时跟踪和评估。
- en: Android Studio has helped you to turn your ideas into delightful layouts. The
    next step is to bring these layouts to life with your logic. As one might imagine,
    the IDE is as helpful when it comes to logic as it has been when it was applied
    to design.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio已经帮助您将您的想法转化为令人愉悦的布局。下一步是用您的逻辑将这些布局变得生动起来。正如人们可能想象的那样，当涉及到逻辑时，IDE在设计时一样有帮助。
