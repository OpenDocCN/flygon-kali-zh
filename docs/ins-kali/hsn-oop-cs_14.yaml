- en: Prepare Yourself - Interviews and the Future
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为面试做好准备-面试和未来
- en: This is an unusual chapter in an **Object-oriented programming** (**OOP**) book.
    Job interviews are an important part of a software developer’s career. An interview
    is like a test of your knowledge. It gives you an idea of how much you know and
    what you should learn more about. It’s also a way to learn from experienced developers in
    other companies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本**面向对象编程**（**OOP**）书中不同寻常的一章。面试是软件开发人员职业生涯的重要组成部分。面试就像对你知识的一次考验。它让你了解自己的知识水平和你应该学习更多的内容。这也是向其他公司的经验丰富的开发人员学习的一种方式。
- en: The main purpose of this chapter is to give you a glimpse into the types of question
    that are asked in a job interview and how you can prepare yourself for them. Bear
    in mind that job interview questions depend on the position you have applied for,
    the company, the interviewer’s knowledge, and the technology stacks the company
    is using. While not all of these questions will be asked, there is a high possibility
    that some might be, as these determine your basic OOP and C# knowledge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目的是让你了解在工作面试中会问到哪些类型的问题，以及你如何为此做好准备。请记住，工作面试问题取决于你申请的职位、公司、面试官的知识以及公司正在使用的技术栈。虽然不是所有这些问题都会被问到，但有可能会问到其中一些，因为这些问题决定了你的基本面向对象编程和C#知识。
- en: 'Let''s review the topics we will be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章将涵盖的主题：
- en: Interview questions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面试问题
- en: Interview and career tips
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面试和职业建议
- en: Things to learn next
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来要学习的东西
- en: Importance of reading
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读的重要性
- en: Interview questions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面试问题
- en: In this section, we are going to discuss some of the most common interview questions
    for a beginner to mid-level developer. As this book is about C#, we will also
    have questions that directly relate to the C# programming language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些初学者到中级开发人员最常见的面试问题。由于本书是关于C#的，我们还将提出与C#编程语言直接相关的问题。
- en: What are the fundamental principles of object-oriented programming?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程的基本原则是什么？
- en: 'Object-oriented programming has four fundamental principles:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程有四个基本原则：
- en: Inheritance
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承
- en: Encapsulation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装
- en: Abstraction
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象
- en: Polymorphism
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态
- en: What is inheritance?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是继承？
- en: '**Inheritance** means that a class can inherit the attributes and methods of
    another class. For example, `Dog` is a class, but it is also a subclass of `Animal`.
    An `Animal` class is a more general class that has the basic attributes and methods
    that all animals have. As a dog is also an animal, a `Dog` class can inherit the `Animal`
    class, so that all the attributes and methods of the `Animal` class also become
    available in the `Dog` class.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**继承**意味着一个类可以继承另一个类的属性和方法。例如，`Dog`是一个类，但它也是`Animal`的子类。`Animal`类是一个更一般的类，具有所有动物都具有的基本属性和方法。由于狗也是一种动物，`Dog`类可以继承`Animal`类，因此`Animal`类的所有属性和方法也可以在`Dog`类中使用。'
- en: What is encapsulation?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是封装？
- en: '**Encapsulation** means hiding the data of a class. Access modifiers in C#
    are mainly used for the purpose of encapsulation. If we make a method or field
    private, that method or field is not accessible outside the class. This means
    we are hiding that data from the outside world. The main reason for having encapsulation
    is that we want to hide more complicated implementations and only show simple
    interfaces to the outside world for easy usage.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**封装**意味着隐藏类的数据。C#中的访问修饰符主要用于封装的目的。如果我们将一个方法或字段设置为私有，那么该方法或字段在类外部是不可访问的。这意味着我们将数据隐藏在外部世界之外。封装的主要原因是我们希望隐藏更复杂的实现，只向外部世界展示简单的接口以便于使用。'
- en: What is abstraction?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是抽象？
- en: '**Abstraction** is an idea, something that is not real. **Abstraction** means
    providing the idea of a certain object to the outside world but not it''s implementation.
    Interfaces and abstract classes are examples of abstraction. When we create an
    interface, we don''t implement the methods in it, but when a class implements
    the interface, it has to implement the method as well. This means the interface
    is actually giving an abstract impression of the class.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**抽象**是一个概念，不是真实的东西。**抽象**意味着向外界提供某个对象的概念，但不提供其实现。接口和抽象类是抽象的例子。当我们创建一个接口时，我们不在其中实现方法，但当一个类实现接口时，它也必须实现该方法。这意味着接口实际上给出了类的抽象印象。'
- en: What is polymorphism?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是多态？
- en: '**Polymorphism** means many forms. In OOP, we should have the option of creating
    one thing in many forms. For example, you can have an `addition` method that might
    have different implementations, depending on the input it receives. An `addition`
    method that receives two integers and returns the sum of those integers could
    be one implementation. There could be another form of `addition` method, which
    might take two double values and return the sum of those double values.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**多态**意味着多种形式。在面向对象编程中，我们应该有创建一种东西的多种形式的选项。例如，您可以有一个`addition`方法，它可能具有不同的实现，具体取决于它接收的输入。一个接收两个整数并返回这些整数的和的`addition`方法可能是一种实现。还可能有另一种形式的`addition`方法，它可能接受两个双精度值并返回这些双精度值的和。'
- en: What is an interface?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是接口？
- en: An **interface** is an entity or feature of the C# programming language that
    is used to apply abstraction in a program. It’s like a contract between a class
    and the interface itself. The contract is that the class that will inherit the
    interface must implement the method signatures that the interface has within itself.
    An interface can’t be instantiated, it can only be implemented by a class or struct.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**接口**是C#编程语言中用于在程序中应用抽象的实体或特性。它就像类和接口本身之间的合同。合同是，将继承接口的类必须实现接口本身内部的方法签名。接口不能被实例化，它只能被类或结构实现。'
- en: What is an abstract class?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是抽象类？
- en: An **abstract class** is a special kind of class that can’t be initialized.
    No object can be created from an abstract class. Abstract classes can have concrete
    methods as well as non-concrete methods. If a class implements an abstract class,
    the class must implement the abstract methods. It can override non-abstract methods
    if necessary.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**抽象类**是一种特殊的类，不能被初始化。不能从抽象类创建对象。抽象类可以有具体方法和非具体方法。如果一个类实现了一个抽象类，那么这个类必须实现抽象方法。如果需要的话，它可以重写非抽象方法。'
- en: What is a sealed class?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是密封类？
- en: A **sealed class** is a class that can’t be inherited. It is mainly used to
    stop the inheritance feature in C#.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**密封类**是一个不能被继承的类。它主要用于阻止C#中的继承特性。'
- en: What is a partial class?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是部分类？
- en: A **partial class** is a class that has its source in separate files. Normally,
    one class has all its fields and methods in the same file. In a partial class,
    you can separate the class code in different files. When compiled, all the code
    from the separate files is treated as a single class.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**部分类**是源代码分布在不同文件中的类。通常，一个类的所有字段和方法都在同一个文件中。在部分类中，你可以将类代码分开放在不同的文件中。编译时，所有来自不同文件的代码都被视为单个类。'
- en: What are the differences between interfaces and abstract classes?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口和抽象类之间有什么区别？
- en: 'The following are the major differences between an interface and an abstract
    class:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接口和抽象类之间的主要区别如下：
- en: A class can implement any number of interfaces but can only implement one abstract
    class.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个类可以实现任意数量的接口，但只能实现一个抽象类。
- en: An abstract class can have abstract methods as well as non-abstract methods,
    whereas an interface can’t have non-abstract methods.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类既可以有抽象方法，也可以有非抽象方法，而接口不能有非抽象方法。
- en: In an abstract class, data members are private by default, whereas, in an interface,
    all data members are public and this can't be changed.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在抽象类中，数据成员默认为私有，而在接口中，所有数据成员都是公共的，这是无法更改的。
- en: In an abstract class, we need to use the `abstract` keyword to make a method
    abstract, whereas this is not needed in an interface.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在抽象类中，我们需要使用`abstract`关键字使方法抽象，而在接口中不需要。
- en: What is the difference between method-overloading and method-overriding?
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法重载和方法重写之间有什么区别？
- en: '**Method-overloading** is when a method with the same name has different input
    parameters. For example, let''s say we have a method called `Sum` that takes two
    integer type input and returns an integer type output. An overloaded method of
    `Sum` could take two double type input and return a double output.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法重载**是指具有相同名称但具有不同输入参数的方法。例如，假设我们有一个名为`Sum`的方法，它接受两个整数类型的输入并返回一个整数类型的输出。`Sum`的重载方法可以接受两个双精度类型的输入并返回一个双精度输出。'
- en: '**Method-overriding** is when a method with the same name, the same parameters,
    and the same return type is implemented in a subclass for a different kind of
    implementation. For example, imagine we have a method called `Discount` in a class
    called `Sales`, where the discount is calculated as 2% of the total purchase.
    If we have another subclass of `Sales` called `NewYearSales`, in which the discount
    is calculated as 5%, using method-overriding, the `NewYearSales` class can easily
    apply the new implementation.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法重写**是指在子类中实现具有相同名称、相同参数和相同返回类型的方法，用于不同的实现。例如，假设我们在一个名为`Sales`的类中有一个名为`Discount`的方法，其中折扣按照总购买额的2%计算。如果我们有`Sales`的另一个子类称为`NewYearSales`，其中折扣按照5%计算，使用方法重写，`NewYearSales`类可以轻松应用新的实现。'
- en: What are access modifiers?
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问修饰符是什么？
- en: '**Access modifiers** are used to set the security levels of different entities
    in a programming language. By setting access modifiers, we can hide data for classes
    of different levels.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问修饰符**用于设置编程语言中不同实体的安全级别。通过设置访问修饰符，我们可以为不同级别的类隐藏数据。'
- en: 'In C#, there are six types of access modifier:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，有六种类型的访问修饰符：
- en: Public
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共
- en: Private
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有
- en: Protected
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受保护的
- en: Internal
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部
- en: Protected Internal
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受保护的内部
- en: Private Protected
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有受保护
- en: What is boxing and unboxing?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是装箱和拆箱？
- en: '**Boxing** is the process of converting a value type to an object. **Unboxing**
    is when the value type is extracted from an object. Boxing may be done implicitly,
    but unboxing has to be explicit in the code.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**装箱**是将值类型转换为对象的过程。**拆箱**是从对象中提取值类型的过程。装箱可以隐式进行，但拆箱必须在代码中显式进行。'
- en: What are the differences between a struct and a class?
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构体和类之间有什么区别？
- en: 'Structs and classes are very similar concepts with some differences:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体和类是非常相似的概念，但有一些区别：
- en: Structs are of the value type and classes are of the reference type.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体是值类型，类是引用类型。
- en: Structs are usually used for small amounts of data, whereas classes are used
    for large amounts of data.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体通常用于小量数据，而类用于大量数据。
- en: Structs can’t be inherited by other types, whereas classes can be inherited
    by other classes.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体不能被其他类型继承，而类可以被其他类继承。
- en: A struct can’t be abstract, whereas a class can be abstract.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体不能是抽象的，而类可以是抽象的。
- en: What is an extension method in C# and how do we use it?
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#中的扩展方法是什么，我们如何使用它？
- en: An **extension method** is a method that is added to an existing type without
    creating a new derived type or compiling or changing the existing type. It works
    like an extension. For example, by default, we get the string type from .NET frameworks.
    If we want to add another method to this string type, either we have to create
    a derived type that will extend this string type and place the method there, or
    we add the code in the .NET framework and compile and rebuild the library. However,
    with extension methods, we can easily extend a method in the existing type. To
    do that, we have to create a static class and then create an extension method
    that is static as well. This method should take the type as a parameter, but the
    `this` keyword should be placed before the string. Now this method will work as
    an extension method for that type.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展方法是一种方法，它被添加到现有类型中，而不创建新的派生类型或编译或更改现有类型。它的工作原理类似于扩展。例如，默认情况下，我们从.NET框架中获得字符串类型。如果我们想要向这个字符串类型添加另一个方法，要么我们必须创建一个扩展这个字符串类型并在那里放置方法的派生类型，要么我们在.NET框架中添加代码并编译和重建库。然而，使用扩展方法，我们可以轻松地扩展现有类型中的方法。为此，我们必须创建一个静态类，然后创建一个静态的扩展方法。这个方法应该以类型作为参数，但是在字符串之前应该放置`this`关键字。现在这个方法将作为该类型的扩展方法工作。
- en: What is managed and unmanaged code?
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是托管代码和非托管代码？
- en: Code that is developed in the .NET framework is called managed code. **Common
    Language Runtime** (**CLR**) can directly execute this code. Unmanaged code is
    not developed in the .NET framework.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET框架中开发的代码称为托管代码。**公共语言运行时**（**CLR**）可以直接执行这段代码。非托管代码不是在.NET框架中开发的。
- en: What is a virtual method in C#?
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#中的虚方法是什么？
- en: A **virtual method** is a method that is implemented in a base class, but that
    also can be overridden in child classes. Virtual methods cannot be abstract, static,
    private, or overridden.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚方法**是在基类中实现的方法，但也可以在子类中重写的方法。虚方法不能是抽象的、静态的、私有的或重写的。'
- en: What do you understand by value types and reference types in C#.NET?
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你对C#.NET中的值类型和引用类型有什么理解？
- en: In C#, there are two types of data. One is called value type and another is
    called reference type. **Value types** are types that hold the value directly
    in the memory location. If the value is copied, a new memory location holds the
    same value, and both are independent of each other. A **reference type** is when
    the value is not directly placed in the memory location but a reference to the
    value is set instead. Another major difference between value types and reference
    types is that value types are located in stacks and reference types are located
    in heaps. An example of a value type is `int`, whereas an example of a reference
    type is `string`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，有两种类型的数据。一种称为值类型，另一种称为引用类型。**值类型**是直接在内存位置中保存值的类型。如果值被复制，新的内存位置保存相同的值，两者相互独立。**引用类型**是指值不直接放置在内存位置中，而是设置对该值的引用。值类型和引用类型之间的另一个主要区别是值类型位于堆栈中，而引用类型位于堆中。值类型的例子是`int`，而引用类型的例子是`string`。
- en: What are design principles?
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是设计原则？
- en: 'There are five design principles that make up the acronym **SOLID**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有五个设计原则组成了缩写**SOLID**：
- en: The single responsibility principle
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一责任原则
- en: The Open/Closed Principle
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开闭原则
- en: The Liskov substitution principle
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 里氏替换原则
- en: The interface segregation principle
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口隔离原则
- en: The dependency inversion principle
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖反转原则
- en: What is the single responsibility principle?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一责任原则是什么？
- en: <q>*"A class should have one, only one reason to change."*</q>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <q>*"一个类应该有一个，只有一个改变的理由。"*</q>
- en: – *Robert C. Martin*
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '- *罗伯特·C·马丁*'
- en: This means that one class should have only one responsibility. If a class is
    doing multiple things, this is a violation of the **Single Responsibility Principle**
    (**SRP**). For example, if we have a class named `Student`, it should only be
    responsible for student-related data. If the `Student` class needs to be modified
    when changing anything in the `Teacher` class, the `Student` class is violating
    the SRP.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着一个类应该只有一个责任。如果一个类做了多件事情，这就违反了**单一责任原则**（**SRP**）。例如，如果我们有一个名为`Student`的类，它应该只负责与学生相关的数据。如果`Student`类需要在`Teacher`类中更改任何内容时进行修改，`Student`类就违反了SRP。
- en: What is the Open/Closed principle?
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开闭原则是什么？
- en: Software components should be open for extensions but closed for modifications.
    This means that a component should be designed in such a way that, if you need
    to add a new rule or functionality, you shouldn’t have to modify the existing
    code. If you have to modify the existing code to add new functionality, this means
    the component is violating the **Open/Closed principle**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 软件组件应该对扩展开放，但对修改关闭。这意味着组件应该设计成这样，如果需要添加新的规则或功能，就不需要修改现有的代码。如果必须修改现有的代码来添加新功能，这意味着组件违反了**开闭原则**。
- en: What is the Liskov substitution principle?
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是里氏替换原则？
- en: Derived types must be completely substitutable for their base types. This means
    that if you have an instance of a base class used somewhere, you should be able
    to replace the base class instances with the child class instances of that base
    class. For example, if you have a base class called `Animal` and a child class
    called `Dog`, you should be able to replace your `Animal` class instances with
    `Dog` class instances without breaking any functionality.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 派生类型必须完全可替代其基类型。这意味着如果在某个地方使用了基类的实例，应该能够用该基类的子类实例替换基类实例而不会破坏任何功能。例如，如果有一个名为`Animal`的基类和一个名为`Dog`的子类，应该能够用`Dog`类的实例替换`Animal`类的实例而不会破坏任何功能。
- en: What is the interface segregation principle?
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口隔离原则是什么？
- en: Clients should not be forced to depend upon interfaces that they don’t use.
    Sometimes, interfaces contain a lot of information that might not be used by the
    classes that implement them. The **interface segregation principle **suggests
    that you keep the interfaces small. Instead of classes implementing one big interface,
    they should implement multiple small interfaces, where all the methods in the
    class are needed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 客户不应该被迫依赖他们不使用的接口。有时，接口包含了许多可能不被实现它们的类使用的信息。**接口隔离原则**建议你保持接口的小型化。类不应该实现一个大接口，而应该实现多个小接口，其中类中的所有方法都是需要的。
- en: What is the dependency inversion principle?
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖反转原则是什么？
- en: High-level modules should not depend on low-level modules; both should depend
    on abstraction. This means that, when you develop modular software code, high-level
    modules should not directly depend on low-level modules, but should depend on
    an interface or abstract class that the low-level module has implemented. By doing
    this, the modules in the system are independent and, in the future, if you replace
    your low-level module with another module, the high-level module isn't affected.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 高级模块不应该依赖低级模块；两者都应该依赖抽象。这意味着，当你开发模块化软件代码时，高级模块不应该直接依赖低级模块，而应该依赖低级模块实现的接口或抽象类。通过这样做，系统中的模块是独立的，将来如果你用另一个模块替换低级模块，高级模块不会受到影响。
- en: There is another part of this principle, which is *abstraction should not depend
    on details, details should depend on abstractions*. This means that interfaces
    or abstract classes should not depend on classes, but the classes that implement
    interfaces and abstract classes should depend on the interface or abstract class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则的另一个部分是*抽象不应该依赖细节，细节应该依赖抽象*。这意味着接口或抽象类不应该依赖类，而实现接口和抽象类的类应该依赖接口或抽象类。
- en: Interview and career tips
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面试和职业技巧
- en: Now that we have covered some of the most common questions that you can be asked
    in an interview, I also have a couple of tips to help you to perform better in
    the interview and in your career.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经涵盖了一些面试中可能被问到的最常见的问题，我还有一些提示，可以帮助你在面试和职业生涯中表现更好。
- en: Improving your communication skills
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高你的沟通技巧
- en: It is commonly believed that software developers are unsociable and not good
    at communication. The reality, however, is very different. All successful developers
    *have* to be good at communication.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 人们普遍认为软件开发人员不合群，沟通能力不强。然而，现实情况却截然不同。所有成功的开发人员都必须具备良好的沟通能力。
- en: As a software developer, there will be times when you have to explain technical
    ideas or situations to non-technical people. To be able to do so, you have to
    communicate in such a way that makes the information accessible and understandable
    to everyone. This may include both verbal (meetings or discussions) and written
    communication (documentation or emails).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件开发人员，你会有时候需要向非技术人员解释技术理念或情况。为了能够做到这一点，你必须以一种使信息对每个人都易于访问和理解的方式进行沟通。这可能包括口头（会议或讨论）和书面沟通（文档或电子邮件）。
- en: At the beginning of your career, you might not necessarily understand the importance
    of communication as you will simply be given tasks to complete. However, as you
    gain experience and get ahead in your career, you will appreciate the importance
    of communicating effectively.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在你职业生涯的开始阶段，你可能并不一定理解沟通的重要性，因为你只是被分配任务来完成。然而，随着你的经验积累和职业发展，你会意识到有效沟通的重要性。
- en: As a senior developer, you might have to communicate with your junior developers
    to explain problems or solutions, or with the business team to ensure that you
    fully understand the business requirements. You might also have to conduct technical
    sessions for knowledge-sharing purposes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名高级开发人员，你可能需要与初级开发人员沟通，解释问题或解决方案，或者与业务团队沟通，以确保你充分理解业务需求。你可能还需要进行技术培训以分享知识。
- en: Therefore, ensure that you keep interacting with people and read up on resources
    that will help you to communicate effectively and teach you how to address your
    audience. Good communication skills will not only help you to ace that interview
    but will also be valuable to you throughout your career.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请确保你与人们保持互动，并阅读能帮助你有效沟通并教你如何应对听众的资源。良好的沟通技巧不仅会帮助你在面试中脱颖而出，而且在整个职业生涯中也会对你有价值。
- en: Keep practicing
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续练习
- en: While no software developer is perfect, by practicing regularly, you can become
    a knowledgeable and experienced software developer.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有完美的软件开发人员，但通过定期练习，你可以成为一个知识渊博、经验丰富的软件开发人员。
- en: Computer programming is an art. By making mistakes, you will develop a sense
    of what is wrong and what is right. The more you code, the more you will experience
    different situations. These situations will help you gain experience as you will
    likely encounter them again in future projects.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机编程是一门艺术。通过犯错误，你会培养出对错与对的感觉。你编写的代码越多，你就会经历更多不同的情况。这些情况将帮助你积累经验，因为你很可能在未来的项目中再次遇到它们。
- en: And the best way to learn or master programming is to *practice it*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 学习或掌握编程的最佳方法是*实践*。
- en: Try to apply the concepts you have learned in this book in your real-life projects.
    If this is not possible in your current projects, create demonstration projects
    and apply them there. Technical concepts are very practical; if you're doing practical
    implementations, the concepts will become crystal clear to you.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将你在本书中学到的概念应用到你的实际项目中。如果在你当前的项目中不可能这样做，那就创建演示项目并在那里应用它们。技术概念非常实用；如果你进行实际实现，这些概念将变得非常清晰。
- en: Things to learn next
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来要学习的东西
- en: 'After reading this book, you should have a better understanding of OOP and
    the C# programming language. However, this isn''t enough. You must push yourself
    to learn more about software development. You should learn the other language
    features of C# and how to use them to get your job done. You should also learn
    data structures and algorithms for your professional work. In the following list,
    I have suggested a number of topics and technologies to look into next:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这本书后，你应该对面向对象编程和C#编程语言有更好的理解。然而，这还不够。你必须努力学习更多关于软件开发的知识。你应该学习C#的其他语言特性，以及如何使用它们来完成工作。你还应该学习数据结构和算法以应对专业工作。在下面的列表中，我建议了一些接下来可以研究的主题和技术：
- en: C# programming language features such as operators, control statements, arrays,
    lists, operator overloading, Lambda expressions, LINQ, string formatting, and
    threading
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#编程语言特性，如运算符、控制语句、数组、列表、运算符重载、Lambda表达式、LINQ、字符串格式化和线程
- en: Data structures and algorithms such as linked lists, binary trees, sorting,
    and searching algorithms.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如链表、二叉树、排序和搜索算法之类的数据结构和算法
- en: Web/desktop frameworks such as ASP.NET MVC, ASP.NET Web API, WPF, and WCF
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如ASP.NET MVC、ASP.NET Web API、WPF和WCF之类的Web/桌面框架
- en: Frontend technologies such as HTML, CSS, and JavaScript, as well as Javascript
    frameworks such as reactjs/angular
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端技术，如HTML、CSS和JavaScript，以及JavaScript框架，如reactjs/angular
- en: Database technologies such as MS SQL Server, Oracle, and MySQL
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如MS SQL Server、Oracle和MySQL之类的数据库技术
- en: Design patterns and their implications
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模式及其影响
- en: Software architecture and design
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件架构和设计
- en: Clean code, code refactoring, and code optimization
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码整洁、代码重构和代码优化
- en: There are many other things to learn, but I have covered the topics I believe
    every software developer should know. This list is quite long and the topics are
    quite technical, so plan your learning carefully.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他要学习的东西，但我已经涵盖了我认为每个软件开发人员都应该了解的主题。这个列表相当长，主题相当技术，所以要仔细规划你的学习。
- en: Building the habit of reading
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 养成阅读的习惯
- en: My last tip is to become an avid reader. Reading is super important for software
    developers. Information is normally distributed to people by text or speech. While
    video tutorials are a good way to learn, reading gives you time to think and provides
    you with access to millions of resources.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我最后的建议是成为一个热心的读者。阅读对于软件开发人员非常重要。信息通常通过文本或语音分发给人们。虽然视频教程是学习的好方法，但阅读可以给你时间思考，并为你提供数以百万计的资源。
- en: 'The following are a few of my must-read books:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我必读的一些书籍：
- en: '*The Pragmatic Programmer: From Journeyman to Master* by Andrew Hunt and David
    Thomas'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《实用程序员：从学徒到大师》作者安德鲁·亨特和大卫·托马斯
- en: '*Clean Code* by Robert Cecil Martin'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《代码整洁之道》作者罗伯特·塞西尔·马丁
- en: '*Code Complete 2* by Steve McConnell'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《代码大全2》作者史蒂夫·麦康奈尔
- en: '*Refactoring* by Martin Fowler and Kent Beck'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《重构》作者马丁·福勒和肯特·贝克
- en: '*Introduction to Algorithms* by Charles E. Leiserson, Clifford Stein, Ronald
    Rivest, and Thomas H. Cormen'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《算法导论》作者查尔斯·E·莱斯森、克利福德·斯坦、罗纳德·李维斯特和托马斯·H·科尔门
- en: '*Design Patterns: Elements of Reusable Object-Oriented Software* by the Gang
    of Four'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《设计模式：可复用面向对象软件的元素》四人组合著
- en: '*C# 7.0 in a Nutshell: The Definitive Reference* by Joseph Albahari'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《C# 7.0权威指南》作者约瑟夫·阿尔巴哈里
- en: '*C# in Depth* by Jon Skeet'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《深入C#》作者乔恩·斯基特
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Software development is a very interesting field. You can develop amazing applications
    that can change the world. Apps such as Facebook and Maps, and the myriad products
    of digital giants, such as Google and Windows, have had a significant impact on
    our lives. Programs can make people's lives easier by increasing productivity.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是一个非常有趣的领域。你可以开发能够改变世界的惊人应用。像Facebook和Maps这样的应用，以及谷歌和Windows等数字巨头的众多产品，对我们的生活产生了重大影响。程序可以通过提高生产力来让人们的生活更加便利。
- en: My request to you as a software developer is to write good code and develop
    amazing apps. If you have the right intentions, a passion for software development,
    and a strong work ethic, you will surely become successful in your career.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件开发人员，我请求你写出优秀的代码并开发出惊人的应用。如果你有正确的意图、对软件开发有激情和强烈的职业道德，你一定会在你的职业生涯中取得成功。
- en: Let's make this world a great place by creating amazing software that can aid
    the progress of human civilization.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建能够促进人类文明进步的惊人软件，让这个世界变得更美好。
