- en: 4\. Building App Navigation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 构建应用程序导航
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: 'In this chapter, you will build user-friendly app navigation through three
    primary patterns: bottom navigation, the navigation drawer, and tabbed navigation.
    Through guided theory and practice, you will learn how each of these patterns
    works so that users can easily access your app''s content. This chapter will also
    focus on making the user aware of where they are in the app and which level of
    your app''s hierarchy they can navigate to.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将通过三种主要模式构建用户友好的应用程序导航：底部导航、导航抽屉和选项卡导航。通过引导理论和实践，您将学习每种模式的工作原理，以便用户可以轻松访问您应用程序的内容。本章还将重点关注让用户意识到他们在应用程序中的位置以及可以导航到应用程序层次结构的哪个级别。
- en: By the end of this chapter, you will know how to use these three primary navigation
    patterns and understand how they work with the app bar to support navigation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将了解如何使用这三种主要导航模式，并了解它们如何与应用程序栏一起支持导航。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, you explored fragments and the **fragment lifecycle**,
    and employed Jetpack navigation to simplify their use in your apps. In this chapter,
    you will learn how to add different types of navigation to your app while continuing
    to use Jetpack navigation. You will start off by learning about the navigation
    drawer, the earliest widely adopted navigational pattern used in Android apps,
    before exploring bottom navigation and tab navigation. You'll learn about the
    Android navigation user flow, how it is built around destinations, and how they
    govern navigation within the app. The difference between primary and secondary
    destinations will be explained, as well as which one of the three primary navigation
    patterns is more suitable, depending on your app's use case.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您探索了片段和**片段生命周期**，并使用Jetpack导航简化了它们在应用程序中的使用。在本章中，您将学习如何在应用程序中添加不同类型的导航，同时继续使用Jetpack导航。您将首先学习导航抽屉，这是Android应用程序中最早被广泛采用的导航模式，然后探索底部导航和选项卡导航。您将了解Android导航用户流程，它是如何围绕目的地构建的，以及它们如何在应用程序内进行导航。将解释主要目的地和次要目的地之间的区别，以及根据您的应用程序用例，三种主要导航模式中哪一种更适合使用。
- en: Let's get started with a navigation overview.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始导航概述。
- en: Navigation Overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航概述
- en: The Android navigation user flow is built around what are called *destinations*
    within your app. There are primary destinations that are available at the top
    level of your app and, subsequently, are always displayed in the main app navigation
    and secondary destinations. A guiding principle of each of the three navigation
    patterns is to contextually provide information about the main section of the
    app the user is in at any point in time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Android导航用户流程是围绕您应用程序中称为*目的地*的内容构建的。有一些主要目的地可在应用程序的顶层使用，并且随后始终显示在主要应用程序导航中，还有次要目的地。三种导航模式的指导原则之一是在任何时间点上为用户提供关于用户所在的应用程序主要部分的上下文信息。
- en: This can take the form of a label in the top app bar of the destination the
    user is in, optionally displaying an arrow hint that the user is not at the top
    level, and/or providing highlighted text and icons in the UI that indicate the
    section the user is in. Navigation in your app should be fluid and natural, intuitively
    guiding the user while also providing some context of where they are at any given
    point in time. Each of the three navigation patterns you are about to explore
    accomplishes this goal in varying ways. Some of these navigational patterns are
    more suitable for use with a higher number of top-level primary destinations to
    display, and others are suitable for less.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以采用在用户所在目的地的顶部应用程序栏中的标签的形式，可选择显示一个箭头提示，表明用户不在顶层，并/或者在UI中提供突出显示的文本和图标，指示用户所在的部分。应用程序中的导航应该是流畅和自然的，直观地引导用户，同时在任何给定时间点提供一些关于他们所在位置的上下文。您即将探索的三种导航模式中的每一种都以不同的方式实现了这一目标。其中一些导航模式更适合用于显示较多的顶级主要目的地，而其他一些则适合用于较少的目的地。
- en: Navigation Drawer
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航抽屉
- en: 'The navigation drawer is one of the most common navigation patterns used in
    Android apps and was certainly the first pattern to be widely adopted. The following
    is a screenshot of the culmination of the next exercise, which shows a simple
    navigation drawer in its closed state:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 导航抽屉是在Android应用程序中使用最普遍的导航模式之一，肯定是最早被广泛采用的模式。以下是下一个练习的总结截图，显示了导航抽屉在关闭状态下的简单导航抽屉：
- en: '![Figure 4.1: App with the navigation drawer closed'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1：导航抽屉关闭的应用程序'
- en: '](img/B15216_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_01.jpg)'
- en: 'Figure 4.1: App with the navigation drawer closed'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1：导航抽屉关闭的应用程序
- en: 'The navigation drawer is accessed through what has become commonly known as
    the hamburger menu, which is the icon with three horizontal lines at the top left
    of *Figure 4.1*. The navigation options are not visible on the screen, but contextual
    information about the screen you are on is displayed in the top app bar. This
    can also be accompanied by an overflow menu on the right-hand side of the screen,
    through which other contextually relevant navigation options can be accessed.
    The following screenshot is of a navigation drawer in the open state, showing
    all the navigation options:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 导航抽屉是通过通常被称为汉堡菜单的方式访问的，这是位于*图4.1*左上角的具有三条水平线的图标。导航选项在屏幕上不可见，但有关您所在屏幕的上下文信息显示在顶部应用程序栏中。这也可以伴随着屏幕右侧的溢出菜单，通过它可以访问其他上下文相关的导航选项。以下截图显示了导航抽屉处于打开状态，显示了所有导航选项：
- en: '![Figure 4.2: App with the navigation drawer open'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2：导航抽屉打开的应用程序'
- en: '](img/B15216_04_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_02.jpg)'
- en: 'Figure 4.2: App with the navigation drawer open'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2：导航抽屉打开的应用程序
- en: Upon selecting the hamburger menu, the navigation drawer slides out from the
    left with the current section highlighted. This can be displayed with or without
    an icon. Due to the nature of the navigation occupying the height of the screen,
    it is best suited to five or more top-level destinations. The destinations can
    also be grouped together to indicate multiple hierarchies of primary destinations
    (shown by the dividing line in the preceding screenshot), and these hierarchies
    can also have labels. In addition, the drawer content is also scrollable. In summary,
    the navigation drawer is a very convenient way to provide quick access to many
    different destinations of the app. A weakness of the navigation drawer is that
    it requires the user to select the hamburger menu for the destinations to become
    visible. Tabs and bottom navigation (with fixed tabs), in contrast, are always
    visible. This is conversely also a strength of the navigation drawer as more screen
    space can be used for the app's content.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择汉堡菜单后，导航抽屉从左侧滑出，当前部分突出显示。这可以显示带有或不带有图标。由于导航占据屏幕的高度，最适合五个或更多个顶级目的地。目的地也可以分组在一起，以指示主要目的地的多个层次结构（如前面截图中的分隔线所示），这些层次结构也可以具有标签。此外，抽屉内容也是可滚动的。总之，导航抽屉是提供快速访问应用程序许多不同目的地的非常便利的方式。导航抽屉的一个弱点是，需要用户选择汉堡菜单才能使目的地可见。相比之下，选项卡和底部导航（带有固定选项卡）始终可见。这反过来也是导航抽屉的一个优点，因为可以使用更多的屏幕空间来显示应用程序的内容。
- en: Let's get started with the first exercise of this chapter and create a navigation
    drawer so that we can access all the sections of an app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始本章的第一个练习，创建一个导航抽屉，以便我们可以访问应用程序的所有部分。
- en: 'Exercise 4.01: Creating an App with a Navigation Drawer'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.01：创建带有导航抽屉的应用程序
- en: In this exercise, you will create a new app in Android Studio named `Navigation
    Drawer` using the Empty Activity project template, while leaving all the other
    defaults as they are. There are wizard options where you can create a new project
    with all the navigation patterns you are going to produce in the exercises within
    this chapter, but we are going to build the apps incrementally to guide you through
    the steps. You are going to build an app that often uses a navigation drawer,
    such as a news or mail app. The sections we will be adding are `Home`, `Favorites`,
    `Recents`, `Archive`, `Bin`, and `Settings`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将在Android Studio中创建一个名为`Navigation Drawer`的新应用程序，使用空活动项目模板，同时保留所有其他默认设置。有向导选项，您可以创建一个新项目，其中包含本章练习中要生成的所有导航模式，但我们将逐步构建应用程序，以指导您完成这些步骤。您将构建一个经常使用导航抽屉的应用程序，例如新闻或邮件应用程序。我们将添加的部分是`主页`、`收藏夹`、`最近`、`存档`、`回收站`和`设置`。
- en: 'Perform the following steps to complete this exercise:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此练习：
- en: Create a new project with an Empty Activity called Navigation Drawer. Do not
    use the `Navigation Drawer Activity` project template as we are going to use incremental
    steps to build the app.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空活动创建一个名为Navigation Drawer的新项目。不要使用`Navigation Drawer Activity`项目模板，因为我们将逐步构建应用程序。
- en: 'Add the Gradle dependencies you will require to `app/build.gradle`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您需要的Gradle依赖项添加到`app/build.gradle`中：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, add/update all the resource files you will need in the app. Start by
    adding the `dimens.xml` file to the `res/values` folder:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加/更新应用程序中需要的所有资源文件。首先将`dimens.xml`文件添加到`res/values`文件夹中：
- en: '**dimens.xml**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**dimens.xml**'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update `strings.xml` and replace `themes.xml` in the `res/values` folder with
    the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`strings.xml`，并在`res/values`文件夹中用以下内容替换`themes.xml`：
- en: '**strings.xml**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.xml**'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**themes.xml**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**themes.xml**'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create the following Fragments `(File` | `New` | `Fragment` | `Fragment (Blank)`
    from the Toolbar:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下片段（`文件` | `新建` | `片段` | `片段（空白）`来自工具栏：）
- en: '`HomeFragment`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HomeFragment`'
- en: '`FavoritesFragment`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FavoritesFragment`'
- en: '`RecentFragment`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RecentFragment`'
- en: '`ArchiveFragment`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArchiveFragment`'
- en: '`SettingsFragment`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SettingsFragment`'
- en: '`BinFragment`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BinFragment`'
- en: '`ContentFragment`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContentFragment`'
- en: 'Change each of these fragment layouts to use the following content:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改每个片段布局以使用以下内容：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The only difference is the `android:text` attribute, which will have the corresponding
    string from the `strings.xml` file. So, create these fragments with the correct
    string, indicating which fragment the user is viewing. This may seem a bit repetitive,
    and one single fragment could be updated with this text, but it demonstrates how
    you would separate different sections in a real-world app.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是`android:text`属性，它将具有来自`strings.xml`文件的相应字符串。因此，请使用正确的字符串创建这些片段，指示用户正在查看哪个片段。这可能看起来有点重复，一个单一的片段可以更新为此文本，但它演示了如何在真实的应用程序中分隔不同的部分。
- en: 'Update the `fragment_home.xml` layout adding a button to it (this is the body
    content you can see in *Figure 4.1*, with the closed navigation drawer):'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`fragment_home.xml`布局，向其中添加一个按钮（这是您可以在*图4.1*中看到的主体内容，带有关闭的导航抽屉）：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create the navigation graph that will be used in the app.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建将在应用程序中使用的导航图。
- en: Select `File` | `New` | `Android Resource File` (making sure the res folder
    is selected in the project window so you see this option) or alternatively right
    click on the res folder to see this option. Select `Navigation` as the resource
    type and name it `mobile_navigation.xml`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`文件` | `新建` | `Android资源文件`（确保在项目窗口中选择了res文件夹，以便看到此选项），或者右键单击res文件夹以查看此选项。选择`导航`作为资源类型，并将其命名为`mobile_navigation.xml`。
- en: 'This creates the navigation graph:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建导航图：
- en: '![Figure 4.3: Android Studio New Resource File dialog'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3：Android Studio新资源文件对话框'
- en: '](img/B15216_04_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3：Android Studio新资源文件对话框'
- en: 'Figure 4.3: Android Studio New Resource File dialog'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：Android Studio新资源文件对话框
- en: 'Open the `mobile_navigation.xml` file in the `res/navigation` folder and update
    it with the code from the file in the link below. A truncated version of the code
    is shown here. See the link for the entire code block you need to use:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`res/navigation`文件夹中的`mobile_navigation.xml`文件，并使用下面链接中文件的代码进行更新。这里显示了代码的缩略版本。请查看链接以获取您需要使用的完整代码块：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This creates all the destinations in your app. However, it doesn''t specify
    whether these are primary or secondary destinations. This should be familiar from
    the fragment Jetpack navigation exercise from the previous chapter. The most important
    point to note here is `app:startDestination="@+id/nav_home`, which specifies what
    will be displayed to start with when the navigation loads, and that there is an
    action available from within `HomeFragment` to move to the `nav_content` destination
    in the graph:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建应用程序中的所有目的地。但是，它没有指定这些是主要目的地还是次要目的地。这应该是您在上一章的fragment Jetpack导航练习中熟悉的。这里最重要的一点是`app:startDestination="@+id/nav_home`，它指定了导航加载时将显示的内容，并且在`HomeFragment`中有一个可用的操作，可以移动到图中的`nav_content`目的地：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You are now going to see how this is set up in `HomeFragment` and its layout.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到如何在`HomeFragment`及其布局中设置这些内容。
- en: 'Open the fragment_home.xml layout file. Then open the layout file in design
    view by selecting the `Design` option in the top-right-hand corner:![Figure 4.4:
    Android Studio Design view header'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开fragment_home.xml布局文件。然后通过在右上角选择“设计”选项来在设计视图中打开布局文件：![图4.4：Android Studio设计视图标题
- en: '](img/B15216_04_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_04.jpg)'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Open HomeFragment` and update `onCreateView` to set up the button:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`打开HomeFragment`并更新`onCreateView`以设置按钮：'
- en: '`R.id.nav_home_to_content` action when the `button_home` is clicked.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.id.nav_home_to_content`操作当单击`button_home`时。'
- en: These changes will not, however, do anything yet as you still need to set up
    the navigation host for your app and add all the other layout files, along with
    the navigation drawer.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些更改目前还不会产生任何效果，因为您仍然需要为应用程序设置导航主机，并添加所有其他布局文件，以及导航抽屉。
- en: 'Create a `Nav` host fragment by creating a new file in the layout folder called
    `content_main.xml`. This can be done by right-clicking on the `layout` folder
    in the `res` directory and then going to `File` | `New` | `Layout Resource File`.
    Once created, update it with the `FragmentContainerView`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在布局文件夹中创建一个名为`content_main.xml`的新文件来创建一个`Nav`主机片段。这可以通过右键单击`res`目录中的`layout`文件夹，然后转到`文件`|`新建`|`布局资源文件`来完成。创建后，使用`FragmentContainerView`更新它：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You''ll notice that the navigation graph is set to the graph you just created:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到导航图设置为您刚刚创建的图：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With that, the body of the app and its destination have been set up. Now, you
    need to set up the UI navigation. Create another layout resource file called `nav_header_main.xml`
    and add the following content:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这些，应用程序的主体和其目的地已经设置好了。现在，您需要设置UI导航。创建另一个布局资源文件，命名为`nav_header_main.xml`，并添加以下内容：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is the layout that's displayed in the header of the navigation drawer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是导航抽屉头部显示的布局。
- en: 'Create the app bar with a toolbar layout file, called `app_bar_main.xml`, and
    include the following content:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`app_bar_main.xml`的工具栏布局文件，并包含以下内容：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This integrates the main body layout of the app with the app bar that appears
    above it. The remaining part is to create the items that will appear in the navigation
    drawer and create and populate the navigation drawer with these items.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将应用程序的主体布局与出现在其上方的应用栏集成起来。剩下的部分是创建将出现在导航抽屉中的项目，并创建和填充这些项目的导航抽屉。
- en: 'To use icons with these menu items you need to copy the vector assets in the
    drawable folder of the completed exercise to the drawable folder of your project.
    Vector assets use coordinates for points, lines and curves to layout images with
    associated color information. They are significantly smaller when compared to
    png and jpg images and vectors can be resized to different sizes without loss
    of quality. You can find them here: [http://packt.live/2XQnY5a](http://packt.live/2XQnY5a'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在这些菜单项目中使用图标，您需要将矢量资产复制到已完成练习的drawable文件夹中，然后将其复制到项目的drawable文件夹中。矢量资产使用点、线和曲线的坐标来布局带有相关颜色信息的图像。与png和jpg图像相比，它们的大小要小得多，并且可以在不损失质量的情况下调整大小。您可以在这里找到它们：[http://packt.live/2XQnY5a](http://packt.live/2XQnY5a
- en: )
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Copy the following drawables:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 复制以下可绘制对象：
- en: '`favorites.xml`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`favorites.xml`'
- en: '`archive.xml`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archive.xml`'
- en: '`recent.xml`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recent.xml`'
- en: '`home.xml`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home.xml`'
- en: '`bin.xml`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin.xml`'
- en: 'These icons are going to be used for the menu items. To create your own icon,
    import a `.svg` file into Android Studio or select one of the stock images that
    come bundled with Android Studio. To see this in action, go to `File` | `New`
    | `Vector Asset` and make sure you have the `res` folder selected so that these
    menu options appear. An example of one of these assets is below (You can select
    the ''Clip Art'' icon to see others):![Figure 4.5: Configuring a Vector Asset'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些图标将用于菜单项目。要创建自己的图标，请将`.svg`文件导入到Android Studio中，或者选择Android Studio捆绑的库存图像之一。要查看此操作，请转到`文件`|`新建`|`矢量资产`，并确保选择了`res`文件夹，以便这些菜单选项出现。以下是其中一个资产的示例（您可以选择“剪贴画”图标以查看其他图标）：![图4.5：配置矢量资产
- en: '](img/B15216_04_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_05.jpg)'
- en: 'Figure 4.5: Configuring a Vector Asset'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5：配置矢量资产
- en: Use the local file option to import a `.svg` or `.psd` file or select clipart
    to add one of the Android Studio icons.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用本地文件选项导入`.svg`或`.psd`文件，或选择剪贴画以添加Android Studio图标之一。
- en: 'Create a menu with these items. To do this, go to `File` | `New` | `Android
    Resource File`, select `Menu` as the resource type, call it `activity_main_drawer`,
    and then populate it with the following content:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含这些项目的菜单。要做到这一点，转到`文件`|`新建`|`Android资源文件`，选择`菜单`作为资源类型，将其命名为`activity_main_drawer`，然后使用以下内容填充它：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This sets up the menu items that will appear in the navigation drawer itself.
    The magic that ties up the menu items to the destinations within the navigation
    graph is the name of the IDs. If the IDs of the menu items (in `activity_main_drawer.xml`)
    exactly match the IDs of the destinations in the navigation graph (which, in this
    case, are fragments within `mobile_navigation.xml`), then the destination is automatically
    loaded into the navigation host.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了将显示在导航抽屉中的菜单项。将菜单项与导航图中的目的地联系起来的魔法是ID的名称。如果菜单项（在`activity_main_drawer.xml`中）的ID与导航图中的目的地的ID完全匹配（在这种情况下是`mobile_navigation.xml`中的片段），则目的地将自动加载到导航主机中。
- en: 'The layout for `MainActivity` ties the navigation drawer to all the layouts
    specified previously. Open `activity_main.xml` and update it with the following
    content:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MainActivity`的布局将导航抽屉与先前指定的所有布局联系起来。打开`activity_main.xml`并使用以下内容进行更新：'
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, there is an `include` that''s used to add `app_bar_main.xml`.
    The `<include>` element allows you to add layouts that will be replaced at compile
    time with the actual layout itself. They allow us to encapsulate different layouts
    as they can be reused in multiple layout files within the app. `NavigationView`
    (which is the class that creates the navigation drawer) specifies the layout files
    you have just created to configure its header and menu items:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，有一个`include`用于添加`app_bar_main.xml`。`<include>`元素允许您添加在编译时将被实际布局替换的布局。它们允许我们封装不同的布局，因为它们可以在应用程序中的多个布局文件中重用。`NavigationView`（创建导航抽屉的类）指定了您刚刚创建的布局文件，以配置其标题和菜单项：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that you have specified all the layout files, update `MainActivity` by
    adding the following interaction logic:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您已经指定了所有的布局文件，通过添加以下交互逻辑来更新`MainActivity`：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s go through the preceding code. `setSupportActionBar(toolbar)` configures
    the toolbar used in the app by referencing it from the layout and setting it.
    Retrieving the `NavHostFragment` is done with the code below:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下前面的代码。`setSupportActionBar(toolbar)`通过引用布局中的工具栏并设置它来配置应用中使用的工具栏。使用以下代码检索`NavHostFragment`：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next you add the menu items you want to display in the navigation drawer:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以添加要在导航抽屉中显示的菜单项：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`drawer_layout` is the container for `nav_view`, the main app bar, and its
    included content.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawer_layout`是`nav_view`、主应用栏及其包含的内容的容器。'
- en: This may seem like you are doing this twice as these items are displayed in
    the `activity_main_drawer.xml` menu for the navigation drawer. However, the function
    of setting these in `AppBarConfiguration` is that these primary destinations will
    not display an up arrow when they are selected as they are at the top level. It
    also adds `drawer_layout` as the last parameter to specify which layout should
    be used when the hamburger menu is selected to display in the navigation drawer.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是在做两次，因为这些项目显示在导航抽屉的`activity_main_drawer.xml`菜单中。但是，在`AppBarConfiguration`中设置这些主要目的地的功能是，当它们被选中时，它们不会显示向上箭头，因为它们处于顶层。它还将`drawer_layout`作为最后一个参数添加，以指定在选择汉堡菜单以在导航抽屉中显示时应使用哪个布局。
- en: 'The next line is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行是：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This sets up the app bar with the navigation graph so that any changes that
    are made to the destinations are reflected in the app bar:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用导航图设置应用栏，以便对目的地进行的任何更改都会反映在应用栏中：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is the last statement in `onCreate` and it specifies the item within the
    navigation drawer that should be highlighted when the user clicks on it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`onCreate`中的最后一条语句，它指定了在用户点击时应突出显示导航抽屉中的项目。
- en: 'The next function in the class handles pressing the up button for the secondary
    destination, ensuring that it goes back to its parent primary destination:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 类中的下一个函数处理按下次要目的地的向上按钮，确保它返回到其父级主要目的地：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The app bar can also display other menu items through the overflow menu, which
    when configured is displayed as three vertical dots at the top on the right-hand
    side. Take a look at the `menu/main.xml` file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 应用栏还可以通过溢出菜单显示其他菜单项，配置后，它会显示在右上方的三个垂直点中。查看`menu/main.xml`文件：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This configuration shows one item: `Settings`. Since it specifies the same
    ID as the `SettingsFragment` destination in the navigation graph, `android:id="@+id/nav_settings"`
    it will open the `SettingsFragment`. The attribute being set to `app:showAsAction="never"`
    ensures it will stay as a menu option within the three dots overflow menu and
    will not appear on the app bar itself. There are other values for `app:showAsAction`
    which set menu options to appear on the app bar always and if there is room. See
    the full list here: [https://developer.android.com/guide/topics/resources/menu-resource](https://developer.android.com/guide/topics/resources/menu-resource).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置显示一个项目：`设置`。由于它指定了与导航图中的`SettingsFragment`目的地相同的ID，`android:id="@+id/nav_settings"`，它将打开`SettingsFragment`。将属性设置为`app:showAsAction="never"`可确保它保持为三个点溢出菜单中的菜单选项，并且不会出现在应用栏本身上。`app:showAsAction`的其他值可以将菜单选项设置为始终出现在应用栏上，如果有空间的话。在这里查看完整列表：[https://developer.android.com/guide/topics/resources/menu-resource](https://developer.android.com/guide/topics/resources/menu-resource)。
- en: 'To add the overflow menu to the app bar, add the following to the `MainActivity`
    class:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将溢出菜单添加到应用栏，请将以下内容添加到`MainActivity`类中：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will also need to add the following imports:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要添加以下导入项：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `onCreateOptionsMenu` function selects the menu to add to the app bar, while
    `onOptionsItemSelected` handles what to do when the item is selected using the
    `item.onNavDestinationSelected(findNavController(R.id.nav_host_fragment))` navigation
    function. This is used to navigate to the destination within the navigation graph.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCreateOptionsMenu`函数选择要添加到应用栏的菜单，而`onOptionsItemSelected`处理当使用`item.onNavDestinationSelected(findNavController(R.id.nav_host_fragment))`导航函数选择项目时要执行的操作。这用于导航到导航图中的目的地。'
- en: 'Run the app and navigate to a top-level destination by using the navigation
    drawer. The following screenshot shows an example of navigating to the `Recent`
    destination:![Figure 4.6: Recent menu item opened from the navigation drawer'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，并使用导航抽屉导航到顶级目的地。以下屏幕截图显示了导航到“最近”目的地的示例：![图4.6：从导航抽屉中打开的最近菜单项
- en: '](img/B15216_04_06.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_06.jpg)'
- en: 'Figure 4.6: Recent menu item opened from the navigation drawer'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：从导航抽屉中打开的最近菜单项
- en: 'When you select the navigation drawer again to toggle it out, you will see
    that the `Recent` menu item is selected:![Figure 4.7: Highlighted Recent menu
    item in the navigation drawer'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您再次选择导航抽屉以切换它时，您将看到“最近”菜单项被选中：![图4.7：导航抽屉中突出显示的最近菜单项
- en: '](img/B15216_04_07.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_07.jpg)'
- en: 'Figure 4.7: Highlighted Recent menu item in the navigation drawer'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：导航抽屉中突出显示的最近菜单项
- en: 'Select the `Home` menu item again. This screen shows a link in the material-themed
    button that goes to a secondary content destination. When you select the button,
    a nice material animation will emanate from the center of the button to the outside:![Figure
    4.8: Home screen with a button to the secondary destination'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次选择“主页”菜单项。此屏幕显示了一个链接，该链接位于材料主题按钮中，指向次要内容目的地。当您选择按钮时，一个漂亮的材料动画将从按钮中心向外部发散：![图4.8：带有指向次要目的地的按钮的主屏幕
- en: '](img/B15216_04_08.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_08.jpg)'
- en: 'Figure 4.8: Home screen with a button to the secondary destination'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：带有指向次要目的地的按钮的主屏幕
- en: 'Click this button to go to the secondary destination. You will see an up arrow
    being displayed:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击此按钮以转到次要目的地。您将看到一个向上箭头被显示：
- en: '![Figure 4.9: Secondary destination with an up arrow displayed'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.9：显示带有向上箭头的次要目的地'
- en: '](img/B15216_04_09.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_09.jpg)'
- en: 'Figure 4.9: Secondary destination with an up arrow displayed'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9：显示带有向上箭头的次要目的地
- en: 'In all the preceding screenshots the overflow menu is displayed. After selecting
    it, you will see a `Settings` option appear. Upon pressing it, you will be taken
    to `SettingsFragment`, with the up arrow displayed:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有先前的屏幕截图中，都显示了溢出菜单。选择它后，您将看到“设置”选项出现。按下它后，您将进入“SettingsFragment”，并显示向上箭头：
- en: '![Figure 4.10: Settings fragment'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.10：设置片段'
- en: '](img/B15216_04_10.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_10.jpg)'
- en: 'Figure 4.10: Settings fragment'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10：设置片段
- en: Although there are quite a few steps to go through to set up an app with a navigation
    drawer, once created, it is very configurable. By adding a menu item entry to
    the drawer menu and a destination to the navigation graph, a new fragment can
    be created and set up for use straight away. This removes a lot of the boilerplate
    code you needed to use fragments in the previous chapter. The next navigational
    pattern you'll explore is bottom navigation. This has become the most popular
    navigational pattern in Android, largely because it makes the main sections of
    the app easily accessible.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然设置带有导航抽屉的应用程序需要经历相当多的步骤，但一旦创建，它就非常灵活。通过向抽屉菜单添加菜单项条目和向导航图添加目的地，可以立即创建新的片段并设置好以供使用。这消除了在上一章中使用片段时需要使用的大量样板代码。您将要探索的下一个导航模式是底部导航。这已经成为Android中最流行的导航模式，主要是因为它使应用程序的主要部分易于访问。
- en: Bottom Navigation
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 底部导航
- en: Bottom navigation is used when there are a limited number of top-level destinations,
    and these can range from three to five primary destinations that are not related
    to each other. Each item on the bottom navigation bar displays an icon and an
    optional text label. This navigation allows quick access as the items are always
    available, no matter which secondary destination of the app the user navigates
    to.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当顶级目的地数量有限且彼此不相关时，将使用底部导航，这些目的地可以是三到五个主要目的地。底部导航栏上的每个项目都显示一个图标和一个可选的文本标签。这种导航允许快速访问，因为这些项目始终可用，无论用户导航到应用程序的哪个次要目的地。
- en: 'Exercise 4.02: Adding Bottom Navigation to Your App'
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.02：向应用程序添加底部导航
- en: 'Create a new app in Android Studio named `Bottom Navigation` using the `Empty
    Activity` project template, leaving all the other defaults as they are. Do not
    use the `Bottom Navigation Activity` project template as we are going to use incremental
    steps to build the app. You are going to build a loyalty app that provides offers,
    rewards, and so on for customers who have signed up to use it. Bottom navigation
    is quite common for this kind of app because, typically, there will be limited
    top-level destinations. Let''s get started:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为“底部导航”的新应用程序，使用“空活动”项目模板，将所有其他默认设置保持不变。不要使用“底部导航活动”项目模板，因为我们将逐步构建应用程序。您将构建一个忠诚度应用程序，为已注册使用该应用程序的客户提供优惠、奖励等。对于这种类型的应用程序，底部导航是非常常见的，因为通常会有有限的顶级目的地。让我们开始吧：
- en: Many of the steps are very similar to the previous exercise as you will be using
    Jetpack navigation and defining destinations in a navigation graph and a corresponding
    menu.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 许多步骤与上一个练习非常相似，因为您将使用Jetpack导航并在导航图和相应菜单中定义目的地。
- en: Create a new project with an Empty Activity called Navigation Drawer.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“导航抽屉”创建一个新项目，使用“空活动”命名。
- en: 'Add the Gradle dependencies you will require to `app/build.gradle`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您需要的Gradle依赖项添加到“app/build.gradle”中：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Replace `colors.xml` with the following:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下内容替换“colors.xml”：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Append `strings.xml` and `themes.xml` in the `res/values` folder with the values
    below:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“res/values”文件夹中附加“strings.xml”和“themes.xml”与以下值：
- en: '**strings.xml**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**strings.xml**'
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**themes.xml**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**themes.xml**'
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You're using the same material style here that you used in the previous exercise
    to create the buttons for the home screen.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您在此处使用了与上一个练习中用于创建主屏幕按钮的相同材料样式。
- en: 'Create eight fragments with the following names:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建八个片段，名称如下：
- en: '`HomeFragment`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “HomeFragment”
- en: '`ContentFragment`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “ContentFragment”
- en: '`OffersFragment`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “OffersFragment”
- en: '`RewardsFragment`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “RewardsFragment”
- en: '`SettingsFragment`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “SettingsFragment”
- en: '`TicketsFragment`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “TicketsFragment”
- en: '`CartFragment`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “CartFragment”
- en: Apply the same layout that you applied in the previous exercise for all the
    fragments adding the corresponding string resource except for `fragment_home.xml`.
    For this layout, use the same layout file that you used in the previous exercise.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用与之前练习中应用的相同布局，为所有片段添加相应的字符串资源，除了`fragment_home.xml`。对于此布局，请使用在之前练习中使用的相同布局文件。
- en: 'Create the navigation graph as you did in the previous exercise and call it
    `mobile_navigation`. Update it with the code from the file linked below. A truncated
    snippet of the code is shown here. Follow the link to see the full code you need
    to use:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建导航图，就像在上一个练习中一样，并将其命名为`mobile_navigation`。使用下面链接文件中的代码进行更新。以下是代码的截断片段。点击链接查看完整的代码：
- en: '**mobile_navigation.xml**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**mobile_navigation.xml**'
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `onCreateView` function in `HomeFragment` to use the destination
    in the navigation graph to navigate to the `ContentFragment`. You will also need
    to add the following imports:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`HomeFragment`中的`onCreateView`函数，以使用导航图中的目的地导航到`ContentFragment`。您还需要添加以下导入：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that the destinations have been defined in the navigation graph, create
    the menu in the bottom navigation to reference these destinations. First, however,
    you need to gather the icons that will be used in this exercise. Go to the completed
    exercise on GitHub and find the vector assets in the `drawable` folder:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在导航图中已经定义了目的地，创建底部导航中的菜单以引用这些目的地。但首先，您需要收集将在此练习中使用的图标。转到GitHub上的已完成练习，并在`drawable`文件夹中找到矢量资产：
- en: '[http://packt.live/3qvUzJQ](http://packt.live/3qvUzJQ)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://packt.live/3qvUzJQ](http://packt.live/3qvUzJQ)'
- en: 'Copy the following drawables:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 复制以下可绘制对象：
- en: '`cart.xml`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cart.xml`'
- en: '`home.xml`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home.xml`'
- en: '`offers.xml`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offers.xml`'
- en: '`rewards.xml`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rewards.xml`'
- en: '`tickets.xml`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tickets.xml`'
- en: Create a `bottom_nav_menu` (Right click on the `res` folder and select `Android
    Resource File` and select `Menu` using all of these icons except the `cart.xml`
    vector asset which will be used for the top toolbar. Notice that the IDs of the
    items match the IDs in the navigation graph.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`bottom_nav_menu`（右键单击`res`文件夹，选择`Android资源文件`，并选择`Menu`，使用除`cart.xml`矢量资产之外的所有这些图标。请注意，项目的ID与导航图中的ID匹配。
- en: '**bottom_nav_menu.xml**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**bottom_nav_menu.xml**'
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Update the `activity_main.xml` file with the following content:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新`activity_main.xml`文件：
- en: '`BottomNavigation` view is configured with the menu you created previously,
    that is, `app:menu="@menu/bottom_nav_menu"`, while `NavHostFragment` is configured
    with `app:navGraph="@navigation/mobile_navigation"`. As the bottom navigation
    in the app is not connected directly to the app bar, there are fewer layout files
    to set up. This differs from the navigation drawer, which has the hamburger menu
    to toggle the navigation drawer in the app bar.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`BottomNavigation`视图配置了您之前创建的菜单，即`app:menu="@menu/bottom_nav_menu"`，而`NavHostFragment`配置了`app:navGraph="@navigation/mobile_navigation"`。由于应用程序中的底部导航不直接连接到应用栏，因此需要设置的布局文件较少。这与导航抽屉不同，导航抽屉在应用栏中有汉堡菜单来切换导航抽屉。'
- en: 'Update `MainActivity` with the following content:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新`MainActivity`：
- en: '[PRE32]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding code should be very familiar because it was explained in the previous
    exercise. The main change here is that instead of a `NavigationView` that holds
    the main UI navigation for the navigation drawer, it is now replaced with `BottomNavigationView`.
    The configuration after this is the same.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码应该非常熟悉，因为它在之前的练习中已经解释过了。这里的主要变化是，不再使用包含导航抽屉的主UI导航的`NavigationView`，而是用`BottomNavigationView`替换。此后的配置是相同的。
- en: 'Run the app. You should see the following output:![Figure 4.11: Bottom navigation
    with Home selected'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。您应该看到以下输出：![图4.11：底部导航，选择了主页
- en: '](img/B15216_04_11.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_11.jpg)'
- en: 'Figure 4.11: Bottom navigation with Home selected'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11：底部导航，选择了主页
- en: 'The display shows the four menu items you set up, with the `Home` item selected
    as the start destination. Click the square button to be taken to the secondary
    destination within `Home`:![Figure 4.12: Secondary destination within Home'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示了您设置的四个菜单项，其中`Home`项被选择为起始目的地。单击方形按钮将带您到`Home`内的次要目的地：![图4.12：Home内的次要目的地
- en: '](img/B15216_04_12.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_12.jpg)'
- en: 'Figure 4.12: Secondary destination within Home'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12：Home内的次要目的地
- en: 'The action that makes this possible is specified in the navigation graph:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使这成为可能的操作在导航图中指定：
- en: '**mobile_navigation.xml (snippet)**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**mobile_navigation.xml（片段）**'
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Since there is no hamburger menu available in the bottom navigation UI, sometimes,
    action items (those that have a dedicated icon) are added to the app bar. Create
    another menu called `Main` and add the following content:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于底部导航UI中没有汉堡菜单，有时会将操作项（具有专用图标的项）添加到应用栏中。创建另一个名为`Main`的菜单，并添加以下内容：
- en: '**main.xml**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.xml**'
- en: '[PRE34]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This menu will be used in the overflow menu in the app bar. The overflow menu
    will be available when you click on the three dots. A `cart` vector asset will
    also be displayed on the top app bar because the `app:showAsAction` attribute
    is set to `always`. Configure the overflow menu within `MainActivity` by adding
    the following:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此菜单将在应用栏中的溢出菜单中使用。单击三个点时，将显示溢出菜单。`cart`矢量资产也将显示在顶部应用栏上，因为`app:showAsAction`属性设置为`always`。通过添加以下内容在`MainActivity`中配置溢出菜单：
- en: 'Add these two imports at the top of the file:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下两个导入：
- en: '[PRE35]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And then these two functions:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加以下两个函数：
- en: '[PRE36]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This will now display the main menu in the app bar. Run the app again, and
    you''ll see the following:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将在应用栏中显示主菜单。再次运行应用程序，您将看到以下内容：
- en: '![Figure 4.13: Bottom navigation with the overflow menu'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.13：带有溢出菜单的底部导航'
- en: '](img/B15216_04_13.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_13.jpg)'
- en: 'Figure 4.13: Bottom navigation with the overflow menu'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13：带有溢出菜单的底部导航
- en: 'Selecting the shopping cart takes you to the secondary destination we configured
    in the navigation graph:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 选择购物车将带您到我们在导航图中配置的次要目的地：
- en: '![Figure 4.14: Bottom navigation with the Overflow menu in the secondary destination'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.14：带有溢出菜单的底部导航中的次要目的地'
- en: '](img/B15216_04_14.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_14.jpg)'
- en: 'Figure 4.14: Bottom navigation with the Overflow menu in the secondary destination'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14：底部导航与次要目的地中的溢出菜单
- en: As you've seen in this exercise, setting up bottom navigation is quite straightforward.
    The navigation graph and the menu setup make linking the menu items to the fragments
    simple. Additionally, integrating the action bar and the overflow menu are also
    small steps to implement. If you are developing an app that has very well-defined
    top-level destinations and switching between them is important, then the visibility
    of these destinations makes bottom navigation an ideal choice. The final primary
    navigation pattern to explore is tabbed navigation. This is a versatile pattern
    as it can be used as an app's primary navigation, but can also be used as secondary
    navigation with the other navigation patterns we've studied.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在本练习中所见，设置底部导航非常简单。导航图和菜单设置使将菜单项链接到片段变得简单。此外，集成操作栏和溢出菜单也是实现的小步骤。如果您正在开发一个具有非常明确定义的顶级目的地并且在它们之间切换很重要的应用程序，那么这些目的地的可见性使底部导航成为理想选择。要探索的最终主要导航模式是选项卡导航。这是一种多功能模式，因为它可以用作应用程序的主要导航，但也可以与我们学习过的其他导航模式一起用作次要导航。
- en: Tabbed Navigation
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项卡导航
- en: Tabbed navigation is mostly used when you want to display related items. It
    is common to have fixed tabs if there's only a few of them (typically between
    two and five tabs) and scrolling horizontal tabs if you have more than five tabs.
    They are used mostly for grouping destinations that are at the same hierarchical
    level.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡导航主要用于显示相关项目。如果只有少量选项卡（通常在两个到五个选项卡之间），通常会使用固定选项卡，如果有超过五个选项卡，则会使用水平滚动选项卡。它们主要用于对处于相同层次结构级别的目的地进行分组。
- en: This can be the primary navigation if the destinations are related. This might
    be the case if the app you developed is in a narrow or specific subject field
    where the primary destinations are related, such as a news app. More commonly,
    it is used with bottom navigation to present secondary navigation that's available
    within a primary destination. The following exercise demonstrates using tabbed
    navigation for displaying related items.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目的地相关，这可以是主要导航。如果您开发的应用程序属于狭窄或特定主题领域，其中主要目的地相关，比如新闻应用程序，这可能是情况。更常见的是，它与底部导航一起使用，以呈现在主要目的地内可用的次要导航。以下练习演示了使用选项卡导航来显示相关项目。
- en: 'Exercise 4.03: Using Tabs for App Navigation'
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.03：使用选项卡进行应用程序导航
- en: 'Create a new app in Android Studio with an empty activity named `Tab Navigation`.
    You are going to build a skeleton movies app that displays the genres of movies.
    Let''s get started:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为`Tab Navigation`的空活动的新应用程序。您将构建一个显示电影类型的骨架电影应用程序。让我们开始吧：
- en: 'Replace `strings.xml` content and update `themes.xml` in the `res/values` folder:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 替换`res/values`文件夹中的`strings.xml`内容并更新`themes.xml`：
- en: '`<string name="dummy_text">` file specified provides some body text for each
    movie genre:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`<string name="dummy_text">`文件提供了每个电影类型的一些正文文本：'
- en: '**themes.xml**'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**themes.xml**'
- en: '[PRE37]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a single `MoviesFragment` which displays the title of a movie genre
    and some dummy text. The title will be updated dynamically. Then update the movie
    fragment layout:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`MoviesFragment`的单个片段，显示电影类型的标题和一些虚拟文本。标题将动态更新。然后更新电影片段布局：
- en: '`fragment_movies` layout, the `TextView` label with an ID of `movie_type` will
    be updated dynamically with a title. The dummy text you added into the `strings.xml`
    file will be displayed below it.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fragment_movies`布局中，具有ID为`movie_type`的`TextView`标签将动态更新为标题。您添加到`strings.xml`文件中的虚拟文本将显示在其下方。
- en: 'Update `MoviesFragment` with the following content:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新`MoviesFragment`：
- en: '`MoviesFragment`. Since this is done from a companion object, it can be referenced
    directly from another class with static syntax such as `MoviesFragment.newInstance`(`movieGenre`).
    The second point is that the factory method sets the `MOVIE_GENRE` key as a `Bundle`
    argument with the `movieGenre` string so that it can be retrieved from `MoviesFragment`
    at a later date.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`MoviesFragment`。由于这是从伴随对象完成的，因此可以直接从另一个类中使用静态语法引用，例如`MoviesFragment.newInstance`(`movieGenre`)。第二点是工厂方法将`MOVIE_GENRE`键设置为`Bundle`参数，并将`movieGenre`字符串设置为`Bundle`参数，以便以后可以从`MoviesFragment`中检索它。'
- en: 'Update the `activity_main.xml` file with the following content:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新`activity_main.xml`文件：
- en: '[PRE38]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `AppBarLayout` label and the toolbar contained within it are familiar from
    the previous exercises. Below the toolbar, a `TabLayout` label is displayed, which
    will contain the movie tabs. There are various attributes you can use to style
    the tabs. Here you are setting the tabs' height, color and the material ripple
    effect to transparent to not show the normal material style button. To display
    the required content, you are going to use `ViewPager`. `ViewPager` is a swipeable
    layout that allows you to add multiple views or fragments so that when a user
    swipes to change one of the tabs, the body content displays the corresponding
    view or fragment. For this exercise, you are going to swipe between movie fragments.
    The component that provides the data that's used in the `ViewPager` is called
    an adapter.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppBarLayout`标签和其中包含的工具栏在以前的练习中已经很熟悉了。在工具栏下方，显示了一个`TabLayout`标签，其中将包含电影选项卡。您可以使用各种属性来设置选项卡的样式。在这里，您正在设置选项卡的高度、颜色和材料涟漪效果为透明，以不显示正常的材料样式按钮。为了显示所需的内容，您将使用`ViewPager`。`ViewPager`是一个可滑动的布局，允许您添加多个视图或片段，以便当用户滑动以更改其中一个选项卡时，正文内容显示相应的视图或片段。在本练习中，您将在电影片段之间滑动。提供在`ViewPager`中使用的数据的组件称为适配器。'
- en: 'Create a simple adapter that will be used to display our movies. Call it `MovieGenresPagerAdapter`:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的适配器，用于显示我们的电影。将其命名为`MovieGenresPagerAdapter`：
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: First, look at the `MovieGenresPagerAdapter` class header. It extends from `FragmentPagerAdapter`,
    which is an adapter used specifically for swiping. This is also called paging
    through fragments. `FragmentPagerAdapter` is used when you have a defined number
    of fragments that isn't too large. Since you are using it for a set of tabs, this
    is ideal.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看一下`MovieGenresPagerAdapter`类头部。它扩展自`FragmentPagerAdapter`，这是专门用于滑动的适配器。这也称为通过片段进行分页。当您有一组不太大的定义的片段时，使用`FragmentPagerAdapter`是理想的。由于您将其用于一组选项卡，这是理想的。
- en: Since `FragmentPagerAdapter` keeps the fragments in memory when it's not on
    the screen, it is not suitable for a large number of fragments. In this case,
    you would use a `FragmentStatePagerAdpater`, which can recycle the fragments when
    they are not on screen.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`FragmentPagerAdapter`在不在屏幕上时保留片段在内存中，因此不适用于大量片段。在这种情况下，您将使用`FragmentStatePagerAdpater`，它可以在不在屏幕上时回收片段。
- en: When creating `FragmentPagerAdapter`, you pass in a `FragmentManager`, which
    is responsible for managing the fragments used in the activity. The `BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT`
    flag only keeps the current fragment in a state where it's available for the user
    to interact with (`RESUMED`). The other fragments are in the `STARTED` state,
    which means they can be visible when swiping, for instance, but not active.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`FragmentPagerAdapter`时，传入一个`FragmentManager`，负责管理活动中使用的片段。`BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT`标志只保留当前片段处于用户可交互状态（`RESUMED`）的状态。其他片段处于`STARTED`状态，这意味着它们可以在滑动时可见，但不活动。
- en: 'The callback method''s functions are as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 回调方法的功能如下：
- en: '`getCount()`: This method returns the total number of items to be displayed.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCount()`: 此方法返回要显示的项目总数。'
- en: '`getPageTitle(position: Int): CharSequence?`: This retrieves the genre title
    at the specified position in the list by using a specific position.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPageTitle(position: Int): CharSequence?`: 这通过使用特定位置检索列表中指定位置的流派标题。'
- en: '`getItem(position: Int): Fragment`: This gets `MoviesFragment` at this position
    in the list (or creates a new `MoviesFragment` if it''s being accessed for the
    first time) by passing in the genre title you want to display in the fragment.
    Once created, `MoviesFragment` will be kept in memory.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getItem(position: Int): Fragment`: 这在列表中的此位置获取`MoviesFragment`（或者如果首次访问，则创建新的`MoviesFragment`），通过传入要在片段中显示的流派标题。创建后，`MoviesFragment`将保留在内存中。'
- en: Tabs can be either fixed or scrollable. The first example you'll see is with
    fixed tabs. As `TAB_GENRES_FIXED` is being used in all these methods, only three
    tabs will be displayed. This does not, however, set `TabLayout` as fixed or scrollable.
    This needs to be done in the Activity.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡可以是固定的或可滚动的。您将看到的第一个示例是带有固定选项卡的。由于所有这些方法都使用了`TAB_GENRES_FIXED`，因此只会显示三个选项卡。但是，这并没有将`TabLayout`设置为固定或可滚动。这需要在活动中完成。
- en: 'Update `MainActivity` so that it uses tabs with `ViewPager`:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`MainActivity`，使其使用带有`ViewPager`的选项卡：
- en: '[PRE40]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `onCreate` method, after setting the layout, set up the app bar so that
    it uses the toolbar:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中，在设置布局之后，设置应用栏，使其使用工具栏：
- en: '[PRE41]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Set up the data to be displayed in the swipeable `ViewPager` so that it comes
    from `MovieGenresPagerAdapter`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置要在可滑动的`ViewPager`中显示的数据，以来自`MovieGenresPagerAdapter`：
- en: '[PRE42]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Set `TabLayout` up so that it displays the configured `ViewPager`:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`TabLayout`，以显示配置的`ViewPager`：
- en: '[PRE43]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This takes care of settings the tab titles and making the tab body content
    swipeable. `tabMode` has been set to `FIXED` (`tabs.tabMode = TabLayout.MODE_FIXED`)
    so that the tabs will be laid out uniformly with a width that''s equal to the
    width of the screen. Now, run the app. You should see the following:![Figure 4.15:
    Tab layout with fixed tabs'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这负责设置选项卡标题并使选项卡主体内容可滑动。`tabMode`已设置为`FIXED`（`tabs.tabMode = TabLayout.MODE_FIXED`），以便选项卡将以与屏幕宽度相等的宽度均匀布局。现在运行应用程序。你应该看到以下内容：![图4.15：带有固定选项卡的选项卡布局
- en: '](img/B15216_04_15.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_15.jpg)'
- en: 'Figure 4.15: Tab layout with fixed tabs'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15：带有固定选项卡的选项卡布局
- en: You can swipe left and right in the body of the page to go to each of the three
    tabs, and you can also select one of the respective tabs to perform the same action.
    Now, let's change the tab data that's being displayed and set the tabs so that
    they can be scrolled through.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在页面的主体中左右滑动，以转到三个选项卡中的每一个，并且还可以选择其中一个选项卡来执行相同的操作。现在，让我们更改正在显示的选项卡数据，并设置选项卡，以便可以滚动浏览。
- en: 'First, change `MovieGenresPagerAdapter` so that it uses a few extra genres:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，更改`MovieGenresPagerAdapter`，使其使用一些额外的流派：
- en: '[PRE44]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In `MainActivity`, set `tabMode` so that it''s scrollable:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`中，设置`tabMode`，使其可滚动：
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Run the app. You should see the following:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。你应该看到以下内容：
- en: '![Figure 4.16: Tab layout with scrollable tabs'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.16：带有可滚动选项卡的选项卡布局'
- en: '](img/B15216_04_16.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_16.jpg)'
- en: 'Figure 4.16: Tab layout with scrollable tabs'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16：带有可滚动选项卡的选项卡布局
- en: The list of tabs continues to display off the screen. The tabs can be swiped
    and selected, and the body content can also be swiped so that you can go left
    and right through the tab pages.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡列表继续显示在屏幕外。可以滑动和选择选项卡，并且主体内容也可以滑动，这样你就可以通过选项卡页面左右移动。
- en: With this exercise, you've learned how versatile tabs are when it comes to providing
    navigation in an app. Fixed width tabs can be used for both primary and secondary
    navigation, while scrollable tabs can be used to group related items together
    for secondary navigation. Scrollable tabs act as secondary navigation, so you
    need to add primary navigation to the app as well. In this example, the primary
    navigation has been omitted for simplicity, but for more real world and complex
    apps you can either add a navigation drawer or bottom navigation.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，你学会了选项卡在应用程序中提供导航时的多功能性。固定宽度的选项卡可以用于主要和次要导航，而可滚动的选项卡可以用于将相关项目分组进行次要导航。可滚动选项卡充当次要导航，因此您还需要向应用程序添加主要导航。在这个例子中，出于简单起见，主要导航已被省略，但对于更真实世界和复杂的应用程序，您可以添加导航抽屉或底部导航。
- en: 'Activity 4.01: Building Primary and Secondary App Navigation'
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动4.01：构建主要和次要应用程序导航
- en: You have been tasked with creating a sports app. It can have three or more top-level
    destinations. One of the primary destinations, however, must be called `My Sports`
    and should link to one or more secondary destinations, which are sports. You can
    use any one of the navigation patterns we have explored in this chapter, or a
    combination of them, and you can also introduce any customizations that you feel
    are appropriate. Each destination the user is currently in should be displayed
    in the `App` bar.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 您的任务是创建一个体育应用程序。它可以有三个或更多的顶级目的地。但是，其中一个主要目的地必须称为“我的体育”，并且应链接到一个或多个次要目的地，即体育项目。您可以使用本章中探讨过的任何一种导航模式，或它们的组合，还可以引入您认为合适的任何自定义。用户当前所在的每个目的地都应显示在“应用”栏中。
- en: 'There are different ways of attempting this activity. One approach would be
    to use bottom navigation and add the individual secondary sports destinations
    to the navigation graph so that it can link to these destinations. It is fairly
    simple and delegates to the navigation graph using actions. Here is what the home
    screen should look like after using this approach:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法可以尝试这个活动。一种方法是使用底部导航，并将各个次要体育目的地添加到导航图中，以便可以链接到这些目的地。这相当简单，并通过操作委托给导航图。使用此方法后，主屏幕应如下所示：
- en: '![Figure 4.17: Bottom navigation for the My Sports app'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.17：我的体育应用的底部导航'
- en: '](img/B15216_04_17.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_04_17.jpg)'
- en: 'Figure 4.17: Bottom navigation for the My Sports app'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17：我的体育应用的底部导航
- en: Note
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: http://packt.live/3sKj1cp'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：http://packt.live/3sKj1cp
- en: 'The sources for all the exercises and the activity in this chapter are located
    here: [http://packt.live/39IAjxL](http://packt.live/39IAjxL)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有练习和活动的来源位于此处：[http://packt.live/39IAjxL](http://packt.live/39IAjxL)
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered the most important navigation techniques you need to
    know about in order to create clear and consistent navigation in your apps. You
    started off by learning how to create an Android Studio project with a navigation
    drawer to connect navigation menu items to individual fragments using Jetpack
    navigation. You then progressed to actions within Jetpack navigation to navigate
    to other secondary destinations in your app within the navigation graph.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了您需要了解的最重要的导航技术，以便在应用程序中创建清晰和一致的导航。您首先学习了如何使用Jetpack导航在Android Studio项目中创建导航抽屉，将导航菜单项连接到单独的片段。然后，您进一步了解了Jetpack导航中的操作，以在导航图中导航到应用程序中的其他次要目的地。
- en: The next exercise then used bottom navigation to display primary navigation
    destinations that are always visible on the screen. We followed this by looking
    at tabbed navigation, where you learned how to display both fixed and scrollable
    tabs. For each different navigational pattern, you were shown when it might be
    more suitable to use, depending on the type of app you were building. We finished
    this chapter by building our own app using one or more of these navigational patterns
    and adding both primary and secondary destinations.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的练习使用底部导航来显示始终可见于屏幕上的主要导航目的地。然后我们看了标签式导航，您学会了如何显示固定和可滚动的标签。对于每种不同的导航模式，您都会看到在构建应用程序时何时更适合使用。我们通过构建我们自己的应用程序并添加主要和次要目的地来完成了本章。
- en: This chapter has built upon the comprehensive introduction we provided to Android with
    Android Studio in *Chapter 1*, *Creating Your First App*, as well as what you
    learned about activities and fragments in *Chapter 2*, *Building User Screen Flows*,
    and *Chapter 3*, *Developing the UI with Fragments*. These chapters covered the
    knowledge, practice, and fundamental Android components you need to create apps.
    This chapter has tied these previous chapters together by guiding you through
    the primary navigational patterns available to make your apps stand out and be
    easy to use.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 本章建立在我们在*第1章*中提供的关于使用Android Studio创建Android的全面介绍的基础上，以及您在*第2章*和*第3章*中学到的有关活动和片段的知识，以及使用片段开发UI的知识。这些章节涵盖了您创建应用程序所需的知识、实践和基本Android组件。本章通过引导您了解可用的主要导航模式，将这些先前的章节联系在一起，使您的应用程序脱颖而出并易于使用。
- en: The next chapter will build on these concepts and introduce you to more advanced
    ways of displaying app content. You will start off by learning about binding data
    with lists using `RecyclerView`. After that, you will explore the different mechanisms
    you can use to retrieve and populate content within apps.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将在这些概念的基础上构建，并向您介绍更高级的显示应用内容的方法。您将首先学习使用`RecyclerView`将数据与列表绑定。之后，您将探索可以用于检索和填充应用程序内容的不同机制。
